
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005aa  00800200  00005e02  00005e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005e02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c47  008007aa  008007aa  00006440  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000649c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a80  00000000  00000000  000064dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cf0f  00000000  00000000  00006f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000341f  00000000  00000000  00013e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006829  00000000  00000000  0001728a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000257c  00000000  00000000  0001dab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003fc5  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b7af  00000000  00000000  00023ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c8  00000000  00000000  0002f7a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c4       	rjmp	.+2242   	; 0x8f4 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <__vector_25>
      68:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <__vector_36>
      94:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 8c 23 	jmp	0x4718	; 0x4718 <__vector_51>
      d0:	0c 94 de 23 	jmp	0x47bc	; 0x47bc <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 22 24 	jmp	0x4844	; 0x4844 <__vector_54>
      dc:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5a 17       	cp	r21, r26
      e6:	5a 17       	cp	r21, r26
      e8:	5a 17       	cp	r21, r26
      ea:	91 17       	cp	r25, r17
      ec:	99 17       	cp	r25, r25
      ee:	ae 17       	cp	r26, r30
      f0:	5a 17       	cp	r21, r26
      f2:	5a 17       	cp	r21, r26
      f4:	91 17       	cp	r25, r17
      f6:	99 17       	cp	r25, r25
      f8:	b6 27       	eor	r27, r22
      fa:	26 28       	or	r2, r6
      fc:	26 28       	or	r2, r6
      fe:	26 28       	or	r2, r6
     100:	26 28       	or	r2, r6
     102:	26 28       	or	r2, r6
     104:	26 28       	or	r2, r6
     106:	26 28       	or	r2, r6
     108:	b6 27       	eor	r27, r22
     10a:	26 28       	or	r2, r6
     10c:	26 28       	or	r2, r6
     10e:	26 28       	or	r2, r6
     110:	26 28       	or	r2, r6
     112:	26 28       	or	r2, r6
     114:	26 28       	or	r2, r6
     116:	26 28       	or	r2, r6
     118:	b8 27       	eor	r27, r24
     11a:	26 28       	or	r2, r6
     11c:	26 28       	or	r2, r6
     11e:	26 28       	or	r2, r6
     120:	26 28       	or	r2, r6
     122:	26 28       	or	r2, r6
     124:	26 28       	or	r2, r6
     126:	26 28       	or	r2, r6
     128:	26 28       	or	r2, r6
     12a:	26 28       	or	r2, r6
     12c:	26 28       	or	r2, r6
     12e:	26 28       	or	r2, r6
     130:	26 28       	or	r2, r6
     132:	26 28       	or	r2, r6
     134:	26 28       	or	r2, r6
     136:	26 28       	or	r2, r6
     138:	b8 27       	eor	r27, r24
     13a:	26 28       	or	r2, r6
     13c:	26 28       	or	r2, r6
     13e:	26 28       	or	r2, r6
     140:	26 28       	or	r2, r6
     142:	26 28       	or	r2, r6
     144:	26 28       	or	r2, r6
     146:	26 28       	or	r2, r6
     148:	26 28       	or	r2, r6
     14a:	26 28       	or	r2, r6
     14c:	26 28       	or	r2, r6
     14e:	26 28       	or	r2, r6
     150:	26 28       	or	r2, r6
     152:	26 28       	or	r2, r6
     154:	26 28       	or	r2, r6
     156:	26 28       	or	r2, r6
     158:	22 28       	or	r2, r2
     15a:	26 28       	or	r2, r6
     15c:	26 28       	or	r2, r6
     15e:	26 28       	or	r2, r6
     160:	26 28       	or	r2, r6
     162:	26 28       	or	r2, r6
     164:	26 28       	or	r2, r6
     166:	26 28       	or	r2, r6
     168:	ed 27       	eor	r30, r29
     16a:	26 28       	or	r2, r6
     16c:	26 28       	or	r2, r6
     16e:	26 28       	or	r2, r6
     170:	26 28       	or	r2, r6
     172:	26 28       	or	r2, r6
     174:	26 28       	or	r2, r6
     176:	26 28       	or	r2, r6
     178:	26 28       	or	r2, r6
     17a:	26 28       	or	r2, r6
     17c:	26 28       	or	r2, r6
     17e:	26 28       	or	r2, r6
     180:	26 28       	or	r2, r6
     182:	26 28       	or	r2, r6
     184:	26 28       	or	r2, r6
     186:	26 28       	or	r2, r6
     188:	e1 27       	eor	r30, r17
     18a:	26 28       	or	r2, r6
     18c:	26 28       	or	r2, r6
     18e:	26 28       	or	r2, r6
     190:	26 28       	or	r2, r6
     192:	26 28       	or	r2, r6
     194:	26 28       	or	r2, r6
     196:	26 28       	or	r2, r6
     198:	05 28       	or	r0, r5

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <prvCheckTasksWaitingTermination>
     19e:	80 91 cf 11 	lds	r24, 0x11CF	; 0x8011cf <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	e0 d2       	rcall	.+1472   	; 0x768 <vPortYield>
     1a8:	0e 94 d7 17 	call	0x2fae	; 0x2fae <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 d7 14 	call	0x29ae	; 0x29ae <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 23 17 	call	0x2e46	; 0x2e46 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e2 e0       	ldi	r30, 0x02	; 2
     1e4:	fe e5       	ldi	r31, 0x5E	; 94
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	aa 3a       	cpi	r26, 0xAA	; 170
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	23 e1       	ldi	r18, 0x13	; 19
     1f8:	aa ea       	ldi	r26, 0xAA	; 170
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a1 3f       	cpi	r26, 0xF1	; 241
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 03 1b 	call	0x3606	; 0x3606 <main>
     20a:	0c 94 ff 2e 	jmp	0x5dfe	; 0x5dfe <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <initializeSharedDataQueue>:
SharedData receiveSharedData;
SharedData sharedData;

void initializeSharedDataQueue()
{
	xQueueShared = xQueueCreate(5, sizeof(SharedData));
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	66 e0       	ldi	r22, 0x06	; 6
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	8d d4       	rcall	.+2330   	; 0xb32 <xQueueGenericCreate>
     218:	90 93 da 13 	sts	0x13DA, r25	; 0x8013da <xQueueShared+0x1>
     21c:	80 93 d9 13 	sts	0x13D9, r24	; 0x8013d9 <xQueueShared>
     220:	08 95       	ret

00000222 <enqueueSharedData>:
}

void enqueueSharedData()
{
     222:	cf 92       	push	r12
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
	//uint16_t co2 = dequeueCO2Measure();
	int16_t temp = dequeueTempMeasure();
     232:	0e 94 00 19 	call	0x3200	; 0x3200 <dequeueTempMeasure>
     236:	d8 2e       	mov	r13, r24
     238:	c9 2e       	mov	r12, r25
	uint16_t hum = dequeueHumidityMeasure();
     23a:	0e 94 1a 19 	call	0x3234	; 0x3234 <dequeueHumidityMeasure>
     23e:	f8 2e       	mov	r15, r24
     240:	e9 2e       	mov	r14, r25
	
	int counter = 0;
	uint16_t co2 = 0;
     242:	c0 e0       	ldi	r28, 0x00	; 0
     244:	d0 e0       	ldi	r29, 0x00	; 0
{
	//uint16_t co2 = dequeueCO2Measure();
	int16_t temp = dequeueTempMeasure();
	uint16_t hum = dequeueHumidityMeasure();
	
	int counter = 0;
     246:	00 e0       	ldi	r16, 0x00	; 0
     248:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t co2 = 0;
	int divider = 10;
	int res = 0;
	while (counter < 10) {
     24a:	12 c0       	rjmp	.+36     	; 0x270 <enqueueSharedData+0x4e>
		co2 += dequeueCO2Measure();
     24c:	0e 94 3d 18 	call	0x307a	; 0x307a <dequeueCO2Measure>
     250:	c8 0f       	add	r28, r24
     252:	d9 1f       	adc	r29, r25
		printf("CO2: %d \n", co2);
     254:	df 93       	push	r29
     256:	cf 93       	push	r28
     258:	8f e6       	ldi	r24, 0x6F	; 111
     25a:	92 e0       	ldi	r25, 0x02	; 2
     25c:	9f 93       	push	r25
     25e:	8f 93       	push	r24
     260:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
		counter++;
     264:	0f 5f       	subi	r16, 0xFF	; 255
     266:	1f 4f       	sbci	r17, 0xFF	; 255
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
	
	int counter = 0;
	uint16_t co2 = 0;
	int divider = 10;
	int res = 0;
	while (counter < 10) {
     270:	0a 30       	cpi	r16, 0x0A	; 10
     272:	11 05       	cpc	r17, r1
     274:	5c f3       	brlt	.-42     	; 0x24c <enqueueSharedData+0x2a>
		co2 += dequeueCO2Measure();
		printf("CO2: %d \n", co2);
		counter++;
	}
	res = (co2 / divider);
     276:	9e 01       	movw	r18, r28
     278:	ad ec       	ldi	r26, 0xCD	; 205
     27a:	bc ec       	ldi	r27, 0xCC	; 204
     27c:	0e 94 34 2a 	call	0x5468	; 0x5468 <__umulhisi3>
     280:	ec 01       	movw	r28, r24
     282:	d6 95       	lsr	r29
     284:	c7 95       	ror	r28
     286:	d6 95       	lsr	r29
     288:	c7 95       	ror	r28
     28a:	d6 95       	lsr	r29
     28c:	c7 95       	ror	r28
	printf("c02 som float %d: \n", res);
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	89 e7       	ldi	r24, 0x79	; 121
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	9f 93       	push	r25
     298:	8f 93       	push	r24
     29a:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
	
	


	SharedData_t shared = &sharedData;
	shared->co2 = co2;
     29e:	e3 ed       	ldi	r30, 0xD3	; 211
     2a0:	f3 e1       	ldi	r31, 0x13	; 19
     2a2:	d1 83       	std	Z+1, r29	; 0x01
     2a4:	c0 83       	st	Z, r28
	shared->temperature = temp;
     2a6:	d2 82       	std	Z+2, r13	; 0x02
     2a8:	c3 82       	std	Z+3, r12	; 0x03
	shared->humidity = hum;
     2aa:	f4 82       	std	Z+4, r15	; 0x04
     2ac:	e5 82       	std	Z+5, r14	; 0x05

	printf("ENQUEUE: humidity: %d, co2: %d, Temp: %d \n", shared->humidity, shared->co2, shared->temperature);
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	df 93       	push	r29
     2b4:	cf 93       	push	r28
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
     2ba:	8d e8       	ldi	r24, 0x8D	; 141
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	9f 93       	push	r25
     2c0:	8f 93       	push	r24
     2c2:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>

	xQueueSend(xQueueShared, (void*)&sharedData, portMAX_DELAY);
     2c6:	00 e0       	ldi	r16, 0x00	; 0
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	3f ef       	ldi	r19, 0xFF	; 255
     2cc:	a9 01       	movw	r20, r18
     2ce:	63 ed       	ldi	r22, 0xD3	; 211
     2d0:	73 e1       	ldi	r23, 0x13	; 19
     2d2:	80 91 d9 13 	lds	r24, 0x13D9	; 0x8013d9 <xQueueShared>
     2d6:	90 91 da 13 	lds	r25, 0x13DA	; 0x8013da <xQueueShared+0x1>
     2da:	4e d4       	rcall	.+2204   	; 0xb78 <xQueueGenericSend>

}
     2dc:	8d b7       	in	r24, 0x3d	; 61
     2de:	9e b7       	in	r25, 0x3e	; 62
     2e0:	0c 96       	adiw	r24, 0x0c	; 12
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	9e bf       	out	0x3e, r25	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	8d bf       	out	0x3d, r24	; 61
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	ff 90       	pop	r15
     2f6:	ef 90       	pop	r14
     2f8:	df 90       	pop	r13
     2fa:	cf 90       	pop	r12
     2fc:	08 95       	ret

000002fe <dequeueSharedData>:

SharedData_t dequeueSharedData() {
	SharedData_t data = &receiveSharedData;
	xQueueReceive(xQueueShared, &receiveSharedData, (TickType_t) 10);
     2fe:	2a e0       	ldi	r18, 0x0A	; 10
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e0       	ldi	r20, 0x00	; 0
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	6b ed       	ldi	r22, 0xDB	; 219
     308:	73 e1       	ldi	r23, 0x13	; 19
     30a:	80 91 d9 13 	lds	r24, 0x13D9	; 0x8013d9 <xQueueShared>
     30e:	90 91 da 13 	lds	r25, 0x13DA	; 0x8013da <xQueueShared+0x1>
     312:	fd d4       	rcall	.+2554   	; 0xd0e <xQueueReceive>
	return data;
}
     314:	8b ed       	ldi	r24, 0xDB	; 219
     316:	93 e1       	ldi	r25, 0x13	; 19
     318:	08 95       	ret

0000031a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     31a:	e6 eb       	ldi	r30, 0xB6	; 182
     31c:	f7 e0       	ldi	r31, 0x07	; 7
     31e:	aa eb       	ldi	r26, 0xBA	; 186
     320:	b7 e0       	ldi	r27, 0x07	; 7
     322:	b1 83       	std	Z+1, r27	; 0x01
     324:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     326:	13 82       	std	Z+3, r1	; 0x03
     328:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     32a:	ea e7       	ldi	r30, 0x7A	; 122
     32c:	f1 e1       	ldi	r31, 0x11	; 17
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     32e:	f0 93 b5 07 	sts	0x07B5, r31	; 0x8007b5 <pxEnd+0x1>
     332:	e0 93 b4 07 	sts	0x07B4, r30	; 0x8007b4 <pxEnd>
    pxEnd->xBlockSize = 0;
     336:	13 82       	std	Z+3, r1	; 0x03
     338:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     33a:	11 82       	std	Z+1, r1	; 0x01
     33c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     33e:	80 ec       	ldi	r24, 0xC0	; 192
     340:	99 e0       	ldi	r25, 0x09	; 9
     342:	13 96       	adiw	r26, 0x03	; 3
     344:	9c 93       	st	X, r25
     346:	8e 93       	st	-X, r24
     348:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     34a:	ed 93       	st	X+, r30
     34c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     34e:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <xMinimumEverFreeBytesRemaining+0x1>
     352:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     356:	90 93 b3 07 	sts	0x07B3, r25	; 0x8007b3 <xFreeBytesRemaining+0x1>
     35a:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e8       	ldi	r25, 0x80	; 128
     362:	90 93 ab 07 	sts	0x07AB, r25	; 0x8007ab <__data_end+0x1>
     366:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <__data_end>
     36a:	08 95       	ret

0000036c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     372:	a6 eb       	ldi	r26, 0xB6	; 182
     374:	b7 e0       	ldi	r27, 0x07	; 7
     376:	01 c0       	rjmp	.+2      	; 0x37a <prvInsertBlockIntoFreeList+0xe>
     378:	df 01       	movw	r26, r30
     37a:	ed 91       	ld	r30, X+
     37c:	fc 91       	ld	r31, X
     37e:	11 97       	sbiw	r26, 0x01	; 1
     380:	ec 17       	cp	r30, r28
     382:	fd 07       	cpc	r31, r29
     384:	c8 f3       	brcs	.-14     	; 0x378 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     386:	12 96       	adiw	r26, 0x02	; 2
     388:	8d 91       	ld	r24, X+
     38a:	9c 91       	ld	r25, X
     38c:	13 97       	sbiw	r26, 0x03	; 3
     38e:	9d 01       	movw	r18, r26
     390:	28 0f       	add	r18, r24
     392:	39 1f       	adc	r19, r25
     394:	c2 17       	cp	r28, r18
     396:	d3 07       	cpc	r29, r19
     398:	49 f4       	brne	.+18     	; 0x3ac <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     39a:	2a 81       	ldd	r18, Y+2	; 0x02
     39c:	3b 81       	ldd	r19, Y+3	; 0x03
     39e:	82 0f       	add	r24, r18
     3a0:	93 1f       	adc	r25, r19
     3a2:	13 96       	adiw	r26, 0x03	; 3
     3a4:	9c 93       	st	X, r25
     3a6:	8e 93       	st	-X, r24
     3a8:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     3aa:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
     3ae:	9b 81       	ldd	r25, Y+3	; 0x03
     3b0:	9e 01       	movw	r18, r28
     3b2:	28 0f       	add	r18, r24
     3b4:	39 1f       	adc	r19, r25
     3b6:	e2 17       	cp	r30, r18
     3b8:	f3 07       	cpc	r31, r19
     3ba:	c1 f4       	brne	.+48     	; 0x3ec <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     3bc:	20 91 b4 07 	lds	r18, 0x07B4	; 0x8007b4 <pxEnd>
     3c0:	30 91 b5 07 	lds	r19, 0x07B5	; 0x8007b5 <pxEnd+0x1>
     3c4:	e2 17       	cp	r30, r18
     3c6:	f3 07       	cpc	r31, r19
     3c8:	71 f0       	breq	.+28     	; 0x3e6 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     3ca:	22 81       	ldd	r18, Z+2	; 0x02
     3cc:	33 81       	ldd	r19, Z+3	; 0x03
     3ce:	82 0f       	add	r24, r18
     3d0:	93 1f       	adc	r25, r19
     3d2:	9b 83       	std	Y+3, r25	; 0x03
     3d4:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     3d6:	ed 91       	ld	r30, X+
     3d8:	fc 91       	ld	r31, X
     3da:	11 97       	sbiw	r26, 0x01	; 1
     3dc:	80 81       	ld	r24, Z
     3de:	91 81       	ldd	r25, Z+1	; 0x01
     3e0:	99 83       	std	Y+1, r25	; 0x01
     3e2:	88 83       	st	Y, r24
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     3e6:	39 83       	std	Y+1, r19	; 0x01
     3e8:	28 83       	st	Y, r18
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     3ec:	f9 83       	std	Y+1, r31	; 0x01
     3ee:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     3f0:	ca 17       	cp	r28, r26
     3f2:	db 07       	cpc	r29, r27
     3f4:	11 f0       	breq	.+4      	; 0x3fa <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     3f6:	cd 93       	st	X+, r28
     3f8:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     40e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     412:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <pxEnd>
     416:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <pxEnd+0x1>
     41a:	89 2b       	or	r24, r25
     41c:	09 f4       	brne	.+2      	; 0x420 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     41e:	7d df       	rcall	.-262    	; 0x31a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     420:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <__data_end>
     424:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <__data_end+0x1>
     428:	80 23       	and	r24, r16
     42a:	91 23       	and	r25, r17
     42c:	89 2b       	or	r24, r25
     42e:	09 f0       	breq	.+2      	; 0x432 <pvPortMalloc+0x32>
     430:	76 c0       	rjmp	.+236    	; 0x51e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     432:	01 15       	cp	r16, r1
     434:	11 05       	cpc	r17, r1
     436:	49 f0       	breq	.+18     	; 0x44a <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     438:	c8 01       	movw	r24, r16
     43a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     43c:	08 17       	cp	r16, r24
     43e:	19 07       	cpc	r17, r25
     440:	18 f0       	brcs	.+6      	; 0x448 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     442:	00 e0       	ldi	r16, 0x00	; 0
     444:	10 e0       	ldi	r17, 0x00	; 0
     446:	01 c0       	rjmp	.+2      	; 0x44a <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     448:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     44a:	01 15       	cp	r16, r1
     44c:	11 05       	cpc	r17, r1
     44e:	09 f4       	brne	.+2      	; 0x452 <pvPortMalloc+0x52>
     450:	69 c0       	rjmp	.+210    	; 0x524 <pvPortMalloc+0x124>
     452:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <xFreeBytesRemaining>
     456:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <xFreeBytesRemaining+0x1>
     45a:	80 17       	cp	r24, r16
     45c:	91 07       	cpc	r25, r17
     45e:	08 f4       	brcc	.+2      	; 0x462 <pvPortMalloc+0x62>
     460:	64 c0       	rjmp	.+200    	; 0x52a <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     462:	c0 91 b6 07 	lds	r28, 0x07B6	; 0x8007b6 <xStart>
     466:	d0 91 b7 07 	lds	r29, 0x07B7	; 0x8007b7 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     46a:	e6 eb       	ldi	r30, 0xB6	; 182
     46c:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     46e:	02 c0       	rjmp	.+4      	; 0x474 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     470:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     472:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     474:	8a 81       	ldd	r24, Y+2	; 0x02
     476:	9b 81       	ldd	r25, Y+3	; 0x03
     478:	80 17       	cp	r24, r16
     47a:	91 07       	cpc	r25, r17
     47c:	20 f4       	brcc	.+8      	; 0x486 <pvPortMalloc+0x86>
     47e:	88 81       	ld	r24, Y
     480:	99 81       	ldd	r25, Y+1	; 0x01
     482:	00 97       	sbiw	r24, 0x00	; 0
     484:	a9 f7       	brne	.-22     	; 0x470 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     486:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <pxEnd>
     48a:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <pxEnd+0x1>
     48e:	c8 17       	cp	r28, r24
     490:	d9 07       	cpc	r29, r25
     492:	09 f4       	brne	.+2      	; 0x496 <pvPortMalloc+0x96>
     494:	4d c0       	rjmp	.+154    	; 0x530 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     496:	e0 80       	ld	r14, Z
     498:	f1 80       	ldd	r15, Z+1	; 0x01
     49a:	84 e0       	ldi	r24, 0x04	; 4
     49c:	e8 0e       	add	r14, r24
     49e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     4a0:	88 81       	ld	r24, Y
     4a2:	99 81       	ldd	r25, Y+1	; 0x01
     4a4:	91 83       	std	Z+1, r25	; 0x01
     4a6:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4a8:	2a 81       	ldd	r18, Y+2	; 0x02
     4aa:	3b 81       	ldd	r19, Y+3	; 0x03
     4ac:	20 1b       	sub	r18, r16
     4ae:	31 0b       	sbc	r19, r17
     4b0:	29 30       	cpi	r18, 0x09	; 9
     4b2:	31 05       	cpc	r19, r1
     4b4:	48 f0       	brcs	.+18     	; 0x4c8 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     4b6:	ce 01       	movw	r24, r28
     4b8:	80 0f       	add	r24, r16
     4ba:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     4bc:	fc 01       	movw	r30, r24
     4be:	33 83       	std	Z+3, r19	; 0x03
     4c0:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     4c2:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     4c4:	0a 83       	std	Y+2, r16	; 0x02
     4c6:	52 df       	rcall	.-348    	; 0x36c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     4c8:	2a 81       	ldd	r18, Y+2	; 0x02
     4ca:	3b 81       	ldd	r19, Y+3	; 0x03
     4cc:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <xFreeBytesRemaining>
     4d0:	90 91 b3 07 	lds	r25, 0x07B3	; 0x8007b3 <xFreeBytesRemaining+0x1>
     4d4:	82 1b       	sub	r24, r18
     4d6:	93 0b       	sbc	r25, r19
     4d8:	90 93 b3 07 	sts	0x07B3, r25	; 0x8007b3 <xFreeBytesRemaining+0x1>
     4dc:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     4e0:	40 91 b0 07 	lds	r20, 0x07B0	; 0x8007b0 <xMinimumEverFreeBytesRemaining>
     4e4:	50 91 b1 07 	lds	r21, 0x07B1	; 0x8007b1 <xMinimumEverFreeBytesRemaining+0x1>
     4e8:	84 17       	cp	r24, r20
     4ea:	95 07       	cpc	r25, r21
     4ec:	20 f4       	brcc	.+8      	; 0x4f6 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     4ee:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <xMinimumEverFreeBytesRemaining+0x1>
     4f2:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     4f6:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <__data_end>
     4fa:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <__data_end+0x1>
     4fe:	28 2b       	or	r18, r24
     500:	39 2b       	or	r19, r25
     502:	3b 83       	std	Y+3, r19	; 0x03
     504:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     506:	19 82       	std	Y+1, r1	; 0x01
     508:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     50a:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <xNumberOfSuccessfulAllocations>
     50e:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <xNumberOfSuccessfulAllocations+0x1>
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <xNumberOfSuccessfulAllocations+0x1>
     518:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <xNumberOfSuccessfulAllocations>
     51c:	0b c0       	rjmp	.+22     	; 0x534 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     51e:	e1 2c       	mov	r14, r1
     520:	f1 2c       	mov	r15, r1
     522:	08 c0       	rjmp	.+16     	; 0x534 <pvPortMalloc+0x134>
     524:	e1 2c       	mov	r14, r1
     526:	f1 2c       	mov	r15, r1
     528:	05 c0       	rjmp	.+10     	; 0x534 <pvPortMalloc+0x134>
     52a:	e1 2c       	mov	r14, r1
     52c:	f1 2c       	mov	r15, r1
     52e:	02 c0       	rjmp	.+4      	; 0x534 <pvPortMalloc+0x134>
     530:	e1 2c       	mov	r14, r1
     532:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     534:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     538:	e1 14       	cp	r14, r1
     53a:	f1 04       	cpc	r15, r1
     53c:	11 f4       	brne	.+4      	; 0x542 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     53e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     542:	c7 01       	movw	r24, r14
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	08 95       	ret

00000552 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     55a:	00 97       	sbiw	r24, 0x00	; 0
     55c:	91 f1       	breq	.+100    	; 0x5c2 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     55e:	ec 01       	movw	r28, r24
     560:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     562:	4a 81       	ldd	r20, Y+2	; 0x02
     564:	5b 81       	ldd	r21, Y+3	; 0x03
     566:	20 91 aa 07 	lds	r18, 0x07AA	; 0x8007aa <__data_end>
     56a:	30 91 ab 07 	lds	r19, 0x07AB	; 0x8007ab <__data_end+0x1>
     56e:	ba 01       	movw	r22, r20
     570:	62 23       	and	r22, r18
     572:	73 23       	and	r23, r19
     574:	67 2b       	or	r22, r23
     576:	29 f1       	breq	.+74     	; 0x5c2 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     578:	68 81       	ld	r22, Y
     57a:	79 81       	ldd	r23, Y+1	; 0x01
     57c:	67 2b       	or	r22, r23
     57e:	09 f5       	brne	.+66     	; 0x5c2 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     580:	20 95       	com	r18
     582:	30 95       	com	r19
     584:	24 23       	and	r18, r20
     586:	35 23       	and	r19, r21
     588:	3b 83       	std	Y+3, r19	; 0x03
     58a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     58c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     590:	8a 81       	ldd	r24, Y+2	; 0x02
     592:	9b 81       	ldd	r25, Y+3	; 0x03
     594:	20 91 b2 07 	lds	r18, 0x07B2	; 0x8007b2 <xFreeBytesRemaining>
     598:	30 91 b3 07 	lds	r19, 0x07B3	; 0x8007b3 <xFreeBytesRemaining+0x1>
     59c:	82 0f       	add	r24, r18
     59e:	93 1f       	adc	r25, r19
     5a0:	90 93 b3 07 	sts	0x07B3, r25	; 0x8007b3 <xFreeBytesRemaining+0x1>
     5a4:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5a8:	ce 01       	movw	r24, r28
     5aa:	e0 de       	rcall	.-576    	; 0x36c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     5ac:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <xNumberOfSuccessfulFrees>
     5b0:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <xNumberOfSuccessfulFrees+0x1>
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	90 93 ad 07 	sts	0x07AD, r25	; 0x8007ad <xNumberOfSuccessfulFrees+0x1>
     5ba:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     5be:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     5cc:	fc 01       	movw	r30, r24
     5ce:	03 96       	adiw	r24, 0x03	; 3
     5d0:	92 83       	std	Z+2, r25	; 0x02
     5d2:	81 83       	std	Z+1, r24	; 0x01
     5d4:	4f ef       	ldi	r20, 0xFF	; 255
     5d6:	5f ef       	ldi	r21, 0xFF	; 255
     5d8:	ba 01       	movw	r22, r20
     5da:	43 83       	std	Z+3, r20	; 0x03
     5dc:	54 83       	std	Z+4, r21	; 0x04
     5de:	65 83       	std	Z+5, r22	; 0x05
     5e0:	76 83       	std	Z+6, r23	; 0x06
     5e2:	90 87       	std	Z+8, r25	; 0x08
     5e4:	87 83       	std	Z+7, r24	; 0x07
     5e6:	92 87       	std	Z+10, r25	; 0x0a
     5e8:	81 87       	std	Z+9, r24	; 0x09
     5ea:	10 82       	st	Z, r1
     5ec:	08 95       	ret

000005ee <vListInitialiseItem>:
     5ee:	fc 01       	movw	r30, r24
     5f0:	13 86       	std	Z+11, r1	; 0x0b
     5f2:	12 86       	std	Z+10, r1	; 0x0a
     5f4:	08 95       	ret

000005f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     600:	08 81       	ld	r16, Y
     602:	19 81       	ldd	r17, Y+1	; 0x01
     604:	2a 81       	ldd	r18, Y+2	; 0x02
     606:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     608:	0f 3f       	cpi	r16, 0xFF	; 255
     60a:	4f ef       	ldi	r20, 0xFF	; 255
     60c:	14 07       	cpc	r17, r20
     60e:	24 07       	cpc	r18, r20
     610:	34 07       	cpc	r19, r20
     612:	21 f4       	brne	.+8      	; 0x61c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     614:	fc 01       	movw	r30, r24
     616:	a1 85       	ldd	r26, Z+9	; 0x09
     618:	b2 85       	ldd	r27, Z+10	; 0x0a
     61a:	11 c0       	rjmp	.+34     	; 0x63e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     61c:	dc 01       	movw	r26, r24
     61e:	13 96       	adiw	r26, 0x03	; 3
     620:	01 c0       	rjmp	.+2      	; 0x624 <vListInsert+0x2e>
     622:	df 01       	movw	r26, r30
     624:	14 96       	adiw	r26, 0x04	; 4
     626:	ed 91       	ld	r30, X+
     628:	fc 91       	ld	r31, X
     62a:	15 97       	sbiw	r26, 0x05	; 5
     62c:	40 81       	ld	r20, Z
     62e:	51 81       	ldd	r21, Z+1	; 0x01
     630:	62 81       	ldd	r22, Z+2	; 0x02
     632:	73 81       	ldd	r23, Z+3	; 0x03
     634:	04 17       	cp	r16, r20
     636:	15 07       	cpc	r17, r21
     638:	26 07       	cpc	r18, r22
     63a:	37 07       	cpc	r19, r23
     63c:	90 f7       	brcc	.-28     	; 0x622 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     63e:	14 96       	adiw	r26, 0x04	; 4
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	15 97       	sbiw	r26, 0x05	; 5
     646:	fd 83       	std	Y+5, r31	; 0x05
     648:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     64a:	d7 83       	std	Z+7, r29	; 0x07
     64c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     64e:	bf 83       	std	Y+7, r27	; 0x07
     650:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     652:	15 96       	adiw	r26, 0x05	; 5
     654:	dc 93       	st	X, r29
     656:	ce 93       	st	-X, r28
     658:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     65a:	9b 87       	std	Y+11, r25	; 0x0b
     65c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     65e:	fc 01       	movw	r30, r24
     660:	20 81       	ld	r18, Z
     662:	2f 5f       	subi	r18, 0xFF	; 255
     664:	20 83       	st	Z, r18
}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     676:	a2 85       	ldd	r26, Z+10	; 0x0a
     678:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     67a:	c4 81       	ldd	r28, Z+4	; 0x04
     67c:	d5 81       	ldd	r29, Z+5	; 0x05
     67e:	86 81       	ldd	r24, Z+6	; 0x06
     680:	97 81       	ldd	r25, Z+7	; 0x07
     682:	9f 83       	std	Y+7, r25	; 0x07
     684:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     686:	c6 81       	ldd	r28, Z+6	; 0x06
     688:	d7 81       	ldd	r29, Z+7	; 0x07
     68a:	84 81       	ldd	r24, Z+4	; 0x04
     68c:	95 81       	ldd	r25, Z+5	; 0x05
     68e:	9d 83       	std	Y+5, r25	; 0x05
     690:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     692:	11 96       	adiw	r26, 0x01	; 1
     694:	8d 91       	ld	r24, X+
     696:	9c 91       	ld	r25, X
     698:	12 97       	sbiw	r26, 0x02	; 2
     69a:	e8 17       	cp	r30, r24
     69c:	f9 07       	cpc	r31, r25
     69e:	31 f4       	brne	.+12     	; 0x6ac <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6a0:	86 81       	ldd	r24, Z+6	; 0x06
     6a2:	97 81       	ldd	r25, Z+7	; 0x07
     6a4:	12 96       	adiw	r26, 0x02	; 2
     6a6:	9c 93       	st	X, r25
     6a8:	8e 93       	st	-X, r24
     6aa:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6ac:	13 86       	std	Z+11, r1	; 0x0b
     6ae:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     6b0:	8c 91       	ld	r24, X
     6b2:	81 50       	subi	r24, 0x01	; 1
     6b4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     6b6:	8c 91       	ld	r24, X
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     6be:	a8 95       	wdr
     6c0:	90 ec       	ldi	r25, 0xC0	; 192
     6c2:	88 e1       	ldi	r24, 0x18	; 24
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	a8 95       	wdr
     6ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6d4:	08 95       	ret

000006d6 <pxPortInitialiseStack>:
     6d6:	fc 01       	movw	r30, r24
     6d8:	60 83       	st	Z, r22
     6da:	31 97       	sbiw	r30, 0x01	; 1
     6dc:	70 83       	st	Z, r23
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	10 82       	st	Z, r1
     6e2:	31 97       	sbiw	r30, 0x01	; 1
     6e4:	10 82       	st	Z, r1
     6e6:	31 97       	sbiw	r30, 0x01	; 1
     6e8:	20 e8       	ldi	r18, 0x80	; 128
     6ea:	20 83       	st	Z, r18
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	10 82       	st	Z, r1
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	10 82       	st	Z, r1
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	10 82       	st	Z, r1
     6f8:	77 97       	sbiw	r30, 0x17	; 23
     6fa:	40 83       	st	Z, r20
     6fc:	31 97       	sbiw	r30, 0x01	; 1
     6fe:	50 83       	st	Z, r21
     700:	86 97       	sbiw	r24, 0x26	; 38
     702:	08 95       	ret

00000704 <xPortStartScheduler>:
     704:	dc df       	rcall	.-72     	; 0x6be <prvSetupTimerInterrupt>
     706:	a0 91 3d 12 	lds	r26, 0x123D	; 0x80123d <pxCurrentTCB>
     70a:	b0 91 3e 12 	lds	r27, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
     70e:	cd 91       	ld	r28, X+
     710:	cd bf       	out	0x3d, r28	; 61
     712:	dd 91       	ld	r29, X+
     714:	de bf       	out	0x3e, r29	; 62
     716:	ff 91       	pop	r31
     718:	ef 91       	pop	r30
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	bf 91       	pop	r27
     720:	af 91       	pop	r26
     722:	9f 91       	pop	r25
     724:	8f 91       	pop	r24
     726:	7f 91       	pop	r23
     728:	6f 91       	pop	r22
     72a:	5f 91       	pop	r21
     72c:	4f 91       	pop	r20
     72e:	3f 91       	pop	r19
     730:	2f 91       	pop	r18
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	bf 90       	pop	r11
     740:	af 90       	pop	r10
     742:	9f 90       	pop	r9
     744:	8f 90       	pop	r8
     746:	7f 90       	pop	r7
     748:	6f 90       	pop	r6
     74a:	5f 90       	pop	r5
     74c:	4f 90       	pop	r4
     74e:	3f 90       	pop	r3
     750:	2f 90       	pop	r2
     752:	1f 90       	pop	r1
     754:	0f 90       	pop	r0
     756:	0c be       	out	0x3c, r0	; 60
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	08 95       	ret
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	08 95       	ret

00000768 <vPortYield>:
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	0f 92       	push	r0
     770:	0b b6       	in	r0, 0x3b	; 59
     772:	0f 92       	push	r0
     774:	0c b6       	in	r0, 0x3c	; 60
     776:	0f 92       	push	r0
     778:	1f 92       	push	r1
     77a:	11 24       	eor	r1, r1
     77c:	2f 92       	push	r2
     77e:	3f 92       	push	r3
     780:	4f 92       	push	r4
     782:	5f 92       	push	r5
     784:	6f 92       	push	r6
     786:	7f 92       	push	r7
     788:	8f 92       	push	r8
     78a:	9f 92       	push	r9
     78c:	af 92       	push	r10
     78e:	bf 92       	push	r11
     790:	cf 92       	push	r12
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	2f 93       	push	r18
     79e:	3f 93       	push	r19
     7a0:	4f 93       	push	r20
     7a2:	5f 93       	push	r21
     7a4:	6f 93       	push	r22
     7a6:	7f 93       	push	r23
     7a8:	8f 93       	push	r24
     7aa:	9f 93       	push	r25
     7ac:	af 93       	push	r26
     7ae:	bf 93       	push	r27
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	ef 93       	push	r30
     7b6:	ff 93       	push	r31
     7b8:	a0 91 3d 12 	lds	r26, 0x123D	; 0x80123d <pxCurrentTCB>
     7bc:	b0 91 3e 12 	lds	r27, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
     7c0:	0d b6       	in	r0, 0x3d	; 61
     7c2:	0d 92       	st	X+, r0
     7c4:	0e b6       	in	r0, 0x3e	; 62
     7c6:	0d 92       	st	X+, r0
     7c8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <vTaskSwitchContext>
     7cc:	a0 91 3d 12 	lds	r26, 0x123D	; 0x80123d <pxCurrentTCB>
     7d0:	b0 91 3e 12 	lds	r27, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
     7d4:	cd 91       	ld	r28, X+
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	dd 91       	ld	r29, X+
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	bf 91       	pop	r27
     7e6:	af 91       	pop	r26
     7e8:	9f 91       	pop	r25
     7ea:	8f 91       	pop	r24
     7ec:	7f 91       	pop	r23
     7ee:	6f 91       	pop	r22
     7f0:	5f 91       	pop	r21
     7f2:	4f 91       	pop	r20
     7f4:	3f 91       	pop	r19
     7f6:	2f 91       	pop	r18
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	bf 90       	pop	r11
     806:	af 90       	pop	r10
     808:	9f 90       	pop	r9
     80a:	8f 90       	pop	r8
     80c:	7f 90       	pop	r7
     80e:	6f 90       	pop	r6
     810:	5f 90       	pop	r5
     812:	4f 90       	pop	r4
     814:	3f 90       	pop	r3
     816:	2f 90       	pop	r2
     818:	1f 90       	pop	r1
     81a:	0f 90       	pop	r0
     81c:	0c be       	out	0x3c, r0	; 60
     81e:	0f 90       	pop	r0
     820:	0b be       	out	0x3b, r0	; 59
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	08 95       	ret

0000082a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     82a:	0f 92       	push	r0
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	0f 92       	push	r0
     832:	0b b6       	in	r0, 0x3b	; 59
     834:	0f 92       	push	r0
     836:	0c b6       	in	r0, 0x3c	; 60
     838:	0f 92       	push	r0
     83a:	1f 92       	push	r1
     83c:	11 24       	eor	r1, r1
     83e:	2f 92       	push	r2
     840:	3f 92       	push	r3
     842:	4f 92       	push	r4
     844:	5f 92       	push	r5
     846:	6f 92       	push	r6
     848:	7f 92       	push	r7
     84a:	8f 92       	push	r8
     84c:	9f 92       	push	r9
     84e:	af 92       	push	r10
     850:	bf 92       	push	r11
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	2f 93       	push	r18
     860:	3f 93       	push	r19
     862:	4f 93       	push	r20
     864:	5f 93       	push	r21
     866:	6f 93       	push	r22
     868:	7f 93       	push	r23
     86a:	8f 93       	push	r24
     86c:	9f 93       	push	r25
     86e:	af 93       	push	r26
     870:	bf 93       	push	r27
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ef 93       	push	r30
     878:	ff 93       	push	r31
     87a:	a0 91 3d 12 	lds	r26, 0x123D	; 0x80123d <pxCurrentTCB>
     87e:	b0 91 3e 12 	lds	r27, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
     882:	0d b6       	in	r0, 0x3d	; 61
     884:	0d 92       	st	X+, r0
     886:	0e b6       	in	r0, 0x3e	; 62
     888:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     88a:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     88c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <xTaskIncrementTick>
     890:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     892:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     896:	a0 91 3d 12 	lds	r26, 0x123D	; 0x80123d <pxCurrentTCB>
     89a:	b0 91 3e 12 	lds	r27, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
     89e:	cd 91       	ld	r28, X+
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	dd 91       	ld	r29, X+
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	ff 91       	pop	r31
     8a8:	ef 91       	pop	r30
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	9f 90       	pop	r9
     8d4:	8f 90       	pop	r8
     8d6:	7f 90       	pop	r7
     8d8:	6f 90       	pop	r6
     8da:	5f 90       	pop	r5
     8dc:	4f 90       	pop	r4
     8de:	3f 90       	pop	r3
     8e0:	2f 90       	pop	r2
     8e2:	1f 90       	pop	r1
     8e4:	0f 90       	pop	r0
     8e6:	0c be       	out	0x3c, r0	; 60
     8e8:	0f 90       	pop	r0
     8ea:	0b be       	out	0x3b, r0	; 59
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     8f2:	08 95       	ret

000008f4 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     8f4:	9a df       	rcall	.-204    	; 0x82a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     8f6:	18 95       	reti

000008f8 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	0f 92       	push	r0
     8fe:	fc 01       	movw	r30, r24
     900:	86 8d       	ldd	r24, Z+30	; 0x1e
     902:	81 11       	cpse	r24, r1
     904:	02 c0       	rjmp	.+4      	; 0x90a <prvIsQueueEmpty+0x12>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	01 c0       	rjmp	.+2      	; 0x90c <prvIsQueueEmpty+0x14>
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	08 95       	ret

00000912 <prvIsQueueFull>:
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	0f 92       	push	r0
     918:	fc 01       	movw	r30, r24
     91a:	26 8d       	ldd	r18, Z+30	; 0x1e
     91c:	87 8d       	ldd	r24, Z+31	; 0x1f
     91e:	28 13       	cpse	r18, r24
     920:	02 c0       	rjmp	.+4      	; 0x926 <prvIsQueueFull+0x14>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	01 c0       	rjmp	.+2      	; 0x928 <prvIsQueueFull+0x16>
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	0f 90       	pop	r0
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	08 95       	ret

0000092e <prvCopyDataToQueue>:
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ec 01       	movw	r28, r24
     938:	04 2f       	mov	r16, r20
     93a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     93c:	48 a1       	ldd	r20, Y+32	; 0x20
     93e:	41 11       	cpse	r20, r1
     940:	0c c0       	rjmp	.+24     	; 0x95a <prvCopyDataToQueue+0x2c>
     942:	88 81       	ld	r24, Y
     944:	99 81       	ldd	r25, Y+1	; 0x01
     946:	89 2b       	or	r24, r25
     948:	09 f0       	breq	.+2      	; 0x94c <prvCopyDataToQueue+0x1e>
     94a:	42 c0       	rjmp	.+132    	; 0x9d0 <prvCopyDataToQueue+0xa2>
     94c:	8c 81       	ldd	r24, Y+4	; 0x04
     94e:	9d 81       	ldd	r25, Y+5	; 0x05
     950:	0e 94 a2 11 	call	0x2344	; 0x2344 <xTaskPriorityDisinherit>
     954:	1d 82       	std	Y+5, r1	; 0x05
     956:	1c 82       	std	Y+4, r1	; 0x04
     958:	42 c0       	rjmp	.+132    	; 0x9de <prvCopyDataToQueue+0xb0>
     95a:	01 11       	cpse	r16, r1
     95c:	17 c0       	rjmp	.+46     	; 0x98c <prvCopyDataToQueue+0x5e>
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	8a 81       	ldd	r24, Y+2	; 0x02
     962:	9b 81       	ldd	r25, Y+3	; 0x03
     964:	0e 94 82 2b 	call	0x5704	; 0x5704 <memcpy>
     968:	28 a1       	ldd	r18, Y+32	; 0x20
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	9b 81       	ldd	r25, Y+3	; 0x03
     96e:	82 0f       	add	r24, r18
     970:	91 1d       	adc	r25, r1
     972:	9b 83       	std	Y+3, r25	; 0x03
     974:	8a 83       	std	Y+2, r24	; 0x02
     976:	2c 81       	ldd	r18, Y+4	; 0x04
     978:	3d 81       	ldd	r19, Y+5	; 0x05
     97a:	82 17       	cp	r24, r18
     97c:	93 07       	cpc	r25, r19
     97e:	50 f1       	brcs	.+84     	; 0x9d4 <prvCopyDataToQueue+0xa6>
     980:	88 81       	ld	r24, Y
     982:	99 81       	ldd	r25, Y+1	; 0x01
     984:	9b 83       	std	Y+3, r25	; 0x03
     986:	8a 83       	std	Y+2, r24	; 0x02
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	29 c0       	rjmp	.+82     	; 0x9de <prvCopyDataToQueue+0xb0>
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	8e 81       	ldd	r24, Y+6	; 0x06
     990:	9f 81       	ldd	r25, Y+7	; 0x07
     992:	0e 94 82 2b 	call	0x5704	; 0x5704 <memcpy>
     996:	88 a1       	ldd	r24, Y+32	; 0x20
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	91 95       	neg	r25
     99c:	81 95       	neg	r24
     99e:	91 09       	sbc	r25, r1
     9a0:	2e 81       	ldd	r18, Y+6	; 0x06
     9a2:	3f 81       	ldd	r19, Y+7	; 0x07
     9a4:	28 0f       	add	r18, r24
     9a6:	39 1f       	adc	r19, r25
     9a8:	3f 83       	std	Y+7, r19	; 0x07
     9aa:	2e 83       	std	Y+6, r18	; 0x06
     9ac:	48 81       	ld	r20, Y
     9ae:	59 81       	ldd	r21, Y+1	; 0x01
     9b0:	24 17       	cp	r18, r20
     9b2:	35 07       	cpc	r19, r21
     9b4:	30 f4       	brcc	.+12     	; 0x9c2 <prvCopyDataToQueue+0x94>
     9b6:	2c 81       	ldd	r18, Y+4	; 0x04
     9b8:	3d 81       	ldd	r19, Y+5	; 0x05
     9ba:	82 0f       	add	r24, r18
     9bc:	93 1f       	adc	r25, r19
     9be:	9f 83       	std	Y+7, r25	; 0x07
     9c0:	8e 83       	std	Y+6, r24	; 0x06
     9c2:	02 30       	cpi	r16, 0x02	; 2
     9c4:	49 f4       	brne	.+18     	; 0x9d8 <prvCopyDataToQueue+0xaa>
     9c6:	11 23       	and	r17, r17
     9c8:	49 f0       	breq	.+18     	; 0x9dc <prvCopyDataToQueue+0xae>
     9ca:	11 50       	subi	r17, 0x01	; 1
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	07 c0       	rjmp	.+14     	; 0x9de <prvCopyDataToQueue+0xb0>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <prvCopyDataToQueue+0xb0>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <prvCopyDataToQueue+0xb0>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	01 c0       	rjmp	.+2      	; 0x9de <prvCopyDataToQueue+0xb0>
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	1f 5f       	subi	r17, 0xFF	; 255
     9e0:	1e 8f       	std	Y+30, r17	; 0x1e
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <prvCopyDataFromQueue>:
     9ec:	fc 01       	movw	r30, r24
     9ee:	40 a1       	ldd	r20, Z+32	; 0x20
     9f0:	44 23       	and	r20, r20
     9f2:	a9 f0       	breq	.+42     	; 0xa1e <prvCopyDataFromQueue+0x32>
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	26 81       	ldd	r18, Z+6	; 0x06
     9f8:	37 81       	ldd	r19, Z+7	; 0x07
     9fa:	24 0f       	add	r18, r20
     9fc:	35 1f       	adc	r19, r21
     9fe:	37 83       	std	Z+7, r19	; 0x07
     a00:	26 83       	std	Z+6, r18	; 0x06
     a02:	84 81       	ldd	r24, Z+4	; 0x04
     a04:	95 81       	ldd	r25, Z+5	; 0x05
     a06:	28 17       	cp	r18, r24
     a08:	39 07       	cpc	r19, r25
     a0a:	20 f0       	brcs	.+8      	; 0xa14 <prvCopyDataFromQueue+0x28>
     a0c:	80 81       	ld	r24, Z
     a0e:	91 81       	ldd	r25, Z+1	; 0x01
     a10:	97 83       	std	Z+7, r25	; 0x07
     a12:	86 83       	std	Z+6, r24	; 0x06
     a14:	cb 01       	movw	r24, r22
     a16:	66 81       	ldd	r22, Z+6	; 0x06
     a18:	77 81       	ldd	r23, Z+7	; 0x07
     a1a:	0c 94 82 2b 	jmp	0x5704	; 0x5704 <memcpy>
     a1e:	08 95       	ret

00000a20 <prvUnlockQueue>:
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	ec 01       	movw	r28, r24
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	0f 92       	push	r0
     a2e:	1a a1       	ldd	r17, Y+34	; 0x22
     a30:	0b c0       	rjmp	.+22     	; 0xa48 <prvUnlockQueue+0x28>
     a32:	8b 89       	ldd	r24, Y+19	; 0x13
     a34:	88 23       	and	r24, r24
     a36:	51 f0       	breq	.+20     	; 0xa4c <prvUnlockQueue+0x2c>
     a38:	ce 01       	movw	r24, r28
     a3a:	43 96       	adiw	r24, 0x13	; 19
     a3c:	0e 94 4f 10 	call	0x209e	; 0x209e <xTaskRemoveFromEventList>
     a40:	81 11       	cpse	r24, r1
     a42:	0e 94 8b 11 	call	0x2316	; 0x2316 <vTaskMissedYield>
     a46:	11 50       	subi	r17, 0x01	; 1
     a48:	11 16       	cp	r1, r17
     a4a:	9c f3       	brlt	.-26     	; 0xa32 <prvUnlockQueue+0x12>
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	8a a3       	std	Y+34, r24	; 0x22
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	0f 92       	push	r0
     a5a:	19 a1       	ldd	r17, Y+33	; 0x21
     a5c:	0b c0       	rjmp	.+22     	; 0xa74 <prvUnlockQueue+0x54>
     a5e:	88 85       	ldd	r24, Y+8	; 0x08
     a60:	88 23       	and	r24, r24
     a62:	51 f0       	breq	.+20     	; 0xa78 <prvUnlockQueue+0x58>
     a64:	ce 01       	movw	r24, r28
     a66:	08 96       	adiw	r24, 0x08	; 8
     a68:	0e 94 4f 10 	call	0x209e	; 0x209e <xTaskRemoveFromEventList>
     a6c:	81 11       	cpse	r24, r1
     a6e:	0e 94 8b 11 	call	0x2316	; 0x2316 <vTaskMissedYield>
     a72:	11 50       	subi	r17, 0x01	; 1
     a74:	11 16       	cp	r1, r17
     a76:	9c f3       	brlt	.-26     	; 0xa5e <prvUnlockQueue+0x3e>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	89 a3       	std	Y+33, r24	; 0x21
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	08 95       	ret

00000a88 <xQueueGenericReset>:
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	0f 92       	push	r0
     a94:	e8 81       	ld	r30, Y
     a96:	f9 81       	ldd	r31, Y+1	; 0x01
     a98:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a9a:	28 a1       	ldd	r18, Y+32	; 0x20
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	82 9f       	mul	r24, r18
     aa2:	a0 01       	movw	r20, r0
     aa4:	83 9f       	mul	r24, r19
     aa6:	50 0d       	add	r21, r0
     aa8:	92 9f       	mul	r25, r18
     aaa:	50 0d       	add	r21, r0
     aac:	11 24       	eor	r1, r1
     aae:	4e 0f       	add	r20, r30
     ab0:	5f 1f       	adc	r21, r31
     ab2:	5d 83       	std	Y+5, r21	; 0x05
     ab4:	4c 83       	std	Y+4, r20	; 0x04
     ab6:	1e 8e       	std	Y+30, r1	; 0x1e
     ab8:	fb 83       	std	Y+3, r31	; 0x03
     aba:	ea 83       	std	Y+2, r30	; 0x02
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	28 9f       	mul	r18, r24
     ac0:	a0 01       	movw	r20, r0
     ac2:	29 9f       	mul	r18, r25
     ac4:	50 0d       	add	r21, r0
     ac6:	38 9f       	mul	r19, r24
     ac8:	50 0d       	add	r21, r0
     aca:	11 24       	eor	r1, r1
     acc:	cf 01       	movw	r24, r30
     ace:	84 0f       	add	r24, r20
     ad0:	95 1f       	adc	r25, r21
     ad2:	9f 83       	std	Y+7, r25	; 0x07
     ad4:	8e 83       	std	Y+6, r24	; 0x06
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	89 a3       	std	Y+33, r24	; 0x21
     ada:	8a a3       	std	Y+34, r24	; 0x22
     adc:	61 11       	cpse	r22, r1
     ade:	0b c0       	rjmp	.+22     	; 0xaf6 <xQueueGenericReset+0x6e>
     ae0:	88 85       	ldd	r24, Y+8	; 0x08
     ae2:	88 23       	and	r24, r24
     ae4:	71 f0       	breq	.+28     	; 0xb02 <xQueueGenericReset+0x7a>
     ae6:	ce 01       	movw	r24, r28
     ae8:	08 96       	adiw	r24, 0x08	; 8
     aea:	0e 94 4f 10 	call	0x209e	; 0x209e <xTaskRemoveFromEventList>
     aee:	88 23       	and	r24, r24
     af0:	41 f0       	breq	.+16     	; 0xb02 <xQueueGenericReset+0x7a>
     af2:	3a de       	rcall	.-908    	; 0x768 <vPortYield>
     af4:	06 c0       	rjmp	.+12     	; 0xb02 <xQueueGenericReset+0x7a>
     af6:	ce 01       	movw	r24, r28
     af8:	08 96       	adiw	r24, 0x08	; 8
     afa:	68 dd       	rcall	.-1328   	; 0x5cc <vListInitialise>
     afc:	ce 01       	movw	r24, r28
     afe:	43 96       	adiw	r24, 0x13	; 19
     b00:	65 dd       	rcall	.-1334   	; 0x5cc <vListInitialise>
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <prvInitialiseNewQueue>:
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	f8 01       	movw	r30, r16
     b14:	61 11       	cpse	r22, r1
     b16:	03 c0       	rjmp	.+6      	; 0xb1e <prvInitialiseNewQueue+0x10>
     b18:	11 83       	std	Z+1, r17	; 0x01
     b1a:	00 83       	st	Z, r16
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <prvInitialiseNewQueue+0x14>
     b1e:	51 83       	std	Z+1, r21	; 0x01
     b20:	40 83       	st	Z, r20
     b22:	87 8f       	std	Z+31, r24	; 0x1f
     b24:	60 a3       	std	Z+32, r22	; 0x20
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	cf 01       	movw	r24, r30
     b2a:	ae df       	rcall	.-164    	; 0xa88 <xQueueGenericReset>
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	08 95       	ret

00000b32 <xQueueGenericCreate>:
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	f8 2e       	mov	r15, r24
     b42:	e6 2e       	mov	r14, r22
     b44:	d4 2e       	mov	r13, r20
     b46:	86 9f       	mul	r24, r22
     b48:	c0 01       	movw	r24, r0
     b4a:	11 24       	eor	r1, r1
     b4c:	83 96       	adiw	r24, 0x23	; 35
     b4e:	58 dc       	rcall	.-1872   	; 0x400 <pvPortMalloc>
     b50:	ec 01       	movw	r28, r24
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	41 f0       	breq	.+16     	; 0xb66 <xQueueGenericCreate+0x34>
     b56:	8c 01       	movw	r16, r24
     b58:	2d 2d       	mov	r18, r13
     b5a:	ac 01       	movw	r20, r24
     b5c:	4d 5d       	subi	r20, 0xDD	; 221
     b5e:	5f 4f       	sbci	r21, 0xFF	; 255
     b60:	6e 2d       	mov	r22, r14
     b62:	8f 2d       	mov	r24, r15
     b64:	d4 df       	rcall	.-88     	; 0xb0e <prvInitialiseNewQueue>
     b66:	ce 01       	movw	r24, r28
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	df 90       	pop	r13
     b76:	08 95       	ret

00000b78 <xQueueGenericSend>:
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	29 97       	sbiw	r28, 0x09	; 9
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	7c 01       	movw	r14, r24
     b9a:	6b 01       	movw	r12, r22
     b9c:	2e 83       	std	Y+6, r18	; 0x06
     b9e:	3f 83       	std	Y+7, r19	; 0x07
     ba0:	48 87       	std	Y+8, r20	; 0x08
     ba2:	59 87       	std	Y+9, r21	; 0x09
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	0f 92       	push	r0
     bac:	f7 01       	movw	r30, r14
     bae:	96 8d       	ldd	r25, Z+30	; 0x1e
     bb0:	87 8d       	ldd	r24, Z+31	; 0x1f
     bb2:	98 17       	cp	r25, r24
     bb4:	10 f0       	brcs	.+4      	; 0xbba <xQueueGenericSend+0x42>
     bb6:	02 30       	cpi	r16, 0x02	; 2
     bb8:	b1 f4       	brne	.+44     	; 0xbe6 <xQueueGenericSend+0x6e>
     bba:	40 2f       	mov	r20, r16
     bbc:	b6 01       	movw	r22, r12
     bbe:	c7 01       	movw	r24, r14
     bc0:	b6 de       	rcall	.-660    	; 0x92e <prvCopyDataToQueue>
     bc2:	f7 01       	movw	r30, r14
     bc4:	93 89       	ldd	r25, Z+19	; 0x13
     bc6:	99 23       	and	r25, r25
     bc8:	41 f0       	breq	.+16     	; 0xbda <xQueueGenericSend+0x62>
     bca:	c7 01       	movw	r24, r14
     bcc:	43 96       	adiw	r24, 0x13	; 19
     bce:	0e 94 4f 10 	call	0x209e	; 0x209e <xTaskRemoveFromEventList>
     bd2:	88 23       	and	r24, r24
     bd4:	21 f0       	breq	.+8      	; 0xbde <xQueueGenericSend+0x66>
     bd6:	c8 dd       	rcall	.-1136   	; 0x768 <vPortYield>
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <xQueueGenericSend+0x66>
     bda:	81 11       	cpse	r24, r1
     bdc:	c5 dd       	rcall	.-1142   	; 0x768 <vPortYield>
     bde:	0f 90       	pop	r0
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	4a c0       	rjmp	.+148    	; 0xc7a <xQueueGenericSend+0x102>
     be6:	8e 81       	ldd	r24, Y+6	; 0x06
     be8:	9f 81       	ldd	r25, Y+7	; 0x07
     bea:	a8 85       	ldd	r26, Y+8	; 0x08
     bec:	b9 85       	ldd	r27, Y+9	; 0x09
     bee:	89 2b       	or	r24, r25
     bf0:	8a 2b       	or	r24, r26
     bf2:	8b 2b       	or	r24, r27
     bf4:	21 f4       	brne	.+8      	; 0xbfe <xQueueGenericSend+0x86>
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	3e c0       	rjmp	.+124    	; 0xc7a <xQueueGenericSend+0x102>
     bfe:	11 11       	cpse	r17, r1
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <xQueueGenericSend+0x94>
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	0e 94 14 11 	call	0x2228	; 0x2228 <vTaskInternalSetTimeOutState>
     c0a:	11 e0       	ldi	r17, 0x01	; 1
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	ec d6       	rcall	.+3544   	; 0x19ea <vTaskSuspendAll>
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	0f 92       	push	r0
     c18:	f7 01       	movw	r30, r14
     c1a:	81 a1       	ldd	r24, Z+33	; 0x21
     c1c:	8f 3f       	cpi	r24, 0xFF	; 255
     c1e:	09 f4       	brne	.+2      	; 0xc22 <xQueueGenericSend+0xaa>
     c20:	11 a2       	std	Z+33, r1	; 0x21
     c22:	f7 01       	movw	r30, r14
     c24:	82 a1       	ldd	r24, Z+34	; 0x22
     c26:	8f 3f       	cpi	r24, 0xFF	; 255
     c28:	09 f4       	brne	.+2      	; 0xc2c <xQueueGenericSend+0xb4>
     c2a:	12 a2       	std	Z+34, r1	; 0x22
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	be 01       	movw	r22, r28
     c32:	6a 5f       	subi	r22, 0xFA	; 250
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	0e 94 25 11 	call	0x224a	; 0x224a <xTaskCheckForTimeOut>
     c3e:	81 11       	cpse	r24, r1
     c40:	18 c0       	rjmp	.+48     	; 0xc72 <xQueueGenericSend+0xfa>
     c42:	c7 01       	movw	r24, r14
     c44:	66 de       	rcall	.-820    	; 0x912 <prvIsQueueFull>
     c46:	88 23       	and	r24, r24
     c48:	81 f0       	breq	.+32     	; 0xc6a <xQueueGenericSend+0xf2>
     c4a:	4e 81       	ldd	r20, Y+6	; 0x06
     c4c:	5f 81       	ldd	r21, Y+7	; 0x07
     c4e:	68 85       	ldd	r22, Y+8	; 0x08
     c50:	79 85       	ldd	r23, Y+9	; 0x09
     c52:	c7 01       	movw	r24, r14
     c54:	08 96       	adiw	r24, 0x08	; 8
     c56:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskPlaceOnEventList>
     c5a:	c7 01       	movw	r24, r14
     c5c:	e1 de       	rcall	.-574    	; 0xa20 <prvUnlockQueue>
     c5e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xTaskResumeAll>
     c62:	81 11       	cpse	r24, r1
     c64:	a0 cf       	rjmp	.-192    	; 0xba6 <xQueueGenericSend+0x2e>
     c66:	80 dd       	rcall	.-1280   	; 0x768 <vPortYield>
     c68:	9e cf       	rjmp	.-196    	; 0xba6 <xQueueGenericSend+0x2e>
     c6a:	c7 01       	movw	r24, r14
     c6c:	d9 de       	rcall	.-590    	; 0xa20 <prvUnlockQueue>
     c6e:	fd d7       	rcall	.+4090   	; 0x1c6a <xTaskResumeAll>
     c70:	9a cf       	rjmp	.-204    	; 0xba6 <xQueueGenericSend+0x2e>
     c72:	c7 01       	movw	r24, r14
     c74:	d5 de       	rcall	.-598    	; 0xa20 <prvUnlockQueue>
     c76:	f9 d7       	rcall	.+4082   	; 0x1c6a <xTaskResumeAll>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	29 96       	adiw	r28, 0x09	; 9
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	cf 90       	pop	r12
     c96:	08 95       	ret

00000c98 <xQueueGenericSendFromISR>:
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	8a 01       	movw	r16, r20
     ca6:	fc 01       	movw	r30, r24
     ca8:	56 8d       	ldd	r21, Z+30	; 0x1e
     caa:	37 8d       	ldd	r19, Z+31	; 0x1f
     cac:	53 17       	cp	r21, r19
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <xQueueGenericSendFromISR+0x1c>
     cb0:	22 30       	cpi	r18, 0x02	; 2
     cb2:	f9 f4       	brne	.+62     	; 0xcf2 <xQueueGenericSendFromISR+0x5a>
     cb4:	42 2f       	mov	r20, r18
     cb6:	78 01       	movw	r14, r16
     cb8:	ec 01       	movw	r28, r24
     cba:	1a a1       	ldd	r17, Y+34	; 0x22
     cbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cbe:	ce 01       	movw	r24, r28
     cc0:	36 de       	rcall	.-916    	; 0x92e <prvCopyDataToQueue>
     cc2:	1f 3f       	cpi	r17, 0xFF	; 255
     cc4:	81 f4       	brne	.+32     	; 0xce6 <xQueueGenericSendFromISR+0x4e>
     cc6:	8b 89       	ldd	r24, Y+19	; 0x13
     cc8:	88 23       	and	r24, r24
     cca:	a9 f0       	breq	.+42     	; 0xcf6 <xQueueGenericSendFromISR+0x5e>
     ccc:	ce 01       	movw	r24, r28
     cce:	43 96       	adiw	r24, 0x13	; 19
     cd0:	0e 94 4f 10 	call	0x209e	; 0x209e <xTaskRemoveFromEventList>
     cd4:	88 23       	and	r24, r24
     cd6:	89 f0       	breq	.+34     	; 0xcfa <xQueueGenericSendFromISR+0x62>
     cd8:	e1 14       	cp	r14, r1
     cda:	f1 04       	cpc	r15, r1
     cdc:	81 f0       	breq	.+32     	; 0xcfe <xQueueGenericSendFromISR+0x66>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	f7 01       	movw	r30, r14
     ce2:	80 83       	st	Z, r24
     ce4:	0d c0       	rjmp	.+26     	; 0xd00 <xQueueGenericSendFromISR+0x68>
     ce6:	ff 24       	eor	r15, r15
     ce8:	f3 94       	inc	r15
     cea:	f1 0e       	add	r15, r17
     cec:	fa a2       	std	Y+34, r15	; 0x22
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <xQueueGenericSendFromISR+0x68>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <xQueueGenericSendFromISR+0x68>
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <xQueueGenericSendFromISR+0x68>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <xQueueGenericSendFromISR+0x68>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <xQueueReceive>:
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	29 97       	sbiw	r28, 0x09	; 9
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	8c 01       	movw	r16, r24
     d30:	6b 01       	movw	r12, r22
     d32:	2e 83       	std	Y+6, r18	; 0x06
     d34:	3f 83       	std	Y+7, r19	; 0x07
     d36:	48 87       	std	Y+8, r20	; 0x08
     d38:	59 87       	std	Y+9, r21	; 0x09
     d3a:	e1 2c       	mov	r14, r1
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	0f 92       	push	r0
     d42:	f8 01       	movw	r30, r16
     d44:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d46:	ff 20       	and	r15, r15
     d48:	99 f0       	breq	.+38     	; 0xd70 <xQueueReceive+0x62>
     d4a:	b6 01       	movw	r22, r12
     d4c:	c8 01       	movw	r24, r16
     d4e:	4e de       	rcall	.-868    	; 0x9ec <prvCopyDataFromQueue>
     d50:	fa 94       	dec	r15
     d52:	f8 01       	movw	r30, r16
     d54:	f6 8e       	std	Z+30, r15	; 0x1e
     d56:	80 85       	ldd	r24, Z+8	; 0x08
     d58:	88 23       	and	r24, r24
     d5a:	31 f0       	breq	.+12     	; 0xd68 <xQueueReceive+0x5a>
     d5c:	c8 01       	movw	r24, r16
     d5e:	08 96       	adiw	r24, 0x08	; 8
     d60:	0e 94 4f 10 	call	0x209e	; 0x209e <xTaskRemoveFromEventList>
     d64:	81 11       	cpse	r24, r1
     d66:	00 dd       	rcall	.-1536   	; 0x768 <vPortYield>
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	4f c0       	rjmp	.+158    	; 0xe0e <xQueueReceive+0x100>
     d70:	8e 81       	ldd	r24, Y+6	; 0x06
     d72:	9f 81       	ldd	r25, Y+7	; 0x07
     d74:	a8 85       	ldd	r26, Y+8	; 0x08
     d76:	b9 85       	ldd	r27, Y+9	; 0x09
     d78:	89 2b       	or	r24, r25
     d7a:	8a 2b       	or	r24, r26
     d7c:	8b 2b       	or	r24, r27
     d7e:	21 f4       	brne	.+8      	; 0xd88 <xQueueReceive+0x7a>
     d80:	0f 90       	pop	r0
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	43 c0       	rjmp	.+134    	; 0xe0e <xQueueReceive+0x100>
     d88:	e1 10       	cpse	r14, r1
     d8a:	06 c0       	rjmp	.+12     	; 0xd98 <xQueueReceive+0x8a>
     d8c:	ce 01       	movw	r24, r28
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	0e 94 14 11 	call	0x2228	; 0x2228 <vTaskInternalSetTimeOutState>
     d94:	ee 24       	eor	r14, r14
     d96:	e3 94       	inc	r14
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	26 d6       	rcall	.+3148   	; 0x19ea <vTaskSuspendAll>
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	0f 92       	push	r0
     da4:	f8 01       	movw	r30, r16
     da6:	81 a1       	ldd	r24, Z+33	; 0x21
     da8:	8f 3f       	cpi	r24, 0xFF	; 255
     daa:	09 f4       	brne	.+2      	; 0xdae <xQueueReceive+0xa0>
     dac:	11 a2       	std	Z+33, r1	; 0x21
     dae:	f8 01       	movw	r30, r16
     db0:	82 a1       	ldd	r24, Z+34	; 0x22
     db2:	8f 3f       	cpi	r24, 0xFF	; 255
     db4:	09 f4       	brne	.+2      	; 0xdb8 <xQueueReceive+0xaa>
     db6:	12 a2       	std	Z+34, r1	; 0x22
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	be 01       	movw	r22, r28
     dbe:	6a 5f       	subi	r22, 0xFA	; 250
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	ce 01       	movw	r24, r28
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	0e 94 25 11 	call	0x224a	; 0x224a <xTaskCheckForTimeOut>
     dca:	81 11       	cpse	r24, r1
     dcc:	17 c0       	rjmp	.+46     	; 0xdfc <xQueueReceive+0xee>
     dce:	c8 01       	movw	r24, r16
     dd0:	93 dd       	rcall	.-1242   	; 0x8f8 <prvIsQueueEmpty>
     dd2:	88 23       	and	r24, r24
     dd4:	79 f0       	breq	.+30     	; 0xdf4 <xQueueReceive+0xe6>
     dd6:	4e 81       	ldd	r20, Y+6	; 0x06
     dd8:	5f 81       	ldd	r21, Y+7	; 0x07
     dda:	68 85       	ldd	r22, Y+8	; 0x08
     ddc:	79 85       	ldd	r23, Y+9	; 0x09
     dde:	c8 01       	movw	r24, r16
     de0:	43 96       	adiw	r24, 0x13	; 19
     de2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskPlaceOnEventList>
     de6:	c8 01       	movw	r24, r16
     de8:	1b de       	rcall	.-970    	; 0xa20 <prvUnlockQueue>
     dea:	3f d7       	rcall	.+3710   	; 0x1c6a <xTaskResumeAll>
     dec:	81 11       	cpse	r24, r1
     dee:	a6 cf       	rjmp	.-180    	; 0xd3c <xQueueReceive+0x2e>
     df0:	bb dc       	rcall	.-1674   	; 0x768 <vPortYield>
     df2:	a4 cf       	rjmp	.-184    	; 0xd3c <xQueueReceive+0x2e>
     df4:	c8 01       	movw	r24, r16
     df6:	14 de       	rcall	.-984    	; 0xa20 <prvUnlockQueue>
     df8:	38 d7       	rcall	.+3696   	; 0x1c6a <xTaskResumeAll>
     dfa:	a0 cf       	rjmp	.-192    	; 0xd3c <xQueueReceive+0x2e>
     dfc:	c8 01       	movw	r24, r16
     dfe:	10 de       	rcall	.-992    	; 0xa20 <prvUnlockQueue>
     e00:	34 d7       	rcall	.+3688   	; 0x1c6a <xTaskResumeAll>
     e02:	c8 01       	movw	r24, r16
     e04:	79 dd       	rcall	.-1294   	; 0x8f8 <prvIsQueueEmpty>
     e06:	88 23       	and	r24, r24
     e08:	09 f4       	brne	.+2      	; 0xe0c <xQueueReceive+0xfe>
     e0a:	98 cf       	rjmp	.-208    	; 0xd3c <xQueueReceive+0x2e>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	29 96       	adiw	r28, 0x09	; 9
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	df 90       	pop	r13
     e28:	cf 90       	pop	r12
     e2a:	08 95       	ret

00000e2c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	0f 92       	push	r0
     e38:	89 a1       	ldd	r24, Y+33	; 0x21
     e3a:	8f 3f       	cpi	r24, 0xFF	; 255
     e3c:	09 f4       	brne	.+2      	; 0xe40 <vQueueWaitForMessageRestricted+0x14>
     e3e:	19 a2       	std	Y+33, r1	; 0x21
     e40:	8a a1       	ldd	r24, Y+34	; 0x22
     e42:	8f 3f       	cpi	r24, 0xFF	; 255
     e44:	09 f4       	brne	.+2      	; 0xe48 <vQueueWaitForMessageRestricted+0x1c>
     e46:	1a a2       	std	Y+34, r1	; 0x22
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     e4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e4e:	81 11       	cpse	r24, r1
     e50:	04 c0       	rjmp	.+8      	; 0xe5a <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     e52:	ce 01       	movw	r24, r28
     e54:	43 96       	adiw	r24, 0x13	; 19
     e56:	0e 94 0d 10 	call	0x201a	; 0x201a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     e5a:	ce 01       	movw	r24, r28
     e5c:	e1 dd       	rcall	.-1086   	; 0xa20 <prvUnlockQueue>
    }
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     e64:	fc 01       	movw	r30, r24
     e66:	44 81       	ldd	r20, Z+4	; 0x04
     e68:	55 81       	ldd	r21, Z+5	; 0x05
     e6a:	22 81       	ldd	r18, Z+2	; 0x02
     e6c:	33 81       	ldd	r19, Z+3	; 0x03
     e6e:	24 0f       	add	r18, r20
     e70:	35 1f       	adc	r19, r21
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	b9 01       	movw	r22, r18
     e78:	68 1b       	sub	r22, r24
     e7a:	79 0b       	sbc	r23, r25
     e7c:	cb 01       	movw	r24, r22
     e7e:	64 17       	cp	r22, r20
     e80:	75 07       	cpc	r23, r21
     e82:	10 f0       	brcs	.+4      	; 0xe88 <prvBytesInBuffer+0x24>
     e84:	84 1b       	sub	r24, r20
     e86:	95 0b       	sbc	r25, r21
     e88:	08 95       	ret

00000e8a <prvInitialiseNewStreamBuffer>:
     e8a:	0f 93       	push	r16
     e8c:	fc 01       	movw	r30, r24
     e8e:	8f e0       	ldi	r24, 0x0F	; 15
     e90:	df 01       	movw	r26, r30
     e92:	1d 92       	st	X+, r1
     e94:	8a 95       	dec	r24
     e96:	e9 f7       	brne	.-6      	; 0xe92 <prvInitialiseNewStreamBuffer+0x8>
     e98:	75 87       	std	Z+13, r23	; 0x0d
     e9a:	64 87       	std	Z+12, r22	; 0x0c
     e9c:	55 83       	std	Z+5, r21	; 0x05
     e9e:	44 83       	std	Z+4, r20	; 0x04
     ea0:	37 83       	std	Z+7, r19	; 0x07
     ea2:	26 83       	std	Z+6, r18	; 0x06
     ea4:	06 87       	std	Z+14, r16	; 0x0e
     ea6:	0f 91       	pop	r16
     ea8:	08 95       	ret

00000eaa <prvWriteBytesToBuffer>:
     eaa:	af 92       	push	r10
     eac:	bf 92       	push	r11
     eae:	cf 92       	push	r12
     eb0:	df 92       	push	r13
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	6c 01       	movw	r12, r24
     ec0:	5b 01       	movw	r10, r22
     ec2:	7a 01       	movw	r14, r20
     ec4:	fc 01       	movw	r30, r24
     ec6:	c2 81       	ldd	r28, Z+2	; 0x02
     ec8:	d3 81       	ldd	r29, Z+3	; 0x03
     eca:	04 81       	ldd	r16, Z+4	; 0x04
     ecc:	15 81       	ldd	r17, Z+5	; 0x05
     ece:	0c 1b       	sub	r16, r28
     ed0:	1d 0b       	sbc	r17, r29
     ed2:	40 17       	cp	r20, r16
     ed4:	51 07       	cpc	r21, r17
     ed6:	08 f4       	brcc	.+2      	; 0xeda <prvWriteBytesToBuffer+0x30>
     ed8:	8a 01       	movw	r16, r20
     eda:	f6 01       	movw	r30, r12
     edc:	84 85       	ldd	r24, Z+12	; 0x0c
     ede:	95 85       	ldd	r25, Z+13	; 0x0d
     ee0:	a8 01       	movw	r20, r16
     ee2:	b5 01       	movw	r22, r10
     ee4:	8c 0f       	add	r24, r28
     ee6:	9d 1f       	adc	r25, r29
     ee8:	0e 94 82 2b 	call	0x5704	; 0x5704 <memcpy>
     eec:	0e 15       	cp	r16, r14
     eee:	1f 05       	cpc	r17, r15
     ef0:	58 f4       	brcc	.+22     	; 0xf08 <prvWriteBytesToBuffer+0x5e>
     ef2:	a7 01       	movw	r20, r14
     ef4:	40 1b       	sub	r20, r16
     ef6:	51 0b       	sbc	r21, r17
     ef8:	b5 01       	movw	r22, r10
     efa:	60 0f       	add	r22, r16
     efc:	71 1f       	adc	r23, r17
     efe:	f6 01       	movw	r30, r12
     f00:	84 85       	ldd	r24, Z+12	; 0x0c
     f02:	95 85       	ldd	r25, Z+13	; 0x0d
     f04:	0e 94 82 2b 	call	0x5704	; 0x5704 <memcpy>
     f08:	ce 01       	movw	r24, r28
     f0a:	8e 0d       	add	r24, r14
     f0c:	9f 1d       	adc	r25, r15
     f0e:	f6 01       	movw	r30, r12
     f10:	24 81       	ldd	r18, Z+4	; 0x04
     f12:	35 81       	ldd	r19, Z+5	; 0x05
     f14:	82 17       	cp	r24, r18
     f16:	93 07       	cpc	r25, r19
     f18:	10 f0       	brcs	.+4      	; 0xf1e <prvWriteBytesToBuffer+0x74>
     f1a:	82 1b       	sub	r24, r18
     f1c:	93 0b       	sbc	r25, r19
     f1e:	f6 01       	movw	r30, r12
     f20:	93 83       	std	Z+3, r25	; 0x03
     f22:	82 83       	std	Z+2, r24	; 0x02
     f24:	c7 01       	movw	r24, r14
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	08 95       	ret

00000f3c <prvWriteMessageToBuffer>:
     f3c:	cf 92       	push	r12
     f3e:	df 92       	push	r13
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	1f 92       	push	r1
     f4e:	1f 92       	push	r1
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	7c 01       	movw	r14, r24
     f56:	6b 01       	movw	r12, r22
     f58:	5a 83       	std	Y+2, r21	; 0x02
     f5a:	49 83       	std	Y+1, r20	; 0x01
     f5c:	21 15       	cp	r18, r1
     f5e:	31 05       	cpc	r19, r1
     f60:	c1 f0       	breq	.+48     	; 0xf92 <prvWriteMessageToBuffer+0x56>
     f62:	fc 01       	movw	r30, r24
     f64:	86 85       	ldd	r24, Z+14	; 0x0e
     f66:	80 fd       	sbrc	r24, 0
     f68:	08 c0       	rjmp	.+16     	; 0xf7a <prvWriteMessageToBuffer+0x3e>
     f6a:	42 17       	cp	r20, r18
     f6c:	53 07       	cpc	r21, r19
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <prvWriteMessageToBuffer+0x36>
     f70:	9a 01       	movw	r18, r20
     f72:	3a 83       	std	Y+2, r19	; 0x02
     f74:	29 83       	std	Y+1, r18	; 0x01
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <prvWriteMessageToBuffer+0x5c>
     f7a:	20 17       	cp	r18, r16
     f7c:	31 07       	cpc	r19, r17
     f7e:	58 f0       	brcs	.+22     	; 0xf96 <prvWriteMessageToBuffer+0x5a>
     f80:	42 e0       	ldi	r20, 0x02	; 2
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	be 01       	movw	r22, r28
     f86:	6f 5f       	subi	r22, 0xFF	; 255
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	c7 01       	movw	r24, r14
     f8c:	8e df       	rcall	.-228    	; 0xeaa <prvWriteBytesToBuffer>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <prvWriteMessageToBuffer+0x5c>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <prvWriteMessageToBuffer+0x5c>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	88 23       	and	r24, r24
     f9a:	31 f0       	breq	.+12     	; 0xfa8 <prvWriteMessageToBuffer+0x6c>
     f9c:	49 81       	ldd	r20, Y+1	; 0x01
     f9e:	5a 81       	ldd	r21, Y+2	; 0x02
     fa0:	b6 01       	movw	r22, r12
     fa2:	c7 01       	movw	r24, r14
     fa4:	82 df       	rcall	.-252    	; 0xeaa <prvWriteBytesToBuffer>
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <prvWriteMessageToBuffer+0x70>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	08 95       	ret

00000fc2 <prvReadBytesFromBuffer>:
     fc2:	af 92       	push	r10
     fc4:	bf 92       	push	r11
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	7c 01       	movw	r14, r24
     fd8:	5b 01       	movw	r10, r22
     fda:	e9 01       	movw	r28, r18
     fdc:	42 17       	cp	r20, r18
     fde:	53 07       	cpc	r21, r19
     fe0:	08 f4       	brcc	.+2      	; 0xfe4 <prvReadBytesFromBuffer+0x22>
     fe2:	ea 01       	movw	r28, r20
     fe4:	20 97       	sbiw	r28, 0x00	; 0
     fe6:	81 f1       	breq	.+96     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
     fe8:	f7 01       	movw	r30, r14
     fea:	00 81       	ld	r16, Z
     fec:	11 81       	ldd	r17, Z+1	; 0x01
     fee:	84 81       	ldd	r24, Z+4	; 0x04
     ff0:	95 81       	ldd	r25, Z+5	; 0x05
     ff2:	80 1b       	sub	r24, r16
     ff4:	91 0b       	sbc	r25, r17
     ff6:	6e 01       	movw	r12, r28
     ff8:	8c 17       	cp	r24, r28
     ffa:	9d 07       	cpc	r25, r29
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffe:	6c 01       	movw	r12, r24
    1000:	f7 01       	movw	r30, r14
    1002:	64 85       	ldd	r22, Z+12	; 0x0c
    1004:	75 85       	ldd	r23, Z+13	; 0x0d
    1006:	60 0f       	add	r22, r16
    1008:	71 1f       	adc	r23, r17
    100a:	a6 01       	movw	r20, r12
    100c:	c5 01       	movw	r24, r10
    100e:	0e 94 82 2b 	call	0x5704	; 0x5704 <memcpy>
    1012:	cc 16       	cp	r12, r28
    1014:	dd 06       	cpc	r13, r29
    1016:	58 f4       	brcc	.+22     	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    1018:	ae 01       	movw	r20, r28
    101a:	4c 19       	sub	r20, r12
    101c:	5d 09       	sbc	r21, r13
    101e:	f7 01       	movw	r30, r14
    1020:	64 85       	ldd	r22, Z+12	; 0x0c
    1022:	75 85       	ldd	r23, Z+13	; 0x0d
    1024:	c5 01       	movw	r24, r10
    1026:	8c 0d       	add	r24, r12
    1028:	9d 1d       	adc	r25, r13
    102a:	0e 94 82 2b 	call	0x5704	; 0x5704 <memcpy>
    102e:	0c 0f       	add	r16, r28
    1030:	1d 1f       	adc	r17, r29
    1032:	f7 01       	movw	r30, r14
    1034:	84 81       	ldd	r24, Z+4	; 0x04
    1036:	95 81       	ldd	r25, Z+5	; 0x05
    1038:	08 17       	cp	r16, r24
    103a:	19 07       	cpc	r17, r25
    103c:	10 f0       	brcs	.+4      	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    103e:	08 1b       	sub	r16, r24
    1040:	19 0b       	sbc	r17, r25
    1042:	f7 01       	movw	r30, r14
    1044:	11 83       	std	Z+1, r17	; 0x01
    1046:	00 83       	st	Z, r16
    1048:	ce 01       	movw	r24, r28
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	cf 90       	pop	r12
    105a:	bf 90       	pop	r11
    105c:	af 90       	pop	r10
    105e:	08 95       	ret

00001060 <prvReadMessageFromBuffer>:
    1060:	6f 92       	push	r6
    1062:	7f 92       	push	r7
    1064:	8f 92       	push	r8
    1066:	9f 92       	push	r9
    1068:	af 92       	push	r10
    106a:	bf 92       	push	r11
    106c:	cf 92       	push	r12
    106e:	df 92       	push	r13
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	1f 92       	push	r1
    107e:	1f 92       	push	r1
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	6c 01       	movw	r12, r24
    1086:	4b 01       	movw	r8, r22
    1088:	5a 01       	movw	r10, r20
    108a:	79 01       	movw	r14, r18
    108c:	01 15       	cp	r16, r1
    108e:	11 05       	cpc	r17, r1
    1090:	b1 f0       	breq	.+44     	; 0x10be <prvReadMessageFromBuffer+0x5e>
    1092:	fc 01       	movw	r30, r24
    1094:	60 80       	ld	r6, Z
    1096:	71 80       	ldd	r7, Z+1	; 0x01
    1098:	a8 01       	movw	r20, r16
    109a:	be 01       	movw	r22, r28
    109c:	6f 5f       	subi	r22, 0xFF	; 255
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	90 df       	rcall	.-224    	; 0xfc2 <prvReadBytesFromBuffer>
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	e0 1a       	sub	r14, r16
    10a8:	f1 0a       	sbc	r15, r17
    10aa:	a8 16       	cp	r10, r24
    10ac:	b9 06       	cpc	r11, r25
    10ae:	30 f4       	brcc	.+12     	; 0x10bc <prvReadMessageFromBuffer+0x5c>
    10b0:	f6 01       	movw	r30, r12
    10b2:	71 82       	std	Z+1, r7	; 0x01
    10b4:	60 82       	st	Z, r6
    10b6:	a1 2c       	mov	r10, r1
    10b8:	b1 2c       	mov	r11, r1
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <prvReadMessageFromBuffer+0x5e>
    10bc:	5c 01       	movw	r10, r24
    10be:	97 01       	movw	r18, r14
    10c0:	a5 01       	movw	r20, r10
    10c2:	b4 01       	movw	r22, r8
    10c4:	c6 01       	movw	r24, r12
    10c6:	7d df       	rcall	.-262    	; 0xfc2 <prvReadBytesFromBuffer>
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	df 90       	pop	r13
    10da:	cf 90       	pop	r12
    10dc:	bf 90       	pop	r11
    10de:	af 90       	pop	r10
    10e0:	9f 90       	pop	r9
    10e2:	8f 90       	pop	r8
    10e4:	7f 90       	pop	r7
    10e6:	6f 90       	pop	r6
    10e8:	08 95       	ret

000010ea <xStreamBufferGenericCreate>:
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	ec 01       	movw	r28, r24
    10fa:	6b 01       	movw	r12, r22
    10fc:	41 30       	cpi	r20, 0x01	; 1
    10fe:	11 f4       	brne	.+4      	; 0x1104 <xStreamBufferGenericCreate+0x1a>
    1100:	01 e0       	ldi	r16, 0x01	; 1
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <xStreamBufferGenericCreate+0x1c>
    1104:	00 e0       	ldi	r16, 0x00	; 0
    1106:	c1 14       	cp	r12, r1
    1108:	d1 04       	cpc	r13, r1
    110a:	19 f4       	brne	.+6      	; 0x1112 <xStreamBufferGenericCreate+0x28>
    110c:	cc 24       	eor	r12, r12
    110e:	c3 94       	inc	r12
    1110:	d1 2c       	mov	r13, r1
    1112:	ce 01       	movw	r24, r28
    1114:	40 96       	adiw	r24, 0x10	; 16
    1116:	c8 17       	cp	r28, r24
    1118:	d9 07       	cpc	r29, r25
    111a:	20 f4       	brcc	.+8      	; 0x1124 <xStreamBufferGenericCreate+0x3a>
    111c:	21 96       	adiw	r28, 0x01	; 1
    111e:	70 d9       	rcall	.-3360   	; 0x400 <pvPortMalloc>
    1120:	7c 01       	movw	r14, r24
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <xStreamBufferGenericCreate+0x3e>
    1124:	e1 2c       	mov	r14, r1
    1126:	f1 2c       	mov	r15, r1
    1128:	e1 14       	cp	r14, r1
    112a:	f1 04       	cpc	r15, r1
    112c:	39 f0       	breq	.+14     	; 0x113c <xStreamBufferGenericCreate+0x52>
    112e:	96 01       	movw	r18, r12
    1130:	ae 01       	movw	r20, r28
    1132:	b7 01       	movw	r22, r14
    1134:	61 5f       	subi	r22, 0xF1	; 241
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	c7 01       	movw	r24, r14
    113a:	a7 de       	rcall	.-690    	; 0xe8a <prvInitialiseNewStreamBuffer>
    113c:	c7 01       	movw	r24, r14
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	08 95       	ret

0000114e <xStreamBufferReset>:
    114e:	0f 93       	push	r16
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	0f 92       	push	r0
    1156:	fc 01       	movw	r30, r24
    1158:	20 85       	ldd	r18, Z+8	; 0x08
    115a:	31 85       	ldd	r19, Z+9	; 0x09
    115c:	23 2b       	or	r18, r19
    115e:	71 f4       	brne	.+28     	; 0x117c <xStreamBufferReset+0x2e>
    1160:	22 85       	ldd	r18, Z+10	; 0x0a
    1162:	33 85       	ldd	r19, Z+11	; 0x0b
    1164:	23 2b       	or	r18, r19
    1166:	61 f4       	brne	.+24     	; 0x1180 <xStreamBufferReset+0x32>
    1168:	26 81       	ldd	r18, Z+6	; 0x06
    116a:	37 81       	ldd	r19, Z+7	; 0x07
    116c:	44 81       	ldd	r20, Z+4	; 0x04
    116e:	55 81       	ldd	r21, Z+5	; 0x05
    1170:	64 85       	ldd	r22, Z+12	; 0x0c
    1172:	75 85       	ldd	r23, Z+13	; 0x0d
    1174:	06 85       	ldd	r16, Z+14	; 0x0e
    1176:	89 de       	rcall	.-750    	; 0xe8a <prvInitialiseNewStreamBuffer>
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <xStreamBufferReset+0x34>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <xStreamBufferReset+0x34>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <xStreamBufferSpacesAvailable>:
    118a:	fc 01       	movw	r30, r24
    118c:	24 81       	ldd	r18, Z+4	; 0x04
    118e:	35 81       	ldd	r19, Z+5	; 0x05
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	82 0f       	add	r24, r18
    1196:	93 1f       	adc	r25, r19
    1198:	42 81       	ldd	r20, Z+2	; 0x02
    119a:	53 81       	ldd	r21, Z+3	; 0x03
    119c:	84 1b       	sub	r24, r20
    119e:	95 0b       	sbc	r25, r21
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	82 17       	cp	r24, r18
    11a4:	93 07       	cpc	r25, r19
    11a6:	10 f0       	brcs	.+4      	; 0x11ac <xStreamBufferSpacesAvailable+0x22>
    11a8:	82 1b       	sub	r24, r18
    11aa:	93 0b       	sbc	r25, r19
    11ac:	08 95       	ret

000011ae <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    11ae:	2f 92       	push	r2
    11b0:	3f 92       	push	r3
    11b2:	4f 92       	push	r4
    11b4:	5f 92       	push	r5
    11b6:	6f 92       	push	r6
    11b8:	7f 92       	push	r7
    11ba:	8f 92       	push	r8
    11bc:	9f 92       	push	r9
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	2b 97       	sbiw	r28, 0x0b	; 11
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	4c 01       	movw	r8, r24
    11e4:	7b 87       	std	Y+11, r23	; 0x0b
    11e6:	6a 87       	std	Y+10, r22	; 0x0a
    11e8:	1a 01       	movw	r2, r20
    11ea:	0e 83       	std	Y+6, r16	; 0x06
    11ec:	1f 83       	std	Y+7, r17	; 0x07
    11ee:	28 87       	std	Y+8, r18	; 0x08
    11f0:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    11f2:	fc 01       	movw	r30, r24
    11f4:	84 81       	ldd	r24, Z+4	; 0x04
    11f6:	95 81       	ldd	r25, Z+5	; 0x05
    11f8:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    11fa:	26 85       	ldd	r18, Z+14	; 0x0e
    11fc:	20 ff       	sbrs	r18, 0
    11fe:	0c c0       	rjmp	.+24     	; 0x1218 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1200:	2a 01       	movw	r4, r20
    1202:	f2 e0       	ldi	r31, 0x02	; 2
    1204:	4f 0e       	add	r4, r31
    1206:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1208:	84 15       	cp	r24, r4
    120a:	95 05       	cpc	r25, r5
    120c:	58 f4       	brcc	.+22     	; 0x1224 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    120e:	1e 82       	std	Y+6, r1	; 0x06
    1210:	1f 82       	std	Y+7, r1	; 0x07
    1212:	18 86       	std	Y+8, r1	; 0x08
    1214:	19 86       	std	Y+9, r1	; 0x09
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1218:	84 17       	cp	r24, r20
    121a:	95 07       	cpc	r25, r21
    121c:	10 f0       	brcs	.+4      	; 0x1222 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    121e:	2a 01       	movw	r4, r20
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1222:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1224:	8e 81       	ldd	r24, Y+6	; 0x06
    1226:	9f 81       	ldd	r25, Y+7	; 0x07
    1228:	a8 85       	ldd	r26, Y+8	; 0x08
    122a:	b9 85       	ldd	r27, Y+9	; 0x09
    122c:	89 2b       	or	r24, r25
    122e:	8a 2b       	or	r24, r26
    1230:	8b 2b       	or	r24, r27
    1232:	09 f4       	brne	.+2      	; 0x1236 <xStreamBufferSend+0x88>
    1234:	36 c0       	rjmp	.+108    	; 0x12a2 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1236:	ce 01       	movw	r24, r28
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	e0 d7       	rcall	.+4032   	; 0x21fc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1242:	c4 01       	movw	r24, r8
    1244:	a2 df       	rcall	.-188    	; 0x118a <xStreamBufferSpacesAvailable>
    1246:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1248:	84 15       	cp	r24, r4
    124a:	95 05       	cpc	r25, r5
    124c:	38 f5       	brcc	.+78     	; 0x129c <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 bd 14 	call	0x297a	; 0x297a <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1258:	0e 94 8f 11 	call	0x231e	; 0x231e <xTaskGetCurrentTaskHandle>
    125c:	f4 01       	movw	r30, r8
    125e:	93 87       	std	Z+11, r25	; 0x0b
    1260:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1262:	0f 90       	pop	r0
    1264:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1266:	ae 80       	ldd	r10, Y+6	; 0x06
    1268:	bf 80       	ldd	r11, Y+7	; 0x07
    126a:	c8 84       	ldd	r12, Y+8	; 0x08
    126c:	d9 84       	ldd	r13, Y+9	; 0x09
    126e:	e1 2c       	mov	r14, r1
    1270:	f1 2c       	mov	r15, r1
    1272:	00 e0       	ldi	r16, 0x00	; 0
    1274:	10 e0       	ldi	r17, 0x00	; 0
    1276:	98 01       	movw	r18, r16
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	ba 01       	movw	r22, r20
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	0e 94 fd 11 	call	0x23fa	; 0x23fa <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1284:	f4 01       	movw	r30, r8
    1286:	13 86       	std	Z+11, r1	; 0x0b
    1288:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    128a:	be 01       	movw	r22, r28
    128c:	6a 5f       	subi	r22, 0xFA	; 250
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	ce 01       	movw	r24, r28
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	da d7       	rcall	.+4020   	; 0x224a <xTaskCheckForTimeOut>
    1296:	88 23       	and	r24, r24
    1298:	89 f2       	breq	.-94     	; 0x123c <xStreamBufferSend+0x8e>
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
                    break;
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    12a2:	61 2c       	mov	r6, r1
    12a4:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    12a6:	61 14       	cp	r6, r1
    12a8:	71 04       	cpc	r7, r1
    12aa:	19 f4       	brne	.+6      	; 0x12b2 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12ac:	c4 01       	movw	r24, r8
    12ae:	6d df       	rcall	.-294    	; 0x118a <xStreamBufferSpacesAvailable>
    12b0:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    12b2:	82 01       	movw	r16, r4
    12b4:	93 01       	movw	r18, r6
    12b6:	a1 01       	movw	r20, r2
    12b8:	6a 85       	ldd	r22, Y+10	; 0x0a
    12ba:	7b 85       	ldd	r23, Y+11	; 0x0b
    12bc:	c4 01       	movw	r24, r8
    12be:	3e de       	rcall	.-900    	; 0xf3c <prvWriteMessageToBuffer>
    12c0:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    12c2:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    12c4:	e9 f0       	breq	.+58     	; 0x1300 <xStreamBufferSend+0x152>
    12c6:	c4 01       	movw	r24, r8
    12c8:	cd dd       	rcall	.-1126   	; 0xe64 <prvBytesInBuffer>
    12ca:	f4 01       	movw	r30, r8
    12cc:	26 81       	ldd	r18, Z+6	; 0x06
    12ce:	37 81       	ldd	r19, Z+7	; 0x07
    12d0:	82 17       	cp	r24, r18
    12d2:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    12d4:	a8 f0       	brcs	.+42     	; 0x1300 <xStreamBufferSend+0x152>
    12d6:	89 d3       	rcall	.+1810   	; 0x19ea <vTaskSuspendAll>
    12d8:	f4 01       	movw	r30, r8
    12da:	80 85       	ldd	r24, Z+8	; 0x08
    12dc:	91 85       	ldd	r25, Z+9	; 0x09
    12de:	89 2b       	or	r24, r25
    12e0:	71 f0       	breq	.+28     	; 0x12fe <xStreamBufferSend+0x150>
    12e2:	80 85       	ldd	r24, Z+8	; 0x08
    12e4:	91 85       	ldd	r25, Z+9	; 0x09
    12e6:	e1 2c       	mov	r14, r1
    12e8:	f1 2c       	mov	r15, r1
    12ea:	00 e0       	ldi	r16, 0x00	; 0
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	a9 01       	movw	r20, r18
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	0e 94 a4 12 	call	0x2548	; 0x2548 <xTaskGenericNotify>
    12f8:	f4 01       	movw	r30, r8
    12fa:	11 86       	std	Z+9, r1	; 0x09
    12fc:	10 86       	std	Z+8, r1	; 0x08
    12fe:	b5 d4       	rcall	.+2410   	; 0x1c6a <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1300:	c6 01       	movw	r24, r12
    1302:	2b 96       	adiw	r28, 0x0b	; 11
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	bf 90       	pop	r11
    1320:	af 90       	pop	r10
    1322:	9f 90       	pop	r9
    1324:	8f 90       	pop	r8
    1326:	7f 90       	pop	r7
    1328:	6f 90       	pop	r6
    132a:	5f 90       	pop	r5
    132c:	4f 90       	pop	r4
    132e:	3f 90       	pop	r3
    1330:	2f 90       	pop	r2
    1332:	08 95       	ret

00001334 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1334:	af 92       	push	r10
    1336:	bf 92       	push	r11
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	ec 01       	movw	r28, r24
    134a:	7b 01       	movw	r14, r22
    134c:	5a 01       	movw	r10, r20
    134e:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1350:	8e 85       	ldd	r24, Y+14	; 0x0e
    1352:	80 ff       	sbrs	r24, 0
    1354:	04 c0       	rjmp	.+8      	; 0x135e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1356:	8a 01       	movw	r16, r20
    1358:	0e 5f       	subi	r16, 0xFE	; 254
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    135e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1360:	ce 01       	movw	r24, r28
    1362:	13 df       	rcall	.-474    	; 0x118a <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1364:	9c 01       	movw	r18, r24
    1366:	a5 01       	movw	r20, r10
    1368:	b7 01       	movw	r22, r14
    136a:	ce 01       	movw	r24, r28
    136c:	e7 dd       	rcall	.-1074   	; 0xf3c <prvWriteMessageToBuffer>
    136e:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1370:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1372:	c1 f0       	breq	.+48     	; 0x13a4 <xStreamBufferSendFromISR+0x70>
    1374:	ce 01       	movw	r24, r28
    1376:	76 dd       	rcall	.-1300   	; 0xe64 <prvBytesInBuffer>
    1378:	2e 81       	ldd	r18, Y+6	; 0x06
    137a:	3f 81       	ldd	r19, Y+7	; 0x07
    137c:	82 17       	cp	r24, r18
    137e:	93 07       	cpc	r25, r19
    1380:	88 f0       	brcs	.+34     	; 0x13a4 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1382:	88 85       	ldd	r24, Y+8	; 0x08
    1384:	99 85       	ldd	r25, Y+9	; 0x09
    1386:	89 2b       	or	r24, r25
    1388:	69 f0       	breq	.+26     	; 0x13a4 <xStreamBufferSendFromISR+0x70>
    138a:	88 85       	ldd	r24, Y+8	; 0x08
    138c:	99 85       	ldd	r25, Y+9	; 0x09
    138e:	e1 2c       	mov	r14, r1
    1390:	f1 2c       	mov	r15, r1
    1392:	00 e0       	ldi	r16, 0x00	; 0
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	0e 94 9b 13 	call	0x2736	; 0x2736 <xTaskGenericNotifyFromISR>
    13a0:	19 86       	std	Y+9, r1	; 0x09
    13a2:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    13a4:	c5 01       	movw	r24, r10
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	08 95       	ret

000013bc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    13bc:	4f 92       	push	r4
    13be:	5f 92       	push	r5
    13c0:	6f 92       	push	r6
    13c2:	7f 92       	push	r7
    13c4:	8f 92       	push	r8
    13c6:	9f 92       	push	r9
    13c8:	af 92       	push	r10
    13ca:	bf 92       	push	r11
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	ec 01       	movw	r28, r24
    13de:	2b 01       	movw	r4, r22
    13e0:	3a 01       	movw	r6, r20
    13e2:	58 01       	movw	r10, r16
    13e4:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    13e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    13e8:	80 ff       	sbrs	r24, 0
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    13ec:	68 94       	set
    13ee:	88 24       	eor	r8, r8
    13f0:	81 f8       	bld	r8, 1
    13f2:	91 2c       	mov	r9, r1
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    13f6:	81 2c       	mov	r8, r1
    13f8:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    13fa:	a1 14       	cp	r10, r1
    13fc:	b1 04       	cpc	r11, r1
    13fe:	c1 04       	cpc	r12, r1
    1400:	d1 04       	cpc	r13, r1
    1402:	31 f1       	breq	.+76     	; 0x1450 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    140a:	ce 01       	movw	r24, r28
    140c:	2b dd       	rcall	.-1450   	; 0xe64 <prvBytesInBuffer>
    140e:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1410:	88 16       	cp	r8, r24
    1412:	99 06       	cpc	r9, r25
    1414:	40 f0       	brcs	.+16     	; 0x1426 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 bd 14 	call	0x297a	; 0x297a <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1420:	7e d7       	rcall	.+3836   	; 0x231e <xTaskGetCurrentTaskHandle>
    1422:	99 87       	std	Y+9, r25	; 0x09
    1424:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    142a:	8e 14       	cp	r8, r14
    142c:	9f 04       	cpc	r9, r15
    142e:	98 f0       	brcs	.+38     	; 0x1456 <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1430:	e1 2c       	mov	r14, r1
    1432:	f1 2c       	mov	r15, r1
    1434:	00 e0       	ldi	r16, 0x00	; 0
    1436:	10 e0       	ldi	r17, 0x00	; 0
    1438:	98 01       	movw	r18, r16
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	ba 01       	movw	r22, r20
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	db d7       	rcall	.+4022   	; 0x23fa <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1444:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1446:	18 86       	std	Y+8, r1	; 0x08
    1448:	ce 01       	movw	r24, r28
    144a:	0c dd       	rcall	.-1512   	; 0xe64 <prvBytesInBuffer>
    144c:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <xStreamBufferReceive+0x9a>
    1450:	ce 01       	movw	r24, r28
    1452:	08 dd       	rcall	.-1520   	; 0xe64 <prvBytesInBuffer>
    1454:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1456:	8e 14       	cp	r8, r14
    1458:	9f 04       	cpc	r9, r15
    145a:	e8 f4       	brcc	.+58     	; 0x1496 <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    145c:	84 01       	movw	r16, r8
    145e:	97 01       	movw	r18, r14
    1460:	a3 01       	movw	r20, r6
    1462:	b2 01       	movw	r22, r4
    1464:	ce 01       	movw	r24, r28
    1466:	fc dd       	rcall	.-1032   	; 0x1060 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1468:	6c 01       	movw	r12, r24
    146a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    146c:	b1 f0       	breq	.+44     	; 0x149a <xStreamBufferReceive+0xde>
    146e:	bd d2       	rcall	.+1402   	; 0x19ea <vTaskSuspendAll>
    1470:	8a 85       	ldd	r24, Y+10	; 0x0a
    1472:	9b 85       	ldd	r25, Y+11	; 0x0b
    1474:	89 2b       	or	r24, r25
    1476:	69 f0       	breq	.+26     	; 0x1492 <xStreamBufferReceive+0xd6>
    1478:	8a 85       	ldd	r24, Y+10	; 0x0a
    147a:	9b 85       	ldd	r25, Y+11	; 0x0b
    147c:	e1 2c       	mov	r14, r1
    147e:	f1 2c       	mov	r15, r1
    1480:	00 e0       	ldi	r16, 0x00	; 0
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	a9 01       	movw	r20, r18
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	0e 94 a4 12 	call	0x2548	; 0x2548 <xTaskGenericNotify>
    148e:	1b 86       	std	Y+11, r1	; 0x0b
    1490:	1a 86       	std	Y+10, r1	; 0x0a
    1492:	eb d3       	rcall	.+2006   	; 0x1c6a <xTaskResumeAll>
    1494:	02 c0       	rjmp	.+4      	; 0x149a <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1496:	c1 2c       	mov	r12, r1
    1498:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    149a:	c6 01       	movw	r24, r12
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	df 90       	pop	r13
    14aa:	cf 90       	pop	r12
    14ac:	bf 90       	pop	r11
    14ae:	af 90       	pop	r10
    14b0:	9f 90       	pop	r9
    14b2:	8f 90       	pop	r8
    14b4:	7f 90       	pop	r7
    14b6:	6f 90       	pop	r6
    14b8:	5f 90       	pop	r5
    14ba:	4f 90       	pop	r4
    14bc:	08 95       	ret

000014be <prvResetNextTaskUnblockTime>:
    14be:	e0 91 b7 11 	lds	r30, 0x11B7	; 0x8011b7 <pxDelayedTaskList>
    14c2:	f0 91 b8 11 	lds	r31, 0x11B8	; 0x8011b8 <pxDelayedTaskList+0x1>
    14c6:	80 81       	ld	r24, Z
    14c8:	81 11       	cpse	r24, r1
    14ca:	0c c0       	rjmp	.+24     	; 0x14e4 <prvResetNextTaskUnblockTime+0x26>
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	9f ef       	ldi	r25, 0xFF	; 255
    14d0:	dc 01       	movw	r26, r24
    14d2:	80 93 81 11 	sts	0x1181, r24	; 0x801181 <xNextTaskUnblockTime>
    14d6:	90 93 82 11 	sts	0x1182, r25	; 0x801182 <xNextTaskUnblockTime+0x1>
    14da:	a0 93 83 11 	sts	0x1183, r26	; 0x801183 <xNextTaskUnblockTime+0x2>
    14de:	b0 93 84 11 	sts	0x1184, r27	; 0x801184 <xNextTaskUnblockTime+0x3>
    14e2:	08 95       	ret
    14e4:	e0 91 b7 11 	lds	r30, 0x11B7	; 0x8011b7 <pxDelayedTaskList>
    14e8:	f0 91 b8 11 	lds	r31, 0x11B8	; 0x8011b8 <pxDelayedTaskList+0x1>
    14ec:	07 80       	ldd	r0, Z+7	; 0x07
    14ee:	f0 85       	ldd	r31, Z+8	; 0x08
    14f0:	e0 2d       	mov	r30, r0
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	a2 81       	ldd	r26, Z+2	; 0x02
    14f8:	b3 81       	ldd	r27, Z+3	; 0x03
    14fa:	80 93 81 11 	sts	0x1181, r24	; 0x801181 <xNextTaskUnblockTime>
    14fe:	90 93 82 11 	sts	0x1182, r25	; 0x801182 <xNextTaskUnblockTime+0x1>
    1502:	a0 93 83 11 	sts	0x1183, r26	; 0x801183 <xNextTaskUnblockTime+0x2>
    1506:	b0 93 84 11 	sts	0x1184, r27	; 0x801184 <xNextTaskUnblockTime+0x3>
    150a:	08 95       	ret

0000150c <prvDeleteTCB>:
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	ec 01       	movw	r28, r24
    1512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1516:	1d d8       	rcall	.-4038   	; 0x552 <vPortFree>
    1518:	ce 01       	movw	r24, r28
    151a:	1b d8       	rcall	.-4042   	; 0x552 <vPortFree>
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	08 95       	ret

00001522 <prvInitialiseNewTask>:
    1522:	4f 92       	push	r4
    1524:	5f 92       	push	r5
    1526:	6f 92       	push	r6
    1528:	7f 92       	push	r7
    152a:	8f 92       	push	r8
    152c:	9f 92       	push	r9
    152e:	af 92       	push	r10
    1530:	bf 92       	push	r11
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	2c 01       	movw	r4, r24
    1542:	5b 01       	movw	r10, r22
    1544:	4a 01       	movw	r8, r20
    1546:	39 01       	movw	r6, r18
    1548:	e6 01       	movw	r28, r12
    154a:	65 ea       	ldi	r22, 0xA5	; 165
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1550:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1552:	0e 94 8b 2b 	call	0x5716	; 0x5716 <memset>
    1556:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1558:	9c 8d       	ldd	r25, Y+28	; 0x1c
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	82 1a       	sub	r8, r18
    155e:	91 08       	sbc	r9, r1
    1560:	88 0e       	add	r8, r24
    1562:	99 1e       	adc	r9, r25
    1564:	a1 14       	cp	r10, r1
    1566:	b1 04       	cpc	r11, r1
    1568:	89 f4       	brne	.+34     	; 0x158c <prvInitialiseNewTask+0x6a>
    156a:	15 c0       	rjmp	.+42     	; 0x1596 <prvInitialiseNewTask+0x74>
    156c:	82 2f       	mov	r24, r18
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	f5 01       	movw	r30, r10
    1572:	e8 0f       	add	r30, r24
    1574:	f9 1f       	adc	r31, r25
    1576:	30 81       	ld	r19, Z
    1578:	de 01       	movw	r26, r28
    157a:	a8 0f       	add	r26, r24
    157c:	b9 1f       	adc	r27, r25
    157e:	5d 96       	adiw	r26, 0x1d	; 29
    1580:	3c 93       	st	X, r19
    1582:	80 81       	ld	r24, Z
    1584:	88 23       	and	r24, r24
    1586:	29 f0       	breq	.+10     	; 0x1592 <prvInitialiseNewTask+0x70>
    1588:	2f 5f       	subi	r18, 0xFF	; 255
    158a:	01 c0       	rjmp	.+2      	; 0x158e <prvInitialiseNewTask+0x6c>
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	20 31       	cpi	r18, 0x10	; 16
    1590:	68 f3       	brcs	.-38     	; 0x156c <prvInitialiseNewTask+0x4a>
    1592:	1c a6       	std	Y+44, r1	; 0x2c
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <prvInitialiseNewTask+0x76>
    1596:	1d 8e       	std	Y+29, r1	; 0x1d
    1598:	0a 30       	cpi	r16, 0x0A	; 10
    159a:	08 f0       	brcs	.+2      	; 0x159e <prvInitialiseNewTask+0x7c>
    159c:	09 e0       	ldi	r16, 0x09	; 9
    159e:	0a 8f       	std	Y+26, r16	; 0x1a
    15a0:	0d a7       	std	Y+45, r16	; 0x2d
    15a2:	1e a6       	std	Y+46, r1	; 0x2e
    15a4:	ce 01       	movw	r24, r28
    15a6:	02 96       	adiw	r24, 0x02	; 2
    15a8:	22 d8       	rcall	.-4028   	; 0x5ee <vListInitialiseItem>
    15aa:	ce 01       	movw	r24, r28
    15ac:	0e 96       	adiw	r24, 0x0e	; 14
    15ae:	1f d8       	rcall	.-4034   	; 0x5ee <vListInitialiseItem>
    15b0:	db 87       	std	Y+11, r29	; 0x0b
    15b2:	ca 87       	std	Y+10, r28	; 0x0a
    15b4:	8a e0       	ldi	r24, 0x0A	; 10
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a0 e0       	ldi	r26, 0x00	; 0
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	80 1b       	sub	r24, r16
    15be:	91 09       	sbc	r25, r1
    15c0:	a1 09       	sbc	r26, r1
    15c2:	b1 09       	sbc	r27, r1
    15c4:	8e 87       	std	Y+14, r24	; 0x0e
    15c6:	9f 87       	std	Y+15, r25	; 0x0f
    15c8:	a8 8b       	std	Y+16, r26	; 0x10
    15ca:	b9 8b       	std	Y+17, r27	; 0x11
    15cc:	df 8b       	std	Y+23, r29	; 0x17
    15ce:	ce 8b       	std	Y+22, r28	; 0x16
    15d0:	84 e0       	ldi	r24, 0x04	; 4
    15d2:	fe 01       	movw	r30, r28
    15d4:	bf 96       	adiw	r30, 0x2f	; 47
    15d6:	df 01       	movw	r26, r30
    15d8:	1d 92       	st	X+, r1
    15da:	8a 95       	dec	r24
    15dc:	e9 f7       	brne	.-6      	; 0x15d8 <prvInitialiseNewTask+0xb6>
    15de:	1b aa       	std	Y+51, r1	; 0x33
    15e0:	a3 01       	movw	r20, r6
    15e2:	b2 01       	movw	r22, r4
    15e4:	c4 01       	movw	r24, r8
    15e6:	77 d8       	rcall	.-3858   	; 0x6d6 <pxPortInitialiseStack>
    15e8:	99 83       	std	Y+1, r25	; 0x01
    15ea:	88 83       	st	Y, r24
    15ec:	e1 14       	cp	r14, r1
    15ee:	f1 04       	cpc	r15, r1
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <prvInitialiseNewTask+0xd6>
    15f2:	f7 01       	movw	r30, r14
    15f4:	d1 83       	std	Z+1, r29	; 0x01
    15f6:	c0 83       	st	Z, r28
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	0f 91       	pop	r16
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	bf 90       	pop	r11
    1608:	af 90       	pop	r10
    160a:	9f 90       	pop	r9
    160c:	8f 90       	pop	r8
    160e:	7f 90       	pop	r7
    1610:	6f 90       	pop	r6
    1612:	5f 90       	pop	r5
    1614:	4f 90       	pop	r4
    1616:	08 95       	ret

00001618 <prvInitialiseTaskLists>:
    1618:	cf 93       	push	r28
    161a:	c0 e0       	ldi	r28, 0x00	; 0
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <prvInitialiseTaskLists+0x18>
    161e:	2b e0       	ldi	r18, 0x0B	; 11
    1620:	c2 9f       	mul	r28, r18
    1622:	c0 01       	movw	r24, r0
    1624:	11 24       	eor	r1, r1
    1626:	81 53       	subi	r24, 0x31	; 49
    1628:	9e 4e       	sbci	r25, 0xEE	; 238
    162a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <vListInitialise>
    162e:	cf 5f       	subi	r28, 0xFF	; 255
    1630:	ca 30       	cpi	r28, 0x0A	; 10
    1632:	a8 f3       	brcs	.-22     	; 0x161e <prvInitialiseTaskLists+0x6>
    1634:	84 ec       	ldi	r24, 0xC4	; 196
    1636:	91 e1       	ldi	r25, 0x11	; 17
    1638:	0e 94 e6 02 	call	0x5cc	; 0x5cc <vListInitialise>
    163c:	89 eb       	ldi	r24, 0xB9	; 185
    163e:	91 e1       	ldi	r25, 0x11	; 17
    1640:	0e 94 e6 02 	call	0x5cc	; 0x5cc <vListInitialise>
    1644:	8a ea       	ldi	r24, 0xAA	; 170
    1646:	91 e1       	ldi	r25, 0x11	; 17
    1648:	0e 94 e6 02 	call	0x5cc	; 0x5cc <vListInitialise>
    164c:	8f e9       	ldi	r24, 0x9F	; 159
    164e:	91 e1       	ldi	r25, 0x11	; 17
    1650:	0e 94 e6 02 	call	0x5cc	; 0x5cc <vListInitialise>
    1654:	83 e9       	ldi	r24, 0x93	; 147
    1656:	91 e1       	ldi	r25, 0x11	; 17
    1658:	0e 94 e6 02 	call	0x5cc	; 0x5cc <vListInitialise>
    165c:	84 ec       	ldi	r24, 0xC4	; 196
    165e:	91 e1       	ldi	r25, 0x11	; 17
    1660:	90 93 b8 11 	sts	0x11B8, r25	; 0x8011b8 <pxDelayedTaskList+0x1>
    1664:	80 93 b7 11 	sts	0x11B7, r24	; 0x8011b7 <pxDelayedTaskList>
    1668:	89 eb       	ldi	r24, 0xB9	; 185
    166a:	91 e1       	ldi	r25, 0x11	; 17
    166c:	90 93 b6 11 	sts	0x11B6, r25	; 0x8011b6 <pxOverflowDelayedTaskList+0x1>
    1670:	80 93 b5 11 	sts	0x11B5, r24	; 0x8011b5 <pxOverflowDelayedTaskList>
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <prvAddNewTaskToReadyList>:
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	ec 01       	movw	r28, r24
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	0f 92       	push	r0
    1684:	80 91 92 11 	lds	r24, 0x1192	; 0x801192 <uxCurrentNumberOfTasks>
    1688:	8f 5f       	subi	r24, 0xFF	; 255
    168a:	80 93 92 11 	sts	0x1192, r24	; 0x801192 <uxCurrentNumberOfTasks>
    168e:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <pxCurrentTCB>
    1692:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1696:	89 2b       	or	r24, r25
    1698:	51 f4       	brne	.+20     	; 0x16ae <prvAddNewTaskToReadyList+0x36>
    169a:	d0 93 3e 12 	sts	0x123E, r29	; 0x80123e <pxCurrentTCB+0x1>
    169e:	c0 93 3d 12 	sts	0x123D, r28	; 0x80123d <pxCurrentTCB>
    16a2:	80 91 92 11 	lds	r24, 0x1192	; 0x801192 <uxCurrentNumberOfTasks>
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 f4       	brne	.+36     	; 0x16ce <prvAddNewTaskToReadyList+0x56>
    16aa:	b6 df       	rcall	.-148    	; 0x1618 <prvInitialiseTaskLists>
    16ac:	10 c0       	rjmp	.+32     	; 0x16ce <prvAddNewTaskToReadyList+0x56>
    16ae:	80 91 8c 11 	lds	r24, 0x118C	; 0x80118c <xSchedulerRunning>
    16b2:	81 11       	cpse	r24, r1
    16b4:	0c c0       	rjmp	.+24     	; 0x16ce <prvAddNewTaskToReadyList+0x56>
    16b6:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    16ba:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    16be:	92 8d       	ldd	r25, Z+26	; 0x1a
    16c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16c2:	89 17       	cp	r24, r25
    16c4:	20 f0       	brcs	.+8      	; 0x16ce <prvAddNewTaskToReadyList+0x56>
    16c6:	d0 93 3e 12 	sts	0x123E, r29	; 0x80123e <pxCurrentTCB+0x1>
    16ca:	c0 93 3d 12 	sts	0x123D, r28	; 0x80123d <pxCurrentTCB>
    16ce:	80 91 85 11 	lds	r24, 0x1185	; 0x801185 <uxTaskNumber>
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	80 93 85 11 	sts	0x1185, r24	; 0x801185 <uxTaskNumber>
    16d8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    16da:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <uxTopReadyPriority>
    16de:	8e 17       	cp	r24, r30
    16e0:	10 f4       	brcc	.+4      	; 0x16e6 <prvAddNewTaskToReadyList+0x6e>
    16e2:	e0 93 8d 11 	sts	0x118D, r30	; 0x80118d <uxTopReadyPriority>
    16e6:	8b e0       	ldi	r24, 0x0B	; 11
    16e8:	8e 9f       	mul	r24, r30
    16ea:	f0 01       	movw	r30, r0
    16ec:	11 24       	eor	r1, r1
    16ee:	e1 53       	subi	r30, 0x31	; 49
    16f0:	fe 4e       	sbci	r31, 0xEE	; 238
    16f2:	01 80       	ldd	r0, Z+1	; 0x01
    16f4:	f2 81       	ldd	r31, Z+2	; 0x02
    16f6:	e0 2d       	mov	r30, r0
    16f8:	ff 83       	std	Y+7, r31	; 0x07
    16fa:	ee 83       	std	Y+6, r30	; 0x06
    16fc:	26 81       	ldd	r18, Z+6	; 0x06
    16fe:	37 81       	ldd	r19, Z+7	; 0x07
    1700:	39 87       	std	Y+9, r19	; 0x09
    1702:	28 87       	std	Y+8, r18	; 0x08
    1704:	a6 81       	ldd	r26, Z+6	; 0x06
    1706:	b7 81       	ldd	r27, Z+7	; 0x07
    1708:	9e 01       	movw	r18, r28
    170a:	2e 5f       	subi	r18, 0xFE	; 254
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	15 96       	adiw	r26, 0x05	; 5
    1710:	3c 93       	st	X, r19
    1712:	2e 93       	st	-X, r18
    1714:	14 97       	sbiw	r26, 0x04	; 4
    1716:	37 83       	std	Z+7, r19	; 0x07
    1718:	26 83       	std	Z+6, r18	; 0x06
    171a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    171c:	8e 9f       	mul	r24, r30
    171e:	f0 01       	movw	r30, r0
    1720:	11 24       	eor	r1, r1
    1722:	e1 53       	subi	r30, 0x31	; 49
    1724:	fe 4e       	sbci	r31, 0xEE	; 238
    1726:	fd 87       	std	Y+13, r31	; 0x0d
    1728:	ec 87       	std	Y+12, r30	; 0x0c
    172a:	80 81       	ld	r24, Z
    172c:	8f 5f       	subi	r24, 0xFF	; 255
    172e:	80 83       	st	Z, r24
    1730:	0f 90       	pop	r0
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	80 91 8c 11 	lds	r24, 0x118C	; 0x80118c <xSchedulerRunning>
    1738:	88 23       	and	r24, r24
    173a:	49 f0       	breq	.+18     	; 0x174e <prvAddNewTaskToReadyList+0xd6>
    173c:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    1740:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1744:	92 8d       	ldd	r25, Z+26	; 0x1a
    1746:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1748:	98 17       	cp	r25, r24
    174a:	08 f4       	brcc	.+2      	; 0x174e <prvAddNewTaskToReadyList+0xd6>
    174c:	0d d8       	rcall	.-4070   	; 0x768 <vPortYield>
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <prvCheckTasksWaitingTermination>:
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	1b c0       	rjmp	.+54     	; 0x1790 <prvCheckTasksWaitingTermination+0x3c>
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
    1760:	e0 91 a6 11 	lds	r30, 0x11A6	; 0x8011a6 <xTasksWaitingTermination+0x7>
    1764:	f0 91 a7 11 	lds	r31, 0x11A7	; 0x8011a7 <xTasksWaitingTermination+0x8>
    1768:	c0 85       	ldd	r28, Z+8	; 0x08
    176a:	d1 85       	ldd	r29, Z+9	; 0x09
    176c:	ce 01       	movw	r24, r28
    176e:	02 96       	adiw	r24, 0x02	; 2
    1770:	0e 94 38 03 	call	0x670	; 0x670 <uxListRemove>
    1774:	80 91 92 11 	lds	r24, 0x1192	; 0x801192 <uxCurrentNumberOfTasks>
    1778:	81 50       	subi	r24, 0x01	; 1
    177a:	80 93 92 11 	sts	0x1192, r24	; 0x801192 <uxCurrentNumberOfTasks>
    177e:	80 91 9e 11 	lds	r24, 0x119E	; 0x80119e <uxDeletedTasksWaitingCleanUp>
    1782:	81 50       	subi	r24, 0x01	; 1
    1784:	80 93 9e 11 	sts	0x119E, r24	; 0x80119e <uxDeletedTasksWaitingCleanUp>
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	ce 01       	movw	r24, r28
    178e:	be de       	rcall	.-644    	; 0x150c <prvDeleteTCB>
    1790:	80 91 9e 11 	lds	r24, 0x119E	; 0x80119e <uxDeletedTasksWaitingCleanUp>
    1794:	81 11       	cpse	r24, r1
    1796:	e1 cf       	rjmp	.-62     	; 0x175a <prvCheckTasksWaitingTermination+0x6>
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret

0000179e <prvAddCurrentTaskToDelayedList>:
    179e:	8f 92       	push	r8
    17a0:	9f 92       	push	r9
    17a2:	af 92       	push	r10
    17a4:	bf 92       	push	r11
    17a6:	cf 92       	push	r12
    17a8:	df 92       	push	r13
    17aa:	ef 92       	push	r14
    17ac:	ff 92       	push	r15
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	6b 01       	movw	r12, r22
    17b4:	7c 01       	movw	r14, r24
    17b6:	c4 2f       	mov	r28, r20
    17b8:	80 90 8e 11 	lds	r8, 0x118E	; 0x80118e <xTickCount>
    17bc:	90 90 8f 11 	lds	r9, 0x118F	; 0x80118f <xTickCount+0x1>
    17c0:	a0 90 90 11 	lds	r10, 0x1190	; 0x801190 <xTickCount+0x2>
    17c4:	b0 90 91 11 	lds	r11, 0x1191	; 0x801191 <xTickCount+0x3>
    17c8:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <pxCurrentTCB>
    17cc:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    17d0:	02 96       	adiw	r24, 0x02	; 2
    17d2:	0e 94 38 03 	call	0x670	; 0x670 <uxListRemove>
    17d6:	8f ef       	ldi	r24, 0xFF	; 255
    17d8:	c8 16       	cp	r12, r24
    17da:	d8 06       	cpc	r13, r24
    17dc:	e8 06       	cpc	r14, r24
    17de:	f8 06       	cpc	r15, r24
    17e0:	b1 f5       	brne	.+108    	; 0x184e <prvAddCurrentTaskToDelayedList+0xb0>
    17e2:	cc 23       	and	r28, r28
    17e4:	a1 f1       	breq	.+104    	; 0x184e <prvAddCurrentTaskToDelayedList+0xb0>
    17e6:	e3 e9       	ldi	r30, 0x93	; 147
    17e8:	f1 e1       	ldi	r31, 0x11	; 17
    17ea:	a1 81       	ldd	r26, Z+1	; 0x01
    17ec:	b2 81       	ldd	r27, Z+2	; 0x02
    17ee:	c0 91 3d 12 	lds	r28, 0x123D	; 0x80123d <pxCurrentTCB>
    17f2:	d0 91 3e 12 	lds	r29, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    17f6:	bf 83       	std	Y+7, r27	; 0x07
    17f8:	ae 83       	std	Y+6, r26	; 0x06
    17fa:	c0 91 3d 12 	lds	r28, 0x123D	; 0x80123d <pxCurrentTCB>
    17fe:	d0 91 3e 12 	lds	r29, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1802:	16 96       	adiw	r26, 0x06	; 6
    1804:	8d 91       	ld	r24, X+
    1806:	9c 91       	ld	r25, X
    1808:	17 97       	sbiw	r26, 0x07	; 7
    180a:	99 87       	std	Y+9, r25	; 0x09
    180c:	88 87       	std	Y+8, r24	; 0x08
    180e:	16 96       	adiw	r26, 0x06	; 6
    1810:	cd 91       	ld	r28, X+
    1812:	dc 91       	ld	r29, X
    1814:	17 97       	sbiw	r26, 0x07	; 7
    1816:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <pxCurrentTCB>
    181a:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    181e:	02 96       	adiw	r24, 0x02	; 2
    1820:	9d 83       	std	Y+5, r25	; 0x05
    1822:	8c 83       	std	Y+4, r24	; 0x04
    1824:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <pxCurrentTCB>
    1828:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    182c:	02 96       	adiw	r24, 0x02	; 2
    182e:	17 96       	adiw	r26, 0x07	; 7
    1830:	9c 93       	st	X, r25
    1832:	8e 93       	st	-X, r24
    1834:	16 97       	sbiw	r26, 0x06	; 6
    1836:	a0 91 3d 12 	lds	r26, 0x123D	; 0x80123d <pxCurrentTCB>
    183a:	b0 91 3e 12 	lds	r27, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    183e:	1d 96       	adiw	r26, 0x0d	; 13
    1840:	fc 93       	st	X, r31
    1842:	ee 93       	st	-X, r30
    1844:	1c 97       	sbiw	r26, 0x0c	; 12
    1846:	80 81       	ld	r24, Z
    1848:	8f 5f       	subi	r24, 0xFF	; 255
    184a:	80 83       	st	Z, r24
    184c:	3f c0       	rjmp	.+126    	; 0x18cc <prvAddCurrentTaskToDelayedList+0x12e>
    184e:	c8 0c       	add	r12, r8
    1850:	d9 1c       	adc	r13, r9
    1852:	ea 1c       	adc	r14, r10
    1854:	fb 1c       	adc	r15, r11
    1856:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    185a:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    185e:	c2 82       	std	Z+2, r12	; 0x02
    1860:	d3 82       	std	Z+3, r13	; 0x03
    1862:	e4 82       	std	Z+4, r14	; 0x04
    1864:	f5 82       	std	Z+5, r15	; 0x05
    1866:	c8 14       	cp	r12, r8
    1868:	d9 04       	cpc	r13, r9
    186a:	ea 04       	cpc	r14, r10
    186c:	fb 04       	cpc	r15, r11
    186e:	68 f4       	brcc	.+26     	; 0x188a <prvAddCurrentTaskToDelayedList+0xec>
    1870:	60 91 3d 12 	lds	r22, 0x123D	; 0x80123d <pxCurrentTCB>
    1874:	70 91 3e 12 	lds	r23, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1878:	80 91 b5 11 	lds	r24, 0x11B5	; 0x8011b5 <pxOverflowDelayedTaskList>
    187c:	90 91 b6 11 	lds	r25, 0x11B6	; 0x8011b6 <pxOverflowDelayedTaskList+0x1>
    1880:	6e 5f       	subi	r22, 0xFE	; 254
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <vListInsert>
    1888:	21 c0       	rjmp	.+66     	; 0x18cc <prvAddCurrentTaskToDelayedList+0x12e>
    188a:	60 91 3d 12 	lds	r22, 0x123D	; 0x80123d <pxCurrentTCB>
    188e:	70 91 3e 12 	lds	r23, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1892:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <pxDelayedTaskList>
    1896:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <pxDelayedTaskList+0x1>
    189a:	6e 5f       	subi	r22, 0xFE	; 254
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <vListInsert>
    18a2:	80 91 81 11 	lds	r24, 0x1181	; 0x801181 <xNextTaskUnblockTime>
    18a6:	90 91 82 11 	lds	r25, 0x1182	; 0x801182 <xNextTaskUnblockTime+0x1>
    18aa:	a0 91 83 11 	lds	r26, 0x1183	; 0x801183 <xNextTaskUnblockTime+0x2>
    18ae:	b0 91 84 11 	lds	r27, 0x1184	; 0x801184 <xNextTaskUnblockTime+0x3>
    18b2:	c8 16       	cp	r12, r24
    18b4:	d9 06       	cpc	r13, r25
    18b6:	ea 06       	cpc	r14, r26
    18b8:	fb 06       	cpc	r15, r27
    18ba:	40 f4       	brcc	.+16     	; 0x18cc <prvAddCurrentTaskToDelayedList+0x12e>
    18bc:	c0 92 81 11 	sts	0x1181, r12	; 0x801181 <xNextTaskUnblockTime>
    18c0:	d0 92 82 11 	sts	0x1182, r13	; 0x801182 <xNextTaskUnblockTime+0x1>
    18c4:	e0 92 83 11 	sts	0x1183, r14	; 0x801183 <xNextTaskUnblockTime+0x2>
    18c8:	f0 92 84 11 	sts	0x1184, r15	; 0x801184 <xNextTaskUnblockTime+0x3>
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	df 90       	pop	r13
    18d6:	cf 90       	pop	r12
    18d8:	bf 90       	pop	r11
    18da:	af 90       	pop	r10
    18dc:	9f 90       	pop	r9
    18de:	8f 90       	pop	r8
    18e0:	08 95       	ret

000018e2 <xTaskCreate>:
    18e2:	2f 92       	push	r2
    18e4:	3f 92       	push	r3
    18e6:	4f 92       	push	r4
    18e8:	5f 92       	push	r5
    18ea:	6f 92       	push	r6
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	3c 01       	movw	r6, r24
    1906:	1b 01       	movw	r2, r22
    1908:	4a 01       	movw	r8, r20
    190a:	29 01       	movw	r4, r18
    190c:	ca 01       	movw	r24, r20
    190e:	0e 94 00 02 	call	0x400	; 0x400 <pvPortMalloc>
    1912:	6c 01       	movw	r12, r24
    1914:	89 2b       	or	r24, r25
    1916:	71 f0       	breq	.+28     	; 0x1934 <xTaskCreate+0x52>
    1918:	84 e3       	ldi	r24, 0x34	; 52
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 00 02 	call	0x400	; 0x400 <pvPortMalloc>
    1920:	ec 01       	movw	r28, r24
    1922:	89 2b       	or	r24, r25
    1924:	19 f0       	breq	.+6      	; 0x192c <xTaskCreate+0x4a>
    1926:	dc 8e       	std	Y+28, r13	; 0x1c
    1928:	cb 8e       	std	Y+27, r12	; 0x1b
    192a:	06 c0       	rjmp	.+12     	; 0x1938 <xTaskCreate+0x56>
    192c:	c6 01       	movw	r24, r12
    192e:	0e 94 a9 02 	call	0x552	; 0x552 <vPortFree>
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <xTaskCreate+0x56>
    1934:	c0 e0       	ldi	r28, 0x00	; 0
    1936:	d0 e0       	ldi	r29, 0x00	; 0
    1938:	20 97       	sbiw	r28, 0x00	; 0
    193a:	61 f0       	breq	.+24     	; 0x1954 <xTaskCreate+0x72>
    193c:	a1 2c       	mov	r10, r1
    193e:	b1 2c       	mov	r11, r1
    1940:	6e 01       	movw	r12, r28
    1942:	92 01       	movw	r18, r4
    1944:	a4 01       	movw	r20, r8
    1946:	b1 01       	movw	r22, r2
    1948:	c3 01       	movw	r24, r6
    194a:	eb dd       	rcall	.-1066   	; 0x1522 <prvInitialiseNewTask>
    194c:	ce 01       	movw	r24, r28
    194e:	94 de       	rcall	.-728    	; 0x1678 <prvAddNewTaskToReadyList>
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	01 c0       	rjmp	.+2      	; 0x1956 <xTaskCreate+0x74>
    1954:	8f ef       	ldi	r24, 0xFF	; 255
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	9f 90       	pop	r9
    196a:	8f 90       	pop	r8
    196c:	7f 90       	pop	r7
    196e:	6f 90       	pop	r6
    1970:	5f 90       	pop	r5
    1972:	4f 90       	pop	r4
    1974:	3f 90       	pop	r3
    1976:	2f 90       	pop	r2
    1978:	08 95       	ret

0000197a <vTaskStartScheduler>:
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	0f 2e       	mov	r0, r31
    1982:	ff e7       	ldi	r31, 0x7F	; 127
    1984:	ef 2e       	mov	r14, r31
    1986:	f1 e1       	ldi	r31, 0x11	; 17
    1988:	ff 2e       	mov	r15, r31
    198a:	f0 2d       	mov	r31, r0
    198c:	00 e0       	ldi	r16, 0x00	; 0
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 ec       	ldi	r20, 0xC0	; 192
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	68 eb       	ldi	r22, 0xB8	; 184
    1998:	72 e0       	ldi	r23, 0x02	; 2
    199a:	8d ec       	ldi	r24, 0xCD	; 205
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a1 df       	rcall	.-190    	; 0x18e2 <xTaskCreate>
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	11 f4       	brne	.+4      	; 0x19a8 <vTaskStartScheduler+0x2e>
    19a4:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <xTimerCreateTimerTask>
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	c9 f4       	brne	.+50     	; 0x19de <vTaskStartScheduler+0x64>
    19ac:	f8 94       	cli
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	9f ef       	ldi	r25, 0xFF	; 255
    19b2:	dc 01       	movw	r26, r24
    19b4:	80 93 81 11 	sts	0x1181, r24	; 0x801181 <xNextTaskUnblockTime>
    19b8:	90 93 82 11 	sts	0x1182, r25	; 0x801182 <xNextTaskUnblockTime+0x1>
    19bc:	a0 93 83 11 	sts	0x1183, r26	; 0x801183 <xNextTaskUnblockTime+0x2>
    19c0:	b0 93 84 11 	sts	0x1184, r27	; 0x801184 <xNextTaskUnblockTime+0x3>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	80 93 8c 11 	sts	0x118C, r24	; 0x80118c <xSchedulerRunning>
    19ca:	10 92 8e 11 	sts	0x118E, r1	; 0x80118e <xTickCount>
    19ce:	10 92 8f 11 	sts	0x118F, r1	; 0x80118f <xTickCount+0x1>
    19d2:	10 92 90 11 	sts	0x1190, r1	; 0x801190 <xTickCount+0x2>
    19d6:	10 92 91 11 	sts	0x1191, r1	; 0x801191 <xTickCount+0x3>
    19da:	0e 94 82 03 	call	0x704	; 0x704 <xPortStartScheduler>
    19de:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    19e2:	0f 91       	pop	r16
    19e4:	ff 90       	pop	r15
    19e6:	ef 90       	pop	r14
    19e8:	08 95       	ret

000019ea <vTaskSuspendAll>:
    19ea:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <uxSchedulerSuspended>
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
    19f0:	80 93 7e 11 	sts	0x117E, r24	; 0x80117e <uxSchedulerSuspended>
    19f4:	08 95       	ret

000019f6 <xTaskGetTickCount>:
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	0f 92       	push	r0
    19fc:	60 91 8e 11 	lds	r22, 0x118E	; 0x80118e <xTickCount>
    1a00:	70 91 8f 11 	lds	r23, 0x118F	; 0x80118f <xTickCount+0x1>
    1a04:	80 91 90 11 	lds	r24, 0x1190	; 0x801190 <xTickCount+0x2>
    1a08:	90 91 91 11 	lds	r25, 0x1191	; 0x801191 <xTickCount+0x3>
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	08 95       	ret

00001a12 <xTaskIncrementTick>:
    1a12:	cf 92       	push	r12
    1a14:	df 92       	push	r13
    1a16:	ef 92       	push	r14
    1a18:	ff 92       	push	r15
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <uxSchedulerSuspended>
    1a22:	81 11       	cpse	r24, r1
    1a24:	05 c1       	rjmp	.+522    	; 0x1c30 <xTaskIncrementTick+0x21e>
    1a26:	c0 90 8e 11 	lds	r12, 0x118E	; 0x80118e <xTickCount>
    1a2a:	d0 90 8f 11 	lds	r13, 0x118F	; 0x80118f <xTickCount+0x1>
    1a2e:	e0 90 90 11 	lds	r14, 0x1190	; 0x801190 <xTickCount+0x2>
    1a32:	f0 90 91 11 	lds	r15, 0x1191	; 0x801191 <xTickCount+0x3>
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	c8 1a       	sub	r12, r24
    1a3a:	d8 0a       	sbc	r13, r24
    1a3c:	e8 0a       	sbc	r14, r24
    1a3e:	f8 0a       	sbc	r15, r24
    1a40:	c0 92 8e 11 	sts	0x118E, r12	; 0x80118e <xTickCount>
    1a44:	d0 92 8f 11 	sts	0x118F, r13	; 0x80118f <xTickCount+0x1>
    1a48:	e0 92 90 11 	sts	0x1190, r14	; 0x801190 <xTickCount+0x2>
    1a4c:	f0 92 91 11 	sts	0x1191, r15	; 0x801191 <xTickCount+0x3>
    1a50:	c1 14       	cp	r12, r1
    1a52:	d1 04       	cpc	r13, r1
    1a54:	e1 04       	cpc	r14, r1
    1a56:	f1 04       	cpc	r15, r1
    1a58:	b1 f4       	brne	.+44     	; 0x1a86 <xTaskIncrementTick+0x74>
    1a5a:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <pxDelayedTaskList>
    1a5e:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <pxDelayedTaskList+0x1>
    1a62:	20 91 b5 11 	lds	r18, 0x11B5	; 0x8011b5 <pxOverflowDelayedTaskList>
    1a66:	30 91 b6 11 	lds	r19, 0x11B6	; 0x8011b6 <pxOverflowDelayedTaskList+0x1>
    1a6a:	30 93 b8 11 	sts	0x11B8, r19	; 0x8011b8 <pxDelayedTaskList+0x1>
    1a6e:	20 93 b7 11 	sts	0x11B7, r18	; 0x8011b7 <pxDelayedTaskList>
    1a72:	90 93 b6 11 	sts	0x11B6, r25	; 0x8011b6 <pxOverflowDelayedTaskList+0x1>
    1a76:	80 93 b5 11 	sts	0x11B5, r24	; 0x8011b5 <pxOverflowDelayedTaskList>
    1a7a:	80 91 86 11 	lds	r24, 0x1186	; 0x801186 <xNumOfOverflows>
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	80 93 86 11 	sts	0x1186, r24	; 0x801186 <xNumOfOverflows>
    1a84:	1c dd       	rcall	.-1480   	; 0x14be <prvResetNextTaskUnblockTime>
    1a86:	80 91 81 11 	lds	r24, 0x1181	; 0x801181 <xNextTaskUnblockTime>
    1a8a:	90 91 82 11 	lds	r25, 0x1182	; 0x801182 <xNextTaskUnblockTime+0x1>
    1a8e:	a0 91 83 11 	lds	r26, 0x1183	; 0x801183 <xNextTaskUnblockTime+0x2>
    1a92:	b0 91 84 11 	lds	r27, 0x1184	; 0x801184 <xNextTaskUnblockTime+0x3>
    1a96:	c8 16       	cp	r12, r24
    1a98:	d9 06       	cpc	r13, r25
    1a9a:	ea 06       	cpc	r14, r26
    1a9c:	fb 06       	cpc	r15, r27
    1a9e:	20 f4       	brcc	.+8      	; 0x1aa8 <xTaskIncrementTick+0x96>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	b2 c0       	rjmp	.+356    	; 0x1c08 <xTaskIncrementTick+0x1f6>
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	01 c0       	rjmp	.+2      	; 0x1aaa <xTaskIncrementTick+0x98>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	e0 91 b7 11 	lds	r30, 0x11B7	; 0x8011b7 <pxDelayedTaskList>
    1aae:	f0 91 b8 11 	lds	r31, 0x11B8	; 0x8011b8 <pxDelayedTaskList+0x1>
    1ab2:	90 81       	ld	r25, Z
    1ab4:	91 11       	cpse	r25, r1
    1ab6:	0c c0       	rjmp	.+24     	; 0x1ad0 <xTaskIncrementTick+0xbe>
    1ab8:	4f ef       	ldi	r20, 0xFF	; 255
    1aba:	5f ef       	ldi	r21, 0xFF	; 255
    1abc:	ba 01       	movw	r22, r20
    1abe:	40 93 81 11 	sts	0x1181, r20	; 0x801181 <xNextTaskUnblockTime>
    1ac2:	50 93 82 11 	sts	0x1182, r21	; 0x801182 <xNextTaskUnblockTime+0x1>
    1ac6:	60 93 83 11 	sts	0x1183, r22	; 0x801183 <xNextTaskUnblockTime+0x2>
    1aca:	70 93 84 11 	sts	0x1184, r23	; 0x801184 <xNextTaskUnblockTime+0x3>
    1ace:	9c c0       	rjmp	.+312    	; 0x1c08 <xTaskIncrementTick+0x1f6>
    1ad0:	e0 91 b7 11 	lds	r30, 0x11B7	; 0x8011b7 <pxDelayedTaskList>
    1ad4:	f0 91 b8 11 	lds	r31, 0x11B8	; 0x8011b8 <pxDelayedTaskList+0x1>
    1ad8:	07 80       	ldd	r0, Z+7	; 0x07
    1ada:	f0 85       	ldd	r31, Z+8	; 0x08
    1adc:	e0 2d       	mov	r30, r0
    1ade:	00 84       	ldd	r0, Z+8	; 0x08
    1ae0:	f1 85       	ldd	r31, Z+9	; 0x09
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	42 81       	ldd	r20, Z+2	; 0x02
    1ae6:	53 81       	ldd	r21, Z+3	; 0x03
    1ae8:	64 81       	ldd	r22, Z+4	; 0x04
    1aea:	75 81       	ldd	r23, Z+5	; 0x05
    1aec:	c4 16       	cp	r12, r20
    1aee:	d5 06       	cpc	r13, r21
    1af0:	e6 06       	cpc	r14, r22
    1af2:	f7 06       	cpc	r15, r23
    1af4:	48 f4       	brcc	.+18     	; 0x1b08 <xTaskIncrementTick+0xf6>
    1af6:	40 93 81 11 	sts	0x1181, r20	; 0x801181 <xNextTaskUnblockTime>
    1afa:	50 93 82 11 	sts	0x1182, r21	; 0x801182 <xNextTaskUnblockTime+0x1>
    1afe:	60 93 83 11 	sts	0x1183, r22	; 0x801183 <xNextTaskUnblockTime+0x2>
    1b02:	70 93 84 11 	sts	0x1184, r23	; 0x801184 <xNextTaskUnblockTime+0x3>
    1b06:	80 c0       	rjmp	.+256    	; 0x1c08 <xTaskIncrementTick+0x1f6>
    1b08:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b0a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b0c:	c6 81       	ldd	r28, Z+6	; 0x06
    1b0e:	d7 81       	ldd	r29, Z+7	; 0x07
    1b10:	20 85       	ldd	r18, Z+8	; 0x08
    1b12:	31 85       	ldd	r19, Z+9	; 0x09
    1b14:	3f 83       	std	Y+7, r19	; 0x07
    1b16:	2e 83       	std	Y+6, r18	; 0x06
    1b18:	c0 85       	ldd	r28, Z+8	; 0x08
    1b1a:	d1 85       	ldd	r29, Z+9	; 0x09
    1b1c:	26 81       	ldd	r18, Z+6	; 0x06
    1b1e:	37 81       	ldd	r19, Z+7	; 0x07
    1b20:	3d 83       	std	Y+5, r19	; 0x05
    1b22:	2c 83       	std	Y+4, r18	; 0x04
    1b24:	11 96       	adiw	r26, 0x01	; 1
    1b26:	4d 91       	ld	r20, X+
    1b28:	5c 91       	ld	r21, X
    1b2a:	12 97       	sbiw	r26, 0x02	; 2
    1b2c:	9f 01       	movw	r18, r30
    1b2e:	2e 5f       	subi	r18, 0xFE	; 254
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
    1b32:	42 17       	cp	r20, r18
    1b34:	53 07       	cpc	r21, r19
    1b36:	31 f4       	brne	.+12     	; 0x1b44 <xTaskIncrementTick+0x132>
    1b38:	40 85       	ldd	r20, Z+8	; 0x08
    1b3a:	51 85       	ldd	r21, Z+9	; 0x09
    1b3c:	12 96       	adiw	r26, 0x02	; 2
    1b3e:	5c 93       	st	X, r21
    1b40:	4e 93       	st	-X, r20
    1b42:	11 97       	sbiw	r26, 0x01	; 1
    1b44:	15 86       	std	Z+13, r1	; 0x0d
    1b46:	14 86       	std	Z+12, r1	; 0x0c
    1b48:	9c 91       	ld	r25, X
    1b4a:	91 50       	subi	r25, 0x01	; 1
    1b4c:	9c 93       	st	X, r25
    1b4e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b50:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b52:	10 97       	sbiw	r26, 0x00	; 0
    1b54:	09 f1       	breq	.+66     	; 0x1b98 <xTaskIncrementTick+0x186>
    1b56:	c2 89       	ldd	r28, Z+18	; 0x12
    1b58:	d3 89       	ldd	r29, Z+19	; 0x13
    1b5a:	44 89       	ldd	r20, Z+20	; 0x14
    1b5c:	55 89       	ldd	r21, Z+21	; 0x15
    1b5e:	5f 83       	std	Y+7, r21	; 0x07
    1b60:	4e 83       	std	Y+6, r20	; 0x06
    1b62:	c4 89       	ldd	r28, Z+20	; 0x14
    1b64:	d5 89       	ldd	r29, Z+21	; 0x15
    1b66:	42 89       	ldd	r20, Z+18	; 0x12
    1b68:	53 89       	ldd	r21, Z+19	; 0x13
    1b6a:	5d 83       	std	Y+5, r21	; 0x05
    1b6c:	4c 83       	std	Y+4, r20	; 0x04
    1b6e:	11 96       	adiw	r26, 0x01	; 1
    1b70:	6d 91       	ld	r22, X+
    1b72:	7c 91       	ld	r23, X
    1b74:	12 97       	sbiw	r26, 0x02	; 2
    1b76:	af 01       	movw	r20, r30
    1b78:	42 5f       	subi	r20, 0xF2	; 242
    1b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7c:	64 17       	cp	r22, r20
    1b7e:	75 07       	cpc	r23, r21
    1b80:	31 f4       	brne	.+12     	; 0x1b8e <xTaskIncrementTick+0x17c>
    1b82:	44 89       	ldd	r20, Z+20	; 0x14
    1b84:	55 89       	ldd	r21, Z+21	; 0x15
    1b86:	12 96       	adiw	r26, 0x02	; 2
    1b88:	5c 93       	st	X, r21
    1b8a:	4e 93       	st	-X, r20
    1b8c:	11 97       	sbiw	r26, 0x01	; 1
    1b8e:	11 8e       	std	Z+25, r1	; 0x19
    1b90:	10 8e       	std	Z+24, r1	; 0x18
    1b92:	9c 91       	ld	r25, X
    1b94:	91 50       	subi	r25, 0x01	; 1
    1b96:	9c 93       	st	X, r25
    1b98:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b9a:	90 91 8d 11 	lds	r25, 0x118D	; 0x80118d <uxTopReadyPriority>
    1b9e:	9a 17       	cp	r25, r26
    1ba0:	10 f4       	brcc	.+4      	; 0x1ba6 <xTaskIncrementTick+0x194>
    1ba2:	a0 93 8d 11 	sts	0x118D, r26	; 0x80118d <uxTopReadyPriority>
    1ba6:	9b e0       	ldi	r25, 0x0B	; 11
    1ba8:	9a 9f       	mul	r25, r26
    1baa:	d0 01       	movw	r26, r0
    1bac:	11 24       	eor	r1, r1
    1bae:	a1 53       	subi	r26, 0x31	; 49
    1bb0:	be 4e       	sbci	r27, 0xEE	; 238
    1bb2:	11 96       	adiw	r26, 0x01	; 1
    1bb4:	0d 90       	ld	r0, X+
    1bb6:	bc 91       	ld	r27, X
    1bb8:	a0 2d       	mov	r26, r0
    1bba:	b7 83       	std	Z+7, r27	; 0x07
    1bbc:	a6 83       	std	Z+6, r26	; 0x06
    1bbe:	16 96       	adiw	r26, 0x06	; 6
    1bc0:	4d 91       	ld	r20, X+
    1bc2:	5c 91       	ld	r21, X
    1bc4:	17 97       	sbiw	r26, 0x07	; 7
    1bc6:	51 87       	std	Z+9, r21	; 0x09
    1bc8:	40 87       	std	Z+8, r20	; 0x08
    1bca:	16 96       	adiw	r26, 0x06	; 6
    1bcc:	cd 91       	ld	r28, X+
    1bce:	dc 91       	ld	r29, X
    1bd0:	17 97       	sbiw	r26, 0x07	; 7
    1bd2:	3d 83       	std	Y+5, r19	; 0x05
    1bd4:	2c 83       	std	Y+4, r18	; 0x04
    1bd6:	17 96       	adiw	r26, 0x07	; 7
    1bd8:	3c 93       	st	X, r19
    1bda:	2e 93       	st	-X, r18
    1bdc:	16 97       	sbiw	r26, 0x06	; 6
    1bde:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1be0:	9a 9f       	mul	r25, r26
    1be2:	d0 01       	movw	r26, r0
    1be4:	11 24       	eor	r1, r1
    1be6:	a1 53       	subi	r26, 0x31	; 49
    1be8:	be 4e       	sbci	r27, 0xEE	; 238
    1bea:	b5 87       	std	Z+13, r27	; 0x0d
    1bec:	a4 87       	std	Z+12, r26	; 0x0c
    1bee:	9c 91       	ld	r25, X
    1bf0:	9f 5f       	subi	r25, 0xFF	; 255
    1bf2:	9c 93       	st	X, r25
    1bf4:	22 8d       	ldd	r18, Z+26	; 0x1a
    1bf6:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    1bfa:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1bfe:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c00:	29 17       	cp	r18, r25
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <xTaskIncrementTick+0x1f4>
    1c04:	4f cf       	rjmp	.-354    	; 0x1aa4 <xTaskIncrementTick+0x92>
    1c06:	51 cf       	rjmp	.-350    	; 0x1aaa <xTaskIncrementTick+0x98>
    1c08:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    1c0c:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1c10:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1c12:	9b e0       	ldi	r25, 0x0B	; 11
    1c14:	e9 9f       	mul	r30, r25
    1c16:	f0 01       	movw	r30, r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	e1 53       	subi	r30, 0x31	; 49
    1c1c:	fe 4e       	sbci	r31, 0xEE	; 238
    1c1e:	90 81       	ld	r25, Z
    1c20:	92 30       	cpi	r25, 0x02	; 2
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <xTaskIncrementTick+0x214>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 91 87 11 	lds	r25, 0x1187	; 0x801187 <xYieldPending>
    1c2a:	91 11       	cpse	r25, r1
    1c2c:	16 c0       	rjmp	.+44     	; 0x1c5a <xTaskIncrementTick+0x248>
    1c2e:	16 c0       	rjmp	.+44     	; 0x1c5c <xTaskIncrementTick+0x24a>
    1c30:	80 91 88 11 	lds	r24, 0x1188	; 0x801188 <xPendedTicks>
    1c34:	90 91 89 11 	lds	r25, 0x1189	; 0x801189 <xPendedTicks+0x1>
    1c38:	a0 91 8a 11 	lds	r26, 0x118A	; 0x80118a <xPendedTicks+0x2>
    1c3c:	b0 91 8b 11 	lds	r27, 0x118B	; 0x80118b <xPendedTicks+0x3>
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	a1 1d       	adc	r26, r1
    1c44:	b1 1d       	adc	r27, r1
    1c46:	80 93 88 11 	sts	0x1188, r24	; 0x801188 <xPendedTicks>
    1c4a:	90 93 89 11 	sts	0x1189, r25	; 0x801189 <xPendedTicks+0x1>
    1c4e:	a0 93 8a 11 	sts	0x118A, r26	; 0x80118a <xPendedTicks+0x2>
    1c52:	b0 93 8b 11 	sts	0x118B, r27	; 0x80118b <xPendedTicks+0x3>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <xTaskIncrementTick+0x24a>
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
    1c68:	08 95       	ret

00001c6a <xTaskResumeAll>:
    1c6a:	cf 92       	push	r12
    1c6c:	df 92       	push	r13
    1c6e:	ef 92       	push	r14
    1c70:	ff 92       	push	r15
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	0f 92       	push	r0
    1c7c:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <uxSchedulerSuspended>
    1c80:	81 50       	subi	r24, 0x01	; 1
    1c82:	80 93 7e 11 	sts	0x117E, r24	; 0x80117e <uxSchedulerSuspended>
    1c86:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <uxSchedulerSuspended>
    1c8a:	81 11       	cpse	r24, r1
    1c8c:	be c0       	rjmp	.+380    	; 0x1e0a <xTaskResumeAll+0x1a0>
    1c8e:	80 91 92 11 	lds	r24, 0x1192	; 0x801192 <uxCurrentNumberOfTasks>
    1c92:	81 11       	cpse	r24, r1
    1c94:	88 c0       	rjmp	.+272    	; 0x1da6 <xTaskResumeAll+0x13c>
    1c96:	bc c0       	rjmp	.+376    	; 0x1e10 <xTaskResumeAll+0x1a6>
    1c98:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <xPendingReadyList+0x7>
    1c9c:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <xPendingReadyList+0x8>
    1ca0:	00 84       	ldd	r0, Z+8	; 0x08
    1ca2:	f1 85       	ldd	r31, Z+9	; 0x09
    1ca4:	e0 2d       	mov	r30, r0
    1ca6:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ca8:	b1 8d       	ldd	r27, Z+25	; 0x19
    1caa:	c2 89       	ldd	r28, Z+18	; 0x12
    1cac:	d3 89       	ldd	r29, Z+19	; 0x13
    1cae:	84 89       	ldd	r24, Z+20	; 0x14
    1cb0:	95 89       	ldd	r25, Z+21	; 0x15
    1cb2:	9f 83       	std	Y+7, r25	; 0x07
    1cb4:	8e 83       	std	Y+6, r24	; 0x06
    1cb6:	c4 89       	ldd	r28, Z+20	; 0x14
    1cb8:	d5 89       	ldd	r29, Z+21	; 0x15
    1cba:	82 89       	ldd	r24, Z+18	; 0x12
    1cbc:	93 89       	ldd	r25, Z+19	; 0x13
    1cbe:	9d 83       	std	Y+5, r25	; 0x05
    1cc0:	8c 83       	std	Y+4, r24	; 0x04
    1cc2:	11 96       	adiw	r26, 0x01	; 1
    1cc4:	2d 91       	ld	r18, X+
    1cc6:	3c 91       	ld	r19, X
    1cc8:	12 97       	sbiw	r26, 0x02	; 2
    1cca:	cf 01       	movw	r24, r30
    1ccc:	0e 96       	adiw	r24, 0x0e	; 14
    1cce:	28 17       	cp	r18, r24
    1cd0:	39 07       	cpc	r19, r25
    1cd2:	31 f4       	brne	.+12     	; 0x1ce0 <xTaskResumeAll+0x76>
    1cd4:	84 89       	ldd	r24, Z+20	; 0x14
    1cd6:	95 89       	ldd	r25, Z+21	; 0x15
    1cd8:	12 96       	adiw	r26, 0x02	; 2
    1cda:	9c 93       	st	X, r25
    1cdc:	8e 93       	st	-X, r24
    1cde:	11 97       	sbiw	r26, 0x01	; 1
    1ce0:	11 8e       	std	Z+25, r1	; 0x19
    1ce2:	10 8e       	std	Z+24, r1	; 0x18
    1ce4:	8c 91       	ld	r24, X
    1ce6:	81 50       	subi	r24, 0x01	; 1
    1ce8:	8c 93       	st	X, r24
    1cea:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cec:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cee:	c6 81       	ldd	r28, Z+6	; 0x06
    1cf0:	d7 81       	ldd	r29, Z+7	; 0x07
    1cf2:	80 85       	ldd	r24, Z+8	; 0x08
    1cf4:	91 85       	ldd	r25, Z+9	; 0x09
    1cf6:	9f 83       	std	Y+7, r25	; 0x07
    1cf8:	8e 83       	std	Y+6, r24	; 0x06
    1cfa:	c0 85       	ldd	r28, Z+8	; 0x08
    1cfc:	d1 85       	ldd	r29, Z+9	; 0x09
    1cfe:	86 81       	ldd	r24, Z+6	; 0x06
    1d00:	97 81       	ldd	r25, Z+7	; 0x07
    1d02:	9d 83       	std	Y+5, r25	; 0x05
    1d04:	8c 83       	std	Y+4, r24	; 0x04
    1d06:	11 96       	adiw	r26, 0x01	; 1
    1d08:	8d 91       	ld	r24, X+
    1d0a:	9c 91       	ld	r25, X
    1d0c:	12 97       	sbiw	r26, 0x02	; 2
    1d0e:	9f 01       	movw	r18, r30
    1d10:	2e 5f       	subi	r18, 0xFE	; 254
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	82 17       	cp	r24, r18
    1d16:	93 07       	cpc	r25, r19
    1d18:	31 f4       	brne	.+12     	; 0x1d26 <xTaskResumeAll+0xbc>
    1d1a:	80 85       	ldd	r24, Z+8	; 0x08
    1d1c:	91 85       	ldd	r25, Z+9	; 0x09
    1d1e:	12 96       	adiw	r26, 0x02	; 2
    1d20:	9c 93       	st	X, r25
    1d22:	8e 93       	st	-X, r24
    1d24:	11 97       	sbiw	r26, 0x01	; 1
    1d26:	15 86       	std	Z+13, r1	; 0x0d
    1d28:	14 86       	std	Z+12, r1	; 0x0c
    1d2a:	8c 91       	ld	r24, X
    1d2c:	81 50       	subi	r24, 0x01	; 1
    1d2e:	8c 93       	st	X, r24
    1d30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d32:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <uxTopReadyPriority>
    1d36:	8a 17       	cp	r24, r26
    1d38:	10 f4       	brcc	.+4      	; 0x1d3e <xTaskResumeAll+0xd4>
    1d3a:	a0 93 8d 11 	sts	0x118D, r26	; 0x80118d <uxTopReadyPriority>
    1d3e:	8b e0       	ldi	r24, 0x0B	; 11
    1d40:	8a 9f       	mul	r24, r26
    1d42:	d0 01       	movw	r26, r0
    1d44:	11 24       	eor	r1, r1
    1d46:	a1 53       	subi	r26, 0x31	; 49
    1d48:	be 4e       	sbci	r27, 0xEE	; 238
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	0d 90       	ld	r0, X+
    1d4e:	bc 91       	ld	r27, X
    1d50:	a0 2d       	mov	r26, r0
    1d52:	b7 83       	std	Z+7, r27	; 0x07
    1d54:	a6 83       	std	Z+6, r26	; 0x06
    1d56:	16 96       	adiw	r26, 0x06	; 6
    1d58:	4d 91       	ld	r20, X+
    1d5a:	5c 91       	ld	r21, X
    1d5c:	17 97       	sbiw	r26, 0x07	; 7
    1d5e:	51 87       	std	Z+9, r21	; 0x09
    1d60:	40 87       	std	Z+8, r20	; 0x08
    1d62:	16 96       	adiw	r26, 0x06	; 6
    1d64:	cd 91       	ld	r28, X+
    1d66:	dc 91       	ld	r29, X
    1d68:	17 97       	sbiw	r26, 0x07	; 7
    1d6a:	3d 83       	std	Y+5, r19	; 0x05
    1d6c:	2c 83       	std	Y+4, r18	; 0x04
    1d6e:	17 96       	adiw	r26, 0x07	; 7
    1d70:	3c 93       	st	X, r19
    1d72:	2e 93       	st	-X, r18
    1d74:	16 97       	sbiw	r26, 0x06	; 6
    1d76:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d78:	8a 9f       	mul	r24, r26
    1d7a:	d0 01       	movw	r26, r0
    1d7c:	11 24       	eor	r1, r1
    1d7e:	a1 53       	subi	r26, 0x31	; 49
    1d80:	be 4e       	sbci	r27, 0xEE	; 238
    1d82:	b5 87       	std	Z+13, r27	; 0x0d
    1d84:	a4 87       	std	Z+12, r26	; 0x0c
    1d86:	8c 91       	ld	r24, X
    1d88:	8f 5f       	subi	r24, 0xFF	; 255
    1d8a:	8c 93       	st	X, r24
    1d8c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d8e:	a0 91 3d 12 	lds	r26, 0x123D	; 0x80123d <pxCurrentTCB>
    1d92:	b0 91 3e 12 	lds	r27, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1d96:	5a 96       	adiw	r26, 0x1a	; 26
    1d98:	8c 91       	ld	r24, X
    1d9a:	98 17       	cp	r25, r24
    1d9c:	30 f0       	brcs	.+12     	; 0x1daa <xTaskResumeAll+0x140>
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <xYieldPending>
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <xTaskResumeAll+0x140>
    1da6:	e0 e0       	ldi	r30, 0x00	; 0
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 91 aa 11 	lds	r24, 0x11AA	; 0x8011aa <xPendingReadyList>
    1dae:	81 11       	cpse	r24, r1
    1db0:	73 cf       	rjmp	.-282    	; 0x1c98 <xTaskResumeAll+0x2e>
    1db2:	ef 2b       	or	r30, r31
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <xTaskResumeAll+0x14e>
    1db6:	83 db       	rcall	.-2298   	; 0x14be <prvResetNextTaskUnblockTime>
    1db8:	c0 90 88 11 	lds	r12, 0x1188	; 0x801188 <xPendedTicks>
    1dbc:	d0 90 89 11 	lds	r13, 0x1189	; 0x801189 <xPendedTicks+0x1>
    1dc0:	e0 90 8a 11 	lds	r14, 0x118A	; 0x80118a <xPendedTicks+0x2>
    1dc4:	f0 90 8b 11 	lds	r15, 0x118B	; 0x80118b <xPendedTicks+0x3>
    1dc8:	c1 14       	cp	r12, r1
    1dca:	d1 04       	cpc	r13, r1
    1dcc:	e1 04       	cpc	r14, r1
    1dce:	f1 04       	cpc	r15, r1
    1dd0:	a1 f0       	breq	.+40     	; 0x1dfa <xTaskResumeAll+0x190>
    1dd2:	1f de       	rcall	.-962    	; 0x1a12 <xTaskIncrementTick>
    1dd4:	88 23       	and	r24, r24
    1dd6:	19 f0       	breq	.+6      	; 0x1dde <xTaskResumeAll+0x174>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <xYieldPending>
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	c8 1a       	sub	r12, r24
    1de2:	d1 08       	sbc	r13, r1
    1de4:	e1 08       	sbc	r14, r1
    1de6:	f1 08       	sbc	r15, r1
    1de8:	a1 f7       	brne	.-24     	; 0x1dd2 <xTaskResumeAll+0x168>
    1dea:	10 92 88 11 	sts	0x1188, r1	; 0x801188 <xPendedTicks>
    1dee:	10 92 89 11 	sts	0x1189, r1	; 0x801189 <xPendedTicks+0x1>
    1df2:	10 92 8a 11 	sts	0x118A, r1	; 0x80118a <xPendedTicks+0x2>
    1df6:	10 92 8b 11 	sts	0x118B, r1	; 0x80118b <xPendedTicks+0x3>
    1dfa:	80 91 87 11 	lds	r24, 0x1187	; 0x801187 <xYieldPending>
    1dfe:	88 23       	and	r24, r24
    1e00:	31 f0       	breq	.+12     	; 0x1e0e <xTaskResumeAll+0x1a4>
    1e02:	0e 94 b4 03 	call	0x768	; 0x768 <vPortYield>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	03 c0       	rjmp	.+6      	; 0x1e10 <xTaskResumeAll+0x1a6>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <xTaskResumeAll+0x1a6>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	08 95       	ret

00001e22 <xTaskDelayUntil>:
    1e22:	8f 92       	push	r8
    1e24:	9f 92       	push	r9
    1e26:	af 92       	push	r10
    1e28:	bf 92       	push	r11
    1e2a:	cf 92       	push	r12
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	ec 01       	movw	r28, r24
    1e3a:	6a 01       	movw	r12, r20
    1e3c:	7b 01       	movw	r14, r22
    1e3e:	d5 dd       	rcall	.-1110   	; 0x19ea <vTaskSuspendAll>
    1e40:	80 90 8e 11 	lds	r8, 0x118E	; 0x80118e <xTickCount>
    1e44:	90 90 8f 11 	lds	r9, 0x118F	; 0x80118f <xTickCount+0x1>
    1e48:	a0 90 90 11 	lds	r10, 0x1190	; 0x801190 <xTickCount+0x2>
    1e4c:	b0 90 91 11 	lds	r11, 0x1191	; 0x801191 <xTickCount+0x3>
    1e50:	88 81       	ld	r24, Y
    1e52:	99 81       	ldd	r25, Y+1	; 0x01
    1e54:	aa 81       	ldd	r26, Y+2	; 0x02
    1e56:	bb 81       	ldd	r27, Y+3	; 0x03
    1e58:	ac 01       	movw	r20, r24
    1e5a:	bd 01       	movw	r22, r26
    1e5c:	4c 0d       	add	r20, r12
    1e5e:	5d 1d       	adc	r21, r13
    1e60:	6e 1d       	adc	r22, r14
    1e62:	7f 1d       	adc	r23, r15
    1e64:	88 16       	cp	r8, r24
    1e66:	99 06       	cpc	r9, r25
    1e68:	aa 06       	cpc	r10, r26
    1e6a:	bb 06       	cpc	r11, r27
    1e6c:	60 f4       	brcc	.+24     	; 0x1e86 <xTaskDelayUntil+0x64>
    1e6e:	48 17       	cp	r20, r24
    1e70:	59 07       	cpc	r21, r25
    1e72:	6a 07       	cpc	r22, r26
    1e74:	7b 07       	cpc	r23, r27
    1e76:	98 f4       	brcc	.+38     	; 0x1e9e <xTaskDelayUntil+0x7c>
    1e78:	84 16       	cp	r8, r20
    1e7a:	95 06       	cpc	r9, r21
    1e7c:	a6 06       	cpc	r10, r22
    1e7e:	b7 06       	cpc	r11, r23
    1e80:	80 f0       	brcs	.+32     	; 0x1ea2 <xTaskDelayUntil+0x80>
    1e82:	10 e0       	ldi	r17, 0x00	; 0
    1e84:	13 c0       	rjmp	.+38     	; 0x1eac <xTaskDelayUntil+0x8a>
    1e86:	48 17       	cp	r20, r24
    1e88:	59 07       	cpc	r21, r25
    1e8a:	6a 07       	cpc	r22, r26
    1e8c:	7b 07       	cpc	r23, r27
    1e8e:	58 f0       	brcs	.+22     	; 0x1ea6 <xTaskDelayUntil+0x84>
    1e90:	84 16       	cp	r8, r20
    1e92:	95 06       	cpc	r9, r21
    1e94:	a6 06       	cpc	r10, r22
    1e96:	b7 06       	cpc	r11, r23
    1e98:	40 f0       	brcs	.+16     	; 0x1eaa <xTaskDelayUntil+0x88>
    1e9a:	10 e0       	ldi	r17, 0x00	; 0
    1e9c:	07 c0       	rjmp	.+14     	; 0x1eac <xTaskDelayUntil+0x8a>
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
    1ea0:	05 c0       	rjmp	.+10     	; 0x1eac <xTaskDelayUntil+0x8a>
    1ea2:	11 e0       	ldi	r17, 0x01	; 1
    1ea4:	03 c0       	rjmp	.+6      	; 0x1eac <xTaskDelayUntil+0x8a>
    1ea6:	11 e0       	ldi	r17, 0x01	; 1
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <xTaskDelayUntil+0x8a>
    1eaa:	11 e0       	ldi	r17, 0x01	; 1
    1eac:	48 83       	st	Y, r20
    1eae:	59 83       	std	Y+1, r21	; 0x01
    1eb0:	6a 83       	std	Y+2, r22	; 0x02
    1eb2:	7b 83       	std	Y+3, r23	; 0x03
    1eb4:	11 23       	and	r17, r17
    1eb6:	41 f0       	breq	.+16     	; 0x1ec8 <xTaskDelayUntil+0xa6>
    1eb8:	cb 01       	movw	r24, r22
    1eba:	ba 01       	movw	r22, r20
    1ebc:	68 19       	sub	r22, r8
    1ebe:	79 09       	sbc	r23, r9
    1ec0:	8a 09       	sbc	r24, r10
    1ec2:	9b 09       	sbc	r25, r11
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	6b dc       	rcall	.-1834   	; 0x179e <prvAddCurrentTaskToDelayedList>
    1ec8:	d0 de       	rcall	.-608    	; 0x1c6a <xTaskResumeAll>
    1eca:	81 11       	cpse	r24, r1
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <xTaskDelayUntil+0xb0>
    1ece:	0e 94 b4 03 	call	0x768	; 0x768 <vPortYield>
    1ed2:	81 2f       	mov	r24, r17
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	1f 91       	pop	r17
    1eda:	ff 90       	pop	r15
    1edc:	ef 90       	pop	r14
    1ede:	df 90       	pop	r13
    1ee0:	cf 90       	pop	r12
    1ee2:	bf 90       	pop	r11
    1ee4:	af 90       	pop	r10
    1ee6:	9f 90       	pop	r9
    1ee8:	8f 90       	pop	r8
    1eea:	08 95       	ret

00001eec <vTaskDelay>:
    1eec:	cf 92       	push	r12
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	6b 01       	movw	r12, r22
    1ef6:	7c 01       	movw	r14, r24
    1ef8:	67 2b       	or	r22, r23
    1efa:	68 2b       	or	r22, r24
    1efc:	69 2b       	or	r22, r25
    1efe:	39 f0       	breq	.+14     	; 0x1f0e <vTaskDelay+0x22>
    1f00:	74 dd       	rcall	.-1304   	; 0x19ea <vTaskSuspendAll>
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	c7 01       	movw	r24, r14
    1f06:	b6 01       	movw	r22, r12
    1f08:	4a dc       	rcall	.-1900   	; 0x179e <prvAddCurrentTaskToDelayedList>
    1f0a:	af de       	rcall	.-674    	; 0x1c6a <xTaskResumeAll>
    1f0c:	01 c0       	rjmp	.+2      	; 0x1f10 <vTaskDelay+0x24>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	81 11       	cpse	r24, r1
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <vTaskDelay+0x2c>
    1f14:	0e 94 b4 03 	call	0x768	; 0x768 <vPortYield>
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	df 90       	pop	r13
    1f1e:	cf 90       	pop	r12
    1f20:	08 95       	ret

00001f22 <vTaskSwitchContext>:
    1f22:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <uxSchedulerSuspended>
    1f26:	88 23       	and	r24, r24
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <vTaskSwitchContext+0x10>
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <xYieldPending>
    1f30:	08 95       	ret
    1f32:	10 92 87 11 	sts	0x1187, r1	; 0x801187 <xYieldPending>
    1f36:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    1f3a:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1f3e:	20 81       	ld	r18, Z
    1f40:	31 81       	ldd	r19, Z+1	; 0x01
    1f42:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    1f46:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1f4a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f4c:	94 8d       	ldd	r25, Z+28	; 0x1c
    1f4e:	82 17       	cp	r24, r18
    1f50:	93 07       	cpc	r25, r19
    1f52:	60 f0       	brcs	.+24     	; 0x1f6c <vTaskSwitchContext+0x4a>
    1f54:	60 91 3d 12 	lds	r22, 0x123D	; 0x80123d <pxCurrentTCB>
    1f58:	70 91 3e 12 	lds	r23, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1f5c:	63 5e       	subi	r22, 0xE3	; 227
    1f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f60:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <pxCurrentTCB>
    1f64:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    1f68:	0e 94 ef 17 	call	0x2fde	; 0x2fde <vApplicationStackOverflowHook>
    1f6c:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <uxTopReadyPriority>
    1f70:	01 c0       	rjmp	.+2      	; 0x1f74 <vTaskSwitchContext+0x52>
    1f72:	81 50       	subi	r24, 0x01	; 1
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	9b e0       	ldi	r25, 0x0B	; 11
    1f7a:	92 9f       	mul	r25, r18
    1f7c:	f0 01       	movw	r30, r0
    1f7e:	93 9f       	mul	r25, r19
    1f80:	f0 0d       	add	r31, r0
    1f82:	11 24       	eor	r1, r1
    1f84:	e1 53       	subi	r30, 0x31	; 49
    1f86:	fe 4e       	sbci	r31, 0xEE	; 238
    1f88:	90 81       	ld	r25, Z
    1f8a:	99 23       	and	r25, r25
    1f8c:	91 f3       	breq	.-28     	; 0x1f72 <vTaskSwitchContext+0x50>
    1f8e:	9b e0       	ldi	r25, 0x0B	; 11
    1f90:	92 9f       	mul	r25, r18
    1f92:	a0 01       	movw	r20, r0
    1f94:	93 9f       	mul	r25, r19
    1f96:	50 0d       	add	r21, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	df 01       	movw	r26, r30
    1f9c:	01 80       	ldd	r0, Z+1	; 0x01
    1f9e:	f2 81       	ldd	r31, Z+2	; 0x02
    1fa0:	e0 2d       	mov	r30, r0
    1fa2:	04 80       	ldd	r0, Z+4	; 0x04
    1fa4:	f5 81       	ldd	r31, Z+5	; 0x05
    1fa6:	e0 2d       	mov	r30, r0
    1fa8:	12 96       	adiw	r26, 0x02	; 2
    1faa:	fc 93       	st	X, r31
    1fac:	ee 93       	st	-X, r30
    1fae:	11 97       	sbiw	r26, 0x01	; 1
    1fb0:	4e 52       	subi	r20, 0x2E	; 46
    1fb2:	5e 4e       	sbci	r21, 0xEE	; 238
    1fb4:	e4 17       	cp	r30, r20
    1fb6:	f5 07       	cpc	r31, r21
    1fb8:	29 f4       	brne	.+10     	; 0x1fc4 <vTaskSwitchContext+0xa2>
    1fba:	44 81       	ldd	r20, Z+4	; 0x04
    1fbc:	55 81       	ldd	r21, Z+5	; 0x05
    1fbe:	fd 01       	movw	r30, r26
    1fc0:	52 83       	std	Z+2, r21	; 0x02
    1fc2:	41 83       	std	Z+1, r20	; 0x01
    1fc4:	9b e0       	ldi	r25, 0x0B	; 11
    1fc6:	92 9f       	mul	r25, r18
    1fc8:	f0 01       	movw	r30, r0
    1fca:	93 9f       	mul	r25, r19
    1fcc:	f0 0d       	add	r31, r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	e1 53       	subi	r30, 0x31	; 49
    1fd2:	fe 4e       	sbci	r31, 0xEE	; 238
    1fd4:	01 80       	ldd	r0, Z+1	; 0x01
    1fd6:	f2 81       	ldd	r31, Z+2	; 0x02
    1fd8:	e0 2d       	mov	r30, r0
    1fda:	20 85       	ldd	r18, Z+8	; 0x08
    1fdc:	31 85       	ldd	r19, Z+9	; 0x09
    1fde:	30 93 3e 12 	sts	0x123E, r19	; 0x80123e <pxCurrentTCB+0x1>
    1fe2:	20 93 3d 12 	sts	0x123D, r18	; 0x80123d <pxCurrentTCB>
    1fe6:	80 93 8d 11 	sts	0x118D, r24	; 0x80118d <uxTopReadyPriority>
    1fea:	08 95       	ret

00001fec <vTaskPlaceOnEventList>:
    1fec:	cf 92       	push	r12
    1fee:	df 92       	push	r13
    1ff0:	ef 92       	push	r14
    1ff2:	ff 92       	push	r15
    1ff4:	6a 01       	movw	r12, r20
    1ff6:	7b 01       	movw	r14, r22
    1ff8:	60 91 3d 12 	lds	r22, 0x123D	; 0x80123d <pxCurrentTCB>
    1ffc:	70 91 3e 12 	lds	r23, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    2000:	62 5f       	subi	r22, 0xF2	; 242
    2002:	7f 4f       	sbci	r23, 0xFF	; 255
    2004:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <vListInsert>
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	c7 01       	movw	r24, r14
    200c:	b6 01       	movw	r22, r12
    200e:	c7 db       	rcall	.-2162   	; 0x179e <prvAddCurrentTaskToDelayedList>
    2010:	ff 90       	pop	r15
    2012:	ef 90       	pop	r14
    2014:	df 90       	pop	r13
    2016:	cf 90       	pop	r12
    2018:	08 95       	ret

0000201a <vTaskPlaceOnEventListRestricted>:
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	fc 01       	movw	r30, r24
    2020:	cb 01       	movw	r24, r22
    2022:	ba 01       	movw	r22, r20
    2024:	a1 81       	ldd	r26, Z+1	; 0x01
    2026:	b2 81       	ldd	r27, Z+2	; 0x02
    2028:	c0 91 3d 12 	lds	r28, 0x123D	; 0x80123d <pxCurrentTCB>
    202c:	d0 91 3e 12 	lds	r29, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    2030:	bb 8b       	std	Y+19, r27	; 0x13
    2032:	aa 8b       	std	Y+18, r26	; 0x12
    2034:	c0 91 3d 12 	lds	r28, 0x123D	; 0x80123d <pxCurrentTCB>
    2038:	d0 91 3e 12 	lds	r29, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    203c:	16 96       	adiw	r26, 0x06	; 6
    203e:	4d 91       	ld	r20, X+
    2040:	5c 91       	ld	r21, X
    2042:	17 97       	sbiw	r26, 0x07	; 7
    2044:	5d 8b       	std	Y+21, r21	; 0x15
    2046:	4c 8b       	std	Y+20, r20	; 0x14
    2048:	16 96       	adiw	r26, 0x06	; 6
    204a:	cd 91       	ld	r28, X+
    204c:	dc 91       	ld	r29, X
    204e:	17 97       	sbiw	r26, 0x07	; 7
    2050:	40 91 3d 12 	lds	r20, 0x123D	; 0x80123d <pxCurrentTCB>
    2054:	50 91 3e 12 	lds	r21, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    2058:	42 5f       	subi	r20, 0xF2	; 242
    205a:	5f 4f       	sbci	r21, 0xFF	; 255
    205c:	5d 83       	std	Y+5, r21	; 0x05
    205e:	4c 83       	std	Y+4, r20	; 0x04
    2060:	40 91 3d 12 	lds	r20, 0x123D	; 0x80123d <pxCurrentTCB>
    2064:	50 91 3e 12 	lds	r21, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    2068:	42 5f       	subi	r20, 0xF2	; 242
    206a:	5f 4f       	sbci	r21, 0xFF	; 255
    206c:	17 96       	adiw	r26, 0x07	; 7
    206e:	5c 93       	st	X, r21
    2070:	4e 93       	st	-X, r20
    2072:	16 97       	sbiw	r26, 0x06	; 6
    2074:	a0 91 3d 12 	lds	r26, 0x123D	; 0x80123d <pxCurrentTCB>
    2078:	b0 91 3e 12 	lds	r27, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    207c:	59 96       	adiw	r26, 0x19	; 25
    207e:	fc 93       	st	X, r31
    2080:	ee 93       	st	-X, r30
    2082:	58 97       	sbiw	r26, 0x18	; 24
    2084:	30 81       	ld	r19, Z
    2086:	3f 5f       	subi	r19, 0xFF	; 255
    2088:	30 83       	st	Z, r19
    208a:	22 23       	and	r18, r18
    208c:	19 f0       	breq	.+6      	; 0x2094 <vTaskPlaceOnEventListRestricted+0x7a>
    208e:	6f ef       	ldi	r22, 0xFF	; 255
    2090:	7f ef       	ldi	r23, 0xFF	; 255
    2092:	cb 01       	movw	r24, r22
    2094:	42 2f       	mov	r20, r18
    2096:	83 db       	rcall	.-2298   	; 0x179e <prvAddCurrentTaskToDelayedList>
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	08 95       	ret

0000209e <xTaskRemoveFromEventList>:
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	dc 01       	movw	r26, r24
    20a4:	17 96       	adiw	r26, 0x07	; 7
    20a6:	ed 91       	ld	r30, X+
    20a8:	fc 91       	ld	r31, X
    20aa:	18 97       	sbiw	r26, 0x08	; 8
    20ac:	00 84       	ldd	r0, Z+8	; 0x08
    20ae:	f1 85       	ldd	r31, Z+9	; 0x09
    20b0:	e0 2d       	mov	r30, r0
    20b2:	a0 8d       	ldd	r26, Z+24	; 0x18
    20b4:	b1 8d       	ldd	r27, Z+25	; 0x19
    20b6:	c2 89       	ldd	r28, Z+18	; 0x12
    20b8:	d3 89       	ldd	r29, Z+19	; 0x13
    20ba:	84 89       	ldd	r24, Z+20	; 0x14
    20bc:	95 89       	ldd	r25, Z+21	; 0x15
    20be:	9f 83       	std	Y+7, r25	; 0x07
    20c0:	8e 83       	std	Y+6, r24	; 0x06
    20c2:	c4 89       	ldd	r28, Z+20	; 0x14
    20c4:	d5 89       	ldd	r29, Z+21	; 0x15
    20c6:	82 89       	ldd	r24, Z+18	; 0x12
    20c8:	93 89       	ldd	r25, Z+19	; 0x13
    20ca:	9d 83       	std	Y+5, r25	; 0x05
    20cc:	8c 83       	std	Y+4, r24	; 0x04
    20ce:	11 96       	adiw	r26, 0x01	; 1
    20d0:	8d 91       	ld	r24, X+
    20d2:	9c 91       	ld	r25, X
    20d4:	12 97       	sbiw	r26, 0x02	; 2
    20d6:	9f 01       	movw	r18, r30
    20d8:	22 5f       	subi	r18, 0xF2	; 242
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	82 17       	cp	r24, r18
    20de:	93 07       	cpc	r25, r19
    20e0:	31 f4       	brne	.+12     	; 0x20ee <xTaskRemoveFromEventList+0x50>
    20e2:	84 89       	ldd	r24, Z+20	; 0x14
    20e4:	95 89       	ldd	r25, Z+21	; 0x15
    20e6:	12 96       	adiw	r26, 0x02	; 2
    20e8:	9c 93       	st	X, r25
    20ea:	8e 93       	st	-X, r24
    20ec:	11 97       	sbiw	r26, 0x01	; 1
    20ee:	11 8e       	std	Z+25, r1	; 0x19
    20f0:	10 8e       	std	Z+24, r1	; 0x18
    20f2:	8c 91       	ld	r24, X
    20f4:	81 50       	subi	r24, 0x01	; 1
    20f6:	8c 93       	st	X, r24
    20f8:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <uxSchedulerSuspended>
    20fc:	81 11       	cpse	r24, r1
    20fe:	52 c0       	rjmp	.+164    	; 0x21a4 <xTaskRemoveFromEventList+0x106>
    2100:	a4 85       	ldd	r26, Z+12	; 0x0c
    2102:	b5 85       	ldd	r27, Z+13	; 0x0d
    2104:	c6 81       	ldd	r28, Z+6	; 0x06
    2106:	d7 81       	ldd	r29, Z+7	; 0x07
    2108:	80 85       	ldd	r24, Z+8	; 0x08
    210a:	91 85       	ldd	r25, Z+9	; 0x09
    210c:	9f 83       	std	Y+7, r25	; 0x07
    210e:	8e 83       	std	Y+6, r24	; 0x06
    2110:	c0 85       	ldd	r28, Z+8	; 0x08
    2112:	d1 85       	ldd	r29, Z+9	; 0x09
    2114:	86 81       	ldd	r24, Z+6	; 0x06
    2116:	97 81       	ldd	r25, Z+7	; 0x07
    2118:	9d 83       	std	Y+5, r25	; 0x05
    211a:	8c 83       	std	Y+4, r24	; 0x04
    211c:	11 96       	adiw	r26, 0x01	; 1
    211e:	8d 91       	ld	r24, X+
    2120:	9c 91       	ld	r25, X
    2122:	12 97       	sbiw	r26, 0x02	; 2
    2124:	9f 01       	movw	r18, r30
    2126:	2e 5f       	subi	r18, 0xFE	; 254
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	82 17       	cp	r24, r18
    212c:	93 07       	cpc	r25, r19
    212e:	31 f4       	brne	.+12     	; 0x213c <xTaskRemoveFromEventList+0x9e>
    2130:	80 85       	ldd	r24, Z+8	; 0x08
    2132:	91 85       	ldd	r25, Z+9	; 0x09
    2134:	12 96       	adiw	r26, 0x02	; 2
    2136:	9c 93       	st	X, r25
    2138:	8e 93       	st	-X, r24
    213a:	11 97       	sbiw	r26, 0x01	; 1
    213c:	15 86       	std	Z+13, r1	; 0x0d
    213e:	14 86       	std	Z+12, r1	; 0x0c
    2140:	8c 91       	ld	r24, X
    2142:	81 50       	subi	r24, 0x01	; 1
    2144:	8c 93       	st	X, r24
    2146:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2148:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <uxTopReadyPriority>
    214c:	8a 17       	cp	r24, r26
    214e:	10 f4       	brcc	.+4      	; 0x2154 <xTaskRemoveFromEventList+0xb6>
    2150:	a0 93 8d 11 	sts	0x118D, r26	; 0x80118d <uxTopReadyPriority>
    2154:	8b e0       	ldi	r24, 0x0B	; 11
    2156:	8a 9f       	mul	r24, r26
    2158:	d0 01       	movw	r26, r0
    215a:	11 24       	eor	r1, r1
    215c:	a1 53       	subi	r26, 0x31	; 49
    215e:	be 4e       	sbci	r27, 0xEE	; 238
    2160:	11 96       	adiw	r26, 0x01	; 1
    2162:	0d 90       	ld	r0, X+
    2164:	bc 91       	ld	r27, X
    2166:	a0 2d       	mov	r26, r0
    2168:	b7 83       	std	Z+7, r27	; 0x07
    216a:	a6 83       	std	Z+6, r26	; 0x06
    216c:	16 96       	adiw	r26, 0x06	; 6
    216e:	4d 91       	ld	r20, X+
    2170:	5c 91       	ld	r21, X
    2172:	17 97       	sbiw	r26, 0x07	; 7
    2174:	51 87       	std	Z+9, r21	; 0x09
    2176:	40 87       	std	Z+8, r20	; 0x08
    2178:	16 96       	adiw	r26, 0x06	; 6
    217a:	cd 91       	ld	r28, X+
    217c:	dc 91       	ld	r29, X
    217e:	17 97       	sbiw	r26, 0x07	; 7
    2180:	3d 83       	std	Y+5, r19	; 0x05
    2182:	2c 83       	std	Y+4, r18	; 0x04
    2184:	17 96       	adiw	r26, 0x07	; 7
    2186:	3c 93       	st	X, r19
    2188:	2e 93       	st	-X, r18
    218a:	16 97       	sbiw	r26, 0x06	; 6
    218c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    218e:	8a 9f       	mul	r24, r26
    2190:	d0 01       	movw	r26, r0
    2192:	11 24       	eor	r1, r1
    2194:	a1 53       	subi	r26, 0x31	; 49
    2196:	be 4e       	sbci	r27, 0xEE	; 238
    2198:	b5 87       	std	Z+13, r27	; 0x0d
    219a:	a4 87       	std	Z+12, r26	; 0x0c
    219c:	8c 91       	ld	r24, X
    219e:	8f 5f       	subi	r24, 0xFF	; 255
    21a0:	8c 93       	st	X, r24
    21a2:	1c c0       	rjmp	.+56     	; 0x21dc <xTaskRemoveFromEventList+0x13e>
    21a4:	4a ea       	ldi	r20, 0xAA	; 170
    21a6:	51 e1       	ldi	r21, 0x11	; 17
    21a8:	da 01       	movw	r26, r20
    21aa:	11 96       	adiw	r26, 0x01	; 1
    21ac:	cd 91       	ld	r28, X+
    21ae:	dc 91       	ld	r29, X
    21b0:	12 97       	sbiw	r26, 0x02	; 2
    21b2:	d3 8b       	std	Z+19, r29	; 0x13
    21b4:	c2 8b       	std	Z+18, r28	; 0x12
    21b6:	8e 81       	ldd	r24, Y+6	; 0x06
    21b8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ba:	95 8b       	std	Z+21, r25	; 0x15
    21bc:	84 8b       	std	Z+20, r24	; 0x14
    21be:	8e 81       	ldd	r24, Y+6	; 0x06
    21c0:	9f 81       	ldd	r25, Y+7	; 0x07
    21c2:	dc 01       	movw	r26, r24
    21c4:	15 96       	adiw	r26, 0x05	; 5
    21c6:	3c 93       	st	X, r19
    21c8:	2e 93       	st	-X, r18
    21ca:	14 97       	sbiw	r26, 0x04	; 4
    21cc:	3f 83       	std	Y+7, r19	; 0x07
    21ce:	2e 83       	std	Y+6, r18	; 0x06
    21d0:	51 8f       	std	Z+25, r21	; 0x19
    21d2:	40 8f       	std	Z+24, r20	; 0x18
    21d4:	da 01       	movw	r26, r20
    21d6:	8c 91       	ld	r24, X
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	8c 93       	st	X, r24
    21dc:	92 8d       	ldd	r25, Z+26	; 0x1a
    21de:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    21e2:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    21e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    21e8:	89 17       	cp	r24, r25
    21ea:	20 f4       	brcc	.+8      	; 0x21f4 <xTaskRemoveFromEventList+0x156>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <xYieldPending>
    21f2:	01 c0       	rjmp	.+2      	; 0x21f6 <xTaskRemoveFromEventList+0x158>
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	08 95       	ret

000021fc <vTaskSetTimeOutState>:
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	0f 92       	push	r0
    2202:	20 91 86 11 	lds	r18, 0x1186	; 0x801186 <xNumOfOverflows>
    2206:	fc 01       	movw	r30, r24
    2208:	20 83       	st	Z, r18
    220a:	40 91 8e 11 	lds	r20, 0x118E	; 0x80118e <xTickCount>
    220e:	50 91 8f 11 	lds	r21, 0x118F	; 0x80118f <xTickCount+0x1>
    2212:	60 91 90 11 	lds	r22, 0x1190	; 0x801190 <xTickCount+0x2>
    2216:	70 91 91 11 	lds	r23, 0x1191	; 0x801191 <xTickCount+0x3>
    221a:	41 83       	std	Z+1, r20	; 0x01
    221c:	52 83       	std	Z+2, r21	; 0x02
    221e:	63 83       	std	Z+3, r22	; 0x03
    2220:	74 83       	std	Z+4, r23	; 0x04
    2222:	0f 90       	pop	r0
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	08 95       	ret

00002228 <vTaskInternalSetTimeOutState>:
    2228:	20 91 86 11 	lds	r18, 0x1186	; 0x801186 <xNumOfOverflows>
    222c:	fc 01       	movw	r30, r24
    222e:	20 83       	st	Z, r18
    2230:	40 91 8e 11 	lds	r20, 0x118E	; 0x80118e <xTickCount>
    2234:	50 91 8f 11 	lds	r21, 0x118F	; 0x80118f <xTickCount+0x1>
    2238:	60 91 90 11 	lds	r22, 0x1190	; 0x801190 <xTickCount+0x2>
    223c:	70 91 91 11 	lds	r23, 0x1191	; 0x801191 <xTickCount+0x3>
    2240:	41 83       	std	Z+1, r20	; 0x01
    2242:	52 83       	std	Z+2, r21	; 0x02
    2244:	63 83       	std	Z+3, r22	; 0x03
    2246:	74 83       	std	Z+4, r23	; 0x04
    2248:	08 95       	ret

0000224a <xTaskCheckForTimeOut>:
    224a:	8f 92       	push	r8
    224c:	9f 92       	push	r9
    224e:	af 92       	push	r10
    2250:	bf 92       	push	r11
    2252:	cf 92       	push	r12
    2254:	df 92       	push	r13
    2256:	ef 92       	push	r14
    2258:	ff 92       	push	r15
    225a:	0f 93       	push	r16
    225c:	1f 93       	push	r17
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	fb 01       	movw	r30, r22
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	0f 92       	push	r0
    226a:	c0 90 8e 11 	lds	r12, 0x118E	; 0x80118e <xTickCount>
    226e:	d0 90 8f 11 	lds	r13, 0x118F	; 0x80118f <xTickCount+0x1>
    2272:	e0 90 90 11 	lds	r14, 0x1190	; 0x801190 <xTickCount+0x2>
    2276:	f0 90 91 11 	lds	r15, 0x1191	; 0x801191 <xTickCount+0x3>
    227a:	dc 01       	movw	r26, r24
    227c:	11 96       	adiw	r26, 0x01	; 1
    227e:	0d 91       	ld	r16, X+
    2280:	1d 91       	ld	r17, X+
    2282:	2d 91       	ld	r18, X+
    2284:	3c 91       	ld	r19, X
    2286:	14 97       	sbiw	r26, 0x04	; 4
    2288:	46 01       	movw	r8, r12
    228a:	57 01       	movw	r10, r14
    228c:	80 1a       	sub	r8, r16
    228e:	91 0a       	sbc	r9, r17
    2290:	a2 0a       	sbc	r10, r18
    2292:	b3 0a       	sbc	r11, r19
    2294:	40 81       	ld	r20, Z
    2296:	51 81       	ldd	r21, Z+1	; 0x01
    2298:	62 81       	ldd	r22, Z+2	; 0x02
    229a:	73 81       	ldd	r23, Z+3	; 0x03
    229c:	4f 3f       	cpi	r20, 0xFF	; 255
    229e:	bf ef       	ldi	r27, 0xFF	; 255
    22a0:	5b 07       	cpc	r21, r27
    22a2:	6b 07       	cpc	r22, r27
    22a4:	7b 07       	cpc	r23, r27
    22a6:	39 f1       	breq	.+78     	; 0x22f6 <xTaskCheckForTimeOut+0xac>
    22a8:	ec 01       	movw	r28, r24
    22aa:	b8 81       	ld	r27, Y
    22ac:	a0 91 86 11 	lds	r26, 0x1186	; 0x801186 <xNumOfOverflows>
    22b0:	ba 17       	cp	r27, r26
    22b2:	59 f0       	breq	.+22     	; 0x22ca <xTaskCheckForTimeOut+0x80>
    22b4:	c0 16       	cp	r12, r16
    22b6:	d1 06       	cpc	r13, r17
    22b8:	e2 06       	cpc	r14, r18
    22ba:	f3 06       	cpc	r15, r19
    22bc:	30 f0       	brcs	.+12     	; 0x22ca <xTaskCheckForTimeOut+0x80>
    22be:	10 82       	st	Z, r1
    22c0:	11 82       	std	Z+1, r1	; 0x01
    22c2:	12 82       	std	Z+2, r1	; 0x02
    22c4:	13 82       	std	Z+3, r1	; 0x03
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	17 c0       	rjmp	.+46     	; 0x22f8 <xTaskCheckForTimeOut+0xae>
    22ca:	84 16       	cp	r8, r20
    22cc:	95 06       	cpc	r9, r21
    22ce:	a6 06       	cpc	r10, r22
    22d0:	b7 06       	cpc	r11, r23
    22d2:	58 f4       	brcc	.+22     	; 0x22ea <xTaskCheckForTimeOut+0xa0>
    22d4:	48 19       	sub	r20, r8
    22d6:	59 09       	sbc	r21, r9
    22d8:	6a 09       	sbc	r22, r10
    22da:	7b 09       	sbc	r23, r11
    22dc:	40 83       	st	Z, r20
    22de:	51 83       	std	Z+1, r21	; 0x01
    22e0:	62 83       	std	Z+2, r22	; 0x02
    22e2:	73 83       	std	Z+3, r23	; 0x03
    22e4:	a1 df       	rcall	.-190    	; 0x2228 <vTaskInternalSetTimeOutState>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	07 c0       	rjmp	.+14     	; 0x22f8 <xTaskCheckForTimeOut+0xae>
    22ea:	10 82       	st	Z, r1
    22ec:	11 82       	std	Z+1, r1	; 0x01
    22ee:	12 82       	std	Z+2, r1	; 0x02
    22f0:	13 82       	std	Z+3, r1	; 0x03
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	01 c0       	rjmp	.+2      	; 0x22f8 <xTaskCheckForTimeOut+0xae>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	0f 90       	pop	r0
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	1f 91       	pop	r17
    2302:	0f 91       	pop	r16
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	df 90       	pop	r13
    230a:	cf 90       	pop	r12
    230c:	bf 90       	pop	r11
    230e:	af 90       	pop	r10
    2310:	9f 90       	pop	r9
    2312:	8f 90       	pop	r8
    2314:	08 95       	ret

00002316 <vTaskMissedYield>:
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <xYieldPending>
    231c:	08 95       	ret

0000231e <xTaskGetCurrentTaskHandle>:
    231e:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <pxCurrentTCB>
    2322:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    2326:	08 95       	ret

00002328 <xTaskGetSchedulerState>:
    2328:	80 91 8c 11 	lds	r24, 0x118C	; 0x80118c <xSchedulerRunning>
    232c:	88 23       	and	r24, r24
    232e:	31 f0       	breq	.+12     	; 0x233c <xTaskGetSchedulerState+0x14>
    2330:	80 91 7e 11 	lds	r24, 0x117E	; 0x80117e <uxSchedulerSuspended>
    2334:	81 11       	cpse	r24, r1
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <xTaskGetSchedulerState+0x18>
    2338:	82 e0       	ldi	r24, 0x02	; 2
    233a:	08 95       	ret
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	08 95       	ret
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	08 95       	ret

00002344 <xTaskPriorityDisinherit>:
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	fc 01       	movw	r30, r24
    234e:	89 2b       	or	r24, r25
    2350:	09 f4       	brne	.+2      	; 0x2354 <xTaskPriorityDisinherit+0x10>
    2352:	49 c0       	rjmp	.+146    	; 0x23e6 <xTaskPriorityDisinherit+0xa2>
    2354:	86 a5       	ldd	r24, Z+46	; 0x2e
    2356:	81 50       	subi	r24, 0x01	; 1
    2358:	86 a7       	std	Z+46, r24	; 0x2e
    235a:	22 8d       	ldd	r18, Z+26	; 0x1a
    235c:	95 a5       	ldd	r25, Z+45	; 0x2d
    235e:	29 17       	cp	r18, r25
    2360:	09 f4       	brne	.+2      	; 0x2364 <xTaskPriorityDisinherit+0x20>
    2362:	43 c0       	rjmp	.+134    	; 0x23ea <xTaskPriorityDisinherit+0xa6>
    2364:	81 11       	cpse	r24, r1
    2366:	43 c0       	rjmp	.+134    	; 0x23ee <xTaskPriorityDisinherit+0xaa>
    2368:	ef 01       	movw	r28, r30
    236a:	8f 01       	movw	r16, r30
    236c:	0e 5f       	subi	r16, 0xFE	; 254
    236e:	1f 4f       	sbci	r17, 0xFF	; 255
    2370:	c8 01       	movw	r24, r16
    2372:	0e 94 38 03 	call	0x670	; 0x670 <uxListRemove>
    2376:	ed a5       	ldd	r30, Y+45	; 0x2d
    2378:	ea 8f       	std	Y+26, r30	; 0x1a
    237a:	8a e0       	ldi	r24, 0x0A	; 10
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 e0       	ldi	r26, 0x00	; 0
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	8e 1b       	sub	r24, r30
    2384:	91 09       	sbc	r25, r1
    2386:	a1 09       	sbc	r26, r1
    2388:	b1 09       	sbc	r27, r1
    238a:	8e 87       	std	Y+14, r24	; 0x0e
    238c:	9f 87       	std	Y+15, r25	; 0x0f
    238e:	a8 8b       	std	Y+16, r26	; 0x10
    2390:	b9 8b       	std	Y+17, r27	; 0x11
    2392:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <uxTopReadyPriority>
    2396:	8e 17       	cp	r24, r30
    2398:	10 f4       	brcc	.+4      	; 0x239e <xTaskPriorityDisinherit+0x5a>
    239a:	e0 93 8d 11 	sts	0x118D, r30	; 0x80118d <uxTopReadyPriority>
    239e:	8b e0       	ldi	r24, 0x0B	; 11
    23a0:	8e 9f       	mul	r24, r30
    23a2:	f0 01       	movw	r30, r0
    23a4:	11 24       	eor	r1, r1
    23a6:	e1 53       	subi	r30, 0x31	; 49
    23a8:	fe 4e       	sbci	r31, 0xEE	; 238
    23aa:	01 80       	ldd	r0, Z+1	; 0x01
    23ac:	f2 81       	ldd	r31, Z+2	; 0x02
    23ae:	e0 2d       	mov	r30, r0
    23b0:	ff 83       	std	Y+7, r31	; 0x07
    23b2:	ee 83       	std	Y+6, r30	; 0x06
    23b4:	26 81       	ldd	r18, Z+6	; 0x06
    23b6:	37 81       	ldd	r19, Z+7	; 0x07
    23b8:	39 87       	std	Y+9, r19	; 0x09
    23ba:	28 87       	std	Y+8, r18	; 0x08
    23bc:	a6 81       	ldd	r26, Z+6	; 0x06
    23be:	b7 81       	ldd	r27, Z+7	; 0x07
    23c0:	15 96       	adiw	r26, 0x05	; 5
    23c2:	1c 93       	st	X, r17
    23c4:	0e 93       	st	-X, r16
    23c6:	14 97       	sbiw	r26, 0x04	; 4
    23c8:	17 83       	std	Z+7, r17	; 0x07
    23ca:	06 83       	std	Z+6, r16	; 0x06
    23cc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    23ce:	8e 9f       	mul	r24, r30
    23d0:	f0 01       	movw	r30, r0
    23d2:	11 24       	eor	r1, r1
    23d4:	e1 53       	subi	r30, 0x31	; 49
    23d6:	fe 4e       	sbci	r31, 0xEE	; 238
    23d8:	fd 87       	std	Y+13, r31	; 0x0d
    23da:	ec 87       	std	Y+12, r30	; 0x0c
    23dc:	80 81       	ld	r24, Z
    23de:	8f 5f       	subi	r24, 0xFF	; 255
    23e0:	80 83       	st	Z, r24
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	05 c0       	rjmp	.+10     	; 0x23f0 <xTaskPriorityDisinherit+0xac>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	03 c0       	rjmp	.+6      	; 0x23f0 <xTaskPriorityDisinherit+0xac>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	01 c0       	rjmp	.+2      	; 0x23f0 <xTaskPriorityDisinherit+0xac>
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	08 95       	ret

000023fa <xTaskGenericNotifyWait>:
    23fa:	4f 92       	push	r4
    23fc:	5f 92       	push	r5
    23fe:	6f 92       	push	r6
    2400:	7f 92       	push	r7
    2402:	af 92       	push	r10
    2404:	bf 92       	push	r11
    2406:	cf 92       	push	r12
    2408:	df 92       	push	r13
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	28 01       	movw	r4, r16
    2418:	39 01       	movw	r6, r18
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	0f 92       	push	r0
    2420:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    2424:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    2428:	c8 2f       	mov	r28, r24
    242a:	d0 e0       	ldi	r29, 0x00	; 0
    242c:	ec 0f       	add	r30, r28
    242e:	fd 1f       	adc	r31, r29
    2430:	83 a9       	ldd	r24, Z+51	; 0x33
    2432:	82 30       	cpi	r24, 0x02	; 2
    2434:	71 f1       	breq	.+92     	; 0x2492 <xTaskGenericNotifyWait+0x98>
    2436:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    243a:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    243e:	ce 01       	movw	r24, r28
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	e8 0f       	add	r30, r24
    244a:	f9 1f       	adc	r31, r25
    244c:	87 a5       	ldd	r24, Z+47	; 0x2f
    244e:	90 a9       	ldd	r25, Z+48	; 0x30
    2450:	a1 a9       	ldd	r26, Z+49	; 0x31
    2452:	b2 a9       	ldd	r27, Z+50	; 0x32
    2454:	40 95       	com	r20
    2456:	50 95       	com	r21
    2458:	60 95       	com	r22
    245a:	70 95       	com	r23
    245c:	48 23       	and	r20, r24
    245e:	59 23       	and	r21, r25
    2460:	6a 23       	and	r22, r26
    2462:	7b 23       	and	r23, r27
    2464:	47 a7       	std	Z+47, r20	; 0x2f
    2466:	50 ab       	std	Z+48, r21	; 0x30
    2468:	61 ab       	std	Z+49, r22	; 0x31
    246a:	72 ab       	std	Z+50, r23	; 0x32
    246c:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    2470:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    2474:	ec 0f       	add	r30, r28
    2476:	fd 1f       	adc	r31, r29
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	83 ab       	std	Z+51, r24	; 0x33
    247c:	a1 14       	cp	r10, r1
    247e:	b1 04       	cpc	r11, r1
    2480:	c1 04       	cpc	r12, r1
    2482:	d1 04       	cpc	r13, r1
    2484:	31 f0       	breq	.+12     	; 0x2492 <xTaskGenericNotifyWait+0x98>
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	c6 01       	movw	r24, r12
    248a:	b5 01       	movw	r22, r10
    248c:	88 d9       	rcall	.-3312   	; 0x179e <prvAddCurrentTaskToDelayedList>
    248e:	0e 94 b4 03 	call	0x768	; 0x768 <vPortYield>
    2492:	0f 90       	pop	r0
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	0f 92       	push	r0
    249c:	e1 14       	cp	r14, r1
    249e:	f1 04       	cpc	r15, r1
    24a0:	a1 f0       	breq	.+40     	; 0x24ca <xTaskGenericNotifyWait+0xd0>
    24a2:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    24a6:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    24aa:	ce 01       	movw	r24, r28
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	e8 0f       	add	r30, r24
    24b6:	f9 1f       	adc	r31, r25
    24b8:	87 a5       	ldd	r24, Z+47	; 0x2f
    24ba:	90 a9       	ldd	r25, Z+48	; 0x30
    24bc:	a1 a9       	ldd	r26, Z+49	; 0x31
    24be:	b2 a9       	ldd	r27, Z+50	; 0x32
    24c0:	f7 01       	movw	r30, r14
    24c2:	80 83       	st	Z, r24
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	a2 83       	std	Z+2, r26	; 0x02
    24c8:	b3 83       	std	Z+3, r27	; 0x03
    24ca:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    24ce:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    24d2:	ec 0f       	add	r30, r28
    24d4:	fd 1f       	adc	r31, r29
    24d6:	83 a9       	ldd	r24, Z+51	; 0x33
    24d8:	82 30       	cpi	r24, 0x02	; 2
    24da:	e9 f4       	brne	.+58     	; 0x2516 <xTaskGenericNotifyWait+0x11c>
    24dc:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    24e0:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    24e4:	ce 01       	movw	r24, r28
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	e8 0f       	add	r30, r24
    24f0:	f9 1f       	adc	r31, r25
    24f2:	87 a5       	ldd	r24, Z+47	; 0x2f
    24f4:	90 a9       	ldd	r25, Z+48	; 0x30
    24f6:	a1 a9       	ldd	r26, Z+49	; 0x31
    24f8:	b2 a9       	ldd	r27, Z+50	; 0x32
    24fa:	40 94       	com	r4
    24fc:	50 94       	com	r5
    24fe:	60 94       	com	r6
    2500:	70 94       	com	r7
    2502:	48 22       	and	r4, r24
    2504:	59 22       	and	r5, r25
    2506:	6a 22       	and	r6, r26
    2508:	7b 22       	and	r7, r27
    250a:	47 a6       	std	Z+47, r4	; 0x2f
    250c:	50 aa       	std	Z+48, r5	; 0x30
    250e:	61 aa       	std	Z+49, r6	; 0x31
    2510:	72 aa       	std	Z+50, r7	; 0x32
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	01 c0       	rjmp	.+2      	; 0x2518 <xTaskGenericNotifyWait+0x11e>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	20 91 3d 12 	lds	r18, 0x123D	; 0x80123d <pxCurrentTCB>
    251c:	30 91 3e 12 	lds	r19, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    2520:	c2 0f       	add	r28, r18
    2522:	d3 1f       	adc	r29, r19
    2524:	1b aa       	std	Y+51, r1	; 0x33
    2526:	0f 90       	pop	r0
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	cf 90       	pop	r12
    253a:	bf 90       	pop	r11
    253c:	af 90       	pop	r10
    253e:	7f 90       	pop	r7
    2540:	6f 90       	pop	r6
    2542:	5f 90       	pop	r5
    2544:	4f 90       	pop	r4
    2546:	08 95       	ret

00002548 <xTaskGenericNotify>:
    2548:	8f 92       	push	r8
    254a:	9f 92       	push	r9
    254c:	af 92       	push	r10
    254e:	bf 92       	push	r11
    2550:	ef 92       	push	r14
    2552:	ff 92       	push	r15
    2554:	0f 93       	push	r16
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	dc 01       	movw	r26, r24
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	0f 92       	push	r0
    2562:	e1 14       	cp	r14, r1
    2564:	f1 04       	cpc	r15, r1
    2566:	89 f0       	breq	.+34     	; 0x258a <xTaskGenericNotify+0x42>
    2568:	e6 2f       	mov	r30, r22
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	ee 0f       	add	r30, r30
    256e:	ff 1f       	adc	r31, r31
    2570:	ee 0f       	add	r30, r30
    2572:	ff 1f       	adc	r31, r31
    2574:	e8 0f       	add	r30, r24
    2576:	f9 1f       	adc	r31, r25
    2578:	87 a4       	ldd	r8, Z+47	; 0x2f
    257a:	90 a8       	ldd	r9, Z+48	; 0x30
    257c:	a1 a8       	ldd	r10, Z+49	; 0x31
    257e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2580:	f7 01       	movw	r30, r14
    2582:	80 82       	st	Z, r8
    2584:	91 82       	std	Z+1, r9	; 0x01
    2586:	a2 82       	std	Z+2, r10	; 0x02
    2588:	b3 82       	std	Z+3, r11	; 0x03
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	fd 01       	movw	r30, r26
    258e:	e6 0f       	add	r30, r22
    2590:	f7 1f       	adc	r31, r23
    2592:	83 a9       	ldd	r24, Z+51	; 0x33
    2594:	92 e0       	ldi	r25, 0x02	; 2
    2596:	93 ab       	std	Z+51, r25	; 0x33
    2598:	02 30       	cpi	r16, 0x02	; 2
    259a:	01 f1       	breq	.+64     	; 0x25dc <xTaskGenericNotify+0x94>
    259c:	18 f4       	brcc	.+6      	; 0x25a4 <xTaskGenericNotify+0x5c>
    259e:	01 30       	cpi	r16, 0x01	; 1
    25a0:	31 f0       	breq	.+12     	; 0x25ae <xTaskGenericNotify+0x66>
    25a2:	4d c0       	rjmp	.+154    	; 0x263e <xTaskGenericNotify+0xf6>
    25a4:	03 30       	cpi	r16, 0x03	; 3
    25a6:	79 f1       	breq	.+94     	; 0x2606 <xTaskGenericNotify+0xbe>
    25a8:	04 30       	cpi	r16, 0x04	; 4
    25aa:	d1 f1       	breq	.+116    	; 0x2620 <xTaskGenericNotify+0xd8>
    25ac:	48 c0       	rjmp	.+144    	; 0x263e <xTaskGenericNotify+0xf6>
    25ae:	66 0f       	add	r22, r22
    25b0:	77 1f       	adc	r23, r23
    25b2:	66 0f       	add	r22, r22
    25b4:	77 1f       	adc	r23, r23
    25b6:	fd 01       	movw	r30, r26
    25b8:	e6 0f       	add	r30, r22
    25ba:	f7 1f       	adc	r31, r23
    25bc:	87 a4       	ldd	r8, Z+47	; 0x2f
    25be:	90 a8       	ldd	r9, Z+48	; 0x30
    25c0:	a1 a8       	ldd	r10, Z+49	; 0x31
    25c2:	b2 a8       	ldd	r11, Z+50	; 0x32
    25c4:	ba 01       	movw	r22, r20
    25c6:	a9 01       	movw	r20, r18
    25c8:	48 29       	or	r20, r8
    25ca:	59 29       	or	r21, r9
    25cc:	6a 29       	or	r22, r10
    25ce:	7b 29       	or	r23, r11
    25d0:	47 a7       	std	Z+47, r20	; 0x2f
    25d2:	50 ab       	std	Z+48, r21	; 0x30
    25d4:	61 ab       	std	Z+49, r22	; 0x31
    25d6:	72 ab       	std	Z+50, r23	; 0x32
    25d8:	01 e0       	ldi	r16, 0x01	; 1
    25da:	34 c0       	rjmp	.+104    	; 0x2644 <xTaskGenericNotify+0xfc>
    25dc:	66 0f       	add	r22, r22
    25de:	77 1f       	adc	r23, r23
    25e0:	66 0f       	add	r22, r22
    25e2:	77 1f       	adc	r23, r23
    25e4:	fd 01       	movw	r30, r26
    25e6:	e6 0f       	add	r30, r22
    25e8:	f7 1f       	adc	r31, r23
    25ea:	47 a5       	ldd	r20, Z+47	; 0x2f
    25ec:	50 a9       	ldd	r21, Z+48	; 0x30
    25ee:	61 a9       	ldd	r22, Z+49	; 0x31
    25f0:	72 a9       	ldd	r23, Z+50	; 0x32
    25f2:	4f 5f       	subi	r20, 0xFF	; 255
    25f4:	5f 4f       	sbci	r21, 0xFF	; 255
    25f6:	6f 4f       	sbci	r22, 0xFF	; 255
    25f8:	7f 4f       	sbci	r23, 0xFF	; 255
    25fa:	47 a7       	std	Z+47, r20	; 0x2f
    25fc:	50 ab       	std	Z+48, r21	; 0x30
    25fe:	61 ab       	std	Z+49, r22	; 0x31
    2600:	72 ab       	std	Z+50, r23	; 0x32
    2602:	01 e0       	ldi	r16, 0x01	; 1
    2604:	1f c0       	rjmp	.+62     	; 0x2644 <xTaskGenericNotify+0xfc>
    2606:	66 0f       	add	r22, r22
    2608:	77 1f       	adc	r23, r23
    260a:	66 0f       	add	r22, r22
    260c:	77 1f       	adc	r23, r23
    260e:	fd 01       	movw	r30, r26
    2610:	e6 0f       	add	r30, r22
    2612:	f7 1f       	adc	r31, r23
    2614:	27 a7       	std	Z+47, r18	; 0x2f
    2616:	30 ab       	std	Z+48, r19	; 0x30
    2618:	41 ab       	std	Z+49, r20	; 0x31
    261a:	52 ab       	std	Z+50, r21	; 0x32
    261c:	01 e0       	ldi	r16, 0x01	; 1
    261e:	12 c0       	rjmp	.+36     	; 0x2644 <xTaskGenericNotify+0xfc>
    2620:	82 30       	cpi	r24, 0x02	; 2
    2622:	79 f0       	breq	.+30     	; 0x2642 <xTaskGenericNotify+0xfa>
    2624:	66 0f       	add	r22, r22
    2626:	77 1f       	adc	r23, r23
    2628:	66 0f       	add	r22, r22
    262a:	77 1f       	adc	r23, r23
    262c:	fd 01       	movw	r30, r26
    262e:	e6 0f       	add	r30, r22
    2630:	f7 1f       	adc	r31, r23
    2632:	27 a7       	std	Z+47, r18	; 0x2f
    2634:	30 ab       	std	Z+48, r19	; 0x30
    2636:	41 ab       	std	Z+49, r20	; 0x31
    2638:	52 ab       	std	Z+50, r21	; 0x32
    263a:	01 e0       	ldi	r16, 0x01	; 1
    263c:	03 c0       	rjmp	.+6      	; 0x2644 <xTaskGenericNotify+0xfc>
    263e:	01 e0       	ldi	r16, 0x01	; 1
    2640:	01 c0       	rjmp	.+2      	; 0x2644 <xTaskGenericNotify+0xfc>
    2642:	00 e0       	ldi	r16, 0x00	; 0
    2644:	81 30       	cpi	r24, 0x01	; 1
    2646:	09 f0       	breq	.+2      	; 0x264a <xTaskGenericNotify+0x102>
    2648:	69 c0       	rjmp	.+210    	; 0x271c <xTaskGenericNotify+0x1d4>
    264a:	1c 96       	adiw	r26, 0x0c	; 12
    264c:	ed 91       	ld	r30, X+
    264e:	fc 91       	ld	r31, X
    2650:	1d 97       	sbiw	r26, 0x0d	; 13
    2652:	16 96       	adiw	r26, 0x06	; 6
    2654:	cd 91       	ld	r28, X+
    2656:	dc 91       	ld	r29, X
    2658:	17 97       	sbiw	r26, 0x07	; 7
    265a:	18 96       	adiw	r26, 0x08	; 8
    265c:	8d 91       	ld	r24, X+
    265e:	9c 91       	ld	r25, X
    2660:	19 97       	sbiw	r26, 0x09	; 9
    2662:	9f 83       	std	Y+7, r25	; 0x07
    2664:	8e 83       	std	Y+6, r24	; 0x06
    2666:	18 96       	adiw	r26, 0x08	; 8
    2668:	cd 91       	ld	r28, X+
    266a:	dc 91       	ld	r29, X
    266c:	19 97       	sbiw	r26, 0x09	; 9
    266e:	16 96       	adiw	r26, 0x06	; 6
    2670:	8d 91       	ld	r24, X+
    2672:	9c 91       	ld	r25, X
    2674:	17 97       	sbiw	r26, 0x07	; 7
    2676:	9d 83       	std	Y+5, r25	; 0x05
    2678:	8c 83       	std	Y+4, r24	; 0x04
    267a:	81 81       	ldd	r24, Z+1	; 0x01
    267c:	92 81       	ldd	r25, Z+2	; 0x02
    267e:	9d 01       	movw	r18, r26
    2680:	2e 5f       	subi	r18, 0xFE	; 254
    2682:	3f 4f       	sbci	r19, 0xFF	; 255
    2684:	82 17       	cp	r24, r18
    2686:	93 07       	cpc	r25, r19
    2688:	31 f4       	brne	.+12     	; 0x2696 <xTaskGenericNotify+0x14e>
    268a:	18 96       	adiw	r26, 0x08	; 8
    268c:	8d 91       	ld	r24, X+
    268e:	9c 91       	ld	r25, X
    2690:	19 97       	sbiw	r26, 0x09	; 9
    2692:	92 83       	std	Z+2, r25	; 0x02
    2694:	81 83       	std	Z+1, r24	; 0x01
    2696:	1d 96       	adiw	r26, 0x0d	; 13
    2698:	1c 92       	st	X, r1
    269a:	1e 92       	st	-X, r1
    269c:	1c 97       	sbiw	r26, 0x0c	; 12
    269e:	80 81       	ld	r24, Z
    26a0:	81 50       	subi	r24, 0x01	; 1
    26a2:	80 83       	st	Z, r24
    26a4:	5a 96       	adiw	r26, 0x1a	; 26
    26a6:	ec 91       	ld	r30, X
    26a8:	5a 97       	sbiw	r26, 0x1a	; 26
    26aa:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <uxTopReadyPriority>
    26ae:	8e 17       	cp	r24, r30
    26b0:	10 f4       	brcc	.+4      	; 0x26b6 <xTaskGenericNotify+0x16e>
    26b2:	e0 93 8d 11 	sts	0x118D, r30	; 0x80118d <uxTopReadyPriority>
    26b6:	8b e0       	ldi	r24, 0x0B	; 11
    26b8:	8e 9f       	mul	r24, r30
    26ba:	f0 01       	movw	r30, r0
    26bc:	11 24       	eor	r1, r1
    26be:	e1 53       	subi	r30, 0x31	; 49
    26c0:	fe 4e       	sbci	r31, 0xEE	; 238
    26c2:	01 80       	ldd	r0, Z+1	; 0x01
    26c4:	f2 81       	ldd	r31, Z+2	; 0x02
    26c6:	e0 2d       	mov	r30, r0
    26c8:	17 96       	adiw	r26, 0x07	; 7
    26ca:	fc 93       	st	X, r31
    26cc:	ee 93       	st	-X, r30
    26ce:	16 97       	sbiw	r26, 0x06	; 6
    26d0:	46 81       	ldd	r20, Z+6	; 0x06
    26d2:	57 81       	ldd	r21, Z+7	; 0x07
    26d4:	19 96       	adiw	r26, 0x09	; 9
    26d6:	5c 93       	st	X, r21
    26d8:	4e 93       	st	-X, r20
    26da:	18 97       	sbiw	r26, 0x08	; 8
    26dc:	c6 81       	ldd	r28, Z+6	; 0x06
    26de:	d7 81       	ldd	r29, Z+7	; 0x07
    26e0:	3d 83       	std	Y+5, r19	; 0x05
    26e2:	2c 83       	std	Y+4, r18	; 0x04
    26e4:	37 83       	std	Z+7, r19	; 0x07
    26e6:	26 83       	std	Z+6, r18	; 0x06
    26e8:	5a 96       	adiw	r26, 0x1a	; 26
    26ea:	ec 91       	ld	r30, X
    26ec:	5a 97       	sbiw	r26, 0x1a	; 26
    26ee:	8e 9f       	mul	r24, r30
    26f0:	f0 01       	movw	r30, r0
    26f2:	11 24       	eor	r1, r1
    26f4:	e1 53       	subi	r30, 0x31	; 49
    26f6:	fe 4e       	sbci	r31, 0xEE	; 238
    26f8:	1d 96       	adiw	r26, 0x0d	; 13
    26fa:	fc 93       	st	X, r31
    26fc:	ee 93       	st	-X, r30
    26fe:	1c 97       	sbiw	r26, 0x0c	; 12
    2700:	80 81       	ld	r24, Z
    2702:	8f 5f       	subi	r24, 0xFF	; 255
    2704:	80 83       	st	Z, r24
    2706:	5a 96       	adiw	r26, 0x1a	; 26
    2708:	9c 91       	ld	r25, X
    270a:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    270e:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    2712:	82 8d       	ldd	r24, Z+26	; 0x1a
    2714:	89 17       	cp	r24, r25
    2716:	10 f4       	brcc	.+4      	; 0x271c <xTaskGenericNotify+0x1d4>
    2718:	0e 94 b4 03 	call	0x768	; 0x768 <vPortYield>
    271c:	0f 90       	pop	r0
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	80 2f       	mov	r24, r16
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	0f 91       	pop	r16
    2728:	ff 90       	pop	r15
    272a:	ef 90       	pop	r14
    272c:	bf 90       	pop	r11
    272e:	af 90       	pop	r10
    2730:	9f 90       	pop	r9
    2732:	8f 90       	pop	r8
    2734:	08 95       	ret

00002736 <xTaskGenericNotifyFromISR>:
    2736:	8f 92       	push	r8
    2738:	9f 92       	push	r9
    273a:	af 92       	push	r10
    273c:	bf 92       	push	r11
    273e:	cf 92       	push	r12
    2740:	df 92       	push	r13
    2742:	ef 92       	push	r14
    2744:	ff 92       	push	r15
    2746:	0f 93       	push	r16
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	dc 01       	movw	r26, r24
    274e:	e1 14       	cp	r14, r1
    2750:	f1 04       	cpc	r15, r1
    2752:	89 f0       	breq	.+34     	; 0x2776 <xTaskGenericNotifyFromISR+0x40>
    2754:	e6 2f       	mov	r30, r22
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	ee 0f       	add	r30, r30
    275a:	ff 1f       	adc	r31, r31
    275c:	ee 0f       	add	r30, r30
    275e:	ff 1f       	adc	r31, r31
    2760:	e8 0f       	add	r30, r24
    2762:	f9 1f       	adc	r31, r25
    2764:	87 a4       	ldd	r8, Z+47	; 0x2f
    2766:	90 a8       	ldd	r9, Z+48	; 0x30
    2768:	a1 a8       	ldd	r10, Z+49	; 0x31
    276a:	b2 a8       	ldd	r11, Z+50	; 0x32
    276c:	f7 01       	movw	r30, r14
    276e:	80 82       	st	Z, r8
    2770:	91 82       	std	Z+1, r9	; 0x01
    2772:	a2 82       	std	Z+2, r10	; 0x02
    2774:	b3 82       	std	Z+3, r11	; 0x03
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	fd 01       	movw	r30, r26
    277a:	e6 0f       	add	r30, r22
    277c:	f7 1f       	adc	r31, r23
    277e:	93 a9       	ldd	r25, Z+51	; 0x33
    2780:	82 e0       	ldi	r24, 0x02	; 2
    2782:	83 ab       	std	Z+51, r24	; 0x33
    2784:	02 30       	cpi	r16, 0x02	; 2
    2786:	01 f1       	breq	.+64     	; 0x27c8 <xTaskGenericNotifyFromISR+0x92>
    2788:	18 f4       	brcc	.+6      	; 0x2790 <xTaskGenericNotifyFromISR+0x5a>
    278a:	01 30       	cpi	r16, 0x01	; 1
    278c:	31 f0       	breq	.+12     	; 0x279a <xTaskGenericNotifyFromISR+0x64>
    278e:	4d c0       	rjmp	.+154    	; 0x282a <xTaskGenericNotifyFromISR+0xf4>
    2790:	03 30       	cpi	r16, 0x03	; 3
    2792:	79 f1       	breq	.+94     	; 0x27f2 <xTaskGenericNotifyFromISR+0xbc>
    2794:	04 30       	cpi	r16, 0x04	; 4
    2796:	d1 f1       	breq	.+116    	; 0x280c <xTaskGenericNotifyFromISR+0xd6>
    2798:	48 c0       	rjmp	.+144    	; 0x282a <xTaskGenericNotifyFromISR+0xf4>
    279a:	66 0f       	add	r22, r22
    279c:	77 1f       	adc	r23, r23
    279e:	66 0f       	add	r22, r22
    27a0:	77 1f       	adc	r23, r23
    27a2:	fd 01       	movw	r30, r26
    27a4:	e6 0f       	add	r30, r22
    27a6:	f7 1f       	adc	r31, r23
    27a8:	87 a4       	ldd	r8, Z+47	; 0x2f
    27aa:	90 a8       	ldd	r9, Z+48	; 0x30
    27ac:	a1 a8       	ldd	r10, Z+49	; 0x31
    27ae:	b2 a8       	ldd	r11, Z+50	; 0x32
    27b0:	ba 01       	movw	r22, r20
    27b2:	a9 01       	movw	r20, r18
    27b4:	48 29       	or	r20, r8
    27b6:	59 29       	or	r21, r9
    27b8:	6a 29       	or	r22, r10
    27ba:	7b 29       	or	r23, r11
    27bc:	47 a7       	std	Z+47, r20	; 0x2f
    27be:	50 ab       	std	Z+48, r21	; 0x30
    27c0:	61 ab       	std	Z+49, r22	; 0x31
    27c2:	72 ab       	std	Z+50, r23	; 0x32
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	34 c0       	rjmp	.+104    	; 0x2830 <xTaskGenericNotifyFromISR+0xfa>
    27c8:	66 0f       	add	r22, r22
    27ca:	77 1f       	adc	r23, r23
    27cc:	66 0f       	add	r22, r22
    27ce:	77 1f       	adc	r23, r23
    27d0:	fd 01       	movw	r30, r26
    27d2:	e6 0f       	add	r30, r22
    27d4:	f7 1f       	adc	r31, r23
    27d6:	47 a5       	ldd	r20, Z+47	; 0x2f
    27d8:	50 a9       	ldd	r21, Z+48	; 0x30
    27da:	61 a9       	ldd	r22, Z+49	; 0x31
    27dc:	72 a9       	ldd	r23, Z+50	; 0x32
    27de:	4f 5f       	subi	r20, 0xFF	; 255
    27e0:	5f 4f       	sbci	r21, 0xFF	; 255
    27e2:	6f 4f       	sbci	r22, 0xFF	; 255
    27e4:	7f 4f       	sbci	r23, 0xFF	; 255
    27e6:	47 a7       	std	Z+47, r20	; 0x2f
    27e8:	50 ab       	std	Z+48, r21	; 0x30
    27ea:	61 ab       	std	Z+49, r22	; 0x31
    27ec:	72 ab       	std	Z+50, r23	; 0x32
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	1f c0       	rjmp	.+62     	; 0x2830 <xTaskGenericNotifyFromISR+0xfa>
    27f2:	66 0f       	add	r22, r22
    27f4:	77 1f       	adc	r23, r23
    27f6:	66 0f       	add	r22, r22
    27f8:	77 1f       	adc	r23, r23
    27fa:	fd 01       	movw	r30, r26
    27fc:	e6 0f       	add	r30, r22
    27fe:	f7 1f       	adc	r31, r23
    2800:	27 a7       	std	Z+47, r18	; 0x2f
    2802:	30 ab       	std	Z+48, r19	; 0x30
    2804:	41 ab       	std	Z+49, r20	; 0x31
    2806:	52 ab       	std	Z+50, r21	; 0x32
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	12 c0       	rjmp	.+36     	; 0x2830 <xTaskGenericNotifyFromISR+0xfa>
    280c:	92 30       	cpi	r25, 0x02	; 2
    280e:	79 f0       	breq	.+30     	; 0x282e <xTaskGenericNotifyFromISR+0xf8>
    2810:	66 0f       	add	r22, r22
    2812:	77 1f       	adc	r23, r23
    2814:	66 0f       	add	r22, r22
    2816:	77 1f       	adc	r23, r23
    2818:	fd 01       	movw	r30, r26
    281a:	e6 0f       	add	r30, r22
    281c:	f7 1f       	adc	r31, r23
    281e:	27 a7       	std	Z+47, r18	; 0x2f
    2820:	30 ab       	std	Z+48, r19	; 0x30
    2822:	41 ab       	std	Z+49, r20	; 0x31
    2824:	52 ab       	std	Z+50, r21	; 0x32
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	03 c0       	rjmp	.+6      	; 0x2830 <xTaskGenericNotifyFromISR+0xfa>
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	01 c0       	rjmp	.+2      	; 0x2830 <xTaskGenericNotifyFromISR+0xfa>
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	91 30       	cpi	r25, 0x01	; 1
    2832:	09 f0       	breq	.+2      	; 0x2836 <xTaskGenericNotifyFromISR+0x100>
    2834:	96 c0       	rjmp	.+300    	; 0x2962 <xTaskGenericNotifyFromISR+0x22c>
    2836:	90 91 7e 11 	lds	r25, 0x117E	; 0x80117e <uxSchedulerSuspended>
    283a:	91 11       	cpse	r25, r1
    283c:	5f c0       	rjmp	.+190    	; 0x28fc <xTaskGenericNotifyFromISR+0x1c6>
    283e:	1c 96       	adiw	r26, 0x0c	; 12
    2840:	ed 91       	ld	r30, X+
    2842:	fc 91       	ld	r31, X
    2844:	1d 97       	sbiw	r26, 0x0d	; 13
    2846:	16 96       	adiw	r26, 0x06	; 6
    2848:	cd 91       	ld	r28, X+
    284a:	dc 91       	ld	r29, X
    284c:	17 97       	sbiw	r26, 0x07	; 7
    284e:	18 96       	adiw	r26, 0x08	; 8
    2850:	2d 91       	ld	r18, X+
    2852:	3c 91       	ld	r19, X
    2854:	19 97       	sbiw	r26, 0x09	; 9
    2856:	3f 83       	std	Y+7, r19	; 0x07
    2858:	2e 83       	std	Y+6, r18	; 0x06
    285a:	18 96       	adiw	r26, 0x08	; 8
    285c:	cd 91       	ld	r28, X+
    285e:	dc 91       	ld	r29, X
    2860:	19 97       	sbiw	r26, 0x09	; 9
    2862:	16 96       	adiw	r26, 0x06	; 6
    2864:	2d 91       	ld	r18, X+
    2866:	3c 91       	ld	r19, X
    2868:	17 97       	sbiw	r26, 0x07	; 7
    286a:	3d 83       	std	Y+5, r19	; 0x05
    286c:	2c 83       	std	Y+4, r18	; 0x04
    286e:	41 81       	ldd	r20, Z+1	; 0x01
    2870:	52 81       	ldd	r21, Z+2	; 0x02
    2872:	9d 01       	movw	r18, r26
    2874:	2e 5f       	subi	r18, 0xFE	; 254
    2876:	3f 4f       	sbci	r19, 0xFF	; 255
    2878:	42 17       	cp	r20, r18
    287a:	53 07       	cpc	r21, r19
    287c:	31 f4       	brne	.+12     	; 0x288a <xTaskGenericNotifyFromISR+0x154>
    287e:	18 96       	adiw	r26, 0x08	; 8
    2880:	4d 91       	ld	r20, X+
    2882:	5c 91       	ld	r21, X
    2884:	19 97       	sbiw	r26, 0x09	; 9
    2886:	52 83       	std	Z+2, r21	; 0x02
    2888:	41 83       	std	Z+1, r20	; 0x01
    288a:	1d 96       	adiw	r26, 0x0d	; 13
    288c:	1c 92       	st	X, r1
    288e:	1e 92       	st	-X, r1
    2890:	1c 97       	sbiw	r26, 0x0c	; 12
    2892:	90 81       	ld	r25, Z
    2894:	91 50       	subi	r25, 0x01	; 1
    2896:	90 83       	st	Z, r25
    2898:	5a 96       	adiw	r26, 0x1a	; 26
    289a:	ec 91       	ld	r30, X
    289c:	5a 97       	sbiw	r26, 0x1a	; 26
    289e:	90 91 8d 11 	lds	r25, 0x118D	; 0x80118d <uxTopReadyPriority>
    28a2:	9e 17       	cp	r25, r30
    28a4:	10 f4       	brcc	.+4      	; 0x28aa <xTaskGenericNotifyFromISR+0x174>
    28a6:	e0 93 8d 11 	sts	0x118D, r30	; 0x80118d <uxTopReadyPriority>
    28aa:	9b e0       	ldi	r25, 0x0B	; 11
    28ac:	9e 9f       	mul	r25, r30
    28ae:	f0 01       	movw	r30, r0
    28b0:	11 24       	eor	r1, r1
    28b2:	e1 53       	subi	r30, 0x31	; 49
    28b4:	fe 4e       	sbci	r31, 0xEE	; 238
    28b6:	01 80       	ldd	r0, Z+1	; 0x01
    28b8:	f2 81       	ldd	r31, Z+2	; 0x02
    28ba:	e0 2d       	mov	r30, r0
    28bc:	17 96       	adiw	r26, 0x07	; 7
    28be:	fc 93       	st	X, r31
    28c0:	ee 93       	st	-X, r30
    28c2:	16 97       	sbiw	r26, 0x06	; 6
    28c4:	46 81       	ldd	r20, Z+6	; 0x06
    28c6:	57 81       	ldd	r21, Z+7	; 0x07
    28c8:	19 96       	adiw	r26, 0x09	; 9
    28ca:	5c 93       	st	X, r21
    28cc:	4e 93       	st	-X, r20
    28ce:	18 97       	sbiw	r26, 0x08	; 8
    28d0:	c6 81       	ldd	r28, Z+6	; 0x06
    28d2:	d7 81       	ldd	r29, Z+7	; 0x07
    28d4:	3d 83       	std	Y+5, r19	; 0x05
    28d6:	2c 83       	std	Y+4, r18	; 0x04
    28d8:	37 83       	std	Z+7, r19	; 0x07
    28da:	26 83       	std	Z+6, r18	; 0x06
    28dc:	5a 96       	adiw	r26, 0x1a	; 26
    28de:	ec 91       	ld	r30, X
    28e0:	5a 97       	sbiw	r26, 0x1a	; 26
    28e2:	9e 9f       	mul	r25, r30
    28e4:	f0 01       	movw	r30, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	e1 53       	subi	r30, 0x31	; 49
    28ea:	fe 4e       	sbci	r31, 0xEE	; 238
    28ec:	1d 96       	adiw	r26, 0x0d	; 13
    28ee:	fc 93       	st	X, r31
    28f0:	ee 93       	st	-X, r30
    28f2:	1c 97       	sbiw	r26, 0x0c	; 12
    28f4:	90 81       	ld	r25, Z
    28f6:	9f 5f       	subi	r25, 0xFF	; 255
    28f8:	90 83       	st	Z, r25
    28fa:	21 c0       	rjmp	.+66     	; 0x293e <xTaskGenericNotifyFromISR+0x208>
    28fc:	6a ea       	ldi	r22, 0xAA	; 170
    28fe:	71 e1       	ldi	r23, 0x11	; 17
    2900:	fb 01       	movw	r30, r22
    2902:	c1 81       	ldd	r28, Z+1	; 0x01
    2904:	d2 81       	ldd	r29, Z+2	; 0x02
    2906:	53 96       	adiw	r26, 0x13	; 19
    2908:	dc 93       	st	X, r29
    290a:	ce 93       	st	-X, r28
    290c:	52 97       	sbiw	r26, 0x12	; 18
    290e:	2e 81       	ldd	r18, Y+6	; 0x06
    2910:	3f 81       	ldd	r19, Y+7	; 0x07
    2912:	55 96       	adiw	r26, 0x15	; 21
    2914:	3c 93       	st	X, r19
    2916:	2e 93       	st	-X, r18
    2918:	54 97       	sbiw	r26, 0x14	; 20
    291a:	4e 81       	ldd	r20, Y+6	; 0x06
    291c:	5f 81       	ldd	r21, Y+7	; 0x07
    291e:	9d 01       	movw	r18, r26
    2920:	22 5f       	subi	r18, 0xF2	; 242
    2922:	3f 4f       	sbci	r19, 0xFF	; 255
    2924:	fa 01       	movw	r30, r20
    2926:	35 83       	std	Z+5, r19	; 0x05
    2928:	24 83       	std	Z+4, r18	; 0x04
    292a:	3f 83       	std	Y+7, r19	; 0x07
    292c:	2e 83       	std	Y+6, r18	; 0x06
    292e:	59 96       	adiw	r26, 0x19	; 25
    2930:	7c 93       	st	X, r23
    2932:	6e 93       	st	-X, r22
    2934:	58 97       	sbiw	r26, 0x18	; 24
    2936:	fb 01       	movw	r30, r22
    2938:	90 81       	ld	r25, Z
    293a:	9f 5f       	subi	r25, 0xFF	; 255
    293c:	90 83       	st	Z, r25
    293e:	5a 96       	adiw	r26, 0x1a	; 26
    2940:	2c 91       	ld	r18, X
    2942:	e0 91 3d 12 	lds	r30, 0x123D	; 0x80123d <pxCurrentTCB>
    2946:	f0 91 3e 12 	lds	r31, 0x123E	; 0x80123e <pxCurrentTCB+0x1>
    294a:	92 8d       	ldd	r25, Z+26	; 0x1a
    294c:	92 17       	cp	r25, r18
    294e:	48 f4       	brcc	.+18     	; 0x2962 <xTaskGenericNotifyFromISR+0x22c>
    2950:	c1 14       	cp	r12, r1
    2952:	d1 04       	cpc	r13, r1
    2954:	19 f0       	breq	.+6      	; 0x295c <xTaskGenericNotifyFromISR+0x226>
    2956:	91 e0       	ldi	r25, 0x01	; 1
    2958:	f6 01       	movw	r30, r12
    295a:	90 83       	st	Z, r25
    295c:	91 e0       	ldi	r25, 0x01	; 1
    295e:	90 93 87 11 	sts	0x1187, r25	; 0x801187 <xYieldPending>
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	df 90       	pop	r13
    296e:	cf 90       	pop	r12
    2970:	bf 90       	pop	r11
    2972:	af 90       	pop	r10
    2974:	9f 90       	pop	r9
    2976:	8f 90       	pop	r8
    2978:	08 95       	ret

0000297a <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	21 f4       	brne	.+8      	; 0x2986 <xTaskGenericNotifyStateClear+0xc>
    297e:	80 91 3d 12 	lds	r24, 0x123D	; 0x80123d <pxCurrentTCB>
    2982:	90 91 3e 12 	lds	r25, 0x123E	; 0x80123e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	fc 01       	movw	r30, r24
    2990:	e6 0f       	add	r30, r22
    2992:	f7 1f       	adc	r31, r23
    2994:	23 a9       	ldd	r18, Z+51	; 0x33
    2996:	22 30       	cpi	r18, 0x02	; 2
    2998:	31 f4       	brne	.+12     	; 0x29a6 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    299a:	fc 01       	movw	r30, r24
    299c:	e6 0f       	add	r30, r22
    299e:	f7 1f       	adc	r31, r23
    29a0:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	01 c0       	rjmp	.+2      	; 0x29a8 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    29a6:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    29a8:	0f 90       	pop	r0
    29aa:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    29ac:	08 95       	ret

000029ae <prvGetNextExpireTime>:
    29ae:	dc 01       	movw	r26, r24
    29b0:	e0 91 49 12 	lds	r30, 0x1249	; 0x801249 <pxCurrentTimerList>
    29b4:	f0 91 4a 12 	lds	r31, 0x124A	; 0x80124a <pxCurrentTimerList+0x1>
    29b8:	80 81       	ld	r24, Z
    29ba:	91 e0       	ldi	r25, 0x01	; 1
    29bc:	81 11       	cpse	r24, r1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9c 93       	st	X, r25
    29c2:	91 11       	cpse	r25, r1
    29c4:	08 c0       	rjmp	.+16     	; 0x29d6 <prvGetNextExpireTime+0x28>
    29c6:	07 80       	ldd	r0, Z+7	; 0x07
    29c8:	f0 85       	ldd	r31, Z+8	; 0x08
    29ca:	e0 2d       	mov	r30, r0
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	08 95       	ret
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	cb 01       	movw	r24, r22
    29dc:	08 95       	ret

000029de <prvInsertTimerInActiveList>:
    29de:	cf 92       	push	r12
    29e0:	df 92       	push	r13
    29e2:	ef 92       	push	r14
    29e4:	ff 92       	push	r15
    29e6:	0f 93       	push	r16
    29e8:	1f 93       	push	r17
    29ea:	fc 01       	movw	r30, r24
    29ec:	42 83       	std	Z+2, r20	; 0x02
    29ee:	53 83       	std	Z+3, r21	; 0x03
    29f0:	64 83       	std	Z+4, r22	; 0x04
    29f2:	75 83       	std	Z+5, r23	; 0x05
    29f4:	93 87       	std	Z+11, r25	; 0x0b
    29f6:	82 87       	std	Z+10, r24	; 0x0a
    29f8:	04 17       	cp	r16, r20
    29fa:	15 07       	cpc	r17, r21
    29fc:	26 07       	cpc	r18, r22
    29fe:	37 07       	cpc	r19, r23
    2a00:	c0 f0       	brcs	.+48     	; 0x2a32 <prvInsertTimerInActiveList+0x54>
    2a02:	0c 19       	sub	r16, r12
    2a04:	1d 09       	sbc	r17, r13
    2a06:	2e 09       	sbc	r18, r14
    2a08:	3f 09       	sbc	r19, r15
    2a0a:	86 85       	ldd	r24, Z+14	; 0x0e
    2a0c:	97 85       	ldd	r25, Z+15	; 0x0f
    2a0e:	a0 89       	ldd	r26, Z+16	; 0x10
    2a10:	b1 89       	ldd	r27, Z+17	; 0x11
    2a12:	08 17       	cp	r16, r24
    2a14:	19 07       	cpc	r17, r25
    2a16:	2a 07       	cpc	r18, r26
    2a18:	3b 07       	cpc	r19, r27
    2a1a:	00 f5       	brcc	.+64     	; 0x2a5c <prvInsertTimerInActiveList+0x7e>
    2a1c:	bf 01       	movw	r22, r30
    2a1e:	6e 5f       	subi	r22, 0xFE	; 254
    2a20:	7f 4f       	sbci	r23, 0xFF	; 255
    2a22:	80 91 47 12 	lds	r24, 0x1247	; 0x801247 <pxOverflowTimerList>
    2a26:	90 91 48 12 	lds	r25, 0x1248	; 0x801248 <pxOverflowTimerList+0x1>
    2a2a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <vListInsert>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	18 c0       	rjmp	.+48     	; 0x2a62 <prvInsertTimerInActiveList+0x84>
    2a32:	0c 15       	cp	r16, r12
    2a34:	1d 05       	cpc	r17, r13
    2a36:	2e 05       	cpc	r18, r14
    2a38:	3f 05       	cpc	r19, r15
    2a3a:	28 f4       	brcc	.+10     	; 0x2a46 <prvInsertTimerInActiveList+0x68>
    2a3c:	4c 15       	cp	r20, r12
    2a3e:	5d 05       	cpc	r21, r13
    2a40:	6e 05       	cpc	r22, r14
    2a42:	7f 05       	cpc	r23, r15
    2a44:	68 f4       	brcc	.+26     	; 0x2a60 <prvInsertTimerInActiveList+0x82>
    2a46:	bf 01       	movw	r22, r30
    2a48:	6e 5f       	subi	r22, 0xFE	; 254
    2a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4c:	80 91 49 12 	lds	r24, 0x1249	; 0x801249 <pxCurrentTimerList>
    2a50:	90 91 4a 12 	lds	r25, 0x124A	; 0x80124a <pxCurrentTimerList+0x1>
    2a54:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <vListInsert>
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	03 c0       	rjmp	.+6      	; 0x2a62 <prvInsertTimerInActiveList+0x84>
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	01 c0       	rjmp	.+2      	; 0x2a62 <prvInsertTimerInActiveList+0x84>
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	cf 90       	pop	r12
    2a6e:	08 95       	ret

00002a70 <prvCheckForValidListAndQueue>:
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	0f 92       	push	r0
    2a76:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <xTimerQueue>
    2a7a:	90 91 46 12 	lds	r25, 0x1246	; 0x801246 <xTimerQueue+0x1>
    2a7e:	89 2b       	or	r24, r25
    2a80:	e9 f4       	brne	.+58     	; 0x2abc <prvCheckForValidListAndQueue+0x4c>
    2a82:	86 e5       	ldi	r24, 0x56	; 86
    2a84:	92 e1       	ldi	r25, 0x12	; 18
    2a86:	0e 94 e6 02 	call	0x5cc	; 0x5cc <vListInitialise>
    2a8a:	8b e4       	ldi	r24, 0x4B	; 75
    2a8c:	92 e1       	ldi	r25, 0x12	; 18
    2a8e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <vListInitialise>
    2a92:	86 e5       	ldi	r24, 0x56	; 86
    2a94:	92 e1       	ldi	r25, 0x12	; 18
    2a96:	90 93 4a 12 	sts	0x124A, r25	; 0x80124a <pxCurrentTimerList+0x1>
    2a9a:	80 93 49 12 	sts	0x1249, r24	; 0x801249 <pxCurrentTimerList>
    2a9e:	8b e4       	ldi	r24, 0x4B	; 75
    2aa0:	92 e1       	ldi	r25, 0x12	; 18
    2aa2:	90 93 48 12 	sts	0x1248, r25	; 0x801248 <pxOverflowTimerList+0x1>
    2aa6:	80 93 47 12 	sts	0x1247, r24	; 0x801247 <pxOverflowTimerList>
    2aaa:	40 e0       	ldi	r20, 0x00	; 0
    2aac:	67 e0       	ldi	r22, 0x07	; 7
    2aae:	8a e0       	ldi	r24, 0x0A	; 10
    2ab0:	0e 94 99 05 	call	0xb32	; 0xb32 <xQueueGenericCreate>
    2ab4:	90 93 46 12 	sts	0x1246, r25	; 0x801246 <xTimerQueue+0x1>
    2ab8:	80 93 45 12 	sts	0x1245, r24	; 0x801245 <xTimerQueue>
    2abc:	0f 90       	pop	r0
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	08 95       	ret

00002ac2 <xTimerCreateTimerTask>:
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	d3 df       	rcall	.-90     	; 0x2a70 <prvCheckForValidListAndQueue>
    2aca:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <xTimerQueue>
    2ace:	90 91 46 12 	lds	r25, 0x1246	; 0x801246 <xTimerQueue+0x1>
    2ad2:	89 2b       	or	r24, r25
    2ad4:	91 f0       	breq	.+36     	; 0x2afa <xTimerCreateTimerTask+0x38>
    2ad6:	0f 2e       	mov	r0, r31
    2ad8:	f3 e4       	ldi	r31, 0x43	; 67
    2ada:	ef 2e       	mov	r14, r31
    2adc:	f2 e1       	ldi	r31, 0x12	; 18
    2ade:	ff 2e       	mov	r15, r31
    2ae0:	f0 2d       	mov	r31, r0
    2ae2:	03 e0       	ldi	r16, 0x03	; 3
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 ec       	ldi	r20, 0xC0	; 192
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	6d eb       	ldi	r22, 0xBD	; 189
    2aee:	72 e0       	ldi	r23, 0x02	; 2
    2af0:	87 ed       	ldi	r24, 0xD7	; 215
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <xTaskCreate>
    2af8:	01 c0       	rjmp	.+2      	; 0x2afc <xTimerCreateTimerTask+0x3a>
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	08 95       	ret

00002b04 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2b04:	8f 92       	push	r8
    2b06:	9f 92       	push	r9
    2b08:	af 92       	push	r10
    2b0a:	bf 92       	push	r11
    2b0c:	cf 92       	push	r12
    2b0e:	df 92       	push	r13
    2b10:	ef 92       	push	r14
    2b12:	ff 92       	push	r15
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	27 97       	sbiw	r28, 0x07	; 7
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2b2c:	e0 91 45 12 	lds	r30, 0x1245	; 0x801245 <xTimerQueue>
    2b30:	f0 91 46 12 	lds	r31, 0x1246	; 0x801246 <xTimerQueue+0x1>
    2b34:	30 97       	sbiw	r30, 0x00	; 0
    2b36:	81 f1       	breq	.+96     	; 0x2b98 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2b38:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2b3a:	2a 83       	std	Y+2, r18	; 0x02
    2b3c:	3b 83       	std	Y+3, r19	; 0x03
    2b3e:	4c 83       	std	Y+4, r20	; 0x04
    2b40:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2b42:	9f 83       	std	Y+7, r25	; 0x07
    2b44:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2b46:	66 30       	cpi	r22, 0x06	; 6
    2b48:	f4 f4       	brge	.+60     	; 0x2b86 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2b4a:	ee db       	rcall	.-2084   	; 0x2328 <xTaskGetSchedulerState>
    2b4c:	82 30       	cpi	r24, 0x02	; 2
    2b4e:	69 f4       	brne	.+26     	; 0x2b6a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2b50:	00 e0       	ldi	r16, 0x00	; 0
    2b52:	a7 01       	movw	r20, r14
    2b54:	96 01       	movw	r18, r12
    2b56:	be 01       	movw	r22, r28
    2b58:	6f 5f       	subi	r22, 0xFF	; 255
    2b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5c:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <xTimerQueue>
    2b60:	90 91 46 12 	lds	r25, 0x1246	; 0x801246 <xTimerQueue+0x1>
    2b64:	0e 94 bc 05 	call	0xb78	; 0xb78 <xQueueGenericSend>
    2b68:	18 c0       	rjmp	.+48     	; 0x2b9a <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2b6a:	00 e0       	ldi	r16, 0x00	; 0
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	a9 01       	movw	r20, r18
    2b72:	be 01       	movw	r22, r28
    2b74:	6f 5f       	subi	r22, 0xFF	; 255
    2b76:	7f 4f       	sbci	r23, 0xFF	; 255
    2b78:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <xTimerQueue>
    2b7c:	90 91 46 12 	lds	r25, 0x1246	; 0x801246 <xTimerQueue+0x1>
    2b80:	0e 94 bc 05 	call	0xb78	; 0xb78 <xQueueGenericSend>
    2b84:	0a c0       	rjmp	.+20     	; 0x2b9a <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	a8 01       	movw	r20, r16
    2b8a:	be 01       	movw	r22, r28
    2b8c:	6f 5f       	subi	r22, 0xFF	; 255
    2b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b90:	cf 01       	movw	r24, r30
    2b92:	0e 94 4c 06 	call	0xc98	; 0xc98 <xQueueGenericSendFromISR>
    2b96:	01 c0       	rjmp	.+2      	; 0x2b9a <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2b98:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2b9a:	27 96       	adiw	r28, 0x07	; 7
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	1f 91       	pop	r17
    2bac:	0f 91       	pop	r16
    2bae:	ff 90       	pop	r15
    2bb0:	ef 90       	pop	r14
    2bb2:	df 90       	pop	r13
    2bb4:	cf 90       	pop	r12
    2bb6:	bf 90       	pop	r11
    2bb8:	af 90       	pop	r10
    2bba:	9f 90       	pop	r9
    2bbc:	8f 90       	pop	r8
    2bbe:	08 95       	ret

00002bc0 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2bc0:	8f 92       	push	r8
    2bc2:	9f 92       	push	r9
    2bc4:	af 92       	push	r10
    2bc6:	bf 92       	push	r11
    2bc8:	cf 92       	push	r12
    2bca:	df 92       	push	r13
    2bcc:	ef 92       	push	r14
    2bce:	ff 92       	push	r15
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2bd8:	3b c0       	rjmp	.+118    	; 0x2c50 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2bda:	07 80       	ldd	r0, Z+7	; 0x07
    2bdc:	f0 85       	ldd	r31, Z+8	; 0x08
    2bde:	e0 2d       	mov	r30, r0
    2be0:	80 80       	ld	r8, Z
    2be2:	91 80       	ldd	r9, Z+1	; 0x01
    2be4:	a2 80       	ldd	r10, Z+2	; 0x02
    2be6:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2be8:	c0 85       	ldd	r28, Z+8	; 0x08
    2bea:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2bec:	8e 01       	movw	r16, r28
    2bee:	0e 5f       	subi	r16, 0xFE	; 254
    2bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf2:	c8 01       	movw	r24, r16
    2bf4:	0e 94 38 03 	call	0x670	; 0x670 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2bf8:	ec 89       	ldd	r30, Y+20	; 0x14
    2bfa:	fd 89       	ldd	r31, Y+21	; 0x15
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c00:	8e 89       	ldd	r24, Y+22	; 0x16
    2c02:	82 ff       	sbrs	r24, 2
    2c04:	25 c0       	rjmp	.+74     	; 0x2c50 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2c06:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c08:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c0a:	a8 89       	ldd	r26, Y+16	; 0x10
    2c0c:	b9 89       	ldd	r27, Y+17	; 0x11
    2c0e:	88 0d       	add	r24, r8
    2c10:	99 1d       	adc	r25, r9
    2c12:	aa 1d       	adc	r26, r10
    2c14:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2c16:	88 16       	cp	r8, r24
    2c18:	99 06       	cpc	r9, r25
    2c1a:	aa 06       	cpc	r10, r26
    2c1c:	bb 06       	cpc	r11, r27
    2c1e:	70 f4       	brcc	.+28     	; 0x2c3c <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2c20:	8a 83       	std	Y+2, r24	; 0x02
    2c22:	9b 83       	std	Y+3, r25	; 0x03
    2c24:	ac 83       	std	Y+4, r26	; 0x04
    2c26:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2c28:	db 87       	std	Y+11, r29	; 0x0b
    2c2a:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2c2c:	b8 01       	movw	r22, r16
    2c2e:	80 91 49 12 	lds	r24, 0x1249	; 0x801249 <pxCurrentTimerList>
    2c32:	90 91 4a 12 	lds	r25, 0x124A	; 0x80124a <pxCurrentTimerList+0x1>
    2c36:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <vListInsert>
    2c3a:	0a c0       	rjmp	.+20     	; 0x2c50 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c3c:	c1 2c       	mov	r12, r1
    2c3e:	d1 2c       	mov	r13, r1
    2c40:	76 01       	movw	r14, r12
    2c42:	00 e0       	ldi	r16, 0x00	; 0
    2c44:	10 e0       	ldi	r17, 0x00	; 0
    2c46:	a5 01       	movw	r20, r10
    2c48:	94 01       	movw	r18, r8
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	ce 01       	movw	r24, r28
    2c4e:	5a df       	rcall	.-332    	; 0x2b04 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2c50:	e0 91 49 12 	lds	r30, 0x1249	; 0x801249 <pxCurrentTimerList>
    2c54:	f0 91 4a 12 	lds	r31, 0x124A	; 0x80124a <pxCurrentTimerList+0x1>
    2c58:	80 81       	ld	r24, Z
    2c5a:	81 11       	cpse	r24, r1
    2c5c:	be cf       	rjmp	.-132    	; 0x2bda <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2c5e:	80 91 47 12 	lds	r24, 0x1247	; 0x801247 <pxOverflowTimerList>
    2c62:	90 91 48 12 	lds	r25, 0x1248	; 0x801248 <pxOverflowTimerList+0x1>
    2c66:	90 93 4a 12 	sts	0x124A, r25	; 0x80124a <pxCurrentTimerList+0x1>
    2c6a:	80 93 49 12 	sts	0x1249, r24	; 0x801249 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2c6e:	f0 93 48 12 	sts	0x1248, r31	; 0x801248 <pxOverflowTimerList+0x1>
    2c72:	e0 93 47 12 	sts	0x1247, r30	; 0x801247 <pxOverflowTimerList>
    }
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	1f 91       	pop	r17
    2c7c:	0f 91       	pop	r16
    2c7e:	ff 90       	pop	r15
    2c80:	ef 90       	pop	r14
    2c82:	df 90       	pop	r13
    2c84:	cf 90       	pop	r12
    2c86:	bf 90       	pop	r11
    2c88:	af 90       	pop	r10
    2c8a:	9f 90       	pop	r9
    2c8c:	8f 90       	pop	r8
    2c8e:	08 95       	ret

00002c90 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2c90:	cf 92       	push	r12
    2c92:	df 92       	push	r13
    2c94:	ef 92       	push	r14
    2c96:	ff 92       	push	r15
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2c9e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <xTaskGetTickCount>
    2ca2:	6b 01       	movw	r12, r22
    2ca4:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2ca6:	80 91 3f 12 	lds	r24, 0x123F	; 0x80123f <xLastTime.2436>
    2caa:	90 91 40 12 	lds	r25, 0x1240	; 0x801240 <xLastTime.2436+0x1>
    2cae:	a0 91 41 12 	lds	r26, 0x1241	; 0x801241 <xLastTime.2436+0x2>
    2cb2:	b0 91 42 12 	lds	r27, 0x1242	; 0x801242 <xLastTime.2436+0x3>
    2cb6:	c8 16       	cp	r12, r24
    2cb8:	d9 06       	cpc	r13, r25
    2cba:	ea 06       	cpc	r14, r26
    2cbc:	fb 06       	cpc	r15, r27
    2cbe:	20 f4       	brcc	.+8      	; 0x2cc8 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2cc0:	7f df       	rcall	.-258    	; 0x2bc0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	88 83       	st	Y, r24
    2cc6:	01 c0       	rjmp	.+2      	; 0x2cca <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2cc8:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2cca:	c0 92 3f 12 	sts	0x123F, r12	; 0x80123f <xLastTime.2436>
    2cce:	d0 92 40 12 	sts	0x1240, r13	; 0x801240 <xLastTime.2436+0x1>
    2cd2:	e0 92 41 12 	sts	0x1241, r14	; 0x801241 <xLastTime.2436+0x2>
    2cd6:	f0 92 42 12 	sts	0x1242, r15	; 0x801242 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2cda:	c7 01       	movw	r24, r14
    2cdc:	b6 01       	movw	r22, r12
    2cde:	df 91       	pop	r29
    2ce0:	cf 91       	pop	r28
    2ce2:	ff 90       	pop	r15
    2ce4:	ef 90       	pop	r14
    2ce6:	df 90       	pop	r13
    2ce8:	cf 90       	pop	r12
    2cea:	08 95       	ret

00002cec <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2cec:	4f 92       	push	r4
    2cee:	5f 92       	push	r5
    2cf0:	6f 92       	push	r6
    2cf2:	7f 92       	push	r7
    2cf4:	8f 92       	push	r8
    2cf6:	9f 92       	push	r9
    2cf8:	af 92       	push	r10
    2cfa:	bf 92       	push	r11
    2cfc:	cf 92       	push	r12
    2cfe:	df 92       	push	r13
    2d00:	ef 92       	push	r14
    2d02:	ff 92       	push	r15
    2d04:	0f 93       	push	r16
    2d06:	1f 93       	push	r17
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	4b 01       	movw	r8, r22
    2d0e:	5c 01       	movw	r10, r24
    2d10:	29 01       	movw	r4, r18
    2d12:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2d14:	e0 91 49 12 	lds	r30, 0x1249	; 0x801249 <pxCurrentTimerList>
    2d18:	f0 91 4a 12 	lds	r31, 0x124A	; 0x80124a <pxCurrentTimerList+0x1>
    2d1c:	07 80       	ldd	r0, Z+7	; 0x07
    2d1e:	f0 85       	ldd	r31, Z+8	; 0x08
    2d20:	e0 2d       	mov	r30, r0
    2d22:	c0 85       	ldd	r28, Z+8	; 0x08
    2d24:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d26:	ce 01       	movw	r24, r28
    2d28:	02 96       	adiw	r24, 0x02	; 2
    2d2a:	0e 94 38 03 	call	0x670	; 0x670 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d2e:	8e 89       	ldd	r24, Y+22	; 0x16
    2d30:	82 ff       	sbrs	r24, 2
    2d32:	1b c0       	rjmp	.+54     	; 0x2d6a <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2d34:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d36:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d38:	68 89       	ldd	r22, Y+16	; 0x10
    2d3a:	79 89       	ldd	r23, Y+17	; 0x11
    2d3c:	48 0d       	add	r20, r8
    2d3e:	59 1d       	adc	r21, r9
    2d40:	6a 1d       	adc	r22, r10
    2d42:	7b 1d       	adc	r23, r11
    2d44:	75 01       	movw	r14, r10
    2d46:	64 01       	movw	r12, r8
    2d48:	93 01       	movw	r18, r6
    2d4a:	82 01       	movw	r16, r4
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	47 de       	rcall	.-882    	; 0x29de <prvInsertTimerInActiveList>
    2d50:	88 23       	and	r24, r24
    2d52:	69 f0       	breq	.+26     	; 0x2d6e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2d54:	c1 2c       	mov	r12, r1
    2d56:	d1 2c       	mov	r13, r1
    2d58:	76 01       	movw	r14, r12
    2d5a:	00 e0       	ldi	r16, 0x00	; 0
    2d5c:	10 e0       	ldi	r17, 0x00	; 0
    2d5e:	a5 01       	movw	r20, r10
    2d60:	94 01       	movw	r18, r8
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	ce 01       	movw	r24, r28
    2d66:	ce de       	rcall	.-612    	; 0x2b04 <xTimerGenericCommand>
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2d6a:	8e 7f       	andi	r24, 0xFE	; 254
    2d6c:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d6e:	ec 89       	ldd	r30, Y+20	; 0x14
    2d70:	fd 89       	ldd	r31, Y+21	; 0x15
    2d72:	ce 01       	movw	r24, r28
    2d74:	19 95       	eicall
    }
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	ff 90       	pop	r15
    2d80:	ef 90       	pop	r14
    2d82:	df 90       	pop	r13
    2d84:	cf 90       	pop	r12
    2d86:	bf 90       	pop	r11
    2d88:	af 90       	pop	r10
    2d8a:	9f 90       	pop	r9
    2d8c:	8f 90       	pop	r8
    2d8e:	7f 90       	pop	r7
    2d90:	6f 90       	pop	r6
    2d92:	5f 90       	pop	r5
    2d94:	4f 90       	pop	r4
    2d96:	08 95       	ret

00002d98 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2d98:	8f 92       	push	r8
    2d9a:	9f 92       	push	r9
    2d9c:	af 92       	push	r10
    2d9e:	bf 92       	push	r11
    2da0:	cf 92       	push	r12
    2da2:	df 92       	push	r13
    2da4:	ef 92       	push	r14
    2da6:	ff 92       	push	r15
    2da8:	1f 93       	push	r17
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	1f 92       	push	r1
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	6b 01       	movw	r12, r22
    2db6:	7c 01       	movw	r14, r24
    2db8:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2dba:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	01 96       	adiw	r24, 0x01	; 1
    2dc2:	66 df       	rcall	.-308    	; 0x2c90 <prvSampleTimeNow>
    2dc4:	4b 01       	movw	r8, r22
    2dc6:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	81 11       	cpse	r24, r1
    2dcc:	2d c0       	rjmp	.+90     	; 0x2e28 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2dce:	11 11       	cpse	r17, r1
    2dd0:	0d c0       	rjmp	.+26     	; 0x2dec <prvProcessTimerOrBlockTask+0x54>
    2dd2:	8c 14       	cp	r8, r12
    2dd4:	9d 04       	cpc	r9, r13
    2dd6:	ae 04       	cpc	r10, r14
    2dd8:	bf 04       	cpc	r11, r15
    2dda:	40 f0       	brcs	.+16     	; 0x2dec <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2ddc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2de0:	a5 01       	movw	r20, r10
    2de2:	94 01       	movw	r18, r8
    2de4:	c7 01       	movw	r24, r14
    2de6:	b6 01       	movw	r22, r12
    2de8:	81 df       	rcall	.-254    	; 0x2cec <prvProcessExpiredTimer>
    2dea:	20 c0       	rjmp	.+64     	; 0x2e2c <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2dec:	11 23       	and	r17, r17
    2dee:	41 f0       	breq	.+16     	; 0x2e00 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2df0:	e0 91 47 12 	lds	r30, 0x1247	; 0x801247 <pxOverflowTimerList>
    2df4:	f0 91 48 12 	lds	r31, 0x1248	; 0x801248 <pxOverflowTimerList+0x1>
    2df8:	80 81       	ld	r24, Z
    2dfa:	11 e0       	ldi	r17, 0x01	; 1
    2dfc:	81 11       	cpse	r24, r1
    2dfe:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2e00:	b7 01       	movw	r22, r14
    2e02:	a6 01       	movw	r20, r12
    2e04:	48 19       	sub	r20, r8
    2e06:	59 09       	sbc	r21, r9
    2e08:	6a 09       	sbc	r22, r10
    2e0a:	7b 09       	sbc	r23, r11
    2e0c:	21 2f       	mov	r18, r17
    2e0e:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <xTimerQueue>
    2e12:	90 91 46 12 	lds	r25, 0x1246	; 0x801246 <xTimerQueue+0x1>
    2e16:	0e 94 16 07 	call	0xe2c	; 0xe2c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2e1a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xTaskResumeAll>
    2e1e:	81 11       	cpse	r24, r1
    2e20:	05 c0       	rjmp	.+10     	; 0x2e2c <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2e22:	0e 94 b4 03 	call	0x768	; 0x768 <vPortYield>
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2e28:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <xTaskResumeAll>
            }
        }
    }
    2e2c:	0f 90       	pop	r0
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	1f 91       	pop	r17
    2e34:	ff 90       	pop	r15
    2e36:	ef 90       	pop	r14
    2e38:	df 90       	pop	r13
    2e3a:	cf 90       	pop	r12
    2e3c:	bf 90       	pop	r11
    2e3e:	af 90       	pop	r10
    2e40:	9f 90       	pop	r9
    2e42:	8f 90       	pop	r8
    2e44:	08 95       	ret

00002e46 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2e46:	af 92       	push	r10
    2e48:	bf 92       	push	r11
    2e4a:	cf 92       	push	r12
    2e4c:	df 92       	push	r13
    2e4e:	ef 92       	push	r14
    2e50:	ff 92       	push	r15
    2e52:	0f 93       	push	r16
    2e54:	1f 93       	push	r17
    2e56:	cf 93       	push	r28
    2e58:	df 93       	push	r29
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	28 97       	sbiw	r28, 0x08	; 8
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	f8 94       	cli
    2e64:	de bf       	out	0x3e, r29	; 62
    2e66:	0f be       	out	0x3f, r0	; 63
    2e68:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e6a:	82 c0       	rjmp	.+260    	; 0x2f70 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	88 23       	and	r24, r24
    2e70:	0c f4       	brge	.+2      	; 0x2e74 <prvProcessReceivedCommands+0x2e>
    2e72:	7e c0       	rjmp	.+252    	; 0x2f70 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2e74:	ae 80       	ldd	r10, Y+6	; 0x06
    2e76:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2e78:	d5 01       	movw	r26, r10
    2e7a:	1c 96       	adiw	r26, 0x0c	; 12
    2e7c:	8d 91       	ld	r24, X+
    2e7e:	9c 91       	ld	r25, X
    2e80:	1d 97       	sbiw	r26, 0x0d	; 13
    2e82:	89 2b       	or	r24, r25
    2e84:	21 f0       	breq	.+8      	; 0x2e8e <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e86:	c5 01       	movw	r24, r10
    2e88:	02 96       	adiw	r24, 0x02	; 2
    2e8a:	0e 94 38 03 	call	0x670	; 0x670 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2e8e:	ce 01       	movw	r24, r28
    2e90:	08 96       	adiw	r24, 0x08	; 8
    2e92:	fe de       	rcall	.-516    	; 0x2c90 <prvSampleTimeNow>
    2e94:	8b 01       	movw	r16, r22
    2e96:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2e98:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9a:	0e 2e       	mov	r0, r30
    2e9c:	00 0c       	add	r0, r0
    2e9e:	ff 0b       	sbc	r31, r31
    2ea0:	ea 30       	cpi	r30, 0x0A	; 10
    2ea2:	f1 05       	cpc	r31, r1
    2ea4:	08 f0       	brcs	.+2      	; 0x2ea8 <prvProcessReceivedCommands+0x62>
    2ea6:	64 c0       	rjmp	.+200    	; 0x2f70 <prvProcessReceivedCommands+0x12a>
    2ea8:	88 27       	eor	r24, r24
    2eaa:	ee 58       	subi	r30, 0x8E	; 142
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	8f 4f       	sbci	r24, 0xFF	; 255
    2eb0:	0c 94 2c 2a 	jmp	0x5458	; 0x5458 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2eb4:	f5 01       	movw	r30, r10
    2eb6:	86 89       	ldd	r24, Z+22	; 0x16
    2eb8:	81 60       	ori	r24, 0x01	; 1
    2eba:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2ebc:	ca 80       	ldd	r12, Y+2	; 0x02
    2ebe:	db 80       	ldd	r13, Y+3	; 0x03
    2ec0:	ec 80       	ldd	r14, Y+4	; 0x04
    2ec2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ec4:	46 85       	ldd	r20, Z+14	; 0x0e
    2ec6:	57 85       	ldd	r21, Z+15	; 0x0f
    2ec8:	60 89       	ldd	r22, Z+16	; 0x10
    2eca:	71 89       	ldd	r23, Z+17	; 0x11
    2ecc:	4c 0d       	add	r20, r12
    2ece:	5d 1d       	adc	r21, r13
    2ed0:	6e 1d       	adc	r22, r14
    2ed2:	7f 1d       	adc	r23, r15
    2ed4:	c5 01       	movw	r24, r10
    2ed6:	83 dd       	rcall	.-1274   	; 0x29de <prvInsertTimerInActiveList>
    2ed8:	88 23       	and	r24, r24
    2eda:	09 f4       	brne	.+2      	; 0x2ede <prvProcessReceivedCommands+0x98>
    2edc:	49 c0       	rjmp	.+146    	; 0x2f70 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ede:	d5 01       	movw	r26, r10
    2ee0:	54 96       	adiw	r26, 0x14	; 20
    2ee2:	ed 91       	ld	r30, X+
    2ee4:	fc 91       	ld	r31, X
    2ee6:	55 97       	sbiw	r26, 0x15	; 21
    2ee8:	c5 01       	movw	r24, r10
    2eea:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2eec:	f5 01       	movw	r30, r10
    2eee:	86 89       	ldd	r24, Z+22	; 0x16
    2ef0:	82 ff       	sbrs	r24, 2
    2ef2:	3e c0       	rjmp	.+124    	; 0x2f70 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2ef4:	4a 81       	ldd	r20, Y+2	; 0x02
    2ef6:	5b 81       	ldd	r21, Y+3	; 0x03
    2ef8:	6c 81       	ldd	r22, Y+4	; 0x04
    2efa:	7d 81       	ldd	r23, Y+5	; 0x05
    2efc:	86 85       	ldd	r24, Z+14	; 0x0e
    2efe:	97 85       	ldd	r25, Z+15	; 0x0f
    2f00:	a0 89       	ldd	r26, Z+16	; 0x10
    2f02:	b1 89       	ldd	r27, Z+17	; 0x11
    2f04:	9a 01       	movw	r18, r20
    2f06:	ab 01       	movw	r20, r22
    2f08:	28 0f       	add	r18, r24
    2f0a:	39 1f       	adc	r19, r25
    2f0c:	4a 1f       	adc	r20, r26
    2f0e:	5b 1f       	adc	r21, r27
    2f10:	c1 2c       	mov	r12, r1
    2f12:	d1 2c       	mov	r13, r1
    2f14:	76 01       	movw	r14, r12
    2f16:	00 e0       	ldi	r16, 0x00	; 0
    2f18:	10 e0       	ldi	r17, 0x00	; 0
    2f1a:	60 e0       	ldi	r22, 0x00	; 0
    2f1c:	c5 01       	movw	r24, r10
    2f1e:	f2 dd       	rcall	.-1052   	; 0x2b04 <xTimerGenericCommand>
    2f20:	27 c0       	rjmp	.+78     	; 0x2f70 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f22:	d5 01       	movw	r26, r10
    2f24:	56 96       	adiw	r26, 0x16	; 22
    2f26:	8c 91       	ld	r24, X
    2f28:	56 97       	sbiw	r26, 0x16	; 22
    2f2a:	8e 7f       	andi	r24, 0xFE	; 254
    2f2c:	56 96       	adiw	r26, 0x16	; 22
    2f2e:	8c 93       	st	X, r24
                        break;
    2f30:	1f c0       	rjmp	.+62     	; 0x2f70 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2f32:	f5 01       	movw	r30, r10
    2f34:	86 89       	ldd	r24, Z+22	; 0x16
    2f36:	81 60       	ori	r24, 0x01	; 1
    2f38:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2f3a:	4a 81       	ldd	r20, Y+2	; 0x02
    2f3c:	5b 81       	ldd	r21, Y+3	; 0x03
    2f3e:	6c 81       	ldd	r22, Y+4	; 0x04
    2f40:	7d 81       	ldd	r23, Y+5	; 0x05
    2f42:	46 87       	std	Z+14, r20	; 0x0e
    2f44:	57 87       	std	Z+15, r21	; 0x0f
    2f46:	60 8b       	std	Z+16, r22	; 0x10
    2f48:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2f4a:	40 0f       	add	r20, r16
    2f4c:	51 1f       	adc	r21, r17
    2f4e:	62 1f       	adc	r22, r18
    2f50:	73 1f       	adc	r23, r19
    2f52:	68 01       	movw	r12, r16
    2f54:	79 01       	movw	r14, r18
    2f56:	c5 01       	movw	r24, r10
    2f58:	42 dd       	rcall	.-1404   	; 0x29de <prvInsertTimerInActiveList>
                        break;
    2f5a:	0a c0       	rjmp	.+20     	; 0x2f70 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2f5c:	f5 01       	movw	r30, r10
    2f5e:	86 89       	ldd	r24, Z+22	; 0x16
    2f60:	81 fd       	sbrc	r24, 1
    2f62:	04 c0       	rjmp	.+8      	; 0x2f6c <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2f64:	c5 01       	movw	r24, r10
    2f66:	0e 94 a9 02 	call	0x552	; 0x552 <vPortFree>
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f6c:	8e 7f       	andi	r24, 0xFE	; 254
    2f6e:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	a9 01       	movw	r20, r18
    2f76:	be 01       	movw	r22, r28
    2f78:	6f 5f       	subi	r22, 0xFF	; 255
    2f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7c:	80 91 45 12 	lds	r24, 0x1245	; 0x801245 <xTimerQueue>
    2f80:	90 91 46 12 	lds	r25, 0x1246	; 0x801246 <xTimerQueue+0x1>
    2f84:	0e 94 87 06 	call	0xd0e	; 0xd0e <xQueueReceive>
    2f88:	81 11       	cpse	r24, r1
    2f8a:	70 cf       	rjmp	.-288    	; 0x2e6c <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2f8c:	28 96       	adiw	r28, 0x08	; 8
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	1f 91       	pop	r17
    2f9e:	0f 91       	pop	r16
    2fa0:	ff 90       	pop	r15
    2fa2:	ef 90       	pop	r14
    2fa4:	df 90       	pop	r13
    2fa6:	cf 90       	pop	r12
    2fa8:	bf 90       	pop	r11
    2faa:	af 90       	pop	r10
    2fac:	08 95       	ret

00002fae <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2fae:	08 95       	ret

00002fb0 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2fb0:	84 b1       	in	r24, 0x04	; 4
    2fb2:	80 68       	ori	r24, 0x80	; 128
    2fb4:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2fb6:	85 b1       	in	r24, 0x05	; 5
    2fb8:	80 68       	ori	r24, 0x80	; 128
    2fba:	85 b9       	out	0x05, r24	; 5
    2fbc:	08 95       	ret

00002fbe <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2fbe:	83 b1       	in	r24, 0x03	; 3
    2fc0:	80 68       	ori	r24, 0x80	; 128
    2fc2:	83 b9       	out	0x03, r24	; 3
    2fc4:	08 95       	ret

00002fc6 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2fc6:	f4 df       	rcall	.-24     	; 0x2fb0 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2fc8:	2f ef       	ldi	r18, 0xFF	; 255
    2fca:	80 e7       	ldi	r24, 0x70	; 112
    2fcc:	92 e0       	ldi	r25, 0x02	; 2
    2fce:	21 50       	subi	r18, 0x01	; 1
    2fd0:	80 40       	sbci	r24, 0x00	; 0
    2fd2:	90 40       	sbci	r25, 0x00	; 0
    2fd4:	e1 f7       	brne	.-8      	; 0x2fce <vApplicationMallocFailedHook+0x8>
    2fd6:	00 c0       	rjmp	.+0      	; 0x2fd8 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2fd8:	00 00       	nop
    2fda:	f1 df       	rcall	.-30     	; 0x2fbe <prvBlinkMainLed>
    2fdc:	f5 cf       	rjmp	.-22     	; 0x2fc8 <vApplicationMallocFailedHook+0x2>

00002fde <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2fde:	e8 df       	rcall	.-48     	; 0x2fb0 <prvSetMainLedOn>
    2fe0:	2f ef       	ldi	r18, 0xFF	; 255
    2fe2:	87 ea       	ldi	r24, 0xA7	; 167
    2fe4:	91 e6       	ldi	r25, 0x61	; 97
    2fe6:	21 50       	subi	r18, 0x01	; 1
    2fe8:	80 40       	sbci	r24, 0x00	; 0
    2fea:	90 40       	sbci	r25, 0x00	; 0
    2fec:	e1 f7       	brne	.-8      	; 0x2fe6 <vApplicationStackOverflowHook+0x8>
    2fee:	00 c0       	rjmp	.+0      	; 0x2ff0 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2ff0:	00 00       	nop
    2ff2:	e5 df       	rcall	.-54     	; 0x2fbe <prvBlinkMainLed>
    2ff4:	f5 cf       	rjmp	.-22     	; 0x2fe0 <vApplicationStackOverflowHook+0x2>

00002ff6 <enqueueCO2Measure>:
void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
}


void enqueueCO2Measure(uint16_t ppm){
    2ff6:	0f 93       	push	r16
    2ff8:	cf 93       	push	r28
    2ffa:	df 93       	push	r29
    2ffc:	1f 92       	push	r1
    2ffe:	1f 92       	push	r1
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
	printf("In the enqueue %d \n",ppm);
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
    300a:	8f 93       	push	r24
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	8f 93       	push	r24
    3010:	85 ec       	ldi	r24, 0xC5	; 197
    3012:	92 e0       	ldi	r25, 0x02	; 2
    3014:	9f 93       	push	r25
    3016:	8f 93       	push	r24
    3018:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    301c:	00 e0       	ldi	r16, 0x00	; 0
    301e:	2f ef       	ldi	r18, 0xFF	; 255
    3020:	3f ef       	ldi	r19, 0xFF	; 255
    3022:	a9 01       	movw	r20, r18
    3024:	be 01       	movw	r22, r28
    3026:	6f 5f       	subi	r22, 0xFF	; 255
    3028:	7f 4f       	sbci	r23, 0xFF	; 255
    302a:	80 91 e1 13 	lds	r24, 0x13E1	; 0x8013e1 <xQueueCO2>
    302e:	90 91 e2 13 	lds	r25, 0x13E2	; 0x8013e2 <xQueueCO2+0x1>
    3032:	0e 94 bc 05 	call	0xb78	; 0xb78 <xQueueGenericSend>
}
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	df 91       	pop	r29
    3044:	cf 91       	pop	r28
    3046:	0f 91       	pop	r16
    3048:	08 95       	ret

0000304a <initializeCO2Queue>:
#include "../measuredrivers/header/CO2Handler.h"

QueueHandle_t xQueueCO2;

void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	62 e0       	ldi	r22, 0x02	; 2
    304e:	8a e0       	ldi	r24, 0x0A	; 10
    3050:	0e 94 99 05 	call	0xb32	; 0xb32 <xQueueGenericCreate>
    3054:	90 93 e2 13 	sts	0x13E2, r25	; 0x8013e2 <xQueueCO2+0x1>
    3058:	80 93 e1 13 	sts	0x13E1, r24	; 0x8013e1 <xQueueCO2>
    305c:	08 95       	ret

0000305e <co2Measure>:
}

void co2Measure() {
	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
    305e:	0e 94 ef 20 	call	0x41de	; 0x41de <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
    3062:	81 11       	cpse	r24, r1
    3064:	05 c0       	rjmp	.+10     	; 0x3070 <co2Measure+0x12>
	{
		mh_z19_injectCallBack(enqueueCO2Measure);
    3066:	8b ef       	ldi	r24, 0xFB	; 251
    3068:	97 e1       	ldi	r25, 0x17	; 23
    306a:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <mh_z19_injectCallBack>
    306e:	08 95       	ret
	}
	else
	{
		puts("det gik galt");
    3070:	89 ed       	ldi	r24, 0xD9	; 217
    3072:	92 e0       	ldi	r25, 0x02	; 2
    3074:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <puts>
    3078:	08 95       	ret

0000307a <dequeueCO2Measure>:
	}
}


uint16_t dequeueCO2Measure(){
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	1f 92       	push	r1
    3080:	1f 92       	push	r1
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	
	xQueueReceive(xQueueCO2, &ppm, 1500);
    3086:	2c ed       	ldi	r18, 0xDC	; 220
    3088:	35 e0       	ldi	r19, 0x05	; 5
    308a:	40 e0       	ldi	r20, 0x00	; 0
    308c:	50 e0       	ldi	r21, 0x00	; 0
    308e:	be 01       	movw	r22, r28
    3090:	6f 5f       	subi	r22, 0xFF	; 255
    3092:	7f 4f       	sbci	r23, 0xFF	; 255
    3094:	80 91 e1 13 	lds	r24, 0x13E1	; 0x8013e1 <xQueueCO2>
    3098:	90 91 e2 13 	lds	r25, 0x13E2	; 0x8013e2 <xQueueCO2+0x1>
    309c:	0e 94 87 06 	call	0xd0e	; 0xd0e <xQueueReceive>
	return ppm;
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	9a 81       	ldd	r25, Y+2	; 0x02
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	df 91       	pop	r29
    30aa:	cf 91       	pop	r28
    30ac:	08 95       	ret

000030ae <initializeTempHumQueues>:
QueueHandle_t xQueueHum;


void initializeTempHumQueues()
{
	xQueueTemp = xQueueCreate(10, sizeof(int16_t));
    30ae:	40 e0       	ldi	r20, 0x00	; 0
    30b0:	62 e0       	ldi	r22, 0x02	; 2
    30b2:	8a e0       	ldi	r24, 0x0A	; 10
    30b4:	0e 94 99 05 	call	0xb32	; 0xb32 <xQueueGenericCreate>
    30b8:	90 93 e6 13 	sts	0x13E6, r25	; 0x8013e6 <xQueueTemp+0x1>
    30bc:	80 93 e5 13 	sts	0x13E5, r24	; 0x8013e5 <xQueueTemp>
	xQueueHum = xQueueCreate(10, sizeof(uint16_t));
    30c0:	40 e0       	ldi	r20, 0x00	; 0
    30c2:	62 e0       	ldi	r22, 0x02	; 2
    30c4:	8a e0       	ldi	r24, 0x0A	; 10
    30c6:	0e 94 99 05 	call	0xb32	; 0xb32 <xQueueGenericCreate>
    30ca:	90 93 e4 13 	sts	0x13E4, r25	; 0x8013e4 <xQueueHum+0x1>
    30ce:	80 93 e3 13 	sts	0x13E3, r24	; 0x8013e3 <xQueueHum>
    30d2:	08 95       	ret

000030d4 <enqueueTemperature>:
}

void enqueueTemperature(int16_t temp){
    30d4:	0f 93       	push	r16
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	1f 92       	push	r1
    30dc:	1f 92       	push	r1
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	9a 83       	std	Y+2, r25	; 0x02
    30e4:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueTemp, (void*)&temp, portMAX_DELAY);
    30e6:	00 e0       	ldi	r16, 0x00	; 0
    30e8:	2f ef       	ldi	r18, 0xFF	; 255
    30ea:	3f ef       	ldi	r19, 0xFF	; 255
    30ec:	a9 01       	movw	r20, r18
    30ee:	be 01       	movw	r22, r28
    30f0:	6f 5f       	subi	r22, 0xFF	; 255
    30f2:	7f 4f       	sbci	r23, 0xFF	; 255
    30f4:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <xQueueTemp>
    30f8:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <xQueueTemp+0x1>
    30fc:	0e 94 bc 05 	call	0xb78	; 0xb78 <xQueueGenericSend>
}
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	0f 91       	pop	r16
    310a:	08 95       	ret

0000310c <enqueueHumidity>:

void enqueueHumidity(uint16_t hum){
    310c:	0f 93       	push	r16
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	1f 92       	push	r1
    3114:	1f 92       	push	r1
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	9a 83       	std	Y+2, r25	; 0x02
    311c:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueHum, (void*)&hum, portMAX_DELAY);	
    311e:	00 e0       	ldi	r16, 0x00	; 0
    3120:	2f ef       	ldi	r18, 0xFF	; 255
    3122:	3f ef       	ldi	r19, 0xFF	; 255
    3124:	a9 01       	movw	r20, r18
    3126:	be 01       	movw	r22, r28
    3128:	6f 5f       	subi	r22, 0xFF	; 255
    312a:	7f 4f       	sbci	r23, 0xFF	; 255
    312c:	80 91 e3 13 	lds	r24, 0x13E3	; 0x8013e3 <xQueueHum>
    3130:	90 91 e4 13 	lds	r25, 0x13E4	; 0x8013e4 <xQueueHum+0x1>
    3134:	0e 94 bc 05 	call	0xb78	; 0xb78 <xQueueGenericSend>
}
    3138:	0f 90       	pop	r0
    313a:	0f 90       	pop	r0
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	0f 91       	pop	r16
    3142:	08 95       	ret

00003144 <tempHumMeasure>:


void tempHumMeasure()
{
    3144:	ef 92       	push	r14
    3146:	ff 92       	push	r15
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	00 d0       	rcall	.+0      	; 0x3152 <tempHumMeasure+0xe>
    3152:	1f 92       	push	r1
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5/portTICK_PERIOD_MS; 
	const TickType_t xFrequency2 = 50/portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    3158:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <xTaskGetTickCount>
    315c:	69 83       	std	Y+1, r22	; 0x01
    315e:	7a 83       	std	Y+2, r23	; 0x02
    3160:	8b 83       	std	Y+3, r24	; 0x03
    3162:	9c 83       	std	Y+4, r25	; 0x04

	if(HIH8120_OK != hih8120_wakeup())
    3164:	f6 d2       	rcall	.+1516   	; 0x3752 <hih8120_wakeup>
    3166:	88 23       	and	r24, r24
    3168:	41 f0       	breq	.+16     	; 0x317a <tempHumMeasure+0x36>
	{
		printf("wakeup gik galt");
    316a:	86 ee       	ldi	r24, 0xE6	; 230
    316c:	92 e0       	ldi	r25, 0x02	; 2
    316e:	9f 93       	push	r25
    3170:	8f 93       	push	r24
    3172:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency2 );
    317a:	43 e0       	ldi	r20, 0x03	; 3
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	ce 01       	movw	r24, r28
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskDelayUntil>
	if(HIH8120_OK != hih8120_measure())
    318a:	f8 d2       	rcall	.+1520   	; 0x377c <hih8120_measure>
    318c:	88 23       	and	r24, r24
    318e:	41 f0       	breq	.+16     	; 0x31a0 <tempHumMeasure+0x5c>
	{
		printf("measure gik galt");
    3190:	86 ef       	ldi	r24, 0xF6	; 246
    3192:	92 e0       	ldi	r25, 0x02	; 2
    3194:	9f 93       	push	r25
    3196:	8f 93       	push	r24
    3198:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    31a0:	40 e0       	ldi	r20, 0x00	; 0
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	ba 01       	movw	r22, r20
    31a6:	ce 01       	movw	r24, r28
    31a8:	01 96       	adiw	r24, 0x01	; 1
    31aa:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskDelayUntil>
	
	uint16_t humidity = hih8120_getHumidity();
    31ae:	f7 d2       	rcall	.+1518   	; 0x379e <hih8120_getHumidity>
    31b0:	36 d2       	rcall	.+1132   	; 0x361e <__fixunssfsi>
	int16_t temp = hih8120_getTemperature();
    31b2:	8b 01       	movw	r16, r22
    31b4:	09 d3       	rcall	.+1554   	; 0x37c8 <hih8120_getTemperature>
    31b6:	2e d2       	rcall	.+1116   	; 0x3614 <__fixsfsi>
    31b8:	7b 01       	movw	r14, r22
    31ba:	00 36       	cpi	r16, 0x60	; 96
	
	if (humidity > 95 && temp > 100) {
    31bc:	11 05       	cpc	r17, r1
    31be:	88 f0       	brcs	.+34     	; 0x31e2 <tempHumMeasure+0x9e>
    31c0:	85 e6       	ldi	r24, 0x65	; 101
    31c2:	e8 16       	cp	r14, r24
    31c4:	f1 04       	cpc	r15, r1
    31c6:	6c f0       	brlt	.+26     	; 0x31e2 <tempHumMeasure+0x9e>
    31c8:	40 e0       	ldi	r20, 0x00	; 0
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	ba 01       	movw	r22, r20
    31ce:	ce 01       	movw	r24, r28
    31d0:	01 96       	adiw	r24, 0x01	; 1
			
		humidity = hih8120_getHumidity();
    31d2:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskDelayUntil>
    31d6:	e3 d2       	rcall	.+1478   	; 0x379e <hih8120_getHumidity>
		temp = hih8120_getTemperature();
    31d8:	22 d2       	rcall	.+1092   	; 0x361e <__fixunssfsi>
    31da:	8b 01       	movw	r16, r22
    31dc:	f5 d2       	rcall	.+1514   	; 0x37c8 <hih8120_getTemperature>
    31de:	1a d2       	rcall	.+1076   	; 0x3614 <__fixsfsi>
    31e0:	7b 01       	movw	r14, r22
	}
	
	enqueueHumidity(humidity);
    31e2:	c8 01       	movw	r24, r16
    31e4:	93 df       	rcall	.-218    	; 0x310c <enqueueHumidity>
    31e6:	c7 01       	movw	r24, r14
	enqueueTemperature(temp);
    31e8:	75 df       	rcall	.-278    	; 0x30d4 <enqueueTemperature>
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
}
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	1f 91       	pop	r17
    31f8:	0f 91       	pop	r16
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	08 95       	ret

00003200 <dequeueTempMeasure>:
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29


int16_t dequeueTempMeasure(){
    3204:	1f 92       	push	r1
    3206:	1f 92       	push	r1
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	
	xQueueReceive(xQueueTemp, &temp, 1500);
    320c:	2c ed       	ldi	r18, 0xDC	; 220
    320e:	35 e0       	ldi	r19, 0x05	; 5
    3210:	40 e0       	ldi	r20, 0x00	; 0
    3212:	50 e0       	ldi	r21, 0x00	; 0
    3214:	be 01       	movw	r22, r28
    3216:	6f 5f       	subi	r22, 0xFF	; 255
    3218:	7f 4f       	sbci	r23, 0xFF	; 255
    321a:	80 91 e5 13 	lds	r24, 0x13E5	; 0x8013e5 <xQueueTemp>
    321e:	90 91 e6 13 	lds	r25, 0x13E6	; 0x8013e6 <xQueueTemp+0x1>
    3222:	0e 94 87 06 	call	0xd0e	; 0xd0e <xQueueReceive>
	return temp;
}
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	9a 81       	ldd	r25, Y+2	; 0x02
    322a:	0f 90       	pop	r0
    322c:	0f 90       	pop	r0
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	08 95       	ret

00003234 <dequeueHumidityMeasure>:

uint16_t dequeueHumidityMeasure(){
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	1f 92       	push	r1
    323a:	1f 92       	push	r1
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
	uint16_t hum;
	
	xQueueReceive(xQueueHum, &hum, 1500);
    3240:	2c ed       	ldi	r18, 0xDC	; 220
    3242:	35 e0       	ldi	r19, 0x05	; 5
    3244:	40 e0       	ldi	r20, 0x00	; 0
    3246:	50 e0       	ldi	r21, 0x00	; 0
    3248:	be 01       	movw	r22, r28
    324a:	6f 5f       	subi	r22, 0xFF	; 255
    324c:	7f 4f       	sbci	r23, 0xFF	; 255
    324e:	80 91 e3 13 	lds	r24, 0x13E3	; 0x8013e3 <xQueueHum>
    3252:	90 91 e4 13 	lds	r25, 0x13E4	; 0x8013e4 <xQueueHum+0x1>
    3256:	0e 94 87 06 	call	0xd0e	; 0xd0e <xQueueReceive>
	return hum;
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	df 91       	pop	r29
    3264:	cf 91       	pop	r28
    3266:	08 95       	ret

00003268 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3268:	0f 93       	push	r16
    326a:	1f 93       	push	r17
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	64 97       	sbiw	r28, 0x14	; 20
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61

	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3286:	28 d4       	rcall	.+2128   	; 0x3ad8 <lora_driver_rn2483FactoryReset>
    3288:	a4 d6       	rcall	.+3400   	; 0x3fd2 <lora_driver_mapReturnCodeToText>
    328a:	9f 93       	push	r25
    328c:	8f 93       	push	r24
    328e:	87 e0       	ldi	r24, 0x07	; 7
    3290:	93 e0       	ldi	r25, 0x03	; 3
    3292:	9f 93       	push	r25
    3294:	8f 93       	push	r24
    3296:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    329a:	9c d5       	rcall	.+2872   	; 0x3dd4 <lora_driver_configureToEu868>
    329c:	9a d6       	rcall	.+3380   	; 0x3fd2 <lora_driver_mapReturnCodeToText>
    329e:	9f 93       	push	r25
    32a0:	8f 93       	push	r24
    32a2:	8a e1       	ldi	r24, 0x1A	; 26
    32a4:	93 e0       	ldi	r25, 0x03	; 3
    32a6:	9f 93       	push	r25
    32a8:	8f 93       	push	r24
    32aa:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
    32ae:	8e 01       	movw	r16, r28
    32b0:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    32b2:	1f 4f       	sbci	r17, 0xFF	; 255
    32b4:	c8 01       	movw	r24, r16
    32b6:	22 d4       	rcall	.+2116   	; 0x3afc <lora_driver_getRn2483Hweui>
    32b8:	8c d6       	rcall	.+3352   	; 0x3fd2 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    32ba:	1f 93       	push	r17
    32bc:	0f 93       	push	r16
    32be:	9f 93       	push	r25
    32c0:	8f 93       	push	r24
    32c2:	83 e3       	ldi	r24, 0x33	; 51
    32c4:	93 e0       	ldi	r25, 0x03	; 3
    32c6:	9f 93       	push	r25
    32c8:	8f 93       	push	r24
    32ca:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    32ce:	c8 01       	movw	r24, r16
    32d0:	31 d4       	rcall	.+2146   	; 0x3b34 <lora_driver_setDeviceIdentifier>
    32d2:	7f d6       	rcall	.+3326   	; 0x3fd2 <lora_driver_mapReturnCodeToText>
    32d4:	9f 93       	push	r25
    32d6:	8f 93       	push	r24
    32d8:	1f 93       	push	r17
    32da:	0f 93       	push	r16
    32dc:	87 e4       	ldi	r24, 0x47	; 71
    32de:	93 e0       	ldi	r25, 0x03	; 3
    32e0:	9f 93       	push	r25
    32e2:	8f 93       	push	r24
    32e4:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    32e8:	a8 01       	movw	r20, r16
    32ea:	6c e5       	ldi	r22, 0x5C	; 92
    32ec:	73 e0       	ldi	r23, 0x03	; 3
    32ee:	8d e7       	ldi	r24, 0x7D	; 125
    32f0:	93 e0       	ldi	r25, 0x03	; 3
    32f2:	4e d6       	rcall	.+3228   	; 0x3f90 <lora_driver_setOtaaIdentity>
    32f4:	6e d6       	rcall	.+3292   	; 0x3fd2 <lora_driver_mapReturnCodeToText>
    32f6:	9f 93       	push	r25
    32f8:	8f 93       	push	r24
    32fa:	1f 93       	push	r17
    32fc:	0f 93       	push	r16
    32fe:	8c e5       	ldi	r24, 0x5C	; 92
    3300:	93 e0       	ldi	r25, 0x03	; 3
    3302:	9f 93       	push	r25
    3304:	8f 93       	push	r24
    3306:	8d e7       	ldi	r24, 0x7D	; 125
    3308:	93 e0       	ldi	r25, 0x03	; 3
    330a:	9f 93       	push	r25
    330c:	8f 93       	push	r24
    330e:	8e e8       	ldi	r24, 0x8E	; 142
    3310:	93 e0       	ldi	r25, 0x03	; 3
    3312:	9f 93       	push	r25
    3314:	8f 93       	push	r24
    3316:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    331a:	3f d4       	rcall	.+2174   	; 0x3b9a <lora_driver_saveMac>
    331c:	5a d6       	rcall	.+3252   	; 0x3fd2 <lora_driver_mapReturnCodeToText>
    331e:	9f 93       	push	r25
    3320:	8f 93       	push	r24
    3322:	84 ec       	ldi	r24, 0xC4	; 196
    3324:	93 e0       	ldi	r25, 0x03	; 3
    3326:	9f 93       	push	r25
    3328:	8f 93       	push	r24
    332a:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	de bf       	out	0x3e, r29	; 62
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	cd bf       	out	0x3d, r28	; 61
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	29 d5       	rcall	.+2642   	; 0x3d8e <lora_driver_setAdaptiveDataRate>
    333c:	4a d6       	rcall	.+3220   	; 0x3fd2 <lora_driver_mapReturnCodeToText>
    333e:	9f 93       	push	r25
    3340:	8f 93       	push	r24
    3342:	83 ed       	ldi	r24, 0xD3	; 211
    3344:	93 e0       	ldi	r25, 0x03	; 3
    3346:	9f 93       	push	r25
    3348:	8f 93       	push	r24
    334a:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    334e:	84 ef       	ldi	r24, 0xF4	; 244
    3350:	91 e0       	ldi	r25, 0x01	; 1
    3352:	28 d5       	rcall	.+2640   	; 0x3da4 <lora_driver_setReceiveDelay>
    3354:	3e d6       	rcall	.+3196   	; 0x3fd2 <lora_driver_mapReturnCodeToText>
    3356:	9f 93       	push	r25
    3358:	8f 93       	push	r24
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	8f 93       	push	r24
    335e:	84 ef       	ldi	r24, 0xF4	; 244
    3360:	8f 93       	push	r24
    3362:	84 ef       	ldi	r24, 0xF4	; 244
    3364:	93 e0       	ldi	r25, 0x03	; 3
    3366:	9f 93       	push	r25
    3368:	8f 93       	push	r24
    336a:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
    336e:	0f b6       	in	r0, 0x3f	; 63
    3370:	f8 94       	cli
    3372:	de bf       	out	0x3e, r29	; 62
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3378:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	14 d4       	rcall	.+2088   	; 0x3ba6 <lora_driver_join>
    337e:	08 2f       	mov	r16, r24
    3380:	28 d6       	rcall	.+3152   	; 0x3fd2 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3382:	9f 93       	push	r25
    3384:	8f 93       	push	r24
    3386:	1f 92       	push	r1
    3388:	1f 93       	push	r17
    338a:	84 e1       	ldi	r24, 0x14	; 20
    338c:	94 e0       	ldi	r25, 0x04	; 4
    338e:	9f 93       	push	r25
    3390:	8f 93       	push	r24
    3392:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	08 30       	cpi	r16, 0x08	; 8
    33a4:	59 f0       	breq	.+22     	; 0x33bc <_lora_setup+0x154>
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    33ac:	66 e3       	ldi	r22, 0x36	; 54
    33ae:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <vTaskDelay>
    33b8:	11 50       	subi	r17, 0x01	; 1
    33ba:	f9 f6       	brne	.-66     	; 0x337a <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    33bc:	08 30       	cpi	r16, 0x08	; 8
    33be:	41 f4       	brne	.+16     	; 0x33d0 <_lora_setup+0x168>

	if (rc == LORA_ACCEPTED)
    33c0:	84 e3       	ldi	r24, 0x34	; 52
    33c2:	94 e0       	ldi	r25, 0x04	; 4
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		printf("\t We have been accepted \n");
    33c4:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <puts>
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <status_leds_ledOn>
		status_leds_ledOn(led_ST2); // OPTIONAL
    33ce:	09 c0       	rjmp	.+18     	; 0x33e2 <_lora_setup+0x17a>
    33d0:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    33d2:	0e 94 80 26 	call	0x4d00	; 0x4d00 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    33dc:	0e 94 b4 03 	call	0x768	; 0x768 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    33e0:	fd cf       	rjmp	.-6      	; 0x33dc <_lora_setup+0x174>
    33e2:	64 96       	adiw	r28, 0x14	; 20
    33e4:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	df 91       	pop	r29
    33f0:	cf 91       	pop	r28
    33f2:	1f 91       	pop	r17
    33f4:	0f 91       	pop	r16
    33f6:	08 95       	ret

000033f8 <lora_handler_task>:
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    33fc:	00 d0       	rcall	.+0      	; 0x33fe <lora_handler_task+0x6>
    33fe:	1f 92       	push	r1
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	5a d3       	rcall	.+1716   	; 0x3abc <lora_driver_resetRn2483>
	vTaskDelay(2);
    3408:	62 e0       	ldi	r22, 0x02	; 2
    340a:	70 e0       	ldi	r23, 0x00	; 0
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	0e 94 76 0f 	call	0x1eec	; 0x1eec <vTaskDelay>
	lora_driver_resetRn2483(0);
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	52 d3       	rcall	.+1700   	; 0x3abc <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3418:	66 e9       	ldi	r22, 0x96	; 150
    341a:	70 e0       	ldi	r23, 0x00	; 0
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	0e 94 76 0f 	call	0x1eec	; 0x1eec <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3424:	04 d3       	rcall	.+1544   	; 0x3a2e <lora_driver_flushBuffers>

	_lora_setup();
    3426:	20 df       	rcall	.-448    	; 0x3268 <_lora_setup>
    3428:	e1 e6       	ldi	r30, 0x61	; 97

	// DEFINING SIZE OF PAYLOAD
	_uplink_payload.len = 8;
    342a:	f2 e1       	ldi	r31, 0x12	; 18
    342c:	88 e0       	ldi	r24, 0x08	; 8
    342e:	81 83       	std	Z+1, r24	; 0x01
    3430:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    3432:	80 83       	st	Z, r24
    3434:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(400000UL); // UNDER TESTING 30000 (30 sec) Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3438:	69 83       	std	Y+1, r22	; 0x01
    343a:	7a 83       	std	Y+2, r23	; 0x02
    343c:	8b 83       	std	Y+3, r24	; 0x03
    343e:	9c 83       	std	Y+4, r25	; 0x04
    3440:	8d e4       	ldi	r24, 0x4D	; 77

	for(;;)
	{
		uint16_t growbroId = 1;
		
		printf("\t going into delay \n");
    3442:	94 e0       	ldi	r25, 0x04	; 4
    3444:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <puts>
    3448:	40 ee       	ldi	r20, 0xE0	; 224
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    344a:	50 e6       	ldi	r21, 0x60	; 96
    344c:	60 e0       	ldi	r22, 0x00	; 0
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	ce 01       	movw	r24, r28
    3452:	01 96       	adiw	r24, 0x01	; 1
    3454:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskDelayUntil>
    3458:	0e 94 7f 01 	call	0x2fe	; 0x2fe <dequeueSharedData>
		
		// Creating struct and dequeueing data
		SharedData_t sharedData;
		sharedData = dequeueSharedData();
    345c:	8c 01       	movw	r16, r24
    345e:	dc 01       	movw	r26, r24
		
		printf("DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
    3460:	13 96       	adiw	r26, 0x03	; 3
    3462:	8c 91       	ld	r24, X
    3464:	13 97       	sbiw	r26, 0x03	; 3
    3466:	8f 93       	push	r24
    3468:	12 96       	adiw	r26, 0x02	; 2
    346a:	8c 91       	ld	r24, X
    346c:	12 97       	sbiw	r26, 0x02	; 2
    346e:	8f 93       	push	r24
    3470:	11 96       	adiw	r26, 0x01	; 1
    3472:	8c 91       	ld	r24, X
    3474:	11 97       	sbiw	r26, 0x01	; 1
    3476:	8f 93       	push	r24
    3478:	8c 91       	ld	r24, X
    347a:	8f 93       	push	r24
    347c:	15 96       	adiw	r26, 0x05	; 5
    347e:	8c 91       	ld	r24, X
    3480:	15 97       	sbiw	r26, 0x05	; 5
    3482:	8f 93       	push	r24
    3484:	14 96       	adiw	r26, 0x04	; 4
    3486:	8c 91       	ld	r24, X
    3488:	8f 93       	push	r24
    348a:	81 e6       	ldi	r24, 0x61	; 97
    348c:	94 e0       	ldi	r25, 0x04	; 4
    348e:	9f 93       	push	r25
    3490:	8f 93       	push	r24
    3492:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
    3496:	e1 e6       	ldi	r30, 0x61	; 97
		
		// CREATING OUR OWN PAYLOAD
		_uplink_payload.bytes[0] = growbroId >> 8;
    3498:	f2 e1       	ldi	r31, 0x12	; 18
    349a:	12 82       	std	Z+2, r1	; 0x02
    349c:	81 e0       	ldi	r24, 0x01	; 1
		_uplink_payload.bytes[1] = growbroId & 0xFF;
    349e:	83 83       	std	Z+3, r24	; 0x03
    34a0:	d8 01       	movw	r26, r16
		_uplink_payload.bytes[2] = sharedData->co2 >> 8;
    34a2:	11 96       	adiw	r26, 0x01	; 1
    34a4:	8c 91       	ld	r24, X
    34a6:	11 97       	sbiw	r26, 0x01	; 1
    34a8:	84 83       	std	Z+4, r24	; 0x04
    34aa:	8c 91       	ld	r24, X
		_uplink_payload.bytes[3] = sharedData->co2 & 0xFF;
    34ac:	85 83       	std	Z+5, r24	; 0x05
    34ae:	15 96       	adiw	r26, 0x05	; 5
		_uplink_payload.bytes[4] = sharedData->humidity >> 8;
    34b0:	8c 91       	ld	r24, X
    34b2:	15 97       	sbiw	r26, 0x05	; 5
    34b4:	86 83       	std	Z+6, r24	; 0x06
    34b6:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[5] = sharedData->humidity & 0xFF;
    34b8:	8c 91       	ld	r24, X
    34ba:	14 97       	sbiw	r26, 0x04	; 4
    34bc:	87 83       	std	Z+7, r24	; 0x07
    34be:	13 96       	adiw	r26, 0x03	; 3
		_uplink_payload.bytes[6] = sharedData->temperature >> 8;
    34c0:	8c 91       	ld	r24, X
    34c2:	13 97       	sbiw	r26, 0x03	; 3
    34c4:	80 87       	std	Z+8, r24	; 0x08
    34c6:	12 96       	adiw	r26, 0x02	; 2
		_uplink_payload.bytes[7] = sharedData->temperature & 0xFF;
    34c8:	8c 91       	ld	r24, X
    34ca:	81 87       	std	Z+9, r24	; 0x09
    34cc:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    34ce:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <status_leds_shortPuls>
		
		// SENDING PAYLOAD
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    34d2:	61 e6       	ldi	r22, 0x61	; 97
    34d4:	72 e1       	ldi	r23, 0x12	; 18
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	8f d3       	rcall	.+1822   	; 0x3bf8 <lora_driver_sendUploadMessage>
    34da:	7b d5       	rcall	.+2806   	; 0x3fd2 <lora_driver_mapReturnCodeToText>
    34dc:	9f 93       	push	r25
    34de:	8f 93       	push	r24
    34e0:	8c e8       	ldi	r24, 0x8C	; 140
    34e2:	94 e0       	ldi	r25, 0x04	; 4
    34e4:	9f 93       	push	r25
    34e6:	8f 93       	push	r24
    34e8:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <printf>
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	a4 cf       	rjmp	.-184    	; 0x3440 <lora_handler_task+0x48>

000034f8 <lora_handler_initialise>:
    34f8:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    34fa:	ff 92       	push	r15
    34fc:	0f 93       	push	r16
	xTaskCreate(
    34fe:	e1 2c       	mov	r14, r1
    3500:	f1 2c       	mov	r15, r1
    3502:	08 2f       	mov	r16, r24
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	48 e8       	ldi	r20, 0x88	; 136
    350a:	51 e0       	ldi	r21, 0x01	; 1
    350c:	61 ea       	ldi	r22, 0xA1	; 161
    350e:	74 e0       	ldi	r23, 0x04	; 4
    3510:	8c ef       	ldi	r24, 0xFC	; 252
    3512:	99 e1       	ldi	r25, 0x19	; 25
    3514:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3518:	0f 91       	pop	r16
    351a:	ff 90       	pop	r15
    351c:	ef 90       	pop	r14
    351e:	08 95       	ret

00003520 <takeMeasure>:
	,  NULL );	
}


void takeMeasure(void *pvParameters)
{
    3520:	cf 93       	push	r28
    3522:	df 93       	push	r29
    3524:	00 d0       	rcall	.+0      	; 0x3526 <takeMeasure+0x6>
    3526:	1f 92       	push	r1
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5000/portTICK_PERIOD_MS; // 60 s

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    352c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <xTaskGetTickCount>
    3530:	69 83       	std	Y+1, r22	; 0x01
    3532:	7a 83       	std	Y+2, r23	; 0x02
    3534:	8b 83       	std	Y+3, r24	; 0x03
    3536:	9c 83       	std	Y+4, r25	; 0x04
		
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3538:	48 e3       	ldi	r20, 0x38	; 56
    353a:	51 e0       	ldi	r21, 0x01	; 1
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	70 e0       	ldi	r23, 0x00	; 0
    3540:	ce 01       	movw	r24, r28
    3542:	01 96       	adiw	r24, 0x01	; 1
    3544:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskDelayUntil>
		tempHumMeasure();	
    3548:	fd dd       	rcall	.-1030   	; 0x3144 <tempHumMeasure>
		co2Measure(); // Call CO2HandlerImpl to take measure
    354a:	89 dd       	rcall	.-1262   	; 0x305e <co2Measure>
    354c:	f5 cf       	rjmp	.-22     	; 0x3538 <takeMeasure+0x18>

0000354e <enqueueMeasures>:
    354e:	cf 93       	push	r28
	}
}

void enqueueMeasures(void *pvParameters)
{
    3550:	df 93       	push	r29
    3552:	00 d0       	rcall	.+0      	; 0x3554 <enqueueMeasures+0x6>
    3554:	1f 92       	push	r1
    3556:	cd b7       	in	r28, 0x3d	; 61
    3558:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 55000/portTICK_PERIOD_MS; // 65 s

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    355a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <xTaskGetTickCount>
    355e:	69 83       	std	Y+1, r22	; 0x01
    3560:	7a 83       	std	Y+2, r23	; 0x02
    3562:	8b 83       	std	Y+3, r24	; 0x03
    3564:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3566:	4d e6       	ldi	r20, 0x6D	; 109
    3568:	5d e0       	ldi	r21, 0x0D	; 13
    356a:	60 e0       	ldi	r22, 0x00	; 0
    356c:	70 e0       	ldi	r23, 0x00	; 0
    356e:	ce 01       	movw	r24, r28
    3570:	01 96       	adiw	r24, 0x01	; 1
    3572:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskDelayUntil>
		enqueueSharedData(); // Call SharedDataQueueImpl to enqueue the measures
    3576:	0e 94 11 01 	call	0x222	; 0x222 <enqueueSharedData>
    357a:	f5 cf       	rjmp	.-22     	; 0x3566 <enqueueMeasures+0x18>

0000357c <setupTasks>:
void takeMeasure( void *pvParameters );
void enqueueMeasures( void *pvParameters );


void setupTasks(void) // Can only setup 2 tasks, memory problems?
{
    357c:	ef 92       	push	r14
    357e:	ff 92       	push	r15
    3580:	0f 93       	push	r16
	
	xTaskCreate(
    3582:	e1 2c       	mov	r14, r1
    3584:	f1 2c       	mov	r15, r1
    3586:	00 e0       	ldi	r16, 0x00	; 0
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 ec       	ldi	r20, 0xC0	; 192
    358e:	50 e0       	ldi	r21, 0x00	; 0
    3590:	68 ea       	ldi	r22, 0xA8	; 168
    3592:	74 e0       	ldi	r23, 0x04	; 4
    3594:	80 e9       	ldi	r24, 0x90	; 144
    3596:	9a e1       	ldi	r25, 0x1A	; 26
    3598:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 ec       	ldi	r20, 0xC0	; 192
    35a2:	50 e0       	ldi	r21, 0x00	; 0
    35a4:	64 eb       	ldi	r22, 0xB4	; 180
    35a6:	74 e0       	ldi	r23, 0x04	; 4
    35a8:	87 ea       	ldi	r24, 0xA7	; 167
    35aa:	9a e1       	ldi	r25, 0x1A	; 26
    35ac:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <xTaskCreate>
	,  "enqueueMeasures"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );	
}
    35b0:	0f 91       	pop	r16
    35b2:	ff 90       	pop	r15
    35b4:	ef 90       	pop	r14
    35b6:	08 95       	ret

000035b8 <startTasks>:
}


void startTasks()
{
	setupTasks();
    35b8:	e1 df       	rcall	.-62     	; 0x357c <setupTasks>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    35ba:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <vTaskStartScheduler>
    35be:	08 95       	ret

000035c0 <initialiseSystem>:


/*-----------------------------------------------------------*/
void initialiseSystem()
{
printf("Program Started!!\n");
    35c0:	84 ec       	ldi	r24, 0xC4	; 196
    35c2:	94 e0       	ldi	r25, 0x04	; 4
    35c4:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <puts>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    35c8:	81 b1       	in	r24, 0x01	; 1
    35ca:	81 68       	ori	r24, 0x81	; 129
    35cc:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	0e 94 d6 24 	call	0x49ac	; 0x49ac <stdio_initialise>
	
	// Initialize queues
	initializeCO2Queue();
    35d6:	39 dd       	rcall	.-1422   	; 0x304a <initializeCO2Queue>
	initializeTempHumQueues();
    35d8:	6a dd       	rcall	.-1324   	; 0x30ae <initializeTempHumQueues>
    35da:	0e 94 08 01 	call	0x210	; 0x210 <initializeSharedDataQueue>
	initializeSharedDataQueue();

	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    35de:	83 e0       	ldi	r24, 0x03	; 3
    35e0:	d4 d5       	rcall	.+2984   	; 0x418a <mh_z19_initialise>
	hih8120_initialise();
    35e2:	9f d0       	rcall	.+318    	; 0x3722 <hih8120_initialise>
    35e4:	85 e0       	ldi	r24, 0x05	; 5



	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    35e6:	0e 94 dd 25 	call	0x4bba	; 0x4bba <status_leds_initialise>
    35ea:	41 e0       	ldi	r20, 0x01	; 1
	// Initialise the LoRaWAN driver without down-link buffer
	MessageBufferHandle_t downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	8c e2       	ldi	r24, 0x2C	; 44
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	0e 94 75 08 	call	0x10ea	; 0x10ea <xStreamBufferGenericCreate>
	lora_driver_initialise(1, NULL);
    35f8:	60 e0       	ldi	r22, 0x00	; 0
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	1e d2       	rcall	.+1084   	; 0x3a3c <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3600:	83 e0       	ldi	r24, 0x03	; 3
    3602:	7a cf       	rjmp	.-268    	; 0x34f8 <lora_handler_initialise>
    3604:	08 95       	ret

00003606 <main>:
    3606:	dc df       	rcall	.-72     	; 0x35c0 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    3608:	84 ec       	ldi	r24, 0xC4	; 196
    360a:	94 e0       	ldi	r25, 0x04	; 4
    360c:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <puts>
	startTasks();
    3610:	d3 df       	rcall	.-90     	; 0x35b8 <startTasks>
    3612:	ff cf       	rjmp	.-2      	; 0x3612 <main+0xc>

00003614 <__fixsfsi>:
    3614:	04 d0       	rcall	.+8      	; 0x361e <__fixunssfsi>
    3616:	68 94       	set
    3618:	b1 11       	cpse	r27, r1
    361a:	50 c0       	rjmp	.+160    	; 0x36bc <__fp_szero>
    361c:	08 95       	ret

0000361e <__fixunssfsi>:
    361e:	33 d0       	rcall	.+102    	; 0x3686 <__fp_splitA>
    3620:	88 f0       	brcs	.+34     	; 0x3644 <__fixunssfsi+0x26>
    3622:	9f 57       	subi	r25, 0x7F	; 127
    3624:	90 f0       	brcs	.+36     	; 0x364a <__fixunssfsi+0x2c>
    3626:	b9 2f       	mov	r27, r25
    3628:	99 27       	eor	r25, r25
    362a:	b7 51       	subi	r27, 0x17	; 23
    362c:	a0 f0       	brcs	.+40     	; 0x3656 <__fixunssfsi+0x38>
    362e:	d1 f0       	breq	.+52     	; 0x3664 <__fixunssfsi+0x46>
    3630:	66 0f       	add	r22, r22
    3632:	77 1f       	adc	r23, r23
    3634:	88 1f       	adc	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	1a f0       	brmi	.+6      	; 0x3640 <__fixunssfsi+0x22>
    363a:	ba 95       	dec	r27
    363c:	c9 f7       	brne	.-14     	; 0x3630 <__fixunssfsi+0x12>
    363e:	12 c0       	rjmp	.+36     	; 0x3664 <__fixunssfsi+0x46>
    3640:	b1 30       	cpi	r27, 0x01	; 1
    3642:	81 f0       	breq	.+32     	; 0x3664 <__fixunssfsi+0x46>
    3644:	3a d0       	rcall	.+116    	; 0x36ba <__fp_zero>
    3646:	b1 e0       	ldi	r27, 0x01	; 1
    3648:	08 95       	ret
    364a:	37 c0       	rjmp	.+110    	; 0x36ba <__fp_zero>
    364c:	67 2f       	mov	r22, r23
    364e:	78 2f       	mov	r23, r24
    3650:	88 27       	eor	r24, r24
    3652:	b8 5f       	subi	r27, 0xF8	; 248
    3654:	39 f0       	breq	.+14     	; 0x3664 <__fixunssfsi+0x46>
    3656:	b9 3f       	cpi	r27, 0xF9	; 249
    3658:	cc f3       	brlt	.-14     	; 0x364c <__fixunssfsi+0x2e>
    365a:	86 95       	lsr	r24
    365c:	77 95       	ror	r23
    365e:	67 95       	ror	r22
    3660:	b3 95       	inc	r27
    3662:	d9 f7       	brne	.-10     	; 0x365a <__fixunssfsi+0x3c>
    3664:	3e f4       	brtc	.+14     	; 0x3674 <__fixunssfsi+0x56>
    3666:	90 95       	com	r25
    3668:	80 95       	com	r24
    366a:	70 95       	com	r23
    366c:	61 95       	neg	r22
    366e:	7f 4f       	sbci	r23, 0xFF	; 255
    3670:	8f 4f       	sbci	r24, 0xFF	; 255
    3672:	9f 4f       	sbci	r25, 0xFF	; 255
    3674:	08 95       	ret

00003676 <__fp_split3>:
    3676:	57 fd       	sbrc	r21, 7
    3678:	90 58       	subi	r25, 0x80	; 128
    367a:	44 0f       	add	r20, r20
    367c:	55 1f       	adc	r21, r21
    367e:	59 f0       	breq	.+22     	; 0x3696 <__fp_splitA+0x10>
    3680:	5f 3f       	cpi	r21, 0xFF	; 255
    3682:	71 f0       	breq	.+28     	; 0x36a0 <__fp_splitA+0x1a>
    3684:	47 95       	ror	r20

00003686 <__fp_splitA>:
    3686:	88 0f       	add	r24, r24
    3688:	97 fb       	bst	r25, 7
    368a:	99 1f       	adc	r25, r25
    368c:	61 f0       	breq	.+24     	; 0x36a6 <__fp_splitA+0x20>
    368e:	9f 3f       	cpi	r25, 0xFF	; 255
    3690:	79 f0       	breq	.+30     	; 0x36b0 <__fp_splitA+0x2a>
    3692:	87 95       	ror	r24
    3694:	08 95       	ret
    3696:	12 16       	cp	r1, r18
    3698:	13 06       	cpc	r1, r19
    369a:	14 06       	cpc	r1, r20
    369c:	55 1f       	adc	r21, r21
    369e:	f2 cf       	rjmp	.-28     	; 0x3684 <__fp_split3+0xe>
    36a0:	46 95       	lsr	r20
    36a2:	f1 df       	rcall	.-30     	; 0x3686 <__fp_splitA>
    36a4:	08 c0       	rjmp	.+16     	; 0x36b6 <__fp_splitA+0x30>
    36a6:	16 16       	cp	r1, r22
    36a8:	17 06       	cpc	r1, r23
    36aa:	18 06       	cpc	r1, r24
    36ac:	99 1f       	adc	r25, r25
    36ae:	f1 cf       	rjmp	.-30     	; 0x3692 <__fp_splitA+0xc>
    36b0:	86 95       	lsr	r24
    36b2:	71 05       	cpc	r23, r1
    36b4:	61 05       	cpc	r22, r1
    36b6:	08 94       	sec
    36b8:	08 95       	ret

000036ba <__fp_zero>:
    36ba:	e8 94       	clt

000036bc <__fp_szero>:
    36bc:	bb 27       	eor	r27, r27
    36be:	66 27       	eor	r22, r22
    36c0:	77 27       	eor	r23, r23
    36c2:	cb 01       	movw	r24, r22
    36c4:	97 f9       	bld	r25, 7
    36c6:	08 95       	ret

000036c8 <_hihTwiCallback>:
    36c8:	65 30       	cpi	r22, 0x05	; 5
    36ca:	f1 f4       	brne	.+60     	; 0x3708 <_hihTwiCallback+0x40>
    36cc:	fa 01       	movw	r30, r20
    36ce:	80 81       	ld	r24, Z
    36d0:	8f 73       	andi	r24, 0x3F	; 63
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	98 2f       	mov	r25, r24
    36d6:	88 27       	eor	r24, r24
    36d8:	21 81       	ldd	r18, Z+1	; 0x01
    36da:	82 2b       	or	r24, r18
    36dc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    36e0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    36e4:	82 81       	ldd	r24, Z+2	; 0x02
    36e6:	f0 e4       	ldi	r31, 0x40	; 64
    36e8:	8f 9f       	mul	r24, r31
    36ea:	c0 01       	movw	r24, r0
    36ec:	11 24       	eor	r1, r1
    36ee:	fa 01       	movw	r30, r20
    36f0:	23 81       	ldd	r18, Z+3	; 0x03
    36f2:	26 95       	lsr	r18
    36f4:	26 95       	lsr	r18
    36f6:	82 2b       	or	r24, r18
    36f8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    36fc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	80 93 77 12 	sts	0x1277, r24	; 0x801277 <_measuringIsReady>
    3706:	08 95       	ret
    3708:	64 30       	cpi	r22, 0x04	; 4
    370a:	51 f0       	breq	.+20     	; 0x3720 <_hihTwiCallback+0x58>
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	90 e4       	ldi	r25, 0x40	; 64
    3710:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3714:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3718:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    371c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3720:	08 95       	ret

00003722 <hih8120_initialise>:
    3722:	0f 93       	push	r16
    3724:	1f 93       	push	r17
    3726:	04 e6       	ldi	r16, 0x64	; 100
    3728:	1b e1       	ldi	r17, 0x1B	; 27
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	34 e2       	ldi	r19, 0x24	; 36
    372e:	44 ef       	ldi	r20, 0xF4	; 244
    3730:	50 e0       	ldi	r21, 0x00	; 0
    3732:	60 e0       	ldi	r22, 0x00	; 0
    3734:	87 e2       	ldi	r24, 0x27	; 39
    3736:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <twiCreate>
    373a:	90 93 79 12 	sts	0x1279, r25	; 0x801279 <_hih8120Handler+0x1>
    373e:	80 93 78 12 	sts	0x1278, r24	; 0x801278 <_hih8120Handler>
    3742:	21 e0       	ldi	r18, 0x01	; 1
    3744:	89 2b       	or	r24, r25
    3746:	09 f0       	breq	.+2      	; 0x374a <hih8120_initialise+0x28>
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	82 2f       	mov	r24, r18
    374c:	1f 91       	pop	r17
    374e:	0f 91       	pop	r16
    3750:	08 95       	ret

00003752 <hih8120_wakeup>:
    3752:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <_hih8120Handler>
    3756:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <_hih8120Handler+0x1>
    375a:	00 97       	sbiw	r24, 0x00	; 0
    375c:	59 f0       	breq	.+22     	; 0x3774 <hih8120_wakeup+0x22>
    375e:	40 e0       	ldi	r20, 0x00	; 0
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	70 e0       	ldi	r23, 0x00	; 0
    3764:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <twiTransmit>
    3768:	84 30       	cpi	r24, 0x04	; 4
    376a:	31 f4       	brne	.+12     	; 0x3778 <hih8120_wakeup+0x26>
    376c:	10 92 77 12 	sts	0x1277, r1	; 0x801277 <_measuringIsReady>
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	08 95       	ret
    3774:	82 e0       	ldi	r24, 0x02	; 2
    3776:	08 95       	ret
    3778:	83 e0       	ldi	r24, 0x03	; 3
    377a:	08 95       	ret

0000377c <hih8120_measure>:
    377c:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <_hih8120Handler>
    3780:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <_hih8120Handler+0x1>
    3784:	00 97       	sbiw	r24, 0x00	; 0
    3786:	39 f0       	breq	.+14     	; 0x3796 <hih8120_measure+0x1a>
    3788:	64 e0       	ldi	r22, 0x04	; 4
    378a:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <twiReceive>
    378e:	85 30       	cpi	r24, 0x05	; 5
    3790:	21 f0       	breq	.+8      	; 0x379a <hih8120_measure+0x1e>
    3792:	83 e0       	ldi	r24, 0x03	; 3
    3794:	08 95       	ret
    3796:	82 e0       	ldi	r24, 0x02	; 2
    3798:	08 95       	ret
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	08 95       	ret

0000379e <hih8120_getHumidity>:
    379e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    37a2:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	0e 94 3f 29 	call	0x527e	; 0x527e <__floatunsisf>
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	48 ec       	ldi	r20, 0xC8	; 200
    37b4:	52 e4       	ldi	r21, 0x42	; 66
    37b6:	0e 94 a4 29 	call	0x5348	; 0x5348 <__mulsf3>
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	38 ef       	ldi	r19, 0xF8	; 248
    37be:	4f e7       	ldi	r20, 0x7F	; 127
    37c0:	56 e4       	ldi	r21, 0x46	; 70
    37c2:	0c 94 d4 28 	jmp	0x51a8	; 0x51a8 <__divsf3>
    37c6:	08 95       	ret

000037c8 <hih8120_getTemperature>:
    37c8:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    37cc:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    37d0:	80 e0       	ldi	r24, 0x00	; 0
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	0e 94 3f 29 	call	0x527e	; 0x527e <__floatunsisf>
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	45 e2       	ldi	r20, 0x25	; 37
    37de:	53 e4       	ldi	r21, 0x43	; 67
    37e0:	0e 94 a4 29 	call	0x5348	; 0x5348 <__mulsf3>
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	38 ef       	ldi	r19, 0xF8	; 248
    37e8:	4f e7       	ldi	r20, 0x7F	; 127
    37ea:	56 e4       	ldi	r21, 0x46	; 70
    37ec:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <__divsf3>
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e2       	ldi	r20, 0x20	; 32
    37f6:	52 e4       	ldi	r21, 0x42	; 66
    37f8:	0c 94 6d 28 	jmp	0x50da	; 0x50da <__subsf3>
    37fc:	08 95       	ret

000037fe <_serialCallBack>:
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	1f 92       	push	r1
    3808:	1f 92       	push	r1
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	8c 01       	movw	r16, r24
    3810:	19 82       	std	Y+1, r1	; 0x01
    3812:	2d c0       	rjmp	.+90     	; 0x386e <_serialCallBack+0x70>
    3814:	e0 91 de 12 	lds	r30, 0x12DE	; 0x8012de <rec_buf_inp.2878>
    3818:	ec 32       	cpi	r30, 0x2C	; 44
    381a:	50 f4       	brcc	.+20     	; 0x3830 <_serialCallBack+0x32>
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	8e 0f       	add	r24, r30
    3820:	80 93 de 12 	sts	0x12DE, r24	; 0x8012de <rec_buf_inp.2878>
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	e0 5f       	subi	r30, 0xF0	; 240
    3828:	fc 4e       	sbci	r31, 0xEC	; 236
    382a:	8a 81       	ldd	r24, Y+2	; 0x02
    382c:	80 83       	st	Z, r24
    382e:	02 c0       	rjmp	.+4      	; 0x3834 <_serialCallBack+0x36>
    3830:	10 92 de 12 	sts	0x12DE, r1	; 0x8012de <rec_buf_inp.2878>
    3834:	8a 81       	ldd	r24, Y+2	; 0x02
    3836:	8a 30       	cpi	r24, 0x0A	; 10
    3838:	d1 f4       	brne	.+52     	; 0x386e <_serialCallBack+0x70>
    383a:	40 91 de 12 	lds	r20, 0x12DE	; 0x8012de <rec_buf_inp.2878>
    383e:	50 e0       	ldi	r21, 0x00	; 0
    3840:	fa 01       	movw	r30, r20
    3842:	e2 5f       	subi	r30, 0xF2	; 242
    3844:	fc 4e       	sbci	r31, 0xEC	; 236
    3846:	10 82       	st	Z, r1
    3848:	41 50       	subi	r20, 0x01	; 1
    384a:	51 09       	sbc	r21, r1
    384c:	9e 01       	movw	r18, r28
    384e:	2f 5f       	subi	r18, 0xFF	; 255
    3850:	3f 4f       	sbci	r19, 0xFF	; 255
    3852:	60 e1       	ldi	r22, 0x10	; 16
    3854:	73 e1       	ldi	r23, 0x13	; 19
    3856:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <_serialReplyBufferHandle>
    385a:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <_serialReplyBufferHandle+0x1>
    385e:	0e 94 9a 09 	call	0x1334	; 0x1334 <xStreamBufferSendFromISR>
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	81 11       	cpse	r24, r1
    3866:	0e 94 b4 03 	call	0x768	; 0x768 <vPortYield>
    386a:	10 92 de 12 	sts	0x12DE, r1	; 0x8012de <rec_buf_inp.2878>
    386e:	be 01       	movw	r22, r28
    3870:	6e 5f       	subi	r22, 0xFE	; 254
    3872:	7f 4f       	sbci	r23, 0xFF	; 255
    3874:	c8 01       	movw	r24, r16
    3876:	04 d6       	rcall	.+3080   	; 0x4480 <serial_getByte>
    3878:	88 23       	and	r24, r24
    387a:	61 f2       	breq	.-104    	; 0x3814 <_serialCallBack+0x16>
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	1f 91       	pop	r17
    3886:	0f 91       	pop	r16
    3888:	08 95       	ret

0000388a <_uploadMessage>:
    388a:	0f 93       	push	r16
    388c:	1f 93       	push	r17
    388e:	cf 93       	push	r28
    3890:	df 93       	push	r29
    3892:	8c 01       	movw	r16, r24
    3894:	eb 01       	movw	r28, r22
    3896:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <_serialReplyBufferHandle>
    389a:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <_serialReplyBufferHandle+0x1>
    389e:	0e 94 a7 08 	call	0x114e	; 0x114e <xStreamBufferReset>
    38a2:	b8 01       	movw	r22, r16
    38a4:	8a e7       	ldi	r24, 0x7A	; 122
    38a6:	92 e1       	ldi	r25, 0x12	; 18
    38a8:	0e 94 c2 2b 	call	0x5784	; 0x5784 <strcpy>
    38ac:	20 97       	sbiw	r28, 0x00	; 0
    38ae:	79 f0       	breq	.+30     	; 0x38ce <_uploadMessage+0x44>
    38b0:	ea e7       	ldi	r30, 0x7A	; 122
    38b2:	f2 e1       	ldi	r31, 0x12	; 18
    38b4:	01 90       	ld	r0, Z+
    38b6:	00 20       	and	r0, r0
    38b8:	e9 f7       	brne	.-6      	; 0x38b4 <_uploadMessage+0x2a>
    38ba:	31 97       	sbiw	r30, 0x01	; 1
    38bc:	80 e2       	ldi	r24, 0x20	; 32
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	91 83       	std	Z+1, r25	; 0x01
    38c2:	80 83       	st	Z, r24
    38c4:	be 01       	movw	r22, r28
    38c6:	8a e7       	ldi	r24, 0x7A	; 122
    38c8:	92 e1       	ldi	r25, 0x12	; 18
    38ca:	0e 94 b7 2b 	call	0x576e	; 0x576e <strcat>
    38ce:	ea e7       	ldi	r30, 0x7A	; 122
    38d0:	f2 e1       	ldi	r31, 0x12	; 18
    38d2:	df 01       	movw	r26, r30
    38d4:	0d 90       	ld	r0, X+
    38d6:	00 20       	and	r0, r0
    38d8:	e9 f7       	brne	.-6      	; 0x38d4 <_uploadMessage+0x4a>
    38da:	11 97       	sbiw	r26, 0x01	; 1
    38dc:	8d e0       	ldi	r24, 0x0D	; 13
    38de:	9a e0       	ldi	r25, 0x0A	; 10
    38e0:	11 96       	adiw	r26, 0x01	; 1
    38e2:	9c 93       	st	X, r25
    38e4:	8e 93       	st	-X, r24
    38e6:	12 96       	adiw	r26, 0x02	; 2
    38e8:	1c 92       	st	X, r1
    38ea:	01 90       	ld	r0, Z+
    38ec:	00 20       	and	r0, r0
    38ee:	e9 f7       	brne	.-6      	; 0x38ea <_uploadMessage+0x60>
    38f0:	31 97       	sbiw	r30, 0x01	; 1
    38f2:	ea 57       	subi	r30, 0x7A	; 122
    38f4:	f2 41       	sbci	r31, 0x12	; 18
    38f6:	ae 2f       	mov	r26, r30
    38f8:	8a e7       	ldi	r24, 0x7A	; 122
    38fa:	92 e1       	ldi	r25, 0x12	; 18
    38fc:	ac 01       	movw	r20, r24
    38fe:	6a 2f       	mov	r22, r26
    3900:	80 91 e3 12 	lds	r24, 0x12E3	; 0x8012e3 <_rn2483_serial>
    3904:	90 91 e4 12 	lds	r25, 0x12E4	; 0x8012e4 <_rn2483_serial+0x1>
    3908:	66 d5       	rcall	.+2764   	; 0x43d6 <serial_sendBytes>
    390a:	81 11       	cpse	r24, r1
    390c:	11 c0       	rjmp	.+34     	; 0x3930 <_uploadMessage+0xa6>
    390e:	08 e2       	ldi	r16, 0x28	; 40
    3910:	15 e0       	ldi	r17, 0x05	; 5
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	4d e2       	ldi	r20, 0x2D	; 45
    3918:	50 e0       	ldi	r21, 0x00	; 0
    391a:	6a e6       	ldi	r22, 0x6A	; 106
    391c:	73 e1       	ldi	r23, 0x13	; 19
    391e:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <_serialReplyBufferHandle>
    3922:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <_serialReplyBufferHandle+0x1>
    3926:	0e 94 de 09 	call	0x13bc	; 0x13bc <xStreamBufferReceive>
    392a:	8a e6       	ldi	r24, 0x6A	; 106
    392c:	93 e1       	ldi	r25, 0x13	; 19
    392e:	02 c0       	rjmp	.+4      	; 0x3934 <_uploadMessage+0xaa>
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	df 91       	pop	r29
    3936:	cf 91       	pop	r28
    3938:	1f 91       	pop	r17
    393a:	0f 91       	pop	r16
    393c:	08 95       	ret

0000393e <_reply2ReturnCode>:
    393e:	2f 92       	push	r2
    3940:	3f 92       	push	r3
    3942:	4f 92       	push	r4
    3944:	5f 92       	push	r5
    3946:	6f 92       	push	r6
    3948:	7f 92       	push	r7
    394a:	8f 92       	push	r8
    394c:	9f 92       	push	r9
    394e:	af 92       	push	r10
    3950:	bf 92       	push	r11
    3952:	cf 92       	push	r12
    3954:	df 92       	push	r13
    3956:	ef 92       	push	r14
    3958:	ff 92       	push	r15
    395a:	0f 93       	push	r16
    395c:	1f 93       	push	r17
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	5c 01       	movw	r10, r24
    3964:	fc 01       	movw	r30, r24
    3966:	01 90       	ld	r0, Z+
    3968:	00 20       	and	r0, r0
    396a:	e9 f7       	brne	.-6      	; 0x3966 <_reply2ReturnCode+0x28>
    396c:	31 97       	sbiw	r30, 0x01	; 1
    396e:	6f 01       	movw	r12, r30
    3970:	c8 1a       	sub	r12, r24
    3972:	d9 0a       	sbc	r13, r25
    3974:	5c 2c       	mov	r5, r12
    3976:	0f 2e       	mov	r0, r31
    3978:	ff e6       	ldi	r31, 0x6F	; 111
    397a:	8f 2e       	mov	r8, r31
    397c:	f7 e0       	ldi	r31, 0x07	; 7
    397e:	9f 2e       	mov	r9, r31
    3980:	f0 2d       	mov	r31, r0
    3982:	e1 2c       	mov	r14, r1
    3984:	f1 2c       	mov	r15, r1
    3986:	4c 2c       	mov	r4, r12
    3988:	37 01       	movw	r6, r14
    398a:	f4 01       	movw	r30, r8
    398c:	01 81       	ldd	r16, Z+1	; 0x01
    398e:	12 81       	ldd	r17, Z+2	; 0x02
    3990:	e8 01       	movw	r28, r16
    3992:	09 90       	ld	r0, Y+
    3994:	00 20       	and	r0, r0
    3996:	e9 f7       	brne	.-6      	; 0x3992 <_reply2ReturnCode+0x54>
    3998:	21 97       	sbiw	r28, 0x01	; 1
    399a:	c0 1b       	sub	r28, r16
    399c:	d1 0b       	sbc	r29, r17
    399e:	3c 2e       	mov	r3, r28
    39a0:	f9 e0       	ldi	r31, 0x09	; 9
    39a2:	cf 16       	cp	r12, r31
    39a4:	d1 04       	cpc	r13, r1
    39a6:	58 f0       	brcs	.+22     	; 0x39be <_reply2ReturnCode+0x80>
    39a8:	f4 01       	movw	r30, r8
    39aa:	20 80       	ld	r2, Z
    39ac:	fe e0       	ldi	r31, 0x0E	; 14
    39ae:	2f 12       	cpse	r2, r31
    39b0:	06 c0       	rjmp	.+12     	; 0x39be <_reply2ReturnCode+0x80>
    39b2:	b8 01       	movw	r22, r16
    39b4:	c5 01       	movw	r24, r10
    39b6:	0e 94 92 2b 	call	0x5724	; 0x5724 <strcasestr>
    39ba:	89 2b       	or	r24, r25
    39bc:	09 f5       	brne	.+66     	; 0x3a00 <_reply2ReturnCode+0xc2>
    39be:	44 2d       	mov	r20, r4
    39c0:	35 14       	cp	r3, r5
    39c2:	08 f4       	brcc	.+2      	; 0x39c6 <_reply2ReturnCode+0x88>
    39c4:	4c 2f       	mov	r20, r28
    39c6:	50 e0       	ldi	r21, 0x00	; 0
    39c8:	b8 01       	movw	r22, r16
    39ca:	c5 01       	movw	r24, r10
    39cc:	0e 94 c9 2b 	call	0x5792	; 0x5792 <strncasecmp>
    39d0:	89 2b       	or	r24, r25
    39d2:	49 f4       	brne	.+18     	; 0x39e6 <_reply2ReturnCode+0xa8>
    39d4:	f3 01       	movw	r30, r6
    39d6:	ee 0f       	add	r30, r30
    39d8:	ff 1f       	adc	r31, r31
    39da:	e6 0d       	add	r30, r6
    39dc:	f7 1d       	adc	r31, r7
    39de:	e1 59       	subi	r30, 0x91	; 145
    39e0:	f8 4f       	sbci	r31, 0xF8	; 248
    39e2:	20 80       	ld	r2, Z
    39e4:	0d c0       	rjmp	.+26     	; 0x3a00 <_reply2ReturnCode+0xc2>
    39e6:	8f ef       	ldi	r24, 0xFF	; 255
    39e8:	e8 1a       	sub	r14, r24
    39ea:	f8 0a       	sbc	r15, r24
    39ec:	e3 e0       	ldi	r30, 0x03	; 3
    39ee:	8e 0e       	add	r8, r30
    39f0:	91 1c       	adc	r9, r1
    39f2:	f1 e1       	ldi	r31, 0x11	; 17
    39f4:	ef 16       	cp	r14, r31
    39f6:	f1 04       	cpc	r15, r1
    39f8:	39 f6       	brne	.-114    	; 0x3988 <_reply2ReturnCode+0x4a>
    39fa:	68 94       	set
    39fc:	22 24       	eor	r2, r2
    39fe:	24 f8       	bld	r2, 4
    3a00:	82 2d       	mov	r24, r2
    3a02:	df 91       	pop	r29
    3a04:	cf 91       	pop	r28
    3a06:	1f 91       	pop	r17
    3a08:	0f 91       	pop	r16
    3a0a:	ff 90       	pop	r15
    3a0c:	ef 90       	pop	r14
    3a0e:	df 90       	pop	r13
    3a10:	cf 90       	pop	r12
    3a12:	bf 90       	pop	r11
    3a14:	af 90       	pop	r10
    3a16:	9f 90       	pop	r9
    3a18:	8f 90       	pop	r8
    3a1a:	7f 90       	pop	r7
    3a1c:	6f 90       	pop	r6
    3a1e:	5f 90       	pop	r5
    3a20:	4f 90       	pop	r4
    3a22:	3f 90       	pop	r3
    3a24:	2f 90       	pop	r2
    3a26:	08 95       	ret

00003a28 <_uploadMessageRc>:
    3a28:	30 df       	rcall	.-416    	; 0x388a <_uploadMessage>
    3a2a:	89 cf       	rjmp	.-238    	; 0x393e <_reply2ReturnCode>
    3a2c:	08 95       	ret

00003a2e <lora_driver_flushBuffers>:
    3a2e:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <_serialReplyBufferHandle>
    3a32:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <_serialReplyBufferHandle+0x1>
    3a36:	0c 94 a7 08 	jmp	0x114e	; 0x114e <xStreamBufferReset>
    3a3a:	08 95       	ret

00003a3c <lora_driver_initialise>:
    3a3c:	8f 92       	push	r8
    3a3e:	9f 92       	push	r9
    3a40:	af 92       	push	r10
    3a42:	cf 92       	push	r12
    3a44:	ef 92       	push	r14
    3a46:	0f 93       	push	r16
    3a48:	1f 93       	push	r17
    3a4a:	cf 93       	push	r28
    3a4c:	c8 2f       	mov	r28, r24
    3a4e:	8b 01       	movw	r16, r22
    3a50:	41 e0       	ldi	r20, 0x01	; 1
    3a52:	60 e0       	ldi	r22, 0x00	; 0
    3a54:	70 e0       	ldi	r23, 0x00	; 0
    3a56:	88 ec       	ldi	r24, 0xC8	; 200
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 75 08 	call	0x10ea	; 0x10ea <xStreamBufferGenericCreate>
    3a5e:	90 93 e2 12 	sts	0x12E2, r25	; 0x8012e2 <_serialReplyBufferHandle+0x1>
    3a62:	80 93 e1 12 	sts	0x12E1, r24	; 0x8012e1 <_serialReplyBufferHandle>
    3a66:	10 93 e0 12 	sts	0x12E0, r17	; 0x8012e0 <_downlinkMessageBuffer+0x1>
    3a6a:	00 93 df 12 	sts	0x12DF, r16	; 0x8012df <_downlinkMessageBuffer>
    3a6e:	0f 2e       	mov	r0, r31
    3a70:	ff ef       	ldi	r31, 0xFF	; 255
    3a72:	8f 2e       	mov	r8, r31
    3a74:	fb e1       	ldi	r31, 0x1B	; 27
    3a76:	9f 2e       	mov	r9, r31
    3a78:	f0 2d       	mov	r31, r0
    3a7a:	68 94       	set
    3a7c:	aa 24       	eor	r10, r10
    3a7e:	a6 f8       	bld	r10, 6
    3a80:	68 94       	set
    3a82:	cc 24       	eor	r12, r12
    3a84:	c6 f8       	bld	r12, 6
    3a86:	e1 2c       	mov	r14, r1
    3a88:	00 e0       	ldi	r16, 0x00	; 0
    3a8a:	23 e0       	ldi	r18, 0x03	; 3
    3a8c:	40 e0       	ldi	r20, 0x00	; 0
    3a8e:	51 ee       	ldi	r21, 0xE1	; 225
    3a90:	60 e0       	ldi	r22, 0x00	; 0
    3a92:	70 e0       	ldi	r23, 0x00	; 0
    3a94:	8c 2f       	mov	r24, r28
    3a96:	d2 d3       	rcall	.+1956   	; 0x423c <serial_create>
    3a98:	90 93 e4 12 	sts	0x12E4, r25	; 0x8012e4 <_rn2483_serial+0x1>
    3a9c:	80 93 e3 12 	sts	0x12E3, r24	; 0x8012e3 <_rn2483_serial>
    3aa0:	e7 e0       	ldi	r30, 0x07	; 7
    3aa2:	f1 e0       	ldi	r31, 0x01	; 1
    3aa4:	80 81       	ld	r24, Z
    3aa6:	80 61       	ori	r24, 0x10	; 16
    3aa8:	80 83       	st	Z, r24
    3aaa:	cf 91       	pop	r28
    3aac:	1f 91       	pop	r17
    3aae:	0f 91       	pop	r16
    3ab0:	ef 90       	pop	r14
    3ab2:	cf 90       	pop	r12
    3ab4:	af 90       	pop	r10
    3ab6:	9f 90       	pop	r9
    3ab8:	8f 90       	pop	r8
    3aba:	08 95       	ret

00003abc <lora_driver_resetRn2483>:
    3abc:	88 23       	and	r24, r24
    3abe:	31 f0       	breq	.+12     	; 0x3acc <lora_driver_resetRn2483+0x10>
    3ac0:	e8 e0       	ldi	r30, 0x08	; 8
    3ac2:	f1 e0       	ldi	r31, 0x01	; 1
    3ac4:	80 81       	ld	r24, Z
    3ac6:	8f 7e       	andi	r24, 0xEF	; 239
    3ac8:	80 83       	st	Z, r24
    3aca:	08 95       	ret
    3acc:	e8 e0       	ldi	r30, 0x08	; 8
    3ace:	f1 e0       	ldi	r31, 0x01	; 1
    3ad0:	80 81       	ld	r24, Z
    3ad2:	80 61       	ori	r24, 0x10	; 16
    3ad4:	80 83       	st	Z, r24
    3ad6:	08 95       	ret

00003ad8 <lora_driver_rn2483FactoryReset>:
    3ad8:	60 e0       	ldi	r22, 0x00	; 0
    3ada:	70 e0       	ldi	r23, 0x00	; 0
    3adc:	85 ef       	ldi	r24, 0xF5	; 245
    3ade:	94 e0       	ldi	r25, 0x04	; 4
    3ae0:	d4 de       	rcall	.-600    	; 0x388a <_uploadMessage>
    3ae2:	ea e6       	ldi	r30, 0x6A	; 106
    3ae4:	f3 e1       	ldi	r31, 0x13	; 19
    3ae6:	01 90       	ld	r0, Z+
    3ae8:	00 20       	and	r0, r0
    3aea:	e9 f7       	brne	.-6      	; 0x3ae6 <lora_driver_rn2483FactoryReset+0xe>
    3aec:	31 97       	sbiw	r30, 0x01	; 1
    3aee:	ea 56       	subi	r30, 0x6A	; 106
    3af0:	f3 41       	sbci	r31, 0x13	; 19
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	75 97       	sbiw	r30, 0x15	; 21
    3af6:	08 f0       	brcs	.+2      	; 0x3afa <lora_driver_rn2483FactoryReset+0x22>
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	08 95       	ret

00003afc <lora_driver_getRn2483Hweui>:
    3afc:	cf 93       	push	r28
    3afe:	df 93       	push	r29
    3b00:	ec 01       	movw	r28, r24
    3b02:	60 e0       	ldi	r22, 0x00	; 0
    3b04:	70 e0       	ldi	r23, 0x00	; 0
    3b06:	86 e0       	ldi	r24, 0x06	; 6
    3b08:	95 e0       	ldi	r25, 0x05	; 5
    3b0a:	bf de       	rcall	.-642    	; 0x388a <_uploadMessage>
    3b0c:	ea e6       	ldi	r30, 0x6A	; 106
    3b0e:	f3 e1       	ldi	r31, 0x13	; 19
    3b10:	01 90       	ld	r0, Z+
    3b12:	00 20       	and	r0, r0
    3b14:	e9 f7       	brne	.-6      	; 0x3b10 <lora_driver_getRn2483Hweui+0x14>
    3b16:	eb 57       	subi	r30, 0x7B	; 123
    3b18:	f3 41       	sbci	r31, 0x13	; 19
    3b1a:	39 f4       	brne	.+14     	; 0x3b2a <lora_driver_getRn2483Hweui+0x2e>
    3b1c:	6a e6       	ldi	r22, 0x6A	; 106
    3b1e:	73 e1       	ldi	r23, 0x13	; 19
    3b20:	ce 01       	movw	r24, r28
    3b22:	0e 94 c2 2b 	call	0x5784	; 0x5784 <strcpy>
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	02 c0       	rjmp	.+4      	; 0x3b2e <lora_driver_getRn2483Hweui+0x32>
    3b2a:	18 82       	st	Y, r1
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	08 95       	ret

00003b34 <lora_driver_setDeviceIdentifier>:
    3b34:	fc 01       	movw	r30, r24
    3b36:	01 90       	ld	r0, Z+
    3b38:	00 20       	and	r0, r0
    3b3a:	e9 f7       	brne	.-6      	; 0x3b36 <lora_driver_setDeviceIdentifier+0x2>
    3b3c:	9f 01       	movw	r18, r30
    3b3e:	21 51       	subi	r18, 0x11	; 17
    3b40:	31 09       	sbc	r19, r1
    3b42:	28 17       	cp	r18, r24
    3b44:	39 07       	cpc	r19, r25
    3b46:	29 f4       	brne	.+10     	; 0x3b52 <lora_driver_setDeviceIdentifier+0x1e>
    3b48:	bc 01       	movw	r22, r24
    3b4a:	84 e3       	ldi	r24, 0x34	; 52
    3b4c:	95 e0       	ldi	r25, 0x05	; 5
    3b4e:	6c cf       	rjmp	.-296    	; 0x3a28 <_uploadMessageRc>
    3b50:	08 95       	ret
    3b52:	89 e0       	ldi	r24, 0x09	; 9
    3b54:	08 95       	ret

00003b56 <lora_driver_setApplicationIdentifier>:
    3b56:	fc 01       	movw	r30, r24
    3b58:	01 90       	ld	r0, Z+
    3b5a:	00 20       	and	r0, r0
    3b5c:	e9 f7       	brne	.-6      	; 0x3b58 <lora_driver_setApplicationIdentifier+0x2>
    3b5e:	9f 01       	movw	r18, r30
    3b60:	21 51       	subi	r18, 0x11	; 17
    3b62:	31 09       	sbc	r19, r1
    3b64:	28 17       	cp	r18, r24
    3b66:	39 07       	cpc	r19, r25
    3b68:	29 f4       	brne	.+10     	; 0x3b74 <lora_driver_setApplicationIdentifier+0x1e>
    3b6a:	bc 01       	movw	r22, r24
    3b6c:	83 e4       	ldi	r24, 0x43	; 67
    3b6e:	95 e0       	ldi	r25, 0x05	; 5
    3b70:	5b cf       	rjmp	.-330    	; 0x3a28 <_uploadMessageRc>
    3b72:	08 95       	ret
    3b74:	89 e0       	ldi	r24, 0x09	; 9
    3b76:	08 95       	ret

00003b78 <lora_driver_setApplicationKey>:
    3b78:	fc 01       	movw	r30, r24
    3b7a:	01 90       	ld	r0, Z+
    3b7c:	00 20       	and	r0, r0
    3b7e:	e9 f7       	brne	.-6      	; 0x3b7a <lora_driver_setApplicationKey+0x2>
    3b80:	9f 01       	movw	r18, r30
    3b82:	21 52       	subi	r18, 0x21	; 33
    3b84:	31 09       	sbc	r19, r1
    3b86:	28 17       	cp	r18, r24
    3b88:	39 07       	cpc	r19, r25
    3b8a:	29 f4       	brne	.+10     	; 0x3b96 <lora_driver_setApplicationKey+0x1e>
    3b8c:	bc 01       	movw	r22, r24
    3b8e:	82 e5       	ldi	r24, 0x52	; 82
    3b90:	95 e0       	ldi	r25, 0x05	; 5
    3b92:	4a cf       	rjmp	.-364    	; 0x3a28 <_uploadMessageRc>
    3b94:	08 95       	ret
    3b96:	89 e0       	ldi	r24, 0x09	; 9
    3b98:	08 95       	ret

00003b9a <lora_driver_saveMac>:
    3b9a:	60 e0       	ldi	r22, 0x00	; 0
    3b9c:	70 e0       	ldi	r23, 0x00	; 0
    3b9e:	81 e9       	ldi	r24, 0x91	; 145
    3ba0:	95 e0       	ldi	r25, 0x05	; 5
    3ba2:	42 cf       	rjmp	.-380    	; 0x3a28 <_uploadMessageRc>
    3ba4:	08 95       	ret

00003ba6 <lora_driver_join>:
    3ba6:	0f 93       	push	r16
    3ba8:	1f 93       	push	r17
    3baa:	e8 2f       	mov	r30, r24
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	ee 0f       	add	r30, r30
    3bb0:	ff 1f       	adc	r31, r31
    3bb2:	e5 59       	subi	r30, 0x95	; 149
    3bb4:	f8 4f       	sbci	r31, 0xF8	; 248
    3bb6:	60 81       	ld	r22, Z
    3bb8:	71 81       	ldd	r23, Z+1	; 0x01
    3bba:	8a e9       	ldi	r24, 0x9A	; 154
    3bbc:	95 e0       	ldi	r25, 0x05	; 5
    3bbe:	34 df       	rcall	.-408    	; 0x3a28 <_uploadMessageRc>
    3bc0:	81 11       	cpse	r24, r1
    3bc2:	14 c0       	rjmp	.+40     	; 0x3bec <lora_driver_join+0x46>
    3bc4:	08 e2       	ldi	r16, 0x28	; 40
    3bc6:	15 e0       	ldi	r17, 0x05	; 5
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	4d e2       	ldi	r20, 0x2D	; 45
    3bce:	50 e0       	ldi	r21, 0x00	; 0
    3bd0:	6a e6       	ldi	r22, 0x6A	; 106
    3bd2:	73 e1       	ldi	r23, 0x13	; 19
    3bd4:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <_serialReplyBufferHandle>
    3bd8:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <_serialReplyBufferHandle+0x1>
    3bdc:	0e 94 de 09 	call	0x13bc	; 0x13bc <xStreamBufferReceive>
    3be0:	88 23       	and	r24, r24
    3be2:	21 f0       	breq	.+8      	; 0x3bec <lora_driver_join+0x46>
    3be4:	8a e6       	ldi	r24, 0x6A	; 106
    3be6:	93 e1       	ldi	r25, 0x13	; 19
    3be8:	aa de       	rcall	.-684    	; 0x393e <_reply2ReturnCode>
    3bea:	03 c0       	rjmp	.+6      	; 0x3bf2 <lora_driver_join+0x4c>
    3bec:	8a e6       	ldi	r24, 0x6A	; 106
    3bee:	93 e1       	ldi	r25, 0x13	; 19
    3bf0:	a6 de       	rcall	.-692    	; 0x393e <_reply2ReturnCode>
    3bf2:	1f 91       	pop	r17
    3bf4:	0f 91       	pop	r16
    3bf6:	08 95       	ret

00003bf8 <lora_driver_sendUploadMessage>:
    3bf8:	0f 93       	push	r16
    3bfa:	1f 93       	push	r17
    3bfc:	cf 93       	push	r28
    3bfe:	df 93       	push	r29
    3c00:	1f 92       	push	r1
    3c02:	cd b7       	in	r28, 0x3d	; 61
    3c04:	de b7       	in	r29, 0x3e	; 62
    3c06:	db 01       	movw	r26, r22
    3c08:	11 96       	adiw	r26, 0x01	; 1
    3c0a:	9c 91       	ld	r25, X
    3c0c:	11 97       	sbiw	r26, 0x01	; 1
    3c0e:	95 31       	cpi	r25, 0x15	; 21
    3c10:	08 f0       	brcs	.+2      	; 0x3c14 <lora_driver_sendUploadMessage+0x1c>
    3c12:	b4 c0       	rjmp	.+360    	; 0x3d7c <lora_driver_sendUploadMessage+0x184>
    3c14:	99 23       	and	r25, r25
    3c16:	81 f1       	breq	.+96     	; 0x3c78 <lora_driver_sendUploadMessage+0x80>
    3c18:	60 e0       	ldi	r22, 0x00	; 0
    3c1a:	70 e0       	ldi	r23, 0x00	; 0
    3c1c:	27 2f       	mov	r18, r23
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	46 2f       	mov	r20, r22
    3c22:	50 e0       	ldi	r21, 0x00	; 0
    3c24:	fd 01       	movw	r30, r26
    3c26:	e4 0f       	add	r30, r20
    3c28:	f5 1f       	adc	r31, r21
    3c2a:	92 81       	ldd	r25, Z+2	; 0x02
    3c2c:	92 95       	swap	r25
    3c2e:	9f 70       	andi	r25, 0x0F	; 15
    3c30:	9a 30       	cpi	r25, 0x0A	; 10
    3c32:	10 f0       	brcs	.+4      	; 0x3c38 <lora_driver_sendUploadMessage+0x40>
    3c34:	99 5c       	subi	r25, 0xC9	; 201
    3c36:	01 c0       	rjmp	.+2      	; 0x3c3a <lora_driver_sendUploadMessage+0x42>
    3c38:	90 5d       	subi	r25, 0xD0	; 208
    3c3a:	f9 01       	movw	r30, r18
    3c3c:	e5 50       	subi	r30, 0x05	; 5
    3c3e:	fd 4e       	sbci	r31, 0xED	; 237
    3c40:	90 83       	st	Z, r25
    3c42:	2f 5f       	subi	r18, 0xFF	; 255
    3c44:	3f 4f       	sbci	r19, 0xFF	; 255
    3c46:	fd 01       	movw	r30, r26
    3c48:	e4 0f       	add	r30, r20
    3c4a:	f5 1f       	adc	r31, r21
    3c4c:	92 81       	ldd	r25, Z+2	; 0x02
    3c4e:	9f 70       	andi	r25, 0x0F	; 15
    3c50:	49 2f       	mov	r20, r25
    3c52:	50 e0       	ldi	r21, 0x00	; 0
    3c54:	4a 30       	cpi	r20, 0x0A	; 10
    3c56:	51 05       	cpc	r21, r1
    3c58:	14 f0       	brlt	.+4      	; 0x3c5e <lora_driver_sendUploadMessage+0x66>
    3c5a:	99 5c       	subi	r25, 0xC9	; 201
    3c5c:	01 c0       	rjmp	.+2      	; 0x3c60 <lora_driver_sendUploadMessage+0x68>
    3c5e:	90 5d       	subi	r25, 0xD0	; 208
    3c60:	f9 01       	movw	r30, r18
    3c62:	e5 50       	subi	r30, 0x05	; 5
    3c64:	fd 4e       	sbci	r31, 0xED	; 237
    3c66:	90 83       	st	Z, r25
    3c68:	7e 5f       	subi	r23, 0xFE	; 254
    3c6a:	6f 5f       	subi	r22, 0xFF	; 255
    3c6c:	11 96       	adiw	r26, 0x01	; 1
    3c6e:	9c 91       	ld	r25, X
    3c70:	11 97       	sbiw	r26, 0x01	; 1
    3c72:	69 17       	cp	r22, r25
    3c74:	98 f2       	brcs	.-90     	; 0x3c1c <lora_driver_sendUploadMessage+0x24>
    3c76:	01 c0       	rjmp	.+2      	; 0x3c7a <lora_driver_sendUploadMessage+0x82>
    3c78:	70 e0       	ldi	r23, 0x00	; 0
    3c7a:	e7 2f       	mov	r30, r23
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	e5 50       	subi	r30, 0x05	; 5
    3c80:	fd 4e       	sbci	r31, 0xED	; 237
    3c82:	10 82       	st	Z, r1
    3c84:	4c 91       	ld	r20, X
    3c86:	81 11       	cpse	r24, r1
    3c88:	03 c0       	rjmp	.+6      	; 0x3c90 <lora_driver_sendUploadMessage+0x98>
    3c8a:	83 ea       	ldi	r24, 0xA3	; 163
    3c8c:	95 e0       	ldi	r25, 0x05	; 5
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <lora_driver_sendUploadMessage+0x9c>
    3c90:	85 ea       	ldi	r24, 0xA5	; 165
    3c92:	95 e0       	ldi	r25, 0x05	; 5
    3c94:	2b ef       	ldi	r18, 0xFB	; 251
    3c96:	32 e1       	ldi	r19, 0x12	; 18
    3c98:	3f 93       	push	r19
    3c9a:	2f 93       	push	r18
    3c9c:	1f 92       	push	r1
    3c9e:	4f 93       	push	r20
    3ca0:	9f 93       	push	r25
    3ca2:	8f 93       	push	r24
    3ca4:	89 ea       	ldi	r24, 0xA9	; 169
    3ca6:	95 e0       	ldi	r25, 0x05	; 5
    3ca8:	9f 93       	push	r25
    3caa:	8f 93       	push	r24
    3cac:	8d e3       	ldi	r24, 0x3D	; 61
    3cae:	93 e1       	ldi	r25, 0x13	; 19
    3cb0:	9f 93       	push	r25
    3cb2:	8f 93       	push	r24
    3cb4:	0e 94 24 2c 	call	0x5848	; 0x5848 <sprintf>
    3cb8:	60 e0       	ldi	r22, 0x00	; 0
    3cba:	70 e0       	ldi	r23, 0x00	; 0
    3cbc:	8d e3       	ldi	r24, 0x3D	; 61
    3cbe:	93 e1       	ldi	r25, 0x13	; 19
    3cc0:	b3 de       	rcall	.-666    	; 0x3a28 <_uploadMessageRc>
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	de bf       	out	0x3e, r29	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	cd bf       	out	0x3d, r28	; 61
    3ccc:	81 11       	cpse	r24, r1
    3cce:	59 c0       	rjmp	.+178    	; 0x3d82 <lora_driver_sendUploadMessage+0x18a>
    3cd0:	08 e2       	ldi	r16, 0x28	; 40
    3cd2:	15 e0       	ldi	r17, 0x05	; 5
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	4d e2       	ldi	r20, 0x2D	; 45
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	6a e6       	ldi	r22, 0x6A	; 106
    3cde:	73 e1       	ldi	r23, 0x13	; 19
    3ce0:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <_serialReplyBufferHandle>
    3ce4:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <_serialReplyBufferHandle+0x1>
    3ce8:	0e 94 de 09 	call	0x13bc	; 0x13bc <xStreamBufferReceive>
    3cec:	88 23       	and	r24, r24
    3cee:	09 f4       	brne	.+2      	; 0x3cf2 <lora_driver_sendUploadMessage+0xfa>
    3cf0:	47 c0       	rjmp	.+142    	; 0x3d80 <lora_driver_sendUploadMessage+0x188>
    3cf2:	8a e6       	ldi	r24, 0x6A	; 106
    3cf4:	93 e1       	ldi	r25, 0x13	; 19
    3cf6:	23 de       	rcall	.-954    	; 0x393e <_reply2ReturnCode>
    3cf8:	8e 30       	cpi	r24, 0x0E	; 14
    3cfa:	09 f0       	breq	.+2      	; 0x3cfe <lora_driver_sendUploadMessage+0x106>
    3cfc:	42 c0       	rjmp	.+132    	; 0x3d82 <lora_driver_sendUploadMessage+0x18a>
    3cfe:	87 e0       	ldi	r24, 0x07	; 7
    3d00:	89 83       	std	Y+1, r24	; 0x01
    3d02:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <_downlinkMessageBuffer>
    3d06:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <_downlinkMessageBuffer+0x1>
    3d0a:	89 2b       	or	r24, r25
    3d0c:	a9 f1       	breq	.+106    	; 0x3d78 <lora_driver_sendUploadMessage+0x180>
    3d0e:	be 01       	movw	r22, r28
    3d10:	6f 5f       	subi	r22, 0xFF	; 255
    3d12:	7f 4f       	sbci	r23, 0xFF	; 255
    3d14:	8a e6       	ldi	r24, 0x6A	; 106
    3d16:	93 e1       	ldi	r25, 0x13	; 19
    3d18:	68 d1       	rcall	.+720    	; 0x3fea <decode_port_no>
    3d1a:	80 93 e5 12 	sts	0x12E5, r24	; 0x8012e5 <_downlinkPayload>
    3d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	e6 59       	subi	r30, 0x96	; 150
    3d24:	fc 4e       	sbci	r31, 0xEC	; 236
    3d26:	df 01       	movw	r26, r30
    3d28:	0d 90       	ld	r0, X+
    3d2a:	00 20       	and	r0, r0
    3d2c:	e9 f7       	brne	.-6      	; 0x3d28 <lora_driver_sendUploadMessage+0x130>
    3d2e:	11 97       	sbiw	r26, 0x01	; 1
    3d30:	ae 1b       	sub	r26, r30
    3d32:	bf 0b       	sbc	r27, r31
    3d34:	aa 23       	and	r26, r26
    3d36:	91 f0       	breq	.+36     	; 0x3d5c <lora_driver_sendUploadMessage+0x164>
    3d38:	bb 27       	eor	r27, r27
    3d3a:	cd 01       	movw	r24, r26
    3d3c:	01 97       	sbiw	r24, 0x01	; 1
    3d3e:	9c 01       	movw	r18, r24
    3d40:	12 f4       	brpl	.+4      	; 0x3d46 <lora_driver_sendUploadMessage+0x14e>
    3d42:	2f 5f       	subi	r18, 0xFF	; 255
    3d44:	3f 4f       	sbci	r19, 0xFF	; 255
    3d46:	35 95       	asr	r19
    3d48:	27 95       	ror	r18
    3d4a:	20 93 e6 12 	sts	0x12E6, r18	; 0x8012e6 <_downlinkPayload+0x1>
    3d4e:	af 01       	movw	r20, r30
    3d50:	4f 5f       	subi	r20, 0xFF	; 255
    3d52:	5f 4f       	sbci	r21, 0xFF	; 255
    3d54:	64 e1       	ldi	r22, 0x14	; 20
    3d56:	87 ee       	ldi	r24, 0xE7	; 231
    3d58:	92 e1       	ldi	r25, 0x12	; 18
    3d5a:	73 d1       	rcall	.+742    	; 0x4042 <decode_hexadecimal_string_bytes>
    3d5c:	01 e0       	ldi	r16, 0x01	; 1
    3d5e:	10 e0       	ldi	r17, 0x00	; 0
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	46 e1       	ldi	r20, 0x16	; 22
    3d66:	50 e0       	ldi	r21, 0x00	; 0
    3d68:	65 ee       	ldi	r22, 0xE5	; 229
    3d6a:	72 e1       	ldi	r23, 0x12	; 18
    3d6c:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <_downlinkMessageBuffer>
    3d70:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <_downlinkMessageBuffer+0x1>
    3d74:	0e 94 d7 08 	call	0x11ae	; 0x11ae <xStreamBufferSend>
    3d78:	8e e0       	ldi	r24, 0x0E	; 14
    3d7a:	03 c0       	rjmp	.+6      	; 0x3d82 <lora_driver_sendUploadMessage+0x18a>
    3d7c:	84 e1       	ldi	r24, 0x14	; 20
    3d7e:	01 c0       	rjmp	.+2      	; 0x3d82 <lora_driver_sendUploadMessage+0x18a>
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	0f 90       	pop	r0
    3d84:	df 91       	pop	r29
    3d86:	cf 91       	pop	r28
    3d88:	1f 91       	pop	r17
    3d8a:	0f 91       	pop	r16
    3d8c:	08 95       	ret

00003d8e <lora_driver_setAdaptiveDataRate>:
    3d8e:	81 30       	cpi	r24, 0x01	; 1
    3d90:	19 f0       	breq	.+6      	; 0x3d98 <lora_driver_setAdaptiveDataRate+0xa>
    3d92:	69 eb       	ldi	r22, 0xB9	; 185
    3d94:	75 e0       	ldi	r23, 0x05	; 5
    3d96:	02 c0       	rjmp	.+4      	; 0x3d9c <lora_driver_setAdaptiveDataRate+0xe>
    3d98:	62 e9       	ldi	r22, 0x92	; 146
    3d9a:	76 e0       	ldi	r23, 0x06	; 6
    3d9c:	8d eb       	ldi	r24, 0xBD	; 189
    3d9e:	95 e0       	ldi	r25, 0x05	; 5
    3da0:	43 ce       	rjmp	.-890    	; 0x3a28 <_uploadMessageRc>
    3da2:	08 95       	ret

00003da4 <lora_driver_setReceiveDelay>:
    3da4:	9f 93       	push	r25
    3da6:	8f 93       	push	r24
    3da8:	8e ee       	ldi	r24, 0xEE	; 238
    3daa:	95 e0       	ldi	r25, 0x05	; 5
    3dac:	9f 93       	push	r25
    3dae:	8f 93       	push	r24
    3db0:	8d e3       	ldi	r24, 0x3D	; 61
    3db2:	93 e1       	ldi	r25, 0x13	; 19
    3db4:	9f 93       	push	r25
    3db6:	8f 93       	push	r24
    3db8:	0e 94 24 2c 	call	0x5848	; 0x5848 <sprintf>
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	70 e0       	ldi	r23, 0x00	; 0
    3dc0:	8d e3       	ldi	r24, 0x3D	; 61
    3dc2:	93 e1       	ldi	r25, 0x13	; 19
    3dc4:	31 de       	rcall	.-926    	; 0x3a28 <_uploadMessageRc>
    3dc6:	0f 90       	pop	r0
    3dc8:	0f 90       	pop	r0
    3dca:	0f 90       	pop	r0
    3dcc:	0f 90       	pop	r0
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	08 95       	ret

00003dd4 <lora_driver_configureToEu868>:
    3dd4:	2f 92       	push	r2
    3dd6:	3f 92       	push	r3
    3dd8:	4f 92       	push	r4
    3dda:	5f 92       	push	r5
    3ddc:	6f 92       	push	r6
    3dde:	7f 92       	push	r7
    3de0:	8f 92       	push	r8
    3de2:	9f 92       	push	r9
    3de4:	af 92       	push	r10
    3de6:	bf 92       	push	r11
    3de8:	cf 92       	push	r12
    3dea:	df 92       	push	r13
    3dec:	ef 92       	push	r14
    3dee:	ff 92       	push	r15
    3df0:	0f 93       	push	r16
    3df2:	1f 93       	push	r17
    3df4:	cf 93       	push	r28
    3df6:	df 93       	push	r29
    3df8:	cd b7       	in	r28, 0x3d	; 61
    3dfa:	de b7       	in	r29, 0x3e	; 62
    3dfc:	a0 97       	sbiw	r28, 0x20	; 32
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	f8 94       	cli
    3e02:	de bf       	out	0x3e, r29	; 62
    3e04:	0f be       	out	0x3f, r0	; 63
    3e06:	cd bf       	out	0x3d, r28	; 61
    3e08:	6b e1       	ldi	r22, 0x1B	; 27
    3e0a:	76 e0       	ldi	r23, 0x06	; 6
    3e0c:	87 e2       	ldi	r24, 0x27	; 39
    3e0e:	96 e0       	ldi	r25, 0x06	; 6
    3e10:	3c dd       	rcall	.-1416   	; 0x388a <_uploadMessage>
    3e12:	95 dd       	rcall	.-1238   	; 0x393e <_reply2ReturnCode>
    3e14:	81 11       	cpse	r24, r1
    3e16:	a3 c0       	rjmp	.+326    	; 0x3f5e <lora_driver_configureToEu868+0x18a>
    3e18:	80 e2       	ldi	r24, 0x20	; 32
    3e1a:	e2 e2       	ldi	r30, 0x22	; 34
    3e1c:	f2 e0       	ldi	r31, 0x02	; 2
    3e1e:	de 01       	movw	r26, r28
    3e20:	11 96       	adiw	r26, 0x01	; 1
    3e22:	01 90       	ld	r0, Z+
    3e24:	0d 92       	st	X+, r0
    3e26:	8a 95       	dec	r24
    3e28:	e1 f7       	brne	.-8      	; 0x3e22 <lora_driver_configureToEu868+0x4e>
    3e2a:	9e 01       	movw	r18, r28
    3e2c:	2f 5f       	subi	r18, 0xFF	; 255
    3e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e30:	69 01       	movw	r12, r18
    3e32:	e1 2c       	mov	r14, r1
    3e34:	f1 2c       	mov	r15, r1
    3e36:	0f 2e       	mov	r0, r31
    3e38:	f3 e3       	ldi	r31, 0x33	; 51
    3e3a:	af 2e       	mov	r10, r31
    3e3c:	f6 e0       	ldi	r31, 0x06	; 6
    3e3e:	bf 2e       	mov	r11, r31
    3e40:	f0 2d       	mov	r31, r0
    3e42:	0d e3       	ldi	r16, 0x3D	; 61
    3e44:	13 e1       	ldi	r17, 0x13	; 19
    3e46:	0f 2e       	mov	r0, r31
    3e48:	fc e4       	ldi	r31, 0x4C	; 76
    3e4a:	4f 2e       	mov	r4, r31
    3e4c:	f6 e0       	ldi	r31, 0x06	; 6
    3e4e:	5f 2e       	mov	r5, r31
    3e50:	f0 2d       	mov	r31, r0
    3e52:	0f 2e       	mov	r0, r31
    3e54:	f3 e6       	ldi	r31, 0x63	; 99
    3e56:	8f 2e       	mov	r8, r31
    3e58:	f6 e0       	ldi	r31, 0x06	; 6
    3e5a:	9f 2e       	mov	r9, r31
    3e5c:	f0 2d       	mov	r31, r0
    3e5e:	0f 2e       	mov	r0, r31
    3e60:	fd e7       	ldi	r31, 0x7D	; 125
    3e62:	6f 2e       	mov	r6, r31
    3e64:	f6 e0       	ldi	r31, 0x06	; 6
    3e66:	7f 2e       	mov	r7, r31
    3e68:	f0 2d       	mov	r31, r0
    3e6a:	3e 2c       	mov	r3, r14
    3e6c:	2f 2c       	mov	r2, r15
    3e6e:	ff 92       	push	r15
    3e70:	ef 92       	push	r14
    3e72:	bf 92       	push	r11
    3e74:	af 92       	push	r10
    3e76:	1f 93       	push	r17
    3e78:	0f 93       	push	r16
    3e7a:	0e 94 24 2c 	call	0x5848	; 0x5848 <sprintf>
    3e7e:	60 e0       	ldi	r22, 0x00	; 0
    3e80:	70 e0       	ldi	r23, 0x00	; 0
    3e82:	c8 01       	movw	r24, r16
    3e84:	02 dd       	rcall	.-1532   	; 0x388a <_uploadMessage>
    3e86:	5b dd       	rcall	.-1354   	; 0x393e <_reply2ReturnCode>
    3e88:	0f 90       	pop	r0
    3e8a:	0f 90       	pop	r0
    3e8c:	0f 90       	pop	r0
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	0f 90       	pop	r0
    3e94:	81 11       	cpse	r24, r1
    3e96:	63 c0       	rjmp	.+198    	; 0x3f5e <lora_driver_configureToEu868+0x18a>
    3e98:	32 e0       	ldi	r19, 0x02	; 2
    3e9a:	3e 15       	cp	r19, r14
    3e9c:	e8 f4       	brcc	.+58     	; 0x3ed8 <lora_driver_configureToEu868+0x104>
    3e9e:	f6 01       	movw	r30, r12
    3ea0:	83 81       	ldd	r24, Z+3	; 0x03
    3ea2:	8f 93       	push	r24
    3ea4:	82 81       	ldd	r24, Z+2	; 0x02
    3ea6:	8f 93       	push	r24
    3ea8:	81 81       	ldd	r24, Z+1	; 0x01
    3eaa:	8f 93       	push	r24
    3eac:	80 81       	ld	r24, Z
    3eae:	8f 93       	push	r24
    3eb0:	ff 92       	push	r15
    3eb2:	ef 92       	push	r14
    3eb4:	5f 92       	push	r5
    3eb6:	4f 92       	push	r4
    3eb8:	1f 93       	push	r17
    3eba:	0f 93       	push	r16
    3ebc:	0e 94 24 2c 	call	0x5848	; 0x5848 <sprintf>
    3ec0:	60 e0       	ldi	r22, 0x00	; 0
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	c8 01       	movw	r24, r16
    3ec6:	e1 dc       	rcall	.-1598   	; 0x388a <_uploadMessage>
    3ec8:	3a dd       	rcall	.-1420   	; 0x393e <_reply2ReturnCode>
    3eca:	0f b6       	in	r0, 0x3f	; 63
    3ecc:	f8 94       	cli
    3ece:	de bf       	out	0x3e, r29	; 62
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	cd bf       	out	0x3d, r28	; 61
    3ed4:	81 11       	cpse	r24, r1
    3ed6:	43 c0       	rjmp	.+134    	; 0x3f5e <lora_driver_configureToEu868+0x18a>
    3ed8:	2f 92       	push	r2
    3eda:	3f 92       	push	r3
    3edc:	9f 92       	push	r9
    3ede:	8f 92       	push	r8
    3ee0:	1f 93       	push	r17
    3ee2:	0f 93       	push	r16
    3ee4:	0e 94 24 2c 	call	0x5848	; 0x5848 <sprintf>
    3ee8:	60 e0       	ldi	r22, 0x00	; 0
    3eea:	70 e0       	ldi	r23, 0x00	; 0
    3eec:	c8 01       	movw	r24, r16
    3eee:	cd dc       	rcall	.-1638   	; 0x388a <_uploadMessage>
    3ef0:	26 dd       	rcall	.-1460   	; 0x393e <_reply2ReturnCode>
    3ef2:	0f 90       	pop	r0
    3ef4:	0f 90       	pop	r0
    3ef6:	0f 90       	pop	r0
    3ef8:	0f 90       	pop	r0
    3efa:	0f 90       	pop	r0
    3efc:	0f 90       	pop	r0
    3efe:	81 11       	cpse	r24, r1
    3f00:	2e c0       	rjmp	.+92     	; 0x3f5e <lora_driver_configureToEu868+0x18a>
    3f02:	2f 92       	push	r2
    3f04:	3f 92       	push	r3
    3f06:	7f 92       	push	r7
    3f08:	6f 92       	push	r6
    3f0a:	1f 93       	push	r17
    3f0c:	0f 93       	push	r16
    3f0e:	0e 94 24 2c 	call	0x5848	; 0x5848 <sprintf>
    3f12:	60 e0       	ldi	r22, 0x00	; 0
    3f14:	70 e0       	ldi	r23, 0x00	; 0
    3f16:	c8 01       	movw	r24, r16
    3f18:	b8 dc       	rcall	.-1680   	; 0x388a <_uploadMessage>
    3f1a:	11 dd       	rcall	.-1502   	; 0x393e <_reply2ReturnCode>
    3f1c:	0f 90       	pop	r0
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	0f 90       	pop	r0
    3f28:	81 11       	cpse	r24, r1
    3f2a:	19 c0       	rjmp	.+50     	; 0x3f5e <lora_driver_configureToEu868+0x18a>
    3f2c:	3f ef       	ldi	r19, 0xFF	; 255
    3f2e:	e3 1a       	sub	r14, r19
    3f30:	f3 0a       	sbc	r15, r19
    3f32:	84 e0       	ldi	r24, 0x04	; 4
    3f34:	c8 0e       	add	r12, r24
    3f36:	d1 1c       	adc	r13, r1
    3f38:	98 e0       	ldi	r25, 0x08	; 8
    3f3a:	e9 16       	cp	r14, r25
    3f3c:	f1 04       	cpc	r15, r1
    3f3e:	09 f0       	breq	.+2      	; 0x3f42 <lora_driver_configureToEu868+0x16e>
    3f40:	94 cf       	rjmp	.-216    	; 0x3e6a <lora_driver_configureToEu868+0x96>
    3f42:	60 e0       	ldi	r22, 0x00	; 0
    3f44:	70 e0       	ldi	r23, 0x00	; 0
    3f46:	85 e9       	ldi	r24, 0x95	; 149
    3f48:	96 e0       	ldi	r25, 0x06	; 6
    3f4a:	9f dc       	rcall	.-1730   	; 0x388a <_uploadMessage>
    3f4c:	f8 dc       	rcall	.-1552   	; 0x393e <_reply2ReturnCode>
    3f4e:	81 11       	cpse	r24, r1
    3f50:	06 c0       	rjmp	.+12     	; 0x3f5e <lora_driver_configureToEu868+0x18a>
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	70 e0       	ldi	r23, 0x00	; 0
    3f56:	86 ea       	ldi	r24, 0xA6	; 166
    3f58:	96 e0       	ldi	r25, 0x06	; 6
    3f5a:	97 dc       	rcall	.-1746   	; 0x388a <_uploadMessage>
    3f5c:	f0 dc       	rcall	.-1568   	; 0x393e <_reply2ReturnCode>
    3f5e:	a0 96       	adiw	r28, 0x20	; 32
    3f60:	0f b6       	in	r0, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	de bf       	out	0x3e, r29	; 62
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	cd bf       	out	0x3d, r28	; 61
    3f6a:	df 91       	pop	r29
    3f6c:	cf 91       	pop	r28
    3f6e:	1f 91       	pop	r17
    3f70:	0f 91       	pop	r16
    3f72:	ff 90       	pop	r15
    3f74:	ef 90       	pop	r14
    3f76:	df 90       	pop	r13
    3f78:	cf 90       	pop	r12
    3f7a:	bf 90       	pop	r11
    3f7c:	af 90       	pop	r10
    3f7e:	9f 90       	pop	r9
    3f80:	8f 90       	pop	r8
    3f82:	7f 90       	pop	r7
    3f84:	6f 90       	pop	r6
    3f86:	5f 90       	pop	r5
    3f88:	4f 90       	pop	r4
    3f8a:	3f 90       	pop	r3
    3f8c:	2f 90       	pop	r2
    3f8e:	08 95       	ret

00003f90 <lora_driver_setOtaaIdentity>:
    3f90:	ef 92       	push	r14
    3f92:	ff 92       	push	r15
    3f94:	0f 93       	push	r16
    3f96:	1f 93       	push	r17
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	ec 01       	movw	r28, r24
    3f9e:	8b 01       	movw	r16, r22
    3fa0:	7a 01       	movw	r14, r20
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	f4 de       	rcall	.-536    	; 0x3d8e <lora_driver_setAdaptiveDataRate>
    3fa6:	81 11       	cpse	r24, r1
    3fa8:	0d c0       	rjmp	.+26     	; 0x3fc4 <lora_driver_setOtaaIdentity+0x34>
    3faa:	ce 01       	movw	r24, r28
    3fac:	d4 dd       	rcall	.-1112   	; 0x3b56 <lora_driver_setApplicationIdentifier>
    3fae:	81 11       	cpse	r24, r1
    3fb0:	09 c0       	rjmp	.+18     	; 0x3fc4 <lora_driver_setOtaaIdentity+0x34>
    3fb2:	c8 01       	movw	r24, r16
    3fb4:	e1 dd       	rcall	.-1086   	; 0x3b78 <lora_driver_setApplicationKey>
    3fb6:	81 11       	cpse	r24, r1
    3fb8:	05 c0       	rjmp	.+10     	; 0x3fc4 <lora_driver_setOtaaIdentity+0x34>
    3fba:	c7 01       	movw	r24, r14
    3fbc:	bb dd       	rcall	.-1162   	; 0x3b34 <lora_driver_setDeviceIdentifier>
    3fbe:	81 11       	cpse	r24, r1
    3fc0:	01 c0       	rjmp	.+2      	; 0x3fc4 <lora_driver_setOtaaIdentity+0x34>
    3fc2:	eb dd       	rcall	.-1066   	; 0x3b9a <lora_driver_saveMac>
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	ff 90       	pop	r15
    3fce:	ef 90       	pop	r14
    3fd0:	08 95       	ret

00003fd2 <lora_driver_mapReturnCodeToText>:
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	ee 0f       	add	r30, r30
    3fd8:	ff 1f       	adc	r31, r31
    3fda:	8e 0f       	add	r24, r30
    3fdc:	9f 1f       	adc	r25, r31
    3fde:	fc 01       	movw	r30, r24
    3fe0:	e1 59       	subi	r30, 0x91	; 145
    3fe2:	f8 4f       	sbci	r31, 0xF8	; 248
    3fe4:	81 81       	ldd	r24, Z+1	; 0x01
    3fe6:	92 81       	ldd	r25, Z+2	; 0x02
    3fe8:	08 95       	ret

00003fea <decode_port_no>:
    3fea:	dc 01       	movw	r26, r24
    3fec:	00 97       	sbiw	r24, 0x00	; 0
    3fee:	29 f1       	breq	.+74     	; 0x403a <decode_port_no+0x50>
    3ff0:	fb 01       	movw	r30, r22
    3ff2:	20 81       	ld	r18, Z
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	01 90       	ld	r0, Z+
    3ff8:	00 20       	and	r0, r0
    3ffa:	e9 f7       	brne	.-6      	; 0x3ff6 <decode_port_no+0xc>
    3ffc:	31 97       	sbiw	r30, 0x01	; 1
    3ffe:	e8 1b       	sub	r30, r24
    4000:	f9 0b       	sbc	r31, r25
    4002:	82 2f       	mov	r24, r18
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	e8 17       	cp	r30, r24
    4008:	f9 07       	cpc	r31, r25
    400a:	c8 f0       	brcs	.+50     	; 0x403e <decode_port_no+0x54>
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	08 c0       	rjmp	.+16     	; 0x4020 <decode_port_no+0x36>
    4010:	88 0f       	add	r24, r24
    4012:	38 2f       	mov	r19, r24
    4014:	33 0f       	add	r19, r19
    4016:	33 0f       	add	r19, r19
    4018:	83 0f       	add	r24, r19
    401a:	80 53       	subi	r24, 0x30	; 48
    401c:	89 0f       	add	r24, r25
    401e:	2f 5f       	subi	r18, 0xFF	; 255
    4020:	fd 01       	movw	r30, r26
    4022:	e2 0f       	add	r30, r18
    4024:	f1 1d       	adc	r31, r1
    4026:	90 81       	ld	r25, Z
    4028:	30 ed       	ldi	r19, 0xD0	; 208
    402a:	39 0f       	add	r19, r25
    402c:	3a 30       	cpi	r19, 0x0A	; 10
    402e:	10 f4       	brcc	.+4      	; 0x4034 <decode_port_no+0x4a>
    4030:	91 11       	cpse	r25, r1
    4032:	ee cf       	rjmp	.-36     	; 0x4010 <decode_port_no+0x26>
    4034:	fb 01       	movw	r30, r22
    4036:	20 83       	st	Z, r18
    4038:	08 95       	ret
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	08 95       	ret
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	08 95       	ret

00004042 <decode_hexadecimal_string_bytes>:
    4042:	0f 93       	push	r16
    4044:	1f 93       	push	r17
    4046:	cf 93       	push	r28
    4048:	df 93       	push	r29
    404a:	dc 01       	movw	r26, r24
    404c:	ea 01       	movw	r28, r20
    404e:	20 97       	sbiw	r28, 0x00	; 0
    4050:	e1 f1       	breq	.+120    	; 0x40ca <decode_hexadecimal_string_bytes+0x88>
    4052:	fa 01       	movw	r30, r20
    4054:	01 90       	ld	r0, Z+
    4056:	00 20       	and	r0, r0
    4058:	e9 f7       	brne	.-6      	; 0x4054 <decode_hexadecimal_string_bytes+0x12>
    405a:	31 97       	sbiw	r30, 0x01	; 1
    405c:	e4 1b       	sub	r30, r20
    405e:	f5 0b       	sbc	r31, r21
    4060:	32 97       	sbiw	r30, 0x02	; 2
    4062:	10 f5       	brcc	.+68     	; 0x40a8 <decode_hexadecimal_string_bytes+0x66>
    4064:	32 c0       	rjmp	.+100    	; 0x40ca <decode_hexadecimal_string_bytes+0x88>
    4066:	8d 01       	movw	r16, r26
    4068:	04 0f       	add	r16, r20
    406a:	15 1f       	adc	r17, r21
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	ae 01       	movw	r20, r28
    4070:	42 0f       	add	r20, r18
    4072:	53 1f       	adc	r21, r19
    4074:	fa 01       	movw	r30, r20
    4076:	90 81       	ld	r25, Z
    4078:	91 34       	cpi	r25, 0x41	; 65
    407a:	28 f0       	brcs	.+10     	; 0x4086 <decode_hexadecimal_string_bytes+0x44>
    407c:	97 53       	subi	r25, 0x37	; 55
    407e:	59 2f       	mov	r21, r25
    4080:	52 95       	swap	r21
    4082:	50 7f       	andi	r21, 0xF0	; 240
    4084:	03 c0       	rjmp	.+6      	; 0x408c <decode_hexadecimal_string_bytes+0x4a>
    4086:	59 2f       	mov	r21, r25
    4088:	52 95       	swap	r21
    408a:	50 7f       	andi	r21, 0xF0	; 240
    408c:	2c 0f       	add	r18, r28
    408e:	3d 1f       	adc	r19, r29
    4090:	f9 01       	movw	r30, r18
    4092:	91 81       	ldd	r25, Z+1	; 0x01
    4094:	91 34       	cpi	r25, 0x41	; 65
    4096:	10 f0       	brcs	.+4      	; 0x409c <decode_hexadecimal_string_bytes+0x5a>
    4098:	97 53       	subi	r25, 0x37	; 55
    409a:	01 c0       	rjmp	.+2      	; 0x409e <decode_hexadecimal_string_bytes+0x5c>
    409c:	90 53       	subi	r25, 0x30	; 48
    409e:	95 0f       	add	r25, r21
    40a0:	f8 01       	movw	r30, r16
    40a2:	90 83       	st	Z, r25
    40a4:	8f 5f       	subi	r24, 0xFF	; 255
    40a6:	01 c0       	rjmp	.+2      	; 0x40aa <decode_hexadecimal_string_bytes+0x68>
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	28 2f       	mov	r18, r24
    40ac:	22 0f       	add	r18, r18
    40ae:	48 2f       	mov	r20, r24
    40b0:	50 e0       	ldi	r21, 0x00	; 0
    40b2:	fe 01       	movw	r30, r28
    40b4:	01 90       	ld	r0, Z+
    40b6:	00 20       	and	r0, r0
    40b8:	e9 f7       	brne	.-6      	; 0x40b4 <decode_hexadecimal_string_bytes+0x72>
    40ba:	31 97       	sbiw	r30, 0x01	; 1
    40bc:	ec 1b       	sub	r30, r28
    40be:	fd 0b       	sbc	r31, r29
    40c0:	4e 17       	cp	r20, r30
    40c2:	5f 07       	cpc	r21, r31
    40c4:	10 f4       	brcc	.+4      	; 0x40ca <decode_hexadecimal_string_bytes+0x88>
    40c6:	86 13       	cpse	r24, r22
    40c8:	ce cf       	rjmp	.-100    	; 0x4066 <decode_hexadecimal_string_bytes+0x24>
    40ca:	df 91       	pop	r29
    40cc:	cf 91       	pop	r28
    40ce:	1f 91       	pop	r17
    40d0:	0f 91       	pop	r16
    40d2:	08 95       	ret

000040d4 <_serialCallBack>:
    40d4:	80 91 9a 13 	lds	r24, 0x139A	; 0x80139a <crc_sum.1945>
    40d8:	86 0f       	add	r24, r22
    40da:	80 93 9a 13 	sts	0x139A, r24	; 0x80139a <crc_sum.1945>
    40de:	90 91 9d 13 	lds	r25, 0x139D	; 0x80139d <_mh_state>
    40e2:	91 30       	cpi	r25, 0x01	; 1
    40e4:	79 f0       	breq	.+30     	; 0x4104 <_serialCallBack+0x30>
    40e6:	28 f0       	brcs	.+10     	; 0x40f2 <_serialCallBack+0x1e>
    40e8:	92 30       	cpi	r25, 0x02	; 2
    40ea:	a9 f0       	breq	.+42     	; 0x4116 <_serialCallBack+0x42>
    40ec:	93 30       	cpi	r25, 0x03	; 3
    40ee:	19 f1       	breq	.+70     	; 0x4136 <_serialCallBack+0x62>
    40f0:	08 95       	ret
    40f2:	6f 3f       	cpi	r22, 0xFF	; 255
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <_serialCallBack+0x24>
    40f6:	48 c0       	rjmp	.+144    	; 0x4188 <_serialCallBack+0xb4>
    40f8:	10 92 9a 13 	sts	0x139A, r1	; 0x80139a <crc_sum.1945>
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	80 93 9d 13 	sts	0x139D, r24	; 0x80139d <_mh_state>
    4102:	08 95       	ret
    4104:	66 38       	cpi	r22, 0x86	; 134
    4106:	09 f0       	breq	.+2      	; 0x410a <_serialCallBack+0x36>
    4108:	3f c0       	rjmp	.+126    	; 0x4188 <_serialCallBack+0xb4>
    410a:	10 92 99 13 	sts	0x1399, r1	; 0x801399 <inDex.1943>
    410e:	82 e0       	ldi	r24, 0x02	; 2
    4110:	80 93 9d 13 	sts	0x139D, r24	; 0x80139d <_mh_state>
    4114:	08 95       	ret
    4116:	e0 91 99 13 	lds	r30, 0x1399	; 0x801399 <inDex.1943>
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	8e 0f       	add	r24, r30
    411e:	80 93 99 13 	sts	0x1399, r24	; 0x801399 <inDex.1943>
    4122:	f0 e0       	ldi	r31, 0x00	; 0
    4124:	e9 56       	subi	r30, 0x69	; 105
    4126:	fc 4e       	sbci	r31, 0xEC	; 236
    4128:	60 83       	st	Z, r22
    412a:	82 30       	cpi	r24, 0x02	; 2
    412c:	69 f5       	brne	.+90     	; 0x4188 <_serialCallBack+0xb4>
    412e:	83 e0       	ldi	r24, 0x03	; 3
    4130:	80 93 9d 13 	sts	0x139D, r24	; 0x80139d <_mh_state>
    4134:	08 95       	ret
    4136:	90 91 99 13 	lds	r25, 0x1399	; 0x801399 <inDex.1943>
    413a:	21 e0       	ldi	r18, 0x01	; 1
    413c:	29 0f       	add	r18, r25
    413e:	20 93 99 13 	sts	0x1399, r18	; 0x801399 <inDex.1943>
    4142:	96 30       	cpi	r25, 0x06	; 6
    4144:	09 f5       	brne	.+66     	; 0x4188 <_serialCallBack+0xb4>
    4146:	81 11       	cpse	r24, r1
    4148:	0e c0       	rjmp	.+28     	; 0x4166 <_serialCallBack+0x92>
    414a:	e7 e9       	ldi	r30, 0x97	; 151
    414c:	f3 e1       	ldi	r31, 0x13	; 19
    414e:	80 81       	ld	r24, Z
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	98 2f       	mov	r25, r24
    4154:	88 27       	eor	r24, r24
    4156:	21 81       	ldd	r18, Z+1	; 0x01
    4158:	82 0f       	add	r24, r18
    415a:	91 1d       	adc	r25, r1
    415c:	90 93 9f 13 	sts	0x139F, r25	; 0x80139f <_ppm+0x1>
    4160:	80 93 9e 13 	sts	0x139E, r24	; 0x80139e <_ppm>
    4164:	04 c0       	rjmp	.+8      	; 0x416e <_serialCallBack+0x9a>
    4166:	10 92 9f 13 	sts	0x139F, r1	; 0x80139f <_ppm+0x1>
    416a:	10 92 9e 13 	sts	0x139E, r1	; 0x80139e <_ppm>
    416e:	10 92 9d 13 	sts	0x139D, r1	; 0x80139d <_mh_state>
    4172:	e0 91 9b 13 	lds	r30, 0x139B	; 0x80139b <_appCallBack>
    4176:	f0 91 9c 13 	lds	r31, 0x139C	; 0x80139c <_appCallBack+0x1>
    417a:	30 97       	sbiw	r30, 0x00	; 0
    417c:	29 f0       	breq	.+10     	; 0x4188 <_serialCallBack+0xb4>
    417e:	80 91 9e 13 	lds	r24, 0x139E	; 0x80139e <_ppm>
    4182:	90 91 9f 13 	lds	r25, 0x139F	; 0x80139f <_ppm+0x1>
    4186:	19 95       	eicall
    4188:	08 95       	ret

0000418a <mh_z19_initialise>:
    418a:	8f 92       	push	r8
    418c:	9f 92       	push	r9
    418e:	af 92       	push	r10
    4190:	cf 92       	push	r12
    4192:	ef 92       	push	r14
    4194:	0f 93       	push	r16
    4196:	0f 2e       	mov	r0, r31
    4198:	fa e6       	ldi	r31, 0x6A	; 106
    419a:	8f 2e       	mov	r8, r31
    419c:	f0 e2       	ldi	r31, 0x20	; 32
    419e:	9f 2e       	mov	r9, r31
    41a0:	f0 2d       	mov	r31, r0
    41a2:	68 94       	set
    41a4:	aa 24       	eor	r10, r10
    41a6:	a4 f8       	bld	r10, 4
    41a8:	68 94       	set
    41aa:	cc 24       	eor	r12, r12
    41ac:	c4 f8       	bld	r12, 4
    41ae:	e1 2c       	mov	r14, r1
    41b0:	00 e0       	ldi	r16, 0x00	; 0
    41b2:	23 e0       	ldi	r18, 0x03	; 3
    41b4:	40 e8       	ldi	r20, 0x80	; 128
    41b6:	55 e2       	ldi	r21, 0x25	; 37
    41b8:	60 e0       	ldi	r22, 0x00	; 0
    41ba:	70 e0       	ldi	r23, 0x00	; 0
    41bc:	3f d0       	rcall	.+126    	; 0x423c <serial_create>
    41be:	90 93 a1 13 	sts	0x13A1, r25	; 0x8013a1 <_serial+0x1>
    41c2:	80 93 a0 13 	sts	0x13A0, r24	; 0x8013a0 <_serial>
    41c6:	0f 91       	pop	r16
    41c8:	ef 90       	pop	r14
    41ca:	cf 90       	pop	r12
    41cc:	af 90       	pop	r10
    41ce:	9f 90       	pop	r9
    41d0:	8f 90       	pop	r8
    41d2:	08 95       	ret

000041d4 <mh_z19_injectCallBack>:
    41d4:	90 93 9c 13 	sts	0x139C, r25	; 0x80139c <_appCallBack+0x1>
    41d8:	80 93 9b 13 	sts	0x139B, r24	; 0x80139b <_appCallBack>
    41dc:	08 95       	ret

000041de <mh_z19_takeMeassuring>:
    41de:	cf 93       	push	r28
    41e0:	df 93       	push	r29
    41e2:	cd b7       	in	r28, 0x3d	; 61
    41e4:	de b7       	in	r29, 0x3e	; 62
    41e6:	29 97       	sbiw	r28, 0x09	; 9
    41e8:	0f b6       	in	r0, 0x3f	; 63
    41ea:	f8 94       	cli
    41ec:	de bf       	out	0x3e, r29	; 62
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	cd bf       	out	0x3d, r28	; 61
    41f2:	89 e0       	ldi	r24, 0x09	; 9
    41f4:	e2 e4       	ldi	r30, 0x42	; 66
    41f6:	f2 e0       	ldi	r31, 0x02	; 2
    41f8:	9e 01       	movw	r18, r28
    41fa:	2f 5f       	subi	r18, 0xFF	; 255
    41fc:	3f 4f       	sbci	r19, 0xFF	; 255
    41fe:	d9 01       	movw	r26, r18
    4200:	01 90       	ld	r0, Z+
    4202:	0d 92       	st	X+, r0
    4204:	8a 95       	dec	r24
    4206:	e1 f7       	brne	.-8      	; 0x4200 <mh_z19_takeMeassuring+0x22>
    4208:	10 92 9f 13 	sts	0x139F, r1	; 0x80139f <_ppm+0x1>
    420c:	10 92 9e 13 	sts	0x139E, r1	; 0x80139e <_ppm>
    4210:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <_serial>
    4214:	90 91 a1 13 	lds	r25, 0x13A1	; 0x8013a1 <_serial+0x1>
    4218:	00 97       	sbiw	r24, 0x00	; 0
    421a:	31 f0       	breq	.+12     	; 0x4228 <mh_z19_takeMeassuring+0x4a>
    421c:	42 2f       	mov	r20, r18
    421e:	53 2f       	mov	r21, r19
    4220:	69 e0       	ldi	r22, 0x09	; 9
    4222:	d9 d0       	rcall	.+434    	; 0x43d6 <serial_sendBytes>
    4224:	80 e0       	ldi	r24, 0x00	; 0
    4226:	01 c0       	rjmp	.+2      	; 0x422a <mh_z19_takeMeassuring+0x4c>
    4228:	82 e0       	ldi	r24, 0x02	; 2
    422a:	29 96       	adiw	r28, 0x09	; 9
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	f8 94       	cli
    4230:	de bf       	out	0x3e, r29	; 62
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	cd bf       	out	0x3d, r28	; 61
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    423a:	08 95       	ret

0000423c <serial_create>:
    423c:	2f 92       	push	r2
    423e:	3f 92       	push	r3
    4240:	4f 92       	push	r4
    4242:	5f 92       	push	r5
    4244:	6f 92       	push	r6
    4246:	7f 92       	push	r7
    4248:	8f 92       	push	r8
    424a:	9f 92       	push	r9
    424c:	af 92       	push	r10
    424e:	cf 92       	push	r12
    4250:	ef 92       	push	r14
    4252:	ff 92       	push	r15
    4254:	0f 93       	push	r16
    4256:	1f 93       	push	r17
    4258:	cf 93       	push	r28
    425a:	df 93       	push	r29
    425c:	cd b7       	in	r28, 0x3d	; 61
    425e:	de b7       	in	r29, 0x3e	; 62
    4260:	f8 2e       	mov	r15, r24
    4262:	2a 01       	movw	r4, r20
    4264:	3b 01       	movw	r6, r22
    4266:	88 e0       	ldi	r24, 0x08	; 8
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <malloc>
    426e:	8c 01       	movw	r16, r24
    4270:	8f 2d       	mov	r24, r15
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	fc 01       	movw	r30, r24
    4276:	ee 0f       	add	r30, r30
    4278:	ff 1f       	adc	r31, r31
    427a:	ee 55       	subi	r30, 0x5E	; 94
    427c:	fc 4e       	sbci	r31, 0xEC	; 236
    427e:	11 83       	std	Z+1, r17	; 0x01
    4280:	00 83       	st	Z, r16
    4282:	01 15       	cp	r16, r1
    4284:	11 05       	cpc	r17, r1
    4286:	09 f4       	brne	.+2      	; 0x428a <serial_create+0x4e>
    4288:	69 c0       	rjmp	.+210    	; 0x435c <serial_create+0x120>
    428a:	88 0f       	add	r24, r24
    428c:	99 1f       	adc	r25, r25
    428e:	fc 01       	movw	r30, r24
    4290:	e5 5f       	subi	r30, 0xF5	; 245
    4292:	fd 4f       	sbci	r31, 0xFD	; 253
    4294:	80 81       	ld	r24, Z
    4296:	91 81       	ldd	r25, Z+1	; 0x01
    4298:	d8 01       	movw	r26, r16
    429a:	8d 93       	st	X+, r24
    429c:	9c 93       	st	X, r25
    429e:	6c 2d       	mov	r22, r12
    42a0:	70 e0       	ldi	r23, 0x00	; 0
    42a2:	84 e0       	ldi	r24, 0x04	; 4
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	0e 94 43 2a 	call	0x5486	; 0x5486 <calloc>
    42aa:	1c 01       	movw	r2, r24
    42ac:	61 e0       	ldi	r22, 0x01	; 1
    42ae:	70 e0       	ldi	r23, 0x00	; 0
    42b0:	86 e0       	ldi	r24, 0x06	; 6
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	0e 94 43 2a 	call	0x5486	; 0x5486 <calloc>
    42b8:	7c 01       	movw	r14, r24
    42ba:	4c 2d       	mov	r20, r12
    42bc:	b1 01       	movw	r22, r2
    42be:	f1 d6       	rcall	.+3554   	; 0x50a2 <fifo_init>
    42c0:	f8 01       	movw	r30, r16
    42c2:	f5 82       	std	Z+5, r15	; 0x05
    42c4:	e4 82       	std	Z+4, r14	; 0x04
    42c6:	6a 2d       	mov	r22, r10
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	84 e0       	ldi	r24, 0x04	; 4
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	0e 94 43 2a 	call	0x5486	; 0x5486 <calloc>
    42d2:	1c 01       	movw	r2, r24
    42d4:	61 e0       	ldi	r22, 0x01	; 1
    42d6:	70 e0       	ldi	r23, 0x00	; 0
    42d8:	86 e0       	ldi	r24, 0x06	; 6
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	0e 94 43 2a 	call	0x5486	; 0x5486 <calloc>
    42e0:	7c 01       	movw	r14, r24
    42e2:	4a 2d       	mov	r20, r10
    42e4:	b1 01       	movw	r22, r2
    42e6:	dd d6       	rcall	.+3514   	; 0x50a2 <fifo_init>
    42e8:	d8 01       	movw	r26, r16
    42ea:	13 96       	adiw	r26, 0x03	; 3
    42ec:	fc 92       	st	X, r15
    42ee:	ee 92       	st	-X, r14
    42f0:	12 97       	sbiw	r26, 0x02	; 2
    42f2:	17 96       	adiw	r26, 0x07	; 7
    42f4:	9c 92       	st	X, r9
    42f6:	8e 92       	st	-X, r8
    42f8:	16 97       	sbiw	r26, 0x06	; 6
    42fa:	ff b6       	in	r15, 0x3f	; 63
    42fc:	f8 94       	cli
    42fe:	ed 91       	ld	r30, X+
    4300:	fc 91       	ld	r31, X
    4302:	11 97       	sbiw	r26, 0x01	; 1
    4304:	36 97       	sbiw	r30, 0x06	; 6
    4306:	80 81       	ld	r24, Z
    4308:	82 60       	ori	r24, 0x02	; 2
    430a:	80 83       	st	Z, r24
    430c:	8d 90       	ld	r8, X+
    430e:	9c 90       	ld	r9, X
    4310:	c3 01       	movw	r24, r6
    4312:	b2 01       	movw	r22, r4
    4314:	b4 d7       	rcall	.+3944   	; 0x527e <__floatunsisf>
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	40 e0       	ldi	r20, 0x00	; 0
    431c:	51 e4       	ldi	r21, 0x41	; 65
    431e:	0e 94 a4 29 	call	0x5348	; 0x5348 <__mulsf3>
    4322:	9b 01       	movw	r18, r22
    4324:	ac 01       	movw	r20, r24
    4326:	60 e0       	ldi	r22, 0x00	; 0
    4328:	74 e2       	ldi	r23, 0x24	; 36
    432a:	84 e7       	ldi	r24, 0x74	; 116
    432c:	9b e4       	ldi	r25, 0x4B	; 75
    432e:	3c d7       	rcall	.+3704   	; 0x51a8 <__divsf3>
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	40 e8       	ldi	r20, 0x80	; 128
    4336:	5f e3       	ldi	r21, 0x3F	; 63
    4338:	d0 d6       	rcall	.+3488   	; 0x50da <__subsf3>
    433a:	71 d9       	rcall	.-3358   	; 0x361e <__fixunssfsi>
    433c:	f4 01       	movw	r30, r8
    433e:	32 97       	sbiw	r30, 0x02	; 2
    4340:	60 83       	st	Z, r22
    4342:	d8 01       	movw	r26, r16
    4344:	ed 91       	ld	r30, X+
    4346:	fc 91       	ld	r31, X
    4348:	11 97       	sbiw	r26, 0x01	; 1
    434a:	35 97       	sbiw	r30, 0x05	; 5
    434c:	88 e9       	ldi	r24, 0x98	; 152
    434e:	80 83       	st	Z, r24
    4350:	ed 91       	ld	r30, X+
    4352:	fc 91       	ld	r31, X
    4354:	34 97       	sbiw	r30, 0x04	; 4
    4356:	86 e0       	ldi	r24, 0x06	; 6
    4358:	80 83       	st	Z, r24
    435a:	ff be       	out	0x3f, r15	; 63
    435c:	c8 01       	movw	r24, r16
    435e:	df 91       	pop	r29
    4360:	cf 91       	pop	r28
    4362:	1f 91       	pop	r17
    4364:	0f 91       	pop	r16
    4366:	ff 90       	pop	r15
    4368:	ef 90       	pop	r14
    436a:	cf 90       	pop	r12
    436c:	af 90       	pop	r10
    436e:	9f 90       	pop	r9
    4370:	8f 90       	pop	r8
    4372:	7f 90       	pop	r7
    4374:	6f 90       	pop	r6
    4376:	5f 90       	pop	r5
    4378:	4f 90       	pop	r4
    437a:	3f 90       	pop	r3
    437c:	2f 90       	pop	r2
    437e:	08 95       	ret

00004380 <serial_sendByte>:
    4380:	cf 93       	push	r28
    4382:	df 93       	push	r29
    4384:	dc 01       	movw	r26, r24
    4386:	89 2b       	or	r24, r25
    4388:	01 f1       	breq	.+64     	; 0x43ca <serial_sendByte+0x4a>
    438a:	12 96       	adiw	r26, 0x02	; 2
    438c:	ed 91       	ld	r30, X+
    438e:	fc 91       	ld	r31, X
    4390:	13 97       	sbiw	r26, 0x03	; 3
    4392:	93 81       	ldd	r25, Z+3	; 0x03
    4394:	82 81       	ldd	r24, Z+2	; 0x02
    4396:	25 81       	ldd	r18, Z+5	; 0x05
    4398:	98 1b       	sub	r25, r24
    439a:	92 23       	and	r25, r18
    439c:	84 81       	ldd	r24, Z+4	; 0x04
    439e:	98 17       	cp	r25, r24
    43a0:	b1 f0       	breq	.+44     	; 0x43ce <serial_sendByte+0x4e>
    43a2:	83 81       	ldd	r24, Z+3	; 0x03
    43a4:	26 95       	lsr	r18
    43a6:	28 23       	and	r18, r24
    43a8:	c0 81       	ld	r28, Z
    43aa:	d1 81       	ldd	r29, Z+1	; 0x01
    43ac:	c2 0f       	add	r28, r18
    43ae:	d1 1d       	adc	r29, r1
    43b0:	68 83       	st	Y, r22
    43b2:	8f 5f       	subi	r24, 0xFF	; 255
    43b4:	95 81       	ldd	r25, Z+5	; 0x05
    43b6:	89 23       	and	r24, r25
    43b8:	83 83       	std	Z+3, r24	; 0x03
    43ba:	ed 91       	ld	r30, X+
    43bc:	fc 91       	ld	r31, X
    43be:	35 97       	sbiw	r30, 0x05	; 5
    43c0:	80 81       	ld	r24, Z
    43c2:	80 62       	ori	r24, 0x20	; 32
    43c4:	80 83       	st	Z, r24
    43c6:	80 e0       	ldi	r24, 0x00	; 0
    43c8:	03 c0       	rjmp	.+6      	; 0x43d0 <serial_sendByte+0x50>
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	01 c0       	rjmp	.+2      	; 0x43d0 <serial_sendByte+0x50>
    43ce:	82 e0       	ldi	r24, 0x02	; 2
    43d0:	df 91       	pop	r29
    43d2:	cf 91       	pop	r28
    43d4:	08 95       	ret

000043d6 <serial_sendBytes>:
    43d6:	ef 92       	push	r14
    43d8:	ff 92       	push	r15
    43da:	0f 93       	push	r16
    43dc:	1f 93       	push	r17
    43de:	cf 93       	push	r28
    43e0:	df 93       	push	r29
    43e2:	7c 01       	movw	r14, r24
    43e4:	00 97       	sbiw	r24, 0x00	; 0
    43e6:	09 f4       	brne	.+2      	; 0x43ea <serial_sendBytes+0x14>
    43e8:	41 c0       	rjmp	.+130    	; 0x446c <serial_sendBytes+0x96>
    43ea:	dc 01       	movw	r26, r24
    43ec:	12 96       	adiw	r26, 0x02	; 2
    43ee:	ed 91       	ld	r30, X+
    43f0:	fc 91       	ld	r31, X
    43f2:	13 97       	sbiw	r26, 0x03	; 3
    43f4:	93 81       	ldd	r25, Z+3	; 0x03
    43f6:	82 81       	ldd	r24, Z+2	; 0x02
    43f8:	98 1b       	sub	r25, r24
    43fa:	85 81       	ldd	r24, Z+5	; 0x05
    43fc:	98 23       	and	r25, r24
    43fe:	84 81       	ldd	r24, Z+4	; 0x04
    4400:	89 1b       	sub	r24, r25
    4402:	86 17       	cp	r24, r22
    4404:	a8 f1       	brcs	.+106    	; 0x4470 <serial_sendBytes+0x9a>
    4406:	66 23       	and	r22, r22
    4408:	41 f1       	breq	.+80     	; 0x445a <serial_sendBytes+0x84>
    440a:	84 2f       	mov	r24, r20
    440c:	95 2f       	mov	r25, r21
    440e:	dc 01       	movw	r26, r24
    4410:	61 50       	subi	r22, 0x01	; 1
    4412:	46 2f       	mov	r20, r22
    4414:	50 e0       	ldi	r21, 0x00	; 0
    4416:	4f 5f       	subi	r20, 0xFF	; 255
    4418:	5f 4f       	sbci	r21, 0xFF	; 255
    441a:	48 0f       	add	r20, r24
    441c:	59 1f       	adc	r21, r25
    441e:	e7 01       	movw	r28, r14
    4420:	ea 81       	ldd	r30, Y+2	; 0x02
    4422:	fb 81       	ldd	r31, Y+3	; 0x03
    4424:	93 81       	ldd	r25, Z+3	; 0x03
    4426:	82 81       	ldd	r24, Z+2	; 0x02
    4428:	25 81       	ldd	r18, Z+5	; 0x05
    442a:	98 1b       	sub	r25, r24
    442c:	92 23       	and	r25, r18
    442e:	84 81       	ldd	r24, Z+4	; 0x04
    4430:	98 17       	cp	r25, r24
    4432:	79 f0       	breq	.+30     	; 0x4452 <serial_sendBytes+0x7c>
    4434:	8c 91       	ld	r24, X
    4436:	93 81       	ldd	r25, Z+3	; 0x03
    4438:	26 95       	lsr	r18
    443a:	29 23       	and	r18, r25
    443c:	60 81       	ld	r22, Z
    443e:	71 81       	ldd	r23, Z+1	; 0x01
    4440:	8b 01       	movw	r16, r22
    4442:	02 0f       	add	r16, r18
    4444:	11 1d       	adc	r17, r1
    4446:	e8 01       	movw	r28, r16
    4448:	88 83       	st	Y, r24
    444a:	9f 5f       	subi	r25, 0xFF	; 255
    444c:	85 81       	ldd	r24, Z+5	; 0x05
    444e:	98 23       	and	r25, r24
    4450:	93 83       	std	Z+3, r25	; 0x03
    4452:	11 96       	adiw	r26, 0x01	; 1
    4454:	a4 17       	cp	r26, r20
    4456:	b5 07       	cpc	r27, r21
    4458:	11 f7       	brne	.-60     	; 0x441e <serial_sendBytes+0x48>
    445a:	d7 01       	movw	r26, r14
    445c:	ed 91       	ld	r30, X+
    445e:	fc 91       	ld	r31, X
    4460:	35 97       	sbiw	r30, 0x05	; 5
    4462:	80 81       	ld	r24, Z
    4464:	80 62       	ori	r24, 0x20	; 32
    4466:	80 83       	st	Z, r24
    4468:	80 e0       	ldi	r24, 0x00	; 0
    446a:	03 c0       	rjmp	.+6      	; 0x4472 <serial_sendBytes+0x9c>
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	01 c0       	rjmp	.+2      	; 0x4472 <serial_sendBytes+0x9c>
    4470:	82 e0       	ldi	r24, 0x02	; 2
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	1f 91       	pop	r17
    4478:	0f 91       	pop	r16
    447a:	ff 90       	pop	r15
    447c:	ef 90       	pop	r14
    447e:	08 95       	ret

00004480 <serial_getByte>:
    4480:	00 97       	sbiw	r24, 0x00	; 0
    4482:	d1 f0       	breq	.+52     	; 0x44b8 <serial_getByte+0x38>
    4484:	dc 01       	movw	r26, r24
    4486:	14 96       	adiw	r26, 0x04	; 4
    4488:	ed 91       	ld	r30, X+
    448a:	fc 91       	ld	r31, X
    448c:	15 97       	sbiw	r26, 0x05	; 5
    448e:	93 81       	ldd	r25, Z+3	; 0x03
    4490:	82 81       	ldd	r24, Z+2	; 0x02
    4492:	98 17       	cp	r25, r24
    4494:	99 f0       	breq	.+38     	; 0x44bc <serial_getByte+0x3c>
    4496:	92 81       	ldd	r25, Z+2	; 0x02
    4498:	85 81       	ldd	r24, Z+5	; 0x05
    449a:	86 95       	lsr	r24
    449c:	89 23       	and	r24, r25
    449e:	a0 81       	ld	r26, Z
    44a0:	b1 81       	ldd	r27, Z+1	; 0x01
    44a2:	a8 0f       	add	r26, r24
    44a4:	b1 1d       	adc	r27, r1
    44a6:	8c 91       	ld	r24, X
    44a8:	db 01       	movw	r26, r22
    44aa:	8c 93       	st	X, r24
    44ac:	9f 5f       	subi	r25, 0xFF	; 255
    44ae:	85 81       	ldd	r24, Z+5	; 0x05
    44b0:	98 23       	and	r25, r24
    44b2:	92 83       	std	Z+2, r25	; 0x02
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	08 95       	ret
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	08 95       	ret
    44bc:	83 e0       	ldi	r24, 0x03	; 3
    44be:	08 95       	ret

000044c0 <__vector_25>:
    44c0:	1f 92       	push	r1
    44c2:	0f 92       	push	r0
    44c4:	0f b6       	in	r0, 0x3f	; 63
    44c6:	0f 92       	push	r0
    44c8:	11 24       	eor	r1, r1
    44ca:	0b b6       	in	r0, 0x3b	; 59
    44cc:	0f 92       	push	r0
    44ce:	2f 93       	push	r18
    44d0:	3f 93       	push	r19
    44d2:	4f 93       	push	r20
    44d4:	5f 93       	push	r21
    44d6:	6f 93       	push	r22
    44d8:	7f 93       	push	r23
    44da:	8f 93       	push	r24
    44dc:	9f 93       	push	r25
    44de:	af 93       	push	r26
    44e0:	bf 93       	push	r27
    44e2:	cf 93       	push	r28
    44e4:	df 93       	push	r29
    44e6:	ef 93       	push	r30
    44e8:	ff 93       	push	r31
    44ea:	a0 91 a2 13 	lds	r26, 0x13A2	; 0x8013a2 <_ser_handle>
    44ee:	b0 91 a3 13 	lds	r27, 0x13A3	; 0x8013a3 <_ser_handle+0x1>
    44f2:	10 97       	sbiw	r26, 0x00	; 0
    44f4:	11 f1       	breq	.+68     	; 0x453a <__vector_25+0x7a>
    44f6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    44fa:	14 96       	adiw	r26, 0x04	; 4
    44fc:	ed 91       	ld	r30, X+
    44fe:	fc 91       	ld	r31, X
    4500:	15 97       	sbiw	r26, 0x05	; 5
    4502:	93 81       	ldd	r25, Z+3	; 0x03
    4504:	82 81       	ldd	r24, Z+2	; 0x02
    4506:	25 81       	ldd	r18, Z+5	; 0x05
    4508:	98 1b       	sub	r25, r24
    450a:	92 23       	and	r25, r18
    450c:	84 81       	ldd	r24, Z+4	; 0x04
    450e:	98 17       	cp	r25, r24
    4510:	61 f0       	breq	.+24     	; 0x452a <__vector_25+0x6a>
    4512:	83 81       	ldd	r24, Z+3	; 0x03
    4514:	26 95       	lsr	r18
    4516:	28 23       	and	r18, r24
    4518:	c0 81       	ld	r28, Z
    451a:	d1 81       	ldd	r29, Z+1	; 0x01
    451c:	c2 0f       	add	r28, r18
    451e:	d1 1d       	adc	r29, r1
    4520:	68 83       	st	Y, r22
    4522:	8f 5f       	subi	r24, 0xFF	; 255
    4524:	95 81       	ldd	r25, Z+5	; 0x05
    4526:	89 23       	and	r24, r25
    4528:	83 83       	std	Z+3, r24	; 0x03
    452a:	16 96       	adiw	r26, 0x06	; 6
    452c:	ed 91       	ld	r30, X+
    452e:	fc 91       	ld	r31, X
    4530:	17 97       	sbiw	r26, 0x07	; 7
    4532:	30 97       	sbiw	r30, 0x00	; 0
    4534:	11 f0       	breq	.+4      	; 0x453a <__vector_25+0x7a>
    4536:	cd 01       	movw	r24, r26
    4538:	19 95       	eicall
    453a:	ff 91       	pop	r31
    453c:	ef 91       	pop	r30
    453e:	df 91       	pop	r29
    4540:	cf 91       	pop	r28
    4542:	bf 91       	pop	r27
    4544:	af 91       	pop	r26
    4546:	9f 91       	pop	r25
    4548:	8f 91       	pop	r24
    454a:	7f 91       	pop	r23
    454c:	6f 91       	pop	r22
    454e:	5f 91       	pop	r21
    4550:	4f 91       	pop	r20
    4552:	3f 91       	pop	r19
    4554:	2f 91       	pop	r18
    4556:	0f 90       	pop	r0
    4558:	0b be       	out	0x3b, r0	; 59
    455a:	0f 90       	pop	r0
    455c:	0f be       	out	0x3f, r0	; 63
    455e:	0f 90       	pop	r0
    4560:	1f 90       	pop	r1
    4562:	18 95       	reti

00004564 <__vector_26>:
    4564:	1f 92       	push	r1
    4566:	0f 92       	push	r0
    4568:	0f b6       	in	r0, 0x3f	; 63
    456a:	0f 92       	push	r0
    456c:	11 24       	eor	r1, r1
    456e:	0b b6       	in	r0, 0x3b	; 59
    4570:	0f 92       	push	r0
    4572:	2f 93       	push	r18
    4574:	8f 93       	push	r24
    4576:	9f 93       	push	r25
    4578:	af 93       	push	r26
    457a:	bf 93       	push	r27
    457c:	ef 93       	push	r30
    457e:	ff 93       	push	r31
    4580:	e0 91 a2 13 	lds	r30, 0x13A2	; 0x8013a2 <_ser_handle>
    4584:	f0 91 a3 13 	lds	r31, 0x13A3	; 0x8013a3 <_ser_handle+0x1>
    4588:	30 97       	sbiw	r30, 0x00	; 0
    458a:	b9 f0       	breq	.+46     	; 0x45ba <__vector_26+0x56>
    458c:	02 80       	ldd	r0, Z+2	; 0x02
    458e:	f3 81       	ldd	r31, Z+3	; 0x03
    4590:	e0 2d       	mov	r30, r0
    4592:	93 81       	ldd	r25, Z+3	; 0x03
    4594:	82 81       	ldd	r24, Z+2	; 0x02
    4596:	98 17       	cp	r25, r24
    4598:	b1 f0       	breq	.+44     	; 0x45c6 <__vector_26+0x62>
    459a:	92 81       	ldd	r25, Z+2	; 0x02
    459c:	85 81       	ldd	r24, Z+5	; 0x05
    459e:	28 2f       	mov	r18, r24
    45a0:	26 95       	lsr	r18
    45a2:	29 23       	and	r18, r25
    45a4:	a0 81       	ld	r26, Z
    45a6:	b1 81       	ldd	r27, Z+1	; 0x01
    45a8:	a2 0f       	add	r26, r18
    45aa:	b1 1d       	adc	r27, r1
    45ac:	2c 91       	ld	r18, X
    45ae:	9f 5f       	subi	r25, 0xFF	; 255
    45b0:	89 23       	and	r24, r25
    45b2:	82 83       	std	Z+2, r24	; 0x02
    45b4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    45b8:	0b c0       	rjmp	.+22     	; 0x45d0 <__vector_26+0x6c>
    45ba:	e1 ec       	ldi	r30, 0xC1	; 193
    45bc:	f0 e0       	ldi	r31, 0x00	; 0
    45be:	80 81       	ld	r24, Z
    45c0:	8f 7d       	andi	r24, 0xDF	; 223
    45c2:	80 83       	st	Z, r24
    45c4:	05 c0       	rjmp	.+10     	; 0x45d0 <__vector_26+0x6c>
    45c6:	e1 ec       	ldi	r30, 0xC1	; 193
    45c8:	f0 e0       	ldi	r31, 0x00	; 0
    45ca:	80 81       	ld	r24, Z
    45cc:	8f 7d       	andi	r24, 0xDF	; 223
    45ce:	80 83       	st	Z, r24
    45d0:	ff 91       	pop	r31
    45d2:	ef 91       	pop	r30
    45d4:	bf 91       	pop	r27
    45d6:	af 91       	pop	r26
    45d8:	9f 91       	pop	r25
    45da:	8f 91       	pop	r24
    45dc:	2f 91       	pop	r18
    45de:	0f 90       	pop	r0
    45e0:	0b be       	out	0x3b, r0	; 59
    45e2:	0f 90       	pop	r0
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	0f 90       	pop	r0
    45e8:	1f 90       	pop	r1
    45ea:	18 95       	reti

000045ec <__vector_36>:
    45ec:	1f 92       	push	r1
    45ee:	0f 92       	push	r0
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	0f 92       	push	r0
    45f4:	11 24       	eor	r1, r1
    45f6:	0b b6       	in	r0, 0x3b	; 59
    45f8:	0f 92       	push	r0
    45fa:	2f 93       	push	r18
    45fc:	3f 93       	push	r19
    45fe:	4f 93       	push	r20
    4600:	5f 93       	push	r21
    4602:	6f 93       	push	r22
    4604:	7f 93       	push	r23
    4606:	8f 93       	push	r24
    4608:	9f 93       	push	r25
    460a:	af 93       	push	r26
    460c:	bf 93       	push	r27
    460e:	cf 93       	push	r28
    4610:	df 93       	push	r29
    4612:	ef 93       	push	r30
    4614:	ff 93       	push	r31
    4616:	a0 91 a4 13 	lds	r26, 0x13A4	; 0x8013a4 <_ser_handle+0x2>
    461a:	b0 91 a5 13 	lds	r27, 0x13A5	; 0x8013a5 <_ser_handle+0x3>
    461e:	10 97       	sbiw	r26, 0x00	; 0
    4620:	11 f1       	breq	.+68     	; 0x4666 <__vector_36+0x7a>
    4622:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4626:	14 96       	adiw	r26, 0x04	; 4
    4628:	ed 91       	ld	r30, X+
    462a:	fc 91       	ld	r31, X
    462c:	15 97       	sbiw	r26, 0x05	; 5
    462e:	93 81       	ldd	r25, Z+3	; 0x03
    4630:	82 81       	ldd	r24, Z+2	; 0x02
    4632:	25 81       	ldd	r18, Z+5	; 0x05
    4634:	98 1b       	sub	r25, r24
    4636:	92 23       	and	r25, r18
    4638:	84 81       	ldd	r24, Z+4	; 0x04
    463a:	98 17       	cp	r25, r24
    463c:	61 f0       	breq	.+24     	; 0x4656 <__vector_36+0x6a>
    463e:	83 81       	ldd	r24, Z+3	; 0x03
    4640:	26 95       	lsr	r18
    4642:	28 23       	and	r18, r24
    4644:	c0 81       	ld	r28, Z
    4646:	d1 81       	ldd	r29, Z+1	; 0x01
    4648:	c2 0f       	add	r28, r18
    464a:	d1 1d       	adc	r29, r1
    464c:	68 83       	st	Y, r22
    464e:	8f 5f       	subi	r24, 0xFF	; 255
    4650:	95 81       	ldd	r25, Z+5	; 0x05
    4652:	89 23       	and	r24, r25
    4654:	83 83       	std	Z+3, r24	; 0x03
    4656:	16 96       	adiw	r26, 0x06	; 6
    4658:	ed 91       	ld	r30, X+
    465a:	fc 91       	ld	r31, X
    465c:	17 97       	sbiw	r26, 0x07	; 7
    465e:	30 97       	sbiw	r30, 0x00	; 0
    4660:	11 f0       	breq	.+4      	; 0x4666 <__vector_36+0x7a>
    4662:	cd 01       	movw	r24, r26
    4664:	19 95       	eicall
    4666:	ff 91       	pop	r31
    4668:	ef 91       	pop	r30
    466a:	df 91       	pop	r29
    466c:	cf 91       	pop	r28
    466e:	bf 91       	pop	r27
    4670:	af 91       	pop	r26
    4672:	9f 91       	pop	r25
    4674:	8f 91       	pop	r24
    4676:	7f 91       	pop	r23
    4678:	6f 91       	pop	r22
    467a:	5f 91       	pop	r21
    467c:	4f 91       	pop	r20
    467e:	3f 91       	pop	r19
    4680:	2f 91       	pop	r18
    4682:	0f 90       	pop	r0
    4684:	0b be       	out	0x3b, r0	; 59
    4686:	0f 90       	pop	r0
    4688:	0f be       	out	0x3f, r0	; 63
    468a:	0f 90       	pop	r0
    468c:	1f 90       	pop	r1
    468e:	18 95       	reti

00004690 <__vector_37>:
    4690:	1f 92       	push	r1
    4692:	0f 92       	push	r0
    4694:	0f b6       	in	r0, 0x3f	; 63
    4696:	0f 92       	push	r0
    4698:	11 24       	eor	r1, r1
    469a:	0b b6       	in	r0, 0x3b	; 59
    469c:	0f 92       	push	r0
    469e:	2f 93       	push	r18
    46a0:	8f 93       	push	r24
    46a2:	9f 93       	push	r25
    46a4:	af 93       	push	r26
    46a6:	bf 93       	push	r27
    46a8:	ef 93       	push	r30
    46aa:	ff 93       	push	r31
    46ac:	e0 91 a4 13 	lds	r30, 0x13A4	; 0x8013a4 <_ser_handle+0x2>
    46b0:	f0 91 a5 13 	lds	r31, 0x13A5	; 0x8013a5 <_ser_handle+0x3>
    46b4:	30 97       	sbiw	r30, 0x00	; 0
    46b6:	b9 f0       	breq	.+46     	; 0x46e6 <__vector_37+0x56>
    46b8:	02 80       	ldd	r0, Z+2	; 0x02
    46ba:	f3 81       	ldd	r31, Z+3	; 0x03
    46bc:	e0 2d       	mov	r30, r0
    46be:	93 81       	ldd	r25, Z+3	; 0x03
    46c0:	82 81       	ldd	r24, Z+2	; 0x02
    46c2:	98 17       	cp	r25, r24
    46c4:	b1 f0       	breq	.+44     	; 0x46f2 <__vector_37+0x62>
    46c6:	92 81       	ldd	r25, Z+2	; 0x02
    46c8:	85 81       	ldd	r24, Z+5	; 0x05
    46ca:	28 2f       	mov	r18, r24
    46cc:	26 95       	lsr	r18
    46ce:	29 23       	and	r18, r25
    46d0:	a0 81       	ld	r26, Z
    46d2:	b1 81       	ldd	r27, Z+1	; 0x01
    46d4:	a2 0f       	add	r26, r18
    46d6:	b1 1d       	adc	r27, r1
    46d8:	2c 91       	ld	r18, X
    46da:	9f 5f       	subi	r25, 0xFF	; 255
    46dc:	89 23       	and	r24, r25
    46de:	82 83       	std	Z+2, r24	; 0x02
    46e0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    46e4:	0b c0       	rjmp	.+22     	; 0x46fc <__vector_37+0x6c>
    46e6:	e9 ec       	ldi	r30, 0xC9	; 201
    46e8:	f0 e0       	ldi	r31, 0x00	; 0
    46ea:	80 81       	ld	r24, Z
    46ec:	8f 7d       	andi	r24, 0xDF	; 223
    46ee:	80 83       	st	Z, r24
    46f0:	05 c0       	rjmp	.+10     	; 0x46fc <__vector_37+0x6c>
    46f2:	e9 ec       	ldi	r30, 0xC9	; 201
    46f4:	f0 e0       	ldi	r31, 0x00	; 0
    46f6:	80 81       	ld	r24, Z
    46f8:	8f 7d       	andi	r24, 0xDF	; 223
    46fa:	80 83       	st	Z, r24
    46fc:	ff 91       	pop	r31
    46fe:	ef 91       	pop	r30
    4700:	bf 91       	pop	r27
    4702:	af 91       	pop	r26
    4704:	9f 91       	pop	r25
    4706:	8f 91       	pop	r24
    4708:	2f 91       	pop	r18
    470a:	0f 90       	pop	r0
    470c:	0b be       	out	0x3b, r0	; 59
    470e:	0f 90       	pop	r0
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	0f 90       	pop	r0
    4714:	1f 90       	pop	r1
    4716:	18 95       	reti

00004718 <__vector_51>:
    4718:	1f 92       	push	r1
    471a:	0f 92       	push	r0
    471c:	0f b6       	in	r0, 0x3f	; 63
    471e:	0f 92       	push	r0
    4720:	11 24       	eor	r1, r1
    4722:	0b b6       	in	r0, 0x3b	; 59
    4724:	0f 92       	push	r0
    4726:	2f 93       	push	r18
    4728:	3f 93       	push	r19
    472a:	4f 93       	push	r20
    472c:	5f 93       	push	r21
    472e:	6f 93       	push	r22
    4730:	7f 93       	push	r23
    4732:	8f 93       	push	r24
    4734:	9f 93       	push	r25
    4736:	af 93       	push	r26
    4738:	bf 93       	push	r27
    473a:	cf 93       	push	r28
    473c:	df 93       	push	r29
    473e:	ef 93       	push	r30
    4740:	ff 93       	push	r31
    4742:	a0 91 a6 13 	lds	r26, 0x13A6	; 0x8013a6 <_ser_handle+0x4>
    4746:	b0 91 a7 13 	lds	r27, 0x13A7	; 0x8013a7 <_ser_handle+0x5>
    474a:	10 97       	sbiw	r26, 0x00	; 0
    474c:	11 f1       	breq	.+68     	; 0x4792 <__vector_51+0x7a>
    474e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4752:	14 96       	adiw	r26, 0x04	; 4
    4754:	ed 91       	ld	r30, X+
    4756:	fc 91       	ld	r31, X
    4758:	15 97       	sbiw	r26, 0x05	; 5
    475a:	93 81       	ldd	r25, Z+3	; 0x03
    475c:	82 81       	ldd	r24, Z+2	; 0x02
    475e:	25 81       	ldd	r18, Z+5	; 0x05
    4760:	98 1b       	sub	r25, r24
    4762:	92 23       	and	r25, r18
    4764:	84 81       	ldd	r24, Z+4	; 0x04
    4766:	98 17       	cp	r25, r24
    4768:	61 f0       	breq	.+24     	; 0x4782 <__vector_51+0x6a>
    476a:	83 81       	ldd	r24, Z+3	; 0x03
    476c:	26 95       	lsr	r18
    476e:	28 23       	and	r18, r24
    4770:	c0 81       	ld	r28, Z
    4772:	d1 81       	ldd	r29, Z+1	; 0x01
    4774:	c2 0f       	add	r28, r18
    4776:	d1 1d       	adc	r29, r1
    4778:	68 83       	st	Y, r22
    477a:	8f 5f       	subi	r24, 0xFF	; 255
    477c:	95 81       	ldd	r25, Z+5	; 0x05
    477e:	89 23       	and	r24, r25
    4780:	83 83       	std	Z+3, r24	; 0x03
    4782:	16 96       	adiw	r26, 0x06	; 6
    4784:	ed 91       	ld	r30, X+
    4786:	fc 91       	ld	r31, X
    4788:	17 97       	sbiw	r26, 0x07	; 7
    478a:	30 97       	sbiw	r30, 0x00	; 0
    478c:	11 f0       	breq	.+4      	; 0x4792 <__vector_51+0x7a>
    478e:	cd 01       	movw	r24, r26
    4790:	19 95       	eicall
    4792:	ff 91       	pop	r31
    4794:	ef 91       	pop	r30
    4796:	df 91       	pop	r29
    4798:	cf 91       	pop	r28
    479a:	bf 91       	pop	r27
    479c:	af 91       	pop	r26
    479e:	9f 91       	pop	r25
    47a0:	8f 91       	pop	r24
    47a2:	7f 91       	pop	r23
    47a4:	6f 91       	pop	r22
    47a6:	5f 91       	pop	r21
    47a8:	4f 91       	pop	r20
    47aa:	3f 91       	pop	r19
    47ac:	2f 91       	pop	r18
    47ae:	0f 90       	pop	r0
    47b0:	0b be       	out	0x3b, r0	; 59
    47b2:	0f 90       	pop	r0
    47b4:	0f be       	out	0x3f, r0	; 63
    47b6:	0f 90       	pop	r0
    47b8:	1f 90       	pop	r1
    47ba:	18 95       	reti

000047bc <__vector_52>:
    47bc:	1f 92       	push	r1
    47be:	0f 92       	push	r0
    47c0:	0f b6       	in	r0, 0x3f	; 63
    47c2:	0f 92       	push	r0
    47c4:	11 24       	eor	r1, r1
    47c6:	0b b6       	in	r0, 0x3b	; 59
    47c8:	0f 92       	push	r0
    47ca:	2f 93       	push	r18
    47cc:	8f 93       	push	r24
    47ce:	9f 93       	push	r25
    47d0:	af 93       	push	r26
    47d2:	bf 93       	push	r27
    47d4:	ef 93       	push	r30
    47d6:	ff 93       	push	r31
    47d8:	e0 91 a6 13 	lds	r30, 0x13A6	; 0x8013a6 <_ser_handle+0x4>
    47dc:	f0 91 a7 13 	lds	r31, 0x13A7	; 0x8013a7 <_ser_handle+0x5>
    47e0:	30 97       	sbiw	r30, 0x00	; 0
    47e2:	b9 f0       	breq	.+46     	; 0x4812 <__vector_52+0x56>
    47e4:	02 80       	ldd	r0, Z+2	; 0x02
    47e6:	f3 81       	ldd	r31, Z+3	; 0x03
    47e8:	e0 2d       	mov	r30, r0
    47ea:	93 81       	ldd	r25, Z+3	; 0x03
    47ec:	82 81       	ldd	r24, Z+2	; 0x02
    47ee:	98 17       	cp	r25, r24
    47f0:	b1 f0       	breq	.+44     	; 0x481e <__vector_52+0x62>
    47f2:	92 81       	ldd	r25, Z+2	; 0x02
    47f4:	85 81       	ldd	r24, Z+5	; 0x05
    47f6:	28 2f       	mov	r18, r24
    47f8:	26 95       	lsr	r18
    47fa:	29 23       	and	r18, r25
    47fc:	a0 81       	ld	r26, Z
    47fe:	b1 81       	ldd	r27, Z+1	; 0x01
    4800:	a2 0f       	add	r26, r18
    4802:	b1 1d       	adc	r27, r1
    4804:	2c 91       	ld	r18, X
    4806:	9f 5f       	subi	r25, 0xFF	; 255
    4808:	89 23       	and	r24, r25
    480a:	82 83       	std	Z+2, r24	; 0x02
    480c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4810:	0b c0       	rjmp	.+22     	; 0x4828 <__vector_52+0x6c>
    4812:	e1 ed       	ldi	r30, 0xD1	; 209
    4814:	f0 e0       	ldi	r31, 0x00	; 0
    4816:	80 81       	ld	r24, Z
    4818:	8f 7d       	andi	r24, 0xDF	; 223
    481a:	80 83       	st	Z, r24
    481c:	05 c0       	rjmp	.+10     	; 0x4828 <__vector_52+0x6c>
    481e:	e1 ed       	ldi	r30, 0xD1	; 209
    4820:	f0 e0       	ldi	r31, 0x00	; 0
    4822:	80 81       	ld	r24, Z
    4824:	8f 7d       	andi	r24, 0xDF	; 223
    4826:	80 83       	st	Z, r24
    4828:	ff 91       	pop	r31
    482a:	ef 91       	pop	r30
    482c:	bf 91       	pop	r27
    482e:	af 91       	pop	r26
    4830:	9f 91       	pop	r25
    4832:	8f 91       	pop	r24
    4834:	2f 91       	pop	r18
    4836:	0f 90       	pop	r0
    4838:	0b be       	out	0x3b, r0	; 59
    483a:	0f 90       	pop	r0
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	0f 90       	pop	r0
    4840:	1f 90       	pop	r1
    4842:	18 95       	reti

00004844 <__vector_54>:
    4844:	1f 92       	push	r1
    4846:	0f 92       	push	r0
    4848:	0f b6       	in	r0, 0x3f	; 63
    484a:	0f 92       	push	r0
    484c:	11 24       	eor	r1, r1
    484e:	0b b6       	in	r0, 0x3b	; 59
    4850:	0f 92       	push	r0
    4852:	2f 93       	push	r18
    4854:	3f 93       	push	r19
    4856:	4f 93       	push	r20
    4858:	5f 93       	push	r21
    485a:	6f 93       	push	r22
    485c:	7f 93       	push	r23
    485e:	8f 93       	push	r24
    4860:	9f 93       	push	r25
    4862:	af 93       	push	r26
    4864:	bf 93       	push	r27
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    486a:	ef 93       	push	r30
    486c:	ff 93       	push	r31
    486e:	a0 91 a8 13 	lds	r26, 0x13A8	; 0x8013a8 <_ser_handle+0x6>
    4872:	b0 91 a9 13 	lds	r27, 0x13A9	; 0x8013a9 <_ser_handle+0x7>
    4876:	10 97       	sbiw	r26, 0x00	; 0
    4878:	11 f1       	breq	.+68     	; 0x48be <__vector_54+0x7a>
    487a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    487e:	14 96       	adiw	r26, 0x04	; 4
    4880:	ed 91       	ld	r30, X+
    4882:	fc 91       	ld	r31, X
    4884:	15 97       	sbiw	r26, 0x05	; 5
    4886:	93 81       	ldd	r25, Z+3	; 0x03
    4888:	82 81       	ldd	r24, Z+2	; 0x02
    488a:	25 81       	ldd	r18, Z+5	; 0x05
    488c:	98 1b       	sub	r25, r24
    488e:	92 23       	and	r25, r18
    4890:	84 81       	ldd	r24, Z+4	; 0x04
    4892:	98 17       	cp	r25, r24
    4894:	61 f0       	breq	.+24     	; 0x48ae <__vector_54+0x6a>
    4896:	83 81       	ldd	r24, Z+3	; 0x03
    4898:	26 95       	lsr	r18
    489a:	28 23       	and	r18, r24
    489c:	c0 81       	ld	r28, Z
    489e:	d1 81       	ldd	r29, Z+1	; 0x01
    48a0:	c2 0f       	add	r28, r18
    48a2:	d1 1d       	adc	r29, r1
    48a4:	68 83       	st	Y, r22
    48a6:	8f 5f       	subi	r24, 0xFF	; 255
    48a8:	95 81       	ldd	r25, Z+5	; 0x05
    48aa:	89 23       	and	r24, r25
    48ac:	83 83       	std	Z+3, r24	; 0x03
    48ae:	16 96       	adiw	r26, 0x06	; 6
    48b0:	ed 91       	ld	r30, X+
    48b2:	fc 91       	ld	r31, X
    48b4:	17 97       	sbiw	r26, 0x07	; 7
    48b6:	30 97       	sbiw	r30, 0x00	; 0
    48b8:	11 f0       	breq	.+4      	; 0x48be <__vector_54+0x7a>
    48ba:	cd 01       	movw	r24, r26
    48bc:	19 95       	eicall
    48be:	ff 91       	pop	r31
    48c0:	ef 91       	pop	r30
    48c2:	df 91       	pop	r29
    48c4:	cf 91       	pop	r28
    48c6:	bf 91       	pop	r27
    48c8:	af 91       	pop	r26
    48ca:	9f 91       	pop	r25
    48cc:	8f 91       	pop	r24
    48ce:	7f 91       	pop	r23
    48d0:	6f 91       	pop	r22
    48d2:	5f 91       	pop	r21
    48d4:	4f 91       	pop	r20
    48d6:	3f 91       	pop	r19
    48d8:	2f 91       	pop	r18
    48da:	0f 90       	pop	r0
    48dc:	0b be       	out	0x3b, r0	; 59
    48de:	0f 90       	pop	r0
    48e0:	0f be       	out	0x3f, r0	; 63
    48e2:	0f 90       	pop	r0
    48e4:	1f 90       	pop	r1
    48e6:	18 95       	reti

000048e8 <__vector_55>:
    48e8:	1f 92       	push	r1
    48ea:	0f 92       	push	r0
    48ec:	0f b6       	in	r0, 0x3f	; 63
    48ee:	0f 92       	push	r0
    48f0:	11 24       	eor	r1, r1
    48f2:	0b b6       	in	r0, 0x3b	; 59
    48f4:	0f 92       	push	r0
    48f6:	2f 93       	push	r18
    48f8:	8f 93       	push	r24
    48fa:	9f 93       	push	r25
    48fc:	af 93       	push	r26
    48fe:	bf 93       	push	r27
    4900:	ef 93       	push	r30
    4902:	ff 93       	push	r31
    4904:	e0 91 a8 13 	lds	r30, 0x13A8	; 0x8013a8 <_ser_handle+0x6>
    4908:	f0 91 a9 13 	lds	r31, 0x13A9	; 0x8013a9 <_ser_handle+0x7>
    490c:	30 97       	sbiw	r30, 0x00	; 0
    490e:	b9 f0       	breq	.+46     	; 0x493e <__vector_55+0x56>
    4910:	02 80       	ldd	r0, Z+2	; 0x02
    4912:	f3 81       	ldd	r31, Z+3	; 0x03
    4914:	e0 2d       	mov	r30, r0
    4916:	93 81       	ldd	r25, Z+3	; 0x03
    4918:	82 81       	ldd	r24, Z+2	; 0x02
    491a:	98 17       	cp	r25, r24
    491c:	b1 f0       	breq	.+44     	; 0x494a <__vector_55+0x62>
    491e:	92 81       	ldd	r25, Z+2	; 0x02
    4920:	85 81       	ldd	r24, Z+5	; 0x05
    4922:	28 2f       	mov	r18, r24
    4924:	26 95       	lsr	r18
    4926:	29 23       	and	r18, r25
    4928:	a0 81       	ld	r26, Z
    492a:	b1 81       	ldd	r27, Z+1	; 0x01
    492c:	a2 0f       	add	r26, r18
    492e:	b1 1d       	adc	r27, r1
    4930:	2c 91       	ld	r18, X
    4932:	9f 5f       	subi	r25, 0xFF	; 255
    4934:	89 23       	and	r24, r25
    4936:	82 83       	std	Z+2, r24	; 0x02
    4938:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    493c:	0b c0       	rjmp	.+22     	; 0x4954 <__vector_55+0x6c>
    493e:	e1 e3       	ldi	r30, 0x31	; 49
    4940:	f1 e0       	ldi	r31, 0x01	; 1
    4942:	80 81       	ld	r24, Z
    4944:	8f 7d       	andi	r24, 0xDF	; 223
    4946:	80 83       	st	Z, r24
    4948:	05 c0       	rjmp	.+10     	; 0x4954 <__vector_55+0x6c>
    494a:	e1 e3       	ldi	r30, 0x31	; 49
    494c:	f1 e0       	ldi	r31, 0x01	; 1
    494e:	80 81       	ld	r24, Z
    4950:	8f 7d       	andi	r24, 0xDF	; 223
    4952:	80 83       	st	Z, r24
    4954:	ff 91       	pop	r31
    4956:	ef 91       	pop	r30
    4958:	bf 91       	pop	r27
    495a:	af 91       	pop	r26
    495c:	9f 91       	pop	r25
    495e:	8f 91       	pop	r24
    4960:	2f 91       	pop	r18
    4962:	0f 90       	pop	r0
    4964:	0b be       	out	0x3b, r0	; 59
    4966:	0f 90       	pop	r0
    4968:	0f be       	out	0x3f, r0	; 63
    496a:	0f 90       	pop	r0
    496c:	1f 90       	pop	r1
    496e:	18 95       	reti

00004970 <usart_getchar>:
    4970:	cf 93       	push	r28
    4972:	df 93       	push	r29
    4974:	1f 92       	push	r1
    4976:	cd b7       	in	r28, 0x3d	; 61
    4978:	de b7       	in	r29, 0x3e	; 62
    497a:	be 01       	movw	r22, r28
    497c:	6f 5f       	subi	r22, 0xFF	; 255
    497e:	7f 4f       	sbci	r23, 0xFF	; 255
    4980:	80 91 aa 13 	lds	r24, 0x13AA	; 0x8013aa <_com_serial_instance>
    4984:	90 91 ab 13 	lds	r25, 0x13AB	; 0x8013ab <_com_serial_instance+0x1>
    4988:	7b dd       	rcall	.-1290   	; 0x4480 <serial_getByte>
    498a:	81 11       	cpse	r24, r1
    498c:	f6 cf       	rjmp	.-20     	; 0x497a <usart_getchar+0xa>
    498e:	89 81       	ldd	r24, Y+1	; 0x01
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0f 90       	pop	r0
    4994:	df 91       	pop	r29
    4996:	cf 91       	pop	r28
    4998:	08 95       	ret

0000499a <usart_putchar>:
    499a:	68 2f       	mov	r22, r24
    499c:	80 91 aa 13 	lds	r24, 0x13AA	; 0x8013aa <_com_serial_instance>
    49a0:	90 91 ab 13 	lds	r25, 0x13AB	; 0x8013ab <_com_serial_instance+0x1>
    49a4:	ed dc       	rcall	.-1574   	; 0x4380 <serial_sendByte>
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	08 95       	ret

000049ac <stdio_initialise>:
    49ac:	8f 92       	push	r8
    49ae:	9f 92       	push	r9
    49b0:	af 92       	push	r10
    49b2:	cf 92       	push	r12
    49b4:	ef 92       	push	r14
    49b6:	0f 93       	push	r16
    49b8:	81 2c       	mov	r8, r1
    49ba:	91 2c       	mov	r9, r1
    49bc:	68 94       	set
    49be:	aa 24       	eor	r10, r10
    49c0:	a7 f8       	bld	r10, 7
    49c2:	68 94       	set
    49c4:	cc 24       	eor	r12, r12
    49c6:	c7 f8       	bld	r12, 7
    49c8:	e1 2c       	mov	r14, r1
    49ca:	00 e0       	ldi	r16, 0x00	; 0
    49cc:	23 e0       	ldi	r18, 0x03	; 3
    49ce:	40 e0       	ldi	r20, 0x00	; 0
    49d0:	51 ee       	ldi	r21, 0xE1	; 225
    49d2:	60 e0       	ldi	r22, 0x00	; 0
    49d4:	70 e0       	ldi	r23, 0x00	; 0
    49d6:	32 dc       	rcall	.-1948   	; 0x423c <serial_create>
    49d8:	90 93 ab 13 	sts	0x13AB, r25	; 0x8013ab <_com_serial_instance+0x1>
    49dc:	80 93 aa 13 	sts	0x13AA, r24	; 0x8013aa <_com_serial_instance>
    49e0:	eb ee       	ldi	r30, 0xEB	; 235
    49e2:	f3 e1       	ldi	r31, 0x13	; 19
    49e4:	83 e1       	ldi	r24, 0x13	; 19
    49e6:	92 e0       	ldi	r25, 0x02	; 2
    49e8:	91 83       	std	Z+1, r25	; 0x01
    49ea:	80 83       	st	Z, r24
    49ec:	93 83       	std	Z+3, r25	; 0x03
    49ee:	82 83       	std	Z+2, r24	; 0x02
    49f0:	0f 91       	pop	r16
    49f2:	ef 90       	pop	r14
    49f4:	cf 90       	pop	r12
    49f6:	af 90       	pop	r10
    49f8:	9f 90       	pop	r9
    49fa:	8f 90       	pop	r8
    49fc:	08 95       	ret

000049fe <_turn_off>:
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	fc 01       	movw	r30, r24
    4a02:	ee 0f       	add	r30, r30
    4a04:	ff 1f       	adc	r31, r31
    4a06:	e8 0f       	add	r30, r24
    4a08:	f9 1f       	adc	r31, r25
    4a0a:	ee 0f       	add	r30, r30
    4a0c:	ff 1f       	adc	r31, r31
    4a0e:	e4 55       	subi	r30, 0x54	; 84
    4a10:	fc 4e       	sbci	r31, 0xEC	; 236
    4a12:	23 81       	ldd	r18, Z+3	; 0x03
    4a14:	21 11       	cpse	r18, r1
    4a16:	1f c0       	rjmp	.+62     	; 0x4a56 <_turn_off+0x58>
    4a18:	9c 01       	movw	r18, r24
    4a1a:	22 0f       	add	r18, r18
    4a1c:	33 1f       	adc	r19, r19
    4a1e:	f9 01       	movw	r30, r18
    4a20:	e8 0f       	add	r30, r24
    4a22:	f9 1f       	adc	r31, r25
    4a24:	ee 0f       	add	r30, r30
    4a26:	ff 1f       	adc	r31, r31
    4a28:	e4 55       	subi	r30, 0x54	; 84
    4a2a:	fc 4e       	sbci	r31, 0xEC	; 236
    4a2c:	a0 81       	ld	r26, Z
    4a2e:	b1 81       	ldd	r27, Z+1	; 0x01
    4a30:	4c 91       	ld	r20, X
    4a32:	f9 01       	movw	r30, r18
    4a34:	e8 0f       	add	r30, r24
    4a36:	f9 1f       	adc	r31, r25
    4a38:	ee 0f       	add	r30, r30
    4a3a:	ff 1f       	adc	r31, r31
    4a3c:	e4 55       	subi	r30, 0x54	; 84
    4a3e:	fc 4e       	sbci	r31, 0xEC	; 236
    4a40:	81 e0       	ldi	r24, 0x01	; 1
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	02 80       	ldd	r0, Z+2	; 0x02
    4a46:	02 c0       	rjmp	.+4      	; 0x4a4c <_turn_off+0x4e>
    4a48:	88 0f       	add	r24, r24
    4a4a:	99 1f       	adc	r25, r25
    4a4c:	0a 94       	dec	r0
    4a4e:	e2 f7       	brpl	.-8      	; 0x4a48 <_turn_off+0x4a>
    4a50:	84 2b       	or	r24, r20
    4a52:	8c 93       	st	X, r24
    4a54:	08 95       	ret
    4a56:	fc 01       	movw	r30, r24
    4a58:	ee 0f       	add	r30, r30
    4a5a:	ff 1f       	adc	r31, r31
    4a5c:	df 01       	movw	r26, r30
    4a5e:	a8 0f       	add	r26, r24
    4a60:	b9 1f       	adc	r27, r25
    4a62:	aa 0f       	add	r26, r26
    4a64:	bb 1f       	adc	r27, r27
    4a66:	a4 55       	subi	r26, 0x54	; 84
    4a68:	bc 4e       	sbci	r27, 0xEC	; 236
    4a6a:	0d 90       	ld	r0, X+
    4a6c:	bc 91       	ld	r27, X
    4a6e:	a0 2d       	mov	r26, r0
    4a70:	2c 91       	ld	r18, X
    4a72:	e8 0f       	add	r30, r24
    4a74:	f9 1f       	adc	r31, r25
    4a76:	ee 0f       	add	r30, r30
    4a78:	ff 1f       	adc	r31, r31
    4a7a:	e4 55       	subi	r30, 0x54	; 84
    4a7c:	fc 4e       	sbci	r31, 0xEC	; 236
    4a7e:	81 e0       	ldi	r24, 0x01	; 1
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	02 80       	ldd	r0, Z+2	; 0x02
    4a84:	02 c0       	rjmp	.+4      	; 0x4a8a <_turn_off+0x8c>
    4a86:	88 0f       	add	r24, r24
    4a88:	99 1f       	adc	r25, r25
    4a8a:	0a 94       	dec	r0
    4a8c:	e2 f7       	brpl	.-8      	; 0x4a86 <_turn_off+0x88>
    4a8e:	80 95       	com	r24
    4a90:	82 23       	and	r24, r18
    4a92:	8c 93       	st	X, r24
    4a94:	08 95       	ret

00004a96 <_turn_on>:
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	fc 01       	movw	r30, r24
    4a9a:	ee 0f       	add	r30, r30
    4a9c:	ff 1f       	adc	r31, r31
    4a9e:	e8 0f       	add	r30, r24
    4aa0:	f9 1f       	adc	r31, r25
    4aa2:	ee 0f       	add	r30, r30
    4aa4:	ff 1f       	adc	r31, r31
    4aa6:	e4 55       	subi	r30, 0x54	; 84
    4aa8:	fc 4e       	sbci	r31, 0xEC	; 236
    4aaa:	23 81       	ldd	r18, Z+3	; 0x03
    4aac:	21 11       	cpse	r18, r1
    4aae:	20 c0       	rjmp	.+64     	; 0x4af0 <_turn_on+0x5a>
    4ab0:	9c 01       	movw	r18, r24
    4ab2:	22 0f       	add	r18, r18
    4ab4:	33 1f       	adc	r19, r19
    4ab6:	f9 01       	movw	r30, r18
    4ab8:	e8 0f       	add	r30, r24
    4aba:	f9 1f       	adc	r31, r25
    4abc:	ee 0f       	add	r30, r30
    4abe:	ff 1f       	adc	r31, r31
    4ac0:	e4 55       	subi	r30, 0x54	; 84
    4ac2:	fc 4e       	sbci	r31, 0xEC	; 236
    4ac4:	a0 81       	ld	r26, Z
    4ac6:	b1 81       	ldd	r27, Z+1	; 0x01
    4ac8:	4c 91       	ld	r20, X
    4aca:	f9 01       	movw	r30, r18
    4acc:	e8 0f       	add	r30, r24
    4ace:	f9 1f       	adc	r31, r25
    4ad0:	ee 0f       	add	r30, r30
    4ad2:	ff 1f       	adc	r31, r31
    4ad4:	e4 55       	subi	r30, 0x54	; 84
    4ad6:	fc 4e       	sbci	r31, 0xEC	; 236
    4ad8:	81 e0       	ldi	r24, 0x01	; 1
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	02 80       	ldd	r0, Z+2	; 0x02
    4ade:	02 c0       	rjmp	.+4      	; 0x4ae4 <_turn_on+0x4e>
    4ae0:	88 0f       	add	r24, r24
    4ae2:	99 1f       	adc	r25, r25
    4ae4:	0a 94       	dec	r0
    4ae6:	e2 f7       	brpl	.-8      	; 0x4ae0 <_turn_on+0x4a>
    4ae8:	80 95       	com	r24
    4aea:	84 23       	and	r24, r20
    4aec:	8c 93       	st	X, r24
    4aee:	08 95       	ret
    4af0:	fc 01       	movw	r30, r24
    4af2:	ee 0f       	add	r30, r30
    4af4:	ff 1f       	adc	r31, r31
    4af6:	df 01       	movw	r26, r30
    4af8:	a8 0f       	add	r26, r24
    4afa:	b9 1f       	adc	r27, r25
    4afc:	aa 0f       	add	r26, r26
    4afe:	bb 1f       	adc	r27, r27
    4b00:	a4 55       	subi	r26, 0x54	; 84
    4b02:	bc 4e       	sbci	r27, 0xEC	; 236
    4b04:	0d 90       	ld	r0, X+
    4b06:	bc 91       	ld	r27, X
    4b08:	a0 2d       	mov	r26, r0
    4b0a:	2c 91       	ld	r18, X
    4b0c:	e8 0f       	add	r30, r24
    4b0e:	f9 1f       	adc	r31, r25
    4b10:	ee 0f       	add	r30, r30
    4b12:	ff 1f       	adc	r31, r31
    4b14:	e4 55       	subi	r30, 0x54	; 84
    4b16:	fc 4e       	sbci	r31, 0xEC	; 236
    4b18:	81 e0       	ldi	r24, 0x01	; 1
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	02 80       	ldd	r0, Z+2	; 0x02
    4b1e:	02 c0       	rjmp	.+4      	; 0x4b24 <_turn_on+0x8e>
    4b20:	88 0f       	add	r24, r24
    4b22:	99 1f       	adc	r25, r25
    4b24:	0a 94       	dec	r0
    4b26:	e2 f7       	brpl	.-8      	; 0x4b20 <_turn_on+0x8a>
    4b28:	82 2b       	or	r24, r18
    4b2a:	8c 93       	st	X, r24
    4b2c:	08 95       	ret

00004b2e <_hal_led_task>:
    4b2e:	cc 24       	eor	r12, r12
    4b30:	c3 94       	inc	r12
    4b32:	d1 2c       	mov	r13, r1
    4b34:	68 94       	set
    4b36:	bb 24       	eor	r11, r11
    4b38:	b2 f8       	bld	r11, 2
    4b3a:	cc ea       	ldi	r28, 0xAC	; 172
    4b3c:	d3 e1       	ldi	r29, 0x13	; 19
    4b3e:	10 e0       	ldi	r17, 0x00	; 0
    4b40:	8c 81       	ldd	r24, Y+4	; 0x04
    4b42:	81 30       	cpi	r24, 0x01	; 1
    4b44:	81 f0       	breq	.+32     	; 0x4b66 <_hal_led_task+0x38>
    4b46:	18 f1       	brcs	.+70     	; 0x4b8e <_hal_led_task+0x60>
    4b48:	82 30       	cpi	r24, 0x02	; 2
    4b4a:	61 f5       	brne	.+88     	; 0x4ba4 <_hal_led_task+0x76>
    4b4c:	e8 81       	ld	r30, Y
    4b4e:	f9 81       	ldd	r31, Y+1	; 0x01
    4b50:	20 81       	ld	r18, Z
    4b52:	c6 01       	movw	r24, r12
    4b54:	0a 80       	ldd	r0, Y+2	; 0x02
    4b56:	02 c0       	rjmp	.+4      	; 0x4b5c <_hal_led_task+0x2e>
    4b58:	88 0f       	add	r24, r24
    4b5a:	99 1f       	adc	r25, r25
    4b5c:	0a 94       	dec	r0
    4b5e:	e2 f7       	brpl	.-8      	; 0x4b58 <_hal_led_task+0x2a>
    4b60:	82 27       	eor	r24, r18
    4b62:	80 83       	st	Z, r24
    4b64:	1f c0       	rjmp	.+62     	; 0x4ba4 <_hal_led_task+0x76>
    4b66:	8d 81       	ldd	r24, Y+5	; 0x05
    4b68:	8f 5f       	subi	r24, 0xFF	; 255
    4b6a:	8a 30       	cpi	r24, 0x0A	; 10
    4b6c:	10 f4       	brcc	.+4      	; 0x4b72 <_hal_led_task+0x44>
    4b6e:	8d 83       	std	Y+5, r24	; 0x05
    4b70:	19 c0       	rjmp	.+50     	; 0x4ba4 <_hal_led_task+0x76>
    4b72:	1d 82       	std	Y+5, r1	; 0x05
    4b74:	e8 81       	ld	r30, Y
    4b76:	f9 81       	ldd	r31, Y+1	; 0x01
    4b78:	20 81       	ld	r18, Z
    4b7a:	c6 01       	movw	r24, r12
    4b7c:	0a 80       	ldd	r0, Y+2	; 0x02
    4b7e:	02 c0       	rjmp	.+4      	; 0x4b84 <_hal_led_task+0x56>
    4b80:	88 0f       	add	r24, r24
    4b82:	99 1f       	adc	r25, r25
    4b84:	0a 94       	dec	r0
    4b86:	e2 f7       	brpl	.-8      	; 0x4b80 <_hal_led_task+0x52>
    4b88:	82 27       	eor	r24, r18
    4b8a:	80 83       	st	Z, r24
    4b8c:	0b c0       	rjmp	.+22     	; 0x4ba4 <_hal_led_task+0x76>
    4b8e:	0d 81       	ldd	r16, Y+5	; 0x05
    4b90:	00 23       	and	r16, r16
    4b92:	29 f0       	breq	.+10     	; 0x4b9e <_hal_led_task+0x70>
    4b94:	81 2f       	mov	r24, r17
    4b96:	7f df       	rcall	.-258    	; 0x4a96 <_turn_on>
    4b98:	01 50       	subi	r16, 0x01	; 1
    4b9a:	0d 83       	std	Y+5, r16	; 0x05
    4b9c:	03 c0       	rjmp	.+6      	; 0x4ba4 <_hal_led_task+0x76>
    4b9e:	bc 82       	std	Y+4, r11	; 0x04
    4ba0:	81 2f       	mov	r24, r17
    4ba2:	2d df       	rcall	.-422    	; 0x49fe <_turn_off>
    4ba4:	1f 5f       	subi	r17, 0xFF	; 255
    4ba6:	26 96       	adiw	r28, 0x06	; 6
    4ba8:	14 30       	cpi	r17, 0x04	; 4
    4baa:	51 f6       	brne	.-108    	; 0x4b40 <_hal_led_task+0x12>
    4bac:	65 e0       	ldi	r22, 0x05	; 5
    4bae:	70 e0       	ldi	r23, 0x00	; 0
    4bb0:	80 e0       	ldi	r24, 0x00	; 0
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <vTaskDelay>
    4bb8:	c0 cf       	rjmp	.-128    	; 0x4b3a <_hal_led_task+0xc>

00004bba <status_leds_initialise>:
    4bba:	ef 92       	push	r14
    4bbc:	ff 92       	push	r15
    4bbe:	0f 93       	push	r16
    4bc0:	1f 93       	push	r17
    4bc2:	cf 93       	push	r28
    4bc4:	df 93       	push	r29
    4bc6:	08 2f       	mov	r16, r24
    4bc8:	80 e4       	ldi	r24, 0x40	; 64
    4bca:	87 b9       	out	0x07, r24	; 7
    4bcc:	cc ea       	ldi	r28, 0xAC	; 172
    4bce:	d3 e1       	ldi	r29, 0x13	; 19
    4bd0:	0f 2e       	mov	r0, r31
    4bd2:	f8 e2       	ldi	r31, 0x28	; 40
    4bd4:	ef 2e       	mov	r14, r31
    4bd6:	f1 2c       	mov	r15, r1
    4bd8:	f0 2d       	mov	r31, r0
    4bda:	f9 82       	std	Y+1, r15	; 0x01
    4bdc:	e8 82       	st	Y, r14
    4bde:	86 e0       	ldi	r24, 0x06	; 6
    4be0:	8a 83       	std	Y+2, r24	; 0x02
    4be2:	1b 82       	std	Y+3, r1	; 0x03
    4be4:	14 e0       	ldi	r17, 0x04	; 4
    4be6:	1c 83       	std	Y+4, r17	; 0x04
    4be8:	80 e0       	ldi	r24, 0x00	; 0
    4bea:	09 df       	rcall	.-494    	; 0x49fe <_turn_off>
    4bec:	80 e8       	ldi	r24, 0x80	; 128
    4bee:	87 b9       	out	0x07, r24	; 7
    4bf0:	ff 82       	std	Y+7, r15	; 0x07
    4bf2:	ee 82       	std	Y+6, r14	; 0x06
    4bf4:	87 e0       	ldi	r24, 0x07	; 7
    4bf6:	88 87       	std	Y+8, r24	; 0x08
    4bf8:	19 86       	std	Y+9, r1	; 0x09
    4bfa:	1a 87       	std	Y+10, r17	; 0x0a
    4bfc:	81 e0       	ldi	r24, 0x01	; 1
    4bfe:	ff de       	rcall	.-514    	; 0x49fe <_turn_off>
    4c00:	80 e2       	ldi	r24, 0x20	; 32
    4c02:	83 bb       	out	0x13, r24	; 19
    4c04:	84 e3       	ldi	r24, 0x34	; 52
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	9d 87       	std	Y+13, r25	; 0x0d
    4c0a:	8c 87       	std	Y+12, r24	; 0x0c
    4c0c:	85 e0       	ldi	r24, 0x05	; 5
    4c0e:	8e 87       	std	Y+14, r24	; 0x0e
    4c10:	1f 86       	std	Y+15, r1	; 0x0f
    4c12:	18 8b       	std	Y+16, r17	; 0x10
    4c14:	82 e0       	ldi	r24, 0x02	; 2
    4c16:	f3 de       	rcall	.-538    	; 0x49fe <_turn_off>
    4c18:	80 e1       	ldi	r24, 0x10	; 16
    4c1a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4c1e:	82 e0       	ldi	r24, 0x02	; 2
    4c20:	91 e0       	ldi	r25, 0x01	; 1
    4c22:	9b 8b       	std	Y+19, r25	; 0x13
    4c24:	8a 8b       	std	Y+18, r24	; 0x12
    4c26:	1c 8b       	std	Y+20, r17	; 0x14
    4c28:	1d 8a       	std	Y+21, r1	; 0x15
    4c2a:	1e 8b       	std	Y+22, r17	; 0x16
    4c2c:	83 e0       	ldi	r24, 0x03	; 3
    4c2e:	e7 de       	rcall	.-562    	; 0x49fe <_turn_off>
    4c30:	e1 2c       	mov	r14, r1
    4c32:	f1 2c       	mov	r15, r1
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	40 ec       	ldi	r20, 0xC0	; 192
    4c3a:	50 e0       	ldi	r21, 0x00	; 0
    4c3c:	62 ea       	ldi	r22, 0xA2	; 162
    4c3e:	77 e0       	ldi	r23, 0x07	; 7
    4c40:	87 e9       	ldi	r24, 0x97	; 151
    4c42:	95 e2       	ldi	r25, 0x25	; 37
    4c44:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <xTaskCreate>
    4c48:	df 91       	pop	r29
    4c4a:	cf 91       	pop	r28
    4c4c:	1f 91       	pop	r17
    4c4e:	0f 91       	pop	r16
    4c50:	ff 90       	pop	r15
    4c52:	ef 90       	pop	r14
    4c54:	08 95       	ret

00004c56 <status_leds_slowBlink>:
    4c56:	cf 93       	push	r28
    4c58:	df 93       	push	r29
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	ee 0f       	add	r30, r30
    4c60:	ff 1f       	adc	r31, r31
    4c62:	df 01       	movw	r26, r30
    4c64:	a8 0f       	add	r26, r24
    4c66:	b9 1f       	adc	r27, r25
    4c68:	aa 0f       	add	r26, r26
    4c6a:	bb 1f       	adc	r27, r27
    4c6c:	a4 55       	subi	r26, 0x54	; 84
    4c6e:	bc 4e       	sbci	r27, 0xEC	; 236
    4c70:	cd 91       	ld	r28, X+
    4c72:	dc 91       	ld	r29, X
    4c74:	11 97       	sbiw	r26, 0x01	; 1
    4c76:	48 81       	ld	r20, Y
    4c78:	21 e0       	ldi	r18, 0x01	; 1
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	12 96       	adiw	r26, 0x02	; 2
    4c7e:	0c 90       	ld	r0, X
    4c80:	12 97       	sbiw	r26, 0x02	; 2
    4c82:	02 c0       	rjmp	.+4      	; 0x4c88 <status_leds_slowBlink+0x32>
    4c84:	22 0f       	add	r18, r18
    4c86:	33 1f       	adc	r19, r19
    4c88:	0a 94       	dec	r0
    4c8a:	e2 f7       	brpl	.-8      	; 0x4c84 <status_leds_slowBlink+0x2e>
    4c8c:	24 27       	eor	r18, r20
    4c8e:	28 83       	st	Y, r18
    4c90:	fd 01       	movw	r30, r26
    4c92:	81 e0       	ldi	r24, 0x01	; 1
    4c94:	84 83       	std	Z+4, r24	; 0x04
    4c96:	df 91       	pop	r29
    4c98:	cf 91       	pop	r28
    4c9a:	08 95       	ret

00004c9c <status_leds_fastBlink>:
    4c9c:	cf 93       	push	r28
    4c9e:	df 93       	push	r29
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	ee 0f       	add	r30, r30
    4ca6:	ff 1f       	adc	r31, r31
    4ca8:	df 01       	movw	r26, r30
    4caa:	a8 0f       	add	r26, r24
    4cac:	b9 1f       	adc	r27, r25
    4cae:	aa 0f       	add	r26, r26
    4cb0:	bb 1f       	adc	r27, r27
    4cb2:	a4 55       	subi	r26, 0x54	; 84
    4cb4:	bc 4e       	sbci	r27, 0xEC	; 236
    4cb6:	cd 91       	ld	r28, X+
    4cb8:	dc 91       	ld	r29, X
    4cba:	11 97       	sbiw	r26, 0x01	; 1
    4cbc:	48 81       	ld	r20, Y
    4cbe:	21 e0       	ldi	r18, 0x01	; 1
    4cc0:	30 e0       	ldi	r19, 0x00	; 0
    4cc2:	12 96       	adiw	r26, 0x02	; 2
    4cc4:	0c 90       	ld	r0, X
    4cc6:	12 97       	sbiw	r26, 0x02	; 2
    4cc8:	02 c0       	rjmp	.+4      	; 0x4cce <status_leds_fastBlink+0x32>
    4cca:	22 0f       	add	r18, r18
    4ccc:	33 1f       	adc	r19, r19
    4cce:	0a 94       	dec	r0
    4cd0:	e2 f7       	brpl	.-8      	; 0x4cca <status_leds_fastBlink+0x2e>
    4cd2:	24 27       	eor	r18, r20
    4cd4:	28 83       	st	Y, r18
    4cd6:	fd 01       	movw	r30, r26
    4cd8:	82 e0       	ldi	r24, 0x02	; 2
    4cda:	84 83       	std	Z+4, r24	; 0x04
    4cdc:	df 91       	pop	r29
    4cde:	cf 91       	pop	r28
    4ce0:	08 95       	ret

00004ce2 <status_leds_ledOn>:
    4ce2:	28 2f       	mov	r18, r24
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
    4ce6:	f9 01       	movw	r30, r18
    4ce8:	ee 0f       	add	r30, r30
    4cea:	ff 1f       	adc	r31, r31
    4cec:	e2 0f       	add	r30, r18
    4cee:	f3 1f       	adc	r31, r19
    4cf0:	ee 0f       	add	r30, r30
    4cf2:	ff 1f       	adc	r31, r31
    4cf4:	e4 55       	subi	r30, 0x54	; 84
    4cf6:	fc 4e       	sbci	r31, 0xEC	; 236
    4cf8:	93 e0       	ldi	r25, 0x03	; 3
    4cfa:	94 83       	std	Z+4, r25	; 0x04
    4cfc:	cc ce       	rjmp	.-616    	; 0x4a96 <_turn_on>
    4cfe:	08 95       	ret

00004d00 <status_leds_ledOff>:
    4d00:	28 2f       	mov	r18, r24
    4d02:	30 e0       	ldi	r19, 0x00	; 0
    4d04:	f9 01       	movw	r30, r18
    4d06:	ee 0f       	add	r30, r30
    4d08:	ff 1f       	adc	r31, r31
    4d0a:	e2 0f       	add	r30, r18
    4d0c:	f3 1f       	adc	r31, r19
    4d0e:	ee 0f       	add	r30, r30
    4d10:	ff 1f       	adc	r31, r31
    4d12:	e4 55       	subi	r30, 0x54	; 84
    4d14:	fc 4e       	sbci	r31, 0xEC	; 236
    4d16:	94 e0       	ldi	r25, 0x04	; 4
    4d18:	94 83       	std	Z+4, r25	; 0x04
    4d1a:	71 ce       	rjmp	.-798    	; 0x49fe <_turn_off>
    4d1c:	08 95       	ret

00004d1e <status_leds_longPuls>:
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	fc 01       	movw	r30, r24
    4d22:	ee 0f       	add	r30, r30
    4d24:	ff 1f       	adc	r31, r31
    4d26:	df 01       	movw	r26, r30
    4d28:	a8 0f       	add	r26, r24
    4d2a:	b9 1f       	adc	r27, r25
    4d2c:	aa 0f       	add	r26, r26
    4d2e:	bb 1f       	adc	r27, r27
    4d30:	a4 55       	subi	r26, 0x54	; 84
    4d32:	bc 4e       	sbci	r27, 0xEC	; 236
    4d34:	24 e0       	ldi	r18, 0x04	; 4
    4d36:	15 96       	adiw	r26, 0x05	; 5
    4d38:	2c 93       	st	X, r18
    4d3a:	15 97       	sbiw	r26, 0x05	; 5
    4d3c:	fd 01       	movw	r30, r26
    4d3e:	14 82       	std	Z+4, r1	; 0x04
    4d40:	08 95       	ret

00004d42 <status_leds_shortPuls>:
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	fc 01       	movw	r30, r24
    4d46:	ee 0f       	add	r30, r30
    4d48:	ff 1f       	adc	r31, r31
    4d4a:	df 01       	movw	r26, r30
    4d4c:	a8 0f       	add	r26, r24
    4d4e:	b9 1f       	adc	r27, r25
    4d50:	aa 0f       	add	r26, r26
    4d52:	bb 1f       	adc	r27, r27
    4d54:	a4 55       	subi	r26, 0x54	; 84
    4d56:	bc 4e       	sbci	r27, 0xEC	; 236
    4d58:	21 e0       	ldi	r18, 0x01	; 1
    4d5a:	15 96       	adiw	r26, 0x05	; 5
    4d5c:	2c 93       	st	X, r18
    4d5e:	15 97       	sbiw	r26, 0x05	; 5
    4d60:	fd 01       	movw	r30, r26
    4d62:	14 82       	std	Z+4, r1	; 0x04
    4d64:	08 95       	ret

00004d66 <_initTwiInterface>:
    4d66:	80 91 d2 13 	lds	r24, 0x13D2	; 0x8013d2 <_twiIsInitiated>
    4d6a:	81 11       	cpse	r24, r1
    4d6c:	0c c0       	rjmp	.+24     	; 0x4d86 <_initTwiInterface+0x20>
    4d6e:	8c e0       	ldi	r24, 0x0C	; 12
    4d70:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4d74:	8f ef       	ldi	r24, 0xFF	; 255
    4d76:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4d7a:	84 e0       	ldi	r24, 0x04	; 4
    4d7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	80 93 d2 13 	sts	0x13D2, r24	; 0x8013d2 <_twiIsInitiated>
    4d86:	08 95       	ret

00004d88 <twiCreate>:
    4d88:	af 92       	push	r10
    4d8a:	bf 92       	push	r11
    4d8c:	cf 92       	push	r12
    4d8e:	df 92       	push	r13
    4d90:	ef 92       	push	r14
    4d92:	ff 92       	push	r15
    4d94:	0f 93       	push	r16
    4d96:	1f 93       	push	r17
    4d98:	cf 93       	push	r28
    4d9a:	df 93       	push	r29
    4d9c:	a8 2e       	mov	r10, r24
    4d9e:	b6 2e       	mov	r11, r22
    4da0:	69 01       	movw	r12, r18
    4da2:	7a 01       	movw	r14, r20
    4da4:	84 e0       	ldi	r24, 0x04	; 4
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	88 d3       	rcall	.+1808   	; 0x54ba <malloc>
    4daa:	ec 01       	movw	r28, r24
    4dac:	89 2b       	or	r24, r25
    4dae:	61 f1       	breq	.+88     	; 0x4e08 <twiCreate+0x80>
    4db0:	a8 82       	st	Y, r10
    4db2:	81 e0       	ldi	r24, 0x01	; 1
    4db4:	b8 12       	cpse	r11, r24
    4db6:	12 c0       	rjmp	.+36     	; 0x4ddc <twiCreate+0x54>
    4db8:	c7 01       	movw	r24, r14
    4dba:	b6 01       	movw	r22, r12
    4dbc:	20 ea       	ldi	r18, 0xA0	; 160
    4dbe:	36 e8       	ldi	r19, 0x86	; 134
    4dc0:	41 e0       	ldi	r20, 0x01	; 1
    4dc2:	50 e0       	ldi	r21, 0x00	; 0
    4dc4:	27 d3       	rcall	.+1614   	; 0x5414 <__udivmodsi4>
    4dc6:	da 01       	movw	r26, r20
    4dc8:	c9 01       	movw	r24, r18
    4dca:	40 97       	sbiw	r24, 0x10	; 16
    4dcc:	a1 09       	sbc	r26, r1
    4dce:	b1 09       	sbc	r27, r1
    4dd0:	b6 95       	lsr	r27
    4dd2:	a7 95       	ror	r26
    4dd4:	97 95       	ror	r25
    4dd6:	87 95       	ror	r24
    4dd8:	89 83       	std	Y+1, r24	; 0x01
    4dda:	11 c0       	rjmp	.+34     	; 0x4dfe <twiCreate+0x76>
    4ddc:	c7 01       	movw	r24, r14
    4dde:	b6 01       	movw	r22, r12
    4de0:	20 e8       	ldi	r18, 0x80	; 128
    4de2:	3a e1       	ldi	r19, 0x1A	; 26
    4de4:	46 e0       	ldi	r20, 0x06	; 6
    4de6:	50 e0       	ldi	r21, 0x00	; 0
    4de8:	15 d3       	rcall	.+1578   	; 0x5414 <__udivmodsi4>
    4dea:	da 01       	movw	r26, r20
    4dec:	c9 01       	movw	r24, r18
    4dee:	40 97       	sbiw	r24, 0x10	; 16
    4df0:	a1 09       	sbc	r26, r1
    4df2:	b1 09       	sbc	r27, r1
    4df4:	b6 95       	lsr	r27
    4df6:	a7 95       	ror	r26
    4df8:	97 95       	ror	r25
    4dfa:	87 95       	ror	r24
    4dfc:	89 83       	std	Y+1, r24	; 0x01
    4dfe:	1b 83       	std	Y+3, r17	; 0x03
    4e00:	0a 83       	std	Y+2, r16	; 0x02
    4e02:	8c 2f       	mov	r24, r28
    4e04:	9d 2f       	mov	r25, r29
    4e06:	02 c0       	rjmp	.+4      	; 0x4e0c <twiCreate+0x84>
    4e08:	80 e0       	ldi	r24, 0x00	; 0
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	df 91       	pop	r29
    4e0e:	cf 91       	pop	r28
    4e10:	1f 91       	pop	r17
    4e12:	0f 91       	pop	r16
    4e14:	ff 90       	pop	r15
    4e16:	ef 90       	pop	r14
    4e18:	df 90       	pop	r13
    4e1a:	cf 90       	pop	r12
    4e1c:	bf 90       	pop	r11
    4e1e:	af 90       	pop	r10
    4e20:	08 95       	ret

00004e22 <twiIsBusy>:
    4e22:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e26:	81 70       	andi	r24, 0x01	; 1
    4e28:	08 95       	ret

00004e2a <twiTransmit>:
    4e2a:	ff 92       	push	r15
    4e2c:	0f 93       	push	r16
    4e2e:	1f 93       	push	r17
    4e30:	cf 93       	push	r28
    4e32:	df 93       	push	r29
    4e34:	00 97       	sbiw	r24, 0x00	; 0
    4e36:	d1 f1       	breq	.+116    	; 0x4eac <twiTransmit+0x82>
    4e38:	4a 30       	cpi	r20, 0x0A	; 10
    4e3a:	d0 f5       	brcc	.+116    	; 0x4eb0 <twiTransmit+0x86>
    4e3c:	f4 2e       	mov	r15, r20
    4e3e:	8b 01       	movw	r16, r22
    4e40:	ec 01       	movw	r28, r24
    4e42:	ef df       	rcall	.-34     	; 0x4e22 <twiIsBusy>
    4e44:	81 11       	cpse	r24, r1
    4e46:	36 c0       	rjmp	.+108    	; 0x4eb4 <twiTransmit+0x8a>
    4e48:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <_twiCurrentHandler>
    4e4c:	90 91 c6 13 	lds	r25, 0x13C6	; 0x8013c6 <_twiCurrentHandler+0x1>
    4e50:	c8 17       	cp	r28, r24
    4e52:	d9 07       	cpc	r29, r25
    4e54:	41 f0       	breq	.+16     	; 0x4e66 <twiTransmit+0x3c>
    4e56:	87 df       	rcall	.-242    	; 0x4d66 <_initTwiInterface>
    4e58:	89 81       	ldd	r24, Y+1	; 0x01
    4e5a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4e5e:	d0 93 c6 13 	sts	0x13C6, r29	; 0x8013c6 <_twiCurrentHandler+0x1>
    4e62:	c0 93 c5 13 	sts	0x13C5, r28	; 0x8013c5 <_twiCurrentHandler>
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	8f 0d       	add	r24, r15
    4e6a:	80 93 c7 13 	sts	0x13C7, r24	; 0x8013c7 <_twiMessageLen>
    4e6e:	88 81       	ld	r24, Y
    4e70:	88 0f       	add	r24, r24
    4e72:	80 93 c8 13 	sts	0x13C8, r24	; 0x8013c8 <_twiMessageBuffer>
    4e76:	ff 20       	and	r15, r15
    4e78:	89 f0       	breq	.+34     	; 0x4e9c <twiTransmit+0x72>
    4e7a:	f8 01       	movw	r30, r16
    4e7c:	a9 ec       	ldi	r26, 0xC9	; 201
    4e7e:	b3 e1       	ldi	r27, 0x13	; 19
    4e80:	4f ef       	ldi	r20, 0xFF	; 255
    4e82:	4f 0d       	add	r20, r15
    4e84:	64 2f       	mov	r22, r20
    4e86:	70 e0       	ldi	r23, 0x00	; 0
    4e88:	cb 01       	movw	r24, r22
    4e8a:	01 96       	adiw	r24, 0x01	; 1
    4e8c:	b8 01       	movw	r22, r16
    4e8e:	68 0f       	add	r22, r24
    4e90:	79 1f       	adc	r23, r25
    4e92:	81 91       	ld	r24, Z+
    4e94:	8d 93       	st	X+, r24
    4e96:	e6 17       	cp	r30, r22
    4e98:	f7 07       	cpc	r31, r23
    4e9a:	d9 f7       	brne	.-10     	; 0x4e92 <twiTransmit+0x68>
    4e9c:	88 ef       	ldi	r24, 0xF8	; 248
    4e9e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4ea2:	85 ea       	ldi	r24, 0xA5	; 165
    4ea4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ea8:	84 e0       	ldi	r24, 0x04	; 4
    4eaa:	05 c0       	rjmp	.+10     	; 0x4eb6 <twiTransmit+0x8c>
    4eac:	86 e0       	ldi	r24, 0x06	; 6
    4eae:	03 c0       	rjmp	.+6      	; 0x4eb6 <twiTransmit+0x8c>
    4eb0:	87 e0       	ldi	r24, 0x07	; 7
    4eb2:	01 c0       	rjmp	.+2      	; 0x4eb6 <twiTransmit+0x8c>
    4eb4:	82 e0       	ldi	r24, 0x02	; 2
    4eb6:	df 91       	pop	r29
    4eb8:	cf 91       	pop	r28
    4eba:	1f 91       	pop	r17
    4ebc:	0f 91       	pop	r16
    4ebe:	ff 90       	pop	r15
    4ec0:	08 95       	ret

00004ec2 <twiReceive>:
    4ec2:	1f 93       	push	r17
    4ec4:	cf 93       	push	r28
    4ec6:	df 93       	push	r29
    4ec8:	00 97       	sbiw	r24, 0x00	; 0
    4eca:	29 f1       	breq	.+74     	; 0x4f16 <twiReceive+0x54>
    4ecc:	6b 30       	cpi	r22, 0x0B	; 11
    4ece:	28 f5       	brcc	.+74     	; 0x4f1a <twiReceive+0x58>
    4ed0:	16 2f       	mov	r17, r22
    4ed2:	ec 01       	movw	r28, r24
    4ed4:	a6 df       	rcall	.-180    	; 0x4e22 <twiIsBusy>
    4ed6:	81 11       	cpse	r24, r1
    4ed8:	22 c0       	rjmp	.+68     	; 0x4f1e <twiReceive+0x5c>
    4eda:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <_twiCurrentHandler>
    4ede:	90 91 c6 13 	lds	r25, 0x13C6	; 0x8013c6 <_twiCurrentHandler+0x1>
    4ee2:	c8 17       	cp	r28, r24
    4ee4:	d9 07       	cpc	r29, r25
    4ee6:	41 f0       	breq	.+16     	; 0x4ef8 <twiReceive+0x36>
    4ee8:	3e df       	rcall	.-388    	; 0x4d66 <_initTwiInterface>
    4eea:	89 81       	ldd	r24, Y+1	; 0x01
    4eec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4ef0:	d0 93 c6 13 	sts	0x13C6, r29	; 0x8013c6 <_twiCurrentHandler+0x1>
    4ef4:	c0 93 c5 13 	sts	0x13C5, r28	; 0x8013c5 <_twiCurrentHandler>
    4ef8:	10 93 c7 13 	sts	0x13C7, r17	; 0x8013c7 <_twiMessageLen>
    4efc:	88 81       	ld	r24, Y
    4efe:	88 0f       	add	r24, r24
    4f00:	81 60       	ori	r24, 0x01	; 1
    4f02:	80 93 c8 13 	sts	0x13C8, r24	; 0x8013c8 <_twiMessageBuffer>
    4f06:	88 ef       	ldi	r24, 0xF8	; 248
    4f08:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4f0c:	85 ea       	ldi	r24, 0xA5	; 165
    4f0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f12:	85 e0       	ldi	r24, 0x05	; 5
    4f14:	05 c0       	rjmp	.+10     	; 0x4f20 <twiReceive+0x5e>
    4f16:	86 e0       	ldi	r24, 0x06	; 6
    4f18:	03 c0       	rjmp	.+6      	; 0x4f20 <twiReceive+0x5e>
    4f1a:	87 e0       	ldi	r24, 0x07	; 7
    4f1c:	01 c0       	rjmp	.+2      	; 0x4f20 <twiReceive+0x5e>
    4f1e:	82 e0       	ldi	r24, 0x02	; 2
    4f20:	df 91       	pop	r29
    4f22:	cf 91       	pop	r28
    4f24:	1f 91       	pop	r17
    4f26:	08 95       	ret

00004f28 <__vector_39>:
    4f28:	1f 92       	push	r1
    4f2a:	0f 92       	push	r0
    4f2c:	0f b6       	in	r0, 0x3f	; 63
    4f2e:	0f 92       	push	r0
    4f30:	11 24       	eor	r1, r1
    4f32:	0b b6       	in	r0, 0x3b	; 59
    4f34:	0f 92       	push	r0
    4f36:	2f 93       	push	r18
    4f38:	3f 93       	push	r19
    4f3a:	4f 93       	push	r20
    4f3c:	5f 93       	push	r21
    4f3e:	6f 93       	push	r22
    4f40:	7f 93       	push	r23
    4f42:	8f 93       	push	r24
    4f44:	9f 93       	push	r25
    4f46:	af 93       	push	r26
    4f48:	bf 93       	push	r27
    4f4a:	ef 93       	push	r30
    4f4c:	ff 93       	push	r31
    4f4e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4f52:	8e 2f       	mov	r24, r30
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	fc 01       	movw	r30, r24
    4f58:	38 97       	sbiw	r30, 0x08	; 8
    4f5a:	e1 35       	cpi	r30, 0x51	; 81
    4f5c:	f1 05       	cpc	r31, r1
    4f5e:	08 f0       	brcs	.+2      	; 0x4f62 <__vector_39+0x3a>
    4f60:	75 c0       	rjmp	.+234    	; 0x504c <__vector_39+0x124>
    4f62:	88 27       	eor	r24, r24
    4f64:	e4 58       	subi	r30, 0x84	; 132
    4f66:	ff 4f       	sbci	r31, 0xFF	; 255
    4f68:	8f 4f       	sbci	r24, 0xFF	; 255
    4f6a:	76 c2       	rjmp	.+1260   	; 0x5458 <__tablejump2__>
    4f6c:	10 92 c4 13 	sts	0x13C4, r1	; 0x8013c4 <_index.1885>
    4f70:	e0 91 c4 13 	lds	r30, 0x13C4	; 0x8013c4 <_index.1885>
    4f74:	80 91 c7 13 	lds	r24, 0x13C7	; 0x8013c7 <_twiMessageLen>
    4f78:	e8 17       	cp	r30, r24
    4f7a:	70 f4       	brcc	.+28     	; 0x4f98 <__vector_39+0x70>
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	8e 0f       	add	r24, r30
    4f80:	80 93 c4 13 	sts	0x13C4, r24	; 0x8013c4 <_index.1885>
    4f84:	f0 e0       	ldi	r31, 0x00	; 0
    4f86:	e8 53       	subi	r30, 0x38	; 56
    4f88:	fc 4e       	sbci	r31, 0xEC	; 236
    4f8a:	80 81       	ld	r24, Z
    4f8c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f90:	85 e8       	ldi	r24, 0x85	; 133
    4f92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f96:	72 c0       	rjmp	.+228    	; 0x507c <__vector_39+0x154>
    4f98:	84 e9       	ldi	r24, 0x94	; 148
    4f9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f9e:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <_twiCurrentHandler>
    4fa2:	90 91 c6 13 	lds	r25, 0x13C6	; 0x8013c6 <_twiCurrentHandler+0x1>
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	12 96       	adiw	r26, 0x02	; 2
    4faa:	ed 91       	ld	r30, X+
    4fac:	fc 91       	ld	r31, X
    4fae:	13 97       	sbiw	r26, 0x03	; 3
    4fb0:	30 97       	sbiw	r30, 0x00	; 0
    4fb2:	09 f4       	brne	.+2      	; 0x4fb6 <__vector_39+0x8e>
    4fb4:	63 c0       	rjmp	.+198    	; 0x507c <__vector_39+0x154>
    4fb6:	20 e0       	ldi	r18, 0x00	; 0
    4fb8:	40 e0       	ldi	r20, 0x00	; 0
    4fba:	50 e0       	ldi	r21, 0x00	; 0
    4fbc:	64 e0       	ldi	r22, 0x04	; 4
    4fbe:	19 95       	eicall
    4fc0:	5d c0       	rjmp	.+186    	; 0x507c <__vector_39+0x154>
    4fc2:	e0 91 c4 13 	lds	r30, 0x13C4	; 0x8013c4 <_index.1885>
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	8e 0f       	add	r24, r30
    4fca:	80 93 c4 13 	sts	0x13C4, r24	; 0x8013c4 <_index.1885>
    4fce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4fd2:	f0 e0       	ldi	r31, 0x00	; 0
    4fd4:	e8 53       	subi	r30, 0x38	; 56
    4fd6:	fc 4e       	sbci	r31, 0xEC	; 236
    4fd8:	80 83       	st	Z, r24
    4fda:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4fde:	80 34       	cpi	r24, 0x40	; 64
    4fe0:	11 f4       	brne	.+4      	; 0x4fe6 <__vector_39+0xbe>
    4fe2:	10 92 c4 13 	sts	0x13C4, r1	; 0x8013c4 <_index.1885>
    4fe6:	20 91 c4 13 	lds	r18, 0x13C4	; 0x8013c4 <_index.1885>
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	80 91 c7 13 	lds	r24, 0x13C7	; 0x8013c7 <_twiMessageLen>
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	01 97       	sbiw	r24, 0x01	; 1
    4ff4:	28 17       	cp	r18, r24
    4ff6:	39 07       	cpc	r19, r25
    4ff8:	24 f4       	brge	.+8      	; 0x5002 <__vector_39+0xda>
    4ffa:	85 ec       	ldi	r24, 0xC5	; 197
    4ffc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5000:	3d c0       	rjmp	.+122    	; 0x507c <__vector_39+0x154>
    5002:	85 e8       	ldi	r24, 0x85	; 133
    5004:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5008:	39 c0       	rjmp	.+114    	; 0x507c <__vector_39+0x154>
    500a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    500e:	e0 91 c4 13 	lds	r30, 0x13C4	; 0x8013c4 <_index.1885>
    5012:	f0 e0       	ldi	r31, 0x00	; 0
    5014:	e8 53       	subi	r30, 0x38	; 56
    5016:	fc 4e       	sbci	r31, 0xEC	; 236
    5018:	80 83       	st	Z, r24
    501a:	84 e9       	ldi	r24, 0x94	; 148
    501c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5020:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <_twiCurrentHandler>
    5024:	90 91 c6 13 	lds	r25, 0x13C6	; 0x8013c6 <_twiCurrentHandler+0x1>
    5028:	dc 01       	movw	r26, r24
    502a:	12 96       	adiw	r26, 0x02	; 2
    502c:	ed 91       	ld	r30, X+
    502e:	fc 91       	ld	r31, X
    5030:	13 97       	sbiw	r26, 0x03	; 3
    5032:	30 97       	sbiw	r30, 0x00	; 0
    5034:	19 f1       	breq	.+70     	; 0x507c <__vector_39+0x154>
    5036:	20 91 c7 13 	lds	r18, 0x13C7	; 0x8013c7 <_twiMessageLen>
    503a:	48 ec       	ldi	r20, 0xC8	; 200
    503c:	53 e1       	ldi	r21, 0x13	; 19
    503e:	65 e0       	ldi	r22, 0x05	; 5
    5040:	19 95       	eicall
    5042:	1c c0       	rjmp	.+56     	; 0x507c <__vector_39+0x154>
    5044:	85 ea       	ldi	r24, 0xA5	; 165
    5046:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    504a:	18 c0       	rjmp	.+48     	; 0x507c <__vector_39+0x154>
    504c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5050:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5054:	84 e0       	ldi	r24, 0x04	; 4
    5056:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    505a:	80 91 c5 13 	lds	r24, 0x13C5	; 0x8013c5 <_twiCurrentHandler>
    505e:	90 91 c6 13 	lds	r25, 0x13C6	; 0x8013c6 <_twiCurrentHandler+0x1>
    5062:	dc 01       	movw	r26, r24
    5064:	12 96       	adiw	r26, 0x02	; 2
    5066:	ed 91       	ld	r30, X+
    5068:	fc 91       	ld	r31, X
    506a:	13 97       	sbiw	r26, 0x03	; 3
    506c:	30 97       	sbiw	r30, 0x00	; 0
    506e:	31 f0       	breq	.+12     	; 0x507c <__vector_39+0x154>
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	40 e0       	ldi	r20, 0x00	; 0
    5074:	50 e0       	ldi	r21, 0x00	; 0
    5076:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    507a:	19 95       	eicall
    507c:	ff 91       	pop	r31
    507e:	ef 91       	pop	r30
    5080:	bf 91       	pop	r27
    5082:	af 91       	pop	r26
    5084:	9f 91       	pop	r25
    5086:	8f 91       	pop	r24
    5088:	7f 91       	pop	r23
    508a:	6f 91       	pop	r22
    508c:	5f 91       	pop	r21
    508e:	4f 91       	pop	r20
    5090:	3f 91       	pop	r19
    5092:	2f 91       	pop	r18
    5094:	0f 90       	pop	r0
    5096:	0b be       	out	0x3b, r0	; 59
    5098:	0f 90       	pop	r0
    509a:	0f be       	out	0x3f, r0	; 63
    509c:	0f 90       	pop	r0
    509e:	1f 90       	pop	r1
    50a0:	18 95       	reti

000050a2 <fifo_init>:
    50a2:	fc 01       	movw	r30, r24
    50a4:	41 11       	cpse	r20, r1
    50a6:	01 c0       	rjmp	.+2      	; 0x50aa <fifo_init+0x8>
    50a8:	29 d3       	rcall	.+1618   	; 0x56fc <abort>
    50aa:	84 2f       	mov	r24, r20
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	9c 01       	movw	r18, r24
    50b0:	21 50       	subi	r18, 0x01	; 1
    50b2:	31 09       	sbc	r19, r1
    50b4:	82 23       	and	r24, r18
    50b6:	93 23       	and	r25, r19
    50b8:	89 2b       	or	r24, r25
    50ba:	09 f0       	breq	.+2      	; 0x50be <fifo_init+0x1c>
    50bc:	1f d3       	rcall	.+1598   	; 0x56fc <abort>
    50be:	41 38       	cpi	r20, 0x81	; 129
    50c0:	08 f0       	brcs	.+2      	; 0x50c4 <fifo_init+0x22>
    50c2:	1c d3       	rcall	.+1592   	; 0x56fc <abort>
    50c4:	12 82       	std	Z+2, r1	; 0x02
    50c6:	13 82       	std	Z+3, r1	; 0x03
    50c8:	44 83       	std	Z+4, r20	; 0x04
    50ca:	44 0f       	add	r20, r20
    50cc:	41 50       	subi	r20, 0x01	; 1
    50ce:	45 83       	std	Z+5, r20	; 0x05
    50d0:	71 83       	std	Z+1, r23	; 0x01
    50d2:	60 83       	st	Z, r22
    50d4:	80 e0       	ldi	r24, 0x00	; 0
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	08 95       	ret

000050da <__subsf3>:
    50da:	50 58       	subi	r21, 0x80	; 128

000050dc <__addsf3>:
    50dc:	bb 27       	eor	r27, r27
    50de:	aa 27       	eor	r26, r26
    50e0:	0e d0       	rcall	.+28     	; 0x50fe <__addsf3x>
    50e2:	21 c1       	rjmp	.+578    	; 0x5326 <__fp_round>
    50e4:	12 d1       	rcall	.+548    	; 0x530a <__fp_pscA>
    50e6:	30 f0       	brcs	.+12     	; 0x50f4 <__addsf3+0x18>
    50e8:	17 d1       	rcall	.+558    	; 0x5318 <__fp_pscB>
    50ea:	20 f0       	brcs	.+8      	; 0x50f4 <__addsf3+0x18>
    50ec:	31 f4       	brne	.+12     	; 0x50fa <__addsf3+0x1e>
    50ee:	9f 3f       	cpi	r25, 0xFF	; 255
    50f0:	11 f4       	brne	.+4      	; 0x50f6 <__addsf3+0x1a>
    50f2:	1e f4       	brtc	.+6      	; 0x50fa <__addsf3+0x1e>
    50f4:	07 c1       	rjmp	.+526    	; 0x5304 <__fp_nan>
    50f6:	0e f4       	brtc	.+2      	; 0x50fa <__addsf3+0x1e>
    50f8:	e0 95       	com	r30
    50fa:	e7 fb       	bst	r30, 7
    50fc:	fd c0       	rjmp	.+506    	; 0x52f8 <__fp_inf>

000050fe <__addsf3x>:
    50fe:	e9 2f       	mov	r30, r25
    5100:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__fp_split3>
    5104:	78 f3       	brcs	.-34     	; 0x50e4 <__addsf3+0x8>
    5106:	ba 17       	cp	r27, r26
    5108:	62 07       	cpc	r22, r18
    510a:	73 07       	cpc	r23, r19
    510c:	84 07       	cpc	r24, r20
    510e:	95 07       	cpc	r25, r21
    5110:	20 f0       	brcs	.+8      	; 0x511a <__addsf3x+0x1c>
    5112:	79 f4       	brne	.+30     	; 0x5132 <__addsf3x+0x34>
    5114:	a6 f5       	brtc	.+104    	; 0x517e <__addsf3x+0x80>
    5116:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__fp_zero>
    511a:	0e f4       	brtc	.+2      	; 0x511e <__addsf3x+0x20>
    511c:	e0 95       	com	r30
    511e:	0b 2e       	mov	r0, r27
    5120:	ba 2f       	mov	r27, r26
    5122:	a0 2d       	mov	r26, r0
    5124:	0b 01       	movw	r0, r22
    5126:	b9 01       	movw	r22, r18
    5128:	90 01       	movw	r18, r0
    512a:	0c 01       	movw	r0, r24
    512c:	ca 01       	movw	r24, r20
    512e:	a0 01       	movw	r20, r0
    5130:	11 24       	eor	r1, r1
    5132:	ff 27       	eor	r31, r31
    5134:	59 1b       	sub	r21, r25
    5136:	99 f0       	breq	.+38     	; 0x515e <__addsf3x+0x60>
    5138:	59 3f       	cpi	r21, 0xF9	; 249
    513a:	50 f4       	brcc	.+20     	; 0x5150 <__addsf3x+0x52>
    513c:	50 3e       	cpi	r21, 0xE0	; 224
    513e:	68 f1       	brcs	.+90     	; 0x519a <__addsf3x+0x9c>
    5140:	1a 16       	cp	r1, r26
    5142:	f0 40       	sbci	r31, 0x00	; 0
    5144:	a2 2f       	mov	r26, r18
    5146:	23 2f       	mov	r18, r19
    5148:	34 2f       	mov	r19, r20
    514a:	44 27       	eor	r20, r20
    514c:	58 5f       	subi	r21, 0xF8	; 248
    514e:	f3 cf       	rjmp	.-26     	; 0x5136 <__addsf3x+0x38>
    5150:	46 95       	lsr	r20
    5152:	37 95       	ror	r19
    5154:	27 95       	ror	r18
    5156:	a7 95       	ror	r26
    5158:	f0 40       	sbci	r31, 0x00	; 0
    515a:	53 95       	inc	r21
    515c:	c9 f7       	brne	.-14     	; 0x5150 <__addsf3x+0x52>
    515e:	7e f4       	brtc	.+30     	; 0x517e <__addsf3x+0x80>
    5160:	1f 16       	cp	r1, r31
    5162:	ba 0b       	sbc	r27, r26
    5164:	62 0b       	sbc	r22, r18
    5166:	73 0b       	sbc	r23, r19
    5168:	84 0b       	sbc	r24, r20
    516a:	ba f0       	brmi	.+46     	; 0x519a <__addsf3x+0x9c>
    516c:	91 50       	subi	r25, 0x01	; 1
    516e:	a1 f0       	breq	.+40     	; 0x5198 <__addsf3x+0x9a>
    5170:	ff 0f       	add	r31, r31
    5172:	bb 1f       	adc	r27, r27
    5174:	66 1f       	adc	r22, r22
    5176:	77 1f       	adc	r23, r23
    5178:	88 1f       	adc	r24, r24
    517a:	c2 f7       	brpl	.-16     	; 0x516c <__addsf3x+0x6e>
    517c:	0e c0       	rjmp	.+28     	; 0x519a <__addsf3x+0x9c>
    517e:	ba 0f       	add	r27, r26
    5180:	62 1f       	adc	r22, r18
    5182:	73 1f       	adc	r23, r19
    5184:	84 1f       	adc	r24, r20
    5186:	48 f4       	brcc	.+18     	; 0x519a <__addsf3x+0x9c>
    5188:	87 95       	ror	r24
    518a:	77 95       	ror	r23
    518c:	67 95       	ror	r22
    518e:	b7 95       	ror	r27
    5190:	f7 95       	ror	r31
    5192:	9e 3f       	cpi	r25, 0xFE	; 254
    5194:	08 f0       	brcs	.+2      	; 0x5198 <__addsf3x+0x9a>
    5196:	b1 cf       	rjmp	.-158    	; 0x50fa <__addsf3+0x1e>
    5198:	93 95       	inc	r25
    519a:	88 0f       	add	r24, r24
    519c:	08 f0       	brcs	.+2      	; 0x51a0 <__addsf3x+0xa2>
    519e:	99 27       	eor	r25, r25
    51a0:	ee 0f       	add	r30, r30
    51a2:	97 95       	ror	r25
    51a4:	87 95       	ror	r24
    51a6:	08 95       	ret

000051a8 <__divsf3>:
    51a8:	0d d0       	rcall	.+26     	; 0x51c4 <__divsf3x>
    51aa:	bd c0       	rjmp	.+378    	; 0x5326 <__fp_round>
    51ac:	b5 d0       	rcall	.+362    	; 0x5318 <__fp_pscB>
    51ae:	48 f0       	brcs	.+18     	; 0x51c2 <__divsf3+0x1a>
    51b0:	ac d0       	rcall	.+344    	; 0x530a <__fp_pscA>
    51b2:	38 f0       	brcs	.+14     	; 0x51c2 <__divsf3+0x1a>
    51b4:	21 f4       	brne	.+8      	; 0x51be <__divsf3+0x16>
    51b6:	5f 3f       	cpi	r21, 0xFF	; 255
    51b8:	21 f0       	breq	.+8      	; 0x51c2 <__divsf3+0x1a>
    51ba:	9e c0       	rjmp	.+316    	; 0x52f8 <__fp_inf>
    51bc:	51 11       	cpse	r21, r1
    51be:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <__fp_szero>
    51c2:	a0 c0       	rjmp	.+320    	; 0x5304 <__fp_nan>

000051c4 <__divsf3x>:
    51c4:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__fp_split3>
    51c8:	88 f3       	brcs	.-30     	; 0x51ac <__divsf3+0x4>

000051ca <__divsf3_pse>:
    51ca:	99 23       	and	r25, r25
    51cc:	b9 f3       	breq	.-18     	; 0x51bc <__divsf3+0x14>
    51ce:	55 23       	and	r21, r21
    51d0:	a1 f3       	breq	.-24     	; 0x51ba <__divsf3+0x12>
    51d2:	95 1b       	sub	r25, r21
    51d4:	55 0b       	sbc	r21, r21
    51d6:	bb 27       	eor	r27, r27
    51d8:	aa 27       	eor	r26, r26
    51da:	62 17       	cp	r22, r18
    51dc:	73 07       	cpc	r23, r19
    51de:	84 07       	cpc	r24, r20
    51e0:	38 f0       	brcs	.+14     	; 0x51f0 <__divsf3_pse+0x26>
    51e2:	9f 5f       	subi	r25, 0xFF	; 255
    51e4:	5f 4f       	sbci	r21, 0xFF	; 255
    51e6:	22 0f       	add	r18, r18
    51e8:	33 1f       	adc	r19, r19
    51ea:	44 1f       	adc	r20, r20
    51ec:	aa 1f       	adc	r26, r26
    51ee:	a9 f3       	breq	.-22     	; 0x51da <__divsf3_pse+0x10>
    51f0:	34 d0       	rcall	.+104    	; 0x525a <__divsf3_pse+0x90>
    51f2:	0e 2e       	mov	r0, r30
    51f4:	3a f0       	brmi	.+14     	; 0x5204 <__divsf3_pse+0x3a>
    51f6:	e0 e8       	ldi	r30, 0x80	; 128
    51f8:	31 d0       	rcall	.+98     	; 0x525c <__divsf3_pse+0x92>
    51fa:	91 50       	subi	r25, 0x01	; 1
    51fc:	50 40       	sbci	r21, 0x00	; 0
    51fe:	e6 95       	lsr	r30
    5200:	00 1c       	adc	r0, r0
    5202:	ca f7       	brpl	.-14     	; 0x51f6 <__divsf3_pse+0x2c>
    5204:	2a d0       	rcall	.+84     	; 0x525a <__divsf3_pse+0x90>
    5206:	fe 2f       	mov	r31, r30
    5208:	28 d0       	rcall	.+80     	; 0x525a <__divsf3_pse+0x90>
    520a:	66 0f       	add	r22, r22
    520c:	77 1f       	adc	r23, r23
    520e:	88 1f       	adc	r24, r24
    5210:	bb 1f       	adc	r27, r27
    5212:	26 17       	cp	r18, r22
    5214:	37 07       	cpc	r19, r23
    5216:	48 07       	cpc	r20, r24
    5218:	ab 07       	cpc	r26, r27
    521a:	b0 e8       	ldi	r27, 0x80	; 128
    521c:	09 f0       	breq	.+2      	; 0x5220 <__divsf3_pse+0x56>
    521e:	bb 0b       	sbc	r27, r27
    5220:	80 2d       	mov	r24, r0
    5222:	bf 01       	movw	r22, r30
    5224:	ff 27       	eor	r31, r31
    5226:	93 58       	subi	r25, 0x83	; 131
    5228:	5f 4f       	sbci	r21, 0xFF	; 255
    522a:	32 f0       	brmi	.+12     	; 0x5238 <__divsf3_pse+0x6e>
    522c:	9e 3f       	cpi	r25, 0xFE	; 254
    522e:	51 05       	cpc	r21, r1
    5230:	70 f0       	brcs	.+28     	; 0x524e <__divsf3_pse+0x84>
    5232:	62 c0       	rjmp	.+196    	; 0x52f8 <__fp_inf>
    5234:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <__fp_szero>
    5238:	5f 3f       	cpi	r21, 0xFF	; 255
    523a:	e4 f3       	brlt	.-8      	; 0x5234 <__divsf3_pse+0x6a>
    523c:	98 3e       	cpi	r25, 0xE8	; 232
    523e:	d4 f3       	brlt	.-12     	; 0x5234 <__divsf3_pse+0x6a>
    5240:	86 95       	lsr	r24
    5242:	77 95       	ror	r23
    5244:	67 95       	ror	r22
    5246:	b7 95       	ror	r27
    5248:	f7 95       	ror	r31
    524a:	9f 5f       	subi	r25, 0xFF	; 255
    524c:	c9 f7       	brne	.-14     	; 0x5240 <__divsf3_pse+0x76>
    524e:	88 0f       	add	r24, r24
    5250:	91 1d       	adc	r25, r1
    5252:	96 95       	lsr	r25
    5254:	87 95       	ror	r24
    5256:	97 f9       	bld	r25, 7
    5258:	08 95       	ret
    525a:	e1 e0       	ldi	r30, 0x01	; 1
    525c:	66 0f       	add	r22, r22
    525e:	77 1f       	adc	r23, r23
    5260:	88 1f       	adc	r24, r24
    5262:	bb 1f       	adc	r27, r27
    5264:	62 17       	cp	r22, r18
    5266:	73 07       	cpc	r23, r19
    5268:	84 07       	cpc	r24, r20
    526a:	ba 07       	cpc	r27, r26
    526c:	20 f0       	brcs	.+8      	; 0x5276 <__divsf3_pse+0xac>
    526e:	62 1b       	sub	r22, r18
    5270:	73 0b       	sbc	r23, r19
    5272:	84 0b       	sbc	r24, r20
    5274:	ba 0b       	sbc	r27, r26
    5276:	ee 1f       	adc	r30, r30
    5278:	88 f7       	brcc	.-30     	; 0x525c <__divsf3_pse+0x92>
    527a:	e0 95       	com	r30
    527c:	08 95       	ret

0000527e <__floatunsisf>:
    527e:	e8 94       	clt
    5280:	09 c0       	rjmp	.+18     	; 0x5294 <__floatsisf+0x12>

00005282 <__floatsisf>:
    5282:	97 fb       	bst	r25, 7
    5284:	3e f4       	brtc	.+14     	; 0x5294 <__floatsisf+0x12>
    5286:	90 95       	com	r25
    5288:	80 95       	com	r24
    528a:	70 95       	com	r23
    528c:	61 95       	neg	r22
    528e:	7f 4f       	sbci	r23, 0xFF	; 255
    5290:	8f 4f       	sbci	r24, 0xFF	; 255
    5292:	9f 4f       	sbci	r25, 0xFF	; 255
    5294:	99 23       	and	r25, r25
    5296:	a9 f0       	breq	.+42     	; 0x52c2 <__floatsisf+0x40>
    5298:	f9 2f       	mov	r31, r25
    529a:	96 e9       	ldi	r25, 0x96	; 150
    529c:	bb 27       	eor	r27, r27
    529e:	93 95       	inc	r25
    52a0:	f6 95       	lsr	r31
    52a2:	87 95       	ror	r24
    52a4:	77 95       	ror	r23
    52a6:	67 95       	ror	r22
    52a8:	b7 95       	ror	r27
    52aa:	f1 11       	cpse	r31, r1
    52ac:	f8 cf       	rjmp	.-16     	; 0x529e <__floatsisf+0x1c>
    52ae:	fa f4       	brpl	.+62     	; 0x52ee <__floatsisf+0x6c>
    52b0:	bb 0f       	add	r27, r27
    52b2:	11 f4       	brne	.+4      	; 0x52b8 <__floatsisf+0x36>
    52b4:	60 ff       	sbrs	r22, 0
    52b6:	1b c0       	rjmp	.+54     	; 0x52ee <__floatsisf+0x6c>
    52b8:	6f 5f       	subi	r22, 0xFF	; 255
    52ba:	7f 4f       	sbci	r23, 0xFF	; 255
    52bc:	8f 4f       	sbci	r24, 0xFF	; 255
    52be:	9f 4f       	sbci	r25, 0xFF	; 255
    52c0:	16 c0       	rjmp	.+44     	; 0x52ee <__floatsisf+0x6c>
    52c2:	88 23       	and	r24, r24
    52c4:	11 f0       	breq	.+4      	; 0x52ca <__floatsisf+0x48>
    52c6:	96 e9       	ldi	r25, 0x96	; 150
    52c8:	11 c0       	rjmp	.+34     	; 0x52ec <__floatsisf+0x6a>
    52ca:	77 23       	and	r23, r23
    52cc:	21 f0       	breq	.+8      	; 0x52d6 <__floatsisf+0x54>
    52ce:	9e e8       	ldi	r25, 0x8E	; 142
    52d0:	87 2f       	mov	r24, r23
    52d2:	76 2f       	mov	r23, r22
    52d4:	05 c0       	rjmp	.+10     	; 0x52e0 <__floatsisf+0x5e>
    52d6:	66 23       	and	r22, r22
    52d8:	71 f0       	breq	.+28     	; 0x52f6 <__floatsisf+0x74>
    52da:	96 e8       	ldi	r25, 0x86	; 134
    52dc:	86 2f       	mov	r24, r22
    52de:	70 e0       	ldi	r23, 0x00	; 0
    52e0:	60 e0       	ldi	r22, 0x00	; 0
    52e2:	2a f0       	brmi	.+10     	; 0x52ee <__floatsisf+0x6c>
    52e4:	9a 95       	dec	r25
    52e6:	66 0f       	add	r22, r22
    52e8:	77 1f       	adc	r23, r23
    52ea:	88 1f       	adc	r24, r24
    52ec:	da f7       	brpl	.-10     	; 0x52e4 <__floatsisf+0x62>
    52ee:	88 0f       	add	r24, r24
    52f0:	96 95       	lsr	r25
    52f2:	87 95       	ror	r24
    52f4:	97 f9       	bld	r25, 7
    52f6:	08 95       	ret

000052f8 <__fp_inf>:
    52f8:	97 f9       	bld	r25, 7
    52fa:	9f 67       	ori	r25, 0x7F	; 127
    52fc:	80 e8       	ldi	r24, 0x80	; 128
    52fe:	70 e0       	ldi	r23, 0x00	; 0
    5300:	60 e0       	ldi	r22, 0x00	; 0
    5302:	08 95       	ret

00005304 <__fp_nan>:
    5304:	9f ef       	ldi	r25, 0xFF	; 255
    5306:	80 ec       	ldi	r24, 0xC0	; 192
    5308:	08 95       	ret

0000530a <__fp_pscA>:
    530a:	00 24       	eor	r0, r0
    530c:	0a 94       	dec	r0
    530e:	16 16       	cp	r1, r22
    5310:	17 06       	cpc	r1, r23
    5312:	18 06       	cpc	r1, r24
    5314:	09 06       	cpc	r0, r25
    5316:	08 95       	ret

00005318 <__fp_pscB>:
    5318:	00 24       	eor	r0, r0
    531a:	0a 94       	dec	r0
    531c:	12 16       	cp	r1, r18
    531e:	13 06       	cpc	r1, r19
    5320:	14 06       	cpc	r1, r20
    5322:	05 06       	cpc	r0, r21
    5324:	08 95       	ret

00005326 <__fp_round>:
    5326:	09 2e       	mov	r0, r25
    5328:	03 94       	inc	r0
    532a:	00 0c       	add	r0, r0
    532c:	11 f4       	brne	.+4      	; 0x5332 <__fp_round+0xc>
    532e:	88 23       	and	r24, r24
    5330:	52 f0       	brmi	.+20     	; 0x5346 <__fp_round+0x20>
    5332:	bb 0f       	add	r27, r27
    5334:	40 f4       	brcc	.+16     	; 0x5346 <__fp_round+0x20>
    5336:	bf 2b       	or	r27, r31
    5338:	11 f4       	brne	.+4      	; 0x533e <__fp_round+0x18>
    533a:	60 ff       	sbrs	r22, 0
    533c:	04 c0       	rjmp	.+8      	; 0x5346 <__fp_round+0x20>
    533e:	6f 5f       	subi	r22, 0xFF	; 255
    5340:	7f 4f       	sbci	r23, 0xFF	; 255
    5342:	8f 4f       	sbci	r24, 0xFF	; 255
    5344:	9f 4f       	sbci	r25, 0xFF	; 255
    5346:	08 95       	ret

00005348 <__mulsf3>:
    5348:	0c d0       	rcall	.+24     	; 0x5362 <__mulsf3x>
    534a:	ed cf       	rjmp	.-38     	; 0x5326 <__fp_round>
    534c:	de df       	rcall	.-68     	; 0x530a <__fp_pscA>
    534e:	28 f0       	brcs	.+10     	; 0x535a <__mulsf3+0x12>
    5350:	e3 df       	rcall	.-58     	; 0x5318 <__fp_pscB>
    5352:	18 f0       	brcs	.+6      	; 0x535a <__mulsf3+0x12>
    5354:	95 23       	and	r25, r21
    5356:	09 f0       	breq	.+2      	; 0x535a <__mulsf3+0x12>
    5358:	cf cf       	rjmp	.-98     	; 0x52f8 <__fp_inf>
    535a:	d4 cf       	rjmp	.-88     	; 0x5304 <__fp_nan>
    535c:	11 24       	eor	r1, r1
    535e:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <__fp_szero>

00005362 <__mulsf3x>:
    5362:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__fp_split3>
    5366:	90 f3       	brcs	.-28     	; 0x534c <__mulsf3+0x4>

00005368 <__mulsf3_pse>:
    5368:	95 9f       	mul	r25, r21
    536a:	c1 f3       	breq	.-16     	; 0x535c <__mulsf3+0x14>
    536c:	95 0f       	add	r25, r21
    536e:	50 e0       	ldi	r21, 0x00	; 0
    5370:	55 1f       	adc	r21, r21
    5372:	62 9f       	mul	r22, r18
    5374:	f0 01       	movw	r30, r0
    5376:	72 9f       	mul	r23, r18
    5378:	bb 27       	eor	r27, r27
    537a:	f0 0d       	add	r31, r0
    537c:	b1 1d       	adc	r27, r1
    537e:	63 9f       	mul	r22, r19
    5380:	aa 27       	eor	r26, r26
    5382:	f0 0d       	add	r31, r0
    5384:	b1 1d       	adc	r27, r1
    5386:	aa 1f       	adc	r26, r26
    5388:	64 9f       	mul	r22, r20
    538a:	66 27       	eor	r22, r22
    538c:	b0 0d       	add	r27, r0
    538e:	a1 1d       	adc	r26, r1
    5390:	66 1f       	adc	r22, r22
    5392:	82 9f       	mul	r24, r18
    5394:	22 27       	eor	r18, r18
    5396:	b0 0d       	add	r27, r0
    5398:	a1 1d       	adc	r26, r1
    539a:	62 1f       	adc	r22, r18
    539c:	73 9f       	mul	r23, r19
    539e:	b0 0d       	add	r27, r0
    53a0:	a1 1d       	adc	r26, r1
    53a2:	62 1f       	adc	r22, r18
    53a4:	83 9f       	mul	r24, r19
    53a6:	a0 0d       	add	r26, r0
    53a8:	61 1d       	adc	r22, r1
    53aa:	22 1f       	adc	r18, r18
    53ac:	74 9f       	mul	r23, r20
    53ae:	33 27       	eor	r19, r19
    53b0:	a0 0d       	add	r26, r0
    53b2:	61 1d       	adc	r22, r1
    53b4:	23 1f       	adc	r18, r19
    53b6:	84 9f       	mul	r24, r20
    53b8:	60 0d       	add	r22, r0
    53ba:	21 1d       	adc	r18, r1
    53bc:	82 2f       	mov	r24, r18
    53be:	76 2f       	mov	r23, r22
    53c0:	6a 2f       	mov	r22, r26
    53c2:	11 24       	eor	r1, r1
    53c4:	9f 57       	subi	r25, 0x7F	; 127
    53c6:	50 40       	sbci	r21, 0x00	; 0
    53c8:	92 f0       	brmi	.+36     	; 0x53ee <__mulsf3_pse+0x86>
    53ca:	e9 f0       	breq	.+58     	; 0x5406 <__mulsf3_pse+0x9e>
    53cc:	88 23       	and	r24, r24
    53ce:	4a f0       	brmi	.+18     	; 0x53e2 <__mulsf3_pse+0x7a>
    53d0:	ee 0f       	add	r30, r30
    53d2:	ff 1f       	adc	r31, r31
    53d4:	bb 1f       	adc	r27, r27
    53d6:	66 1f       	adc	r22, r22
    53d8:	77 1f       	adc	r23, r23
    53da:	88 1f       	adc	r24, r24
    53dc:	91 50       	subi	r25, 0x01	; 1
    53de:	50 40       	sbci	r21, 0x00	; 0
    53e0:	a9 f7       	brne	.-22     	; 0x53cc <__mulsf3_pse+0x64>
    53e2:	9e 3f       	cpi	r25, 0xFE	; 254
    53e4:	51 05       	cpc	r21, r1
    53e6:	78 f0       	brcs	.+30     	; 0x5406 <__mulsf3_pse+0x9e>
    53e8:	87 cf       	rjmp	.-242    	; 0x52f8 <__fp_inf>
    53ea:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <__fp_szero>
    53ee:	5f 3f       	cpi	r21, 0xFF	; 255
    53f0:	e4 f3       	brlt	.-8      	; 0x53ea <__mulsf3_pse+0x82>
    53f2:	98 3e       	cpi	r25, 0xE8	; 232
    53f4:	d4 f3       	brlt	.-12     	; 0x53ea <__mulsf3_pse+0x82>
    53f6:	86 95       	lsr	r24
    53f8:	77 95       	ror	r23
    53fa:	67 95       	ror	r22
    53fc:	b7 95       	ror	r27
    53fe:	f7 95       	ror	r31
    5400:	e7 95       	ror	r30
    5402:	9f 5f       	subi	r25, 0xFF	; 255
    5404:	c1 f7       	brne	.-16     	; 0x53f6 <__mulsf3_pse+0x8e>
    5406:	fe 2b       	or	r31, r30
    5408:	88 0f       	add	r24, r24
    540a:	91 1d       	adc	r25, r1
    540c:	96 95       	lsr	r25
    540e:	87 95       	ror	r24
    5410:	97 f9       	bld	r25, 7
    5412:	08 95       	ret

00005414 <__udivmodsi4>:
    5414:	a1 e2       	ldi	r26, 0x21	; 33
    5416:	1a 2e       	mov	r1, r26
    5418:	aa 1b       	sub	r26, r26
    541a:	bb 1b       	sub	r27, r27
    541c:	fd 01       	movw	r30, r26
    541e:	0d c0       	rjmp	.+26     	; 0x543a <__udivmodsi4_ep>

00005420 <__udivmodsi4_loop>:
    5420:	aa 1f       	adc	r26, r26
    5422:	bb 1f       	adc	r27, r27
    5424:	ee 1f       	adc	r30, r30
    5426:	ff 1f       	adc	r31, r31
    5428:	a2 17       	cp	r26, r18
    542a:	b3 07       	cpc	r27, r19
    542c:	e4 07       	cpc	r30, r20
    542e:	f5 07       	cpc	r31, r21
    5430:	20 f0       	brcs	.+8      	; 0x543a <__udivmodsi4_ep>
    5432:	a2 1b       	sub	r26, r18
    5434:	b3 0b       	sbc	r27, r19
    5436:	e4 0b       	sbc	r30, r20
    5438:	f5 0b       	sbc	r31, r21

0000543a <__udivmodsi4_ep>:
    543a:	66 1f       	adc	r22, r22
    543c:	77 1f       	adc	r23, r23
    543e:	88 1f       	adc	r24, r24
    5440:	99 1f       	adc	r25, r25
    5442:	1a 94       	dec	r1
    5444:	69 f7       	brne	.-38     	; 0x5420 <__udivmodsi4_loop>
    5446:	60 95       	com	r22
    5448:	70 95       	com	r23
    544a:	80 95       	com	r24
    544c:	90 95       	com	r25
    544e:	9b 01       	movw	r18, r22
    5450:	ac 01       	movw	r20, r24
    5452:	bd 01       	movw	r22, r26
    5454:	cf 01       	movw	r24, r30
    5456:	08 95       	ret

00005458 <__tablejump2__>:
    5458:	ee 0f       	add	r30, r30
    545a:	ff 1f       	adc	r31, r31
    545c:	88 1f       	adc	r24, r24
    545e:	8b bf       	out	0x3b, r24	; 59
    5460:	07 90       	elpm	r0, Z+
    5462:	f6 91       	elpm	r31, Z
    5464:	e0 2d       	mov	r30, r0
    5466:	19 94       	eijmp

00005468 <__umulhisi3>:
    5468:	a2 9f       	mul	r26, r18
    546a:	b0 01       	movw	r22, r0
    546c:	b3 9f       	mul	r27, r19
    546e:	c0 01       	movw	r24, r0
    5470:	a3 9f       	mul	r26, r19
    5472:	70 0d       	add	r23, r0
    5474:	81 1d       	adc	r24, r1
    5476:	11 24       	eor	r1, r1
    5478:	91 1d       	adc	r25, r1
    547a:	b2 9f       	mul	r27, r18
    547c:	70 0d       	add	r23, r0
    547e:	81 1d       	adc	r24, r1
    5480:	11 24       	eor	r1, r1
    5482:	91 1d       	adc	r25, r1
    5484:	08 95       	ret

00005486 <calloc>:
    5486:	0f 93       	push	r16
    5488:	1f 93       	push	r17
    548a:	cf 93       	push	r28
    548c:	df 93       	push	r29
    548e:	86 9f       	mul	r24, r22
    5490:	80 01       	movw	r16, r0
    5492:	87 9f       	mul	r24, r23
    5494:	10 0d       	add	r17, r0
    5496:	96 9f       	mul	r25, r22
    5498:	10 0d       	add	r17, r0
    549a:	11 24       	eor	r1, r1
    549c:	c8 01       	movw	r24, r16
    549e:	0d d0       	rcall	.+26     	; 0x54ba <malloc>
    54a0:	ec 01       	movw	r28, r24
    54a2:	00 97       	sbiw	r24, 0x00	; 0
    54a4:	21 f0       	breq	.+8      	; 0x54ae <calloc+0x28>
    54a6:	a8 01       	movw	r20, r16
    54a8:	60 e0       	ldi	r22, 0x00	; 0
    54aa:	70 e0       	ldi	r23, 0x00	; 0
    54ac:	34 d1       	rcall	.+616    	; 0x5716 <memset>
    54ae:	ce 01       	movw	r24, r28
    54b0:	df 91       	pop	r29
    54b2:	cf 91       	pop	r28
    54b4:	1f 91       	pop	r17
    54b6:	0f 91       	pop	r16
    54b8:	08 95       	ret

000054ba <malloc>:
    54ba:	0f 93       	push	r16
    54bc:	1f 93       	push	r17
    54be:	cf 93       	push	r28
    54c0:	df 93       	push	r29
    54c2:	82 30       	cpi	r24, 0x02	; 2
    54c4:	91 05       	cpc	r25, r1
    54c6:	10 f4       	brcc	.+4      	; 0x54cc <malloc+0x12>
    54c8:	82 e0       	ldi	r24, 0x02	; 2
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	e0 91 e9 13 	lds	r30, 0x13E9	; 0x8013e9 <__flp>
    54d0:	f0 91 ea 13 	lds	r31, 0x13EA	; 0x8013ea <__flp+0x1>
    54d4:	20 e0       	ldi	r18, 0x00	; 0
    54d6:	30 e0       	ldi	r19, 0x00	; 0
    54d8:	a0 e0       	ldi	r26, 0x00	; 0
    54da:	b0 e0       	ldi	r27, 0x00	; 0
    54dc:	30 97       	sbiw	r30, 0x00	; 0
    54de:	19 f1       	breq	.+70     	; 0x5526 <malloc+0x6c>
    54e0:	40 81       	ld	r20, Z
    54e2:	51 81       	ldd	r21, Z+1	; 0x01
    54e4:	02 81       	ldd	r16, Z+2	; 0x02
    54e6:	13 81       	ldd	r17, Z+3	; 0x03
    54e8:	48 17       	cp	r20, r24
    54ea:	59 07       	cpc	r21, r25
    54ec:	c8 f0       	brcs	.+50     	; 0x5520 <malloc+0x66>
    54ee:	84 17       	cp	r24, r20
    54f0:	95 07       	cpc	r25, r21
    54f2:	69 f4       	brne	.+26     	; 0x550e <malloc+0x54>
    54f4:	10 97       	sbiw	r26, 0x00	; 0
    54f6:	31 f0       	breq	.+12     	; 0x5504 <malloc+0x4a>
    54f8:	12 96       	adiw	r26, 0x02	; 2
    54fa:	0c 93       	st	X, r16
    54fc:	12 97       	sbiw	r26, 0x02	; 2
    54fe:	13 96       	adiw	r26, 0x03	; 3
    5500:	1c 93       	st	X, r17
    5502:	27 c0       	rjmp	.+78     	; 0x5552 <malloc+0x98>
    5504:	00 93 e9 13 	sts	0x13E9, r16	; 0x8013e9 <__flp>
    5508:	10 93 ea 13 	sts	0x13EA, r17	; 0x8013ea <__flp+0x1>
    550c:	22 c0       	rjmp	.+68     	; 0x5552 <malloc+0x98>
    550e:	21 15       	cp	r18, r1
    5510:	31 05       	cpc	r19, r1
    5512:	19 f0       	breq	.+6      	; 0x551a <malloc+0x60>
    5514:	42 17       	cp	r20, r18
    5516:	53 07       	cpc	r21, r19
    5518:	18 f4       	brcc	.+6      	; 0x5520 <malloc+0x66>
    551a:	9a 01       	movw	r18, r20
    551c:	bd 01       	movw	r22, r26
    551e:	ef 01       	movw	r28, r30
    5520:	df 01       	movw	r26, r30
    5522:	f8 01       	movw	r30, r16
    5524:	db cf       	rjmp	.-74     	; 0x54dc <malloc+0x22>
    5526:	21 15       	cp	r18, r1
    5528:	31 05       	cpc	r19, r1
    552a:	f9 f0       	breq	.+62     	; 0x556a <malloc+0xb0>
    552c:	28 1b       	sub	r18, r24
    552e:	39 0b       	sbc	r19, r25
    5530:	24 30       	cpi	r18, 0x04	; 4
    5532:	31 05       	cpc	r19, r1
    5534:	80 f4       	brcc	.+32     	; 0x5556 <malloc+0x9c>
    5536:	8a 81       	ldd	r24, Y+2	; 0x02
    5538:	9b 81       	ldd	r25, Y+3	; 0x03
    553a:	61 15       	cp	r22, r1
    553c:	71 05       	cpc	r23, r1
    553e:	21 f0       	breq	.+8      	; 0x5548 <malloc+0x8e>
    5540:	fb 01       	movw	r30, r22
    5542:	93 83       	std	Z+3, r25	; 0x03
    5544:	82 83       	std	Z+2, r24	; 0x02
    5546:	04 c0       	rjmp	.+8      	; 0x5550 <malloc+0x96>
    5548:	90 93 ea 13 	sts	0x13EA, r25	; 0x8013ea <__flp+0x1>
    554c:	80 93 e9 13 	sts	0x13E9, r24	; 0x8013e9 <__flp>
    5550:	fe 01       	movw	r30, r28
    5552:	32 96       	adiw	r30, 0x02	; 2
    5554:	44 c0       	rjmp	.+136    	; 0x55de <malloc+0x124>
    5556:	fe 01       	movw	r30, r28
    5558:	e2 0f       	add	r30, r18
    555a:	f3 1f       	adc	r31, r19
    555c:	81 93       	st	Z+, r24
    555e:	91 93       	st	Z+, r25
    5560:	22 50       	subi	r18, 0x02	; 2
    5562:	31 09       	sbc	r19, r1
    5564:	39 83       	std	Y+1, r19	; 0x01
    5566:	28 83       	st	Y, r18
    5568:	3a c0       	rjmp	.+116    	; 0x55de <malloc+0x124>
    556a:	20 91 e7 13 	lds	r18, 0x13E7	; 0x8013e7 <__brkval>
    556e:	30 91 e8 13 	lds	r19, 0x13E8	; 0x8013e8 <__brkval+0x1>
    5572:	23 2b       	or	r18, r19
    5574:	41 f4       	brne	.+16     	; 0x5586 <malloc+0xcc>
    5576:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    557a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    557e:	30 93 e8 13 	sts	0x13E8, r19	; 0x8013e8 <__brkval+0x1>
    5582:	20 93 e7 13 	sts	0x13E7, r18	; 0x8013e7 <__brkval>
    5586:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    558a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    558e:	21 15       	cp	r18, r1
    5590:	31 05       	cpc	r19, r1
    5592:	41 f4       	brne	.+16     	; 0x55a4 <malloc+0xea>
    5594:	2d b7       	in	r18, 0x3d	; 61
    5596:	3e b7       	in	r19, 0x3e	; 62
    5598:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    559c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    55a0:	24 1b       	sub	r18, r20
    55a2:	35 0b       	sbc	r19, r21
    55a4:	e0 91 e7 13 	lds	r30, 0x13E7	; 0x8013e7 <__brkval>
    55a8:	f0 91 e8 13 	lds	r31, 0x13E8	; 0x8013e8 <__brkval+0x1>
    55ac:	e2 17       	cp	r30, r18
    55ae:	f3 07       	cpc	r31, r19
    55b0:	a0 f4       	brcc	.+40     	; 0x55da <malloc+0x120>
    55b2:	2e 1b       	sub	r18, r30
    55b4:	3f 0b       	sbc	r19, r31
    55b6:	28 17       	cp	r18, r24
    55b8:	39 07       	cpc	r19, r25
    55ba:	78 f0       	brcs	.+30     	; 0x55da <malloc+0x120>
    55bc:	ac 01       	movw	r20, r24
    55be:	4e 5f       	subi	r20, 0xFE	; 254
    55c0:	5f 4f       	sbci	r21, 0xFF	; 255
    55c2:	24 17       	cp	r18, r20
    55c4:	35 07       	cpc	r19, r21
    55c6:	48 f0       	brcs	.+18     	; 0x55da <malloc+0x120>
    55c8:	4e 0f       	add	r20, r30
    55ca:	5f 1f       	adc	r21, r31
    55cc:	50 93 e8 13 	sts	0x13E8, r21	; 0x8013e8 <__brkval+0x1>
    55d0:	40 93 e7 13 	sts	0x13E7, r20	; 0x8013e7 <__brkval>
    55d4:	81 93       	st	Z+, r24
    55d6:	91 93       	st	Z+, r25
    55d8:	02 c0       	rjmp	.+4      	; 0x55de <malloc+0x124>
    55da:	e0 e0       	ldi	r30, 0x00	; 0
    55dc:	f0 e0       	ldi	r31, 0x00	; 0
    55de:	cf 01       	movw	r24, r30
    55e0:	df 91       	pop	r29
    55e2:	cf 91       	pop	r28
    55e4:	1f 91       	pop	r17
    55e6:	0f 91       	pop	r16
    55e8:	08 95       	ret

000055ea <free>:
    55ea:	cf 93       	push	r28
    55ec:	df 93       	push	r29
    55ee:	00 97       	sbiw	r24, 0x00	; 0
    55f0:	09 f4       	brne	.+2      	; 0x55f4 <free+0xa>
    55f2:	81 c0       	rjmp	.+258    	; 0x56f6 <free+0x10c>
    55f4:	fc 01       	movw	r30, r24
    55f6:	32 97       	sbiw	r30, 0x02	; 2
    55f8:	13 82       	std	Z+3, r1	; 0x03
    55fa:	12 82       	std	Z+2, r1	; 0x02
    55fc:	a0 91 e9 13 	lds	r26, 0x13E9	; 0x8013e9 <__flp>
    5600:	b0 91 ea 13 	lds	r27, 0x13EA	; 0x8013ea <__flp+0x1>
    5604:	10 97       	sbiw	r26, 0x00	; 0
    5606:	81 f4       	brne	.+32     	; 0x5628 <free+0x3e>
    5608:	20 81       	ld	r18, Z
    560a:	31 81       	ldd	r19, Z+1	; 0x01
    560c:	82 0f       	add	r24, r18
    560e:	93 1f       	adc	r25, r19
    5610:	20 91 e7 13 	lds	r18, 0x13E7	; 0x8013e7 <__brkval>
    5614:	30 91 e8 13 	lds	r19, 0x13E8	; 0x8013e8 <__brkval+0x1>
    5618:	28 17       	cp	r18, r24
    561a:	39 07       	cpc	r19, r25
    561c:	51 f5       	brne	.+84     	; 0x5672 <free+0x88>
    561e:	f0 93 e8 13 	sts	0x13E8, r31	; 0x8013e8 <__brkval+0x1>
    5622:	e0 93 e7 13 	sts	0x13E7, r30	; 0x8013e7 <__brkval>
    5626:	67 c0       	rjmp	.+206    	; 0x56f6 <free+0x10c>
    5628:	ed 01       	movw	r28, r26
    562a:	20 e0       	ldi	r18, 0x00	; 0
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	ce 17       	cp	r28, r30
    5630:	df 07       	cpc	r29, r31
    5632:	40 f4       	brcc	.+16     	; 0x5644 <free+0x5a>
    5634:	4a 81       	ldd	r20, Y+2	; 0x02
    5636:	5b 81       	ldd	r21, Y+3	; 0x03
    5638:	9e 01       	movw	r18, r28
    563a:	41 15       	cp	r20, r1
    563c:	51 05       	cpc	r21, r1
    563e:	f1 f0       	breq	.+60     	; 0x567c <free+0x92>
    5640:	ea 01       	movw	r28, r20
    5642:	f5 cf       	rjmp	.-22     	; 0x562e <free+0x44>
    5644:	d3 83       	std	Z+3, r29	; 0x03
    5646:	c2 83       	std	Z+2, r28	; 0x02
    5648:	40 81       	ld	r20, Z
    564a:	51 81       	ldd	r21, Z+1	; 0x01
    564c:	84 0f       	add	r24, r20
    564e:	95 1f       	adc	r25, r21
    5650:	c8 17       	cp	r28, r24
    5652:	d9 07       	cpc	r29, r25
    5654:	59 f4       	brne	.+22     	; 0x566c <free+0x82>
    5656:	88 81       	ld	r24, Y
    5658:	99 81       	ldd	r25, Y+1	; 0x01
    565a:	84 0f       	add	r24, r20
    565c:	95 1f       	adc	r25, r21
    565e:	02 96       	adiw	r24, 0x02	; 2
    5660:	91 83       	std	Z+1, r25	; 0x01
    5662:	80 83       	st	Z, r24
    5664:	8a 81       	ldd	r24, Y+2	; 0x02
    5666:	9b 81       	ldd	r25, Y+3	; 0x03
    5668:	93 83       	std	Z+3, r25	; 0x03
    566a:	82 83       	std	Z+2, r24	; 0x02
    566c:	21 15       	cp	r18, r1
    566e:	31 05       	cpc	r19, r1
    5670:	29 f4       	brne	.+10     	; 0x567c <free+0x92>
    5672:	f0 93 ea 13 	sts	0x13EA, r31	; 0x8013ea <__flp+0x1>
    5676:	e0 93 e9 13 	sts	0x13E9, r30	; 0x8013e9 <__flp>
    567a:	3d c0       	rjmp	.+122    	; 0x56f6 <free+0x10c>
    567c:	e9 01       	movw	r28, r18
    567e:	fb 83       	std	Y+3, r31	; 0x03
    5680:	ea 83       	std	Y+2, r30	; 0x02
    5682:	49 91       	ld	r20, Y+
    5684:	59 91       	ld	r21, Y+
    5686:	c4 0f       	add	r28, r20
    5688:	d5 1f       	adc	r29, r21
    568a:	ec 17       	cp	r30, r28
    568c:	fd 07       	cpc	r31, r29
    568e:	61 f4       	brne	.+24     	; 0x56a8 <free+0xbe>
    5690:	80 81       	ld	r24, Z
    5692:	91 81       	ldd	r25, Z+1	; 0x01
    5694:	84 0f       	add	r24, r20
    5696:	95 1f       	adc	r25, r21
    5698:	02 96       	adiw	r24, 0x02	; 2
    569a:	e9 01       	movw	r28, r18
    569c:	99 83       	std	Y+1, r25	; 0x01
    569e:	88 83       	st	Y, r24
    56a0:	82 81       	ldd	r24, Z+2	; 0x02
    56a2:	93 81       	ldd	r25, Z+3	; 0x03
    56a4:	9b 83       	std	Y+3, r25	; 0x03
    56a6:	8a 83       	std	Y+2, r24	; 0x02
    56a8:	e0 e0       	ldi	r30, 0x00	; 0
    56aa:	f0 e0       	ldi	r31, 0x00	; 0
    56ac:	12 96       	adiw	r26, 0x02	; 2
    56ae:	8d 91       	ld	r24, X+
    56b0:	9c 91       	ld	r25, X
    56b2:	13 97       	sbiw	r26, 0x03	; 3
    56b4:	00 97       	sbiw	r24, 0x00	; 0
    56b6:	19 f0       	breq	.+6      	; 0x56be <free+0xd4>
    56b8:	fd 01       	movw	r30, r26
    56ba:	dc 01       	movw	r26, r24
    56bc:	f7 cf       	rjmp	.-18     	; 0x56ac <free+0xc2>
    56be:	8d 91       	ld	r24, X+
    56c0:	9c 91       	ld	r25, X
    56c2:	11 97       	sbiw	r26, 0x01	; 1
    56c4:	9d 01       	movw	r18, r26
    56c6:	2e 5f       	subi	r18, 0xFE	; 254
    56c8:	3f 4f       	sbci	r19, 0xFF	; 255
    56ca:	82 0f       	add	r24, r18
    56cc:	93 1f       	adc	r25, r19
    56ce:	20 91 e7 13 	lds	r18, 0x13E7	; 0x8013e7 <__brkval>
    56d2:	30 91 e8 13 	lds	r19, 0x13E8	; 0x8013e8 <__brkval+0x1>
    56d6:	28 17       	cp	r18, r24
    56d8:	39 07       	cpc	r19, r25
    56da:	69 f4       	brne	.+26     	; 0x56f6 <free+0x10c>
    56dc:	30 97       	sbiw	r30, 0x00	; 0
    56de:	29 f4       	brne	.+10     	; 0x56ea <free+0x100>
    56e0:	10 92 ea 13 	sts	0x13EA, r1	; 0x8013ea <__flp+0x1>
    56e4:	10 92 e9 13 	sts	0x13E9, r1	; 0x8013e9 <__flp>
    56e8:	02 c0       	rjmp	.+4      	; 0x56ee <free+0x104>
    56ea:	13 82       	std	Z+3, r1	; 0x03
    56ec:	12 82       	std	Z+2, r1	; 0x02
    56ee:	b0 93 e8 13 	sts	0x13E8, r27	; 0x8013e8 <__brkval+0x1>
    56f2:	a0 93 e7 13 	sts	0x13E7, r26	; 0x8013e7 <__brkval>
    56f6:	df 91       	pop	r29
    56f8:	cf 91       	pop	r28
    56fa:	08 95       	ret

000056fc <abort>:
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	f8 94       	cli
    5702:	7d c3       	rjmp	.+1786   	; 0x5dfe <_exit>

00005704 <memcpy>:
    5704:	fb 01       	movw	r30, r22
    5706:	dc 01       	movw	r26, r24
    5708:	02 c0       	rjmp	.+4      	; 0x570e <memcpy+0xa>
    570a:	01 90       	ld	r0, Z+
    570c:	0d 92       	st	X+, r0
    570e:	41 50       	subi	r20, 0x01	; 1
    5710:	50 40       	sbci	r21, 0x00	; 0
    5712:	d8 f7       	brcc	.-10     	; 0x570a <memcpy+0x6>
    5714:	08 95       	ret

00005716 <memset>:
    5716:	dc 01       	movw	r26, r24
    5718:	01 c0       	rjmp	.+2      	; 0x571c <memset+0x6>
    571a:	6d 93       	st	X+, r22
    571c:	41 50       	subi	r20, 0x01	; 1
    571e:	50 40       	sbci	r21, 0x00	; 0
    5720:	e0 f7       	brcc	.-8      	; 0x571a <memset+0x4>
    5722:	08 95       	ret

00005724 <strcasestr>:
    5724:	fb 01       	movw	r30, r22
    5726:	51 91       	ld	r21, Z+
    5728:	55 23       	and	r21, r21
    572a:	b1 f0       	breq	.+44     	; 0x5758 <strcasestr+0x34>
    572c:	bf 01       	movw	r22, r30
    572e:	dc 01       	movw	r26, r24
    5730:	05 2e       	mov	r0, r21
    5732:	4d 91       	ld	r20, X+
    5734:	44 23       	and	r20, r20
    5736:	69 f0       	breq	.+26     	; 0x5752 <strcasestr+0x2e>
    5738:	10 d0       	rcall	.+32     	; 0x575a <strcasestr+0x36>
    573a:	d9 f7       	brne	.-10     	; 0x5732 <strcasestr+0xe>
    573c:	cd 01       	movw	r24, r26
    573e:	01 90       	ld	r0, Z+
    5740:	00 20       	and	r0, r0
    5742:	49 f0       	breq	.+18     	; 0x5756 <strcasestr+0x32>
    5744:	4d 91       	ld	r20, X+
    5746:	41 11       	cpse	r20, r1
    5748:	08 d0       	rcall	.+16     	; 0x575a <strcasestr+0x36>
    574a:	c9 f3       	breq	.-14     	; 0x573e <strcasestr+0x1a>
    574c:	fb 01       	movw	r30, r22
    574e:	41 11       	cpse	r20, r1
    5750:	ee cf       	rjmp	.-36     	; 0x572e <strcasestr+0xa>
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	01 97       	sbiw	r24, 0x01	; 1
    5758:	08 95       	ret
    575a:	40 25       	eor	r20, r0
    575c:	39 f0       	breq	.+14     	; 0x576c <strcasestr+0x48>
    575e:	40 32       	cpi	r20, 0x20	; 32
    5760:	29 f4       	brne	.+10     	; 0x576c <strcasestr+0x48>
    5762:	40 29       	or	r20, r0
    5764:	4b 57       	subi	r20, 0x7B	; 123
    5766:	46 5e       	subi	r20, 0xE6	; 230
    5768:	08 f0       	brcs	.+2      	; 0x576c <strcasestr+0x48>
    576a:	18 94       	sez
    576c:	08 95       	ret

0000576e <strcat>:
    576e:	fb 01       	movw	r30, r22
    5770:	dc 01       	movw	r26, r24
    5772:	0d 90       	ld	r0, X+
    5774:	00 20       	and	r0, r0
    5776:	e9 f7       	brne	.-6      	; 0x5772 <strcat+0x4>
    5778:	11 97       	sbiw	r26, 0x01	; 1
    577a:	01 90       	ld	r0, Z+
    577c:	0d 92       	st	X+, r0
    577e:	00 20       	and	r0, r0
    5780:	e1 f7       	brne	.-8      	; 0x577a <strcat+0xc>
    5782:	08 95       	ret

00005784 <strcpy>:
    5784:	fb 01       	movw	r30, r22
    5786:	dc 01       	movw	r26, r24
    5788:	01 90       	ld	r0, Z+
    578a:	0d 92       	st	X+, r0
    578c:	00 20       	and	r0, r0
    578e:	e1 f7       	brne	.-8      	; 0x5788 <strcpy+0x4>
    5790:	08 95       	ret

00005792 <strncasecmp>:
    5792:	fb 01       	movw	r30, r22
    5794:	dc 01       	movw	r26, r24
    5796:	41 50       	subi	r20, 0x01	; 1
    5798:	50 40       	sbci	r21, 0x00	; 0
    579a:	88 f0       	brcs	.+34     	; 0x57be <strncasecmp+0x2c>
    579c:	8d 91       	ld	r24, X+
    579e:	81 34       	cpi	r24, 0x41	; 65
    57a0:	1c f0       	brlt	.+6      	; 0x57a8 <strncasecmp+0x16>
    57a2:	8b 35       	cpi	r24, 0x5B	; 91
    57a4:	0c f4       	brge	.+2      	; 0x57a8 <strncasecmp+0x16>
    57a6:	80 5e       	subi	r24, 0xE0	; 224
    57a8:	61 91       	ld	r22, Z+
    57aa:	61 34       	cpi	r22, 0x41	; 65
    57ac:	1c f0       	brlt	.+6      	; 0x57b4 <strncasecmp+0x22>
    57ae:	6b 35       	cpi	r22, 0x5B	; 91
    57b0:	0c f4       	brge	.+2      	; 0x57b4 <strncasecmp+0x22>
    57b2:	60 5e       	subi	r22, 0xE0	; 224
    57b4:	86 1b       	sub	r24, r22
    57b6:	61 11       	cpse	r22, r1
    57b8:	71 f3       	breq	.-36     	; 0x5796 <strncasecmp+0x4>
    57ba:	99 0b       	sbc	r25, r25
    57bc:	08 95       	ret
    57be:	88 1b       	sub	r24, r24
    57c0:	fc cf       	rjmp	.-8      	; 0x57ba <strncasecmp+0x28>

000057c2 <printf>:
    57c2:	cf 93       	push	r28
    57c4:	df 93       	push	r29
    57c6:	cd b7       	in	r28, 0x3d	; 61
    57c8:	de b7       	in	r29, 0x3e	; 62
    57ca:	ae 01       	movw	r20, r28
    57cc:	4a 5f       	subi	r20, 0xFA	; 250
    57ce:	5f 4f       	sbci	r21, 0xFF	; 255
    57d0:	fa 01       	movw	r30, r20
    57d2:	61 91       	ld	r22, Z+
    57d4:	71 91       	ld	r23, Z+
    57d6:	af 01       	movw	r20, r30
    57d8:	80 91 ed 13 	lds	r24, 0x13ED	; 0x8013ed <__iob+0x2>
    57dc:	90 91 ee 13 	lds	r25, 0x13EE	; 0x8013ee <__iob+0x3>
    57e0:	61 d0       	rcall	.+194    	; 0x58a4 <vfprintf>
    57e2:	df 91       	pop	r29
    57e4:	cf 91       	pop	r28
    57e6:	08 95       	ret

000057e8 <puts>:
    57e8:	0f 93       	push	r16
    57ea:	1f 93       	push	r17
    57ec:	cf 93       	push	r28
    57ee:	df 93       	push	r29
    57f0:	e0 91 ed 13 	lds	r30, 0x13ED	; 0x8013ed <__iob+0x2>
    57f4:	f0 91 ee 13 	lds	r31, 0x13EE	; 0x8013ee <__iob+0x3>
    57f8:	23 81       	ldd	r18, Z+3	; 0x03
    57fa:	21 ff       	sbrs	r18, 1
    57fc:	1b c0       	rjmp	.+54     	; 0x5834 <puts+0x4c>
    57fe:	8c 01       	movw	r16, r24
    5800:	d0 e0       	ldi	r29, 0x00	; 0
    5802:	c0 e0       	ldi	r28, 0x00	; 0
    5804:	f8 01       	movw	r30, r16
    5806:	81 91       	ld	r24, Z+
    5808:	8f 01       	movw	r16, r30
    580a:	60 91 ed 13 	lds	r22, 0x13ED	; 0x8013ed <__iob+0x2>
    580e:	70 91 ee 13 	lds	r23, 0x13EE	; 0x8013ee <__iob+0x3>
    5812:	db 01       	movw	r26, r22
    5814:	18 96       	adiw	r26, 0x08	; 8
    5816:	ed 91       	ld	r30, X+
    5818:	fc 91       	ld	r31, X
    581a:	19 97       	sbiw	r26, 0x09	; 9
    581c:	88 23       	and	r24, r24
    581e:	31 f0       	breq	.+12     	; 0x582c <puts+0x44>
    5820:	19 95       	eicall
    5822:	89 2b       	or	r24, r25
    5824:	79 f3       	breq	.-34     	; 0x5804 <puts+0x1c>
    5826:	df ef       	ldi	r29, 0xFF	; 255
    5828:	cf ef       	ldi	r28, 0xFF	; 255
    582a:	ec cf       	rjmp	.-40     	; 0x5804 <puts+0x1c>
    582c:	8a e0       	ldi	r24, 0x0A	; 10
    582e:	19 95       	eicall
    5830:	89 2b       	or	r24, r25
    5832:	19 f0       	breq	.+6      	; 0x583a <puts+0x52>
    5834:	8f ef       	ldi	r24, 0xFF	; 255
    5836:	9f ef       	ldi	r25, 0xFF	; 255
    5838:	02 c0       	rjmp	.+4      	; 0x583e <puts+0x56>
    583a:	8d 2f       	mov	r24, r29
    583c:	9c 2f       	mov	r25, r28
    583e:	df 91       	pop	r29
    5840:	cf 91       	pop	r28
    5842:	1f 91       	pop	r17
    5844:	0f 91       	pop	r16
    5846:	08 95       	ret

00005848 <sprintf>:
    5848:	0f 93       	push	r16
    584a:	1f 93       	push	r17
    584c:	cf 93       	push	r28
    584e:	df 93       	push	r29
    5850:	cd b7       	in	r28, 0x3d	; 61
    5852:	de b7       	in	r29, 0x3e	; 62
    5854:	2e 97       	sbiw	r28, 0x0e	; 14
    5856:	0f b6       	in	r0, 0x3f	; 63
    5858:	f8 94       	cli
    585a:	de bf       	out	0x3e, r29	; 62
    585c:	0f be       	out	0x3f, r0	; 63
    585e:	cd bf       	out	0x3d, r28	; 61
    5860:	0e 89       	ldd	r16, Y+22	; 0x16
    5862:	1f 89       	ldd	r17, Y+23	; 0x17
    5864:	86 e0       	ldi	r24, 0x06	; 6
    5866:	8c 83       	std	Y+4, r24	; 0x04
    5868:	1a 83       	std	Y+2, r17	; 0x02
    586a:	09 83       	std	Y+1, r16	; 0x01
    586c:	8f ef       	ldi	r24, 0xFF	; 255
    586e:	9f e7       	ldi	r25, 0x7F	; 127
    5870:	9e 83       	std	Y+6, r25	; 0x06
    5872:	8d 83       	std	Y+5, r24	; 0x05
    5874:	ae 01       	movw	r20, r28
    5876:	46 5e       	subi	r20, 0xE6	; 230
    5878:	5f 4f       	sbci	r21, 0xFF	; 255
    587a:	68 8d       	ldd	r22, Y+24	; 0x18
    587c:	79 8d       	ldd	r23, Y+25	; 0x19
    587e:	ce 01       	movw	r24, r28
    5880:	01 96       	adiw	r24, 0x01	; 1
    5882:	10 d0       	rcall	.+32     	; 0x58a4 <vfprintf>
    5884:	ef 81       	ldd	r30, Y+7	; 0x07
    5886:	f8 85       	ldd	r31, Y+8	; 0x08
    5888:	e0 0f       	add	r30, r16
    588a:	f1 1f       	adc	r31, r17
    588c:	10 82       	st	Z, r1
    588e:	2e 96       	adiw	r28, 0x0e	; 14
    5890:	0f b6       	in	r0, 0x3f	; 63
    5892:	f8 94       	cli
    5894:	de bf       	out	0x3e, r29	; 62
    5896:	0f be       	out	0x3f, r0	; 63
    5898:	cd bf       	out	0x3d, r28	; 61
    589a:	df 91       	pop	r29
    589c:	cf 91       	pop	r28
    589e:	1f 91       	pop	r17
    58a0:	0f 91       	pop	r16
    58a2:	08 95       	ret

000058a4 <vfprintf>:
    58a4:	2f 92       	push	r2
    58a6:	3f 92       	push	r3
    58a8:	4f 92       	push	r4
    58aa:	5f 92       	push	r5
    58ac:	6f 92       	push	r6
    58ae:	7f 92       	push	r7
    58b0:	8f 92       	push	r8
    58b2:	9f 92       	push	r9
    58b4:	af 92       	push	r10
    58b6:	bf 92       	push	r11
    58b8:	cf 92       	push	r12
    58ba:	df 92       	push	r13
    58bc:	ef 92       	push	r14
    58be:	ff 92       	push	r15
    58c0:	0f 93       	push	r16
    58c2:	1f 93       	push	r17
    58c4:	cf 93       	push	r28
    58c6:	df 93       	push	r29
    58c8:	cd b7       	in	r28, 0x3d	; 61
    58ca:	de b7       	in	r29, 0x3e	; 62
    58cc:	2b 97       	sbiw	r28, 0x0b	; 11
    58ce:	0f b6       	in	r0, 0x3f	; 63
    58d0:	f8 94       	cli
    58d2:	de bf       	out	0x3e, r29	; 62
    58d4:	0f be       	out	0x3f, r0	; 63
    58d6:	cd bf       	out	0x3d, r28	; 61
    58d8:	6c 01       	movw	r12, r24
    58da:	7b 01       	movw	r14, r22
    58dc:	8a 01       	movw	r16, r20
    58de:	fc 01       	movw	r30, r24
    58e0:	17 82       	std	Z+7, r1	; 0x07
    58e2:	16 82       	std	Z+6, r1	; 0x06
    58e4:	83 81       	ldd	r24, Z+3	; 0x03
    58e6:	81 ff       	sbrs	r24, 1
    58e8:	bf c1       	rjmp	.+894    	; 0x5c68 <vfprintf+0x3c4>
    58ea:	ce 01       	movw	r24, r28
    58ec:	01 96       	adiw	r24, 0x01	; 1
    58ee:	3c 01       	movw	r6, r24
    58f0:	f6 01       	movw	r30, r12
    58f2:	93 81       	ldd	r25, Z+3	; 0x03
    58f4:	f7 01       	movw	r30, r14
    58f6:	93 fd       	sbrc	r25, 3
    58f8:	85 91       	lpm	r24, Z+
    58fa:	93 ff       	sbrs	r25, 3
    58fc:	81 91       	ld	r24, Z+
    58fe:	7f 01       	movw	r14, r30
    5900:	88 23       	and	r24, r24
    5902:	09 f4       	brne	.+2      	; 0x5906 <vfprintf+0x62>
    5904:	ad c1       	rjmp	.+858    	; 0x5c60 <vfprintf+0x3bc>
    5906:	85 32       	cpi	r24, 0x25	; 37
    5908:	39 f4       	brne	.+14     	; 0x5918 <vfprintf+0x74>
    590a:	93 fd       	sbrc	r25, 3
    590c:	85 91       	lpm	r24, Z+
    590e:	93 ff       	sbrs	r25, 3
    5910:	81 91       	ld	r24, Z+
    5912:	7f 01       	movw	r14, r30
    5914:	85 32       	cpi	r24, 0x25	; 37
    5916:	21 f4       	brne	.+8      	; 0x5920 <vfprintf+0x7c>
    5918:	b6 01       	movw	r22, r12
    591a:	90 e0       	ldi	r25, 0x00	; 0
    591c:	d6 d1       	rcall	.+940    	; 0x5cca <fputc>
    591e:	e8 cf       	rjmp	.-48     	; 0x58f0 <vfprintf+0x4c>
    5920:	91 2c       	mov	r9, r1
    5922:	21 2c       	mov	r2, r1
    5924:	31 2c       	mov	r3, r1
    5926:	ff e1       	ldi	r31, 0x1F	; 31
    5928:	f3 15       	cp	r31, r3
    592a:	d8 f0       	brcs	.+54     	; 0x5962 <vfprintf+0xbe>
    592c:	8b 32       	cpi	r24, 0x2B	; 43
    592e:	79 f0       	breq	.+30     	; 0x594e <vfprintf+0xaa>
    5930:	38 f4       	brcc	.+14     	; 0x5940 <vfprintf+0x9c>
    5932:	80 32       	cpi	r24, 0x20	; 32
    5934:	79 f0       	breq	.+30     	; 0x5954 <vfprintf+0xb0>
    5936:	83 32       	cpi	r24, 0x23	; 35
    5938:	a1 f4       	brne	.+40     	; 0x5962 <vfprintf+0xbe>
    593a:	23 2d       	mov	r18, r3
    593c:	20 61       	ori	r18, 0x10	; 16
    593e:	1d c0       	rjmp	.+58     	; 0x597a <vfprintf+0xd6>
    5940:	8d 32       	cpi	r24, 0x2D	; 45
    5942:	61 f0       	breq	.+24     	; 0x595c <vfprintf+0xb8>
    5944:	80 33       	cpi	r24, 0x30	; 48
    5946:	69 f4       	brne	.+26     	; 0x5962 <vfprintf+0xbe>
    5948:	23 2d       	mov	r18, r3
    594a:	21 60       	ori	r18, 0x01	; 1
    594c:	16 c0       	rjmp	.+44     	; 0x597a <vfprintf+0xd6>
    594e:	83 2d       	mov	r24, r3
    5950:	82 60       	ori	r24, 0x02	; 2
    5952:	38 2e       	mov	r3, r24
    5954:	e3 2d       	mov	r30, r3
    5956:	e4 60       	ori	r30, 0x04	; 4
    5958:	3e 2e       	mov	r3, r30
    595a:	2a c0       	rjmp	.+84     	; 0x59b0 <vfprintf+0x10c>
    595c:	f3 2d       	mov	r31, r3
    595e:	f8 60       	ori	r31, 0x08	; 8
    5960:	1d c0       	rjmp	.+58     	; 0x599c <vfprintf+0xf8>
    5962:	37 fc       	sbrc	r3, 7
    5964:	2d c0       	rjmp	.+90     	; 0x59c0 <vfprintf+0x11c>
    5966:	20 ed       	ldi	r18, 0xD0	; 208
    5968:	28 0f       	add	r18, r24
    596a:	2a 30       	cpi	r18, 0x0A	; 10
    596c:	40 f0       	brcs	.+16     	; 0x597e <vfprintf+0xda>
    596e:	8e 32       	cpi	r24, 0x2E	; 46
    5970:	b9 f4       	brne	.+46     	; 0x59a0 <vfprintf+0xfc>
    5972:	36 fc       	sbrc	r3, 6
    5974:	75 c1       	rjmp	.+746    	; 0x5c60 <vfprintf+0x3bc>
    5976:	23 2d       	mov	r18, r3
    5978:	20 64       	ori	r18, 0x40	; 64
    597a:	32 2e       	mov	r3, r18
    597c:	19 c0       	rjmp	.+50     	; 0x59b0 <vfprintf+0x10c>
    597e:	36 fe       	sbrs	r3, 6
    5980:	06 c0       	rjmp	.+12     	; 0x598e <vfprintf+0xea>
    5982:	8a e0       	ldi	r24, 0x0A	; 10
    5984:	98 9e       	mul	r9, r24
    5986:	20 0d       	add	r18, r0
    5988:	11 24       	eor	r1, r1
    598a:	92 2e       	mov	r9, r18
    598c:	11 c0       	rjmp	.+34     	; 0x59b0 <vfprintf+0x10c>
    598e:	ea e0       	ldi	r30, 0x0A	; 10
    5990:	2e 9e       	mul	r2, r30
    5992:	20 0d       	add	r18, r0
    5994:	11 24       	eor	r1, r1
    5996:	22 2e       	mov	r2, r18
    5998:	f3 2d       	mov	r31, r3
    599a:	f0 62       	ori	r31, 0x20	; 32
    599c:	3f 2e       	mov	r3, r31
    599e:	08 c0       	rjmp	.+16     	; 0x59b0 <vfprintf+0x10c>
    59a0:	8c 36       	cpi	r24, 0x6C	; 108
    59a2:	21 f4       	brne	.+8      	; 0x59ac <vfprintf+0x108>
    59a4:	83 2d       	mov	r24, r3
    59a6:	80 68       	ori	r24, 0x80	; 128
    59a8:	38 2e       	mov	r3, r24
    59aa:	02 c0       	rjmp	.+4      	; 0x59b0 <vfprintf+0x10c>
    59ac:	88 36       	cpi	r24, 0x68	; 104
    59ae:	41 f4       	brne	.+16     	; 0x59c0 <vfprintf+0x11c>
    59b0:	f7 01       	movw	r30, r14
    59b2:	93 fd       	sbrc	r25, 3
    59b4:	85 91       	lpm	r24, Z+
    59b6:	93 ff       	sbrs	r25, 3
    59b8:	81 91       	ld	r24, Z+
    59ba:	7f 01       	movw	r14, r30
    59bc:	81 11       	cpse	r24, r1
    59be:	b3 cf       	rjmp	.-154    	; 0x5926 <vfprintf+0x82>
    59c0:	98 2f       	mov	r25, r24
    59c2:	9f 7d       	andi	r25, 0xDF	; 223
    59c4:	95 54       	subi	r25, 0x45	; 69
    59c6:	93 30       	cpi	r25, 0x03	; 3
    59c8:	28 f4       	brcc	.+10     	; 0x59d4 <vfprintf+0x130>
    59ca:	0c 5f       	subi	r16, 0xFC	; 252
    59cc:	1f 4f       	sbci	r17, 0xFF	; 255
    59ce:	9f e3       	ldi	r25, 0x3F	; 63
    59d0:	99 83       	std	Y+1, r25	; 0x01
    59d2:	0d c0       	rjmp	.+26     	; 0x59ee <vfprintf+0x14a>
    59d4:	83 36       	cpi	r24, 0x63	; 99
    59d6:	31 f0       	breq	.+12     	; 0x59e4 <vfprintf+0x140>
    59d8:	83 37       	cpi	r24, 0x73	; 115
    59da:	71 f0       	breq	.+28     	; 0x59f8 <vfprintf+0x154>
    59dc:	83 35       	cpi	r24, 0x53	; 83
    59de:	09 f0       	breq	.+2      	; 0x59e2 <vfprintf+0x13e>
    59e0:	55 c0       	rjmp	.+170    	; 0x5a8c <vfprintf+0x1e8>
    59e2:	20 c0       	rjmp	.+64     	; 0x5a24 <vfprintf+0x180>
    59e4:	f8 01       	movw	r30, r16
    59e6:	80 81       	ld	r24, Z
    59e8:	89 83       	std	Y+1, r24	; 0x01
    59ea:	0e 5f       	subi	r16, 0xFE	; 254
    59ec:	1f 4f       	sbci	r17, 0xFF	; 255
    59ee:	88 24       	eor	r8, r8
    59f0:	83 94       	inc	r8
    59f2:	91 2c       	mov	r9, r1
    59f4:	53 01       	movw	r10, r6
    59f6:	12 c0       	rjmp	.+36     	; 0x5a1c <vfprintf+0x178>
    59f8:	28 01       	movw	r4, r16
    59fa:	f2 e0       	ldi	r31, 0x02	; 2
    59fc:	4f 0e       	add	r4, r31
    59fe:	51 1c       	adc	r5, r1
    5a00:	f8 01       	movw	r30, r16
    5a02:	a0 80       	ld	r10, Z
    5a04:	b1 80       	ldd	r11, Z+1	; 0x01
    5a06:	36 fe       	sbrs	r3, 6
    5a08:	03 c0       	rjmp	.+6      	; 0x5a10 <vfprintf+0x16c>
    5a0a:	69 2d       	mov	r22, r9
    5a0c:	70 e0       	ldi	r23, 0x00	; 0
    5a0e:	02 c0       	rjmp	.+4      	; 0x5a14 <vfprintf+0x170>
    5a10:	6f ef       	ldi	r22, 0xFF	; 255
    5a12:	7f ef       	ldi	r23, 0xFF	; 255
    5a14:	c5 01       	movw	r24, r10
    5a16:	4e d1       	rcall	.+668    	; 0x5cb4 <strnlen>
    5a18:	4c 01       	movw	r8, r24
    5a1a:	82 01       	movw	r16, r4
    5a1c:	f3 2d       	mov	r31, r3
    5a1e:	ff 77       	andi	r31, 0x7F	; 127
    5a20:	3f 2e       	mov	r3, r31
    5a22:	15 c0       	rjmp	.+42     	; 0x5a4e <vfprintf+0x1aa>
    5a24:	28 01       	movw	r4, r16
    5a26:	22 e0       	ldi	r18, 0x02	; 2
    5a28:	42 0e       	add	r4, r18
    5a2a:	51 1c       	adc	r5, r1
    5a2c:	f8 01       	movw	r30, r16
    5a2e:	a0 80       	ld	r10, Z
    5a30:	b1 80       	ldd	r11, Z+1	; 0x01
    5a32:	36 fe       	sbrs	r3, 6
    5a34:	03 c0       	rjmp	.+6      	; 0x5a3c <vfprintf+0x198>
    5a36:	69 2d       	mov	r22, r9
    5a38:	70 e0       	ldi	r23, 0x00	; 0
    5a3a:	02 c0       	rjmp	.+4      	; 0x5a40 <vfprintf+0x19c>
    5a3c:	6f ef       	ldi	r22, 0xFF	; 255
    5a3e:	7f ef       	ldi	r23, 0xFF	; 255
    5a40:	c5 01       	movw	r24, r10
    5a42:	2d d1       	rcall	.+602    	; 0x5c9e <strnlen_P>
    5a44:	4c 01       	movw	r8, r24
    5a46:	f3 2d       	mov	r31, r3
    5a48:	f0 68       	ori	r31, 0x80	; 128
    5a4a:	3f 2e       	mov	r3, r31
    5a4c:	82 01       	movw	r16, r4
    5a4e:	33 fc       	sbrc	r3, 3
    5a50:	19 c0       	rjmp	.+50     	; 0x5a84 <vfprintf+0x1e0>
    5a52:	82 2d       	mov	r24, r2
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	88 16       	cp	r8, r24
    5a58:	99 06       	cpc	r9, r25
    5a5a:	a0 f4       	brcc	.+40     	; 0x5a84 <vfprintf+0x1e0>
    5a5c:	b6 01       	movw	r22, r12
    5a5e:	80 e2       	ldi	r24, 0x20	; 32
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	33 d1       	rcall	.+614    	; 0x5cca <fputc>
    5a64:	2a 94       	dec	r2
    5a66:	f5 cf       	rjmp	.-22     	; 0x5a52 <vfprintf+0x1ae>
    5a68:	f5 01       	movw	r30, r10
    5a6a:	37 fc       	sbrc	r3, 7
    5a6c:	85 91       	lpm	r24, Z+
    5a6e:	37 fe       	sbrs	r3, 7
    5a70:	81 91       	ld	r24, Z+
    5a72:	5f 01       	movw	r10, r30
    5a74:	b6 01       	movw	r22, r12
    5a76:	90 e0       	ldi	r25, 0x00	; 0
    5a78:	28 d1       	rcall	.+592    	; 0x5cca <fputc>
    5a7a:	21 10       	cpse	r2, r1
    5a7c:	2a 94       	dec	r2
    5a7e:	21 e0       	ldi	r18, 0x01	; 1
    5a80:	82 1a       	sub	r8, r18
    5a82:	91 08       	sbc	r9, r1
    5a84:	81 14       	cp	r8, r1
    5a86:	91 04       	cpc	r9, r1
    5a88:	79 f7       	brne	.-34     	; 0x5a68 <vfprintf+0x1c4>
    5a8a:	e1 c0       	rjmp	.+450    	; 0x5c4e <vfprintf+0x3aa>
    5a8c:	84 36       	cpi	r24, 0x64	; 100
    5a8e:	11 f0       	breq	.+4      	; 0x5a94 <vfprintf+0x1f0>
    5a90:	89 36       	cpi	r24, 0x69	; 105
    5a92:	39 f5       	brne	.+78     	; 0x5ae2 <vfprintf+0x23e>
    5a94:	f8 01       	movw	r30, r16
    5a96:	37 fe       	sbrs	r3, 7
    5a98:	07 c0       	rjmp	.+14     	; 0x5aa8 <vfprintf+0x204>
    5a9a:	60 81       	ld	r22, Z
    5a9c:	71 81       	ldd	r23, Z+1	; 0x01
    5a9e:	82 81       	ldd	r24, Z+2	; 0x02
    5aa0:	93 81       	ldd	r25, Z+3	; 0x03
    5aa2:	0c 5f       	subi	r16, 0xFC	; 252
    5aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    5aa6:	08 c0       	rjmp	.+16     	; 0x5ab8 <vfprintf+0x214>
    5aa8:	60 81       	ld	r22, Z
    5aaa:	71 81       	ldd	r23, Z+1	; 0x01
    5aac:	07 2e       	mov	r0, r23
    5aae:	00 0c       	add	r0, r0
    5ab0:	88 0b       	sbc	r24, r24
    5ab2:	99 0b       	sbc	r25, r25
    5ab4:	0e 5f       	subi	r16, 0xFE	; 254
    5ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ab8:	f3 2d       	mov	r31, r3
    5aba:	ff 76       	andi	r31, 0x6F	; 111
    5abc:	3f 2e       	mov	r3, r31
    5abe:	97 ff       	sbrs	r25, 7
    5ac0:	09 c0       	rjmp	.+18     	; 0x5ad4 <vfprintf+0x230>
    5ac2:	90 95       	com	r25
    5ac4:	80 95       	com	r24
    5ac6:	70 95       	com	r23
    5ac8:	61 95       	neg	r22
    5aca:	7f 4f       	sbci	r23, 0xFF	; 255
    5acc:	8f 4f       	sbci	r24, 0xFF	; 255
    5ace:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad0:	f0 68       	ori	r31, 0x80	; 128
    5ad2:	3f 2e       	mov	r3, r31
    5ad4:	2a e0       	ldi	r18, 0x0A	; 10
    5ad6:	30 e0       	ldi	r19, 0x00	; 0
    5ad8:	a3 01       	movw	r20, r6
    5ada:	33 d1       	rcall	.+614    	; 0x5d42 <__ultoa_invert>
    5adc:	88 2e       	mov	r8, r24
    5ade:	86 18       	sub	r8, r6
    5ae0:	44 c0       	rjmp	.+136    	; 0x5b6a <vfprintf+0x2c6>
    5ae2:	85 37       	cpi	r24, 0x75	; 117
    5ae4:	31 f4       	brne	.+12     	; 0x5af2 <vfprintf+0x24e>
    5ae6:	23 2d       	mov	r18, r3
    5ae8:	2f 7e       	andi	r18, 0xEF	; 239
    5aea:	b2 2e       	mov	r11, r18
    5aec:	2a e0       	ldi	r18, 0x0A	; 10
    5aee:	30 e0       	ldi	r19, 0x00	; 0
    5af0:	25 c0       	rjmp	.+74     	; 0x5b3c <vfprintf+0x298>
    5af2:	93 2d       	mov	r25, r3
    5af4:	99 7f       	andi	r25, 0xF9	; 249
    5af6:	b9 2e       	mov	r11, r25
    5af8:	8f 36       	cpi	r24, 0x6F	; 111
    5afa:	c1 f0       	breq	.+48     	; 0x5b2c <vfprintf+0x288>
    5afc:	18 f4       	brcc	.+6      	; 0x5b04 <vfprintf+0x260>
    5afe:	88 35       	cpi	r24, 0x58	; 88
    5b00:	79 f0       	breq	.+30     	; 0x5b20 <vfprintf+0x27c>
    5b02:	ae c0       	rjmp	.+348    	; 0x5c60 <vfprintf+0x3bc>
    5b04:	80 37       	cpi	r24, 0x70	; 112
    5b06:	19 f0       	breq	.+6      	; 0x5b0e <vfprintf+0x26a>
    5b08:	88 37       	cpi	r24, 0x78	; 120
    5b0a:	21 f0       	breq	.+8      	; 0x5b14 <vfprintf+0x270>
    5b0c:	a9 c0       	rjmp	.+338    	; 0x5c60 <vfprintf+0x3bc>
    5b0e:	e9 2f       	mov	r30, r25
    5b10:	e0 61       	ori	r30, 0x10	; 16
    5b12:	be 2e       	mov	r11, r30
    5b14:	b4 fe       	sbrs	r11, 4
    5b16:	0d c0       	rjmp	.+26     	; 0x5b32 <vfprintf+0x28e>
    5b18:	fb 2d       	mov	r31, r11
    5b1a:	f4 60       	ori	r31, 0x04	; 4
    5b1c:	bf 2e       	mov	r11, r31
    5b1e:	09 c0       	rjmp	.+18     	; 0x5b32 <vfprintf+0x28e>
    5b20:	34 fe       	sbrs	r3, 4
    5b22:	0a c0       	rjmp	.+20     	; 0x5b38 <vfprintf+0x294>
    5b24:	29 2f       	mov	r18, r25
    5b26:	26 60       	ori	r18, 0x06	; 6
    5b28:	b2 2e       	mov	r11, r18
    5b2a:	06 c0       	rjmp	.+12     	; 0x5b38 <vfprintf+0x294>
    5b2c:	28 e0       	ldi	r18, 0x08	; 8
    5b2e:	30 e0       	ldi	r19, 0x00	; 0
    5b30:	05 c0       	rjmp	.+10     	; 0x5b3c <vfprintf+0x298>
    5b32:	20 e1       	ldi	r18, 0x10	; 16
    5b34:	30 e0       	ldi	r19, 0x00	; 0
    5b36:	02 c0       	rjmp	.+4      	; 0x5b3c <vfprintf+0x298>
    5b38:	20 e1       	ldi	r18, 0x10	; 16
    5b3a:	32 e0       	ldi	r19, 0x02	; 2
    5b3c:	f8 01       	movw	r30, r16
    5b3e:	b7 fe       	sbrs	r11, 7
    5b40:	07 c0       	rjmp	.+14     	; 0x5b50 <vfprintf+0x2ac>
    5b42:	60 81       	ld	r22, Z
    5b44:	71 81       	ldd	r23, Z+1	; 0x01
    5b46:	82 81       	ldd	r24, Z+2	; 0x02
    5b48:	93 81       	ldd	r25, Z+3	; 0x03
    5b4a:	0c 5f       	subi	r16, 0xFC	; 252
    5b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b4e:	06 c0       	rjmp	.+12     	; 0x5b5c <vfprintf+0x2b8>
    5b50:	60 81       	ld	r22, Z
    5b52:	71 81       	ldd	r23, Z+1	; 0x01
    5b54:	80 e0       	ldi	r24, 0x00	; 0
    5b56:	90 e0       	ldi	r25, 0x00	; 0
    5b58:	0e 5f       	subi	r16, 0xFE	; 254
    5b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    5b5c:	a3 01       	movw	r20, r6
    5b5e:	f1 d0       	rcall	.+482    	; 0x5d42 <__ultoa_invert>
    5b60:	88 2e       	mov	r8, r24
    5b62:	86 18       	sub	r8, r6
    5b64:	fb 2d       	mov	r31, r11
    5b66:	ff 77       	andi	r31, 0x7F	; 127
    5b68:	3f 2e       	mov	r3, r31
    5b6a:	36 fe       	sbrs	r3, 6
    5b6c:	0d c0       	rjmp	.+26     	; 0x5b88 <vfprintf+0x2e4>
    5b6e:	23 2d       	mov	r18, r3
    5b70:	2e 7f       	andi	r18, 0xFE	; 254
    5b72:	a2 2e       	mov	r10, r18
    5b74:	89 14       	cp	r8, r9
    5b76:	58 f4       	brcc	.+22     	; 0x5b8e <vfprintf+0x2ea>
    5b78:	34 fe       	sbrs	r3, 4
    5b7a:	0b c0       	rjmp	.+22     	; 0x5b92 <vfprintf+0x2ee>
    5b7c:	32 fc       	sbrc	r3, 2
    5b7e:	09 c0       	rjmp	.+18     	; 0x5b92 <vfprintf+0x2ee>
    5b80:	83 2d       	mov	r24, r3
    5b82:	8e 7e       	andi	r24, 0xEE	; 238
    5b84:	a8 2e       	mov	r10, r24
    5b86:	05 c0       	rjmp	.+10     	; 0x5b92 <vfprintf+0x2ee>
    5b88:	b8 2c       	mov	r11, r8
    5b8a:	a3 2c       	mov	r10, r3
    5b8c:	03 c0       	rjmp	.+6      	; 0x5b94 <vfprintf+0x2f0>
    5b8e:	b8 2c       	mov	r11, r8
    5b90:	01 c0       	rjmp	.+2      	; 0x5b94 <vfprintf+0x2f0>
    5b92:	b9 2c       	mov	r11, r9
    5b94:	a4 fe       	sbrs	r10, 4
    5b96:	0f c0       	rjmp	.+30     	; 0x5bb6 <vfprintf+0x312>
    5b98:	fe 01       	movw	r30, r28
    5b9a:	e8 0d       	add	r30, r8
    5b9c:	f1 1d       	adc	r31, r1
    5b9e:	80 81       	ld	r24, Z
    5ba0:	80 33       	cpi	r24, 0x30	; 48
    5ba2:	21 f4       	brne	.+8      	; 0x5bac <vfprintf+0x308>
    5ba4:	9a 2d       	mov	r25, r10
    5ba6:	99 7e       	andi	r25, 0xE9	; 233
    5ba8:	a9 2e       	mov	r10, r25
    5baa:	09 c0       	rjmp	.+18     	; 0x5bbe <vfprintf+0x31a>
    5bac:	a2 fe       	sbrs	r10, 2
    5bae:	06 c0       	rjmp	.+12     	; 0x5bbc <vfprintf+0x318>
    5bb0:	b3 94       	inc	r11
    5bb2:	b3 94       	inc	r11
    5bb4:	04 c0       	rjmp	.+8      	; 0x5bbe <vfprintf+0x31a>
    5bb6:	8a 2d       	mov	r24, r10
    5bb8:	86 78       	andi	r24, 0x86	; 134
    5bba:	09 f0       	breq	.+2      	; 0x5bbe <vfprintf+0x31a>
    5bbc:	b3 94       	inc	r11
    5bbe:	a3 fc       	sbrc	r10, 3
    5bc0:	10 c0       	rjmp	.+32     	; 0x5be2 <vfprintf+0x33e>
    5bc2:	a0 fe       	sbrs	r10, 0
    5bc4:	06 c0       	rjmp	.+12     	; 0x5bd2 <vfprintf+0x32e>
    5bc6:	b2 14       	cp	r11, r2
    5bc8:	80 f4       	brcc	.+32     	; 0x5bea <vfprintf+0x346>
    5bca:	28 0c       	add	r2, r8
    5bcc:	92 2c       	mov	r9, r2
    5bce:	9b 18       	sub	r9, r11
    5bd0:	0d c0       	rjmp	.+26     	; 0x5bec <vfprintf+0x348>
    5bd2:	b2 14       	cp	r11, r2
    5bd4:	58 f4       	brcc	.+22     	; 0x5bec <vfprintf+0x348>
    5bd6:	b6 01       	movw	r22, r12
    5bd8:	80 e2       	ldi	r24, 0x20	; 32
    5bda:	90 e0       	ldi	r25, 0x00	; 0
    5bdc:	76 d0       	rcall	.+236    	; 0x5cca <fputc>
    5bde:	b3 94       	inc	r11
    5be0:	f8 cf       	rjmp	.-16     	; 0x5bd2 <vfprintf+0x32e>
    5be2:	b2 14       	cp	r11, r2
    5be4:	18 f4       	brcc	.+6      	; 0x5bec <vfprintf+0x348>
    5be6:	2b 18       	sub	r2, r11
    5be8:	02 c0       	rjmp	.+4      	; 0x5bee <vfprintf+0x34a>
    5bea:	98 2c       	mov	r9, r8
    5bec:	21 2c       	mov	r2, r1
    5bee:	a4 fe       	sbrs	r10, 4
    5bf0:	0f c0       	rjmp	.+30     	; 0x5c10 <vfprintf+0x36c>
    5bf2:	b6 01       	movw	r22, r12
    5bf4:	80 e3       	ldi	r24, 0x30	; 48
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	68 d0       	rcall	.+208    	; 0x5cca <fputc>
    5bfa:	a2 fe       	sbrs	r10, 2
    5bfc:	16 c0       	rjmp	.+44     	; 0x5c2a <vfprintf+0x386>
    5bfe:	a1 fc       	sbrc	r10, 1
    5c00:	03 c0       	rjmp	.+6      	; 0x5c08 <vfprintf+0x364>
    5c02:	88 e7       	ldi	r24, 0x78	; 120
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	02 c0       	rjmp	.+4      	; 0x5c0c <vfprintf+0x368>
    5c08:	88 e5       	ldi	r24, 0x58	; 88
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	b6 01       	movw	r22, r12
    5c0e:	0c c0       	rjmp	.+24     	; 0x5c28 <vfprintf+0x384>
    5c10:	8a 2d       	mov	r24, r10
    5c12:	86 78       	andi	r24, 0x86	; 134
    5c14:	51 f0       	breq	.+20     	; 0x5c2a <vfprintf+0x386>
    5c16:	a1 fe       	sbrs	r10, 1
    5c18:	02 c0       	rjmp	.+4      	; 0x5c1e <vfprintf+0x37a>
    5c1a:	8b e2       	ldi	r24, 0x2B	; 43
    5c1c:	01 c0       	rjmp	.+2      	; 0x5c20 <vfprintf+0x37c>
    5c1e:	80 e2       	ldi	r24, 0x20	; 32
    5c20:	a7 fc       	sbrc	r10, 7
    5c22:	8d e2       	ldi	r24, 0x2D	; 45
    5c24:	b6 01       	movw	r22, r12
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	50 d0       	rcall	.+160    	; 0x5cca <fputc>
    5c2a:	89 14       	cp	r8, r9
    5c2c:	30 f4       	brcc	.+12     	; 0x5c3a <vfprintf+0x396>
    5c2e:	b6 01       	movw	r22, r12
    5c30:	80 e3       	ldi	r24, 0x30	; 48
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	4a d0       	rcall	.+148    	; 0x5cca <fputc>
    5c36:	9a 94       	dec	r9
    5c38:	f8 cf       	rjmp	.-16     	; 0x5c2a <vfprintf+0x386>
    5c3a:	8a 94       	dec	r8
    5c3c:	f3 01       	movw	r30, r6
    5c3e:	e8 0d       	add	r30, r8
    5c40:	f1 1d       	adc	r31, r1
    5c42:	80 81       	ld	r24, Z
    5c44:	b6 01       	movw	r22, r12
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	40 d0       	rcall	.+128    	; 0x5cca <fputc>
    5c4a:	81 10       	cpse	r8, r1
    5c4c:	f6 cf       	rjmp	.-20     	; 0x5c3a <vfprintf+0x396>
    5c4e:	22 20       	and	r2, r2
    5c50:	09 f4       	brne	.+2      	; 0x5c54 <vfprintf+0x3b0>
    5c52:	4e ce       	rjmp	.-868    	; 0x58f0 <vfprintf+0x4c>
    5c54:	b6 01       	movw	r22, r12
    5c56:	80 e2       	ldi	r24, 0x20	; 32
    5c58:	90 e0       	ldi	r25, 0x00	; 0
    5c5a:	37 d0       	rcall	.+110    	; 0x5cca <fputc>
    5c5c:	2a 94       	dec	r2
    5c5e:	f7 cf       	rjmp	.-18     	; 0x5c4e <vfprintf+0x3aa>
    5c60:	f6 01       	movw	r30, r12
    5c62:	86 81       	ldd	r24, Z+6	; 0x06
    5c64:	97 81       	ldd	r25, Z+7	; 0x07
    5c66:	02 c0       	rjmp	.+4      	; 0x5c6c <vfprintf+0x3c8>
    5c68:	8f ef       	ldi	r24, 0xFF	; 255
    5c6a:	9f ef       	ldi	r25, 0xFF	; 255
    5c6c:	2b 96       	adiw	r28, 0x0b	; 11
    5c6e:	0f b6       	in	r0, 0x3f	; 63
    5c70:	f8 94       	cli
    5c72:	de bf       	out	0x3e, r29	; 62
    5c74:	0f be       	out	0x3f, r0	; 63
    5c76:	cd bf       	out	0x3d, r28	; 61
    5c78:	df 91       	pop	r29
    5c7a:	cf 91       	pop	r28
    5c7c:	1f 91       	pop	r17
    5c7e:	0f 91       	pop	r16
    5c80:	ff 90       	pop	r15
    5c82:	ef 90       	pop	r14
    5c84:	df 90       	pop	r13
    5c86:	cf 90       	pop	r12
    5c88:	bf 90       	pop	r11
    5c8a:	af 90       	pop	r10
    5c8c:	9f 90       	pop	r9
    5c8e:	8f 90       	pop	r8
    5c90:	7f 90       	pop	r7
    5c92:	6f 90       	pop	r6
    5c94:	5f 90       	pop	r5
    5c96:	4f 90       	pop	r4
    5c98:	3f 90       	pop	r3
    5c9a:	2f 90       	pop	r2
    5c9c:	08 95       	ret

00005c9e <strnlen_P>:
    5c9e:	fc 01       	movw	r30, r24
    5ca0:	05 90       	lpm	r0, Z+
    5ca2:	61 50       	subi	r22, 0x01	; 1
    5ca4:	70 40       	sbci	r23, 0x00	; 0
    5ca6:	01 10       	cpse	r0, r1
    5ca8:	d8 f7       	brcc	.-10     	; 0x5ca0 <strnlen_P+0x2>
    5caa:	80 95       	com	r24
    5cac:	90 95       	com	r25
    5cae:	8e 0f       	add	r24, r30
    5cb0:	9f 1f       	adc	r25, r31
    5cb2:	08 95       	ret

00005cb4 <strnlen>:
    5cb4:	fc 01       	movw	r30, r24
    5cb6:	61 50       	subi	r22, 0x01	; 1
    5cb8:	70 40       	sbci	r23, 0x00	; 0
    5cba:	01 90       	ld	r0, Z+
    5cbc:	01 10       	cpse	r0, r1
    5cbe:	d8 f7       	brcc	.-10     	; 0x5cb6 <strnlen+0x2>
    5cc0:	80 95       	com	r24
    5cc2:	90 95       	com	r25
    5cc4:	8e 0f       	add	r24, r30
    5cc6:	9f 1f       	adc	r25, r31
    5cc8:	08 95       	ret

00005cca <fputc>:
    5cca:	0f 93       	push	r16
    5ccc:	1f 93       	push	r17
    5cce:	cf 93       	push	r28
    5cd0:	df 93       	push	r29
    5cd2:	fb 01       	movw	r30, r22
    5cd4:	23 81       	ldd	r18, Z+3	; 0x03
    5cd6:	21 fd       	sbrc	r18, 1
    5cd8:	03 c0       	rjmp	.+6      	; 0x5ce0 <fputc+0x16>
    5cda:	8f ef       	ldi	r24, 0xFF	; 255
    5cdc:	9f ef       	ldi	r25, 0xFF	; 255
    5cde:	2c c0       	rjmp	.+88     	; 0x5d38 <fputc+0x6e>
    5ce0:	22 ff       	sbrs	r18, 2
    5ce2:	16 c0       	rjmp	.+44     	; 0x5d10 <fputc+0x46>
    5ce4:	46 81       	ldd	r20, Z+6	; 0x06
    5ce6:	57 81       	ldd	r21, Z+7	; 0x07
    5ce8:	24 81       	ldd	r18, Z+4	; 0x04
    5cea:	35 81       	ldd	r19, Z+5	; 0x05
    5cec:	42 17       	cp	r20, r18
    5cee:	53 07       	cpc	r21, r19
    5cf0:	44 f4       	brge	.+16     	; 0x5d02 <fputc+0x38>
    5cf2:	a0 81       	ld	r26, Z
    5cf4:	b1 81       	ldd	r27, Z+1	; 0x01
    5cf6:	9d 01       	movw	r18, r26
    5cf8:	2f 5f       	subi	r18, 0xFF	; 255
    5cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    5cfc:	31 83       	std	Z+1, r19	; 0x01
    5cfe:	20 83       	st	Z, r18
    5d00:	8c 93       	st	X, r24
    5d02:	26 81       	ldd	r18, Z+6	; 0x06
    5d04:	37 81       	ldd	r19, Z+7	; 0x07
    5d06:	2f 5f       	subi	r18, 0xFF	; 255
    5d08:	3f 4f       	sbci	r19, 0xFF	; 255
    5d0a:	37 83       	std	Z+7, r19	; 0x07
    5d0c:	26 83       	std	Z+6, r18	; 0x06
    5d0e:	14 c0       	rjmp	.+40     	; 0x5d38 <fputc+0x6e>
    5d10:	8b 01       	movw	r16, r22
    5d12:	ec 01       	movw	r28, r24
    5d14:	fb 01       	movw	r30, r22
    5d16:	00 84       	ldd	r0, Z+8	; 0x08
    5d18:	f1 85       	ldd	r31, Z+9	; 0x09
    5d1a:	e0 2d       	mov	r30, r0
    5d1c:	19 95       	eicall
    5d1e:	89 2b       	or	r24, r25
    5d20:	e1 f6       	brne	.-72     	; 0x5cda <fputc+0x10>
    5d22:	d8 01       	movw	r26, r16
    5d24:	16 96       	adiw	r26, 0x06	; 6
    5d26:	8d 91       	ld	r24, X+
    5d28:	9c 91       	ld	r25, X
    5d2a:	17 97       	sbiw	r26, 0x07	; 7
    5d2c:	01 96       	adiw	r24, 0x01	; 1
    5d2e:	17 96       	adiw	r26, 0x07	; 7
    5d30:	9c 93       	st	X, r25
    5d32:	8e 93       	st	-X, r24
    5d34:	16 97       	sbiw	r26, 0x06	; 6
    5d36:	ce 01       	movw	r24, r28
    5d38:	df 91       	pop	r29
    5d3a:	cf 91       	pop	r28
    5d3c:	1f 91       	pop	r17
    5d3e:	0f 91       	pop	r16
    5d40:	08 95       	ret

00005d42 <__ultoa_invert>:
    5d42:	fa 01       	movw	r30, r20
    5d44:	aa 27       	eor	r26, r26
    5d46:	28 30       	cpi	r18, 0x08	; 8
    5d48:	51 f1       	breq	.+84     	; 0x5d9e <__ultoa_invert+0x5c>
    5d4a:	20 31       	cpi	r18, 0x10	; 16
    5d4c:	81 f1       	breq	.+96     	; 0x5dae <__ultoa_invert+0x6c>
    5d4e:	e8 94       	clt
    5d50:	6f 93       	push	r22
    5d52:	6e 7f       	andi	r22, 0xFE	; 254
    5d54:	6e 5f       	subi	r22, 0xFE	; 254
    5d56:	7f 4f       	sbci	r23, 0xFF	; 255
    5d58:	8f 4f       	sbci	r24, 0xFF	; 255
    5d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d5c:	af 4f       	sbci	r26, 0xFF	; 255
    5d5e:	b1 e0       	ldi	r27, 0x01	; 1
    5d60:	3e d0       	rcall	.+124    	; 0x5dde <__ultoa_invert+0x9c>
    5d62:	b4 e0       	ldi	r27, 0x04	; 4
    5d64:	3c d0       	rcall	.+120    	; 0x5dde <__ultoa_invert+0x9c>
    5d66:	67 0f       	add	r22, r23
    5d68:	78 1f       	adc	r23, r24
    5d6a:	89 1f       	adc	r24, r25
    5d6c:	9a 1f       	adc	r25, r26
    5d6e:	a1 1d       	adc	r26, r1
    5d70:	68 0f       	add	r22, r24
    5d72:	79 1f       	adc	r23, r25
    5d74:	8a 1f       	adc	r24, r26
    5d76:	91 1d       	adc	r25, r1
    5d78:	a1 1d       	adc	r26, r1
    5d7a:	6a 0f       	add	r22, r26
    5d7c:	71 1d       	adc	r23, r1
    5d7e:	81 1d       	adc	r24, r1
    5d80:	91 1d       	adc	r25, r1
    5d82:	a1 1d       	adc	r26, r1
    5d84:	20 d0       	rcall	.+64     	; 0x5dc6 <__ultoa_invert+0x84>
    5d86:	09 f4       	brne	.+2      	; 0x5d8a <__ultoa_invert+0x48>
    5d88:	68 94       	set
    5d8a:	3f 91       	pop	r19
    5d8c:	2a e0       	ldi	r18, 0x0A	; 10
    5d8e:	26 9f       	mul	r18, r22
    5d90:	11 24       	eor	r1, r1
    5d92:	30 19       	sub	r19, r0
    5d94:	30 5d       	subi	r19, 0xD0	; 208
    5d96:	31 93       	st	Z+, r19
    5d98:	de f6       	brtc	.-74     	; 0x5d50 <__ultoa_invert+0xe>
    5d9a:	cf 01       	movw	r24, r30
    5d9c:	08 95       	ret
    5d9e:	46 2f       	mov	r20, r22
    5da0:	47 70       	andi	r20, 0x07	; 7
    5da2:	40 5d       	subi	r20, 0xD0	; 208
    5da4:	41 93       	st	Z+, r20
    5da6:	b3 e0       	ldi	r27, 0x03	; 3
    5da8:	0f d0       	rcall	.+30     	; 0x5dc8 <__ultoa_invert+0x86>
    5daa:	c9 f7       	brne	.-14     	; 0x5d9e <__ultoa_invert+0x5c>
    5dac:	f6 cf       	rjmp	.-20     	; 0x5d9a <__ultoa_invert+0x58>
    5dae:	46 2f       	mov	r20, r22
    5db0:	4f 70       	andi	r20, 0x0F	; 15
    5db2:	40 5d       	subi	r20, 0xD0	; 208
    5db4:	4a 33       	cpi	r20, 0x3A	; 58
    5db6:	18 f0       	brcs	.+6      	; 0x5dbe <__ultoa_invert+0x7c>
    5db8:	49 5d       	subi	r20, 0xD9	; 217
    5dba:	31 fd       	sbrc	r19, 1
    5dbc:	40 52       	subi	r20, 0x20	; 32
    5dbe:	41 93       	st	Z+, r20
    5dc0:	02 d0       	rcall	.+4      	; 0x5dc6 <__ultoa_invert+0x84>
    5dc2:	a9 f7       	brne	.-22     	; 0x5dae <__ultoa_invert+0x6c>
    5dc4:	ea cf       	rjmp	.-44     	; 0x5d9a <__ultoa_invert+0x58>
    5dc6:	b4 e0       	ldi	r27, 0x04	; 4
    5dc8:	a6 95       	lsr	r26
    5dca:	97 95       	ror	r25
    5dcc:	87 95       	ror	r24
    5dce:	77 95       	ror	r23
    5dd0:	67 95       	ror	r22
    5dd2:	ba 95       	dec	r27
    5dd4:	c9 f7       	brne	.-14     	; 0x5dc8 <__ultoa_invert+0x86>
    5dd6:	00 97       	sbiw	r24, 0x00	; 0
    5dd8:	61 05       	cpc	r22, r1
    5dda:	71 05       	cpc	r23, r1
    5ddc:	08 95       	ret
    5dde:	9b 01       	movw	r18, r22
    5de0:	ac 01       	movw	r20, r24
    5de2:	0a 2e       	mov	r0, r26
    5de4:	06 94       	lsr	r0
    5de6:	57 95       	ror	r21
    5de8:	47 95       	ror	r20
    5dea:	37 95       	ror	r19
    5dec:	27 95       	ror	r18
    5dee:	ba 95       	dec	r27
    5df0:	c9 f7       	brne	.-14     	; 0x5de4 <__ultoa_invert+0xa2>
    5df2:	62 0f       	add	r22, r18
    5df4:	73 1f       	adc	r23, r19
    5df6:	84 1f       	adc	r24, r20
    5df8:	95 1f       	adc	r25, r21
    5dfa:	a0 1d       	adc	r26, r0
    5dfc:	08 95       	ret

00005dfe <_exit>:
    5dfe:	f8 94       	cli

00005e00 <__stop_program>:
    5e00:	ff cf       	rjmp	.-2      	; 0x5e00 <__stop_program>
