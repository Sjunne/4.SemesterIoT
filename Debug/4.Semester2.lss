
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006be  00800200  00006428  000064bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001097  008008be  008008be  00006b7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006b7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab0  00000000  00000000  00006c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d6ea  00000000  00000000  000076c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035d0  00000000  00000000  00014db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006cc3  00000000  00000000  00018382  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025f8  00000000  00000000  0001f048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000402b  00000000  00000000  00021640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b94a  00000000  00000000  0002566b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e8  00000000  00000000  00030fb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c4       	rjmp	.+2280   	; 0x91a <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__vector_25>
      68:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f1 25 	jmp	0x4be2	; 0x4be2 <__vector_36>
      94:	0c 94 43 26 	jmp	0x4c86	; 0x4c86 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 8f 2a 	jmp	0x551e	; 0x551e <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 87 26 	jmp	0x4d0e	; 0x4d0e <__vector_51>
      d0:	0c 94 d9 26 	jmp	0x4db2	; 0x4db2 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 1d 27 	jmp	0x4e3a	; 0x4e3a <__vector_54>
      dc:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	37 19       	sub	r19, r7
      e6:	37 19       	sub	r19, r7
      e8:	37 19       	sub	r19, r7
      ea:	6e 19       	sub	r22, r14
      ec:	76 19       	sub	r23, r6
      ee:	8b 19       	sub	r24, r11
      f0:	37 19       	sub	r19, r7
      f2:	37 19       	sub	r19, r7
      f4:	6e 19       	sub	r22, r14
      f6:	76 19       	sub	r23, r6
      f8:	b1 2a       	or	r11, r17
      fa:	21 2b       	or	r18, r17
      fc:	21 2b       	or	r18, r17
      fe:	21 2b       	or	r18, r17
     100:	21 2b       	or	r18, r17
     102:	21 2b       	or	r18, r17
     104:	21 2b       	or	r18, r17
     106:	21 2b       	or	r18, r17
     108:	b1 2a       	or	r11, r17
     10a:	21 2b       	or	r18, r17
     10c:	21 2b       	or	r18, r17
     10e:	21 2b       	or	r18, r17
     110:	21 2b       	or	r18, r17
     112:	21 2b       	or	r18, r17
     114:	21 2b       	or	r18, r17
     116:	21 2b       	or	r18, r17
     118:	b3 2a       	or	r11, r19
     11a:	21 2b       	or	r18, r17
     11c:	21 2b       	or	r18, r17
     11e:	21 2b       	or	r18, r17
     120:	21 2b       	or	r18, r17
     122:	21 2b       	or	r18, r17
     124:	21 2b       	or	r18, r17
     126:	21 2b       	or	r18, r17
     128:	21 2b       	or	r18, r17
     12a:	21 2b       	or	r18, r17
     12c:	21 2b       	or	r18, r17
     12e:	21 2b       	or	r18, r17
     130:	21 2b       	or	r18, r17
     132:	21 2b       	or	r18, r17
     134:	21 2b       	or	r18, r17
     136:	21 2b       	or	r18, r17
     138:	b3 2a       	or	r11, r19
     13a:	21 2b       	or	r18, r17
     13c:	21 2b       	or	r18, r17
     13e:	21 2b       	or	r18, r17
     140:	21 2b       	or	r18, r17
     142:	21 2b       	or	r18, r17
     144:	21 2b       	or	r18, r17
     146:	21 2b       	or	r18, r17
     148:	21 2b       	or	r18, r17
     14a:	21 2b       	or	r18, r17
     14c:	21 2b       	or	r18, r17
     14e:	21 2b       	or	r18, r17
     150:	21 2b       	or	r18, r17
     152:	21 2b       	or	r18, r17
     154:	21 2b       	or	r18, r17
     156:	21 2b       	or	r18, r17
     158:	1d 2b       	or	r17, r29
     15a:	21 2b       	or	r18, r17
     15c:	21 2b       	or	r18, r17
     15e:	21 2b       	or	r18, r17
     160:	21 2b       	or	r18, r17
     162:	21 2b       	or	r18, r17
     164:	21 2b       	or	r18, r17
     166:	21 2b       	or	r18, r17
     168:	e8 2a       	or	r14, r24
     16a:	21 2b       	or	r18, r17
     16c:	21 2b       	or	r18, r17
     16e:	21 2b       	or	r18, r17
     170:	21 2b       	or	r18, r17
     172:	21 2b       	or	r18, r17
     174:	21 2b       	or	r18, r17
     176:	21 2b       	or	r18, r17
     178:	21 2b       	or	r18, r17
     17a:	21 2b       	or	r18, r17
     17c:	21 2b       	or	r18, r17
     17e:	21 2b       	or	r18, r17
     180:	21 2b       	or	r18, r17
     182:	21 2b       	or	r18, r17
     184:	21 2b       	or	r18, r17
     186:	21 2b       	or	r18, r17
     188:	dc 2a       	or	r13, r28
     18a:	21 2b       	or	r18, r17
     18c:	21 2b       	or	r18, r17
     18e:	21 2b       	or	r18, r17
     190:	21 2b       	or	r18, r17
     192:	21 2b       	or	r18, r17
     194:	21 2b       	or	r18, r17
     196:	21 2b       	or	r18, r17
     198:	00 2b       	or	r16, r16

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 87 0c 	call	0x190e	; 0x190e <prvCheckTasksWaitingTermination>
     19e:	80 91 cb 16 	lds	r24, 0x16CB	; 0x8016cb <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	f3 d2       	rcall	.+1510   	; 0x78e <vPortYield>
     1a8:	0e 94 b4 19 	call	0x3368	; 0x3368 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 a9 18 	call	0x3152	; 0x3152 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 00 19 	call	0x3200	; 0x3200 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e8 e2       	ldi	r30, 0x28	; 40
     1e4:	f4 e6       	ldi	r31, 0x64	; 100
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ae 3b       	cpi	r26, 0xBE	; 190
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	29 e1       	ldi	r18, 0x19	; 25
     1f8:	ae eb       	ldi	r26, 0xBE	; 190
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a5 35       	cpi	r26, 0x55	; 85
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <main>
     20a:	0c 94 12 32 	jmp	0x6424	; 0x6424 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <initializeSharedDataQueue>:
SharedData receiveSharedData;
SharedData sharedData;

void initializeSharedDataQueue()
{
	xQueueShared = xQueueCreate(5, sizeof(SharedData));
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	66 e0       	ldi	r22, 0x06	; 6
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	b0 d4       	rcall	.+2400   	; 0xb78 <xQueueGenericCreate>
     218:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <xQueueShared+0x1>
     21c:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <xQueueShared>
     220:	08 95       	ret

00000222 <enqueueSharedData>:
}

void enqueueSharedData()
{
     222:	cf 92       	push	r12
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
			
	int counter = 0;
	
	uint16_t co2 = 0;
	int16_t temp = 0;
	uint16_t hum = 0;
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	10 e0       	ldi	r17, 0x00	; 0
	TickType_t xDelay = 25 / portTICK_PERIOD_MS;
			
	int counter = 0;
	
	uint16_t co2 = 0;
	int16_t temp = 0;
     236:	e1 2c       	mov	r14, r1
     238:	f1 2c       	mov	r15, r1
{
	TickType_t xDelay = 25 / portTICK_PERIOD_MS;
			
	int counter = 0;
	
	uint16_t co2 = 0;
     23a:	c1 2c       	mov	r12, r1
     23c:	d1 2c       	mov	r13, r1

void enqueueSharedData()
{
	TickType_t xDelay = 25 / portTICK_PERIOD_MS;
			
	int counter = 0;
     23e:	c0 e0       	ldi	r28, 0x00	; 0
     240:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t hum = 0;
	
	int co2res = 0;
	int tempres = 0;
	int humres = 0;
	while (counter < 10) {
     242:	1f c0       	rjmp	.+62     	; 0x282 <enqueueSharedData+0x60>
		co2 += dequeueCO2Measure();
     244:	0e 94 23 1a 	call	0x3446	; 0x3446 <dequeueCO2Measure>
     248:	c8 0e       	add	r12, r24
     24a:	d9 1e       	adc	r13, r25
		vTaskDelay(xDelay);
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 53 10 	call	0x20a6	; 0x20a6 <vTaskDelay>
		temp += dequeueTempMeasure();
     258:	0e 94 23 1b 	call	0x3646	; 0x3646 <dequeueTempMeasure>
     25c:	e8 0e       	add	r14, r24
     25e:	f9 1e       	adc	r15, r25
		vTaskDelay(xDelay);
     260:	61 e0       	ldi	r22, 0x01	; 1
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 53 10 	call	0x20a6	; 0x20a6 <vTaskDelay>
		hum += dequeueHumidityMeasure();
     26c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <dequeueHumidityMeasure>
     270:	08 0f       	add	r16, r24
     272:	19 1f       	adc	r17, r25
		vTaskDelay(xDelay);
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <vTaskDelay>
		counter++;
     280:	21 96       	adiw	r28, 0x01	; 1
	uint16_t hum = 0;
	
	int co2res = 0;
	int tempres = 0;
	int humres = 0;
	while (counter < 10) {
     282:	ca 30       	cpi	r28, 0x0A	; 10
     284:	d1 05       	cpc	r29, r1
     286:	f4 f2       	brlt	.-68     	; 0x244 <enqueueSharedData+0x22>
		vTaskDelay(xDelay);
		hum += dequeueHumidityMeasure();
		vTaskDelay(xDelay);
		counter++;
	}
	co2res = (co2 / (counter + 1));
     288:	21 96       	adiw	r28, 0x01	; 1
     28a:	c6 01       	movw	r24, r12
     28c:	be 01       	movw	r22, r28
     28e:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <__udivmodhi4>
     292:	26 2f       	mov	r18, r22
     294:	37 2f       	mov	r19, r23
	co2 = (uint16_t) co2res;
	
	tempres = (temp / (counter + 1));
     296:	c7 01       	movw	r24, r14
     298:	be 01       	movw	r22, r28
     29a:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <__divmodhi4>
     29e:	46 2f       	mov	r20, r22
     2a0:	f7 2e       	mov	r15, r23
	temp = (int16_t) tempres;
	
	humres = (hum / (counter + 1));
     2a2:	c8 01       	movw	r24, r16
     2a4:	be 01       	movw	r22, r28
     2a6:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <__udivmodhi4>
	hum = (uint16_t) humres;

	SharedData_t shared = &sharedData;
	shared->co2 = co2;
     2aa:	e5 e3       	ldi	r30, 0x35	; 53
     2ac:	f9 e1       	ldi	r31, 0x19	; 25
     2ae:	20 83       	st	Z, r18
     2b0:	31 83       	std	Z+1, r19	; 0x01
	shared->temperature = temp;
     2b2:	42 83       	std	Z+2, r20	; 0x02
     2b4:	f3 82       	std	Z+3, r15	; 0x03
	shared->humidity = hum;
     2b6:	64 83       	std	Z+4, r22	; 0x04
     2b8:	75 83       	std	Z+5, r23	; 0x05
	
	sprintf(printstring, "ENQUEUE: humidity: %d, co2: %d, Temp: %d \n", hum, co2, temp);
     2ba:	ff 92       	push	r15
     2bc:	4f 93       	push	r20
     2be:	3f 93       	push	r19
     2c0:	2f 93       	push	r18
     2c2:	7f 93       	push	r23
     2c4:	6f 93       	push	r22
     2c6:	8f e6       	ldi	r24, 0x6F	; 111
     2c8:	92 e0       	ldi	r25, 0x02	; 2
     2ca:	9f 93       	push	r25
     2cc:	8f 93       	push	r24
     2ce:	81 ed       	ldi	r24, 0xD1	; 209
     2d0:	98 e1       	ldi	r25, 0x18	; 24
     2d2:	9f 93       	push	r25
     2d4:	8f 93       	push	r24
     2d6:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
	test_outprint(printstring);
     2da:	81 ed       	ldi	r24, 0xD1	; 209
     2dc:	98 e1       	ldi	r25, 0x18	; 24
     2de:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <test_outprint>

	xQueueSend(xQueueShared, (void*)&sharedData, portMAX_DELAY);
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	2f ef       	ldi	r18, 0xFF	; 255
     2e6:	3f ef       	ldi	r19, 0xFF	; 255
     2e8:	a9 01       	movw	r20, r18
     2ea:	65 e3       	ldi	r22, 0x35	; 53
     2ec:	79 e1       	ldi	r23, 0x19	; 25
     2ee:	80 91 3b 19 	lds	r24, 0x193B	; 0x80193b <xQueueShared>
     2f2:	90 91 3c 19 	lds	r25, 0x193C	; 0x80193c <xQueueShared+0x1>
     2f6:	63 d4       	rcall	.+2246   	; 0xbbe <xQueueGenericSend>

}
     2f8:	8d b7       	in	r24, 0x3d	; 61
     2fa:	9e b7       	in	r25, 0x3e	; 62
     2fc:	0a 96       	adiw	r24, 0x0a	; 10
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	9e bf       	out	0x3e, r25	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	8d bf       	out	0x3d, r24	; 61
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	08 95       	ret

0000031a <dequeueSharedData>:

SharedData_t dequeueSharedData() {
	SharedData_t data = &receiveSharedData;
	xQueueReceive(xQueueShared, &receiveSharedData, (TickType_t) 10);
     31a:	2a e0       	ldi	r18, 0x0A	; 10
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	6d e3       	ldi	r22, 0x3D	; 61
     324:	79 e1       	ldi	r23, 0x19	; 25
     326:	80 91 3b 19 	lds	r24, 0x193B	; 0x80193b <xQueueShared>
     32a:	90 91 3c 19 	lds	r25, 0x193C	; 0x80193c <xQueueShared+0x1>
     32e:	14 d5       	rcall	.+2600   	; 0xd58 <xQueueReceive>
	return data;
}
     330:	8d e3       	ldi	r24, 0x3D	; 61
     332:	99 e1       	ldi	r25, 0x19	; 25
     334:	08 95       	ret

00000336 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     336:	ea ec       	ldi	r30, 0xCA	; 202
     338:	f8 e0       	ldi	r31, 0x08	; 8
     33a:	ae ec       	ldi	r26, 0xCE	; 206
     33c:	b8 e0       	ldi	r27, 0x08	; 8
     33e:	b1 83       	std	Z+1, r27	; 0x01
     340:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     342:	13 82       	std	Z+3, r1	; 0x03
     344:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     346:	e6 e7       	ldi	r30, 0x76	; 118
     348:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     34a:	f0 93 c9 08 	sts	0x08C9, r31	; 0x8008c9 <pxEnd+0x1>
     34e:	e0 93 c8 08 	sts	0x08C8, r30	; 0x8008c8 <pxEnd>
    pxEnd->xBlockSize = 0;
     352:	13 82       	std	Z+3, r1	; 0x03
     354:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     356:	11 82       	std	Z+1, r1	; 0x01
     358:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     35a:	88 ea       	ldi	r24, 0xA8	; 168
     35c:	9d e0       	ldi	r25, 0x0D	; 13
     35e:	13 96       	adiw	r26, 0x03	; 3
     360:	9c 93       	st	X, r25
     362:	8e 93       	st	-X, r24
     364:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     366:	ed 93       	st	X+, r30
     368:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     36a:	90 93 c5 08 	sts	0x08C5, r25	; 0x8008c5 <xMinimumEverFreeBytesRemaining+0x1>
     36e:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     372:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <xFreeBytesRemaining+0x1>
     376:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e8       	ldi	r25, 0x80	; 128
     37e:	90 93 bf 08 	sts	0x08BF, r25	; 0x8008bf <__data_end+0x1>
     382:	80 93 be 08 	sts	0x08BE, r24	; 0x8008be <__data_end>
     386:	08 95       	ret

00000388 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     38e:	aa ec       	ldi	r26, 0xCA	; 202
     390:	b8 e0       	ldi	r27, 0x08	; 8
     392:	01 c0       	rjmp	.+2      	; 0x396 <prvInsertBlockIntoFreeList+0xe>
     394:	df 01       	movw	r26, r30
     396:	ed 91       	ld	r30, X+
     398:	fc 91       	ld	r31, X
     39a:	11 97       	sbiw	r26, 0x01	; 1
     39c:	ec 17       	cp	r30, r28
     39e:	fd 07       	cpc	r31, r29
     3a0:	c8 f3       	brcs	.-14     	; 0x394 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     3a2:	12 96       	adiw	r26, 0x02	; 2
     3a4:	8d 91       	ld	r24, X+
     3a6:	9c 91       	ld	r25, X
     3a8:	13 97       	sbiw	r26, 0x03	; 3
     3aa:	9d 01       	movw	r18, r26
     3ac:	28 0f       	add	r18, r24
     3ae:	39 1f       	adc	r19, r25
     3b0:	c2 17       	cp	r28, r18
     3b2:	d3 07       	cpc	r29, r19
     3b4:	49 f4       	brne	.+18     	; 0x3c8 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     3b6:	2a 81       	ldd	r18, Y+2	; 0x02
     3b8:	3b 81       	ldd	r19, Y+3	; 0x03
     3ba:	82 0f       	add	r24, r18
     3bc:	93 1f       	adc	r25, r19
     3be:	13 96       	adiw	r26, 0x03	; 3
     3c0:	9c 93       	st	X, r25
     3c2:	8e 93       	st	-X, r24
     3c4:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     3c6:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     3c8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ca:	9b 81       	ldd	r25, Y+3	; 0x03
     3cc:	9e 01       	movw	r18, r28
     3ce:	28 0f       	add	r18, r24
     3d0:	39 1f       	adc	r19, r25
     3d2:	e2 17       	cp	r30, r18
     3d4:	f3 07       	cpc	r31, r19
     3d6:	c1 f4       	brne	.+48     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     3d8:	20 91 c8 08 	lds	r18, 0x08C8	; 0x8008c8 <pxEnd>
     3dc:	30 91 c9 08 	lds	r19, 0x08C9	; 0x8008c9 <pxEnd+0x1>
     3e0:	e2 17       	cp	r30, r18
     3e2:	f3 07       	cpc	r31, r19
     3e4:	71 f0       	breq	.+28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     3e6:	22 81       	ldd	r18, Z+2	; 0x02
     3e8:	33 81       	ldd	r19, Z+3	; 0x03
     3ea:	82 0f       	add	r24, r18
     3ec:	93 1f       	adc	r25, r19
     3ee:	9b 83       	std	Y+3, r25	; 0x03
     3f0:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     3f2:	ed 91       	ld	r30, X+
     3f4:	fc 91       	ld	r31, X
     3f6:	11 97       	sbiw	r26, 0x01	; 1
     3f8:	80 81       	ld	r24, Z
     3fa:	91 81       	ldd	r25, Z+1	; 0x01
     3fc:	99 83       	std	Y+1, r25	; 0x01
     3fe:	88 83       	st	Y, r24
     400:	05 c0       	rjmp	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     402:	39 83       	std	Y+1, r19	; 0x01
     404:	28 83       	st	Y, r18
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     408:	f9 83       	std	Y+1, r31	; 0x01
     40a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     40c:	ca 17       	cp	r28, r26
     40e:	db 07       	cpc	r29, r27
     410:	11 f0       	breq	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     412:	cd 93       	st	X+, r28
     414:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     42a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     42e:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <pxEnd>
     432:	90 91 c9 08 	lds	r25, 0x08C9	; 0x8008c9 <pxEnd+0x1>
     436:	89 2b       	or	r24, r25
     438:	09 f4       	brne	.+2      	; 0x43c <pvPortMalloc+0x20>
        {
            prvHeapInit();
     43a:	7d df       	rcall	.-262    	; 0x336 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     43c:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <__data_end>
     440:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <__data_end+0x1>
     444:	80 23       	and	r24, r16
     446:	91 23       	and	r25, r17
     448:	89 2b       	or	r24, r25
     44a:	09 f0       	breq	.+2      	; 0x44e <pvPortMalloc+0x32>
     44c:	76 c0       	rjmp	.+236    	; 0x53a <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     44e:	01 15       	cp	r16, r1
     450:	11 05       	cpc	r17, r1
     452:	49 f0       	breq	.+18     	; 0x466 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     454:	c8 01       	movw	r24, r16
     456:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     458:	08 17       	cp	r16, r24
     45a:	19 07       	cpc	r17, r25
     45c:	18 f0       	brcs	.+6      	; 0x464 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     45e:	00 e0       	ldi	r16, 0x00	; 0
     460:	10 e0       	ldi	r17, 0x00	; 0
     462:	01 c0       	rjmp	.+2      	; 0x466 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     464:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     466:	01 15       	cp	r16, r1
     468:	11 05       	cpc	r17, r1
     46a:	09 f4       	brne	.+2      	; 0x46e <pvPortMalloc+0x52>
     46c:	69 c0       	rjmp	.+210    	; 0x540 <pvPortMalloc+0x124>
     46e:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <xFreeBytesRemaining>
     472:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <xFreeBytesRemaining+0x1>
     476:	80 17       	cp	r24, r16
     478:	91 07       	cpc	r25, r17
     47a:	08 f4       	brcc	.+2      	; 0x47e <pvPortMalloc+0x62>
     47c:	64 c0       	rjmp	.+200    	; 0x546 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     47e:	c0 91 ca 08 	lds	r28, 0x08CA	; 0x8008ca <xStart>
     482:	d0 91 cb 08 	lds	r29, 0x08CB	; 0x8008cb <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     486:	ea ec       	ldi	r30, 0xCA	; 202
     488:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     48a:	02 c0       	rjmp	.+4      	; 0x490 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     48c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     48e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     490:	8a 81       	ldd	r24, Y+2	; 0x02
     492:	9b 81       	ldd	r25, Y+3	; 0x03
     494:	80 17       	cp	r24, r16
     496:	91 07       	cpc	r25, r17
     498:	20 f4       	brcc	.+8      	; 0x4a2 <pvPortMalloc+0x86>
     49a:	88 81       	ld	r24, Y
     49c:	99 81       	ldd	r25, Y+1	; 0x01
     49e:	00 97       	sbiw	r24, 0x00	; 0
     4a0:	a9 f7       	brne	.-22     	; 0x48c <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     4a2:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <pxEnd>
     4a6:	90 91 c9 08 	lds	r25, 0x08C9	; 0x8008c9 <pxEnd+0x1>
     4aa:	c8 17       	cp	r28, r24
     4ac:	d9 07       	cpc	r29, r25
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <pvPortMalloc+0x96>
     4b0:	4d c0       	rjmp	.+154    	; 0x54c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     4b2:	e0 80       	ld	r14, Z
     4b4:	f1 80       	ldd	r15, Z+1	; 0x01
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	e8 0e       	add	r14, r24
     4ba:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     4bc:	88 81       	ld	r24, Y
     4be:	99 81       	ldd	r25, Y+1	; 0x01
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4c4:	2a 81       	ldd	r18, Y+2	; 0x02
     4c6:	3b 81       	ldd	r19, Y+3	; 0x03
     4c8:	20 1b       	sub	r18, r16
     4ca:	31 0b       	sbc	r19, r17
     4cc:	29 30       	cpi	r18, 0x09	; 9
     4ce:	31 05       	cpc	r19, r1
     4d0:	48 f0       	brcs	.+18     	; 0x4e4 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     4d2:	ce 01       	movw	r24, r28
     4d4:	80 0f       	add	r24, r16
     4d6:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     4d8:	fc 01       	movw	r30, r24
     4da:	33 83       	std	Z+3, r19	; 0x03
     4dc:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     4de:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     4e0:	0a 83       	std	Y+2, r16	; 0x02
     4e2:	52 df       	rcall	.-348    	; 0x388 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     4e4:	2a 81       	ldd	r18, Y+2	; 0x02
     4e6:	3b 81       	ldd	r19, Y+3	; 0x03
     4e8:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <xFreeBytesRemaining>
     4ec:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <xFreeBytesRemaining+0x1>
     4f0:	82 1b       	sub	r24, r18
     4f2:	93 0b       	sbc	r25, r19
     4f4:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <xFreeBytesRemaining+0x1>
     4f8:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     4fc:	40 91 c4 08 	lds	r20, 0x08C4	; 0x8008c4 <xMinimumEverFreeBytesRemaining>
     500:	50 91 c5 08 	lds	r21, 0x08C5	; 0x8008c5 <xMinimumEverFreeBytesRemaining+0x1>
     504:	84 17       	cp	r24, r20
     506:	95 07       	cpc	r25, r21
     508:	20 f4       	brcc	.+8      	; 0x512 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     50a:	90 93 c5 08 	sts	0x08C5, r25	; 0x8008c5 <xMinimumEverFreeBytesRemaining+0x1>
     50e:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     512:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <__data_end>
     516:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <__data_end+0x1>
     51a:	28 2b       	or	r18, r24
     51c:	39 2b       	or	r19, r25
     51e:	3b 83       	std	Y+3, r19	; 0x03
     520:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     522:	19 82       	std	Y+1, r1	; 0x01
     524:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     526:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <xNumberOfSuccessfulAllocations>
     52a:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <xNumberOfSuccessfulAllocations+0x1>
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	90 93 c3 08 	sts	0x08C3, r25	; 0x8008c3 <xNumberOfSuccessfulAllocations+0x1>
     534:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <xNumberOfSuccessfulAllocations>
     538:	0b c0       	rjmp	.+22     	; 0x550 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     53a:	e1 2c       	mov	r14, r1
     53c:	f1 2c       	mov	r15, r1
     53e:	08 c0       	rjmp	.+16     	; 0x550 <pvPortMalloc+0x134>
     540:	e1 2c       	mov	r14, r1
     542:	f1 2c       	mov	r15, r1
     544:	05 c0       	rjmp	.+10     	; 0x550 <pvPortMalloc+0x134>
     546:	e1 2c       	mov	r14, r1
     548:	f1 2c       	mov	r15, r1
     54a:	02 c0       	rjmp	.+4      	; 0x550 <pvPortMalloc+0x134>
     54c:	e1 2c       	mov	r14, r1
     54e:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     550:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     554:	e1 14       	cp	r14, r1
     556:	f1 04       	cpc	r15, r1
     558:	11 f4       	brne	.+4      	; 0x55e <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     55a:	0e 94 c0 19 	call	0x3380	; 0x3380 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     55e:	c7 01       	movw	r24, r14
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	08 95       	ret

0000056e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     576:	00 97       	sbiw	r24, 0x00	; 0
     578:	91 f1       	breq	.+100    	; 0x5de <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     57a:	ec 01       	movw	r28, r24
     57c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     57e:	4a 81       	ldd	r20, Y+2	; 0x02
     580:	5b 81       	ldd	r21, Y+3	; 0x03
     582:	20 91 be 08 	lds	r18, 0x08BE	; 0x8008be <__data_end>
     586:	30 91 bf 08 	lds	r19, 0x08BF	; 0x8008bf <__data_end+0x1>
     58a:	ba 01       	movw	r22, r20
     58c:	62 23       	and	r22, r18
     58e:	73 23       	and	r23, r19
     590:	67 2b       	or	r22, r23
     592:	29 f1       	breq	.+74     	; 0x5de <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     594:	68 81       	ld	r22, Y
     596:	79 81       	ldd	r23, Y+1	; 0x01
     598:	67 2b       	or	r22, r23
     59a:	09 f5       	brne	.+66     	; 0x5de <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     59c:	20 95       	com	r18
     59e:	30 95       	com	r19
     5a0:	24 23       	and	r18, r20
     5a2:	35 23       	and	r19, r21
     5a4:	3b 83       	std	Y+3, r19	; 0x03
     5a6:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     5a8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	9b 81       	ldd	r25, Y+3	; 0x03
     5b0:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <xFreeBytesRemaining>
     5b4:	30 91 c7 08 	lds	r19, 0x08C7	; 0x8008c7 <xFreeBytesRemaining+0x1>
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <xFreeBytesRemaining+0x1>
     5c0:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5c4:	ce 01       	movw	r24, r28
     5c6:	e0 de       	rcall	.-576    	; 0x388 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     5c8:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <xNumberOfSuccessfulFrees>
     5cc:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <xNumberOfSuccessfulFrees+0x1>
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <xNumberOfSuccessfulFrees+0x1>
     5d6:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     5da:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	08 95       	ret

000005e8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    return xFreeBytesRemaining;
}
     5e8:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <xFreeBytesRemaining>
     5ec:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <xFreeBytesRemaining+0x1>
     5f0:	08 95       	ret

000005f2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     5f2:	fc 01       	movw	r30, r24
     5f4:	03 96       	adiw	r24, 0x03	; 3
     5f6:	92 83       	std	Z+2, r25	; 0x02
     5f8:	81 83       	std	Z+1, r24	; 0x01
     5fa:	4f ef       	ldi	r20, 0xFF	; 255
     5fc:	5f ef       	ldi	r21, 0xFF	; 255
     5fe:	ba 01       	movw	r22, r20
     600:	43 83       	std	Z+3, r20	; 0x03
     602:	54 83       	std	Z+4, r21	; 0x04
     604:	65 83       	std	Z+5, r22	; 0x05
     606:	76 83       	std	Z+6, r23	; 0x06
     608:	90 87       	std	Z+8, r25	; 0x08
     60a:	87 83       	std	Z+7, r24	; 0x07
     60c:	92 87       	std	Z+10, r25	; 0x0a
     60e:	81 87       	std	Z+9, r24	; 0x09
     610:	10 82       	st	Z, r1
     612:	08 95       	ret

00000614 <vListInitialiseItem>:
     614:	fc 01       	movw	r30, r24
     616:	13 86       	std	Z+11, r1	; 0x0b
     618:	12 86       	std	Z+10, r1	; 0x0a
     61a:	08 95       	ret

0000061c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     626:	08 81       	ld	r16, Y
     628:	19 81       	ldd	r17, Y+1	; 0x01
     62a:	2a 81       	ldd	r18, Y+2	; 0x02
     62c:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     62e:	0f 3f       	cpi	r16, 0xFF	; 255
     630:	4f ef       	ldi	r20, 0xFF	; 255
     632:	14 07       	cpc	r17, r20
     634:	24 07       	cpc	r18, r20
     636:	34 07       	cpc	r19, r20
     638:	21 f4       	brne	.+8      	; 0x642 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     63a:	fc 01       	movw	r30, r24
     63c:	a1 85       	ldd	r26, Z+9	; 0x09
     63e:	b2 85       	ldd	r27, Z+10	; 0x0a
     640:	11 c0       	rjmp	.+34     	; 0x664 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     642:	dc 01       	movw	r26, r24
     644:	13 96       	adiw	r26, 0x03	; 3
     646:	01 c0       	rjmp	.+2      	; 0x64a <vListInsert+0x2e>
     648:	df 01       	movw	r26, r30
     64a:	14 96       	adiw	r26, 0x04	; 4
     64c:	ed 91       	ld	r30, X+
     64e:	fc 91       	ld	r31, X
     650:	15 97       	sbiw	r26, 0x05	; 5
     652:	40 81       	ld	r20, Z
     654:	51 81       	ldd	r21, Z+1	; 0x01
     656:	62 81       	ldd	r22, Z+2	; 0x02
     658:	73 81       	ldd	r23, Z+3	; 0x03
     65a:	04 17       	cp	r16, r20
     65c:	15 07       	cpc	r17, r21
     65e:	26 07       	cpc	r18, r22
     660:	37 07       	cpc	r19, r23
     662:	90 f7       	brcc	.-28     	; 0x648 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     664:	14 96       	adiw	r26, 0x04	; 4
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	15 97       	sbiw	r26, 0x05	; 5
     66c:	fd 83       	std	Y+5, r31	; 0x05
     66e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     670:	d7 83       	std	Z+7, r29	; 0x07
     672:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     674:	bf 83       	std	Y+7, r27	; 0x07
     676:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     678:	15 96       	adiw	r26, 0x05	; 5
     67a:	dc 93       	st	X, r29
     67c:	ce 93       	st	-X, r28
     67e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     680:	9b 87       	std	Y+11, r25	; 0x0b
     682:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     684:	fc 01       	movw	r30, r24
     686:	20 81       	ld	r18, Z
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	20 83       	st	Z, r18
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     69c:	a2 85       	ldd	r26, Z+10	; 0x0a
     69e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6a0:	c4 81       	ldd	r28, Z+4	; 0x04
     6a2:	d5 81       	ldd	r29, Z+5	; 0x05
     6a4:	86 81       	ldd	r24, Z+6	; 0x06
     6a6:	97 81       	ldd	r25, Z+7	; 0x07
     6a8:	9f 83       	std	Y+7, r25	; 0x07
     6aa:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6ac:	c6 81       	ldd	r28, Z+6	; 0x06
     6ae:	d7 81       	ldd	r29, Z+7	; 0x07
     6b0:	84 81       	ldd	r24, Z+4	; 0x04
     6b2:	95 81       	ldd	r25, Z+5	; 0x05
     6b4:	9d 83       	std	Y+5, r25	; 0x05
     6b6:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     6b8:	11 96       	adiw	r26, 0x01	; 1
     6ba:	8d 91       	ld	r24, X+
     6bc:	9c 91       	ld	r25, X
     6be:	12 97       	sbiw	r26, 0x02	; 2
     6c0:	e8 17       	cp	r30, r24
     6c2:	f9 07       	cpc	r31, r25
     6c4:	31 f4       	brne	.+12     	; 0x6d2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6c6:	86 81       	ldd	r24, Z+6	; 0x06
     6c8:	97 81       	ldd	r25, Z+7	; 0x07
     6ca:	12 96       	adiw	r26, 0x02	; 2
     6cc:	9c 93       	st	X, r25
     6ce:	8e 93       	st	-X, r24
     6d0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6d2:	13 86       	std	Z+11, r1	; 0x0b
     6d4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     6d6:	8c 91       	ld	r24, X
     6d8:	81 50       	subi	r24, 0x01	; 1
     6da:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     6dc:	8c 91       	ld	r24, X
}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     6e4:	a8 95       	wdr
     6e6:	90 ec       	ldi	r25, 0xC0	; 192
     6e8:	88 e1       	ldi	r24, 0x18	; 24
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	a8 95       	wdr
     6f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6fa:	08 95       	ret

000006fc <pxPortInitialiseStack>:
     6fc:	fc 01       	movw	r30, r24
     6fe:	60 83       	st	Z, r22
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	70 83       	st	Z, r23
     704:	31 97       	sbiw	r30, 0x01	; 1
     706:	10 82       	st	Z, r1
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	10 82       	st	Z, r1
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	20 e8       	ldi	r18, 0x80	; 128
     710:	20 83       	st	Z, r18
     712:	31 97       	sbiw	r30, 0x01	; 1
     714:	10 82       	st	Z, r1
     716:	31 97       	sbiw	r30, 0x01	; 1
     718:	10 82       	st	Z, r1
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	10 82       	st	Z, r1
     71e:	77 97       	sbiw	r30, 0x17	; 23
     720:	40 83       	st	Z, r20
     722:	31 97       	sbiw	r30, 0x01	; 1
     724:	50 83       	st	Z, r21
     726:	86 97       	sbiw	r24, 0x26	; 38
     728:	08 95       	ret

0000072a <xPortStartScheduler>:
     72a:	dc df       	rcall	.-72     	; 0x6e4 <prvSetupTimerInterrupt>
     72c:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
     730:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
     734:	cd 91       	ld	r28, X+
     736:	cd bf       	out	0x3d, r28	; 61
     738:	dd 91       	ld	r29, X+
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	ff 91       	pop	r31
     73e:	ef 91       	pop	r30
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	bf 90       	pop	r11
     766:	af 90       	pop	r10
     768:	9f 90       	pop	r9
     76a:	8f 90       	pop	r8
     76c:	7f 90       	pop	r7
     76e:	6f 90       	pop	r6
     770:	5f 90       	pop	r5
     772:	4f 90       	pop	r4
     774:	3f 90       	pop	r3
     776:	2f 90       	pop	r2
     778:	1f 90       	pop	r1
     77a:	0f 90       	pop	r0
     77c:	0c be       	out	0x3c, r0	; 60
     77e:	0f 90       	pop	r0
     780:	0b be       	out	0x3b, r0	; 59
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	08 95       	ret
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	08 95       	ret

0000078e <vPortYield>:
     78e:	0f 92       	push	r0
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	0f 92       	push	r0
     796:	0b b6       	in	r0, 0x3b	; 59
     798:	0f 92       	push	r0
     79a:	0c b6       	in	r0, 0x3c	; 60
     79c:	0f 92       	push	r0
     79e:	1f 92       	push	r1
     7a0:	11 24       	eor	r1, r1
     7a2:	2f 92       	push	r2
     7a4:	3f 92       	push	r3
     7a6:	4f 92       	push	r4
     7a8:	5f 92       	push	r5
     7aa:	6f 92       	push	r6
     7ac:	7f 92       	push	r7
     7ae:	8f 92       	push	r8
     7b0:	9f 92       	push	r9
     7b2:	af 92       	push	r10
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	2f 93       	push	r18
     7c4:	3f 93       	push	r19
     7c6:	4f 93       	push	r20
     7c8:	5f 93       	push	r21
     7ca:	6f 93       	push	r22
     7cc:	7f 93       	push	r23
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	af 93       	push	r26
     7d4:	bf 93       	push	r27
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ef 93       	push	r30
     7dc:	ff 93       	push	r31
     7de:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
     7e2:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
     7e6:	0d b6       	in	r0, 0x3d	; 61
     7e8:	0d 92       	st	X+, r0
     7ea:	0e b6       	in	r0, 0x3e	; 62
     7ec:	0d 92       	st	X+, r0
     7ee:	0e 94 6e 10 	call	0x20dc	; 0x20dc <vTaskSwitchContext>
     7f2:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
     7f6:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
     7fa:	cd 91       	ld	r28, X+
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	dd 91       	ld	r29, X+
     800:	de bf       	out	0x3e, r29	; 62
     802:	ff 91       	pop	r31
     804:	ef 91       	pop	r30
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	bf 91       	pop	r27
     80c:	af 91       	pop	r26
     80e:	9f 91       	pop	r25
     810:	8f 91       	pop	r24
     812:	7f 91       	pop	r23
     814:	6f 91       	pop	r22
     816:	5f 91       	pop	r21
     818:	4f 91       	pop	r20
     81a:	3f 91       	pop	r19
     81c:	2f 91       	pop	r18
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	df 90       	pop	r13
     828:	cf 90       	pop	r12
     82a:	bf 90       	pop	r11
     82c:	af 90       	pop	r10
     82e:	9f 90       	pop	r9
     830:	8f 90       	pop	r8
     832:	7f 90       	pop	r7
     834:	6f 90       	pop	r6
     836:	5f 90       	pop	r5
     838:	4f 90       	pop	r4
     83a:	3f 90       	pop	r3
     83c:	2f 90       	pop	r2
     83e:	1f 90       	pop	r1
     840:	0f 90       	pop	r0
     842:	0c be       	out	0x3c, r0	; 60
     844:	0f 90       	pop	r0
     846:	0b be       	out	0x3b, r0	; 59
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	08 95       	ret

00000850 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	0f 92       	push	r0
     858:	0b b6       	in	r0, 0x3b	; 59
     85a:	0f 92       	push	r0
     85c:	0c b6       	in	r0, 0x3c	; 60
     85e:	0f 92       	push	r0
     860:	1f 92       	push	r1
     862:	11 24       	eor	r1, r1
     864:	2f 92       	push	r2
     866:	3f 92       	push	r3
     868:	4f 92       	push	r4
     86a:	5f 92       	push	r5
     86c:	6f 92       	push	r6
     86e:	7f 92       	push	r7
     870:	8f 92       	push	r8
     872:	9f 92       	push	r9
     874:	af 92       	push	r10
     876:	bf 92       	push	r11
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	2f 93       	push	r18
     886:	3f 93       	push	r19
     888:	4f 93       	push	r20
     88a:	5f 93       	push	r21
     88c:	6f 93       	push	r22
     88e:	7f 93       	push	r23
     890:	8f 93       	push	r24
     892:	9f 93       	push	r25
     894:	af 93       	push	r26
     896:	bf 93       	push	r27
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	ef 93       	push	r30
     89e:	ff 93       	push	r31
     8a0:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
     8a4:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
     8a8:	0d b6       	in	r0, 0x3d	; 61
     8aa:	0d 92       	st	X+, r0
     8ac:	0e b6       	in	r0, 0x3e	; 62
     8ae:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     8b0:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     8b2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <xTaskIncrementTick>
     8b6:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     8b8:	0e 94 6e 10 	call	0x20dc	; 0x20dc <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     8bc:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
     8c0:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
     8c4:	cd 91       	ld	r28, X+
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	dd 91       	ld	r29, X+
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	ff 91       	pop	r31
     8ce:	ef 91       	pop	r30
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	bf 91       	pop	r27
     8d6:	af 91       	pop	r26
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	7f 91       	pop	r23
     8de:	6f 91       	pop	r22
     8e0:	5f 91       	pop	r21
     8e2:	4f 91       	pop	r20
     8e4:	3f 91       	pop	r19
     8e6:	2f 91       	pop	r18
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	df 90       	pop	r13
     8f2:	cf 90       	pop	r12
     8f4:	bf 90       	pop	r11
     8f6:	af 90       	pop	r10
     8f8:	9f 90       	pop	r9
     8fa:	8f 90       	pop	r8
     8fc:	7f 90       	pop	r7
     8fe:	6f 90       	pop	r6
     900:	5f 90       	pop	r5
     902:	4f 90       	pop	r4
     904:	3f 90       	pop	r3
     906:	2f 90       	pop	r2
     908:	1f 90       	pop	r1
     90a:	0f 90       	pop	r0
     90c:	0c be       	out	0x3c, r0	; 60
     90e:	0f 90       	pop	r0
     910:	0b be       	out	0x3b, r0	; 59
     912:	0f 90       	pop	r0
     914:	0f be       	out	0x3f, r0	; 63
     916:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     918:	08 95       	ret

0000091a <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     91a:	9a df       	rcall	.-204    	; 0x850 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     91c:	18 95       	reti

0000091e <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     91e:	dc 01       	movw	r26, r24
     920:	53 96       	adiw	r26, 0x13	; 19
     922:	2c 91       	ld	r18, X
     924:	53 97       	sbiw	r26, 0x13	; 19
     926:	22 23       	and	r18, r18
     928:	41 f0       	breq	.+16     	; 0x93a <prvGetDisinheritPriorityAfterTimeout+0x1c>
     92a:	5a 96       	adiw	r26, 0x1a	; 26
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	5b 97       	sbiw	r26, 0x1b	; 27
     932:	90 81       	ld	r25, Z
     934:	8a e0       	ldi	r24, 0x0A	; 10
     936:	89 1b       	sub	r24, r25
     938:	08 95       	ret
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	08 95       	ret

0000093e <prvIsQueueEmpty>:
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	0f 92       	push	r0
     944:	fc 01       	movw	r30, r24
     946:	86 8d       	ldd	r24, Z+30	; 0x1e
     948:	81 11       	cpse	r24, r1
     94a:	02 c0       	rjmp	.+4      	; 0x950 <prvIsQueueEmpty+0x12>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	01 c0       	rjmp	.+2      	; 0x952 <prvIsQueueEmpty+0x14>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0f 90       	pop	r0
     954:	0f be       	out	0x3f, r0	; 63
     956:	08 95       	ret

00000958 <prvIsQueueFull>:
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	0f 92       	push	r0
     95e:	fc 01       	movw	r30, r24
     960:	26 8d       	ldd	r18, Z+30	; 0x1e
     962:	87 8d       	ldd	r24, Z+31	; 0x1f
     964:	28 13       	cpse	r18, r24
     966:	02 c0       	rjmp	.+4      	; 0x96c <prvIsQueueFull+0x14>
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	01 c0       	rjmp	.+2      	; 0x96e <prvIsQueueFull+0x16>
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	0f 90       	pop	r0
     970:	0f be       	out	0x3f, r0	; 63
     972:	08 95       	ret

00000974 <prvCopyDataToQueue>:
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	ec 01       	movw	r28, r24
     97e:	04 2f       	mov	r16, r20
     980:	1e 8d       	ldd	r17, Y+30	; 0x1e
     982:	48 a1       	ldd	r20, Y+32	; 0x20
     984:	41 11       	cpse	r20, r1
     986:	0c c0       	rjmp	.+24     	; 0x9a0 <prvCopyDataToQueue+0x2c>
     988:	88 81       	ld	r24, Y
     98a:	99 81       	ldd	r25, Y+1	; 0x01
     98c:	89 2b       	or	r24, r25
     98e:	09 f0       	breq	.+2      	; 0x992 <prvCopyDataToQueue+0x1e>
     990:	42 c0       	rjmp	.+132    	; 0xa16 <prvCopyDataToQueue+0xa2>
     992:	8c 81       	ldd	r24, Y+4	; 0x04
     994:	9d 81       	ldd	r25, Y+5	; 0x05
     996:	0e 94 06 13 	call	0x260c	; 0x260c <xTaskPriorityDisinherit>
     99a:	1d 82       	std	Y+5, r1	; 0x05
     99c:	1c 82       	std	Y+4, r1	; 0x04
     99e:	42 c0       	rjmp	.+132    	; 0xa24 <prvCopyDataToQueue+0xb0>
     9a0:	01 11       	cpse	r16, r1
     9a2:	17 c0       	rjmp	.+46     	; 0x9d2 <prvCopyDataToQueue+0x5e>
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	8a 81       	ldd	r24, Y+2	; 0x02
     9a8:	9b 81       	ldd	r25, Y+3	; 0x03
     9aa:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
     9ae:	28 a1       	ldd	r18, Y+32	; 0x20
     9b0:	8a 81       	ldd	r24, Y+2	; 0x02
     9b2:	9b 81       	ldd	r25, Y+3	; 0x03
     9b4:	82 0f       	add	r24, r18
     9b6:	91 1d       	adc	r25, r1
     9b8:	9b 83       	std	Y+3, r25	; 0x03
     9ba:	8a 83       	std	Y+2, r24	; 0x02
     9bc:	2c 81       	ldd	r18, Y+4	; 0x04
     9be:	3d 81       	ldd	r19, Y+5	; 0x05
     9c0:	82 17       	cp	r24, r18
     9c2:	93 07       	cpc	r25, r19
     9c4:	50 f1       	brcs	.+84     	; 0xa1a <prvCopyDataToQueue+0xa6>
     9c6:	88 81       	ld	r24, Y
     9c8:	99 81       	ldd	r25, Y+1	; 0x01
     9ca:	9b 83       	std	Y+3, r25	; 0x03
     9cc:	8a 83       	std	Y+2, r24	; 0x02
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	29 c0       	rjmp	.+82     	; 0xa24 <prvCopyDataToQueue+0xb0>
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	9f 81       	ldd	r25, Y+7	; 0x07
     9d8:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
     9dc:	88 a1       	ldd	r24, Y+32	; 0x20
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	91 95       	neg	r25
     9e2:	81 95       	neg	r24
     9e4:	91 09       	sbc	r25, r1
     9e6:	2e 81       	ldd	r18, Y+6	; 0x06
     9e8:	3f 81       	ldd	r19, Y+7	; 0x07
     9ea:	28 0f       	add	r18, r24
     9ec:	39 1f       	adc	r19, r25
     9ee:	3f 83       	std	Y+7, r19	; 0x07
     9f0:	2e 83       	std	Y+6, r18	; 0x06
     9f2:	48 81       	ld	r20, Y
     9f4:	59 81       	ldd	r21, Y+1	; 0x01
     9f6:	24 17       	cp	r18, r20
     9f8:	35 07       	cpc	r19, r21
     9fa:	30 f4       	brcc	.+12     	; 0xa08 <prvCopyDataToQueue+0x94>
     9fc:	2c 81       	ldd	r18, Y+4	; 0x04
     9fe:	3d 81       	ldd	r19, Y+5	; 0x05
     a00:	82 0f       	add	r24, r18
     a02:	93 1f       	adc	r25, r19
     a04:	9f 83       	std	Y+7, r25	; 0x07
     a06:	8e 83       	std	Y+6, r24	; 0x06
     a08:	02 30       	cpi	r16, 0x02	; 2
     a0a:	49 f4       	brne	.+18     	; 0xa1e <prvCopyDataToQueue+0xaa>
     a0c:	11 23       	and	r17, r17
     a0e:	49 f0       	breq	.+18     	; 0xa22 <prvCopyDataToQueue+0xae>
     a10:	11 50       	subi	r17, 0x01	; 1
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	07 c0       	rjmp	.+14     	; 0xa24 <prvCopyDataToQueue+0xb0>
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <prvCopyDataToQueue+0xb0>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	03 c0       	rjmp	.+6      	; 0xa24 <prvCopyDataToQueue+0xb0>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <prvCopyDataToQueue+0xb0>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	1f 5f       	subi	r17, 0xFF	; 255
     a26:	1e 8f       	std	Y+30, r17	; 0x1e
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <prvCopyDataFromQueue>:
     a32:	fc 01       	movw	r30, r24
     a34:	40 a1       	ldd	r20, Z+32	; 0x20
     a36:	44 23       	and	r20, r20
     a38:	a9 f0       	breq	.+42     	; 0xa64 <prvCopyDataFromQueue+0x32>
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	26 81       	ldd	r18, Z+6	; 0x06
     a3e:	37 81       	ldd	r19, Z+7	; 0x07
     a40:	24 0f       	add	r18, r20
     a42:	35 1f       	adc	r19, r21
     a44:	37 83       	std	Z+7, r19	; 0x07
     a46:	26 83       	std	Z+6, r18	; 0x06
     a48:	84 81       	ldd	r24, Z+4	; 0x04
     a4a:	95 81       	ldd	r25, Z+5	; 0x05
     a4c:	28 17       	cp	r18, r24
     a4e:	39 07       	cpc	r19, r25
     a50:	20 f0       	brcs	.+8      	; 0xa5a <prvCopyDataFromQueue+0x28>
     a52:	80 81       	ld	r24, Z
     a54:	91 81       	ldd	r25, Z+1	; 0x01
     a56:	97 83       	std	Z+7, r25	; 0x07
     a58:	86 83       	std	Z+6, r24	; 0x06
     a5a:	cb 01       	movw	r24, r22
     a5c:	66 81       	ldd	r22, Z+6	; 0x06
     a5e:	77 81       	ldd	r23, Z+7	; 0x07
     a60:	0c 94 95 2e 	jmp	0x5d2a	; 0x5d2a <memcpy>
     a64:	08 95       	ret

00000a66 <prvUnlockQueue>:
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	ec 01       	movw	r28, r24
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	0f 92       	push	r0
     a74:	1a a1       	ldd	r17, Y+34	; 0x22
     a76:	0b c0       	rjmp	.+22     	; 0xa8e <prvUnlockQueue+0x28>
     a78:	8b 89       	ldd	r24, Y+19	; 0x13
     a7a:	88 23       	and	r24, r24
     a7c:	51 f0       	breq	.+20     	; 0xa92 <prvUnlockQueue+0x2c>
     a7e:	ce 01       	movw	r24, r28
     a80:	43 96       	adiw	r24, 0x13	; 19
     a82:	0e 94 2c 11 	call	0x2258	; 0x2258 <xTaskRemoveFromEventList>
     a86:	81 11       	cpse	r24, r1
     a88:	0e 94 68 12 	call	0x24d0	; 0x24d0 <vTaskMissedYield>
     a8c:	11 50       	subi	r17, 0x01	; 1
     a8e:	11 16       	cp	r1, r17
     a90:	9c f3       	brlt	.-26     	; 0xa78 <prvUnlockQueue+0x12>
     a92:	8f ef       	ldi	r24, 0xFF	; 255
     a94:	8a a3       	std	Y+34, r24	; 0x22
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	0f 92       	push	r0
     aa0:	19 a1       	ldd	r17, Y+33	; 0x21
     aa2:	0b c0       	rjmp	.+22     	; 0xaba <prvUnlockQueue+0x54>
     aa4:	88 85       	ldd	r24, Y+8	; 0x08
     aa6:	88 23       	and	r24, r24
     aa8:	51 f0       	breq	.+20     	; 0xabe <prvUnlockQueue+0x58>
     aaa:	ce 01       	movw	r24, r28
     aac:	08 96       	adiw	r24, 0x08	; 8
     aae:	0e 94 2c 11 	call	0x2258	; 0x2258 <xTaskRemoveFromEventList>
     ab2:	81 11       	cpse	r24, r1
     ab4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <vTaskMissedYield>
     ab8:	11 50       	subi	r17, 0x01	; 1
     aba:	11 16       	cp	r1, r17
     abc:	9c f3       	brlt	.-26     	; 0xaa4 <prvUnlockQueue+0x3e>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	89 a3       	std	Y+33, r24	; 0x21
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	08 95       	ret

00000ace <xQueueGenericReset>:
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	ec 01       	movw	r28, r24
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	0f 92       	push	r0
     ada:	e8 81       	ld	r30, Y
     adc:	f9 81       	ldd	r31, Y+1	; 0x01
     ade:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ae0:	28 a1       	ldd	r18, Y+32	; 0x20
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	82 9f       	mul	r24, r18
     ae8:	a0 01       	movw	r20, r0
     aea:	83 9f       	mul	r24, r19
     aec:	50 0d       	add	r21, r0
     aee:	92 9f       	mul	r25, r18
     af0:	50 0d       	add	r21, r0
     af2:	11 24       	eor	r1, r1
     af4:	4e 0f       	add	r20, r30
     af6:	5f 1f       	adc	r21, r31
     af8:	5d 83       	std	Y+5, r21	; 0x05
     afa:	4c 83       	std	Y+4, r20	; 0x04
     afc:	1e 8e       	std	Y+30, r1	; 0x1e
     afe:	fb 83       	std	Y+3, r31	; 0x03
     b00:	ea 83       	std	Y+2, r30	; 0x02
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	28 9f       	mul	r18, r24
     b06:	a0 01       	movw	r20, r0
     b08:	29 9f       	mul	r18, r25
     b0a:	50 0d       	add	r21, r0
     b0c:	38 9f       	mul	r19, r24
     b0e:	50 0d       	add	r21, r0
     b10:	11 24       	eor	r1, r1
     b12:	cf 01       	movw	r24, r30
     b14:	84 0f       	add	r24, r20
     b16:	95 1f       	adc	r25, r21
     b18:	9f 83       	std	Y+7, r25	; 0x07
     b1a:	8e 83       	std	Y+6, r24	; 0x06
     b1c:	8f ef       	ldi	r24, 0xFF	; 255
     b1e:	89 a3       	std	Y+33, r24	; 0x21
     b20:	8a a3       	std	Y+34, r24	; 0x22
     b22:	61 11       	cpse	r22, r1
     b24:	0b c0       	rjmp	.+22     	; 0xb3c <xQueueGenericReset+0x6e>
     b26:	88 85       	ldd	r24, Y+8	; 0x08
     b28:	88 23       	and	r24, r24
     b2a:	71 f0       	breq	.+28     	; 0xb48 <xQueueGenericReset+0x7a>
     b2c:	ce 01       	movw	r24, r28
     b2e:	08 96       	adiw	r24, 0x08	; 8
     b30:	0e 94 2c 11 	call	0x2258	; 0x2258 <xTaskRemoveFromEventList>
     b34:	88 23       	and	r24, r24
     b36:	41 f0       	breq	.+16     	; 0xb48 <xQueueGenericReset+0x7a>
     b38:	2a de       	rcall	.-940    	; 0x78e <vPortYield>
     b3a:	06 c0       	rjmp	.+12     	; 0xb48 <xQueueGenericReset+0x7a>
     b3c:	ce 01       	movw	r24, r28
     b3e:	08 96       	adiw	r24, 0x08	; 8
     b40:	58 dd       	rcall	.-1360   	; 0x5f2 <vListInitialise>
     b42:	ce 01       	movw	r24, r28
     b44:	43 96       	adiw	r24, 0x13	; 19
     b46:	55 dd       	rcall	.-1366   	; 0x5f2 <vListInitialise>
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	08 95       	ret

00000b54 <prvInitialiseNewQueue>:
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	f8 01       	movw	r30, r16
     b5a:	61 11       	cpse	r22, r1
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <prvInitialiseNewQueue+0x10>
     b5e:	11 83       	std	Z+1, r17	; 0x01
     b60:	00 83       	st	Z, r16
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <prvInitialiseNewQueue+0x14>
     b64:	51 83       	std	Z+1, r21	; 0x01
     b66:	40 83       	st	Z, r20
     b68:	87 8f       	std	Z+31, r24	; 0x1f
     b6a:	60 a3       	std	Z+32, r22	; 0x20
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	cf 01       	movw	r24, r30
     b70:	ae df       	rcall	.-164    	; 0xace <xQueueGenericReset>
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	08 95       	ret

00000b78 <xQueueGenericCreate>:
     b78:	df 92       	push	r13
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	f8 2e       	mov	r15, r24
     b88:	e6 2e       	mov	r14, r22
     b8a:	d4 2e       	mov	r13, r20
     b8c:	86 9f       	mul	r24, r22
     b8e:	c0 01       	movw	r24, r0
     b90:	11 24       	eor	r1, r1
     b92:	83 96       	adiw	r24, 0x23	; 35
     b94:	43 dc       	rcall	.-1914   	; 0x41c <pvPortMalloc>
     b96:	ec 01       	movw	r28, r24
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	41 f0       	breq	.+16     	; 0xbac <xQueueGenericCreate+0x34>
     b9c:	8c 01       	movw	r16, r24
     b9e:	2d 2d       	mov	r18, r13
     ba0:	ac 01       	movw	r20, r24
     ba2:	4d 5d       	subi	r20, 0xDD	; 221
     ba4:	5f 4f       	sbci	r21, 0xFF	; 255
     ba6:	6e 2d       	mov	r22, r14
     ba8:	8f 2d       	mov	r24, r15
     baa:	d4 df       	rcall	.-88     	; 0xb54 <prvInitialiseNewQueue>
     bac:	ce 01       	movw	r24, r28
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	df 90       	pop	r13
     bbc:	08 95       	ret

00000bbe <xQueueGenericSend>:
     bbe:	cf 92       	push	r12
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	29 97       	sbiw	r28, 0x09	; 9
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	7c 01       	movw	r14, r24
     be0:	6b 01       	movw	r12, r22
     be2:	2e 83       	std	Y+6, r18	; 0x06
     be4:	3f 83       	std	Y+7, r19	; 0x07
     be6:	48 87       	std	Y+8, r20	; 0x08
     be8:	59 87       	std	Y+9, r21	; 0x09
     bea:	10 e0       	ldi	r17, 0x00	; 0
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	0f 92       	push	r0
     bf2:	f7 01       	movw	r30, r14
     bf4:	96 8d       	ldd	r25, Z+30	; 0x1e
     bf6:	87 8d       	ldd	r24, Z+31	; 0x1f
     bf8:	98 17       	cp	r25, r24
     bfa:	10 f0       	brcs	.+4      	; 0xc00 <xQueueGenericSend+0x42>
     bfc:	02 30       	cpi	r16, 0x02	; 2
     bfe:	b1 f4       	brne	.+44     	; 0xc2c <xQueueGenericSend+0x6e>
     c00:	40 2f       	mov	r20, r16
     c02:	b6 01       	movw	r22, r12
     c04:	c7 01       	movw	r24, r14
     c06:	b6 de       	rcall	.-660    	; 0x974 <prvCopyDataToQueue>
     c08:	f7 01       	movw	r30, r14
     c0a:	93 89       	ldd	r25, Z+19	; 0x13
     c0c:	99 23       	and	r25, r25
     c0e:	41 f0       	breq	.+16     	; 0xc20 <xQueueGenericSend+0x62>
     c10:	c7 01       	movw	r24, r14
     c12:	43 96       	adiw	r24, 0x13	; 19
     c14:	0e 94 2c 11 	call	0x2258	; 0x2258 <xTaskRemoveFromEventList>
     c18:	88 23       	and	r24, r24
     c1a:	21 f0       	breq	.+8      	; 0xc24 <xQueueGenericSend+0x66>
     c1c:	b8 dd       	rcall	.-1168   	; 0x78e <vPortYield>
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <xQueueGenericSend+0x66>
     c20:	81 11       	cpse	r24, r1
     c22:	b5 dd       	rcall	.-1174   	; 0x78e <vPortYield>
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	4c c0       	rjmp	.+152    	; 0xcc4 <xQueueGenericSend+0x106>
     c2c:	8e 81       	ldd	r24, Y+6	; 0x06
     c2e:	9f 81       	ldd	r25, Y+7	; 0x07
     c30:	a8 85       	ldd	r26, Y+8	; 0x08
     c32:	b9 85       	ldd	r27, Y+9	; 0x09
     c34:	89 2b       	or	r24, r25
     c36:	8a 2b       	or	r24, r26
     c38:	8b 2b       	or	r24, r27
     c3a:	21 f4       	brne	.+8      	; 0xc44 <xQueueGenericSend+0x86>
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	40 c0       	rjmp	.+128    	; 0xcc4 <xQueueGenericSend+0x106>
     c44:	11 11       	cpse	r17, r1
     c46:	05 c0       	rjmp	.+10     	; 0xc52 <xQueueGenericSend+0x94>
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <vTaskInternalSetTimeOutState>
     c50:	11 e0       	ldi	r17, 0x01	; 1
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	a6 d7       	rcall	.+3916   	; 0x1ba4 <vTaskSuspendAll>
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	0f 92       	push	r0
     c5e:	f7 01       	movw	r30, r14
     c60:	81 a1       	ldd	r24, Z+33	; 0x21
     c62:	8f 3f       	cpi	r24, 0xFF	; 255
     c64:	09 f4       	brne	.+2      	; 0xc68 <xQueueGenericSend+0xaa>
     c66:	11 a2       	std	Z+33, r1	; 0x21
     c68:	f7 01       	movw	r30, r14
     c6a:	82 a1       	ldd	r24, Z+34	; 0x22
     c6c:	8f 3f       	cpi	r24, 0xFF	; 255
     c6e:	09 f4       	brne	.+2      	; 0xc72 <xQueueGenericSend+0xb4>
     c70:	12 a2       	std	Z+34, r1	; 0x22
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	be 01       	movw	r22, r28
     c78:	6a 5f       	subi	r22, 0xFA	; 250
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	0e 94 02 12 	call	0x2404	; 0x2404 <xTaskCheckForTimeOut>
     c84:	81 11       	cpse	r24, r1
     c86:	19 c0       	rjmp	.+50     	; 0xcba <xQueueGenericSend+0xfc>
     c88:	c7 01       	movw	r24, r14
     c8a:	66 de       	rcall	.-820    	; 0x958 <prvIsQueueFull>
     c8c:	88 23       	and	r24, r24
     c8e:	81 f0       	breq	.+32     	; 0xcb0 <xQueueGenericSend+0xf2>
     c90:	4e 81       	ldd	r20, Y+6	; 0x06
     c92:	5f 81       	ldd	r21, Y+7	; 0x07
     c94:	68 85       	ldd	r22, Y+8	; 0x08
     c96:	79 85       	ldd	r23, Y+9	; 0x09
     c98:	c7 01       	movw	r24, r14
     c9a:	08 96       	adiw	r24, 0x08	; 8
     c9c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <vTaskPlaceOnEventList>
     ca0:	c7 01       	movw	r24, r14
     ca2:	e1 de       	rcall	.-574    	; 0xa66 <prvUnlockQueue>
     ca4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <xTaskResumeAll>
     ca8:	81 11       	cpse	r24, r1
     caa:	a0 cf       	rjmp	.-192    	; 0xbec <xQueueGenericSend+0x2e>
     cac:	70 dd       	rcall	.-1312   	; 0x78e <vPortYield>
     cae:	9e cf       	rjmp	.-196    	; 0xbec <xQueueGenericSend+0x2e>
     cb0:	c7 01       	movw	r24, r14
     cb2:	d9 de       	rcall	.-590    	; 0xa66 <prvUnlockQueue>
     cb4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <xTaskResumeAll>
     cb8:	99 cf       	rjmp	.-206    	; 0xbec <xQueueGenericSend+0x2e>
     cba:	c7 01       	movw	r24, r14
     cbc:	d4 de       	rcall	.-600    	; 0xa66 <prvUnlockQueue>
     cbe:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <xTaskResumeAll>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	29 96       	adiw	r28, 0x09	; 9
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	08 95       	ret

00000ce2 <xQueueGenericSendFromISR>:
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	8a 01       	movw	r16, r20
     cf0:	fc 01       	movw	r30, r24
     cf2:	56 8d       	ldd	r21, Z+30	; 0x1e
     cf4:	37 8d       	ldd	r19, Z+31	; 0x1f
     cf6:	53 17       	cp	r21, r19
     cf8:	10 f0       	brcs	.+4      	; 0xcfe <xQueueGenericSendFromISR+0x1c>
     cfa:	22 30       	cpi	r18, 0x02	; 2
     cfc:	f9 f4       	brne	.+62     	; 0xd3c <xQueueGenericSendFromISR+0x5a>
     cfe:	42 2f       	mov	r20, r18
     d00:	78 01       	movw	r14, r16
     d02:	ec 01       	movw	r28, r24
     d04:	1a a1       	ldd	r17, Y+34	; 0x22
     d06:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d08:	ce 01       	movw	r24, r28
     d0a:	34 de       	rcall	.-920    	; 0x974 <prvCopyDataToQueue>
     d0c:	1f 3f       	cpi	r17, 0xFF	; 255
     d0e:	81 f4       	brne	.+32     	; 0xd30 <xQueueGenericSendFromISR+0x4e>
     d10:	8b 89       	ldd	r24, Y+19	; 0x13
     d12:	88 23       	and	r24, r24
     d14:	a9 f0       	breq	.+42     	; 0xd40 <xQueueGenericSendFromISR+0x5e>
     d16:	ce 01       	movw	r24, r28
     d18:	43 96       	adiw	r24, 0x13	; 19
     d1a:	0e 94 2c 11 	call	0x2258	; 0x2258 <xTaskRemoveFromEventList>
     d1e:	88 23       	and	r24, r24
     d20:	89 f0       	breq	.+34     	; 0xd44 <xQueueGenericSendFromISR+0x62>
     d22:	e1 14       	cp	r14, r1
     d24:	f1 04       	cpc	r15, r1
     d26:	81 f0       	breq	.+32     	; 0xd48 <xQueueGenericSendFromISR+0x66>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	f7 01       	movw	r30, r14
     d2c:	80 83       	st	Z, r24
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <xQueueGenericSendFromISR+0x68>
     d30:	ff 24       	eor	r15, r15
     d32:	f3 94       	inc	r15
     d34:	f1 0e       	add	r15, r17
     d36:	fa a2       	std	Y+34, r15	; 0x22
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	07 c0       	rjmp	.+14     	; 0xd4a <xQueueGenericSendFromISR+0x68>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <xQueueGenericSendFromISR+0x68>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <xQueueGenericSendFromISR+0x68>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <xQueueGenericSendFromISR+0x68>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	08 95       	ret

00000d58 <xQueueReceive>:
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	29 97       	sbiw	r28, 0x09	; 9
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	8c 01       	movw	r16, r24
     d7a:	6b 01       	movw	r12, r22
     d7c:	2e 83       	std	Y+6, r18	; 0x06
     d7e:	3f 83       	std	Y+7, r19	; 0x07
     d80:	48 87       	std	Y+8, r20	; 0x08
     d82:	59 87       	std	Y+9, r21	; 0x09
     d84:	e1 2c       	mov	r14, r1
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	0f 92       	push	r0
     d8c:	f8 01       	movw	r30, r16
     d8e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d90:	ff 20       	and	r15, r15
     d92:	99 f0       	breq	.+38     	; 0xdba <xQueueReceive+0x62>
     d94:	b6 01       	movw	r22, r12
     d96:	c8 01       	movw	r24, r16
     d98:	4c de       	rcall	.-872    	; 0xa32 <prvCopyDataFromQueue>
     d9a:	fa 94       	dec	r15
     d9c:	f8 01       	movw	r30, r16
     d9e:	f6 8e       	std	Z+30, r15	; 0x1e
     da0:	80 85       	ldd	r24, Z+8	; 0x08
     da2:	88 23       	and	r24, r24
     da4:	31 f0       	breq	.+12     	; 0xdb2 <xQueueReceive+0x5a>
     da6:	c8 01       	movw	r24, r16
     da8:	08 96       	adiw	r24, 0x08	; 8
     daa:	0e 94 2c 11 	call	0x2258	; 0x2258 <xTaskRemoveFromEventList>
     dae:	81 11       	cpse	r24, r1
     db0:	ee dc       	rcall	.-1572   	; 0x78e <vPortYield>
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	4f c0       	rjmp	.+158    	; 0xe58 <xQueueReceive+0x100>
     dba:	8e 81       	ldd	r24, Y+6	; 0x06
     dbc:	9f 81       	ldd	r25, Y+7	; 0x07
     dbe:	a8 85       	ldd	r26, Y+8	; 0x08
     dc0:	b9 85       	ldd	r27, Y+9	; 0x09
     dc2:	89 2b       	or	r24, r25
     dc4:	8a 2b       	or	r24, r26
     dc6:	8b 2b       	or	r24, r27
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <xQueueReceive+0x7a>
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	43 c0       	rjmp	.+134    	; 0xe58 <xQueueReceive+0x100>
     dd2:	e1 10       	cpse	r14, r1
     dd4:	06 c0       	rjmp	.+12     	; 0xde2 <xQueueReceive+0x8a>
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <vTaskInternalSetTimeOutState>
     dde:	ee 24       	eor	r14, r14
     de0:	e3 94       	inc	r14
     de2:	0f 90       	pop	r0
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	de d6       	rcall	.+3516   	; 0x1ba4 <vTaskSuspendAll>
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	0f 92       	push	r0
     dee:	f8 01       	movw	r30, r16
     df0:	81 a1       	ldd	r24, Z+33	; 0x21
     df2:	8f 3f       	cpi	r24, 0xFF	; 255
     df4:	09 f4       	brne	.+2      	; 0xdf8 <xQueueReceive+0xa0>
     df6:	11 a2       	std	Z+33, r1	; 0x21
     df8:	f8 01       	movw	r30, r16
     dfa:	82 a1       	ldd	r24, Z+34	; 0x22
     dfc:	8f 3f       	cpi	r24, 0xFF	; 255
     dfe:	09 f4       	brne	.+2      	; 0xe02 <xQueueReceive+0xaa>
     e00:	12 a2       	std	Z+34, r1	; 0x22
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	be 01       	movw	r22, r28
     e08:	6a 5f       	subi	r22, 0xFA	; 250
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	0e 94 02 12 	call	0x2404	; 0x2404 <xTaskCheckForTimeOut>
     e14:	81 11       	cpse	r24, r1
     e16:	17 c0       	rjmp	.+46     	; 0xe46 <xQueueReceive+0xee>
     e18:	c8 01       	movw	r24, r16
     e1a:	91 dd       	rcall	.-1246   	; 0x93e <prvIsQueueEmpty>
     e1c:	88 23       	and	r24, r24
     e1e:	79 f0       	breq	.+30     	; 0xe3e <xQueueReceive+0xe6>
     e20:	4e 81       	ldd	r20, Y+6	; 0x06
     e22:	5f 81       	ldd	r21, Y+7	; 0x07
     e24:	68 85       	ldd	r22, Y+8	; 0x08
     e26:	79 85       	ldd	r23, Y+9	; 0x09
     e28:	c8 01       	movw	r24, r16
     e2a:	43 96       	adiw	r24, 0x13	; 19
     e2c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <vTaskPlaceOnEventList>
     e30:	c8 01       	movw	r24, r16
     e32:	19 de       	rcall	.-974    	; 0xa66 <prvUnlockQueue>
     e34:	f7 d7       	rcall	.+4078   	; 0x1e24 <xTaskResumeAll>
     e36:	81 11       	cpse	r24, r1
     e38:	a6 cf       	rjmp	.-180    	; 0xd86 <xQueueReceive+0x2e>
     e3a:	a9 dc       	rcall	.-1710   	; 0x78e <vPortYield>
     e3c:	a4 cf       	rjmp	.-184    	; 0xd86 <xQueueReceive+0x2e>
     e3e:	c8 01       	movw	r24, r16
     e40:	12 de       	rcall	.-988    	; 0xa66 <prvUnlockQueue>
     e42:	f0 d7       	rcall	.+4064   	; 0x1e24 <xTaskResumeAll>
     e44:	a0 cf       	rjmp	.-192    	; 0xd86 <xQueueReceive+0x2e>
     e46:	c8 01       	movw	r24, r16
     e48:	0e de       	rcall	.-996    	; 0xa66 <prvUnlockQueue>
     e4a:	ec d7       	rcall	.+4056   	; 0x1e24 <xTaskResumeAll>
     e4c:	c8 01       	movw	r24, r16
     e4e:	77 dd       	rcall	.-1298   	; 0x93e <prvIsQueueEmpty>
     e50:	88 23       	and	r24, r24
     e52:	09 f4       	brne	.+2      	; 0xe56 <xQueueReceive+0xfe>
     e54:	98 cf       	rjmp	.-208    	; 0xd86 <xQueueReceive+0x2e>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	29 96       	adiw	r28, 0x09	; 9
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

00000e76 <xQueueSemaphoreTake>:
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	29 97       	sbiw	r28, 0x09	; 9
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	8c 01       	movw	r16, r24
     e94:	4e 83       	std	Y+6, r20	; 0x06
     e96:	5f 83       	std	Y+7, r21	; 0x07
     e98:	68 87       	std	Y+8, r22	; 0x08
     e9a:	79 87       	std	Y+9, r23	; 0x09
     e9c:	e1 2c       	mov	r14, r1
     e9e:	f1 2c       	mov	r15, r1
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	0f 92       	push	r0
     ea6:	f8 01       	movw	r30, r16
     ea8:	86 8d       	ldd	r24, Z+30	; 0x1e
     eaa:	88 23       	and	r24, r24
     eac:	c9 f0       	breq	.+50     	; 0xee0 <xQueueSemaphoreTake+0x6a>
     eae:	81 50       	subi	r24, 0x01	; 1
     eb0:	86 8f       	std	Z+30, r24	; 0x1e
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	89 2b       	or	r24, r25
     eb8:	29 f4       	brne	.+10     	; 0xec4 <xQueueSemaphoreTake+0x4e>
     eba:	0e 94 c8 13 	call	0x2790	; 0x2790 <pvTaskIncrementMutexHeldCount>
     ebe:	f8 01       	movw	r30, r16
     ec0:	95 83       	std	Z+5, r25	; 0x05
     ec2:	84 83       	std	Z+4, r24	; 0x04
     ec4:	f8 01       	movw	r30, r16
     ec6:	80 85       	ldd	r24, Z+8	; 0x08
     ec8:	88 23       	and	r24, r24
     eca:	31 f0       	breq	.+12     	; 0xed8 <xQueueSemaphoreTake+0x62>
     ecc:	c8 01       	movw	r24, r16
     ece:	08 96       	adiw	r24, 0x08	; 8
     ed0:	0e 94 2c 11 	call	0x2258	; 0x2258 <xTaskRemoveFromEventList>
     ed4:	81 11       	cpse	r24, r1
     ed6:	5b dc       	rcall	.-1866   	; 0x78e <vPortYield>
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	6f c0       	rjmp	.+222    	; 0xfbe <xQueueSemaphoreTake+0x148>
     ee0:	8e 81       	ldd	r24, Y+6	; 0x06
     ee2:	9f 81       	ldd	r25, Y+7	; 0x07
     ee4:	a8 85       	ldd	r26, Y+8	; 0x08
     ee6:	b9 85       	ldd	r27, Y+9	; 0x09
     ee8:	89 2b       	or	r24, r25
     eea:	8a 2b       	or	r24, r26
     eec:	8b 2b       	or	r24, r27
     eee:	21 f4       	brne	.+8      	; 0xef8 <xQueueSemaphoreTake+0x82>
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	63 c0       	rjmp	.+198    	; 0xfbe <xQueueSemaphoreTake+0x148>
     ef8:	f1 10       	cpse	r15, r1
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <xQueueSemaphoreTake+0x92>
     efc:	ce 01       	movw	r24, r28
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <vTaskInternalSetTimeOutState>
     f04:	ff 24       	eor	r15, r15
     f06:	f3 94       	inc	r15
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	4b d6       	rcall	.+3222   	; 0x1ba4 <vTaskSuspendAll>
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	0f 92       	push	r0
     f14:	f8 01       	movw	r30, r16
     f16:	81 a1       	ldd	r24, Z+33	; 0x21
     f18:	8f 3f       	cpi	r24, 0xFF	; 255
     f1a:	09 f4       	brne	.+2      	; 0xf1e <xQueueSemaphoreTake+0xa8>
     f1c:	11 a2       	std	Z+33, r1	; 0x21
     f1e:	f8 01       	movw	r30, r16
     f20:	82 a1       	ldd	r24, Z+34	; 0x22
     f22:	8f 3f       	cpi	r24, 0xFF	; 255
     f24:	09 f4       	brne	.+2      	; 0xf28 <xQueueSemaphoreTake+0xb2>
     f26:	12 a2       	std	Z+34, r1	; 0x22
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	be 01       	movw	r22, r28
     f2e:	6a 5f       	subi	r22, 0xFA	; 250
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	0e 94 02 12 	call	0x2404	; 0x2404 <xTaskCheckForTimeOut>
     f3a:	81 11       	cpse	r24, r1
     f3c:	26 c0       	rjmp	.+76     	; 0xf8a <xQueueSemaphoreTake+0x114>
     f3e:	c8 01       	movw	r24, r16
     f40:	fe dc       	rcall	.-1540   	; 0x93e <prvIsQueueEmpty>
     f42:	88 23       	and	r24, r24
     f44:	f1 f0       	breq	.+60     	; 0xf82 <xQueueSemaphoreTake+0x10c>
     f46:	f8 01       	movw	r30, r16
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	89 2b       	or	r24, r25
     f4e:	51 f4       	brne	.+20     	; 0xf64 <xQueueSemaphoreTake+0xee>
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	0f 92       	push	r0
     f56:	84 81       	ldd	r24, Z+4	; 0x04
     f58:	95 81       	ldd	r25, Z+5	; 0x05
     f5a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <xTaskPriorityInherit>
     f5e:	e8 2e       	mov	r14, r24
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	4e 81       	ldd	r20, Y+6	; 0x06
     f66:	5f 81       	ldd	r21, Y+7	; 0x07
     f68:	68 85       	ldd	r22, Y+8	; 0x08
     f6a:	79 85       	ldd	r23, Y+9	; 0x09
     f6c:	c8 01       	movw	r24, r16
     f6e:	43 96       	adiw	r24, 0x13	; 19
     f70:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <vTaskPlaceOnEventList>
     f74:	c8 01       	movw	r24, r16
     f76:	77 dd       	rcall	.-1298   	; 0xa66 <prvUnlockQueue>
     f78:	55 d7       	rcall	.+3754   	; 0x1e24 <xTaskResumeAll>
     f7a:	81 11       	cpse	r24, r1
     f7c:	91 cf       	rjmp	.-222    	; 0xea0 <xQueueSemaphoreTake+0x2a>
     f7e:	07 dc       	rcall	.-2034   	; 0x78e <vPortYield>
     f80:	8f cf       	rjmp	.-226    	; 0xea0 <xQueueSemaphoreTake+0x2a>
     f82:	c8 01       	movw	r24, r16
     f84:	70 dd       	rcall	.-1312   	; 0xa66 <prvUnlockQueue>
     f86:	4e d7       	rcall	.+3740   	; 0x1e24 <xTaskResumeAll>
     f88:	8b cf       	rjmp	.-234    	; 0xea0 <xQueueSemaphoreTake+0x2a>
     f8a:	c8 01       	movw	r24, r16
     f8c:	6c dd       	rcall	.-1320   	; 0xa66 <prvUnlockQueue>
     f8e:	4a d7       	rcall	.+3732   	; 0x1e24 <xTaskResumeAll>
     f90:	c8 01       	movw	r24, r16
     f92:	d5 dc       	rcall	.-1622   	; 0x93e <prvIsQueueEmpty>
     f94:	88 23       	and	r24, r24
     f96:	09 f4       	brne	.+2      	; 0xf9a <xQueueSemaphoreTake+0x124>
     f98:	83 cf       	rjmp	.-250    	; 0xea0 <xQueueSemaphoreTake+0x2a>
     f9a:	ee 20       	and	r14, r14
     f9c:	79 f0       	breq	.+30     	; 0xfbc <xQueueSemaphoreTake+0x146>
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	0f 92       	push	r0
     fa4:	c8 01       	movw	r24, r16
     fa6:	bb dc       	rcall	.-1674   	; 0x91e <prvGetDisinheritPriorityAfterTimeout>
     fa8:	68 2f       	mov	r22, r24
     faa:	f8 01       	movw	r30, r16
     fac:	84 81       	ldd	r24, Z+4	; 0x04
     fae:	95 81       	ldd	r25, Z+5	; 0x05
     fb0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <vTaskPriorityDisinheritAfterTimeout>
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <xQueueSemaphoreTake+0x148>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	29 96       	adiw	r28, 0x09	; 9
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	08 95       	ret

00000fd8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	0f 92       	push	r0
     fe4:	89 a1       	ldd	r24, Y+33	; 0x21
     fe6:	8f 3f       	cpi	r24, 0xFF	; 255
     fe8:	09 f4       	brne	.+2      	; 0xfec <vQueueWaitForMessageRestricted+0x14>
     fea:	19 a2       	std	Y+33, r1	; 0x21
     fec:	8a a1       	ldd	r24, Y+34	; 0x22
     fee:	8f 3f       	cpi	r24, 0xFF	; 255
     ff0:	09 f4       	brne	.+2      	; 0xff4 <vQueueWaitForMessageRestricted+0x1c>
     ff2:	1a a2       	std	Y+34, r1	; 0x22
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     ff8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffa:	81 11       	cpse	r24, r1
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     ffe:	ce 01       	movw	r24, r28
    1000:	43 96       	adiw	r24, 0x13	; 19
    1002:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1006:	ce 01       	movw	r24, r28
    1008:	2e dd       	rcall	.-1444   	; 0xa66 <prvUnlockQueue>
    }
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1010:	fc 01       	movw	r30, r24
    1012:	44 81       	ldd	r20, Z+4	; 0x04
    1014:	55 81       	ldd	r21, Z+5	; 0x05
    1016:	22 81       	ldd	r18, Z+2	; 0x02
    1018:	33 81       	ldd	r19, Z+3	; 0x03
    101a:	24 0f       	add	r18, r20
    101c:	35 1f       	adc	r19, r21
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	b9 01       	movw	r22, r18
    1024:	68 1b       	sub	r22, r24
    1026:	79 0b       	sbc	r23, r25
    1028:	cb 01       	movw	r24, r22
    102a:	64 17       	cp	r22, r20
    102c:	75 07       	cpc	r23, r21
    102e:	10 f0       	brcs	.+4      	; 0x1034 <prvBytesInBuffer+0x24>
    1030:	84 1b       	sub	r24, r20
    1032:	95 0b       	sbc	r25, r21
    1034:	08 95       	ret

00001036 <prvInitialiseNewStreamBuffer>:
    1036:	0f 93       	push	r16
    1038:	fc 01       	movw	r30, r24
    103a:	8f e0       	ldi	r24, 0x0F	; 15
    103c:	df 01       	movw	r26, r30
    103e:	1d 92       	st	X+, r1
    1040:	8a 95       	dec	r24
    1042:	e9 f7       	brne	.-6      	; 0x103e <prvInitialiseNewStreamBuffer+0x8>
    1044:	75 87       	std	Z+13, r23	; 0x0d
    1046:	64 87       	std	Z+12, r22	; 0x0c
    1048:	55 83       	std	Z+5, r21	; 0x05
    104a:	44 83       	std	Z+4, r20	; 0x04
    104c:	37 83       	std	Z+7, r19	; 0x07
    104e:	26 83       	std	Z+6, r18	; 0x06
    1050:	06 87       	std	Z+14, r16	; 0x0e
    1052:	0f 91       	pop	r16
    1054:	08 95       	ret

00001056 <prvWriteBytesToBuffer>:
    1056:	af 92       	push	r10
    1058:	bf 92       	push	r11
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	6c 01       	movw	r12, r24
    106c:	5b 01       	movw	r10, r22
    106e:	7a 01       	movw	r14, r20
    1070:	fc 01       	movw	r30, r24
    1072:	c2 81       	ldd	r28, Z+2	; 0x02
    1074:	d3 81       	ldd	r29, Z+3	; 0x03
    1076:	04 81       	ldd	r16, Z+4	; 0x04
    1078:	15 81       	ldd	r17, Z+5	; 0x05
    107a:	0c 1b       	sub	r16, r28
    107c:	1d 0b       	sbc	r17, r29
    107e:	40 17       	cp	r20, r16
    1080:	51 07       	cpc	r21, r17
    1082:	08 f4       	brcc	.+2      	; 0x1086 <prvWriteBytesToBuffer+0x30>
    1084:	8a 01       	movw	r16, r20
    1086:	f6 01       	movw	r30, r12
    1088:	84 85       	ldd	r24, Z+12	; 0x0c
    108a:	95 85       	ldd	r25, Z+13	; 0x0d
    108c:	a8 01       	movw	r20, r16
    108e:	b5 01       	movw	r22, r10
    1090:	8c 0f       	add	r24, r28
    1092:	9d 1f       	adc	r25, r29
    1094:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
    1098:	0e 15       	cp	r16, r14
    109a:	1f 05       	cpc	r17, r15
    109c:	58 f4       	brcc	.+22     	; 0x10b4 <prvWriteBytesToBuffer+0x5e>
    109e:	a7 01       	movw	r20, r14
    10a0:	40 1b       	sub	r20, r16
    10a2:	51 0b       	sbc	r21, r17
    10a4:	b5 01       	movw	r22, r10
    10a6:	60 0f       	add	r22, r16
    10a8:	71 1f       	adc	r23, r17
    10aa:	f6 01       	movw	r30, r12
    10ac:	84 85       	ldd	r24, Z+12	; 0x0c
    10ae:	95 85       	ldd	r25, Z+13	; 0x0d
    10b0:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
    10b4:	ce 01       	movw	r24, r28
    10b6:	8e 0d       	add	r24, r14
    10b8:	9f 1d       	adc	r25, r15
    10ba:	f6 01       	movw	r30, r12
    10bc:	24 81       	ldd	r18, Z+4	; 0x04
    10be:	35 81       	ldd	r19, Z+5	; 0x05
    10c0:	82 17       	cp	r24, r18
    10c2:	93 07       	cpc	r25, r19
    10c4:	10 f0       	brcs	.+4      	; 0x10ca <prvWriteBytesToBuffer+0x74>
    10c6:	82 1b       	sub	r24, r18
    10c8:	93 0b       	sbc	r25, r19
    10ca:	f6 01       	movw	r30, r12
    10cc:	93 83       	std	Z+3, r25	; 0x03
    10ce:	82 83       	std	Z+2, r24	; 0x02
    10d0:	c7 01       	movw	r24, r14
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	cf 90       	pop	r12
    10e2:	bf 90       	pop	r11
    10e4:	af 90       	pop	r10
    10e6:	08 95       	ret

000010e8 <prvWriteMessageToBuffer>:
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	1f 92       	push	r1
    10fa:	1f 92       	push	r1
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	7c 01       	movw	r14, r24
    1102:	6b 01       	movw	r12, r22
    1104:	5a 83       	std	Y+2, r21	; 0x02
    1106:	49 83       	std	Y+1, r20	; 0x01
    1108:	21 15       	cp	r18, r1
    110a:	31 05       	cpc	r19, r1
    110c:	c1 f0       	breq	.+48     	; 0x113e <prvWriteMessageToBuffer+0x56>
    110e:	fc 01       	movw	r30, r24
    1110:	86 85       	ldd	r24, Z+14	; 0x0e
    1112:	80 fd       	sbrc	r24, 0
    1114:	08 c0       	rjmp	.+16     	; 0x1126 <prvWriteMessageToBuffer+0x3e>
    1116:	42 17       	cp	r20, r18
    1118:	53 07       	cpc	r21, r19
    111a:	08 f4       	brcc	.+2      	; 0x111e <prvWriteMessageToBuffer+0x36>
    111c:	9a 01       	movw	r18, r20
    111e:	3a 83       	std	Y+2, r19	; 0x02
    1120:	29 83       	std	Y+1, r18	; 0x01
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	0f c0       	rjmp	.+30     	; 0x1144 <prvWriteMessageToBuffer+0x5c>
    1126:	20 17       	cp	r18, r16
    1128:	31 07       	cpc	r19, r17
    112a:	58 f0       	brcs	.+22     	; 0x1142 <prvWriteMessageToBuffer+0x5a>
    112c:	42 e0       	ldi	r20, 0x02	; 2
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	be 01       	movw	r22, r28
    1132:	6f 5f       	subi	r22, 0xFF	; 255
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	c7 01       	movw	r24, r14
    1138:	8e df       	rcall	.-228    	; 0x1056 <prvWriteBytesToBuffer>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <prvWriteMessageToBuffer+0x5c>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <prvWriteMessageToBuffer+0x5c>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	88 23       	and	r24, r24
    1146:	31 f0       	breq	.+12     	; 0x1154 <prvWriteMessageToBuffer+0x6c>
    1148:	49 81       	ldd	r20, Y+1	; 0x01
    114a:	5a 81       	ldd	r21, Y+2	; 0x02
    114c:	b6 01       	movw	r22, r12
    114e:	c7 01       	movw	r24, r14
    1150:	82 df       	rcall	.-252    	; 0x1056 <prvWriteBytesToBuffer>
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <prvWriteMessageToBuffer+0x70>
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret

0000116e <prvReadBytesFromBuffer>:
    116e:	af 92       	push	r10
    1170:	bf 92       	push	r11
    1172:	cf 92       	push	r12
    1174:	df 92       	push	r13
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	7c 01       	movw	r14, r24
    1184:	5b 01       	movw	r10, r22
    1186:	e9 01       	movw	r28, r18
    1188:	42 17       	cp	r20, r18
    118a:	53 07       	cpc	r21, r19
    118c:	08 f4       	brcc	.+2      	; 0x1190 <prvReadBytesFromBuffer+0x22>
    118e:	ea 01       	movw	r28, r20
    1190:	20 97       	sbiw	r28, 0x00	; 0
    1192:	81 f1       	breq	.+96     	; 0x11f4 <prvReadBytesFromBuffer+0x86>
    1194:	f7 01       	movw	r30, r14
    1196:	00 81       	ld	r16, Z
    1198:	11 81       	ldd	r17, Z+1	; 0x01
    119a:	84 81       	ldd	r24, Z+4	; 0x04
    119c:	95 81       	ldd	r25, Z+5	; 0x05
    119e:	80 1b       	sub	r24, r16
    11a0:	91 0b       	sbc	r25, r17
    11a2:	6e 01       	movw	r12, r28
    11a4:	8c 17       	cp	r24, r28
    11a6:	9d 07       	cpc	r25, r29
    11a8:	08 f4       	brcc	.+2      	; 0x11ac <prvReadBytesFromBuffer+0x3e>
    11aa:	6c 01       	movw	r12, r24
    11ac:	f7 01       	movw	r30, r14
    11ae:	64 85       	ldd	r22, Z+12	; 0x0c
    11b0:	75 85       	ldd	r23, Z+13	; 0x0d
    11b2:	60 0f       	add	r22, r16
    11b4:	71 1f       	adc	r23, r17
    11b6:	a6 01       	movw	r20, r12
    11b8:	c5 01       	movw	r24, r10
    11ba:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
    11be:	cc 16       	cp	r12, r28
    11c0:	dd 06       	cpc	r13, r29
    11c2:	58 f4       	brcc	.+22     	; 0x11da <prvReadBytesFromBuffer+0x6c>
    11c4:	ae 01       	movw	r20, r28
    11c6:	4c 19       	sub	r20, r12
    11c8:	5d 09       	sbc	r21, r13
    11ca:	f7 01       	movw	r30, r14
    11cc:	64 85       	ldd	r22, Z+12	; 0x0c
    11ce:	75 85       	ldd	r23, Z+13	; 0x0d
    11d0:	c5 01       	movw	r24, r10
    11d2:	8c 0d       	add	r24, r12
    11d4:	9d 1d       	adc	r25, r13
    11d6:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <memcpy>
    11da:	0c 0f       	add	r16, r28
    11dc:	1d 1f       	adc	r17, r29
    11de:	f7 01       	movw	r30, r14
    11e0:	84 81       	ldd	r24, Z+4	; 0x04
    11e2:	95 81       	ldd	r25, Z+5	; 0x05
    11e4:	08 17       	cp	r16, r24
    11e6:	19 07       	cpc	r17, r25
    11e8:	10 f0       	brcs	.+4      	; 0x11ee <prvReadBytesFromBuffer+0x80>
    11ea:	08 1b       	sub	r16, r24
    11ec:	19 0b       	sbc	r17, r25
    11ee:	f7 01       	movw	r30, r14
    11f0:	11 83       	std	Z+1, r17	; 0x01
    11f2:	00 83       	st	Z, r16
    11f4:	ce 01       	movw	r24, r28
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	af 90       	pop	r10
    120a:	08 95       	ret

0000120c <prvReadMessageFromBuffer>:
    120c:	6f 92       	push	r6
    120e:	7f 92       	push	r7
    1210:	8f 92       	push	r8
    1212:	9f 92       	push	r9
    1214:	af 92       	push	r10
    1216:	bf 92       	push	r11
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	1f 92       	push	r1
    122a:	1f 92       	push	r1
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	6c 01       	movw	r12, r24
    1232:	4b 01       	movw	r8, r22
    1234:	5a 01       	movw	r10, r20
    1236:	79 01       	movw	r14, r18
    1238:	01 15       	cp	r16, r1
    123a:	11 05       	cpc	r17, r1
    123c:	b1 f0       	breq	.+44     	; 0x126a <prvReadMessageFromBuffer+0x5e>
    123e:	fc 01       	movw	r30, r24
    1240:	60 80       	ld	r6, Z
    1242:	71 80       	ldd	r7, Z+1	; 0x01
    1244:	a8 01       	movw	r20, r16
    1246:	be 01       	movw	r22, r28
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	90 df       	rcall	.-224    	; 0x116e <prvReadBytesFromBuffer>
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	e0 1a       	sub	r14, r16
    1254:	f1 0a       	sbc	r15, r17
    1256:	a8 16       	cp	r10, r24
    1258:	b9 06       	cpc	r11, r25
    125a:	30 f4       	brcc	.+12     	; 0x1268 <prvReadMessageFromBuffer+0x5c>
    125c:	f6 01       	movw	r30, r12
    125e:	71 82       	std	Z+1, r7	; 0x01
    1260:	60 82       	st	Z, r6
    1262:	a1 2c       	mov	r10, r1
    1264:	b1 2c       	mov	r11, r1
    1266:	01 c0       	rjmp	.+2      	; 0x126a <prvReadMessageFromBuffer+0x5e>
    1268:	5c 01       	movw	r10, r24
    126a:	97 01       	movw	r18, r14
    126c:	a5 01       	movw	r20, r10
    126e:	b4 01       	movw	r22, r8
    1270:	c6 01       	movw	r24, r12
    1272:	7d df       	rcall	.-262    	; 0x116e <prvReadBytesFromBuffer>
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	bf 90       	pop	r11
    128a:	af 90       	pop	r10
    128c:	9f 90       	pop	r9
    128e:	8f 90       	pop	r8
    1290:	7f 90       	pop	r7
    1292:	6f 90       	pop	r6
    1294:	08 95       	ret

00001296 <xStreamBufferGenericCreate>:
    1296:	cf 92       	push	r12
    1298:	df 92       	push	r13
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	ec 01       	movw	r28, r24
    12a6:	6b 01       	movw	r12, r22
    12a8:	41 30       	cpi	r20, 0x01	; 1
    12aa:	11 f4       	brne	.+4      	; 0x12b0 <xStreamBufferGenericCreate+0x1a>
    12ac:	01 e0       	ldi	r16, 0x01	; 1
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <xStreamBufferGenericCreate+0x1c>
    12b0:	00 e0       	ldi	r16, 0x00	; 0
    12b2:	c1 14       	cp	r12, r1
    12b4:	d1 04       	cpc	r13, r1
    12b6:	19 f4       	brne	.+6      	; 0x12be <xStreamBufferGenericCreate+0x28>
    12b8:	cc 24       	eor	r12, r12
    12ba:	c3 94       	inc	r12
    12bc:	d1 2c       	mov	r13, r1
    12be:	ce 01       	movw	r24, r28
    12c0:	40 96       	adiw	r24, 0x10	; 16
    12c2:	c8 17       	cp	r28, r24
    12c4:	d9 07       	cpc	r29, r25
    12c6:	20 f4       	brcc	.+8      	; 0x12d0 <xStreamBufferGenericCreate+0x3a>
    12c8:	21 96       	adiw	r28, 0x01	; 1
    12ca:	a8 d8       	rcall	.-3760   	; 0x41c <pvPortMalloc>
    12cc:	7c 01       	movw	r14, r24
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <xStreamBufferGenericCreate+0x3e>
    12d0:	e1 2c       	mov	r14, r1
    12d2:	f1 2c       	mov	r15, r1
    12d4:	e1 14       	cp	r14, r1
    12d6:	f1 04       	cpc	r15, r1
    12d8:	39 f0       	breq	.+14     	; 0x12e8 <xStreamBufferGenericCreate+0x52>
    12da:	96 01       	movw	r18, r12
    12dc:	ae 01       	movw	r20, r28
    12de:	b7 01       	movw	r22, r14
    12e0:	61 5f       	subi	r22, 0xF1	; 241
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	c7 01       	movw	r24, r14
    12e6:	a7 de       	rcall	.-690    	; 0x1036 <prvInitialiseNewStreamBuffer>
    12e8:	c7 01       	movw	r24, r14
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	08 95       	ret

000012fa <xStreamBufferReset>:
    12fa:	0f 93       	push	r16
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	0f 92       	push	r0
    1302:	fc 01       	movw	r30, r24
    1304:	20 85       	ldd	r18, Z+8	; 0x08
    1306:	31 85       	ldd	r19, Z+9	; 0x09
    1308:	23 2b       	or	r18, r19
    130a:	71 f4       	brne	.+28     	; 0x1328 <xStreamBufferReset+0x2e>
    130c:	22 85       	ldd	r18, Z+10	; 0x0a
    130e:	33 85       	ldd	r19, Z+11	; 0x0b
    1310:	23 2b       	or	r18, r19
    1312:	61 f4       	brne	.+24     	; 0x132c <xStreamBufferReset+0x32>
    1314:	26 81       	ldd	r18, Z+6	; 0x06
    1316:	37 81       	ldd	r19, Z+7	; 0x07
    1318:	44 81       	ldd	r20, Z+4	; 0x04
    131a:	55 81       	ldd	r21, Z+5	; 0x05
    131c:	64 85       	ldd	r22, Z+12	; 0x0c
    131e:	75 85       	ldd	r23, Z+13	; 0x0d
    1320:	06 85       	ldd	r16, Z+14	; 0x0e
    1322:	89 de       	rcall	.-750    	; 0x1036 <prvInitialiseNewStreamBuffer>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	03 c0       	rjmp	.+6      	; 0x132e <xStreamBufferReset+0x34>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	01 c0       	rjmp	.+2      	; 0x132e <xStreamBufferReset+0x34>
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 91       	pop	r16
    1334:	08 95       	ret

00001336 <xStreamBufferSpacesAvailable>:
    1336:	fc 01       	movw	r30, r24
    1338:	24 81       	ldd	r18, Z+4	; 0x04
    133a:	35 81       	ldd	r19, Z+5	; 0x05
    133c:	80 81       	ld	r24, Z
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	82 0f       	add	r24, r18
    1342:	93 1f       	adc	r25, r19
    1344:	42 81       	ldd	r20, Z+2	; 0x02
    1346:	53 81       	ldd	r21, Z+3	; 0x03
    1348:	84 1b       	sub	r24, r20
    134a:	95 0b       	sbc	r25, r21
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	82 17       	cp	r24, r18
    1350:	93 07       	cpc	r25, r19
    1352:	10 f0       	brcs	.+4      	; 0x1358 <xStreamBufferSpacesAvailable+0x22>
    1354:	82 1b       	sub	r24, r18
    1356:	93 0b       	sbc	r25, r19
    1358:	08 95       	ret

0000135a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    135a:	2f 92       	push	r2
    135c:	3f 92       	push	r3
    135e:	4f 92       	push	r4
    1360:	5f 92       	push	r5
    1362:	6f 92       	push	r6
    1364:	7f 92       	push	r7
    1366:	8f 92       	push	r8
    1368:	9f 92       	push	r9
    136a:	af 92       	push	r10
    136c:	bf 92       	push	r11
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	2b 97       	sbiw	r28, 0x0b	; 11
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	4c 01       	movw	r8, r24
    1390:	7b 87       	std	Y+11, r23	; 0x0b
    1392:	6a 87       	std	Y+10, r22	; 0x0a
    1394:	1a 01       	movw	r2, r20
    1396:	0e 83       	std	Y+6, r16	; 0x06
    1398:	1f 83       	std	Y+7, r17	; 0x07
    139a:	28 87       	std	Y+8, r18	; 0x08
    139c:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    139e:	fc 01       	movw	r30, r24
    13a0:	84 81       	ldd	r24, Z+4	; 0x04
    13a2:	95 81       	ldd	r25, Z+5	; 0x05
    13a4:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    13a6:	26 85       	ldd	r18, Z+14	; 0x0e
    13a8:	20 ff       	sbrs	r18, 0
    13aa:	0c c0       	rjmp	.+24     	; 0x13c4 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    13ac:	2a 01       	movw	r4, r20
    13ae:	f2 e0       	ldi	r31, 0x02	; 2
    13b0:	4f 0e       	add	r4, r31
    13b2:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    13b4:	84 15       	cp	r24, r4
    13b6:	95 05       	cpc	r25, r5
    13b8:	58 f4       	brcc	.+22     	; 0x13d0 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    13ba:	1e 82       	std	Y+6, r1	; 0x06
    13bc:	1f 82       	std	Y+7, r1	; 0x07
    13be:	18 86       	std	Y+8, r1	; 0x08
    13c0:	19 86       	std	Y+9, r1	; 0x09
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    13c4:	84 17       	cp	r24, r20
    13c6:	95 07       	cpc	r25, r21
    13c8:	10 f0       	brcs	.+4      	; 0x13ce <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    13ca:	2a 01       	movw	r4, r20
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    13ce:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    13d0:	8e 81       	ldd	r24, Y+6	; 0x06
    13d2:	9f 81       	ldd	r25, Y+7	; 0x07
    13d4:	a8 85       	ldd	r26, Y+8	; 0x08
    13d6:	b9 85       	ldd	r27, Y+9	; 0x09
    13d8:	89 2b       	or	r24, r25
    13da:	8a 2b       	or	r24, r26
    13dc:	8b 2b       	or	r24, r27
    13de:	09 f4       	brne	.+2      	; 0x13e2 <xStreamBufferSend+0x88>
    13e0:	36 c0       	rjmp	.+108    	; 0x144e <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    13e2:	ce 01       	movw	r24, r28
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	e7 d7       	rcall	.+4046   	; 0x23b6 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13ee:	c4 01       	movw	r24, r8
    13f0:	a2 df       	rcall	.-188    	; 0x1336 <xStreamBufferSpacesAvailable>
    13f2:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    13f4:	84 15       	cp	r24, r4
    13f6:	95 05       	cpc	r25, r5
    13f8:	38 f5       	brcc	.+78     	; 0x1448 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1404:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <xTaskGetCurrentTaskHandle>
    1408:	f4 01       	movw	r30, r8
    140a:	93 87       	std	Z+11, r25	; 0x0b
    140c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1412:	ae 80       	ldd	r10, Y+6	; 0x06
    1414:	bf 80       	ldd	r11, Y+7	; 0x07
    1416:	c8 84       	ldd	r12, Y+8	; 0x08
    1418:	d9 84       	ldd	r13, Y+9	; 0x09
    141a:	e1 2c       	mov	r14, r1
    141c:	f1 2c       	mov	r15, r1
    141e:	00 e0       	ldi	r16, 0x00	; 0
    1420:	10 e0       	ldi	r17, 0x00	; 0
    1422:	98 01       	movw	r18, r16
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	ba 01       	movw	r22, r20
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1430:	f4 01       	movw	r30, r8
    1432:	13 86       	std	Z+11, r1	; 0x0b
    1434:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1436:	be 01       	movw	r22, r28
    1438:	6a 5f       	subi	r22, 0xFA	; 250
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	ce 01       	movw	r24, r28
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	e1 d7       	rcall	.+4034   	; 0x2404 <xTaskCheckForTimeOut>
    1442:	88 23       	and	r24, r24
    1444:	89 f2       	breq	.-94     	; 0x13e8 <xStreamBufferSend+0x8e>
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
                    break;
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    144e:	61 2c       	mov	r6, r1
    1450:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1452:	61 14       	cp	r6, r1
    1454:	71 04       	cpc	r7, r1
    1456:	19 f4       	brne	.+6      	; 0x145e <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1458:	c4 01       	movw	r24, r8
    145a:	6d df       	rcall	.-294    	; 0x1336 <xStreamBufferSpacesAvailable>
    145c:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    145e:	82 01       	movw	r16, r4
    1460:	93 01       	movw	r18, r6
    1462:	a1 01       	movw	r20, r2
    1464:	6a 85       	ldd	r22, Y+10	; 0x0a
    1466:	7b 85       	ldd	r23, Y+11	; 0x0b
    1468:	c4 01       	movw	r24, r8
    146a:	3e de       	rcall	.-900    	; 0x10e8 <prvWriteMessageToBuffer>
    146c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    146e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1470:	e9 f0       	breq	.+58     	; 0x14ac <xStreamBufferSend+0x152>
    1472:	c4 01       	movw	r24, r8
    1474:	cd dd       	rcall	.-1126   	; 0x1010 <prvBytesInBuffer>
    1476:	f4 01       	movw	r30, r8
    1478:	26 81       	ldd	r18, Z+6	; 0x06
    147a:	37 81       	ldd	r19, Z+7	; 0x07
    147c:	82 17       	cp	r24, r18
    147e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1480:	a8 f0       	brcs	.+42     	; 0x14ac <xStreamBufferSend+0x152>
    1482:	90 d3       	rcall	.+1824   	; 0x1ba4 <vTaskSuspendAll>
    1484:	f4 01       	movw	r30, r8
    1486:	80 85       	ldd	r24, Z+8	; 0x08
    1488:	91 85       	ldd	r25, Z+9	; 0x09
    148a:	89 2b       	or	r24, r25
    148c:	71 f0       	breq	.+28     	; 0x14aa <xStreamBufferSend+0x150>
    148e:	80 85       	ldd	r24, Z+8	; 0x08
    1490:	91 85       	ldd	r25, Z+9	; 0x09
    1492:	e1 2c       	mov	r14, r1
    1494:	f1 2c       	mov	r15, r1
    1496:	00 e0       	ldi	r16, 0x00	; 0
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	a9 01       	movw	r20, r18
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	0e 94 81 14 	call	0x2902	; 0x2902 <xTaskGenericNotify>
    14a4:	f4 01       	movw	r30, r8
    14a6:	11 86       	std	Z+9, r1	; 0x09
    14a8:	10 86       	std	Z+8, r1	; 0x08
    14aa:	bc d4       	rcall	.+2424   	; 0x1e24 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    14ac:	c6 01       	movw	r24, r12
    14ae:	2b 96       	adiw	r28, 0x0b	; 11
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	bf 90       	pop	r11
    14cc:	af 90       	pop	r10
    14ce:	9f 90       	pop	r9
    14d0:	8f 90       	pop	r8
    14d2:	7f 90       	pop	r7
    14d4:	6f 90       	pop	r6
    14d6:	5f 90       	pop	r5
    14d8:	4f 90       	pop	r4
    14da:	3f 90       	pop	r3
    14dc:	2f 90       	pop	r2
    14de:	08 95       	ret

000014e0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    14e0:	af 92       	push	r10
    14e2:	bf 92       	push	r11
    14e4:	cf 92       	push	r12
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	ec 01       	movw	r28, r24
    14f6:	7b 01       	movw	r14, r22
    14f8:	5a 01       	movw	r10, r20
    14fa:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    14fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    14fe:	80 ff       	sbrs	r24, 0
    1500:	04 c0       	rjmp	.+8      	; 0x150a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1502:	8a 01       	movw	r16, r20
    1504:	0e 5f       	subi	r16, 0xFE	; 254
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	01 c0       	rjmp	.+2      	; 0x150c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    150a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    150c:	ce 01       	movw	r24, r28
    150e:	13 df       	rcall	.-474    	; 0x1336 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1510:	9c 01       	movw	r18, r24
    1512:	a5 01       	movw	r20, r10
    1514:	b7 01       	movw	r22, r14
    1516:	ce 01       	movw	r24, r28
    1518:	e7 dd       	rcall	.-1074   	; 0x10e8 <prvWriteMessageToBuffer>
    151a:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    151c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    151e:	c1 f0       	breq	.+48     	; 0x1550 <xStreamBufferSendFromISR+0x70>
    1520:	ce 01       	movw	r24, r28
    1522:	76 dd       	rcall	.-1300   	; 0x1010 <prvBytesInBuffer>
    1524:	2e 81       	ldd	r18, Y+6	; 0x06
    1526:	3f 81       	ldd	r19, Y+7	; 0x07
    1528:	82 17       	cp	r24, r18
    152a:	93 07       	cpc	r25, r19
    152c:	88 f0       	brcs	.+34     	; 0x1550 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    152e:	88 85       	ldd	r24, Y+8	; 0x08
    1530:	99 85       	ldd	r25, Y+9	; 0x09
    1532:	89 2b       	or	r24, r25
    1534:	69 f0       	breq	.+26     	; 0x1550 <xStreamBufferSendFromISR+0x70>
    1536:	88 85       	ldd	r24, Y+8	; 0x08
    1538:	99 85       	ldd	r25, Y+9	; 0x09
    153a:	e1 2c       	mov	r14, r1
    153c:	f1 2c       	mov	r15, r1
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	a9 01       	movw	r20, r18
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	0e 94 78 15 	call	0x2af0	; 0x2af0 <xTaskGenericNotifyFromISR>
    154c:	19 86       	std	Y+9, r1	; 0x09
    154e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1550:	c5 01       	movw	r24, r10
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	08 95       	ret

00001568 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1568:	4f 92       	push	r4
    156a:	5f 92       	push	r5
    156c:	6f 92       	push	r6
    156e:	7f 92       	push	r7
    1570:	8f 92       	push	r8
    1572:	9f 92       	push	r9
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	ec 01       	movw	r28, r24
    158a:	2b 01       	movw	r4, r22
    158c:	3a 01       	movw	r6, r20
    158e:	58 01       	movw	r10, r16
    1590:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1592:	8e 85       	ldd	r24, Y+14	; 0x0e
    1594:	80 ff       	sbrs	r24, 0
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1598:	68 94       	set
    159a:	88 24       	eor	r8, r8
    159c:	81 f8       	bld	r8, 1
    159e:	91 2c       	mov	r9, r1
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    15a2:	81 2c       	mov	r8, r1
    15a4:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    15a6:	a1 14       	cp	r10, r1
    15a8:	b1 04       	cpc	r11, r1
    15aa:	c1 04       	cpc	r12, r1
    15ac:	d1 04       	cpc	r13, r1
    15ae:	39 f1       	breq	.+78     	; 0x15fe <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15b6:	ce 01       	movw	r24, r28
    15b8:	2b dd       	rcall	.-1450   	; 0x1010 <prvBytesInBuffer>
    15ba:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    15bc:	88 16       	cp	r8, r24
    15be:	99 06       	cpc	r9, r25
    15c0:	40 f0       	brcs	.+16     	; 0x15d2 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    15cc:	85 d7       	rcall	.+3850   	; 0x24d8 <xTaskGetCurrentTaskHandle>
    15ce:	99 87       	std	Y+9, r25	; 0x09
    15d0:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    15d6:	8e 14       	cp	r8, r14
    15d8:	9f 04       	cpc	r9, r15
    15da:	a0 f0       	brcs	.+40     	; 0x1604 <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    15dc:	e1 2c       	mov	r14, r1
    15de:	f1 2c       	mov	r15, r1
    15e0:	00 e0       	ldi	r16, 0x00	; 0
    15e2:	10 e0       	ldi	r17, 0x00	; 0
    15e4:	98 01       	movw	r18, r16
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	ba 01       	movw	r22, r20
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	0e 94 da 13 	call	0x27b4	; 0x27b4 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    15f2:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15f4:	18 86       	std	Y+8, r1	; 0x08
    15f6:	ce 01       	movw	r24, r28
    15f8:	0b dd       	rcall	.-1514   	; 0x1010 <prvBytesInBuffer>
    15fa:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <xStreamBufferReceive+0x9c>
    15fe:	ce 01       	movw	r24, r28
    1600:	07 dd       	rcall	.-1522   	; 0x1010 <prvBytesInBuffer>
    1602:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1604:	8e 14       	cp	r8, r14
    1606:	9f 04       	cpc	r9, r15
    1608:	e8 f4       	brcc	.+58     	; 0x1644 <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    160a:	84 01       	movw	r16, r8
    160c:	97 01       	movw	r18, r14
    160e:	a3 01       	movw	r20, r6
    1610:	b2 01       	movw	r22, r4
    1612:	ce 01       	movw	r24, r28
    1614:	fb dd       	rcall	.-1034   	; 0x120c <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1616:	6c 01       	movw	r12, r24
    1618:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    161a:	b1 f0       	breq	.+44     	; 0x1648 <xStreamBufferReceive+0xe0>
    161c:	c3 d2       	rcall	.+1414   	; 0x1ba4 <vTaskSuspendAll>
    161e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1620:	9b 85       	ldd	r25, Y+11	; 0x0b
    1622:	89 2b       	or	r24, r25
    1624:	69 f0       	breq	.+26     	; 0x1640 <xStreamBufferReceive+0xd8>
    1626:	8a 85       	ldd	r24, Y+10	; 0x0a
    1628:	9b 85       	ldd	r25, Y+11	; 0x0b
    162a:	e1 2c       	mov	r14, r1
    162c:	f1 2c       	mov	r15, r1
    162e:	00 e0       	ldi	r16, 0x00	; 0
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	a9 01       	movw	r20, r18
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	0e 94 81 14 	call	0x2902	; 0x2902 <xTaskGenericNotify>
    163c:	1b 86       	std	Y+11, r1	; 0x0b
    163e:	1a 86       	std	Y+10, r1	; 0x0a
    1640:	f1 d3       	rcall	.+2018   	; 0x1e24 <xTaskResumeAll>
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1644:	c1 2c       	mov	r12, r1
    1646:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1648:	c6 01       	movw	r24, r12
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ff 90       	pop	r15
    1654:	ef 90       	pop	r14
    1656:	df 90       	pop	r13
    1658:	cf 90       	pop	r12
    165a:	bf 90       	pop	r11
    165c:	af 90       	pop	r10
    165e:	9f 90       	pop	r9
    1660:	8f 90       	pop	r8
    1662:	7f 90       	pop	r7
    1664:	6f 90       	pop	r6
    1666:	5f 90       	pop	r5
    1668:	4f 90       	pop	r4
    166a:	08 95       	ret

0000166c <prvResetNextTaskUnblockTime>:
    166c:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxDelayedTaskList>
    1670:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxDelayedTaskList+0x1>
    1674:	80 81       	ld	r24, Z
    1676:	81 11       	cpse	r24, r1
    1678:	0c c0       	rjmp	.+24     	; 0x1692 <prvResetNextTaskUnblockTime+0x26>
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	9f ef       	ldi	r25, 0xFF	; 255
    167e:	dc 01       	movw	r26, r24
    1680:	80 93 7d 16 	sts	0x167D, r24	; 0x80167d <xNextTaskUnblockTime>
    1684:	90 93 7e 16 	sts	0x167E, r25	; 0x80167e <xNextTaskUnblockTime+0x1>
    1688:	a0 93 7f 16 	sts	0x167F, r26	; 0x80167f <xNextTaskUnblockTime+0x2>
    168c:	b0 93 80 16 	sts	0x1680, r27	; 0x801680 <xNextTaskUnblockTime+0x3>
    1690:	08 95       	ret
    1692:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxDelayedTaskList>
    1696:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxDelayedTaskList+0x1>
    169a:	07 80       	ldd	r0, Z+7	; 0x07
    169c:	f0 85       	ldd	r31, Z+8	; 0x08
    169e:	e0 2d       	mov	r30, r0
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	a2 81       	ldd	r26, Z+2	; 0x02
    16a6:	b3 81       	ldd	r27, Z+3	; 0x03
    16a8:	80 93 7d 16 	sts	0x167D, r24	; 0x80167d <xNextTaskUnblockTime>
    16ac:	90 93 7e 16 	sts	0x167E, r25	; 0x80167e <xNextTaskUnblockTime+0x1>
    16b0:	a0 93 7f 16 	sts	0x167F, r26	; 0x80167f <xNextTaskUnblockTime+0x2>
    16b4:	b0 93 80 16 	sts	0x1680, r27	; 0x801680 <xNextTaskUnblockTime+0x3>
    16b8:	08 95       	ret

000016ba <prvDeleteTCB>:
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	ec 01       	movw	r28, r24
    16c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c4:	0e 94 b7 02 	call	0x56e	; 0x56e <vPortFree>
    16c8:	ce 01       	movw	r24, r28
    16ca:	0e 94 b7 02 	call	0x56e	; 0x56e <vPortFree>
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	08 95       	ret

000016d4 <prvInitialiseNewTask>:
    16d4:	4f 92       	push	r4
    16d6:	5f 92       	push	r5
    16d8:	6f 92       	push	r6
    16da:	7f 92       	push	r7
    16dc:	8f 92       	push	r8
    16de:	9f 92       	push	r9
    16e0:	af 92       	push	r10
    16e2:	bf 92       	push	r11
    16e4:	cf 92       	push	r12
    16e6:	df 92       	push	r13
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	2c 01       	movw	r4, r24
    16f4:	5b 01       	movw	r10, r22
    16f6:	4a 01       	movw	r8, r20
    16f8:	39 01       	movw	r6, r18
    16fa:	e6 01       	movw	r28, r12
    16fc:	65 ea       	ldi	r22, 0xA5	; 165
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1702:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1704:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <memset>
    1708:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170c:	21 e0       	ldi	r18, 0x01	; 1
    170e:	82 1a       	sub	r8, r18
    1710:	91 08       	sbc	r9, r1
    1712:	88 0e       	add	r8, r24
    1714:	99 1e       	adc	r9, r25
    1716:	a1 14       	cp	r10, r1
    1718:	b1 04       	cpc	r11, r1
    171a:	89 f4       	brne	.+34     	; 0x173e <prvInitialiseNewTask+0x6a>
    171c:	15 c0       	rjmp	.+42     	; 0x1748 <prvInitialiseNewTask+0x74>
    171e:	82 2f       	mov	r24, r18
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	f5 01       	movw	r30, r10
    1724:	e8 0f       	add	r30, r24
    1726:	f9 1f       	adc	r31, r25
    1728:	30 81       	ld	r19, Z
    172a:	de 01       	movw	r26, r28
    172c:	a8 0f       	add	r26, r24
    172e:	b9 1f       	adc	r27, r25
    1730:	5d 96       	adiw	r26, 0x1d	; 29
    1732:	3c 93       	st	X, r19
    1734:	80 81       	ld	r24, Z
    1736:	88 23       	and	r24, r24
    1738:	29 f0       	breq	.+10     	; 0x1744 <prvInitialiseNewTask+0x70>
    173a:	2f 5f       	subi	r18, 0xFF	; 255
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <prvInitialiseNewTask+0x6c>
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	20 31       	cpi	r18, 0x10	; 16
    1742:	68 f3       	brcs	.-38     	; 0x171e <prvInitialiseNewTask+0x4a>
    1744:	1c a6       	std	Y+44, r1	; 0x2c
    1746:	01 c0       	rjmp	.+2      	; 0x174a <prvInitialiseNewTask+0x76>
    1748:	1d 8e       	std	Y+29, r1	; 0x1d
    174a:	0a 30       	cpi	r16, 0x0A	; 10
    174c:	08 f0       	brcs	.+2      	; 0x1750 <prvInitialiseNewTask+0x7c>
    174e:	09 e0       	ldi	r16, 0x09	; 9
    1750:	0a 8f       	std	Y+26, r16	; 0x1a
    1752:	0d a7       	std	Y+45, r16	; 0x2d
    1754:	1e a6       	std	Y+46, r1	; 0x2e
    1756:	ce 01       	movw	r24, r28
    1758:	02 96       	adiw	r24, 0x02	; 2
    175a:	0e 94 0a 03 	call	0x614	; 0x614 <vListInitialiseItem>
    175e:	ce 01       	movw	r24, r28
    1760:	0e 96       	adiw	r24, 0x0e	; 14
    1762:	0e 94 0a 03 	call	0x614	; 0x614 <vListInitialiseItem>
    1766:	db 87       	std	Y+11, r29	; 0x0b
    1768:	ca 87       	std	Y+10, r28	; 0x0a
    176a:	8a e0       	ldi	r24, 0x0A	; 10
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a0 e0       	ldi	r26, 0x00	; 0
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	80 1b       	sub	r24, r16
    1774:	91 09       	sbc	r25, r1
    1776:	a1 09       	sbc	r26, r1
    1778:	b1 09       	sbc	r27, r1
    177a:	8e 87       	std	Y+14, r24	; 0x0e
    177c:	9f 87       	std	Y+15, r25	; 0x0f
    177e:	a8 8b       	std	Y+16, r26	; 0x10
    1780:	b9 8b       	std	Y+17, r27	; 0x11
    1782:	df 8b       	std	Y+23, r29	; 0x17
    1784:	ce 8b       	std	Y+22, r28	; 0x16
    1786:	84 e0       	ldi	r24, 0x04	; 4
    1788:	fe 01       	movw	r30, r28
    178a:	bf 96       	adiw	r30, 0x2f	; 47
    178c:	df 01       	movw	r26, r30
    178e:	1d 92       	st	X+, r1
    1790:	8a 95       	dec	r24
    1792:	e9 f7       	brne	.-6      	; 0x178e <prvInitialiseNewTask+0xba>
    1794:	1b aa       	std	Y+51, r1	; 0x33
    1796:	a3 01       	movw	r20, r6
    1798:	b2 01       	movw	r22, r4
    179a:	c4 01       	movw	r24, r8
    179c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <pxPortInitialiseStack>
    17a0:	99 83       	std	Y+1, r25	; 0x01
    17a2:	88 83       	st	Y, r24
    17a4:	e1 14       	cp	r14, r1
    17a6:	f1 04       	cpc	r15, r1
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <prvInitialiseNewTask+0xdc>
    17aa:	f7 01       	movw	r30, r14
    17ac:	d1 83       	std	Z+1, r29	; 0x01
    17ae:	c0 83       	st	Z, r28
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	bf 90       	pop	r11
    17c0:	af 90       	pop	r10
    17c2:	9f 90       	pop	r9
    17c4:	8f 90       	pop	r8
    17c6:	7f 90       	pop	r7
    17c8:	6f 90       	pop	r6
    17ca:	5f 90       	pop	r5
    17cc:	4f 90       	pop	r4
    17ce:	08 95       	ret

000017d0 <prvInitialiseTaskLists>:
    17d0:	cf 93       	push	r28
    17d2:	c0 e0       	ldi	r28, 0x00	; 0
    17d4:	09 c0       	rjmp	.+18     	; 0x17e8 <prvInitialiseTaskLists+0x18>
    17d6:	2b e0       	ldi	r18, 0x0B	; 11
    17d8:	c2 9f       	mul	r28, r18
    17da:	c0 01       	movw	r24, r0
    17dc:	11 24       	eor	r1, r1
    17de:	85 53       	subi	r24, 0x35	; 53
    17e0:	99 4e       	sbci	r25, 0xE9	; 233
    17e2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialise>
    17e6:	cf 5f       	subi	r28, 0xFF	; 255
    17e8:	ca 30       	cpi	r28, 0x0A	; 10
    17ea:	a8 f3       	brcs	.-22     	; 0x17d6 <prvInitialiseTaskLists+0x6>
    17ec:	80 ec       	ldi	r24, 0xC0	; 192
    17ee:	96 e1       	ldi	r25, 0x16	; 22
    17f0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialise>
    17f4:	85 eb       	ldi	r24, 0xB5	; 181
    17f6:	96 e1       	ldi	r25, 0x16	; 22
    17f8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialise>
    17fc:	86 ea       	ldi	r24, 0xA6	; 166
    17fe:	96 e1       	ldi	r25, 0x16	; 22
    1800:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialise>
    1804:	8b e9       	ldi	r24, 0x9B	; 155
    1806:	96 e1       	ldi	r25, 0x16	; 22
    1808:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialise>
    180c:	8f e8       	ldi	r24, 0x8F	; 143
    180e:	96 e1       	ldi	r25, 0x16	; 22
    1810:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialise>
    1814:	80 ec       	ldi	r24, 0xC0	; 192
    1816:	96 e1       	ldi	r25, 0x16	; 22
    1818:	90 93 b4 16 	sts	0x16B4, r25	; 0x8016b4 <pxDelayedTaskList+0x1>
    181c:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <pxDelayedTaskList>
    1820:	85 eb       	ldi	r24, 0xB5	; 181
    1822:	96 e1       	ldi	r25, 0x16	; 22
    1824:	90 93 b2 16 	sts	0x16B2, r25	; 0x8016b2 <pxOverflowDelayedTaskList+0x1>
    1828:	80 93 b1 16 	sts	0x16B1, r24	; 0x8016b1 <pxOverflowDelayedTaskList>
    182c:	cf 91       	pop	r28
    182e:	08 95       	ret

00001830 <prvAddNewTaskToReadyList>:
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	ec 01       	movw	r28, r24
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	0f 92       	push	r0
    183c:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxCurrentNumberOfTasks>
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	80 93 8e 16 	sts	0x168E, r24	; 0x80168e <uxCurrentNumberOfTasks>
    1846:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <pxCurrentTCB>
    184a:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    184e:	89 2b       	or	r24, r25
    1850:	51 f4       	brne	.+20     	; 0x1866 <prvAddNewTaskToReadyList+0x36>
    1852:	d0 93 3a 17 	sts	0x173A, r29	; 0x80173a <pxCurrentTCB+0x1>
    1856:	c0 93 39 17 	sts	0x1739, r28	; 0x801739 <pxCurrentTCB>
    185a:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxCurrentNumberOfTasks>
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	91 f4       	brne	.+36     	; 0x1886 <prvAddNewTaskToReadyList+0x56>
    1862:	b6 df       	rcall	.-148    	; 0x17d0 <prvInitialiseTaskLists>
    1864:	10 c0       	rjmp	.+32     	; 0x1886 <prvAddNewTaskToReadyList+0x56>
    1866:	80 91 88 16 	lds	r24, 0x1688	; 0x801688 <xSchedulerRunning>
    186a:	81 11       	cpse	r24, r1
    186c:	0c c0       	rjmp	.+24     	; 0x1886 <prvAddNewTaskToReadyList+0x56>
    186e:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    1872:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    1876:	92 8d       	ldd	r25, Z+26	; 0x1a
    1878:	8a 8d       	ldd	r24, Y+26	; 0x1a
    187a:	89 17       	cp	r24, r25
    187c:	20 f0       	brcs	.+8      	; 0x1886 <prvAddNewTaskToReadyList+0x56>
    187e:	d0 93 3a 17 	sts	0x173A, r29	; 0x80173a <pxCurrentTCB+0x1>
    1882:	c0 93 39 17 	sts	0x1739, r28	; 0x801739 <pxCurrentTCB>
    1886:	80 91 81 16 	lds	r24, 0x1681	; 0x801681 <uxTaskNumber>
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	80 93 81 16 	sts	0x1681, r24	; 0x801681 <uxTaskNumber>
    1890:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1892:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <uxTopReadyPriority>
    1896:	8e 17       	cp	r24, r30
    1898:	10 f4       	brcc	.+4      	; 0x189e <prvAddNewTaskToReadyList+0x6e>
    189a:	e0 93 89 16 	sts	0x1689, r30	; 0x801689 <uxTopReadyPriority>
    189e:	8b e0       	ldi	r24, 0x0B	; 11
    18a0:	8e 9f       	mul	r24, r30
    18a2:	f0 01       	movw	r30, r0
    18a4:	11 24       	eor	r1, r1
    18a6:	e5 53       	subi	r30, 0x35	; 53
    18a8:	f9 4e       	sbci	r31, 0xE9	; 233
    18aa:	01 80       	ldd	r0, Z+1	; 0x01
    18ac:	f2 81       	ldd	r31, Z+2	; 0x02
    18ae:	e0 2d       	mov	r30, r0
    18b0:	ff 83       	std	Y+7, r31	; 0x07
    18b2:	ee 83       	std	Y+6, r30	; 0x06
    18b4:	26 81       	ldd	r18, Z+6	; 0x06
    18b6:	37 81       	ldd	r19, Z+7	; 0x07
    18b8:	39 87       	std	Y+9, r19	; 0x09
    18ba:	28 87       	std	Y+8, r18	; 0x08
    18bc:	a6 81       	ldd	r26, Z+6	; 0x06
    18be:	b7 81       	ldd	r27, Z+7	; 0x07
    18c0:	9e 01       	movw	r18, r28
    18c2:	2e 5f       	subi	r18, 0xFE	; 254
    18c4:	3f 4f       	sbci	r19, 0xFF	; 255
    18c6:	15 96       	adiw	r26, 0x05	; 5
    18c8:	3c 93       	st	X, r19
    18ca:	2e 93       	st	-X, r18
    18cc:	14 97       	sbiw	r26, 0x04	; 4
    18ce:	37 83       	std	Z+7, r19	; 0x07
    18d0:	26 83       	std	Z+6, r18	; 0x06
    18d2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    18d4:	8e 9f       	mul	r24, r30
    18d6:	f0 01       	movw	r30, r0
    18d8:	11 24       	eor	r1, r1
    18da:	e5 53       	subi	r30, 0x35	; 53
    18dc:	f9 4e       	sbci	r31, 0xE9	; 233
    18de:	fd 87       	std	Y+13, r31	; 0x0d
    18e0:	ec 87       	std	Y+12, r30	; 0x0c
    18e2:	80 81       	ld	r24, Z
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	80 83       	st	Z, r24
    18e8:	0f 90       	pop	r0
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	80 91 88 16 	lds	r24, 0x1688	; 0x801688 <xSchedulerRunning>
    18f0:	88 23       	and	r24, r24
    18f2:	51 f0       	breq	.+20     	; 0x1908 <prvAddNewTaskToReadyList+0xd8>
    18f4:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    18f8:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    18fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    18fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1900:	98 17       	cp	r25, r24
    1902:	10 f4       	brcc	.+4      	; 0x1908 <prvAddNewTaskToReadyList+0xd8>
    1904:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortYield>
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <prvCheckTasksWaitingTermination>:
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	1b c0       	rjmp	.+54     	; 0x194a <prvCheckTasksWaitingTermination+0x3c>
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	0f 92       	push	r0
    191a:	e0 91 a2 16 	lds	r30, 0x16A2	; 0x8016a2 <xTasksWaitingTermination+0x7>
    191e:	f0 91 a3 16 	lds	r31, 0x16A3	; 0x8016a3 <xTasksWaitingTermination+0x8>
    1922:	c0 85       	ldd	r28, Z+8	; 0x08
    1924:	d1 85       	ldd	r29, Z+9	; 0x09
    1926:	ce 01       	movw	r24, r28
    1928:	02 96       	adiw	r24, 0x02	; 2
    192a:	0e 94 4b 03 	call	0x696	; 0x696 <uxListRemove>
    192e:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxCurrentNumberOfTasks>
    1932:	81 50       	subi	r24, 0x01	; 1
    1934:	80 93 8e 16 	sts	0x168E, r24	; 0x80168e <uxCurrentNumberOfTasks>
    1938:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <uxDeletedTasksWaitingCleanUp>
    193c:	81 50       	subi	r24, 0x01	; 1
    193e:	80 93 9a 16 	sts	0x169A, r24	; 0x80169a <uxDeletedTasksWaitingCleanUp>
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	ce 01       	movw	r24, r28
    1948:	b8 de       	rcall	.-656    	; 0x16ba <prvDeleteTCB>
    194a:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <uxDeletedTasksWaitingCleanUp>
    194e:	81 11       	cpse	r24, r1
    1950:	e1 cf       	rjmp	.-62     	; 0x1914 <prvCheckTasksWaitingTermination+0x6>
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	08 95       	ret

00001958 <prvAddCurrentTaskToDelayedList>:
    1958:	8f 92       	push	r8
    195a:	9f 92       	push	r9
    195c:	af 92       	push	r10
    195e:	bf 92       	push	r11
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	6b 01       	movw	r12, r22
    196e:	7c 01       	movw	r14, r24
    1970:	c4 2f       	mov	r28, r20
    1972:	80 90 8a 16 	lds	r8, 0x168A	; 0x80168a <xTickCount>
    1976:	90 90 8b 16 	lds	r9, 0x168B	; 0x80168b <xTickCount+0x1>
    197a:	a0 90 8c 16 	lds	r10, 0x168C	; 0x80168c <xTickCount+0x2>
    197e:	b0 90 8d 16 	lds	r11, 0x168D	; 0x80168d <xTickCount+0x3>
    1982:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <pxCurrentTCB>
    1986:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    198a:	02 96       	adiw	r24, 0x02	; 2
    198c:	0e 94 4b 03 	call	0x696	; 0x696 <uxListRemove>
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	c8 16       	cp	r12, r24
    1994:	d8 06       	cpc	r13, r24
    1996:	e8 06       	cpc	r14, r24
    1998:	f8 06       	cpc	r15, r24
    199a:	b1 f5       	brne	.+108    	; 0x1a08 <prvAddCurrentTaskToDelayedList+0xb0>
    199c:	cc 23       	and	r28, r28
    199e:	a1 f1       	breq	.+104    	; 0x1a08 <prvAddCurrentTaskToDelayedList+0xb0>
    19a0:	ef e8       	ldi	r30, 0x8F	; 143
    19a2:	f6 e1       	ldi	r31, 0x16	; 22
    19a4:	a1 81       	ldd	r26, Z+1	; 0x01
    19a6:	b2 81       	ldd	r27, Z+2	; 0x02
    19a8:	c0 91 39 17 	lds	r28, 0x1739	; 0x801739 <pxCurrentTCB>
    19ac:	d0 91 3a 17 	lds	r29, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    19b0:	bf 83       	std	Y+7, r27	; 0x07
    19b2:	ae 83       	std	Y+6, r26	; 0x06
    19b4:	c0 91 39 17 	lds	r28, 0x1739	; 0x801739 <pxCurrentTCB>
    19b8:	d0 91 3a 17 	lds	r29, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    19bc:	16 96       	adiw	r26, 0x06	; 6
    19be:	8d 91       	ld	r24, X+
    19c0:	9c 91       	ld	r25, X
    19c2:	17 97       	sbiw	r26, 0x07	; 7
    19c4:	99 87       	std	Y+9, r25	; 0x09
    19c6:	88 87       	std	Y+8, r24	; 0x08
    19c8:	16 96       	adiw	r26, 0x06	; 6
    19ca:	cd 91       	ld	r28, X+
    19cc:	dc 91       	ld	r29, X
    19ce:	17 97       	sbiw	r26, 0x07	; 7
    19d0:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <pxCurrentTCB>
    19d4:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    19d8:	02 96       	adiw	r24, 0x02	; 2
    19da:	9d 83       	std	Y+5, r25	; 0x05
    19dc:	8c 83       	std	Y+4, r24	; 0x04
    19de:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <pxCurrentTCB>
    19e2:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    19e6:	02 96       	adiw	r24, 0x02	; 2
    19e8:	17 96       	adiw	r26, 0x07	; 7
    19ea:	9c 93       	st	X, r25
    19ec:	8e 93       	st	-X, r24
    19ee:	16 97       	sbiw	r26, 0x06	; 6
    19f0:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
    19f4:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    19f8:	1d 96       	adiw	r26, 0x0d	; 13
    19fa:	fc 93       	st	X, r31
    19fc:	ee 93       	st	-X, r30
    19fe:	1c 97       	sbiw	r26, 0x0c	; 12
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	80 83       	st	Z, r24
    1a06:	3f c0       	rjmp	.+126    	; 0x1a86 <prvAddCurrentTaskToDelayedList+0x12e>
    1a08:	c8 0c       	add	r12, r8
    1a0a:	d9 1c       	adc	r13, r9
    1a0c:	ea 1c       	adc	r14, r10
    1a0e:	fb 1c       	adc	r15, r11
    1a10:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    1a14:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    1a18:	c2 82       	std	Z+2, r12	; 0x02
    1a1a:	d3 82       	std	Z+3, r13	; 0x03
    1a1c:	e4 82       	std	Z+4, r14	; 0x04
    1a1e:	f5 82       	std	Z+5, r15	; 0x05
    1a20:	c8 14       	cp	r12, r8
    1a22:	d9 04       	cpc	r13, r9
    1a24:	ea 04       	cpc	r14, r10
    1a26:	fb 04       	cpc	r15, r11
    1a28:	68 f4       	brcc	.+26     	; 0x1a44 <prvAddCurrentTaskToDelayedList+0xec>
    1a2a:	60 91 39 17 	lds	r22, 0x1739	; 0x801739 <pxCurrentTCB>
    1a2e:	70 91 3a 17 	lds	r23, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    1a32:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <pxOverflowDelayedTaskList>
    1a36:	90 91 b2 16 	lds	r25, 0x16B2	; 0x8016b2 <pxOverflowDelayedTaskList+0x1>
    1a3a:	6e 5f       	subi	r22, 0xFE	; 254
    1a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3e:	0e 94 0e 03 	call	0x61c	; 0x61c <vListInsert>
    1a42:	21 c0       	rjmp	.+66     	; 0x1a86 <prvAddCurrentTaskToDelayedList+0x12e>
    1a44:	60 91 39 17 	lds	r22, 0x1739	; 0x801739 <pxCurrentTCB>
    1a48:	70 91 3a 17 	lds	r23, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    1a4c:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxDelayedTaskList>
    1a50:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxDelayedTaskList+0x1>
    1a54:	6e 5f       	subi	r22, 0xFE	; 254
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	0e 94 0e 03 	call	0x61c	; 0x61c <vListInsert>
    1a5c:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <xNextTaskUnblockTime>
    1a60:	90 91 7e 16 	lds	r25, 0x167E	; 0x80167e <xNextTaskUnblockTime+0x1>
    1a64:	a0 91 7f 16 	lds	r26, 0x167F	; 0x80167f <xNextTaskUnblockTime+0x2>
    1a68:	b0 91 80 16 	lds	r27, 0x1680	; 0x801680 <xNextTaskUnblockTime+0x3>
    1a6c:	c8 16       	cp	r12, r24
    1a6e:	d9 06       	cpc	r13, r25
    1a70:	ea 06       	cpc	r14, r26
    1a72:	fb 06       	cpc	r15, r27
    1a74:	40 f4       	brcc	.+16     	; 0x1a86 <prvAddCurrentTaskToDelayedList+0x12e>
    1a76:	c0 92 7d 16 	sts	0x167D, r12	; 0x80167d <xNextTaskUnblockTime>
    1a7a:	d0 92 7e 16 	sts	0x167E, r13	; 0x80167e <xNextTaskUnblockTime+0x1>
    1a7e:	e0 92 7f 16 	sts	0x167F, r14	; 0x80167f <xNextTaskUnblockTime+0x2>
    1a82:	f0 92 80 16 	sts	0x1680, r15	; 0x801680 <xNextTaskUnblockTime+0x3>
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	df 90       	pop	r13
    1a90:	cf 90       	pop	r12
    1a92:	bf 90       	pop	r11
    1a94:	af 90       	pop	r10
    1a96:	9f 90       	pop	r9
    1a98:	8f 90       	pop	r8
    1a9a:	08 95       	ret

00001a9c <xTaskCreate>:
    1a9c:	2f 92       	push	r2
    1a9e:	3f 92       	push	r3
    1aa0:	4f 92       	push	r4
    1aa2:	5f 92       	push	r5
    1aa4:	6f 92       	push	r6
    1aa6:	7f 92       	push	r7
    1aa8:	8f 92       	push	r8
    1aaa:	9f 92       	push	r9
    1aac:	af 92       	push	r10
    1aae:	bf 92       	push	r11
    1ab0:	cf 92       	push	r12
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	3c 01       	movw	r6, r24
    1ac0:	1b 01       	movw	r2, r22
    1ac2:	4a 01       	movw	r8, r20
    1ac4:	29 01       	movw	r4, r18
    1ac6:	ca 01       	movw	r24, r20
    1ac8:	0e 94 0e 02 	call	0x41c	; 0x41c <pvPortMalloc>
    1acc:	6c 01       	movw	r12, r24
    1ace:	89 2b       	or	r24, r25
    1ad0:	71 f0       	breq	.+28     	; 0x1aee <xTaskCreate+0x52>
    1ad2:	84 e3       	ldi	r24, 0x34	; 52
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 0e 02 	call	0x41c	; 0x41c <pvPortMalloc>
    1ada:	ec 01       	movw	r28, r24
    1adc:	89 2b       	or	r24, r25
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <xTaskCreate+0x4a>
    1ae0:	dc 8e       	std	Y+28, r13	; 0x1c
    1ae2:	cb 8e       	std	Y+27, r12	; 0x1b
    1ae4:	06 c0       	rjmp	.+12     	; 0x1af2 <xTaskCreate+0x56>
    1ae6:	c6 01       	movw	r24, r12
    1ae8:	0e 94 b7 02 	call	0x56e	; 0x56e <vPortFree>
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <xTaskCreate+0x56>
    1aee:	c0 e0       	ldi	r28, 0x00	; 0
    1af0:	d0 e0       	ldi	r29, 0x00	; 0
    1af2:	20 97       	sbiw	r28, 0x00	; 0
    1af4:	61 f0       	breq	.+24     	; 0x1b0e <xTaskCreate+0x72>
    1af6:	a1 2c       	mov	r10, r1
    1af8:	b1 2c       	mov	r11, r1
    1afa:	6e 01       	movw	r12, r28
    1afc:	92 01       	movw	r18, r4
    1afe:	a4 01       	movw	r20, r8
    1b00:	b1 01       	movw	r22, r2
    1b02:	c3 01       	movw	r24, r6
    1b04:	e7 dd       	rcall	.-1074   	; 0x16d4 <prvInitialiseNewTask>
    1b06:	ce 01       	movw	r24, r28
    1b08:	93 de       	rcall	.-730    	; 0x1830 <prvAddNewTaskToReadyList>
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <xTaskCreate+0x74>
    1b0e:	8f ef       	ldi	r24, 0xFF	; 255
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	9f 90       	pop	r9
    1b24:	8f 90       	pop	r8
    1b26:	7f 90       	pop	r7
    1b28:	6f 90       	pop	r6
    1b2a:	5f 90       	pop	r5
    1b2c:	4f 90       	pop	r4
    1b2e:	3f 90       	pop	r3
    1b30:	2f 90       	pop	r2
    1b32:	08 95       	ret

00001b34 <vTaskStartScheduler>:
    1b34:	ef 92       	push	r14
    1b36:	ff 92       	push	r15
    1b38:	0f 93       	push	r16
    1b3a:	0f 2e       	mov	r0, r31
    1b3c:	fb e7       	ldi	r31, 0x7B	; 123
    1b3e:	ef 2e       	mov	r14, r31
    1b40:	f6 e1       	ldi	r31, 0x16	; 22
    1b42:	ff 2e       	mov	r15, r31
    1b44:	f0 2d       	mov	r31, r0
    1b46:	00 e0       	ldi	r16, 0x00	; 0
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 ec       	ldi	r20, 0xC0	; 192
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	6a e9       	ldi	r22, 0x9A	; 154
    1b52:	72 e0       	ldi	r23, 0x02	; 2
    1b54:	8d ec       	ldi	r24, 0xCD	; 205
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a1 df       	rcall	.-190    	; 0x1a9c <xTaskCreate>
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	11 f4       	brne	.+4      	; 0x1b62 <vTaskStartScheduler+0x2e>
    1b5e:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <xTimerCreateTimerTask>
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	c9 f4       	brne	.+50     	; 0x1b98 <vTaskStartScheduler+0x64>
    1b66:	f8 94       	cli
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	9f ef       	ldi	r25, 0xFF	; 255
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	80 93 7d 16 	sts	0x167D, r24	; 0x80167d <xNextTaskUnblockTime>
    1b72:	90 93 7e 16 	sts	0x167E, r25	; 0x80167e <xNextTaskUnblockTime+0x1>
    1b76:	a0 93 7f 16 	sts	0x167F, r26	; 0x80167f <xNextTaskUnblockTime+0x2>
    1b7a:	b0 93 80 16 	sts	0x1680, r27	; 0x801680 <xNextTaskUnblockTime+0x3>
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	80 93 88 16 	sts	0x1688, r24	; 0x801688 <xSchedulerRunning>
    1b84:	10 92 8a 16 	sts	0x168A, r1	; 0x80168a <xTickCount>
    1b88:	10 92 8b 16 	sts	0x168B, r1	; 0x80168b <xTickCount+0x1>
    1b8c:	10 92 8c 16 	sts	0x168C, r1	; 0x80168c <xTickCount+0x2>
    1b90:	10 92 8d 16 	sts	0x168D, r1	; 0x80168d <xTickCount+0x3>
    1b94:	0e 94 95 03 	call	0x72a	; 0x72a <xPortStartScheduler>
    1b98:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	08 95       	ret

00001ba4 <vTaskSuspendAll>:
    1ba4:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <uxSchedulerSuspended>
    1ba8:	8f 5f       	subi	r24, 0xFF	; 255
    1baa:	80 93 7a 16 	sts	0x167A, r24	; 0x80167a <uxSchedulerSuspended>
    1bae:	08 95       	ret

00001bb0 <xTaskGetTickCount>:
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	0f 92       	push	r0
    1bb6:	60 91 8a 16 	lds	r22, 0x168A	; 0x80168a <xTickCount>
    1bba:	70 91 8b 16 	lds	r23, 0x168B	; 0x80168b <xTickCount+0x1>
    1bbe:	80 91 8c 16 	lds	r24, 0x168C	; 0x80168c <xTickCount+0x2>
    1bc2:	90 91 8d 16 	lds	r25, 0x168D	; 0x80168d <xTickCount+0x3>
    1bc6:	0f 90       	pop	r0
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	08 95       	ret

00001bcc <xTaskIncrementTick>:
    1bcc:	cf 92       	push	r12
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <uxSchedulerSuspended>
    1bdc:	81 11       	cpse	r24, r1
    1bde:	05 c1       	rjmp	.+522    	; 0x1dea <xTaskIncrementTick+0x21e>
    1be0:	c0 90 8a 16 	lds	r12, 0x168A	; 0x80168a <xTickCount>
    1be4:	d0 90 8b 16 	lds	r13, 0x168B	; 0x80168b <xTickCount+0x1>
    1be8:	e0 90 8c 16 	lds	r14, 0x168C	; 0x80168c <xTickCount+0x2>
    1bec:	f0 90 8d 16 	lds	r15, 0x168D	; 0x80168d <xTickCount+0x3>
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	c8 1a       	sub	r12, r24
    1bf4:	d8 0a       	sbc	r13, r24
    1bf6:	e8 0a       	sbc	r14, r24
    1bf8:	f8 0a       	sbc	r15, r24
    1bfa:	c0 92 8a 16 	sts	0x168A, r12	; 0x80168a <xTickCount>
    1bfe:	d0 92 8b 16 	sts	0x168B, r13	; 0x80168b <xTickCount+0x1>
    1c02:	e0 92 8c 16 	sts	0x168C, r14	; 0x80168c <xTickCount+0x2>
    1c06:	f0 92 8d 16 	sts	0x168D, r15	; 0x80168d <xTickCount+0x3>
    1c0a:	c1 14       	cp	r12, r1
    1c0c:	d1 04       	cpc	r13, r1
    1c0e:	e1 04       	cpc	r14, r1
    1c10:	f1 04       	cpc	r15, r1
    1c12:	b1 f4       	brne	.+44     	; 0x1c40 <xTaskIncrementTick+0x74>
    1c14:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxDelayedTaskList>
    1c18:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxDelayedTaskList+0x1>
    1c1c:	20 91 b1 16 	lds	r18, 0x16B1	; 0x8016b1 <pxOverflowDelayedTaskList>
    1c20:	30 91 b2 16 	lds	r19, 0x16B2	; 0x8016b2 <pxOverflowDelayedTaskList+0x1>
    1c24:	30 93 b4 16 	sts	0x16B4, r19	; 0x8016b4 <pxDelayedTaskList+0x1>
    1c28:	20 93 b3 16 	sts	0x16B3, r18	; 0x8016b3 <pxDelayedTaskList>
    1c2c:	90 93 b2 16 	sts	0x16B2, r25	; 0x8016b2 <pxOverflowDelayedTaskList+0x1>
    1c30:	80 93 b1 16 	sts	0x16B1, r24	; 0x8016b1 <pxOverflowDelayedTaskList>
    1c34:	80 91 82 16 	lds	r24, 0x1682	; 0x801682 <xNumOfOverflows>
    1c38:	8f 5f       	subi	r24, 0xFF	; 255
    1c3a:	80 93 82 16 	sts	0x1682, r24	; 0x801682 <xNumOfOverflows>
    1c3e:	16 dd       	rcall	.-1492   	; 0x166c <prvResetNextTaskUnblockTime>
    1c40:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <xNextTaskUnblockTime>
    1c44:	90 91 7e 16 	lds	r25, 0x167E	; 0x80167e <xNextTaskUnblockTime+0x1>
    1c48:	a0 91 7f 16 	lds	r26, 0x167F	; 0x80167f <xNextTaskUnblockTime+0x2>
    1c4c:	b0 91 80 16 	lds	r27, 0x1680	; 0x801680 <xNextTaskUnblockTime+0x3>
    1c50:	c8 16       	cp	r12, r24
    1c52:	d9 06       	cpc	r13, r25
    1c54:	ea 06       	cpc	r14, r26
    1c56:	fb 06       	cpc	r15, r27
    1c58:	20 f4       	brcc	.+8      	; 0x1c62 <xTaskIncrementTick+0x96>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	b2 c0       	rjmp	.+356    	; 0x1dc2 <xTaskIncrementTick+0x1f6>
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	01 c0       	rjmp	.+2      	; 0x1c64 <xTaskIncrementTick+0x98>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxDelayedTaskList>
    1c68:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxDelayedTaskList+0x1>
    1c6c:	90 81       	ld	r25, Z
    1c6e:	91 11       	cpse	r25, r1
    1c70:	0c c0       	rjmp	.+24     	; 0x1c8a <xTaskIncrementTick+0xbe>
    1c72:	4f ef       	ldi	r20, 0xFF	; 255
    1c74:	5f ef       	ldi	r21, 0xFF	; 255
    1c76:	ba 01       	movw	r22, r20
    1c78:	40 93 7d 16 	sts	0x167D, r20	; 0x80167d <xNextTaskUnblockTime>
    1c7c:	50 93 7e 16 	sts	0x167E, r21	; 0x80167e <xNextTaskUnblockTime+0x1>
    1c80:	60 93 7f 16 	sts	0x167F, r22	; 0x80167f <xNextTaskUnblockTime+0x2>
    1c84:	70 93 80 16 	sts	0x1680, r23	; 0x801680 <xNextTaskUnblockTime+0x3>
    1c88:	9c c0       	rjmp	.+312    	; 0x1dc2 <xTaskIncrementTick+0x1f6>
    1c8a:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxDelayedTaskList>
    1c8e:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxDelayedTaskList+0x1>
    1c92:	07 80       	ldd	r0, Z+7	; 0x07
    1c94:	f0 85       	ldd	r31, Z+8	; 0x08
    1c96:	e0 2d       	mov	r30, r0
    1c98:	00 84       	ldd	r0, Z+8	; 0x08
    1c9a:	f1 85       	ldd	r31, Z+9	; 0x09
    1c9c:	e0 2d       	mov	r30, r0
    1c9e:	42 81       	ldd	r20, Z+2	; 0x02
    1ca0:	53 81       	ldd	r21, Z+3	; 0x03
    1ca2:	64 81       	ldd	r22, Z+4	; 0x04
    1ca4:	75 81       	ldd	r23, Z+5	; 0x05
    1ca6:	c4 16       	cp	r12, r20
    1ca8:	d5 06       	cpc	r13, r21
    1caa:	e6 06       	cpc	r14, r22
    1cac:	f7 06       	cpc	r15, r23
    1cae:	48 f4       	brcc	.+18     	; 0x1cc2 <xTaskIncrementTick+0xf6>
    1cb0:	40 93 7d 16 	sts	0x167D, r20	; 0x80167d <xNextTaskUnblockTime>
    1cb4:	50 93 7e 16 	sts	0x167E, r21	; 0x80167e <xNextTaskUnblockTime+0x1>
    1cb8:	60 93 7f 16 	sts	0x167F, r22	; 0x80167f <xNextTaskUnblockTime+0x2>
    1cbc:	70 93 80 16 	sts	0x1680, r23	; 0x801680 <xNextTaskUnblockTime+0x3>
    1cc0:	80 c0       	rjmp	.+256    	; 0x1dc2 <xTaskIncrementTick+0x1f6>
    1cc2:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cc4:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cc6:	c6 81       	ldd	r28, Z+6	; 0x06
    1cc8:	d7 81       	ldd	r29, Z+7	; 0x07
    1cca:	20 85       	ldd	r18, Z+8	; 0x08
    1ccc:	31 85       	ldd	r19, Z+9	; 0x09
    1cce:	3f 83       	std	Y+7, r19	; 0x07
    1cd0:	2e 83       	std	Y+6, r18	; 0x06
    1cd2:	c0 85       	ldd	r28, Z+8	; 0x08
    1cd4:	d1 85       	ldd	r29, Z+9	; 0x09
    1cd6:	26 81       	ldd	r18, Z+6	; 0x06
    1cd8:	37 81       	ldd	r19, Z+7	; 0x07
    1cda:	3d 83       	std	Y+5, r19	; 0x05
    1cdc:	2c 83       	std	Y+4, r18	; 0x04
    1cde:	11 96       	adiw	r26, 0x01	; 1
    1ce0:	4d 91       	ld	r20, X+
    1ce2:	5c 91       	ld	r21, X
    1ce4:	12 97       	sbiw	r26, 0x02	; 2
    1ce6:	9f 01       	movw	r18, r30
    1ce8:	2e 5f       	subi	r18, 0xFE	; 254
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	42 17       	cp	r20, r18
    1cee:	53 07       	cpc	r21, r19
    1cf0:	31 f4       	brne	.+12     	; 0x1cfe <xTaskIncrementTick+0x132>
    1cf2:	40 85       	ldd	r20, Z+8	; 0x08
    1cf4:	51 85       	ldd	r21, Z+9	; 0x09
    1cf6:	12 96       	adiw	r26, 0x02	; 2
    1cf8:	5c 93       	st	X, r21
    1cfa:	4e 93       	st	-X, r20
    1cfc:	11 97       	sbiw	r26, 0x01	; 1
    1cfe:	15 86       	std	Z+13, r1	; 0x0d
    1d00:	14 86       	std	Z+12, r1	; 0x0c
    1d02:	9c 91       	ld	r25, X
    1d04:	91 50       	subi	r25, 0x01	; 1
    1d06:	9c 93       	st	X, r25
    1d08:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d0a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d0c:	10 97       	sbiw	r26, 0x00	; 0
    1d0e:	09 f1       	breq	.+66     	; 0x1d52 <xTaskIncrementTick+0x186>
    1d10:	c2 89       	ldd	r28, Z+18	; 0x12
    1d12:	d3 89       	ldd	r29, Z+19	; 0x13
    1d14:	44 89       	ldd	r20, Z+20	; 0x14
    1d16:	55 89       	ldd	r21, Z+21	; 0x15
    1d18:	5f 83       	std	Y+7, r21	; 0x07
    1d1a:	4e 83       	std	Y+6, r20	; 0x06
    1d1c:	c4 89       	ldd	r28, Z+20	; 0x14
    1d1e:	d5 89       	ldd	r29, Z+21	; 0x15
    1d20:	42 89       	ldd	r20, Z+18	; 0x12
    1d22:	53 89       	ldd	r21, Z+19	; 0x13
    1d24:	5d 83       	std	Y+5, r21	; 0x05
    1d26:	4c 83       	std	Y+4, r20	; 0x04
    1d28:	11 96       	adiw	r26, 0x01	; 1
    1d2a:	6d 91       	ld	r22, X+
    1d2c:	7c 91       	ld	r23, X
    1d2e:	12 97       	sbiw	r26, 0x02	; 2
    1d30:	af 01       	movw	r20, r30
    1d32:	42 5f       	subi	r20, 0xF2	; 242
    1d34:	5f 4f       	sbci	r21, 0xFF	; 255
    1d36:	64 17       	cp	r22, r20
    1d38:	75 07       	cpc	r23, r21
    1d3a:	31 f4       	brne	.+12     	; 0x1d48 <xTaskIncrementTick+0x17c>
    1d3c:	44 89       	ldd	r20, Z+20	; 0x14
    1d3e:	55 89       	ldd	r21, Z+21	; 0x15
    1d40:	12 96       	adiw	r26, 0x02	; 2
    1d42:	5c 93       	st	X, r21
    1d44:	4e 93       	st	-X, r20
    1d46:	11 97       	sbiw	r26, 0x01	; 1
    1d48:	11 8e       	std	Z+25, r1	; 0x19
    1d4a:	10 8e       	std	Z+24, r1	; 0x18
    1d4c:	9c 91       	ld	r25, X
    1d4e:	91 50       	subi	r25, 0x01	; 1
    1d50:	9c 93       	st	X, r25
    1d52:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d54:	90 91 89 16 	lds	r25, 0x1689	; 0x801689 <uxTopReadyPriority>
    1d58:	9a 17       	cp	r25, r26
    1d5a:	10 f4       	brcc	.+4      	; 0x1d60 <xTaskIncrementTick+0x194>
    1d5c:	a0 93 89 16 	sts	0x1689, r26	; 0x801689 <uxTopReadyPriority>
    1d60:	9b e0       	ldi	r25, 0x0B	; 11
    1d62:	9a 9f       	mul	r25, r26
    1d64:	d0 01       	movw	r26, r0
    1d66:	11 24       	eor	r1, r1
    1d68:	a5 53       	subi	r26, 0x35	; 53
    1d6a:	b9 4e       	sbci	r27, 0xE9	; 233
    1d6c:	11 96       	adiw	r26, 0x01	; 1
    1d6e:	0d 90       	ld	r0, X+
    1d70:	bc 91       	ld	r27, X
    1d72:	a0 2d       	mov	r26, r0
    1d74:	b7 83       	std	Z+7, r27	; 0x07
    1d76:	a6 83       	std	Z+6, r26	; 0x06
    1d78:	16 96       	adiw	r26, 0x06	; 6
    1d7a:	4d 91       	ld	r20, X+
    1d7c:	5c 91       	ld	r21, X
    1d7e:	17 97       	sbiw	r26, 0x07	; 7
    1d80:	51 87       	std	Z+9, r21	; 0x09
    1d82:	40 87       	std	Z+8, r20	; 0x08
    1d84:	16 96       	adiw	r26, 0x06	; 6
    1d86:	cd 91       	ld	r28, X+
    1d88:	dc 91       	ld	r29, X
    1d8a:	17 97       	sbiw	r26, 0x07	; 7
    1d8c:	3d 83       	std	Y+5, r19	; 0x05
    1d8e:	2c 83       	std	Y+4, r18	; 0x04
    1d90:	17 96       	adiw	r26, 0x07	; 7
    1d92:	3c 93       	st	X, r19
    1d94:	2e 93       	st	-X, r18
    1d96:	16 97       	sbiw	r26, 0x06	; 6
    1d98:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d9a:	9a 9f       	mul	r25, r26
    1d9c:	d0 01       	movw	r26, r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	a5 53       	subi	r26, 0x35	; 53
    1da2:	b9 4e       	sbci	r27, 0xE9	; 233
    1da4:	b5 87       	std	Z+13, r27	; 0x0d
    1da6:	a4 87       	std	Z+12, r26	; 0x0c
    1da8:	9c 91       	ld	r25, X
    1daa:	9f 5f       	subi	r25, 0xFF	; 255
    1dac:	9c 93       	st	X, r25
    1dae:	22 8d       	ldd	r18, Z+26	; 0x1a
    1db0:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    1db4:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    1db8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1dba:	29 17       	cp	r18, r25
    1dbc:	08 f0       	brcs	.+2      	; 0x1dc0 <xTaskIncrementTick+0x1f4>
    1dbe:	4f cf       	rjmp	.-354    	; 0x1c5e <xTaskIncrementTick+0x92>
    1dc0:	51 cf       	rjmp	.-350    	; 0x1c64 <xTaskIncrementTick+0x98>
    1dc2:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    1dc6:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    1dca:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1dcc:	9b e0       	ldi	r25, 0x0B	; 11
    1dce:	e9 9f       	mul	r30, r25
    1dd0:	f0 01       	movw	r30, r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	e5 53       	subi	r30, 0x35	; 53
    1dd6:	f9 4e       	sbci	r31, 0xE9	; 233
    1dd8:	90 81       	ld	r25, Z
    1dda:	92 30       	cpi	r25, 0x02	; 2
    1ddc:	08 f0       	brcs	.+2      	; 0x1de0 <xTaskIncrementTick+0x214>
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 91 83 16 	lds	r25, 0x1683	; 0x801683 <xYieldPending>
    1de4:	91 11       	cpse	r25, r1
    1de6:	16 c0       	rjmp	.+44     	; 0x1e14 <xTaskIncrementTick+0x248>
    1de8:	16 c0       	rjmp	.+44     	; 0x1e16 <xTaskIncrementTick+0x24a>
    1dea:	80 91 84 16 	lds	r24, 0x1684	; 0x801684 <xPendedTicks>
    1dee:	90 91 85 16 	lds	r25, 0x1685	; 0x801685 <xPendedTicks+0x1>
    1df2:	a0 91 86 16 	lds	r26, 0x1686	; 0x801686 <xPendedTicks+0x2>
    1df6:	b0 91 87 16 	lds	r27, 0x1687	; 0x801687 <xPendedTicks+0x3>
    1dfa:	01 96       	adiw	r24, 0x01	; 1
    1dfc:	a1 1d       	adc	r26, r1
    1dfe:	b1 1d       	adc	r27, r1
    1e00:	80 93 84 16 	sts	0x1684, r24	; 0x801684 <xPendedTicks>
    1e04:	90 93 85 16 	sts	0x1685, r25	; 0x801685 <xPendedTicks+0x1>
    1e08:	a0 93 86 16 	sts	0x1686, r26	; 0x801686 <xPendedTicks+0x2>
    1e0c:	b0 93 87 16 	sts	0x1687, r27	; 0x801687 <xPendedTicks+0x3>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <xTaskIncrementTick+0x24a>
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	08 95       	ret

00001e24 <xTaskResumeAll>:
    1e24:	cf 92       	push	r12
    1e26:	df 92       	push	r13
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	0f 92       	push	r0
    1e36:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <uxSchedulerSuspended>
    1e3a:	81 50       	subi	r24, 0x01	; 1
    1e3c:	80 93 7a 16 	sts	0x167A, r24	; 0x80167a <uxSchedulerSuspended>
    1e40:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <uxSchedulerSuspended>
    1e44:	81 11       	cpse	r24, r1
    1e46:	be c0       	rjmp	.+380    	; 0x1fc4 <xTaskResumeAll+0x1a0>
    1e48:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxCurrentNumberOfTasks>
    1e4c:	81 11       	cpse	r24, r1
    1e4e:	88 c0       	rjmp	.+272    	; 0x1f60 <xTaskResumeAll+0x13c>
    1e50:	bc c0       	rjmp	.+376    	; 0x1fca <xTaskResumeAll+0x1a6>
    1e52:	e0 91 ad 16 	lds	r30, 0x16AD	; 0x8016ad <xPendingReadyList+0x7>
    1e56:	f0 91 ae 16 	lds	r31, 0x16AE	; 0x8016ae <xPendingReadyList+0x8>
    1e5a:	00 84       	ldd	r0, Z+8	; 0x08
    1e5c:	f1 85       	ldd	r31, Z+9	; 0x09
    1e5e:	e0 2d       	mov	r30, r0
    1e60:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e62:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e64:	c2 89       	ldd	r28, Z+18	; 0x12
    1e66:	d3 89       	ldd	r29, Z+19	; 0x13
    1e68:	84 89       	ldd	r24, Z+20	; 0x14
    1e6a:	95 89       	ldd	r25, Z+21	; 0x15
    1e6c:	9f 83       	std	Y+7, r25	; 0x07
    1e6e:	8e 83       	std	Y+6, r24	; 0x06
    1e70:	c4 89       	ldd	r28, Z+20	; 0x14
    1e72:	d5 89       	ldd	r29, Z+21	; 0x15
    1e74:	82 89       	ldd	r24, Z+18	; 0x12
    1e76:	93 89       	ldd	r25, Z+19	; 0x13
    1e78:	9d 83       	std	Y+5, r25	; 0x05
    1e7a:	8c 83       	std	Y+4, r24	; 0x04
    1e7c:	11 96       	adiw	r26, 0x01	; 1
    1e7e:	2d 91       	ld	r18, X+
    1e80:	3c 91       	ld	r19, X
    1e82:	12 97       	sbiw	r26, 0x02	; 2
    1e84:	cf 01       	movw	r24, r30
    1e86:	0e 96       	adiw	r24, 0x0e	; 14
    1e88:	28 17       	cp	r18, r24
    1e8a:	39 07       	cpc	r19, r25
    1e8c:	31 f4       	brne	.+12     	; 0x1e9a <xTaskResumeAll+0x76>
    1e8e:	84 89       	ldd	r24, Z+20	; 0x14
    1e90:	95 89       	ldd	r25, Z+21	; 0x15
    1e92:	12 96       	adiw	r26, 0x02	; 2
    1e94:	9c 93       	st	X, r25
    1e96:	8e 93       	st	-X, r24
    1e98:	11 97       	sbiw	r26, 0x01	; 1
    1e9a:	11 8e       	std	Z+25, r1	; 0x19
    1e9c:	10 8e       	std	Z+24, r1	; 0x18
    1e9e:	8c 91       	ld	r24, X
    1ea0:	81 50       	subi	r24, 0x01	; 1
    1ea2:	8c 93       	st	X, r24
    1ea4:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ea6:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ea8:	c6 81       	ldd	r28, Z+6	; 0x06
    1eaa:	d7 81       	ldd	r29, Z+7	; 0x07
    1eac:	80 85       	ldd	r24, Z+8	; 0x08
    1eae:	91 85       	ldd	r25, Z+9	; 0x09
    1eb0:	9f 83       	std	Y+7, r25	; 0x07
    1eb2:	8e 83       	std	Y+6, r24	; 0x06
    1eb4:	c0 85       	ldd	r28, Z+8	; 0x08
    1eb6:	d1 85       	ldd	r29, Z+9	; 0x09
    1eb8:	86 81       	ldd	r24, Z+6	; 0x06
    1eba:	97 81       	ldd	r25, Z+7	; 0x07
    1ebc:	9d 83       	std	Y+5, r25	; 0x05
    1ebe:	8c 83       	std	Y+4, r24	; 0x04
    1ec0:	11 96       	adiw	r26, 0x01	; 1
    1ec2:	8d 91       	ld	r24, X+
    1ec4:	9c 91       	ld	r25, X
    1ec6:	12 97       	sbiw	r26, 0x02	; 2
    1ec8:	9f 01       	movw	r18, r30
    1eca:	2e 5f       	subi	r18, 0xFE	; 254
    1ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ece:	82 17       	cp	r24, r18
    1ed0:	93 07       	cpc	r25, r19
    1ed2:	31 f4       	brne	.+12     	; 0x1ee0 <xTaskResumeAll+0xbc>
    1ed4:	80 85       	ldd	r24, Z+8	; 0x08
    1ed6:	91 85       	ldd	r25, Z+9	; 0x09
    1ed8:	12 96       	adiw	r26, 0x02	; 2
    1eda:	9c 93       	st	X, r25
    1edc:	8e 93       	st	-X, r24
    1ede:	11 97       	sbiw	r26, 0x01	; 1
    1ee0:	15 86       	std	Z+13, r1	; 0x0d
    1ee2:	14 86       	std	Z+12, r1	; 0x0c
    1ee4:	8c 91       	ld	r24, X
    1ee6:	81 50       	subi	r24, 0x01	; 1
    1ee8:	8c 93       	st	X, r24
    1eea:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1eec:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <uxTopReadyPriority>
    1ef0:	8a 17       	cp	r24, r26
    1ef2:	10 f4       	brcc	.+4      	; 0x1ef8 <xTaskResumeAll+0xd4>
    1ef4:	a0 93 89 16 	sts	0x1689, r26	; 0x801689 <uxTopReadyPriority>
    1ef8:	8b e0       	ldi	r24, 0x0B	; 11
    1efa:	8a 9f       	mul	r24, r26
    1efc:	d0 01       	movw	r26, r0
    1efe:	11 24       	eor	r1, r1
    1f00:	a5 53       	subi	r26, 0x35	; 53
    1f02:	b9 4e       	sbci	r27, 0xE9	; 233
    1f04:	11 96       	adiw	r26, 0x01	; 1
    1f06:	0d 90       	ld	r0, X+
    1f08:	bc 91       	ld	r27, X
    1f0a:	a0 2d       	mov	r26, r0
    1f0c:	b7 83       	std	Z+7, r27	; 0x07
    1f0e:	a6 83       	std	Z+6, r26	; 0x06
    1f10:	16 96       	adiw	r26, 0x06	; 6
    1f12:	4d 91       	ld	r20, X+
    1f14:	5c 91       	ld	r21, X
    1f16:	17 97       	sbiw	r26, 0x07	; 7
    1f18:	51 87       	std	Z+9, r21	; 0x09
    1f1a:	40 87       	std	Z+8, r20	; 0x08
    1f1c:	16 96       	adiw	r26, 0x06	; 6
    1f1e:	cd 91       	ld	r28, X+
    1f20:	dc 91       	ld	r29, X
    1f22:	17 97       	sbiw	r26, 0x07	; 7
    1f24:	3d 83       	std	Y+5, r19	; 0x05
    1f26:	2c 83       	std	Y+4, r18	; 0x04
    1f28:	17 96       	adiw	r26, 0x07	; 7
    1f2a:	3c 93       	st	X, r19
    1f2c:	2e 93       	st	-X, r18
    1f2e:	16 97       	sbiw	r26, 0x06	; 6
    1f30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f32:	8a 9f       	mul	r24, r26
    1f34:	d0 01       	movw	r26, r0
    1f36:	11 24       	eor	r1, r1
    1f38:	a5 53       	subi	r26, 0x35	; 53
    1f3a:	b9 4e       	sbci	r27, 0xE9	; 233
    1f3c:	b5 87       	std	Z+13, r27	; 0x0d
    1f3e:	a4 87       	std	Z+12, r26	; 0x0c
    1f40:	8c 91       	ld	r24, X
    1f42:	8f 5f       	subi	r24, 0xFF	; 255
    1f44:	8c 93       	st	X, r24
    1f46:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f48:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
    1f4c:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    1f50:	5a 96       	adiw	r26, 0x1a	; 26
    1f52:	8c 91       	ld	r24, X
    1f54:	98 17       	cp	r25, r24
    1f56:	30 f0       	brcs	.+12     	; 0x1f64 <xTaskResumeAll+0x140>
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	80 93 83 16 	sts	0x1683, r24	; 0x801683 <xYieldPending>
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <xTaskResumeAll+0x140>
    1f60:	e0 e0       	ldi	r30, 0x00	; 0
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 91 a6 16 	lds	r24, 0x16A6	; 0x8016a6 <xPendingReadyList>
    1f68:	81 11       	cpse	r24, r1
    1f6a:	73 cf       	rjmp	.-282    	; 0x1e52 <xTaskResumeAll+0x2e>
    1f6c:	ef 2b       	or	r30, r31
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <xTaskResumeAll+0x14e>
    1f70:	7d db       	rcall	.-2310   	; 0x166c <prvResetNextTaskUnblockTime>
    1f72:	c0 90 84 16 	lds	r12, 0x1684	; 0x801684 <xPendedTicks>
    1f76:	d0 90 85 16 	lds	r13, 0x1685	; 0x801685 <xPendedTicks+0x1>
    1f7a:	e0 90 86 16 	lds	r14, 0x1686	; 0x801686 <xPendedTicks+0x2>
    1f7e:	f0 90 87 16 	lds	r15, 0x1687	; 0x801687 <xPendedTicks+0x3>
    1f82:	c1 14       	cp	r12, r1
    1f84:	d1 04       	cpc	r13, r1
    1f86:	e1 04       	cpc	r14, r1
    1f88:	f1 04       	cpc	r15, r1
    1f8a:	a1 f0       	breq	.+40     	; 0x1fb4 <xTaskResumeAll+0x190>
    1f8c:	1f de       	rcall	.-962    	; 0x1bcc <xTaskIncrementTick>
    1f8e:	88 23       	and	r24, r24
    1f90:	19 f0       	breq	.+6      	; 0x1f98 <xTaskResumeAll+0x174>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	80 93 83 16 	sts	0x1683, r24	; 0x801683 <xYieldPending>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	c8 1a       	sub	r12, r24
    1f9c:	d1 08       	sbc	r13, r1
    1f9e:	e1 08       	sbc	r14, r1
    1fa0:	f1 08       	sbc	r15, r1
    1fa2:	a1 f7       	brne	.-24     	; 0x1f8c <xTaskResumeAll+0x168>
    1fa4:	10 92 84 16 	sts	0x1684, r1	; 0x801684 <xPendedTicks>
    1fa8:	10 92 85 16 	sts	0x1685, r1	; 0x801685 <xPendedTicks+0x1>
    1fac:	10 92 86 16 	sts	0x1686, r1	; 0x801686 <xPendedTicks+0x2>
    1fb0:	10 92 87 16 	sts	0x1687, r1	; 0x801687 <xPendedTicks+0x3>
    1fb4:	80 91 83 16 	lds	r24, 0x1683	; 0x801683 <xYieldPending>
    1fb8:	88 23       	and	r24, r24
    1fba:	31 f0       	breq	.+12     	; 0x1fc8 <xTaskResumeAll+0x1a4>
    1fbc:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortYield>
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <xTaskResumeAll+0x1a6>
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <xTaskResumeAll+0x1a6>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	0f 90       	pop	r0
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	ff 90       	pop	r15
    1fd4:	ef 90       	pop	r14
    1fd6:	df 90       	pop	r13
    1fd8:	cf 90       	pop	r12
    1fda:	08 95       	ret

00001fdc <xTaskDelayUntil>:
    1fdc:	8f 92       	push	r8
    1fde:	9f 92       	push	r9
    1fe0:	af 92       	push	r10
    1fe2:	bf 92       	push	r11
    1fe4:	cf 92       	push	r12
    1fe6:	df 92       	push	r13
    1fe8:	ef 92       	push	r14
    1fea:	ff 92       	push	r15
    1fec:	1f 93       	push	r17
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	ec 01       	movw	r28, r24
    1ff4:	6a 01       	movw	r12, r20
    1ff6:	7b 01       	movw	r14, r22
    1ff8:	d5 dd       	rcall	.-1110   	; 0x1ba4 <vTaskSuspendAll>
    1ffa:	80 90 8a 16 	lds	r8, 0x168A	; 0x80168a <xTickCount>
    1ffe:	90 90 8b 16 	lds	r9, 0x168B	; 0x80168b <xTickCount+0x1>
    2002:	a0 90 8c 16 	lds	r10, 0x168C	; 0x80168c <xTickCount+0x2>
    2006:	b0 90 8d 16 	lds	r11, 0x168D	; 0x80168d <xTickCount+0x3>
    200a:	88 81       	ld	r24, Y
    200c:	99 81       	ldd	r25, Y+1	; 0x01
    200e:	aa 81       	ldd	r26, Y+2	; 0x02
    2010:	bb 81       	ldd	r27, Y+3	; 0x03
    2012:	ac 01       	movw	r20, r24
    2014:	bd 01       	movw	r22, r26
    2016:	4c 0d       	add	r20, r12
    2018:	5d 1d       	adc	r21, r13
    201a:	6e 1d       	adc	r22, r14
    201c:	7f 1d       	adc	r23, r15
    201e:	88 16       	cp	r8, r24
    2020:	99 06       	cpc	r9, r25
    2022:	aa 06       	cpc	r10, r26
    2024:	bb 06       	cpc	r11, r27
    2026:	60 f4       	brcc	.+24     	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    2028:	48 17       	cp	r20, r24
    202a:	59 07       	cpc	r21, r25
    202c:	6a 07       	cpc	r22, r26
    202e:	7b 07       	cpc	r23, r27
    2030:	98 f4       	brcc	.+38     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    2032:	84 16       	cp	r8, r20
    2034:	95 06       	cpc	r9, r21
    2036:	a6 06       	cpc	r10, r22
    2038:	b7 06       	cpc	r11, r23
    203a:	80 f0       	brcs	.+32     	; 0x205c <__DATA_REGION_LENGTH__+0x5c>
    203c:	10 e0       	ldi	r17, 0x00	; 0
    203e:	13 c0       	rjmp	.+38     	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2040:	48 17       	cp	r20, r24
    2042:	59 07       	cpc	r21, r25
    2044:	6a 07       	cpc	r22, r26
    2046:	7b 07       	cpc	r23, r27
    2048:	58 f0       	brcs	.+22     	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    204a:	84 16       	cp	r8, r20
    204c:	95 06       	cpc	r9, r21
    204e:	a6 06       	cpc	r10, r22
    2050:	b7 06       	cpc	r11, r23
    2052:	40 f0       	brcs	.+16     	; 0x2064 <__DATA_REGION_LENGTH__+0x64>
    2054:	10 e0       	ldi	r17, 0x00	; 0
    2056:	07 c0       	rjmp	.+14     	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2058:	10 e0       	ldi	r17, 0x00	; 0
    205a:	05 c0       	rjmp	.+10     	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    205c:	11 e0       	ldi	r17, 0x01	; 1
    205e:	03 c0       	rjmp	.+6      	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2060:	11 e0       	ldi	r17, 0x01	; 1
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2064:	11 e0       	ldi	r17, 0x01	; 1
    2066:	48 83       	st	Y, r20
    2068:	59 83       	std	Y+1, r21	; 0x01
    206a:	6a 83       	std	Y+2, r22	; 0x02
    206c:	7b 83       	std	Y+3, r23	; 0x03
    206e:	11 23       	and	r17, r17
    2070:	41 f0       	breq	.+16     	; 0x2082 <__DATA_REGION_LENGTH__+0x82>
    2072:	cb 01       	movw	r24, r22
    2074:	ba 01       	movw	r22, r20
    2076:	68 19       	sub	r22, r8
    2078:	79 09       	sbc	r23, r9
    207a:	8a 09       	sbc	r24, r10
    207c:	9b 09       	sbc	r25, r11
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	6b dc       	rcall	.-1834   	; 0x1958 <prvAddCurrentTaskToDelayedList>
    2082:	d0 de       	rcall	.-608    	; 0x1e24 <xTaskResumeAll>
    2084:	81 11       	cpse	r24, r1
    2086:	02 c0       	rjmp	.+4      	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
    2088:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortYield>
    208c:	81 2f       	mov	r24, r17
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	ff 90       	pop	r15
    2096:	ef 90       	pop	r14
    2098:	df 90       	pop	r13
    209a:	cf 90       	pop	r12
    209c:	bf 90       	pop	r11
    209e:	af 90       	pop	r10
    20a0:	9f 90       	pop	r9
    20a2:	8f 90       	pop	r8
    20a4:	08 95       	ret

000020a6 <vTaskDelay>:
    20a6:	cf 92       	push	r12
    20a8:	df 92       	push	r13
    20aa:	ef 92       	push	r14
    20ac:	ff 92       	push	r15
    20ae:	6b 01       	movw	r12, r22
    20b0:	7c 01       	movw	r14, r24
    20b2:	67 2b       	or	r22, r23
    20b4:	68 2b       	or	r22, r24
    20b6:	69 2b       	or	r22, r25
    20b8:	39 f0       	breq	.+14     	; 0x20c8 <vTaskDelay+0x22>
    20ba:	74 dd       	rcall	.-1304   	; 0x1ba4 <vTaskSuspendAll>
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	c7 01       	movw	r24, r14
    20c0:	b6 01       	movw	r22, r12
    20c2:	4a dc       	rcall	.-1900   	; 0x1958 <prvAddCurrentTaskToDelayedList>
    20c4:	af de       	rcall	.-674    	; 0x1e24 <xTaskResumeAll>
    20c6:	01 c0       	rjmp	.+2      	; 0x20ca <vTaskDelay+0x24>
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	81 11       	cpse	r24, r1
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <vTaskDelay+0x2c>
    20ce:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortYield>
    20d2:	ff 90       	pop	r15
    20d4:	ef 90       	pop	r14
    20d6:	df 90       	pop	r13
    20d8:	cf 90       	pop	r12
    20da:	08 95       	ret

000020dc <vTaskSwitchContext>:
    20dc:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <uxSchedulerSuspended>
    20e0:	88 23       	and	r24, r24
    20e2:	21 f0       	breq	.+8      	; 0x20ec <vTaskSwitchContext+0x10>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	80 93 83 16 	sts	0x1683, r24	; 0x801683 <xYieldPending>
    20ea:	08 95       	ret
    20ec:	10 92 83 16 	sts	0x1683, r1	; 0x801683 <xYieldPending>
    20f0:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    20f4:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    20f8:	20 81       	ld	r18, Z
    20fa:	31 81       	ldd	r19, Z+1	; 0x01
    20fc:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    2100:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2104:	83 8d       	ldd	r24, Z+27	; 0x1b
    2106:	94 8d       	ldd	r25, Z+28	; 0x1c
    2108:	82 17       	cp	r24, r18
    210a:	93 07       	cpc	r25, r19
    210c:	60 f0       	brcs	.+24     	; 0x2126 <vTaskSwitchContext+0x4a>
    210e:	60 91 39 17 	lds	r22, 0x1739	; 0x801739 <pxCurrentTCB>
    2112:	70 91 3a 17 	lds	r23, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2116:	63 5e       	subi	r22, 0xE3	; 227
    2118:	7f 4f       	sbci	r23, 0xFF	; 255
    211a:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <pxCurrentTCB>
    211e:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2122:	0e 94 cc 19 	call	0x3398	; 0x3398 <vApplicationStackOverflowHook>
    2126:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <uxTopReadyPriority>
    212a:	01 c0       	rjmp	.+2      	; 0x212e <vTaskSwitchContext+0x52>
    212c:	81 50       	subi	r24, 0x01	; 1
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	9b e0       	ldi	r25, 0x0B	; 11
    2134:	92 9f       	mul	r25, r18
    2136:	f0 01       	movw	r30, r0
    2138:	93 9f       	mul	r25, r19
    213a:	f0 0d       	add	r31, r0
    213c:	11 24       	eor	r1, r1
    213e:	e5 53       	subi	r30, 0x35	; 53
    2140:	f9 4e       	sbci	r31, 0xE9	; 233
    2142:	90 81       	ld	r25, Z
    2144:	99 23       	and	r25, r25
    2146:	91 f3       	breq	.-28     	; 0x212c <vTaskSwitchContext+0x50>
    2148:	9b e0       	ldi	r25, 0x0B	; 11
    214a:	92 9f       	mul	r25, r18
    214c:	a0 01       	movw	r20, r0
    214e:	93 9f       	mul	r25, r19
    2150:	50 0d       	add	r21, r0
    2152:	11 24       	eor	r1, r1
    2154:	df 01       	movw	r26, r30
    2156:	01 80       	ldd	r0, Z+1	; 0x01
    2158:	f2 81       	ldd	r31, Z+2	; 0x02
    215a:	e0 2d       	mov	r30, r0
    215c:	04 80       	ldd	r0, Z+4	; 0x04
    215e:	f5 81       	ldd	r31, Z+5	; 0x05
    2160:	e0 2d       	mov	r30, r0
    2162:	12 96       	adiw	r26, 0x02	; 2
    2164:	fc 93       	st	X, r31
    2166:	ee 93       	st	-X, r30
    2168:	11 97       	sbiw	r26, 0x01	; 1
    216a:	42 53       	subi	r20, 0x32	; 50
    216c:	59 4e       	sbci	r21, 0xE9	; 233
    216e:	e4 17       	cp	r30, r20
    2170:	f5 07       	cpc	r31, r21
    2172:	29 f4       	brne	.+10     	; 0x217e <vTaskSwitchContext+0xa2>
    2174:	44 81       	ldd	r20, Z+4	; 0x04
    2176:	55 81       	ldd	r21, Z+5	; 0x05
    2178:	fd 01       	movw	r30, r26
    217a:	52 83       	std	Z+2, r21	; 0x02
    217c:	41 83       	std	Z+1, r20	; 0x01
    217e:	9b e0       	ldi	r25, 0x0B	; 11
    2180:	92 9f       	mul	r25, r18
    2182:	f0 01       	movw	r30, r0
    2184:	93 9f       	mul	r25, r19
    2186:	f0 0d       	add	r31, r0
    2188:	11 24       	eor	r1, r1
    218a:	e5 53       	subi	r30, 0x35	; 53
    218c:	f9 4e       	sbci	r31, 0xE9	; 233
    218e:	01 80       	ldd	r0, Z+1	; 0x01
    2190:	f2 81       	ldd	r31, Z+2	; 0x02
    2192:	e0 2d       	mov	r30, r0
    2194:	20 85       	ldd	r18, Z+8	; 0x08
    2196:	31 85       	ldd	r19, Z+9	; 0x09
    2198:	30 93 3a 17 	sts	0x173A, r19	; 0x80173a <pxCurrentTCB+0x1>
    219c:	20 93 39 17 	sts	0x1739, r18	; 0x801739 <pxCurrentTCB>
    21a0:	80 93 89 16 	sts	0x1689, r24	; 0x801689 <uxTopReadyPriority>
    21a4:	08 95       	ret

000021a6 <vTaskPlaceOnEventList>:
    21a6:	cf 92       	push	r12
    21a8:	df 92       	push	r13
    21aa:	ef 92       	push	r14
    21ac:	ff 92       	push	r15
    21ae:	6a 01       	movw	r12, r20
    21b0:	7b 01       	movw	r14, r22
    21b2:	60 91 39 17 	lds	r22, 0x1739	; 0x801739 <pxCurrentTCB>
    21b6:	70 91 3a 17 	lds	r23, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    21ba:	62 5f       	subi	r22, 0xF2	; 242
    21bc:	7f 4f       	sbci	r23, 0xFF	; 255
    21be:	0e 94 0e 03 	call	0x61c	; 0x61c <vListInsert>
    21c2:	41 e0       	ldi	r20, 0x01	; 1
    21c4:	c7 01       	movw	r24, r14
    21c6:	b6 01       	movw	r22, r12
    21c8:	c7 db       	rcall	.-2162   	; 0x1958 <prvAddCurrentTaskToDelayedList>
    21ca:	ff 90       	pop	r15
    21cc:	ef 90       	pop	r14
    21ce:	df 90       	pop	r13
    21d0:	cf 90       	pop	r12
    21d2:	08 95       	ret

000021d4 <vTaskPlaceOnEventListRestricted>:
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	fc 01       	movw	r30, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	ba 01       	movw	r22, r20
    21de:	a1 81       	ldd	r26, Z+1	; 0x01
    21e0:	b2 81       	ldd	r27, Z+2	; 0x02
    21e2:	c0 91 39 17 	lds	r28, 0x1739	; 0x801739 <pxCurrentTCB>
    21e6:	d0 91 3a 17 	lds	r29, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    21ea:	bb 8b       	std	Y+19, r27	; 0x13
    21ec:	aa 8b       	std	Y+18, r26	; 0x12
    21ee:	c0 91 39 17 	lds	r28, 0x1739	; 0x801739 <pxCurrentTCB>
    21f2:	d0 91 3a 17 	lds	r29, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    21f6:	16 96       	adiw	r26, 0x06	; 6
    21f8:	4d 91       	ld	r20, X+
    21fa:	5c 91       	ld	r21, X
    21fc:	17 97       	sbiw	r26, 0x07	; 7
    21fe:	5d 8b       	std	Y+21, r21	; 0x15
    2200:	4c 8b       	std	Y+20, r20	; 0x14
    2202:	16 96       	adiw	r26, 0x06	; 6
    2204:	cd 91       	ld	r28, X+
    2206:	dc 91       	ld	r29, X
    2208:	17 97       	sbiw	r26, 0x07	; 7
    220a:	40 91 39 17 	lds	r20, 0x1739	; 0x801739 <pxCurrentTCB>
    220e:	50 91 3a 17 	lds	r21, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2212:	42 5f       	subi	r20, 0xF2	; 242
    2214:	5f 4f       	sbci	r21, 0xFF	; 255
    2216:	5d 83       	std	Y+5, r21	; 0x05
    2218:	4c 83       	std	Y+4, r20	; 0x04
    221a:	40 91 39 17 	lds	r20, 0x1739	; 0x801739 <pxCurrentTCB>
    221e:	50 91 3a 17 	lds	r21, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2222:	42 5f       	subi	r20, 0xF2	; 242
    2224:	5f 4f       	sbci	r21, 0xFF	; 255
    2226:	17 96       	adiw	r26, 0x07	; 7
    2228:	5c 93       	st	X, r21
    222a:	4e 93       	st	-X, r20
    222c:	16 97       	sbiw	r26, 0x06	; 6
    222e:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
    2232:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2236:	59 96       	adiw	r26, 0x19	; 25
    2238:	fc 93       	st	X, r31
    223a:	ee 93       	st	-X, r30
    223c:	58 97       	sbiw	r26, 0x18	; 24
    223e:	30 81       	ld	r19, Z
    2240:	3f 5f       	subi	r19, 0xFF	; 255
    2242:	30 83       	st	Z, r19
    2244:	22 23       	and	r18, r18
    2246:	19 f0       	breq	.+6      	; 0x224e <__stack+0x4f>
    2248:	6f ef       	ldi	r22, 0xFF	; 255
    224a:	7f ef       	ldi	r23, 0xFF	; 255
    224c:	cb 01       	movw	r24, r22
    224e:	42 2f       	mov	r20, r18
    2250:	83 db       	rcall	.-2298   	; 0x1958 <prvAddCurrentTaskToDelayedList>
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	08 95       	ret

00002258 <xTaskRemoveFromEventList>:
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	dc 01       	movw	r26, r24
    225e:	17 96       	adiw	r26, 0x07	; 7
    2260:	ed 91       	ld	r30, X+
    2262:	fc 91       	ld	r31, X
    2264:	18 97       	sbiw	r26, 0x08	; 8
    2266:	00 84       	ldd	r0, Z+8	; 0x08
    2268:	f1 85       	ldd	r31, Z+9	; 0x09
    226a:	e0 2d       	mov	r30, r0
    226c:	a0 8d       	ldd	r26, Z+24	; 0x18
    226e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2270:	c2 89       	ldd	r28, Z+18	; 0x12
    2272:	d3 89       	ldd	r29, Z+19	; 0x13
    2274:	84 89       	ldd	r24, Z+20	; 0x14
    2276:	95 89       	ldd	r25, Z+21	; 0x15
    2278:	9f 83       	std	Y+7, r25	; 0x07
    227a:	8e 83       	std	Y+6, r24	; 0x06
    227c:	c4 89       	ldd	r28, Z+20	; 0x14
    227e:	d5 89       	ldd	r29, Z+21	; 0x15
    2280:	82 89       	ldd	r24, Z+18	; 0x12
    2282:	93 89       	ldd	r25, Z+19	; 0x13
    2284:	9d 83       	std	Y+5, r25	; 0x05
    2286:	8c 83       	std	Y+4, r24	; 0x04
    2288:	11 96       	adiw	r26, 0x01	; 1
    228a:	8d 91       	ld	r24, X+
    228c:	9c 91       	ld	r25, X
    228e:	12 97       	sbiw	r26, 0x02	; 2
    2290:	9f 01       	movw	r18, r30
    2292:	22 5f       	subi	r18, 0xF2	; 242
    2294:	3f 4f       	sbci	r19, 0xFF	; 255
    2296:	82 17       	cp	r24, r18
    2298:	93 07       	cpc	r25, r19
    229a:	31 f4       	brne	.+12     	; 0x22a8 <xTaskRemoveFromEventList+0x50>
    229c:	84 89       	ldd	r24, Z+20	; 0x14
    229e:	95 89       	ldd	r25, Z+21	; 0x15
    22a0:	12 96       	adiw	r26, 0x02	; 2
    22a2:	9c 93       	st	X, r25
    22a4:	8e 93       	st	-X, r24
    22a6:	11 97       	sbiw	r26, 0x01	; 1
    22a8:	11 8e       	std	Z+25, r1	; 0x19
    22aa:	10 8e       	std	Z+24, r1	; 0x18
    22ac:	8c 91       	ld	r24, X
    22ae:	81 50       	subi	r24, 0x01	; 1
    22b0:	8c 93       	st	X, r24
    22b2:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <uxSchedulerSuspended>
    22b6:	81 11       	cpse	r24, r1
    22b8:	52 c0       	rjmp	.+164    	; 0x235e <xTaskRemoveFromEventList+0x106>
    22ba:	a4 85       	ldd	r26, Z+12	; 0x0c
    22bc:	b5 85       	ldd	r27, Z+13	; 0x0d
    22be:	c6 81       	ldd	r28, Z+6	; 0x06
    22c0:	d7 81       	ldd	r29, Z+7	; 0x07
    22c2:	80 85       	ldd	r24, Z+8	; 0x08
    22c4:	91 85       	ldd	r25, Z+9	; 0x09
    22c6:	9f 83       	std	Y+7, r25	; 0x07
    22c8:	8e 83       	std	Y+6, r24	; 0x06
    22ca:	c0 85       	ldd	r28, Z+8	; 0x08
    22cc:	d1 85       	ldd	r29, Z+9	; 0x09
    22ce:	86 81       	ldd	r24, Z+6	; 0x06
    22d0:	97 81       	ldd	r25, Z+7	; 0x07
    22d2:	9d 83       	std	Y+5, r25	; 0x05
    22d4:	8c 83       	std	Y+4, r24	; 0x04
    22d6:	11 96       	adiw	r26, 0x01	; 1
    22d8:	8d 91       	ld	r24, X+
    22da:	9c 91       	ld	r25, X
    22dc:	12 97       	sbiw	r26, 0x02	; 2
    22de:	9f 01       	movw	r18, r30
    22e0:	2e 5f       	subi	r18, 0xFE	; 254
    22e2:	3f 4f       	sbci	r19, 0xFF	; 255
    22e4:	82 17       	cp	r24, r18
    22e6:	93 07       	cpc	r25, r19
    22e8:	31 f4       	brne	.+12     	; 0x22f6 <xTaskRemoveFromEventList+0x9e>
    22ea:	80 85       	ldd	r24, Z+8	; 0x08
    22ec:	91 85       	ldd	r25, Z+9	; 0x09
    22ee:	12 96       	adiw	r26, 0x02	; 2
    22f0:	9c 93       	st	X, r25
    22f2:	8e 93       	st	-X, r24
    22f4:	11 97       	sbiw	r26, 0x01	; 1
    22f6:	15 86       	std	Z+13, r1	; 0x0d
    22f8:	14 86       	std	Z+12, r1	; 0x0c
    22fa:	8c 91       	ld	r24, X
    22fc:	81 50       	subi	r24, 0x01	; 1
    22fe:	8c 93       	st	X, r24
    2300:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2302:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <uxTopReadyPriority>
    2306:	8a 17       	cp	r24, r26
    2308:	10 f4       	brcc	.+4      	; 0x230e <xTaskRemoveFromEventList+0xb6>
    230a:	a0 93 89 16 	sts	0x1689, r26	; 0x801689 <uxTopReadyPriority>
    230e:	8b e0       	ldi	r24, 0x0B	; 11
    2310:	8a 9f       	mul	r24, r26
    2312:	d0 01       	movw	r26, r0
    2314:	11 24       	eor	r1, r1
    2316:	a5 53       	subi	r26, 0x35	; 53
    2318:	b9 4e       	sbci	r27, 0xE9	; 233
    231a:	11 96       	adiw	r26, 0x01	; 1
    231c:	0d 90       	ld	r0, X+
    231e:	bc 91       	ld	r27, X
    2320:	a0 2d       	mov	r26, r0
    2322:	b7 83       	std	Z+7, r27	; 0x07
    2324:	a6 83       	std	Z+6, r26	; 0x06
    2326:	16 96       	adiw	r26, 0x06	; 6
    2328:	4d 91       	ld	r20, X+
    232a:	5c 91       	ld	r21, X
    232c:	17 97       	sbiw	r26, 0x07	; 7
    232e:	51 87       	std	Z+9, r21	; 0x09
    2330:	40 87       	std	Z+8, r20	; 0x08
    2332:	16 96       	adiw	r26, 0x06	; 6
    2334:	cd 91       	ld	r28, X+
    2336:	dc 91       	ld	r29, X
    2338:	17 97       	sbiw	r26, 0x07	; 7
    233a:	3d 83       	std	Y+5, r19	; 0x05
    233c:	2c 83       	std	Y+4, r18	; 0x04
    233e:	17 96       	adiw	r26, 0x07	; 7
    2340:	3c 93       	st	X, r19
    2342:	2e 93       	st	-X, r18
    2344:	16 97       	sbiw	r26, 0x06	; 6
    2346:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2348:	8a 9f       	mul	r24, r26
    234a:	d0 01       	movw	r26, r0
    234c:	11 24       	eor	r1, r1
    234e:	a5 53       	subi	r26, 0x35	; 53
    2350:	b9 4e       	sbci	r27, 0xE9	; 233
    2352:	b5 87       	std	Z+13, r27	; 0x0d
    2354:	a4 87       	std	Z+12, r26	; 0x0c
    2356:	8c 91       	ld	r24, X
    2358:	8f 5f       	subi	r24, 0xFF	; 255
    235a:	8c 93       	st	X, r24
    235c:	1c c0       	rjmp	.+56     	; 0x2396 <xTaskRemoveFromEventList+0x13e>
    235e:	46 ea       	ldi	r20, 0xA6	; 166
    2360:	56 e1       	ldi	r21, 0x16	; 22
    2362:	da 01       	movw	r26, r20
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	cd 91       	ld	r28, X+
    2368:	dc 91       	ld	r29, X
    236a:	12 97       	sbiw	r26, 0x02	; 2
    236c:	d3 8b       	std	Z+19, r29	; 0x13
    236e:	c2 8b       	std	Z+18, r28	; 0x12
    2370:	8e 81       	ldd	r24, Y+6	; 0x06
    2372:	9f 81       	ldd	r25, Y+7	; 0x07
    2374:	95 8b       	std	Z+21, r25	; 0x15
    2376:	84 8b       	std	Z+20, r24	; 0x14
    2378:	8e 81       	ldd	r24, Y+6	; 0x06
    237a:	9f 81       	ldd	r25, Y+7	; 0x07
    237c:	dc 01       	movw	r26, r24
    237e:	15 96       	adiw	r26, 0x05	; 5
    2380:	3c 93       	st	X, r19
    2382:	2e 93       	st	-X, r18
    2384:	14 97       	sbiw	r26, 0x04	; 4
    2386:	3f 83       	std	Y+7, r19	; 0x07
    2388:	2e 83       	std	Y+6, r18	; 0x06
    238a:	51 8f       	std	Z+25, r21	; 0x19
    238c:	40 8f       	std	Z+24, r20	; 0x18
    238e:	da 01       	movw	r26, r20
    2390:	8c 91       	ld	r24, X
    2392:	8f 5f       	subi	r24, 0xFF	; 255
    2394:	8c 93       	st	X, r24
    2396:	92 8d       	ldd	r25, Z+26	; 0x1a
    2398:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    239c:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    23a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    23a2:	89 17       	cp	r24, r25
    23a4:	20 f4       	brcc	.+8      	; 0x23ae <xTaskRemoveFromEventList+0x156>
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	80 93 83 16 	sts	0x1683, r24	; 0x801683 <xYieldPending>
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <xTaskRemoveFromEventList+0x158>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	08 95       	ret

000023b6 <vTaskSetTimeOutState>:
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	0f 92       	push	r0
    23bc:	20 91 82 16 	lds	r18, 0x1682	; 0x801682 <xNumOfOverflows>
    23c0:	fc 01       	movw	r30, r24
    23c2:	20 83       	st	Z, r18
    23c4:	40 91 8a 16 	lds	r20, 0x168A	; 0x80168a <xTickCount>
    23c8:	50 91 8b 16 	lds	r21, 0x168B	; 0x80168b <xTickCount+0x1>
    23cc:	60 91 8c 16 	lds	r22, 0x168C	; 0x80168c <xTickCount+0x2>
    23d0:	70 91 8d 16 	lds	r23, 0x168D	; 0x80168d <xTickCount+0x3>
    23d4:	41 83       	std	Z+1, r20	; 0x01
    23d6:	52 83       	std	Z+2, r21	; 0x02
    23d8:	63 83       	std	Z+3, r22	; 0x03
    23da:	74 83       	std	Z+4, r23	; 0x04
    23dc:	0f 90       	pop	r0
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	08 95       	ret

000023e2 <vTaskInternalSetTimeOutState>:
    23e2:	20 91 82 16 	lds	r18, 0x1682	; 0x801682 <xNumOfOverflows>
    23e6:	fc 01       	movw	r30, r24
    23e8:	20 83       	st	Z, r18
    23ea:	40 91 8a 16 	lds	r20, 0x168A	; 0x80168a <xTickCount>
    23ee:	50 91 8b 16 	lds	r21, 0x168B	; 0x80168b <xTickCount+0x1>
    23f2:	60 91 8c 16 	lds	r22, 0x168C	; 0x80168c <xTickCount+0x2>
    23f6:	70 91 8d 16 	lds	r23, 0x168D	; 0x80168d <xTickCount+0x3>
    23fa:	41 83       	std	Z+1, r20	; 0x01
    23fc:	52 83       	std	Z+2, r21	; 0x02
    23fe:	63 83       	std	Z+3, r22	; 0x03
    2400:	74 83       	std	Z+4, r23	; 0x04
    2402:	08 95       	ret

00002404 <xTaskCheckForTimeOut>:
    2404:	8f 92       	push	r8
    2406:	9f 92       	push	r9
    2408:	af 92       	push	r10
    240a:	bf 92       	push	r11
    240c:	cf 92       	push	r12
    240e:	df 92       	push	r13
    2410:	ef 92       	push	r14
    2412:	ff 92       	push	r15
    2414:	0f 93       	push	r16
    2416:	1f 93       	push	r17
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	fb 01       	movw	r30, r22
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	0f 92       	push	r0
    2424:	c0 90 8a 16 	lds	r12, 0x168A	; 0x80168a <xTickCount>
    2428:	d0 90 8b 16 	lds	r13, 0x168B	; 0x80168b <xTickCount+0x1>
    242c:	e0 90 8c 16 	lds	r14, 0x168C	; 0x80168c <xTickCount+0x2>
    2430:	f0 90 8d 16 	lds	r15, 0x168D	; 0x80168d <xTickCount+0x3>
    2434:	dc 01       	movw	r26, r24
    2436:	11 96       	adiw	r26, 0x01	; 1
    2438:	0d 91       	ld	r16, X+
    243a:	1d 91       	ld	r17, X+
    243c:	2d 91       	ld	r18, X+
    243e:	3c 91       	ld	r19, X
    2440:	14 97       	sbiw	r26, 0x04	; 4
    2442:	46 01       	movw	r8, r12
    2444:	57 01       	movw	r10, r14
    2446:	80 1a       	sub	r8, r16
    2448:	91 0a       	sbc	r9, r17
    244a:	a2 0a       	sbc	r10, r18
    244c:	b3 0a       	sbc	r11, r19
    244e:	40 81       	ld	r20, Z
    2450:	51 81       	ldd	r21, Z+1	; 0x01
    2452:	62 81       	ldd	r22, Z+2	; 0x02
    2454:	73 81       	ldd	r23, Z+3	; 0x03
    2456:	4f 3f       	cpi	r20, 0xFF	; 255
    2458:	bf ef       	ldi	r27, 0xFF	; 255
    245a:	5b 07       	cpc	r21, r27
    245c:	6b 07       	cpc	r22, r27
    245e:	7b 07       	cpc	r23, r27
    2460:	39 f1       	breq	.+78     	; 0x24b0 <xTaskCheckForTimeOut+0xac>
    2462:	ec 01       	movw	r28, r24
    2464:	b8 81       	ld	r27, Y
    2466:	a0 91 82 16 	lds	r26, 0x1682	; 0x801682 <xNumOfOverflows>
    246a:	ba 17       	cp	r27, r26
    246c:	59 f0       	breq	.+22     	; 0x2484 <xTaskCheckForTimeOut+0x80>
    246e:	c0 16       	cp	r12, r16
    2470:	d1 06       	cpc	r13, r17
    2472:	e2 06       	cpc	r14, r18
    2474:	f3 06       	cpc	r15, r19
    2476:	30 f0       	brcs	.+12     	; 0x2484 <xTaskCheckForTimeOut+0x80>
    2478:	10 82       	st	Z, r1
    247a:	11 82       	std	Z+1, r1	; 0x01
    247c:	12 82       	std	Z+2, r1	; 0x02
    247e:	13 82       	std	Z+3, r1	; 0x03
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	17 c0       	rjmp	.+46     	; 0x24b2 <xTaskCheckForTimeOut+0xae>
    2484:	84 16       	cp	r8, r20
    2486:	95 06       	cpc	r9, r21
    2488:	a6 06       	cpc	r10, r22
    248a:	b7 06       	cpc	r11, r23
    248c:	58 f4       	brcc	.+22     	; 0x24a4 <xTaskCheckForTimeOut+0xa0>
    248e:	48 19       	sub	r20, r8
    2490:	59 09       	sbc	r21, r9
    2492:	6a 09       	sbc	r22, r10
    2494:	7b 09       	sbc	r23, r11
    2496:	40 83       	st	Z, r20
    2498:	51 83       	std	Z+1, r21	; 0x01
    249a:	62 83       	std	Z+2, r22	; 0x02
    249c:	73 83       	std	Z+3, r23	; 0x03
    249e:	a1 df       	rcall	.-190    	; 0x23e2 <vTaskInternalSetTimeOutState>
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	07 c0       	rjmp	.+14     	; 0x24b2 <xTaskCheckForTimeOut+0xae>
    24a4:	10 82       	st	Z, r1
    24a6:	11 82       	std	Z+1, r1	; 0x01
    24a8:	12 82       	std	Z+2, r1	; 0x02
    24aa:	13 82       	std	Z+3, r1	; 0x03
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <xTaskCheckForTimeOut+0xae>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	df 90       	pop	r13
    24c4:	cf 90       	pop	r12
    24c6:	bf 90       	pop	r11
    24c8:	af 90       	pop	r10
    24ca:	9f 90       	pop	r9
    24cc:	8f 90       	pop	r8
    24ce:	08 95       	ret

000024d0 <vTaskMissedYield>:
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	80 93 83 16 	sts	0x1683, r24	; 0x801683 <xYieldPending>
    24d6:	08 95       	ret

000024d8 <xTaskGetCurrentTaskHandle>:
    24d8:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <pxCurrentTCB>
    24dc:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    24e0:	08 95       	ret

000024e2 <xTaskGetSchedulerState>:
    24e2:	80 91 88 16 	lds	r24, 0x1688	; 0x801688 <xSchedulerRunning>
    24e6:	88 23       	and	r24, r24
    24e8:	31 f0       	breq	.+12     	; 0x24f6 <xTaskGetSchedulerState+0x14>
    24ea:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <uxSchedulerSuspended>
    24ee:	81 11       	cpse	r24, r1
    24f0:	04 c0       	rjmp	.+8      	; 0x24fa <xTaskGetSchedulerState+0x18>
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	08 95       	ret
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	08 95       	ret
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	08 95       	ret

000024fe <xTaskPriorityInherit>:
    24fe:	0f 93       	push	r16
    2500:	1f 93       	push	r17
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	fc 01       	movw	r30, r24
    2508:	89 2b       	or	r24, r25
    250a:	09 f4       	brne	.+2      	; 0x250e <xTaskPriorityInherit+0x10>
    250c:	77 c0       	rjmp	.+238    	; 0x25fc <xTaskPriorityInherit+0xfe>
    250e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2510:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
    2514:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2518:	5a 96       	adiw	r26, 0x1a	; 26
    251a:	9c 91       	ld	r25, X
    251c:	89 17       	cp	r24, r25
    251e:	08 f0       	brcs	.+2      	; 0x2522 <xTaskPriorityInherit+0x24>
    2520:	63 c0       	rjmp	.+198    	; 0x25e8 <xTaskPriorityInherit+0xea>
    2522:	46 85       	ldd	r20, Z+14	; 0x0e
    2524:	57 85       	ldd	r21, Z+15	; 0x0f
    2526:	60 89       	ldd	r22, Z+16	; 0x10
    2528:	71 89       	ldd	r23, Z+17	; 0x11
    252a:	77 23       	and	r23, r23
    252c:	94 f0       	brlt	.+36     	; 0x2552 <xTaskPriorityInherit+0x54>
    252e:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
    2532:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2536:	5a 96       	adiw	r26, 0x1a	; 26
    2538:	9c 91       	ld	r25, X
    253a:	4a e0       	ldi	r20, 0x0A	; 10
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	49 1b       	sub	r20, r25
    2544:	51 09       	sbc	r21, r1
    2546:	61 09       	sbc	r22, r1
    2548:	71 09       	sbc	r23, r1
    254a:	46 87       	std	Z+14, r20	; 0x0e
    254c:	57 87       	std	Z+15, r21	; 0x0f
    254e:	60 8b       	std	Z+16, r22	; 0x10
    2550:	71 8b       	std	Z+17, r23	; 0x11
    2552:	24 85       	ldd	r18, Z+12	; 0x0c
    2554:	35 85       	ldd	r19, Z+13	; 0x0d
    2556:	4b e0       	ldi	r20, 0x0B	; 11
    2558:	84 9f       	mul	r24, r20
    255a:	c0 01       	movw	r24, r0
    255c:	11 24       	eor	r1, r1
    255e:	85 53       	subi	r24, 0x35	; 53
    2560:	99 4e       	sbci	r25, 0xE9	; 233
    2562:	28 17       	cp	r18, r24
    2564:	39 07       	cpc	r19, r25
    2566:	b9 f5       	brne	.+110    	; 0x25d6 <xTaskPriorityInherit+0xd8>
    2568:	ef 01       	movw	r28, r30
    256a:	8f 01       	movw	r16, r30
    256c:	0e 5f       	subi	r16, 0xFE	; 254
    256e:	1f 4f       	sbci	r17, 0xFF	; 255
    2570:	c8 01       	movw	r24, r16
    2572:	0e 94 4b 03 	call	0x696	; 0x696 <uxListRemove>
    2576:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    257a:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    257e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2580:	ea 8f       	std	Y+26, r30	; 0x1a
    2582:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <uxTopReadyPriority>
    2586:	8e 17       	cp	r24, r30
    2588:	10 f4       	brcc	.+4      	; 0x258e <xTaskPriorityInherit+0x90>
    258a:	e0 93 89 16 	sts	0x1689, r30	; 0x801689 <uxTopReadyPriority>
    258e:	8b e0       	ldi	r24, 0x0B	; 11
    2590:	8e 9f       	mul	r24, r30
    2592:	f0 01       	movw	r30, r0
    2594:	11 24       	eor	r1, r1
    2596:	e5 53       	subi	r30, 0x35	; 53
    2598:	f9 4e       	sbci	r31, 0xE9	; 233
    259a:	01 80       	ldd	r0, Z+1	; 0x01
    259c:	f2 81       	ldd	r31, Z+2	; 0x02
    259e:	e0 2d       	mov	r30, r0
    25a0:	ff 83       	std	Y+7, r31	; 0x07
    25a2:	ee 83       	std	Y+6, r30	; 0x06
    25a4:	26 81       	ldd	r18, Z+6	; 0x06
    25a6:	37 81       	ldd	r19, Z+7	; 0x07
    25a8:	39 87       	std	Y+9, r19	; 0x09
    25aa:	28 87       	std	Y+8, r18	; 0x08
    25ac:	a6 81       	ldd	r26, Z+6	; 0x06
    25ae:	b7 81       	ldd	r27, Z+7	; 0x07
    25b0:	15 96       	adiw	r26, 0x05	; 5
    25b2:	1c 93       	st	X, r17
    25b4:	0e 93       	st	-X, r16
    25b6:	14 97       	sbiw	r26, 0x04	; 4
    25b8:	17 83       	std	Z+7, r17	; 0x07
    25ba:	06 83       	std	Z+6, r16	; 0x06
    25bc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25be:	8e 9f       	mul	r24, r30
    25c0:	f0 01       	movw	r30, r0
    25c2:	11 24       	eor	r1, r1
    25c4:	e5 53       	subi	r30, 0x35	; 53
    25c6:	f9 4e       	sbci	r31, 0xE9	; 233
    25c8:	fd 87       	std	Y+13, r31	; 0x0d
    25ca:	ec 87       	std	Y+12, r30	; 0x0c
    25cc:	80 81       	ld	r24, Z
    25ce:	8f 5f       	subi	r24, 0xFF	; 255
    25d0:	80 83       	st	Z, r24
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	16 c0       	rjmp	.+44     	; 0x2602 <xTaskPriorityInherit+0x104>
    25d6:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <pxCurrentTCB>
    25da:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    25de:	5a 96       	adiw	r26, 0x1a	; 26
    25e0:	8c 91       	ld	r24, X
    25e2:	82 8f       	std	Z+26, r24	; 0x1a
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	0d c0       	rjmp	.+26     	; 0x2602 <xTaskPriorityInherit+0x104>
    25e8:	95 a5       	ldd	r25, Z+45	; 0x2d
    25ea:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    25ee:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    25f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    25f4:	98 17       	cp	r25, r24
    25f6:	20 f0       	brcs	.+8      	; 0x2600 <xTaskPriorityInherit+0x102>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	03 c0       	rjmp	.+6      	; 0x2602 <xTaskPriorityInherit+0x104>
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	01 c0       	rjmp	.+2      	; 0x2602 <xTaskPriorityInherit+0x104>
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	08 95       	ret

0000260c <xTaskPriorityDisinherit>:
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	fc 01       	movw	r30, r24
    2616:	89 2b       	or	r24, r25
    2618:	09 f4       	brne	.+2      	; 0x261c <xTaskPriorityDisinherit+0x10>
    261a:	49 c0       	rjmp	.+146    	; 0x26ae <xTaskPriorityDisinherit+0xa2>
    261c:	86 a5       	ldd	r24, Z+46	; 0x2e
    261e:	81 50       	subi	r24, 0x01	; 1
    2620:	86 a7       	std	Z+46, r24	; 0x2e
    2622:	22 8d       	ldd	r18, Z+26	; 0x1a
    2624:	95 a5       	ldd	r25, Z+45	; 0x2d
    2626:	29 17       	cp	r18, r25
    2628:	09 f4       	brne	.+2      	; 0x262c <xTaskPriorityDisinherit+0x20>
    262a:	43 c0       	rjmp	.+134    	; 0x26b2 <xTaskPriorityDisinherit+0xa6>
    262c:	81 11       	cpse	r24, r1
    262e:	43 c0       	rjmp	.+134    	; 0x26b6 <xTaskPriorityDisinherit+0xaa>
    2630:	ef 01       	movw	r28, r30
    2632:	8f 01       	movw	r16, r30
    2634:	0e 5f       	subi	r16, 0xFE	; 254
    2636:	1f 4f       	sbci	r17, 0xFF	; 255
    2638:	c8 01       	movw	r24, r16
    263a:	0e 94 4b 03 	call	0x696	; 0x696 <uxListRemove>
    263e:	ed a5       	ldd	r30, Y+45	; 0x2d
    2640:	ea 8f       	std	Y+26, r30	; 0x1a
    2642:	8a e0       	ldi	r24, 0x0A	; 10
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a0 e0       	ldi	r26, 0x00	; 0
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	8e 1b       	sub	r24, r30
    264c:	91 09       	sbc	r25, r1
    264e:	a1 09       	sbc	r26, r1
    2650:	b1 09       	sbc	r27, r1
    2652:	8e 87       	std	Y+14, r24	; 0x0e
    2654:	9f 87       	std	Y+15, r25	; 0x0f
    2656:	a8 8b       	std	Y+16, r26	; 0x10
    2658:	b9 8b       	std	Y+17, r27	; 0x11
    265a:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <uxTopReadyPriority>
    265e:	8e 17       	cp	r24, r30
    2660:	10 f4       	brcc	.+4      	; 0x2666 <xTaskPriorityDisinherit+0x5a>
    2662:	e0 93 89 16 	sts	0x1689, r30	; 0x801689 <uxTopReadyPriority>
    2666:	8b e0       	ldi	r24, 0x0B	; 11
    2668:	8e 9f       	mul	r24, r30
    266a:	f0 01       	movw	r30, r0
    266c:	11 24       	eor	r1, r1
    266e:	e5 53       	subi	r30, 0x35	; 53
    2670:	f9 4e       	sbci	r31, 0xE9	; 233
    2672:	01 80       	ldd	r0, Z+1	; 0x01
    2674:	f2 81       	ldd	r31, Z+2	; 0x02
    2676:	e0 2d       	mov	r30, r0
    2678:	ff 83       	std	Y+7, r31	; 0x07
    267a:	ee 83       	std	Y+6, r30	; 0x06
    267c:	26 81       	ldd	r18, Z+6	; 0x06
    267e:	37 81       	ldd	r19, Z+7	; 0x07
    2680:	39 87       	std	Y+9, r19	; 0x09
    2682:	28 87       	std	Y+8, r18	; 0x08
    2684:	a6 81       	ldd	r26, Z+6	; 0x06
    2686:	b7 81       	ldd	r27, Z+7	; 0x07
    2688:	15 96       	adiw	r26, 0x05	; 5
    268a:	1c 93       	st	X, r17
    268c:	0e 93       	st	-X, r16
    268e:	14 97       	sbiw	r26, 0x04	; 4
    2690:	17 83       	std	Z+7, r17	; 0x07
    2692:	06 83       	std	Z+6, r16	; 0x06
    2694:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2696:	8e 9f       	mul	r24, r30
    2698:	f0 01       	movw	r30, r0
    269a:	11 24       	eor	r1, r1
    269c:	e5 53       	subi	r30, 0x35	; 53
    269e:	f9 4e       	sbci	r31, 0xE9	; 233
    26a0:	fd 87       	std	Y+13, r31	; 0x0d
    26a2:	ec 87       	std	Y+12, r30	; 0x0c
    26a4:	80 81       	ld	r24, Z
    26a6:	8f 5f       	subi	r24, 0xFF	; 255
    26a8:	80 83       	st	Z, r24
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	05 c0       	rjmp	.+10     	; 0x26b8 <xTaskPriorityDisinherit+0xac>
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	03 c0       	rjmp	.+6      	; 0x26b8 <xTaskPriorityDisinherit+0xac>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	01 c0       	rjmp	.+2      	; 0x26b8 <xTaskPriorityDisinherit+0xac>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	08 95       	ret

000026c2 <vTaskPriorityDisinheritAfterTimeout>:
    26c2:	0f 93       	push	r16
    26c4:	1f 93       	push	r17
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	fc 01       	movw	r30, r24
    26cc:	89 2b       	or	r24, r25
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <vTaskPriorityDisinheritAfterTimeout+0x10>
    26d0:	5a c0       	rjmp	.+180    	; 0x2786 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    26d2:	85 a5       	ldd	r24, Z+45	; 0x2d
    26d4:	86 17       	cp	r24, r22
    26d6:	08 f4       	brcc	.+2      	; 0x26da <vTaskPriorityDisinheritAfterTimeout+0x18>
    26d8:	86 2f       	mov	r24, r22
    26da:	92 8d       	ldd	r25, Z+26	; 0x1a
    26dc:	89 17       	cp	r24, r25
    26de:	09 f4       	brne	.+2      	; 0x26e2 <vTaskPriorityDisinheritAfterTimeout+0x20>
    26e0:	52 c0       	rjmp	.+164    	; 0x2786 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    26e2:	26 a5       	ldd	r18, Z+46	; 0x2e
    26e4:	21 30       	cpi	r18, 0x01	; 1
    26e6:	09 f0       	breq	.+2      	; 0x26ea <vTaskPriorityDisinheritAfterTimeout+0x28>
    26e8:	4e c0       	rjmp	.+156    	; 0x2786 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    26ea:	82 8f       	std	Z+26, r24	; 0x1a
    26ec:	46 85       	ldd	r20, Z+14	; 0x0e
    26ee:	57 85       	ldd	r21, Z+15	; 0x0f
    26f0:	60 89       	ldd	r22, Z+16	; 0x10
    26f2:	71 89       	ldd	r23, Z+17	; 0x11
    26f4:	77 23       	and	r23, r23
    26f6:	64 f0       	brlt	.+24     	; 0x2710 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    26f8:	4a e0       	ldi	r20, 0x0A	; 10
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	70 e0       	ldi	r23, 0x00	; 0
    2700:	48 1b       	sub	r20, r24
    2702:	51 09       	sbc	r21, r1
    2704:	61 09       	sbc	r22, r1
    2706:	71 09       	sbc	r23, r1
    2708:	46 87       	std	Z+14, r20	; 0x0e
    270a:	57 87       	std	Z+15, r21	; 0x0f
    270c:	60 8b       	std	Z+16, r22	; 0x10
    270e:	71 8b       	std	Z+17, r23	; 0x11
    2710:	24 85       	ldd	r18, Z+12	; 0x0c
    2712:	35 85       	ldd	r19, Z+13	; 0x0d
    2714:	4b e0       	ldi	r20, 0x0B	; 11
    2716:	94 9f       	mul	r25, r20
    2718:	c0 01       	movw	r24, r0
    271a:	11 24       	eor	r1, r1
    271c:	85 53       	subi	r24, 0x35	; 53
    271e:	99 4e       	sbci	r25, 0xE9	; 233
    2720:	28 17       	cp	r18, r24
    2722:	39 07       	cpc	r19, r25
    2724:	81 f5       	brne	.+96     	; 0x2786 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2726:	ef 01       	movw	r28, r30
    2728:	8f 01       	movw	r16, r30
    272a:	0e 5f       	subi	r16, 0xFE	; 254
    272c:	1f 4f       	sbci	r17, 0xFF	; 255
    272e:	c8 01       	movw	r24, r16
    2730:	0e 94 4b 03 	call	0x696	; 0x696 <uxListRemove>
    2734:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2736:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <uxTopReadyPriority>
    273a:	8e 17       	cp	r24, r30
    273c:	10 f4       	brcc	.+4      	; 0x2742 <vTaskPriorityDisinheritAfterTimeout+0x80>
    273e:	e0 93 89 16 	sts	0x1689, r30	; 0x801689 <uxTopReadyPriority>
    2742:	8b e0       	ldi	r24, 0x0B	; 11
    2744:	8e 9f       	mul	r24, r30
    2746:	f0 01       	movw	r30, r0
    2748:	11 24       	eor	r1, r1
    274a:	e5 53       	subi	r30, 0x35	; 53
    274c:	f9 4e       	sbci	r31, 0xE9	; 233
    274e:	01 80       	ldd	r0, Z+1	; 0x01
    2750:	f2 81       	ldd	r31, Z+2	; 0x02
    2752:	e0 2d       	mov	r30, r0
    2754:	ff 83       	std	Y+7, r31	; 0x07
    2756:	ee 83       	std	Y+6, r30	; 0x06
    2758:	26 81       	ldd	r18, Z+6	; 0x06
    275a:	37 81       	ldd	r19, Z+7	; 0x07
    275c:	39 87       	std	Y+9, r19	; 0x09
    275e:	28 87       	std	Y+8, r18	; 0x08
    2760:	a6 81       	ldd	r26, Z+6	; 0x06
    2762:	b7 81       	ldd	r27, Z+7	; 0x07
    2764:	15 96       	adiw	r26, 0x05	; 5
    2766:	1c 93       	st	X, r17
    2768:	0e 93       	st	-X, r16
    276a:	14 97       	sbiw	r26, 0x04	; 4
    276c:	17 83       	std	Z+7, r17	; 0x07
    276e:	06 83       	std	Z+6, r16	; 0x06
    2770:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2772:	8e 9f       	mul	r24, r30
    2774:	f0 01       	movw	r30, r0
    2776:	11 24       	eor	r1, r1
    2778:	e5 53       	subi	r30, 0x35	; 53
    277a:	f9 4e       	sbci	r31, 0xE9	; 233
    277c:	fd 87       	std	Y+13, r31	; 0x0d
    277e:	ec 87       	std	Y+12, r30	; 0x0c
    2780:	80 81       	ld	r24, Z
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	80 83       	st	Z, r24
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	08 95       	ret

00002790 <pvTaskIncrementMutexHeldCount>:
    2790:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <pxCurrentTCB>
    2794:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2798:	89 2b       	or	r24, r25
    279a:	39 f0       	breq	.+14     	; 0x27aa <pvTaskIncrementMutexHeldCount+0x1a>
    279c:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    27a0:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    27a4:	86 a5       	ldd	r24, Z+46	; 0x2e
    27a6:	8f 5f       	subi	r24, 0xFF	; 255
    27a8:	86 a7       	std	Z+46, r24	; 0x2e
    27aa:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <pxCurrentTCB>
    27ae:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    27b2:	08 95       	ret

000027b4 <xTaskGenericNotifyWait>:
    27b4:	4f 92       	push	r4
    27b6:	5f 92       	push	r5
    27b8:	6f 92       	push	r6
    27ba:	7f 92       	push	r7
    27bc:	af 92       	push	r10
    27be:	bf 92       	push	r11
    27c0:	cf 92       	push	r12
    27c2:	df 92       	push	r13
    27c4:	ef 92       	push	r14
    27c6:	ff 92       	push	r15
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	28 01       	movw	r4, r16
    27d2:	39 01       	movw	r6, r18
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	0f 92       	push	r0
    27da:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    27de:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    27e2:	c8 2f       	mov	r28, r24
    27e4:	d0 e0       	ldi	r29, 0x00	; 0
    27e6:	ec 0f       	add	r30, r28
    27e8:	fd 1f       	adc	r31, r29
    27ea:	83 a9       	ldd	r24, Z+51	; 0x33
    27ec:	82 30       	cpi	r24, 0x02	; 2
    27ee:	71 f1       	breq	.+92     	; 0x284c <xTaskGenericNotifyWait+0x98>
    27f0:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    27f4:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    27f8:	ce 01       	movw	r24, r28
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	e8 0f       	add	r30, r24
    2804:	f9 1f       	adc	r31, r25
    2806:	87 a5       	ldd	r24, Z+47	; 0x2f
    2808:	90 a9       	ldd	r25, Z+48	; 0x30
    280a:	a1 a9       	ldd	r26, Z+49	; 0x31
    280c:	b2 a9       	ldd	r27, Z+50	; 0x32
    280e:	40 95       	com	r20
    2810:	50 95       	com	r21
    2812:	60 95       	com	r22
    2814:	70 95       	com	r23
    2816:	48 23       	and	r20, r24
    2818:	59 23       	and	r21, r25
    281a:	6a 23       	and	r22, r26
    281c:	7b 23       	and	r23, r27
    281e:	47 a7       	std	Z+47, r20	; 0x2f
    2820:	50 ab       	std	Z+48, r21	; 0x30
    2822:	61 ab       	std	Z+49, r22	; 0x31
    2824:	72 ab       	std	Z+50, r23	; 0x32
    2826:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    282a:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    282e:	ec 0f       	add	r30, r28
    2830:	fd 1f       	adc	r31, r29
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	83 ab       	std	Z+51, r24	; 0x33
    2836:	a1 14       	cp	r10, r1
    2838:	b1 04       	cpc	r11, r1
    283a:	c1 04       	cpc	r12, r1
    283c:	d1 04       	cpc	r13, r1
    283e:	31 f0       	breq	.+12     	; 0x284c <xTaskGenericNotifyWait+0x98>
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	c6 01       	movw	r24, r12
    2844:	b5 01       	movw	r22, r10
    2846:	88 d8       	rcall	.-3824   	; 0x1958 <prvAddCurrentTaskToDelayedList>
    2848:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortYield>
    284c:	0f 90       	pop	r0
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	0f 92       	push	r0
    2856:	e1 14       	cp	r14, r1
    2858:	f1 04       	cpc	r15, r1
    285a:	a1 f0       	breq	.+40     	; 0x2884 <xTaskGenericNotifyWait+0xd0>
    285c:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    2860:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2864:	ce 01       	movw	r24, r28
    2866:	88 0f       	add	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	e8 0f       	add	r30, r24
    2870:	f9 1f       	adc	r31, r25
    2872:	87 a5       	ldd	r24, Z+47	; 0x2f
    2874:	90 a9       	ldd	r25, Z+48	; 0x30
    2876:	a1 a9       	ldd	r26, Z+49	; 0x31
    2878:	b2 a9       	ldd	r27, Z+50	; 0x32
    287a:	f7 01       	movw	r30, r14
    287c:	80 83       	st	Z, r24
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	a2 83       	std	Z+2, r26	; 0x02
    2882:	b3 83       	std	Z+3, r27	; 0x03
    2884:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    2888:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    288c:	ec 0f       	add	r30, r28
    288e:	fd 1f       	adc	r31, r29
    2890:	83 a9       	ldd	r24, Z+51	; 0x33
    2892:	82 30       	cpi	r24, 0x02	; 2
    2894:	e9 f4       	brne	.+58     	; 0x28d0 <xTaskGenericNotifyWait+0x11c>
    2896:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    289a:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    289e:	ce 01       	movw	r24, r28
    28a0:	88 0f       	add	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	88 0f       	add	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	e8 0f       	add	r30, r24
    28aa:	f9 1f       	adc	r31, r25
    28ac:	87 a5       	ldd	r24, Z+47	; 0x2f
    28ae:	90 a9       	ldd	r25, Z+48	; 0x30
    28b0:	a1 a9       	ldd	r26, Z+49	; 0x31
    28b2:	b2 a9       	ldd	r27, Z+50	; 0x32
    28b4:	40 94       	com	r4
    28b6:	50 94       	com	r5
    28b8:	60 94       	com	r6
    28ba:	70 94       	com	r7
    28bc:	48 22       	and	r4, r24
    28be:	59 22       	and	r5, r25
    28c0:	6a 22       	and	r6, r26
    28c2:	7b 22       	and	r7, r27
    28c4:	47 a6       	std	Z+47, r4	; 0x2f
    28c6:	50 aa       	std	Z+48, r5	; 0x30
    28c8:	61 aa       	std	Z+49, r6	; 0x31
    28ca:	72 aa       	std	Z+50, r7	; 0x32
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <xTaskGenericNotifyWait+0x11e>
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	20 91 39 17 	lds	r18, 0x1739	; 0x801739 <pxCurrentTCB>
    28d6:	30 91 3a 17 	lds	r19, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    28da:	c2 0f       	add	r28, r18
    28dc:	d3 1f       	adc	r29, r19
    28de:	1b aa       	std	Y+51, r1	; 0x33
    28e0:	0f 90       	pop	r0
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	1f 91       	pop	r17
    28ea:	0f 91       	pop	r16
    28ec:	ff 90       	pop	r15
    28ee:	ef 90       	pop	r14
    28f0:	df 90       	pop	r13
    28f2:	cf 90       	pop	r12
    28f4:	bf 90       	pop	r11
    28f6:	af 90       	pop	r10
    28f8:	7f 90       	pop	r7
    28fa:	6f 90       	pop	r6
    28fc:	5f 90       	pop	r5
    28fe:	4f 90       	pop	r4
    2900:	08 95       	ret

00002902 <xTaskGenericNotify>:
    2902:	8f 92       	push	r8
    2904:	9f 92       	push	r9
    2906:	af 92       	push	r10
    2908:	bf 92       	push	r11
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	0f 93       	push	r16
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	dc 01       	movw	r26, r24
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	0f 92       	push	r0
    291c:	e1 14       	cp	r14, r1
    291e:	f1 04       	cpc	r15, r1
    2920:	89 f0       	breq	.+34     	; 0x2944 <xTaskGenericNotify+0x42>
    2922:	e6 2f       	mov	r30, r22
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	ee 0f       	add	r30, r30
    2928:	ff 1f       	adc	r31, r31
    292a:	ee 0f       	add	r30, r30
    292c:	ff 1f       	adc	r31, r31
    292e:	e8 0f       	add	r30, r24
    2930:	f9 1f       	adc	r31, r25
    2932:	87 a4       	ldd	r8, Z+47	; 0x2f
    2934:	90 a8       	ldd	r9, Z+48	; 0x30
    2936:	a1 a8       	ldd	r10, Z+49	; 0x31
    2938:	b2 a8       	ldd	r11, Z+50	; 0x32
    293a:	f7 01       	movw	r30, r14
    293c:	80 82       	st	Z, r8
    293e:	91 82       	std	Z+1, r9	; 0x01
    2940:	a2 82       	std	Z+2, r10	; 0x02
    2942:	b3 82       	std	Z+3, r11	; 0x03
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	fd 01       	movw	r30, r26
    2948:	e6 0f       	add	r30, r22
    294a:	f7 1f       	adc	r31, r23
    294c:	83 a9       	ldd	r24, Z+51	; 0x33
    294e:	92 e0       	ldi	r25, 0x02	; 2
    2950:	93 ab       	std	Z+51, r25	; 0x33
    2952:	02 30       	cpi	r16, 0x02	; 2
    2954:	01 f1       	breq	.+64     	; 0x2996 <xTaskGenericNotify+0x94>
    2956:	18 f4       	brcc	.+6      	; 0x295e <xTaskGenericNotify+0x5c>
    2958:	01 30       	cpi	r16, 0x01	; 1
    295a:	31 f0       	breq	.+12     	; 0x2968 <xTaskGenericNotify+0x66>
    295c:	4d c0       	rjmp	.+154    	; 0x29f8 <xTaskGenericNotify+0xf6>
    295e:	03 30       	cpi	r16, 0x03	; 3
    2960:	79 f1       	breq	.+94     	; 0x29c0 <xTaskGenericNotify+0xbe>
    2962:	04 30       	cpi	r16, 0x04	; 4
    2964:	d1 f1       	breq	.+116    	; 0x29da <xTaskGenericNotify+0xd8>
    2966:	48 c0       	rjmp	.+144    	; 0x29f8 <xTaskGenericNotify+0xf6>
    2968:	66 0f       	add	r22, r22
    296a:	77 1f       	adc	r23, r23
    296c:	66 0f       	add	r22, r22
    296e:	77 1f       	adc	r23, r23
    2970:	fd 01       	movw	r30, r26
    2972:	e6 0f       	add	r30, r22
    2974:	f7 1f       	adc	r31, r23
    2976:	87 a4       	ldd	r8, Z+47	; 0x2f
    2978:	90 a8       	ldd	r9, Z+48	; 0x30
    297a:	a1 a8       	ldd	r10, Z+49	; 0x31
    297c:	b2 a8       	ldd	r11, Z+50	; 0x32
    297e:	ba 01       	movw	r22, r20
    2980:	a9 01       	movw	r20, r18
    2982:	48 29       	or	r20, r8
    2984:	59 29       	or	r21, r9
    2986:	6a 29       	or	r22, r10
    2988:	7b 29       	or	r23, r11
    298a:	47 a7       	std	Z+47, r20	; 0x2f
    298c:	50 ab       	std	Z+48, r21	; 0x30
    298e:	61 ab       	std	Z+49, r22	; 0x31
    2990:	72 ab       	std	Z+50, r23	; 0x32
    2992:	01 e0       	ldi	r16, 0x01	; 1
    2994:	34 c0       	rjmp	.+104    	; 0x29fe <xTaskGenericNotify+0xfc>
    2996:	66 0f       	add	r22, r22
    2998:	77 1f       	adc	r23, r23
    299a:	66 0f       	add	r22, r22
    299c:	77 1f       	adc	r23, r23
    299e:	fd 01       	movw	r30, r26
    29a0:	e6 0f       	add	r30, r22
    29a2:	f7 1f       	adc	r31, r23
    29a4:	47 a5       	ldd	r20, Z+47	; 0x2f
    29a6:	50 a9       	ldd	r21, Z+48	; 0x30
    29a8:	61 a9       	ldd	r22, Z+49	; 0x31
    29aa:	72 a9       	ldd	r23, Z+50	; 0x32
    29ac:	4f 5f       	subi	r20, 0xFF	; 255
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	6f 4f       	sbci	r22, 0xFF	; 255
    29b2:	7f 4f       	sbci	r23, 0xFF	; 255
    29b4:	47 a7       	std	Z+47, r20	; 0x2f
    29b6:	50 ab       	std	Z+48, r21	; 0x30
    29b8:	61 ab       	std	Z+49, r22	; 0x31
    29ba:	72 ab       	std	Z+50, r23	; 0x32
    29bc:	01 e0       	ldi	r16, 0x01	; 1
    29be:	1f c0       	rjmp	.+62     	; 0x29fe <xTaskGenericNotify+0xfc>
    29c0:	66 0f       	add	r22, r22
    29c2:	77 1f       	adc	r23, r23
    29c4:	66 0f       	add	r22, r22
    29c6:	77 1f       	adc	r23, r23
    29c8:	fd 01       	movw	r30, r26
    29ca:	e6 0f       	add	r30, r22
    29cc:	f7 1f       	adc	r31, r23
    29ce:	27 a7       	std	Z+47, r18	; 0x2f
    29d0:	30 ab       	std	Z+48, r19	; 0x30
    29d2:	41 ab       	std	Z+49, r20	; 0x31
    29d4:	52 ab       	std	Z+50, r21	; 0x32
    29d6:	01 e0       	ldi	r16, 0x01	; 1
    29d8:	12 c0       	rjmp	.+36     	; 0x29fe <xTaskGenericNotify+0xfc>
    29da:	82 30       	cpi	r24, 0x02	; 2
    29dc:	79 f0       	breq	.+30     	; 0x29fc <xTaskGenericNotify+0xfa>
    29de:	66 0f       	add	r22, r22
    29e0:	77 1f       	adc	r23, r23
    29e2:	66 0f       	add	r22, r22
    29e4:	77 1f       	adc	r23, r23
    29e6:	fd 01       	movw	r30, r26
    29e8:	e6 0f       	add	r30, r22
    29ea:	f7 1f       	adc	r31, r23
    29ec:	27 a7       	std	Z+47, r18	; 0x2f
    29ee:	30 ab       	std	Z+48, r19	; 0x30
    29f0:	41 ab       	std	Z+49, r20	; 0x31
    29f2:	52 ab       	std	Z+50, r21	; 0x32
    29f4:	01 e0       	ldi	r16, 0x01	; 1
    29f6:	03 c0       	rjmp	.+6      	; 0x29fe <xTaskGenericNotify+0xfc>
    29f8:	01 e0       	ldi	r16, 0x01	; 1
    29fa:	01 c0       	rjmp	.+2      	; 0x29fe <xTaskGenericNotify+0xfc>
    29fc:	00 e0       	ldi	r16, 0x00	; 0
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <xTaskGenericNotify+0x102>
    2a02:	69 c0       	rjmp	.+210    	; 0x2ad6 <xTaskGenericNotify+0x1d4>
    2a04:	1c 96       	adiw	r26, 0x0c	; 12
    2a06:	ed 91       	ld	r30, X+
    2a08:	fc 91       	ld	r31, X
    2a0a:	1d 97       	sbiw	r26, 0x0d	; 13
    2a0c:	16 96       	adiw	r26, 0x06	; 6
    2a0e:	cd 91       	ld	r28, X+
    2a10:	dc 91       	ld	r29, X
    2a12:	17 97       	sbiw	r26, 0x07	; 7
    2a14:	18 96       	adiw	r26, 0x08	; 8
    2a16:	8d 91       	ld	r24, X+
    2a18:	9c 91       	ld	r25, X
    2a1a:	19 97       	sbiw	r26, 0x09	; 9
    2a1c:	9f 83       	std	Y+7, r25	; 0x07
    2a1e:	8e 83       	std	Y+6, r24	; 0x06
    2a20:	18 96       	adiw	r26, 0x08	; 8
    2a22:	cd 91       	ld	r28, X+
    2a24:	dc 91       	ld	r29, X
    2a26:	19 97       	sbiw	r26, 0x09	; 9
    2a28:	16 96       	adiw	r26, 0x06	; 6
    2a2a:	8d 91       	ld	r24, X+
    2a2c:	9c 91       	ld	r25, X
    2a2e:	17 97       	sbiw	r26, 0x07	; 7
    2a30:	9d 83       	std	Y+5, r25	; 0x05
    2a32:	8c 83       	std	Y+4, r24	; 0x04
    2a34:	81 81       	ldd	r24, Z+1	; 0x01
    2a36:	92 81       	ldd	r25, Z+2	; 0x02
    2a38:	9d 01       	movw	r18, r26
    2a3a:	2e 5f       	subi	r18, 0xFE	; 254
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	82 17       	cp	r24, r18
    2a40:	93 07       	cpc	r25, r19
    2a42:	31 f4       	brne	.+12     	; 0x2a50 <xTaskGenericNotify+0x14e>
    2a44:	18 96       	adiw	r26, 0x08	; 8
    2a46:	8d 91       	ld	r24, X+
    2a48:	9c 91       	ld	r25, X
    2a4a:	19 97       	sbiw	r26, 0x09	; 9
    2a4c:	92 83       	std	Z+2, r25	; 0x02
    2a4e:	81 83       	std	Z+1, r24	; 0x01
    2a50:	1d 96       	adiw	r26, 0x0d	; 13
    2a52:	1c 92       	st	X, r1
    2a54:	1e 92       	st	-X, r1
    2a56:	1c 97       	sbiw	r26, 0x0c	; 12
    2a58:	80 81       	ld	r24, Z
    2a5a:	81 50       	subi	r24, 0x01	; 1
    2a5c:	80 83       	st	Z, r24
    2a5e:	5a 96       	adiw	r26, 0x1a	; 26
    2a60:	ec 91       	ld	r30, X
    2a62:	5a 97       	sbiw	r26, 0x1a	; 26
    2a64:	80 91 89 16 	lds	r24, 0x1689	; 0x801689 <uxTopReadyPriority>
    2a68:	8e 17       	cp	r24, r30
    2a6a:	10 f4       	brcc	.+4      	; 0x2a70 <xTaskGenericNotify+0x16e>
    2a6c:	e0 93 89 16 	sts	0x1689, r30	; 0x801689 <uxTopReadyPriority>
    2a70:	8b e0       	ldi	r24, 0x0B	; 11
    2a72:	8e 9f       	mul	r24, r30
    2a74:	f0 01       	movw	r30, r0
    2a76:	11 24       	eor	r1, r1
    2a78:	e5 53       	subi	r30, 0x35	; 53
    2a7a:	f9 4e       	sbci	r31, 0xE9	; 233
    2a7c:	01 80       	ldd	r0, Z+1	; 0x01
    2a7e:	f2 81       	ldd	r31, Z+2	; 0x02
    2a80:	e0 2d       	mov	r30, r0
    2a82:	17 96       	adiw	r26, 0x07	; 7
    2a84:	fc 93       	st	X, r31
    2a86:	ee 93       	st	-X, r30
    2a88:	16 97       	sbiw	r26, 0x06	; 6
    2a8a:	46 81       	ldd	r20, Z+6	; 0x06
    2a8c:	57 81       	ldd	r21, Z+7	; 0x07
    2a8e:	19 96       	adiw	r26, 0x09	; 9
    2a90:	5c 93       	st	X, r21
    2a92:	4e 93       	st	-X, r20
    2a94:	18 97       	sbiw	r26, 0x08	; 8
    2a96:	c6 81       	ldd	r28, Z+6	; 0x06
    2a98:	d7 81       	ldd	r29, Z+7	; 0x07
    2a9a:	3d 83       	std	Y+5, r19	; 0x05
    2a9c:	2c 83       	std	Y+4, r18	; 0x04
    2a9e:	37 83       	std	Z+7, r19	; 0x07
    2aa0:	26 83       	std	Z+6, r18	; 0x06
    2aa2:	5a 96       	adiw	r26, 0x1a	; 26
    2aa4:	ec 91       	ld	r30, X
    2aa6:	5a 97       	sbiw	r26, 0x1a	; 26
    2aa8:	8e 9f       	mul	r24, r30
    2aaa:	f0 01       	movw	r30, r0
    2aac:	11 24       	eor	r1, r1
    2aae:	e5 53       	subi	r30, 0x35	; 53
    2ab0:	f9 4e       	sbci	r31, 0xE9	; 233
    2ab2:	1d 96       	adiw	r26, 0x0d	; 13
    2ab4:	fc 93       	st	X, r31
    2ab6:	ee 93       	st	-X, r30
    2ab8:	1c 97       	sbiw	r26, 0x0c	; 12
    2aba:	80 81       	ld	r24, Z
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	80 83       	st	Z, r24
    2ac0:	5a 96       	adiw	r26, 0x1a	; 26
    2ac2:	9c 91       	ld	r25, X
    2ac4:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    2ac8:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2acc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ace:	89 17       	cp	r24, r25
    2ad0:	10 f4       	brcc	.+4      	; 0x2ad6 <xTaskGenericNotify+0x1d4>
    2ad2:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortYield>
    2ad6:	0f 90       	pop	r0
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	80 2f       	mov	r24, r16
    2adc:	df 91       	pop	r29
    2ade:	cf 91       	pop	r28
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	bf 90       	pop	r11
    2ae8:	af 90       	pop	r10
    2aea:	9f 90       	pop	r9
    2aec:	8f 90       	pop	r8
    2aee:	08 95       	ret

00002af0 <xTaskGenericNotifyFromISR>:
    2af0:	8f 92       	push	r8
    2af2:	9f 92       	push	r9
    2af4:	af 92       	push	r10
    2af6:	bf 92       	push	r11
    2af8:	cf 92       	push	r12
    2afa:	df 92       	push	r13
    2afc:	ef 92       	push	r14
    2afe:	ff 92       	push	r15
    2b00:	0f 93       	push	r16
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
    2b06:	dc 01       	movw	r26, r24
    2b08:	e1 14       	cp	r14, r1
    2b0a:	f1 04       	cpc	r15, r1
    2b0c:	89 f0       	breq	.+34     	; 0x2b30 <xTaskGenericNotifyFromISR+0x40>
    2b0e:	e6 2f       	mov	r30, r22
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	ee 0f       	add	r30, r30
    2b14:	ff 1f       	adc	r31, r31
    2b16:	ee 0f       	add	r30, r30
    2b18:	ff 1f       	adc	r31, r31
    2b1a:	e8 0f       	add	r30, r24
    2b1c:	f9 1f       	adc	r31, r25
    2b1e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b20:	90 a8       	ldd	r9, Z+48	; 0x30
    2b22:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b24:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b26:	f7 01       	movw	r30, r14
    2b28:	80 82       	st	Z, r8
    2b2a:	91 82       	std	Z+1, r9	; 0x01
    2b2c:	a2 82       	std	Z+2, r10	; 0x02
    2b2e:	b3 82       	std	Z+3, r11	; 0x03
    2b30:	70 e0       	ldi	r23, 0x00	; 0
    2b32:	fd 01       	movw	r30, r26
    2b34:	e6 0f       	add	r30, r22
    2b36:	f7 1f       	adc	r31, r23
    2b38:	93 a9       	ldd	r25, Z+51	; 0x33
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	83 ab       	std	Z+51, r24	; 0x33
    2b3e:	02 30       	cpi	r16, 0x02	; 2
    2b40:	01 f1       	breq	.+64     	; 0x2b82 <xTaskGenericNotifyFromISR+0x92>
    2b42:	18 f4       	brcc	.+6      	; 0x2b4a <xTaskGenericNotifyFromISR+0x5a>
    2b44:	01 30       	cpi	r16, 0x01	; 1
    2b46:	31 f0       	breq	.+12     	; 0x2b54 <xTaskGenericNotifyFromISR+0x64>
    2b48:	4d c0       	rjmp	.+154    	; 0x2be4 <xTaskGenericNotifyFromISR+0xf4>
    2b4a:	03 30       	cpi	r16, 0x03	; 3
    2b4c:	79 f1       	breq	.+94     	; 0x2bac <xTaskGenericNotifyFromISR+0xbc>
    2b4e:	04 30       	cpi	r16, 0x04	; 4
    2b50:	d1 f1       	breq	.+116    	; 0x2bc6 <xTaskGenericNotifyFromISR+0xd6>
    2b52:	48 c0       	rjmp	.+144    	; 0x2be4 <xTaskGenericNotifyFromISR+0xf4>
    2b54:	66 0f       	add	r22, r22
    2b56:	77 1f       	adc	r23, r23
    2b58:	66 0f       	add	r22, r22
    2b5a:	77 1f       	adc	r23, r23
    2b5c:	fd 01       	movw	r30, r26
    2b5e:	e6 0f       	add	r30, r22
    2b60:	f7 1f       	adc	r31, r23
    2b62:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b64:	90 a8       	ldd	r9, Z+48	; 0x30
    2b66:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b68:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b6a:	ba 01       	movw	r22, r20
    2b6c:	a9 01       	movw	r20, r18
    2b6e:	48 29       	or	r20, r8
    2b70:	59 29       	or	r21, r9
    2b72:	6a 29       	or	r22, r10
    2b74:	7b 29       	or	r23, r11
    2b76:	47 a7       	std	Z+47, r20	; 0x2f
    2b78:	50 ab       	std	Z+48, r21	; 0x30
    2b7a:	61 ab       	std	Z+49, r22	; 0x31
    2b7c:	72 ab       	std	Z+50, r23	; 0x32
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	34 c0       	rjmp	.+104    	; 0x2bea <xTaskGenericNotifyFromISR+0xfa>
    2b82:	66 0f       	add	r22, r22
    2b84:	77 1f       	adc	r23, r23
    2b86:	66 0f       	add	r22, r22
    2b88:	77 1f       	adc	r23, r23
    2b8a:	fd 01       	movw	r30, r26
    2b8c:	e6 0f       	add	r30, r22
    2b8e:	f7 1f       	adc	r31, r23
    2b90:	47 a5       	ldd	r20, Z+47	; 0x2f
    2b92:	50 a9       	ldd	r21, Z+48	; 0x30
    2b94:	61 a9       	ldd	r22, Z+49	; 0x31
    2b96:	72 a9       	ldd	r23, Z+50	; 0x32
    2b98:	4f 5f       	subi	r20, 0xFF	; 255
    2b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b9c:	6f 4f       	sbci	r22, 0xFF	; 255
    2b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba0:	47 a7       	std	Z+47, r20	; 0x2f
    2ba2:	50 ab       	std	Z+48, r21	; 0x30
    2ba4:	61 ab       	std	Z+49, r22	; 0x31
    2ba6:	72 ab       	std	Z+50, r23	; 0x32
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	1f c0       	rjmp	.+62     	; 0x2bea <xTaskGenericNotifyFromISR+0xfa>
    2bac:	66 0f       	add	r22, r22
    2bae:	77 1f       	adc	r23, r23
    2bb0:	66 0f       	add	r22, r22
    2bb2:	77 1f       	adc	r23, r23
    2bb4:	fd 01       	movw	r30, r26
    2bb6:	e6 0f       	add	r30, r22
    2bb8:	f7 1f       	adc	r31, r23
    2bba:	27 a7       	std	Z+47, r18	; 0x2f
    2bbc:	30 ab       	std	Z+48, r19	; 0x30
    2bbe:	41 ab       	std	Z+49, r20	; 0x31
    2bc0:	52 ab       	std	Z+50, r21	; 0x32
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	12 c0       	rjmp	.+36     	; 0x2bea <xTaskGenericNotifyFromISR+0xfa>
    2bc6:	92 30       	cpi	r25, 0x02	; 2
    2bc8:	79 f0       	breq	.+30     	; 0x2be8 <xTaskGenericNotifyFromISR+0xf8>
    2bca:	66 0f       	add	r22, r22
    2bcc:	77 1f       	adc	r23, r23
    2bce:	66 0f       	add	r22, r22
    2bd0:	77 1f       	adc	r23, r23
    2bd2:	fd 01       	movw	r30, r26
    2bd4:	e6 0f       	add	r30, r22
    2bd6:	f7 1f       	adc	r31, r23
    2bd8:	27 a7       	std	Z+47, r18	; 0x2f
    2bda:	30 ab       	std	Z+48, r19	; 0x30
    2bdc:	41 ab       	std	Z+49, r20	; 0x31
    2bde:	52 ab       	std	Z+50, r21	; 0x32
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	03 c0       	rjmp	.+6      	; 0x2bea <xTaskGenericNotifyFromISR+0xfa>
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	01 c0       	rjmp	.+2      	; 0x2bea <xTaskGenericNotifyFromISR+0xfa>
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	91 30       	cpi	r25, 0x01	; 1
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <xTaskGenericNotifyFromISR+0x100>
    2bee:	96 c0       	rjmp	.+300    	; 0x2d1c <xTaskGenericNotifyFromISR+0x22c>
    2bf0:	90 91 7a 16 	lds	r25, 0x167A	; 0x80167a <uxSchedulerSuspended>
    2bf4:	91 11       	cpse	r25, r1
    2bf6:	5f c0       	rjmp	.+190    	; 0x2cb6 <xTaskGenericNotifyFromISR+0x1c6>
    2bf8:	1c 96       	adiw	r26, 0x0c	; 12
    2bfa:	ed 91       	ld	r30, X+
    2bfc:	fc 91       	ld	r31, X
    2bfe:	1d 97       	sbiw	r26, 0x0d	; 13
    2c00:	16 96       	adiw	r26, 0x06	; 6
    2c02:	cd 91       	ld	r28, X+
    2c04:	dc 91       	ld	r29, X
    2c06:	17 97       	sbiw	r26, 0x07	; 7
    2c08:	18 96       	adiw	r26, 0x08	; 8
    2c0a:	2d 91       	ld	r18, X+
    2c0c:	3c 91       	ld	r19, X
    2c0e:	19 97       	sbiw	r26, 0x09	; 9
    2c10:	3f 83       	std	Y+7, r19	; 0x07
    2c12:	2e 83       	std	Y+6, r18	; 0x06
    2c14:	18 96       	adiw	r26, 0x08	; 8
    2c16:	cd 91       	ld	r28, X+
    2c18:	dc 91       	ld	r29, X
    2c1a:	19 97       	sbiw	r26, 0x09	; 9
    2c1c:	16 96       	adiw	r26, 0x06	; 6
    2c1e:	2d 91       	ld	r18, X+
    2c20:	3c 91       	ld	r19, X
    2c22:	17 97       	sbiw	r26, 0x07	; 7
    2c24:	3d 83       	std	Y+5, r19	; 0x05
    2c26:	2c 83       	std	Y+4, r18	; 0x04
    2c28:	41 81       	ldd	r20, Z+1	; 0x01
    2c2a:	52 81       	ldd	r21, Z+2	; 0x02
    2c2c:	9d 01       	movw	r18, r26
    2c2e:	2e 5f       	subi	r18, 0xFE	; 254
    2c30:	3f 4f       	sbci	r19, 0xFF	; 255
    2c32:	42 17       	cp	r20, r18
    2c34:	53 07       	cpc	r21, r19
    2c36:	31 f4       	brne	.+12     	; 0x2c44 <xTaskGenericNotifyFromISR+0x154>
    2c38:	18 96       	adiw	r26, 0x08	; 8
    2c3a:	4d 91       	ld	r20, X+
    2c3c:	5c 91       	ld	r21, X
    2c3e:	19 97       	sbiw	r26, 0x09	; 9
    2c40:	52 83       	std	Z+2, r21	; 0x02
    2c42:	41 83       	std	Z+1, r20	; 0x01
    2c44:	1d 96       	adiw	r26, 0x0d	; 13
    2c46:	1c 92       	st	X, r1
    2c48:	1e 92       	st	-X, r1
    2c4a:	1c 97       	sbiw	r26, 0x0c	; 12
    2c4c:	90 81       	ld	r25, Z
    2c4e:	91 50       	subi	r25, 0x01	; 1
    2c50:	90 83       	st	Z, r25
    2c52:	5a 96       	adiw	r26, 0x1a	; 26
    2c54:	ec 91       	ld	r30, X
    2c56:	5a 97       	sbiw	r26, 0x1a	; 26
    2c58:	90 91 89 16 	lds	r25, 0x1689	; 0x801689 <uxTopReadyPriority>
    2c5c:	9e 17       	cp	r25, r30
    2c5e:	10 f4       	brcc	.+4      	; 0x2c64 <xTaskGenericNotifyFromISR+0x174>
    2c60:	e0 93 89 16 	sts	0x1689, r30	; 0x801689 <uxTopReadyPriority>
    2c64:	9b e0       	ldi	r25, 0x0B	; 11
    2c66:	9e 9f       	mul	r25, r30
    2c68:	f0 01       	movw	r30, r0
    2c6a:	11 24       	eor	r1, r1
    2c6c:	e5 53       	subi	r30, 0x35	; 53
    2c6e:	f9 4e       	sbci	r31, 0xE9	; 233
    2c70:	01 80       	ldd	r0, Z+1	; 0x01
    2c72:	f2 81       	ldd	r31, Z+2	; 0x02
    2c74:	e0 2d       	mov	r30, r0
    2c76:	17 96       	adiw	r26, 0x07	; 7
    2c78:	fc 93       	st	X, r31
    2c7a:	ee 93       	st	-X, r30
    2c7c:	16 97       	sbiw	r26, 0x06	; 6
    2c7e:	46 81       	ldd	r20, Z+6	; 0x06
    2c80:	57 81       	ldd	r21, Z+7	; 0x07
    2c82:	19 96       	adiw	r26, 0x09	; 9
    2c84:	5c 93       	st	X, r21
    2c86:	4e 93       	st	-X, r20
    2c88:	18 97       	sbiw	r26, 0x08	; 8
    2c8a:	c6 81       	ldd	r28, Z+6	; 0x06
    2c8c:	d7 81       	ldd	r29, Z+7	; 0x07
    2c8e:	3d 83       	std	Y+5, r19	; 0x05
    2c90:	2c 83       	std	Y+4, r18	; 0x04
    2c92:	37 83       	std	Z+7, r19	; 0x07
    2c94:	26 83       	std	Z+6, r18	; 0x06
    2c96:	5a 96       	adiw	r26, 0x1a	; 26
    2c98:	ec 91       	ld	r30, X
    2c9a:	5a 97       	sbiw	r26, 0x1a	; 26
    2c9c:	9e 9f       	mul	r25, r30
    2c9e:	f0 01       	movw	r30, r0
    2ca0:	11 24       	eor	r1, r1
    2ca2:	e5 53       	subi	r30, 0x35	; 53
    2ca4:	f9 4e       	sbci	r31, 0xE9	; 233
    2ca6:	1d 96       	adiw	r26, 0x0d	; 13
    2ca8:	fc 93       	st	X, r31
    2caa:	ee 93       	st	-X, r30
    2cac:	1c 97       	sbiw	r26, 0x0c	; 12
    2cae:	90 81       	ld	r25, Z
    2cb0:	9f 5f       	subi	r25, 0xFF	; 255
    2cb2:	90 83       	st	Z, r25
    2cb4:	21 c0       	rjmp	.+66     	; 0x2cf8 <xTaskGenericNotifyFromISR+0x208>
    2cb6:	66 ea       	ldi	r22, 0xA6	; 166
    2cb8:	76 e1       	ldi	r23, 0x16	; 22
    2cba:	fb 01       	movw	r30, r22
    2cbc:	c1 81       	ldd	r28, Z+1	; 0x01
    2cbe:	d2 81       	ldd	r29, Z+2	; 0x02
    2cc0:	53 96       	adiw	r26, 0x13	; 19
    2cc2:	dc 93       	st	X, r29
    2cc4:	ce 93       	st	-X, r28
    2cc6:	52 97       	sbiw	r26, 0x12	; 18
    2cc8:	2e 81       	ldd	r18, Y+6	; 0x06
    2cca:	3f 81       	ldd	r19, Y+7	; 0x07
    2ccc:	55 96       	adiw	r26, 0x15	; 21
    2cce:	3c 93       	st	X, r19
    2cd0:	2e 93       	st	-X, r18
    2cd2:	54 97       	sbiw	r26, 0x14	; 20
    2cd4:	4e 81       	ldd	r20, Y+6	; 0x06
    2cd6:	5f 81       	ldd	r21, Y+7	; 0x07
    2cd8:	9d 01       	movw	r18, r26
    2cda:	22 5f       	subi	r18, 0xF2	; 242
    2cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cde:	fa 01       	movw	r30, r20
    2ce0:	35 83       	std	Z+5, r19	; 0x05
    2ce2:	24 83       	std	Z+4, r18	; 0x04
    2ce4:	3f 83       	std	Y+7, r19	; 0x07
    2ce6:	2e 83       	std	Y+6, r18	; 0x06
    2ce8:	59 96       	adiw	r26, 0x19	; 25
    2cea:	7c 93       	st	X, r23
    2cec:	6e 93       	st	-X, r22
    2cee:	58 97       	sbiw	r26, 0x18	; 24
    2cf0:	fb 01       	movw	r30, r22
    2cf2:	90 81       	ld	r25, Z
    2cf4:	9f 5f       	subi	r25, 0xFF	; 255
    2cf6:	90 83       	st	Z, r25
    2cf8:	5a 96       	adiw	r26, 0x1a	; 26
    2cfa:	2c 91       	ld	r18, X
    2cfc:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <pxCurrentTCB>
    2d00:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <pxCurrentTCB+0x1>
    2d04:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d06:	92 17       	cp	r25, r18
    2d08:	48 f4       	brcc	.+18     	; 0x2d1c <xTaskGenericNotifyFromISR+0x22c>
    2d0a:	c1 14       	cp	r12, r1
    2d0c:	d1 04       	cpc	r13, r1
    2d0e:	19 f0       	breq	.+6      	; 0x2d16 <xTaskGenericNotifyFromISR+0x226>
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	f6 01       	movw	r30, r12
    2d14:	90 83       	st	Z, r25
    2d16:	91 e0       	ldi	r25, 0x01	; 1
    2d18:	90 93 83 16 	sts	0x1683, r25	; 0x801683 <xYieldPending>
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	0f 91       	pop	r16
    2d22:	ff 90       	pop	r15
    2d24:	ef 90       	pop	r14
    2d26:	df 90       	pop	r13
    2d28:	cf 90       	pop	r12
    2d2a:	bf 90       	pop	r11
    2d2c:	af 90       	pop	r10
    2d2e:	9f 90       	pop	r9
    2d30:	8f 90       	pop	r8
    2d32:	08 95       	ret

00002d34 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	21 f4       	brne	.+8      	; 0x2d40 <xTaskGenericNotifyStateClear+0xc>
    2d38:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <pxCurrentTCB>
    2d3c:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	fc 01       	movw	r30, r24
    2d4a:	e6 0f       	add	r30, r22
    2d4c:	f7 1f       	adc	r31, r23
    2d4e:	23 a9       	ldd	r18, Z+51	; 0x33
    2d50:	22 30       	cpi	r18, 0x02	; 2
    2d52:	31 f4       	brne	.+12     	; 0x2d60 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2d54:	fc 01       	movw	r30, r24
    2d56:	e6 0f       	add	r30, r22
    2d58:	f7 1f       	adc	r31, r23
    2d5a:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	01 c0       	rjmp	.+2      	; 0x2d62 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2d60:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2d62:	0f 90       	pop	r0
    2d64:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2d66:	08 95       	ret

00002d68 <prvGetNextExpireTime>:
    2d68:	dc 01       	movw	r26, r24
    2d6a:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTimerList>
    2d6e:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTimerList+0x1>
    2d72:	80 81       	ld	r24, Z
    2d74:	91 e0       	ldi	r25, 0x01	; 1
    2d76:	81 11       	cpse	r24, r1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	9c 93       	st	X, r25
    2d7c:	91 11       	cpse	r25, r1
    2d7e:	08 c0       	rjmp	.+16     	; 0x2d90 <prvGetNextExpireTime+0x28>
    2d80:	07 80       	ldd	r0, Z+7	; 0x07
    2d82:	f0 85       	ldd	r31, Z+8	; 0x08
    2d84:	e0 2d       	mov	r30, r0
    2d86:	60 81       	ld	r22, Z
    2d88:	71 81       	ldd	r23, Z+1	; 0x01
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	93 81       	ldd	r25, Z+3	; 0x03
    2d8e:	08 95       	ret
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	70 e0       	ldi	r23, 0x00	; 0
    2d94:	cb 01       	movw	r24, r22
    2d96:	08 95       	ret

00002d98 <prvInsertTimerInActiveList>:
    2d98:	cf 92       	push	r12
    2d9a:	df 92       	push	r13
    2d9c:	ef 92       	push	r14
    2d9e:	ff 92       	push	r15
    2da0:	0f 93       	push	r16
    2da2:	1f 93       	push	r17
    2da4:	fc 01       	movw	r30, r24
    2da6:	42 83       	std	Z+2, r20	; 0x02
    2da8:	53 83       	std	Z+3, r21	; 0x03
    2daa:	64 83       	std	Z+4, r22	; 0x04
    2dac:	75 83       	std	Z+5, r23	; 0x05
    2dae:	93 87       	std	Z+11, r25	; 0x0b
    2db0:	82 87       	std	Z+10, r24	; 0x0a
    2db2:	04 17       	cp	r16, r20
    2db4:	15 07       	cpc	r17, r21
    2db6:	26 07       	cpc	r18, r22
    2db8:	37 07       	cpc	r19, r23
    2dba:	c0 f0       	brcs	.+48     	; 0x2dec <prvInsertTimerInActiveList+0x54>
    2dbc:	0c 19       	sub	r16, r12
    2dbe:	1d 09       	sbc	r17, r13
    2dc0:	2e 09       	sbc	r18, r14
    2dc2:	3f 09       	sbc	r19, r15
    2dc4:	86 85       	ldd	r24, Z+14	; 0x0e
    2dc6:	97 85       	ldd	r25, Z+15	; 0x0f
    2dc8:	a0 89       	ldd	r26, Z+16	; 0x10
    2dca:	b1 89       	ldd	r27, Z+17	; 0x11
    2dcc:	08 17       	cp	r16, r24
    2dce:	19 07       	cpc	r17, r25
    2dd0:	2a 07       	cpc	r18, r26
    2dd2:	3b 07       	cpc	r19, r27
    2dd4:	00 f5       	brcc	.+64     	; 0x2e16 <prvInsertTimerInActiveList+0x7e>
    2dd6:	bf 01       	movw	r22, r30
    2dd8:	6e 5f       	subi	r22, 0xFE	; 254
    2dda:	7f 4f       	sbci	r23, 0xFF	; 255
    2ddc:	80 91 43 17 	lds	r24, 0x1743	; 0x801743 <pxOverflowTimerList>
    2de0:	90 91 44 17 	lds	r25, 0x1744	; 0x801744 <pxOverflowTimerList+0x1>
    2de4:	0e 94 0e 03 	call	0x61c	; 0x61c <vListInsert>
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	18 c0       	rjmp	.+48     	; 0x2e1c <prvInsertTimerInActiveList+0x84>
    2dec:	0c 15       	cp	r16, r12
    2dee:	1d 05       	cpc	r17, r13
    2df0:	2e 05       	cpc	r18, r14
    2df2:	3f 05       	cpc	r19, r15
    2df4:	28 f4       	brcc	.+10     	; 0x2e00 <prvInsertTimerInActiveList+0x68>
    2df6:	4c 15       	cp	r20, r12
    2df8:	5d 05       	cpc	r21, r13
    2dfa:	6e 05       	cpc	r22, r14
    2dfc:	7f 05       	cpc	r23, r15
    2dfe:	68 f4       	brcc	.+26     	; 0x2e1a <prvInsertTimerInActiveList+0x82>
    2e00:	bf 01       	movw	r22, r30
    2e02:	6e 5f       	subi	r22, 0xFE	; 254
    2e04:	7f 4f       	sbci	r23, 0xFF	; 255
    2e06:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTimerList>
    2e0a:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTimerList+0x1>
    2e0e:	0e 94 0e 03 	call	0x61c	; 0x61c <vListInsert>
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	03 c0       	rjmp	.+6      	; 0x2e1c <prvInsertTimerInActiveList+0x84>
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	01 c0       	rjmp	.+2      	; 0x2e1c <prvInsertTimerInActiveList+0x84>
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	ff 90       	pop	r15
    2e22:	ef 90       	pop	r14
    2e24:	df 90       	pop	r13
    2e26:	cf 90       	pop	r12
    2e28:	08 95       	ret

00002e2a <prvCheckForValidListAndQueue>:
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	0f 92       	push	r0
    2e30:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <xTimerQueue>
    2e34:	90 91 42 17 	lds	r25, 0x1742	; 0x801742 <xTimerQueue+0x1>
    2e38:	89 2b       	or	r24, r25
    2e3a:	e9 f4       	brne	.+58     	; 0x2e76 <prvCheckForValidListAndQueue+0x4c>
    2e3c:	82 e5       	ldi	r24, 0x52	; 82
    2e3e:	97 e1       	ldi	r25, 0x17	; 23
    2e40:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialise>
    2e44:	87 e4       	ldi	r24, 0x47	; 71
    2e46:	97 e1       	ldi	r25, 0x17	; 23
    2e48:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vListInitialise>
    2e4c:	82 e5       	ldi	r24, 0x52	; 82
    2e4e:	97 e1       	ldi	r25, 0x17	; 23
    2e50:	90 93 46 17 	sts	0x1746, r25	; 0x801746 <pxCurrentTimerList+0x1>
    2e54:	80 93 45 17 	sts	0x1745, r24	; 0x801745 <pxCurrentTimerList>
    2e58:	87 e4       	ldi	r24, 0x47	; 71
    2e5a:	97 e1       	ldi	r25, 0x17	; 23
    2e5c:	90 93 44 17 	sts	0x1744, r25	; 0x801744 <pxOverflowTimerList+0x1>
    2e60:	80 93 43 17 	sts	0x1743, r24	; 0x801743 <pxOverflowTimerList>
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	67 e0       	ldi	r22, 0x07	; 7
    2e68:	8a e0       	ldi	r24, 0x0A	; 10
    2e6a:	0e 94 bc 05 	call	0xb78	; 0xb78 <xQueueGenericCreate>
    2e6e:	90 93 42 17 	sts	0x1742, r25	; 0x801742 <xTimerQueue+0x1>
    2e72:	80 93 41 17 	sts	0x1741, r24	; 0x801741 <xTimerQueue>
    2e76:	0f 90       	pop	r0
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	08 95       	ret

00002e7c <xTimerCreateTimerTask>:
    2e7c:	ef 92       	push	r14
    2e7e:	ff 92       	push	r15
    2e80:	0f 93       	push	r16
    2e82:	d3 df       	rcall	.-90     	; 0x2e2a <prvCheckForValidListAndQueue>
    2e84:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <xTimerQueue>
    2e88:	90 91 42 17 	lds	r25, 0x1742	; 0x801742 <xTimerQueue+0x1>
    2e8c:	89 2b       	or	r24, r25
    2e8e:	91 f0       	breq	.+36     	; 0x2eb4 <xTimerCreateTimerTask+0x38>
    2e90:	0f 2e       	mov	r0, r31
    2e92:	ff e3       	ldi	r31, 0x3F	; 63
    2e94:	ef 2e       	mov	r14, r31
    2e96:	f7 e1       	ldi	r31, 0x17	; 23
    2e98:	ff 2e       	mov	r15, r31
    2e9a:	f0 2d       	mov	r31, r0
    2e9c:	03 e0       	ldi	r16, 0x03	; 3
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 ec       	ldi	r20, 0xC0	; 192
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	6f e9       	ldi	r22, 0x9F	; 159
    2ea8:	72 e0       	ldi	r23, 0x02	; 2
    2eaa:	87 ed       	ldi	r24, 0xD7	; 215
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xTaskCreate>
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <xTimerCreateTimerTask+0x3a>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	0f 91       	pop	r16
    2eb8:	ff 90       	pop	r15
    2eba:	ef 90       	pop	r14
    2ebc:	08 95       	ret

00002ebe <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2ebe:	8f 92       	push	r8
    2ec0:	9f 92       	push	r9
    2ec2:	af 92       	push	r10
    2ec4:	bf 92       	push	r11
    2ec6:	cf 92       	push	r12
    2ec8:	df 92       	push	r13
    2eca:	ef 92       	push	r14
    2ecc:	ff 92       	push	r15
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	27 97       	sbiw	r28, 0x07	; 7
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2ee6:	e0 91 41 17 	lds	r30, 0x1741	; 0x801741 <xTimerQueue>
    2eea:	f0 91 42 17 	lds	r31, 0x1742	; 0x801742 <xTimerQueue+0x1>
    2eee:	30 97       	sbiw	r30, 0x00	; 0
    2ef0:	81 f1       	breq	.+96     	; 0x2f52 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2ef2:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2ef4:	2a 83       	std	Y+2, r18	; 0x02
    2ef6:	3b 83       	std	Y+3, r19	; 0x03
    2ef8:	4c 83       	std	Y+4, r20	; 0x04
    2efa:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2efc:	9f 83       	std	Y+7, r25	; 0x07
    2efe:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2f00:	66 30       	cpi	r22, 0x06	; 6
    2f02:	f4 f4       	brge	.+60     	; 0x2f40 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2f04:	ee da       	rcall	.-2596   	; 0x24e2 <xTaskGetSchedulerState>
    2f06:	82 30       	cpi	r24, 0x02	; 2
    2f08:	69 f4       	brne	.+26     	; 0x2f24 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2f0a:	00 e0       	ldi	r16, 0x00	; 0
    2f0c:	a7 01       	movw	r20, r14
    2f0e:	96 01       	movw	r18, r12
    2f10:	be 01       	movw	r22, r28
    2f12:	6f 5f       	subi	r22, 0xFF	; 255
    2f14:	7f 4f       	sbci	r23, 0xFF	; 255
    2f16:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <xTimerQueue>
    2f1a:	90 91 42 17 	lds	r25, 0x1742	; 0x801742 <xTimerQueue+0x1>
    2f1e:	0e 94 df 05 	call	0xbbe	; 0xbbe <xQueueGenericSend>
    2f22:	18 c0       	rjmp	.+48     	; 0x2f54 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2f24:	00 e0       	ldi	r16, 0x00	; 0
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	a9 01       	movw	r20, r18
    2f2c:	be 01       	movw	r22, r28
    2f2e:	6f 5f       	subi	r22, 0xFF	; 255
    2f30:	7f 4f       	sbci	r23, 0xFF	; 255
    2f32:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <xTimerQueue>
    2f36:	90 91 42 17 	lds	r25, 0x1742	; 0x801742 <xTimerQueue+0x1>
    2f3a:	0e 94 df 05 	call	0xbbe	; 0xbbe <xQueueGenericSend>
    2f3e:	0a c0       	rjmp	.+20     	; 0x2f54 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	a8 01       	movw	r20, r16
    2f44:	be 01       	movw	r22, r28
    2f46:	6f 5f       	subi	r22, 0xFF	; 255
    2f48:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4a:	cf 01       	movw	r24, r30
    2f4c:	0e 94 71 06 	call	0xce2	; 0xce2 <xQueueGenericSendFromISR>
    2f50:	01 c0       	rjmp	.+2      	; 0x2f54 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2f52:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2f54:	27 96       	adiw	r28, 0x07	; 7
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	1f 91       	pop	r17
    2f66:	0f 91       	pop	r16
    2f68:	ff 90       	pop	r15
    2f6a:	ef 90       	pop	r14
    2f6c:	df 90       	pop	r13
    2f6e:	cf 90       	pop	r12
    2f70:	bf 90       	pop	r11
    2f72:	af 90       	pop	r10
    2f74:	9f 90       	pop	r9
    2f76:	8f 90       	pop	r8
    2f78:	08 95       	ret

00002f7a <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2f7a:	8f 92       	push	r8
    2f7c:	9f 92       	push	r9
    2f7e:	af 92       	push	r10
    2f80:	bf 92       	push	r11
    2f82:	cf 92       	push	r12
    2f84:	df 92       	push	r13
    2f86:	ef 92       	push	r14
    2f88:	ff 92       	push	r15
    2f8a:	0f 93       	push	r16
    2f8c:	1f 93       	push	r17
    2f8e:	cf 93       	push	r28
    2f90:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2f92:	3b c0       	rjmp	.+118    	; 0x300a <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2f94:	07 80       	ldd	r0, Z+7	; 0x07
    2f96:	f0 85       	ldd	r31, Z+8	; 0x08
    2f98:	e0 2d       	mov	r30, r0
    2f9a:	80 80       	ld	r8, Z
    2f9c:	91 80       	ldd	r9, Z+1	; 0x01
    2f9e:	a2 80       	ldd	r10, Z+2	; 0x02
    2fa0:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2fa2:	c0 85       	ldd	r28, Z+8	; 0x08
    2fa4:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2fa6:	8e 01       	movw	r16, r28
    2fa8:	0e 5f       	subi	r16, 0xFE	; 254
    2faa:	1f 4f       	sbci	r17, 0xFF	; 255
    2fac:	c8 01       	movw	r24, r16
    2fae:	0e 94 4b 03 	call	0x696	; 0x696 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2fb2:	ec 89       	ldd	r30, Y+20	; 0x14
    2fb4:	fd 89       	ldd	r31, Y+21	; 0x15
    2fb6:	ce 01       	movw	r24, r28
    2fb8:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2fba:	8e 89       	ldd	r24, Y+22	; 0x16
    2fbc:	82 ff       	sbrs	r24, 2
    2fbe:	25 c0       	rjmp	.+74     	; 0x300a <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2fc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fc4:	a8 89       	ldd	r26, Y+16	; 0x10
    2fc6:	b9 89       	ldd	r27, Y+17	; 0x11
    2fc8:	88 0d       	add	r24, r8
    2fca:	99 1d       	adc	r25, r9
    2fcc:	aa 1d       	adc	r26, r10
    2fce:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2fd0:	88 16       	cp	r8, r24
    2fd2:	99 06       	cpc	r9, r25
    2fd4:	aa 06       	cpc	r10, r26
    2fd6:	bb 06       	cpc	r11, r27
    2fd8:	70 f4       	brcc	.+28     	; 0x2ff6 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2fda:	8a 83       	std	Y+2, r24	; 0x02
    2fdc:	9b 83       	std	Y+3, r25	; 0x03
    2fde:	ac 83       	std	Y+4, r26	; 0x04
    2fe0:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2fe2:	db 87       	std	Y+11, r29	; 0x0b
    2fe4:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2fe6:	b8 01       	movw	r22, r16
    2fe8:	80 91 45 17 	lds	r24, 0x1745	; 0x801745 <pxCurrentTimerList>
    2fec:	90 91 46 17 	lds	r25, 0x1746	; 0x801746 <pxCurrentTimerList+0x1>
    2ff0:	0e 94 0e 03 	call	0x61c	; 0x61c <vListInsert>
    2ff4:	0a c0       	rjmp	.+20     	; 0x300a <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ff6:	c1 2c       	mov	r12, r1
    2ff8:	d1 2c       	mov	r13, r1
    2ffa:	76 01       	movw	r14, r12
    2ffc:	00 e0       	ldi	r16, 0x00	; 0
    2ffe:	10 e0       	ldi	r17, 0x00	; 0
    3000:	a5 01       	movw	r20, r10
    3002:	94 01       	movw	r18, r8
    3004:	60 e0       	ldi	r22, 0x00	; 0
    3006:	ce 01       	movw	r24, r28
    3008:	5a df       	rcall	.-332    	; 0x2ebe <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    300a:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTimerList>
    300e:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTimerList+0x1>
    3012:	80 81       	ld	r24, Z
    3014:	81 11       	cpse	r24, r1
    3016:	be cf       	rjmp	.-132    	; 0x2f94 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3018:	80 91 43 17 	lds	r24, 0x1743	; 0x801743 <pxOverflowTimerList>
    301c:	90 91 44 17 	lds	r25, 0x1744	; 0x801744 <pxOverflowTimerList+0x1>
    3020:	90 93 46 17 	sts	0x1746, r25	; 0x801746 <pxCurrentTimerList+0x1>
    3024:	80 93 45 17 	sts	0x1745, r24	; 0x801745 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3028:	f0 93 44 17 	sts	0x1744, r31	; 0x801744 <pxOverflowTimerList+0x1>
    302c:	e0 93 43 17 	sts	0x1743, r30	; 0x801743 <pxOverflowTimerList>
    }
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	1f 91       	pop	r17
    3036:	0f 91       	pop	r16
    3038:	ff 90       	pop	r15
    303a:	ef 90       	pop	r14
    303c:	df 90       	pop	r13
    303e:	cf 90       	pop	r12
    3040:	bf 90       	pop	r11
    3042:	af 90       	pop	r10
    3044:	9f 90       	pop	r9
    3046:	8f 90       	pop	r8
    3048:	08 95       	ret

0000304a <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    304a:	cf 92       	push	r12
    304c:	df 92       	push	r13
    304e:	ef 92       	push	r14
    3050:	ff 92       	push	r15
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3058:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <xTaskGetTickCount>
    305c:	6b 01       	movw	r12, r22
    305e:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3060:	80 91 3b 17 	lds	r24, 0x173B	; 0x80173b <xLastTime.2436>
    3064:	90 91 3c 17 	lds	r25, 0x173C	; 0x80173c <xLastTime.2436+0x1>
    3068:	a0 91 3d 17 	lds	r26, 0x173D	; 0x80173d <xLastTime.2436+0x2>
    306c:	b0 91 3e 17 	lds	r27, 0x173E	; 0x80173e <xLastTime.2436+0x3>
    3070:	c8 16       	cp	r12, r24
    3072:	d9 06       	cpc	r13, r25
    3074:	ea 06       	cpc	r14, r26
    3076:	fb 06       	cpc	r15, r27
    3078:	20 f4       	brcc	.+8      	; 0x3082 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    307a:	7f df       	rcall	.-258    	; 0x2f7a <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	88 83       	st	Y, r24
    3080:	01 c0       	rjmp	.+2      	; 0x3084 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3082:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3084:	c0 92 3b 17 	sts	0x173B, r12	; 0x80173b <xLastTime.2436>
    3088:	d0 92 3c 17 	sts	0x173C, r13	; 0x80173c <xLastTime.2436+0x1>
    308c:	e0 92 3d 17 	sts	0x173D, r14	; 0x80173d <xLastTime.2436+0x2>
    3090:	f0 92 3e 17 	sts	0x173E, r15	; 0x80173e <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3094:	c7 01       	movw	r24, r14
    3096:	b6 01       	movw	r22, r12
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	ff 90       	pop	r15
    309e:	ef 90       	pop	r14
    30a0:	df 90       	pop	r13
    30a2:	cf 90       	pop	r12
    30a4:	08 95       	ret

000030a6 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    30a6:	4f 92       	push	r4
    30a8:	5f 92       	push	r5
    30aa:	6f 92       	push	r6
    30ac:	7f 92       	push	r7
    30ae:	8f 92       	push	r8
    30b0:	9f 92       	push	r9
    30b2:	af 92       	push	r10
    30b4:	bf 92       	push	r11
    30b6:	cf 92       	push	r12
    30b8:	df 92       	push	r13
    30ba:	ef 92       	push	r14
    30bc:	ff 92       	push	r15
    30be:	0f 93       	push	r16
    30c0:	1f 93       	push	r17
    30c2:	cf 93       	push	r28
    30c4:	df 93       	push	r29
    30c6:	4b 01       	movw	r8, r22
    30c8:	5c 01       	movw	r10, r24
    30ca:	29 01       	movw	r4, r18
    30cc:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    30ce:	e0 91 45 17 	lds	r30, 0x1745	; 0x801745 <pxCurrentTimerList>
    30d2:	f0 91 46 17 	lds	r31, 0x1746	; 0x801746 <pxCurrentTimerList+0x1>
    30d6:	07 80       	ldd	r0, Z+7	; 0x07
    30d8:	f0 85       	ldd	r31, Z+8	; 0x08
    30da:	e0 2d       	mov	r30, r0
    30dc:	c0 85       	ldd	r28, Z+8	; 0x08
    30de:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30e0:	ce 01       	movw	r24, r28
    30e2:	02 96       	adiw	r24, 0x02	; 2
    30e4:	0e 94 4b 03 	call	0x696	; 0x696 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    30e8:	8e 89       	ldd	r24, Y+22	; 0x16
    30ea:	82 ff       	sbrs	r24, 2
    30ec:	1b c0       	rjmp	.+54     	; 0x3124 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    30ee:	4e 85       	ldd	r20, Y+14	; 0x0e
    30f0:	5f 85       	ldd	r21, Y+15	; 0x0f
    30f2:	68 89       	ldd	r22, Y+16	; 0x10
    30f4:	79 89       	ldd	r23, Y+17	; 0x11
    30f6:	48 0d       	add	r20, r8
    30f8:	59 1d       	adc	r21, r9
    30fa:	6a 1d       	adc	r22, r10
    30fc:	7b 1d       	adc	r23, r11
    30fe:	75 01       	movw	r14, r10
    3100:	64 01       	movw	r12, r8
    3102:	93 01       	movw	r18, r6
    3104:	82 01       	movw	r16, r4
    3106:	ce 01       	movw	r24, r28
    3108:	47 de       	rcall	.-882    	; 0x2d98 <prvInsertTimerInActiveList>
    310a:	88 23       	and	r24, r24
    310c:	69 f0       	breq	.+26     	; 0x3128 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    310e:	c1 2c       	mov	r12, r1
    3110:	d1 2c       	mov	r13, r1
    3112:	76 01       	movw	r14, r12
    3114:	00 e0       	ldi	r16, 0x00	; 0
    3116:	10 e0       	ldi	r17, 0x00	; 0
    3118:	a5 01       	movw	r20, r10
    311a:	94 01       	movw	r18, r8
    311c:	60 e0       	ldi	r22, 0x00	; 0
    311e:	ce 01       	movw	r24, r28
    3120:	ce de       	rcall	.-612    	; 0x2ebe <xTimerGenericCommand>
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3124:	8e 7f       	andi	r24, 0xFE	; 254
    3126:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3128:	ec 89       	ldd	r30, Y+20	; 0x14
    312a:	fd 89       	ldd	r31, Y+21	; 0x15
    312c:	ce 01       	movw	r24, r28
    312e:	19 95       	eicall
    }
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	7f 90       	pop	r7
    314a:	6f 90       	pop	r6
    314c:	5f 90       	pop	r5
    314e:	4f 90       	pop	r4
    3150:	08 95       	ret

00003152 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3152:	8f 92       	push	r8
    3154:	9f 92       	push	r9
    3156:	af 92       	push	r10
    3158:	bf 92       	push	r11
    315a:	cf 92       	push	r12
    315c:	df 92       	push	r13
    315e:	ef 92       	push	r14
    3160:	ff 92       	push	r15
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	1f 92       	push	r1
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	6b 01       	movw	r12, r22
    3170:	7c 01       	movw	r14, r24
    3172:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3174:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3178:	ce 01       	movw	r24, r28
    317a:	01 96       	adiw	r24, 0x01	; 1
    317c:	66 df       	rcall	.-308    	; 0x304a <prvSampleTimeNow>
    317e:	4b 01       	movw	r8, r22
    3180:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	81 11       	cpse	r24, r1
    3186:	2d c0       	rjmp	.+90     	; 0x31e2 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3188:	11 11       	cpse	r17, r1
    318a:	0d c0       	rjmp	.+26     	; 0x31a6 <prvProcessTimerOrBlockTask+0x54>
    318c:	8c 14       	cp	r8, r12
    318e:	9d 04       	cpc	r9, r13
    3190:	ae 04       	cpc	r10, r14
    3192:	bf 04       	cpc	r11, r15
    3194:	40 f0       	brcs	.+16     	; 0x31a6 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3196:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    319a:	a5 01       	movw	r20, r10
    319c:	94 01       	movw	r18, r8
    319e:	c7 01       	movw	r24, r14
    31a0:	b6 01       	movw	r22, r12
    31a2:	81 df       	rcall	.-254    	; 0x30a6 <prvProcessExpiredTimer>
    31a4:	20 c0       	rjmp	.+64     	; 0x31e6 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    31a6:	11 23       	and	r17, r17
    31a8:	41 f0       	breq	.+16     	; 0x31ba <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    31aa:	e0 91 43 17 	lds	r30, 0x1743	; 0x801743 <pxOverflowTimerList>
    31ae:	f0 91 44 17 	lds	r31, 0x1744	; 0x801744 <pxOverflowTimerList+0x1>
    31b2:	80 81       	ld	r24, Z
    31b4:	11 e0       	ldi	r17, 0x01	; 1
    31b6:	81 11       	cpse	r24, r1
    31b8:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    31ba:	b7 01       	movw	r22, r14
    31bc:	a6 01       	movw	r20, r12
    31be:	48 19       	sub	r20, r8
    31c0:	59 09       	sbc	r21, r9
    31c2:	6a 09       	sbc	r22, r10
    31c4:	7b 09       	sbc	r23, r11
    31c6:	21 2f       	mov	r18, r17
    31c8:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <xTimerQueue>
    31cc:	90 91 42 17 	lds	r25, 0x1742	; 0x801742 <xTimerQueue+0x1>
    31d0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    31d4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <xTaskResumeAll>
    31d8:	81 11       	cpse	r24, r1
    31da:	05 c0       	rjmp	.+10     	; 0x31e6 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    31dc:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortYield>
    31e0:	02 c0       	rjmp	.+4      	; 0x31e6 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    31e2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <xTaskResumeAll>
            }
        }
    }
    31e6:	0f 90       	pop	r0
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	bf 90       	pop	r11
    31f8:	af 90       	pop	r10
    31fa:	9f 90       	pop	r9
    31fc:	8f 90       	pop	r8
    31fe:	08 95       	ret

00003200 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3200:	af 92       	push	r10
    3202:	bf 92       	push	r11
    3204:	cf 92       	push	r12
    3206:	df 92       	push	r13
    3208:	ef 92       	push	r14
    320a:	ff 92       	push	r15
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	28 97       	sbiw	r28, 0x08	; 8
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3224:	82 c0       	rjmp	.+260    	; 0x332a <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	88 23       	and	r24, r24
    322a:	0c f4       	brge	.+2      	; 0x322e <prvProcessReceivedCommands+0x2e>
    322c:	7e c0       	rjmp	.+252    	; 0x332a <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    322e:	ae 80       	ldd	r10, Y+6	; 0x06
    3230:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3232:	d5 01       	movw	r26, r10
    3234:	1c 96       	adiw	r26, 0x0c	; 12
    3236:	8d 91       	ld	r24, X+
    3238:	9c 91       	ld	r25, X
    323a:	1d 97       	sbiw	r26, 0x0d	; 13
    323c:	89 2b       	or	r24, r25
    323e:	21 f0       	breq	.+8      	; 0x3248 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3240:	c5 01       	movw	r24, r10
    3242:	02 96       	adiw	r24, 0x02	; 2
    3244:	0e 94 4b 03 	call	0x696	; 0x696 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3248:	ce 01       	movw	r24, r28
    324a:	08 96       	adiw	r24, 0x08	; 8
    324c:	fe de       	rcall	.-516    	; 0x304a <prvSampleTimeNow>
    324e:	8b 01       	movw	r16, r22
    3250:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3252:	e9 81       	ldd	r30, Y+1	; 0x01
    3254:	0e 2e       	mov	r0, r30
    3256:	00 0c       	add	r0, r0
    3258:	ff 0b       	sbc	r31, r31
    325a:	ea 30       	cpi	r30, 0x0A	; 10
    325c:	f1 05       	cpc	r31, r1
    325e:	08 f0       	brcs	.+2      	; 0x3262 <prvProcessReceivedCommands+0x62>
    3260:	64 c0       	rjmp	.+200    	; 0x332a <prvProcessReceivedCommands+0x12a>
    3262:	88 27       	eor	r24, r24
    3264:	ee 58       	subi	r30, 0x8E	; 142
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	8f 4f       	sbci	r24, 0xFF	; 255
    326a:	0c 94 4e 2d 	jmp	0x5a9c	; 0x5a9c <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    326e:	f5 01       	movw	r30, r10
    3270:	86 89       	ldd	r24, Z+22	; 0x16
    3272:	81 60       	ori	r24, 0x01	; 1
    3274:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3276:	ca 80       	ldd	r12, Y+2	; 0x02
    3278:	db 80       	ldd	r13, Y+3	; 0x03
    327a:	ec 80       	ldd	r14, Y+4	; 0x04
    327c:	fd 80       	ldd	r15, Y+5	; 0x05
    327e:	46 85       	ldd	r20, Z+14	; 0x0e
    3280:	57 85       	ldd	r21, Z+15	; 0x0f
    3282:	60 89       	ldd	r22, Z+16	; 0x10
    3284:	71 89       	ldd	r23, Z+17	; 0x11
    3286:	4c 0d       	add	r20, r12
    3288:	5d 1d       	adc	r21, r13
    328a:	6e 1d       	adc	r22, r14
    328c:	7f 1d       	adc	r23, r15
    328e:	c5 01       	movw	r24, r10
    3290:	83 dd       	rcall	.-1274   	; 0x2d98 <prvInsertTimerInActiveList>
    3292:	88 23       	and	r24, r24
    3294:	09 f4       	brne	.+2      	; 0x3298 <prvProcessReceivedCommands+0x98>
    3296:	49 c0       	rjmp	.+146    	; 0x332a <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3298:	d5 01       	movw	r26, r10
    329a:	54 96       	adiw	r26, 0x14	; 20
    329c:	ed 91       	ld	r30, X+
    329e:	fc 91       	ld	r31, X
    32a0:	55 97       	sbiw	r26, 0x15	; 21
    32a2:	c5 01       	movw	r24, r10
    32a4:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    32a6:	f5 01       	movw	r30, r10
    32a8:	86 89       	ldd	r24, Z+22	; 0x16
    32aa:	82 ff       	sbrs	r24, 2
    32ac:	3e c0       	rjmp	.+124    	; 0x332a <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    32ae:	4a 81       	ldd	r20, Y+2	; 0x02
    32b0:	5b 81       	ldd	r21, Y+3	; 0x03
    32b2:	6c 81       	ldd	r22, Y+4	; 0x04
    32b4:	7d 81       	ldd	r23, Y+5	; 0x05
    32b6:	86 85       	ldd	r24, Z+14	; 0x0e
    32b8:	97 85       	ldd	r25, Z+15	; 0x0f
    32ba:	a0 89       	ldd	r26, Z+16	; 0x10
    32bc:	b1 89       	ldd	r27, Z+17	; 0x11
    32be:	9a 01       	movw	r18, r20
    32c0:	ab 01       	movw	r20, r22
    32c2:	28 0f       	add	r18, r24
    32c4:	39 1f       	adc	r19, r25
    32c6:	4a 1f       	adc	r20, r26
    32c8:	5b 1f       	adc	r21, r27
    32ca:	c1 2c       	mov	r12, r1
    32cc:	d1 2c       	mov	r13, r1
    32ce:	76 01       	movw	r14, r12
    32d0:	00 e0       	ldi	r16, 0x00	; 0
    32d2:	10 e0       	ldi	r17, 0x00	; 0
    32d4:	60 e0       	ldi	r22, 0x00	; 0
    32d6:	c5 01       	movw	r24, r10
    32d8:	f2 dd       	rcall	.-1052   	; 0x2ebe <xTimerGenericCommand>
    32da:	27 c0       	rjmp	.+78     	; 0x332a <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    32dc:	d5 01       	movw	r26, r10
    32de:	56 96       	adiw	r26, 0x16	; 22
    32e0:	8c 91       	ld	r24, X
    32e2:	56 97       	sbiw	r26, 0x16	; 22
    32e4:	8e 7f       	andi	r24, 0xFE	; 254
    32e6:	56 96       	adiw	r26, 0x16	; 22
    32e8:	8c 93       	st	X, r24
                        break;
    32ea:	1f c0       	rjmp	.+62     	; 0x332a <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    32ec:	f5 01       	movw	r30, r10
    32ee:	86 89       	ldd	r24, Z+22	; 0x16
    32f0:	81 60       	ori	r24, 0x01	; 1
    32f2:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    32f4:	4a 81       	ldd	r20, Y+2	; 0x02
    32f6:	5b 81       	ldd	r21, Y+3	; 0x03
    32f8:	6c 81       	ldd	r22, Y+4	; 0x04
    32fa:	7d 81       	ldd	r23, Y+5	; 0x05
    32fc:	46 87       	std	Z+14, r20	; 0x0e
    32fe:	57 87       	std	Z+15, r21	; 0x0f
    3300:	60 8b       	std	Z+16, r22	; 0x10
    3302:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3304:	40 0f       	add	r20, r16
    3306:	51 1f       	adc	r21, r17
    3308:	62 1f       	adc	r22, r18
    330a:	73 1f       	adc	r23, r19
    330c:	68 01       	movw	r12, r16
    330e:	79 01       	movw	r14, r18
    3310:	c5 01       	movw	r24, r10
    3312:	42 dd       	rcall	.-1404   	; 0x2d98 <prvInsertTimerInActiveList>
                        break;
    3314:	0a c0       	rjmp	.+20     	; 0x332a <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3316:	f5 01       	movw	r30, r10
    3318:	86 89       	ldd	r24, Z+22	; 0x16
    331a:	81 fd       	sbrc	r24, 1
    331c:	04 c0       	rjmp	.+8      	; 0x3326 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    331e:	c5 01       	movw	r24, r10
    3320:	0e 94 b7 02 	call	0x56e	; 0x56e <vPortFree>
    3324:	02 c0       	rjmp	.+4      	; 0x332a <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3326:	8e 7f       	andi	r24, 0xFE	; 254
    3328:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	a9 01       	movw	r20, r18
    3330:	be 01       	movw	r22, r28
    3332:	6f 5f       	subi	r22, 0xFF	; 255
    3334:	7f 4f       	sbci	r23, 0xFF	; 255
    3336:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <xTimerQueue>
    333a:	90 91 42 17 	lds	r25, 0x1742	; 0x801742 <xTimerQueue+0x1>
    333e:	0e 94 ac 06 	call	0xd58	; 0xd58 <xQueueReceive>
    3342:	81 11       	cpse	r24, r1
    3344:	70 cf       	rjmp	.-288    	; 0x3226 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3346:	28 96       	adiw	r28, 0x08	; 8
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	df 91       	pop	r29
    3354:	cf 91       	pop	r28
    3356:	1f 91       	pop	r17
    3358:	0f 91       	pop	r16
    335a:	ff 90       	pop	r15
    335c:	ef 90       	pop	r14
    335e:	df 90       	pop	r13
    3360:	cf 90       	pop	r12
    3362:	bf 90       	pop	r11
    3364:	af 90       	pop	r10
    3366:	08 95       	ret

00003368 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3368:	08 95       	ret

0000336a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    336a:	84 b1       	in	r24, 0x04	; 4
    336c:	80 68       	ori	r24, 0x80	; 128
    336e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3370:	85 b1       	in	r24, 0x05	; 5
    3372:	80 68       	ori	r24, 0x80	; 128
    3374:	85 b9       	out	0x05, r24	; 5
    3376:	08 95       	ret

00003378 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3378:	83 b1       	in	r24, 0x03	; 3
    337a:	80 68       	ori	r24, 0x80	; 128
    337c:	83 b9       	out	0x03, r24	; 3
    337e:	08 95       	ret

00003380 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3380:	f4 df       	rcall	.-24     	; 0x336a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3382:	2f ef       	ldi	r18, 0xFF	; 255
    3384:	80 e7       	ldi	r24, 0x70	; 112
    3386:	92 e0       	ldi	r25, 0x02	; 2
    3388:	21 50       	subi	r18, 0x01	; 1
    338a:	80 40       	sbci	r24, 0x00	; 0
    338c:	90 40       	sbci	r25, 0x00	; 0
    338e:	e1 f7       	brne	.-8      	; 0x3388 <vApplicationMallocFailedHook+0x8>
    3390:	00 c0       	rjmp	.+0      	; 0x3392 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3392:	00 00       	nop
    3394:	f1 df       	rcall	.-30     	; 0x3378 <prvBlinkMainLed>
    3396:	f5 cf       	rjmp	.-22     	; 0x3382 <vApplicationMallocFailedHook+0x2>

00003398 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3398:	e8 df       	rcall	.-48     	; 0x336a <prvSetMainLedOn>
    339a:	2f ef       	ldi	r18, 0xFF	; 255
    339c:	87 ea       	ldi	r24, 0xA7	; 167
    339e:	91 e6       	ldi	r25, 0x61	; 97
    33a0:	21 50       	subi	r18, 0x01	; 1
    33a2:	80 40       	sbci	r24, 0x00	; 0
    33a4:	90 40       	sbci	r25, 0x00	; 0
    33a6:	e1 f7       	brne	.-8      	; 0x33a0 <vApplicationStackOverflowHook+0x8>
    33a8:	00 c0       	rjmp	.+0      	; 0x33aa <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    33aa:	00 00       	nop
    33ac:	e5 df       	rcall	.-54     	; 0x3378 <prvBlinkMainLed>
    33ae:	f5 cf       	rjmp	.-22     	; 0x339a <vApplicationStackOverflowHook+0x2>

000033b0 <enqueueCO2Measure>:
void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
}


void enqueueCO2Measure(uint16_t ppm){
    33b0:	0f 93       	push	r16
    33b2:	cf 93       	push	r28
    33b4:	df 93       	push	r29
    33b6:	1f 92       	push	r1
    33b8:	1f 92       	push	r1
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	9a 83       	std	Y+2, r25	; 0x02
    33c0:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting CO2: %d in the queue \n", ppm);
    33c2:	8a 81       	ldd	r24, Y+2	; 0x02
    33c4:	8f 93       	push	r24
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	8f 93       	push	r24
    33ca:	87 ea       	ldi	r24, 0xA7	; 167
    33cc:	92 e0       	ldi	r25, 0x02	; 2
    33ce:	9f 93       	push	r25
    33d0:	8f 93       	push	r24
    33d2:	81 ed       	ldi	r24, 0xD1	; 209
    33d4:	98 e1       	ldi	r25, 0x18	; 24
    33d6:	9f 93       	push	r25
    33d8:	8f 93       	push	r24
    33da:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
	test_outprint(printstring);
    33de:	81 ed       	ldi	r24, 0xD1	; 209
    33e0:	98 e1       	ldi	r25, 0x18	; 24
    33e2:	45 d3       	rcall	.+1674   	; 0x3a6e <test_outprint>
	
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    33e4:	00 e0       	ldi	r16, 0x00	; 0
    33e6:	2f ef       	ldi	r18, 0xFF	; 255
    33e8:	3f ef       	ldi	r19, 0xFF	; 255
    33ea:	a9 01       	movw	r20, r18
    33ec:	be 01       	movw	r22, r28
    33ee:	6f 5f       	subi	r22, 0xFF	; 255
    33f0:	7f 4f       	sbci	r23, 0xFF	; 255
    33f2:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <xQueueCO2>
    33f6:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <xQueueCO2+0x1>
    33fa:	0e 94 df 05 	call	0xbbe	; 0xbbe <xQueueGenericSend>
}
    33fe:	0f 90       	pop	r0
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	0f 90       	pop	r0
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	0f 91       	pop	r16
    3414:	08 95       	ret

00003416 <initializeCO2Queue>:
#include "../semaphore/header/testOutprint.h"

QueueHandle_t xQueueCO2;

void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	62 e0       	ldi	r22, 0x02	; 2
    341a:	8a e0       	ldi	r24, 0x0A	; 10
    341c:	0e 94 bc 05 	call	0xb78	; 0xb78 <xQueueGenericCreate>
    3420:	90 93 44 19 	sts	0x1944, r25	; 0x801944 <xQueueCO2+0x1>
    3424:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <xQueueCO2>
    3428:	08 95       	ret

0000342a <co2Measure>:
}

void co2Measure() {
	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
    342a:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
    342e:	81 11       	cpse	r24, r1
    3430:	05 c0       	rjmp	.+10     	; 0x343c <co2Measure+0x12>
	{
		mh_z19_injectCallBack(enqueueCO2Measure);
    3432:	88 ed       	ldi	r24, 0xD8	; 216
    3434:	99 e1       	ldi	r25, 0x19	; 25
    3436:	0c 94 e5 23 	jmp	0x47ca	; 0x47ca <mh_z19_injectCallBack>
    343a:	08 95       	ret
	}
	else
	{
		puts("Det gik galt");
    343c:	86 ec       	ldi	r24, 0xC6	; 198
    343e:	92 e0       	ldi	r25, 0x02	; 2
    3440:	0c 94 07 2f 	jmp	0x5e0e	; 0x5e0e <puts>
    3444:	08 95       	ret

00003446 <dequeueCO2Measure>:
	}
}


uint16_t dequeueCO2Measure(){
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	1f 92       	push	r1
    344c:	1f 92       	push	r1
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	
	xQueueReceive(xQueueCO2, &ppm, 1500);
    3452:	2c ed       	ldi	r18, 0xDC	; 220
    3454:	35 e0       	ldi	r19, 0x05	; 5
    3456:	40 e0       	ldi	r20, 0x00	; 0
    3458:	50 e0       	ldi	r21, 0x00	; 0
    345a:	be 01       	movw	r22, r28
    345c:	6f 5f       	subi	r22, 0xFF	; 255
    345e:	7f 4f       	sbci	r23, 0xFF	; 255
    3460:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <xQueueCO2>
    3464:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <xQueueCO2+0x1>
    3468:	0e 94 ac 06 	call	0xd58	; 0xd58 <xQueueReceive>
	
	sprintf(printstring, "Removing CO2: %d from the queue \n", ppm);
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	8f 93       	push	r24
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	8f 93       	push	r24
    3474:	83 ed       	ldi	r24, 0xD3	; 211
    3476:	92 e0       	ldi	r25, 0x02	; 2
    3478:	9f 93       	push	r25
    347a:	8f 93       	push	r24
    347c:	81 ed       	ldi	r24, 0xD1	; 209
    347e:	98 e1       	ldi	r25, 0x18	; 24
    3480:	9f 93       	push	r25
    3482:	8f 93       	push	r24
    3484:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
	test_outprint(printstring);
    3488:	81 ed       	ldi	r24, 0xD1	; 209
    348a:	98 e1       	ldi	r25, 0x18	; 24
    348c:	f0 d2       	rcall	.+1504   	; 0x3a6e <test_outprint>

	return ppm;
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	0f 90       	pop	r0
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	9a 81       	ldd	r25, Y+2	; 0x02
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	08 95       	ret

000034a8 <initializeTempHumQueues>:
QueueHandle_t xQueueHum;


void initializeTempHumQueues()
{
	xQueueTemp = xQueueCreate(10, sizeof(int16_t));
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	62 e0       	ldi	r22, 0x02	; 2
    34ac:	8a e0       	ldi	r24, 0x0A	; 10
    34ae:	0e 94 bc 05 	call	0xb78	; 0xb78 <xQueueGenericCreate>
    34b2:	90 93 48 19 	sts	0x1948, r25	; 0x801948 <xQueueTemp+0x1>
    34b6:	80 93 47 19 	sts	0x1947, r24	; 0x801947 <xQueueTemp>
	xQueueHum = xQueueCreate(10, sizeof(uint16_t));
    34ba:	40 e0       	ldi	r20, 0x00	; 0
    34bc:	62 e0       	ldi	r22, 0x02	; 2
    34be:	8a e0       	ldi	r24, 0x0A	; 10
    34c0:	0e 94 bc 05 	call	0xb78	; 0xb78 <xQueueGenericCreate>
    34c4:	90 93 46 19 	sts	0x1946, r25	; 0x801946 <xQueueHum+0x1>
    34c8:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <xQueueHum>
    34cc:	08 95       	ret

000034ce <enqueueTemperature>:
}

void enqueueTemperature(int16_t temp){
    34ce:	0f 93       	push	r16
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	1f 92       	push	r1
    34d6:	1f 92       	push	r1
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	9a 83       	std	Y+2, r25	; 0x02
    34de:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting temperature: %d in the queue \n", temp);
    34e0:	8a 81       	ldd	r24, Y+2	; 0x02
    34e2:	8f 93       	push	r24
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	8f 93       	push	r24
    34e8:	85 ef       	ldi	r24, 0xF5	; 245
    34ea:	92 e0       	ldi	r25, 0x02	; 2
    34ec:	9f 93       	push	r25
    34ee:	8f 93       	push	r24
    34f0:	81 ed       	ldi	r24, 0xD1	; 209
    34f2:	98 e1       	ldi	r25, 0x18	; 24
    34f4:	9f 93       	push	r25
    34f6:	8f 93       	push	r24
    34f8:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
	test_outprint(printstring);
    34fc:	81 ed       	ldi	r24, 0xD1	; 209
    34fe:	98 e1       	ldi	r25, 0x18	; 24
    3500:	b6 d2       	rcall	.+1388   	; 0x3a6e <test_outprint>
	
	xQueueSend(xQueueTemp, (void*)&temp, portMAX_DELAY);
    3502:	00 e0       	ldi	r16, 0x00	; 0
    3504:	2f ef       	ldi	r18, 0xFF	; 255
    3506:	3f ef       	ldi	r19, 0xFF	; 255
    3508:	a9 01       	movw	r20, r18
    350a:	be 01       	movw	r22, r28
    350c:	6f 5f       	subi	r22, 0xFF	; 255
    350e:	7f 4f       	sbci	r23, 0xFF	; 255
    3510:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <xQueueTemp>
    3514:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <xQueueTemp+0x1>
    3518:	0e 94 df 05 	call	0xbbe	; 0xbbe <xQueueGenericSend>
}
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	0f 91       	pop	r16
    3532:	08 95       	ret

00003534 <enqueueHumidity>:

void enqueueHumidity(uint16_t hum){
    3534:	0f 93       	push	r16
    3536:	cf 93       	push	r28
    3538:	df 93       	push	r29
    353a:	1f 92       	push	r1
    353c:	1f 92       	push	r1
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	9a 83       	std	Y+2, r25	; 0x02
    3544:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting humidity: %d in the queue \n", hum);
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	8f 93       	push	r24
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	8f 93       	push	r24
    354e:	8c e1       	ldi	r24, 0x1C	; 28
    3550:	93 e0       	ldi	r25, 0x03	; 3
    3552:	9f 93       	push	r25
    3554:	8f 93       	push	r24
    3556:	81 ed       	ldi	r24, 0xD1	; 209
    3558:	98 e1       	ldi	r25, 0x18	; 24
    355a:	9f 93       	push	r25
    355c:	8f 93       	push	r24
    355e:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
	test_outprint(printstring);
    3562:	81 ed       	ldi	r24, 0xD1	; 209
    3564:	98 e1       	ldi	r25, 0x18	; 24
    3566:	83 d2       	rcall	.+1286   	; 0x3a6e <test_outprint>
	
	xQueueSend(xQueueHum, (void*)&hum, portMAX_DELAY);	
    3568:	00 e0       	ldi	r16, 0x00	; 0
    356a:	2f ef       	ldi	r18, 0xFF	; 255
    356c:	3f ef       	ldi	r19, 0xFF	; 255
    356e:	a9 01       	movw	r20, r18
    3570:	be 01       	movw	r22, r28
    3572:	6f 5f       	subi	r22, 0xFF	; 255
    3574:	7f 4f       	sbci	r23, 0xFF	; 255
    3576:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <xQueueHum>
    357a:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <xQueueHum+0x1>
    357e:	0e 94 df 05 	call	0xbbe	; 0xbbe <xQueueGenericSend>
}
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	0f 90       	pop	r0
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	0f 91       	pop	r16
    3598:	08 95       	ret

0000359a <tempHumMeasure>:


void tempHumMeasure()
{
    359a:	ef 92       	push	r14
    359c:	ff 92       	push	r15
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	00 d0       	rcall	.+0      	; 0x35a8 <tempHumMeasure+0xe>
    35a8:	1f 92       	push	r1
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5/portTICK_PERIOD_MS; 
	const TickType_t xFrequency2 = 50/portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    35ae:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <xTaskGetTickCount>
    35b2:	69 83       	std	Y+1, r22	; 0x01
    35b4:	7a 83       	std	Y+2, r23	; 0x02
    35b6:	8b 83       	std	Y+3, r24	; 0x03
    35b8:	9c 83       	std	Y+4, r25	; 0x04

	if(HIH8120_OK != hih8120_wakeup())
    35ba:	c6 d3       	rcall	.+1932   	; 0x3d48 <hih8120_wakeup>
    35bc:	88 23       	and	r24, r24
    35be:	21 f0       	breq	.+8      	; 0x35c8 <tempHumMeasure+0x2e>
	{
		puts("Wakeup gik galt");
    35c0:	80 e4       	ldi	r24, 0x40	; 64
    35c2:	93 e0       	ldi	r25, 0x03	; 3
    35c4:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency2 );
    35c8:	43 e0       	ldi	r20, 0x03	; 3
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	ce 01       	movw	r24, r28
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskDelayUntil>
	if(HIH8120_OK != hih8120_measure())
    35d8:	cc d3       	rcall	.+1944   	; 0x3d72 <hih8120_measure>
    35da:	88 23       	and	r24, r24
    35dc:	21 f0       	breq	.+8      	; 0x35e6 <tempHumMeasure+0x4c>
	{
		puts("Measure gik galt");
    35de:	80 e5       	ldi	r24, 0x50	; 80
    35e0:	93 e0       	ldi	r25, 0x03	; 3
    35e2:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    35e6:	40 e0       	ldi	r20, 0x00	; 0
    35e8:	50 e0       	ldi	r21, 0x00	; 0
    35ea:	ba 01       	movw	r22, r20
    35ec:	ce 01       	movw	r24, r28
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskDelayUntil>
	
	uint16_t humidity = hih8120_getHumidity();
    35f4:	cf d3       	rcall	.+1950   	; 0x3d94 <hih8120_getHumidity>
    35f6:	0e d3       	rcall	.+1564   	; 0x3c14 <__fixunssfsi>
	int16_t temp = hih8120_getTemperature();
    35f8:	8b 01       	movw	r16, r22
    35fa:	e1 d3       	rcall	.+1986   	; 0x3dbe <hih8120_getTemperature>
    35fc:	06 d3       	rcall	.+1548   	; 0x3c0a <__fixsfsi>
    35fe:	7b 01       	movw	r14, r22
    3600:	00 36       	cpi	r16, 0x60	; 96
	
	if (humidity > 95 && temp > 100) {
    3602:	11 05       	cpc	r17, r1
    3604:	88 f0       	brcs	.+34     	; 0x3628 <tempHumMeasure+0x8e>
    3606:	85 e6       	ldi	r24, 0x65	; 101
    3608:	e8 16       	cp	r14, r24
    360a:	f1 04       	cpc	r15, r1
    360c:	6c f0       	brlt	.+26     	; 0x3628 <tempHumMeasure+0x8e>
    360e:	40 e0       	ldi	r20, 0x00	; 0
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3610:	50 e0       	ldi	r21, 0x00	; 0
    3612:	ba 01       	movw	r22, r20
    3614:	ce 01       	movw	r24, r28
    3616:	01 96       	adiw	r24, 0x01	; 1
			
		humidity = hih8120_getHumidity();
    3618:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskDelayUntil>
    361c:	bb d3       	rcall	.+1910   	; 0x3d94 <hih8120_getHumidity>
		temp = hih8120_getTemperature();
    361e:	fa d2       	rcall	.+1524   	; 0x3c14 <__fixunssfsi>
    3620:	8b 01       	movw	r16, r22
    3622:	cd d3       	rcall	.+1946   	; 0x3dbe <hih8120_getTemperature>
    3624:	f2 d2       	rcall	.+1508   	; 0x3c0a <__fixsfsi>
    3626:	7b 01       	movw	r14, r22
	}
	
	enqueueHumidity(humidity);
    3628:	c8 01       	movw	r24, r16
    362a:	84 df       	rcall	.-248    	; 0x3534 <enqueueHumidity>
    362c:	c7 01       	movw	r24, r14
	enqueueTemperature(temp);
    362e:	4f df       	rcall	.-354    	; 0x34ce <enqueueTemperature>
    3630:	0f 90       	pop	r0
    3632:	0f 90       	pop	r0
}
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	ff 90       	pop	r15
    3642:	ef 90       	pop	r14
    3644:	08 95       	ret

00003646 <dequeueTempMeasure>:
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29


int16_t dequeueTempMeasure(){
    364a:	1f 92       	push	r1
    364c:	1f 92       	push	r1
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	
	xQueueReceive(xQueueTemp, &temp, 1500);
    3652:	2c ed       	ldi	r18, 0xDC	; 220
    3654:	35 e0       	ldi	r19, 0x05	; 5
    3656:	40 e0       	ldi	r20, 0x00	; 0
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	be 01       	movw	r22, r28
    365c:	6f 5f       	subi	r22, 0xFF	; 255
    365e:	7f 4f       	sbci	r23, 0xFF	; 255
    3660:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <xQueueTemp>
    3664:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <xQueueTemp+0x1>
    3668:	0e 94 ac 06 	call	0xd58	; 0xd58 <xQueueReceive>
	
	sprintf(printstring, "Removing temperature: %d from the queue \n", temp);
    366c:	8a 81       	ldd	r24, Y+2	; 0x02
    366e:	8f 93       	push	r24
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	8f 93       	push	r24
    3674:	81 e6       	ldi	r24, 0x61	; 97
    3676:	93 e0       	ldi	r25, 0x03	; 3
    3678:	9f 93       	push	r25
    367a:	8f 93       	push	r24
    367c:	81 ed       	ldi	r24, 0xD1	; 209
    367e:	98 e1       	ldi	r25, 0x18	; 24
    3680:	9f 93       	push	r25
    3682:	8f 93       	push	r24
    3684:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
	test_outprint(printstring);
    3688:	81 ed       	ldi	r24, 0xD1	; 209
    368a:	98 e1       	ldi	r25, 0x18	; 24
    368c:	f0 d1       	rcall	.+992    	; 0x3a6e <test_outprint>
	
	return temp;
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
}
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	9a 81       	ldd	r25, Y+2	; 0x02
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	08 95       	ret

000036a8 <dequeueHumidityMeasure>:

uint16_t dequeueHumidityMeasure(){
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
    36ac:	1f 92       	push	r1
    36ae:	1f 92       	push	r1
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
	uint16_t hum;
	
	xQueueReceive(xQueueHum, &hum, 1500);
    36b4:	2c ed       	ldi	r18, 0xDC	; 220
    36b6:	35 e0       	ldi	r19, 0x05	; 5
    36b8:	40 e0       	ldi	r20, 0x00	; 0
    36ba:	50 e0       	ldi	r21, 0x00	; 0
    36bc:	be 01       	movw	r22, r28
    36be:	6f 5f       	subi	r22, 0xFF	; 255
    36c0:	7f 4f       	sbci	r23, 0xFF	; 255
    36c2:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <xQueueHum>
    36c6:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <xQueueHum+0x1>
    36ca:	0e 94 ac 06 	call	0xd58	; 0xd58 <xQueueReceive>
	
	sprintf(printstring, "Removing humidity: %d from the queue \n", hum);
    36ce:	8a 81       	ldd	r24, Y+2	; 0x02
    36d0:	8f 93       	push	r24
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	8f 93       	push	r24
    36d6:	8b e8       	ldi	r24, 0x8B	; 139
    36d8:	93 e0       	ldi	r25, 0x03	; 3
    36da:	9f 93       	push	r25
    36dc:	8f 93       	push	r24
    36de:	81 ed       	ldi	r24, 0xD1	; 209
    36e0:	98 e1       	ldi	r25, 0x18	; 24
    36e2:	9f 93       	push	r25
    36e4:	8f 93       	push	r24
    36e6:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
	test_outprint(printstring);
    36ea:	81 ed       	ldi	r24, 0xD1	; 209
    36ec:	98 e1       	ldi	r25, 0x18	; 24
    36ee:	bf d1       	rcall	.+894    	; 0x3a6e <test_outprint>
		
	return hum;
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	df 91       	pop	r29
    3706:	cf 91       	pop	r28
    3708:	08 95       	ret

0000370a <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	cf 93       	push	r28
    3710:	df 93       	push	r29
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	64 97       	sbiw	r28, 0x14	; 20
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61

	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	0e 94 26 29 	call	0x524c	; 0x524c <status_leds_slowBlink>

	// Factory reset the transceiver
	//sprintf(printstring, "FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
	//test_outprint(printstring);
	
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3728:	d2 d4       	rcall	.+2468   	; 0x40ce <lora_driver_rn2483FactoryReset>
    372a:	4e d7       	rcall	.+3740   	; 0x45c8 <lora_driver_mapReturnCodeToText>
    372c:	9f 93       	push	r25
    372e:	8f 93       	push	r24
    3730:	82 eb       	ldi	r24, 0xB2	; 178
    3732:	93 e0       	ldi	r25, 0x03	; 3
    3734:	9f 93       	push	r25
    3736:	8f 93       	push	r24
    3738:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	//sprintf(printstring, "Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
	//test_outprint(printstring);
	
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    373c:	46 d6       	rcall	.+3212   	; 0x43ca <lora_driver_configureToEu868>
    373e:	44 d7       	rcall	.+3720   	; 0x45c8 <lora_driver_mapReturnCodeToText>
    3740:	9f 93       	push	r25
    3742:	8f 93       	push	r24
    3744:	85 ec       	ldi	r24, 0xC5	; 197
    3746:	93 e0       	ldi	r25, 0x03	; 3
    3748:	9f 93       	push	r25
    374a:	8f 93       	push	r24
    374c:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    3750:	8e 01       	movw	r16, r28
    3752:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI	
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3754:	1f 4f       	sbci	r17, 0xFF	; 255
    3756:	c8 01       	movw	r24, r16
    3758:	cc d4       	rcall	.+2456   	; 0x40f2 <lora_driver_getRn2483Hweui>
    375a:	36 d7       	rcall	.+3692   	; 0x45c8 <lora_driver_mapReturnCodeToText>
	
	//sprintf(printstring, "Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
	//test_outprint(printstring);

	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    375c:	1f 93       	push	r17
    375e:	0f 93       	push	r16
    3760:	9f 93       	push	r25
    3762:	8f 93       	push	r24
    3764:	8e ed       	ldi	r24, 0xDE	; 222
    3766:	93 e0       	ldi	r25, 0x03	; 3
    3768:	9f 93       	push	r25
    376a:	8f 93       	push	r24
    376c:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	//sprintf(printstring, "Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
	//test_outprint(printstring);
	
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3770:	c8 01       	movw	r24, r16
    3772:	db d4       	rcall	.+2486   	; 0x412a <lora_driver_setDeviceIdentifier>
    3774:	29 d7       	rcall	.+3666   	; 0x45c8 <lora_driver_mapReturnCodeToText>
    3776:	9f 93       	push	r25
    3778:	8f 93       	push	r24
    377a:	1f 93       	push	r17
    377c:	0f 93       	push	r16
    377e:	82 ef       	ldi	r24, 0xF2	; 242
    3780:	93 e0       	ldi	r25, 0x03	; 3
    3782:	9f 93       	push	r25
    3784:	8f 93       	push	r24
    3786:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	//sprintf(printstring, "Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
	//test_outprint(printstring);
	
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    378a:	a8 01       	movw	r20, r16
    378c:	67 e0       	ldi	r22, 0x07	; 7
    378e:	74 e0       	ldi	r23, 0x04	; 4
    3790:	88 e2       	ldi	r24, 0x28	; 40
    3792:	94 e0       	ldi	r25, 0x04	; 4
    3794:	f8 d6       	rcall	.+3568   	; 0x4586 <lora_driver_setOtaaIdentity>
    3796:	18 d7       	rcall	.+3632   	; 0x45c8 <lora_driver_mapReturnCodeToText>
    3798:	9f 93       	push	r25
    379a:	8f 93       	push	r24
    379c:	1f 93       	push	r17
    379e:	0f 93       	push	r16
    37a0:	87 e0       	ldi	r24, 0x07	; 7
    37a2:	94 e0       	ldi	r25, 0x04	; 4
    37a4:	9f 93       	push	r25
    37a6:	8f 93       	push	r24
    37a8:	88 e2       	ldi	r24, 0x28	; 40
    37aa:	94 e0       	ldi	r25, 0x04	; 4
    37ac:	9f 93       	push	r25
    37ae:	8f 93       	push	r24
    37b0:	89 e3       	ldi	r24, 0x39	; 57
    37b2:	94 e0       	ldi	r25, 0x04	; 4
    37b4:	9f 93       	push	r25
    37b6:	8f 93       	push	r24
    37b8:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>

	// Save all the MAC settings in the transceiver
	//sprintf(printstring, "Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
	//test_outprint(printstring);
	
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    37bc:	e9 d4       	rcall	.+2514   	; 0x4190 <lora_driver_saveMac>
    37be:	04 d7       	rcall	.+3592   	; 0x45c8 <lora_driver_mapReturnCodeToText>
    37c0:	9f 93       	push	r25
    37c2:	8f 93       	push	r24
    37c4:	8f e6       	ldi	r24, 0x6F	; 111
    37c6:	94 e0       	ldi	r25, 0x04	; 4
    37c8:	9f 93       	push	r25
    37ca:	8f 93       	push	r24
    37cc:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>

	// Enable Adaptive Data Rate
	//sprintf(printstring, "Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
	//test_outprint(printstring);
	
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	d3 d5       	rcall	.+2982   	; 0x4384 <lora_driver_setAdaptiveDataRate>
    37de:	f4 d6       	rcall	.+3560   	; 0x45c8 <lora_driver_mapReturnCodeToText>
    37e0:	9f 93       	push	r25
    37e2:	8f 93       	push	r24
    37e4:	8e e7       	ldi	r24, 0x7E	; 126
    37e6:	94 e0       	ldi	r25, 0x04	; 4
    37e8:	9f 93       	push	r25
    37ea:	8f 93       	push	r24
    37ec:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	//sprintf(printstring, "Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
	//test_outprint(printstring);
	
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    37f0:	84 ef       	ldi	r24, 0xF4	; 244
    37f2:	91 e0       	ldi	r25, 0x01	; 1
    37f4:	d2 d5       	rcall	.+2980   	; 0x439a <lora_driver_setReceiveDelay>
    37f6:	e8 d6       	rcall	.+3536   	; 0x45c8 <lora_driver_mapReturnCodeToText>
    37f8:	9f 93       	push	r25
    37fa:	8f 93       	push	r24
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	8f 93       	push	r24
    3800:	84 ef       	ldi	r24, 0xF4	; 244
    3802:	8f 93       	push	r24
    3804:	8f e9       	ldi	r24, 0x9F	; 159
    3806:	94 e0       	ldi	r25, 0x04	; 4
    3808:	9f 93       	push	r25
    380a:	8f 93       	push	r24
    380c:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    381a:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	be d4       	rcall	.+2428   	; 0x419c <lora_driver_join>
    3820:	08 2f       	mov	r16, r24
    3822:	d2 d6       	rcall	.+3492   	; 0x45c8 <lora_driver_mapReturnCodeToText>
		
		//sprintf(printstring, "Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
		//test_outprint(printstring);
		
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3824:	9f 93       	push	r25
    3826:	8f 93       	push	r24
    3828:	1f 92       	push	r1
    382a:	1f 93       	push	r17
    382c:	8f eb       	ldi	r24, 0xBF	; 191
    382e:	94 e0       	ldi	r25, 0x04	; 4
    3830:	9f 93       	push	r25
    3832:	8f 93       	push	r24
    3834:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	08 30       	cpi	r16, 0x08	; 8
    3846:	59 f0       	breq	.+22     	; 0x385e <_lora_setup+0x154>
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	0e 94 8a 29 	call	0x5314	; 0x5314 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    384e:	66 e3       	ldi	r22, 0x36	; 54
    3850:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	0e 94 53 10 	call	0x20a6	; 0x20a6 <vTaskDelay>
    385a:	11 50       	subi	r17, 0x01	; 1
    385c:	f9 f6       	brne	.-66     	; 0x381c <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    385e:	08 30       	cpi	r16, 0x08	; 8
    3860:	41 f4       	brne	.+16     	; 0x3872 <_lora_setup+0x168>

	if (rc == LORA_ACCEPTED)
    3862:	8f ed       	ldi	r24, 0xDF	; 223
    3864:	94 e0       	ldi	r25, 0x04	; 4
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		printf("\t We have been accepted \n");
    3866:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <status_leds_ledOn>
		status_leds_ledOn(led_ST2); // OPTIONAL
    3870:	09 c0       	rjmp	.+18     	; 0x3884 <_lora_setup+0x17a>
    3872:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3874:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	0e 94 49 29 	call	0x5292	; 0x5292 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    387e:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3882:	fd cf       	rjmp	.-6      	; 0x387e <_lora_setup+0x174>
    3884:	64 96       	adiw	r28, 0x14	; 20
    3886:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	df 91       	pop	r29
    3892:	cf 91       	pop	r28
    3894:	1f 91       	pop	r17
    3896:	0f 91       	pop	r16
    3898:	08 95       	ret

0000389a <lora_handler_task>:
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    389e:	00 d0       	rcall	.+0      	; 0x38a0 <lora_handler_task+0x6>
    38a0:	1f 92       	push	r1
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	04 d4       	rcall	.+2056   	; 0x40b2 <lora_driver_resetRn2483>
	vTaskDelay(2);
    38aa:	62 e0       	ldi	r22, 0x02	; 2
    38ac:	70 e0       	ldi	r23, 0x00	; 0
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <vTaskDelay>
	lora_driver_resetRn2483(0);
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	fc d3       	rcall	.+2040   	; 0x40b2 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    38ba:	66 e9       	ldi	r22, 0x96	; 150
    38bc:	70 e0       	ldi	r23, 0x00	; 0
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    38c6:	ae d3       	rcall	.+1884   	; 0x4024 <lora_driver_flushBuffers>

	_lora_setup();
    38c8:	20 df       	rcall	.-448    	; 0x370a <_lora_setup>
    38ca:	ed e5       	ldi	r30, 0x5D	; 93

	// DEFINING SIZE OF PAYLOAD
	_uplink_payload.len = 8;
    38cc:	f7 e1       	ldi	r31, 0x17	; 23
    38ce:	88 e0       	ldi	r24, 0x08	; 8
    38d0:	81 83       	std	Z+1, r24	; 0x01
    38d2:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    38d4:	80 83       	st	Z, r24
    38d6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // UNDER TESTING 30000 (30 sec) Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    38da:	69 83       	std	Y+1, r22	; 0x01
    38dc:	7a 83       	std	Y+2, r23	; 0x02
    38de:	8b 83       	std	Y+3, r24	; 0x03
    38e0:	9c 83       	std	Y+4, r25	; 0x04
    38e2:	88 ef       	ldi	r24, 0xF8	; 248

	for(;;)
	{
		uint16_t growbroId = 1;
			
		puts("\t going into delay");
    38e4:	94 e0       	ldi	r25, 0x04	; 4
    38e6:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
    38ea:	48 ea       	ldi	r20, 0xA8	; 168
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    38ec:	58 e4       	ldi	r21, 0x48	; 72
    38ee:	60 e0       	ldi	r22, 0x00	; 0
    38f0:	70 e0       	ldi	r23, 0x00	; 0
    38f2:	ce 01       	movw	r24, r28
    38f4:	01 96       	adiw	r24, 0x01	; 1
    38f6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskDelayUntil>
    38fa:	0e 94 8d 01 	call	0x31a	; 0x31a <dequeueSharedData>
		
		// Creating struct and dequeueing data
		SharedData_t sharedData;
		sharedData = dequeueSharedData();
    38fe:	8c 01       	movw	r16, r24
    3900:	dc 01       	movw	r26, r24
		
		sprintf(printstring, "DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
    3902:	13 96       	adiw	r26, 0x03	; 3
    3904:	8c 91       	ld	r24, X
    3906:	13 97       	sbiw	r26, 0x03	; 3
    3908:	8f 93       	push	r24
    390a:	12 96       	adiw	r26, 0x02	; 2
    390c:	8c 91       	ld	r24, X
    390e:	12 97       	sbiw	r26, 0x02	; 2
    3910:	8f 93       	push	r24
    3912:	11 96       	adiw	r26, 0x01	; 1
    3914:	8c 91       	ld	r24, X
    3916:	11 97       	sbiw	r26, 0x01	; 1
    3918:	8f 93       	push	r24
    391a:	8c 91       	ld	r24, X
    391c:	8f 93       	push	r24
    391e:	15 96       	adiw	r26, 0x05	; 5
    3920:	8c 91       	ld	r24, X
    3922:	15 97       	sbiw	r26, 0x05	; 5
    3924:	8f 93       	push	r24
    3926:	14 96       	adiw	r26, 0x04	; 4
    3928:	8c 91       	ld	r24, X
    392a:	8f 93       	push	r24
    392c:	8b e0       	ldi	r24, 0x0B	; 11
    392e:	95 e0       	ldi	r25, 0x05	; 5
    3930:	9f 93       	push	r25
    3932:	8f 93       	push	r24
    3934:	0f 2e       	mov	r0, r31
    3936:	f1 ed       	ldi	r31, 0xD1	; 209
    3938:	ef 2e       	mov	r14, r31
    393a:	f8 e1       	ldi	r31, 0x18	; 24
    393c:	ff 2e       	mov	r15, r31
    393e:	f0 2d       	mov	r31, r0
    3940:	ff 92       	push	r15
    3942:	ef 92       	push	r14
    3944:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
		test_outprint(printstring);
    3948:	c7 01       	movw	r24, r14
    394a:	91 d0       	rcall	.+290    	; 0x3a6e <test_outprint>
    394c:	ed e5       	ldi	r30, 0x5D	; 93
		
		//printf("DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
		
		// CREATING OUR OWN PAYLOAD
		_uplink_payload.bytes[0] = growbroId >> 8;
    394e:	f7 e1       	ldi	r31, 0x17	; 23
    3950:	12 82       	std	Z+2, r1	; 0x02
    3952:	81 e0       	ldi	r24, 0x01	; 1
		_uplink_payload.bytes[1] = growbroId & 0xFF;
    3954:	83 83       	std	Z+3, r24	; 0x03
    3956:	d8 01       	movw	r26, r16
		_uplink_payload.bytes[2] = sharedData->co2 >> 8;
    3958:	11 96       	adiw	r26, 0x01	; 1
    395a:	8c 91       	ld	r24, X
    395c:	11 97       	sbiw	r26, 0x01	; 1
    395e:	84 83       	std	Z+4, r24	; 0x04
    3960:	8c 91       	ld	r24, X
		_uplink_payload.bytes[3] = sharedData->co2 & 0xFF;
    3962:	85 83       	std	Z+5, r24	; 0x05
    3964:	15 96       	adiw	r26, 0x05	; 5
		_uplink_payload.bytes[4] = sharedData->humidity >> 8;
    3966:	8c 91       	ld	r24, X
    3968:	15 97       	sbiw	r26, 0x05	; 5
    396a:	86 83       	std	Z+6, r24	; 0x06
    396c:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[5] = sharedData->humidity & 0xFF;
    396e:	8c 91       	ld	r24, X
    3970:	14 97       	sbiw	r26, 0x04	; 4
    3972:	87 83       	std	Z+7, r24	; 0x07
    3974:	13 96       	adiw	r26, 0x03	; 3
		_uplink_payload.bytes[6] = sharedData->temperature >> 8;
    3976:	8c 91       	ld	r24, X
    3978:	13 97       	sbiw	r26, 0x03	; 3
    397a:	80 87       	std	Z+8, r24	; 0x08
    397c:	12 96       	adiw	r26, 0x02	; 2
		_uplink_payload.bytes[7] = sharedData->temperature & 0xFF;
    397e:	8c 91       	ld	r24, X
    3980:	81 87       	std	Z+9, r24	; 0x09
    3982:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3984:	0e 94 9c 29 	call	0x5338	; 0x5338 <status_leds_shortPuls>
		
		// SENDING PAYLOAD
		//printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
		
		sprintf(printstring, "Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3988:	6d e5       	ldi	r22, 0x5D	; 93
    398a:	77 e1       	ldi	r23, 0x17	; 23
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	2f d4       	rcall	.+2142   	; 0x41ee <lora_driver_sendUploadMessage>
    3990:	1b d6       	rcall	.+3126   	; 0x45c8 <lora_driver_mapReturnCodeToText>
    3992:	9f 93       	push	r25
    3994:	8f 93       	push	r24
    3996:	86 e3       	ldi	r24, 0x36	; 54
    3998:	95 e0       	ldi	r25, 0x05	; 5
    399a:	9f 93       	push	r25
    399c:	8f 93       	push	r24
    399e:	ff 92       	push	r15
    39a0:	ef 92       	push	r14
    39a2:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    39a6:	c7 01       	movw	r24, r14
		test_outprint(printstring);
    39a8:	62 d0       	rcall	.+196    	; 0x3a6e <test_outprint>
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	f8 94       	cli
    39ae:	de bf       	out	0x3e, r29	; 62
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	cd bf       	out	0x3d, r28	; 61
    39b4:	96 cf       	rjmp	.-212    	; 0x38e2 <lora_handler_task+0x48>

000039b6 <task_download>:
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
	}

}

void task_download( void *pvParameters )
{
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	66 97       	sbiw	r28, 0x16	; 22
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	72 d3       	rcall	.+1764   	; 0x40b2 <lora_driver_resetRn2483>
	vTaskDelay(2);
    39ce:	62 e0       	ldi	r22, 0x02	; 2
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <vTaskDelay>
	lora_driver_resetRn2483(0);
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	6a d3       	rcall	.+1748   	; 0x40b2 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    39de:	66 e9       	ldi	r22, 0x96	; 150
    39e0:	70 e0       	ldi	r23, 0x00	; 0
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    39ea:	1c d3       	rcall	.+1592   	; 0x4024 <lora_driver_flushBuffers>
	uint16_t recieve;
	for(;;)
	{	
		lora_driver_payload_t downlinkPayload;
		
		xMessageBufferReceive(downlinkMessageBufferHandle, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    39ec:	0f ef       	ldi	r16, 0xFF	; 255
    39ee:	1f ef       	ldi	r17, 0xFF	; 255
    39f0:	98 01       	movw	r18, r16
    39f2:	46 e1       	ldi	r20, 0x16	; 22
    39f4:	50 e0       	ldi	r21, 0x00	; 0
    39f6:	be 01       	movw	r22, r28
    39f8:	6f 5f       	subi	r22, 0xFF	; 255
    39fa:	7f 4f       	sbci	r23, 0xFF	; 255
    39fc:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <downlinkMessageBufferHandle>
    3a00:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <downlinkMessageBufferHandle+0x1>
    3a04:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xStreamBufferReceive>
		printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len); // Just for Debug
    3a08:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	1f 92       	push	r1
    3a0e:	9f 93       	push	r25
    3a10:	1f 92       	push	r1
    3a12:	8f 93       	push	r24
    3a14:	8b e4       	ldi	r24, 0x4B	; 75
    3a16:	95 e0       	ldi	r25, 0x05	; 5
    3a18:	9f 93       	push	r25
    3a1a:	8f 93       	push	r24
    3a1c:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
    3a20:	0f 90       	pop	r0
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
    3a2c:	df cf       	rjmp	.-66     	; 0x39ec <task_download+0x36>

00003a2e <lora_handler_initialise>:
void task_download( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3a2e:	ef 92       	push	r14
    3a30:	ff 92       	push	r15
    3a32:	0f 93       	push	r16
    3a34:	cf 93       	push	r28
	xTaskCreate(
    3a36:	e1 2c       	mov	r14, r1
    3a38:	f1 2c       	mov	r15, r1
    3a3a:	08 2f       	mov	r16, r24
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	48 e8       	ldi	r20, 0x88	; 136
    3a42:	51 e0       	ldi	r21, 0x01	; 1
    3a44:	6c e7       	ldi	r22, 0x7C	; 124
    3a46:	75 e0       	ldi	r23, 0x05	; 5
    3a48:	8d e4       	ldi	r24, 0x4D	; 77
    3a4a:	9c e1       	ldi	r25, 0x1C	; 28
    3a4c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
		xTaskCreate(
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	48 e8       	ldi	r20, 0x88	; 136
    3a56:	51 e0       	ldi	r21, 0x01	; 1
    3a58:	63 e8       	ldi	r22, 0x83	; 131
    3a5a:	75 e0       	ldi	r23, 0x05	; 5
    3a5c:	8b ed       	ldi	r24, 0xDB	; 219
    3a5e:	9c e1       	ldi	r25, 0x1C	; 28
    3a60:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xTaskCreate>
	,  "LRHanddown"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3a64:	cf 91       	pop	r28
    3a66:	0f 91       	pop	r16
    3a68:	ff 90       	pop	r15
    3a6a:	ef 90       	pop	r14
    3a6c:	08 95       	ret

00003a6e <test_outprint>:
 */ 

#include "../semaphore/header/testOutprint.h"


void test_outprint(char* outprint) {
    3a6e:	0f 93       	push	r16
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	c8 2f       	mov	r28, r24
    3a76:	d9 2f       	mov	r29, r25
	if( xSemaphoreTake( xSemaphore, ( TickType_t ) 100 ) == pdTRUE )
    3a78:	44 e6       	ldi	r20, 0x64	; 100
    3a7a:	50 e0       	ldi	r21, 0x00	; 0
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	80 91 cf 18 	lds	r24, 0x18CF	; 0x8018cf <xSemaphore>
    3a84:	90 91 d0 18 	lds	r25, 0x18D0	; 0x8018d0 <xSemaphore+0x1>
    3a88:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    3a8c:	81 30       	cpi	r24, 0x01	; 1
    3a8e:	99 f4       	brne	.+38     	; 0x3ab6 <test_outprint+0x48>
	{
		printf(outprint);
    3a90:	df 93       	push	r29
    3a92:	cf 93       	push	r28
    3a94:	0e 94 f4 2e 	call	0x5de8	; 0x5de8 <printf>
		//TickType_t xDelay = 100 / portTICK_PERIOD_MS;
		//vTaskDelay(xDelay);
		
		xSemaphoreGive( xSemaphore );
    3a98:	00 e0       	ldi	r16, 0x00	; 0
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	a9 01       	movw	r20, r18
    3aa0:	60 e0       	ldi	r22, 0x00	; 0
    3aa2:	70 e0       	ldi	r23, 0x00	; 0
    3aa4:	80 91 cf 18 	lds	r24, 0x18CF	; 0x8018cf <xSemaphore>
    3aa8:	90 91 d0 18 	lds	r25, 0x18D0	; 0x8018d0 <xSemaphore+0x1>
    3aac:	0e 94 df 05 	call	0xbbe	; 0xbbe <xQueueGenericSend>
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	04 c0       	rjmp	.+8      	; 0x3abe <test_outprint+0x50>
	}
	else
	{ 
		puts("The semaphore was already taken");
    3ab6:	8e e8       	ldi	r24, 0x8E	; 142
    3ab8:	95 e0       	ldi	r25, 0x05	; 5
    3aba:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
	}
	

	
}
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	0f 91       	pop	r16
    3ac4:	08 95       	ret

00003ac6 <initializeSemaphore>:

void initializeSemaphore(){
    3ac6:	0f 93       	push	r16
	xSemaphore = xSemaphoreCreateBinary();
    3ac8:	43 e0       	ldi	r20, 0x03	; 3
    3aca:	60 e0       	ldi	r22, 0x00	; 0
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	0e 94 bc 05 	call	0xb78	; 0xb78 <xQueueGenericCreate>
    3ad2:	90 93 d0 18 	sts	0x18D0, r25	; 0x8018d0 <xSemaphore+0x1>
    3ad6:	80 93 cf 18 	sts	0x18CF, r24	; 0x8018cf <xSemaphore>
	xSemaphoreGive(xSemaphore);
    3ada:	00 e0       	ldi	r16, 0x00	; 0
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	a9 01       	movw	r20, r18
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	0e 94 df 05 	call	0xbbe	; 0xbbe <xQueueGenericSend>
    3aea:	0f 91       	pop	r16
    3aec:	08 95       	ret

00003aee <takeMeasure>:
	
}


void takeMeasure(void *pvParameters)
{
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	00 d0       	rcall	.+0      	; 0x3af4 <takeMeasure+0x6>
    3af4:	1f 92       	push	r1
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2000/portTICK_PERIOD_MS; // 60 s

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3afa:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <xTaskGetTickCount>
    3afe:	69 83       	std	Y+1, r22	; 0x01
    3b00:	7a 83       	std	Y+2, r23	; 0x02
    3b02:	8b 83       	std	Y+3, r24	; 0x03
    3b04:	9c 83       	std	Y+4, r25	; 0x04
		
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3b06:	4d e7       	ldi	r20, 0x7D	; 125
    3b08:	50 e0       	ldi	r21, 0x00	; 0
    3b0a:	60 e0       	ldi	r22, 0x00	; 0
    3b0c:	70 e0       	ldi	r23, 0x00	; 0
    3b0e:	ce 01       	movw	r24, r28
    3b10:	01 96       	adiw	r24, 0x01	; 1
    3b12:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskDelayUntil>
		tempHumMeasure();	
    3b16:	41 dd       	rcall	.-1406   	; 0x359a <tempHumMeasure>
		co2Measure(); // Call CO2HandlerImpl to take measure
    3b18:	88 dc       	rcall	.-1776   	; 0x342a <co2Measure>
    3b1a:	f5 cf       	rjmp	.-22     	; 0x3b06 <takeMeasure+0x18>

00003b1c <enqueueMeasures>:
    3b1c:	cf 93       	push	r28
	}
}

void enqueueMeasures(void *pvParameters)
{
    3b1e:	df 93       	push	r29
    3b20:	00 d0       	rcall	.+0      	; 0x3b22 <enqueueMeasures+0x6>
    3b22:	1f 92       	push	r1
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 22000/portTICK_PERIOD_MS; // 65 s

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3b28:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <xTaskGetTickCount>
    3b2c:	69 83       	std	Y+1, r22	; 0x01
    3b2e:	7a 83       	std	Y+2, r23	; 0x02
    3b30:	8b 83       	std	Y+3, r24	; 0x03
    3b32:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3b34:	4f e5       	ldi	r20, 0x5F	; 95
    3b36:	55 e0       	ldi	r21, 0x05	; 5
    3b38:	60 e0       	ldi	r22, 0x00	; 0
    3b3a:	70 e0       	ldi	r23, 0x00	; 0
    3b3c:	ce 01       	movw	r24, r28
    3b3e:	01 96       	adiw	r24, 0x01	; 1
    3b40:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskDelayUntil>
		enqueueSharedData(); // Call SharedDataQueueImpl to enqueue the measures
    3b44:	0e 94 11 01 	call	0x222	; 0x222 <enqueueSharedData>
    3b48:	f5 cf       	rjmp	.-22     	; 0x3b34 <enqueueMeasures+0x18>

00003b4a <setupTasks>:
void takeMeasure( void *pvParameters );
void enqueueMeasures( void *pvParameters );


void setupTasks(void) // Can only setup 2 tasks, memory problems?
{
    3b4a:	ef 92       	push	r14
    3b4c:	ff 92       	push	r15
    3b4e:	0f 93       	push	r16
	
	xTaskCreate(
    3b50:	e1 2c       	mov	r14, r1
    3b52:	f1 2c       	mov	r15, r1
    3b54:	00 e0       	ldi	r16, 0x00	; 0
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	40 ec       	ldi	r20, 0xC0	; 192
    3b5c:	50 e0       	ldi	r21, 0x00	; 0
    3b5e:	6e ea       	ldi	r22, 0xAE	; 174
    3b60:	75 e0       	ldi	r23, 0x05	; 5
    3b62:	87 e7       	ldi	r24, 0x77	; 119
    3b64:	9d e1       	ldi	r25, 0x1D	; 29
    3b66:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 ec       	ldi	r20, 0xC0	; 192
    3b70:	50 e0       	ldi	r21, 0x00	; 0
    3b72:	6a eb       	ldi	r22, 0xBA	; 186
    3b74:	75 e0       	ldi	r23, 0x05	; 5
    3b76:	8e e8       	ldi	r24, 0x8E	; 142
    3b78:	9d e1       	ldi	r25, 0x1D	; 29
    3b7a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );	
	
}
    3b7e:	0f 91       	pop	r16
    3b80:	ff 90       	pop	r15
    3b82:	ef 90       	pop	r14
    3b84:	08 95       	ret

00003b86 <startTasks>:
}


void startTasks()
{
	setupTasks();
    3b86:	e1 df       	rcall	.-62     	; 0x3b4a <setupTasks>
	
	sprintf(printstring, "Heapsize: %d \n", xPortGetFreeHeapSize());
    3b88:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <xPortGetFreeHeapSize>
    3b8c:	9f 93       	push	r25
    3b8e:	8f 93       	push	r24
    3b90:	8a ec       	ldi	r24, 0xCA	; 202
    3b92:	95 e0       	ldi	r25, 0x05	; 5
    3b94:	9f 93       	push	r25
    3b96:	8f 93       	push	r24
    3b98:	81 ed       	ldi	r24, 0xD1	; 209
    3b9a:	98 e1       	ldi	r25, 0x18	; 24
    3b9c:	9f 93       	push	r25
    3b9e:	8f 93       	push	r24
    3ba0:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
	//test_outprint(printstring);
	
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3ba4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <vTaskStartScheduler>
}
    3ba8:	0f 90       	pop	r0
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	08 95       	ret

00003bb6 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3bb6:	81 b1       	in	r24, 0x01	; 1
    3bb8:	81 68       	ori	r24, 0x81	; 129
    3bba:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <stdio_initialise>
	
	// Initialize queues
	initializeCO2Queue();
    3bc4:	28 dc       	rcall	.-1968   	; 0x3416 <initializeCO2Queue>
	initializeTempHumQueues();
    3bc6:	70 dc       	rcall	.-1824   	; 0x34a8 <initializeTempHumQueues>
    3bc8:	0e 94 08 01 	call	0x210	; 0x210 <initializeSharedDataQueue>
	initializeSharedDataQueue();

	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    3bcc:	83 e0       	ldi	r24, 0x03	; 3
    3bce:	d8 d5       	rcall	.+2992   	; 0x4780 <mh_z19_initialise>
	hih8120_initialise();
    3bd0:	a3 d0       	rcall	.+326    	; 0x3d18 <hih8120_initialise>
    3bd2:	85 e0       	ldi	r24, 0x05	; 5



	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3bd4:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <status_leds_initialise>
    3bd8:	41 e0       	ldi	r20, 0x01	; 1
	// Initialise the LoRaWAN driver without down-link buffer
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t));
    3bda:	60 e0       	ldi	r22, 0x00	; 0
    3bdc:	70 e0       	ldi	r23, 0x00	; 0
    3bde:	86 e1       	ldi	r24, 0x16	; 22
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	0e 94 4b 09 	call	0x1296	; 0x1296 <xStreamBufferGenericCreate>
    3be6:	90 93 4a 19 	sts	0x194A, r25	; 0x80194a <downlinkMessageBufferHandle+0x1>
    3bea:	80 93 49 19 	sts	0x1949, r24	; 0x801949 <downlinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    3bee:	bc 01       	movw	r22, r24
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	1f d2       	rcall	.+1086   	; 0x4032 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3bf4:	83 e0       	ldi	r24, 0x03	; 3
    3bf6:	1b cf       	rjmp	.-458    	; 0x3a2e <lora_handler_initialise>
    3bf8:	08 95       	ret

00003bfa <main>:
    3bfa:	dd df       	rcall	.-70     	; 0x3bb6 <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	
	initializeSemaphore();
    3bfc:	64 df       	rcall	.-312    	; 0x3ac6 <initializeSemaphore>
    3bfe:	89 ed       	ldi	r24, 0xD9	; 217
	
	puts("Program started!");
    3c00:	95 e0       	ldi	r25, 0x05	; 5
    3c02:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <puts>
	
	startTasks();
    3c06:	bf df       	rcall	.-130    	; 0x3b86 <startTasks>
    3c08:	ff cf       	rjmp	.-2      	; 0x3c08 <main+0xe>

00003c0a <__fixsfsi>:
    3c0a:	04 d0       	rcall	.+8      	; 0x3c14 <__fixunssfsi>
    3c0c:	68 94       	set
    3c0e:	b1 11       	cpse	r27, r1
    3c10:	50 c0       	rjmp	.+160    	; 0x3cb2 <__fp_szero>
    3c12:	08 95       	ret

00003c14 <__fixunssfsi>:
    3c14:	33 d0       	rcall	.+102    	; 0x3c7c <__fp_splitA>
    3c16:	88 f0       	brcs	.+34     	; 0x3c3a <__fixunssfsi+0x26>
    3c18:	9f 57       	subi	r25, 0x7F	; 127
    3c1a:	90 f0       	brcs	.+36     	; 0x3c40 <__fixunssfsi+0x2c>
    3c1c:	b9 2f       	mov	r27, r25
    3c1e:	99 27       	eor	r25, r25
    3c20:	b7 51       	subi	r27, 0x17	; 23
    3c22:	a0 f0       	brcs	.+40     	; 0x3c4c <__fixunssfsi+0x38>
    3c24:	d1 f0       	breq	.+52     	; 0x3c5a <__fixunssfsi+0x46>
    3c26:	66 0f       	add	r22, r22
    3c28:	77 1f       	adc	r23, r23
    3c2a:	88 1f       	adc	r24, r24
    3c2c:	99 1f       	adc	r25, r25
    3c2e:	1a f0       	brmi	.+6      	; 0x3c36 <__fixunssfsi+0x22>
    3c30:	ba 95       	dec	r27
    3c32:	c9 f7       	brne	.-14     	; 0x3c26 <__fixunssfsi+0x12>
    3c34:	12 c0       	rjmp	.+36     	; 0x3c5a <__fixunssfsi+0x46>
    3c36:	b1 30       	cpi	r27, 0x01	; 1
    3c38:	81 f0       	breq	.+32     	; 0x3c5a <__fixunssfsi+0x46>
    3c3a:	3a d0       	rcall	.+116    	; 0x3cb0 <__fp_zero>
    3c3c:	b1 e0       	ldi	r27, 0x01	; 1
    3c3e:	08 95       	ret
    3c40:	37 c0       	rjmp	.+110    	; 0x3cb0 <__fp_zero>
    3c42:	67 2f       	mov	r22, r23
    3c44:	78 2f       	mov	r23, r24
    3c46:	88 27       	eor	r24, r24
    3c48:	b8 5f       	subi	r27, 0xF8	; 248
    3c4a:	39 f0       	breq	.+14     	; 0x3c5a <__fixunssfsi+0x46>
    3c4c:	b9 3f       	cpi	r27, 0xF9	; 249
    3c4e:	cc f3       	brlt	.-14     	; 0x3c42 <__fixunssfsi+0x2e>
    3c50:	86 95       	lsr	r24
    3c52:	77 95       	ror	r23
    3c54:	67 95       	ror	r22
    3c56:	b3 95       	inc	r27
    3c58:	d9 f7       	brne	.-10     	; 0x3c50 <__fixunssfsi+0x3c>
    3c5a:	3e f4       	brtc	.+14     	; 0x3c6a <__fixunssfsi+0x56>
    3c5c:	90 95       	com	r25
    3c5e:	80 95       	com	r24
    3c60:	70 95       	com	r23
    3c62:	61 95       	neg	r22
    3c64:	7f 4f       	sbci	r23, 0xFF	; 255
    3c66:	8f 4f       	sbci	r24, 0xFF	; 255
    3c68:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6a:	08 95       	ret

00003c6c <__fp_split3>:
    3c6c:	57 fd       	sbrc	r21, 7
    3c6e:	90 58       	subi	r25, 0x80	; 128
    3c70:	44 0f       	add	r20, r20
    3c72:	55 1f       	adc	r21, r21
    3c74:	59 f0       	breq	.+22     	; 0x3c8c <__fp_splitA+0x10>
    3c76:	5f 3f       	cpi	r21, 0xFF	; 255
    3c78:	71 f0       	breq	.+28     	; 0x3c96 <__fp_splitA+0x1a>
    3c7a:	47 95       	ror	r20

00003c7c <__fp_splitA>:
    3c7c:	88 0f       	add	r24, r24
    3c7e:	97 fb       	bst	r25, 7
    3c80:	99 1f       	adc	r25, r25
    3c82:	61 f0       	breq	.+24     	; 0x3c9c <__fp_splitA+0x20>
    3c84:	9f 3f       	cpi	r25, 0xFF	; 255
    3c86:	79 f0       	breq	.+30     	; 0x3ca6 <__fp_splitA+0x2a>
    3c88:	87 95       	ror	r24
    3c8a:	08 95       	ret
    3c8c:	12 16       	cp	r1, r18
    3c8e:	13 06       	cpc	r1, r19
    3c90:	14 06       	cpc	r1, r20
    3c92:	55 1f       	adc	r21, r21
    3c94:	f2 cf       	rjmp	.-28     	; 0x3c7a <__fp_split3+0xe>
    3c96:	46 95       	lsr	r20
    3c98:	f1 df       	rcall	.-30     	; 0x3c7c <__fp_splitA>
    3c9a:	08 c0       	rjmp	.+16     	; 0x3cac <__fp_splitA+0x30>
    3c9c:	16 16       	cp	r1, r22
    3c9e:	17 06       	cpc	r1, r23
    3ca0:	18 06       	cpc	r1, r24
    3ca2:	99 1f       	adc	r25, r25
    3ca4:	f1 cf       	rjmp	.-30     	; 0x3c88 <__fp_splitA+0xc>
    3ca6:	86 95       	lsr	r24
    3ca8:	71 05       	cpc	r23, r1
    3caa:	61 05       	cpc	r22, r1
    3cac:	08 94       	sec
    3cae:	08 95       	ret

00003cb0 <__fp_zero>:
    3cb0:	e8 94       	clt

00003cb2 <__fp_szero>:
    3cb2:	bb 27       	eor	r27, r27
    3cb4:	66 27       	eor	r22, r22
    3cb6:	77 27       	eor	r23, r23
    3cb8:	cb 01       	movw	r24, r22
    3cba:	97 f9       	bld	r25, 7
    3cbc:	08 95       	ret

00003cbe <_hihTwiCallback>:
    3cbe:	65 30       	cpi	r22, 0x05	; 5
    3cc0:	f1 f4       	brne	.+60     	; 0x3cfe <_hihTwiCallback+0x40>
    3cc2:	fa 01       	movw	r30, r20
    3cc4:	80 81       	ld	r24, Z
    3cc6:	8f 73       	andi	r24, 0x3F	; 63
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	98 2f       	mov	r25, r24
    3ccc:	88 27       	eor	r24, r24
    3cce:	21 81       	ldd	r18, Z+1	; 0x01
    3cd0:	82 2b       	or	r24, r18
    3cd2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3cd6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3cda:	82 81       	ldd	r24, Z+2	; 0x02
    3cdc:	f0 e4       	ldi	r31, 0x40	; 64
    3cde:	8f 9f       	mul	r24, r31
    3ce0:	c0 01       	movw	r24, r0
    3ce2:	11 24       	eor	r1, r1
    3ce4:	fa 01       	movw	r30, r20
    3ce6:	23 81       	ldd	r18, Z+3	; 0x03
    3ce8:	26 95       	lsr	r18
    3cea:	26 95       	lsr	r18
    3cec:	82 2b       	or	r24, r18
    3cee:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3cf2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	80 93 73 17 	sts	0x1773, r24	; 0x801773 <_measuringIsReady>
    3cfc:	08 95       	ret
    3cfe:	64 30       	cpi	r22, 0x04	; 4
    3d00:	51 f0       	breq	.+20     	; 0x3d16 <_hihTwiCallback+0x58>
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	90 e4       	ldi	r25, 0x40	; 64
    3d06:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d0a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d0e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3d12:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d16:	08 95       	ret

00003d18 <hih8120_initialise>:
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	0f e5       	ldi	r16, 0x5F	; 95
    3d1e:	1e e1       	ldi	r17, 0x1E	; 30
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	34 e2       	ldi	r19, 0x24	; 36
    3d24:	44 ef       	ldi	r20, 0xF4	; 244
    3d26:	50 e0       	ldi	r21, 0x00	; 0
    3d28:	60 e0       	ldi	r22, 0x00	; 0
    3d2a:	87 e2       	ldi	r24, 0x27	; 39
    3d2c:	0e 94 bf 29 	call	0x537e	; 0x537e <twiCreate>
    3d30:	90 93 75 17 	sts	0x1775, r25	; 0x801775 <_hih8120Handler+0x1>
    3d34:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <_hih8120Handler>
    3d38:	21 e0       	ldi	r18, 0x01	; 1
    3d3a:	89 2b       	or	r24, r25
    3d3c:	09 f0       	breq	.+2      	; 0x3d40 <hih8120_initialise+0x28>
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	82 2f       	mov	r24, r18
    3d42:	1f 91       	pop	r17
    3d44:	0f 91       	pop	r16
    3d46:	08 95       	ret

00003d48 <hih8120_wakeup>:
    3d48:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <_hih8120Handler>
    3d4c:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <_hih8120Handler+0x1>
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	59 f0       	breq	.+22     	; 0x3d6a <hih8120_wakeup+0x22>
    3d54:	40 e0       	ldi	r20, 0x00	; 0
    3d56:	60 e0       	ldi	r22, 0x00	; 0
    3d58:	70 e0       	ldi	r23, 0x00	; 0
    3d5a:	0e 94 10 2a 	call	0x5420	; 0x5420 <twiTransmit>
    3d5e:	84 30       	cpi	r24, 0x04	; 4
    3d60:	31 f4       	brne	.+12     	; 0x3d6e <hih8120_wakeup+0x26>
    3d62:	10 92 73 17 	sts	0x1773, r1	; 0x801773 <_measuringIsReady>
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	08 95       	ret
    3d6a:	82 e0       	ldi	r24, 0x02	; 2
    3d6c:	08 95       	ret
    3d6e:	83 e0       	ldi	r24, 0x03	; 3
    3d70:	08 95       	ret

00003d72 <hih8120_measure>:
    3d72:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <_hih8120Handler>
    3d76:	90 91 75 17 	lds	r25, 0x1775	; 0x801775 <_hih8120Handler+0x1>
    3d7a:	00 97       	sbiw	r24, 0x00	; 0
    3d7c:	39 f0       	breq	.+14     	; 0x3d8c <hih8120_measure+0x1a>
    3d7e:	64 e0       	ldi	r22, 0x04	; 4
    3d80:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <twiReceive>
    3d84:	85 30       	cpi	r24, 0x05	; 5
    3d86:	21 f0       	breq	.+8      	; 0x3d90 <hih8120_measure+0x1e>
    3d88:	83 e0       	ldi	r24, 0x03	; 3
    3d8a:	08 95       	ret
    3d8c:	82 e0       	ldi	r24, 0x02	; 2
    3d8e:	08 95       	ret
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	08 95       	ret

00003d94 <hih8120_getHumidity>:
    3d94:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3d98:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	0e 94 3a 2c 	call	0x5874	; 0x5874 <__floatunsisf>
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	48 ec       	ldi	r20, 0xC8	; 200
    3daa:	52 e4       	ldi	r21, 0x42	; 66
    3dac:	0e 94 9f 2c 	call	0x593e	; 0x593e <__mulsf3>
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	38 ef       	ldi	r19, 0xF8	; 248
    3db4:	4f e7       	ldi	r20, 0x7F	; 127
    3db6:	56 e4       	ldi	r21, 0x46	; 70
    3db8:	0c 94 cf 2b 	jmp	0x579e	; 0x579e <__divsf3>
    3dbc:	08 95       	ret

00003dbe <hih8120_getTemperature>:
    3dbe:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3dc2:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	0e 94 3a 2c 	call	0x5874	; 0x5874 <__floatunsisf>
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	45 e2       	ldi	r20, 0x25	; 37
    3dd4:	53 e4       	ldi	r21, 0x43	; 67
    3dd6:	0e 94 9f 2c 	call	0x593e	; 0x593e <__mulsf3>
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	38 ef       	ldi	r19, 0xF8	; 248
    3dde:	4f e7       	ldi	r20, 0x7F	; 127
    3de0:	56 e4       	ldi	r21, 0x46	; 70
    3de2:	0e 94 cf 2b 	call	0x579e	; 0x579e <__divsf3>
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	40 e2       	ldi	r20, 0x20	; 32
    3dec:	52 e4       	ldi	r21, 0x42	; 66
    3dee:	0c 94 68 2b 	jmp	0x56d0	; 0x56d0 <__subsf3>
    3df2:	08 95       	ret

00003df4 <_serialCallBack>:
    3df4:	0f 93       	push	r16
    3df6:	1f 93       	push	r17
    3df8:	cf 93       	push	r28
    3dfa:	df 93       	push	r29
    3dfc:	1f 92       	push	r1
    3dfe:	1f 92       	push	r1
    3e00:	cd b7       	in	r28, 0x3d	; 61
    3e02:	de b7       	in	r29, 0x3e	; 62
    3e04:	8c 01       	movw	r16, r24
    3e06:	19 82       	std	Y+1, r1	; 0x01
    3e08:	2d c0       	rjmp	.+90     	; 0x3e64 <_serialCallBack+0x70>
    3e0a:	e0 91 da 17 	lds	r30, 0x17DA	; 0x8017da <rec_buf_inp.2878>
    3e0e:	ec 32       	cpi	r30, 0x2C	; 44
    3e10:	50 f4       	brcc	.+20     	; 0x3e26 <_serialCallBack+0x32>
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	8e 0f       	add	r24, r30
    3e16:	80 93 da 17 	sts	0x17DA, r24	; 0x8017da <rec_buf_inp.2878>
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	e4 5f       	subi	r30, 0xF4	; 244
    3e1e:	f7 4e       	sbci	r31, 0xE7	; 231
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	80 83       	st	Z, r24
    3e24:	02 c0       	rjmp	.+4      	; 0x3e2a <_serialCallBack+0x36>
    3e26:	10 92 da 17 	sts	0x17DA, r1	; 0x8017da <rec_buf_inp.2878>
    3e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2c:	8a 30       	cpi	r24, 0x0A	; 10
    3e2e:	d1 f4       	brne	.+52     	; 0x3e64 <_serialCallBack+0x70>
    3e30:	40 91 da 17 	lds	r20, 0x17DA	; 0x8017da <rec_buf_inp.2878>
    3e34:	50 e0       	ldi	r21, 0x00	; 0
    3e36:	fa 01       	movw	r30, r20
    3e38:	e6 5f       	subi	r30, 0xF6	; 246
    3e3a:	f7 4e       	sbci	r31, 0xE7	; 231
    3e3c:	10 82       	st	Z, r1
    3e3e:	41 50       	subi	r20, 0x01	; 1
    3e40:	51 09       	sbc	r21, r1
    3e42:	9e 01       	movw	r18, r28
    3e44:	2f 5f       	subi	r18, 0xFF	; 255
    3e46:	3f 4f       	sbci	r19, 0xFF	; 255
    3e48:	6c e0       	ldi	r22, 0x0C	; 12
    3e4a:	78 e1       	ldi	r23, 0x18	; 24
    3e4c:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <_serialReplyBufferHandle>
    3e50:	90 91 de 17 	lds	r25, 0x17DE	; 0x8017de <_serialReplyBufferHandle+0x1>
    3e54:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <xStreamBufferSendFromISR>
    3e58:	89 81       	ldd	r24, Y+1	; 0x01
    3e5a:	81 11       	cpse	r24, r1
    3e5c:	0e 94 c7 03 	call	0x78e	; 0x78e <vPortYield>
    3e60:	10 92 da 17 	sts	0x17DA, r1	; 0x8017da <rec_buf_inp.2878>
    3e64:	be 01       	movw	r22, r28
    3e66:	6e 5f       	subi	r22, 0xFE	; 254
    3e68:	7f 4f       	sbci	r23, 0xFF	; 255
    3e6a:	c8 01       	movw	r24, r16
    3e6c:	04 d6       	rcall	.+3080   	; 0x4a76 <serial_getByte>
    3e6e:	88 23       	and	r24, r24
    3e70:	61 f2       	breq	.-104    	; 0x3e0a <_serialCallBack+0x16>
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	df 91       	pop	r29
    3e78:	cf 91       	pop	r28
    3e7a:	1f 91       	pop	r17
    3e7c:	0f 91       	pop	r16
    3e7e:	08 95       	ret

00003e80 <_uploadMessage>:
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	8c 01       	movw	r16, r24
    3e8a:	eb 01       	movw	r28, r22
    3e8c:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <_serialReplyBufferHandle>
    3e90:	90 91 de 17 	lds	r25, 0x17DE	; 0x8017de <_serialReplyBufferHandle+0x1>
    3e94:	0e 94 7d 09 	call	0x12fa	; 0x12fa <xStreamBufferReset>
    3e98:	b8 01       	movw	r22, r16
    3e9a:	86 e7       	ldi	r24, 0x76	; 118
    3e9c:	97 e1       	ldi	r25, 0x17	; 23
    3e9e:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <strcpy>
    3ea2:	20 97       	sbiw	r28, 0x00	; 0
    3ea4:	79 f0       	breq	.+30     	; 0x3ec4 <_uploadMessage+0x44>
    3ea6:	e6 e7       	ldi	r30, 0x76	; 118
    3ea8:	f7 e1       	ldi	r31, 0x17	; 23
    3eaa:	01 90       	ld	r0, Z+
    3eac:	00 20       	and	r0, r0
    3eae:	e9 f7       	brne	.-6      	; 0x3eaa <_uploadMessage+0x2a>
    3eb0:	31 97       	sbiw	r30, 0x01	; 1
    3eb2:	80 e2       	ldi	r24, 0x20	; 32
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	91 83       	std	Z+1, r25	; 0x01
    3eb8:	80 83       	st	Z, r24
    3eba:	be 01       	movw	r22, r28
    3ebc:	86 e7       	ldi	r24, 0x76	; 118
    3ebe:	97 e1       	ldi	r25, 0x17	; 23
    3ec0:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <strcat>
    3ec4:	e6 e7       	ldi	r30, 0x76	; 118
    3ec6:	f7 e1       	ldi	r31, 0x17	; 23
    3ec8:	df 01       	movw	r26, r30
    3eca:	0d 90       	ld	r0, X+
    3ecc:	00 20       	and	r0, r0
    3ece:	e9 f7       	brne	.-6      	; 0x3eca <_uploadMessage+0x4a>
    3ed0:	11 97       	sbiw	r26, 0x01	; 1
    3ed2:	8d e0       	ldi	r24, 0x0D	; 13
    3ed4:	9a e0       	ldi	r25, 0x0A	; 10
    3ed6:	11 96       	adiw	r26, 0x01	; 1
    3ed8:	9c 93       	st	X, r25
    3eda:	8e 93       	st	-X, r24
    3edc:	12 96       	adiw	r26, 0x02	; 2
    3ede:	1c 92       	st	X, r1
    3ee0:	01 90       	ld	r0, Z+
    3ee2:	00 20       	and	r0, r0
    3ee4:	e9 f7       	brne	.-6      	; 0x3ee0 <_uploadMessage+0x60>
    3ee6:	31 97       	sbiw	r30, 0x01	; 1
    3ee8:	e6 57       	subi	r30, 0x76	; 118
    3eea:	f7 41       	sbci	r31, 0x17	; 23
    3eec:	ae 2f       	mov	r26, r30
    3eee:	86 e7       	ldi	r24, 0x76	; 118
    3ef0:	97 e1       	ldi	r25, 0x17	; 23
    3ef2:	ac 01       	movw	r20, r24
    3ef4:	6a 2f       	mov	r22, r26
    3ef6:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <_rn2483_serial>
    3efa:	90 91 e0 17 	lds	r25, 0x17E0	; 0x8017e0 <_rn2483_serial+0x1>
    3efe:	66 d5       	rcall	.+2764   	; 0x49cc <serial_sendBytes>
    3f00:	81 11       	cpse	r24, r1
    3f02:	11 c0       	rjmp	.+34     	; 0x3f26 <_uploadMessage+0xa6>
    3f04:	08 e2       	ldi	r16, 0x28	; 40
    3f06:	15 e0       	ldi	r17, 0x05	; 5
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	4d e2       	ldi	r20, 0x2D	; 45
    3f0e:	50 e0       	ldi	r21, 0x00	; 0
    3f10:	66 e6       	ldi	r22, 0x66	; 102
    3f12:	78 e1       	ldi	r23, 0x18	; 24
    3f14:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <_serialReplyBufferHandle>
    3f18:	90 91 de 17 	lds	r25, 0x17DE	; 0x8017de <_serialReplyBufferHandle+0x1>
    3f1c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xStreamBufferReceive>
    3f20:	86 e6       	ldi	r24, 0x66	; 102
    3f22:	98 e1       	ldi	r25, 0x18	; 24
    3f24:	02 c0       	rjmp	.+4      	; 0x3f2a <_uploadMessage+0xaa>
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	df 91       	pop	r29
    3f2c:	cf 91       	pop	r28
    3f2e:	1f 91       	pop	r17
    3f30:	0f 91       	pop	r16
    3f32:	08 95       	ret

00003f34 <_reply2ReturnCode>:
    3f34:	2f 92       	push	r2
    3f36:	3f 92       	push	r3
    3f38:	4f 92       	push	r4
    3f3a:	5f 92       	push	r5
    3f3c:	6f 92       	push	r6
    3f3e:	7f 92       	push	r7
    3f40:	8f 92       	push	r8
    3f42:	9f 92       	push	r9
    3f44:	af 92       	push	r10
    3f46:	bf 92       	push	r11
    3f48:	cf 92       	push	r12
    3f4a:	df 92       	push	r13
    3f4c:	ef 92       	push	r14
    3f4e:	ff 92       	push	r15
    3f50:	0f 93       	push	r16
    3f52:	1f 93       	push	r17
    3f54:	cf 93       	push	r28
    3f56:	df 93       	push	r29
    3f58:	5c 01       	movw	r10, r24
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	01 90       	ld	r0, Z+
    3f5e:	00 20       	and	r0, r0
    3f60:	e9 f7       	brne	.-6      	; 0x3f5c <_reply2ReturnCode+0x28>
    3f62:	31 97       	sbiw	r30, 0x01	; 1
    3f64:	6f 01       	movw	r12, r30
    3f66:	c8 1a       	sub	r12, r24
    3f68:	d9 0a       	sbc	r13, r25
    3f6a:	5c 2c       	mov	r5, r12
    3f6c:	0f 2e       	mov	r0, r31
    3f6e:	f3 e8       	ldi	r31, 0x83	; 131
    3f70:	8f 2e       	mov	r8, r31
    3f72:	f8 e0       	ldi	r31, 0x08	; 8
    3f74:	9f 2e       	mov	r9, r31
    3f76:	f0 2d       	mov	r31, r0
    3f78:	e1 2c       	mov	r14, r1
    3f7a:	f1 2c       	mov	r15, r1
    3f7c:	4c 2c       	mov	r4, r12
    3f7e:	37 01       	movw	r6, r14
    3f80:	f4 01       	movw	r30, r8
    3f82:	01 81       	ldd	r16, Z+1	; 0x01
    3f84:	12 81       	ldd	r17, Z+2	; 0x02
    3f86:	e8 01       	movw	r28, r16
    3f88:	09 90       	ld	r0, Y+
    3f8a:	00 20       	and	r0, r0
    3f8c:	e9 f7       	brne	.-6      	; 0x3f88 <_reply2ReturnCode+0x54>
    3f8e:	21 97       	sbiw	r28, 0x01	; 1
    3f90:	c0 1b       	sub	r28, r16
    3f92:	d1 0b       	sbc	r29, r17
    3f94:	3c 2e       	mov	r3, r28
    3f96:	f9 e0       	ldi	r31, 0x09	; 9
    3f98:	cf 16       	cp	r12, r31
    3f9a:	d1 04       	cpc	r13, r1
    3f9c:	58 f0       	brcs	.+22     	; 0x3fb4 <_reply2ReturnCode+0x80>
    3f9e:	f4 01       	movw	r30, r8
    3fa0:	20 80       	ld	r2, Z
    3fa2:	fe e0       	ldi	r31, 0x0E	; 14
    3fa4:	2f 12       	cpse	r2, r31
    3fa6:	06 c0       	rjmp	.+12     	; 0x3fb4 <_reply2ReturnCode+0x80>
    3fa8:	b8 01       	movw	r22, r16
    3faa:	c5 01       	movw	r24, r10
    3fac:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcasestr>
    3fb0:	89 2b       	or	r24, r25
    3fb2:	09 f5       	brne	.+66     	; 0x3ff6 <_reply2ReturnCode+0xc2>
    3fb4:	44 2d       	mov	r20, r4
    3fb6:	35 14       	cp	r3, r5
    3fb8:	08 f4       	brcc	.+2      	; 0x3fbc <_reply2ReturnCode+0x88>
    3fba:	4c 2f       	mov	r20, r28
    3fbc:	50 e0       	ldi	r21, 0x00	; 0
    3fbe:	b8 01       	movw	r22, r16
    3fc0:	c5 01       	movw	r24, r10
    3fc2:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <strncasecmp>
    3fc6:	89 2b       	or	r24, r25
    3fc8:	49 f4       	brne	.+18     	; 0x3fdc <_reply2ReturnCode+0xa8>
    3fca:	f3 01       	movw	r30, r6
    3fcc:	ee 0f       	add	r30, r30
    3fce:	ff 1f       	adc	r31, r31
    3fd0:	e6 0d       	add	r30, r6
    3fd2:	f7 1d       	adc	r31, r7
    3fd4:	ed 57       	subi	r30, 0x7D	; 125
    3fd6:	f7 4f       	sbci	r31, 0xF7	; 247
    3fd8:	20 80       	ld	r2, Z
    3fda:	0d c0       	rjmp	.+26     	; 0x3ff6 <_reply2ReturnCode+0xc2>
    3fdc:	8f ef       	ldi	r24, 0xFF	; 255
    3fde:	e8 1a       	sub	r14, r24
    3fe0:	f8 0a       	sbc	r15, r24
    3fe2:	e3 e0       	ldi	r30, 0x03	; 3
    3fe4:	8e 0e       	add	r8, r30
    3fe6:	91 1c       	adc	r9, r1
    3fe8:	f1 e1       	ldi	r31, 0x11	; 17
    3fea:	ef 16       	cp	r14, r31
    3fec:	f1 04       	cpc	r15, r1
    3fee:	39 f6       	brne	.-114    	; 0x3f7e <_reply2ReturnCode+0x4a>
    3ff0:	68 94       	set
    3ff2:	22 24       	eor	r2, r2
    3ff4:	24 f8       	bld	r2, 4
    3ff6:	82 2d       	mov	r24, r2
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	1f 91       	pop	r17
    3ffe:	0f 91       	pop	r16
    4000:	ff 90       	pop	r15
    4002:	ef 90       	pop	r14
    4004:	df 90       	pop	r13
    4006:	cf 90       	pop	r12
    4008:	bf 90       	pop	r11
    400a:	af 90       	pop	r10
    400c:	9f 90       	pop	r9
    400e:	8f 90       	pop	r8
    4010:	7f 90       	pop	r7
    4012:	6f 90       	pop	r6
    4014:	5f 90       	pop	r5
    4016:	4f 90       	pop	r4
    4018:	3f 90       	pop	r3
    401a:	2f 90       	pop	r2
    401c:	08 95       	ret

0000401e <_uploadMessageRc>:
    401e:	30 df       	rcall	.-416    	; 0x3e80 <_uploadMessage>
    4020:	89 cf       	rjmp	.-238    	; 0x3f34 <_reply2ReturnCode>
    4022:	08 95       	ret

00004024 <lora_driver_flushBuffers>:
    4024:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <_serialReplyBufferHandle>
    4028:	90 91 de 17 	lds	r25, 0x17DE	; 0x8017de <_serialReplyBufferHandle+0x1>
    402c:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <xStreamBufferReset>
    4030:	08 95       	ret

00004032 <lora_driver_initialise>:
    4032:	8f 92       	push	r8
    4034:	9f 92       	push	r9
    4036:	af 92       	push	r10
    4038:	cf 92       	push	r12
    403a:	ef 92       	push	r14
    403c:	0f 93       	push	r16
    403e:	1f 93       	push	r17
    4040:	cf 93       	push	r28
    4042:	c8 2f       	mov	r28, r24
    4044:	8b 01       	movw	r16, r22
    4046:	41 e0       	ldi	r20, 0x01	; 1
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	70 e0       	ldi	r23, 0x00	; 0
    404c:	88 ec       	ldi	r24, 0xC8	; 200
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	0e 94 4b 09 	call	0x1296	; 0x1296 <xStreamBufferGenericCreate>
    4054:	90 93 de 17 	sts	0x17DE, r25	; 0x8017de <_serialReplyBufferHandle+0x1>
    4058:	80 93 dd 17 	sts	0x17DD, r24	; 0x8017dd <_serialReplyBufferHandle>
    405c:	10 93 dc 17 	sts	0x17DC, r17	; 0x8017dc <_downlinkMessageBuffer+0x1>
    4060:	00 93 db 17 	sts	0x17DB, r16	; 0x8017db <_downlinkMessageBuffer>
    4064:	0f 2e       	mov	r0, r31
    4066:	fa ef       	ldi	r31, 0xFA	; 250
    4068:	8f 2e       	mov	r8, r31
    406a:	fe e1       	ldi	r31, 0x1E	; 30
    406c:	9f 2e       	mov	r9, r31
    406e:	f0 2d       	mov	r31, r0
    4070:	68 94       	set
    4072:	aa 24       	eor	r10, r10
    4074:	a6 f8       	bld	r10, 6
    4076:	68 94       	set
    4078:	cc 24       	eor	r12, r12
    407a:	c6 f8       	bld	r12, 6
    407c:	e1 2c       	mov	r14, r1
    407e:	00 e0       	ldi	r16, 0x00	; 0
    4080:	23 e0       	ldi	r18, 0x03	; 3
    4082:	40 e0       	ldi	r20, 0x00	; 0
    4084:	51 ee       	ldi	r21, 0xE1	; 225
    4086:	60 e0       	ldi	r22, 0x00	; 0
    4088:	70 e0       	ldi	r23, 0x00	; 0
    408a:	8c 2f       	mov	r24, r28
    408c:	d2 d3       	rcall	.+1956   	; 0x4832 <serial_create>
    408e:	90 93 e0 17 	sts	0x17E0, r25	; 0x8017e0 <_rn2483_serial+0x1>
    4092:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <_rn2483_serial>
    4096:	e7 e0       	ldi	r30, 0x07	; 7
    4098:	f1 e0       	ldi	r31, 0x01	; 1
    409a:	80 81       	ld	r24, Z
    409c:	80 61       	ori	r24, 0x10	; 16
    409e:	80 83       	st	Z, r24
    40a0:	cf 91       	pop	r28
    40a2:	1f 91       	pop	r17
    40a4:	0f 91       	pop	r16
    40a6:	ef 90       	pop	r14
    40a8:	cf 90       	pop	r12
    40aa:	af 90       	pop	r10
    40ac:	9f 90       	pop	r9
    40ae:	8f 90       	pop	r8
    40b0:	08 95       	ret

000040b2 <lora_driver_resetRn2483>:
    40b2:	88 23       	and	r24, r24
    40b4:	31 f0       	breq	.+12     	; 0x40c2 <lora_driver_resetRn2483+0x10>
    40b6:	e8 e0       	ldi	r30, 0x08	; 8
    40b8:	f1 e0       	ldi	r31, 0x01	; 1
    40ba:	80 81       	ld	r24, Z
    40bc:	8f 7e       	andi	r24, 0xEF	; 239
    40be:	80 83       	st	Z, r24
    40c0:	08 95       	ret
    40c2:	e8 e0       	ldi	r30, 0x08	; 8
    40c4:	f1 e0       	ldi	r31, 0x01	; 1
    40c6:	80 81       	ld	r24, Z
    40c8:	80 61       	ori	r24, 0x10	; 16
    40ca:	80 83       	st	Z, r24
    40cc:	08 95       	ret

000040ce <lora_driver_rn2483FactoryReset>:
    40ce:	60 e0       	ldi	r22, 0x00	; 0
    40d0:	70 e0       	ldi	r23, 0x00	; 0
    40d2:	89 e0       	ldi	r24, 0x09	; 9
    40d4:	96 e0       	ldi	r25, 0x06	; 6
    40d6:	d4 de       	rcall	.-600    	; 0x3e80 <_uploadMessage>
    40d8:	e6 e6       	ldi	r30, 0x66	; 102
    40da:	f8 e1       	ldi	r31, 0x18	; 24
    40dc:	01 90       	ld	r0, Z+
    40de:	00 20       	and	r0, r0
    40e0:	e9 f7       	brne	.-6      	; 0x40dc <lora_driver_rn2483FactoryReset+0xe>
    40e2:	31 97       	sbiw	r30, 0x01	; 1
    40e4:	e6 56       	subi	r30, 0x66	; 102
    40e6:	f8 41       	sbci	r31, 0x18	; 24
    40e8:	81 e0       	ldi	r24, 0x01	; 1
    40ea:	75 97       	sbiw	r30, 0x15	; 21
    40ec:	08 f0       	brcs	.+2      	; 0x40f0 <lora_driver_rn2483FactoryReset+0x22>
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	08 95       	ret

000040f2 <lora_driver_getRn2483Hweui>:
    40f2:	cf 93       	push	r28
    40f4:	df 93       	push	r29
    40f6:	ec 01       	movw	r28, r24
    40f8:	60 e0       	ldi	r22, 0x00	; 0
    40fa:	70 e0       	ldi	r23, 0x00	; 0
    40fc:	8a e1       	ldi	r24, 0x1A	; 26
    40fe:	96 e0       	ldi	r25, 0x06	; 6
    4100:	bf de       	rcall	.-642    	; 0x3e80 <_uploadMessage>
    4102:	e6 e6       	ldi	r30, 0x66	; 102
    4104:	f8 e1       	ldi	r31, 0x18	; 24
    4106:	01 90       	ld	r0, Z+
    4108:	00 20       	and	r0, r0
    410a:	e9 f7       	brne	.-6      	; 0x4106 <lora_driver_getRn2483Hweui+0x14>
    410c:	e7 57       	subi	r30, 0x77	; 119
    410e:	f8 41       	sbci	r31, 0x18	; 24
    4110:	39 f4       	brne	.+14     	; 0x4120 <lora_driver_getRn2483Hweui+0x2e>
    4112:	66 e6       	ldi	r22, 0x66	; 102
    4114:	78 e1       	ldi	r23, 0x18	; 24
    4116:	ce 01       	movw	r24, r28
    4118:	0e 94 d5 2e 	call	0x5daa	; 0x5daa <strcpy>
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	02 c0       	rjmp	.+4      	; 0x4124 <lora_driver_getRn2483Hweui+0x32>
    4120:	18 82       	st	Y, r1
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	df 91       	pop	r29
    4126:	cf 91       	pop	r28
    4128:	08 95       	ret

0000412a <lora_driver_setDeviceIdentifier>:
    412a:	fc 01       	movw	r30, r24
    412c:	01 90       	ld	r0, Z+
    412e:	00 20       	and	r0, r0
    4130:	e9 f7       	brne	.-6      	; 0x412c <lora_driver_setDeviceIdentifier+0x2>
    4132:	9f 01       	movw	r18, r30
    4134:	21 51       	subi	r18, 0x11	; 17
    4136:	31 09       	sbc	r19, r1
    4138:	28 17       	cp	r18, r24
    413a:	39 07       	cpc	r19, r25
    413c:	29 f4       	brne	.+10     	; 0x4148 <lora_driver_setDeviceIdentifier+0x1e>
    413e:	bc 01       	movw	r22, r24
    4140:	88 e4       	ldi	r24, 0x48	; 72
    4142:	96 e0       	ldi	r25, 0x06	; 6
    4144:	6c cf       	rjmp	.-296    	; 0x401e <_uploadMessageRc>
    4146:	08 95       	ret
    4148:	89 e0       	ldi	r24, 0x09	; 9
    414a:	08 95       	ret

0000414c <lora_driver_setApplicationIdentifier>:
    414c:	fc 01       	movw	r30, r24
    414e:	01 90       	ld	r0, Z+
    4150:	00 20       	and	r0, r0
    4152:	e9 f7       	brne	.-6      	; 0x414e <lora_driver_setApplicationIdentifier+0x2>
    4154:	9f 01       	movw	r18, r30
    4156:	21 51       	subi	r18, 0x11	; 17
    4158:	31 09       	sbc	r19, r1
    415a:	28 17       	cp	r18, r24
    415c:	39 07       	cpc	r19, r25
    415e:	29 f4       	brne	.+10     	; 0x416a <lora_driver_setApplicationIdentifier+0x1e>
    4160:	bc 01       	movw	r22, r24
    4162:	87 e5       	ldi	r24, 0x57	; 87
    4164:	96 e0       	ldi	r25, 0x06	; 6
    4166:	5b cf       	rjmp	.-330    	; 0x401e <_uploadMessageRc>
    4168:	08 95       	ret
    416a:	89 e0       	ldi	r24, 0x09	; 9
    416c:	08 95       	ret

0000416e <lora_driver_setApplicationKey>:
    416e:	fc 01       	movw	r30, r24
    4170:	01 90       	ld	r0, Z+
    4172:	00 20       	and	r0, r0
    4174:	e9 f7       	brne	.-6      	; 0x4170 <lora_driver_setApplicationKey+0x2>
    4176:	9f 01       	movw	r18, r30
    4178:	21 52       	subi	r18, 0x21	; 33
    417a:	31 09       	sbc	r19, r1
    417c:	28 17       	cp	r18, r24
    417e:	39 07       	cpc	r19, r25
    4180:	29 f4       	brne	.+10     	; 0x418c <lora_driver_setApplicationKey+0x1e>
    4182:	bc 01       	movw	r22, r24
    4184:	86 e6       	ldi	r24, 0x66	; 102
    4186:	96 e0       	ldi	r25, 0x06	; 6
    4188:	4a cf       	rjmp	.-364    	; 0x401e <_uploadMessageRc>
    418a:	08 95       	ret
    418c:	89 e0       	ldi	r24, 0x09	; 9
    418e:	08 95       	ret

00004190 <lora_driver_saveMac>:
    4190:	60 e0       	ldi	r22, 0x00	; 0
    4192:	70 e0       	ldi	r23, 0x00	; 0
    4194:	85 ea       	ldi	r24, 0xA5	; 165
    4196:	96 e0       	ldi	r25, 0x06	; 6
    4198:	42 cf       	rjmp	.-380    	; 0x401e <_uploadMessageRc>
    419a:	08 95       	ret

0000419c <lora_driver_join>:
    419c:	0f 93       	push	r16
    419e:	1f 93       	push	r17
    41a0:	e8 2f       	mov	r30, r24
    41a2:	f0 e0       	ldi	r31, 0x00	; 0
    41a4:	ee 0f       	add	r30, r30
    41a6:	ff 1f       	adc	r31, r31
    41a8:	e1 58       	subi	r30, 0x81	; 129
    41aa:	f7 4f       	sbci	r31, 0xF7	; 247
    41ac:	60 81       	ld	r22, Z
    41ae:	71 81       	ldd	r23, Z+1	; 0x01
    41b0:	8e ea       	ldi	r24, 0xAE	; 174
    41b2:	96 e0       	ldi	r25, 0x06	; 6
    41b4:	34 df       	rcall	.-408    	; 0x401e <_uploadMessageRc>
    41b6:	81 11       	cpse	r24, r1
    41b8:	14 c0       	rjmp	.+40     	; 0x41e2 <lora_driver_join+0x46>
    41ba:	08 e2       	ldi	r16, 0x28	; 40
    41bc:	15 e0       	ldi	r17, 0x05	; 5
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	4d e2       	ldi	r20, 0x2D	; 45
    41c4:	50 e0       	ldi	r21, 0x00	; 0
    41c6:	66 e6       	ldi	r22, 0x66	; 102
    41c8:	78 e1       	ldi	r23, 0x18	; 24
    41ca:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <_serialReplyBufferHandle>
    41ce:	90 91 de 17 	lds	r25, 0x17DE	; 0x8017de <_serialReplyBufferHandle+0x1>
    41d2:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xStreamBufferReceive>
    41d6:	88 23       	and	r24, r24
    41d8:	21 f0       	breq	.+8      	; 0x41e2 <lora_driver_join+0x46>
    41da:	86 e6       	ldi	r24, 0x66	; 102
    41dc:	98 e1       	ldi	r25, 0x18	; 24
    41de:	aa de       	rcall	.-684    	; 0x3f34 <_reply2ReturnCode>
    41e0:	03 c0       	rjmp	.+6      	; 0x41e8 <lora_driver_join+0x4c>
    41e2:	86 e6       	ldi	r24, 0x66	; 102
    41e4:	98 e1       	ldi	r25, 0x18	; 24
    41e6:	a6 de       	rcall	.-692    	; 0x3f34 <_reply2ReturnCode>
    41e8:	1f 91       	pop	r17
    41ea:	0f 91       	pop	r16
    41ec:	08 95       	ret

000041ee <lora_driver_sendUploadMessage>:
    41ee:	0f 93       	push	r16
    41f0:	1f 93       	push	r17
    41f2:	cf 93       	push	r28
    41f4:	df 93       	push	r29
    41f6:	1f 92       	push	r1
    41f8:	cd b7       	in	r28, 0x3d	; 61
    41fa:	de b7       	in	r29, 0x3e	; 62
    41fc:	db 01       	movw	r26, r22
    41fe:	11 96       	adiw	r26, 0x01	; 1
    4200:	9c 91       	ld	r25, X
    4202:	11 97       	sbiw	r26, 0x01	; 1
    4204:	95 31       	cpi	r25, 0x15	; 21
    4206:	08 f0       	brcs	.+2      	; 0x420a <lora_driver_sendUploadMessage+0x1c>
    4208:	b4 c0       	rjmp	.+360    	; 0x4372 <lora_driver_sendUploadMessage+0x184>
    420a:	99 23       	and	r25, r25
    420c:	81 f1       	breq	.+96     	; 0x426e <lora_driver_sendUploadMessage+0x80>
    420e:	60 e0       	ldi	r22, 0x00	; 0
    4210:	70 e0       	ldi	r23, 0x00	; 0
    4212:	27 2f       	mov	r18, r23
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	46 2f       	mov	r20, r22
    4218:	50 e0       	ldi	r21, 0x00	; 0
    421a:	fd 01       	movw	r30, r26
    421c:	e4 0f       	add	r30, r20
    421e:	f5 1f       	adc	r31, r21
    4220:	92 81       	ldd	r25, Z+2	; 0x02
    4222:	92 95       	swap	r25
    4224:	9f 70       	andi	r25, 0x0F	; 15
    4226:	9a 30       	cpi	r25, 0x0A	; 10
    4228:	10 f0       	brcs	.+4      	; 0x422e <lora_driver_sendUploadMessage+0x40>
    422a:	99 5c       	subi	r25, 0xC9	; 201
    422c:	01 c0       	rjmp	.+2      	; 0x4230 <lora_driver_sendUploadMessage+0x42>
    422e:	90 5d       	subi	r25, 0xD0	; 208
    4230:	f9 01       	movw	r30, r18
    4232:	e9 50       	subi	r30, 0x09	; 9
    4234:	f8 4e       	sbci	r31, 0xE8	; 232
    4236:	90 83       	st	Z, r25
    4238:	2f 5f       	subi	r18, 0xFF	; 255
    423a:	3f 4f       	sbci	r19, 0xFF	; 255
    423c:	fd 01       	movw	r30, r26
    423e:	e4 0f       	add	r30, r20
    4240:	f5 1f       	adc	r31, r21
    4242:	92 81       	ldd	r25, Z+2	; 0x02
    4244:	9f 70       	andi	r25, 0x0F	; 15
    4246:	49 2f       	mov	r20, r25
    4248:	50 e0       	ldi	r21, 0x00	; 0
    424a:	4a 30       	cpi	r20, 0x0A	; 10
    424c:	51 05       	cpc	r21, r1
    424e:	14 f0       	brlt	.+4      	; 0x4254 <lora_driver_sendUploadMessage+0x66>
    4250:	99 5c       	subi	r25, 0xC9	; 201
    4252:	01 c0       	rjmp	.+2      	; 0x4256 <lora_driver_sendUploadMessage+0x68>
    4254:	90 5d       	subi	r25, 0xD0	; 208
    4256:	f9 01       	movw	r30, r18
    4258:	e9 50       	subi	r30, 0x09	; 9
    425a:	f8 4e       	sbci	r31, 0xE8	; 232
    425c:	90 83       	st	Z, r25
    425e:	7e 5f       	subi	r23, 0xFE	; 254
    4260:	6f 5f       	subi	r22, 0xFF	; 255
    4262:	11 96       	adiw	r26, 0x01	; 1
    4264:	9c 91       	ld	r25, X
    4266:	11 97       	sbiw	r26, 0x01	; 1
    4268:	69 17       	cp	r22, r25
    426a:	98 f2       	brcs	.-90     	; 0x4212 <lora_driver_sendUploadMessage+0x24>
    426c:	01 c0       	rjmp	.+2      	; 0x4270 <lora_driver_sendUploadMessage+0x82>
    426e:	70 e0       	ldi	r23, 0x00	; 0
    4270:	e7 2f       	mov	r30, r23
    4272:	f0 e0       	ldi	r31, 0x00	; 0
    4274:	e9 50       	subi	r30, 0x09	; 9
    4276:	f8 4e       	sbci	r31, 0xE8	; 232
    4278:	10 82       	st	Z, r1
    427a:	4c 91       	ld	r20, X
    427c:	81 11       	cpse	r24, r1
    427e:	03 c0       	rjmp	.+6      	; 0x4286 <lora_driver_sendUploadMessage+0x98>
    4280:	87 eb       	ldi	r24, 0xB7	; 183
    4282:	96 e0       	ldi	r25, 0x06	; 6
    4284:	02 c0       	rjmp	.+4      	; 0x428a <lora_driver_sendUploadMessage+0x9c>
    4286:	89 eb       	ldi	r24, 0xB9	; 185
    4288:	96 e0       	ldi	r25, 0x06	; 6
    428a:	27 ef       	ldi	r18, 0xF7	; 247
    428c:	37 e1       	ldi	r19, 0x17	; 23
    428e:	3f 93       	push	r19
    4290:	2f 93       	push	r18
    4292:	1f 92       	push	r1
    4294:	4f 93       	push	r20
    4296:	9f 93       	push	r25
    4298:	8f 93       	push	r24
    429a:	8d eb       	ldi	r24, 0xBD	; 189
    429c:	96 e0       	ldi	r25, 0x06	; 6
    429e:	9f 93       	push	r25
    42a0:	8f 93       	push	r24
    42a2:	89 e3       	ldi	r24, 0x39	; 57
    42a4:	98 e1       	ldi	r25, 0x18	; 24
    42a6:	9f 93       	push	r25
    42a8:	8f 93       	push	r24
    42aa:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    42ae:	60 e0       	ldi	r22, 0x00	; 0
    42b0:	70 e0       	ldi	r23, 0x00	; 0
    42b2:	89 e3       	ldi	r24, 0x39	; 57
    42b4:	98 e1       	ldi	r25, 0x18	; 24
    42b6:	b3 de       	rcall	.-666    	; 0x401e <_uploadMessageRc>
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
    42c2:	81 11       	cpse	r24, r1
    42c4:	59 c0       	rjmp	.+178    	; 0x4378 <lora_driver_sendUploadMessage+0x18a>
    42c6:	08 e2       	ldi	r16, 0x28	; 40
    42c8:	15 e0       	ldi	r17, 0x05	; 5
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	4d e2       	ldi	r20, 0x2D	; 45
    42d0:	50 e0       	ldi	r21, 0x00	; 0
    42d2:	66 e6       	ldi	r22, 0x66	; 102
    42d4:	78 e1       	ldi	r23, 0x18	; 24
    42d6:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <_serialReplyBufferHandle>
    42da:	90 91 de 17 	lds	r25, 0x17DE	; 0x8017de <_serialReplyBufferHandle+0x1>
    42de:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xStreamBufferReceive>
    42e2:	88 23       	and	r24, r24
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <lora_driver_sendUploadMessage+0xfa>
    42e6:	47 c0       	rjmp	.+142    	; 0x4376 <lora_driver_sendUploadMessage+0x188>
    42e8:	86 e6       	ldi	r24, 0x66	; 102
    42ea:	98 e1       	ldi	r25, 0x18	; 24
    42ec:	23 de       	rcall	.-954    	; 0x3f34 <_reply2ReturnCode>
    42ee:	8e 30       	cpi	r24, 0x0E	; 14
    42f0:	09 f0       	breq	.+2      	; 0x42f4 <lora_driver_sendUploadMessage+0x106>
    42f2:	42 c0       	rjmp	.+132    	; 0x4378 <lora_driver_sendUploadMessage+0x18a>
    42f4:	87 e0       	ldi	r24, 0x07	; 7
    42f6:	89 83       	std	Y+1, r24	; 0x01
    42f8:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <_downlinkMessageBuffer>
    42fc:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <_downlinkMessageBuffer+0x1>
    4300:	89 2b       	or	r24, r25
    4302:	a9 f1       	breq	.+106    	; 0x436e <lora_driver_sendUploadMessage+0x180>
    4304:	be 01       	movw	r22, r28
    4306:	6f 5f       	subi	r22, 0xFF	; 255
    4308:	7f 4f       	sbci	r23, 0xFF	; 255
    430a:	86 e6       	ldi	r24, 0x66	; 102
    430c:	98 e1       	ldi	r25, 0x18	; 24
    430e:	68 d1       	rcall	.+720    	; 0x45e0 <decode_port_no>
    4310:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <_downlinkPayload>
    4314:	e9 81       	ldd	r30, Y+1	; 0x01
    4316:	f0 e0       	ldi	r31, 0x00	; 0
    4318:	ea 59       	subi	r30, 0x9A	; 154
    431a:	f7 4e       	sbci	r31, 0xE7	; 231
    431c:	df 01       	movw	r26, r30
    431e:	0d 90       	ld	r0, X+
    4320:	00 20       	and	r0, r0
    4322:	e9 f7       	brne	.-6      	; 0x431e <lora_driver_sendUploadMessage+0x130>
    4324:	11 97       	sbiw	r26, 0x01	; 1
    4326:	ae 1b       	sub	r26, r30
    4328:	bf 0b       	sbc	r27, r31
    432a:	aa 23       	and	r26, r26
    432c:	91 f0       	breq	.+36     	; 0x4352 <lora_driver_sendUploadMessage+0x164>
    432e:	bb 27       	eor	r27, r27
    4330:	cd 01       	movw	r24, r26
    4332:	01 97       	sbiw	r24, 0x01	; 1
    4334:	9c 01       	movw	r18, r24
    4336:	12 f4       	brpl	.+4      	; 0x433c <lora_driver_sendUploadMessage+0x14e>
    4338:	2f 5f       	subi	r18, 0xFF	; 255
    433a:	3f 4f       	sbci	r19, 0xFF	; 255
    433c:	35 95       	asr	r19
    433e:	27 95       	ror	r18
    4340:	20 93 e2 17 	sts	0x17E2, r18	; 0x8017e2 <_downlinkPayload+0x1>
    4344:	af 01       	movw	r20, r30
    4346:	4f 5f       	subi	r20, 0xFF	; 255
    4348:	5f 4f       	sbci	r21, 0xFF	; 255
    434a:	64 e1       	ldi	r22, 0x14	; 20
    434c:	83 ee       	ldi	r24, 0xE3	; 227
    434e:	97 e1       	ldi	r25, 0x17	; 23
    4350:	73 d1       	rcall	.+742    	; 0x4638 <decode_hexadecimal_string_bytes>
    4352:	01 e0       	ldi	r16, 0x01	; 1
    4354:	10 e0       	ldi	r17, 0x00	; 0
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	46 e1       	ldi	r20, 0x16	; 22
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	61 ee       	ldi	r22, 0xE1	; 225
    4360:	77 e1       	ldi	r23, 0x17	; 23
    4362:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <_downlinkMessageBuffer>
    4366:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <_downlinkMessageBuffer+0x1>
    436a:	0e 94 ad 09 	call	0x135a	; 0x135a <xStreamBufferSend>
    436e:	8e e0       	ldi	r24, 0x0E	; 14
    4370:	03 c0       	rjmp	.+6      	; 0x4378 <lora_driver_sendUploadMessage+0x18a>
    4372:	84 e1       	ldi	r24, 0x14	; 20
    4374:	01 c0       	rjmp	.+2      	; 0x4378 <lora_driver_sendUploadMessage+0x18a>
    4376:	80 e0       	ldi	r24, 0x00	; 0
    4378:	0f 90       	pop	r0
    437a:	df 91       	pop	r29
    437c:	cf 91       	pop	r28
    437e:	1f 91       	pop	r17
    4380:	0f 91       	pop	r16
    4382:	08 95       	ret

00004384 <lora_driver_setAdaptiveDataRate>:
    4384:	81 30       	cpi	r24, 0x01	; 1
    4386:	19 f0       	breq	.+6      	; 0x438e <lora_driver_setAdaptiveDataRate+0xa>
    4388:	6d ec       	ldi	r22, 0xCD	; 205
    438a:	76 e0       	ldi	r23, 0x06	; 6
    438c:	02 c0       	rjmp	.+4      	; 0x4392 <lora_driver_setAdaptiveDataRate+0xe>
    438e:	66 ea       	ldi	r22, 0xA6	; 166
    4390:	77 e0       	ldi	r23, 0x07	; 7
    4392:	81 ed       	ldi	r24, 0xD1	; 209
    4394:	96 e0       	ldi	r25, 0x06	; 6
    4396:	43 ce       	rjmp	.-890    	; 0x401e <_uploadMessageRc>
    4398:	08 95       	ret

0000439a <lora_driver_setReceiveDelay>:
    439a:	9f 93       	push	r25
    439c:	8f 93       	push	r24
    439e:	82 e0       	ldi	r24, 0x02	; 2
    43a0:	97 e0       	ldi	r25, 0x07	; 7
    43a2:	9f 93       	push	r25
    43a4:	8f 93       	push	r24
    43a6:	89 e3       	ldi	r24, 0x39	; 57
    43a8:	98 e1       	ldi	r25, 0x18	; 24
    43aa:	9f 93       	push	r25
    43ac:	8f 93       	push	r24
    43ae:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    43b2:	60 e0       	ldi	r22, 0x00	; 0
    43b4:	70 e0       	ldi	r23, 0x00	; 0
    43b6:	89 e3       	ldi	r24, 0x39	; 57
    43b8:	98 e1       	ldi	r25, 0x18	; 24
    43ba:	31 de       	rcall	.-926    	; 0x401e <_uploadMessageRc>
    43bc:	0f 90       	pop	r0
    43be:	0f 90       	pop	r0
    43c0:	0f 90       	pop	r0
    43c2:	0f 90       	pop	r0
    43c4:	0f 90       	pop	r0
    43c6:	0f 90       	pop	r0
    43c8:	08 95       	ret

000043ca <lora_driver_configureToEu868>:
    43ca:	2f 92       	push	r2
    43cc:	3f 92       	push	r3
    43ce:	4f 92       	push	r4
    43d0:	5f 92       	push	r5
    43d2:	6f 92       	push	r6
    43d4:	7f 92       	push	r7
    43d6:	8f 92       	push	r8
    43d8:	9f 92       	push	r9
    43da:	af 92       	push	r10
    43dc:	bf 92       	push	r11
    43de:	cf 92       	push	r12
    43e0:	df 92       	push	r13
    43e2:	ef 92       	push	r14
    43e4:	ff 92       	push	r15
    43e6:	0f 93       	push	r16
    43e8:	1f 93       	push	r17
    43ea:	cf 93       	push	r28
    43ec:	df 93       	push	r29
    43ee:	cd b7       	in	r28, 0x3d	; 61
    43f0:	de b7       	in	r29, 0x3e	; 62
    43f2:	a0 97       	sbiw	r28, 0x20	; 32
    43f4:	0f b6       	in	r0, 0x3f	; 63
    43f6:	f8 94       	cli
    43f8:	de bf       	out	0x3e, r29	; 62
    43fa:	0f be       	out	0x3f, r0	; 63
    43fc:	cd bf       	out	0x3d, r28	; 61
    43fe:	6f e2       	ldi	r22, 0x2F	; 47
    4400:	77 e0       	ldi	r23, 0x07	; 7
    4402:	8b e3       	ldi	r24, 0x3B	; 59
    4404:	97 e0       	ldi	r25, 0x07	; 7
    4406:	3c dd       	rcall	.-1416   	; 0x3e80 <_uploadMessage>
    4408:	95 dd       	rcall	.-1238   	; 0x3f34 <_reply2ReturnCode>
    440a:	81 11       	cpse	r24, r1
    440c:	a3 c0       	rjmp	.+326    	; 0x4554 <lora_driver_configureToEu868+0x18a>
    440e:	80 e2       	ldi	r24, 0x20	; 32
    4410:	e2 e2       	ldi	r30, 0x22	; 34
    4412:	f2 e0       	ldi	r31, 0x02	; 2
    4414:	de 01       	movw	r26, r28
    4416:	11 96       	adiw	r26, 0x01	; 1
    4418:	01 90       	ld	r0, Z+
    441a:	0d 92       	st	X+, r0
    441c:	8a 95       	dec	r24
    441e:	e1 f7       	brne	.-8      	; 0x4418 <lora_driver_configureToEu868+0x4e>
    4420:	9e 01       	movw	r18, r28
    4422:	2f 5f       	subi	r18, 0xFF	; 255
    4424:	3f 4f       	sbci	r19, 0xFF	; 255
    4426:	69 01       	movw	r12, r18
    4428:	e1 2c       	mov	r14, r1
    442a:	f1 2c       	mov	r15, r1
    442c:	0f 2e       	mov	r0, r31
    442e:	f7 e4       	ldi	r31, 0x47	; 71
    4430:	af 2e       	mov	r10, r31
    4432:	f7 e0       	ldi	r31, 0x07	; 7
    4434:	bf 2e       	mov	r11, r31
    4436:	f0 2d       	mov	r31, r0
    4438:	09 e3       	ldi	r16, 0x39	; 57
    443a:	18 e1       	ldi	r17, 0x18	; 24
    443c:	0f 2e       	mov	r0, r31
    443e:	f0 e6       	ldi	r31, 0x60	; 96
    4440:	4f 2e       	mov	r4, r31
    4442:	f7 e0       	ldi	r31, 0x07	; 7
    4444:	5f 2e       	mov	r5, r31
    4446:	f0 2d       	mov	r31, r0
    4448:	0f 2e       	mov	r0, r31
    444a:	f7 e7       	ldi	r31, 0x77	; 119
    444c:	8f 2e       	mov	r8, r31
    444e:	f7 e0       	ldi	r31, 0x07	; 7
    4450:	9f 2e       	mov	r9, r31
    4452:	f0 2d       	mov	r31, r0
    4454:	0f 2e       	mov	r0, r31
    4456:	f1 e9       	ldi	r31, 0x91	; 145
    4458:	6f 2e       	mov	r6, r31
    445a:	f7 e0       	ldi	r31, 0x07	; 7
    445c:	7f 2e       	mov	r7, r31
    445e:	f0 2d       	mov	r31, r0
    4460:	3e 2c       	mov	r3, r14
    4462:	2f 2c       	mov	r2, r15
    4464:	ff 92       	push	r15
    4466:	ef 92       	push	r14
    4468:	bf 92       	push	r11
    446a:	af 92       	push	r10
    446c:	1f 93       	push	r17
    446e:	0f 93       	push	r16
    4470:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    4474:	60 e0       	ldi	r22, 0x00	; 0
    4476:	70 e0       	ldi	r23, 0x00	; 0
    4478:	c8 01       	movw	r24, r16
    447a:	02 dd       	rcall	.-1532   	; 0x3e80 <_uploadMessage>
    447c:	5b dd       	rcall	.-1354   	; 0x3f34 <_reply2ReturnCode>
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
    4484:	0f 90       	pop	r0
    4486:	0f 90       	pop	r0
    4488:	0f 90       	pop	r0
    448a:	81 11       	cpse	r24, r1
    448c:	63 c0       	rjmp	.+198    	; 0x4554 <lora_driver_configureToEu868+0x18a>
    448e:	32 e0       	ldi	r19, 0x02	; 2
    4490:	3e 15       	cp	r19, r14
    4492:	e8 f4       	brcc	.+58     	; 0x44ce <lora_driver_configureToEu868+0x104>
    4494:	f6 01       	movw	r30, r12
    4496:	83 81       	ldd	r24, Z+3	; 0x03
    4498:	8f 93       	push	r24
    449a:	82 81       	ldd	r24, Z+2	; 0x02
    449c:	8f 93       	push	r24
    449e:	81 81       	ldd	r24, Z+1	; 0x01
    44a0:	8f 93       	push	r24
    44a2:	80 81       	ld	r24, Z
    44a4:	8f 93       	push	r24
    44a6:	ff 92       	push	r15
    44a8:	ef 92       	push	r14
    44aa:	5f 92       	push	r5
    44ac:	4f 92       	push	r4
    44ae:	1f 93       	push	r17
    44b0:	0f 93       	push	r16
    44b2:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    44b6:	60 e0       	ldi	r22, 0x00	; 0
    44b8:	70 e0       	ldi	r23, 0x00	; 0
    44ba:	c8 01       	movw	r24, r16
    44bc:	e1 dc       	rcall	.-1598   	; 0x3e80 <_uploadMessage>
    44be:	3a dd       	rcall	.-1420   	; 0x3f34 <_reply2ReturnCode>
    44c0:	0f b6       	in	r0, 0x3f	; 63
    44c2:	f8 94       	cli
    44c4:	de bf       	out	0x3e, r29	; 62
    44c6:	0f be       	out	0x3f, r0	; 63
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	81 11       	cpse	r24, r1
    44cc:	43 c0       	rjmp	.+134    	; 0x4554 <lora_driver_configureToEu868+0x18a>
    44ce:	2f 92       	push	r2
    44d0:	3f 92       	push	r3
    44d2:	9f 92       	push	r9
    44d4:	8f 92       	push	r8
    44d6:	1f 93       	push	r17
    44d8:	0f 93       	push	r16
    44da:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    44de:	60 e0       	ldi	r22, 0x00	; 0
    44e0:	70 e0       	ldi	r23, 0x00	; 0
    44e2:	c8 01       	movw	r24, r16
    44e4:	cd dc       	rcall	.-1638   	; 0x3e80 <_uploadMessage>
    44e6:	26 dd       	rcall	.-1460   	; 0x3f34 <_reply2ReturnCode>
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	0f 90       	pop	r0
    44f2:	0f 90       	pop	r0
    44f4:	81 11       	cpse	r24, r1
    44f6:	2e c0       	rjmp	.+92     	; 0x4554 <lora_driver_configureToEu868+0x18a>
    44f8:	2f 92       	push	r2
    44fa:	3f 92       	push	r3
    44fc:	7f 92       	push	r7
    44fe:	6f 92       	push	r6
    4500:	1f 93       	push	r17
    4502:	0f 93       	push	r16
    4504:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <sprintf>
    4508:	60 e0       	ldi	r22, 0x00	; 0
    450a:	70 e0       	ldi	r23, 0x00	; 0
    450c:	c8 01       	movw	r24, r16
    450e:	b8 dc       	rcall	.-1680   	; 0x3e80 <_uploadMessage>
    4510:	11 dd       	rcall	.-1502   	; 0x3f34 <_reply2ReturnCode>
    4512:	0f 90       	pop	r0
    4514:	0f 90       	pop	r0
    4516:	0f 90       	pop	r0
    4518:	0f 90       	pop	r0
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	81 11       	cpse	r24, r1
    4520:	19 c0       	rjmp	.+50     	; 0x4554 <lora_driver_configureToEu868+0x18a>
    4522:	3f ef       	ldi	r19, 0xFF	; 255
    4524:	e3 1a       	sub	r14, r19
    4526:	f3 0a       	sbc	r15, r19
    4528:	84 e0       	ldi	r24, 0x04	; 4
    452a:	c8 0e       	add	r12, r24
    452c:	d1 1c       	adc	r13, r1
    452e:	98 e0       	ldi	r25, 0x08	; 8
    4530:	e9 16       	cp	r14, r25
    4532:	f1 04       	cpc	r15, r1
    4534:	09 f0       	breq	.+2      	; 0x4538 <lora_driver_configureToEu868+0x16e>
    4536:	94 cf       	rjmp	.-216    	; 0x4460 <lora_driver_configureToEu868+0x96>
    4538:	60 e0       	ldi	r22, 0x00	; 0
    453a:	70 e0       	ldi	r23, 0x00	; 0
    453c:	89 ea       	ldi	r24, 0xA9	; 169
    453e:	97 e0       	ldi	r25, 0x07	; 7
    4540:	9f dc       	rcall	.-1730   	; 0x3e80 <_uploadMessage>
    4542:	f8 dc       	rcall	.-1552   	; 0x3f34 <_reply2ReturnCode>
    4544:	81 11       	cpse	r24, r1
    4546:	06 c0       	rjmp	.+12     	; 0x4554 <lora_driver_configureToEu868+0x18a>
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	70 e0       	ldi	r23, 0x00	; 0
    454c:	8a eb       	ldi	r24, 0xBA	; 186
    454e:	97 e0       	ldi	r25, 0x07	; 7
    4550:	97 dc       	rcall	.-1746   	; 0x3e80 <_uploadMessage>
    4552:	f0 dc       	rcall	.-1568   	; 0x3f34 <_reply2ReturnCode>
    4554:	a0 96       	adiw	r28, 0x20	; 32
    4556:	0f b6       	in	r0, 0x3f	; 63
    4558:	f8 94       	cli
    455a:	de bf       	out	0x3e, r29	; 62
    455c:	0f be       	out	0x3f, r0	; 63
    455e:	cd bf       	out	0x3d, r28	; 61
    4560:	df 91       	pop	r29
    4562:	cf 91       	pop	r28
    4564:	1f 91       	pop	r17
    4566:	0f 91       	pop	r16
    4568:	ff 90       	pop	r15
    456a:	ef 90       	pop	r14
    456c:	df 90       	pop	r13
    456e:	cf 90       	pop	r12
    4570:	bf 90       	pop	r11
    4572:	af 90       	pop	r10
    4574:	9f 90       	pop	r9
    4576:	8f 90       	pop	r8
    4578:	7f 90       	pop	r7
    457a:	6f 90       	pop	r6
    457c:	5f 90       	pop	r5
    457e:	4f 90       	pop	r4
    4580:	3f 90       	pop	r3
    4582:	2f 90       	pop	r2
    4584:	08 95       	ret

00004586 <lora_driver_setOtaaIdentity>:
    4586:	ef 92       	push	r14
    4588:	ff 92       	push	r15
    458a:	0f 93       	push	r16
    458c:	1f 93       	push	r17
    458e:	cf 93       	push	r28
    4590:	df 93       	push	r29
    4592:	ec 01       	movw	r28, r24
    4594:	8b 01       	movw	r16, r22
    4596:	7a 01       	movw	r14, r20
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	f4 de       	rcall	.-536    	; 0x4384 <lora_driver_setAdaptiveDataRate>
    459c:	81 11       	cpse	r24, r1
    459e:	0d c0       	rjmp	.+26     	; 0x45ba <lora_driver_setOtaaIdentity+0x34>
    45a0:	ce 01       	movw	r24, r28
    45a2:	d4 dd       	rcall	.-1112   	; 0x414c <lora_driver_setApplicationIdentifier>
    45a4:	81 11       	cpse	r24, r1
    45a6:	09 c0       	rjmp	.+18     	; 0x45ba <lora_driver_setOtaaIdentity+0x34>
    45a8:	c8 01       	movw	r24, r16
    45aa:	e1 dd       	rcall	.-1086   	; 0x416e <lora_driver_setApplicationKey>
    45ac:	81 11       	cpse	r24, r1
    45ae:	05 c0       	rjmp	.+10     	; 0x45ba <lora_driver_setOtaaIdentity+0x34>
    45b0:	c7 01       	movw	r24, r14
    45b2:	bb dd       	rcall	.-1162   	; 0x412a <lora_driver_setDeviceIdentifier>
    45b4:	81 11       	cpse	r24, r1
    45b6:	01 c0       	rjmp	.+2      	; 0x45ba <lora_driver_setOtaaIdentity+0x34>
    45b8:	eb dd       	rcall	.-1066   	; 0x4190 <lora_driver_saveMac>
    45ba:	df 91       	pop	r29
    45bc:	cf 91       	pop	r28
    45be:	1f 91       	pop	r17
    45c0:	0f 91       	pop	r16
    45c2:	ff 90       	pop	r15
    45c4:	ef 90       	pop	r14
    45c6:	08 95       	ret

000045c8 <lora_driver_mapReturnCodeToText>:
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	fc 01       	movw	r30, r24
    45cc:	ee 0f       	add	r30, r30
    45ce:	ff 1f       	adc	r31, r31
    45d0:	8e 0f       	add	r24, r30
    45d2:	9f 1f       	adc	r25, r31
    45d4:	fc 01       	movw	r30, r24
    45d6:	ed 57       	subi	r30, 0x7D	; 125
    45d8:	f7 4f       	sbci	r31, 0xF7	; 247
    45da:	81 81       	ldd	r24, Z+1	; 0x01
    45dc:	92 81       	ldd	r25, Z+2	; 0x02
    45de:	08 95       	ret

000045e0 <decode_port_no>:
    45e0:	dc 01       	movw	r26, r24
    45e2:	00 97       	sbiw	r24, 0x00	; 0
    45e4:	29 f1       	breq	.+74     	; 0x4630 <decode_port_no+0x50>
    45e6:	fb 01       	movw	r30, r22
    45e8:	20 81       	ld	r18, Z
    45ea:	fc 01       	movw	r30, r24
    45ec:	01 90       	ld	r0, Z+
    45ee:	00 20       	and	r0, r0
    45f0:	e9 f7       	brne	.-6      	; 0x45ec <decode_port_no+0xc>
    45f2:	31 97       	sbiw	r30, 0x01	; 1
    45f4:	e8 1b       	sub	r30, r24
    45f6:	f9 0b       	sbc	r31, r25
    45f8:	82 2f       	mov	r24, r18
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	e8 17       	cp	r30, r24
    45fe:	f9 07       	cpc	r31, r25
    4600:	c8 f0       	brcs	.+50     	; 0x4634 <decode_port_no+0x54>
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	08 c0       	rjmp	.+16     	; 0x4616 <decode_port_no+0x36>
    4606:	88 0f       	add	r24, r24
    4608:	38 2f       	mov	r19, r24
    460a:	33 0f       	add	r19, r19
    460c:	33 0f       	add	r19, r19
    460e:	83 0f       	add	r24, r19
    4610:	80 53       	subi	r24, 0x30	; 48
    4612:	89 0f       	add	r24, r25
    4614:	2f 5f       	subi	r18, 0xFF	; 255
    4616:	fd 01       	movw	r30, r26
    4618:	e2 0f       	add	r30, r18
    461a:	f1 1d       	adc	r31, r1
    461c:	90 81       	ld	r25, Z
    461e:	30 ed       	ldi	r19, 0xD0	; 208
    4620:	39 0f       	add	r19, r25
    4622:	3a 30       	cpi	r19, 0x0A	; 10
    4624:	10 f4       	brcc	.+4      	; 0x462a <decode_port_no+0x4a>
    4626:	91 11       	cpse	r25, r1
    4628:	ee cf       	rjmp	.-36     	; 0x4606 <decode_port_no+0x26>
    462a:	fb 01       	movw	r30, r22
    462c:	20 83       	st	Z, r18
    462e:	08 95       	ret
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	08 95       	ret
    4634:	80 e0       	ldi	r24, 0x00	; 0
    4636:	08 95       	ret

00004638 <decode_hexadecimal_string_bytes>:
    4638:	0f 93       	push	r16
    463a:	1f 93       	push	r17
    463c:	cf 93       	push	r28
    463e:	df 93       	push	r29
    4640:	dc 01       	movw	r26, r24
    4642:	ea 01       	movw	r28, r20
    4644:	20 97       	sbiw	r28, 0x00	; 0
    4646:	e1 f1       	breq	.+120    	; 0x46c0 <decode_hexadecimal_string_bytes+0x88>
    4648:	fa 01       	movw	r30, r20
    464a:	01 90       	ld	r0, Z+
    464c:	00 20       	and	r0, r0
    464e:	e9 f7       	brne	.-6      	; 0x464a <decode_hexadecimal_string_bytes+0x12>
    4650:	31 97       	sbiw	r30, 0x01	; 1
    4652:	e4 1b       	sub	r30, r20
    4654:	f5 0b       	sbc	r31, r21
    4656:	32 97       	sbiw	r30, 0x02	; 2
    4658:	10 f5       	brcc	.+68     	; 0x469e <decode_hexadecimal_string_bytes+0x66>
    465a:	32 c0       	rjmp	.+100    	; 0x46c0 <decode_hexadecimal_string_bytes+0x88>
    465c:	8d 01       	movw	r16, r26
    465e:	04 0f       	add	r16, r20
    4660:	15 1f       	adc	r17, r21
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	ae 01       	movw	r20, r28
    4666:	42 0f       	add	r20, r18
    4668:	53 1f       	adc	r21, r19
    466a:	fa 01       	movw	r30, r20
    466c:	90 81       	ld	r25, Z
    466e:	91 34       	cpi	r25, 0x41	; 65
    4670:	28 f0       	brcs	.+10     	; 0x467c <decode_hexadecimal_string_bytes+0x44>
    4672:	97 53       	subi	r25, 0x37	; 55
    4674:	59 2f       	mov	r21, r25
    4676:	52 95       	swap	r21
    4678:	50 7f       	andi	r21, 0xF0	; 240
    467a:	03 c0       	rjmp	.+6      	; 0x4682 <decode_hexadecimal_string_bytes+0x4a>
    467c:	59 2f       	mov	r21, r25
    467e:	52 95       	swap	r21
    4680:	50 7f       	andi	r21, 0xF0	; 240
    4682:	2c 0f       	add	r18, r28
    4684:	3d 1f       	adc	r19, r29
    4686:	f9 01       	movw	r30, r18
    4688:	91 81       	ldd	r25, Z+1	; 0x01
    468a:	91 34       	cpi	r25, 0x41	; 65
    468c:	10 f0       	brcs	.+4      	; 0x4692 <decode_hexadecimal_string_bytes+0x5a>
    468e:	97 53       	subi	r25, 0x37	; 55
    4690:	01 c0       	rjmp	.+2      	; 0x4694 <decode_hexadecimal_string_bytes+0x5c>
    4692:	90 53       	subi	r25, 0x30	; 48
    4694:	95 0f       	add	r25, r21
    4696:	f8 01       	movw	r30, r16
    4698:	90 83       	st	Z, r25
    469a:	8f 5f       	subi	r24, 0xFF	; 255
    469c:	01 c0       	rjmp	.+2      	; 0x46a0 <decode_hexadecimal_string_bytes+0x68>
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	28 2f       	mov	r18, r24
    46a2:	22 0f       	add	r18, r18
    46a4:	48 2f       	mov	r20, r24
    46a6:	50 e0       	ldi	r21, 0x00	; 0
    46a8:	fe 01       	movw	r30, r28
    46aa:	01 90       	ld	r0, Z+
    46ac:	00 20       	and	r0, r0
    46ae:	e9 f7       	brne	.-6      	; 0x46aa <decode_hexadecimal_string_bytes+0x72>
    46b0:	31 97       	sbiw	r30, 0x01	; 1
    46b2:	ec 1b       	sub	r30, r28
    46b4:	fd 0b       	sbc	r31, r29
    46b6:	4e 17       	cp	r20, r30
    46b8:	5f 07       	cpc	r21, r31
    46ba:	10 f4       	brcc	.+4      	; 0x46c0 <decode_hexadecimal_string_bytes+0x88>
    46bc:	86 13       	cpse	r24, r22
    46be:	ce cf       	rjmp	.-100    	; 0x465c <decode_hexadecimal_string_bytes+0x24>
    46c0:	df 91       	pop	r29
    46c2:	cf 91       	pop	r28
    46c4:	1f 91       	pop	r17
    46c6:	0f 91       	pop	r16
    46c8:	08 95       	ret

000046ca <_serialCallBack>:
    46ca:	80 91 96 18 	lds	r24, 0x1896	; 0x801896 <crc_sum.1945>
    46ce:	86 0f       	add	r24, r22
    46d0:	80 93 96 18 	sts	0x1896, r24	; 0x801896 <crc_sum.1945>
    46d4:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <_mh_state>
    46d8:	91 30       	cpi	r25, 0x01	; 1
    46da:	79 f0       	breq	.+30     	; 0x46fa <_serialCallBack+0x30>
    46dc:	28 f0       	brcs	.+10     	; 0x46e8 <_serialCallBack+0x1e>
    46de:	92 30       	cpi	r25, 0x02	; 2
    46e0:	a9 f0       	breq	.+42     	; 0x470c <_serialCallBack+0x42>
    46e2:	93 30       	cpi	r25, 0x03	; 3
    46e4:	19 f1       	breq	.+70     	; 0x472c <_serialCallBack+0x62>
    46e6:	08 95       	ret
    46e8:	6f 3f       	cpi	r22, 0xFF	; 255
    46ea:	09 f0       	breq	.+2      	; 0x46ee <_serialCallBack+0x24>
    46ec:	48 c0       	rjmp	.+144    	; 0x477e <_serialCallBack+0xb4>
    46ee:	10 92 96 18 	sts	0x1896, r1	; 0x801896 <crc_sum.1945>
    46f2:	81 e0       	ldi	r24, 0x01	; 1
    46f4:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <_mh_state>
    46f8:	08 95       	ret
    46fa:	66 38       	cpi	r22, 0x86	; 134
    46fc:	09 f0       	breq	.+2      	; 0x4700 <_serialCallBack+0x36>
    46fe:	3f c0       	rjmp	.+126    	; 0x477e <_serialCallBack+0xb4>
    4700:	10 92 95 18 	sts	0x1895, r1	; 0x801895 <inDex.1943>
    4704:	82 e0       	ldi	r24, 0x02	; 2
    4706:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <_mh_state>
    470a:	08 95       	ret
    470c:	e0 91 95 18 	lds	r30, 0x1895	; 0x801895 <inDex.1943>
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	8e 0f       	add	r24, r30
    4714:	80 93 95 18 	sts	0x1895, r24	; 0x801895 <inDex.1943>
    4718:	f0 e0       	ldi	r31, 0x00	; 0
    471a:	ed 56       	subi	r30, 0x6D	; 109
    471c:	f7 4e       	sbci	r31, 0xE7	; 231
    471e:	60 83       	st	Z, r22
    4720:	82 30       	cpi	r24, 0x02	; 2
    4722:	69 f5       	brne	.+90     	; 0x477e <_serialCallBack+0xb4>
    4724:	83 e0       	ldi	r24, 0x03	; 3
    4726:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <_mh_state>
    472a:	08 95       	ret
    472c:	90 91 95 18 	lds	r25, 0x1895	; 0x801895 <inDex.1943>
    4730:	21 e0       	ldi	r18, 0x01	; 1
    4732:	29 0f       	add	r18, r25
    4734:	20 93 95 18 	sts	0x1895, r18	; 0x801895 <inDex.1943>
    4738:	96 30       	cpi	r25, 0x06	; 6
    473a:	09 f5       	brne	.+66     	; 0x477e <_serialCallBack+0xb4>
    473c:	81 11       	cpse	r24, r1
    473e:	0e c0       	rjmp	.+28     	; 0x475c <_serialCallBack+0x92>
    4740:	e3 e9       	ldi	r30, 0x93	; 147
    4742:	f8 e1       	ldi	r31, 0x18	; 24
    4744:	80 81       	ld	r24, Z
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	98 2f       	mov	r25, r24
    474a:	88 27       	eor	r24, r24
    474c:	21 81       	ldd	r18, Z+1	; 0x01
    474e:	82 0f       	add	r24, r18
    4750:	91 1d       	adc	r25, r1
    4752:	90 93 9b 18 	sts	0x189B, r25	; 0x80189b <_ppm+0x1>
    4756:	80 93 9a 18 	sts	0x189A, r24	; 0x80189a <_ppm>
    475a:	04 c0       	rjmp	.+8      	; 0x4764 <_serialCallBack+0x9a>
    475c:	10 92 9b 18 	sts	0x189B, r1	; 0x80189b <_ppm+0x1>
    4760:	10 92 9a 18 	sts	0x189A, r1	; 0x80189a <_ppm>
    4764:	10 92 99 18 	sts	0x1899, r1	; 0x801899 <_mh_state>
    4768:	e0 91 97 18 	lds	r30, 0x1897	; 0x801897 <_appCallBack>
    476c:	f0 91 98 18 	lds	r31, 0x1898	; 0x801898 <_appCallBack+0x1>
    4770:	30 97       	sbiw	r30, 0x00	; 0
    4772:	29 f0       	breq	.+10     	; 0x477e <_serialCallBack+0xb4>
    4774:	80 91 9a 18 	lds	r24, 0x189A	; 0x80189a <_ppm>
    4778:	90 91 9b 18 	lds	r25, 0x189B	; 0x80189b <_ppm+0x1>
    477c:	19 95       	eicall
    477e:	08 95       	ret

00004780 <mh_z19_initialise>:
    4780:	8f 92       	push	r8
    4782:	9f 92       	push	r9
    4784:	af 92       	push	r10
    4786:	cf 92       	push	r12
    4788:	ef 92       	push	r14
    478a:	0f 93       	push	r16
    478c:	0f 2e       	mov	r0, r31
    478e:	f5 e6       	ldi	r31, 0x65	; 101
    4790:	8f 2e       	mov	r8, r31
    4792:	f3 e2       	ldi	r31, 0x23	; 35
    4794:	9f 2e       	mov	r9, r31
    4796:	f0 2d       	mov	r31, r0
    4798:	68 94       	set
    479a:	aa 24       	eor	r10, r10
    479c:	a4 f8       	bld	r10, 4
    479e:	68 94       	set
    47a0:	cc 24       	eor	r12, r12
    47a2:	c4 f8       	bld	r12, 4
    47a4:	e1 2c       	mov	r14, r1
    47a6:	00 e0       	ldi	r16, 0x00	; 0
    47a8:	23 e0       	ldi	r18, 0x03	; 3
    47aa:	40 e8       	ldi	r20, 0x80	; 128
    47ac:	55 e2       	ldi	r21, 0x25	; 37
    47ae:	60 e0       	ldi	r22, 0x00	; 0
    47b0:	70 e0       	ldi	r23, 0x00	; 0
    47b2:	3f d0       	rcall	.+126    	; 0x4832 <serial_create>
    47b4:	90 93 9d 18 	sts	0x189D, r25	; 0x80189d <_serial+0x1>
    47b8:	80 93 9c 18 	sts	0x189C, r24	; 0x80189c <_serial>
    47bc:	0f 91       	pop	r16
    47be:	ef 90       	pop	r14
    47c0:	cf 90       	pop	r12
    47c2:	af 90       	pop	r10
    47c4:	9f 90       	pop	r9
    47c6:	8f 90       	pop	r8
    47c8:	08 95       	ret

000047ca <mh_z19_injectCallBack>:
    47ca:	90 93 98 18 	sts	0x1898, r25	; 0x801898 <_appCallBack+0x1>
    47ce:	80 93 97 18 	sts	0x1897, r24	; 0x801897 <_appCallBack>
    47d2:	08 95       	ret

000047d4 <mh_z19_takeMeassuring>:
    47d4:	cf 93       	push	r28
    47d6:	df 93       	push	r29
    47d8:	cd b7       	in	r28, 0x3d	; 61
    47da:	de b7       	in	r29, 0x3e	; 62
    47dc:	29 97       	sbiw	r28, 0x09	; 9
    47de:	0f b6       	in	r0, 0x3f	; 63
    47e0:	f8 94       	cli
    47e2:	de bf       	out	0x3e, r29	; 62
    47e4:	0f be       	out	0x3f, r0	; 63
    47e6:	cd bf       	out	0x3d, r28	; 61
    47e8:	89 e0       	ldi	r24, 0x09	; 9
    47ea:	e2 e4       	ldi	r30, 0x42	; 66
    47ec:	f2 e0       	ldi	r31, 0x02	; 2
    47ee:	9e 01       	movw	r18, r28
    47f0:	2f 5f       	subi	r18, 0xFF	; 255
    47f2:	3f 4f       	sbci	r19, 0xFF	; 255
    47f4:	d9 01       	movw	r26, r18
    47f6:	01 90       	ld	r0, Z+
    47f8:	0d 92       	st	X+, r0
    47fa:	8a 95       	dec	r24
    47fc:	e1 f7       	brne	.-8      	; 0x47f6 <mh_z19_takeMeassuring+0x22>
    47fe:	10 92 9b 18 	sts	0x189B, r1	; 0x80189b <_ppm+0x1>
    4802:	10 92 9a 18 	sts	0x189A, r1	; 0x80189a <_ppm>
    4806:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <_serial>
    480a:	90 91 9d 18 	lds	r25, 0x189D	; 0x80189d <_serial+0x1>
    480e:	00 97       	sbiw	r24, 0x00	; 0
    4810:	31 f0       	breq	.+12     	; 0x481e <mh_z19_takeMeassuring+0x4a>
    4812:	42 2f       	mov	r20, r18
    4814:	53 2f       	mov	r21, r19
    4816:	69 e0       	ldi	r22, 0x09	; 9
    4818:	d9 d0       	rcall	.+434    	; 0x49cc <serial_sendBytes>
    481a:	80 e0       	ldi	r24, 0x00	; 0
    481c:	01 c0       	rjmp	.+2      	; 0x4820 <mh_z19_takeMeassuring+0x4c>
    481e:	82 e0       	ldi	r24, 0x02	; 2
    4820:	29 96       	adiw	r28, 0x09	; 9
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
    482c:	df 91       	pop	r29
    482e:	cf 91       	pop	r28
    4830:	08 95       	ret

00004832 <serial_create>:
    4832:	2f 92       	push	r2
    4834:	3f 92       	push	r3
    4836:	4f 92       	push	r4
    4838:	5f 92       	push	r5
    483a:	6f 92       	push	r6
    483c:	7f 92       	push	r7
    483e:	8f 92       	push	r8
    4840:	9f 92       	push	r9
    4842:	af 92       	push	r10
    4844:	cf 92       	push	r12
    4846:	ef 92       	push	r14
    4848:	ff 92       	push	r15
    484a:	0f 93       	push	r16
    484c:	1f 93       	push	r17
    484e:	cf 93       	push	r28
    4850:	df 93       	push	r29
    4852:	cd b7       	in	r28, 0x3d	; 61
    4854:	de b7       	in	r29, 0x3e	; 62
    4856:	f8 2e       	mov	r15, r24
    4858:	2a 01       	movw	r4, r20
    485a:	3b 01       	movw	r6, r22
    485c:	88 e0       	ldi	r24, 0x08	; 8
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <malloc>
    4864:	8c 01       	movw	r16, r24
    4866:	8f 2d       	mov	r24, r15
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	fc 01       	movw	r30, r24
    486c:	ee 0f       	add	r30, r30
    486e:	ff 1f       	adc	r31, r31
    4870:	e2 56       	subi	r30, 0x62	; 98
    4872:	f7 4e       	sbci	r31, 0xE7	; 231
    4874:	11 83       	std	Z+1, r17	; 0x01
    4876:	00 83       	st	Z, r16
    4878:	01 15       	cp	r16, r1
    487a:	11 05       	cpc	r17, r1
    487c:	09 f4       	brne	.+2      	; 0x4880 <serial_create+0x4e>
    487e:	69 c0       	rjmp	.+210    	; 0x4952 <serial_create+0x120>
    4880:	88 0f       	add	r24, r24
    4882:	99 1f       	adc	r25, r25
    4884:	fc 01       	movw	r30, r24
    4886:	e5 5f       	subi	r30, 0xF5	; 245
    4888:	fd 4f       	sbci	r31, 0xFD	; 253
    488a:	80 81       	ld	r24, Z
    488c:	91 81       	ldd	r25, Z+1	; 0x01
    488e:	d8 01       	movw	r26, r16
    4890:	8d 93       	st	X+, r24
    4892:	9c 93       	st	X, r25
    4894:	6c 2d       	mov	r22, r12
    4896:	70 e0       	ldi	r23, 0x00	; 0
    4898:	84 e0       	ldi	r24, 0x04	; 4
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	0e 94 56 2d 	call	0x5aac	; 0x5aac <calloc>
    48a0:	1c 01       	movw	r2, r24
    48a2:	61 e0       	ldi	r22, 0x01	; 1
    48a4:	70 e0       	ldi	r23, 0x00	; 0
    48a6:	86 e0       	ldi	r24, 0x06	; 6
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	0e 94 56 2d 	call	0x5aac	; 0x5aac <calloc>
    48ae:	7c 01       	movw	r14, r24
    48b0:	4c 2d       	mov	r20, r12
    48b2:	b1 01       	movw	r22, r2
    48b4:	f1 d6       	rcall	.+3554   	; 0x5698 <fifo_init>
    48b6:	f8 01       	movw	r30, r16
    48b8:	f5 82       	std	Z+5, r15	; 0x05
    48ba:	e4 82       	std	Z+4, r14	; 0x04
    48bc:	6a 2d       	mov	r22, r10
    48be:	70 e0       	ldi	r23, 0x00	; 0
    48c0:	84 e0       	ldi	r24, 0x04	; 4
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	0e 94 56 2d 	call	0x5aac	; 0x5aac <calloc>
    48c8:	1c 01       	movw	r2, r24
    48ca:	61 e0       	ldi	r22, 0x01	; 1
    48cc:	70 e0       	ldi	r23, 0x00	; 0
    48ce:	86 e0       	ldi	r24, 0x06	; 6
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	0e 94 56 2d 	call	0x5aac	; 0x5aac <calloc>
    48d6:	7c 01       	movw	r14, r24
    48d8:	4a 2d       	mov	r20, r10
    48da:	b1 01       	movw	r22, r2
    48dc:	dd d6       	rcall	.+3514   	; 0x5698 <fifo_init>
    48de:	d8 01       	movw	r26, r16
    48e0:	13 96       	adiw	r26, 0x03	; 3
    48e2:	fc 92       	st	X, r15
    48e4:	ee 92       	st	-X, r14
    48e6:	12 97       	sbiw	r26, 0x02	; 2
    48e8:	17 96       	adiw	r26, 0x07	; 7
    48ea:	9c 92       	st	X, r9
    48ec:	8e 92       	st	-X, r8
    48ee:	16 97       	sbiw	r26, 0x06	; 6
    48f0:	ff b6       	in	r15, 0x3f	; 63
    48f2:	f8 94       	cli
    48f4:	ed 91       	ld	r30, X+
    48f6:	fc 91       	ld	r31, X
    48f8:	11 97       	sbiw	r26, 0x01	; 1
    48fa:	36 97       	sbiw	r30, 0x06	; 6
    48fc:	80 81       	ld	r24, Z
    48fe:	82 60       	ori	r24, 0x02	; 2
    4900:	80 83       	st	Z, r24
    4902:	8d 90       	ld	r8, X+
    4904:	9c 90       	ld	r9, X
    4906:	c3 01       	movw	r24, r6
    4908:	b2 01       	movw	r22, r4
    490a:	b4 d7       	rcall	.+3944   	; 0x5874 <__floatunsisf>
    490c:	20 e0       	ldi	r18, 0x00	; 0
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	40 e0       	ldi	r20, 0x00	; 0
    4912:	51 e4       	ldi	r21, 0x41	; 65
    4914:	0e 94 9f 2c 	call	0x593e	; 0x593e <__mulsf3>
    4918:	9b 01       	movw	r18, r22
    491a:	ac 01       	movw	r20, r24
    491c:	60 e0       	ldi	r22, 0x00	; 0
    491e:	74 e2       	ldi	r23, 0x24	; 36
    4920:	84 e7       	ldi	r24, 0x74	; 116
    4922:	9b e4       	ldi	r25, 0x4B	; 75
    4924:	3c d7       	rcall	.+3704   	; 0x579e <__divsf3>
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	40 e8       	ldi	r20, 0x80	; 128
    492c:	5f e3       	ldi	r21, 0x3F	; 63
    492e:	d0 d6       	rcall	.+3488   	; 0x56d0 <__subsf3>
    4930:	71 d9       	rcall	.-3358   	; 0x3c14 <__fixunssfsi>
    4932:	f4 01       	movw	r30, r8
    4934:	32 97       	sbiw	r30, 0x02	; 2
    4936:	60 83       	st	Z, r22
    4938:	d8 01       	movw	r26, r16
    493a:	ed 91       	ld	r30, X+
    493c:	fc 91       	ld	r31, X
    493e:	11 97       	sbiw	r26, 0x01	; 1
    4940:	35 97       	sbiw	r30, 0x05	; 5
    4942:	88 e9       	ldi	r24, 0x98	; 152
    4944:	80 83       	st	Z, r24
    4946:	ed 91       	ld	r30, X+
    4948:	fc 91       	ld	r31, X
    494a:	34 97       	sbiw	r30, 0x04	; 4
    494c:	86 e0       	ldi	r24, 0x06	; 6
    494e:	80 83       	st	Z, r24
    4950:	ff be       	out	0x3f, r15	; 63
    4952:	c8 01       	movw	r24, r16
    4954:	df 91       	pop	r29
    4956:	cf 91       	pop	r28
    4958:	1f 91       	pop	r17
    495a:	0f 91       	pop	r16
    495c:	ff 90       	pop	r15
    495e:	ef 90       	pop	r14
    4960:	cf 90       	pop	r12
    4962:	af 90       	pop	r10
    4964:	9f 90       	pop	r9
    4966:	8f 90       	pop	r8
    4968:	7f 90       	pop	r7
    496a:	6f 90       	pop	r6
    496c:	5f 90       	pop	r5
    496e:	4f 90       	pop	r4
    4970:	3f 90       	pop	r3
    4972:	2f 90       	pop	r2
    4974:	08 95       	ret

00004976 <serial_sendByte>:
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
    497a:	dc 01       	movw	r26, r24
    497c:	89 2b       	or	r24, r25
    497e:	01 f1       	breq	.+64     	; 0x49c0 <serial_sendByte+0x4a>
    4980:	12 96       	adiw	r26, 0x02	; 2
    4982:	ed 91       	ld	r30, X+
    4984:	fc 91       	ld	r31, X
    4986:	13 97       	sbiw	r26, 0x03	; 3
    4988:	93 81       	ldd	r25, Z+3	; 0x03
    498a:	82 81       	ldd	r24, Z+2	; 0x02
    498c:	25 81       	ldd	r18, Z+5	; 0x05
    498e:	98 1b       	sub	r25, r24
    4990:	92 23       	and	r25, r18
    4992:	84 81       	ldd	r24, Z+4	; 0x04
    4994:	98 17       	cp	r25, r24
    4996:	b1 f0       	breq	.+44     	; 0x49c4 <serial_sendByte+0x4e>
    4998:	83 81       	ldd	r24, Z+3	; 0x03
    499a:	26 95       	lsr	r18
    499c:	28 23       	and	r18, r24
    499e:	c0 81       	ld	r28, Z
    49a0:	d1 81       	ldd	r29, Z+1	; 0x01
    49a2:	c2 0f       	add	r28, r18
    49a4:	d1 1d       	adc	r29, r1
    49a6:	68 83       	st	Y, r22
    49a8:	8f 5f       	subi	r24, 0xFF	; 255
    49aa:	95 81       	ldd	r25, Z+5	; 0x05
    49ac:	89 23       	and	r24, r25
    49ae:	83 83       	std	Z+3, r24	; 0x03
    49b0:	ed 91       	ld	r30, X+
    49b2:	fc 91       	ld	r31, X
    49b4:	35 97       	sbiw	r30, 0x05	; 5
    49b6:	80 81       	ld	r24, Z
    49b8:	80 62       	ori	r24, 0x20	; 32
    49ba:	80 83       	st	Z, r24
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	03 c0       	rjmp	.+6      	; 0x49c6 <serial_sendByte+0x50>
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	01 c0       	rjmp	.+2      	; 0x49c6 <serial_sendByte+0x50>
    49c4:	82 e0       	ldi	r24, 0x02	; 2
    49c6:	df 91       	pop	r29
    49c8:	cf 91       	pop	r28
    49ca:	08 95       	ret

000049cc <serial_sendBytes>:
    49cc:	ef 92       	push	r14
    49ce:	ff 92       	push	r15
    49d0:	0f 93       	push	r16
    49d2:	1f 93       	push	r17
    49d4:	cf 93       	push	r28
    49d6:	df 93       	push	r29
    49d8:	7c 01       	movw	r14, r24
    49da:	00 97       	sbiw	r24, 0x00	; 0
    49dc:	09 f4       	brne	.+2      	; 0x49e0 <serial_sendBytes+0x14>
    49de:	41 c0       	rjmp	.+130    	; 0x4a62 <serial_sendBytes+0x96>
    49e0:	dc 01       	movw	r26, r24
    49e2:	12 96       	adiw	r26, 0x02	; 2
    49e4:	ed 91       	ld	r30, X+
    49e6:	fc 91       	ld	r31, X
    49e8:	13 97       	sbiw	r26, 0x03	; 3
    49ea:	93 81       	ldd	r25, Z+3	; 0x03
    49ec:	82 81       	ldd	r24, Z+2	; 0x02
    49ee:	98 1b       	sub	r25, r24
    49f0:	85 81       	ldd	r24, Z+5	; 0x05
    49f2:	98 23       	and	r25, r24
    49f4:	84 81       	ldd	r24, Z+4	; 0x04
    49f6:	89 1b       	sub	r24, r25
    49f8:	86 17       	cp	r24, r22
    49fa:	a8 f1       	brcs	.+106    	; 0x4a66 <serial_sendBytes+0x9a>
    49fc:	66 23       	and	r22, r22
    49fe:	41 f1       	breq	.+80     	; 0x4a50 <serial_sendBytes+0x84>
    4a00:	84 2f       	mov	r24, r20
    4a02:	95 2f       	mov	r25, r21
    4a04:	dc 01       	movw	r26, r24
    4a06:	61 50       	subi	r22, 0x01	; 1
    4a08:	46 2f       	mov	r20, r22
    4a0a:	50 e0       	ldi	r21, 0x00	; 0
    4a0c:	4f 5f       	subi	r20, 0xFF	; 255
    4a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a10:	48 0f       	add	r20, r24
    4a12:	59 1f       	adc	r21, r25
    4a14:	e7 01       	movw	r28, r14
    4a16:	ea 81       	ldd	r30, Y+2	; 0x02
    4a18:	fb 81       	ldd	r31, Y+3	; 0x03
    4a1a:	93 81       	ldd	r25, Z+3	; 0x03
    4a1c:	82 81       	ldd	r24, Z+2	; 0x02
    4a1e:	25 81       	ldd	r18, Z+5	; 0x05
    4a20:	98 1b       	sub	r25, r24
    4a22:	92 23       	and	r25, r18
    4a24:	84 81       	ldd	r24, Z+4	; 0x04
    4a26:	98 17       	cp	r25, r24
    4a28:	79 f0       	breq	.+30     	; 0x4a48 <serial_sendBytes+0x7c>
    4a2a:	8c 91       	ld	r24, X
    4a2c:	93 81       	ldd	r25, Z+3	; 0x03
    4a2e:	26 95       	lsr	r18
    4a30:	29 23       	and	r18, r25
    4a32:	60 81       	ld	r22, Z
    4a34:	71 81       	ldd	r23, Z+1	; 0x01
    4a36:	8b 01       	movw	r16, r22
    4a38:	02 0f       	add	r16, r18
    4a3a:	11 1d       	adc	r17, r1
    4a3c:	e8 01       	movw	r28, r16
    4a3e:	88 83       	st	Y, r24
    4a40:	9f 5f       	subi	r25, 0xFF	; 255
    4a42:	85 81       	ldd	r24, Z+5	; 0x05
    4a44:	98 23       	and	r25, r24
    4a46:	93 83       	std	Z+3, r25	; 0x03
    4a48:	11 96       	adiw	r26, 0x01	; 1
    4a4a:	a4 17       	cp	r26, r20
    4a4c:	b5 07       	cpc	r27, r21
    4a4e:	11 f7       	brne	.-60     	; 0x4a14 <serial_sendBytes+0x48>
    4a50:	d7 01       	movw	r26, r14
    4a52:	ed 91       	ld	r30, X+
    4a54:	fc 91       	ld	r31, X
    4a56:	35 97       	sbiw	r30, 0x05	; 5
    4a58:	80 81       	ld	r24, Z
    4a5a:	80 62       	ori	r24, 0x20	; 32
    4a5c:	80 83       	st	Z, r24
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	03 c0       	rjmp	.+6      	; 0x4a68 <serial_sendBytes+0x9c>
    4a62:	81 e0       	ldi	r24, 0x01	; 1
    4a64:	01 c0       	rjmp	.+2      	; 0x4a68 <serial_sendBytes+0x9c>
    4a66:	82 e0       	ldi	r24, 0x02	; 2
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	1f 91       	pop	r17
    4a6e:	0f 91       	pop	r16
    4a70:	ff 90       	pop	r15
    4a72:	ef 90       	pop	r14
    4a74:	08 95       	ret

00004a76 <serial_getByte>:
    4a76:	00 97       	sbiw	r24, 0x00	; 0
    4a78:	d1 f0       	breq	.+52     	; 0x4aae <serial_getByte+0x38>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	14 96       	adiw	r26, 0x04	; 4
    4a7e:	ed 91       	ld	r30, X+
    4a80:	fc 91       	ld	r31, X
    4a82:	15 97       	sbiw	r26, 0x05	; 5
    4a84:	93 81       	ldd	r25, Z+3	; 0x03
    4a86:	82 81       	ldd	r24, Z+2	; 0x02
    4a88:	98 17       	cp	r25, r24
    4a8a:	99 f0       	breq	.+38     	; 0x4ab2 <serial_getByte+0x3c>
    4a8c:	92 81       	ldd	r25, Z+2	; 0x02
    4a8e:	85 81       	ldd	r24, Z+5	; 0x05
    4a90:	86 95       	lsr	r24
    4a92:	89 23       	and	r24, r25
    4a94:	a0 81       	ld	r26, Z
    4a96:	b1 81       	ldd	r27, Z+1	; 0x01
    4a98:	a8 0f       	add	r26, r24
    4a9a:	b1 1d       	adc	r27, r1
    4a9c:	8c 91       	ld	r24, X
    4a9e:	db 01       	movw	r26, r22
    4aa0:	8c 93       	st	X, r24
    4aa2:	9f 5f       	subi	r25, 0xFF	; 255
    4aa4:	85 81       	ldd	r24, Z+5	; 0x05
    4aa6:	98 23       	and	r25, r24
    4aa8:	92 83       	std	Z+2, r25	; 0x02
    4aaa:	80 e0       	ldi	r24, 0x00	; 0
    4aac:	08 95       	ret
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	08 95       	ret
    4ab2:	83 e0       	ldi	r24, 0x03	; 3
    4ab4:	08 95       	ret

00004ab6 <__vector_25>:
    4ab6:	1f 92       	push	r1
    4ab8:	0f 92       	push	r0
    4aba:	0f b6       	in	r0, 0x3f	; 63
    4abc:	0f 92       	push	r0
    4abe:	11 24       	eor	r1, r1
    4ac0:	0b b6       	in	r0, 0x3b	; 59
    4ac2:	0f 92       	push	r0
    4ac4:	2f 93       	push	r18
    4ac6:	3f 93       	push	r19
    4ac8:	4f 93       	push	r20
    4aca:	5f 93       	push	r21
    4acc:	6f 93       	push	r22
    4ace:	7f 93       	push	r23
    4ad0:	8f 93       	push	r24
    4ad2:	9f 93       	push	r25
    4ad4:	af 93       	push	r26
    4ad6:	bf 93       	push	r27
    4ad8:	cf 93       	push	r28
    4ada:	df 93       	push	r29
    4adc:	ef 93       	push	r30
    4ade:	ff 93       	push	r31
    4ae0:	a0 91 9e 18 	lds	r26, 0x189E	; 0x80189e <_ser_handle>
    4ae4:	b0 91 9f 18 	lds	r27, 0x189F	; 0x80189f <_ser_handle+0x1>
    4ae8:	10 97       	sbiw	r26, 0x00	; 0
    4aea:	11 f1       	breq	.+68     	; 0x4b30 <__vector_25+0x7a>
    4aec:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4af0:	14 96       	adiw	r26, 0x04	; 4
    4af2:	ed 91       	ld	r30, X+
    4af4:	fc 91       	ld	r31, X
    4af6:	15 97       	sbiw	r26, 0x05	; 5
    4af8:	93 81       	ldd	r25, Z+3	; 0x03
    4afa:	82 81       	ldd	r24, Z+2	; 0x02
    4afc:	25 81       	ldd	r18, Z+5	; 0x05
    4afe:	98 1b       	sub	r25, r24
    4b00:	92 23       	and	r25, r18
    4b02:	84 81       	ldd	r24, Z+4	; 0x04
    4b04:	98 17       	cp	r25, r24
    4b06:	61 f0       	breq	.+24     	; 0x4b20 <__vector_25+0x6a>
    4b08:	83 81       	ldd	r24, Z+3	; 0x03
    4b0a:	26 95       	lsr	r18
    4b0c:	28 23       	and	r18, r24
    4b0e:	c0 81       	ld	r28, Z
    4b10:	d1 81       	ldd	r29, Z+1	; 0x01
    4b12:	c2 0f       	add	r28, r18
    4b14:	d1 1d       	adc	r29, r1
    4b16:	68 83       	st	Y, r22
    4b18:	8f 5f       	subi	r24, 0xFF	; 255
    4b1a:	95 81       	ldd	r25, Z+5	; 0x05
    4b1c:	89 23       	and	r24, r25
    4b1e:	83 83       	std	Z+3, r24	; 0x03
    4b20:	16 96       	adiw	r26, 0x06	; 6
    4b22:	ed 91       	ld	r30, X+
    4b24:	fc 91       	ld	r31, X
    4b26:	17 97       	sbiw	r26, 0x07	; 7
    4b28:	30 97       	sbiw	r30, 0x00	; 0
    4b2a:	11 f0       	breq	.+4      	; 0x4b30 <__vector_25+0x7a>
    4b2c:	cd 01       	movw	r24, r26
    4b2e:	19 95       	eicall
    4b30:	ff 91       	pop	r31
    4b32:	ef 91       	pop	r30
    4b34:	df 91       	pop	r29
    4b36:	cf 91       	pop	r28
    4b38:	bf 91       	pop	r27
    4b3a:	af 91       	pop	r26
    4b3c:	9f 91       	pop	r25
    4b3e:	8f 91       	pop	r24
    4b40:	7f 91       	pop	r23
    4b42:	6f 91       	pop	r22
    4b44:	5f 91       	pop	r21
    4b46:	4f 91       	pop	r20
    4b48:	3f 91       	pop	r19
    4b4a:	2f 91       	pop	r18
    4b4c:	0f 90       	pop	r0
    4b4e:	0b be       	out	0x3b, r0	; 59
    4b50:	0f 90       	pop	r0
    4b52:	0f be       	out	0x3f, r0	; 63
    4b54:	0f 90       	pop	r0
    4b56:	1f 90       	pop	r1
    4b58:	18 95       	reti

00004b5a <__vector_26>:
    4b5a:	1f 92       	push	r1
    4b5c:	0f 92       	push	r0
    4b5e:	0f b6       	in	r0, 0x3f	; 63
    4b60:	0f 92       	push	r0
    4b62:	11 24       	eor	r1, r1
    4b64:	0b b6       	in	r0, 0x3b	; 59
    4b66:	0f 92       	push	r0
    4b68:	2f 93       	push	r18
    4b6a:	8f 93       	push	r24
    4b6c:	9f 93       	push	r25
    4b6e:	af 93       	push	r26
    4b70:	bf 93       	push	r27
    4b72:	ef 93       	push	r30
    4b74:	ff 93       	push	r31
    4b76:	e0 91 9e 18 	lds	r30, 0x189E	; 0x80189e <_ser_handle>
    4b7a:	f0 91 9f 18 	lds	r31, 0x189F	; 0x80189f <_ser_handle+0x1>
    4b7e:	30 97       	sbiw	r30, 0x00	; 0
    4b80:	b9 f0       	breq	.+46     	; 0x4bb0 <__vector_26+0x56>
    4b82:	02 80       	ldd	r0, Z+2	; 0x02
    4b84:	f3 81       	ldd	r31, Z+3	; 0x03
    4b86:	e0 2d       	mov	r30, r0
    4b88:	93 81       	ldd	r25, Z+3	; 0x03
    4b8a:	82 81       	ldd	r24, Z+2	; 0x02
    4b8c:	98 17       	cp	r25, r24
    4b8e:	b1 f0       	breq	.+44     	; 0x4bbc <__vector_26+0x62>
    4b90:	92 81       	ldd	r25, Z+2	; 0x02
    4b92:	85 81       	ldd	r24, Z+5	; 0x05
    4b94:	28 2f       	mov	r18, r24
    4b96:	26 95       	lsr	r18
    4b98:	29 23       	and	r18, r25
    4b9a:	a0 81       	ld	r26, Z
    4b9c:	b1 81       	ldd	r27, Z+1	; 0x01
    4b9e:	a2 0f       	add	r26, r18
    4ba0:	b1 1d       	adc	r27, r1
    4ba2:	2c 91       	ld	r18, X
    4ba4:	9f 5f       	subi	r25, 0xFF	; 255
    4ba6:	89 23       	and	r24, r25
    4ba8:	82 83       	std	Z+2, r24	; 0x02
    4baa:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4bae:	0b c0       	rjmp	.+22     	; 0x4bc6 <__vector_26+0x6c>
    4bb0:	e1 ec       	ldi	r30, 0xC1	; 193
    4bb2:	f0 e0       	ldi	r31, 0x00	; 0
    4bb4:	80 81       	ld	r24, Z
    4bb6:	8f 7d       	andi	r24, 0xDF	; 223
    4bb8:	80 83       	st	Z, r24
    4bba:	05 c0       	rjmp	.+10     	; 0x4bc6 <__vector_26+0x6c>
    4bbc:	e1 ec       	ldi	r30, 0xC1	; 193
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	80 81       	ld	r24, Z
    4bc2:	8f 7d       	andi	r24, 0xDF	; 223
    4bc4:	80 83       	st	Z, r24
    4bc6:	ff 91       	pop	r31
    4bc8:	ef 91       	pop	r30
    4bca:	bf 91       	pop	r27
    4bcc:	af 91       	pop	r26
    4bce:	9f 91       	pop	r25
    4bd0:	8f 91       	pop	r24
    4bd2:	2f 91       	pop	r18
    4bd4:	0f 90       	pop	r0
    4bd6:	0b be       	out	0x3b, r0	; 59
    4bd8:	0f 90       	pop	r0
    4bda:	0f be       	out	0x3f, r0	; 63
    4bdc:	0f 90       	pop	r0
    4bde:	1f 90       	pop	r1
    4be0:	18 95       	reti

00004be2 <__vector_36>:
    4be2:	1f 92       	push	r1
    4be4:	0f 92       	push	r0
    4be6:	0f b6       	in	r0, 0x3f	; 63
    4be8:	0f 92       	push	r0
    4bea:	11 24       	eor	r1, r1
    4bec:	0b b6       	in	r0, 0x3b	; 59
    4bee:	0f 92       	push	r0
    4bf0:	2f 93       	push	r18
    4bf2:	3f 93       	push	r19
    4bf4:	4f 93       	push	r20
    4bf6:	5f 93       	push	r21
    4bf8:	6f 93       	push	r22
    4bfa:	7f 93       	push	r23
    4bfc:	8f 93       	push	r24
    4bfe:	9f 93       	push	r25
    4c00:	af 93       	push	r26
    4c02:	bf 93       	push	r27
    4c04:	cf 93       	push	r28
    4c06:	df 93       	push	r29
    4c08:	ef 93       	push	r30
    4c0a:	ff 93       	push	r31
    4c0c:	a0 91 a0 18 	lds	r26, 0x18A0	; 0x8018a0 <_ser_handle+0x2>
    4c10:	b0 91 a1 18 	lds	r27, 0x18A1	; 0x8018a1 <_ser_handle+0x3>
    4c14:	10 97       	sbiw	r26, 0x00	; 0
    4c16:	11 f1       	breq	.+68     	; 0x4c5c <__vector_36+0x7a>
    4c18:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4c1c:	14 96       	adiw	r26, 0x04	; 4
    4c1e:	ed 91       	ld	r30, X+
    4c20:	fc 91       	ld	r31, X
    4c22:	15 97       	sbiw	r26, 0x05	; 5
    4c24:	93 81       	ldd	r25, Z+3	; 0x03
    4c26:	82 81       	ldd	r24, Z+2	; 0x02
    4c28:	25 81       	ldd	r18, Z+5	; 0x05
    4c2a:	98 1b       	sub	r25, r24
    4c2c:	92 23       	and	r25, r18
    4c2e:	84 81       	ldd	r24, Z+4	; 0x04
    4c30:	98 17       	cp	r25, r24
    4c32:	61 f0       	breq	.+24     	; 0x4c4c <__vector_36+0x6a>
    4c34:	83 81       	ldd	r24, Z+3	; 0x03
    4c36:	26 95       	lsr	r18
    4c38:	28 23       	and	r18, r24
    4c3a:	c0 81       	ld	r28, Z
    4c3c:	d1 81       	ldd	r29, Z+1	; 0x01
    4c3e:	c2 0f       	add	r28, r18
    4c40:	d1 1d       	adc	r29, r1
    4c42:	68 83       	st	Y, r22
    4c44:	8f 5f       	subi	r24, 0xFF	; 255
    4c46:	95 81       	ldd	r25, Z+5	; 0x05
    4c48:	89 23       	and	r24, r25
    4c4a:	83 83       	std	Z+3, r24	; 0x03
    4c4c:	16 96       	adiw	r26, 0x06	; 6
    4c4e:	ed 91       	ld	r30, X+
    4c50:	fc 91       	ld	r31, X
    4c52:	17 97       	sbiw	r26, 0x07	; 7
    4c54:	30 97       	sbiw	r30, 0x00	; 0
    4c56:	11 f0       	breq	.+4      	; 0x4c5c <__vector_36+0x7a>
    4c58:	cd 01       	movw	r24, r26
    4c5a:	19 95       	eicall
    4c5c:	ff 91       	pop	r31
    4c5e:	ef 91       	pop	r30
    4c60:	df 91       	pop	r29
    4c62:	cf 91       	pop	r28
    4c64:	bf 91       	pop	r27
    4c66:	af 91       	pop	r26
    4c68:	9f 91       	pop	r25
    4c6a:	8f 91       	pop	r24
    4c6c:	7f 91       	pop	r23
    4c6e:	6f 91       	pop	r22
    4c70:	5f 91       	pop	r21
    4c72:	4f 91       	pop	r20
    4c74:	3f 91       	pop	r19
    4c76:	2f 91       	pop	r18
    4c78:	0f 90       	pop	r0
    4c7a:	0b be       	out	0x3b, r0	; 59
    4c7c:	0f 90       	pop	r0
    4c7e:	0f be       	out	0x3f, r0	; 63
    4c80:	0f 90       	pop	r0
    4c82:	1f 90       	pop	r1
    4c84:	18 95       	reti

00004c86 <__vector_37>:
    4c86:	1f 92       	push	r1
    4c88:	0f 92       	push	r0
    4c8a:	0f b6       	in	r0, 0x3f	; 63
    4c8c:	0f 92       	push	r0
    4c8e:	11 24       	eor	r1, r1
    4c90:	0b b6       	in	r0, 0x3b	; 59
    4c92:	0f 92       	push	r0
    4c94:	2f 93       	push	r18
    4c96:	8f 93       	push	r24
    4c98:	9f 93       	push	r25
    4c9a:	af 93       	push	r26
    4c9c:	bf 93       	push	r27
    4c9e:	ef 93       	push	r30
    4ca0:	ff 93       	push	r31
    4ca2:	e0 91 a0 18 	lds	r30, 0x18A0	; 0x8018a0 <_ser_handle+0x2>
    4ca6:	f0 91 a1 18 	lds	r31, 0x18A1	; 0x8018a1 <_ser_handle+0x3>
    4caa:	30 97       	sbiw	r30, 0x00	; 0
    4cac:	b9 f0       	breq	.+46     	; 0x4cdc <__vector_37+0x56>
    4cae:	02 80       	ldd	r0, Z+2	; 0x02
    4cb0:	f3 81       	ldd	r31, Z+3	; 0x03
    4cb2:	e0 2d       	mov	r30, r0
    4cb4:	93 81       	ldd	r25, Z+3	; 0x03
    4cb6:	82 81       	ldd	r24, Z+2	; 0x02
    4cb8:	98 17       	cp	r25, r24
    4cba:	b1 f0       	breq	.+44     	; 0x4ce8 <__vector_37+0x62>
    4cbc:	92 81       	ldd	r25, Z+2	; 0x02
    4cbe:	85 81       	ldd	r24, Z+5	; 0x05
    4cc0:	28 2f       	mov	r18, r24
    4cc2:	26 95       	lsr	r18
    4cc4:	29 23       	and	r18, r25
    4cc6:	a0 81       	ld	r26, Z
    4cc8:	b1 81       	ldd	r27, Z+1	; 0x01
    4cca:	a2 0f       	add	r26, r18
    4ccc:	b1 1d       	adc	r27, r1
    4cce:	2c 91       	ld	r18, X
    4cd0:	9f 5f       	subi	r25, 0xFF	; 255
    4cd2:	89 23       	and	r24, r25
    4cd4:	82 83       	std	Z+2, r24	; 0x02
    4cd6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4cda:	0b c0       	rjmp	.+22     	; 0x4cf2 <__vector_37+0x6c>
    4cdc:	e9 ec       	ldi	r30, 0xC9	; 201
    4cde:	f0 e0       	ldi	r31, 0x00	; 0
    4ce0:	80 81       	ld	r24, Z
    4ce2:	8f 7d       	andi	r24, 0xDF	; 223
    4ce4:	80 83       	st	Z, r24
    4ce6:	05 c0       	rjmp	.+10     	; 0x4cf2 <__vector_37+0x6c>
    4ce8:	e9 ec       	ldi	r30, 0xC9	; 201
    4cea:	f0 e0       	ldi	r31, 0x00	; 0
    4cec:	80 81       	ld	r24, Z
    4cee:	8f 7d       	andi	r24, 0xDF	; 223
    4cf0:	80 83       	st	Z, r24
    4cf2:	ff 91       	pop	r31
    4cf4:	ef 91       	pop	r30
    4cf6:	bf 91       	pop	r27
    4cf8:	af 91       	pop	r26
    4cfa:	9f 91       	pop	r25
    4cfc:	8f 91       	pop	r24
    4cfe:	2f 91       	pop	r18
    4d00:	0f 90       	pop	r0
    4d02:	0b be       	out	0x3b, r0	; 59
    4d04:	0f 90       	pop	r0
    4d06:	0f be       	out	0x3f, r0	; 63
    4d08:	0f 90       	pop	r0
    4d0a:	1f 90       	pop	r1
    4d0c:	18 95       	reti

00004d0e <__vector_51>:
    4d0e:	1f 92       	push	r1
    4d10:	0f 92       	push	r0
    4d12:	0f b6       	in	r0, 0x3f	; 63
    4d14:	0f 92       	push	r0
    4d16:	11 24       	eor	r1, r1
    4d18:	0b b6       	in	r0, 0x3b	; 59
    4d1a:	0f 92       	push	r0
    4d1c:	2f 93       	push	r18
    4d1e:	3f 93       	push	r19
    4d20:	4f 93       	push	r20
    4d22:	5f 93       	push	r21
    4d24:	6f 93       	push	r22
    4d26:	7f 93       	push	r23
    4d28:	8f 93       	push	r24
    4d2a:	9f 93       	push	r25
    4d2c:	af 93       	push	r26
    4d2e:	bf 93       	push	r27
    4d30:	cf 93       	push	r28
    4d32:	df 93       	push	r29
    4d34:	ef 93       	push	r30
    4d36:	ff 93       	push	r31
    4d38:	a0 91 a2 18 	lds	r26, 0x18A2	; 0x8018a2 <_ser_handle+0x4>
    4d3c:	b0 91 a3 18 	lds	r27, 0x18A3	; 0x8018a3 <_ser_handle+0x5>
    4d40:	10 97       	sbiw	r26, 0x00	; 0
    4d42:	11 f1       	breq	.+68     	; 0x4d88 <__vector_51+0x7a>
    4d44:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4d48:	14 96       	adiw	r26, 0x04	; 4
    4d4a:	ed 91       	ld	r30, X+
    4d4c:	fc 91       	ld	r31, X
    4d4e:	15 97       	sbiw	r26, 0x05	; 5
    4d50:	93 81       	ldd	r25, Z+3	; 0x03
    4d52:	82 81       	ldd	r24, Z+2	; 0x02
    4d54:	25 81       	ldd	r18, Z+5	; 0x05
    4d56:	98 1b       	sub	r25, r24
    4d58:	92 23       	and	r25, r18
    4d5a:	84 81       	ldd	r24, Z+4	; 0x04
    4d5c:	98 17       	cp	r25, r24
    4d5e:	61 f0       	breq	.+24     	; 0x4d78 <__vector_51+0x6a>
    4d60:	83 81       	ldd	r24, Z+3	; 0x03
    4d62:	26 95       	lsr	r18
    4d64:	28 23       	and	r18, r24
    4d66:	c0 81       	ld	r28, Z
    4d68:	d1 81       	ldd	r29, Z+1	; 0x01
    4d6a:	c2 0f       	add	r28, r18
    4d6c:	d1 1d       	adc	r29, r1
    4d6e:	68 83       	st	Y, r22
    4d70:	8f 5f       	subi	r24, 0xFF	; 255
    4d72:	95 81       	ldd	r25, Z+5	; 0x05
    4d74:	89 23       	and	r24, r25
    4d76:	83 83       	std	Z+3, r24	; 0x03
    4d78:	16 96       	adiw	r26, 0x06	; 6
    4d7a:	ed 91       	ld	r30, X+
    4d7c:	fc 91       	ld	r31, X
    4d7e:	17 97       	sbiw	r26, 0x07	; 7
    4d80:	30 97       	sbiw	r30, 0x00	; 0
    4d82:	11 f0       	breq	.+4      	; 0x4d88 <__vector_51+0x7a>
    4d84:	cd 01       	movw	r24, r26
    4d86:	19 95       	eicall
    4d88:	ff 91       	pop	r31
    4d8a:	ef 91       	pop	r30
    4d8c:	df 91       	pop	r29
    4d8e:	cf 91       	pop	r28
    4d90:	bf 91       	pop	r27
    4d92:	af 91       	pop	r26
    4d94:	9f 91       	pop	r25
    4d96:	8f 91       	pop	r24
    4d98:	7f 91       	pop	r23
    4d9a:	6f 91       	pop	r22
    4d9c:	5f 91       	pop	r21
    4d9e:	4f 91       	pop	r20
    4da0:	3f 91       	pop	r19
    4da2:	2f 91       	pop	r18
    4da4:	0f 90       	pop	r0
    4da6:	0b be       	out	0x3b, r0	; 59
    4da8:	0f 90       	pop	r0
    4daa:	0f be       	out	0x3f, r0	; 63
    4dac:	0f 90       	pop	r0
    4dae:	1f 90       	pop	r1
    4db0:	18 95       	reti

00004db2 <__vector_52>:
    4db2:	1f 92       	push	r1
    4db4:	0f 92       	push	r0
    4db6:	0f b6       	in	r0, 0x3f	; 63
    4db8:	0f 92       	push	r0
    4dba:	11 24       	eor	r1, r1
    4dbc:	0b b6       	in	r0, 0x3b	; 59
    4dbe:	0f 92       	push	r0
    4dc0:	2f 93       	push	r18
    4dc2:	8f 93       	push	r24
    4dc4:	9f 93       	push	r25
    4dc6:	af 93       	push	r26
    4dc8:	bf 93       	push	r27
    4dca:	ef 93       	push	r30
    4dcc:	ff 93       	push	r31
    4dce:	e0 91 a2 18 	lds	r30, 0x18A2	; 0x8018a2 <_ser_handle+0x4>
    4dd2:	f0 91 a3 18 	lds	r31, 0x18A3	; 0x8018a3 <_ser_handle+0x5>
    4dd6:	30 97       	sbiw	r30, 0x00	; 0
    4dd8:	b9 f0       	breq	.+46     	; 0x4e08 <__vector_52+0x56>
    4dda:	02 80       	ldd	r0, Z+2	; 0x02
    4ddc:	f3 81       	ldd	r31, Z+3	; 0x03
    4dde:	e0 2d       	mov	r30, r0
    4de0:	93 81       	ldd	r25, Z+3	; 0x03
    4de2:	82 81       	ldd	r24, Z+2	; 0x02
    4de4:	98 17       	cp	r25, r24
    4de6:	b1 f0       	breq	.+44     	; 0x4e14 <__vector_52+0x62>
    4de8:	92 81       	ldd	r25, Z+2	; 0x02
    4dea:	85 81       	ldd	r24, Z+5	; 0x05
    4dec:	28 2f       	mov	r18, r24
    4dee:	26 95       	lsr	r18
    4df0:	29 23       	and	r18, r25
    4df2:	a0 81       	ld	r26, Z
    4df4:	b1 81       	ldd	r27, Z+1	; 0x01
    4df6:	a2 0f       	add	r26, r18
    4df8:	b1 1d       	adc	r27, r1
    4dfa:	2c 91       	ld	r18, X
    4dfc:	9f 5f       	subi	r25, 0xFF	; 255
    4dfe:	89 23       	and	r24, r25
    4e00:	82 83       	std	Z+2, r24	; 0x02
    4e02:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4e06:	0b c0       	rjmp	.+22     	; 0x4e1e <__vector_52+0x6c>
    4e08:	e1 ed       	ldi	r30, 0xD1	; 209
    4e0a:	f0 e0       	ldi	r31, 0x00	; 0
    4e0c:	80 81       	ld	r24, Z
    4e0e:	8f 7d       	andi	r24, 0xDF	; 223
    4e10:	80 83       	st	Z, r24
    4e12:	05 c0       	rjmp	.+10     	; 0x4e1e <__vector_52+0x6c>
    4e14:	e1 ed       	ldi	r30, 0xD1	; 209
    4e16:	f0 e0       	ldi	r31, 0x00	; 0
    4e18:	80 81       	ld	r24, Z
    4e1a:	8f 7d       	andi	r24, 0xDF	; 223
    4e1c:	80 83       	st	Z, r24
    4e1e:	ff 91       	pop	r31
    4e20:	ef 91       	pop	r30
    4e22:	bf 91       	pop	r27
    4e24:	af 91       	pop	r26
    4e26:	9f 91       	pop	r25
    4e28:	8f 91       	pop	r24
    4e2a:	2f 91       	pop	r18
    4e2c:	0f 90       	pop	r0
    4e2e:	0b be       	out	0x3b, r0	; 59
    4e30:	0f 90       	pop	r0
    4e32:	0f be       	out	0x3f, r0	; 63
    4e34:	0f 90       	pop	r0
    4e36:	1f 90       	pop	r1
    4e38:	18 95       	reti

00004e3a <__vector_54>:
    4e3a:	1f 92       	push	r1
    4e3c:	0f 92       	push	r0
    4e3e:	0f b6       	in	r0, 0x3f	; 63
    4e40:	0f 92       	push	r0
    4e42:	11 24       	eor	r1, r1
    4e44:	0b b6       	in	r0, 0x3b	; 59
    4e46:	0f 92       	push	r0
    4e48:	2f 93       	push	r18
    4e4a:	3f 93       	push	r19
    4e4c:	4f 93       	push	r20
    4e4e:	5f 93       	push	r21
    4e50:	6f 93       	push	r22
    4e52:	7f 93       	push	r23
    4e54:	8f 93       	push	r24
    4e56:	9f 93       	push	r25
    4e58:	af 93       	push	r26
    4e5a:	bf 93       	push	r27
    4e5c:	cf 93       	push	r28
    4e5e:	df 93       	push	r29
    4e60:	ef 93       	push	r30
    4e62:	ff 93       	push	r31
    4e64:	a0 91 a4 18 	lds	r26, 0x18A4	; 0x8018a4 <_ser_handle+0x6>
    4e68:	b0 91 a5 18 	lds	r27, 0x18A5	; 0x8018a5 <_ser_handle+0x7>
    4e6c:	10 97       	sbiw	r26, 0x00	; 0
    4e6e:	11 f1       	breq	.+68     	; 0x4eb4 <__vector_54+0x7a>
    4e70:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4e74:	14 96       	adiw	r26, 0x04	; 4
    4e76:	ed 91       	ld	r30, X+
    4e78:	fc 91       	ld	r31, X
    4e7a:	15 97       	sbiw	r26, 0x05	; 5
    4e7c:	93 81       	ldd	r25, Z+3	; 0x03
    4e7e:	82 81       	ldd	r24, Z+2	; 0x02
    4e80:	25 81       	ldd	r18, Z+5	; 0x05
    4e82:	98 1b       	sub	r25, r24
    4e84:	92 23       	and	r25, r18
    4e86:	84 81       	ldd	r24, Z+4	; 0x04
    4e88:	98 17       	cp	r25, r24
    4e8a:	61 f0       	breq	.+24     	; 0x4ea4 <__vector_54+0x6a>
    4e8c:	83 81       	ldd	r24, Z+3	; 0x03
    4e8e:	26 95       	lsr	r18
    4e90:	28 23       	and	r18, r24
    4e92:	c0 81       	ld	r28, Z
    4e94:	d1 81       	ldd	r29, Z+1	; 0x01
    4e96:	c2 0f       	add	r28, r18
    4e98:	d1 1d       	adc	r29, r1
    4e9a:	68 83       	st	Y, r22
    4e9c:	8f 5f       	subi	r24, 0xFF	; 255
    4e9e:	95 81       	ldd	r25, Z+5	; 0x05
    4ea0:	89 23       	and	r24, r25
    4ea2:	83 83       	std	Z+3, r24	; 0x03
    4ea4:	16 96       	adiw	r26, 0x06	; 6
    4ea6:	ed 91       	ld	r30, X+
    4ea8:	fc 91       	ld	r31, X
    4eaa:	17 97       	sbiw	r26, 0x07	; 7
    4eac:	30 97       	sbiw	r30, 0x00	; 0
    4eae:	11 f0       	breq	.+4      	; 0x4eb4 <__vector_54+0x7a>
    4eb0:	cd 01       	movw	r24, r26
    4eb2:	19 95       	eicall
    4eb4:	ff 91       	pop	r31
    4eb6:	ef 91       	pop	r30
    4eb8:	df 91       	pop	r29
    4eba:	cf 91       	pop	r28
    4ebc:	bf 91       	pop	r27
    4ebe:	af 91       	pop	r26
    4ec0:	9f 91       	pop	r25
    4ec2:	8f 91       	pop	r24
    4ec4:	7f 91       	pop	r23
    4ec6:	6f 91       	pop	r22
    4ec8:	5f 91       	pop	r21
    4eca:	4f 91       	pop	r20
    4ecc:	3f 91       	pop	r19
    4ece:	2f 91       	pop	r18
    4ed0:	0f 90       	pop	r0
    4ed2:	0b be       	out	0x3b, r0	; 59
    4ed4:	0f 90       	pop	r0
    4ed6:	0f be       	out	0x3f, r0	; 63
    4ed8:	0f 90       	pop	r0
    4eda:	1f 90       	pop	r1
    4edc:	18 95       	reti

00004ede <__vector_55>:
    4ede:	1f 92       	push	r1
    4ee0:	0f 92       	push	r0
    4ee2:	0f b6       	in	r0, 0x3f	; 63
    4ee4:	0f 92       	push	r0
    4ee6:	11 24       	eor	r1, r1
    4ee8:	0b b6       	in	r0, 0x3b	; 59
    4eea:	0f 92       	push	r0
    4eec:	2f 93       	push	r18
    4eee:	8f 93       	push	r24
    4ef0:	9f 93       	push	r25
    4ef2:	af 93       	push	r26
    4ef4:	bf 93       	push	r27
    4ef6:	ef 93       	push	r30
    4ef8:	ff 93       	push	r31
    4efa:	e0 91 a4 18 	lds	r30, 0x18A4	; 0x8018a4 <_ser_handle+0x6>
    4efe:	f0 91 a5 18 	lds	r31, 0x18A5	; 0x8018a5 <_ser_handle+0x7>
    4f02:	30 97       	sbiw	r30, 0x00	; 0
    4f04:	b9 f0       	breq	.+46     	; 0x4f34 <__vector_55+0x56>
    4f06:	02 80       	ldd	r0, Z+2	; 0x02
    4f08:	f3 81       	ldd	r31, Z+3	; 0x03
    4f0a:	e0 2d       	mov	r30, r0
    4f0c:	93 81       	ldd	r25, Z+3	; 0x03
    4f0e:	82 81       	ldd	r24, Z+2	; 0x02
    4f10:	98 17       	cp	r25, r24
    4f12:	b1 f0       	breq	.+44     	; 0x4f40 <__vector_55+0x62>
    4f14:	92 81       	ldd	r25, Z+2	; 0x02
    4f16:	85 81       	ldd	r24, Z+5	; 0x05
    4f18:	28 2f       	mov	r18, r24
    4f1a:	26 95       	lsr	r18
    4f1c:	29 23       	and	r18, r25
    4f1e:	a0 81       	ld	r26, Z
    4f20:	b1 81       	ldd	r27, Z+1	; 0x01
    4f22:	a2 0f       	add	r26, r18
    4f24:	b1 1d       	adc	r27, r1
    4f26:	2c 91       	ld	r18, X
    4f28:	9f 5f       	subi	r25, 0xFF	; 255
    4f2a:	89 23       	and	r24, r25
    4f2c:	82 83       	std	Z+2, r24	; 0x02
    4f2e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4f32:	0b c0       	rjmp	.+22     	; 0x4f4a <__vector_55+0x6c>
    4f34:	e1 e3       	ldi	r30, 0x31	; 49
    4f36:	f1 e0       	ldi	r31, 0x01	; 1
    4f38:	80 81       	ld	r24, Z
    4f3a:	8f 7d       	andi	r24, 0xDF	; 223
    4f3c:	80 83       	st	Z, r24
    4f3e:	05 c0       	rjmp	.+10     	; 0x4f4a <__vector_55+0x6c>
    4f40:	e1 e3       	ldi	r30, 0x31	; 49
    4f42:	f1 e0       	ldi	r31, 0x01	; 1
    4f44:	80 81       	ld	r24, Z
    4f46:	8f 7d       	andi	r24, 0xDF	; 223
    4f48:	80 83       	st	Z, r24
    4f4a:	ff 91       	pop	r31
    4f4c:	ef 91       	pop	r30
    4f4e:	bf 91       	pop	r27
    4f50:	af 91       	pop	r26
    4f52:	9f 91       	pop	r25
    4f54:	8f 91       	pop	r24
    4f56:	2f 91       	pop	r18
    4f58:	0f 90       	pop	r0
    4f5a:	0b be       	out	0x3b, r0	; 59
    4f5c:	0f 90       	pop	r0
    4f5e:	0f be       	out	0x3f, r0	; 63
    4f60:	0f 90       	pop	r0
    4f62:	1f 90       	pop	r1
    4f64:	18 95       	reti

00004f66 <usart_getchar>:
    4f66:	cf 93       	push	r28
    4f68:	df 93       	push	r29
    4f6a:	1f 92       	push	r1
    4f6c:	cd b7       	in	r28, 0x3d	; 61
    4f6e:	de b7       	in	r29, 0x3e	; 62
    4f70:	be 01       	movw	r22, r28
    4f72:	6f 5f       	subi	r22, 0xFF	; 255
    4f74:	7f 4f       	sbci	r23, 0xFF	; 255
    4f76:	80 91 a6 18 	lds	r24, 0x18A6	; 0x8018a6 <_com_serial_instance>
    4f7a:	90 91 a7 18 	lds	r25, 0x18A7	; 0x8018a7 <_com_serial_instance+0x1>
    4f7e:	7b dd       	rcall	.-1290   	; 0x4a76 <serial_getByte>
    4f80:	81 11       	cpse	r24, r1
    4f82:	f6 cf       	rjmp	.-20     	; 0x4f70 <usart_getchar+0xa>
    4f84:	89 81       	ldd	r24, Y+1	; 0x01
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	0f 90       	pop	r0
    4f8a:	df 91       	pop	r29
    4f8c:	cf 91       	pop	r28
    4f8e:	08 95       	ret

00004f90 <usart_putchar>:
    4f90:	68 2f       	mov	r22, r24
    4f92:	80 91 a6 18 	lds	r24, 0x18A6	; 0x8018a6 <_com_serial_instance>
    4f96:	90 91 a7 18 	lds	r25, 0x18A7	; 0x8018a7 <_com_serial_instance+0x1>
    4f9a:	ed dc       	rcall	.-1574   	; 0x4976 <serial_sendByte>
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	08 95       	ret

00004fa2 <stdio_initialise>:
    4fa2:	8f 92       	push	r8
    4fa4:	9f 92       	push	r9
    4fa6:	af 92       	push	r10
    4fa8:	cf 92       	push	r12
    4faa:	ef 92       	push	r14
    4fac:	0f 93       	push	r16
    4fae:	81 2c       	mov	r8, r1
    4fb0:	91 2c       	mov	r9, r1
    4fb2:	68 94       	set
    4fb4:	aa 24       	eor	r10, r10
    4fb6:	a7 f8       	bld	r10, 7
    4fb8:	68 94       	set
    4fba:	cc 24       	eor	r12, r12
    4fbc:	c7 f8       	bld	r12, 7
    4fbe:	e1 2c       	mov	r14, r1
    4fc0:	00 e0       	ldi	r16, 0x00	; 0
    4fc2:	23 e0       	ldi	r18, 0x03	; 3
    4fc4:	40 e0       	ldi	r20, 0x00	; 0
    4fc6:	51 ee       	ldi	r21, 0xE1	; 225
    4fc8:	60 e0       	ldi	r22, 0x00	; 0
    4fca:	70 e0       	ldi	r23, 0x00	; 0
    4fcc:	32 dc       	rcall	.-1948   	; 0x4832 <serial_create>
    4fce:	90 93 a7 18 	sts	0x18A7, r25	; 0x8018a7 <_com_serial_instance+0x1>
    4fd2:	80 93 a6 18 	sts	0x18A6, r24	; 0x8018a6 <_com_serial_instance>
    4fd6:	ef e4       	ldi	r30, 0x4F	; 79
    4fd8:	f9 e1       	ldi	r31, 0x19	; 25
    4fda:	83 e1       	ldi	r24, 0x13	; 19
    4fdc:	92 e0       	ldi	r25, 0x02	; 2
    4fde:	91 83       	std	Z+1, r25	; 0x01
    4fe0:	80 83       	st	Z, r24
    4fe2:	93 83       	std	Z+3, r25	; 0x03
    4fe4:	82 83       	std	Z+2, r24	; 0x02
    4fe6:	0f 91       	pop	r16
    4fe8:	ef 90       	pop	r14
    4fea:	cf 90       	pop	r12
    4fec:	af 90       	pop	r10
    4fee:	9f 90       	pop	r9
    4ff0:	8f 90       	pop	r8
    4ff2:	08 95       	ret

00004ff4 <_turn_off>:
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	fc 01       	movw	r30, r24
    4ff8:	ee 0f       	add	r30, r30
    4ffa:	ff 1f       	adc	r31, r31
    4ffc:	e8 0f       	add	r30, r24
    4ffe:	f9 1f       	adc	r31, r25
    5000:	ee 0f       	add	r30, r30
    5002:	ff 1f       	adc	r31, r31
    5004:	e8 55       	subi	r30, 0x58	; 88
    5006:	f7 4e       	sbci	r31, 0xE7	; 231
    5008:	23 81       	ldd	r18, Z+3	; 0x03
    500a:	21 11       	cpse	r18, r1
    500c:	1f c0       	rjmp	.+62     	; 0x504c <_turn_off+0x58>
    500e:	9c 01       	movw	r18, r24
    5010:	22 0f       	add	r18, r18
    5012:	33 1f       	adc	r19, r19
    5014:	f9 01       	movw	r30, r18
    5016:	e8 0f       	add	r30, r24
    5018:	f9 1f       	adc	r31, r25
    501a:	ee 0f       	add	r30, r30
    501c:	ff 1f       	adc	r31, r31
    501e:	e8 55       	subi	r30, 0x58	; 88
    5020:	f7 4e       	sbci	r31, 0xE7	; 231
    5022:	a0 81       	ld	r26, Z
    5024:	b1 81       	ldd	r27, Z+1	; 0x01
    5026:	4c 91       	ld	r20, X
    5028:	f9 01       	movw	r30, r18
    502a:	e8 0f       	add	r30, r24
    502c:	f9 1f       	adc	r31, r25
    502e:	ee 0f       	add	r30, r30
    5030:	ff 1f       	adc	r31, r31
    5032:	e8 55       	subi	r30, 0x58	; 88
    5034:	f7 4e       	sbci	r31, 0xE7	; 231
    5036:	81 e0       	ldi	r24, 0x01	; 1
    5038:	90 e0       	ldi	r25, 0x00	; 0
    503a:	02 80       	ldd	r0, Z+2	; 0x02
    503c:	02 c0       	rjmp	.+4      	; 0x5042 <_turn_off+0x4e>
    503e:	88 0f       	add	r24, r24
    5040:	99 1f       	adc	r25, r25
    5042:	0a 94       	dec	r0
    5044:	e2 f7       	brpl	.-8      	; 0x503e <_turn_off+0x4a>
    5046:	84 2b       	or	r24, r20
    5048:	8c 93       	st	X, r24
    504a:	08 95       	ret
    504c:	fc 01       	movw	r30, r24
    504e:	ee 0f       	add	r30, r30
    5050:	ff 1f       	adc	r31, r31
    5052:	df 01       	movw	r26, r30
    5054:	a8 0f       	add	r26, r24
    5056:	b9 1f       	adc	r27, r25
    5058:	aa 0f       	add	r26, r26
    505a:	bb 1f       	adc	r27, r27
    505c:	a8 55       	subi	r26, 0x58	; 88
    505e:	b7 4e       	sbci	r27, 0xE7	; 231
    5060:	0d 90       	ld	r0, X+
    5062:	bc 91       	ld	r27, X
    5064:	a0 2d       	mov	r26, r0
    5066:	2c 91       	ld	r18, X
    5068:	e8 0f       	add	r30, r24
    506a:	f9 1f       	adc	r31, r25
    506c:	ee 0f       	add	r30, r30
    506e:	ff 1f       	adc	r31, r31
    5070:	e8 55       	subi	r30, 0x58	; 88
    5072:	f7 4e       	sbci	r31, 0xE7	; 231
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	02 80       	ldd	r0, Z+2	; 0x02
    507a:	02 c0       	rjmp	.+4      	; 0x5080 <_turn_off+0x8c>
    507c:	88 0f       	add	r24, r24
    507e:	99 1f       	adc	r25, r25
    5080:	0a 94       	dec	r0
    5082:	e2 f7       	brpl	.-8      	; 0x507c <_turn_off+0x88>
    5084:	80 95       	com	r24
    5086:	82 23       	and	r24, r18
    5088:	8c 93       	st	X, r24
    508a:	08 95       	ret

0000508c <_turn_on>:
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	fc 01       	movw	r30, r24
    5090:	ee 0f       	add	r30, r30
    5092:	ff 1f       	adc	r31, r31
    5094:	e8 0f       	add	r30, r24
    5096:	f9 1f       	adc	r31, r25
    5098:	ee 0f       	add	r30, r30
    509a:	ff 1f       	adc	r31, r31
    509c:	e8 55       	subi	r30, 0x58	; 88
    509e:	f7 4e       	sbci	r31, 0xE7	; 231
    50a0:	23 81       	ldd	r18, Z+3	; 0x03
    50a2:	21 11       	cpse	r18, r1
    50a4:	20 c0       	rjmp	.+64     	; 0x50e6 <_turn_on+0x5a>
    50a6:	9c 01       	movw	r18, r24
    50a8:	22 0f       	add	r18, r18
    50aa:	33 1f       	adc	r19, r19
    50ac:	f9 01       	movw	r30, r18
    50ae:	e8 0f       	add	r30, r24
    50b0:	f9 1f       	adc	r31, r25
    50b2:	ee 0f       	add	r30, r30
    50b4:	ff 1f       	adc	r31, r31
    50b6:	e8 55       	subi	r30, 0x58	; 88
    50b8:	f7 4e       	sbci	r31, 0xE7	; 231
    50ba:	a0 81       	ld	r26, Z
    50bc:	b1 81       	ldd	r27, Z+1	; 0x01
    50be:	4c 91       	ld	r20, X
    50c0:	f9 01       	movw	r30, r18
    50c2:	e8 0f       	add	r30, r24
    50c4:	f9 1f       	adc	r31, r25
    50c6:	ee 0f       	add	r30, r30
    50c8:	ff 1f       	adc	r31, r31
    50ca:	e8 55       	subi	r30, 0x58	; 88
    50cc:	f7 4e       	sbci	r31, 0xE7	; 231
    50ce:	81 e0       	ldi	r24, 0x01	; 1
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	02 80       	ldd	r0, Z+2	; 0x02
    50d4:	02 c0       	rjmp	.+4      	; 0x50da <_turn_on+0x4e>
    50d6:	88 0f       	add	r24, r24
    50d8:	99 1f       	adc	r25, r25
    50da:	0a 94       	dec	r0
    50dc:	e2 f7       	brpl	.-8      	; 0x50d6 <_turn_on+0x4a>
    50de:	80 95       	com	r24
    50e0:	84 23       	and	r24, r20
    50e2:	8c 93       	st	X, r24
    50e4:	08 95       	ret
    50e6:	fc 01       	movw	r30, r24
    50e8:	ee 0f       	add	r30, r30
    50ea:	ff 1f       	adc	r31, r31
    50ec:	df 01       	movw	r26, r30
    50ee:	a8 0f       	add	r26, r24
    50f0:	b9 1f       	adc	r27, r25
    50f2:	aa 0f       	add	r26, r26
    50f4:	bb 1f       	adc	r27, r27
    50f6:	a8 55       	subi	r26, 0x58	; 88
    50f8:	b7 4e       	sbci	r27, 0xE7	; 231
    50fa:	0d 90       	ld	r0, X+
    50fc:	bc 91       	ld	r27, X
    50fe:	a0 2d       	mov	r26, r0
    5100:	2c 91       	ld	r18, X
    5102:	e8 0f       	add	r30, r24
    5104:	f9 1f       	adc	r31, r25
    5106:	ee 0f       	add	r30, r30
    5108:	ff 1f       	adc	r31, r31
    510a:	e8 55       	subi	r30, 0x58	; 88
    510c:	f7 4e       	sbci	r31, 0xE7	; 231
    510e:	81 e0       	ldi	r24, 0x01	; 1
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	02 80       	ldd	r0, Z+2	; 0x02
    5114:	02 c0       	rjmp	.+4      	; 0x511a <_turn_on+0x8e>
    5116:	88 0f       	add	r24, r24
    5118:	99 1f       	adc	r25, r25
    511a:	0a 94       	dec	r0
    511c:	e2 f7       	brpl	.-8      	; 0x5116 <_turn_on+0x8a>
    511e:	82 2b       	or	r24, r18
    5120:	8c 93       	st	X, r24
    5122:	08 95       	ret

00005124 <_hal_led_task>:
    5124:	cc 24       	eor	r12, r12
    5126:	c3 94       	inc	r12
    5128:	d1 2c       	mov	r13, r1
    512a:	68 94       	set
    512c:	bb 24       	eor	r11, r11
    512e:	b2 f8       	bld	r11, 2
    5130:	c8 ea       	ldi	r28, 0xA8	; 168
    5132:	d8 e1       	ldi	r29, 0x18	; 24
    5134:	10 e0       	ldi	r17, 0x00	; 0
    5136:	8c 81       	ldd	r24, Y+4	; 0x04
    5138:	81 30       	cpi	r24, 0x01	; 1
    513a:	81 f0       	breq	.+32     	; 0x515c <_hal_led_task+0x38>
    513c:	18 f1       	brcs	.+70     	; 0x5184 <_hal_led_task+0x60>
    513e:	82 30       	cpi	r24, 0x02	; 2
    5140:	61 f5       	brne	.+88     	; 0x519a <_hal_led_task+0x76>
    5142:	e8 81       	ld	r30, Y
    5144:	f9 81       	ldd	r31, Y+1	; 0x01
    5146:	20 81       	ld	r18, Z
    5148:	c6 01       	movw	r24, r12
    514a:	0a 80       	ldd	r0, Y+2	; 0x02
    514c:	02 c0       	rjmp	.+4      	; 0x5152 <_hal_led_task+0x2e>
    514e:	88 0f       	add	r24, r24
    5150:	99 1f       	adc	r25, r25
    5152:	0a 94       	dec	r0
    5154:	e2 f7       	brpl	.-8      	; 0x514e <_hal_led_task+0x2a>
    5156:	82 27       	eor	r24, r18
    5158:	80 83       	st	Z, r24
    515a:	1f c0       	rjmp	.+62     	; 0x519a <_hal_led_task+0x76>
    515c:	8d 81       	ldd	r24, Y+5	; 0x05
    515e:	8f 5f       	subi	r24, 0xFF	; 255
    5160:	8a 30       	cpi	r24, 0x0A	; 10
    5162:	10 f4       	brcc	.+4      	; 0x5168 <_hal_led_task+0x44>
    5164:	8d 83       	std	Y+5, r24	; 0x05
    5166:	19 c0       	rjmp	.+50     	; 0x519a <_hal_led_task+0x76>
    5168:	1d 82       	std	Y+5, r1	; 0x05
    516a:	e8 81       	ld	r30, Y
    516c:	f9 81       	ldd	r31, Y+1	; 0x01
    516e:	20 81       	ld	r18, Z
    5170:	c6 01       	movw	r24, r12
    5172:	0a 80       	ldd	r0, Y+2	; 0x02
    5174:	02 c0       	rjmp	.+4      	; 0x517a <_hal_led_task+0x56>
    5176:	88 0f       	add	r24, r24
    5178:	99 1f       	adc	r25, r25
    517a:	0a 94       	dec	r0
    517c:	e2 f7       	brpl	.-8      	; 0x5176 <_hal_led_task+0x52>
    517e:	82 27       	eor	r24, r18
    5180:	80 83       	st	Z, r24
    5182:	0b c0       	rjmp	.+22     	; 0x519a <_hal_led_task+0x76>
    5184:	0d 81       	ldd	r16, Y+5	; 0x05
    5186:	00 23       	and	r16, r16
    5188:	29 f0       	breq	.+10     	; 0x5194 <_hal_led_task+0x70>
    518a:	81 2f       	mov	r24, r17
    518c:	7f df       	rcall	.-258    	; 0x508c <_turn_on>
    518e:	01 50       	subi	r16, 0x01	; 1
    5190:	0d 83       	std	Y+5, r16	; 0x05
    5192:	03 c0       	rjmp	.+6      	; 0x519a <_hal_led_task+0x76>
    5194:	bc 82       	std	Y+4, r11	; 0x04
    5196:	81 2f       	mov	r24, r17
    5198:	2d df       	rcall	.-422    	; 0x4ff4 <_turn_off>
    519a:	1f 5f       	subi	r17, 0xFF	; 255
    519c:	26 96       	adiw	r28, 0x06	; 6
    519e:	14 30       	cpi	r17, 0x04	; 4
    51a0:	51 f6       	brne	.-108    	; 0x5136 <_hal_led_task+0x12>
    51a2:	65 e0       	ldi	r22, 0x05	; 5
    51a4:	70 e0       	ldi	r23, 0x00	; 0
    51a6:	80 e0       	ldi	r24, 0x00	; 0
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	0e 94 53 10 	call	0x20a6	; 0x20a6 <vTaskDelay>
    51ae:	c0 cf       	rjmp	.-128    	; 0x5130 <_hal_led_task+0xc>

000051b0 <status_leds_initialise>:
    51b0:	ef 92       	push	r14
    51b2:	ff 92       	push	r15
    51b4:	0f 93       	push	r16
    51b6:	1f 93       	push	r17
    51b8:	cf 93       	push	r28
    51ba:	df 93       	push	r29
    51bc:	08 2f       	mov	r16, r24
    51be:	80 e4       	ldi	r24, 0x40	; 64
    51c0:	87 b9       	out	0x07, r24	; 7
    51c2:	c8 ea       	ldi	r28, 0xA8	; 168
    51c4:	d8 e1       	ldi	r29, 0x18	; 24
    51c6:	0f 2e       	mov	r0, r31
    51c8:	f8 e2       	ldi	r31, 0x28	; 40
    51ca:	ef 2e       	mov	r14, r31
    51cc:	f1 2c       	mov	r15, r1
    51ce:	f0 2d       	mov	r31, r0
    51d0:	f9 82       	std	Y+1, r15	; 0x01
    51d2:	e8 82       	st	Y, r14
    51d4:	86 e0       	ldi	r24, 0x06	; 6
    51d6:	8a 83       	std	Y+2, r24	; 0x02
    51d8:	1b 82       	std	Y+3, r1	; 0x03
    51da:	14 e0       	ldi	r17, 0x04	; 4
    51dc:	1c 83       	std	Y+4, r17	; 0x04
    51de:	80 e0       	ldi	r24, 0x00	; 0
    51e0:	09 df       	rcall	.-494    	; 0x4ff4 <_turn_off>
    51e2:	80 e8       	ldi	r24, 0x80	; 128
    51e4:	87 b9       	out	0x07, r24	; 7
    51e6:	ff 82       	std	Y+7, r15	; 0x07
    51e8:	ee 82       	std	Y+6, r14	; 0x06
    51ea:	87 e0       	ldi	r24, 0x07	; 7
    51ec:	88 87       	std	Y+8, r24	; 0x08
    51ee:	19 86       	std	Y+9, r1	; 0x09
    51f0:	1a 87       	std	Y+10, r17	; 0x0a
    51f2:	81 e0       	ldi	r24, 0x01	; 1
    51f4:	ff de       	rcall	.-514    	; 0x4ff4 <_turn_off>
    51f6:	80 e2       	ldi	r24, 0x20	; 32
    51f8:	83 bb       	out	0x13, r24	; 19
    51fa:	84 e3       	ldi	r24, 0x34	; 52
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	9d 87       	std	Y+13, r25	; 0x0d
    5200:	8c 87       	std	Y+12, r24	; 0x0c
    5202:	85 e0       	ldi	r24, 0x05	; 5
    5204:	8e 87       	std	Y+14, r24	; 0x0e
    5206:	1f 86       	std	Y+15, r1	; 0x0f
    5208:	18 8b       	std	Y+16, r17	; 0x10
    520a:	82 e0       	ldi	r24, 0x02	; 2
    520c:	f3 de       	rcall	.-538    	; 0x4ff4 <_turn_off>
    520e:	80 e1       	ldi	r24, 0x10	; 16
    5210:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5214:	82 e0       	ldi	r24, 0x02	; 2
    5216:	91 e0       	ldi	r25, 0x01	; 1
    5218:	9b 8b       	std	Y+19, r25	; 0x13
    521a:	8a 8b       	std	Y+18, r24	; 0x12
    521c:	1c 8b       	std	Y+20, r17	; 0x14
    521e:	1d 8a       	std	Y+21, r1	; 0x15
    5220:	1e 8b       	std	Y+22, r17	; 0x16
    5222:	83 e0       	ldi	r24, 0x03	; 3
    5224:	e7 de       	rcall	.-562    	; 0x4ff4 <_turn_off>
    5226:	e1 2c       	mov	r14, r1
    5228:	f1 2c       	mov	r15, r1
    522a:	20 e0       	ldi	r18, 0x00	; 0
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	40 ec       	ldi	r20, 0xC0	; 192
    5230:	50 e0       	ldi	r21, 0x00	; 0
    5232:	66 eb       	ldi	r22, 0xB6	; 182
    5234:	78 e0       	ldi	r23, 0x08	; 8
    5236:	82 e9       	ldi	r24, 0x92	; 146
    5238:	98 e2       	ldi	r25, 0x28	; 40
    523a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <xTaskCreate>
    523e:	df 91       	pop	r29
    5240:	cf 91       	pop	r28
    5242:	1f 91       	pop	r17
    5244:	0f 91       	pop	r16
    5246:	ff 90       	pop	r15
    5248:	ef 90       	pop	r14
    524a:	08 95       	ret

0000524c <status_leds_slowBlink>:
    524c:	cf 93       	push	r28
    524e:	df 93       	push	r29
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	fc 01       	movw	r30, r24
    5254:	ee 0f       	add	r30, r30
    5256:	ff 1f       	adc	r31, r31
    5258:	df 01       	movw	r26, r30
    525a:	a8 0f       	add	r26, r24
    525c:	b9 1f       	adc	r27, r25
    525e:	aa 0f       	add	r26, r26
    5260:	bb 1f       	adc	r27, r27
    5262:	a8 55       	subi	r26, 0x58	; 88
    5264:	b7 4e       	sbci	r27, 0xE7	; 231
    5266:	cd 91       	ld	r28, X+
    5268:	dc 91       	ld	r29, X
    526a:	11 97       	sbiw	r26, 0x01	; 1
    526c:	48 81       	ld	r20, Y
    526e:	21 e0       	ldi	r18, 0x01	; 1
    5270:	30 e0       	ldi	r19, 0x00	; 0
    5272:	12 96       	adiw	r26, 0x02	; 2
    5274:	0c 90       	ld	r0, X
    5276:	12 97       	sbiw	r26, 0x02	; 2
    5278:	02 c0       	rjmp	.+4      	; 0x527e <status_leds_slowBlink+0x32>
    527a:	22 0f       	add	r18, r18
    527c:	33 1f       	adc	r19, r19
    527e:	0a 94       	dec	r0
    5280:	e2 f7       	brpl	.-8      	; 0x527a <status_leds_slowBlink+0x2e>
    5282:	24 27       	eor	r18, r20
    5284:	28 83       	st	Y, r18
    5286:	fd 01       	movw	r30, r26
    5288:	81 e0       	ldi	r24, 0x01	; 1
    528a:	84 83       	std	Z+4, r24	; 0x04
    528c:	df 91       	pop	r29
    528e:	cf 91       	pop	r28
    5290:	08 95       	ret

00005292 <status_leds_fastBlink>:
    5292:	cf 93       	push	r28
    5294:	df 93       	push	r29
    5296:	90 e0       	ldi	r25, 0x00	; 0
    5298:	fc 01       	movw	r30, r24
    529a:	ee 0f       	add	r30, r30
    529c:	ff 1f       	adc	r31, r31
    529e:	df 01       	movw	r26, r30
    52a0:	a8 0f       	add	r26, r24
    52a2:	b9 1f       	adc	r27, r25
    52a4:	aa 0f       	add	r26, r26
    52a6:	bb 1f       	adc	r27, r27
    52a8:	a8 55       	subi	r26, 0x58	; 88
    52aa:	b7 4e       	sbci	r27, 0xE7	; 231
    52ac:	cd 91       	ld	r28, X+
    52ae:	dc 91       	ld	r29, X
    52b0:	11 97       	sbiw	r26, 0x01	; 1
    52b2:	48 81       	ld	r20, Y
    52b4:	21 e0       	ldi	r18, 0x01	; 1
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	12 96       	adiw	r26, 0x02	; 2
    52ba:	0c 90       	ld	r0, X
    52bc:	12 97       	sbiw	r26, 0x02	; 2
    52be:	02 c0       	rjmp	.+4      	; 0x52c4 <status_leds_fastBlink+0x32>
    52c0:	22 0f       	add	r18, r18
    52c2:	33 1f       	adc	r19, r19
    52c4:	0a 94       	dec	r0
    52c6:	e2 f7       	brpl	.-8      	; 0x52c0 <status_leds_fastBlink+0x2e>
    52c8:	24 27       	eor	r18, r20
    52ca:	28 83       	st	Y, r18
    52cc:	fd 01       	movw	r30, r26
    52ce:	82 e0       	ldi	r24, 0x02	; 2
    52d0:	84 83       	std	Z+4, r24	; 0x04
    52d2:	df 91       	pop	r29
    52d4:	cf 91       	pop	r28
    52d6:	08 95       	ret

000052d8 <status_leds_ledOn>:
    52d8:	28 2f       	mov	r18, r24
    52da:	30 e0       	ldi	r19, 0x00	; 0
    52dc:	f9 01       	movw	r30, r18
    52de:	ee 0f       	add	r30, r30
    52e0:	ff 1f       	adc	r31, r31
    52e2:	e2 0f       	add	r30, r18
    52e4:	f3 1f       	adc	r31, r19
    52e6:	ee 0f       	add	r30, r30
    52e8:	ff 1f       	adc	r31, r31
    52ea:	e8 55       	subi	r30, 0x58	; 88
    52ec:	f7 4e       	sbci	r31, 0xE7	; 231
    52ee:	93 e0       	ldi	r25, 0x03	; 3
    52f0:	94 83       	std	Z+4, r25	; 0x04
    52f2:	cc ce       	rjmp	.-616    	; 0x508c <_turn_on>
    52f4:	08 95       	ret

000052f6 <status_leds_ledOff>:
    52f6:	28 2f       	mov	r18, r24
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	f9 01       	movw	r30, r18
    52fc:	ee 0f       	add	r30, r30
    52fe:	ff 1f       	adc	r31, r31
    5300:	e2 0f       	add	r30, r18
    5302:	f3 1f       	adc	r31, r19
    5304:	ee 0f       	add	r30, r30
    5306:	ff 1f       	adc	r31, r31
    5308:	e8 55       	subi	r30, 0x58	; 88
    530a:	f7 4e       	sbci	r31, 0xE7	; 231
    530c:	94 e0       	ldi	r25, 0x04	; 4
    530e:	94 83       	std	Z+4, r25	; 0x04
    5310:	71 ce       	rjmp	.-798    	; 0x4ff4 <_turn_off>
    5312:	08 95       	ret

00005314 <status_leds_longPuls>:
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	fc 01       	movw	r30, r24
    5318:	ee 0f       	add	r30, r30
    531a:	ff 1f       	adc	r31, r31
    531c:	df 01       	movw	r26, r30
    531e:	a8 0f       	add	r26, r24
    5320:	b9 1f       	adc	r27, r25
    5322:	aa 0f       	add	r26, r26
    5324:	bb 1f       	adc	r27, r27
    5326:	a8 55       	subi	r26, 0x58	; 88
    5328:	b7 4e       	sbci	r27, 0xE7	; 231
    532a:	24 e0       	ldi	r18, 0x04	; 4
    532c:	15 96       	adiw	r26, 0x05	; 5
    532e:	2c 93       	st	X, r18
    5330:	15 97       	sbiw	r26, 0x05	; 5
    5332:	fd 01       	movw	r30, r26
    5334:	14 82       	std	Z+4, r1	; 0x04
    5336:	08 95       	ret

00005338 <status_leds_shortPuls>:
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	fc 01       	movw	r30, r24
    533c:	ee 0f       	add	r30, r30
    533e:	ff 1f       	adc	r31, r31
    5340:	df 01       	movw	r26, r30
    5342:	a8 0f       	add	r26, r24
    5344:	b9 1f       	adc	r27, r25
    5346:	aa 0f       	add	r26, r26
    5348:	bb 1f       	adc	r27, r27
    534a:	a8 55       	subi	r26, 0x58	; 88
    534c:	b7 4e       	sbci	r27, 0xE7	; 231
    534e:	21 e0       	ldi	r18, 0x01	; 1
    5350:	15 96       	adiw	r26, 0x05	; 5
    5352:	2c 93       	st	X, r18
    5354:	15 97       	sbiw	r26, 0x05	; 5
    5356:	fd 01       	movw	r30, r26
    5358:	14 82       	std	Z+4, r1	; 0x04
    535a:	08 95       	ret

0000535c <_initTwiInterface>:
    535c:	80 91 ce 18 	lds	r24, 0x18CE	; 0x8018ce <_twiIsInitiated>
    5360:	81 11       	cpse	r24, r1
    5362:	0c c0       	rjmp	.+24     	; 0x537c <_initTwiInterface+0x20>
    5364:	8c e0       	ldi	r24, 0x0C	; 12
    5366:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    536a:	8f ef       	ldi	r24, 0xFF	; 255
    536c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5370:	84 e0       	ldi	r24, 0x04	; 4
    5372:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5376:	81 e0       	ldi	r24, 0x01	; 1
    5378:	80 93 ce 18 	sts	0x18CE, r24	; 0x8018ce <_twiIsInitiated>
    537c:	08 95       	ret

0000537e <twiCreate>:
    537e:	af 92       	push	r10
    5380:	bf 92       	push	r11
    5382:	cf 92       	push	r12
    5384:	df 92       	push	r13
    5386:	ef 92       	push	r14
    5388:	ff 92       	push	r15
    538a:	0f 93       	push	r16
    538c:	1f 93       	push	r17
    538e:	cf 93       	push	r28
    5390:	df 93       	push	r29
    5392:	a8 2e       	mov	r10, r24
    5394:	b6 2e       	mov	r11, r22
    5396:	69 01       	movw	r12, r18
    5398:	7a 01       	movw	r14, r20
    539a:	84 e0       	ldi	r24, 0x04	; 4
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	a0 d3       	rcall	.+1856   	; 0x5ae0 <malloc>
    53a0:	ec 01       	movw	r28, r24
    53a2:	89 2b       	or	r24, r25
    53a4:	61 f1       	breq	.+88     	; 0x53fe <twiCreate+0x80>
    53a6:	a8 82       	st	Y, r10
    53a8:	81 e0       	ldi	r24, 0x01	; 1
    53aa:	b8 12       	cpse	r11, r24
    53ac:	12 c0       	rjmp	.+36     	; 0x53d2 <twiCreate+0x54>
    53ae:	c7 01       	movw	r24, r14
    53b0:	b6 01       	movw	r22, r12
    53b2:	20 ea       	ldi	r18, 0xA0	; 160
    53b4:	36 e8       	ldi	r19, 0x86	; 134
    53b6:	41 e0       	ldi	r20, 0x01	; 1
    53b8:	50 e0       	ldi	r21, 0x00	; 0
    53ba:	4e d3       	rcall	.+1692   	; 0x5a58 <__udivmodsi4>
    53bc:	da 01       	movw	r26, r20
    53be:	c9 01       	movw	r24, r18
    53c0:	40 97       	sbiw	r24, 0x10	; 16
    53c2:	a1 09       	sbc	r26, r1
    53c4:	b1 09       	sbc	r27, r1
    53c6:	b6 95       	lsr	r27
    53c8:	a7 95       	ror	r26
    53ca:	97 95       	ror	r25
    53cc:	87 95       	ror	r24
    53ce:	89 83       	std	Y+1, r24	; 0x01
    53d0:	11 c0       	rjmp	.+34     	; 0x53f4 <twiCreate+0x76>
    53d2:	c7 01       	movw	r24, r14
    53d4:	b6 01       	movw	r22, r12
    53d6:	20 e8       	ldi	r18, 0x80	; 128
    53d8:	3a e1       	ldi	r19, 0x1A	; 26
    53da:	46 e0       	ldi	r20, 0x06	; 6
    53dc:	50 e0       	ldi	r21, 0x00	; 0
    53de:	3c d3       	rcall	.+1656   	; 0x5a58 <__udivmodsi4>
    53e0:	da 01       	movw	r26, r20
    53e2:	c9 01       	movw	r24, r18
    53e4:	40 97       	sbiw	r24, 0x10	; 16
    53e6:	a1 09       	sbc	r26, r1
    53e8:	b1 09       	sbc	r27, r1
    53ea:	b6 95       	lsr	r27
    53ec:	a7 95       	ror	r26
    53ee:	97 95       	ror	r25
    53f0:	87 95       	ror	r24
    53f2:	89 83       	std	Y+1, r24	; 0x01
    53f4:	1b 83       	std	Y+3, r17	; 0x03
    53f6:	0a 83       	std	Y+2, r16	; 0x02
    53f8:	8c 2f       	mov	r24, r28
    53fa:	9d 2f       	mov	r25, r29
    53fc:	02 c0       	rjmp	.+4      	; 0x5402 <twiCreate+0x84>
    53fe:	80 e0       	ldi	r24, 0x00	; 0
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	df 91       	pop	r29
    5404:	cf 91       	pop	r28
    5406:	1f 91       	pop	r17
    5408:	0f 91       	pop	r16
    540a:	ff 90       	pop	r15
    540c:	ef 90       	pop	r14
    540e:	df 90       	pop	r13
    5410:	cf 90       	pop	r12
    5412:	bf 90       	pop	r11
    5414:	af 90       	pop	r10
    5416:	08 95       	ret

00005418 <twiIsBusy>:
    5418:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    541c:	81 70       	andi	r24, 0x01	; 1
    541e:	08 95       	ret

00005420 <twiTransmit>:
    5420:	ff 92       	push	r15
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    542a:	00 97       	sbiw	r24, 0x00	; 0
    542c:	d1 f1       	breq	.+116    	; 0x54a2 <twiTransmit+0x82>
    542e:	4a 30       	cpi	r20, 0x0A	; 10
    5430:	d0 f5       	brcc	.+116    	; 0x54a6 <twiTransmit+0x86>
    5432:	f4 2e       	mov	r15, r20
    5434:	8b 01       	movw	r16, r22
    5436:	ec 01       	movw	r28, r24
    5438:	ef df       	rcall	.-34     	; 0x5418 <twiIsBusy>
    543a:	81 11       	cpse	r24, r1
    543c:	36 c0       	rjmp	.+108    	; 0x54aa <twiTransmit+0x8a>
    543e:	80 91 c1 18 	lds	r24, 0x18C1	; 0x8018c1 <_twiCurrentHandler>
    5442:	90 91 c2 18 	lds	r25, 0x18C2	; 0x8018c2 <_twiCurrentHandler+0x1>
    5446:	c8 17       	cp	r28, r24
    5448:	d9 07       	cpc	r29, r25
    544a:	41 f0       	breq	.+16     	; 0x545c <twiTransmit+0x3c>
    544c:	87 df       	rcall	.-242    	; 0x535c <_initTwiInterface>
    544e:	89 81       	ldd	r24, Y+1	; 0x01
    5450:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5454:	d0 93 c2 18 	sts	0x18C2, r29	; 0x8018c2 <_twiCurrentHandler+0x1>
    5458:	c0 93 c1 18 	sts	0x18C1, r28	; 0x8018c1 <_twiCurrentHandler>
    545c:	81 e0       	ldi	r24, 0x01	; 1
    545e:	8f 0d       	add	r24, r15
    5460:	80 93 c3 18 	sts	0x18C3, r24	; 0x8018c3 <_twiMessageLen>
    5464:	88 81       	ld	r24, Y
    5466:	88 0f       	add	r24, r24
    5468:	80 93 c4 18 	sts	0x18C4, r24	; 0x8018c4 <_twiMessageBuffer>
    546c:	ff 20       	and	r15, r15
    546e:	89 f0       	breq	.+34     	; 0x5492 <twiTransmit+0x72>
    5470:	f8 01       	movw	r30, r16
    5472:	a5 ec       	ldi	r26, 0xC5	; 197
    5474:	b8 e1       	ldi	r27, 0x18	; 24
    5476:	4f ef       	ldi	r20, 0xFF	; 255
    5478:	4f 0d       	add	r20, r15
    547a:	64 2f       	mov	r22, r20
    547c:	70 e0       	ldi	r23, 0x00	; 0
    547e:	cb 01       	movw	r24, r22
    5480:	01 96       	adiw	r24, 0x01	; 1
    5482:	b8 01       	movw	r22, r16
    5484:	68 0f       	add	r22, r24
    5486:	79 1f       	adc	r23, r25
    5488:	81 91       	ld	r24, Z+
    548a:	8d 93       	st	X+, r24
    548c:	e6 17       	cp	r30, r22
    548e:	f7 07       	cpc	r31, r23
    5490:	d9 f7       	brne	.-10     	; 0x5488 <twiTransmit+0x68>
    5492:	88 ef       	ldi	r24, 0xF8	; 248
    5494:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5498:	85 ea       	ldi	r24, 0xA5	; 165
    549a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    549e:	84 e0       	ldi	r24, 0x04	; 4
    54a0:	05 c0       	rjmp	.+10     	; 0x54ac <twiTransmit+0x8c>
    54a2:	86 e0       	ldi	r24, 0x06	; 6
    54a4:	03 c0       	rjmp	.+6      	; 0x54ac <twiTransmit+0x8c>
    54a6:	87 e0       	ldi	r24, 0x07	; 7
    54a8:	01 c0       	rjmp	.+2      	; 0x54ac <twiTransmit+0x8c>
    54aa:	82 e0       	ldi	r24, 0x02	; 2
    54ac:	df 91       	pop	r29
    54ae:	cf 91       	pop	r28
    54b0:	1f 91       	pop	r17
    54b2:	0f 91       	pop	r16
    54b4:	ff 90       	pop	r15
    54b6:	08 95       	ret

000054b8 <twiReceive>:
    54b8:	1f 93       	push	r17
    54ba:	cf 93       	push	r28
    54bc:	df 93       	push	r29
    54be:	00 97       	sbiw	r24, 0x00	; 0
    54c0:	29 f1       	breq	.+74     	; 0x550c <twiReceive+0x54>
    54c2:	6b 30       	cpi	r22, 0x0B	; 11
    54c4:	28 f5       	brcc	.+74     	; 0x5510 <twiReceive+0x58>
    54c6:	16 2f       	mov	r17, r22
    54c8:	ec 01       	movw	r28, r24
    54ca:	a6 df       	rcall	.-180    	; 0x5418 <twiIsBusy>
    54cc:	81 11       	cpse	r24, r1
    54ce:	22 c0       	rjmp	.+68     	; 0x5514 <twiReceive+0x5c>
    54d0:	80 91 c1 18 	lds	r24, 0x18C1	; 0x8018c1 <_twiCurrentHandler>
    54d4:	90 91 c2 18 	lds	r25, 0x18C2	; 0x8018c2 <_twiCurrentHandler+0x1>
    54d8:	c8 17       	cp	r28, r24
    54da:	d9 07       	cpc	r29, r25
    54dc:	41 f0       	breq	.+16     	; 0x54ee <twiReceive+0x36>
    54de:	3e df       	rcall	.-388    	; 0x535c <_initTwiInterface>
    54e0:	89 81       	ldd	r24, Y+1	; 0x01
    54e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    54e6:	d0 93 c2 18 	sts	0x18C2, r29	; 0x8018c2 <_twiCurrentHandler+0x1>
    54ea:	c0 93 c1 18 	sts	0x18C1, r28	; 0x8018c1 <_twiCurrentHandler>
    54ee:	10 93 c3 18 	sts	0x18C3, r17	; 0x8018c3 <_twiMessageLen>
    54f2:	88 81       	ld	r24, Y
    54f4:	88 0f       	add	r24, r24
    54f6:	81 60       	ori	r24, 0x01	; 1
    54f8:	80 93 c4 18 	sts	0x18C4, r24	; 0x8018c4 <_twiMessageBuffer>
    54fc:	88 ef       	ldi	r24, 0xF8	; 248
    54fe:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5502:	85 ea       	ldi	r24, 0xA5	; 165
    5504:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5508:	85 e0       	ldi	r24, 0x05	; 5
    550a:	05 c0       	rjmp	.+10     	; 0x5516 <twiReceive+0x5e>
    550c:	86 e0       	ldi	r24, 0x06	; 6
    550e:	03 c0       	rjmp	.+6      	; 0x5516 <twiReceive+0x5e>
    5510:	87 e0       	ldi	r24, 0x07	; 7
    5512:	01 c0       	rjmp	.+2      	; 0x5516 <twiReceive+0x5e>
    5514:	82 e0       	ldi	r24, 0x02	; 2
    5516:	df 91       	pop	r29
    5518:	cf 91       	pop	r28
    551a:	1f 91       	pop	r17
    551c:	08 95       	ret

0000551e <__vector_39>:
    551e:	1f 92       	push	r1
    5520:	0f 92       	push	r0
    5522:	0f b6       	in	r0, 0x3f	; 63
    5524:	0f 92       	push	r0
    5526:	11 24       	eor	r1, r1
    5528:	0b b6       	in	r0, 0x3b	; 59
    552a:	0f 92       	push	r0
    552c:	2f 93       	push	r18
    552e:	3f 93       	push	r19
    5530:	4f 93       	push	r20
    5532:	5f 93       	push	r21
    5534:	6f 93       	push	r22
    5536:	7f 93       	push	r23
    5538:	8f 93       	push	r24
    553a:	9f 93       	push	r25
    553c:	af 93       	push	r26
    553e:	bf 93       	push	r27
    5540:	ef 93       	push	r30
    5542:	ff 93       	push	r31
    5544:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5548:	8e 2f       	mov	r24, r30
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	fc 01       	movw	r30, r24
    554e:	38 97       	sbiw	r30, 0x08	; 8
    5550:	e1 35       	cpi	r30, 0x51	; 81
    5552:	f1 05       	cpc	r31, r1
    5554:	08 f0       	brcs	.+2      	; 0x5558 <__vector_39+0x3a>
    5556:	75 c0       	rjmp	.+234    	; 0x5642 <__vector_39+0x124>
    5558:	88 27       	eor	r24, r24
    555a:	e4 58       	subi	r30, 0x84	; 132
    555c:	ff 4f       	sbci	r31, 0xFF	; 255
    555e:	8f 4f       	sbci	r24, 0xFF	; 255
    5560:	9d c2       	rjmp	.+1338   	; 0x5a9c <__tablejump2__>
    5562:	10 92 c0 18 	sts	0x18C0, r1	; 0x8018c0 <_index.1885>
    5566:	e0 91 c0 18 	lds	r30, 0x18C0	; 0x8018c0 <_index.1885>
    556a:	80 91 c3 18 	lds	r24, 0x18C3	; 0x8018c3 <_twiMessageLen>
    556e:	e8 17       	cp	r30, r24
    5570:	70 f4       	brcc	.+28     	; 0x558e <__vector_39+0x70>
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	8e 0f       	add	r24, r30
    5576:	80 93 c0 18 	sts	0x18C0, r24	; 0x8018c0 <_index.1885>
    557a:	f0 e0       	ldi	r31, 0x00	; 0
    557c:	ec 53       	subi	r30, 0x3C	; 60
    557e:	f7 4e       	sbci	r31, 0xE7	; 231
    5580:	80 81       	ld	r24, Z
    5582:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5586:	85 e8       	ldi	r24, 0x85	; 133
    5588:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    558c:	72 c0       	rjmp	.+228    	; 0x5672 <__vector_39+0x154>
    558e:	84 e9       	ldi	r24, 0x94	; 148
    5590:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5594:	80 91 c1 18 	lds	r24, 0x18C1	; 0x8018c1 <_twiCurrentHandler>
    5598:	90 91 c2 18 	lds	r25, 0x18C2	; 0x8018c2 <_twiCurrentHandler+0x1>
    559c:	dc 01       	movw	r26, r24
    559e:	12 96       	adiw	r26, 0x02	; 2
    55a0:	ed 91       	ld	r30, X+
    55a2:	fc 91       	ld	r31, X
    55a4:	13 97       	sbiw	r26, 0x03	; 3
    55a6:	30 97       	sbiw	r30, 0x00	; 0
    55a8:	09 f4       	brne	.+2      	; 0x55ac <__vector_39+0x8e>
    55aa:	63 c0       	rjmp	.+198    	; 0x5672 <__vector_39+0x154>
    55ac:	20 e0       	ldi	r18, 0x00	; 0
    55ae:	40 e0       	ldi	r20, 0x00	; 0
    55b0:	50 e0       	ldi	r21, 0x00	; 0
    55b2:	64 e0       	ldi	r22, 0x04	; 4
    55b4:	19 95       	eicall
    55b6:	5d c0       	rjmp	.+186    	; 0x5672 <__vector_39+0x154>
    55b8:	e0 91 c0 18 	lds	r30, 0x18C0	; 0x8018c0 <_index.1885>
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	8e 0f       	add	r24, r30
    55c0:	80 93 c0 18 	sts	0x18C0, r24	; 0x8018c0 <_index.1885>
    55c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55c8:	f0 e0       	ldi	r31, 0x00	; 0
    55ca:	ec 53       	subi	r30, 0x3C	; 60
    55cc:	f7 4e       	sbci	r31, 0xE7	; 231
    55ce:	80 83       	st	Z, r24
    55d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    55d4:	80 34       	cpi	r24, 0x40	; 64
    55d6:	11 f4       	brne	.+4      	; 0x55dc <__vector_39+0xbe>
    55d8:	10 92 c0 18 	sts	0x18C0, r1	; 0x8018c0 <_index.1885>
    55dc:	20 91 c0 18 	lds	r18, 0x18C0	; 0x8018c0 <_index.1885>
    55e0:	30 e0       	ldi	r19, 0x00	; 0
    55e2:	80 91 c3 18 	lds	r24, 0x18C3	; 0x8018c3 <_twiMessageLen>
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	01 97       	sbiw	r24, 0x01	; 1
    55ea:	28 17       	cp	r18, r24
    55ec:	39 07       	cpc	r19, r25
    55ee:	24 f4       	brge	.+8      	; 0x55f8 <__vector_39+0xda>
    55f0:	85 ec       	ldi	r24, 0xC5	; 197
    55f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55f6:	3d c0       	rjmp	.+122    	; 0x5672 <__vector_39+0x154>
    55f8:	85 e8       	ldi	r24, 0x85	; 133
    55fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55fe:	39 c0       	rjmp	.+114    	; 0x5672 <__vector_39+0x154>
    5600:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5604:	e0 91 c0 18 	lds	r30, 0x18C0	; 0x8018c0 <_index.1885>
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	ec 53       	subi	r30, 0x3C	; 60
    560c:	f7 4e       	sbci	r31, 0xE7	; 231
    560e:	80 83       	st	Z, r24
    5610:	84 e9       	ldi	r24, 0x94	; 148
    5612:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5616:	80 91 c1 18 	lds	r24, 0x18C1	; 0x8018c1 <_twiCurrentHandler>
    561a:	90 91 c2 18 	lds	r25, 0x18C2	; 0x8018c2 <_twiCurrentHandler+0x1>
    561e:	dc 01       	movw	r26, r24
    5620:	12 96       	adiw	r26, 0x02	; 2
    5622:	ed 91       	ld	r30, X+
    5624:	fc 91       	ld	r31, X
    5626:	13 97       	sbiw	r26, 0x03	; 3
    5628:	30 97       	sbiw	r30, 0x00	; 0
    562a:	19 f1       	breq	.+70     	; 0x5672 <__vector_39+0x154>
    562c:	20 91 c3 18 	lds	r18, 0x18C3	; 0x8018c3 <_twiMessageLen>
    5630:	44 ec       	ldi	r20, 0xC4	; 196
    5632:	58 e1       	ldi	r21, 0x18	; 24
    5634:	65 e0       	ldi	r22, 0x05	; 5
    5636:	19 95       	eicall
    5638:	1c c0       	rjmp	.+56     	; 0x5672 <__vector_39+0x154>
    563a:	85 ea       	ldi	r24, 0xA5	; 165
    563c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5640:	18 c0       	rjmp	.+48     	; 0x5672 <__vector_39+0x154>
    5642:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5646:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    564a:	84 e0       	ldi	r24, 0x04	; 4
    564c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5650:	80 91 c1 18 	lds	r24, 0x18C1	; 0x8018c1 <_twiCurrentHandler>
    5654:	90 91 c2 18 	lds	r25, 0x18C2	; 0x8018c2 <_twiCurrentHandler+0x1>
    5658:	dc 01       	movw	r26, r24
    565a:	12 96       	adiw	r26, 0x02	; 2
    565c:	ed 91       	ld	r30, X+
    565e:	fc 91       	ld	r31, X
    5660:	13 97       	sbiw	r26, 0x03	; 3
    5662:	30 97       	sbiw	r30, 0x00	; 0
    5664:	31 f0       	breq	.+12     	; 0x5672 <__vector_39+0x154>
    5666:	20 e0       	ldi	r18, 0x00	; 0
    5668:	40 e0       	ldi	r20, 0x00	; 0
    566a:	50 e0       	ldi	r21, 0x00	; 0
    566c:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5670:	19 95       	eicall
    5672:	ff 91       	pop	r31
    5674:	ef 91       	pop	r30
    5676:	bf 91       	pop	r27
    5678:	af 91       	pop	r26
    567a:	9f 91       	pop	r25
    567c:	8f 91       	pop	r24
    567e:	7f 91       	pop	r23
    5680:	6f 91       	pop	r22
    5682:	5f 91       	pop	r21
    5684:	4f 91       	pop	r20
    5686:	3f 91       	pop	r19
    5688:	2f 91       	pop	r18
    568a:	0f 90       	pop	r0
    568c:	0b be       	out	0x3b, r0	; 59
    568e:	0f 90       	pop	r0
    5690:	0f be       	out	0x3f, r0	; 63
    5692:	0f 90       	pop	r0
    5694:	1f 90       	pop	r1
    5696:	18 95       	reti

00005698 <fifo_init>:
    5698:	fc 01       	movw	r30, r24
    569a:	41 11       	cpse	r20, r1
    569c:	01 c0       	rjmp	.+2      	; 0x56a0 <fifo_init+0x8>
    569e:	41 d3       	rcall	.+1666   	; 0x5d22 <abort>
    56a0:	84 2f       	mov	r24, r20
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	9c 01       	movw	r18, r24
    56a6:	21 50       	subi	r18, 0x01	; 1
    56a8:	31 09       	sbc	r19, r1
    56aa:	82 23       	and	r24, r18
    56ac:	93 23       	and	r25, r19
    56ae:	89 2b       	or	r24, r25
    56b0:	09 f0       	breq	.+2      	; 0x56b4 <fifo_init+0x1c>
    56b2:	37 d3       	rcall	.+1646   	; 0x5d22 <abort>
    56b4:	41 38       	cpi	r20, 0x81	; 129
    56b6:	08 f0       	brcs	.+2      	; 0x56ba <fifo_init+0x22>
    56b8:	34 d3       	rcall	.+1640   	; 0x5d22 <abort>
    56ba:	12 82       	std	Z+2, r1	; 0x02
    56bc:	13 82       	std	Z+3, r1	; 0x03
    56be:	44 83       	std	Z+4, r20	; 0x04
    56c0:	44 0f       	add	r20, r20
    56c2:	41 50       	subi	r20, 0x01	; 1
    56c4:	45 83       	std	Z+5, r20	; 0x05
    56c6:	71 83       	std	Z+1, r23	; 0x01
    56c8:	60 83       	st	Z, r22
    56ca:	80 e0       	ldi	r24, 0x00	; 0
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	08 95       	ret

000056d0 <__subsf3>:
    56d0:	50 58       	subi	r21, 0x80	; 128

000056d2 <__addsf3>:
    56d2:	bb 27       	eor	r27, r27
    56d4:	aa 27       	eor	r26, r26
    56d6:	0e d0       	rcall	.+28     	; 0x56f4 <__addsf3x>
    56d8:	21 c1       	rjmp	.+578    	; 0x591c <__fp_round>
    56da:	12 d1       	rcall	.+548    	; 0x5900 <__fp_pscA>
    56dc:	30 f0       	brcs	.+12     	; 0x56ea <__addsf3+0x18>
    56de:	17 d1       	rcall	.+558    	; 0x590e <__fp_pscB>
    56e0:	20 f0       	brcs	.+8      	; 0x56ea <__addsf3+0x18>
    56e2:	31 f4       	brne	.+12     	; 0x56f0 <__addsf3+0x1e>
    56e4:	9f 3f       	cpi	r25, 0xFF	; 255
    56e6:	11 f4       	brne	.+4      	; 0x56ec <__addsf3+0x1a>
    56e8:	1e f4       	brtc	.+6      	; 0x56f0 <__addsf3+0x1e>
    56ea:	07 c1       	rjmp	.+526    	; 0x58fa <__fp_nan>
    56ec:	0e f4       	brtc	.+2      	; 0x56f0 <__addsf3+0x1e>
    56ee:	e0 95       	com	r30
    56f0:	e7 fb       	bst	r30, 7
    56f2:	fd c0       	rjmp	.+506    	; 0x58ee <__fp_inf>

000056f4 <__addsf3x>:
    56f4:	e9 2f       	mov	r30, r25
    56f6:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fp_split3>
    56fa:	78 f3       	brcs	.-34     	; 0x56da <__addsf3+0x8>
    56fc:	ba 17       	cp	r27, r26
    56fe:	62 07       	cpc	r22, r18
    5700:	73 07       	cpc	r23, r19
    5702:	84 07       	cpc	r24, r20
    5704:	95 07       	cpc	r25, r21
    5706:	20 f0       	brcs	.+8      	; 0x5710 <__addsf3x+0x1c>
    5708:	79 f4       	brne	.+30     	; 0x5728 <__addsf3x+0x34>
    570a:	a6 f5       	brtc	.+104    	; 0x5774 <__addsf3x+0x80>
    570c:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__fp_zero>
    5710:	0e f4       	brtc	.+2      	; 0x5714 <__addsf3x+0x20>
    5712:	e0 95       	com	r30
    5714:	0b 2e       	mov	r0, r27
    5716:	ba 2f       	mov	r27, r26
    5718:	a0 2d       	mov	r26, r0
    571a:	0b 01       	movw	r0, r22
    571c:	b9 01       	movw	r22, r18
    571e:	90 01       	movw	r18, r0
    5720:	0c 01       	movw	r0, r24
    5722:	ca 01       	movw	r24, r20
    5724:	a0 01       	movw	r20, r0
    5726:	11 24       	eor	r1, r1
    5728:	ff 27       	eor	r31, r31
    572a:	59 1b       	sub	r21, r25
    572c:	99 f0       	breq	.+38     	; 0x5754 <__addsf3x+0x60>
    572e:	59 3f       	cpi	r21, 0xF9	; 249
    5730:	50 f4       	brcc	.+20     	; 0x5746 <__addsf3x+0x52>
    5732:	50 3e       	cpi	r21, 0xE0	; 224
    5734:	68 f1       	brcs	.+90     	; 0x5790 <__addsf3x+0x9c>
    5736:	1a 16       	cp	r1, r26
    5738:	f0 40       	sbci	r31, 0x00	; 0
    573a:	a2 2f       	mov	r26, r18
    573c:	23 2f       	mov	r18, r19
    573e:	34 2f       	mov	r19, r20
    5740:	44 27       	eor	r20, r20
    5742:	58 5f       	subi	r21, 0xF8	; 248
    5744:	f3 cf       	rjmp	.-26     	; 0x572c <__addsf3x+0x38>
    5746:	46 95       	lsr	r20
    5748:	37 95       	ror	r19
    574a:	27 95       	ror	r18
    574c:	a7 95       	ror	r26
    574e:	f0 40       	sbci	r31, 0x00	; 0
    5750:	53 95       	inc	r21
    5752:	c9 f7       	brne	.-14     	; 0x5746 <__addsf3x+0x52>
    5754:	7e f4       	brtc	.+30     	; 0x5774 <__addsf3x+0x80>
    5756:	1f 16       	cp	r1, r31
    5758:	ba 0b       	sbc	r27, r26
    575a:	62 0b       	sbc	r22, r18
    575c:	73 0b       	sbc	r23, r19
    575e:	84 0b       	sbc	r24, r20
    5760:	ba f0       	brmi	.+46     	; 0x5790 <__addsf3x+0x9c>
    5762:	91 50       	subi	r25, 0x01	; 1
    5764:	a1 f0       	breq	.+40     	; 0x578e <__addsf3x+0x9a>
    5766:	ff 0f       	add	r31, r31
    5768:	bb 1f       	adc	r27, r27
    576a:	66 1f       	adc	r22, r22
    576c:	77 1f       	adc	r23, r23
    576e:	88 1f       	adc	r24, r24
    5770:	c2 f7       	brpl	.-16     	; 0x5762 <__addsf3x+0x6e>
    5772:	0e c0       	rjmp	.+28     	; 0x5790 <__addsf3x+0x9c>
    5774:	ba 0f       	add	r27, r26
    5776:	62 1f       	adc	r22, r18
    5778:	73 1f       	adc	r23, r19
    577a:	84 1f       	adc	r24, r20
    577c:	48 f4       	brcc	.+18     	; 0x5790 <__addsf3x+0x9c>
    577e:	87 95       	ror	r24
    5780:	77 95       	ror	r23
    5782:	67 95       	ror	r22
    5784:	b7 95       	ror	r27
    5786:	f7 95       	ror	r31
    5788:	9e 3f       	cpi	r25, 0xFE	; 254
    578a:	08 f0       	brcs	.+2      	; 0x578e <__addsf3x+0x9a>
    578c:	b1 cf       	rjmp	.-158    	; 0x56f0 <__addsf3+0x1e>
    578e:	93 95       	inc	r25
    5790:	88 0f       	add	r24, r24
    5792:	08 f0       	brcs	.+2      	; 0x5796 <__addsf3x+0xa2>
    5794:	99 27       	eor	r25, r25
    5796:	ee 0f       	add	r30, r30
    5798:	97 95       	ror	r25
    579a:	87 95       	ror	r24
    579c:	08 95       	ret

0000579e <__divsf3>:
    579e:	0d d0       	rcall	.+26     	; 0x57ba <__divsf3x>
    57a0:	bd c0       	rjmp	.+378    	; 0x591c <__fp_round>
    57a2:	b5 d0       	rcall	.+362    	; 0x590e <__fp_pscB>
    57a4:	48 f0       	brcs	.+18     	; 0x57b8 <__divsf3+0x1a>
    57a6:	ac d0       	rcall	.+344    	; 0x5900 <__fp_pscA>
    57a8:	38 f0       	brcs	.+14     	; 0x57b8 <__divsf3+0x1a>
    57aa:	21 f4       	brne	.+8      	; 0x57b4 <__divsf3+0x16>
    57ac:	5f 3f       	cpi	r21, 0xFF	; 255
    57ae:	21 f0       	breq	.+8      	; 0x57b8 <__divsf3+0x1a>
    57b0:	9e c0       	rjmp	.+316    	; 0x58ee <__fp_inf>
    57b2:	51 11       	cpse	r21, r1
    57b4:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__fp_szero>
    57b8:	a0 c0       	rjmp	.+320    	; 0x58fa <__fp_nan>

000057ba <__divsf3x>:
    57ba:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fp_split3>
    57be:	88 f3       	brcs	.-30     	; 0x57a2 <__divsf3+0x4>

000057c0 <__divsf3_pse>:
    57c0:	99 23       	and	r25, r25
    57c2:	b9 f3       	breq	.-18     	; 0x57b2 <__divsf3+0x14>
    57c4:	55 23       	and	r21, r21
    57c6:	a1 f3       	breq	.-24     	; 0x57b0 <__divsf3+0x12>
    57c8:	95 1b       	sub	r25, r21
    57ca:	55 0b       	sbc	r21, r21
    57cc:	bb 27       	eor	r27, r27
    57ce:	aa 27       	eor	r26, r26
    57d0:	62 17       	cp	r22, r18
    57d2:	73 07       	cpc	r23, r19
    57d4:	84 07       	cpc	r24, r20
    57d6:	38 f0       	brcs	.+14     	; 0x57e6 <__divsf3_pse+0x26>
    57d8:	9f 5f       	subi	r25, 0xFF	; 255
    57da:	5f 4f       	sbci	r21, 0xFF	; 255
    57dc:	22 0f       	add	r18, r18
    57de:	33 1f       	adc	r19, r19
    57e0:	44 1f       	adc	r20, r20
    57e2:	aa 1f       	adc	r26, r26
    57e4:	a9 f3       	breq	.-22     	; 0x57d0 <__divsf3_pse+0x10>
    57e6:	34 d0       	rcall	.+104    	; 0x5850 <__divsf3_pse+0x90>
    57e8:	0e 2e       	mov	r0, r30
    57ea:	3a f0       	brmi	.+14     	; 0x57fa <__divsf3_pse+0x3a>
    57ec:	e0 e8       	ldi	r30, 0x80	; 128
    57ee:	31 d0       	rcall	.+98     	; 0x5852 <__divsf3_pse+0x92>
    57f0:	91 50       	subi	r25, 0x01	; 1
    57f2:	50 40       	sbci	r21, 0x00	; 0
    57f4:	e6 95       	lsr	r30
    57f6:	00 1c       	adc	r0, r0
    57f8:	ca f7       	brpl	.-14     	; 0x57ec <__divsf3_pse+0x2c>
    57fa:	2a d0       	rcall	.+84     	; 0x5850 <__divsf3_pse+0x90>
    57fc:	fe 2f       	mov	r31, r30
    57fe:	28 d0       	rcall	.+80     	; 0x5850 <__divsf3_pse+0x90>
    5800:	66 0f       	add	r22, r22
    5802:	77 1f       	adc	r23, r23
    5804:	88 1f       	adc	r24, r24
    5806:	bb 1f       	adc	r27, r27
    5808:	26 17       	cp	r18, r22
    580a:	37 07       	cpc	r19, r23
    580c:	48 07       	cpc	r20, r24
    580e:	ab 07       	cpc	r26, r27
    5810:	b0 e8       	ldi	r27, 0x80	; 128
    5812:	09 f0       	breq	.+2      	; 0x5816 <__divsf3_pse+0x56>
    5814:	bb 0b       	sbc	r27, r27
    5816:	80 2d       	mov	r24, r0
    5818:	bf 01       	movw	r22, r30
    581a:	ff 27       	eor	r31, r31
    581c:	93 58       	subi	r25, 0x83	; 131
    581e:	5f 4f       	sbci	r21, 0xFF	; 255
    5820:	32 f0       	brmi	.+12     	; 0x582e <__divsf3_pse+0x6e>
    5822:	9e 3f       	cpi	r25, 0xFE	; 254
    5824:	51 05       	cpc	r21, r1
    5826:	70 f0       	brcs	.+28     	; 0x5844 <__divsf3_pse+0x84>
    5828:	62 c0       	rjmp	.+196    	; 0x58ee <__fp_inf>
    582a:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__fp_szero>
    582e:	5f 3f       	cpi	r21, 0xFF	; 255
    5830:	e4 f3       	brlt	.-8      	; 0x582a <__divsf3_pse+0x6a>
    5832:	98 3e       	cpi	r25, 0xE8	; 232
    5834:	d4 f3       	brlt	.-12     	; 0x582a <__divsf3_pse+0x6a>
    5836:	86 95       	lsr	r24
    5838:	77 95       	ror	r23
    583a:	67 95       	ror	r22
    583c:	b7 95       	ror	r27
    583e:	f7 95       	ror	r31
    5840:	9f 5f       	subi	r25, 0xFF	; 255
    5842:	c9 f7       	brne	.-14     	; 0x5836 <__divsf3_pse+0x76>
    5844:	88 0f       	add	r24, r24
    5846:	91 1d       	adc	r25, r1
    5848:	96 95       	lsr	r25
    584a:	87 95       	ror	r24
    584c:	97 f9       	bld	r25, 7
    584e:	08 95       	ret
    5850:	e1 e0       	ldi	r30, 0x01	; 1
    5852:	66 0f       	add	r22, r22
    5854:	77 1f       	adc	r23, r23
    5856:	88 1f       	adc	r24, r24
    5858:	bb 1f       	adc	r27, r27
    585a:	62 17       	cp	r22, r18
    585c:	73 07       	cpc	r23, r19
    585e:	84 07       	cpc	r24, r20
    5860:	ba 07       	cpc	r27, r26
    5862:	20 f0       	brcs	.+8      	; 0x586c <__divsf3_pse+0xac>
    5864:	62 1b       	sub	r22, r18
    5866:	73 0b       	sbc	r23, r19
    5868:	84 0b       	sbc	r24, r20
    586a:	ba 0b       	sbc	r27, r26
    586c:	ee 1f       	adc	r30, r30
    586e:	88 f7       	brcc	.-30     	; 0x5852 <__divsf3_pse+0x92>
    5870:	e0 95       	com	r30
    5872:	08 95       	ret

00005874 <__floatunsisf>:
    5874:	e8 94       	clt
    5876:	09 c0       	rjmp	.+18     	; 0x588a <__floatsisf+0x12>

00005878 <__floatsisf>:
    5878:	97 fb       	bst	r25, 7
    587a:	3e f4       	brtc	.+14     	; 0x588a <__floatsisf+0x12>
    587c:	90 95       	com	r25
    587e:	80 95       	com	r24
    5880:	70 95       	com	r23
    5882:	61 95       	neg	r22
    5884:	7f 4f       	sbci	r23, 0xFF	; 255
    5886:	8f 4f       	sbci	r24, 0xFF	; 255
    5888:	9f 4f       	sbci	r25, 0xFF	; 255
    588a:	99 23       	and	r25, r25
    588c:	a9 f0       	breq	.+42     	; 0x58b8 <__floatsisf+0x40>
    588e:	f9 2f       	mov	r31, r25
    5890:	96 e9       	ldi	r25, 0x96	; 150
    5892:	bb 27       	eor	r27, r27
    5894:	93 95       	inc	r25
    5896:	f6 95       	lsr	r31
    5898:	87 95       	ror	r24
    589a:	77 95       	ror	r23
    589c:	67 95       	ror	r22
    589e:	b7 95       	ror	r27
    58a0:	f1 11       	cpse	r31, r1
    58a2:	f8 cf       	rjmp	.-16     	; 0x5894 <__floatsisf+0x1c>
    58a4:	fa f4       	brpl	.+62     	; 0x58e4 <__floatsisf+0x6c>
    58a6:	bb 0f       	add	r27, r27
    58a8:	11 f4       	brne	.+4      	; 0x58ae <__floatsisf+0x36>
    58aa:	60 ff       	sbrs	r22, 0
    58ac:	1b c0       	rjmp	.+54     	; 0x58e4 <__floatsisf+0x6c>
    58ae:	6f 5f       	subi	r22, 0xFF	; 255
    58b0:	7f 4f       	sbci	r23, 0xFF	; 255
    58b2:	8f 4f       	sbci	r24, 0xFF	; 255
    58b4:	9f 4f       	sbci	r25, 0xFF	; 255
    58b6:	16 c0       	rjmp	.+44     	; 0x58e4 <__floatsisf+0x6c>
    58b8:	88 23       	and	r24, r24
    58ba:	11 f0       	breq	.+4      	; 0x58c0 <__floatsisf+0x48>
    58bc:	96 e9       	ldi	r25, 0x96	; 150
    58be:	11 c0       	rjmp	.+34     	; 0x58e2 <__floatsisf+0x6a>
    58c0:	77 23       	and	r23, r23
    58c2:	21 f0       	breq	.+8      	; 0x58cc <__floatsisf+0x54>
    58c4:	9e e8       	ldi	r25, 0x8E	; 142
    58c6:	87 2f       	mov	r24, r23
    58c8:	76 2f       	mov	r23, r22
    58ca:	05 c0       	rjmp	.+10     	; 0x58d6 <__floatsisf+0x5e>
    58cc:	66 23       	and	r22, r22
    58ce:	71 f0       	breq	.+28     	; 0x58ec <__floatsisf+0x74>
    58d0:	96 e8       	ldi	r25, 0x86	; 134
    58d2:	86 2f       	mov	r24, r22
    58d4:	70 e0       	ldi	r23, 0x00	; 0
    58d6:	60 e0       	ldi	r22, 0x00	; 0
    58d8:	2a f0       	brmi	.+10     	; 0x58e4 <__floatsisf+0x6c>
    58da:	9a 95       	dec	r25
    58dc:	66 0f       	add	r22, r22
    58de:	77 1f       	adc	r23, r23
    58e0:	88 1f       	adc	r24, r24
    58e2:	da f7       	brpl	.-10     	; 0x58da <__floatsisf+0x62>
    58e4:	88 0f       	add	r24, r24
    58e6:	96 95       	lsr	r25
    58e8:	87 95       	ror	r24
    58ea:	97 f9       	bld	r25, 7
    58ec:	08 95       	ret

000058ee <__fp_inf>:
    58ee:	97 f9       	bld	r25, 7
    58f0:	9f 67       	ori	r25, 0x7F	; 127
    58f2:	80 e8       	ldi	r24, 0x80	; 128
    58f4:	70 e0       	ldi	r23, 0x00	; 0
    58f6:	60 e0       	ldi	r22, 0x00	; 0
    58f8:	08 95       	ret

000058fa <__fp_nan>:
    58fa:	9f ef       	ldi	r25, 0xFF	; 255
    58fc:	80 ec       	ldi	r24, 0xC0	; 192
    58fe:	08 95       	ret

00005900 <__fp_pscA>:
    5900:	00 24       	eor	r0, r0
    5902:	0a 94       	dec	r0
    5904:	16 16       	cp	r1, r22
    5906:	17 06       	cpc	r1, r23
    5908:	18 06       	cpc	r1, r24
    590a:	09 06       	cpc	r0, r25
    590c:	08 95       	ret

0000590e <__fp_pscB>:
    590e:	00 24       	eor	r0, r0
    5910:	0a 94       	dec	r0
    5912:	12 16       	cp	r1, r18
    5914:	13 06       	cpc	r1, r19
    5916:	14 06       	cpc	r1, r20
    5918:	05 06       	cpc	r0, r21
    591a:	08 95       	ret

0000591c <__fp_round>:
    591c:	09 2e       	mov	r0, r25
    591e:	03 94       	inc	r0
    5920:	00 0c       	add	r0, r0
    5922:	11 f4       	brne	.+4      	; 0x5928 <__fp_round+0xc>
    5924:	88 23       	and	r24, r24
    5926:	52 f0       	brmi	.+20     	; 0x593c <__fp_round+0x20>
    5928:	bb 0f       	add	r27, r27
    592a:	40 f4       	brcc	.+16     	; 0x593c <__fp_round+0x20>
    592c:	bf 2b       	or	r27, r31
    592e:	11 f4       	brne	.+4      	; 0x5934 <__fp_round+0x18>
    5930:	60 ff       	sbrs	r22, 0
    5932:	04 c0       	rjmp	.+8      	; 0x593c <__fp_round+0x20>
    5934:	6f 5f       	subi	r22, 0xFF	; 255
    5936:	7f 4f       	sbci	r23, 0xFF	; 255
    5938:	8f 4f       	sbci	r24, 0xFF	; 255
    593a:	9f 4f       	sbci	r25, 0xFF	; 255
    593c:	08 95       	ret

0000593e <__mulsf3>:
    593e:	0c d0       	rcall	.+24     	; 0x5958 <__mulsf3x>
    5940:	ed cf       	rjmp	.-38     	; 0x591c <__fp_round>
    5942:	de df       	rcall	.-68     	; 0x5900 <__fp_pscA>
    5944:	28 f0       	brcs	.+10     	; 0x5950 <__mulsf3+0x12>
    5946:	e3 df       	rcall	.-58     	; 0x590e <__fp_pscB>
    5948:	18 f0       	brcs	.+6      	; 0x5950 <__mulsf3+0x12>
    594a:	95 23       	and	r25, r21
    594c:	09 f0       	breq	.+2      	; 0x5950 <__mulsf3+0x12>
    594e:	cf cf       	rjmp	.-98     	; 0x58ee <__fp_inf>
    5950:	d4 cf       	rjmp	.-88     	; 0x58fa <__fp_nan>
    5952:	11 24       	eor	r1, r1
    5954:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__fp_szero>

00005958 <__mulsf3x>:
    5958:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fp_split3>
    595c:	90 f3       	brcs	.-28     	; 0x5942 <__mulsf3+0x4>

0000595e <__mulsf3_pse>:
    595e:	95 9f       	mul	r25, r21
    5960:	c1 f3       	breq	.-16     	; 0x5952 <__mulsf3+0x14>
    5962:	95 0f       	add	r25, r21
    5964:	50 e0       	ldi	r21, 0x00	; 0
    5966:	55 1f       	adc	r21, r21
    5968:	62 9f       	mul	r22, r18
    596a:	f0 01       	movw	r30, r0
    596c:	72 9f       	mul	r23, r18
    596e:	bb 27       	eor	r27, r27
    5970:	f0 0d       	add	r31, r0
    5972:	b1 1d       	adc	r27, r1
    5974:	63 9f       	mul	r22, r19
    5976:	aa 27       	eor	r26, r26
    5978:	f0 0d       	add	r31, r0
    597a:	b1 1d       	adc	r27, r1
    597c:	aa 1f       	adc	r26, r26
    597e:	64 9f       	mul	r22, r20
    5980:	66 27       	eor	r22, r22
    5982:	b0 0d       	add	r27, r0
    5984:	a1 1d       	adc	r26, r1
    5986:	66 1f       	adc	r22, r22
    5988:	82 9f       	mul	r24, r18
    598a:	22 27       	eor	r18, r18
    598c:	b0 0d       	add	r27, r0
    598e:	a1 1d       	adc	r26, r1
    5990:	62 1f       	adc	r22, r18
    5992:	73 9f       	mul	r23, r19
    5994:	b0 0d       	add	r27, r0
    5996:	a1 1d       	adc	r26, r1
    5998:	62 1f       	adc	r22, r18
    599a:	83 9f       	mul	r24, r19
    599c:	a0 0d       	add	r26, r0
    599e:	61 1d       	adc	r22, r1
    59a0:	22 1f       	adc	r18, r18
    59a2:	74 9f       	mul	r23, r20
    59a4:	33 27       	eor	r19, r19
    59a6:	a0 0d       	add	r26, r0
    59a8:	61 1d       	adc	r22, r1
    59aa:	23 1f       	adc	r18, r19
    59ac:	84 9f       	mul	r24, r20
    59ae:	60 0d       	add	r22, r0
    59b0:	21 1d       	adc	r18, r1
    59b2:	82 2f       	mov	r24, r18
    59b4:	76 2f       	mov	r23, r22
    59b6:	6a 2f       	mov	r22, r26
    59b8:	11 24       	eor	r1, r1
    59ba:	9f 57       	subi	r25, 0x7F	; 127
    59bc:	50 40       	sbci	r21, 0x00	; 0
    59be:	92 f0       	brmi	.+36     	; 0x59e4 <__mulsf3_pse+0x86>
    59c0:	e9 f0       	breq	.+58     	; 0x59fc <__mulsf3_pse+0x9e>
    59c2:	88 23       	and	r24, r24
    59c4:	4a f0       	brmi	.+18     	; 0x59d8 <__mulsf3_pse+0x7a>
    59c6:	ee 0f       	add	r30, r30
    59c8:	ff 1f       	adc	r31, r31
    59ca:	bb 1f       	adc	r27, r27
    59cc:	66 1f       	adc	r22, r22
    59ce:	77 1f       	adc	r23, r23
    59d0:	88 1f       	adc	r24, r24
    59d2:	91 50       	subi	r25, 0x01	; 1
    59d4:	50 40       	sbci	r21, 0x00	; 0
    59d6:	a9 f7       	brne	.-22     	; 0x59c2 <__mulsf3_pse+0x64>
    59d8:	9e 3f       	cpi	r25, 0xFE	; 254
    59da:	51 05       	cpc	r21, r1
    59dc:	78 f0       	brcs	.+30     	; 0x59fc <__mulsf3_pse+0x9e>
    59de:	87 cf       	rjmp	.-242    	; 0x58ee <__fp_inf>
    59e0:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__fp_szero>
    59e4:	5f 3f       	cpi	r21, 0xFF	; 255
    59e6:	e4 f3       	brlt	.-8      	; 0x59e0 <__mulsf3_pse+0x82>
    59e8:	98 3e       	cpi	r25, 0xE8	; 232
    59ea:	d4 f3       	brlt	.-12     	; 0x59e0 <__mulsf3_pse+0x82>
    59ec:	86 95       	lsr	r24
    59ee:	77 95       	ror	r23
    59f0:	67 95       	ror	r22
    59f2:	b7 95       	ror	r27
    59f4:	f7 95       	ror	r31
    59f6:	e7 95       	ror	r30
    59f8:	9f 5f       	subi	r25, 0xFF	; 255
    59fa:	c1 f7       	brne	.-16     	; 0x59ec <__mulsf3_pse+0x8e>
    59fc:	fe 2b       	or	r31, r30
    59fe:	88 0f       	add	r24, r24
    5a00:	91 1d       	adc	r25, r1
    5a02:	96 95       	lsr	r25
    5a04:	87 95       	ror	r24
    5a06:	97 f9       	bld	r25, 7
    5a08:	08 95       	ret

00005a0a <__udivmodhi4>:
    5a0a:	aa 1b       	sub	r26, r26
    5a0c:	bb 1b       	sub	r27, r27
    5a0e:	51 e1       	ldi	r21, 0x11	; 17
    5a10:	07 c0       	rjmp	.+14     	; 0x5a20 <__udivmodhi4_ep>

00005a12 <__udivmodhi4_loop>:
    5a12:	aa 1f       	adc	r26, r26
    5a14:	bb 1f       	adc	r27, r27
    5a16:	a6 17       	cp	r26, r22
    5a18:	b7 07       	cpc	r27, r23
    5a1a:	10 f0       	brcs	.+4      	; 0x5a20 <__udivmodhi4_ep>
    5a1c:	a6 1b       	sub	r26, r22
    5a1e:	b7 0b       	sbc	r27, r23

00005a20 <__udivmodhi4_ep>:
    5a20:	88 1f       	adc	r24, r24
    5a22:	99 1f       	adc	r25, r25
    5a24:	5a 95       	dec	r21
    5a26:	a9 f7       	brne	.-22     	; 0x5a12 <__udivmodhi4_loop>
    5a28:	80 95       	com	r24
    5a2a:	90 95       	com	r25
    5a2c:	bc 01       	movw	r22, r24
    5a2e:	cd 01       	movw	r24, r26
    5a30:	08 95       	ret

00005a32 <__divmodhi4>:
    5a32:	97 fb       	bst	r25, 7
    5a34:	07 2e       	mov	r0, r23
    5a36:	16 f4       	brtc	.+4      	; 0x5a3c <__divmodhi4+0xa>
    5a38:	00 94       	com	r0
    5a3a:	06 d0       	rcall	.+12     	; 0x5a48 <__divmodhi4_neg1>
    5a3c:	77 fd       	sbrc	r23, 7
    5a3e:	08 d0       	rcall	.+16     	; 0x5a50 <__divmodhi4_neg2>
    5a40:	e4 df       	rcall	.-56     	; 0x5a0a <__udivmodhi4>
    5a42:	07 fc       	sbrc	r0, 7
    5a44:	05 d0       	rcall	.+10     	; 0x5a50 <__divmodhi4_neg2>
    5a46:	3e f4       	brtc	.+14     	; 0x5a56 <__divmodhi4_exit>

00005a48 <__divmodhi4_neg1>:
    5a48:	90 95       	com	r25
    5a4a:	81 95       	neg	r24
    5a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a4e:	08 95       	ret

00005a50 <__divmodhi4_neg2>:
    5a50:	70 95       	com	r23
    5a52:	61 95       	neg	r22
    5a54:	7f 4f       	sbci	r23, 0xFF	; 255

00005a56 <__divmodhi4_exit>:
    5a56:	08 95       	ret

00005a58 <__udivmodsi4>:
    5a58:	a1 e2       	ldi	r26, 0x21	; 33
    5a5a:	1a 2e       	mov	r1, r26
    5a5c:	aa 1b       	sub	r26, r26
    5a5e:	bb 1b       	sub	r27, r27
    5a60:	fd 01       	movw	r30, r26
    5a62:	0d c0       	rjmp	.+26     	; 0x5a7e <__udivmodsi4_ep>

00005a64 <__udivmodsi4_loop>:
    5a64:	aa 1f       	adc	r26, r26
    5a66:	bb 1f       	adc	r27, r27
    5a68:	ee 1f       	adc	r30, r30
    5a6a:	ff 1f       	adc	r31, r31
    5a6c:	a2 17       	cp	r26, r18
    5a6e:	b3 07       	cpc	r27, r19
    5a70:	e4 07       	cpc	r30, r20
    5a72:	f5 07       	cpc	r31, r21
    5a74:	20 f0       	brcs	.+8      	; 0x5a7e <__udivmodsi4_ep>
    5a76:	a2 1b       	sub	r26, r18
    5a78:	b3 0b       	sbc	r27, r19
    5a7a:	e4 0b       	sbc	r30, r20
    5a7c:	f5 0b       	sbc	r31, r21

00005a7e <__udivmodsi4_ep>:
    5a7e:	66 1f       	adc	r22, r22
    5a80:	77 1f       	adc	r23, r23
    5a82:	88 1f       	adc	r24, r24
    5a84:	99 1f       	adc	r25, r25
    5a86:	1a 94       	dec	r1
    5a88:	69 f7       	brne	.-38     	; 0x5a64 <__udivmodsi4_loop>
    5a8a:	60 95       	com	r22
    5a8c:	70 95       	com	r23
    5a8e:	80 95       	com	r24
    5a90:	90 95       	com	r25
    5a92:	9b 01       	movw	r18, r22
    5a94:	ac 01       	movw	r20, r24
    5a96:	bd 01       	movw	r22, r26
    5a98:	cf 01       	movw	r24, r30
    5a9a:	08 95       	ret

00005a9c <__tablejump2__>:
    5a9c:	ee 0f       	add	r30, r30
    5a9e:	ff 1f       	adc	r31, r31
    5aa0:	88 1f       	adc	r24, r24
    5aa2:	8b bf       	out	0x3b, r24	; 59
    5aa4:	07 90       	elpm	r0, Z+
    5aa6:	f6 91       	elpm	r31, Z
    5aa8:	e0 2d       	mov	r30, r0
    5aaa:	19 94       	eijmp

00005aac <calloc>:
    5aac:	0f 93       	push	r16
    5aae:	1f 93       	push	r17
    5ab0:	cf 93       	push	r28
    5ab2:	df 93       	push	r29
    5ab4:	86 9f       	mul	r24, r22
    5ab6:	80 01       	movw	r16, r0
    5ab8:	87 9f       	mul	r24, r23
    5aba:	10 0d       	add	r17, r0
    5abc:	96 9f       	mul	r25, r22
    5abe:	10 0d       	add	r17, r0
    5ac0:	11 24       	eor	r1, r1
    5ac2:	c8 01       	movw	r24, r16
    5ac4:	0d d0       	rcall	.+26     	; 0x5ae0 <malloc>
    5ac6:	ec 01       	movw	r28, r24
    5ac8:	00 97       	sbiw	r24, 0x00	; 0
    5aca:	21 f0       	breq	.+8      	; 0x5ad4 <calloc+0x28>
    5acc:	a8 01       	movw	r20, r16
    5ace:	60 e0       	ldi	r22, 0x00	; 0
    5ad0:	70 e0       	ldi	r23, 0x00	; 0
    5ad2:	34 d1       	rcall	.+616    	; 0x5d3c <memset>
    5ad4:	ce 01       	movw	r24, r28
    5ad6:	df 91       	pop	r29
    5ad8:	cf 91       	pop	r28
    5ada:	1f 91       	pop	r17
    5adc:	0f 91       	pop	r16
    5ade:	08 95       	ret

00005ae0 <malloc>:
    5ae0:	0f 93       	push	r16
    5ae2:	1f 93       	push	r17
    5ae4:	cf 93       	push	r28
    5ae6:	df 93       	push	r29
    5ae8:	82 30       	cpi	r24, 0x02	; 2
    5aea:	91 05       	cpc	r25, r1
    5aec:	10 f4       	brcc	.+4      	; 0x5af2 <malloc+0x12>
    5aee:	82 e0       	ldi	r24, 0x02	; 2
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	e0 91 4d 19 	lds	r30, 0x194D	; 0x80194d <__flp>
    5af6:	f0 91 4e 19 	lds	r31, 0x194E	; 0x80194e <__flp+0x1>
    5afa:	20 e0       	ldi	r18, 0x00	; 0
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	a0 e0       	ldi	r26, 0x00	; 0
    5b00:	b0 e0       	ldi	r27, 0x00	; 0
    5b02:	30 97       	sbiw	r30, 0x00	; 0
    5b04:	19 f1       	breq	.+70     	; 0x5b4c <malloc+0x6c>
    5b06:	40 81       	ld	r20, Z
    5b08:	51 81       	ldd	r21, Z+1	; 0x01
    5b0a:	02 81       	ldd	r16, Z+2	; 0x02
    5b0c:	13 81       	ldd	r17, Z+3	; 0x03
    5b0e:	48 17       	cp	r20, r24
    5b10:	59 07       	cpc	r21, r25
    5b12:	c8 f0       	brcs	.+50     	; 0x5b46 <malloc+0x66>
    5b14:	84 17       	cp	r24, r20
    5b16:	95 07       	cpc	r25, r21
    5b18:	69 f4       	brne	.+26     	; 0x5b34 <malloc+0x54>
    5b1a:	10 97       	sbiw	r26, 0x00	; 0
    5b1c:	31 f0       	breq	.+12     	; 0x5b2a <malloc+0x4a>
    5b1e:	12 96       	adiw	r26, 0x02	; 2
    5b20:	0c 93       	st	X, r16
    5b22:	12 97       	sbiw	r26, 0x02	; 2
    5b24:	13 96       	adiw	r26, 0x03	; 3
    5b26:	1c 93       	st	X, r17
    5b28:	27 c0       	rjmp	.+78     	; 0x5b78 <malloc+0x98>
    5b2a:	00 93 4d 19 	sts	0x194D, r16	; 0x80194d <__flp>
    5b2e:	10 93 4e 19 	sts	0x194E, r17	; 0x80194e <__flp+0x1>
    5b32:	22 c0       	rjmp	.+68     	; 0x5b78 <malloc+0x98>
    5b34:	21 15       	cp	r18, r1
    5b36:	31 05       	cpc	r19, r1
    5b38:	19 f0       	breq	.+6      	; 0x5b40 <malloc+0x60>
    5b3a:	42 17       	cp	r20, r18
    5b3c:	53 07       	cpc	r21, r19
    5b3e:	18 f4       	brcc	.+6      	; 0x5b46 <malloc+0x66>
    5b40:	9a 01       	movw	r18, r20
    5b42:	bd 01       	movw	r22, r26
    5b44:	ef 01       	movw	r28, r30
    5b46:	df 01       	movw	r26, r30
    5b48:	f8 01       	movw	r30, r16
    5b4a:	db cf       	rjmp	.-74     	; 0x5b02 <malloc+0x22>
    5b4c:	21 15       	cp	r18, r1
    5b4e:	31 05       	cpc	r19, r1
    5b50:	f9 f0       	breq	.+62     	; 0x5b90 <malloc+0xb0>
    5b52:	28 1b       	sub	r18, r24
    5b54:	39 0b       	sbc	r19, r25
    5b56:	24 30       	cpi	r18, 0x04	; 4
    5b58:	31 05       	cpc	r19, r1
    5b5a:	80 f4       	brcc	.+32     	; 0x5b7c <malloc+0x9c>
    5b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5b60:	61 15       	cp	r22, r1
    5b62:	71 05       	cpc	r23, r1
    5b64:	21 f0       	breq	.+8      	; 0x5b6e <malloc+0x8e>
    5b66:	fb 01       	movw	r30, r22
    5b68:	93 83       	std	Z+3, r25	; 0x03
    5b6a:	82 83       	std	Z+2, r24	; 0x02
    5b6c:	04 c0       	rjmp	.+8      	; 0x5b76 <malloc+0x96>
    5b6e:	90 93 4e 19 	sts	0x194E, r25	; 0x80194e <__flp+0x1>
    5b72:	80 93 4d 19 	sts	0x194D, r24	; 0x80194d <__flp>
    5b76:	fe 01       	movw	r30, r28
    5b78:	32 96       	adiw	r30, 0x02	; 2
    5b7a:	44 c0       	rjmp	.+136    	; 0x5c04 <malloc+0x124>
    5b7c:	fe 01       	movw	r30, r28
    5b7e:	e2 0f       	add	r30, r18
    5b80:	f3 1f       	adc	r31, r19
    5b82:	81 93       	st	Z+, r24
    5b84:	91 93       	st	Z+, r25
    5b86:	22 50       	subi	r18, 0x02	; 2
    5b88:	31 09       	sbc	r19, r1
    5b8a:	39 83       	std	Y+1, r19	; 0x01
    5b8c:	28 83       	st	Y, r18
    5b8e:	3a c0       	rjmp	.+116    	; 0x5c04 <malloc+0x124>
    5b90:	20 91 4b 19 	lds	r18, 0x194B	; 0x80194b <__brkval>
    5b94:	30 91 4c 19 	lds	r19, 0x194C	; 0x80194c <__brkval+0x1>
    5b98:	23 2b       	or	r18, r19
    5b9a:	41 f4       	brne	.+16     	; 0x5bac <malloc+0xcc>
    5b9c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5ba0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5ba4:	30 93 4c 19 	sts	0x194C, r19	; 0x80194c <__brkval+0x1>
    5ba8:	20 93 4b 19 	sts	0x194B, r18	; 0x80194b <__brkval>
    5bac:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5bb0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5bb4:	21 15       	cp	r18, r1
    5bb6:	31 05       	cpc	r19, r1
    5bb8:	41 f4       	brne	.+16     	; 0x5bca <malloc+0xea>
    5bba:	2d b7       	in	r18, 0x3d	; 61
    5bbc:	3e b7       	in	r19, 0x3e	; 62
    5bbe:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5bc2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5bc6:	24 1b       	sub	r18, r20
    5bc8:	35 0b       	sbc	r19, r21
    5bca:	e0 91 4b 19 	lds	r30, 0x194B	; 0x80194b <__brkval>
    5bce:	f0 91 4c 19 	lds	r31, 0x194C	; 0x80194c <__brkval+0x1>
    5bd2:	e2 17       	cp	r30, r18
    5bd4:	f3 07       	cpc	r31, r19
    5bd6:	a0 f4       	brcc	.+40     	; 0x5c00 <malloc+0x120>
    5bd8:	2e 1b       	sub	r18, r30
    5bda:	3f 0b       	sbc	r19, r31
    5bdc:	28 17       	cp	r18, r24
    5bde:	39 07       	cpc	r19, r25
    5be0:	78 f0       	brcs	.+30     	; 0x5c00 <malloc+0x120>
    5be2:	ac 01       	movw	r20, r24
    5be4:	4e 5f       	subi	r20, 0xFE	; 254
    5be6:	5f 4f       	sbci	r21, 0xFF	; 255
    5be8:	24 17       	cp	r18, r20
    5bea:	35 07       	cpc	r19, r21
    5bec:	48 f0       	brcs	.+18     	; 0x5c00 <malloc+0x120>
    5bee:	4e 0f       	add	r20, r30
    5bf0:	5f 1f       	adc	r21, r31
    5bf2:	50 93 4c 19 	sts	0x194C, r21	; 0x80194c <__brkval+0x1>
    5bf6:	40 93 4b 19 	sts	0x194B, r20	; 0x80194b <__brkval>
    5bfa:	81 93       	st	Z+, r24
    5bfc:	91 93       	st	Z+, r25
    5bfe:	02 c0       	rjmp	.+4      	; 0x5c04 <malloc+0x124>
    5c00:	e0 e0       	ldi	r30, 0x00	; 0
    5c02:	f0 e0       	ldi	r31, 0x00	; 0
    5c04:	cf 01       	movw	r24, r30
    5c06:	df 91       	pop	r29
    5c08:	cf 91       	pop	r28
    5c0a:	1f 91       	pop	r17
    5c0c:	0f 91       	pop	r16
    5c0e:	08 95       	ret

00005c10 <free>:
    5c10:	cf 93       	push	r28
    5c12:	df 93       	push	r29
    5c14:	00 97       	sbiw	r24, 0x00	; 0
    5c16:	09 f4       	brne	.+2      	; 0x5c1a <free+0xa>
    5c18:	81 c0       	rjmp	.+258    	; 0x5d1c <free+0x10c>
    5c1a:	fc 01       	movw	r30, r24
    5c1c:	32 97       	sbiw	r30, 0x02	; 2
    5c1e:	13 82       	std	Z+3, r1	; 0x03
    5c20:	12 82       	std	Z+2, r1	; 0x02
    5c22:	a0 91 4d 19 	lds	r26, 0x194D	; 0x80194d <__flp>
    5c26:	b0 91 4e 19 	lds	r27, 0x194E	; 0x80194e <__flp+0x1>
    5c2a:	10 97       	sbiw	r26, 0x00	; 0
    5c2c:	81 f4       	brne	.+32     	; 0x5c4e <free+0x3e>
    5c2e:	20 81       	ld	r18, Z
    5c30:	31 81       	ldd	r19, Z+1	; 0x01
    5c32:	82 0f       	add	r24, r18
    5c34:	93 1f       	adc	r25, r19
    5c36:	20 91 4b 19 	lds	r18, 0x194B	; 0x80194b <__brkval>
    5c3a:	30 91 4c 19 	lds	r19, 0x194C	; 0x80194c <__brkval+0x1>
    5c3e:	28 17       	cp	r18, r24
    5c40:	39 07       	cpc	r19, r25
    5c42:	51 f5       	brne	.+84     	; 0x5c98 <free+0x88>
    5c44:	f0 93 4c 19 	sts	0x194C, r31	; 0x80194c <__brkval+0x1>
    5c48:	e0 93 4b 19 	sts	0x194B, r30	; 0x80194b <__brkval>
    5c4c:	67 c0       	rjmp	.+206    	; 0x5d1c <free+0x10c>
    5c4e:	ed 01       	movw	r28, r26
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	ce 17       	cp	r28, r30
    5c56:	df 07       	cpc	r29, r31
    5c58:	40 f4       	brcc	.+16     	; 0x5c6a <free+0x5a>
    5c5a:	4a 81       	ldd	r20, Y+2	; 0x02
    5c5c:	5b 81       	ldd	r21, Y+3	; 0x03
    5c5e:	9e 01       	movw	r18, r28
    5c60:	41 15       	cp	r20, r1
    5c62:	51 05       	cpc	r21, r1
    5c64:	f1 f0       	breq	.+60     	; 0x5ca2 <free+0x92>
    5c66:	ea 01       	movw	r28, r20
    5c68:	f5 cf       	rjmp	.-22     	; 0x5c54 <free+0x44>
    5c6a:	d3 83       	std	Z+3, r29	; 0x03
    5c6c:	c2 83       	std	Z+2, r28	; 0x02
    5c6e:	40 81       	ld	r20, Z
    5c70:	51 81       	ldd	r21, Z+1	; 0x01
    5c72:	84 0f       	add	r24, r20
    5c74:	95 1f       	adc	r25, r21
    5c76:	c8 17       	cp	r28, r24
    5c78:	d9 07       	cpc	r29, r25
    5c7a:	59 f4       	brne	.+22     	; 0x5c92 <free+0x82>
    5c7c:	88 81       	ld	r24, Y
    5c7e:	99 81       	ldd	r25, Y+1	; 0x01
    5c80:	84 0f       	add	r24, r20
    5c82:	95 1f       	adc	r25, r21
    5c84:	02 96       	adiw	r24, 0x02	; 2
    5c86:	91 83       	std	Z+1, r25	; 0x01
    5c88:	80 83       	st	Z, r24
    5c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    5c8e:	93 83       	std	Z+3, r25	; 0x03
    5c90:	82 83       	std	Z+2, r24	; 0x02
    5c92:	21 15       	cp	r18, r1
    5c94:	31 05       	cpc	r19, r1
    5c96:	29 f4       	brne	.+10     	; 0x5ca2 <free+0x92>
    5c98:	f0 93 4e 19 	sts	0x194E, r31	; 0x80194e <__flp+0x1>
    5c9c:	e0 93 4d 19 	sts	0x194D, r30	; 0x80194d <__flp>
    5ca0:	3d c0       	rjmp	.+122    	; 0x5d1c <free+0x10c>
    5ca2:	e9 01       	movw	r28, r18
    5ca4:	fb 83       	std	Y+3, r31	; 0x03
    5ca6:	ea 83       	std	Y+2, r30	; 0x02
    5ca8:	49 91       	ld	r20, Y+
    5caa:	59 91       	ld	r21, Y+
    5cac:	c4 0f       	add	r28, r20
    5cae:	d5 1f       	adc	r29, r21
    5cb0:	ec 17       	cp	r30, r28
    5cb2:	fd 07       	cpc	r31, r29
    5cb4:	61 f4       	brne	.+24     	; 0x5cce <free+0xbe>
    5cb6:	80 81       	ld	r24, Z
    5cb8:	91 81       	ldd	r25, Z+1	; 0x01
    5cba:	84 0f       	add	r24, r20
    5cbc:	95 1f       	adc	r25, r21
    5cbe:	02 96       	adiw	r24, 0x02	; 2
    5cc0:	e9 01       	movw	r28, r18
    5cc2:	99 83       	std	Y+1, r25	; 0x01
    5cc4:	88 83       	st	Y, r24
    5cc6:	82 81       	ldd	r24, Z+2	; 0x02
    5cc8:	93 81       	ldd	r25, Z+3	; 0x03
    5cca:	9b 83       	std	Y+3, r25	; 0x03
    5ccc:	8a 83       	std	Y+2, r24	; 0x02
    5cce:	e0 e0       	ldi	r30, 0x00	; 0
    5cd0:	f0 e0       	ldi	r31, 0x00	; 0
    5cd2:	12 96       	adiw	r26, 0x02	; 2
    5cd4:	8d 91       	ld	r24, X+
    5cd6:	9c 91       	ld	r25, X
    5cd8:	13 97       	sbiw	r26, 0x03	; 3
    5cda:	00 97       	sbiw	r24, 0x00	; 0
    5cdc:	19 f0       	breq	.+6      	; 0x5ce4 <free+0xd4>
    5cde:	fd 01       	movw	r30, r26
    5ce0:	dc 01       	movw	r26, r24
    5ce2:	f7 cf       	rjmp	.-18     	; 0x5cd2 <free+0xc2>
    5ce4:	8d 91       	ld	r24, X+
    5ce6:	9c 91       	ld	r25, X
    5ce8:	11 97       	sbiw	r26, 0x01	; 1
    5cea:	9d 01       	movw	r18, r26
    5cec:	2e 5f       	subi	r18, 0xFE	; 254
    5cee:	3f 4f       	sbci	r19, 0xFF	; 255
    5cf0:	82 0f       	add	r24, r18
    5cf2:	93 1f       	adc	r25, r19
    5cf4:	20 91 4b 19 	lds	r18, 0x194B	; 0x80194b <__brkval>
    5cf8:	30 91 4c 19 	lds	r19, 0x194C	; 0x80194c <__brkval+0x1>
    5cfc:	28 17       	cp	r18, r24
    5cfe:	39 07       	cpc	r19, r25
    5d00:	69 f4       	brne	.+26     	; 0x5d1c <free+0x10c>
    5d02:	30 97       	sbiw	r30, 0x00	; 0
    5d04:	29 f4       	brne	.+10     	; 0x5d10 <free+0x100>
    5d06:	10 92 4e 19 	sts	0x194E, r1	; 0x80194e <__flp+0x1>
    5d0a:	10 92 4d 19 	sts	0x194D, r1	; 0x80194d <__flp>
    5d0e:	02 c0       	rjmp	.+4      	; 0x5d14 <free+0x104>
    5d10:	13 82       	std	Z+3, r1	; 0x03
    5d12:	12 82       	std	Z+2, r1	; 0x02
    5d14:	b0 93 4c 19 	sts	0x194C, r27	; 0x80194c <__brkval+0x1>
    5d18:	a0 93 4b 19 	sts	0x194B, r26	; 0x80194b <__brkval>
    5d1c:	df 91       	pop	r29
    5d1e:	cf 91       	pop	r28
    5d20:	08 95       	ret

00005d22 <abort>:
    5d22:	81 e0       	ldi	r24, 0x01	; 1
    5d24:	90 e0       	ldi	r25, 0x00	; 0
    5d26:	f8 94       	cli
    5d28:	7d c3       	rjmp	.+1786   	; 0x6424 <_exit>

00005d2a <memcpy>:
    5d2a:	fb 01       	movw	r30, r22
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	02 c0       	rjmp	.+4      	; 0x5d34 <memcpy+0xa>
    5d30:	01 90       	ld	r0, Z+
    5d32:	0d 92       	st	X+, r0
    5d34:	41 50       	subi	r20, 0x01	; 1
    5d36:	50 40       	sbci	r21, 0x00	; 0
    5d38:	d8 f7       	brcc	.-10     	; 0x5d30 <memcpy+0x6>
    5d3a:	08 95       	ret

00005d3c <memset>:
    5d3c:	dc 01       	movw	r26, r24
    5d3e:	01 c0       	rjmp	.+2      	; 0x5d42 <memset+0x6>
    5d40:	6d 93       	st	X+, r22
    5d42:	41 50       	subi	r20, 0x01	; 1
    5d44:	50 40       	sbci	r21, 0x00	; 0
    5d46:	e0 f7       	brcc	.-8      	; 0x5d40 <memset+0x4>
    5d48:	08 95       	ret

00005d4a <strcasestr>:
    5d4a:	fb 01       	movw	r30, r22
    5d4c:	51 91       	ld	r21, Z+
    5d4e:	55 23       	and	r21, r21
    5d50:	b1 f0       	breq	.+44     	; 0x5d7e <strcasestr+0x34>
    5d52:	bf 01       	movw	r22, r30
    5d54:	dc 01       	movw	r26, r24
    5d56:	05 2e       	mov	r0, r21
    5d58:	4d 91       	ld	r20, X+
    5d5a:	44 23       	and	r20, r20
    5d5c:	69 f0       	breq	.+26     	; 0x5d78 <strcasestr+0x2e>
    5d5e:	10 d0       	rcall	.+32     	; 0x5d80 <strcasestr+0x36>
    5d60:	d9 f7       	brne	.-10     	; 0x5d58 <strcasestr+0xe>
    5d62:	cd 01       	movw	r24, r26
    5d64:	01 90       	ld	r0, Z+
    5d66:	00 20       	and	r0, r0
    5d68:	49 f0       	breq	.+18     	; 0x5d7c <strcasestr+0x32>
    5d6a:	4d 91       	ld	r20, X+
    5d6c:	41 11       	cpse	r20, r1
    5d6e:	08 d0       	rcall	.+16     	; 0x5d80 <strcasestr+0x36>
    5d70:	c9 f3       	breq	.-14     	; 0x5d64 <strcasestr+0x1a>
    5d72:	fb 01       	movw	r30, r22
    5d74:	41 11       	cpse	r20, r1
    5d76:	ee cf       	rjmp	.-36     	; 0x5d54 <strcasestr+0xa>
    5d78:	81 e0       	ldi	r24, 0x01	; 1
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	01 97       	sbiw	r24, 0x01	; 1
    5d7e:	08 95       	ret
    5d80:	40 25       	eor	r20, r0
    5d82:	39 f0       	breq	.+14     	; 0x5d92 <strcasestr+0x48>
    5d84:	40 32       	cpi	r20, 0x20	; 32
    5d86:	29 f4       	brne	.+10     	; 0x5d92 <strcasestr+0x48>
    5d88:	40 29       	or	r20, r0
    5d8a:	4b 57       	subi	r20, 0x7B	; 123
    5d8c:	46 5e       	subi	r20, 0xE6	; 230
    5d8e:	08 f0       	brcs	.+2      	; 0x5d92 <strcasestr+0x48>
    5d90:	18 94       	sez
    5d92:	08 95       	ret

00005d94 <strcat>:
    5d94:	fb 01       	movw	r30, r22
    5d96:	dc 01       	movw	r26, r24
    5d98:	0d 90       	ld	r0, X+
    5d9a:	00 20       	and	r0, r0
    5d9c:	e9 f7       	brne	.-6      	; 0x5d98 <strcat+0x4>
    5d9e:	11 97       	sbiw	r26, 0x01	; 1
    5da0:	01 90       	ld	r0, Z+
    5da2:	0d 92       	st	X+, r0
    5da4:	00 20       	and	r0, r0
    5da6:	e1 f7       	brne	.-8      	; 0x5da0 <strcat+0xc>
    5da8:	08 95       	ret

00005daa <strcpy>:
    5daa:	fb 01       	movw	r30, r22
    5dac:	dc 01       	movw	r26, r24
    5dae:	01 90       	ld	r0, Z+
    5db0:	0d 92       	st	X+, r0
    5db2:	00 20       	and	r0, r0
    5db4:	e1 f7       	brne	.-8      	; 0x5dae <strcpy+0x4>
    5db6:	08 95       	ret

00005db8 <strncasecmp>:
    5db8:	fb 01       	movw	r30, r22
    5dba:	dc 01       	movw	r26, r24
    5dbc:	41 50       	subi	r20, 0x01	; 1
    5dbe:	50 40       	sbci	r21, 0x00	; 0
    5dc0:	88 f0       	brcs	.+34     	; 0x5de4 <strncasecmp+0x2c>
    5dc2:	8d 91       	ld	r24, X+
    5dc4:	81 34       	cpi	r24, 0x41	; 65
    5dc6:	1c f0       	brlt	.+6      	; 0x5dce <strncasecmp+0x16>
    5dc8:	8b 35       	cpi	r24, 0x5B	; 91
    5dca:	0c f4       	brge	.+2      	; 0x5dce <strncasecmp+0x16>
    5dcc:	80 5e       	subi	r24, 0xE0	; 224
    5dce:	61 91       	ld	r22, Z+
    5dd0:	61 34       	cpi	r22, 0x41	; 65
    5dd2:	1c f0       	brlt	.+6      	; 0x5dda <strncasecmp+0x22>
    5dd4:	6b 35       	cpi	r22, 0x5B	; 91
    5dd6:	0c f4       	brge	.+2      	; 0x5dda <strncasecmp+0x22>
    5dd8:	60 5e       	subi	r22, 0xE0	; 224
    5dda:	86 1b       	sub	r24, r22
    5ddc:	61 11       	cpse	r22, r1
    5dde:	71 f3       	breq	.-36     	; 0x5dbc <strncasecmp+0x4>
    5de0:	99 0b       	sbc	r25, r25
    5de2:	08 95       	ret
    5de4:	88 1b       	sub	r24, r24
    5de6:	fc cf       	rjmp	.-8      	; 0x5de0 <strncasecmp+0x28>

00005de8 <printf>:
    5de8:	cf 93       	push	r28
    5dea:	df 93       	push	r29
    5dec:	cd b7       	in	r28, 0x3d	; 61
    5dee:	de b7       	in	r29, 0x3e	; 62
    5df0:	ae 01       	movw	r20, r28
    5df2:	4a 5f       	subi	r20, 0xFA	; 250
    5df4:	5f 4f       	sbci	r21, 0xFF	; 255
    5df6:	fa 01       	movw	r30, r20
    5df8:	61 91       	ld	r22, Z+
    5dfa:	71 91       	ld	r23, Z+
    5dfc:	af 01       	movw	r20, r30
    5dfe:	80 91 51 19 	lds	r24, 0x1951	; 0x801951 <__iob+0x2>
    5e02:	90 91 52 19 	lds	r25, 0x1952	; 0x801952 <__iob+0x3>
    5e06:	61 d0       	rcall	.+194    	; 0x5eca <vfprintf>
    5e08:	df 91       	pop	r29
    5e0a:	cf 91       	pop	r28
    5e0c:	08 95       	ret

00005e0e <puts>:
    5e0e:	0f 93       	push	r16
    5e10:	1f 93       	push	r17
    5e12:	cf 93       	push	r28
    5e14:	df 93       	push	r29
    5e16:	e0 91 51 19 	lds	r30, 0x1951	; 0x801951 <__iob+0x2>
    5e1a:	f0 91 52 19 	lds	r31, 0x1952	; 0x801952 <__iob+0x3>
    5e1e:	23 81       	ldd	r18, Z+3	; 0x03
    5e20:	21 ff       	sbrs	r18, 1
    5e22:	1b c0       	rjmp	.+54     	; 0x5e5a <puts+0x4c>
    5e24:	8c 01       	movw	r16, r24
    5e26:	d0 e0       	ldi	r29, 0x00	; 0
    5e28:	c0 e0       	ldi	r28, 0x00	; 0
    5e2a:	f8 01       	movw	r30, r16
    5e2c:	81 91       	ld	r24, Z+
    5e2e:	8f 01       	movw	r16, r30
    5e30:	60 91 51 19 	lds	r22, 0x1951	; 0x801951 <__iob+0x2>
    5e34:	70 91 52 19 	lds	r23, 0x1952	; 0x801952 <__iob+0x3>
    5e38:	db 01       	movw	r26, r22
    5e3a:	18 96       	adiw	r26, 0x08	; 8
    5e3c:	ed 91       	ld	r30, X+
    5e3e:	fc 91       	ld	r31, X
    5e40:	19 97       	sbiw	r26, 0x09	; 9
    5e42:	88 23       	and	r24, r24
    5e44:	31 f0       	breq	.+12     	; 0x5e52 <puts+0x44>
    5e46:	19 95       	eicall
    5e48:	89 2b       	or	r24, r25
    5e4a:	79 f3       	breq	.-34     	; 0x5e2a <puts+0x1c>
    5e4c:	df ef       	ldi	r29, 0xFF	; 255
    5e4e:	cf ef       	ldi	r28, 0xFF	; 255
    5e50:	ec cf       	rjmp	.-40     	; 0x5e2a <puts+0x1c>
    5e52:	8a e0       	ldi	r24, 0x0A	; 10
    5e54:	19 95       	eicall
    5e56:	89 2b       	or	r24, r25
    5e58:	19 f0       	breq	.+6      	; 0x5e60 <puts+0x52>
    5e5a:	8f ef       	ldi	r24, 0xFF	; 255
    5e5c:	9f ef       	ldi	r25, 0xFF	; 255
    5e5e:	02 c0       	rjmp	.+4      	; 0x5e64 <puts+0x56>
    5e60:	8d 2f       	mov	r24, r29
    5e62:	9c 2f       	mov	r25, r28
    5e64:	df 91       	pop	r29
    5e66:	cf 91       	pop	r28
    5e68:	1f 91       	pop	r17
    5e6a:	0f 91       	pop	r16
    5e6c:	08 95       	ret

00005e6e <sprintf>:
    5e6e:	0f 93       	push	r16
    5e70:	1f 93       	push	r17
    5e72:	cf 93       	push	r28
    5e74:	df 93       	push	r29
    5e76:	cd b7       	in	r28, 0x3d	; 61
    5e78:	de b7       	in	r29, 0x3e	; 62
    5e7a:	2e 97       	sbiw	r28, 0x0e	; 14
    5e7c:	0f b6       	in	r0, 0x3f	; 63
    5e7e:	f8 94       	cli
    5e80:	de bf       	out	0x3e, r29	; 62
    5e82:	0f be       	out	0x3f, r0	; 63
    5e84:	cd bf       	out	0x3d, r28	; 61
    5e86:	0e 89       	ldd	r16, Y+22	; 0x16
    5e88:	1f 89       	ldd	r17, Y+23	; 0x17
    5e8a:	86 e0       	ldi	r24, 0x06	; 6
    5e8c:	8c 83       	std	Y+4, r24	; 0x04
    5e8e:	1a 83       	std	Y+2, r17	; 0x02
    5e90:	09 83       	std	Y+1, r16	; 0x01
    5e92:	8f ef       	ldi	r24, 0xFF	; 255
    5e94:	9f e7       	ldi	r25, 0x7F	; 127
    5e96:	9e 83       	std	Y+6, r25	; 0x06
    5e98:	8d 83       	std	Y+5, r24	; 0x05
    5e9a:	ae 01       	movw	r20, r28
    5e9c:	46 5e       	subi	r20, 0xE6	; 230
    5e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    5ea0:	68 8d       	ldd	r22, Y+24	; 0x18
    5ea2:	79 8d       	ldd	r23, Y+25	; 0x19
    5ea4:	ce 01       	movw	r24, r28
    5ea6:	01 96       	adiw	r24, 0x01	; 1
    5ea8:	10 d0       	rcall	.+32     	; 0x5eca <vfprintf>
    5eaa:	ef 81       	ldd	r30, Y+7	; 0x07
    5eac:	f8 85       	ldd	r31, Y+8	; 0x08
    5eae:	e0 0f       	add	r30, r16
    5eb0:	f1 1f       	adc	r31, r17
    5eb2:	10 82       	st	Z, r1
    5eb4:	2e 96       	adiw	r28, 0x0e	; 14
    5eb6:	0f b6       	in	r0, 0x3f	; 63
    5eb8:	f8 94       	cli
    5eba:	de bf       	out	0x3e, r29	; 62
    5ebc:	0f be       	out	0x3f, r0	; 63
    5ebe:	cd bf       	out	0x3d, r28	; 61
    5ec0:	df 91       	pop	r29
    5ec2:	cf 91       	pop	r28
    5ec4:	1f 91       	pop	r17
    5ec6:	0f 91       	pop	r16
    5ec8:	08 95       	ret

00005eca <vfprintf>:
    5eca:	2f 92       	push	r2
    5ecc:	3f 92       	push	r3
    5ece:	4f 92       	push	r4
    5ed0:	5f 92       	push	r5
    5ed2:	6f 92       	push	r6
    5ed4:	7f 92       	push	r7
    5ed6:	8f 92       	push	r8
    5ed8:	9f 92       	push	r9
    5eda:	af 92       	push	r10
    5edc:	bf 92       	push	r11
    5ede:	cf 92       	push	r12
    5ee0:	df 92       	push	r13
    5ee2:	ef 92       	push	r14
    5ee4:	ff 92       	push	r15
    5ee6:	0f 93       	push	r16
    5ee8:	1f 93       	push	r17
    5eea:	cf 93       	push	r28
    5eec:	df 93       	push	r29
    5eee:	cd b7       	in	r28, 0x3d	; 61
    5ef0:	de b7       	in	r29, 0x3e	; 62
    5ef2:	2b 97       	sbiw	r28, 0x0b	; 11
    5ef4:	0f b6       	in	r0, 0x3f	; 63
    5ef6:	f8 94       	cli
    5ef8:	de bf       	out	0x3e, r29	; 62
    5efa:	0f be       	out	0x3f, r0	; 63
    5efc:	cd bf       	out	0x3d, r28	; 61
    5efe:	6c 01       	movw	r12, r24
    5f00:	7b 01       	movw	r14, r22
    5f02:	8a 01       	movw	r16, r20
    5f04:	fc 01       	movw	r30, r24
    5f06:	17 82       	std	Z+7, r1	; 0x07
    5f08:	16 82       	std	Z+6, r1	; 0x06
    5f0a:	83 81       	ldd	r24, Z+3	; 0x03
    5f0c:	81 ff       	sbrs	r24, 1
    5f0e:	bf c1       	rjmp	.+894    	; 0x628e <vfprintf+0x3c4>
    5f10:	ce 01       	movw	r24, r28
    5f12:	01 96       	adiw	r24, 0x01	; 1
    5f14:	3c 01       	movw	r6, r24
    5f16:	f6 01       	movw	r30, r12
    5f18:	93 81       	ldd	r25, Z+3	; 0x03
    5f1a:	f7 01       	movw	r30, r14
    5f1c:	93 fd       	sbrc	r25, 3
    5f1e:	85 91       	lpm	r24, Z+
    5f20:	93 ff       	sbrs	r25, 3
    5f22:	81 91       	ld	r24, Z+
    5f24:	7f 01       	movw	r14, r30
    5f26:	88 23       	and	r24, r24
    5f28:	09 f4       	brne	.+2      	; 0x5f2c <vfprintf+0x62>
    5f2a:	ad c1       	rjmp	.+858    	; 0x6286 <vfprintf+0x3bc>
    5f2c:	85 32       	cpi	r24, 0x25	; 37
    5f2e:	39 f4       	brne	.+14     	; 0x5f3e <vfprintf+0x74>
    5f30:	93 fd       	sbrc	r25, 3
    5f32:	85 91       	lpm	r24, Z+
    5f34:	93 ff       	sbrs	r25, 3
    5f36:	81 91       	ld	r24, Z+
    5f38:	7f 01       	movw	r14, r30
    5f3a:	85 32       	cpi	r24, 0x25	; 37
    5f3c:	21 f4       	brne	.+8      	; 0x5f46 <vfprintf+0x7c>
    5f3e:	b6 01       	movw	r22, r12
    5f40:	90 e0       	ldi	r25, 0x00	; 0
    5f42:	d6 d1       	rcall	.+940    	; 0x62f0 <fputc>
    5f44:	e8 cf       	rjmp	.-48     	; 0x5f16 <vfprintf+0x4c>
    5f46:	91 2c       	mov	r9, r1
    5f48:	21 2c       	mov	r2, r1
    5f4a:	31 2c       	mov	r3, r1
    5f4c:	ff e1       	ldi	r31, 0x1F	; 31
    5f4e:	f3 15       	cp	r31, r3
    5f50:	d8 f0       	brcs	.+54     	; 0x5f88 <vfprintf+0xbe>
    5f52:	8b 32       	cpi	r24, 0x2B	; 43
    5f54:	79 f0       	breq	.+30     	; 0x5f74 <vfprintf+0xaa>
    5f56:	38 f4       	brcc	.+14     	; 0x5f66 <vfprintf+0x9c>
    5f58:	80 32       	cpi	r24, 0x20	; 32
    5f5a:	79 f0       	breq	.+30     	; 0x5f7a <vfprintf+0xb0>
    5f5c:	83 32       	cpi	r24, 0x23	; 35
    5f5e:	a1 f4       	brne	.+40     	; 0x5f88 <vfprintf+0xbe>
    5f60:	23 2d       	mov	r18, r3
    5f62:	20 61       	ori	r18, 0x10	; 16
    5f64:	1d c0       	rjmp	.+58     	; 0x5fa0 <vfprintf+0xd6>
    5f66:	8d 32       	cpi	r24, 0x2D	; 45
    5f68:	61 f0       	breq	.+24     	; 0x5f82 <vfprintf+0xb8>
    5f6a:	80 33       	cpi	r24, 0x30	; 48
    5f6c:	69 f4       	brne	.+26     	; 0x5f88 <vfprintf+0xbe>
    5f6e:	23 2d       	mov	r18, r3
    5f70:	21 60       	ori	r18, 0x01	; 1
    5f72:	16 c0       	rjmp	.+44     	; 0x5fa0 <vfprintf+0xd6>
    5f74:	83 2d       	mov	r24, r3
    5f76:	82 60       	ori	r24, 0x02	; 2
    5f78:	38 2e       	mov	r3, r24
    5f7a:	e3 2d       	mov	r30, r3
    5f7c:	e4 60       	ori	r30, 0x04	; 4
    5f7e:	3e 2e       	mov	r3, r30
    5f80:	2a c0       	rjmp	.+84     	; 0x5fd6 <vfprintf+0x10c>
    5f82:	f3 2d       	mov	r31, r3
    5f84:	f8 60       	ori	r31, 0x08	; 8
    5f86:	1d c0       	rjmp	.+58     	; 0x5fc2 <vfprintf+0xf8>
    5f88:	37 fc       	sbrc	r3, 7
    5f8a:	2d c0       	rjmp	.+90     	; 0x5fe6 <vfprintf+0x11c>
    5f8c:	20 ed       	ldi	r18, 0xD0	; 208
    5f8e:	28 0f       	add	r18, r24
    5f90:	2a 30       	cpi	r18, 0x0A	; 10
    5f92:	40 f0       	brcs	.+16     	; 0x5fa4 <vfprintf+0xda>
    5f94:	8e 32       	cpi	r24, 0x2E	; 46
    5f96:	b9 f4       	brne	.+46     	; 0x5fc6 <vfprintf+0xfc>
    5f98:	36 fc       	sbrc	r3, 6
    5f9a:	75 c1       	rjmp	.+746    	; 0x6286 <vfprintf+0x3bc>
    5f9c:	23 2d       	mov	r18, r3
    5f9e:	20 64       	ori	r18, 0x40	; 64
    5fa0:	32 2e       	mov	r3, r18
    5fa2:	19 c0       	rjmp	.+50     	; 0x5fd6 <vfprintf+0x10c>
    5fa4:	36 fe       	sbrs	r3, 6
    5fa6:	06 c0       	rjmp	.+12     	; 0x5fb4 <vfprintf+0xea>
    5fa8:	8a e0       	ldi	r24, 0x0A	; 10
    5faa:	98 9e       	mul	r9, r24
    5fac:	20 0d       	add	r18, r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	92 2e       	mov	r9, r18
    5fb2:	11 c0       	rjmp	.+34     	; 0x5fd6 <vfprintf+0x10c>
    5fb4:	ea e0       	ldi	r30, 0x0A	; 10
    5fb6:	2e 9e       	mul	r2, r30
    5fb8:	20 0d       	add	r18, r0
    5fba:	11 24       	eor	r1, r1
    5fbc:	22 2e       	mov	r2, r18
    5fbe:	f3 2d       	mov	r31, r3
    5fc0:	f0 62       	ori	r31, 0x20	; 32
    5fc2:	3f 2e       	mov	r3, r31
    5fc4:	08 c0       	rjmp	.+16     	; 0x5fd6 <vfprintf+0x10c>
    5fc6:	8c 36       	cpi	r24, 0x6C	; 108
    5fc8:	21 f4       	brne	.+8      	; 0x5fd2 <vfprintf+0x108>
    5fca:	83 2d       	mov	r24, r3
    5fcc:	80 68       	ori	r24, 0x80	; 128
    5fce:	38 2e       	mov	r3, r24
    5fd0:	02 c0       	rjmp	.+4      	; 0x5fd6 <vfprintf+0x10c>
    5fd2:	88 36       	cpi	r24, 0x68	; 104
    5fd4:	41 f4       	brne	.+16     	; 0x5fe6 <vfprintf+0x11c>
    5fd6:	f7 01       	movw	r30, r14
    5fd8:	93 fd       	sbrc	r25, 3
    5fda:	85 91       	lpm	r24, Z+
    5fdc:	93 ff       	sbrs	r25, 3
    5fde:	81 91       	ld	r24, Z+
    5fe0:	7f 01       	movw	r14, r30
    5fe2:	81 11       	cpse	r24, r1
    5fe4:	b3 cf       	rjmp	.-154    	; 0x5f4c <vfprintf+0x82>
    5fe6:	98 2f       	mov	r25, r24
    5fe8:	9f 7d       	andi	r25, 0xDF	; 223
    5fea:	95 54       	subi	r25, 0x45	; 69
    5fec:	93 30       	cpi	r25, 0x03	; 3
    5fee:	28 f4       	brcc	.+10     	; 0x5ffa <vfprintf+0x130>
    5ff0:	0c 5f       	subi	r16, 0xFC	; 252
    5ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ff4:	9f e3       	ldi	r25, 0x3F	; 63
    5ff6:	99 83       	std	Y+1, r25	; 0x01
    5ff8:	0d c0       	rjmp	.+26     	; 0x6014 <vfprintf+0x14a>
    5ffa:	83 36       	cpi	r24, 0x63	; 99
    5ffc:	31 f0       	breq	.+12     	; 0x600a <vfprintf+0x140>
    5ffe:	83 37       	cpi	r24, 0x73	; 115
    6000:	71 f0       	breq	.+28     	; 0x601e <vfprintf+0x154>
    6002:	83 35       	cpi	r24, 0x53	; 83
    6004:	09 f0       	breq	.+2      	; 0x6008 <vfprintf+0x13e>
    6006:	55 c0       	rjmp	.+170    	; 0x60b2 <vfprintf+0x1e8>
    6008:	20 c0       	rjmp	.+64     	; 0x604a <vfprintf+0x180>
    600a:	f8 01       	movw	r30, r16
    600c:	80 81       	ld	r24, Z
    600e:	89 83       	std	Y+1, r24	; 0x01
    6010:	0e 5f       	subi	r16, 0xFE	; 254
    6012:	1f 4f       	sbci	r17, 0xFF	; 255
    6014:	88 24       	eor	r8, r8
    6016:	83 94       	inc	r8
    6018:	91 2c       	mov	r9, r1
    601a:	53 01       	movw	r10, r6
    601c:	12 c0       	rjmp	.+36     	; 0x6042 <vfprintf+0x178>
    601e:	28 01       	movw	r4, r16
    6020:	f2 e0       	ldi	r31, 0x02	; 2
    6022:	4f 0e       	add	r4, r31
    6024:	51 1c       	adc	r5, r1
    6026:	f8 01       	movw	r30, r16
    6028:	a0 80       	ld	r10, Z
    602a:	b1 80       	ldd	r11, Z+1	; 0x01
    602c:	36 fe       	sbrs	r3, 6
    602e:	03 c0       	rjmp	.+6      	; 0x6036 <vfprintf+0x16c>
    6030:	69 2d       	mov	r22, r9
    6032:	70 e0       	ldi	r23, 0x00	; 0
    6034:	02 c0       	rjmp	.+4      	; 0x603a <vfprintf+0x170>
    6036:	6f ef       	ldi	r22, 0xFF	; 255
    6038:	7f ef       	ldi	r23, 0xFF	; 255
    603a:	c5 01       	movw	r24, r10
    603c:	4e d1       	rcall	.+668    	; 0x62da <strnlen>
    603e:	4c 01       	movw	r8, r24
    6040:	82 01       	movw	r16, r4
    6042:	f3 2d       	mov	r31, r3
    6044:	ff 77       	andi	r31, 0x7F	; 127
    6046:	3f 2e       	mov	r3, r31
    6048:	15 c0       	rjmp	.+42     	; 0x6074 <vfprintf+0x1aa>
    604a:	28 01       	movw	r4, r16
    604c:	22 e0       	ldi	r18, 0x02	; 2
    604e:	42 0e       	add	r4, r18
    6050:	51 1c       	adc	r5, r1
    6052:	f8 01       	movw	r30, r16
    6054:	a0 80       	ld	r10, Z
    6056:	b1 80       	ldd	r11, Z+1	; 0x01
    6058:	36 fe       	sbrs	r3, 6
    605a:	03 c0       	rjmp	.+6      	; 0x6062 <vfprintf+0x198>
    605c:	69 2d       	mov	r22, r9
    605e:	70 e0       	ldi	r23, 0x00	; 0
    6060:	02 c0       	rjmp	.+4      	; 0x6066 <vfprintf+0x19c>
    6062:	6f ef       	ldi	r22, 0xFF	; 255
    6064:	7f ef       	ldi	r23, 0xFF	; 255
    6066:	c5 01       	movw	r24, r10
    6068:	2d d1       	rcall	.+602    	; 0x62c4 <strnlen_P>
    606a:	4c 01       	movw	r8, r24
    606c:	f3 2d       	mov	r31, r3
    606e:	f0 68       	ori	r31, 0x80	; 128
    6070:	3f 2e       	mov	r3, r31
    6072:	82 01       	movw	r16, r4
    6074:	33 fc       	sbrc	r3, 3
    6076:	19 c0       	rjmp	.+50     	; 0x60aa <vfprintf+0x1e0>
    6078:	82 2d       	mov	r24, r2
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	88 16       	cp	r8, r24
    607e:	99 06       	cpc	r9, r25
    6080:	a0 f4       	brcc	.+40     	; 0x60aa <vfprintf+0x1e0>
    6082:	b6 01       	movw	r22, r12
    6084:	80 e2       	ldi	r24, 0x20	; 32
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	33 d1       	rcall	.+614    	; 0x62f0 <fputc>
    608a:	2a 94       	dec	r2
    608c:	f5 cf       	rjmp	.-22     	; 0x6078 <vfprintf+0x1ae>
    608e:	f5 01       	movw	r30, r10
    6090:	37 fc       	sbrc	r3, 7
    6092:	85 91       	lpm	r24, Z+
    6094:	37 fe       	sbrs	r3, 7
    6096:	81 91       	ld	r24, Z+
    6098:	5f 01       	movw	r10, r30
    609a:	b6 01       	movw	r22, r12
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	28 d1       	rcall	.+592    	; 0x62f0 <fputc>
    60a0:	21 10       	cpse	r2, r1
    60a2:	2a 94       	dec	r2
    60a4:	21 e0       	ldi	r18, 0x01	; 1
    60a6:	82 1a       	sub	r8, r18
    60a8:	91 08       	sbc	r9, r1
    60aa:	81 14       	cp	r8, r1
    60ac:	91 04       	cpc	r9, r1
    60ae:	79 f7       	brne	.-34     	; 0x608e <vfprintf+0x1c4>
    60b0:	e1 c0       	rjmp	.+450    	; 0x6274 <vfprintf+0x3aa>
    60b2:	84 36       	cpi	r24, 0x64	; 100
    60b4:	11 f0       	breq	.+4      	; 0x60ba <vfprintf+0x1f0>
    60b6:	89 36       	cpi	r24, 0x69	; 105
    60b8:	39 f5       	brne	.+78     	; 0x6108 <vfprintf+0x23e>
    60ba:	f8 01       	movw	r30, r16
    60bc:	37 fe       	sbrs	r3, 7
    60be:	07 c0       	rjmp	.+14     	; 0x60ce <vfprintf+0x204>
    60c0:	60 81       	ld	r22, Z
    60c2:	71 81       	ldd	r23, Z+1	; 0x01
    60c4:	82 81       	ldd	r24, Z+2	; 0x02
    60c6:	93 81       	ldd	r25, Z+3	; 0x03
    60c8:	0c 5f       	subi	r16, 0xFC	; 252
    60ca:	1f 4f       	sbci	r17, 0xFF	; 255
    60cc:	08 c0       	rjmp	.+16     	; 0x60de <vfprintf+0x214>
    60ce:	60 81       	ld	r22, Z
    60d0:	71 81       	ldd	r23, Z+1	; 0x01
    60d2:	07 2e       	mov	r0, r23
    60d4:	00 0c       	add	r0, r0
    60d6:	88 0b       	sbc	r24, r24
    60d8:	99 0b       	sbc	r25, r25
    60da:	0e 5f       	subi	r16, 0xFE	; 254
    60dc:	1f 4f       	sbci	r17, 0xFF	; 255
    60de:	f3 2d       	mov	r31, r3
    60e0:	ff 76       	andi	r31, 0x6F	; 111
    60e2:	3f 2e       	mov	r3, r31
    60e4:	97 ff       	sbrs	r25, 7
    60e6:	09 c0       	rjmp	.+18     	; 0x60fa <vfprintf+0x230>
    60e8:	90 95       	com	r25
    60ea:	80 95       	com	r24
    60ec:	70 95       	com	r23
    60ee:	61 95       	neg	r22
    60f0:	7f 4f       	sbci	r23, 0xFF	; 255
    60f2:	8f 4f       	sbci	r24, 0xFF	; 255
    60f4:	9f 4f       	sbci	r25, 0xFF	; 255
    60f6:	f0 68       	ori	r31, 0x80	; 128
    60f8:	3f 2e       	mov	r3, r31
    60fa:	2a e0       	ldi	r18, 0x0A	; 10
    60fc:	30 e0       	ldi	r19, 0x00	; 0
    60fe:	a3 01       	movw	r20, r6
    6100:	33 d1       	rcall	.+614    	; 0x6368 <__ultoa_invert>
    6102:	88 2e       	mov	r8, r24
    6104:	86 18       	sub	r8, r6
    6106:	44 c0       	rjmp	.+136    	; 0x6190 <vfprintf+0x2c6>
    6108:	85 37       	cpi	r24, 0x75	; 117
    610a:	31 f4       	brne	.+12     	; 0x6118 <vfprintf+0x24e>
    610c:	23 2d       	mov	r18, r3
    610e:	2f 7e       	andi	r18, 0xEF	; 239
    6110:	b2 2e       	mov	r11, r18
    6112:	2a e0       	ldi	r18, 0x0A	; 10
    6114:	30 e0       	ldi	r19, 0x00	; 0
    6116:	25 c0       	rjmp	.+74     	; 0x6162 <vfprintf+0x298>
    6118:	93 2d       	mov	r25, r3
    611a:	99 7f       	andi	r25, 0xF9	; 249
    611c:	b9 2e       	mov	r11, r25
    611e:	8f 36       	cpi	r24, 0x6F	; 111
    6120:	c1 f0       	breq	.+48     	; 0x6152 <vfprintf+0x288>
    6122:	18 f4       	brcc	.+6      	; 0x612a <vfprintf+0x260>
    6124:	88 35       	cpi	r24, 0x58	; 88
    6126:	79 f0       	breq	.+30     	; 0x6146 <vfprintf+0x27c>
    6128:	ae c0       	rjmp	.+348    	; 0x6286 <vfprintf+0x3bc>
    612a:	80 37       	cpi	r24, 0x70	; 112
    612c:	19 f0       	breq	.+6      	; 0x6134 <vfprintf+0x26a>
    612e:	88 37       	cpi	r24, 0x78	; 120
    6130:	21 f0       	breq	.+8      	; 0x613a <vfprintf+0x270>
    6132:	a9 c0       	rjmp	.+338    	; 0x6286 <vfprintf+0x3bc>
    6134:	e9 2f       	mov	r30, r25
    6136:	e0 61       	ori	r30, 0x10	; 16
    6138:	be 2e       	mov	r11, r30
    613a:	b4 fe       	sbrs	r11, 4
    613c:	0d c0       	rjmp	.+26     	; 0x6158 <vfprintf+0x28e>
    613e:	fb 2d       	mov	r31, r11
    6140:	f4 60       	ori	r31, 0x04	; 4
    6142:	bf 2e       	mov	r11, r31
    6144:	09 c0       	rjmp	.+18     	; 0x6158 <vfprintf+0x28e>
    6146:	34 fe       	sbrs	r3, 4
    6148:	0a c0       	rjmp	.+20     	; 0x615e <vfprintf+0x294>
    614a:	29 2f       	mov	r18, r25
    614c:	26 60       	ori	r18, 0x06	; 6
    614e:	b2 2e       	mov	r11, r18
    6150:	06 c0       	rjmp	.+12     	; 0x615e <vfprintf+0x294>
    6152:	28 e0       	ldi	r18, 0x08	; 8
    6154:	30 e0       	ldi	r19, 0x00	; 0
    6156:	05 c0       	rjmp	.+10     	; 0x6162 <vfprintf+0x298>
    6158:	20 e1       	ldi	r18, 0x10	; 16
    615a:	30 e0       	ldi	r19, 0x00	; 0
    615c:	02 c0       	rjmp	.+4      	; 0x6162 <vfprintf+0x298>
    615e:	20 e1       	ldi	r18, 0x10	; 16
    6160:	32 e0       	ldi	r19, 0x02	; 2
    6162:	f8 01       	movw	r30, r16
    6164:	b7 fe       	sbrs	r11, 7
    6166:	07 c0       	rjmp	.+14     	; 0x6176 <vfprintf+0x2ac>
    6168:	60 81       	ld	r22, Z
    616a:	71 81       	ldd	r23, Z+1	; 0x01
    616c:	82 81       	ldd	r24, Z+2	; 0x02
    616e:	93 81       	ldd	r25, Z+3	; 0x03
    6170:	0c 5f       	subi	r16, 0xFC	; 252
    6172:	1f 4f       	sbci	r17, 0xFF	; 255
    6174:	06 c0       	rjmp	.+12     	; 0x6182 <vfprintf+0x2b8>
    6176:	60 81       	ld	r22, Z
    6178:	71 81       	ldd	r23, Z+1	; 0x01
    617a:	80 e0       	ldi	r24, 0x00	; 0
    617c:	90 e0       	ldi	r25, 0x00	; 0
    617e:	0e 5f       	subi	r16, 0xFE	; 254
    6180:	1f 4f       	sbci	r17, 0xFF	; 255
    6182:	a3 01       	movw	r20, r6
    6184:	f1 d0       	rcall	.+482    	; 0x6368 <__ultoa_invert>
    6186:	88 2e       	mov	r8, r24
    6188:	86 18       	sub	r8, r6
    618a:	fb 2d       	mov	r31, r11
    618c:	ff 77       	andi	r31, 0x7F	; 127
    618e:	3f 2e       	mov	r3, r31
    6190:	36 fe       	sbrs	r3, 6
    6192:	0d c0       	rjmp	.+26     	; 0x61ae <vfprintf+0x2e4>
    6194:	23 2d       	mov	r18, r3
    6196:	2e 7f       	andi	r18, 0xFE	; 254
    6198:	a2 2e       	mov	r10, r18
    619a:	89 14       	cp	r8, r9
    619c:	58 f4       	brcc	.+22     	; 0x61b4 <vfprintf+0x2ea>
    619e:	34 fe       	sbrs	r3, 4
    61a0:	0b c0       	rjmp	.+22     	; 0x61b8 <vfprintf+0x2ee>
    61a2:	32 fc       	sbrc	r3, 2
    61a4:	09 c0       	rjmp	.+18     	; 0x61b8 <vfprintf+0x2ee>
    61a6:	83 2d       	mov	r24, r3
    61a8:	8e 7e       	andi	r24, 0xEE	; 238
    61aa:	a8 2e       	mov	r10, r24
    61ac:	05 c0       	rjmp	.+10     	; 0x61b8 <vfprintf+0x2ee>
    61ae:	b8 2c       	mov	r11, r8
    61b0:	a3 2c       	mov	r10, r3
    61b2:	03 c0       	rjmp	.+6      	; 0x61ba <vfprintf+0x2f0>
    61b4:	b8 2c       	mov	r11, r8
    61b6:	01 c0       	rjmp	.+2      	; 0x61ba <vfprintf+0x2f0>
    61b8:	b9 2c       	mov	r11, r9
    61ba:	a4 fe       	sbrs	r10, 4
    61bc:	0f c0       	rjmp	.+30     	; 0x61dc <vfprintf+0x312>
    61be:	fe 01       	movw	r30, r28
    61c0:	e8 0d       	add	r30, r8
    61c2:	f1 1d       	adc	r31, r1
    61c4:	80 81       	ld	r24, Z
    61c6:	80 33       	cpi	r24, 0x30	; 48
    61c8:	21 f4       	brne	.+8      	; 0x61d2 <vfprintf+0x308>
    61ca:	9a 2d       	mov	r25, r10
    61cc:	99 7e       	andi	r25, 0xE9	; 233
    61ce:	a9 2e       	mov	r10, r25
    61d0:	09 c0       	rjmp	.+18     	; 0x61e4 <vfprintf+0x31a>
    61d2:	a2 fe       	sbrs	r10, 2
    61d4:	06 c0       	rjmp	.+12     	; 0x61e2 <vfprintf+0x318>
    61d6:	b3 94       	inc	r11
    61d8:	b3 94       	inc	r11
    61da:	04 c0       	rjmp	.+8      	; 0x61e4 <vfprintf+0x31a>
    61dc:	8a 2d       	mov	r24, r10
    61de:	86 78       	andi	r24, 0x86	; 134
    61e0:	09 f0       	breq	.+2      	; 0x61e4 <vfprintf+0x31a>
    61e2:	b3 94       	inc	r11
    61e4:	a3 fc       	sbrc	r10, 3
    61e6:	10 c0       	rjmp	.+32     	; 0x6208 <vfprintf+0x33e>
    61e8:	a0 fe       	sbrs	r10, 0
    61ea:	06 c0       	rjmp	.+12     	; 0x61f8 <vfprintf+0x32e>
    61ec:	b2 14       	cp	r11, r2
    61ee:	80 f4       	brcc	.+32     	; 0x6210 <vfprintf+0x346>
    61f0:	28 0c       	add	r2, r8
    61f2:	92 2c       	mov	r9, r2
    61f4:	9b 18       	sub	r9, r11
    61f6:	0d c0       	rjmp	.+26     	; 0x6212 <vfprintf+0x348>
    61f8:	b2 14       	cp	r11, r2
    61fa:	58 f4       	brcc	.+22     	; 0x6212 <vfprintf+0x348>
    61fc:	b6 01       	movw	r22, r12
    61fe:	80 e2       	ldi	r24, 0x20	; 32
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	76 d0       	rcall	.+236    	; 0x62f0 <fputc>
    6204:	b3 94       	inc	r11
    6206:	f8 cf       	rjmp	.-16     	; 0x61f8 <vfprintf+0x32e>
    6208:	b2 14       	cp	r11, r2
    620a:	18 f4       	brcc	.+6      	; 0x6212 <vfprintf+0x348>
    620c:	2b 18       	sub	r2, r11
    620e:	02 c0       	rjmp	.+4      	; 0x6214 <vfprintf+0x34a>
    6210:	98 2c       	mov	r9, r8
    6212:	21 2c       	mov	r2, r1
    6214:	a4 fe       	sbrs	r10, 4
    6216:	0f c0       	rjmp	.+30     	; 0x6236 <vfprintf+0x36c>
    6218:	b6 01       	movw	r22, r12
    621a:	80 e3       	ldi	r24, 0x30	; 48
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	68 d0       	rcall	.+208    	; 0x62f0 <fputc>
    6220:	a2 fe       	sbrs	r10, 2
    6222:	16 c0       	rjmp	.+44     	; 0x6250 <vfprintf+0x386>
    6224:	a1 fc       	sbrc	r10, 1
    6226:	03 c0       	rjmp	.+6      	; 0x622e <vfprintf+0x364>
    6228:	88 e7       	ldi	r24, 0x78	; 120
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	02 c0       	rjmp	.+4      	; 0x6232 <vfprintf+0x368>
    622e:	88 e5       	ldi	r24, 0x58	; 88
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	b6 01       	movw	r22, r12
    6234:	0c c0       	rjmp	.+24     	; 0x624e <vfprintf+0x384>
    6236:	8a 2d       	mov	r24, r10
    6238:	86 78       	andi	r24, 0x86	; 134
    623a:	51 f0       	breq	.+20     	; 0x6250 <vfprintf+0x386>
    623c:	a1 fe       	sbrs	r10, 1
    623e:	02 c0       	rjmp	.+4      	; 0x6244 <vfprintf+0x37a>
    6240:	8b e2       	ldi	r24, 0x2B	; 43
    6242:	01 c0       	rjmp	.+2      	; 0x6246 <vfprintf+0x37c>
    6244:	80 e2       	ldi	r24, 0x20	; 32
    6246:	a7 fc       	sbrc	r10, 7
    6248:	8d e2       	ldi	r24, 0x2D	; 45
    624a:	b6 01       	movw	r22, r12
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	50 d0       	rcall	.+160    	; 0x62f0 <fputc>
    6250:	89 14       	cp	r8, r9
    6252:	30 f4       	brcc	.+12     	; 0x6260 <vfprintf+0x396>
    6254:	b6 01       	movw	r22, r12
    6256:	80 e3       	ldi	r24, 0x30	; 48
    6258:	90 e0       	ldi	r25, 0x00	; 0
    625a:	4a d0       	rcall	.+148    	; 0x62f0 <fputc>
    625c:	9a 94       	dec	r9
    625e:	f8 cf       	rjmp	.-16     	; 0x6250 <vfprintf+0x386>
    6260:	8a 94       	dec	r8
    6262:	f3 01       	movw	r30, r6
    6264:	e8 0d       	add	r30, r8
    6266:	f1 1d       	adc	r31, r1
    6268:	80 81       	ld	r24, Z
    626a:	b6 01       	movw	r22, r12
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	40 d0       	rcall	.+128    	; 0x62f0 <fputc>
    6270:	81 10       	cpse	r8, r1
    6272:	f6 cf       	rjmp	.-20     	; 0x6260 <vfprintf+0x396>
    6274:	22 20       	and	r2, r2
    6276:	09 f4       	brne	.+2      	; 0x627a <vfprintf+0x3b0>
    6278:	4e ce       	rjmp	.-868    	; 0x5f16 <vfprintf+0x4c>
    627a:	b6 01       	movw	r22, r12
    627c:	80 e2       	ldi	r24, 0x20	; 32
    627e:	90 e0       	ldi	r25, 0x00	; 0
    6280:	37 d0       	rcall	.+110    	; 0x62f0 <fputc>
    6282:	2a 94       	dec	r2
    6284:	f7 cf       	rjmp	.-18     	; 0x6274 <vfprintf+0x3aa>
    6286:	f6 01       	movw	r30, r12
    6288:	86 81       	ldd	r24, Z+6	; 0x06
    628a:	97 81       	ldd	r25, Z+7	; 0x07
    628c:	02 c0       	rjmp	.+4      	; 0x6292 <vfprintf+0x3c8>
    628e:	8f ef       	ldi	r24, 0xFF	; 255
    6290:	9f ef       	ldi	r25, 0xFF	; 255
    6292:	2b 96       	adiw	r28, 0x0b	; 11
    6294:	0f b6       	in	r0, 0x3f	; 63
    6296:	f8 94       	cli
    6298:	de bf       	out	0x3e, r29	; 62
    629a:	0f be       	out	0x3f, r0	; 63
    629c:	cd bf       	out	0x3d, r28	; 61
    629e:	df 91       	pop	r29
    62a0:	cf 91       	pop	r28
    62a2:	1f 91       	pop	r17
    62a4:	0f 91       	pop	r16
    62a6:	ff 90       	pop	r15
    62a8:	ef 90       	pop	r14
    62aa:	df 90       	pop	r13
    62ac:	cf 90       	pop	r12
    62ae:	bf 90       	pop	r11
    62b0:	af 90       	pop	r10
    62b2:	9f 90       	pop	r9
    62b4:	8f 90       	pop	r8
    62b6:	7f 90       	pop	r7
    62b8:	6f 90       	pop	r6
    62ba:	5f 90       	pop	r5
    62bc:	4f 90       	pop	r4
    62be:	3f 90       	pop	r3
    62c0:	2f 90       	pop	r2
    62c2:	08 95       	ret

000062c4 <strnlen_P>:
    62c4:	fc 01       	movw	r30, r24
    62c6:	05 90       	lpm	r0, Z+
    62c8:	61 50       	subi	r22, 0x01	; 1
    62ca:	70 40       	sbci	r23, 0x00	; 0
    62cc:	01 10       	cpse	r0, r1
    62ce:	d8 f7       	brcc	.-10     	; 0x62c6 <strnlen_P+0x2>
    62d0:	80 95       	com	r24
    62d2:	90 95       	com	r25
    62d4:	8e 0f       	add	r24, r30
    62d6:	9f 1f       	adc	r25, r31
    62d8:	08 95       	ret

000062da <strnlen>:
    62da:	fc 01       	movw	r30, r24
    62dc:	61 50       	subi	r22, 0x01	; 1
    62de:	70 40       	sbci	r23, 0x00	; 0
    62e0:	01 90       	ld	r0, Z+
    62e2:	01 10       	cpse	r0, r1
    62e4:	d8 f7       	brcc	.-10     	; 0x62dc <strnlen+0x2>
    62e6:	80 95       	com	r24
    62e8:	90 95       	com	r25
    62ea:	8e 0f       	add	r24, r30
    62ec:	9f 1f       	adc	r25, r31
    62ee:	08 95       	ret

000062f0 <fputc>:
    62f0:	0f 93       	push	r16
    62f2:	1f 93       	push	r17
    62f4:	cf 93       	push	r28
    62f6:	df 93       	push	r29
    62f8:	fb 01       	movw	r30, r22
    62fa:	23 81       	ldd	r18, Z+3	; 0x03
    62fc:	21 fd       	sbrc	r18, 1
    62fe:	03 c0       	rjmp	.+6      	; 0x6306 <fputc+0x16>
    6300:	8f ef       	ldi	r24, 0xFF	; 255
    6302:	9f ef       	ldi	r25, 0xFF	; 255
    6304:	2c c0       	rjmp	.+88     	; 0x635e <fputc+0x6e>
    6306:	22 ff       	sbrs	r18, 2
    6308:	16 c0       	rjmp	.+44     	; 0x6336 <fputc+0x46>
    630a:	46 81       	ldd	r20, Z+6	; 0x06
    630c:	57 81       	ldd	r21, Z+7	; 0x07
    630e:	24 81       	ldd	r18, Z+4	; 0x04
    6310:	35 81       	ldd	r19, Z+5	; 0x05
    6312:	42 17       	cp	r20, r18
    6314:	53 07       	cpc	r21, r19
    6316:	44 f4       	brge	.+16     	; 0x6328 <fputc+0x38>
    6318:	a0 81       	ld	r26, Z
    631a:	b1 81       	ldd	r27, Z+1	; 0x01
    631c:	9d 01       	movw	r18, r26
    631e:	2f 5f       	subi	r18, 0xFF	; 255
    6320:	3f 4f       	sbci	r19, 0xFF	; 255
    6322:	31 83       	std	Z+1, r19	; 0x01
    6324:	20 83       	st	Z, r18
    6326:	8c 93       	st	X, r24
    6328:	26 81       	ldd	r18, Z+6	; 0x06
    632a:	37 81       	ldd	r19, Z+7	; 0x07
    632c:	2f 5f       	subi	r18, 0xFF	; 255
    632e:	3f 4f       	sbci	r19, 0xFF	; 255
    6330:	37 83       	std	Z+7, r19	; 0x07
    6332:	26 83       	std	Z+6, r18	; 0x06
    6334:	14 c0       	rjmp	.+40     	; 0x635e <fputc+0x6e>
    6336:	8b 01       	movw	r16, r22
    6338:	ec 01       	movw	r28, r24
    633a:	fb 01       	movw	r30, r22
    633c:	00 84       	ldd	r0, Z+8	; 0x08
    633e:	f1 85       	ldd	r31, Z+9	; 0x09
    6340:	e0 2d       	mov	r30, r0
    6342:	19 95       	eicall
    6344:	89 2b       	or	r24, r25
    6346:	e1 f6       	brne	.-72     	; 0x6300 <fputc+0x10>
    6348:	d8 01       	movw	r26, r16
    634a:	16 96       	adiw	r26, 0x06	; 6
    634c:	8d 91       	ld	r24, X+
    634e:	9c 91       	ld	r25, X
    6350:	17 97       	sbiw	r26, 0x07	; 7
    6352:	01 96       	adiw	r24, 0x01	; 1
    6354:	17 96       	adiw	r26, 0x07	; 7
    6356:	9c 93       	st	X, r25
    6358:	8e 93       	st	-X, r24
    635a:	16 97       	sbiw	r26, 0x06	; 6
    635c:	ce 01       	movw	r24, r28
    635e:	df 91       	pop	r29
    6360:	cf 91       	pop	r28
    6362:	1f 91       	pop	r17
    6364:	0f 91       	pop	r16
    6366:	08 95       	ret

00006368 <__ultoa_invert>:
    6368:	fa 01       	movw	r30, r20
    636a:	aa 27       	eor	r26, r26
    636c:	28 30       	cpi	r18, 0x08	; 8
    636e:	51 f1       	breq	.+84     	; 0x63c4 <__ultoa_invert+0x5c>
    6370:	20 31       	cpi	r18, 0x10	; 16
    6372:	81 f1       	breq	.+96     	; 0x63d4 <__ultoa_invert+0x6c>
    6374:	e8 94       	clt
    6376:	6f 93       	push	r22
    6378:	6e 7f       	andi	r22, 0xFE	; 254
    637a:	6e 5f       	subi	r22, 0xFE	; 254
    637c:	7f 4f       	sbci	r23, 0xFF	; 255
    637e:	8f 4f       	sbci	r24, 0xFF	; 255
    6380:	9f 4f       	sbci	r25, 0xFF	; 255
    6382:	af 4f       	sbci	r26, 0xFF	; 255
    6384:	b1 e0       	ldi	r27, 0x01	; 1
    6386:	3e d0       	rcall	.+124    	; 0x6404 <__ultoa_invert+0x9c>
    6388:	b4 e0       	ldi	r27, 0x04	; 4
    638a:	3c d0       	rcall	.+120    	; 0x6404 <__ultoa_invert+0x9c>
    638c:	67 0f       	add	r22, r23
    638e:	78 1f       	adc	r23, r24
    6390:	89 1f       	adc	r24, r25
    6392:	9a 1f       	adc	r25, r26
    6394:	a1 1d       	adc	r26, r1
    6396:	68 0f       	add	r22, r24
    6398:	79 1f       	adc	r23, r25
    639a:	8a 1f       	adc	r24, r26
    639c:	91 1d       	adc	r25, r1
    639e:	a1 1d       	adc	r26, r1
    63a0:	6a 0f       	add	r22, r26
    63a2:	71 1d       	adc	r23, r1
    63a4:	81 1d       	adc	r24, r1
    63a6:	91 1d       	adc	r25, r1
    63a8:	a1 1d       	adc	r26, r1
    63aa:	20 d0       	rcall	.+64     	; 0x63ec <__ultoa_invert+0x84>
    63ac:	09 f4       	brne	.+2      	; 0x63b0 <__ultoa_invert+0x48>
    63ae:	68 94       	set
    63b0:	3f 91       	pop	r19
    63b2:	2a e0       	ldi	r18, 0x0A	; 10
    63b4:	26 9f       	mul	r18, r22
    63b6:	11 24       	eor	r1, r1
    63b8:	30 19       	sub	r19, r0
    63ba:	30 5d       	subi	r19, 0xD0	; 208
    63bc:	31 93       	st	Z+, r19
    63be:	de f6       	brtc	.-74     	; 0x6376 <__ultoa_invert+0xe>
    63c0:	cf 01       	movw	r24, r30
    63c2:	08 95       	ret
    63c4:	46 2f       	mov	r20, r22
    63c6:	47 70       	andi	r20, 0x07	; 7
    63c8:	40 5d       	subi	r20, 0xD0	; 208
    63ca:	41 93       	st	Z+, r20
    63cc:	b3 e0       	ldi	r27, 0x03	; 3
    63ce:	0f d0       	rcall	.+30     	; 0x63ee <__ultoa_invert+0x86>
    63d0:	c9 f7       	brne	.-14     	; 0x63c4 <__ultoa_invert+0x5c>
    63d2:	f6 cf       	rjmp	.-20     	; 0x63c0 <__ultoa_invert+0x58>
    63d4:	46 2f       	mov	r20, r22
    63d6:	4f 70       	andi	r20, 0x0F	; 15
    63d8:	40 5d       	subi	r20, 0xD0	; 208
    63da:	4a 33       	cpi	r20, 0x3A	; 58
    63dc:	18 f0       	brcs	.+6      	; 0x63e4 <__ultoa_invert+0x7c>
    63de:	49 5d       	subi	r20, 0xD9	; 217
    63e0:	31 fd       	sbrc	r19, 1
    63e2:	40 52       	subi	r20, 0x20	; 32
    63e4:	41 93       	st	Z+, r20
    63e6:	02 d0       	rcall	.+4      	; 0x63ec <__ultoa_invert+0x84>
    63e8:	a9 f7       	brne	.-22     	; 0x63d4 <__ultoa_invert+0x6c>
    63ea:	ea cf       	rjmp	.-44     	; 0x63c0 <__ultoa_invert+0x58>
    63ec:	b4 e0       	ldi	r27, 0x04	; 4
    63ee:	a6 95       	lsr	r26
    63f0:	97 95       	ror	r25
    63f2:	87 95       	ror	r24
    63f4:	77 95       	ror	r23
    63f6:	67 95       	ror	r22
    63f8:	ba 95       	dec	r27
    63fa:	c9 f7       	brne	.-14     	; 0x63ee <__ultoa_invert+0x86>
    63fc:	00 97       	sbiw	r24, 0x00	; 0
    63fe:	61 05       	cpc	r22, r1
    6400:	71 05       	cpc	r23, r1
    6402:	08 95       	ret
    6404:	9b 01       	movw	r18, r22
    6406:	ac 01       	movw	r20, r24
    6408:	0a 2e       	mov	r0, r26
    640a:	06 94       	lsr	r0
    640c:	57 95       	ror	r21
    640e:	47 95       	ror	r20
    6410:	37 95       	ror	r19
    6412:	27 95       	ror	r18
    6414:	ba 95       	dec	r27
    6416:	c9 f7       	brne	.-14     	; 0x640a <__ultoa_invert+0xa2>
    6418:	62 0f       	add	r22, r18
    641a:	73 1f       	adc	r23, r19
    641c:	84 1f       	adc	r24, r20
    641e:	95 1f       	adc	r25, r21
    6420:	a0 1d       	adc	r26, r0
    6422:	08 95       	ret

00006424 <_exit>:
    6424:	f8 94       	cli

00006426 <__stop_program>:
    6426:	ff cf       	rjmp	.-2      	; 0x6426 <__stop_program>
