
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800200  00003d62  00003df6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000afc  008002fa  008002fa  00003ef0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000738  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008ecb  00000000  00000000  000046c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000277a  00000000  00000000  0000d58f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004999  00000000  00000000  0000fd09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001960  00000000  00000000  000146a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c35  00000000  00000000  00016004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007c0f  00000000  00000000  00018c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d8  00000000  00000000  00020848  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
       2:	00 00       	nop
       4:	b2 c0       	rjmp	.+356    	; 0x16a <__bad_interrupt>
       6:	00 00       	nop
       8:	b0 c0       	rjmp	.+352    	; 0x16a <__bad_interrupt>
       a:	00 00       	nop
       c:	ae c0       	rjmp	.+348    	; 0x16a <__bad_interrupt>
       e:	00 00       	nop
      10:	ac c0       	rjmp	.+344    	; 0x16a <__bad_interrupt>
      12:	00 00       	nop
      14:	aa c0       	rjmp	.+340    	; 0x16a <__bad_interrupt>
      16:	00 00       	nop
      18:	a8 c0       	rjmp	.+336    	; 0x16a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a6 c0       	rjmp	.+332    	; 0x16a <__bad_interrupt>
      1e:	00 00       	nop
      20:	a4 c0       	rjmp	.+328    	; 0x16a <__bad_interrupt>
      22:	00 00       	nop
      24:	a2 c0       	rjmp	.+324    	; 0x16a <__bad_interrupt>
      26:	00 00       	nop
      28:	a0 c0       	rjmp	.+320    	; 0x16a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9e c0       	rjmp	.+316    	; 0x16a <__bad_interrupt>
      2e:	00 00       	nop
      30:	98 c3       	rjmp	.+1840   	; 0x762 <__vector_12>
      32:	00 00       	nop
      34:	9a c0       	rjmp	.+308    	; 0x16a <__bad_interrupt>
      36:	00 00       	nop
      38:	98 c0       	rjmp	.+304    	; 0x16a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	96 c0       	rjmp	.+300    	; 0x16a <__bad_interrupt>
      3e:	00 00       	nop
      40:	94 c0       	rjmp	.+296    	; 0x16a <__bad_interrupt>
      42:	00 00       	nop
      44:	92 c0       	rjmp	.+292    	; 0x16a <__bad_interrupt>
      46:	00 00       	nop
      48:	90 c0       	rjmp	.+288    	; 0x16a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8e c0       	rjmp	.+284    	; 0x16a <__bad_interrupt>
      4e:	00 00       	nop
      50:	8c c0       	rjmp	.+280    	; 0x16a <__bad_interrupt>
      52:	00 00       	nop
      54:	8a c0       	rjmp	.+276    	; 0x16a <__bad_interrupt>
      56:	00 00       	nop
      58:	88 c0       	rjmp	.+272    	; 0x16a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	86 c0       	rjmp	.+268    	; 0x16a <__bad_interrupt>
      5e:	00 00       	nop
      60:	84 c0       	rjmp	.+264    	; 0x16a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 97 14 	jmp	0x292e	; 0x292e <__vector_25>
      68:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__vector_26>
      6c:	7e c0       	rjmp	.+252    	; 0x16a <__bad_interrupt>
      6e:	00 00       	nop
      70:	7c c0       	rjmp	.+248    	; 0x16a <__bad_interrupt>
      72:	00 00       	nop
      74:	7a c0       	rjmp	.+244    	; 0x16a <__bad_interrupt>
      76:	00 00       	nop
      78:	78 c0       	rjmp	.+240    	; 0x16a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	76 c0       	rjmp	.+236    	; 0x16a <__bad_interrupt>
      7e:	00 00       	nop
      80:	74 c0       	rjmp	.+232    	; 0x16a <__bad_interrupt>
      82:	00 00       	nop
      84:	72 c0       	rjmp	.+228    	; 0x16a <__bad_interrupt>
      86:	00 00       	nop
      88:	70 c0       	rjmp	.+224    	; 0x16a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6e c0       	rjmp	.+220    	; 0x16a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__vector_36>
      94:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__vector_37>
      98:	68 c0       	rjmp	.+208    	; 0x16a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	66 c0       	rjmp	.+204    	; 0x16a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	64 c0       	rjmp	.+200    	; 0x16a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	62 c0       	rjmp	.+196    	; 0x16a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	60 c0       	rjmp	.+192    	; 0x16a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5e c0       	rjmp	.+188    	; 0x16a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5c c0       	rjmp	.+184    	; 0x16a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5a c0       	rjmp	.+180    	; 0x16a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	58 c0       	rjmp	.+176    	; 0x16a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	56 c0       	rjmp	.+172    	; 0x16a <__bad_interrupt>
      be:	00 00       	nop
      c0:	54 c0       	rjmp	.+168    	; 0x16a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	52 c0       	rjmp	.+164    	; 0x16a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	50 c0       	rjmp	.+160    	; 0x16a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__vector_51>
      d0:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__vector_52>
      d4:	4a c0       	rjmp	.+148    	; 0x16a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__vector_54>
      dc:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__vector_55>
      e0:	44 c0       	rjmp	.+136    	; 0x16a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6a 10       	cpse	r6, r10
      e6:	6a 10       	cpse	r6, r10
      e8:	6a 10       	cpse	r6, r10
      ea:	a1 10       	cpse	r10, r1
      ec:	a9 10       	cpse	r10, r9
      ee:	be 10       	cpse	r11, r14
      f0:	6a 10       	cpse	r6, r10
      f2:	6a 10       	cpse	r6, r10
      f4:	a1 10       	cpse	r10, r1
      f6:	a9 10       	cpse	r10, r9

000000f8 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
      f8:	42 d7       	rcall	.+3716   	; 0xf7e <prvCheckTasksWaitingTermination>
      fa:	80 91 1f 0d 	lds	r24, 0x0D1F	; 0x800d1f <pxReadyTasksLists>
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	08 f0       	brcs	.+2      	; 0x104 <prvIdleTask+0xc>
     102:	6a d2       	rcall	.+1236   	; 0x5d8 <vPortYield>
     104:	0e 94 e7 10 	call	0x21ce	; 0x21ce <vApplicationIdleHook>
     108:	f7 cf       	rjmp	.-18     	; 0xf8 <prvIdleTask>

0000010a <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	1f 92       	push	r1
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	ce 01       	movw	r24, r28
     116:	01 96       	adiw	r24, 0x01	; 1
     118:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <prvGetNextExpireTime>
     11c:	49 81       	ldd	r20, Y+1	; 0x01
     11e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <prvProcessTimerOrBlockTask>
     122:	0e 94 33 10 	call	0x2066	; 0x2066 <prvProcessReceivedCommands>
     126:	f6 cf       	rjmp	.-20     	; 0x114 <prvTimerTask+0xa>

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf ef       	ldi	r28, 0xFF	; 255
     12e:	d1 e2       	ldi	r29, 0x21	; 33
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61
     134:	00 e0       	ldi	r16, 0x00	; 0
     136:	0c bf       	out	0x3c, r16	; 60

00000138 <__do_copy_data>:
     138:	12 e0       	ldi	r17, 0x02	; 2
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	e2 e6       	ldi	r30, 0x62	; 98
     140:	fd e3       	ldi	r31, 0x3D	; 61
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	aa 3f       	cpi	r26, 0xFA	; 250
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	2d e0       	ldi	r18, 0x0D	; 13
     154:	aa ef       	ldi	r26, 0xFA	; 250
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	a6 3f       	cpi	r26, 0xF6	; 246
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	0e 94 9f 12 	call	0x253e	; 0x253e <main>
     166:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <_exit>

0000016a <__bad_interrupt>:
     16a:	4a cf       	rjmp	.-364    	; 0x0 <__vectors>

0000016c <co2MeasureCallBack>:


void co2MeasureCallBack(uint16_t ppm)
{
	// Here we enqueue
	enqueueCO2Measure(ppm);
     16c:	0c 94 15 11 	jmp	0x222a	; 0x222a <enqueueCO2Measure>
     170:	08 95       	ret

00000172 <co2Measure>:

void co2Measure() {

	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
     172:	0e 94 2c 13 	call	0x2658	; 0x2658 <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
     176:	81 11       	cpse	r24, r1
     178:	05 c0       	rjmp	.+10     	; 0x184 <co2Measure+0x12>
	{
		mh_z19_injectCallBack(co2MeasureCallBack);
     17a:	86 eb       	ldi	r24, 0xB6	; 182
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0c 94 27 13 	jmp	0x264e	; 0x264e <mh_z19_injectCallBack>
     182:	08 95       	ret
	}
	else
	{
		puts("det gik galt");
     184:	8a e4       	ldi	r24, 0x4A	; 74
     186:	92 e0       	ldi	r25, 0x02	; 2
     188:	0c 94 d2 1b 	jmp	0x37a4	; 0x37a4 <puts>
     18c:	08 95       	ret

0000018e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     18e:	e6 e0       	ldi	r30, 0x06	; 6
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	aa e0       	ldi	r26, 0x0A	; 10
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	b1 83       	std	Z+1, r27	; 0x01
     198:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     19a:	13 82       	std	Z+3, r1	; 0x03
     19c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     19e:	ea ec       	ldi	r30, 0xCA	; 202
     1a0:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     1a2:	f0 93 05 03 	sts	0x0305, r31	; 0x800305 <pxEnd+0x1>
     1a6:	e0 93 04 03 	sts	0x0304, r30	; 0x800304 <pxEnd>
    pxEnd->xBlockSize = 0;
     1aa:	13 82       	std	Z+3, r1	; 0x03
     1ac:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     1ae:	11 82       	std	Z+1, r1	; 0x01
     1b0:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     1b2:	80 ec       	ldi	r24, 0xC0	; 192
     1b4:	99 e0       	ldi	r25, 0x09	; 9
     1b6:	13 96       	adiw	r26, 0x03	; 3
     1b8:	9c 93       	st	X, r25
     1ba:	8e 93       	st	-X, r24
     1bc:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     1be:	ed 93       	st	X+, r30
     1c0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1c2:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <xMinimumEverFreeBytesRemaining+0x1>
     1c6:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1ca:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <xFreeBytesRemaining+0x1>
     1ce:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e8       	ldi	r25, 0x80	; 128
     1d6:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <__data_end+0x1>
     1da:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <__data_end>
     1de:	08 95       	ret

000001e0 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     1e6:	a6 e0       	ldi	r26, 0x06	; 6
     1e8:	b3 e0       	ldi	r27, 0x03	; 3
     1ea:	01 c0       	rjmp	.+2      	; 0x1ee <prvInsertBlockIntoFreeList+0xe>
     1ec:	df 01       	movw	r26, r30
     1ee:	ed 91       	ld	r30, X+
     1f0:	fc 91       	ld	r31, X
     1f2:	11 97       	sbiw	r26, 0x01	; 1
     1f4:	ec 17       	cp	r30, r28
     1f6:	fd 07       	cpc	r31, r29
     1f8:	c8 f3       	brcs	.-14     	; 0x1ec <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     1fa:	12 96       	adiw	r26, 0x02	; 2
     1fc:	8d 91       	ld	r24, X+
     1fe:	9c 91       	ld	r25, X
     200:	13 97       	sbiw	r26, 0x03	; 3
     202:	9d 01       	movw	r18, r26
     204:	28 0f       	add	r18, r24
     206:	39 1f       	adc	r19, r25
     208:	c2 17       	cp	r28, r18
     20a:	d3 07       	cpc	r29, r19
     20c:	49 f4       	brne	.+18     	; 0x220 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     20e:	2a 81       	ldd	r18, Y+2	; 0x02
     210:	3b 81       	ldd	r19, Y+3	; 0x03
     212:	82 0f       	add	r24, r18
     214:	93 1f       	adc	r25, r19
     216:	13 96       	adiw	r26, 0x03	; 3
     218:	9c 93       	st	X, r25
     21a:	8e 93       	st	-X, r24
     21c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     21e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     220:	8a 81       	ldd	r24, Y+2	; 0x02
     222:	9b 81       	ldd	r25, Y+3	; 0x03
     224:	9e 01       	movw	r18, r28
     226:	28 0f       	add	r18, r24
     228:	39 1f       	adc	r19, r25
     22a:	e2 17       	cp	r30, r18
     22c:	f3 07       	cpc	r31, r19
     22e:	c1 f4       	brne	.+48     	; 0x260 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     230:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <pxEnd>
     234:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <pxEnd+0x1>
     238:	e2 17       	cp	r30, r18
     23a:	f3 07       	cpc	r31, r19
     23c:	71 f0       	breq	.+28     	; 0x25a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     23e:	22 81       	ldd	r18, Z+2	; 0x02
     240:	33 81       	ldd	r19, Z+3	; 0x03
     242:	82 0f       	add	r24, r18
     244:	93 1f       	adc	r25, r19
     246:	9b 83       	std	Y+3, r25	; 0x03
     248:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     24a:	ed 91       	ld	r30, X+
     24c:	fc 91       	ld	r31, X
     24e:	11 97       	sbiw	r26, 0x01	; 1
     250:	80 81       	ld	r24, Z
     252:	91 81       	ldd	r25, Z+1	; 0x01
     254:	99 83       	std	Y+1, r25	; 0x01
     256:	88 83       	st	Y, r24
     258:	05 c0       	rjmp	.+10     	; 0x264 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     25a:	39 83       	std	Y+1, r19	; 0x01
     25c:	28 83       	st	Y, r18
     25e:	02 c0       	rjmp	.+4      	; 0x264 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     260:	f9 83       	std	Y+1, r31	; 0x01
     262:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     264:	ca 17       	cp	r28, r26
     266:	db 07       	cpc	r29, r27
     268:	11 f0       	breq	.+4      	; 0x26e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     26a:	cd 93       	st	X+, r28
     26c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     282:	bf d7       	rcall	.+3966   	; 0x1202 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     284:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <pxEnd>
     288:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <pxEnd+0x1>
     28c:	89 2b       	or	r24, r25
     28e:	09 f4       	brne	.+2      	; 0x292 <pvPortMalloc+0x1e>
        {
            prvHeapInit();
     290:	7e df       	rcall	.-260    	; 0x18e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     292:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <__data_end>
     296:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <__data_end+0x1>
     29a:	80 23       	and	r24, r16
     29c:	91 23       	and	r25, r17
     29e:	89 2b       	or	r24, r25
     2a0:	09 f0       	breq	.+2      	; 0x2a4 <pvPortMalloc+0x30>
     2a2:	76 c0       	rjmp	.+236    	; 0x390 <pvPortMalloc+0x11c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2a4:	01 15       	cp	r16, r1
     2a6:	11 05       	cpc	r17, r1
     2a8:	49 f0       	breq	.+18     	; 0x2bc <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     2aa:	c8 01       	movw	r24, r16
     2ac:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2ae:	08 17       	cp	r16, r24
     2b0:	19 07       	cpc	r17, r25
     2b2:	18 f0       	brcs	.+6      	; 0x2ba <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     2b4:	00 e0       	ldi	r16, 0x00	; 0
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     2ba:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     2bc:	01 15       	cp	r16, r1
     2be:	11 05       	cpc	r17, r1
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <pvPortMalloc+0x50>
     2c2:	69 c0       	rjmp	.+210    	; 0x396 <pvPortMalloc+0x122>
     2c4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <xFreeBytesRemaining>
     2c8:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <xFreeBytesRemaining+0x1>
     2cc:	80 17       	cp	r24, r16
     2ce:	91 07       	cpc	r25, r17
     2d0:	08 f4       	brcc	.+2      	; 0x2d4 <pvPortMalloc+0x60>
     2d2:	64 c0       	rjmp	.+200    	; 0x39c <pvPortMalloc+0x128>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     2d4:	c0 91 06 03 	lds	r28, 0x0306	; 0x800306 <xStart>
     2d8:	d0 91 07 03 	lds	r29, 0x0307	; 0x800307 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     2dc:	e6 e0       	ldi	r30, 0x06	; 6
     2de:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     2e2:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     2e4:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	9b 81       	ldd	r25, Y+3	; 0x03
     2ea:	80 17       	cp	r24, r16
     2ec:	91 07       	cpc	r25, r17
     2ee:	20 f4       	brcc	.+8      	; 0x2f8 <pvPortMalloc+0x84>
     2f0:	88 81       	ld	r24, Y
     2f2:	99 81       	ldd	r25, Y+1	; 0x01
     2f4:	00 97       	sbiw	r24, 0x00	; 0
     2f6:	a9 f7       	brne	.-22     	; 0x2e2 <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     2f8:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <pxEnd>
     2fc:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <pxEnd+0x1>
     300:	c8 17       	cp	r28, r24
     302:	d9 07       	cpc	r29, r25
     304:	09 f4       	brne	.+2      	; 0x308 <pvPortMalloc+0x94>
     306:	4d c0       	rjmp	.+154    	; 0x3a2 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     308:	e0 80       	ld	r14, Z
     30a:	f1 80       	ldd	r15, Z+1	; 0x01
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	e8 0e       	add	r14, r24
     310:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     312:	88 81       	ld	r24, Y
     314:	99 81       	ldd	r25, Y+1	; 0x01
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     31a:	2a 81       	ldd	r18, Y+2	; 0x02
     31c:	3b 81       	ldd	r19, Y+3	; 0x03
     31e:	20 1b       	sub	r18, r16
     320:	31 0b       	sbc	r19, r17
     322:	29 30       	cpi	r18, 0x09	; 9
     324:	31 05       	cpc	r19, r1
     326:	48 f0       	brcs	.+18     	; 0x33a <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     328:	ce 01       	movw	r24, r28
     32a:	80 0f       	add	r24, r16
     32c:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     32e:	fc 01       	movw	r30, r24
     330:	33 83       	std	Z+3, r19	; 0x03
     332:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     334:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     336:	0a 83       	std	Y+2, r16	; 0x02
     338:	53 df       	rcall	.-346    	; 0x1e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <xFreeBytesRemaining>
     342:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <xFreeBytesRemaining+0x1>
     346:	82 1b       	sub	r24, r18
     348:	93 0b       	sbc	r25, r19
     34a:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <xFreeBytesRemaining+0x1>
     34e:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     352:	40 91 00 03 	lds	r20, 0x0300	; 0x800300 <xMinimumEverFreeBytesRemaining>
     356:	50 91 01 03 	lds	r21, 0x0301	; 0x800301 <xMinimumEverFreeBytesRemaining+0x1>
     35a:	84 17       	cp	r24, r20
     35c:	95 07       	cpc	r25, r21
     35e:	20 f4       	brcc	.+8      	; 0x368 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     360:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <xMinimumEverFreeBytesRemaining+0x1>
     364:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     368:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <__data_end>
     36c:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <__data_end+0x1>
     370:	28 2b       	or	r18, r24
     372:	39 2b       	or	r19, r25
     374:	3b 83       	std	Y+3, r19	; 0x03
     376:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     378:	19 82       	std	Y+1, r1	; 0x01
     37a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     37c:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <xNumberOfSuccessfulAllocations>
     380:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <xNumberOfSuccessfulAllocations+0x1>
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <xNumberOfSuccessfulAllocations+0x1>
     38a:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <xNumberOfSuccessfulAllocations>
     38e:	0b c0       	rjmp	.+22     	; 0x3a6 <pvPortMalloc+0x132>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     390:	e1 2c       	mov	r14, r1
     392:	f1 2c       	mov	r15, r1
     394:	08 c0       	rjmp	.+16     	; 0x3a6 <pvPortMalloc+0x132>
     396:	e1 2c       	mov	r14, r1
     398:	f1 2c       	mov	r15, r1
     39a:	05 c0       	rjmp	.+10     	; 0x3a6 <pvPortMalloc+0x132>
     39c:	e1 2c       	mov	r14, r1
     39e:	f1 2c       	mov	r15, r1
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <pvPortMalloc+0x132>
     3a2:	e1 2c       	mov	r14, r1
     3a4:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3a6:	0e 94 41 0a 	call	0x1482	; 0x1482 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     3aa:	e1 14       	cp	r14, r1
     3ac:	f1 04       	cpc	r15, r1
     3ae:	11 f4       	brne	.+4      	; 0x3b4 <pvPortMalloc+0x140>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     3b0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     3b4:	c7 01       	movw	r24, r14
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	08 95       	ret

000003c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     3cc:	00 97       	sbiw	r24, 0x00	; 0
     3ce:	89 f1       	breq	.+98     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     3d0:	ec 01       	movw	r28, r24
     3d2:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     3d4:	4a 81       	ldd	r20, Y+2	; 0x02
     3d6:	5b 81       	ldd	r21, Y+3	; 0x03
     3d8:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <__data_end>
     3dc:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <__data_end+0x1>
     3e0:	ba 01       	movw	r22, r20
     3e2:	62 23       	and	r22, r18
     3e4:	73 23       	and	r23, r19
     3e6:	67 2b       	or	r22, r23
     3e8:	21 f1       	breq	.+72     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     3ea:	68 81       	ld	r22, Y
     3ec:	79 81       	ldd	r23, Y+1	; 0x01
     3ee:	67 2b       	or	r22, r23
     3f0:	01 f5       	brne	.+64     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     3f2:	20 95       	com	r18
     3f4:	30 95       	com	r19
     3f6:	24 23       	and	r18, r20
     3f8:	35 23       	and	r19, r21
     3fa:	3b 83       	std	Y+3, r19	; 0x03
     3fc:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     3fe:	01 d7       	rcall	.+3586   	; 0x1202 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	9b 81       	ldd	r25, Y+3	; 0x03
     404:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <xFreeBytesRemaining>
     408:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <xFreeBytesRemaining+0x1>
     40c:	82 0f       	add	r24, r18
     40e:	93 1f       	adc	r25, r19
     410:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <xFreeBytesRemaining+0x1>
     414:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     418:	ce 01       	movw	r24, r28
     41a:	e2 de       	rcall	.-572    	; 0x1e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     41c:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <xNumberOfSuccessfulFrees>
     420:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <xNumberOfSuccessfulFrees+0x1>
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <xNumberOfSuccessfulFrees+0x1>
     42a:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     42e:	0e 94 41 0a 	call	0x1482	; 0x1482 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	08 95       	ret

0000043c <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     43c:	fc 01       	movw	r30, r24
     43e:	03 96       	adiw	r24, 0x03	; 3
     440:	92 83       	std	Z+2, r25	; 0x02
     442:	81 83       	std	Z+1, r24	; 0x01
     444:	4f ef       	ldi	r20, 0xFF	; 255
     446:	5f ef       	ldi	r21, 0xFF	; 255
     448:	ba 01       	movw	r22, r20
     44a:	43 83       	std	Z+3, r20	; 0x03
     44c:	54 83       	std	Z+4, r21	; 0x04
     44e:	65 83       	std	Z+5, r22	; 0x05
     450:	76 83       	std	Z+6, r23	; 0x06
     452:	90 87       	std	Z+8, r25	; 0x08
     454:	87 83       	std	Z+7, r24	; 0x07
     456:	92 87       	std	Z+10, r25	; 0x0a
     458:	81 87       	std	Z+9, r24	; 0x09
     45a:	10 82       	st	Z, r1
     45c:	08 95       	ret

0000045e <vListInitialiseItem>:
     45e:	fc 01       	movw	r30, r24
     460:	13 86       	std	Z+11, r1	; 0x0b
     462:	12 86       	std	Z+10, r1	; 0x0a
     464:	08 95       	ret

00000466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     470:	08 81       	ld	r16, Y
     472:	19 81       	ldd	r17, Y+1	; 0x01
     474:	2a 81       	ldd	r18, Y+2	; 0x02
     476:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     478:	0f 3f       	cpi	r16, 0xFF	; 255
     47a:	4f ef       	ldi	r20, 0xFF	; 255
     47c:	14 07       	cpc	r17, r20
     47e:	24 07       	cpc	r18, r20
     480:	34 07       	cpc	r19, r20
     482:	21 f4       	brne	.+8      	; 0x48c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     484:	fc 01       	movw	r30, r24
     486:	a1 85       	ldd	r26, Z+9	; 0x09
     488:	b2 85       	ldd	r27, Z+10	; 0x0a
     48a:	11 c0       	rjmp	.+34     	; 0x4ae <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     48c:	dc 01       	movw	r26, r24
     48e:	13 96       	adiw	r26, 0x03	; 3
     490:	01 c0       	rjmp	.+2      	; 0x494 <vListInsert+0x2e>
     492:	df 01       	movw	r26, r30
     494:	14 96       	adiw	r26, 0x04	; 4
     496:	ed 91       	ld	r30, X+
     498:	fc 91       	ld	r31, X
     49a:	15 97       	sbiw	r26, 0x05	; 5
     49c:	40 81       	ld	r20, Z
     49e:	51 81       	ldd	r21, Z+1	; 0x01
     4a0:	62 81       	ldd	r22, Z+2	; 0x02
     4a2:	73 81       	ldd	r23, Z+3	; 0x03
     4a4:	04 17       	cp	r16, r20
     4a6:	15 07       	cpc	r17, r21
     4a8:	26 07       	cpc	r18, r22
     4aa:	37 07       	cpc	r19, r23
     4ac:	90 f7       	brcc	.-28     	; 0x492 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     4ae:	14 96       	adiw	r26, 0x04	; 4
     4b0:	ed 91       	ld	r30, X+
     4b2:	fc 91       	ld	r31, X
     4b4:	15 97       	sbiw	r26, 0x05	; 5
     4b6:	fd 83       	std	Y+5, r31	; 0x05
     4b8:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     4ba:	d7 83       	std	Z+7, r29	; 0x07
     4bc:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     4be:	bf 83       	std	Y+7, r27	; 0x07
     4c0:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     4c2:	15 96       	adiw	r26, 0x05	; 5
     4c4:	dc 93       	st	X, r29
     4c6:	ce 93       	st	-X, r28
     4c8:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     4ca:	9b 87       	std	Y+11, r25	; 0x0b
     4cc:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     4ce:	fc 01       	movw	r30, r24
     4d0:	20 81       	ld	r18, Z
     4d2:	2f 5f       	subi	r18, 0xFF	; 255
     4d4:	20 83       	st	Z, r18
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	08 95       	ret

000004e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     4e6:	a2 85       	ldd	r26, Z+10	; 0x0a
     4e8:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4ea:	c4 81       	ldd	r28, Z+4	; 0x04
     4ec:	d5 81       	ldd	r29, Z+5	; 0x05
     4ee:	86 81       	ldd	r24, Z+6	; 0x06
     4f0:	97 81       	ldd	r25, Z+7	; 0x07
     4f2:	9f 83       	std	Y+7, r25	; 0x07
     4f4:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4f6:	c6 81       	ldd	r28, Z+6	; 0x06
     4f8:	d7 81       	ldd	r29, Z+7	; 0x07
     4fa:	84 81       	ldd	r24, Z+4	; 0x04
     4fc:	95 81       	ldd	r25, Z+5	; 0x05
     4fe:	9d 83       	std	Y+5, r25	; 0x05
     500:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     502:	11 96       	adiw	r26, 0x01	; 1
     504:	8d 91       	ld	r24, X+
     506:	9c 91       	ld	r25, X
     508:	12 97       	sbiw	r26, 0x02	; 2
     50a:	e8 17       	cp	r30, r24
     50c:	f9 07       	cpc	r31, r25
     50e:	31 f4       	brne	.+12     	; 0x51c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     510:	86 81       	ldd	r24, Z+6	; 0x06
     512:	97 81       	ldd	r25, Z+7	; 0x07
     514:	12 96       	adiw	r26, 0x02	; 2
     516:	9c 93       	st	X, r25
     518:	8e 93       	st	-X, r24
     51a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     51c:	13 86       	std	Z+11, r1	; 0x0b
     51e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     520:	8c 91       	ld	r24, X
     522:	81 50       	subi	r24, 0x01	; 1
     524:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     526:	8c 91       	ld	r24, X
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     52e:	a8 95       	wdr
     530:	90 ec       	ldi	r25, 0xC0	; 192
     532:	88 e1       	ldi	r24, 0x18	; 24
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	a8 95       	wdr
     53a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     53e:	0f be       	out	0x3f, r0	; 63
     540:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     544:	08 95       	ret

00000546 <pxPortInitialiseStack>:
     546:	fc 01       	movw	r30, r24
     548:	60 83       	st	Z, r22
     54a:	31 97       	sbiw	r30, 0x01	; 1
     54c:	70 83       	st	Z, r23
     54e:	31 97       	sbiw	r30, 0x01	; 1
     550:	10 82       	st	Z, r1
     552:	31 97       	sbiw	r30, 0x01	; 1
     554:	10 82       	st	Z, r1
     556:	31 97       	sbiw	r30, 0x01	; 1
     558:	20 e8       	ldi	r18, 0x80	; 128
     55a:	20 83       	st	Z, r18
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	10 82       	st	Z, r1
     560:	31 97       	sbiw	r30, 0x01	; 1
     562:	10 82       	st	Z, r1
     564:	31 97       	sbiw	r30, 0x01	; 1
     566:	10 82       	st	Z, r1
     568:	77 97       	sbiw	r30, 0x17	; 23
     56a:	40 83       	st	Z, r20
     56c:	31 97       	sbiw	r30, 0x01	; 1
     56e:	50 83       	st	Z, r21
     570:	86 97       	sbiw	r24, 0x26	; 38
     572:	08 95       	ret

00000574 <xPortStartScheduler>:
     574:	dc df       	rcall	.-72     	; 0x52e <prvSetupTimerInterrupt>
     576:	a0 91 8d 0d 	lds	r26, 0x0D8D	; 0x800d8d <pxCurrentTCB>
     57a:	b0 91 8e 0d 	lds	r27, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
     57e:	cd 91       	ld	r28, X+
     580:	cd bf       	out	0x3d, r28	; 61
     582:	dd 91       	ld	r29, X+
     584:	de bf       	out	0x3e, r29	; 62
     586:	ff 91       	pop	r31
     588:	ef 91       	pop	r30
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	bf 91       	pop	r27
     590:	af 91       	pop	r26
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	7f 91       	pop	r23
     598:	6f 91       	pop	r22
     59a:	5f 91       	pop	r21
     59c:	4f 91       	pop	r20
     59e:	3f 91       	pop	r19
     5a0:	2f 91       	pop	r18
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	bf 90       	pop	r11
     5b0:	af 90       	pop	r10
     5b2:	9f 90       	pop	r9
     5b4:	8f 90       	pop	r8
     5b6:	7f 90       	pop	r7
     5b8:	6f 90       	pop	r6
     5ba:	5f 90       	pop	r5
     5bc:	4f 90       	pop	r4
     5be:	3f 90       	pop	r3
     5c0:	2f 90       	pop	r2
     5c2:	1f 90       	pop	r1
     5c4:	0f 90       	pop	r0
     5c6:	0c be       	out	0x3c, r0	; 60
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	0f 90       	pop	r0
     5d2:	08 95       	ret
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	08 95       	ret

000005d8 <vPortYield>:
     5d8:	0f 92       	push	r0
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	0f 92       	push	r0
     5e0:	0b b6       	in	r0, 0x3b	; 59
     5e2:	0f 92       	push	r0
     5e4:	0c b6       	in	r0, 0x3c	; 60
     5e6:	0f 92       	push	r0
     5e8:	1f 92       	push	r1
     5ea:	11 24       	eor	r1, r1
     5ec:	2f 92       	push	r2
     5ee:	3f 92       	push	r3
     5f0:	4f 92       	push	r4
     5f2:	5f 92       	push	r5
     5f4:	6f 92       	push	r6
     5f6:	7f 92       	push	r7
     5f8:	8f 92       	push	r8
     5fa:	9f 92       	push	r9
     5fc:	af 92       	push	r10
     5fe:	bf 92       	push	r11
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	2f 93       	push	r18
     60e:	3f 93       	push	r19
     610:	4f 93       	push	r20
     612:	5f 93       	push	r21
     614:	6f 93       	push	r22
     616:	7f 93       	push	r23
     618:	8f 93       	push	r24
     61a:	9f 93       	push	r25
     61c:	af 93       	push	r26
     61e:	bf 93       	push	r27
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ef 93       	push	r30
     626:	ff 93       	push	r31
     628:	a0 91 8d 0d 	lds	r26, 0x0D8D	; 0x800d8d <pxCurrentTCB>
     62c:	b0 91 8e 0d 	lds	r27, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
     630:	0d b6       	in	r0, 0x3d	; 61
     632:	0d 92       	st	X+, r0
     634:	0e b6       	in	r0, 0x3e	; 62
     636:	0d 92       	st	X+, r0
     638:	0e 94 9d 0b 	call	0x173a	; 0x173a <vTaskSwitchContext>
     63c:	a0 91 8d 0d 	lds	r26, 0x0D8D	; 0x800d8d <pxCurrentTCB>
     640:	b0 91 8e 0d 	lds	r27, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
     644:	cd 91       	ld	r28, X+
     646:	cd bf       	out	0x3d, r28	; 61
     648:	dd 91       	ld	r29, X+
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	ff 91       	pop	r31
     64e:	ef 91       	pop	r30
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	bf 91       	pop	r27
     656:	af 91       	pop	r26
     658:	9f 91       	pop	r25
     65a:	8f 91       	pop	r24
     65c:	7f 91       	pop	r23
     65e:	6f 91       	pop	r22
     660:	5f 91       	pop	r21
     662:	4f 91       	pop	r20
     664:	3f 91       	pop	r19
     666:	2f 91       	pop	r18
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	9f 90       	pop	r9
     67a:	8f 90       	pop	r8
     67c:	7f 90       	pop	r7
     67e:	6f 90       	pop	r6
     680:	5f 90       	pop	r5
     682:	4f 90       	pop	r4
     684:	3f 90       	pop	r3
     686:	2f 90       	pop	r2
     688:	1f 90       	pop	r1
     68a:	0f 90       	pop	r0
     68c:	0c be       	out	0x3c, r0	; 60
     68e:	0f 90       	pop	r0
     690:	0b be       	out	0x3b, r0	; 59
     692:	0f 90       	pop	r0
     694:	0f be       	out	0x3f, r0	; 63
     696:	0f 90       	pop	r0
     698:	08 95       	ret

0000069a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     69a:	0f 92       	push	r0
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	0f 92       	push	r0
     6a2:	0b b6       	in	r0, 0x3b	; 59
     6a4:	0f 92       	push	r0
     6a6:	0c b6       	in	r0, 0x3c	; 60
     6a8:	0f 92       	push	r0
     6aa:	1f 92       	push	r1
     6ac:	11 24       	eor	r1, r1
     6ae:	2f 92       	push	r2
     6b0:	3f 92       	push	r3
     6b2:	4f 92       	push	r4
     6b4:	5f 92       	push	r5
     6b6:	6f 92       	push	r6
     6b8:	7f 92       	push	r7
     6ba:	8f 92       	push	r8
     6bc:	9f 92       	push	r9
     6be:	af 92       	push	r10
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	2f 93       	push	r18
     6d0:	3f 93       	push	r19
     6d2:	4f 93       	push	r20
     6d4:	5f 93       	push	r21
     6d6:	6f 93       	push	r22
     6d8:	7f 93       	push	r23
     6da:	8f 93       	push	r24
     6dc:	9f 93       	push	r25
     6de:	af 93       	push	r26
     6e0:	bf 93       	push	r27
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	ef 93       	push	r30
     6e8:	ff 93       	push	r31
     6ea:	a0 91 8d 0d 	lds	r26, 0x0D8D	; 0x800d8d <pxCurrentTCB>
     6ee:	b0 91 8e 0d 	lds	r27, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
     6f2:	0d b6       	in	r0, 0x3d	; 61
     6f4:	0d 92       	st	X+, r0
     6f6:	0e b6       	in	r0, 0x3e	; 62
     6f8:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     6fa:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     6fc:	96 d5       	rcall	.+2860   	; 0x122a <xTaskIncrementTick>
     6fe:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     700:	0e 94 9d 0b 	call	0x173a	; 0x173a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     704:	a0 91 8d 0d 	lds	r26, 0x0D8D	; 0x800d8d <pxCurrentTCB>
     708:	b0 91 8e 0d 	lds	r27, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
     70c:	cd 91       	ld	r28, X+
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	dd 91       	ld	r29, X+
     712:	de bf       	out	0x3e, r29	; 62
     714:	ff 91       	pop	r31
     716:	ef 91       	pop	r30
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	bf 91       	pop	r27
     71e:	af 91       	pop	r26
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	7f 91       	pop	r23
     726:	6f 91       	pop	r22
     728:	5f 91       	pop	r21
     72a:	4f 91       	pop	r20
     72c:	3f 91       	pop	r19
     72e:	2f 91       	pop	r18
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	9f 90       	pop	r9
     742:	8f 90       	pop	r8
     744:	7f 90       	pop	r7
     746:	6f 90       	pop	r6
     748:	5f 90       	pop	r5
     74a:	4f 90       	pop	r4
     74c:	3f 90       	pop	r3
     74e:	2f 90       	pop	r2
     750:	1f 90       	pop	r1
     752:	0f 90       	pop	r0
     754:	0c be       	out	0x3c, r0	; 60
     756:	0f 90       	pop	r0
     758:	0b be       	out	0x3b, r0	; 59
     75a:	0f 90       	pop	r0
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     760:	08 95       	ret

00000762 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     762:	9b df       	rcall	.-202    	; 0x69a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     764:	18 95       	reti

00000766 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	0f 92       	push	r0
     76c:	fc 01       	movw	r30, r24
     76e:	86 8d       	ldd	r24, Z+30	; 0x1e
     770:	81 11       	cpse	r24, r1
     772:	02 c0       	rjmp	.+4      	; 0x778 <prvIsQueueEmpty+0x12>
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	01 c0       	rjmp	.+2      	; 0x77a <prvIsQueueEmpty+0x14>
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	08 95       	ret

00000780 <prvIsQueueFull>:
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	0f 92       	push	r0
     786:	fc 01       	movw	r30, r24
     788:	26 8d       	ldd	r18, Z+30	; 0x1e
     78a:	87 8d       	ldd	r24, Z+31	; 0x1f
     78c:	28 13       	cpse	r18, r24
     78e:	02 c0       	rjmp	.+4      	; 0x794 <prvIsQueueFull+0x14>
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	01 c0       	rjmp	.+2      	; 0x796 <prvIsQueueFull+0x16>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	08 95       	ret

0000079c <prvCopyDataToQueue>:
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ec 01       	movw	r28, r24
     7a6:	04 2f       	mov	r16, r20
     7a8:	1e 8d       	ldd	r17, Y+30	; 0x1e
     7aa:	48 a1       	ldd	r20, Y+32	; 0x20
     7ac:	41 11       	cpse	r20, r1
     7ae:	0c c0       	rjmp	.+24     	; 0x7c8 <prvCopyDataToQueue+0x2c>
     7b0:	88 81       	ld	r24, Y
     7b2:	99 81       	ldd	r25, Y+1	; 0x01
     7b4:	89 2b       	or	r24, r25
     7b6:	09 f0       	breq	.+2      	; 0x7ba <prvCopyDataToQueue+0x1e>
     7b8:	42 c0       	rjmp	.+132    	; 0x83e <prvCopyDataToQueue+0xa2>
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	9d 81       	ldd	r25, Y+5	; 0x05
     7be:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <xTaskPriorityDisinherit>
     7c2:	1d 82       	std	Y+5, r1	; 0x05
     7c4:	1c 82       	std	Y+4, r1	; 0x04
     7c6:	42 c0       	rjmp	.+132    	; 0x84c <prvCopyDataToQueue+0xb0>
     7c8:	01 11       	cpse	r16, r1
     7ca:	17 c0       	rjmp	.+46     	; 0x7fa <prvCopyDataToQueue+0x5e>
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	8a 81       	ldd	r24, Y+2	; 0x02
     7d0:	9b 81       	ldd	r25, Y+3	; 0x03
     7d2:	0e 94 af 1b 	call	0x375e	; 0x375e <memcpy>
     7d6:	28 a1       	ldd	r18, Y+32	; 0x20
     7d8:	8a 81       	ldd	r24, Y+2	; 0x02
     7da:	9b 81       	ldd	r25, Y+3	; 0x03
     7dc:	82 0f       	add	r24, r18
     7de:	91 1d       	adc	r25, r1
     7e0:	9b 83       	std	Y+3, r25	; 0x03
     7e2:	8a 83       	std	Y+2, r24	; 0x02
     7e4:	2c 81       	ldd	r18, Y+4	; 0x04
     7e6:	3d 81       	ldd	r19, Y+5	; 0x05
     7e8:	82 17       	cp	r24, r18
     7ea:	93 07       	cpc	r25, r19
     7ec:	50 f1       	brcs	.+84     	; 0x842 <prvCopyDataToQueue+0xa6>
     7ee:	88 81       	ld	r24, Y
     7f0:	99 81       	ldd	r25, Y+1	; 0x01
     7f2:	9b 83       	std	Y+3, r25	; 0x03
     7f4:	8a 83       	std	Y+2, r24	; 0x02
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	29 c0       	rjmp	.+82     	; 0x84c <prvCopyDataToQueue+0xb0>
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	8e 81       	ldd	r24, Y+6	; 0x06
     7fe:	9f 81       	ldd	r25, Y+7	; 0x07
     800:	0e 94 af 1b 	call	0x375e	; 0x375e <memcpy>
     804:	88 a1       	ldd	r24, Y+32	; 0x20
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	91 95       	neg	r25
     80a:	81 95       	neg	r24
     80c:	91 09       	sbc	r25, r1
     80e:	2e 81       	ldd	r18, Y+6	; 0x06
     810:	3f 81       	ldd	r19, Y+7	; 0x07
     812:	28 0f       	add	r18, r24
     814:	39 1f       	adc	r19, r25
     816:	3f 83       	std	Y+7, r19	; 0x07
     818:	2e 83       	std	Y+6, r18	; 0x06
     81a:	48 81       	ld	r20, Y
     81c:	59 81       	ldd	r21, Y+1	; 0x01
     81e:	24 17       	cp	r18, r20
     820:	35 07       	cpc	r19, r21
     822:	30 f4       	brcc	.+12     	; 0x830 <prvCopyDataToQueue+0x94>
     824:	2c 81       	ldd	r18, Y+4	; 0x04
     826:	3d 81       	ldd	r19, Y+5	; 0x05
     828:	82 0f       	add	r24, r18
     82a:	93 1f       	adc	r25, r19
     82c:	9f 83       	std	Y+7, r25	; 0x07
     82e:	8e 83       	std	Y+6, r24	; 0x06
     830:	02 30       	cpi	r16, 0x02	; 2
     832:	49 f4       	brne	.+18     	; 0x846 <prvCopyDataToQueue+0xaa>
     834:	11 23       	and	r17, r17
     836:	49 f0       	breq	.+18     	; 0x84a <prvCopyDataToQueue+0xae>
     838:	11 50       	subi	r17, 0x01	; 1
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	07 c0       	rjmp	.+14     	; 0x84c <prvCopyDataToQueue+0xb0>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	05 c0       	rjmp	.+10     	; 0x84c <prvCopyDataToQueue+0xb0>
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	03 c0       	rjmp	.+6      	; 0x84c <prvCopyDataToQueue+0xb0>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	01 c0       	rjmp	.+2      	; 0x84c <prvCopyDataToQueue+0xb0>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	1f 5f       	subi	r17, 0xFF	; 255
     84e:	1e 8f       	std	Y+30, r17	; 0x1e
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <prvCopyDataFromQueue>:
     85a:	fc 01       	movw	r30, r24
     85c:	40 a1       	ldd	r20, Z+32	; 0x20
     85e:	44 23       	and	r20, r20
     860:	a9 f0       	breq	.+42     	; 0x88c <prvCopyDataFromQueue+0x32>
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	26 81       	ldd	r18, Z+6	; 0x06
     866:	37 81       	ldd	r19, Z+7	; 0x07
     868:	24 0f       	add	r18, r20
     86a:	35 1f       	adc	r19, r21
     86c:	37 83       	std	Z+7, r19	; 0x07
     86e:	26 83       	std	Z+6, r18	; 0x06
     870:	84 81       	ldd	r24, Z+4	; 0x04
     872:	95 81       	ldd	r25, Z+5	; 0x05
     874:	28 17       	cp	r18, r24
     876:	39 07       	cpc	r19, r25
     878:	20 f0       	brcs	.+8      	; 0x882 <prvCopyDataFromQueue+0x28>
     87a:	80 81       	ld	r24, Z
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	97 83       	std	Z+7, r25	; 0x07
     880:	86 83       	std	Z+6, r24	; 0x06
     882:	cb 01       	movw	r24, r22
     884:	66 81       	ldd	r22, Z+6	; 0x06
     886:	77 81       	ldd	r23, Z+7	; 0x07
     888:	0c 94 af 1b 	jmp	0x375e	; 0x375e <memcpy>
     88c:	08 95       	ret

0000088e <prvUnlockQueue>:
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	0f 92       	push	r0
     89c:	1a a1       	ldd	r17, Y+34	; 0x22
     89e:	0b c0       	rjmp	.+22     	; 0x8b6 <prvUnlockQueue+0x28>
     8a0:	8b 89       	ldd	r24, Y+19	; 0x13
     8a2:	88 23       	and	r24, r24
     8a4:	51 f0       	breq	.+20     	; 0x8ba <prvUnlockQueue+0x2c>
     8a6:	ce 01       	movw	r24, r28
     8a8:	43 96       	adiw	r24, 0x13	; 19
     8aa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <xTaskRemoveFromEventList>
     8ae:	81 11       	cpse	r24, r1
     8b0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vTaskMissedYield>
     8b4:	11 50       	subi	r17, 0x01	; 1
     8b6:	11 16       	cp	r1, r17
     8b8:	9c f3       	brlt	.-26     	; 0x8a0 <prvUnlockQueue+0x12>
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	8a a3       	std	Y+34, r24	; 0x22
     8be:	0f 90       	pop	r0
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	0f 92       	push	r0
     8c8:	19 a1       	ldd	r17, Y+33	; 0x21
     8ca:	0a c0       	rjmp	.+20     	; 0x8e0 <prvUnlockQueue+0x52>
     8cc:	88 85       	ldd	r24, Y+8	; 0x08
     8ce:	88 23       	and	r24, r24
     8d0:	49 f0       	breq	.+18     	; 0x8e4 <prvUnlockQueue+0x56>
     8d2:	ce 01       	movw	r24, r28
     8d4:	08 96       	adiw	r24, 0x08	; 8
     8d6:	ee d7       	rcall	.+4060   	; 0x18b4 <xTaskRemoveFromEventList>
     8d8:	81 11       	cpse	r24, r1
     8da:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <vTaskMissedYield>
     8de:	11 50       	subi	r17, 0x01	; 1
     8e0:	11 16       	cp	r1, r17
     8e2:	a4 f3       	brlt	.-24     	; 0x8cc <prvUnlockQueue+0x3e>
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	89 a3       	std	Y+33, r24	; 0x21
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	08 95       	ret

000008f4 <xQueueGenericReset>:
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	ec 01       	movw	r28, r24
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	0f 92       	push	r0
     900:	e8 81       	ld	r30, Y
     902:	f9 81       	ldd	r31, Y+1	; 0x01
     904:	8f 8d       	ldd	r24, Y+31	; 0x1f
     906:	28 a1       	ldd	r18, Y+32	; 0x20
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	82 9f       	mul	r24, r18
     90e:	a0 01       	movw	r20, r0
     910:	83 9f       	mul	r24, r19
     912:	50 0d       	add	r21, r0
     914:	92 9f       	mul	r25, r18
     916:	50 0d       	add	r21, r0
     918:	11 24       	eor	r1, r1
     91a:	4e 0f       	add	r20, r30
     91c:	5f 1f       	adc	r21, r31
     91e:	5d 83       	std	Y+5, r21	; 0x05
     920:	4c 83       	std	Y+4, r20	; 0x04
     922:	1e 8e       	std	Y+30, r1	; 0x1e
     924:	fb 83       	std	Y+3, r31	; 0x03
     926:	ea 83       	std	Y+2, r30	; 0x02
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	28 9f       	mul	r18, r24
     92c:	a0 01       	movw	r20, r0
     92e:	29 9f       	mul	r18, r25
     930:	50 0d       	add	r21, r0
     932:	38 9f       	mul	r19, r24
     934:	50 0d       	add	r21, r0
     936:	11 24       	eor	r1, r1
     938:	cf 01       	movw	r24, r30
     93a:	84 0f       	add	r24, r20
     93c:	95 1f       	adc	r25, r21
     93e:	9f 83       	std	Y+7, r25	; 0x07
     940:	8e 83       	std	Y+6, r24	; 0x06
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	89 a3       	std	Y+33, r24	; 0x21
     946:	8a a3       	std	Y+34, r24	; 0x22
     948:	61 11       	cpse	r22, r1
     94a:	0a c0       	rjmp	.+20     	; 0x960 <xQueueGenericReset+0x6c>
     94c:	88 85       	ldd	r24, Y+8	; 0x08
     94e:	88 23       	and	r24, r24
     950:	69 f0       	breq	.+26     	; 0x96c <xQueueGenericReset+0x78>
     952:	ce 01       	movw	r24, r28
     954:	08 96       	adiw	r24, 0x08	; 8
     956:	ae d7       	rcall	.+3932   	; 0x18b4 <xTaskRemoveFromEventList>
     958:	88 23       	and	r24, r24
     95a:	41 f0       	breq	.+16     	; 0x96c <xQueueGenericReset+0x78>
     95c:	3d de       	rcall	.-902    	; 0x5d8 <vPortYield>
     95e:	06 c0       	rjmp	.+12     	; 0x96c <xQueueGenericReset+0x78>
     960:	ce 01       	movw	r24, r28
     962:	08 96       	adiw	r24, 0x08	; 8
     964:	6b dd       	rcall	.-1322   	; 0x43c <vListInitialise>
     966:	ce 01       	movw	r24, r28
     968:	43 96       	adiw	r24, 0x13	; 19
     96a:	68 dd       	rcall	.-1328   	; 0x43c <vListInitialise>
     96c:	0f 90       	pop	r0
     96e:	0f be       	out	0x3f, r0	; 63
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <prvInitialiseNewQueue>:
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	f8 01       	movw	r30, r16
     97e:	61 11       	cpse	r22, r1
     980:	03 c0       	rjmp	.+6      	; 0x988 <prvInitialiseNewQueue+0x10>
     982:	11 83       	std	Z+1, r17	; 0x01
     984:	00 83       	st	Z, r16
     986:	02 c0       	rjmp	.+4      	; 0x98c <prvInitialiseNewQueue+0x14>
     988:	51 83       	std	Z+1, r21	; 0x01
     98a:	40 83       	st	Z, r20
     98c:	87 8f       	std	Z+31, r24	; 0x1f
     98e:	60 a3       	std	Z+32, r22	; 0x20
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	cf 01       	movw	r24, r30
     994:	af df       	rcall	.-162    	; 0x8f4 <xQueueGenericReset>
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	08 95       	ret

0000099c <xQueueGenericCreate>:
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	f8 2e       	mov	r15, r24
     9ac:	e6 2e       	mov	r14, r22
     9ae:	d4 2e       	mov	r13, r20
     9b0:	86 9f       	mul	r24, r22
     9b2:	c0 01       	movw	r24, r0
     9b4:	11 24       	eor	r1, r1
     9b6:	83 96       	adiw	r24, 0x23	; 35
     9b8:	5d dc       	rcall	.-1862   	; 0x274 <pvPortMalloc>
     9ba:	ec 01       	movw	r28, r24
     9bc:	00 97       	sbiw	r24, 0x00	; 0
     9be:	41 f0       	breq	.+16     	; 0x9d0 <xQueueGenericCreate+0x34>
     9c0:	8c 01       	movw	r16, r24
     9c2:	2d 2d       	mov	r18, r13
     9c4:	ac 01       	movw	r20, r24
     9c6:	4d 5d       	subi	r20, 0xDD	; 221
     9c8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ca:	6e 2d       	mov	r22, r14
     9cc:	8f 2d       	mov	r24, r15
     9ce:	d4 df       	rcall	.-88     	; 0x978 <prvInitialiseNewQueue>
     9d0:	ce 01       	movw	r24, r28
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	08 95       	ret

000009e2 <xQueueGenericSend>:
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	29 97       	sbiw	r28, 0x09	; 9
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	7c 01       	movw	r14, r24
     a04:	6b 01       	movw	r12, r22
     a06:	2e 83       	std	Y+6, r18	; 0x06
     a08:	3f 83       	std	Y+7, r19	; 0x07
     a0a:	48 87       	std	Y+8, r20	; 0x08
     a0c:	59 87       	std	Y+9, r21	; 0x09
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	0f 92       	push	r0
     a16:	f7 01       	movw	r30, r14
     a18:	96 8d       	ldd	r25, Z+30	; 0x1e
     a1a:	87 8d       	ldd	r24, Z+31	; 0x1f
     a1c:	98 17       	cp	r25, r24
     a1e:	10 f0       	brcs	.+4      	; 0xa24 <xQueueGenericSend+0x42>
     a20:	02 30       	cpi	r16, 0x02	; 2
     a22:	a9 f4       	brne	.+42     	; 0xa4e <xQueueGenericSend+0x6c>
     a24:	40 2f       	mov	r20, r16
     a26:	b6 01       	movw	r22, r12
     a28:	c7 01       	movw	r24, r14
     a2a:	b8 de       	rcall	.-656    	; 0x79c <prvCopyDataToQueue>
     a2c:	f7 01       	movw	r30, r14
     a2e:	93 89       	ldd	r25, Z+19	; 0x13
     a30:	99 23       	and	r25, r25
     a32:	39 f0       	breq	.+14     	; 0xa42 <xQueueGenericSend+0x60>
     a34:	c7 01       	movw	r24, r14
     a36:	43 96       	adiw	r24, 0x13	; 19
     a38:	3d d7       	rcall	.+3706   	; 0x18b4 <xTaskRemoveFromEventList>
     a3a:	88 23       	and	r24, r24
     a3c:	21 f0       	breq	.+8      	; 0xa46 <xQueueGenericSend+0x64>
     a3e:	cc dd       	rcall	.-1128   	; 0x5d8 <vPortYield>
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <xQueueGenericSend+0x64>
     a42:	81 11       	cpse	r24, r1
     a44:	c9 dd       	rcall	.-1134   	; 0x5d8 <vPortYield>
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	46 c0       	rjmp	.+140    	; 0xada <xQueueGenericSend+0xf8>
     a4e:	8e 81       	ldd	r24, Y+6	; 0x06
     a50:	9f 81       	ldd	r25, Y+7	; 0x07
     a52:	a8 85       	ldd	r26, Y+8	; 0x08
     a54:	b9 85       	ldd	r27, Y+9	; 0x09
     a56:	89 2b       	or	r24, r25
     a58:	8a 2b       	or	r24, r26
     a5a:	8b 2b       	or	r24, r27
     a5c:	21 f4       	brne	.+8      	; 0xa66 <xQueueGenericSend+0x84>
     a5e:	0f 90       	pop	r0
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	3a c0       	rjmp	.+116    	; 0xada <xQueueGenericSend+0xf8>
     a66:	11 11       	cpse	r17, r1
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <xQueueGenericSend+0x90>
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	d1 d7       	rcall	.+4002   	; 0x1a12 <vTaskInternalSetTimeOutState>
     a70:	11 e0       	ldi	r17, 0x01	; 1
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	c5 d3       	rcall	.+1930   	; 0x1202 <vTaskSuspendAll>
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	0f 92       	push	r0
     a7e:	f7 01       	movw	r30, r14
     a80:	81 a1       	ldd	r24, Z+33	; 0x21
     a82:	8f 3f       	cpi	r24, 0xFF	; 255
     a84:	09 f4       	brne	.+2      	; 0xa88 <xQueueGenericSend+0xa6>
     a86:	11 a2       	std	Z+33, r1	; 0x21
     a88:	f7 01       	movw	r30, r14
     a8a:	82 a1       	ldd	r24, Z+34	; 0x22
     a8c:	8f 3f       	cpi	r24, 0xFF	; 255
     a8e:	09 f4       	brne	.+2      	; 0xa92 <xQueueGenericSend+0xb0>
     a90:	12 a2       	std	Z+34, r1	; 0x22
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	be 01       	movw	r22, r28
     a98:	6a 5f       	subi	r22, 0xFA	; 250
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	ce 01       	movw	r24, r28
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	c9 d7       	rcall	.+3986   	; 0x1a34 <xTaskCheckForTimeOut>
     aa2:	81 11       	cpse	r24, r1
     aa4:	16 c0       	rjmp	.+44     	; 0xad2 <xQueueGenericSend+0xf0>
     aa6:	c7 01       	movw	r24, r14
     aa8:	6b de       	rcall	.-810    	; 0x780 <prvIsQueueFull>
     aaa:	88 23       	and	r24, r24
     aac:	71 f0       	breq	.+28     	; 0xaca <xQueueGenericSend+0xe8>
     aae:	4e 81       	ldd	r20, Y+6	; 0x06
     ab0:	5f 81       	ldd	r21, Y+7	; 0x07
     ab2:	68 85       	ldd	r22, Y+8	; 0x08
     ab4:	79 85       	ldd	r23, Y+9	; 0x09
     ab6:	c7 01       	movw	r24, r14
     ab8:	08 96       	adiw	r24, 0x08	; 8
     aba:	a3 d6       	rcall	.+3398   	; 0x1802 <vTaskPlaceOnEventList>
     abc:	c7 01       	movw	r24, r14
     abe:	e7 de       	rcall	.-562    	; 0x88e <prvUnlockQueue>
     ac0:	e0 d4       	rcall	.+2496   	; 0x1482 <xTaskResumeAll>
     ac2:	81 11       	cpse	r24, r1
     ac4:	a5 cf       	rjmp	.-182    	; 0xa10 <xQueueGenericSend+0x2e>
     ac6:	88 dd       	rcall	.-1264   	; 0x5d8 <vPortYield>
     ac8:	a3 cf       	rjmp	.-186    	; 0xa10 <xQueueGenericSend+0x2e>
     aca:	c7 01       	movw	r24, r14
     acc:	e0 de       	rcall	.-576    	; 0x88e <prvUnlockQueue>
     ace:	d9 d4       	rcall	.+2482   	; 0x1482 <xTaskResumeAll>
     ad0:	9f cf       	rjmp	.-194    	; 0xa10 <xQueueGenericSend+0x2e>
     ad2:	c7 01       	movw	r24, r14
     ad4:	dc de       	rcall	.-584    	; 0x88e <prvUnlockQueue>
     ad6:	d5 d4       	rcall	.+2474   	; 0x1482 <xTaskResumeAll>
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	29 96       	adiw	r28, 0x09	; 9
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	df 90       	pop	r13
     af4:	cf 90       	pop	r12
     af6:	08 95       	ret

00000af8 <prvInitialiseMutex>:
     af8:	0f 93       	push	r16
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	69 f0       	breq	.+26     	; 0xb18 <prvInitialiseMutex+0x20>
     afe:	fc 01       	movw	r30, r24
     b00:	15 82       	std	Z+5, r1	; 0x05
     b02:	14 82       	std	Z+4, r1	; 0x04
     b04:	11 82       	std	Z+1, r1	; 0x01
     b06:	10 82       	st	Z, r1
     b08:	16 82       	std	Z+6, r1	; 0x06
     b0a:	00 e0       	ldi	r16, 0x00	; 0
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	a9 01       	movw	r20, r18
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	65 df       	rcall	.-310    	; 0x9e2 <xQueueGenericSend>
     b18:	0f 91       	pop	r16
     b1a:	08 95       	ret

00000b1c <xQueueCreateMutex>:
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	48 2f       	mov	r20, r24
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	3a df       	rcall	.-396    	; 0x99c <xQueueGenericCreate>
     b28:	ec 01       	movw	r28, r24
     b2a:	e6 df       	rcall	.-52     	; 0xaf8 <prvInitialiseMutex>
     b2c:	ce 01       	movw	r24, r28
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <xQueueGenericSendFromISR>:
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	8a 01       	movw	r16, r20
     b42:	fc 01       	movw	r30, r24
     b44:	56 8d       	ldd	r21, Z+30	; 0x1e
     b46:	37 8d       	ldd	r19, Z+31	; 0x1f
     b48:	53 17       	cp	r21, r19
     b4a:	10 f0       	brcs	.+4      	; 0xb50 <xQueueGenericSendFromISR+0x1c>
     b4c:	22 30       	cpi	r18, 0x02	; 2
     b4e:	f1 f4       	brne	.+60     	; 0xb8c <xQueueGenericSendFromISR+0x58>
     b50:	42 2f       	mov	r20, r18
     b52:	78 01       	movw	r14, r16
     b54:	ec 01       	movw	r28, r24
     b56:	1a a1       	ldd	r17, Y+34	; 0x22
     b58:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b5a:	ce 01       	movw	r24, r28
     b5c:	1f de       	rcall	.-962    	; 0x79c <prvCopyDataToQueue>
     b5e:	1f 3f       	cpi	r17, 0xFF	; 255
     b60:	79 f4       	brne	.+30     	; 0xb80 <xQueueGenericSendFromISR+0x4c>
     b62:	8b 89       	ldd	r24, Y+19	; 0x13
     b64:	88 23       	and	r24, r24
     b66:	a1 f0       	breq	.+40     	; 0xb90 <xQueueGenericSendFromISR+0x5c>
     b68:	ce 01       	movw	r24, r28
     b6a:	43 96       	adiw	r24, 0x13	; 19
     b6c:	a3 d6       	rcall	.+3398   	; 0x18b4 <xTaskRemoveFromEventList>
     b6e:	88 23       	and	r24, r24
     b70:	89 f0       	breq	.+34     	; 0xb94 <xQueueGenericSendFromISR+0x60>
     b72:	e1 14       	cp	r14, r1
     b74:	f1 04       	cpc	r15, r1
     b76:	81 f0       	breq	.+32     	; 0xb98 <xQueueGenericSendFromISR+0x64>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	f7 01       	movw	r30, r14
     b7c:	80 83       	st	Z, r24
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <xQueueGenericSendFromISR+0x66>
     b80:	ff 24       	eor	r15, r15
     b82:	f3 94       	inc	r15
     b84:	f1 0e       	add	r15, r17
     b86:	fa a2       	std	Y+34, r15	; 0x22
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	07 c0       	rjmp	.+14     	; 0xb9a <xQueueGenericSendFromISR+0x66>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <xQueueGenericSendFromISR+0x66>
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	03 c0       	rjmp	.+6      	; 0xb9a <xQueueGenericSendFromISR+0x66>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <xQueueGenericSendFromISR+0x66>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	08 95       	ret

00000ba8 <xQueueReceive>:
     ba8:	cf 92       	push	r12
     baa:	df 92       	push	r13
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	29 97       	sbiw	r28, 0x09	; 9
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	8c 01       	movw	r16, r24
     bca:	6b 01       	movw	r12, r22
     bcc:	2e 83       	std	Y+6, r18	; 0x06
     bce:	3f 83       	std	Y+7, r19	; 0x07
     bd0:	48 87       	std	Y+8, r20	; 0x08
     bd2:	59 87       	std	Y+9, r21	; 0x09
     bd4:	e1 2c       	mov	r14, r1
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	0f 92       	push	r0
     bdc:	f8 01       	movw	r30, r16
     bde:	f6 8c       	ldd	r15, Z+30	; 0x1e
     be0:	ff 20       	and	r15, r15
     be2:	91 f0       	breq	.+36     	; 0xc08 <xQueueReceive+0x60>
     be4:	b6 01       	movw	r22, r12
     be6:	c8 01       	movw	r24, r16
     be8:	38 de       	rcall	.-912    	; 0x85a <prvCopyDataFromQueue>
     bea:	fa 94       	dec	r15
     bec:	f8 01       	movw	r30, r16
     bee:	f6 8e       	std	Z+30, r15	; 0x1e
     bf0:	80 85       	ldd	r24, Z+8	; 0x08
     bf2:	88 23       	and	r24, r24
     bf4:	29 f0       	breq	.+10     	; 0xc00 <xQueueReceive+0x58>
     bf6:	c8 01       	movw	r24, r16
     bf8:	08 96       	adiw	r24, 0x08	; 8
     bfa:	5c d6       	rcall	.+3256   	; 0x18b4 <xTaskRemoveFromEventList>
     bfc:	81 11       	cpse	r24, r1
     bfe:	ec dc       	rcall	.-1576   	; 0x5d8 <vPortYield>
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	4c c0       	rjmp	.+152    	; 0xca0 <xQueueReceive+0xf8>
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	9f 81       	ldd	r25, Y+7	; 0x07
     c0c:	a8 85       	ldd	r26, Y+8	; 0x08
     c0e:	b9 85       	ldd	r27, Y+9	; 0x09
     c10:	89 2b       	or	r24, r25
     c12:	8a 2b       	or	r24, r26
     c14:	8b 2b       	or	r24, r27
     c16:	21 f4       	brne	.+8      	; 0xc20 <xQueueReceive+0x78>
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	40 c0       	rjmp	.+128    	; 0xca0 <xQueueReceive+0xf8>
     c20:	e1 10       	cpse	r14, r1
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <xQueueReceive+0x86>
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	f4 d6       	rcall	.+3560   	; 0x1a12 <vTaskInternalSetTimeOutState>
     c2a:	ee 24       	eor	r14, r14
     c2c:	e3 94       	inc	r14
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	e7 d2       	rcall	.+1486   	; 0x1202 <vTaskSuspendAll>
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	0f 92       	push	r0
     c3a:	f8 01       	movw	r30, r16
     c3c:	81 a1       	ldd	r24, Z+33	; 0x21
     c3e:	8f 3f       	cpi	r24, 0xFF	; 255
     c40:	09 f4       	brne	.+2      	; 0xc44 <xQueueReceive+0x9c>
     c42:	11 a2       	std	Z+33, r1	; 0x21
     c44:	f8 01       	movw	r30, r16
     c46:	82 a1       	ldd	r24, Z+34	; 0x22
     c48:	8f 3f       	cpi	r24, 0xFF	; 255
     c4a:	09 f4       	brne	.+2      	; 0xc4e <xQueueReceive+0xa6>
     c4c:	12 a2       	std	Z+34, r1	; 0x22
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	be 01       	movw	r22, r28
     c54:	6a 5f       	subi	r22, 0xFA	; 250
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	ce 01       	movw	r24, r28
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	eb d6       	rcall	.+3542   	; 0x1a34 <xTaskCheckForTimeOut>
     c5e:	81 11       	cpse	r24, r1
     c60:	16 c0       	rjmp	.+44     	; 0xc8e <xQueueReceive+0xe6>
     c62:	c8 01       	movw	r24, r16
     c64:	80 dd       	rcall	.-1280   	; 0x766 <prvIsQueueEmpty>
     c66:	88 23       	and	r24, r24
     c68:	71 f0       	breq	.+28     	; 0xc86 <xQueueReceive+0xde>
     c6a:	4e 81       	ldd	r20, Y+6	; 0x06
     c6c:	5f 81       	ldd	r21, Y+7	; 0x07
     c6e:	68 85       	ldd	r22, Y+8	; 0x08
     c70:	79 85       	ldd	r23, Y+9	; 0x09
     c72:	c8 01       	movw	r24, r16
     c74:	43 96       	adiw	r24, 0x13	; 19
     c76:	c5 d5       	rcall	.+2954   	; 0x1802 <vTaskPlaceOnEventList>
     c78:	c8 01       	movw	r24, r16
     c7a:	09 de       	rcall	.-1006   	; 0x88e <prvUnlockQueue>
     c7c:	02 d4       	rcall	.+2052   	; 0x1482 <xTaskResumeAll>
     c7e:	81 11       	cpse	r24, r1
     c80:	aa cf       	rjmp	.-172    	; 0xbd6 <xQueueReceive+0x2e>
     c82:	aa dc       	rcall	.-1708   	; 0x5d8 <vPortYield>
     c84:	a8 cf       	rjmp	.-176    	; 0xbd6 <xQueueReceive+0x2e>
     c86:	c8 01       	movw	r24, r16
     c88:	02 de       	rcall	.-1020   	; 0x88e <prvUnlockQueue>
     c8a:	fb d3       	rcall	.+2038   	; 0x1482 <xTaskResumeAll>
     c8c:	a4 cf       	rjmp	.-184    	; 0xbd6 <xQueueReceive+0x2e>
     c8e:	c8 01       	movw	r24, r16
     c90:	fe dd       	rcall	.-1028   	; 0x88e <prvUnlockQueue>
     c92:	f7 d3       	rcall	.+2030   	; 0x1482 <xTaskResumeAll>
     c94:	c8 01       	movw	r24, r16
     c96:	67 dd       	rcall	.-1330   	; 0x766 <prvIsQueueEmpty>
     c98:	88 23       	and	r24, r24
     c9a:	09 f4       	brne	.+2      	; 0xc9e <xQueueReceive+0xf6>
     c9c:	9c cf       	rjmp	.-200    	; 0xbd6 <xQueueReceive+0x2e>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	29 96       	adiw	r28, 0x09	; 9
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	08 95       	ret

00000cbe <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	0f 92       	push	r0
     cca:	89 a1       	ldd	r24, Y+33	; 0x21
     ccc:	8f 3f       	cpi	r24, 0xFF	; 255
     cce:	09 f4       	brne	.+2      	; 0xcd2 <vQueueWaitForMessageRestricted+0x14>
     cd0:	19 a2       	std	Y+33, r1	; 0x21
     cd2:	8a a1       	ldd	r24, Y+34	; 0x22
     cd4:	8f 3f       	cpi	r24, 0xFF	; 255
     cd6:	09 f4       	brne	.+2      	; 0xcda <vQueueWaitForMessageRestricted+0x1c>
     cd8:	1a a2       	std	Y+34, r1	; 0x22
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     cde:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ce0:	81 11       	cpse	r24, r1
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     ce4:	ce 01       	movw	r24, r28
     ce6:	43 96       	adiw	r24, 0x13	; 19
     ce8:	a3 d5       	rcall	.+2886   	; 0x1830 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     cea:	ce 01       	movw	r24, r28
     cec:	d0 dd       	rcall	.-1120   	; 0x88e <prvUnlockQueue>
    }
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <prvResetNextTaskUnblockTime>:
     cf4:	e0 91 07 0d 	lds	r30, 0x0D07	; 0x800d07 <pxDelayedTaskList>
     cf8:	f0 91 08 0d 	lds	r31, 0x0D08	; 0x800d08 <pxDelayedTaskList+0x1>
     cfc:	80 81       	ld	r24, Z
     cfe:	81 11       	cpse	r24, r1
     d00:	0c c0       	rjmp	.+24     	; 0xd1a <prvResetNextTaskUnblockTime+0x26>
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	9f ef       	ldi	r25, 0xFF	; 255
     d06:	dc 01       	movw	r26, r24
     d08:	80 93 d1 0c 	sts	0x0CD1, r24	; 0x800cd1 <xNextTaskUnblockTime>
     d0c:	90 93 d2 0c 	sts	0x0CD2, r25	; 0x800cd2 <xNextTaskUnblockTime+0x1>
     d10:	a0 93 d3 0c 	sts	0x0CD3, r26	; 0x800cd3 <xNextTaskUnblockTime+0x2>
     d14:	b0 93 d4 0c 	sts	0x0CD4, r27	; 0x800cd4 <xNextTaskUnblockTime+0x3>
     d18:	08 95       	ret
     d1a:	e0 91 07 0d 	lds	r30, 0x0D07	; 0x800d07 <pxDelayedTaskList>
     d1e:	f0 91 08 0d 	lds	r31, 0x0D08	; 0x800d08 <pxDelayedTaskList+0x1>
     d22:	07 80       	ldd	r0, Z+7	; 0x07
     d24:	f0 85       	ldd	r31, Z+8	; 0x08
     d26:	e0 2d       	mov	r30, r0
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
     d2c:	a2 81       	ldd	r26, Z+2	; 0x02
     d2e:	b3 81       	ldd	r27, Z+3	; 0x03
     d30:	80 93 d1 0c 	sts	0x0CD1, r24	; 0x800cd1 <xNextTaskUnblockTime>
     d34:	90 93 d2 0c 	sts	0x0CD2, r25	; 0x800cd2 <xNextTaskUnblockTime+0x1>
     d38:	a0 93 d3 0c 	sts	0x0CD3, r26	; 0x800cd3 <xNextTaskUnblockTime+0x2>
     d3c:	b0 93 d4 0c 	sts	0x0CD4, r27	; 0x800cd4 <xNextTaskUnblockTime+0x3>
     d40:	08 95       	ret

00000d42 <prvDeleteTCB>:
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
     d48:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d4c:	3b db       	rcall	.-2442   	; 0x3c4 <vPortFree>
     d4e:	ce 01       	movw	r24, r28
     d50:	39 db       	rcall	.-2446   	; 0x3c4 <vPortFree>
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <prvInitialiseNewTask>:
     d58:	4f 92       	push	r4
     d5a:	5f 92       	push	r5
     d5c:	6f 92       	push	r6
     d5e:	7f 92       	push	r7
     d60:	8f 92       	push	r8
     d62:	9f 92       	push	r9
     d64:	af 92       	push	r10
     d66:	bf 92       	push	r11
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	2c 01       	movw	r4, r24
     d78:	5b 01       	movw	r10, r22
     d7a:	4a 01       	movw	r8, r20
     d7c:	39 01       	movw	r6, r18
     d7e:	e6 01       	movw	r28, r12
     d80:	65 ea       	ldi	r22, 0xA5	; 165
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d86:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d88:	0e 94 b8 1b 	call	0x3770	; 0x3770 <memset>
     d8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	82 1a       	sub	r8, r18
     d94:	91 08       	sbc	r9, r1
     d96:	88 0e       	add	r8, r24
     d98:	99 1e       	adc	r9, r25
     d9a:	a1 14       	cp	r10, r1
     d9c:	b1 04       	cpc	r11, r1
     d9e:	89 f4       	brne	.+34     	; 0xdc2 <prvInitialiseNewTask+0x6a>
     da0:	15 c0       	rjmp	.+42     	; 0xdcc <prvInitialiseNewTask+0x74>
     da2:	82 2f       	mov	r24, r18
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	f5 01       	movw	r30, r10
     da8:	e8 0f       	add	r30, r24
     daa:	f9 1f       	adc	r31, r25
     dac:	30 81       	ld	r19, Z
     dae:	de 01       	movw	r26, r28
     db0:	a8 0f       	add	r26, r24
     db2:	b9 1f       	adc	r27, r25
     db4:	5d 96       	adiw	r26, 0x1d	; 29
     db6:	3c 93       	st	X, r19
     db8:	80 81       	ld	r24, Z
     dba:	88 23       	and	r24, r24
     dbc:	29 f0       	breq	.+10     	; 0xdc8 <prvInitialiseNewTask+0x70>
     dbe:	2f 5f       	subi	r18, 0xFF	; 255
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <prvInitialiseNewTask+0x6c>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	20 31       	cpi	r18, 0x10	; 16
     dc6:	68 f3       	brcs	.-38     	; 0xda2 <prvInitialiseNewTask+0x4a>
     dc8:	1c a6       	std	Y+44, r1	; 0x2c
     dca:	01 c0       	rjmp	.+2      	; 0xdce <prvInitialiseNewTask+0x76>
     dcc:	1d 8e       	std	Y+29, r1	; 0x1d
     dce:	0a 30       	cpi	r16, 0x0A	; 10
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <prvInitialiseNewTask+0x7c>
     dd2:	09 e0       	ldi	r16, 0x09	; 9
     dd4:	0a 8f       	std	Y+26, r16	; 0x1a
     dd6:	0d a7       	std	Y+45, r16	; 0x2d
     dd8:	1e a6       	std	Y+46, r1	; 0x2e
     dda:	ce 01       	movw	r24, r28
     ddc:	02 96       	adiw	r24, 0x02	; 2
     dde:	3f db       	rcall	.-2434   	; 0x45e <vListInitialiseItem>
     de0:	ce 01       	movw	r24, r28
     de2:	0e 96       	adiw	r24, 0x0e	; 14
     de4:	3c db       	rcall	.-2440   	; 0x45e <vListInitialiseItem>
     de6:	db 87       	std	Y+11, r29	; 0x0b
     de8:	ca 87       	std	Y+10, r28	; 0x0a
     dea:	8a e0       	ldi	r24, 0x0A	; 10
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	a0 e0       	ldi	r26, 0x00	; 0
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	80 1b       	sub	r24, r16
     df4:	91 09       	sbc	r25, r1
     df6:	a1 09       	sbc	r26, r1
     df8:	b1 09       	sbc	r27, r1
     dfa:	8e 87       	std	Y+14, r24	; 0x0e
     dfc:	9f 87       	std	Y+15, r25	; 0x0f
     dfe:	a8 8b       	std	Y+16, r26	; 0x10
     e00:	b9 8b       	std	Y+17, r27	; 0x11
     e02:	df 8b       	std	Y+23, r29	; 0x17
     e04:	ce 8b       	std	Y+22, r28	; 0x16
     e06:	84 e0       	ldi	r24, 0x04	; 4
     e08:	fe 01       	movw	r30, r28
     e0a:	bf 96       	adiw	r30, 0x2f	; 47
     e0c:	df 01       	movw	r26, r30
     e0e:	1d 92       	st	X+, r1
     e10:	8a 95       	dec	r24
     e12:	e9 f7       	brne	.-6      	; 0xe0e <prvInitialiseNewTask+0xb6>
     e14:	1b aa       	std	Y+51, r1	; 0x33
     e16:	a3 01       	movw	r20, r6
     e18:	b2 01       	movw	r22, r4
     e1a:	c4 01       	movw	r24, r8
     e1c:	94 db       	rcall	.-2264   	; 0x546 <pxPortInitialiseStack>
     e1e:	99 83       	std	Y+1, r25	; 0x01
     e20:	88 83       	st	Y, r24
     e22:	e1 14       	cp	r14, r1
     e24:	f1 04       	cpc	r15, r1
     e26:	19 f0       	breq	.+6      	; 0xe2e <prvInitialiseNewTask+0xd6>
     e28:	f7 01       	movw	r30, r14
     e2a:	d1 83       	std	Z+1, r29	; 0x01
     e2c:	c0 83       	st	Z, r28
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	9f 90       	pop	r9
     e42:	8f 90       	pop	r8
     e44:	7f 90       	pop	r7
     e46:	6f 90       	pop	r6
     e48:	5f 90       	pop	r5
     e4a:	4f 90       	pop	r4
     e4c:	08 95       	ret

00000e4e <prvInitialiseTaskLists>:
     e4e:	cf 93       	push	r28
     e50:	c0 e0       	ldi	r28, 0x00	; 0
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <prvInitialiseTaskLists+0x16>
     e54:	2b e0       	ldi	r18, 0x0B	; 11
     e56:	c2 9f       	mul	r28, r18
     e58:	c0 01       	movw	r24, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	81 5e       	subi	r24, 0xE1	; 225
     e5e:	92 4f       	sbci	r25, 0xF2	; 242
     e60:	ed da       	rcall	.-2598   	; 0x43c <vListInitialise>
     e62:	cf 5f       	subi	r28, 0xFF	; 255
     e64:	ca 30       	cpi	r28, 0x0A	; 10
     e66:	b0 f3       	brcs	.-20     	; 0xe54 <prvInitialiseTaskLists+0x6>
     e68:	84 e1       	ldi	r24, 0x14	; 20
     e6a:	9d e0       	ldi	r25, 0x0D	; 13
     e6c:	e7 da       	rcall	.-2610   	; 0x43c <vListInitialise>
     e6e:	89 e0       	ldi	r24, 0x09	; 9
     e70:	9d e0       	ldi	r25, 0x0D	; 13
     e72:	e4 da       	rcall	.-2616   	; 0x43c <vListInitialise>
     e74:	8a ef       	ldi	r24, 0xFA	; 250
     e76:	9c e0       	ldi	r25, 0x0C	; 12
     e78:	e1 da       	rcall	.-2622   	; 0x43c <vListInitialise>
     e7a:	8f ee       	ldi	r24, 0xEF	; 239
     e7c:	9c e0       	ldi	r25, 0x0C	; 12
     e7e:	de da       	rcall	.-2628   	; 0x43c <vListInitialise>
     e80:	83 ee       	ldi	r24, 0xE3	; 227
     e82:	9c e0       	ldi	r25, 0x0C	; 12
     e84:	db da       	rcall	.-2634   	; 0x43c <vListInitialise>
     e86:	84 e1       	ldi	r24, 0x14	; 20
     e88:	9d e0       	ldi	r25, 0x0D	; 13
     e8a:	90 93 08 0d 	sts	0x0D08, r25	; 0x800d08 <pxDelayedTaskList+0x1>
     e8e:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <pxDelayedTaskList>
     e92:	89 e0       	ldi	r24, 0x09	; 9
     e94:	9d e0       	ldi	r25, 0x0D	; 13
     e96:	90 93 06 0d 	sts	0x0D06, r25	; 0x800d06 <pxOverflowDelayedTaskList+0x1>
     e9a:	80 93 05 0d 	sts	0x0D05, r24	; 0x800d05 <pxOverflowDelayedTaskList>
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <prvAddNewTaskToReadyList>:
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	0f 92       	push	r0
     eae:	80 91 e2 0c 	lds	r24, 0x0CE2	; 0x800ce2 <uxCurrentNumberOfTasks>
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	80 93 e2 0c 	sts	0x0CE2, r24	; 0x800ce2 <uxCurrentNumberOfTasks>
     eb8:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <pxCurrentTCB>
     ebc:	90 91 8e 0d 	lds	r25, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
     ec0:	89 2b       	or	r24, r25
     ec2:	51 f4       	brne	.+20     	; 0xed8 <prvAddNewTaskToReadyList+0x36>
     ec4:	d0 93 8e 0d 	sts	0x0D8E, r29	; 0x800d8e <pxCurrentTCB+0x1>
     ec8:	c0 93 8d 0d 	sts	0x0D8D, r28	; 0x800d8d <pxCurrentTCB>
     ecc:	80 91 e2 0c 	lds	r24, 0x0CE2	; 0x800ce2 <uxCurrentNumberOfTasks>
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 f4       	brne	.+36     	; 0xef8 <prvAddNewTaskToReadyList+0x56>
     ed4:	bc df       	rcall	.-136    	; 0xe4e <prvInitialiseTaskLists>
     ed6:	10 c0       	rjmp	.+32     	; 0xef8 <prvAddNewTaskToReadyList+0x56>
     ed8:	80 91 dc 0c 	lds	r24, 0x0CDC	; 0x800cdc <xSchedulerRunning>
     edc:	81 11       	cpse	r24, r1
     ede:	0c c0       	rjmp	.+24     	; 0xef8 <prvAddNewTaskToReadyList+0x56>
     ee0:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxCurrentTCB>
     ee4:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
     ee8:	92 8d       	ldd	r25, Z+26	; 0x1a
     eea:	8a 8d       	ldd	r24, Y+26	; 0x1a
     eec:	89 17       	cp	r24, r25
     eee:	20 f0       	brcs	.+8      	; 0xef8 <prvAddNewTaskToReadyList+0x56>
     ef0:	d0 93 8e 0d 	sts	0x0D8E, r29	; 0x800d8e <pxCurrentTCB+0x1>
     ef4:	c0 93 8d 0d 	sts	0x0D8D, r28	; 0x800d8d <pxCurrentTCB>
     ef8:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <uxTaskNumber>
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	80 93 d5 0c 	sts	0x0CD5, r24	; 0x800cd5 <uxTaskNumber>
     f02:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f04:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <uxTopReadyPriority>
     f08:	8e 17       	cp	r24, r30
     f0a:	10 f4       	brcc	.+4      	; 0xf10 <prvAddNewTaskToReadyList+0x6e>
     f0c:	e0 93 dd 0c 	sts	0x0CDD, r30	; 0x800cdd <uxTopReadyPriority>
     f10:	8b e0       	ldi	r24, 0x0B	; 11
     f12:	8e 9f       	mul	r24, r30
     f14:	f0 01       	movw	r30, r0
     f16:	11 24       	eor	r1, r1
     f18:	e1 5e       	subi	r30, 0xE1	; 225
     f1a:	f2 4f       	sbci	r31, 0xF2	; 242
     f1c:	01 80       	ldd	r0, Z+1	; 0x01
     f1e:	f2 81       	ldd	r31, Z+2	; 0x02
     f20:	e0 2d       	mov	r30, r0
     f22:	ff 83       	std	Y+7, r31	; 0x07
     f24:	ee 83       	std	Y+6, r30	; 0x06
     f26:	26 81       	ldd	r18, Z+6	; 0x06
     f28:	37 81       	ldd	r19, Z+7	; 0x07
     f2a:	39 87       	std	Y+9, r19	; 0x09
     f2c:	28 87       	std	Y+8, r18	; 0x08
     f2e:	a6 81       	ldd	r26, Z+6	; 0x06
     f30:	b7 81       	ldd	r27, Z+7	; 0x07
     f32:	9e 01       	movw	r18, r28
     f34:	2e 5f       	subi	r18, 0xFE	; 254
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	15 96       	adiw	r26, 0x05	; 5
     f3a:	3c 93       	st	X, r19
     f3c:	2e 93       	st	-X, r18
     f3e:	14 97       	sbiw	r26, 0x04	; 4
     f40:	37 83       	std	Z+7, r19	; 0x07
     f42:	26 83       	std	Z+6, r18	; 0x06
     f44:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f46:	8e 9f       	mul	r24, r30
     f48:	f0 01       	movw	r30, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	e1 5e       	subi	r30, 0xE1	; 225
     f4e:	f2 4f       	sbci	r31, 0xF2	; 242
     f50:	fd 87       	std	Y+13, r31	; 0x0d
     f52:	ec 87       	std	Y+12, r30	; 0x0c
     f54:	80 81       	ld	r24, Z
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	80 83       	st	Z, r24
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	80 91 dc 0c 	lds	r24, 0x0CDC	; 0x800cdc <xSchedulerRunning>
     f62:	88 23       	and	r24, r24
     f64:	49 f0       	breq	.+18     	; 0xf78 <prvAddNewTaskToReadyList+0xd6>
     f66:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxCurrentTCB>
     f6a:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
     f6e:	92 8d       	ldd	r25, Z+26	; 0x1a
     f70:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f72:	98 17       	cp	r25, r24
     f74:	08 f4       	brcc	.+2      	; 0xf78 <prvAddNewTaskToReadyList+0xd6>
     f76:	30 db       	rcall	.-2464   	; 0x5d8 <vPortYield>
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	08 95       	ret

00000f7e <prvCheckTasksWaitingTermination>:
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	1a c0       	rjmp	.+52     	; 0xfb8 <prvCheckTasksWaitingTermination+0x3a>
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	0f 92       	push	r0
     f8a:	e0 91 f6 0c 	lds	r30, 0x0CF6	; 0x800cf6 <xTasksWaitingTermination+0x7>
     f8e:	f0 91 f7 0c 	lds	r31, 0x0CF7	; 0x800cf7 <xTasksWaitingTermination+0x8>
     f92:	c0 85       	ldd	r28, Z+8	; 0x08
     f94:	d1 85       	ldd	r29, Z+9	; 0x09
     f96:	ce 01       	movw	r24, r28
     f98:	02 96       	adiw	r24, 0x02	; 2
     f9a:	a2 da       	rcall	.-2748   	; 0x4e0 <uxListRemove>
     f9c:	80 91 e2 0c 	lds	r24, 0x0CE2	; 0x800ce2 <uxCurrentNumberOfTasks>
     fa0:	81 50       	subi	r24, 0x01	; 1
     fa2:	80 93 e2 0c 	sts	0x0CE2, r24	; 0x800ce2 <uxCurrentNumberOfTasks>
     fa6:	80 91 ee 0c 	lds	r24, 0x0CEE	; 0x800cee <uxDeletedTasksWaitingCleanUp>
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	80 93 ee 0c 	sts	0x0CEE, r24	; 0x800cee <uxDeletedTasksWaitingCleanUp>
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	ce 01       	movw	r24, r28
     fb6:	c5 de       	rcall	.-630    	; 0xd42 <prvDeleteTCB>
     fb8:	80 91 ee 0c 	lds	r24, 0x0CEE	; 0x800cee <uxDeletedTasksWaitingCleanUp>
     fbc:	81 11       	cpse	r24, r1
     fbe:	e2 cf       	rjmp	.-60     	; 0xf84 <prvCheckTasksWaitingTermination+0x6>
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <prvAddCurrentTaskToDelayedList>:
     fc6:	8f 92       	push	r8
     fc8:	9f 92       	push	r9
     fca:	af 92       	push	r10
     fcc:	bf 92       	push	r11
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	6b 01       	movw	r12, r22
     fdc:	7c 01       	movw	r14, r24
     fde:	c4 2f       	mov	r28, r20
     fe0:	80 90 de 0c 	lds	r8, 0x0CDE	; 0x800cde <xTickCount>
     fe4:	90 90 df 0c 	lds	r9, 0x0CDF	; 0x800cdf <xTickCount+0x1>
     fe8:	a0 90 e0 0c 	lds	r10, 0x0CE0	; 0x800ce0 <xTickCount+0x2>
     fec:	b0 90 e1 0c 	lds	r11, 0x0CE1	; 0x800ce1 <xTickCount+0x3>
     ff0:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <pxCurrentTCB>
     ff4:	90 91 8e 0d 	lds	r25, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
     ff8:	02 96       	adiw	r24, 0x02	; 2
     ffa:	72 da       	rcall	.-2844   	; 0x4e0 <uxListRemove>
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	c8 16       	cp	r12, r24
    1000:	d8 06       	cpc	r13, r24
    1002:	e8 06       	cpc	r14, r24
    1004:	f8 06       	cpc	r15, r24
    1006:	b1 f5       	brne	.+108    	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    1008:	cc 23       	and	r28, r28
    100a:	a1 f1       	breq	.+104    	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    100c:	e3 ee       	ldi	r30, 0xE3	; 227
    100e:	fc e0       	ldi	r31, 0x0C	; 12
    1010:	a1 81       	ldd	r26, Z+1	; 0x01
    1012:	b2 81       	ldd	r27, Z+2	; 0x02
    1014:	c0 91 8d 0d 	lds	r28, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1018:	d0 91 8e 0d 	lds	r29, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    101c:	bf 83       	std	Y+7, r27	; 0x07
    101e:	ae 83       	std	Y+6, r26	; 0x06
    1020:	c0 91 8d 0d 	lds	r28, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1024:	d0 91 8e 0d 	lds	r29, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1028:	16 96       	adiw	r26, 0x06	; 6
    102a:	8d 91       	ld	r24, X+
    102c:	9c 91       	ld	r25, X
    102e:	17 97       	sbiw	r26, 0x07	; 7
    1030:	99 87       	std	Y+9, r25	; 0x09
    1032:	88 87       	std	Y+8, r24	; 0x08
    1034:	16 96       	adiw	r26, 0x06	; 6
    1036:	cd 91       	ld	r28, X+
    1038:	dc 91       	ld	r29, X
    103a:	17 97       	sbiw	r26, 0x07	; 7
    103c:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1040:	90 91 8e 0d 	lds	r25, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1044:	02 96       	adiw	r24, 0x02	; 2
    1046:	9d 83       	std	Y+5, r25	; 0x05
    1048:	8c 83       	std	Y+4, r24	; 0x04
    104a:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    104e:	90 91 8e 0d 	lds	r25, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1052:	02 96       	adiw	r24, 0x02	; 2
    1054:	17 96       	adiw	r26, 0x07	; 7
    1056:	9c 93       	st	X, r25
    1058:	8e 93       	st	-X, r24
    105a:	16 97       	sbiw	r26, 0x06	; 6
    105c:	a0 91 8d 0d 	lds	r26, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1060:	b0 91 8e 0d 	lds	r27, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1064:	1d 96       	adiw	r26, 0x0d	; 13
    1066:	fc 93       	st	X, r31
    1068:	ee 93       	st	-X, r30
    106a:	1c 97       	sbiw	r26, 0x0c	; 12
    106c:	80 81       	ld	r24, Z
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	80 83       	st	Z, r24
    1072:	3d c0       	rjmp	.+122    	; 0x10ee <__EEPROM_REGION_LENGTH__+0xee>
    1074:	c8 0c       	add	r12, r8
    1076:	d9 1c       	adc	r13, r9
    1078:	ea 1c       	adc	r14, r10
    107a:	fb 1c       	adc	r15, r11
    107c:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1080:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1084:	c2 82       	std	Z+2, r12	; 0x02
    1086:	d3 82       	std	Z+3, r13	; 0x03
    1088:	e4 82       	std	Z+4, r14	; 0x04
    108a:	f5 82       	std	Z+5, r15	; 0x05
    108c:	c8 14       	cp	r12, r8
    108e:	d9 04       	cpc	r13, r9
    1090:	ea 04       	cpc	r14, r10
    1092:	fb 04       	cpc	r15, r11
    1094:	60 f4       	brcc	.+24     	; 0x10ae <__EEPROM_REGION_LENGTH__+0xae>
    1096:	60 91 8d 0d 	lds	r22, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    109a:	70 91 8e 0d 	lds	r23, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    109e:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <pxOverflowDelayedTaskList>
    10a2:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <pxOverflowDelayedTaskList+0x1>
    10a6:	6e 5f       	subi	r22, 0xFE	; 254
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	dd d9       	rcall	.-3142   	; 0x466 <vListInsert>
    10ac:	20 c0       	rjmp	.+64     	; 0x10ee <__EEPROM_REGION_LENGTH__+0xee>
    10ae:	60 91 8d 0d 	lds	r22, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    10b2:	70 91 8e 0d 	lds	r23, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    10b6:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <pxDelayedTaskList>
    10ba:	90 91 08 0d 	lds	r25, 0x0D08	; 0x800d08 <pxDelayedTaskList+0x1>
    10be:	6e 5f       	subi	r22, 0xFE	; 254
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	d1 d9       	rcall	.-3166   	; 0x466 <vListInsert>
    10c4:	80 91 d1 0c 	lds	r24, 0x0CD1	; 0x800cd1 <xNextTaskUnblockTime>
    10c8:	90 91 d2 0c 	lds	r25, 0x0CD2	; 0x800cd2 <xNextTaskUnblockTime+0x1>
    10cc:	a0 91 d3 0c 	lds	r26, 0x0CD3	; 0x800cd3 <xNextTaskUnblockTime+0x2>
    10d0:	b0 91 d4 0c 	lds	r27, 0x0CD4	; 0x800cd4 <xNextTaskUnblockTime+0x3>
    10d4:	c8 16       	cp	r12, r24
    10d6:	d9 06       	cpc	r13, r25
    10d8:	ea 06       	cpc	r14, r26
    10da:	fb 06       	cpc	r15, r27
    10dc:	40 f4       	brcc	.+16     	; 0x10ee <__EEPROM_REGION_LENGTH__+0xee>
    10de:	c0 92 d1 0c 	sts	0x0CD1, r12	; 0x800cd1 <xNextTaskUnblockTime>
    10e2:	d0 92 d2 0c 	sts	0x0CD2, r13	; 0x800cd2 <xNextTaskUnblockTime+0x1>
    10e6:	e0 92 d3 0c 	sts	0x0CD3, r14	; 0x800cd3 <xNextTaskUnblockTime+0x2>
    10ea:	f0 92 d4 0c 	sts	0x0CD4, r15	; 0x800cd4 <xNextTaskUnblockTime+0x3>
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	9f 90       	pop	r9
    1100:	8f 90       	pop	r8
    1102:	08 95       	ret

00001104 <xTaskCreate>:
    1104:	2f 92       	push	r2
    1106:	3f 92       	push	r3
    1108:	4f 92       	push	r4
    110a:	5f 92       	push	r5
    110c:	6f 92       	push	r6
    110e:	7f 92       	push	r7
    1110:	8f 92       	push	r8
    1112:	9f 92       	push	r9
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	3c 01       	movw	r6, r24
    1128:	1b 01       	movw	r2, r22
    112a:	4a 01       	movw	r8, r20
    112c:	29 01       	movw	r4, r18
    112e:	ca 01       	movw	r24, r20
    1130:	a1 d8       	rcall	.-3774   	; 0x274 <pvPortMalloc>
    1132:	6c 01       	movw	r12, r24
    1134:	89 2b       	or	r24, r25
    1136:	61 f0       	breq	.+24     	; 0x1150 <xTaskCreate+0x4c>
    1138:	84 e3       	ldi	r24, 0x34	; 52
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	9b d8       	rcall	.-3786   	; 0x274 <pvPortMalloc>
    113e:	ec 01       	movw	r28, r24
    1140:	89 2b       	or	r24, r25
    1142:	19 f0       	breq	.+6      	; 0x114a <xTaskCreate+0x46>
    1144:	dc 8e       	std	Y+28, r13	; 0x1c
    1146:	cb 8e       	std	Y+27, r12	; 0x1b
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <xTaskCreate+0x50>
    114a:	c6 01       	movw	r24, r12
    114c:	3b d9       	rcall	.-3466   	; 0x3c4 <vPortFree>
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <xTaskCreate+0x50>
    1150:	c0 e0       	ldi	r28, 0x00	; 0
    1152:	d0 e0       	ldi	r29, 0x00	; 0
    1154:	20 97       	sbiw	r28, 0x00	; 0
    1156:	61 f0       	breq	.+24     	; 0x1170 <xTaskCreate+0x6c>
    1158:	a1 2c       	mov	r10, r1
    115a:	b1 2c       	mov	r11, r1
    115c:	6e 01       	movw	r12, r28
    115e:	92 01       	movw	r18, r4
    1160:	a4 01       	movw	r20, r8
    1162:	b1 01       	movw	r22, r2
    1164:	c3 01       	movw	r24, r6
    1166:	f8 dd       	rcall	.-1040   	; 0xd58 <prvInitialiseNewTask>
    1168:	ce 01       	movw	r24, r28
    116a:	9b de       	rcall	.-714    	; 0xea2 <prvAddNewTaskToReadyList>
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <xTaskCreate+0x6e>
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	9f 90       	pop	r9
    1186:	8f 90       	pop	r8
    1188:	7f 90       	pop	r7
    118a:	6f 90       	pop	r6
    118c:	5f 90       	pop	r5
    118e:	4f 90       	pop	r4
    1190:	3f 90       	pop	r3
    1192:	2f 90       	pop	r2
    1194:	08 95       	ret

00001196 <vTaskStartScheduler>:
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	0f 2e       	mov	r0, r31
    119e:	ff ec       	ldi	r31, 0xCF	; 207
    11a0:	ef 2e       	mov	r14, r31
    11a2:	fc e0       	ldi	r31, 0x0C	; 12
    11a4:	ff 2e       	mov	r15, r31
    11a6:	f0 2d       	mov	r31, r0
    11a8:	00 e0       	ldi	r16, 0x00	; 0
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 ec       	ldi	r20, 0xC0	; 192
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	67 e5       	ldi	r22, 0x57	; 87
    11b4:	72 e0       	ldi	r23, 0x02	; 2
    11b6:	8c e7       	ldi	r24, 0x7C	; 124
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a4 df       	rcall	.-184    	; 0x1104 <xTaskCreate>
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <vTaskStartScheduler+0x2c>
    11c0:	96 d5       	rcall	.+2860   	; 0x1cee <xTimerCreateTimerTask>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	c1 f4       	brne	.+48     	; 0x11f6 <vTaskStartScheduler+0x60>
    11c6:	f8 94       	cli
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	9f ef       	ldi	r25, 0xFF	; 255
    11cc:	dc 01       	movw	r26, r24
    11ce:	80 93 d1 0c 	sts	0x0CD1, r24	; 0x800cd1 <xNextTaskUnblockTime>
    11d2:	90 93 d2 0c 	sts	0x0CD2, r25	; 0x800cd2 <xNextTaskUnblockTime+0x1>
    11d6:	a0 93 d3 0c 	sts	0x0CD3, r26	; 0x800cd3 <xNextTaskUnblockTime+0x2>
    11da:	b0 93 d4 0c 	sts	0x0CD4, r27	; 0x800cd4 <xNextTaskUnblockTime+0x3>
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	80 93 dc 0c 	sts	0x0CDC, r24	; 0x800cdc <xSchedulerRunning>
    11e4:	10 92 de 0c 	sts	0x0CDE, r1	; 0x800cde <xTickCount>
    11e8:	10 92 df 0c 	sts	0x0CDF, r1	; 0x800cdf <xTickCount+0x1>
    11ec:	10 92 e0 0c 	sts	0x0CE0, r1	; 0x800ce0 <xTickCount+0x2>
    11f0:	10 92 e1 0c 	sts	0x0CE1, r1	; 0x800ce1 <xTickCount+0x3>
    11f4:	bf d9       	rcall	.-3202   	; 0x574 <xPortStartScheduler>
    11f6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	08 95       	ret

00001202 <vTaskSuspendAll>:
    1202:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <uxSchedulerSuspended>
    1206:	8f 5f       	subi	r24, 0xFF	; 255
    1208:	80 93 ce 0c 	sts	0x0CCE, r24	; 0x800cce <uxSchedulerSuspended>
    120c:	08 95       	ret

0000120e <xTaskGetTickCount>:
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	0f 92       	push	r0
    1214:	60 91 de 0c 	lds	r22, 0x0CDE	; 0x800cde <xTickCount>
    1218:	70 91 df 0c 	lds	r23, 0x0CDF	; 0x800cdf <xTickCount+0x1>
    121c:	80 91 e0 0c 	lds	r24, 0x0CE0	; 0x800ce0 <xTickCount+0x2>
    1220:	90 91 e1 0c 	lds	r25, 0x0CE1	; 0x800ce1 <xTickCount+0x3>
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	08 95       	ret

0000122a <xTaskIncrementTick>:
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <uxSchedulerSuspended>
    123a:	81 11       	cpse	r24, r1
    123c:	05 c1       	rjmp	.+522    	; 0x1448 <xTaskIncrementTick+0x21e>
    123e:	c0 90 de 0c 	lds	r12, 0x0CDE	; 0x800cde <xTickCount>
    1242:	d0 90 df 0c 	lds	r13, 0x0CDF	; 0x800cdf <xTickCount+0x1>
    1246:	e0 90 e0 0c 	lds	r14, 0x0CE0	; 0x800ce0 <xTickCount+0x2>
    124a:	f0 90 e1 0c 	lds	r15, 0x0CE1	; 0x800ce1 <xTickCount+0x3>
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	c8 1a       	sub	r12, r24
    1252:	d8 0a       	sbc	r13, r24
    1254:	e8 0a       	sbc	r14, r24
    1256:	f8 0a       	sbc	r15, r24
    1258:	c0 92 de 0c 	sts	0x0CDE, r12	; 0x800cde <xTickCount>
    125c:	d0 92 df 0c 	sts	0x0CDF, r13	; 0x800cdf <xTickCount+0x1>
    1260:	e0 92 e0 0c 	sts	0x0CE0, r14	; 0x800ce0 <xTickCount+0x2>
    1264:	f0 92 e1 0c 	sts	0x0CE1, r15	; 0x800ce1 <xTickCount+0x3>
    1268:	c1 14       	cp	r12, r1
    126a:	d1 04       	cpc	r13, r1
    126c:	e1 04       	cpc	r14, r1
    126e:	f1 04       	cpc	r15, r1
    1270:	b1 f4       	brne	.+44     	; 0x129e <xTaskIncrementTick+0x74>
    1272:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <pxDelayedTaskList>
    1276:	90 91 08 0d 	lds	r25, 0x0D08	; 0x800d08 <pxDelayedTaskList+0x1>
    127a:	20 91 05 0d 	lds	r18, 0x0D05	; 0x800d05 <pxOverflowDelayedTaskList>
    127e:	30 91 06 0d 	lds	r19, 0x0D06	; 0x800d06 <pxOverflowDelayedTaskList+0x1>
    1282:	30 93 08 0d 	sts	0x0D08, r19	; 0x800d08 <pxDelayedTaskList+0x1>
    1286:	20 93 07 0d 	sts	0x0D07, r18	; 0x800d07 <pxDelayedTaskList>
    128a:	90 93 06 0d 	sts	0x0D06, r25	; 0x800d06 <pxOverflowDelayedTaskList+0x1>
    128e:	80 93 05 0d 	sts	0x0D05, r24	; 0x800d05 <pxOverflowDelayedTaskList>
    1292:	80 91 d6 0c 	lds	r24, 0x0CD6	; 0x800cd6 <xNumOfOverflows>
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	80 93 d6 0c 	sts	0x0CD6, r24	; 0x800cd6 <xNumOfOverflows>
    129c:	2b dd       	rcall	.-1450   	; 0xcf4 <prvResetNextTaskUnblockTime>
    129e:	80 91 d1 0c 	lds	r24, 0x0CD1	; 0x800cd1 <xNextTaskUnblockTime>
    12a2:	90 91 d2 0c 	lds	r25, 0x0CD2	; 0x800cd2 <xNextTaskUnblockTime+0x1>
    12a6:	a0 91 d3 0c 	lds	r26, 0x0CD3	; 0x800cd3 <xNextTaskUnblockTime+0x2>
    12aa:	b0 91 d4 0c 	lds	r27, 0x0CD4	; 0x800cd4 <xNextTaskUnblockTime+0x3>
    12ae:	c8 16       	cp	r12, r24
    12b0:	d9 06       	cpc	r13, r25
    12b2:	ea 06       	cpc	r14, r26
    12b4:	fb 06       	cpc	r15, r27
    12b6:	20 f4       	brcc	.+8      	; 0x12c0 <xTaskIncrementTick+0x96>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	b2 c0       	rjmp	.+356    	; 0x1420 <xTaskIncrementTick+0x1f6>
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <xTaskIncrementTick+0x98>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	e0 91 07 0d 	lds	r30, 0x0D07	; 0x800d07 <pxDelayedTaskList>
    12c6:	f0 91 08 0d 	lds	r31, 0x0D08	; 0x800d08 <pxDelayedTaskList+0x1>
    12ca:	90 81       	ld	r25, Z
    12cc:	91 11       	cpse	r25, r1
    12ce:	0c c0       	rjmp	.+24     	; 0x12e8 <xTaskIncrementTick+0xbe>
    12d0:	4f ef       	ldi	r20, 0xFF	; 255
    12d2:	5f ef       	ldi	r21, 0xFF	; 255
    12d4:	ba 01       	movw	r22, r20
    12d6:	40 93 d1 0c 	sts	0x0CD1, r20	; 0x800cd1 <xNextTaskUnblockTime>
    12da:	50 93 d2 0c 	sts	0x0CD2, r21	; 0x800cd2 <xNextTaskUnblockTime+0x1>
    12de:	60 93 d3 0c 	sts	0x0CD3, r22	; 0x800cd3 <xNextTaskUnblockTime+0x2>
    12e2:	70 93 d4 0c 	sts	0x0CD4, r23	; 0x800cd4 <xNextTaskUnblockTime+0x3>
    12e6:	9c c0       	rjmp	.+312    	; 0x1420 <xTaskIncrementTick+0x1f6>
    12e8:	e0 91 07 0d 	lds	r30, 0x0D07	; 0x800d07 <pxDelayedTaskList>
    12ec:	f0 91 08 0d 	lds	r31, 0x0D08	; 0x800d08 <pxDelayedTaskList+0x1>
    12f0:	07 80       	ldd	r0, Z+7	; 0x07
    12f2:	f0 85       	ldd	r31, Z+8	; 0x08
    12f4:	e0 2d       	mov	r30, r0
    12f6:	00 84       	ldd	r0, Z+8	; 0x08
    12f8:	f1 85       	ldd	r31, Z+9	; 0x09
    12fa:	e0 2d       	mov	r30, r0
    12fc:	42 81       	ldd	r20, Z+2	; 0x02
    12fe:	53 81       	ldd	r21, Z+3	; 0x03
    1300:	64 81       	ldd	r22, Z+4	; 0x04
    1302:	75 81       	ldd	r23, Z+5	; 0x05
    1304:	c4 16       	cp	r12, r20
    1306:	d5 06       	cpc	r13, r21
    1308:	e6 06       	cpc	r14, r22
    130a:	f7 06       	cpc	r15, r23
    130c:	48 f4       	brcc	.+18     	; 0x1320 <xTaskIncrementTick+0xf6>
    130e:	40 93 d1 0c 	sts	0x0CD1, r20	; 0x800cd1 <xNextTaskUnblockTime>
    1312:	50 93 d2 0c 	sts	0x0CD2, r21	; 0x800cd2 <xNextTaskUnblockTime+0x1>
    1316:	60 93 d3 0c 	sts	0x0CD3, r22	; 0x800cd3 <xNextTaskUnblockTime+0x2>
    131a:	70 93 d4 0c 	sts	0x0CD4, r23	; 0x800cd4 <xNextTaskUnblockTime+0x3>
    131e:	80 c0       	rjmp	.+256    	; 0x1420 <xTaskIncrementTick+0x1f6>
    1320:	a4 85       	ldd	r26, Z+12	; 0x0c
    1322:	b5 85       	ldd	r27, Z+13	; 0x0d
    1324:	c6 81       	ldd	r28, Z+6	; 0x06
    1326:	d7 81       	ldd	r29, Z+7	; 0x07
    1328:	20 85       	ldd	r18, Z+8	; 0x08
    132a:	31 85       	ldd	r19, Z+9	; 0x09
    132c:	3f 83       	std	Y+7, r19	; 0x07
    132e:	2e 83       	std	Y+6, r18	; 0x06
    1330:	c0 85       	ldd	r28, Z+8	; 0x08
    1332:	d1 85       	ldd	r29, Z+9	; 0x09
    1334:	26 81       	ldd	r18, Z+6	; 0x06
    1336:	37 81       	ldd	r19, Z+7	; 0x07
    1338:	3d 83       	std	Y+5, r19	; 0x05
    133a:	2c 83       	std	Y+4, r18	; 0x04
    133c:	11 96       	adiw	r26, 0x01	; 1
    133e:	4d 91       	ld	r20, X+
    1340:	5c 91       	ld	r21, X
    1342:	12 97       	sbiw	r26, 0x02	; 2
    1344:	9f 01       	movw	r18, r30
    1346:	2e 5f       	subi	r18, 0xFE	; 254
    1348:	3f 4f       	sbci	r19, 0xFF	; 255
    134a:	42 17       	cp	r20, r18
    134c:	53 07       	cpc	r21, r19
    134e:	31 f4       	brne	.+12     	; 0x135c <xTaskIncrementTick+0x132>
    1350:	40 85       	ldd	r20, Z+8	; 0x08
    1352:	51 85       	ldd	r21, Z+9	; 0x09
    1354:	12 96       	adiw	r26, 0x02	; 2
    1356:	5c 93       	st	X, r21
    1358:	4e 93       	st	-X, r20
    135a:	11 97       	sbiw	r26, 0x01	; 1
    135c:	15 86       	std	Z+13, r1	; 0x0d
    135e:	14 86       	std	Z+12, r1	; 0x0c
    1360:	9c 91       	ld	r25, X
    1362:	91 50       	subi	r25, 0x01	; 1
    1364:	9c 93       	st	X, r25
    1366:	a0 8d       	ldd	r26, Z+24	; 0x18
    1368:	b1 8d       	ldd	r27, Z+25	; 0x19
    136a:	10 97       	sbiw	r26, 0x00	; 0
    136c:	09 f1       	breq	.+66     	; 0x13b0 <xTaskIncrementTick+0x186>
    136e:	c2 89       	ldd	r28, Z+18	; 0x12
    1370:	d3 89       	ldd	r29, Z+19	; 0x13
    1372:	44 89       	ldd	r20, Z+20	; 0x14
    1374:	55 89       	ldd	r21, Z+21	; 0x15
    1376:	5f 83       	std	Y+7, r21	; 0x07
    1378:	4e 83       	std	Y+6, r20	; 0x06
    137a:	c4 89       	ldd	r28, Z+20	; 0x14
    137c:	d5 89       	ldd	r29, Z+21	; 0x15
    137e:	42 89       	ldd	r20, Z+18	; 0x12
    1380:	53 89       	ldd	r21, Z+19	; 0x13
    1382:	5d 83       	std	Y+5, r21	; 0x05
    1384:	4c 83       	std	Y+4, r20	; 0x04
    1386:	11 96       	adiw	r26, 0x01	; 1
    1388:	6d 91       	ld	r22, X+
    138a:	7c 91       	ld	r23, X
    138c:	12 97       	sbiw	r26, 0x02	; 2
    138e:	af 01       	movw	r20, r30
    1390:	42 5f       	subi	r20, 0xF2	; 242
    1392:	5f 4f       	sbci	r21, 0xFF	; 255
    1394:	64 17       	cp	r22, r20
    1396:	75 07       	cpc	r23, r21
    1398:	31 f4       	brne	.+12     	; 0x13a6 <xTaskIncrementTick+0x17c>
    139a:	44 89       	ldd	r20, Z+20	; 0x14
    139c:	55 89       	ldd	r21, Z+21	; 0x15
    139e:	12 96       	adiw	r26, 0x02	; 2
    13a0:	5c 93       	st	X, r21
    13a2:	4e 93       	st	-X, r20
    13a4:	11 97       	sbiw	r26, 0x01	; 1
    13a6:	11 8e       	std	Z+25, r1	; 0x19
    13a8:	10 8e       	std	Z+24, r1	; 0x18
    13aa:	9c 91       	ld	r25, X
    13ac:	91 50       	subi	r25, 0x01	; 1
    13ae:	9c 93       	st	X, r25
    13b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    13b2:	90 91 dd 0c 	lds	r25, 0x0CDD	; 0x800cdd <uxTopReadyPriority>
    13b6:	9a 17       	cp	r25, r26
    13b8:	10 f4       	brcc	.+4      	; 0x13be <xTaskIncrementTick+0x194>
    13ba:	a0 93 dd 0c 	sts	0x0CDD, r26	; 0x800cdd <uxTopReadyPriority>
    13be:	9b e0       	ldi	r25, 0x0B	; 11
    13c0:	9a 9f       	mul	r25, r26
    13c2:	d0 01       	movw	r26, r0
    13c4:	11 24       	eor	r1, r1
    13c6:	a1 5e       	subi	r26, 0xE1	; 225
    13c8:	b2 4f       	sbci	r27, 0xF2	; 242
    13ca:	11 96       	adiw	r26, 0x01	; 1
    13cc:	0d 90       	ld	r0, X+
    13ce:	bc 91       	ld	r27, X
    13d0:	a0 2d       	mov	r26, r0
    13d2:	b7 83       	std	Z+7, r27	; 0x07
    13d4:	a6 83       	std	Z+6, r26	; 0x06
    13d6:	16 96       	adiw	r26, 0x06	; 6
    13d8:	4d 91       	ld	r20, X+
    13da:	5c 91       	ld	r21, X
    13dc:	17 97       	sbiw	r26, 0x07	; 7
    13de:	51 87       	std	Z+9, r21	; 0x09
    13e0:	40 87       	std	Z+8, r20	; 0x08
    13e2:	16 96       	adiw	r26, 0x06	; 6
    13e4:	cd 91       	ld	r28, X+
    13e6:	dc 91       	ld	r29, X
    13e8:	17 97       	sbiw	r26, 0x07	; 7
    13ea:	3d 83       	std	Y+5, r19	; 0x05
    13ec:	2c 83       	std	Y+4, r18	; 0x04
    13ee:	17 96       	adiw	r26, 0x07	; 7
    13f0:	3c 93       	st	X, r19
    13f2:	2e 93       	st	-X, r18
    13f4:	16 97       	sbiw	r26, 0x06	; 6
    13f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    13f8:	9a 9f       	mul	r25, r26
    13fa:	d0 01       	movw	r26, r0
    13fc:	11 24       	eor	r1, r1
    13fe:	a1 5e       	subi	r26, 0xE1	; 225
    1400:	b2 4f       	sbci	r27, 0xF2	; 242
    1402:	b5 87       	std	Z+13, r27	; 0x0d
    1404:	a4 87       	std	Z+12, r26	; 0x0c
    1406:	9c 91       	ld	r25, X
    1408:	9f 5f       	subi	r25, 0xFF	; 255
    140a:	9c 93       	st	X, r25
    140c:	22 8d       	ldd	r18, Z+26	; 0x1a
    140e:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1412:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1416:	92 8d       	ldd	r25, Z+26	; 0x1a
    1418:	29 17       	cp	r18, r25
    141a:	08 f0       	brcs	.+2      	; 0x141e <xTaskIncrementTick+0x1f4>
    141c:	4f cf       	rjmp	.-354    	; 0x12bc <xTaskIncrementTick+0x92>
    141e:	51 cf       	rjmp	.-350    	; 0x12c2 <xTaskIncrementTick+0x98>
    1420:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1424:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1428:	e2 8d       	ldd	r30, Z+26	; 0x1a
    142a:	9b e0       	ldi	r25, 0x0B	; 11
    142c:	e9 9f       	mul	r30, r25
    142e:	f0 01       	movw	r30, r0
    1430:	11 24       	eor	r1, r1
    1432:	e1 5e       	subi	r30, 0xE1	; 225
    1434:	f2 4f       	sbci	r31, 0xF2	; 242
    1436:	90 81       	ld	r25, Z
    1438:	92 30       	cpi	r25, 0x02	; 2
    143a:	08 f0       	brcs	.+2      	; 0x143e <xTaskIncrementTick+0x214>
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 91 d7 0c 	lds	r25, 0x0CD7	; 0x800cd7 <xYieldPending>
    1442:	91 11       	cpse	r25, r1
    1444:	16 c0       	rjmp	.+44     	; 0x1472 <xTaskIncrementTick+0x248>
    1446:	16 c0       	rjmp	.+44     	; 0x1474 <xTaskIncrementTick+0x24a>
    1448:	80 91 d8 0c 	lds	r24, 0x0CD8	; 0x800cd8 <xPendedTicks>
    144c:	90 91 d9 0c 	lds	r25, 0x0CD9	; 0x800cd9 <xPendedTicks+0x1>
    1450:	a0 91 da 0c 	lds	r26, 0x0CDA	; 0x800cda <xPendedTicks+0x2>
    1454:	b0 91 db 0c 	lds	r27, 0x0CDB	; 0x800cdb <xPendedTicks+0x3>
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	a1 1d       	adc	r26, r1
    145c:	b1 1d       	adc	r27, r1
    145e:	80 93 d8 0c 	sts	0x0CD8, r24	; 0x800cd8 <xPendedTicks>
    1462:	90 93 d9 0c 	sts	0x0CD9, r25	; 0x800cd9 <xPendedTicks+0x1>
    1466:	a0 93 da 0c 	sts	0x0CDA, r26	; 0x800cda <xPendedTicks+0x2>
    146a:	b0 93 db 0c 	sts	0x0CDB, r27	; 0x800cdb <xPendedTicks+0x3>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <xTaskIncrementTick+0x24a>
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	ff 90       	pop	r15
    147a:	ef 90       	pop	r14
    147c:	df 90       	pop	r13
    147e:	cf 90       	pop	r12
    1480:	08 95       	ret

00001482 <xTaskResumeAll>:
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	0f 92       	push	r0
    1494:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <uxSchedulerSuspended>
    1498:	81 50       	subi	r24, 0x01	; 1
    149a:	80 93 ce 0c 	sts	0x0CCE, r24	; 0x800cce <uxSchedulerSuspended>
    149e:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <uxSchedulerSuspended>
    14a2:	81 11       	cpse	r24, r1
    14a4:	be c0       	rjmp	.+380    	; 0x1622 <xTaskResumeAll+0x1a0>
    14a6:	80 91 e2 0c 	lds	r24, 0x0CE2	; 0x800ce2 <uxCurrentNumberOfTasks>
    14aa:	81 11       	cpse	r24, r1
    14ac:	88 c0       	rjmp	.+272    	; 0x15be <xTaskResumeAll+0x13c>
    14ae:	bc c0       	rjmp	.+376    	; 0x1628 <xTaskResumeAll+0x1a6>
    14b0:	e0 91 01 0d 	lds	r30, 0x0D01	; 0x800d01 <xPendingReadyList+0x7>
    14b4:	f0 91 02 0d 	lds	r31, 0x0D02	; 0x800d02 <xPendingReadyList+0x8>
    14b8:	00 84       	ldd	r0, Z+8	; 0x08
    14ba:	f1 85       	ldd	r31, Z+9	; 0x09
    14bc:	e0 2d       	mov	r30, r0
    14be:	a0 8d       	ldd	r26, Z+24	; 0x18
    14c0:	b1 8d       	ldd	r27, Z+25	; 0x19
    14c2:	c2 89       	ldd	r28, Z+18	; 0x12
    14c4:	d3 89       	ldd	r29, Z+19	; 0x13
    14c6:	84 89       	ldd	r24, Z+20	; 0x14
    14c8:	95 89       	ldd	r25, Z+21	; 0x15
    14ca:	9f 83       	std	Y+7, r25	; 0x07
    14cc:	8e 83       	std	Y+6, r24	; 0x06
    14ce:	c4 89       	ldd	r28, Z+20	; 0x14
    14d0:	d5 89       	ldd	r29, Z+21	; 0x15
    14d2:	82 89       	ldd	r24, Z+18	; 0x12
    14d4:	93 89       	ldd	r25, Z+19	; 0x13
    14d6:	9d 83       	std	Y+5, r25	; 0x05
    14d8:	8c 83       	std	Y+4, r24	; 0x04
    14da:	11 96       	adiw	r26, 0x01	; 1
    14dc:	2d 91       	ld	r18, X+
    14de:	3c 91       	ld	r19, X
    14e0:	12 97       	sbiw	r26, 0x02	; 2
    14e2:	cf 01       	movw	r24, r30
    14e4:	0e 96       	adiw	r24, 0x0e	; 14
    14e6:	28 17       	cp	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	31 f4       	brne	.+12     	; 0x14f8 <xTaskResumeAll+0x76>
    14ec:	84 89       	ldd	r24, Z+20	; 0x14
    14ee:	95 89       	ldd	r25, Z+21	; 0x15
    14f0:	12 96       	adiw	r26, 0x02	; 2
    14f2:	9c 93       	st	X, r25
    14f4:	8e 93       	st	-X, r24
    14f6:	11 97       	sbiw	r26, 0x01	; 1
    14f8:	11 8e       	std	Z+25, r1	; 0x19
    14fa:	10 8e       	std	Z+24, r1	; 0x18
    14fc:	8c 91       	ld	r24, X
    14fe:	81 50       	subi	r24, 0x01	; 1
    1500:	8c 93       	st	X, r24
    1502:	a4 85       	ldd	r26, Z+12	; 0x0c
    1504:	b5 85       	ldd	r27, Z+13	; 0x0d
    1506:	c6 81       	ldd	r28, Z+6	; 0x06
    1508:	d7 81       	ldd	r29, Z+7	; 0x07
    150a:	80 85       	ldd	r24, Z+8	; 0x08
    150c:	91 85       	ldd	r25, Z+9	; 0x09
    150e:	9f 83       	std	Y+7, r25	; 0x07
    1510:	8e 83       	std	Y+6, r24	; 0x06
    1512:	c0 85       	ldd	r28, Z+8	; 0x08
    1514:	d1 85       	ldd	r29, Z+9	; 0x09
    1516:	86 81       	ldd	r24, Z+6	; 0x06
    1518:	97 81       	ldd	r25, Z+7	; 0x07
    151a:	9d 83       	std	Y+5, r25	; 0x05
    151c:	8c 83       	std	Y+4, r24	; 0x04
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	8d 91       	ld	r24, X+
    1522:	9c 91       	ld	r25, X
    1524:	12 97       	sbiw	r26, 0x02	; 2
    1526:	9f 01       	movw	r18, r30
    1528:	2e 5f       	subi	r18, 0xFE	; 254
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	82 17       	cp	r24, r18
    152e:	93 07       	cpc	r25, r19
    1530:	31 f4       	brne	.+12     	; 0x153e <xTaskResumeAll+0xbc>
    1532:	80 85       	ldd	r24, Z+8	; 0x08
    1534:	91 85       	ldd	r25, Z+9	; 0x09
    1536:	12 96       	adiw	r26, 0x02	; 2
    1538:	9c 93       	st	X, r25
    153a:	8e 93       	st	-X, r24
    153c:	11 97       	sbiw	r26, 0x01	; 1
    153e:	15 86       	std	Z+13, r1	; 0x0d
    1540:	14 86       	std	Z+12, r1	; 0x0c
    1542:	8c 91       	ld	r24, X
    1544:	81 50       	subi	r24, 0x01	; 1
    1546:	8c 93       	st	X, r24
    1548:	a2 8d       	ldd	r26, Z+26	; 0x1a
    154a:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <uxTopReadyPriority>
    154e:	8a 17       	cp	r24, r26
    1550:	10 f4       	brcc	.+4      	; 0x1556 <xTaskResumeAll+0xd4>
    1552:	a0 93 dd 0c 	sts	0x0CDD, r26	; 0x800cdd <uxTopReadyPriority>
    1556:	8b e0       	ldi	r24, 0x0B	; 11
    1558:	8a 9f       	mul	r24, r26
    155a:	d0 01       	movw	r26, r0
    155c:	11 24       	eor	r1, r1
    155e:	a1 5e       	subi	r26, 0xE1	; 225
    1560:	b2 4f       	sbci	r27, 0xF2	; 242
    1562:	11 96       	adiw	r26, 0x01	; 1
    1564:	0d 90       	ld	r0, X+
    1566:	bc 91       	ld	r27, X
    1568:	a0 2d       	mov	r26, r0
    156a:	b7 83       	std	Z+7, r27	; 0x07
    156c:	a6 83       	std	Z+6, r26	; 0x06
    156e:	16 96       	adiw	r26, 0x06	; 6
    1570:	4d 91       	ld	r20, X+
    1572:	5c 91       	ld	r21, X
    1574:	17 97       	sbiw	r26, 0x07	; 7
    1576:	51 87       	std	Z+9, r21	; 0x09
    1578:	40 87       	std	Z+8, r20	; 0x08
    157a:	16 96       	adiw	r26, 0x06	; 6
    157c:	cd 91       	ld	r28, X+
    157e:	dc 91       	ld	r29, X
    1580:	17 97       	sbiw	r26, 0x07	; 7
    1582:	3d 83       	std	Y+5, r19	; 0x05
    1584:	2c 83       	std	Y+4, r18	; 0x04
    1586:	17 96       	adiw	r26, 0x07	; 7
    1588:	3c 93       	st	X, r19
    158a:	2e 93       	st	-X, r18
    158c:	16 97       	sbiw	r26, 0x06	; 6
    158e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1590:	8a 9f       	mul	r24, r26
    1592:	d0 01       	movw	r26, r0
    1594:	11 24       	eor	r1, r1
    1596:	a1 5e       	subi	r26, 0xE1	; 225
    1598:	b2 4f       	sbci	r27, 0xF2	; 242
    159a:	b5 87       	std	Z+13, r27	; 0x0d
    159c:	a4 87       	std	Z+12, r26	; 0x0c
    159e:	8c 91       	ld	r24, X
    15a0:	8f 5f       	subi	r24, 0xFF	; 255
    15a2:	8c 93       	st	X, r24
    15a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    15a6:	a0 91 8d 0d 	lds	r26, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    15aa:	b0 91 8e 0d 	lds	r27, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    15ae:	5a 96       	adiw	r26, 0x1a	; 26
    15b0:	8c 91       	ld	r24, X
    15b2:	98 17       	cp	r25, r24
    15b4:	30 f0       	brcs	.+12     	; 0x15c2 <xTaskResumeAll+0x140>
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	80 93 d7 0c 	sts	0x0CD7, r24	; 0x800cd7 <xYieldPending>
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <xTaskResumeAll+0x140>
    15be:	e0 e0       	ldi	r30, 0x00	; 0
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <xPendingReadyList>
    15c6:	81 11       	cpse	r24, r1
    15c8:	73 cf       	rjmp	.-282    	; 0x14b0 <xTaskResumeAll+0x2e>
    15ca:	ef 2b       	or	r30, r31
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <xTaskResumeAll+0x14e>
    15ce:	92 db       	rcall	.-2268   	; 0xcf4 <prvResetNextTaskUnblockTime>
    15d0:	c0 90 d8 0c 	lds	r12, 0x0CD8	; 0x800cd8 <xPendedTicks>
    15d4:	d0 90 d9 0c 	lds	r13, 0x0CD9	; 0x800cd9 <xPendedTicks+0x1>
    15d8:	e0 90 da 0c 	lds	r14, 0x0CDA	; 0x800cda <xPendedTicks+0x2>
    15dc:	f0 90 db 0c 	lds	r15, 0x0CDB	; 0x800cdb <xPendedTicks+0x3>
    15e0:	c1 14       	cp	r12, r1
    15e2:	d1 04       	cpc	r13, r1
    15e4:	e1 04       	cpc	r14, r1
    15e6:	f1 04       	cpc	r15, r1
    15e8:	a1 f0       	breq	.+40     	; 0x1612 <xTaskResumeAll+0x190>
    15ea:	1f de       	rcall	.-962    	; 0x122a <xTaskIncrementTick>
    15ec:	88 23       	and	r24, r24
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <xTaskResumeAll+0x174>
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	80 93 d7 0c 	sts	0x0CD7, r24	; 0x800cd7 <xYieldPending>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	c8 1a       	sub	r12, r24
    15fa:	d1 08       	sbc	r13, r1
    15fc:	e1 08       	sbc	r14, r1
    15fe:	f1 08       	sbc	r15, r1
    1600:	a1 f7       	brne	.-24     	; 0x15ea <xTaskResumeAll+0x168>
    1602:	10 92 d8 0c 	sts	0x0CD8, r1	; 0x800cd8 <xPendedTicks>
    1606:	10 92 d9 0c 	sts	0x0CD9, r1	; 0x800cd9 <xPendedTicks+0x1>
    160a:	10 92 da 0c 	sts	0x0CDA, r1	; 0x800cda <xPendedTicks+0x2>
    160e:	10 92 db 0c 	sts	0x0CDB, r1	; 0x800cdb <xPendedTicks+0x3>
    1612:	80 91 d7 0c 	lds	r24, 0x0CD7	; 0x800cd7 <xYieldPending>
    1616:	88 23       	and	r24, r24
    1618:	31 f0       	breq	.+12     	; 0x1626 <xTaskResumeAll+0x1a4>
    161a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <vPortYield>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	03 c0       	rjmp	.+6      	; 0x1628 <xTaskResumeAll+0x1a6>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <xTaskResumeAll+0x1a6>
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	0f 90       	pop	r0
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12
    1638:	08 95       	ret

0000163a <xTaskDelayUntil>:
    163a:	8f 92       	push	r8
    163c:	9f 92       	push	r9
    163e:	af 92       	push	r10
    1640:	bf 92       	push	r11
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	ec 01       	movw	r28, r24
    1652:	6a 01       	movw	r12, r20
    1654:	7b 01       	movw	r14, r22
    1656:	d5 dd       	rcall	.-1110   	; 0x1202 <vTaskSuspendAll>
    1658:	80 90 de 0c 	lds	r8, 0x0CDE	; 0x800cde <xTickCount>
    165c:	90 90 df 0c 	lds	r9, 0x0CDF	; 0x800cdf <xTickCount+0x1>
    1660:	a0 90 e0 0c 	lds	r10, 0x0CE0	; 0x800ce0 <xTickCount+0x2>
    1664:	b0 90 e1 0c 	lds	r11, 0x0CE1	; 0x800ce1 <xTickCount+0x3>
    1668:	88 81       	ld	r24, Y
    166a:	99 81       	ldd	r25, Y+1	; 0x01
    166c:	aa 81       	ldd	r26, Y+2	; 0x02
    166e:	bb 81       	ldd	r27, Y+3	; 0x03
    1670:	ac 01       	movw	r20, r24
    1672:	bd 01       	movw	r22, r26
    1674:	4c 0d       	add	r20, r12
    1676:	5d 1d       	adc	r21, r13
    1678:	6e 1d       	adc	r22, r14
    167a:	7f 1d       	adc	r23, r15
    167c:	88 16       	cp	r8, r24
    167e:	99 06       	cpc	r9, r25
    1680:	aa 06       	cpc	r10, r26
    1682:	bb 06       	cpc	r11, r27
    1684:	60 f4       	brcc	.+24     	; 0x169e <xTaskDelayUntil+0x64>
    1686:	48 17       	cp	r20, r24
    1688:	59 07       	cpc	r21, r25
    168a:	6a 07       	cpc	r22, r26
    168c:	7b 07       	cpc	r23, r27
    168e:	98 f4       	brcc	.+38     	; 0x16b6 <xTaskDelayUntil+0x7c>
    1690:	84 16       	cp	r8, r20
    1692:	95 06       	cpc	r9, r21
    1694:	a6 06       	cpc	r10, r22
    1696:	b7 06       	cpc	r11, r23
    1698:	80 f0       	brcs	.+32     	; 0x16ba <xTaskDelayUntil+0x80>
    169a:	10 e0       	ldi	r17, 0x00	; 0
    169c:	13 c0       	rjmp	.+38     	; 0x16c4 <xTaskDelayUntil+0x8a>
    169e:	48 17       	cp	r20, r24
    16a0:	59 07       	cpc	r21, r25
    16a2:	6a 07       	cpc	r22, r26
    16a4:	7b 07       	cpc	r23, r27
    16a6:	58 f0       	brcs	.+22     	; 0x16be <xTaskDelayUntil+0x84>
    16a8:	84 16       	cp	r8, r20
    16aa:	95 06       	cpc	r9, r21
    16ac:	a6 06       	cpc	r10, r22
    16ae:	b7 06       	cpc	r11, r23
    16b0:	40 f0       	brcs	.+16     	; 0x16c2 <xTaskDelayUntil+0x88>
    16b2:	10 e0       	ldi	r17, 0x00	; 0
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <xTaskDelayUntil+0x8a>
    16b6:	10 e0       	ldi	r17, 0x00	; 0
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <xTaskDelayUntil+0x8a>
    16ba:	11 e0       	ldi	r17, 0x01	; 1
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <xTaskDelayUntil+0x8a>
    16be:	11 e0       	ldi	r17, 0x01	; 1
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <xTaskDelayUntil+0x8a>
    16c2:	11 e0       	ldi	r17, 0x01	; 1
    16c4:	48 83       	st	Y, r20
    16c6:	59 83       	std	Y+1, r21	; 0x01
    16c8:	6a 83       	std	Y+2, r22	; 0x02
    16ca:	7b 83       	std	Y+3, r23	; 0x03
    16cc:	11 23       	and	r17, r17
    16ce:	41 f0       	breq	.+16     	; 0x16e0 <xTaskDelayUntil+0xa6>
    16d0:	cb 01       	movw	r24, r22
    16d2:	ba 01       	movw	r22, r20
    16d4:	68 19       	sub	r22, r8
    16d6:	79 09       	sbc	r23, r9
    16d8:	8a 09       	sbc	r24, r10
    16da:	9b 09       	sbc	r25, r11
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	73 dc       	rcall	.-1818   	; 0xfc6 <prvAddCurrentTaskToDelayedList>
    16e0:	d0 de       	rcall	.-608    	; 0x1482 <xTaskResumeAll>
    16e2:	81 11       	cpse	r24, r1
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <xTaskDelayUntil+0xb0>
    16e6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <vPortYield>
    16ea:	81 2f       	mov	r24, r17
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	af 90       	pop	r10
    16fe:	9f 90       	pop	r9
    1700:	8f 90       	pop	r8
    1702:	08 95       	ret

00001704 <vTaskDelay>:
    1704:	cf 92       	push	r12
    1706:	df 92       	push	r13
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	6b 01       	movw	r12, r22
    170e:	7c 01       	movw	r14, r24
    1710:	67 2b       	or	r22, r23
    1712:	68 2b       	or	r22, r24
    1714:	69 2b       	or	r22, r25
    1716:	39 f0       	breq	.+14     	; 0x1726 <vTaskDelay+0x22>
    1718:	74 dd       	rcall	.-1304   	; 0x1202 <vTaskSuspendAll>
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	c7 01       	movw	r24, r14
    171e:	b6 01       	movw	r22, r12
    1720:	52 dc       	rcall	.-1884   	; 0xfc6 <prvAddCurrentTaskToDelayedList>
    1722:	af de       	rcall	.-674    	; 0x1482 <xTaskResumeAll>
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <vTaskDelay+0x24>
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	81 11       	cpse	r24, r1
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <vTaskDelay+0x2c>
    172c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <vPortYield>
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	df 90       	pop	r13
    1736:	cf 90       	pop	r12
    1738:	08 95       	ret

0000173a <vTaskSwitchContext>:
    173a:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <uxSchedulerSuspended>
    173e:	88 23       	and	r24, r24
    1740:	21 f0       	breq	.+8      	; 0x174a <vTaskSwitchContext+0x10>
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	80 93 d7 0c 	sts	0x0CD7, r24	; 0x800cd7 <xYieldPending>
    1748:	08 95       	ret
    174a:	10 92 d7 0c 	sts	0x0CD7, r1	; 0x800cd7 <xYieldPending>
    174e:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1752:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1756:	20 81       	ld	r18, Z
    1758:	31 81       	ldd	r19, Z+1	; 0x01
    175a:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    175e:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1762:	83 8d       	ldd	r24, Z+27	; 0x1b
    1764:	94 8d       	ldd	r25, Z+28	; 0x1c
    1766:	82 17       	cp	r24, r18
    1768:	93 07       	cpc	r25, r19
    176a:	58 f0       	brcs	.+22     	; 0x1782 <vTaskSwitchContext+0x48>
    176c:	60 91 8d 0d 	lds	r22, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1770:	70 91 8e 0d 	lds	r23, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1774:	63 5e       	subi	r22, 0xE3	; 227
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	80 91 8d 0d 	lds	r24, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    177c:	90 91 8e 0d 	lds	r25, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1780:	3e d5       	rcall	.+2684   	; 0x21fe <vApplicationStackOverflowHook>
    1782:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <uxTopReadyPriority>
    1786:	01 c0       	rjmp	.+2      	; 0x178a <vTaskSwitchContext+0x50>
    1788:	81 50       	subi	r24, 0x01	; 1
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	9b e0       	ldi	r25, 0x0B	; 11
    1790:	92 9f       	mul	r25, r18
    1792:	f0 01       	movw	r30, r0
    1794:	93 9f       	mul	r25, r19
    1796:	f0 0d       	add	r31, r0
    1798:	11 24       	eor	r1, r1
    179a:	e1 5e       	subi	r30, 0xE1	; 225
    179c:	f2 4f       	sbci	r31, 0xF2	; 242
    179e:	90 81       	ld	r25, Z
    17a0:	99 23       	and	r25, r25
    17a2:	91 f3       	breq	.-28     	; 0x1788 <vTaskSwitchContext+0x4e>
    17a4:	9b e0       	ldi	r25, 0x0B	; 11
    17a6:	92 9f       	mul	r25, r18
    17a8:	a0 01       	movw	r20, r0
    17aa:	93 9f       	mul	r25, r19
    17ac:	50 0d       	add	r21, r0
    17ae:	11 24       	eor	r1, r1
    17b0:	df 01       	movw	r26, r30
    17b2:	01 80       	ldd	r0, Z+1	; 0x01
    17b4:	f2 81       	ldd	r31, Z+2	; 0x02
    17b6:	e0 2d       	mov	r30, r0
    17b8:	04 80       	ldd	r0, Z+4	; 0x04
    17ba:	f5 81       	ldd	r31, Z+5	; 0x05
    17bc:	e0 2d       	mov	r30, r0
    17be:	12 96       	adiw	r26, 0x02	; 2
    17c0:	fc 93       	st	X, r31
    17c2:	ee 93       	st	-X, r30
    17c4:	11 97       	sbiw	r26, 0x01	; 1
    17c6:	4e 5d       	subi	r20, 0xDE	; 222
    17c8:	52 4f       	sbci	r21, 0xF2	; 242
    17ca:	e4 17       	cp	r30, r20
    17cc:	f5 07       	cpc	r31, r21
    17ce:	29 f4       	brne	.+10     	; 0x17da <vTaskSwitchContext+0xa0>
    17d0:	44 81       	ldd	r20, Z+4	; 0x04
    17d2:	55 81       	ldd	r21, Z+5	; 0x05
    17d4:	fd 01       	movw	r30, r26
    17d6:	52 83       	std	Z+2, r21	; 0x02
    17d8:	41 83       	std	Z+1, r20	; 0x01
    17da:	9b e0       	ldi	r25, 0x0B	; 11
    17dc:	92 9f       	mul	r25, r18
    17de:	f0 01       	movw	r30, r0
    17e0:	93 9f       	mul	r25, r19
    17e2:	f0 0d       	add	r31, r0
    17e4:	11 24       	eor	r1, r1
    17e6:	e1 5e       	subi	r30, 0xE1	; 225
    17e8:	f2 4f       	sbci	r31, 0xF2	; 242
    17ea:	01 80       	ldd	r0, Z+1	; 0x01
    17ec:	f2 81       	ldd	r31, Z+2	; 0x02
    17ee:	e0 2d       	mov	r30, r0
    17f0:	20 85       	ldd	r18, Z+8	; 0x08
    17f2:	31 85       	ldd	r19, Z+9	; 0x09
    17f4:	30 93 8e 0d 	sts	0x0D8E, r19	; 0x800d8e <pxCurrentTCB+0x1>
    17f8:	20 93 8d 0d 	sts	0x0D8D, r18	; 0x800d8d <pxCurrentTCB>
    17fc:	80 93 dd 0c 	sts	0x0CDD, r24	; 0x800cdd <uxTopReadyPriority>
    1800:	08 95       	ret

00001802 <vTaskPlaceOnEventList>:
    1802:	cf 92       	push	r12
    1804:	df 92       	push	r13
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	6a 01       	movw	r12, r20
    180c:	7b 01       	movw	r14, r22
    180e:	60 91 8d 0d 	lds	r22, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1812:	70 91 8e 0d 	lds	r23, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1816:	62 5f       	subi	r22, 0xF2	; 242
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	0e 94 33 02 	call	0x466	; 0x466 <vListInsert>
    181e:	41 e0       	ldi	r20, 0x01	; 1
    1820:	c7 01       	movw	r24, r14
    1822:	b6 01       	movw	r22, r12
    1824:	d0 db       	rcall	.-2144   	; 0xfc6 <prvAddCurrentTaskToDelayedList>
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	08 95       	ret

00001830 <vTaskPlaceOnEventListRestricted>:
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	fc 01       	movw	r30, r24
    1836:	cb 01       	movw	r24, r22
    1838:	ba 01       	movw	r22, r20
    183a:	a1 81       	ldd	r26, Z+1	; 0x01
    183c:	b2 81       	ldd	r27, Z+2	; 0x02
    183e:	c0 91 8d 0d 	lds	r28, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    1842:	d0 91 8e 0d 	lds	r29, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1846:	bb 8b       	std	Y+19, r27	; 0x13
    1848:	aa 8b       	std	Y+18, r26	; 0x12
    184a:	c0 91 8d 0d 	lds	r28, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    184e:	d0 91 8e 0d 	lds	r29, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1852:	16 96       	adiw	r26, 0x06	; 6
    1854:	4d 91       	ld	r20, X+
    1856:	5c 91       	ld	r21, X
    1858:	17 97       	sbiw	r26, 0x07	; 7
    185a:	5d 8b       	std	Y+21, r21	; 0x15
    185c:	4c 8b       	std	Y+20, r20	; 0x14
    185e:	16 96       	adiw	r26, 0x06	; 6
    1860:	cd 91       	ld	r28, X+
    1862:	dc 91       	ld	r29, X
    1864:	17 97       	sbiw	r26, 0x07	; 7
    1866:	40 91 8d 0d 	lds	r20, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    186a:	50 91 8e 0d 	lds	r21, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    186e:	42 5f       	subi	r20, 0xF2	; 242
    1870:	5f 4f       	sbci	r21, 0xFF	; 255
    1872:	5d 83       	std	Y+5, r21	; 0x05
    1874:	4c 83       	std	Y+4, r20	; 0x04
    1876:	40 91 8d 0d 	lds	r20, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    187a:	50 91 8e 0d 	lds	r21, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    187e:	42 5f       	subi	r20, 0xF2	; 242
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	17 96       	adiw	r26, 0x07	; 7
    1884:	5c 93       	st	X, r21
    1886:	4e 93       	st	-X, r20
    1888:	16 97       	sbiw	r26, 0x06	; 6
    188a:	a0 91 8d 0d 	lds	r26, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    188e:	b0 91 8e 0d 	lds	r27, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    1892:	59 96       	adiw	r26, 0x19	; 25
    1894:	fc 93       	st	X, r31
    1896:	ee 93       	st	-X, r30
    1898:	58 97       	sbiw	r26, 0x18	; 24
    189a:	30 81       	ld	r19, Z
    189c:	3f 5f       	subi	r19, 0xFF	; 255
    189e:	30 83       	st	Z, r19
    18a0:	22 23       	and	r18, r18
    18a2:	19 f0       	breq	.+6      	; 0x18aa <vTaskPlaceOnEventListRestricted+0x7a>
    18a4:	6f ef       	ldi	r22, 0xFF	; 255
    18a6:	7f ef       	ldi	r23, 0xFF	; 255
    18a8:	cb 01       	movw	r24, r22
    18aa:	42 2f       	mov	r20, r18
    18ac:	8c db       	rcall	.-2280   	; 0xfc6 <prvAddCurrentTaskToDelayedList>
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <xTaskRemoveFromEventList>:
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	dc 01       	movw	r26, r24
    18ba:	17 96       	adiw	r26, 0x07	; 7
    18bc:	ed 91       	ld	r30, X+
    18be:	fc 91       	ld	r31, X
    18c0:	18 97       	sbiw	r26, 0x08	; 8
    18c2:	00 84       	ldd	r0, Z+8	; 0x08
    18c4:	f1 85       	ldd	r31, Z+9	; 0x09
    18c6:	e0 2d       	mov	r30, r0
    18c8:	a0 8d       	ldd	r26, Z+24	; 0x18
    18ca:	b1 8d       	ldd	r27, Z+25	; 0x19
    18cc:	c2 89       	ldd	r28, Z+18	; 0x12
    18ce:	d3 89       	ldd	r29, Z+19	; 0x13
    18d0:	84 89       	ldd	r24, Z+20	; 0x14
    18d2:	95 89       	ldd	r25, Z+21	; 0x15
    18d4:	9f 83       	std	Y+7, r25	; 0x07
    18d6:	8e 83       	std	Y+6, r24	; 0x06
    18d8:	c4 89       	ldd	r28, Z+20	; 0x14
    18da:	d5 89       	ldd	r29, Z+21	; 0x15
    18dc:	82 89       	ldd	r24, Z+18	; 0x12
    18de:	93 89       	ldd	r25, Z+19	; 0x13
    18e0:	9d 83       	std	Y+5, r25	; 0x05
    18e2:	8c 83       	std	Y+4, r24	; 0x04
    18e4:	11 96       	adiw	r26, 0x01	; 1
    18e6:	8d 91       	ld	r24, X+
    18e8:	9c 91       	ld	r25, X
    18ea:	12 97       	sbiw	r26, 0x02	; 2
    18ec:	9f 01       	movw	r18, r30
    18ee:	22 5f       	subi	r18, 0xF2	; 242
    18f0:	3f 4f       	sbci	r19, 0xFF	; 255
    18f2:	82 17       	cp	r24, r18
    18f4:	93 07       	cpc	r25, r19
    18f6:	31 f4       	brne	.+12     	; 0x1904 <xTaskRemoveFromEventList+0x50>
    18f8:	84 89       	ldd	r24, Z+20	; 0x14
    18fa:	95 89       	ldd	r25, Z+21	; 0x15
    18fc:	12 96       	adiw	r26, 0x02	; 2
    18fe:	9c 93       	st	X, r25
    1900:	8e 93       	st	-X, r24
    1902:	11 97       	sbiw	r26, 0x01	; 1
    1904:	11 8e       	std	Z+25, r1	; 0x19
    1906:	10 8e       	std	Z+24, r1	; 0x18
    1908:	8c 91       	ld	r24, X
    190a:	81 50       	subi	r24, 0x01	; 1
    190c:	8c 93       	st	X, r24
    190e:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <uxSchedulerSuspended>
    1912:	81 11       	cpse	r24, r1
    1914:	52 c0       	rjmp	.+164    	; 0x19ba <xTaskRemoveFromEventList+0x106>
    1916:	a4 85       	ldd	r26, Z+12	; 0x0c
    1918:	b5 85       	ldd	r27, Z+13	; 0x0d
    191a:	c6 81       	ldd	r28, Z+6	; 0x06
    191c:	d7 81       	ldd	r29, Z+7	; 0x07
    191e:	80 85       	ldd	r24, Z+8	; 0x08
    1920:	91 85       	ldd	r25, Z+9	; 0x09
    1922:	9f 83       	std	Y+7, r25	; 0x07
    1924:	8e 83       	std	Y+6, r24	; 0x06
    1926:	c0 85       	ldd	r28, Z+8	; 0x08
    1928:	d1 85       	ldd	r29, Z+9	; 0x09
    192a:	86 81       	ldd	r24, Z+6	; 0x06
    192c:	97 81       	ldd	r25, Z+7	; 0x07
    192e:	9d 83       	std	Y+5, r25	; 0x05
    1930:	8c 83       	std	Y+4, r24	; 0x04
    1932:	11 96       	adiw	r26, 0x01	; 1
    1934:	8d 91       	ld	r24, X+
    1936:	9c 91       	ld	r25, X
    1938:	12 97       	sbiw	r26, 0x02	; 2
    193a:	9f 01       	movw	r18, r30
    193c:	2e 5f       	subi	r18, 0xFE	; 254
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
    1940:	82 17       	cp	r24, r18
    1942:	93 07       	cpc	r25, r19
    1944:	31 f4       	brne	.+12     	; 0x1952 <xTaskRemoveFromEventList+0x9e>
    1946:	80 85       	ldd	r24, Z+8	; 0x08
    1948:	91 85       	ldd	r25, Z+9	; 0x09
    194a:	12 96       	adiw	r26, 0x02	; 2
    194c:	9c 93       	st	X, r25
    194e:	8e 93       	st	-X, r24
    1950:	11 97       	sbiw	r26, 0x01	; 1
    1952:	15 86       	std	Z+13, r1	; 0x0d
    1954:	14 86       	std	Z+12, r1	; 0x0c
    1956:	8c 91       	ld	r24, X
    1958:	81 50       	subi	r24, 0x01	; 1
    195a:	8c 93       	st	X, r24
    195c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    195e:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <uxTopReadyPriority>
    1962:	8a 17       	cp	r24, r26
    1964:	10 f4       	brcc	.+4      	; 0x196a <xTaskRemoveFromEventList+0xb6>
    1966:	a0 93 dd 0c 	sts	0x0CDD, r26	; 0x800cdd <uxTopReadyPriority>
    196a:	8b e0       	ldi	r24, 0x0B	; 11
    196c:	8a 9f       	mul	r24, r26
    196e:	d0 01       	movw	r26, r0
    1970:	11 24       	eor	r1, r1
    1972:	a1 5e       	subi	r26, 0xE1	; 225
    1974:	b2 4f       	sbci	r27, 0xF2	; 242
    1976:	11 96       	adiw	r26, 0x01	; 1
    1978:	0d 90       	ld	r0, X+
    197a:	bc 91       	ld	r27, X
    197c:	a0 2d       	mov	r26, r0
    197e:	b7 83       	std	Z+7, r27	; 0x07
    1980:	a6 83       	std	Z+6, r26	; 0x06
    1982:	16 96       	adiw	r26, 0x06	; 6
    1984:	4d 91       	ld	r20, X+
    1986:	5c 91       	ld	r21, X
    1988:	17 97       	sbiw	r26, 0x07	; 7
    198a:	51 87       	std	Z+9, r21	; 0x09
    198c:	40 87       	std	Z+8, r20	; 0x08
    198e:	16 96       	adiw	r26, 0x06	; 6
    1990:	cd 91       	ld	r28, X+
    1992:	dc 91       	ld	r29, X
    1994:	17 97       	sbiw	r26, 0x07	; 7
    1996:	3d 83       	std	Y+5, r19	; 0x05
    1998:	2c 83       	std	Y+4, r18	; 0x04
    199a:	17 96       	adiw	r26, 0x07	; 7
    199c:	3c 93       	st	X, r19
    199e:	2e 93       	st	-X, r18
    19a0:	16 97       	sbiw	r26, 0x06	; 6
    19a2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    19a4:	8a 9f       	mul	r24, r26
    19a6:	d0 01       	movw	r26, r0
    19a8:	11 24       	eor	r1, r1
    19aa:	a1 5e       	subi	r26, 0xE1	; 225
    19ac:	b2 4f       	sbci	r27, 0xF2	; 242
    19ae:	b5 87       	std	Z+13, r27	; 0x0d
    19b0:	a4 87       	std	Z+12, r26	; 0x0c
    19b2:	8c 91       	ld	r24, X
    19b4:	8f 5f       	subi	r24, 0xFF	; 255
    19b6:	8c 93       	st	X, r24
    19b8:	1c c0       	rjmp	.+56     	; 0x19f2 <xTaskRemoveFromEventList+0x13e>
    19ba:	4a ef       	ldi	r20, 0xFA	; 250
    19bc:	5c e0       	ldi	r21, 0x0C	; 12
    19be:	da 01       	movw	r26, r20
    19c0:	11 96       	adiw	r26, 0x01	; 1
    19c2:	cd 91       	ld	r28, X+
    19c4:	dc 91       	ld	r29, X
    19c6:	12 97       	sbiw	r26, 0x02	; 2
    19c8:	d3 8b       	std	Z+19, r29	; 0x13
    19ca:	c2 8b       	std	Z+18, r28	; 0x12
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	9f 81       	ldd	r25, Y+7	; 0x07
    19d0:	95 8b       	std	Z+21, r25	; 0x15
    19d2:	84 8b       	std	Z+20, r24	; 0x14
    19d4:	8e 81       	ldd	r24, Y+6	; 0x06
    19d6:	9f 81       	ldd	r25, Y+7	; 0x07
    19d8:	dc 01       	movw	r26, r24
    19da:	15 96       	adiw	r26, 0x05	; 5
    19dc:	3c 93       	st	X, r19
    19de:	2e 93       	st	-X, r18
    19e0:	14 97       	sbiw	r26, 0x04	; 4
    19e2:	3f 83       	std	Y+7, r19	; 0x07
    19e4:	2e 83       	std	Y+6, r18	; 0x06
    19e6:	51 8f       	std	Z+25, r21	; 0x19
    19e8:	40 8f       	std	Z+24, r20	; 0x18
    19ea:	da 01       	movw	r26, r20
    19ec:	8c 91       	ld	r24, X
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
    19f0:	8c 93       	st	X, r24
    19f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    19f4:	e0 91 8d 0d 	lds	r30, 0x0D8D	; 0x800d8d <pxCurrentTCB>
    19f8:	f0 91 8e 0d 	lds	r31, 0x0D8E	; 0x800d8e <pxCurrentTCB+0x1>
    19fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    19fe:	89 17       	cp	r24, r25
    1a00:	20 f4       	brcc	.+8      	; 0x1a0a <xTaskRemoveFromEventList+0x156>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	80 93 d7 0c 	sts	0x0CD7, r24	; 0x800cd7 <xYieldPending>
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <xTaskRemoveFromEventList+0x158>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <vTaskInternalSetTimeOutState>:
    1a12:	20 91 d6 0c 	lds	r18, 0x0CD6	; 0x800cd6 <xNumOfOverflows>
    1a16:	fc 01       	movw	r30, r24
    1a18:	20 83       	st	Z, r18
    1a1a:	40 91 de 0c 	lds	r20, 0x0CDE	; 0x800cde <xTickCount>
    1a1e:	50 91 df 0c 	lds	r21, 0x0CDF	; 0x800cdf <xTickCount+0x1>
    1a22:	60 91 e0 0c 	lds	r22, 0x0CE0	; 0x800ce0 <xTickCount+0x2>
    1a26:	70 91 e1 0c 	lds	r23, 0x0CE1	; 0x800ce1 <xTickCount+0x3>
    1a2a:	41 83       	std	Z+1, r20	; 0x01
    1a2c:	52 83       	std	Z+2, r21	; 0x02
    1a2e:	63 83       	std	Z+3, r22	; 0x03
    1a30:	74 83       	std	Z+4, r23	; 0x04
    1a32:	08 95       	ret

00001a34 <xTaskCheckForTimeOut>:
    1a34:	8f 92       	push	r8
    1a36:	9f 92       	push	r9
    1a38:	af 92       	push	r10
    1a3a:	bf 92       	push	r11
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	fb 01       	movw	r30, r22
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	0f 92       	push	r0
    1a54:	c0 90 de 0c 	lds	r12, 0x0CDE	; 0x800cde <xTickCount>
    1a58:	d0 90 df 0c 	lds	r13, 0x0CDF	; 0x800cdf <xTickCount+0x1>
    1a5c:	e0 90 e0 0c 	lds	r14, 0x0CE0	; 0x800ce0 <xTickCount+0x2>
    1a60:	f0 90 e1 0c 	lds	r15, 0x0CE1	; 0x800ce1 <xTickCount+0x3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	11 96       	adiw	r26, 0x01	; 1
    1a68:	0d 91       	ld	r16, X+
    1a6a:	1d 91       	ld	r17, X+
    1a6c:	2d 91       	ld	r18, X+
    1a6e:	3c 91       	ld	r19, X
    1a70:	14 97       	sbiw	r26, 0x04	; 4
    1a72:	46 01       	movw	r8, r12
    1a74:	57 01       	movw	r10, r14
    1a76:	80 1a       	sub	r8, r16
    1a78:	91 0a       	sbc	r9, r17
    1a7a:	a2 0a       	sbc	r10, r18
    1a7c:	b3 0a       	sbc	r11, r19
    1a7e:	40 81       	ld	r20, Z
    1a80:	51 81       	ldd	r21, Z+1	; 0x01
    1a82:	62 81       	ldd	r22, Z+2	; 0x02
    1a84:	73 81       	ldd	r23, Z+3	; 0x03
    1a86:	4f 3f       	cpi	r20, 0xFF	; 255
    1a88:	bf ef       	ldi	r27, 0xFF	; 255
    1a8a:	5b 07       	cpc	r21, r27
    1a8c:	6b 07       	cpc	r22, r27
    1a8e:	7b 07       	cpc	r23, r27
    1a90:	39 f1       	breq	.+78     	; 0x1ae0 <xTaskCheckForTimeOut+0xac>
    1a92:	ec 01       	movw	r28, r24
    1a94:	b8 81       	ld	r27, Y
    1a96:	a0 91 d6 0c 	lds	r26, 0x0CD6	; 0x800cd6 <xNumOfOverflows>
    1a9a:	ba 17       	cp	r27, r26
    1a9c:	59 f0       	breq	.+22     	; 0x1ab4 <xTaskCheckForTimeOut+0x80>
    1a9e:	c0 16       	cp	r12, r16
    1aa0:	d1 06       	cpc	r13, r17
    1aa2:	e2 06       	cpc	r14, r18
    1aa4:	f3 06       	cpc	r15, r19
    1aa6:	30 f0       	brcs	.+12     	; 0x1ab4 <xTaskCheckForTimeOut+0x80>
    1aa8:	10 82       	st	Z, r1
    1aaa:	11 82       	std	Z+1, r1	; 0x01
    1aac:	12 82       	std	Z+2, r1	; 0x02
    1aae:	13 82       	std	Z+3, r1	; 0x03
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	17 c0       	rjmp	.+46     	; 0x1ae2 <xTaskCheckForTimeOut+0xae>
    1ab4:	84 16       	cp	r8, r20
    1ab6:	95 06       	cpc	r9, r21
    1ab8:	a6 06       	cpc	r10, r22
    1aba:	b7 06       	cpc	r11, r23
    1abc:	58 f4       	brcc	.+22     	; 0x1ad4 <xTaskCheckForTimeOut+0xa0>
    1abe:	48 19       	sub	r20, r8
    1ac0:	59 09       	sbc	r21, r9
    1ac2:	6a 09       	sbc	r22, r10
    1ac4:	7b 09       	sbc	r23, r11
    1ac6:	40 83       	st	Z, r20
    1ac8:	51 83       	std	Z+1, r21	; 0x01
    1aca:	62 83       	std	Z+2, r22	; 0x02
    1acc:	73 83       	std	Z+3, r23	; 0x03
    1ace:	a1 df       	rcall	.-190    	; 0x1a12 <vTaskInternalSetTimeOutState>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	07 c0       	rjmp	.+14     	; 0x1ae2 <xTaskCheckForTimeOut+0xae>
    1ad4:	10 82       	st	Z, r1
    1ad6:	11 82       	std	Z+1, r1	; 0x01
    1ad8:	12 82       	std	Z+2, r1	; 0x02
    1ada:	13 82       	std	Z+3, r1	; 0x03
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	01 c0       	rjmp	.+2      	; 0x1ae2 <xTaskCheckForTimeOut+0xae>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	ff 90       	pop	r15
    1af0:	ef 90       	pop	r14
    1af2:	df 90       	pop	r13
    1af4:	cf 90       	pop	r12
    1af6:	bf 90       	pop	r11
    1af8:	af 90       	pop	r10
    1afa:	9f 90       	pop	r9
    1afc:	8f 90       	pop	r8
    1afe:	08 95       	ret

00001b00 <vTaskMissedYield>:
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	80 93 d7 0c 	sts	0x0CD7, r24	; 0x800cd7 <xYieldPending>
    1b06:	08 95       	ret

00001b08 <xTaskGetSchedulerState>:
    1b08:	80 91 dc 0c 	lds	r24, 0x0CDC	; 0x800cdc <xSchedulerRunning>
    1b0c:	88 23       	and	r24, r24
    1b0e:	31 f0       	breq	.+12     	; 0x1b1c <xTaskGetSchedulerState+0x14>
    1b10:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <uxSchedulerSuspended>
    1b14:	81 11       	cpse	r24, r1
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <xTaskGetSchedulerState+0x18>
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	08 95       	ret
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	08 95       	ret
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	08 95       	ret

00001b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1b2e:	89 2b       	or	r24, r25
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <xTaskPriorityDisinherit+0x10>
    1b32:	49 c0       	rjmp	.+146    	; 0x1bc6 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1b34:	86 a5       	ldd	r24, Z+46	; 0x2e
    1b36:	81 50       	subi	r24, 0x01	; 1
    1b38:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1b3a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b3c:	95 a5       	ldd	r25, Z+45	; 0x2d
    1b3e:	29 17       	cp	r18, r25
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <xTaskPriorityDisinherit+0x20>
    1b42:	43 c0       	rjmp	.+134    	; 0x1bca <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1b44:	81 11       	cpse	r24, r1
    1b46:	43 c0       	rjmp	.+134    	; 0x1bce <xTaskPriorityDisinherit+0xaa>
    1b48:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1b4a:	8f 01       	movw	r16, r30
    1b4c:	0e 5f       	subi	r16, 0xFE	; 254
    1b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b50:	c8 01       	movw	r24, r16
    1b52:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1b56:	ed a5       	ldd	r30, Y+45	; 0x2d
    1b58:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b5a:	8a e0       	ldi	r24, 0x0A	; 10
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a0 e0       	ldi	r26, 0x00	; 0
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	8e 1b       	sub	r24, r30
    1b64:	91 09       	sbc	r25, r1
    1b66:	a1 09       	sbc	r26, r1
    1b68:	b1 09       	sbc	r27, r1
    1b6a:	8e 87       	std	Y+14, r24	; 0x0e
    1b6c:	9f 87       	std	Y+15, r25	; 0x0f
    1b6e:	a8 8b       	std	Y+16, r26	; 0x10
    1b70:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1b72:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <uxTopReadyPriority>
    1b76:	8e 17       	cp	r24, r30
    1b78:	10 f4       	brcc	.+4      	; 0x1b7e <xTaskPriorityDisinherit+0x5a>
    1b7a:	e0 93 dd 0c 	sts	0x0CDD, r30	; 0x800cdd <uxTopReadyPriority>
    1b7e:	8b e0       	ldi	r24, 0x0B	; 11
    1b80:	8e 9f       	mul	r24, r30
    1b82:	f0 01       	movw	r30, r0
    1b84:	11 24       	eor	r1, r1
    1b86:	e1 5e       	subi	r30, 0xE1	; 225
    1b88:	f2 4f       	sbci	r31, 0xF2	; 242
    1b8a:	01 80       	ldd	r0, Z+1	; 0x01
    1b8c:	f2 81       	ldd	r31, Z+2	; 0x02
    1b8e:	e0 2d       	mov	r30, r0
    1b90:	ff 83       	std	Y+7, r31	; 0x07
    1b92:	ee 83       	std	Y+6, r30	; 0x06
    1b94:	26 81       	ldd	r18, Z+6	; 0x06
    1b96:	37 81       	ldd	r19, Z+7	; 0x07
    1b98:	39 87       	std	Y+9, r19	; 0x09
    1b9a:	28 87       	std	Y+8, r18	; 0x08
    1b9c:	a6 81       	ldd	r26, Z+6	; 0x06
    1b9e:	b7 81       	ldd	r27, Z+7	; 0x07
    1ba0:	15 96       	adiw	r26, 0x05	; 5
    1ba2:	1c 93       	st	X, r17
    1ba4:	0e 93       	st	-X, r16
    1ba6:	14 97       	sbiw	r26, 0x04	; 4
    1ba8:	17 83       	std	Z+7, r17	; 0x07
    1baa:	06 83       	std	Z+6, r16	; 0x06
    1bac:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bae:	8e 9f       	mul	r24, r30
    1bb0:	f0 01       	movw	r30, r0
    1bb2:	11 24       	eor	r1, r1
    1bb4:	e1 5e       	subi	r30, 0xE1	; 225
    1bb6:	f2 4f       	sbci	r31, 0xF2	; 242
    1bb8:	fd 87       	std	Y+13, r31	; 0x0d
    1bba:	ec 87       	std	Y+12, r30	; 0x0c
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8f 5f       	subi	r24, 0xFF	; 255
    1bc0:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	03 c0       	rjmp	.+6      	; 0x1bd0 <xTaskPriorityDisinherit+0xac>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	01 c0       	rjmp	.+2      	; 0x1bd0 <xTaskPriorityDisinherit+0xac>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	08 95       	ret

00001bda <prvGetNextExpireTime>:
    1bda:	dc 01       	movw	r26, r24
    1bdc:	e0 91 99 0d 	lds	r30, 0x0D99	; 0x800d99 <pxCurrentTimerList>
    1be0:	f0 91 9a 0d 	lds	r31, 0x0D9A	; 0x800d9a <pxCurrentTimerList+0x1>
    1be4:	80 81       	ld	r24, Z
    1be6:	91 e0       	ldi	r25, 0x01	; 1
    1be8:	81 11       	cpse	r24, r1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9c 93       	st	X, r25
    1bee:	91 11       	cpse	r25, r1
    1bf0:	08 c0       	rjmp	.+16     	; 0x1c02 <prvGetNextExpireTime+0x28>
    1bf2:	07 80       	ldd	r0, Z+7	; 0x07
    1bf4:	f0 85       	ldd	r31, Z+8	; 0x08
    1bf6:	e0 2d       	mov	r30, r0
    1bf8:	60 81       	ld	r22, Z
    1bfa:	71 81       	ldd	r23, Z+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	08 95       	ret
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	cb 01       	movw	r24, r22
    1c08:	08 95       	ret

00001c0a <prvInsertTimerInActiveList>:
    1c0a:	cf 92       	push	r12
    1c0c:	df 92       	push	r13
    1c0e:	ef 92       	push	r14
    1c10:	ff 92       	push	r15
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	fc 01       	movw	r30, r24
    1c18:	42 83       	std	Z+2, r20	; 0x02
    1c1a:	53 83       	std	Z+3, r21	; 0x03
    1c1c:	64 83       	std	Z+4, r22	; 0x04
    1c1e:	75 83       	std	Z+5, r23	; 0x05
    1c20:	93 87       	std	Z+11, r25	; 0x0b
    1c22:	82 87       	std	Z+10, r24	; 0x0a
    1c24:	04 17       	cp	r16, r20
    1c26:	15 07       	cpc	r17, r21
    1c28:	26 07       	cpc	r18, r22
    1c2a:	37 07       	cpc	r19, r23
    1c2c:	c0 f0       	brcs	.+48     	; 0x1c5e <prvInsertTimerInActiveList+0x54>
    1c2e:	0c 19       	sub	r16, r12
    1c30:	1d 09       	sbc	r17, r13
    1c32:	2e 09       	sbc	r18, r14
    1c34:	3f 09       	sbc	r19, r15
    1c36:	86 85       	ldd	r24, Z+14	; 0x0e
    1c38:	97 85       	ldd	r25, Z+15	; 0x0f
    1c3a:	a0 89       	ldd	r26, Z+16	; 0x10
    1c3c:	b1 89       	ldd	r27, Z+17	; 0x11
    1c3e:	08 17       	cp	r16, r24
    1c40:	19 07       	cpc	r17, r25
    1c42:	2a 07       	cpc	r18, r26
    1c44:	3b 07       	cpc	r19, r27
    1c46:	00 f5       	brcc	.+64     	; 0x1c88 <prvInsertTimerInActiveList+0x7e>
    1c48:	bf 01       	movw	r22, r30
    1c4a:	6e 5f       	subi	r22, 0xFE	; 254
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	80 91 97 0d 	lds	r24, 0x0D97	; 0x800d97 <pxOverflowTimerList>
    1c52:	90 91 98 0d 	lds	r25, 0x0D98	; 0x800d98 <pxOverflowTimerList+0x1>
    1c56:	0e 94 33 02 	call	0x466	; 0x466 <vListInsert>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	18 c0       	rjmp	.+48     	; 0x1c8e <prvInsertTimerInActiveList+0x84>
    1c5e:	0c 15       	cp	r16, r12
    1c60:	1d 05       	cpc	r17, r13
    1c62:	2e 05       	cpc	r18, r14
    1c64:	3f 05       	cpc	r19, r15
    1c66:	28 f4       	brcc	.+10     	; 0x1c72 <prvInsertTimerInActiveList+0x68>
    1c68:	4c 15       	cp	r20, r12
    1c6a:	5d 05       	cpc	r21, r13
    1c6c:	6e 05       	cpc	r22, r14
    1c6e:	7f 05       	cpc	r23, r15
    1c70:	68 f4       	brcc	.+26     	; 0x1c8c <prvInsertTimerInActiveList+0x82>
    1c72:	bf 01       	movw	r22, r30
    1c74:	6e 5f       	subi	r22, 0xFE	; 254
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	80 91 99 0d 	lds	r24, 0x0D99	; 0x800d99 <pxCurrentTimerList>
    1c7c:	90 91 9a 0d 	lds	r25, 0x0D9A	; 0x800d9a <pxCurrentTimerList+0x1>
    1c80:	0e 94 33 02 	call	0x466	; 0x466 <vListInsert>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <prvInsertTimerInActiveList+0x84>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <prvInsertTimerInActiveList+0x84>
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	cf 90       	pop	r12
    1c9a:	08 95       	ret

00001c9c <prvCheckForValidListAndQueue>:
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	0f 92       	push	r0
    1ca2:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <xTimerQueue>
    1ca6:	90 91 96 0d 	lds	r25, 0x0D96	; 0x800d96 <xTimerQueue+0x1>
    1caa:	89 2b       	or	r24, r25
    1cac:	e9 f4       	brne	.+58     	; 0x1ce8 <prvCheckForValidListAndQueue+0x4c>
    1cae:	86 ea       	ldi	r24, 0xA6	; 166
    1cb0:	9d e0       	ldi	r25, 0x0D	; 13
    1cb2:	0e 94 1e 02 	call	0x43c	; 0x43c <vListInitialise>
    1cb6:	8b e9       	ldi	r24, 0x9B	; 155
    1cb8:	9d e0       	ldi	r25, 0x0D	; 13
    1cba:	0e 94 1e 02 	call	0x43c	; 0x43c <vListInitialise>
    1cbe:	86 ea       	ldi	r24, 0xA6	; 166
    1cc0:	9d e0       	ldi	r25, 0x0D	; 13
    1cc2:	90 93 9a 0d 	sts	0x0D9A, r25	; 0x800d9a <pxCurrentTimerList+0x1>
    1cc6:	80 93 99 0d 	sts	0x0D99, r24	; 0x800d99 <pxCurrentTimerList>
    1cca:	8b e9       	ldi	r24, 0x9B	; 155
    1ccc:	9d e0       	ldi	r25, 0x0D	; 13
    1cce:	90 93 98 0d 	sts	0x0D98, r25	; 0x800d98 <pxOverflowTimerList+0x1>
    1cd2:	80 93 97 0d 	sts	0x0D97, r24	; 0x800d97 <pxOverflowTimerList>
    1cd6:	40 e0       	ldi	r20, 0x00	; 0
    1cd8:	67 e0       	ldi	r22, 0x07	; 7
    1cda:	8a e0       	ldi	r24, 0x0A	; 10
    1cdc:	0e 94 ce 04 	call	0x99c	; 0x99c <xQueueGenericCreate>
    1ce0:	90 93 96 0d 	sts	0x0D96, r25	; 0x800d96 <xTimerQueue+0x1>
    1ce4:	80 93 95 0d 	sts	0x0D95, r24	; 0x800d95 <xTimerQueue>
    1ce8:	0f 90       	pop	r0
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	08 95       	ret

00001cee <xTimerCreateTimerTask>:
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	d3 df       	rcall	.-90     	; 0x1c9c <prvCheckForValidListAndQueue>
    1cf6:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <xTimerQueue>
    1cfa:	90 91 96 0d 	lds	r25, 0x0D96	; 0x800d96 <xTimerQueue+0x1>
    1cfe:	89 2b       	or	r24, r25
    1d00:	89 f0       	breq	.+34     	; 0x1d24 <xTimerCreateTimerTask+0x36>
    1d02:	0f 2e       	mov	r0, r31
    1d04:	f3 e9       	ldi	r31, 0x93	; 147
    1d06:	ef 2e       	mov	r14, r31
    1d08:	fd e0       	ldi	r31, 0x0D	; 13
    1d0a:	ff 2e       	mov	r15, r31
    1d0c:	f0 2d       	mov	r31, r0
    1d0e:	03 e0       	ldi	r16, 0x03	; 3
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 ec       	ldi	r20, 0xC0	; 192
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	6c e5       	ldi	r22, 0x5C	; 92
    1d1a:	72 e0       	ldi	r23, 0x02	; 2
    1d1c:	85 e8       	ldi	r24, 0x85	; 133
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	f1 d9       	rcall	.-3102   	; 0x1104 <xTaskCreate>
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <xTimerCreateTimerTask+0x38>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	08 95       	ret

00001d2e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1d2e:	8f 92       	push	r8
    1d30:	9f 92       	push	r9
    1d32:	af 92       	push	r10
    1d34:	bf 92       	push	r11
    1d36:	cf 92       	push	r12
    1d38:	df 92       	push	r13
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	27 97       	sbiw	r28, 0x07	; 7
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1d56:	e0 91 95 0d 	lds	r30, 0x0D95	; 0x800d95 <xTimerQueue>
    1d5a:	f0 91 96 0d 	lds	r31, 0x0D96	; 0x800d96 <xTimerQueue+0x1>
    1d5e:	30 97       	sbiw	r30, 0x00	; 0
    1d60:	81 f1       	breq	.+96     	; 0x1dc2 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1d62:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1d64:	2a 83       	std	Y+2, r18	; 0x02
    1d66:	3b 83       	std	Y+3, r19	; 0x03
    1d68:	4c 83       	std	Y+4, r20	; 0x04
    1d6a:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1d6c:	9f 83       	std	Y+7, r25	; 0x07
    1d6e:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1d70:	66 30       	cpi	r22, 0x06	; 6
    1d72:	f4 f4       	brge	.+60     	; 0x1db0 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1d74:	c9 de       	rcall	.-622    	; 0x1b08 <xTaskGetSchedulerState>
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	69 f4       	brne	.+26     	; 0x1d94 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1d7a:	00 e0       	ldi	r16, 0x00	; 0
    1d7c:	a7 01       	movw	r20, r14
    1d7e:	96 01       	movw	r18, r12
    1d80:	be 01       	movw	r22, r28
    1d82:	6f 5f       	subi	r22, 0xFF	; 255
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <xTimerQueue>
    1d8a:	90 91 96 0d 	lds	r25, 0x0D96	; 0x800d96 <xTimerQueue+0x1>
    1d8e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <xQueueGenericSend>
    1d92:	18 c0       	rjmp	.+48     	; 0x1dc4 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1d94:	00 e0       	ldi	r16, 0x00	; 0
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	a9 01       	movw	r20, r18
    1d9c:	be 01       	movw	r22, r28
    1d9e:	6f 5f       	subi	r22, 0xFF	; 255
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <xTimerQueue>
    1da6:	90 91 96 0d 	lds	r25, 0x0D96	; 0x800d96 <xTimerQueue+0x1>
    1daa:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <xQueueGenericSend>
    1dae:	0a c0       	rjmp	.+20     	; 0x1dc4 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	a8 01       	movw	r20, r16
    1db4:	be 01       	movw	r22, r28
    1db6:	6f 5f       	subi	r22, 0xFF	; 255
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	cf 01       	movw	r24, r30
    1dbc:	0e 94 9a 05 	call	0xb34	; 0xb34 <xQueueGenericSendFromISR>
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1dc4:	27 96       	adiw	r28, 0x07	; 7
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	ff 90       	pop	r15
    1dda:	ef 90       	pop	r14
    1ddc:	df 90       	pop	r13
    1dde:	cf 90       	pop	r12
    1de0:	bf 90       	pop	r11
    1de2:	af 90       	pop	r10
    1de4:	9f 90       	pop	r9
    1de6:	8f 90       	pop	r8
    1de8:	08 95       	ret

00001dea <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    1dea:	8f 92       	push	r8
    1dec:	9f 92       	push	r9
    1dee:	af 92       	push	r10
    1df0:	bf 92       	push	r11
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1e02:	3b c0       	rjmp	.+118    	; 0x1e7a <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1e04:	07 80       	ldd	r0, Z+7	; 0x07
    1e06:	f0 85       	ldd	r31, Z+8	; 0x08
    1e08:	e0 2d       	mov	r30, r0
    1e0a:	80 80       	ld	r8, Z
    1e0c:	91 80       	ldd	r9, Z+1	; 0x01
    1e0e:	a2 80       	ldd	r10, Z+2	; 0x02
    1e10:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1e12:	c0 85       	ldd	r28, Z+8	; 0x08
    1e14:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1e16:	8e 01       	movw	r16, r28
    1e18:	0e 5f       	subi	r16, 0xFE	; 254
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1e22:	ec 89       	ldd	r30, Y+20	; 0x14
    1e24:	fd 89       	ldd	r31, Y+21	; 0x15
    1e26:	ce 01       	movw	r24, r28
    1e28:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1e2a:	8e 89       	ldd	r24, Y+22	; 0x16
    1e2c:	82 ff       	sbrs	r24, 2
    1e2e:	25 c0       	rjmp	.+74     	; 0x1e7a <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1e30:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e32:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e34:	a8 89       	ldd	r26, Y+16	; 0x10
    1e36:	b9 89       	ldd	r27, Y+17	; 0x11
    1e38:	88 0d       	add	r24, r8
    1e3a:	99 1d       	adc	r25, r9
    1e3c:	aa 1d       	adc	r26, r10
    1e3e:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    1e40:	88 16       	cp	r8, r24
    1e42:	99 06       	cpc	r9, r25
    1e44:	aa 06       	cpc	r10, r26
    1e46:	bb 06       	cpc	r11, r27
    1e48:	70 f4       	brcc	.+28     	; 0x1e66 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	9b 83       	std	Y+3, r25	; 0x03
    1e4e:	ac 83       	std	Y+4, r26	; 0x04
    1e50:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1e52:	db 87       	std	Y+11, r29	; 0x0b
    1e54:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1e56:	b8 01       	movw	r22, r16
    1e58:	80 91 99 0d 	lds	r24, 0x0D99	; 0x800d99 <pxCurrentTimerList>
    1e5c:	90 91 9a 0d 	lds	r25, 0x0D9A	; 0x800d9a <pxCurrentTimerList+0x1>
    1e60:	0e 94 33 02 	call	0x466	; 0x466 <vListInsert>
    1e64:	0a c0       	rjmp	.+20     	; 0x1e7a <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1e66:	c1 2c       	mov	r12, r1
    1e68:	d1 2c       	mov	r13, r1
    1e6a:	76 01       	movw	r14, r12
    1e6c:	00 e0       	ldi	r16, 0x00	; 0
    1e6e:	10 e0       	ldi	r17, 0x00	; 0
    1e70:	a5 01       	movw	r20, r10
    1e72:	94 01       	movw	r18, r8
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	ce 01       	movw	r24, r28
    1e78:	5a df       	rcall	.-332    	; 0x1d2e <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1e7a:	e0 91 99 0d 	lds	r30, 0x0D99	; 0x800d99 <pxCurrentTimerList>
    1e7e:	f0 91 9a 0d 	lds	r31, 0x0D9A	; 0x800d9a <pxCurrentTimerList+0x1>
    1e82:	80 81       	ld	r24, Z
    1e84:	81 11       	cpse	r24, r1
    1e86:	be cf       	rjmp	.-132    	; 0x1e04 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1e88:	80 91 97 0d 	lds	r24, 0x0D97	; 0x800d97 <pxOverflowTimerList>
    1e8c:	90 91 98 0d 	lds	r25, 0x0D98	; 0x800d98 <pxOverflowTimerList+0x1>
    1e90:	90 93 9a 0d 	sts	0x0D9A, r25	; 0x800d9a <pxCurrentTimerList+0x1>
    1e94:	80 93 99 0d 	sts	0x0D99, r24	; 0x800d99 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    1e98:	f0 93 98 0d 	sts	0x0D98, r31	; 0x800d98 <pxOverflowTimerList+0x1>
    1e9c:	e0 93 97 0d 	sts	0x0D97, r30	; 0x800d97 <pxOverflowTimerList>
    }
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	ff 90       	pop	r15
    1eaa:	ef 90       	pop	r14
    1eac:	df 90       	pop	r13
    1eae:	cf 90       	pop	r12
    1eb0:	bf 90       	pop	r11
    1eb2:	af 90       	pop	r10
    1eb4:	9f 90       	pop	r9
    1eb6:	8f 90       	pop	r8
    1eb8:	08 95       	ret

00001eba <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1eba:	cf 92       	push	r12
    1ebc:	df 92       	push	r13
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1ec8:	a2 d9       	rcall	.-3260   	; 0x120e <xTaskGetTickCount>
    1eca:	6b 01       	movw	r12, r22
    1ecc:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    1ece:	80 91 8f 0d 	lds	r24, 0x0D8F	; 0x800d8f <xLastTime.2436>
    1ed2:	90 91 90 0d 	lds	r25, 0x0D90	; 0x800d90 <xLastTime.2436+0x1>
    1ed6:	a0 91 91 0d 	lds	r26, 0x0D91	; 0x800d91 <xLastTime.2436+0x2>
    1eda:	b0 91 92 0d 	lds	r27, 0x0D92	; 0x800d92 <xLastTime.2436+0x3>
    1ede:	c8 16       	cp	r12, r24
    1ee0:	d9 06       	cpc	r13, r25
    1ee2:	ea 06       	cpc	r14, r26
    1ee4:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    1ee6:	20 f4       	brcc	.+8      	; 0x1ef0 <prvSampleTimeNow+0x36>
    1ee8:	80 df       	rcall	.-256    	; 0x1dea <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	88 83       	st	Y, r24
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1ef0:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    1ef2:	c0 92 8f 0d 	sts	0x0D8F, r12	; 0x800d8f <xLastTime.2436>
    1ef6:	d0 92 90 0d 	sts	0x0D90, r13	; 0x800d90 <xLastTime.2436+0x1>
    1efa:	e0 92 91 0d 	sts	0x0D91, r14	; 0x800d91 <xLastTime.2436+0x2>
    1efe:	f0 92 92 0d 	sts	0x0D92, r15	; 0x800d92 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    1f02:	c7 01       	movw	r24, r14
    1f04:	b6 01       	movw	r22, r12
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	08 95       	ret

00001f14 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1f14:	4f 92       	push	r4
    1f16:	5f 92       	push	r5
    1f18:	6f 92       	push	r6
    1f1a:	7f 92       	push	r7
    1f1c:	8f 92       	push	r8
    1f1e:	9f 92       	push	r9
    1f20:	af 92       	push	r10
    1f22:	bf 92       	push	r11
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	4b 01       	movw	r8, r22
    1f36:	5c 01       	movw	r10, r24
    1f38:	29 01       	movw	r4, r18
    1f3a:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1f3c:	e0 91 99 0d 	lds	r30, 0x0D99	; 0x800d99 <pxCurrentTimerList>
    1f40:	f0 91 9a 0d 	lds	r31, 0x0D9A	; 0x800d9a <pxCurrentTimerList+0x1>
    1f44:	07 80       	ldd	r0, Z+7	; 0x07
    1f46:	f0 85       	ldd	r31, Z+8	; 0x08
    1f48:	e0 2d       	mov	r30, r0
    1f4a:	c0 85       	ldd	r28, Z+8	; 0x08
    1f4c:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1f4e:	ce 01       	movw	r24, r28
    1f50:	02 96       	adiw	r24, 0x02	; 2
    1f52:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1f56:	8e 89       	ldd	r24, Y+22	; 0x16
    1f58:	82 ff       	sbrs	r24, 2
    1f5a:	1b c0       	rjmp	.+54     	; 0x1f92 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    1f5c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f5e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f60:	68 89       	ldd	r22, Y+16	; 0x10
    1f62:	79 89       	ldd	r23, Y+17	; 0x11
    1f64:	48 0d       	add	r20, r8
    1f66:	59 1d       	adc	r21, r9
    1f68:	6a 1d       	adc	r22, r10
    1f6a:	7b 1d       	adc	r23, r11
    1f6c:	75 01       	movw	r14, r10
    1f6e:	64 01       	movw	r12, r8
    1f70:	93 01       	movw	r18, r6
    1f72:	82 01       	movw	r16, r4
    1f74:	ce 01       	movw	r24, r28
    1f76:	49 de       	rcall	.-878    	; 0x1c0a <prvInsertTimerInActiveList>
    1f78:	88 23       	and	r24, r24
    1f7a:	69 f0       	breq	.+26     	; 0x1f96 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1f7c:	c1 2c       	mov	r12, r1
    1f7e:	d1 2c       	mov	r13, r1
    1f80:	76 01       	movw	r14, r12
    1f82:	00 e0       	ldi	r16, 0x00	; 0
    1f84:	10 e0       	ldi	r17, 0x00	; 0
    1f86:	a5 01       	movw	r20, r10
    1f88:	94 01       	movw	r18, r8
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	cf de       	rcall	.-610    	; 0x1d2e <xTimerGenericCommand>
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    1f92:	8e 7f       	andi	r24, 0xFE	; 254
    1f94:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1f96:	ec 89       	ldd	r30, Y+20	; 0x14
    1f98:	fd 89       	ldd	r31, Y+21	; 0x15
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	19 95       	eicall
    }
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	ff 90       	pop	r15
    1fa8:	ef 90       	pop	r14
    1faa:	df 90       	pop	r13
    1fac:	cf 90       	pop	r12
    1fae:	bf 90       	pop	r11
    1fb0:	af 90       	pop	r10
    1fb2:	9f 90       	pop	r9
    1fb4:	8f 90       	pop	r8
    1fb6:	7f 90       	pop	r7
    1fb8:	6f 90       	pop	r6
    1fba:	5f 90       	pop	r5
    1fbc:	4f 90       	pop	r4
    1fbe:	08 95       	ret

00001fc0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    1fc0:	8f 92       	push	r8
    1fc2:	9f 92       	push	r9
    1fc4:	af 92       	push	r10
    1fc6:	bf 92       	push	r11
    1fc8:	cf 92       	push	r12
    1fca:	df 92       	push	r13
    1fcc:	ef 92       	push	r14
    1fce:	ff 92       	push	r15
    1fd0:	1f 93       	push	r17
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	1f 92       	push	r1
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	6b 01       	movw	r12, r22
    1fde:	7c 01       	movw	r14, r24
    1fe0:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1fe2:	0f d9       	rcall	.-3554   	; 0x1202 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	68 df       	rcall	.-304    	; 0x1eba <prvSampleTimeNow>
    1fea:	4b 01       	movw	r8, r22
    1fec:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	81 11       	cpse	r24, r1
    1ff2:	2b c0       	rjmp	.+86     	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1ff4:	11 11       	cpse	r17, r1
    1ff6:	0c c0       	rjmp	.+24     	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    1ff8:	8c 14       	cp	r8, r12
    1ffa:	9d 04       	cpc	r9, r13
    1ffc:	ae 04       	cpc	r10, r14
    1ffe:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    2000:	38 f0       	brcs	.+14     	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    2002:	3f da       	rcall	.-2946   	; 0x1482 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2004:	a5 01       	movw	r20, r10
    2006:	94 01       	movw	r18, r8
    2008:	c7 01       	movw	r24, r14
    200a:	b6 01       	movw	r22, r12
    200c:	83 df       	rcall	.-250    	; 0x1f14 <prvProcessExpiredTimer>
    200e:	1e c0       	rjmp	.+60     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2010:	11 23       	and	r17, r17
    2012:	41 f0       	breq	.+16     	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2014:	e0 91 97 0d 	lds	r30, 0x0D97	; 0x800d97 <pxOverflowTimerList>
    2018:	f0 91 98 0d 	lds	r31, 0x0D98	; 0x800d98 <pxOverflowTimerList+0x1>
    201c:	80 81       	ld	r24, Z
    201e:	11 e0       	ldi	r17, 0x01	; 1
    2020:	81 11       	cpse	r24, r1
    2022:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2024:	b7 01       	movw	r22, r14
    2026:	a6 01       	movw	r20, r12
    2028:	48 19       	sub	r20, r8
    202a:	59 09       	sbc	r21, r9
    202c:	6a 09       	sbc	r22, r10
    202e:	7b 09       	sbc	r23, r11
    2030:	21 2f       	mov	r18, r17
    2032:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <xTimerQueue>
    2036:	90 91 96 0d 	lds	r25, 0x0D96	; 0x800d96 <xTimerQueue+0x1>
    203a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    203e:	21 da       	rcall	.-3006   	; 0x1482 <xTaskResumeAll>
    2040:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2042:	04 c0       	rjmp	.+8      	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2044:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2048:	01 c0       	rjmp	.+2      	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    204a:	1b da       	rcall	.-3018   	; 0x1482 <xTaskResumeAll>
            }
        }
    }
    204c:	0f 90       	pop	r0
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	ff 90       	pop	r15
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	08 95       	ret

00002066 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2066:	af 92       	push	r10
    2068:	bf 92       	push	r11
    206a:	cf 92       	push	r12
    206c:	df 92       	push	r13
    206e:	ef 92       	push	r14
    2070:	ff 92       	push	r15
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	28 97       	sbiw	r28, 0x08	; 8
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    208a:	82 c0       	rjmp	.+260    	; 0x2190 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	88 23       	and	r24, r24
    2090:	0c f4       	brge	.+2      	; 0x2094 <prvProcessReceivedCommands+0x2e>
    2092:	7e c0       	rjmp	.+252    	; 0x2190 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2094:	ae 80       	ldd	r10, Y+6	; 0x06
    2096:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2098:	d5 01       	movw	r26, r10
    209a:	1c 96       	adiw	r26, 0x0c	; 12
    209c:	8d 91       	ld	r24, X+
    209e:	9c 91       	ld	r25, X
    20a0:	1d 97       	sbiw	r26, 0x0d	; 13
    20a2:	89 2b       	or	r24, r25
    20a4:	21 f0       	breq	.+8      	; 0x20ae <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    20a6:	c5 01       	movw	r24, r10
    20a8:	02 96       	adiw	r24, 0x02	; 2
    20aa:	0e 94 70 02 	call	0x4e0	; 0x4e0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    20ae:	ce 01       	movw	r24, r28
    20b0:	08 96       	adiw	r24, 0x08	; 8
    20b2:	03 df       	rcall	.-506    	; 0x1eba <prvSampleTimeNow>
    20b4:	8b 01       	movw	r16, r22
    20b6:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    20b8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ba:	0e 2e       	mov	r0, r30
    20bc:	00 0c       	add	r0, r0
    20be:	ff 0b       	sbc	r31, r31
    20c0:	ea 30       	cpi	r30, 0x0A	; 10
    20c2:	f1 05       	cpc	r31, r1
    20c4:	08 f0       	brcs	.+2      	; 0x20c8 <prvProcessReceivedCommands+0x62>
    20c6:	64 c0       	rjmp	.+200    	; 0x2190 <prvProcessReceivedCommands+0x12a>
    20c8:	88 27       	eor	r24, r24
    20ca:	ee 58       	subi	r30, 0x8E	; 142
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	8f 4f       	sbci	r24, 0xFF	; 255
    20d0:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    20d4:	f5 01       	movw	r30, r10
    20d6:	86 89       	ldd	r24, Z+22	; 0x16
    20d8:	81 60       	ori	r24, 0x01	; 1
    20da:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    20dc:	ca 80       	ldd	r12, Y+2	; 0x02
    20de:	db 80       	ldd	r13, Y+3	; 0x03
    20e0:	ec 80       	ldd	r14, Y+4	; 0x04
    20e2:	fd 80       	ldd	r15, Y+5	; 0x05
    20e4:	46 85       	ldd	r20, Z+14	; 0x0e
    20e6:	57 85       	ldd	r21, Z+15	; 0x0f
    20e8:	60 89       	ldd	r22, Z+16	; 0x10
    20ea:	71 89       	ldd	r23, Z+17	; 0x11
    20ec:	4c 0d       	add	r20, r12
    20ee:	5d 1d       	adc	r21, r13
    20f0:	6e 1d       	adc	r22, r14
    20f2:	7f 1d       	adc	r23, r15
    20f4:	c5 01       	movw	r24, r10
    20f6:	89 dd       	rcall	.-1262   	; 0x1c0a <prvInsertTimerInActiveList>
    20f8:	88 23       	and	r24, r24
    20fa:	09 f4       	brne	.+2      	; 0x20fe <prvProcessReceivedCommands+0x98>
    20fc:	49 c0       	rjmp	.+146    	; 0x2190 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    20fe:	d5 01       	movw	r26, r10
    2100:	54 96       	adiw	r26, 0x14	; 20
    2102:	ed 91       	ld	r30, X+
    2104:	fc 91       	ld	r31, X
    2106:	55 97       	sbiw	r26, 0x15	; 21
    2108:	c5 01       	movw	r24, r10
    210a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    210c:	f5 01       	movw	r30, r10
    210e:	86 89       	ldd	r24, Z+22	; 0x16
    2110:	82 ff       	sbrs	r24, 2
    2112:	3e c0       	rjmp	.+124    	; 0x2190 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2114:	4a 81       	ldd	r20, Y+2	; 0x02
    2116:	5b 81       	ldd	r21, Y+3	; 0x03
    2118:	6c 81       	ldd	r22, Y+4	; 0x04
    211a:	7d 81       	ldd	r23, Y+5	; 0x05
    211c:	86 85       	ldd	r24, Z+14	; 0x0e
    211e:	97 85       	ldd	r25, Z+15	; 0x0f
    2120:	a0 89       	ldd	r26, Z+16	; 0x10
    2122:	b1 89       	ldd	r27, Z+17	; 0x11
    2124:	9a 01       	movw	r18, r20
    2126:	ab 01       	movw	r20, r22
    2128:	28 0f       	add	r18, r24
    212a:	39 1f       	adc	r19, r25
    212c:	4a 1f       	adc	r20, r26
    212e:	5b 1f       	adc	r21, r27
    2130:	c1 2c       	mov	r12, r1
    2132:	d1 2c       	mov	r13, r1
    2134:	76 01       	movw	r14, r12
    2136:	00 e0       	ldi	r16, 0x00	; 0
    2138:	10 e0       	ldi	r17, 0x00	; 0
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	c5 01       	movw	r24, r10
    213e:	f7 dd       	rcall	.-1042   	; 0x1d2e <xTimerGenericCommand>
    2140:	27 c0       	rjmp	.+78     	; 0x2190 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2142:	d5 01       	movw	r26, r10
    2144:	56 96       	adiw	r26, 0x16	; 22
    2146:	8c 91       	ld	r24, X
    2148:	56 97       	sbiw	r26, 0x16	; 22
    214a:	8e 7f       	andi	r24, 0xFE	; 254
    214c:	56 96       	adiw	r26, 0x16	; 22
    214e:	8c 93       	st	X, r24
                        break;
    2150:	1f c0       	rjmp	.+62     	; 0x2190 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2152:	f5 01       	movw	r30, r10
    2154:	86 89       	ldd	r24, Z+22	; 0x16
    2156:	81 60       	ori	r24, 0x01	; 1
    2158:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    215a:	4a 81       	ldd	r20, Y+2	; 0x02
    215c:	5b 81       	ldd	r21, Y+3	; 0x03
    215e:	6c 81       	ldd	r22, Y+4	; 0x04
    2160:	7d 81       	ldd	r23, Y+5	; 0x05
    2162:	46 87       	std	Z+14, r20	; 0x0e
    2164:	57 87       	std	Z+15, r21	; 0x0f
    2166:	60 8b       	std	Z+16, r22	; 0x10
    2168:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    216a:	40 0f       	add	r20, r16
    216c:	51 1f       	adc	r21, r17
    216e:	62 1f       	adc	r22, r18
    2170:	73 1f       	adc	r23, r19
    2172:	68 01       	movw	r12, r16
    2174:	79 01       	movw	r14, r18
    2176:	c5 01       	movw	r24, r10
    2178:	48 dd       	rcall	.-1392   	; 0x1c0a <prvInsertTimerInActiveList>
                        break;
    217a:	0a c0       	rjmp	.+20     	; 0x2190 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    217c:	f5 01       	movw	r30, r10
    217e:	86 89       	ldd	r24, Z+22	; 0x16
    2180:	81 fd       	sbrc	r24, 1
    2182:	04 c0       	rjmp	.+8      	; 0x218c <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2184:	c5 01       	movw	r24, r10
    2186:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <vPortFree>
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    218c:	8e 7f       	andi	r24, 0xFE	; 254
    218e:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	a9 01       	movw	r20, r18
    2196:	be 01       	movw	r22, r28
    2198:	6f 5f       	subi	r22, 0xFF	; 255
    219a:	7f 4f       	sbci	r23, 0xFF	; 255
    219c:	80 91 95 0d 	lds	r24, 0x0D95	; 0x800d95 <xTimerQueue>
    21a0:	90 91 96 0d 	lds	r25, 0x0D96	; 0x800d96 <xTimerQueue+0x1>
    21a4:	0e 94 d4 05 	call	0xba8	; 0xba8 <xQueueReceive>
    21a8:	81 11       	cpse	r24, r1
    21aa:	70 cf       	rjmp	.-288    	; 0x208c <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    21ac:	28 96       	adiw	r28, 0x08	; 8
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	df 90       	pop	r13
    21c6:	cf 90       	pop	r12
    21c8:	bf 90       	pop	r11
    21ca:	af 90       	pop	r10
    21cc:	08 95       	ret

000021ce <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    21ce:	08 95       	ret

000021d0 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    21d0:	84 b1       	in	r24, 0x04	; 4
    21d2:	80 68       	ori	r24, 0x80	; 128
    21d4:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    21d6:	85 b1       	in	r24, 0x05	; 5
    21d8:	80 68       	ori	r24, 0x80	; 128
    21da:	85 b9       	out	0x05, r24	; 5
    21dc:	08 95       	ret

000021de <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    21de:	83 b1       	in	r24, 0x03	; 3
    21e0:	80 68       	ori	r24, 0x80	; 128
    21e2:	83 b9       	out	0x03, r24	; 3
    21e4:	08 95       	ret

000021e6 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    21e6:	f4 df       	rcall	.-24     	; 0x21d0 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21e8:	2f ef       	ldi	r18, 0xFF	; 255
    21ea:	80 e7       	ldi	r24, 0x70	; 112
    21ec:	92 e0       	ldi	r25, 0x02	; 2
    21ee:	21 50       	subi	r18, 0x01	; 1
    21f0:	80 40       	sbci	r24, 0x00	; 0
    21f2:	90 40       	sbci	r25, 0x00	; 0
    21f4:	e1 f7       	brne	.-8      	; 0x21ee <vApplicationMallocFailedHook+0x8>
    21f6:	00 c0       	rjmp	.+0      	; 0x21f8 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    21f8:	00 00       	nop
    21fa:	f1 df       	rcall	.-30     	; 0x21de <prvBlinkMainLed>
    21fc:	f5 cf       	rjmp	.-22     	; 0x21e8 <vApplicationMallocFailedHook+0x2>

000021fe <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    21fe:	e8 df       	rcall	.-48     	; 0x21d0 <prvSetMainLedOn>
    2200:	2f ef       	ldi	r18, 0xFF	; 255
    2202:	87 ea       	ldi	r24, 0xA7	; 167
    2204:	91 e6       	ldi	r25, 0x61	; 97
    2206:	21 50       	subi	r18, 0x01	; 1
    2208:	80 40       	sbci	r24, 0x00	; 0
    220a:	90 40       	sbci	r25, 0x00	; 0
    220c:	e1 f7       	brne	.-8      	; 0x2206 <__stack+0x7>
    220e:	00 c0       	rjmp	.+0      	; 0x2210 <__stack+0x11>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2210:	00 00       	nop
    2212:	e5 df       	rcall	.-54     	; 0x21de <prvBlinkMainLed>
    2214:	f5 cf       	rjmp	.-22     	; 0x2200 <__stack+0x1>

00002216 <initializeQueues>:
#include "DataQueue.h"

QueueHandle_t xQueueCO2;

void initializeQueues() {
	xQueueCO2 = xQueueCreate(15, sizeof(uint16_t));
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	62 e0       	ldi	r22, 0x02	; 2
    221a:	8f e0       	ldi	r24, 0x0F	; 15
    221c:	0e 94 ce 04 	call	0x99c	; 0x99c <xQueueGenericCreate>
    2220:	90 93 df 0d 	sts	0x0DDF, r25	; 0x800ddf <xQueueCO2+0x1>
    2224:	80 93 de 0d 	sts	0x0DDE, r24	; 0x800dde <xQueueCO2>
    2228:	08 95       	ret

0000222a <enqueueCO2Measure>:
}

void enqueueCO2Measure(uint16_t ppm){
    222a:	0f 93       	push	r16
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	1f 92       	push	r1
    2232:	1f 92       	push	r1
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	9a 83       	std	Y+2, r25	; 0x02
    223a:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    223c:	00 e0       	ldi	r16, 0x00	; 0
    223e:	2f ef       	ldi	r18, 0xFF	; 255
    2240:	3f ef       	ldi	r19, 0xFF	; 255
    2242:	a9 01       	movw	r20, r18
    2244:	be 01       	movw	r22, r28
    2246:	6f 5f       	subi	r22, 0xFF	; 255
    2248:	7f 4f       	sbci	r23, 0xFF	; 255
    224a:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <xQueueCO2>
    224e:	90 91 df 0d 	lds	r25, 0x0DDF	; 0x800ddf <xQueueCO2+0x1>
    2252:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <xQueueGenericSend>
}
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	0f 91       	pop	r16
    2260:	08 95       	ret

00002262 <dequeueCO2Measure>:

uint16_t dequeueCO2Measure(){
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	1f 92       	push	r1
    2268:	1f 92       	push	r1
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	
	xQueueReceive(xQueueCO2, &ppm, 1500);
    226e:	2c ed       	ldi	r18, 0xDC	; 220
    2270:	35 e0       	ldi	r19, 0x05	; 5
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	be 01       	movw	r22, r28
    2278:	6f 5f       	subi	r22, 0xFF	; 255
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <xQueueCO2>
    2280:	90 91 df 0d 	lds	r25, 0x0DDF	; 0x800ddf <xQueueCO2+0x1>
    2284:	0e 94 d4 05 	call	0xba8	; 0xba8 <xQueueReceive>
	return ppm;
}
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <initializeSharedDataQueue>:
SharedDataWithReturnCode sharedDataWithReturnCode;
BaseType_t xStatus;

void initializeSharedDataQueue()
{
	xQueueShared = xQueueCreate(15, sizeof(SharedData));
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	62 e0       	ldi	r22, 0x02	; 2
    229a:	8f e0       	ldi	r24, 0x0F	; 15
    229c:	0e 94 ce 04 	call	0x99c	; 0x99c <xQueueGenericCreate>
    22a0:	90 93 e2 0d 	sts	0x0DE2, r25	; 0x800de2 <xQueueShared+0x1>
    22a4:	80 93 e1 0d 	sts	0x0DE1, r24	; 0x800de1 <xQueueShared>
    22a8:	08 95       	ret

000022aa <enqueueSharedData>:
}

void enqueueSharedData()
{
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	1f 92       	push	r1
    22b4:	1f 92       	push	r1
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	uint16_t co2 = dequeueCO2Measure();
    22ba:	d3 df       	rcall	.-90     	; 0x2262 <dequeueCO2Measure>
    22bc:	08 2f       	mov	r16, r24
    22be:	19 2f       	mov	r17, r25
	//uint16_t temp = dequeueTempMeasure();
	//uint16_t light = dequeueLightMeasure();
	printf("Enqueuing Shared Data CO2: %d \n" , co2);
    22c0:	9f 93       	push	r25
    22c2:	8f 93       	push	r24
    22c4:	84 e6       	ldi	r24, 0x64	; 100
    22c6:	92 e0       	ldi	r25, 0x02	; 2
    22c8:	9f 93       	push	r25
    22ca:	8f 93       	push	r24
    22cc:	0e 94 bf 1b 	call	0x377e	; 0x377e <printf>

	SharedData_t shared = pvPortMalloc(sizeof(SharedData)); //Allocation memory to SharedData
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 3a 01 	call	0x274	; 0x274 <pvPortMalloc>
    22d8:	9a 83       	std	Y+2, r25	; 0x02
    22da:	89 83       	std	Y+1, r24	; 0x01
	shared->co2 = co2;
    22dc:	fc 01       	movw	r30, r24
    22de:	00 83       	st	Z, r16
    22e0:	11 83       	std	Z+1, r17	; 0x01
	
	xQueueSend(xQueueShared, (void*)&shared, portMAX_DELAY);
    22e2:	00 e0       	ldi	r16, 0x00	; 0
    22e4:	2f ef       	ldi	r18, 0xFF	; 255
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	a9 01       	movw	r20, r18
    22ea:	be 01       	movw	r22, r28
    22ec:	6f 5f       	subi	r22, 0xFF	; 255
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	80 91 e1 0d 	lds	r24, 0x0DE1	; 0x800de1 <xQueueShared>
    22f4:	90 91 e2 0d 	lds	r25, 0x0DE2	; 0x800de2 <xQueueShared+0x1>
    22f8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <xQueueGenericSend>
}
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	08 95       	ret

00002312 <dequeueSharedData>:

SharedDataWithReturnCode_t dequeueSharedData()
{
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	1f 92       	push	r1
    2318:	1f 92       	push	r1
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
	SharedData_t received = &receiveSharedData;
    231e:	83 ee       	ldi	r24, 0xE3	; 227
    2320:	9d e0       	ldi	r25, 0x0D	; 13
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
	
	SharedDataWithReturnCode_t sharedDataToReturn = &sharedDataWithReturnCode;
	
	
	xStatus = xQueueReceive(xQueueShared, &received, (TickType_t) 10);
    2326:	2a e0       	ldi	r18, 0x0A	; 10
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	50 e0       	ldi	r21, 0x00	; 0
    232e:	be 01       	movw	r22, r28
    2330:	6f 5f       	subi	r22, 0xFF	; 255
    2332:	7f 4f       	sbci	r23, 0xFF	; 255
    2334:	80 91 e1 0d 	lds	r24, 0x0DE1	; 0x800de1 <xQueueShared>
    2338:	90 91 e2 0d 	lds	r25, 0x0DE2	; 0x800de2 <xQueueShared+0x1>
    233c:	0e 94 d4 05 	call	0xba8	; 0xba8 <xQueueReceive>
    2340:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <xStatus>
	
	if (xStatus == pdPASS){
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	41 f4       	brne	.+16     	; 0x2358 <dequeueSharedData+0x46>
		sharedDataToReturn->returnCode = OK;
    2348:	e5 ee       	ldi	r30, 0xE5	; 229
    234a:	fd e0       	ldi	r31, 0x0D	; 13
    234c:	10 82       	st	Z, r1
		sharedDataToReturn->sharedData = received;
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	9a 81       	ldd	r25, Y+2	; 0x02
    2352:	92 83       	std	Z+2, r25	; 0x02
    2354:	81 83       	std	Z+1, r24	; 0x01
    2356:	03 c0       	rjmp	.+6      	; 0x235e <dequeueSharedData+0x4c>
	}
	else {
		sharedDataToReturn->returnCode = ENDOFQUEUE;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	80 93 e5 0d 	sts	0x0DE5, r24	; 0x800de5 <sharedDataWithReturnCode>
	}
	
	vPortFree(received);
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <vPortFree>
	return sharedDataToReturn;
}
    2366:	85 ee       	ldi	r24, 0xE5	; 229
    2368:	9d e0       	ldi	r25, 0x0D	; 13
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	08 95       	ret

00002374 <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	00 d0       	rcall	.+0      	; 0x237a <task1+0x6>
    237a:	1f 92       	push	r1
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2500/portTICK_PERIOD_MS; // 2500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2380:	0e 94 07 09 	call	0x120e	; 0x120e <xTaskGetTickCount>
    2384:	69 83       	std	Y+1, r22	; 0x01
    2386:	7a 83       	std	Y+2, r23	; 0x02
    2388:	8b 83       	std	Y+3, r24	; 0x03
    238a:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    238c:	4c e9       	ldi	r20, 0x9C	; 156
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	60 e0       	ldi	r22, 0x00	; 0
    2392:	70 e0       	ldi	r23, 0x00	; 0
    2394:	ce 01       	movw	r24, r28
    2396:	01 96       	adiw	r24, 0x01	; 1
    2398:	50 d9       	rcall	.-3424   	; 0x163a <xTaskDelayUntil>
		co2Measure(); // Call CO2HandlerImpl to take measure
    239a:	0e 94 b9 00 	call	0x172	; 0x172 <co2Measure>
    239e:	f6 cf       	rjmp	.-20     	; 0x238c <task1+0x18>

000023a0 <task2>:
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <task2+0x6>
    23a6:	1f 92       	push	r1
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 3000/portTICK_PERIOD_MS; // 5500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    23ac:	0e 94 07 09 	call	0x120e	; 0x120e <xTaskGetTickCount>
    23b0:	69 83       	std	Y+1, r22	; 0x01
    23b2:	7a 83       	std	Y+2, r23	; 0x02
    23b4:	8b 83       	std	Y+3, r24	; 0x03
    23b6:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    23b8:	4b eb       	ldi	r20, 0xBB	; 187
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	ce 01       	movw	r24, r28
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	3a d9       	rcall	.-3468   	; 0x163a <xTaskDelayUntil>
		enqueueSharedData(); // Call SharedDataQueueImpl to enqueue the measures
    23c6:	71 df       	rcall	.-286    	; 0x22aa <enqueueSharedData>
    23c8:	f7 cf       	rjmp	.-18     	; 0x23b8 <task2+0x18>

000023ca <task3>:
    23ca:	cf 93       	push	r28
	}
}


void task3( void *pvParameters )
{
    23cc:	df 93       	push	r29
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	a2 97       	sbiw	r28, 0x22	; 34
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10000/portTICK_PERIOD_MS; // 10 s

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    23de:	0e 94 07 09 	call	0x120e	; 0x120e <xTaskGetTickCount>
    23e2:	69 83       	std	Y+1, r22	; 0x01
    23e4:	7a 83       	std	Y+2, r23	; 0x02
    23e6:	8b 83       	std	Y+3, r24	; 0x03
    23e8:	9c 83       	std	Y+4, r25	; 0x04
	
	SharedData_t sharedDataArray[15];
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    23ea:	41 e7       	ldi	r20, 0x71	; 113
    23ec:	52 e0       	ldi	r21, 0x02	; 2
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	70 e0       	ldi	r23, 0x00	; 0
    23f2:	ce 01       	movw	r24, r28
    23f4:	01 96       	adiw	r24, 0x01	; 1
    23f6:	21 d9       	rcall	.-3518   	; 0x163a <xTaskDelayUntil>
		int arrayIndex = 0;
		SharedDataWithReturnCode_t dequeueData;
		bool flag = true;
    23f8:	dd 24       	eor	r13, r13
    23fa:	d3 94       	inc	r13
	SharedData_t sharedDataArray[15];
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
		int arrayIndex = 0;
    23fc:	e1 2c       	mov	r14, r1
    23fe:	f1 2c       	mov	r15, r1
		SharedDataWithReturnCode_t dequeueData;
		bool flag = true;
		
		while(flag) {
			dequeueData = dequeueSharedData(); // Call SharedDataQueueImpl to dequeue the measures
    2400:	4e c0       	rjmp	.+156    	; 0x249e <task3+0xd4>
    2402:	87 df       	rcall	.-242    	; 0x2312 <dequeueSharedData>
    2404:	8c 01       	movw	r16, r24
			if (dequeueData->returnCode == OK)
    2406:	fc 01       	movw	r30, r24
    2408:	80 81       	ld	r24, Z
    240a:	81 11       	cpse	r24, r1
    240c:	13 c0       	rjmp	.+38     	; 0x2434 <task3+0x6a>
			{
				printf("Dequeueing OK \n");
    240e:	84 e8       	ldi	r24, 0x84	; 132
    2410:	92 e0       	ldi	r25, 0x02	; 2
    2412:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <puts>
				sharedDataArray[arrayIndex] = dequeueData->sharedData;
    2416:	f8 01       	movw	r30, r16
    2418:	81 81       	ldd	r24, Z+1	; 0x01
    241a:	92 81       	ldd	r25, Z+2	; 0x02
    241c:	f7 01       	movw	r30, r14
    241e:	ee 0f       	add	r30, r30
    2420:	ff 1f       	adc	r31, r31
    2422:	21 e0       	ldi	r18, 0x01	; 1
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	2c 0f       	add	r18, r28
    2428:	3d 1f       	adc	r19, r29
    242a:	e2 0f       	add	r30, r18
    242c:	f3 1f       	adc	r31, r19
    242e:	95 83       	std	Z+5, r25	; 0x05
    2430:	84 83       	std	Z+4, r24	; 0x04
    2432:	32 c0       	rjmp	.+100    	; 0x2498 <task3+0xce>
			}
			else if(dequeueData->returnCode == ENDOFQUEUE)
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	81 f5       	brne	.+96     	; 0x2498 <task3+0xce>
			{
				printf("Dequeueing ENDOFQUEUE \n");
    2438:	83 e9       	ldi	r24, 0x93	; 147
    243a:	92 e0       	ldi	r25, 0x02	; 2
    243c:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <puts>
				for(int i = 0; i < (sizeof(sharedDataArray) / sizeof(SharedData)); i++)
    2440:	00 e0       	ldi	r16, 0x00	; 0
    2442:	10 e0       	ldi	r17, 0x00	; 0
    2444:	25 c0       	rjmp	.+74     	; 0x2490 <task3+0xc6>
				{
					printf("i is: %d \n", i);
    2446:	1f 93       	push	r17
    2448:	0f 93       	push	r16
    244a:	8a ea       	ldi	r24, 0xAA	; 170
    244c:	92 e0       	ldi	r25, 0x02	; 2
    244e:	9f 93       	push	r25
    2450:	8f 93       	push	r24
    2452:	0e 94 bf 1b 	call	0x377e	; 0x377e <printf>
					printf("Sending to lorawan: %d \n", sharedDataArray[i]->co2);
    2456:	f8 01       	movw	r30, r16
    2458:	ee 0f       	add	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	8c 0f       	add	r24, r28
    2462:	9d 1f       	adc	r25, r29
    2464:	e8 0f       	add	r30, r24
    2466:	f9 1f       	adc	r31, r25
    2468:	04 80       	ldd	r0, Z+4	; 0x04
    246a:	f5 81       	ldd	r31, Z+5	; 0x05
    246c:	e0 2d       	mov	r30, r0
    246e:	81 81       	ldd	r24, Z+1	; 0x01
    2470:	8f 93       	push	r24
    2472:	80 81       	ld	r24, Z
    2474:	8f 93       	push	r24
    2476:	85 eb       	ldi	r24, 0xB5	; 181
    2478:	92 e0       	ldi	r25, 0x02	; 2
    247a:	9f 93       	push	r25
    247c:	8f 93       	push	r24
    247e:	0e 94 bf 1b 	call	0x377e	; 0x377e <printf>
				sharedDataArray[arrayIndex] = dequeueData->sharedData;
			}
			else if(dequeueData->returnCode == ENDOFQUEUE)
			{
				printf("Dequeueing ENDOFQUEUE \n");
				for(int i = 0; i < (sizeof(sharedDataArray) / sizeof(SharedData)); i++)
    2482:	0f 5f       	subi	r16, 0xFF	; 255
    2484:	1f 4f       	sbci	r17, 0xFF	; 255
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	0f 30       	cpi	r16, 0x0F	; 15
    2492:	11 05       	cpc	r17, r1
    2494:	c0 f2       	brcs	.-80     	; 0x2446 <task3+0x7c>
				{
					printf("i is: %d \n", i);
					printf("Sending to lorawan: %d \n", sharedDataArray[i]->co2);
				}
				flag = false;
    2496:	d1 2c       	mov	r13, r1
				// memset(sharedDataArray, 0, sizeof sharedDataArray);  JUST TO CLEAR MEMORY
			}
			arrayIndex++;
    2498:	ff ef       	ldi	r31, 0xFF	; 255
    249a:	ef 1a       	sub	r14, r31
    249c:	ff 0a       	sbc	r15, r31
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
		int arrayIndex = 0;
		SharedDataWithReturnCode_t dequeueData;
		bool flag = true;
		
		while(flag) {
    249e:	d1 10       	cpse	r13, r1
    24a0:	b0 cf       	rjmp	.-160    	; 0x2402 <task3+0x38>
    24a2:	a3 cf       	rjmp	.-186    	; 0x23ea <task3+0x20>

000024a4 <create_tasks_and_semaphores>:



/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    24a4:	ef 92       	push	r14
    24a6:	ff 92       	push	r15
    24a8:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    24aa:	80 91 ea 0d 	lds	r24, 0x0DEA	; 0x800dea <xTestSemaphore>
    24ae:	90 91 eb 0d 	lds	r25, 0x0DEB	; 0x800deb <xTestSemaphore+0x1>
    24b2:	89 2b       	or	r24, r25
    24b4:	89 f4       	brne	.+34     	; 0x24d8 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <xQueueCreateMutex>
    24bc:	90 93 eb 0d 	sts	0x0DEB, r25	; 0x800deb <xTestSemaphore+0x1>
    24c0:	80 93 ea 0d 	sts	0x0DEA, r24	; 0x800dea <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	41 f0       	breq	.+16     	; 0x24d8 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    24c8:	00 e0       	ldi	r16, 0x00	; 0
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	a9 01       	movw	r20, r18
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    24d8:	e1 2c       	mov	r14, r1
    24da:	f1 2c       	mov	r15, r1
    24dc:	02 e0       	ldi	r16, 0x02	; 2
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 ec       	ldi	r20, 0xC0	; 192
    24e4:	50 e0       	ldi	r21, 0x00	; 0
    24e6:	6e ec       	ldi	r22, 0xCE	; 206
    24e8:	72 e0       	ldi	r23, 0x02	; 2
    24ea:	8a eb       	ldi	r24, 0xBA	; 186
    24ec:	91 e1       	ldi	r25, 0x11	; 17
    24ee:	0e 94 82 08 	call	0x1104	; 0x1104 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    24f2:	01 e0       	ldi	r16, 0x01	; 1
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 ec       	ldi	r20, 0xC0	; 192
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	64 ed       	ldi	r22, 0xD4	; 212
    24fe:	72 e0       	ldi	r23, 0x02	; 2
    2500:	80 ed       	ldi	r24, 0xD0	; 208
    2502:	91 e1       	ldi	r25, 0x11	; 17
    2504:	0e 94 82 08 	call	0x1104	; 0x1104 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 ec       	ldi	r20, 0xC0	; 192
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	6a ed       	ldi	r22, 0xDA	; 218
    2512:	72 e0       	ldi	r23, 0x02	; 2
    2514:	85 ee       	ldi	r24, 0xE5	; 229
    2516:	91 e1       	ldi	r25, 0x11	; 17
    2518:	0e 94 82 08 	call	0x1104	; 0x1104 <xTaskCreate>
	,  "Task3"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	08 95       	ret

00002524 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2524:	81 b1       	in	r24, 0x01	; 1
    2526:	81 68       	ori	r24, 0x81	; 129
    2528:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	76 d4       	rcall	.+2284   	; 0x2e1a <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    252e:	ba df       	rcall	.-140    	; 0x24a4 <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    2530:	85 e0       	ldi	r24, 0x05	; 5
    2532:	7a d5       	rcall	.+2804   	; 0x3028 <status_leds_initialise>
	//lora_driver_initialise(1, NULL);
	// Create LoRaWAN task and start it up with priority 3
	//lora_handler_initialise(3);
	
	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    2534:	83 e0       	ldi	r24, 0x03	; 3
    2536:	66 d0       	rcall	.+204    	; 0x2604 <mh_z19_initialise>
	
	
	// Initialize queues
	initializeQueues();
    2538:	6e de       	rcall	.-804    	; 0x2216 <initializeQueues>
    253a:	ad ce       	rjmp	.-678    	; 0x2296 <initializeSharedDataQueue>
	initializeSharedDataQueue();
    253c:	08 95       	ret

0000253e <main>:
    253e:	f2 df       	rcall	.-28     	; 0x2524 <initialiseSystem>
    2540:	80 ee       	ldi	r24, 0xE0	; 224

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    2542:	92 e0       	ldi	r25, 0x02	; 2
    2544:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2548:	0e 94 cb 08 	call	0x1196	; 0x1196 <vTaskStartScheduler>
    254c:	ff cf       	rjmp	.-2      	; 0x254c <main+0xe>

0000254e <_serialCallBack>:
    254e:	80 91 b4 0d 	lds	r24, 0x0DB4	; 0x800db4 <crc_sum.1945>
    2552:	86 0f       	add	r24, r22
    2554:	80 93 b4 0d 	sts	0x0DB4, r24	; 0x800db4 <crc_sum.1945>
    2558:	90 91 b7 0d 	lds	r25, 0x0DB7	; 0x800db7 <_mh_state>
    255c:	91 30       	cpi	r25, 0x01	; 1
    255e:	79 f0       	breq	.+30     	; 0x257e <_serialCallBack+0x30>
    2560:	28 f0       	brcs	.+10     	; 0x256c <_serialCallBack+0x1e>
    2562:	92 30       	cpi	r25, 0x02	; 2
    2564:	a9 f0       	breq	.+42     	; 0x2590 <_serialCallBack+0x42>
    2566:	93 30       	cpi	r25, 0x03	; 3
    2568:	19 f1       	breq	.+70     	; 0x25b0 <_serialCallBack+0x62>
    256a:	08 95       	ret
    256c:	6f 3f       	cpi	r22, 0xFF	; 255
    256e:	09 f0       	breq	.+2      	; 0x2572 <_serialCallBack+0x24>
    2570:	48 c0       	rjmp	.+144    	; 0x2602 <_serialCallBack+0xb4>
    2572:	10 92 b4 0d 	sts	0x0DB4, r1	; 0x800db4 <crc_sum.1945>
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <_mh_state>
    257c:	08 95       	ret
    257e:	66 38       	cpi	r22, 0x86	; 134
    2580:	09 f0       	breq	.+2      	; 0x2584 <_serialCallBack+0x36>
    2582:	3f c0       	rjmp	.+126    	; 0x2602 <_serialCallBack+0xb4>
    2584:	10 92 b3 0d 	sts	0x0DB3, r1	; 0x800db3 <inDex.1943>
    2588:	82 e0       	ldi	r24, 0x02	; 2
    258a:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <_mh_state>
    258e:	08 95       	ret
    2590:	e0 91 b3 0d 	lds	r30, 0x0DB3	; 0x800db3 <inDex.1943>
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	8e 0f       	add	r24, r30
    2598:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <inDex.1943>
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	ef 54       	subi	r30, 0x4F	; 79
    25a0:	f2 4f       	sbci	r31, 0xF2	; 242
    25a2:	60 83       	st	Z, r22
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	69 f5       	brne	.+90     	; 0x2602 <_serialCallBack+0xb4>
    25a8:	83 e0       	ldi	r24, 0x03	; 3
    25aa:	80 93 b7 0d 	sts	0x0DB7, r24	; 0x800db7 <_mh_state>
    25ae:	08 95       	ret
    25b0:	90 91 b3 0d 	lds	r25, 0x0DB3	; 0x800db3 <inDex.1943>
    25b4:	21 e0       	ldi	r18, 0x01	; 1
    25b6:	29 0f       	add	r18, r25
    25b8:	20 93 b3 0d 	sts	0x0DB3, r18	; 0x800db3 <inDex.1943>
    25bc:	96 30       	cpi	r25, 0x06	; 6
    25be:	09 f5       	brne	.+66     	; 0x2602 <_serialCallBack+0xb4>
    25c0:	81 11       	cpse	r24, r1
    25c2:	0e c0       	rjmp	.+28     	; 0x25e0 <_serialCallBack+0x92>
    25c4:	e1 eb       	ldi	r30, 0xB1	; 177
    25c6:	fd e0       	ldi	r31, 0x0D	; 13
    25c8:	80 81       	ld	r24, Z
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	98 2f       	mov	r25, r24
    25ce:	88 27       	eor	r24, r24
    25d0:	21 81       	ldd	r18, Z+1	; 0x01
    25d2:	82 0f       	add	r24, r18
    25d4:	91 1d       	adc	r25, r1
    25d6:	90 93 b9 0d 	sts	0x0DB9, r25	; 0x800db9 <_ppm+0x1>
    25da:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <_ppm>
    25de:	04 c0       	rjmp	.+8      	; 0x25e8 <_serialCallBack+0x9a>
    25e0:	10 92 b9 0d 	sts	0x0DB9, r1	; 0x800db9 <_ppm+0x1>
    25e4:	10 92 b8 0d 	sts	0x0DB8, r1	; 0x800db8 <_ppm>
    25e8:	10 92 b7 0d 	sts	0x0DB7, r1	; 0x800db7 <_mh_state>
    25ec:	e0 91 b5 0d 	lds	r30, 0x0DB5	; 0x800db5 <_appCallBack>
    25f0:	f0 91 b6 0d 	lds	r31, 0x0DB6	; 0x800db6 <_appCallBack+0x1>
    25f4:	30 97       	sbiw	r30, 0x00	; 0
    25f6:	29 f0       	breq	.+10     	; 0x2602 <_serialCallBack+0xb4>
    25f8:	80 91 b8 0d 	lds	r24, 0x0DB8	; 0x800db8 <_ppm>
    25fc:	90 91 b9 0d 	lds	r25, 0x0DB9	; 0x800db9 <_ppm+0x1>
    2600:	19 95       	eicall
    2602:	08 95       	ret

00002604 <mh_z19_initialise>:
    2604:	8f 92       	push	r8
    2606:	9f 92       	push	r9
    2608:	af 92       	push	r10
    260a:	cf 92       	push	r12
    260c:	ef 92       	push	r14
    260e:	0f 93       	push	r16
    2610:	0f 2e       	mov	r0, r31
    2612:	f7 ea       	ldi	r31, 0xA7	; 167
    2614:	8f 2e       	mov	r8, r31
    2616:	f2 e1       	ldi	r31, 0x12	; 18
    2618:	9f 2e       	mov	r9, r31
    261a:	f0 2d       	mov	r31, r0
    261c:	68 94       	set
    261e:	aa 24       	eor	r10, r10
    2620:	a4 f8       	bld	r10, 4
    2622:	68 94       	set
    2624:	cc 24       	eor	r12, r12
    2626:	c4 f8       	bld	r12, 4
    2628:	e1 2c       	mov	r14, r1
    262a:	00 e0       	ldi	r16, 0x00	; 0
    262c:	23 e0       	ldi	r18, 0x03	; 3
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	55 e2       	ldi	r21, 0x25	; 37
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	3f d0       	rcall	.+126    	; 0x26b6 <serial_create>
    2638:	90 93 bb 0d 	sts	0x0DBB, r25	; 0x800dbb <_serial+0x1>
    263c:	80 93 ba 0d 	sts	0x0DBA, r24	; 0x800dba <_serial>
    2640:	0f 91       	pop	r16
    2642:	ef 90       	pop	r14
    2644:	cf 90       	pop	r12
    2646:	af 90       	pop	r10
    2648:	9f 90       	pop	r9
    264a:	8f 90       	pop	r8
    264c:	08 95       	ret

0000264e <mh_z19_injectCallBack>:
    264e:	90 93 b6 0d 	sts	0x0DB6, r25	; 0x800db6 <_appCallBack+0x1>
    2652:	80 93 b5 0d 	sts	0x0DB5, r24	; 0x800db5 <_appCallBack>
    2656:	08 95       	ret

00002658 <mh_z19_takeMeassuring>:
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	29 97       	sbiw	r28, 0x09	; 9
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	89 e0       	ldi	r24, 0x09	; 9
    266e:	ed e1       	ldi	r30, 0x1D	; 29
    2670:	f2 e0       	ldi	r31, 0x02	; 2
    2672:	9e 01       	movw	r18, r28
    2674:	2f 5f       	subi	r18, 0xFF	; 255
    2676:	3f 4f       	sbci	r19, 0xFF	; 255
    2678:	d9 01       	movw	r26, r18
    267a:	01 90       	ld	r0, Z+
    267c:	0d 92       	st	X+, r0
    267e:	8a 95       	dec	r24
    2680:	e1 f7       	brne	.-8      	; 0x267a <mh_z19_takeMeassuring+0x22>
    2682:	10 92 b9 0d 	sts	0x0DB9, r1	; 0x800db9 <_ppm+0x1>
    2686:	10 92 b8 0d 	sts	0x0DB8, r1	; 0x800db8 <_ppm>
    268a:	80 91 ba 0d 	lds	r24, 0x0DBA	; 0x800dba <_serial>
    268e:	90 91 bb 0d 	lds	r25, 0x0DBB	; 0x800dbb <_serial+0x1>
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	31 f0       	breq	.+12     	; 0x26a2 <mh_z19_takeMeassuring+0x4a>
    2696:	42 2f       	mov	r20, r18
    2698:	53 2f       	mov	r21, r19
    269a:	69 e0       	ldi	r22, 0x09	; 9
    269c:	d3 d0       	rcall	.+422    	; 0x2844 <serial_sendBytes>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	01 c0       	rjmp	.+2      	; 0x26a4 <mh_z19_takeMeassuring+0x4c>
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	29 96       	adiw	r28, 0x09	; 9
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	08 95       	ret

000026b6 <serial_create>:
    26b6:	2f 92       	push	r2
    26b8:	3f 92       	push	r3
    26ba:	4f 92       	push	r4
    26bc:	5f 92       	push	r5
    26be:	6f 92       	push	r6
    26c0:	7f 92       	push	r7
    26c2:	8f 92       	push	r8
    26c4:	9f 92       	push	r9
    26c6:	af 92       	push	r10
    26c8:	cf 92       	push	r12
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	f8 2e       	mov	r15, r24
    26dc:	2a 01       	movw	r4, r20
    26de:	3b 01       	movw	r6, r22
    26e0:	88 e0       	ldi	r24, 0x08	; 8
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	17 d7       	rcall	.+3630   	; 0x3514 <malloc>
    26e6:	8c 01       	movw	r16, r24
    26e8:	8f 2d       	mov	r24, r15
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	fc 01       	movw	r30, r24
    26ee:	ee 0f       	add	r30, r30
    26f0:	ff 1f       	adc	r31, r31
    26f2:	e4 54       	subi	r30, 0x44	; 68
    26f4:	f2 4f       	sbci	r31, 0xF2	; 242
    26f6:	11 83       	std	Z+1, r17	; 0x01
    26f8:	00 83       	st	Z, r16
    26fa:	01 15       	cp	r16, r1
    26fc:	11 05       	cpc	r17, r1
    26fe:	09 f4       	brne	.+2      	; 0x2702 <serial_create+0x4c>
    2700:	64 c0       	rjmp	.+200    	; 0x27ca <serial_create+0x114>
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	fc 01       	movw	r30, r24
    2708:	e9 5f       	subi	r30, 0xF9	; 249
    270a:	fd 4f       	sbci	r31, 0xFD	; 253
    270c:	80 81       	ld	r24, Z
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	d8 01       	movw	r26, r16
    2712:	8d 93       	st	X+, r24
    2714:	9c 93       	st	X, r25
    2716:	6c 2d       	mov	r22, r12
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	84 e0       	ldi	r24, 0x04	; 4
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	e0 d6       	rcall	.+3520   	; 0x34e0 <calloc>
    2720:	1c 01       	movw	r2, r24
    2722:	61 e0       	ldi	r22, 0x01	; 1
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	86 e0       	ldi	r24, 0x06	; 6
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	da d6       	rcall	.+3508   	; 0x34e0 <calloc>
    272c:	7c 01       	movw	r14, r24
    272e:	4c 2d       	mov	r20, r12
    2730:	b1 01       	movw	r22, r2
    2732:	c8 d4       	rcall	.+2448   	; 0x30c4 <fifo_init>
    2734:	f8 01       	movw	r30, r16
    2736:	f5 82       	std	Z+5, r15	; 0x05
    2738:	e4 82       	std	Z+4, r14	; 0x04
    273a:	6a 2d       	mov	r22, r10
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	84 e0       	ldi	r24, 0x04	; 4
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	ce d6       	rcall	.+3484   	; 0x34e0 <calloc>
    2744:	1c 01       	movw	r2, r24
    2746:	61 e0       	ldi	r22, 0x01	; 1
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	86 e0       	ldi	r24, 0x06	; 6
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	c8 d6       	rcall	.+3472   	; 0x34e0 <calloc>
    2750:	7c 01       	movw	r14, r24
    2752:	4a 2d       	mov	r20, r10
    2754:	b1 01       	movw	r22, r2
    2756:	b6 d4       	rcall	.+2412   	; 0x30c4 <fifo_init>
    2758:	d8 01       	movw	r26, r16
    275a:	13 96       	adiw	r26, 0x03	; 3
    275c:	fc 92       	st	X, r15
    275e:	ee 92       	st	-X, r14
    2760:	12 97       	sbiw	r26, 0x02	; 2
    2762:	17 96       	adiw	r26, 0x07	; 7
    2764:	9c 92       	st	X, r9
    2766:	8e 92       	st	-X, r8
    2768:	16 97       	sbiw	r26, 0x06	; 6
    276a:	ff b6       	in	r15, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	ed 91       	ld	r30, X+
    2770:	fc 91       	ld	r31, X
    2772:	11 97       	sbiw	r26, 0x01	; 1
    2774:	36 97       	sbiw	r30, 0x06	; 6
    2776:	80 81       	ld	r24, Z
    2778:	82 60       	ori	r24, 0x02	; 2
    277a:	80 83       	st	Z, r24
    277c:	8d 90       	ld	r8, X+
    277e:	9c 90       	ld	r9, X
    2780:	c3 01       	movw	r24, r6
    2782:	b2 01       	movw	r22, r4
    2784:	b4 d5       	rcall	.+2920   	; 0x32ee <__floatunsisf>
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	51 e4       	ldi	r21, 0x41	; 65
    278e:	3d d6       	rcall	.+3194   	; 0x340a <__mulsf3>
    2790:	9b 01       	movw	r18, r22
    2792:	ac 01       	movw	r20, r24
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	74 e2       	ldi	r23, 0x24	; 36
    2798:	84 e7       	ldi	r24, 0x74	; 116
    279a:	9b e4       	ldi	r25, 0x4B	; 75
    279c:	14 d5       	rcall	.+2600   	; 0x31c6 <__divsf3>
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e8       	ldi	r20, 0x80	; 128
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	aa d4       	rcall	.+2388   	; 0x30fc <__subsf3>
    27a8:	76 d5       	rcall	.+2796   	; 0x3296 <__fixunssfsi>
    27aa:	f4 01       	movw	r30, r8
    27ac:	32 97       	sbiw	r30, 0x02	; 2
    27ae:	60 83       	st	Z, r22
    27b0:	d8 01       	movw	r26, r16
    27b2:	ed 91       	ld	r30, X+
    27b4:	fc 91       	ld	r31, X
    27b6:	11 97       	sbiw	r26, 0x01	; 1
    27b8:	35 97       	sbiw	r30, 0x05	; 5
    27ba:	88 e9       	ldi	r24, 0x98	; 152
    27bc:	80 83       	st	Z, r24
    27be:	ed 91       	ld	r30, X+
    27c0:	fc 91       	ld	r31, X
    27c2:	34 97       	sbiw	r30, 0x04	; 4
    27c4:	86 e0       	ldi	r24, 0x06	; 6
    27c6:	80 83       	st	Z, r24
    27c8:	ff be       	out	0x3f, r15	; 63
    27ca:	c8 01       	movw	r24, r16
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	ff 90       	pop	r15
    27d6:	ef 90       	pop	r14
    27d8:	cf 90       	pop	r12
    27da:	af 90       	pop	r10
    27dc:	9f 90       	pop	r9
    27de:	8f 90       	pop	r8
    27e0:	7f 90       	pop	r7
    27e2:	6f 90       	pop	r6
    27e4:	5f 90       	pop	r5
    27e6:	4f 90       	pop	r4
    27e8:	3f 90       	pop	r3
    27ea:	2f 90       	pop	r2
    27ec:	08 95       	ret

000027ee <serial_sendByte>:
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	dc 01       	movw	r26, r24
    27f4:	89 2b       	or	r24, r25
    27f6:	01 f1       	breq	.+64     	; 0x2838 <serial_sendByte+0x4a>
    27f8:	12 96       	adiw	r26, 0x02	; 2
    27fa:	ed 91       	ld	r30, X+
    27fc:	fc 91       	ld	r31, X
    27fe:	13 97       	sbiw	r26, 0x03	; 3
    2800:	93 81       	ldd	r25, Z+3	; 0x03
    2802:	82 81       	ldd	r24, Z+2	; 0x02
    2804:	25 81       	ldd	r18, Z+5	; 0x05
    2806:	98 1b       	sub	r25, r24
    2808:	92 23       	and	r25, r18
    280a:	84 81       	ldd	r24, Z+4	; 0x04
    280c:	98 17       	cp	r25, r24
    280e:	b1 f0       	breq	.+44     	; 0x283c <serial_sendByte+0x4e>
    2810:	83 81       	ldd	r24, Z+3	; 0x03
    2812:	26 95       	lsr	r18
    2814:	28 23       	and	r18, r24
    2816:	c0 81       	ld	r28, Z
    2818:	d1 81       	ldd	r29, Z+1	; 0x01
    281a:	c2 0f       	add	r28, r18
    281c:	d1 1d       	adc	r29, r1
    281e:	68 83       	st	Y, r22
    2820:	8f 5f       	subi	r24, 0xFF	; 255
    2822:	95 81       	ldd	r25, Z+5	; 0x05
    2824:	89 23       	and	r24, r25
    2826:	83 83       	std	Z+3, r24	; 0x03
    2828:	ed 91       	ld	r30, X+
    282a:	fc 91       	ld	r31, X
    282c:	35 97       	sbiw	r30, 0x05	; 5
    282e:	80 81       	ld	r24, Z
    2830:	80 62       	ori	r24, 0x20	; 32
    2832:	80 83       	st	Z, r24
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	03 c0       	rjmp	.+6      	; 0x283e <serial_sendByte+0x50>
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	01 c0       	rjmp	.+2      	; 0x283e <serial_sendByte+0x50>
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	08 95       	ret

00002844 <serial_sendBytes>:
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	7c 01       	movw	r14, r24
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	09 f4       	brne	.+2      	; 0x2858 <serial_sendBytes+0x14>
    2856:	41 c0       	rjmp	.+130    	; 0x28da <serial_sendBytes+0x96>
    2858:	dc 01       	movw	r26, r24
    285a:	12 96       	adiw	r26, 0x02	; 2
    285c:	ed 91       	ld	r30, X+
    285e:	fc 91       	ld	r31, X
    2860:	13 97       	sbiw	r26, 0x03	; 3
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	82 81       	ldd	r24, Z+2	; 0x02
    2866:	98 1b       	sub	r25, r24
    2868:	85 81       	ldd	r24, Z+5	; 0x05
    286a:	98 23       	and	r25, r24
    286c:	84 81       	ldd	r24, Z+4	; 0x04
    286e:	89 1b       	sub	r24, r25
    2870:	86 17       	cp	r24, r22
    2872:	a8 f1       	brcs	.+106    	; 0x28de <serial_sendBytes+0x9a>
    2874:	66 23       	and	r22, r22
    2876:	41 f1       	breq	.+80     	; 0x28c8 <serial_sendBytes+0x84>
    2878:	84 2f       	mov	r24, r20
    287a:	95 2f       	mov	r25, r21
    287c:	dc 01       	movw	r26, r24
    287e:	61 50       	subi	r22, 0x01	; 1
    2880:	46 2f       	mov	r20, r22
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	4f 5f       	subi	r20, 0xFF	; 255
    2886:	5f 4f       	sbci	r21, 0xFF	; 255
    2888:	48 0f       	add	r20, r24
    288a:	59 1f       	adc	r21, r25
    288c:	e7 01       	movw	r28, r14
    288e:	ea 81       	ldd	r30, Y+2	; 0x02
    2890:	fb 81       	ldd	r31, Y+3	; 0x03
    2892:	93 81       	ldd	r25, Z+3	; 0x03
    2894:	82 81       	ldd	r24, Z+2	; 0x02
    2896:	25 81       	ldd	r18, Z+5	; 0x05
    2898:	98 1b       	sub	r25, r24
    289a:	92 23       	and	r25, r18
    289c:	84 81       	ldd	r24, Z+4	; 0x04
    289e:	98 17       	cp	r25, r24
    28a0:	79 f0       	breq	.+30     	; 0x28c0 <serial_sendBytes+0x7c>
    28a2:	8c 91       	ld	r24, X
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	26 95       	lsr	r18
    28a8:	29 23       	and	r18, r25
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	8b 01       	movw	r16, r22
    28b0:	02 0f       	add	r16, r18
    28b2:	11 1d       	adc	r17, r1
    28b4:	e8 01       	movw	r28, r16
    28b6:	88 83       	st	Y, r24
    28b8:	9f 5f       	subi	r25, 0xFF	; 255
    28ba:	85 81       	ldd	r24, Z+5	; 0x05
    28bc:	98 23       	and	r25, r24
    28be:	93 83       	std	Z+3, r25	; 0x03
    28c0:	11 96       	adiw	r26, 0x01	; 1
    28c2:	a4 17       	cp	r26, r20
    28c4:	b5 07       	cpc	r27, r21
    28c6:	11 f7       	brne	.-60     	; 0x288c <serial_sendBytes+0x48>
    28c8:	d7 01       	movw	r26, r14
    28ca:	ed 91       	ld	r30, X+
    28cc:	fc 91       	ld	r31, X
    28ce:	35 97       	sbiw	r30, 0x05	; 5
    28d0:	80 81       	ld	r24, Z
    28d2:	80 62       	ori	r24, 0x20	; 32
    28d4:	80 83       	st	Z, r24
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	03 c0       	rjmp	.+6      	; 0x28e0 <serial_sendBytes+0x9c>
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	01 c0       	rjmp	.+2      	; 0x28e0 <serial_sendBytes+0x9c>
    28de:	82 e0       	ldi	r24, 0x02	; 2
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	1f 91       	pop	r17
    28e6:	0f 91       	pop	r16
    28e8:	ff 90       	pop	r15
    28ea:	ef 90       	pop	r14
    28ec:	08 95       	ret

000028ee <serial_getByte>:
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	d1 f0       	breq	.+52     	; 0x2926 <serial_getByte+0x38>
    28f2:	dc 01       	movw	r26, r24
    28f4:	14 96       	adiw	r26, 0x04	; 4
    28f6:	ed 91       	ld	r30, X+
    28f8:	fc 91       	ld	r31, X
    28fa:	15 97       	sbiw	r26, 0x05	; 5
    28fc:	93 81       	ldd	r25, Z+3	; 0x03
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	98 17       	cp	r25, r24
    2902:	99 f0       	breq	.+38     	; 0x292a <serial_getByte+0x3c>
    2904:	92 81       	ldd	r25, Z+2	; 0x02
    2906:	85 81       	ldd	r24, Z+5	; 0x05
    2908:	86 95       	lsr	r24
    290a:	89 23       	and	r24, r25
    290c:	a0 81       	ld	r26, Z
    290e:	b1 81       	ldd	r27, Z+1	; 0x01
    2910:	a8 0f       	add	r26, r24
    2912:	b1 1d       	adc	r27, r1
    2914:	8c 91       	ld	r24, X
    2916:	db 01       	movw	r26, r22
    2918:	8c 93       	st	X, r24
    291a:	9f 5f       	subi	r25, 0xFF	; 255
    291c:	85 81       	ldd	r24, Z+5	; 0x05
    291e:	98 23       	and	r25, r24
    2920:	92 83       	std	Z+2, r25	; 0x02
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	08 95       	ret
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	08 95       	ret
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	08 95       	ret

0000292e <__vector_25>:
    292e:	1f 92       	push	r1
    2930:	0f 92       	push	r0
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	0f 92       	push	r0
    2936:	11 24       	eor	r1, r1
    2938:	0b b6       	in	r0, 0x3b	; 59
    293a:	0f 92       	push	r0
    293c:	2f 93       	push	r18
    293e:	3f 93       	push	r19
    2940:	4f 93       	push	r20
    2942:	5f 93       	push	r21
    2944:	6f 93       	push	r22
    2946:	7f 93       	push	r23
    2948:	8f 93       	push	r24
    294a:	9f 93       	push	r25
    294c:	af 93       	push	r26
    294e:	bf 93       	push	r27
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	ef 93       	push	r30
    2956:	ff 93       	push	r31
    2958:	a0 91 bc 0d 	lds	r26, 0x0DBC	; 0x800dbc <_ser_handle>
    295c:	b0 91 bd 0d 	lds	r27, 0x0DBD	; 0x800dbd <_ser_handle+0x1>
    2960:	10 97       	sbiw	r26, 0x00	; 0
    2962:	11 f1       	breq	.+68     	; 0x29a8 <__vector_25+0x7a>
    2964:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2968:	14 96       	adiw	r26, 0x04	; 4
    296a:	ed 91       	ld	r30, X+
    296c:	fc 91       	ld	r31, X
    296e:	15 97       	sbiw	r26, 0x05	; 5
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	82 81       	ldd	r24, Z+2	; 0x02
    2974:	25 81       	ldd	r18, Z+5	; 0x05
    2976:	98 1b       	sub	r25, r24
    2978:	92 23       	and	r25, r18
    297a:	84 81       	ldd	r24, Z+4	; 0x04
    297c:	98 17       	cp	r25, r24
    297e:	61 f0       	breq	.+24     	; 0x2998 <__vector_25+0x6a>
    2980:	83 81       	ldd	r24, Z+3	; 0x03
    2982:	26 95       	lsr	r18
    2984:	28 23       	and	r18, r24
    2986:	c0 81       	ld	r28, Z
    2988:	d1 81       	ldd	r29, Z+1	; 0x01
    298a:	c2 0f       	add	r28, r18
    298c:	d1 1d       	adc	r29, r1
    298e:	68 83       	st	Y, r22
    2990:	8f 5f       	subi	r24, 0xFF	; 255
    2992:	95 81       	ldd	r25, Z+5	; 0x05
    2994:	89 23       	and	r24, r25
    2996:	83 83       	std	Z+3, r24	; 0x03
    2998:	16 96       	adiw	r26, 0x06	; 6
    299a:	ed 91       	ld	r30, X+
    299c:	fc 91       	ld	r31, X
    299e:	17 97       	sbiw	r26, 0x07	; 7
    29a0:	30 97       	sbiw	r30, 0x00	; 0
    29a2:	11 f0       	breq	.+4      	; 0x29a8 <__vector_25+0x7a>
    29a4:	cd 01       	movw	r24, r26
    29a6:	19 95       	eicall
    29a8:	ff 91       	pop	r31
    29aa:	ef 91       	pop	r30
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	bf 91       	pop	r27
    29b2:	af 91       	pop	r26
    29b4:	9f 91       	pop	r25
    29b6:	8f 91       	pop	r24
    29b8:	7f 91       	pop	r23
    29ba:	6f 91       	pop	r22
    29bc:	5f 91       	pop	r21
    29be:	4f 91       	pop	r20
    29c0:	3f 91       	pop	r19
    29c2:	2f 91       	pop	r18
    29c4:	0f 90       	pop	r0
    29c6:	0b be       	out	0x3b, r0	; 59
    29c8:	0f 90       	pop	r0
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	0f 90       	pop	r0
    29ce:	1f 90       	pop	r1
    29d0:	18 95       	reti

000029d2 <__vector_26>:
    29d2:	1f 92       	push	r1
    29d4:	0f 92       	push	r0
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	0f 92       	push	r0
    29da:	11 24       	eor	r1, r1
    29dc:	0b b6       	in	r0, 0x3b	; 59
    29de:	0f 92       	push	r0
    29e0:	2f 93       	push	r18
    29e2:	8f 93       	push	r24
    29e4:	9f 93       	push	r25
    29e6:	af 93       	push	r26
    29e8:	bf 93       	push	r27
    29ea:	ef 93       	push	r30
    29ec:	ff 93       	push	r31
    29ee:	e0 91 bc 0d 	lds	r30, 0x0DBC	; 0x800dbc <_ser_handle>
    29f2:	f0 91 bd 0d 	lds	r31, 0x0DBD	; 0x800dbd <_ser_handle+0x1>
    29f6:	30 97       	sbiw	r30, 0x00	; 0
    29f8:	b9 f0       	breq	.+46     	; 0x2a28 <__vector_26+0x56>
    29fa:	02 80       	ldd	r0, Z+2	; 0x02
    29fc:	f3 81       	ldd	r31, Z+3	; 0x03
    29fe:	e0 2d       	mov	r30, r0
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	98 17       	cp	r25, r24
    2a06:	b1 f0       	breq	.+44     	; 0x2a34 <__vector_26+0x62>
    2a08:	92 81       	ldd	r25, Z+2	; 0x02
    2a0a:	85 81       	ldd	r24, Z+5	; 0x05
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	26 95       	lsr	r18
    2a10:	29 23       	and	r18, r25
    2a12:	a0 81       	ld	r26, Z
    2a14:	b1 81       	ldd	r27, Z+1	; 0x01
    2a16:	a2 0f       	add	r26, r18
    2a18:	b1 1d       	adc	r27, r1
    2a1a:	2c 91       	ld	r18, X
    2a1c:	9f 5f       	subi	r25, 0xFF	; 255
    2a1e:	89 23       	and	r24, r25
    2a20:	82 83       	std	Z+2, r24	; 0x02
    2a22:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2a26:	0b c0       	rjmp	.+22     	; 0x2a3e <__vector_26+0x6c>
    2a28:	e1 ec       	ldi	r30, 0xC1	; 193
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	8f 7d       	andi	r24, 0xDF	; 223
    2a30:	80 83       	st	Z, r24
    2a32:	05 c0       	rjmp	.+10     	; 0x2a3e <__vector_26+0x6c>
    2a34:	e1 ec       	ldi	r30, 0xC1	; 193
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	8f 7d       	andi	r24, 0xDF	; 223
    2a3c:	80 83       	st	Z, r24
    2a3e:	ff 91       	pop	r31
    2a40:	ef 91       	pop	r30
    2a42:	bf 91       	pop	r27
    2a44:	af 91       	pop	r26
    2a46:	9f 91       	pop	r25
    2a48:	8f 91       	pop	r24
    2a4a:	2f 91       	pop	r18
    2a4c:	0f 90       	pop	r0
    2a4e:	0b be       	out	0x3b, r0	; 59
    2a50:	0f 90       	pop	r0
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	0f 90       	pop	r0
    2a56:	1f 90       	pop	r1
    2a58:	18 95       	reti

00002a5a <__vector_36>:
    2a5a:	1f 92       	push	r1
    2a5c:	0f 92       	push	r0
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	0f 92       	push	r0
    2a62:	11 24       	eor	r1, r1
    2a64:	0b b6       	in	r0, 0x3b	; 59
    2a66:	0f 92       	push	r0
    2a68:	2f 93       	push	r18
    2a6a:	3f 93       	push	r19
    2a6c:	4f 93       	push	r20
    2a6e:	5f 93       	push	r21
    2a70:	6f 93       	push	r22
    2a72:	7f 93       	push	r23
    2a74:	8f 93       	push	r24
    2a76:	9f 93       	push	r25
    2a78:	af 93       	push	r26
    2a7a:	bf 93       	push	r27
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	ef 93       	push	r30
    2a82:	ff 93       	push	r31
    2a84:	a0 91 be 0d 	lds	r26, 0x0DBE	; 0x800dbe <_ser_handle+0x2>
    2a88:	b0 91 bf 0d 	lds	r27, 0x0DBF	; 0x800dbf <_ser_handle+0x3>
    2a8c:	10 97       	sbiw	r26, 0x00	; 0
    2a8e:	11 f1       	breq	.+68     	; 0x2ad4 <__vector_36+0x7a>
    2a90:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2a94:	14 96       	adiw	r26, 0x04	; 4
    2a96:	ed 91       	ld	r30, X+
    2a98:	fc 91       	ld	r31, X
    2a9a:	15 97       	sbiw	r26, 0x05	; 5
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	82 81       	ldd	r24, Z+2	; 0x02
    2aa0:	25 81       	ldd	r18, Z+5	; 0x05
    2aa2:	98 1b       	sub	r25, r24
    2aa4:	92 23       	and	r25, r18
    2aa6:	84 81       	ldd	r24, Z+4	; 0x04
    2aa8:	98 17       	cp	r25, r24
    2aaa:	61 f0       	breq	.+24     	; 0x2ac4 <__vector_36+0x6a>
    2aac:	83 81       	ldd	r24, Z+3	; 0x03
    2aae:	26 95       	lsr	r18
    2ab0:	28 23       	and	r18, r24
    2ab2:	c0 81       	ld	r28, Z
    2ab4:	d1 81       	ldd	r29, Z+1	; 0x01
    2ab6:	c2 0f       	add	r28, r18
    2ab8:	d1 1d       	adc	r29, r1
    2aba:	68 83       	st	Y, r22
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	95 81       	ldd	r25, Z+5	; 0x05
    2ac0:	89 23       	and	r24, r25
    2ac2:	83 83       	std	Z+3, r24	; 0x03
    2ac4:	16 96       	adiw	r26, 0x06	; 6
    2ac6:	ed 91       	ld	r30, X+
    2ac8:	fc 91       	ld	r31, X
    2aca:	17 97       	sbiw	r26, 0x07	; 7
    2acc:	30 97       	sbiw	r30, 0x00	; 0
    2ace:	11 f0       	breq	.+4      	; 0x2ad4 <__vector_36+0x7a>
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	19 95       	eicall
    2ad4:	ff 91       	pop	r31
    2ad6:	ef 91       	pop	r30
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	bf 91       	pop	r27
    2ade:	af 91       	pop	r26
    2ae0:	9f 91       	pop	r25
    2ae2:	8f 91       	pop	r24
    2ae4:	7f 91       	pop	r23
    2ae6:	6f 91       	pop	r22
    2ae8:	5f 91       	pop	r21
    2aea:	4f 91       	pop	r20
    2aec:	3f 91       	pop	r19
    2aee:	2f 91       	pop	r18
    2af0:	0f 90       	pop	r0
    2af2:	0b be       	out	0x3b, r0	; 59
    2af4:	0f 90       	pop	r0
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	0f 90       	pop	r0
    2afa:	1f 90       	pop	r1
    2afc:	18 95       	reti

00002afe <__vector_37>:
    2afe:	1f 92       	push	r1
    2b00:	0f 92       	push	r0
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	0f 92       	push	r0
    2b06:	11 24       	eor	r1, r1
    2b08:	0b b6       	in	r0, 0x3b	; 59
    2b0a:	0f 92       	push	r0
    2b0c:	2f 93       	push	r18
    2b0e:	8f 93       	push	r24
    2b10:	9f 93       	push	r25
    2b12:	af 93       	push	r26
    2b14:	bf 93       	push	r27
    2b16:	ef 93       	push	r30
    2b18:	ff 93       	push	r31
    2b1a:	e0 91 be 0d 	lds	r30, 0x0DBE	; 0x800dbe <_ser_handle+0x2>
    2b1e:	f0 91 bf 0d 	lds	r31, 0x0DBF	; 0x800dbf <_ser_handle+0x3>
    2b22:	30 97       	sbiw	r30, 0x00	; 0
    2b24:	b9 f0       	breq	.+46     	; 0x2b54 <__vector_37+0x56>
    2b26:	02 80       	ldd	r0, Z+2	; 0x02
    2b28:	f3 81       	ldd	r31, Z+3	; 0x03
    2b2a:	e0 2d       	mov	r30, r0
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	98 17       	cp	r25, r24
    2b32:	b1 f0       	breq	.+44     	; 0x2b60 <__vector_37+0x62>
    2b34:	92 81       	ldd	r25, Z+2	; 0x02
    2b36:	85 81       	ldd	r24, Z+5	; 0x05
    2b38:	28 2f       	mov	r18, r24
    2b3a:	26 95       	lsr	r18
    2b3c:	29 23       	and	r18, r25
    2b3e:	a0 81       	ld	r26, Z
    2b40:	b1 81       	ldd	r27, Z+1	; 0x01
    2b42:	a2 0f       	add	r26, r18
    2b44:	b1 1d       	adc	r27, r1
    2b46:	2c 91       	ld	r18, X
    2b48:	9f 5f       	subi	r25, 0xFF	; 255
    2b4a:	89 23       	and	r24, r25
    2b4c:	82 83       	std	Z+2, r24	; 0x02
    2b4e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2b52:	0b c0       	rjmp	.+22     	; 0x2b6a <__vector_37+0x6c>
    2b54:	e9 ec       	ldi	r30, 0xC9	; 201
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	8f 7d       	andi	r24, 0xDF	; 223
    2b5c:	80 83       	st	Z, r24
    2b5e:	05 c0       	rjmp	.+10     	; 0x2b6a <__vector_37+0x6c>
    2b60:	e9 ec       	ldi	r30, 0xC9	; 201
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	8f 7d       	andi	r24, 0xDF	; 223
    2b68:	80 83       	st	Z, r24
    2b6a:	ff 91       	pop	r31
    2b6c:	ef 91       	pop	r30
    2b6e:	bf 91       	pop	r27
    2b70:	af 91       	pop	r26
    2b72:	9f 91       	pop	r25
    2b74:	8f 91       	pop	r24
    2b76:	2f 91       	pop	r18
    2b78:	0f 90       	pop	r0
    2b7a:	0b be       	out	0x3b, r0	; 59
    2b7c:	0f 90       	pop	r0
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	0f 90       	pop	r0
    2b82:	1f 90       	pop	r1
    2b84:	18 95       	reti

00002b86 <__vector_51>:
    2b86:	1f 92       	push	r1
    2b88:	0f 92       	push	r0
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	0f 92       	push	r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	0b b6       	in	r0, 0x3b	; 59
    2b92:	0f 92       	push	r0
    2b94:	2f 93       	push	r18
    2b96:	3f 93       	push	r19
    2b98:	4f 93       	push	r20
    2b9a:	5f 93       	push	r21
    2b9c:	6f 93       	push	r22
    2b9e:	7f 93       	push	r23
    2ba0:	8f 93       	push	r24
    2ba2:	9f 93       	push	r25
    2ba4:	af 93       	push	r26
    2ba6:	bf 93       	push	r27
    2ba8:	cf 93       	push	r28
    2baa:	df 93       	push	r29
    2bac:	ef 93       	push	r30
    2bae:	ff 93       	push	r31
    2bb0:	a0 91 c0 0d 	lds	r26, 0x0DC0	; 0x800dc0 <_ser_handle+0x4>
    2bb4:	b0 91 c1 0d 	lds	r27, 0x0DC1	; 0x800dc1 <_ser_handle+0x5>
    2bb8:	10 97       	sbiw	r26, 0x00	; 0
    2bba:	11 f1       	breq	.+68     	; 0x2c00 <__vector_51+0x7a>
    2bbc:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2bc0:	14 96       	adiw	r26, 0x04	; 4
    2bc2:	ed 91       	ld	r30, X+
    2bc4:	fc 91       	ld	r31, X
    2bc6:	15 97       	sbiw	r26, 0x05	; 5
    2bc8:	93 81       	ldd	r25, Z+3	; 0x03
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	25 81       	ldd	r18, Z+5	; 0x05
    2bce:	98 1b       	sub	r25, r24
    2bd0:	92 23       	and	r25, r18
    2bd2:	84 81       	ldd	r24, Z+4	; 0x04
    2bd4:	98 17       	cp	r25, r24
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <__vector_51+0x6a>
    2bd8:	83 81       	ldd	r24, Z+3	; 0x03
    2bda:	26 95       	lsr	r18
    2bdc:	28 23       	and	r18, r24
    2bde:	c0 81       	ld	r28, Z
    2be0:	d1 81       	ldd	r29, Z+1	; 0x01
    2be2:	c2 0f       	add	r28, r18
    2be4:	d1 1d       	adc	r29, r1
    2be6:	68 83       	st	Y, r22
    2be8:	8f 5f       	subi	r24, 0xFF	; 255
    2bea:	95 81       	ldd	r25, Z+5	; 0x05
    2bec:	89 23       	and	r24, r25
    2bee:	83 83       	std	Z+3, r24	; 0x03
    2bf0:	16 96       	adiw	r26, 0x06	; 6
    2bf2:	ed 91       	ld	r30, X+
    2bf4:	fc 91       	ld	r31, X
    2bf6:	17 97       	sbiw	r26, 0x07	; 7
    2bf8:	30 97       	sbiw	r30, 0x00	; 0
    2bfa:	11 f0       	breq	.+4      	; 0x2c00 <__vector_51+0x7a>
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	19 95       	eicall
    2c00:	ff 91       	pop	r31
    2c02:	ef 91       	pop	r30
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	bf 91       	pop	r27
    2c0a:	af 91       	pop	r26
    2c0c:	9f 91       	pop	r25
    2c0e:	8f 91       	pop	r24
    2c10:	7f 91       	pop	r23
    2c12:	6f 91       	pop	r22
    2c14:	5f 91       	pop	r21
    2c16:	4f 91       	pop	r20
    2c18:	3f 91       	pop	r19
    2c1a:	2f 91       	pop	r18
    2c1c:	0f 90       	pop	r0
    2c1e:	0b be       	out	0x3b, r0	; 59
    2c20:	0f 90       	pop	r0
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	0f 90       	pop	r0
    2c26:	1f 90       	pop	r1
    2c28:	18 95       	reti

00002c2a <__vector_52>:
    2c2a:	1f 92       	push	r1
    2c2c:	0f 92       	push	r0
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	0f 92       	push	r0
    2c32:	11 24       	eor	r1, r1
    2c34:	0b b6       	in	r0, 0x3b	; 59
    2c36:	0f 92       	push	r0
    2c38:	2f 93       	push	r18
    2c3a:	8f 93       	push	r24
    2c3c:	9f 93       	push	r25
    2c3e:	af 93       	push	r26
    2c40:	bf 93       	push	r27
    2c42:	ef 93       	push	r30
    2c44:	ff 93       	push	r31
    2c46:	e0 91 c0 0d 	lds	r30, 0x0DC0	; 0x800dc0 <_ser_handle+0x4>
    2c4a:	f0 91 c1 0d 	lds	r31, 0x0DC1	; 0x800dc1 <_ser_handle+0x5>
    2c4e:	30 97       	sbiw	r30, 0x00	; 0
    2c50:	b9 f0       	breq	.+46     	; 0x2c80 <__vector_52+0x56>
    2c52:	02 80       	ldd	r0, Z+2	; 0x02
    2c54:	f3 81       	ldd	r31, Z+3	; 0x03
    2c56:	e0 2d       	mov	r30, r0
    2c58:	93 81       	ldd	r25, Z+3	; 0x03
    2c5a:	82 81       	ldd	r24, Z+2	; 0x02
    2c5c:	98 17       	cp	r25, r24
    2c5e:	b1 f0       	breq	.+44     	; 0x2c8c <__vector_52+0x62>
    2c60:	92 81       	ldd	r25, Z+2	; 0x02
    2c62:	85 81       	ldd	r24, Z+5	; 0x05
    2c64:	28 2f       	mov	r18, r24
    2c66:	26 95       	lsr	r18
    2c68:	29 23       	and	r18, r25
    2c6a:	a0 81       	ld	r26, Z
    2c6c:	b1 81       	ldd	r27, Z+1	; 0x01
    2c6e:	a2 0f       	add	r26, r18
    2c70:	b1 1d       	adc	r27, r1
    2c72:	2c 91       	ld	r18, X
    2c74:	9f 5f       	subi	r25, 0xFF	; 255
    2c76:	89 23       	and	r24, r25
    2c78:	82 83       	std	Z+2, r24	; 0x02
    2c7a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2c7e:	0b c0       	rjmp	.+22     	; 0x2c96 <__vector_52+0x6c>
    2c80:	e1 ed       	ldi	r30, 0xD1	; 209
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	8f 7d       	andi	r24, 0xDF	; 223
    2c88:	80 83       	st	Z, r24
    2c8a:	05 c0       	rjmp	.+10     	; 0x2c96 <__vector_52+0x6c>
    2c8c:	e1 ed       	ldi	r30, 0xD1	; 209
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	8f 7d       	andi	r24, 0xDF	; 223
    2c94:	80 83       	st	Z, r24
    2c96:	ff 91       	pop	r31
    2c98:	ef 91       	pop	r30
    2c9a:	bf 91       	pop	r27
    2c9c:	af 91       	pop	r26
    2c9e:	9f 91       	pop	r25
    2ca0:	8f 91       	pop	r24
    2ca2:	2f 91       	pop	r18
    2ca4:	0f 90       	pop	r0
    2ca6:	0b be       	out	0x3b, r0	; 59
    2ca8:	0f 90       	pop	r0
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	0f 90       	pop	r0
    2cae:	1f 90       	pop	r1
    2cb0:	18 95       	reti

00002cb2 <__vector_54>:
    2cb2:	1f 92       	push	r1
    2cb4:	0f 92       	push	r0
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	0f 92       	push	r0
    2cba:	11 24       	eor	r1, r1
    2cbc:	0b b6       	in	r0, 0x3b	; 59
    2cbe:	0f 92       	push	r0
    2cc0:	2f 93       	push	r18
    2cc2:	3f 93       	push	r19
    2cc4:	4f 93       	push	r20
    2cc6:	5f 93       	push	r21
    2cc8:	6f 93       	push	r22
    2cca:	7f 93       	push	r23
    2ccc:	8f 93       	push	r24
    2cce:	9f 93       	push	r25
    2cd0:	af 93       	push	r26
    2cd2:	bf 93       	push	r27
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	ef 93       	push	r30
    2cda:	ff 93       	push	r31
    2cdc:	a0 91 c2 0d 	lds	r26, 0x0DC2	; 0x800dc2 <_ser_handle+0x6>
    2ce0:	b0 91 c3 0d 	lds	r27, 0x0DC3	; 0x800dc3 <_ser_handle+0x7>
    2ce4:	10 97       	sbiw	r26, 0x00	; 0
    2ce6:	11 f1       	breq	.+68     	; 0x2d2c <__vector_54+0x7a>
    2ce8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2cec:	14 96       	adiw	r26, 0x04	; 4
    2cee:	ed 91       	ld	r30, X+
    2cf0:	fc 91       	ld	r31, X
    2cf2:	15 97       	sbiw	r26, 0x05	; 5
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	25 81       	ldd	r18, Z+5	; 0x05
    2cfa:	98 1b       	sub	r25, r24
    2cfc:	92 23       	and	r25, r18
    2cfe:	84 81       	ldd	r24, Z+4	; 0x04
    2d00:	98 17       	cp	r25, r24
    2d02:	61 f0       	breq	.+24     	; 0x2d1c <__vector_54+0x6a>
    2d04:	83 81       	ldd	r24, Z+3	; 0x03
    2d06:	26 95       	lsr	r18
    2d08:	28 23       	and	r18, r24
    2d0a:	c0 81       	ld	r28, Z
    2d0c:	d1 81       	ldd	r29, Z+1	; 0x01
    2d0e:	c2 0f       	add	r28, r18
    2d10:	d1 1d       	adc	r29, r1
    2d12:	68 83       	st	Y, r22
    2d14:	8f 5f       	subi	r24, 0xFF	; 255
    2d16:	95 81       	ldd	r25, Z+5	; 0x05
    2d18:	89 23       	and	r24, r25
    2d1a:	83 83       	std	Z+3, r24	; 0x03
    2d1c:	16 96       	adiw	r26, 0x06	; 6
    2d1e:	ed 91       	ld	r30, X+
    2d20:	fc 91       	ld	r31, X
    2d22:	17 97       	sbiw	r26, 0x07	; 7
    2d24:	30 97       	sbiw	r30, 0x00	; 0
    2d26:	11 f0       	breq	.+4      	; 0x2d2c <__vector_54+0x7a>
    2d28:	cd 01       	movw	r24, r26
    2d2a:	19 95       	eicall
    2d2c:	ff 91       	pop	r31
    2d2e:	ef 91       	pop	r30
    2d30:	df 91       	pop	r29
    2d32:	cf 91       	pop	r28
    2d34:	bf 91       	pop	r27
    2d36:	af 91       	pop	r26
    2d38:	9f 91       	pop	r25
    2d3a:	8f 91       	pop	r24
    2d3c:	7f 91       	pop	r23
    2d3e:	6f 91       	pop	r22
    2d40:	5f 91       	pop	r21
    2d42:	4f 91       	pop	r20
    2d44:	3f 91       	pop	r19
    2d46:	2f 91       	pop	r18
    2d48:	0f 90       	pop	r0
    2d4a:	0b be       	out	0x3b, r0	; 59
    2d4c:	0f 90       	pop	r0
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	0f 90       	pop	r0
    2d52:	1f 90       	pop	r1
    2d54:	18 95       	reti

00002d56 <__vector_55>:
    2d56:	1f 92       	push	r1
    2d58:	0f 92       	push	r0
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	0f 92       	push	r0
    2d5e:	11 24       	eor	r1, r1
    2d60:	0b b6       	in	r0, 0x3b	; 59
    2d62:	0f 92       	push	r0
    2d64:	2f 93       	push	r18
    2d66:	8f 93       	push	r24
    2d68:	9f 93       	push	r25
    2d6a:	af 93       	push	r26
    2d6c:	bf 93       	push	r27
    2d6e:	ef 93       	push	r30
    2d70:	ff 93       	push	r31
    2d72:	e0 91 c2 0d 	lds	r30, 0x0DC2	; 0x800dc2 <_ser_handle+0x6>
    2d76:	f0 91 c3 0d 	lds	r31, 0x0DC3	; 0x800dc3 <_ser_handle+0x7>
    2d7a:	30 97       	sbiw	r30, 0x00	; 0
    2d7c:	b9 f0       	breq	.+46     	; 0x2dac <__vector_55+0x56>
    2d7e:	02 80       	ldd	r0, Z+2	; 0x02
    2d80:	f3 81       	ldd	r31, Z+3	; 0x03
    2d82:	e0 2d       	mov	r30, r0
    2d84:	93 81       	ldd	r25, Z+3	; 0x03
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	98 17       	cp	r25, r24
    2d8a:	b1 f0       	breq	.+44     	; 0x2db8 <__vector_55+0x62>
    2d8c:	92 81       	ldd	r25, Z+2	; 0x02
    2d8e:	85 81       	ldd	r24, Z+5	; 0x05
    2d90:	28 2f       	mov	r18, r24
    2d92:	26 95       	lsr	r18
    2d94:	29 23       	and	r18, r25
    2d96:	a0 81       	ld	r26, Z
    2d98:	b1 81       	ldd	r27, Z+1	; 0x01
    2d9a:	a2 0f       	add	r26, r18
    2d9c:	b1 1d       	adc	r27, r1
    2d9e:	2c 91       	ld	r18, X
    2da0:	9f 5f       	subi	r25, 0xFF	; 255
    2da2:	89 23       	and	r24, r25
    2da4:	82 83       	std	Z+2, r24	; 0x02
    2da6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2daa:	0b c0       	rjmp	.+22     	; 0x2dc2 <__vector_55+0x6c>
    2dac:	e1 e3       	ldi	r30, 0x31	; 49
    2dae:	f1 e0       	ldi	r31, 0x01	; 1
    2db0:	80 81       	ld	r24, Z
    2db2:	8f 7d       	andi	r24, 0xDF	; 223
    2db4:	80 83       	st	Z, r24
    2db6:	05 c0       	rjmp	.+10     	; 0x2dc2 <__vector_55+0x6c>
    2db8:	e1 e3       	ldi	r30, 0x31	; 49
    2dba:	f1 e0       	ldi	r31, 0x01	; 1
    2dbc:	80 81       	ld	r24, Z
    2dbe:	8f 7d       	andi	r24, 0xDF	; 223
    2dc0:	80 83       	st	Z, r24
    2dc2:	ff 91       	pop	r31
    2dc4:	ef 91       	pop	r30
    2dc6:	bf 91       	pop	r27
    2dc8:	af 91       	pop	r26
    2dca:	9f 91       	pop	r25
    2dcc:	8f 91       	pop	r24
    2dce:	2f 91       	pop	r18
    2dd0:	0f 90       	pop	r0
    2dd2:	0b be       	out	0x3b, r0	; 59
    2dd4:	0f 90       	pop	r0
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	0f 90       	pop	r0
    2dda:	1f 90       	pop	r1
    2ddc:	18 95       	reti

00002dde <usart_getchar>:
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	1f 92       	push	r1
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	be 01       	movw	r22, r28
    2dea:	6f 5f       	subi	r22, 0xFF	; 255
    2dec:	7f 4f       	sbci	r23, 0xFF	; 255
    2dee:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <_com_serial_instance>
    2df2:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <_com_serial_instance+0x1>
    2df6:	7b dd       	rcall	.-1290   	; 0x28ee <serial_getByte>
    2df8:	81 11       	cpse	r24, r1
    2dfa:	f6 cf       	rjmp	.-20     	; 0x2de8 <usart_getchar+0xa>
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0f 90       	pop	r0
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	08 95       	ret

00002e08 <usart_putchar>:
    2e08:	68 2f       	mov	r22, r24
    2e0a:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <_com_serial_instance>
    2e0e:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <_com_serial_instance+0x1>
    2e12:	ed dc       	rcall	.-1574   	; 0x27ee <serial_sendByte>
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	08 95       	ret

00002e1a <stdio_initialise>:
    2e1a:	8f 92       	push	r8
    2e1c:	9f 92       	push	r9
    2e1e:	af 92       	push	r10
    2e20:	cf 92       	push	r12
    2e22:	ef 92       	push	r14
    2e24:	0f 93       	push	r16
    2e26:	81 2c       	mov	r8, r1
    2e28:	91 2c       	mov	r9, r1
    2e2a:	68 94       	set
    2e2c:	aa 24       	eor	r10, r10
    2e2e:	a7 f8       	bld	r10, 7
    2e30:	68 94       	set
    2e32:	cc 24       	eor	r12, r12
    2e34:	c7 f8       	bld	r12, 7
    2e36:	e1 2c       	mov	r14, r1
    2e38:	00 e0       	ldi	r16, 0x00	; 0
    2e3a:	23 e0       	ldi	r18, 0x03	; 3
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	51 ee       	ldi	r21, 0xE1	; 225
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	38 dc       	rcall	.-1936   	; 0x26b6 <serial_create>
    2e46:	90 93 c5 0d 	sts	0x0DC5, r25	; 0x800dc5 <_com_serial_instance+0x1>
    2e4a:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <_com_serial_instance>
    2e4e:	e0 ef       	ldi	r30, 0xF0	; 240
    2e50:	fd e0       	ldi	r31, 0x0D	; 13
    2e52:	8f e0       	ldi	r24, 0x0F	; 15
    2e54:	92 e0       	ldi	r25, 0x02	; 2
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
    2e5a:	93 83       	std	Z+3, r25	; 0x03
    2e5c:	82 83       	std	Z+2, r24	; 0x02
    2e5e:	0f 91       	pop	r16
    2e60:	ef 90       	pop	r14
    2e62:	cf 90       	pop	r12
    2e64:	af 90       	pop	r10
    2e66:	9f 90       	pop	r9
    2e68:	8f 90       	pop	r8
    2e6a:	08 95       	ret

00002e6c <_turn_off>:
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	fc 01       	movw	r30, r24
    2e70:	ee 0f       	add	r30, r30
    2e72:	ff 1f       	adc	r31, r31
    2e74:	e8 0f       	add	r30, r24
    2e76:	f9 1f       	adc	r31, r25
    2e78:	ee 0f       	add	r30, r30
    2e7a:	ff 1f       	adc	r31, r31
    2e7c:	ea 53       	subi	r30, 0x3A	; 58
    2e7e:	f2 4f       	sbci	r31, 0xF2	; 242
    2e80:	23 81       	ldd	r18, Z+3	; 0x03
    2e82:	21 11       	cpse	r18, r1
    2e84:	1f c0       	rjmp	.+62     	; 0x2ec4 <_turn_off+0x58>
    2e86:	9c 01       	movw	r18, r24
    2e88:	22 0f       	add	r18, r18
    2e8a:	33 1f       	adc	r19, r19
    2e8c:	f9 01       	movw	r30, r18
    2e8e:	e8 0f       	add	r30, r24
    2e90:	f9 1f       	adc	r31, r25
    2e92:	ee 0f       	add	r30, r30
    2e94:	ff 1f       	adc	r31, r31
    2e96:	ea 53       	subi	r30, 0x3A	; 58
    2e98:	f2 4f       	sbci	r31, 0xF2	; 242
    2e9a:	a0 81       	ld	r26, Z
    2e9c:	b1 81       	ldd	r27, Z+1	; 0x01
    2e9e:	4c 91       	ld	r20, X
    2ea0:	f9 01       	movw	r30, r18
    2ea2:	e8 0f       	add	r30, r24
    2ea4:	f9 1f       	adc	r31, r25
    2ea6:	ee 0f       	add	r30, r30
    2ea8:	ff 1f       	adc	r31, r31
    2eaa:	ea 53       	subi	r30, 0x3A	; 58
    2eac:	f2 4f       	sbci	r31, 0xF2	; 242
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	02 80       	ldd	r0, Z+2	; 0x02
    2eb4:	02 c0       	rjmp	.+4      	; 0x2eba <_turn_off+0x4e>
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	0a 94       	dec	r0
    2ebc:	e2 f7       	brpl	.-8      	; 0x2eb6 <_turn_off+0x4a>
    2ebe:	84 2b       	or	r24, r20
    2ec0:	8c 93       	st	X, r24
    2ec2:	08 95       	ret
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	ee 0f       	add	r30, r30
    2ec8:	ff 1f       	adc	r31, r31
    2eca:	df 01       	movw	r26, r30
    2ecc:	a8 0f       	add	r26, r24
    2ece:	b9 1f       	adc	r27, r25
    2ed0:	aa 0f       	add	r26, r26
    2ed2:	bb 1f       	adc	r27, r27
    2ed4:	aa 53       	subi	r26, 0x3A	; 58
    2ed6:	b2 4f       	sbci	r27, 0xF2	; 242
    2ed8:	0d 90       	ld	r0, X+
    2eda:	bc 91       	ld	r27, X
    2edc:	a0 2d       	mov	r26, r0
    2ede:	2c 91       	ld	r18, X
    2ee0:	e8 0f       	add	r30, r24
    2ee2:	f9 1f       	adc	r31, r25
    2ee4:	ee 0f       	add	r30, r30
    2ee6:	ff 1f       	adc	r31, r31
    2ee8:	ea 53       	subi	r30, 0x3A	; 58
    2eea:	f2 4f       	sbci	r31, 0xF2	; 242
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	02 80       	ldd	r0, Z+2	; 0x02
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <_turn_off+0x8c>
    2ef4:	88 0f       	add	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	0a 94       	dec	r0
    2efa:	e2 f7       	brpl	.-8      	; 0x2ef4 <_turn_off+0x88>
    2efc:	80 95       	com	r24
    2efe:	82 23       	and	r24, r18
    2f00:	8c 93       	st	X, r24
    2f02:	08 95       	ret

00002f04 <_turn_on>:
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	fc 01       	movw	r30, r24
    2f08:	ee 0f       	add	r30, r30
    2f0a:	ff 1f       	adc	r31, r31
    2f0c:	e8 0f       	add	r30, r24
    2f0e:	f9 1f       	adc	r31, r25
    2f10:	ee 0f       	add	r30, r30
    2f12:	ff 1f       	adc	r31, r31
    2f14:	ea 53       	subi	r30, 0x3A	; 58
    2f16:	f2 4f       	sbci	r31, 0xF2	; 242
    2f18:	23 81       	ldd	r18, Z+3	; 0x03
    2f1a:	21 11       	cpse	r18, r1
    2f1c:	20 c0       	rjmp	.+64     	; 0x2f5e <_turn_on+0x5a>
    2f1e:	9c 01       	movw	r18, r24
    2f20:	22 0f       	add	r18, r18
    2f22:	33 1f       	adc	r19, r19
    2f24:	f9 01       	movw	r30, r18
    2f26:	e8 0f       	add	r30, r24
    2f28:	f9 1f       	adc	r31, r25
    2f2a:	ee 0f       	add	r30, r30
    2f2c:	ff 1f       	adc	r31, r31
    2f2e:	ea 53       	subi	r30, 0x3A	; 58
    2f30:	f2 4f       	sbci	r31, 0xF2	; 242
    2f32:	a0 81       	ld	r26, Z
    2f34:	b1 81       	ldd	r27, Z+1	; 0x01
    2f36:	4c 91       	ld	r20, X
    2f38:	f9 01       	movw	r30, r18
    2f3a:	e8 0f       	add	r30, r24
    2f3c:	f9 1f       	adc	r31, r25
    2f3e:	ee 0f       	add	r30, r30
    2f40:	ff 1f       	adc	r31, r31
    2f42:	ea 53       	subi	r30, 0x3A	; 58
    2f44:	f2 4f       	sbci	r31, 0xF2	; 242
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	02 80       	ldd	r0, Z+2	; 0x02
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <_turn_on+0x4e>
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	0a 94       	dec	r0
    2f54:	e2 f7       	brpl	.-8      	; 0x2f4e <_turn_on+0x4a>
    2f56:	80 95       	com	r24
    2f58:	84 23       	and	r24, r20
    2f5a:	8c 93       	st	X, r24
    2f5c:	08 95       	ret
    2f5e:	fc 01       	movw	r30, r24
    2f60:	ee 0f       	add	r30, r30
    2f62:	ff 1f       	adc	r31, r31
    2f64:	df 01       	movw	r26, r30
    2f66:	a8 0f       	add	r26, r24
    2f68:	b9 1f       	adc	r27, r25
    2f6a:	aa 0f       	add	r26, r26
    2f6c:	bb 1f       	adc	r27, r27
    2f6e:	aa 53       	subi	r26, 0x3A	; 58
    2f70:	b2 4f       	sbci	r27, 0xF2	; 242
    2f72:	0d 90       	ld	r0, X+
    2f74:	bc 91       	ld	r27, X
    2f76:	a0 2d       	mov	r26, r0
    2f78:	2c 91       	ld	r18, X
    2f7a:	e8 0f       	add	r30, r24
    2f7c:	f9 1f       	adc	r31, r25
    2f7e:	ee 0f       	add	r30, r30
    2f80:	ff 1f       	adc	r31, r31
    2f82:	ea 53       	subi	r30, 0x3A	; 58
    2f84:	f2 4f       	sbci	r31, 0xF2	; 242
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	02 80       	ldd	r0, Z+2	; 0x02
    2f8c:	02 c0       	rjmp	.+4      	; 0x2f92 <_turn_on+0x8e>
    2f8e:	88 0f       	add	r24, r24
    2f90:	99 1f       	adc	r25, r25
    2f92:	0a 94       	dec	r0
    2f94:	e2 f7       	brpl	.-8      	; 0x2f8e <_turn_on+0x8a>
    2f96:	82 2b       	or	r24, r18
    2f98:	8c 93       	st	X, r24
    2f9a:	08 95       	ret

00002f9c <_hal_led_task>:
    2f9c:	cc 24       	eor	r12, r12
    2f9e:	c3 94       	inc	r12
    2fa0:	d1 2c       	mov	r13, r1
    2fa2:	68 94       	set
    2fa4:	bb 24       	eor	r11, r11
    2fa6:	b2 f8       	bld	r11, 2
    2fa8:	c6 ec       	ldi	r28, 0xC6	; 198
    2faa:	dd e0       	ldi	r29, 0x0D	; 13
    2fac:	10 e0       	ldi	r17, 0x00	; 0
    2fae:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb0:	81 30       	cpi	r24, 0x01	; 1
    2fb2:	81 f0       	breq	.+32     	; 0x2fd4 <_hal_led_task+0x38>
    2fb4:	18 f1       	brcs	.+70     	; 0x2ffc <_hal_led_task+0x60>
    2fb6:	82 30       	cpi	r24, 0x02	; 2
    2fb8:	61 f5       	brne	.+88     	; 0x3012 <_hal_led_task+0x76>
    2fba:	e8 81       	ld	r30, Y
    2fbc:	f9 81       	ldd	r31, Y+1	; 0x01
    2fbe:	20 81       	ld	r18, Z
    2fc0:	c6 01       	movw	r24, r12
    2fc2:	0a 80       	ldd	r0, Y+2	; 0x02
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <_hal_led_task+0x2e>
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	0a 94       	dec	r0
    2fcc:	e2 f7       	brpl	.-8      	; 0x2fc6 <_hal_led_task+0x2a>
    2fce:	82 27       	eor	r24, r18
    2fd0:	80 83       	st	Z, r24
    2fd2:	1f c0       	rjmp	.+62     	; 0x3012 <_hal_led_task+0x76>
    2fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd6:	8f 5f       	subi	r24, 0xFF	; 255
    2fd8:	8a 30       	cpi	r24, 0x0A	; 10
    2fda:	10 f4       	brcc	.+4      	; 0x2fe0 <_hal_led_task+0x44>
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
    2fde:	19 c0       	rjmp	.+50     	; 0x3012 <_hal_led_task+0x76>
    2fe0:	1d 82       	std	Y+5, r1	; 0x05
    2fe2:	e8 81       	ld	r30, Y
    2fe4:	f9 81       	ldd	r31, Y+1	; 0x01
    2fe6:	20 81       	ld	r18, Z
    2fe8:	c6 01       	movw	r24, r12
    2fea:	0a 80       	ldd	r0, Y+2	; 0x02
    2fec:	02 c0       	rjmp	.+4      	; 0x2ff2 <_hal_led_task+0x56>
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	0a 94       	dec	r0
    2ff4:	e2 f7       	brpl	.-8      	; 0x2fee <_hal_led_task+0x52>
    2ff6:	82 27       	eor	r24, r18
    2ff8:	80 83       	st	Z, r24
    2ffa:	0b c0       	rjmp	.+22     	; 0x3012 <_hal_led_task+0x76>
    2ffc:	0d 81       	ldd	r16, Y+5	; 0x05
    2ffe:	00 23       	and	r16, r16
    3000:	29 f0       	breq	.+10     	; 0x300c <_hal_led_task+0x70>
    3002:	81 2f       	mov	r24, r17
    3004:	7f df       	rcall	.-258    	; 0x2f04 <_turn_on>
    3006:	01 50       	subi	r16, 0x01	; 1
    3008:	0d 83       	std	Y+5, r16	; 0x05
    300a:	03 c0       	rjmp	.+6      	; 0x3012 <_hal_led_task+0x76>
    300c:	bc 82       	std	Y+4, r11	; 0x04
    300e:	81 2f       	mov	r24, r17
    3010:	2d df       	rcall	.-422    	; 0x2e6c <_turn_off>
    3012:	1f 5f       	subi	r17, 0xFF	; 255
    3014:	26 96       	adiw	r28, 0x06	; 6
    3016:	14 30       	cpi	r17, 0x04	; 4
    3018:	51 f6       	brne	.-108    	; 0x2fae <_hal_led_task+0x12>
    301a:	65 e0       	ldi	r22, 0x05	; 5
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 82 0b 	call	0x1704	; 0x1704 <vTaskDelay>
    3026:	c0 cf       	rjmp	.-128    	; 0x2fa8 <_hal_led_task+0xc>

00003028 <status_leds_initialise>:
    3028:	ef 92       	push	r14
    302a:	ff 92       	push	r15
    302c:	0f 93       	push	r16
    302e:	1f 93       	push	r17
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	08 2f       	mov	r16, r24
    3036:	80 e4       	ldi	r24, 0x40	; 64
    3038:	87 b9       	out	0x07, r24	; 7
    303a:	c6 ec       	ldi	r28, 0xC6	; 198
    303c:	dd e0       	ldi	r29, 0x0D	; 13
    303e:	0f 2e       	mov	r0, r31
    3040:	f8 e2       	ldi	r31, 0x28	; 40
    3042:	ef 2e       	mov	r14, r31
    3044:	f1 2c       	mov	r15, r1
    3046:	f0 2d       	mov	r31, r0
    3048:	f9 82       	std	Y+1, r15	; 0x01
    304a:	e8 82       	st	Y, r14
    304c:	86 e0       	ldi	r24, 0x06	; 6
    304e:	8a 83       	std	Y+2, r24	; 0x02
    3050:	1b 82       	std	Y+3, r1	; 0x03
    3052:	14 e0       	ldi	r17, 0x04	; 4
    3054:	1c 83       	std	Y+4, r17	; 0x04
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	09 df       	rcall	.-494    	; 0x2e6c <_turn_off>
    305a:	80 e8       	ldi	r24, 0x80	; 128
    305c:	87 b9       	out	0x07, r24	; 7
    305e:	ff 82       	std	Y+7, r15	; 0x07
    3060:	ee 82       	std	Y+6, r14	; 0x06
    3062:	87 e0       	ldi	r24, 0x07	; 7
    3064:	88 87       	std	Y+8, r24	; 0x08
    3066:	19 86       	std	Y+9, r1	; 0x09
    3068:	1a 87       	std	Y+10, r17	; 0x0a
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	ff de       	rcall	.-514    	; 0x2e6c <_turn_off>
    306e:	80 e2       	ldi	r24, 0x20	; 32
    3070:	83 bb       	out	0x13, r24	; 19
    3072:	84 e3       	ldi	r24, 0x34	; 52
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	9d 87       	std	Y+13, r25	; 0x0d
    3078:	8c 87       	std	Y+12, r24	; 0x0c
    307a:	85 e0       	ldi	r24, 0x05	; 5
    307c:	8e 87       	std	Y+14, r24	; 0x0e
    307e:	1f 86       	std	Y+15, r1	; 0x0f
    3080:	18 8b       	std	Y+16, r17	; 0x10
    3082:	82 e0       	ldi	r24, 0x02	; 2
    3084:	f3 de       	rcall	.-538    	; 0x2e6c <_turn_off>
    3086:	80 e1       	ldi	r24, 0x10	; 16
    3088:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    308c:	82 e0       	ldi	r24, 0x02	; 2
    308e:	91 e0       	ldi	r25, 0x01	; 1
    3090:	9b 8b       	std	Y+19, r25	; 0x13
    3092:	8a 8b       	std	Y+18, r24	; 0x12
    3094:	1c 8b       	std	Y+20, r17	; 0x14
    3096:	1d 8a       	std	Y+21, r1	; 0x15
    3098:	1e 8b       	std	Y+22, r17	; 0x16
    309a:	83 e0       	ldi	r24, 0x03	; 3
    309c:	e7 de       	rcall	.-562    	; 0x2e6c <_turn_off>
    309e:	e1 2c       	mov	r14, r1
    30a0:	f1 2c       	mov	r15, r1
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 ec       	ldi	r20, 0xC0	; 192
    30a8:	50 e0       	ldi	r21, 0x00	; 0
    30aa:	62 ef       	ldi	r22, 0xF2	; 242
    30ac:	72 e0       	ldi	r23, 0x02	; 2
    30ae:	8e ec       	ldi	r24, 0xCE	; 206
    30b0:	97 e1       	ldi	r25, 0x17	; 23
    30b2:	0e 94 82 08 	call	0x1104	; 0x1104 <xTaskCreate>
    30b6:	df 91       	pop	r29
    30b8:	cf 91       	pop	r28
    30ba:	1f 91       	pop	r17
    30bc:	0f 91       	pop	r16
    30be:	ff 90       	pop	r15
    30c0:	ef 90       	pop	r14
    30c2:	08 95       	ret

000030c4 <fifo_init>:
    30c4:	fc 01       	movw	r30, r24
    30c6:	41 11       	cpse	r20, r1
    30c8:	01 c0       	rjmp	.+2      	; 0x30cc <fifo_init+0x8>
    30ca:	45 d3       	rcall	.+1674   	; 0x3756 <abort>
    30cc:	84 2f       	mov	r24, r20
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9c 01       	movw	r18, r24
    30d2:	21 50       	subi	r18, 0x01	; 1
    30d4:	31 09       	sbc	r19, r1
    30d6:	82 23       	and	r24, r18
    30d8:	93 23       	and	r25, r19
    30da:	89 2b       	or	r24, r25
    30dc:	09 f0       	breq	.+2      	; 0x30e0 <fifo_init+0x1c>
    30de:	3b d3       	rcall	.+1654   	; 0x3756 <abort>
    30e0:	41 38       	cpi	r20, 0x81	; 129
    30e2:	08 f0       	brcs	.+2      	; 0x30e6 <fifo_init+0x22>
    30e4:	38 d3       	rcall	.+1648   	; 0x3756 <abort>
    30e6:	12 82       	std	Z+2, r1	; 0x02
    30e8:	13 82       	std	Z+3, r1	; 0x03
    30ea:	44 83       	std	Z+4, r20	; 0x04
    30ec:	44 0f       	add	r20, r20
    30ee:	41 50       	subi	r20, 0x01	; 1
    30f0:	45 83       	std	Z+5, r20	; 0x05
    30f2:	71 83       	std	Z+1, r23	; 0x01
    30f4:	60 83       	st	Z, r22
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	08 95       	ret

000030fc <__subsf3>:
    30fc:	50 58       	subi	r21, 0x80	; 128

000030fe <__addsf3>:
    30fe:	bb 27       	eor	r27, r27
    3100:	aa 27       	eor	r26, r26
    3102:	0e d0       	rcall	.+28     	; 0x3120 <__addsf3x>
    3104:	48 c1       	rjmp	.+656    	; 0x3396 <__fp_round>
    3106:	39 d1       	rcall	.+626    	; 0x337a <__fp_pscA>
    3108:	30 f0       	brcs	.+12     	; 0x3116 <__addsf3+0x18>
    310a:	3e d1       	rcall	.+636    	; 0x3388 <__fp_pscB>
    310c:	20 f0       	brcs	.+8      	; 0x3116 <__addsf3+0x18>
    310e:	31 f4       	brne	.+12     	; 0x311c <__addsf3+0x1e>
    3110:	9f 3f       	cpi	r25, 0xFF	; 255
    3112:	11 f4       	brne	.+4      	; 0x3118 <__addsf3+0x1a>
    3114:	1e f4       	brtc	.+6      	; 0x311c <__addsf3+0x1e>
    3116:	2e c1       	rjmp	.+604    	; 0x3374 <__fp_nan>
    3118:	0e f4       	brtc	.+2      	; 0x311c <__addsf3+0x1e>
    311a:	e0 95       	com	r30
    311c:	e7 fb       	bst	r30, 7
    311e:	24 c1       	rjmp	.+584    	; 0x3368 <__fp_inf>

00003120 <__addsf3x>:
    3120:	e9 2f       	mov	r30, r25
    3122:	4a d1       	rcall	.+660    	; 0x33b8 <__fp_split3>
    3124:	80 f3       	brcs	.-32     	; 0x3106 <__addsf3+0x8>
    3126:	ba 17       	cp	r27, r26
    3128:	62 07       	cpc	r22, r18
    312a:	73 07       	cpc	r23, r19
    312c:	84 07       	cpc	r24, r20
    312e:	95 07       	cpc	r25, r21
    3130:	18 f0       	brcs	.+6      	; 0x3138 <__addsf3x+0x18>
    3132:	71 f4       	brne	.+28     	; 0x3150 <__addsf3x+0x30>
    3134:	9e f5       	brtc	.+102    	; 0x319c <__addsf3x+0x7c>
    3136:	62 c1       	rjmp	.+708    	; 0x33fc <__fp_zero>
    3138:	0e f4       	brtc	.+2      	; 0x313c <__addsf3x+0x1c>
    313a:	e0 95       	com	r30
    313c:	0b 2e       	mov	r0, r27
    313e:	ba 2f       	mov	r27, r26
    3140:	a0 2d       	mov	r26, r0
    3142:	0b 01       	movw	r0, r22
    3144:	b9 01       	movw	r22, r18
    3146:	90 01       	movw	r18, r0
    3148:	0c 01       	movw	r0, r24
    314a:	ca 01       	movw	r24, r20
    314c:	a0 01       	movw	r20, r0
    314e:	11 24       	eor	r1, r1
    3150:	ff 27       	eor	r31, r31
    3152:	59 1b       	sub	r21, r25
    3154:	99 f0       	breq	.+38     	; 0x317c <__addsf3x+0x5c>
    3156:	59 3f       	cpi	r21, 0xF9	; 249
    3158:	50 f4       	brcc	.+20     	; 0x316e <__addsf3x+0x4e>
    315a:	50 3e       	cpi	r21, 0xE0	; 224
    315c:	68 f1       	brcs	.+90     	; 0x31b8 <__addsf3x+0x98>
    315e:	1a 16       	cp	r1, r26
    3160:	f0 40       	sbci	r31, 0x00	; 0
    3162:	a2 2f       	mov	r26, r18
    3164:	23 2f       	mov	r18, r19
    3166:	34 2f       	mov	r19, r20
    3168:	44 27       	eor	r20, r20
    316a:	58 5f       	subi	r21, 0xF8	; 248
    316c:	f3 cf       	rjmp	.-26     	; 0x3154 <__addsf3x+0x34>
    316e:	46 95       	lsr	r20
    3170:	37 95       	ror	r19
    3172:	27 95       	ror	r18
    3174:	a7 95       	ror	r26
    3176:	f0 40       	sbci	r31, 0x00	; 0
    3178:	53 95       	inc	r21
    317a:	c9 f7       	brne	.-14     	; 0x316e <__addsf3x+0x4e>
    317c:	7e f4       	brtc	.+30     	; 0x319c <__addsf3x+0x7c>
    317e:	1f 16       	cp	r1, r31
    3180:	ba 0b       	sbc	r27, r26
    3182:	62 0b       	sbc	r22, r18
    3184:	73 0b       	sbc	r23, r19
    3186:	84 0b       	sbc	r24, r20
    3188:	ba f0       	brmi	.+46     	; 0x31b8 <__addsf3x+0x98>
    318a:	91 50       	subi	r25, 0x01	; 1
    318c:	a1 f0       	breq	.+40     	; 0x31b6 <__addsf3x+0x96>
    318e:	ff 0f       	add	r31, r31
    3190:	bb 1f       	adc	r27, r27
    3192:	66 1f       	adc	r22, r22
    3194:	77 1f       	adc	r23, r23
    3196:	88 1f       	adc	r24, r24
    3198:	c2 f7       	brpl	.-16     	; 0x318a <__addsf3x+0x6a>
    319a:	0e c0       	rjmp	.+28     	; 0x31b8 <__addsf3x+0x98>
    319c:	ba 0f       	add	r27, r26
    319e:	62 1f       	adc	r22, r18
    31a0:	73 1f       	adc	r23, r19
    31a2:	84 1f       	adc	r24, r20
    31a4:	48 f4       	brcc	.+18     	; 0x31b8 <__addsf3x+0x98>
    31a6:	87 95       	ror	r24
    31a8:	77 95       	ror	r23
    31aa:	67 95       	ror	r22
    31ac:	b7 95       	ror	r27
    31ae:	f7 95       	ror	r31
    31b0:	9e 3f       	cpi	r25, 0xFE	; 254
    31b2:	08 f0       	brcs	.+2      	; 0x31b6 <__addsf3x+0x96>
    31b4:	b3 cf       	rjmp	.-154    	; 0x311c <__addsf3+0x1e>
    31b6:	93 95       	inc	r25
    31b8:	88 0f       	add	r24, r24
    31ba:	08 f0       	brcs	.+2      	; 0x31be <__addsf3x+0x9e>
    31bc:	99 27       	eor	r25, r25
    31be:	ee 0f       	add	r30, r30
    31c0:	97 95       	ror	r25
    31c2:	87 95       	ror	r24
    31c4:	08 95       	ret

000031c6 <__divsf3>:
    31c6:	0c d0       	rcall	.+24     	; 0x31e0 <__divsf3x>
    31c8:	e6 c0       	rjmp	.+460    	; 0x3396 <__fp_round>
    31ca:	de d0       	rcall	.+444    	; 0x3388 <__fp_pscB>
    31cc:	40 f0       	brcs	.+16     	; 0x31de <__divsf3+0x18>
    31ce:	d5 d0       	rcall	.+426    	; 0x337a <__fp_pscA>
    31d0:	30 f0       	brcs	.+12     	; 0x31de <__divsf3+0x18>
    31d2:	21 f4       	brne	.+8      	; 0x31dc <__divsf3+0x16>
    31d4:	5f 3f       	cpi	r21, 0xFF	; 255
    31d6:	19 f0       	breq	.+6      	; 0x31de <__divsf3+0x18>
    31d8:	c7 c0       	rjmp	.+398    	; 0x3368 <__fp_inf>
    31da:	51 11       	cpse	r21, r1
    31dc:	10 c1       	rjmp	.+544    	; 0x33fe <__fp_szero>
    31de:	ca c0       	rjmp	.+404    	; 0x3374 <__fp_nan>

000031e0 <__divsf3x>:
    31e0:	eb d0       	rcall	.+470    	; 0x33b8 <__fp_split3>
    31e2:	98 f3       	brcs	.-26     	; 0x31ca <__divsf3+0x4>

000031e4 <__divsf3_pse>:
    31e4:	99 23       	and	r25, r25
    31e6:	c9 f3       	breq	.-14     	; 0x31da <__divsf3+0x14>
    31e8:	55 23       	and	r21, r21
    31ea:	b1 f3       	breq	.-20     	; 0x31d8 <__divsf3+0x12>
    31ec:	95 1b       	sub	r25, r21
    31ee:	55 0b       	sbc	r21, r21
    31f0:	bb 27       	eor	r27, r27
    31f2:	aa 27       	eor	r26, r26
    31f4:	62 17       	cp	r22, r18
    31f6:	73 07       	cpc	r23, r19
    31f8:	84 07       	cpc	r24, r20
    31fa:	38 f0       	brcs	.+14     	; 0x320a <__divsf3_pse+0x26>
    31fc:	9f 5f       	subi	r25, 0xFF	; 255
    31fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3200:	22 0f       	add	r18, r18
    3202:	33 1f       	adc	r19, r19
    3204:	44 1f       	adc	r20, r20
    3206:	aa 1f       	adc	r26, r26
    3208:	a9 f3       	breq	.-22     	; 0x31f4 <__divsf3_pse+0x10>
    320a:	33 d0       	rcall	.+102    	; 0x3272 <__divsf3_pse+0x8e>
    320c:	0e 2e       	mov	r0, r30
    320e:	3a f0       	brmi	.+14     	; 0x321e <__divsf3_pse+0x3a>
    3210:	e0 e8       	ldi	r30, 0x80	; 128
    3212:	30 d0       	rcall	.+96     	; 0x3274 <__divsf3_pse+0x90>
    3214:	91 50       	subi	r25, 0x01	; 1
    3216:	50 40       	sbci	r21, 0x00	; 0
    3218:	e6 95       	lsr	r30
    321a:	00 1c       	adc	r0, r0
    321c:	ca f7       	brpl	.-14     	; 0x3210 <__divsf3_pse+0x2c>
    321e:	29 d0       	rcall	.+82     	; 0x3272 <__divsf3_pse+0x8e>
    3220:	fe 2f       	mov	r31, r30
    3222:	27 d0       	rcall	.+78     	; 0x3272 <__divsf3_pse+0x8e>
    3224:	66 0f       	add	r22, r22
    3226:	77 1f       	adc	r23, r23
    3228:	88 1f       	adc	r24, r24
    322a:	bb 1f       	adc	r27, r27
    322c:	26 17       	cp	r18, r22
    322e:	37 07       	cpc	r19, r23
    3230:	48 07       	cpc	r20, r24
    3232:	ab 07       	cpc	r26, r27
    3234:	b0 e8       	ldi	r27, 0x80	; 128
    3236:	09 f0       	breq	.+2      	; 0x323a <__divsf3_pse+0x56>
    3238:	bb 0b       	sbc	r27, r27
    323a:	80 2d       	mov	r24, r0
    323c:	bf 01       	movw	r22, r30
    323e:	ff 27       	eor	r31, r31
    3240:	93 58       	subi	r25, 0x83	; 131
    3242:	5f 4f       	sbci	r21, 0xFF	; 255
    3244:	2a f0       	brmi	.+10     	; 0x3250 <__divsf3_pse+0x6c>
    3246:	9e 3f       	cpi	r25, 0xFE	; 254
    3248:	51 05       	cpc	r21, r1
    324a:	68 f0       	brcs	.+26     	; 0x3266 <__divsf3_pse+0x82>
    324c:	8d c0       	rjmp	.+282    	; 0x3368 <__fp_inf>
    324e:	d7 c0       	rjmp	.+430    	; 0x33fe <__fp_szero>
    3250:	5f 3f       	cpi	r21, 0xFF	; 255
    3252:	ec f3       	brlt	.-6      	; 0x324e <__divsf3_pse+0x6a>
    3254:	98 3e       	cpi	r25, 0xE8	; 232
    3256:	dc f3       	brlt	.-10     	; 0x324e <__divsf3_pse+0x6a>
    3258:	86 95       	lsr	r24
    325a:	77 95       	ror	r23
    325c:	67 95       	ror	r22
    325e:	b7 95       	ror	r27
    3260:	f7 95       	ror	r31
    3262:	9f 5f       	subi	r25, 0xFF	; 255
    3264:	c9 f7       	brne	.-14     	; 0x3258 <__divsf3_pse+0x74>
    3266:	88 0f       	add	r24, r24
    3268:	91 1d       	adc	r25, r1
    326a:	96 95       	lsr	r25
    326c:	87 95       	ror	r24
    326e:	97 f9       	bld	r25, 7
    3270:	08 95       	ret
    3272:	e1 e0       	ldi	r30, 0x01	; 1
    3274:	66 0f       	add	r22, r22
    3276:	77 1f       	adc	r23, r23
    3278:	88 1f       	adc	r24, r24
    327a:	bb 1f       	adc	r27, r27
    327c:	62 17       	cp	r22, r18
    327e:	73 07       	cpc	r23, r19
    3280:	84 07       	cpc	r24, r20
    3282:	ba 07       	cpc	r27, r26
    3284:	20 f0       	brcs	.+8      	; 0x328e <__divsf3_pse+0xaa>
    3286:	62 1b       	sub	r22, r18
    3288:	73 0b       	sbc	r23, r19
    328a:	84 0b       	sbc	r24, r20
    328c:	ba 0b       	sbc	r27, r26
    328e:	ee 1f       	adc	r30, r30
    3290:	88 f7       	brcc	.-30     	; 0x3274 <__divsf3_pse+0x90>
    3292:	e0 95       	com	r30
    3294:	08 95       	ret

00003296 <__fixunssfsi>:
    3296:	98 d0       	rcall	.+304    	; 0x33c8 <__fp_splitA>
    3298:	88 f0       	brcs	.+34     	; 0x32bc <__fixunssfsi+0x26>
    329a:	9f 57       	subi	r25, 0x7F	; 127
    329c:	90 f0       	brcs	.+36     	; 0x32c2 <__fixunssfsi+0x2c>
    329e:	b9 2f       	mov	r27, r25
    32a0:	99 27       	eor	r25, r25
    32a2:	b7 51       	subi	r27, 0x17	; 23
    32a4:	a0 f0       	brcs	.+40     	; 0x32ce <__fixunssfsi+0x38>
    32a6:	d1 f0       	breq	.+52     	; 0x32dc <__fixunssfsi+0x46>
    32a8:	66 0f       	add	r22, r22
    32aa:	77 1f       	adc	r23, r23
    32ac:	88 1f       	adc	r24, r24
    32ae:	99 1f       	adc	r25, r25
    32b0:	1a f0       	brmi	.+6      	; 0x32b8 <__fixunssfsi+0x22>
    32b2:	ba 95       	dec	r27
    32b4:	c9 f7       	brne	.-14     	; 0x32a8 <__fixunssfsi+0x12>
    32b6:	12 c0       	rjmp	.+36     	; 0x32dc <__fixunssfsi+0x46>
    32b8:	b1 30       	cpi	r27, 0x01	; 1
    32ba:	81 f0       	breq	.+32     	; 0x32dc <__fixunssfsi+0x46>
    32bc:	9f d0       	rcall	.+318    	; 0x33fc <__fp_zero>
    32be:	b1 e0       	ldi	r27, 0x01	; 1
    32c0:	08 95       	ret
    32c2:	9c c0       	rjmp	.+312    	; 0x33fc <__fp_zero>
    32c4:	67 2f       	mov	r22, r23
    32c6:	78 2f       	mov	r23, r24
    32c8:	88 27       	eor	r24, r24
    32ca:	b8 5f       	subi	r27, 0xF8	; 248
    32cc:	39 f0       	breq	.+14     	; 0x32dc <__fixunssfsi+0x46>
    32ce:	b9 3f       	cpi	r27, 0xF9	; 249
    32d0:	cc f3       	brlt	.-14     	; 0x32c4 <__fixunssfsi+0x2e>
    32d2:	86 95       	lsr	r24
    32d4:	77 95       	ror	r23
    32d6:	67 95       	ror	r22
    32d8:	b3 95       	inc	r27
    32da:	d9 f7       	brne	.-10     	; 0x32d2 <__fixunssfsi+0x3c>
    32dc:	3e f4       	brtc	.+14     	; 0x32ec <__fixunssfsi+0x56>
    32de:	90 95       	com	r25
    32e0:	80 95       	com	r24
    32e2:	70 95       	com	r23
    32e4:	61 95       	neg	r22
    32e6:	7f 4f       	sbci	r23, 0xFF	; 255
    32e8:	8f 4f       	sbci	r24, 0xFF	; 255
    32ea:	9f 4f       	sbci	r25, 0xFF	; 255
    32ec:	08 95       	ret

000032ee <__floatunsisf>:
    32ee:	e8 94       	clt
    32f0:	09 c0       	rjmp	.+18     	; 0x3304 <__floatsisf+0x12>

000032f2 <__floatsisf>:
    32f2:	97 fb       	bst	r25, 7
    32f4:	3e f4       	brtc	.+14     	; 0x3304 <__floatsisf+0x12>
    32f6:	90 95       	com	r25
    32f8:	80 95       	com	r24
    32fa:	70 95       	com	r23
    32fc:	61 95       	neg	r22
    32fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3300:	8f 4f       	sbci	r24, 0xFF	; 255
    3302:	9f 4f       	sbci	r25, 0xFF	; 255
    3304:	99 23       	and	r25, r25
    3306:	a9 f0       	breq	.+42     	; 0x3332 <__floatsisf+0x40>
    3308:	f9 2f       	mov	r31, r25
    330a:	96 e9       	ldi	r25, 0x96	; 150
    330c:	bb 27       	eor	r27, r27
    330e:	93 95       	inc	r25
    3310:	f6 95       	lsr	r31
    3312:	87 95       	ror	r24
    3314:	77 95       	ror	r23
    3316:	67 95       	ror	r22
    3318:	b7 95       	ror	r27
    331a:	f1 11       	cpse	r31, r1
    331c:	f8 cf       	rjmp	.-16     	; 0x330e <__floatsisf+0x1c>
    331e:	fa f4       	brpl	.+62     	; 0x335e <__floatsisf+0x6c>
    3320:	bb 0f       	add	r27, r27
    3322:	11 f4       	brne	.+4      	; 0x3328 <__floatsisf+0x36>
    3324:	60 ff       	sbrs	r22, 0
    3326:	1b c0       	rjmp	.+54     	; 0x335e <__floatsisf+0x6c>
    3328:	6f 5f       	subi	r22, 0xFF	; 255
    332a:	7f 4f       	sbci	r23, 0xFF	; 255
    332c:	8f 4f       	sbci	r24, 0xFF	; 255
    332e:	9f 4f       	sbci	r25, 0xFF	; 255
    3330:	16 c0       	rjmp	.+44     	; 0x335e <__floatsisf+0x6c>
    3332:	88 23       	and	r24, r24
    3334:	11 f0       	breq	.+4      	; 0x333a <__floatsisf+0x48>
    3336:	96 e9       	ldi	r25, 0x96	; 150
    3338:	11 c0       	rjmp	.+34     	; 0x335c <__floatsisf+0x6a>
    333a:	77 23       	and	r23, r23
    333c:	21 f0       	breq	.+8      	; 0x3346 <__floatsisf+0x54>
    333e:	9e e8       	ldi	r25, 0x8E	; 142
    3340:	87 2f       	mov	r24, r23
    3342:	76 2f       	mov	r23, r22
    3344:	05 c0       	rjmp	.+10     	; 0x3350 <__floatsisf+0x5e>
    3346:	66 23       	and	r22, r22
    3348:	71 f0       	breq	.+28     	; 0x3366 <__floatsisf+0x74>
    334a:	96 e8       	ldi	r25, 0x86	; 134
    334c:	86 2f       	mov	r24, r22
    334e:	70 e0       	ldi	r23, 0x00	; 0
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	2a f0       	brmi	.+10     	; 0x335e <__floatsisf+0x6c>
    3354:	9a 95       	dec	r25
    3356:	66 0f       	add	r22, r22
    3358:	77 1f       	adc	r23, r23
    335a:	88 1f       	adc	r24, r24
    335c:	da f7       	brpl	.-10     	; 0x3354 <__floatsisf+0x62>
    335e:	88 0f       	add	r24, r24
    3360:	96 95       	lsr	r25
    3362:	87 95       	ror	r24
    3364:	97 f9       	bld	r25, 7
    3366:	08 95       	ret

00003368 <__fp_inf>:
    3368:	97 f9       	bld	r25, 7
    336a:	9f 67       	ori	r25, 0x7F	; 127
    336c:	80 e8       	ldi	r24, 0x80	; 128
    336e:	70 e0       	ldi	r23, 0x00	; 0
    3370:	60 e0       	ldi	r22, 0x00	; 0
    3372:	08 95       	ret

00003374 <__fp_nan>:
    3374:	9f ef       	ldi	r25, 0xFF	; 255
    3376:	80 ec       	ldi	r24, 0xC0	; 192
    3378:	08 95       	ret

0000337a <__fp_pscA>:
    337a:	00 24       	eor	r0, r0
    337c:	0a 94       	dec	r0
    337e:	16 16       	cp	r1, r22
    3380:	17 06       	cpc	r1, r23
    3382:	18 06       	cpc	r1, r24
    3384:	09 06       	cpc	r0, r25
    3386:	08 95       	ret

00003388 <__fp_pscB>:
    3388:	00 24       	eor	r0, r0
    338a:	0a 94       	dec	r0
    338c:	12 16       	cp	r1, r18
    338e:	13 06       	cpc	r1, r19
    3390:	14 06       	cpc	r1, r20
    3392:	05 06       	cpc	r0, r21
    3394:	08 95       	ret

00003396 <__fp_round>:
    3396:	09 2e       	mov	r0, r25
    3398:	03 94       	inc	r0
    339a:	00 0c       	add	r0, r0
    339c:	11 f4       	brne	.+4      	; 0x33a2 <__fp_round+0xc>
    339e:	88 23       	and	r24, r24
    33a0:	52 f0       	brmi	.+20     	; 0x33b6 <__fp_round+0x20>
    33a2:	bb 0f       	add	r27, r27
    33a4:	40 f4       	brcc	.+16     	; 0x33b6 <__fp_round+0x20>
    33a6:	bf 2b       	or	r27, r31
    33a8:	11 f4       	brne	.+4      	; 0x33ae <__fp_round+0x18>
    33aa:	60 ff       	sbrs	r22, 0
    33ac:	04 c0       	rjmp	.+8      	; 0x33b6 <__fp_round+0x20>
    33ae:	6f 5f       	subi	r22, 0xFF	; 255
    33b0:	7f 4f       	sbci	r23, 0xFF	; 255
    33b2:	8f 4f       	sbci	r24, 0xFF	; 255
    33b4:	9f 4f       	sbci	r25, 0xFF	; 255
    33b6:	08 95       	ret

000033b8 <__fp_split3>:
    33b8:	57 fd       	sbrc	r21, 7
    33ba:	90 58       	subi	r25, 0x80	; 128
    33bc:	44 0f       	add	r20, r20
    33be:	55 1f       	adc	r21, r21
    33c0:	59 f0       	breq	.+22     	; 0x33d8 <__fp_splitA+0x10>
    33c2:	5f 3f       	cpi	r21, 0xFF	; 255
    33c4:	71 f0       	breq	.+28     	; 0x33e2 <__fp_splitA+0x1a>
    33c6:	47 95       	ror	r20

000033c8 <__fp_splitA>:
    33c8:	88 0f       	add	r24, r24
    33ca:	97 fb       	bst	r25, 7
    33cc:	99 1f       	adc	r25, r25
    33ce:	61 f0       	breq	.+24     	; 0x33e8 <__fp_splitA+0x20>
    33d0:	9f 3f       	cpi	r25, 0xFF	; 255
    33d2:	79 f0       	breq	.+30     	; 0x33f2 <__fp_splitA+0x2a>
    33d4:	87 95       	ror	r24
    33d6:	08 95       	ret
    33d8:	12 16       	cp	r1, r18
    33da:	13 06       	cpc	r1, r19
    33dc:	14 06       	cpc	r1, r20
    33de:	55 1f       	adc	r21, r21
    33e0:	f2 cf       	rjmp	.-28     	; 0x33c6 <__fp_split3+0xe>
    33e2:	46 95       	lsr	r20
    33e4:	f1 df       	rcall	.-30     	; 0x33c8 <__fp_splitA>
    33e6:	08 c0       	rjmp	.+16     	; 0x33f8 <__fp_splitA+0x30>
    33e8:	16 16       	cp	r1, r22
    33ea:	17 06       	cpc	r1, r23
    33ec:	18 06       	cpc	r1, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	f1 cf       	rjmp	.-30     	; 0x33d4 <__fp_splitA+0xc>
    33f2:	86 95       	lsr	r24
    33f4:	71 05       	cpc	r23, r1
    33f6:	61 05       	cpc	r22, r1
    33f8:	08 94       	sec
    33fa:	08 95       	ret

000033fc <__fp_zero>:
    33fc:	e8 94       	clt

000033fe <__fp_szero>:
    33fe:	bb 27       	eor	r27, r27
    3400:	66 27       	eor	r22, r22
    3402:	77 27       	eor	r23, r23
    3404:	cb 01       	movw	r24, r22
    3406:	97 f9       	bld	r25, 7
    3408:	08 95       	ret

0000340a <__mulsf3>:
    340a:	0b d0       	rcall	.+22     	; 0x3422 <__mulsf3x>
    340c:	c4 cf       	rjmp	.-120    	; 0x3396 <__fp_round>
    340e:	b5 df       	rcall	.-150    	; 0x337a <__fp_pscA>
    3410:	28 f0       	brcs	.+10     	; 0x341c <__mulsf3+0x12>
    3412:	ba df       	rcall	.-140    	; 0x3388 <__fp_pscB>
    3414:	18 f0       	brcs	.+6      	; 0x341c <__mulsf3+0x12>
    3416:	95 23       	and	r25, r21
    3418:	09 f0       	breq	.+2      	; 0x341c <__mulsf3+0x12>
    341a:	a6 cf       	rjmp	.-180    	; 0x3368 <__fp_inf>
    341c:	ab cf       	rjmp	.-170    	; 0x3374 <__fp_nan>
    341e:	11 24       	eor	r1, r1
    3420:	ee cf       	rjmp	.-36     	; 0x33fe <__fp_szero>

00003422 <__mulsf3x>:
    3422:	ca df       	rcall	.-108    	; 0x33b8 <__fp_split3>
    3424:	a0 f3       	brcs	.-24     	; 0x340e <__mulsf3+0x4>

00003426 <__mulsf3_pse>:
    3426:	95 9f       	mul	r25, r21
    3428:	d1 f3       	breq	.-12     	; 0x341e <__mulsf3+0x14>
    342a:	95 0f       	add	r25, r21
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	55 1f       	adc	r21, r21
    3430:	62 9f       	mul	r22, r18
    3432:	f0 01       	movw	r30, r0
    3434:	72 9f       	mul	r23, r18
    3436:	bb 27       	eor	r27, r27
    3438:	f0 0d       	add	r31, r0
    343a:	b1 1d       	adc	r27, r1
    343c:	63 9f       	mul	r22, r19
    343e:	aa 27       	eor	r26, r26
    3440:	f0 0d       	add	r31, r0
    3442:	b1 1d       	adc	r27, r1
    3444:	aa 1f       	adc	r26, r26
    3446:	64 9f       	mul	r22, r20
    3448:	66 27       	eor	r22, r22
    344a:	b0 0d       	add	r27, r0
    344c:	a1 1d       	adc	r26, r1
    344e:	66 1f       	adc	r22, r22
    3450:	82 9f       	mul	r24, r18
    3452:	22 27       	eor	r18, r18
    3454:	b0 0d       	add	r27, r0
    3456:	a1 1d       	adc	r26, r1
    3458:	62 1f       	adc	r22, r18
    345a:	73 9f       	mul	r23, r19
    345c:	b0 0d       	add	r27, r0
    345e:	a1 1d       	adc	r26, r1
    3460:	62 1f       	adc	r22, r18
    3462:	83 9f       	mul	r24, r19
    3464:	a0 0d       	add	r26, r0
    3466:	61 1d       	adc	r22, r1
    3468:	22 1f       	adc	r18, r18
    346a:	74 9f       	mul	r23, r20
    346c:	33 27       	eor	r19, r19
    346e:	a0 0d       	add	r26, r0
    3470:	61 1d       	adc	r22, r1
    3472:	23 1f       	adc	r18, r19
    3474:	84 9f       	mul	r24, r20
    3476:	60 0d       	add	r22, r0
    3478:	21 1d       	adc	r18, r1
    347a:	82 2f       	mov	r24, r18
    347c:	76 2f       	mov	r23, r22
    347e:	6a 2f       	mov	r22, r26
    3480:	11 24       	eor	r1, r1
    3482:	9f 57       	subi	r25, 0x7F	; 127
    3484:	50 40       	sbci	r21, 0x00	; 0
    3486:	8a f0       	brmi	.+34     	; 0x34aa <__mulsf3_pse+0x84>
    3488:	e1 f0       	breq	.+56     	; 0x34c2 <__mulsf3_pse+0x9c>
    348a:	88 23       	and	r24, r24
    348c:	4a f0       	brmi	.+18     	; 0x34a0 <__mulsf3_pse+0x7a>
    348e:	ee 0f       	add	r30, r30
    3490:	ff 1f       	adc	r31, r31
    3492:	bb 1f       	adc	r27, r27
    3494:	66 1f       	adc	r22, r22
    3496:	77 1f       	adc	r23, r23
    3498:	88 1f       	adc	r24, r24
    349a:	91 50       	subi	r25, 0x01	; 1
    349c:	50 40       	sbci	r21, 0x00	; 0
    349e:	a9 f7       	brne	.-22     	; 0x348a <__mulsf3_pse+0x64>
    34a0:	9e 3f       	cpi	r25, 0xFE	; 254
    34a2:	51 05       	cpc	r21, r1
    34a4:	70 f0       	brcs	.+28     	; 0x34c2 <__mulsf3_pse+0x9c>
    34a6:	60 cf       	rjmp	.-320    	; 0x3368 <__fp_inf>
    34a8:	aa cf       	rjmp	.-172    	; 0x33fe <__fp_szero>
    34aa:	5f 3f       	cpi	r21, 0xFF	; 255
    34ac:	ec f3       	brlt	.-6      	; 0x34a8 <__mulsf3_pse+0x82>
    34ae:	98 3e       	cpi	r25, 0xE8	; 232
    34b0:	dc f3       	brlt	.-10     	; 0x34a8 <__mulsf3_pse+0x82>
    34b2:	86 95       	lsr	r24
    34b4:	77 95       	ror	r23
    34b6:	67 95       	ror	r22
    34b8:	b7 95       	ror	r27
    34ba:	f7 95       	ror	r31
    34bc:	e7 95       	ror	r30
    34be:	9f 5f       	subi	r25, 0xFF	; 255
    34c0:	c1 f7       	brne	.-16     	; 0x34b2 <__mulsf3_pse+0x8c>
    34c2:	fe 2b       	or	r31, r30
    34c4:	88 0f       	add	r24, r24
    34c6:	91 1d       	adc	r25, r1
    34c8:	96 95       	lsr	r25
    34ca:	87 95       	ror	r24
    34cc:	97 f9       	bld	r25, 7
    34ce:	08 95       	ret

000034d0 <__tablejump2__>:
    34d0:	ee 0f       	add	r30, r30
    34d2:	ff 1f       	adc	r31, r31
    34d4:	88 1f       	adc	r24, r24
    34d6:	8b bf       	out	0x3b, r24	; 59
    34d8:	07 90       	elpm	r0, Z+
    34da:	f6 91       	elpm	r31, Z
    34dc:	e0 2d       	mov	r30, r0
    34de:	19 94       	eijmp

000034e0 <calloc>:
    34e0:	0f 93       	push	r16
    34e2:	1f 93       	push	r17
    34e4:	cf 93       	push	r28
    34e6:	df 93       	push	r29
    34e8:	86 9f       	mul	r24, r22
    34ea:	80 01       	movw	r16, r0
    34ec:	87 9f       	mul	r24, r23
    34ee:	10 0d       	add	r17, r0
    34f0:	96 9f       	mul	r25, r22
    34f2:	10 0d       	add	r17, r0
    34f4:	11 24       	eor	r1, r1
    34f6:	c8 01       	movw	r24, r16
    34f8:	0d d0       	rcall	.+26     	; 0x3514 <malloc>
    34fa:	ec 01       	movw	r28, r24
    34fc:	00 97       	sbiw	r24, 0x00	; 0
    34fe:	21 f0       	breq	.+8      	; 0x3508 <calloc+0x28>
    3500:	a8 01       	movw	r20, r16
    3502:	60 e0       	ldi	r22, 0x00	; 0
    3504:	70 e0       	ldi	r23, 0x00	; 0
    3506:	34 d1       	rcall	.+616    	; 0x3770 <memset>
    3508:	ce 01       	movw	r24, r28
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    3512:	08 95       	ret

00003514 <malloc>:
    3514:	0f 93       	push	r16
    3516:	1f 93       	push	r17
    3518:	cf 93       	push	r28
    351a:	df 93       	push	r29
    351c:	82 30       	cpi	r24, 0x02	; 2
    351e:	91 05       	cpc	r25, r1
    3520:	10 f4       	brcc	.+4      	; 0x3526 <malloc+0x12>
    3522:	82 e0       	ldi	r24, 0x02	; 2
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	e0 91 ee 0d 	lds	r30, 0x0DEE	; 0x800dee <__flp>
    352a:	f0 91 ef 0d 	lds	r31, 0x0DEF	; 0x800def <__flp+0x1>
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	a0 e0       	ldi	r26, 0x00	; 0
    3534:	b0 e0       	ldi	r27, 0x00	; 0
    3536:	30 97       	sbiw	r30, 0x00	; 0
    3538:	19 f1       	breq	.+70     	; 0x3580 <malloc+0x6c>
    353a:	40 81       	ld	r20, Z
    353c:	51 81       	ldd	r21, Z+1	; 0x01
    353e:	02 81       	ldd	r16, Z+2	; 0x02
    3540:	13 81       	ldd	r17, Z+3	; 0x03
    3542:	48 17       	cp	r20, r24
    3544:	59 07       	cpc	r21, r25
    3546:	c8 f0       	brcs	.+50     	; 0x357a <malloc+0x66>
    3548:	84 17       	cp	r24, r20
    354a:	95 07       	cpc	r25, r21
    354c:	69 f4       	brne	.+26     	; 0x3568 <malloc+0x54>
    354e:	10 97       	sbiw	r26, 0x00	; 0
    3550:	31 f0       	breq	.+12     	; 0x355e <malloc+0x4a>
    3552:	12 96       	adiw	r26, 0x02	; 2
    3554:	0c 93       	st	X, r16
    3556:	12 97       	sbiw	r26, 0x02	; 2
    3558:	13 96       	adiw	r26, 0x03	; 3
    355a:	1c 93       	st	X, r17
    355c:	27 c0       	rjmp	.+78     	; 0x35ac <malloc+0x98>
    355e:	00 93 ee 0d 	sts	0x0DEE, r16	; 0x800dee <__flp>
    3562:	10 93 ef 0d 	sts	0x0DEF, r17	; 0x800def <__flp+0x1>
    3566:	22 c0       	rjmp	.+68     	; 0x35ac <malloc+0x98>
    3568:	21 15       	cp	r18, r1
    356a:	31 05       	cpc	r19, r1
    356c:	19 f0       	breq	.+6      	; 0x3574 <malloc+0x60>
    356e:	42 17       	cp	r20, r18
    3570:	53 07       	cpc	r21, r19
    3572:	18 f4       	brcc	.+6      	; 0x357a <malloc+0x66>
    3574:	9a 01       	movw	r18, r20
    3576:	bd 01       	movw	r22, r26
    3578:	ef 01       	movw	r28, r30
    357a:	df 01       	movw	r26, r30
    357c:	f8 01       	movw	r30, r16
    357e:	db cf       	rjmp	.-74     	; 0x3536 <malloc+0x22>
    3580:	21 15       	cp	r18, r1
    3582:	31 05       	cpc	r19, r1
    3584:	f9 f0       	breq	.+62     	; 0x35c4 <malloc+0xb0>
    3586:	28 1b       	sub	r18, r24
    3588:	39 0b       	sbc	r19, r25
    358a:	24 30       	cpi	r18, 0x04	; 4
    358c:	31 05       	cpc	r19, r1
    358e:	80 f4       	brcc	.+32     	; 0x35b0 <malloc+0x9c>
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	9b 81       	ldd	r25, Y+3	; 0x03
    3594:	61 15       	cp	r22, r1
    3596:	71 05       	cpc	r23, r1
    3598:	21 f0       	breq	.+8      	; 0x35a2 <malloc+0x8e>
    359a:	fb 01       	movw	r30, r22
    359c:	93 83       	std	Z+3, r25	; 0x03
    359e:	82 83       	std	Z+2, r24	; 0x02
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <malloc+0x96>
    35a2:	90 93 ef 0d 	sts	0x0DEF, r25	; 0x800def <__flp+0x1>
    35a6:	80 93 ee 0d 	sts	0x0DEE, r24	; 0x800dee <__flp>
    35aa:	fe 01       	movw	r30, r28
    35ac:	32 96       	adiw	r30, 0x02	; 2
    35ae:	44 c0       	rjmp	.+136    	; 0x3638 <malloc+0x124>
    35b0:	fe 01       	movw	r30, r28
    35b2:	e2 0f       	add	r30, r18
    35b4:	f3 1f       	adc	r31, r19
    35b6:	81 93       	st	Z+, r24
    35b8:	91 93       	st	Z+, r25
    35ba:	22 50       	subi	r18, 0x02	; 2
    35bc:	31 09       	sbc	r19, r1
    35be:	39 83       	std	Y+1, r19	; 0x01
    35c0:	28 83       	st	Y, r18
    35c2:	3a c0       	rjmp	.+116    	; 0x3638 <malloc+0x124>
    35c4:	20 91 ec 0d 	lds	r18, 0x0DEC	; 0x800dec <__brkval>
    35c8:	30 91 ed 0d 	lds	r19, 0x0DED	; 0x800ded <__brkval+0x1>
    35cc:	23 2b       	or	r18, r19
    35ce:	41 f4       	brne	.+16     	; 0x35e0 <malloc+0xcc>
    35d0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    35d4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    35d8:	30 93 ed 0d 	sts	0x0DED, r19	; 0x800ded <__brkval+0x1>
    35dc:	20 93 ec 0d 	sts	0x0DEC, r18	; 0x800dec <__brkval>
    35e0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    35e4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    35e8:	21 15       	cp	r18, r1
    35ea:	31 05       	cpc	r19, r1
    35ec:	41 f4       	brne	.+16     	; 0x35fe <malloc+0xea>
    35ee:	2d b7       	in	r18, 0x3d	; 61
    35f0:	3e b7       	in	r19, 0x3e	; 62
    35f2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    35f6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    35fa:	24 1b       	sub	r18, r20
    35fc:	35 0b       	sbc	r19, r21
    35fe:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <__brkval>
    3602:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <__brkval+0x1>
    3606:	e2 17       	cp	r30, r18
    3608:	f3 07       	cpc	r31, r19
    360a:	a0 f4       	brcc	.+40     	; 0x3634 <malloc+0x120>
    360c:	2e 1b       	sub	r18, r30
    360e:	3f 0b       	sbc	r19, r31
    3610:	28 17       	cp	r18, r24
    3612:	39 07       	cpc	r19, r25
    3614:	78 f0       	brcs	.+30     	; 0x3634 <malloc+0x120>
    3616:	ac 01       	movw	r20, r24
    3618:	4e 5f       	subi	r20, 0xFE	; 254
    361a:	5f 4f       	sbci	r21, 0xFF	; 255
    361c:	24 17       	cp	r18, r20
    361e:	35 07       	cpc	r19, r21
    3620:	48 f0       	brcs	.+18     	; 0x3634 <malloc+0x120>
    3622:	4e 0f       	add	r20, r30
    3624:	5f 1f       	adc	r21, r31
    3626:	50 93 ed 0d 	sts	0x0DED, r21	; 0x800ded <__brkval+0x1>
    362a:	40 93 ec 0d 	sts	0x0DEC, r20	; 0x800dec <__brkval>
    362e:	81 93       	st	Z+, r24
    3630:	91 93       	st	Z+, r25
    3632:	02 c0       	rjmp	.+4      	; 0x3638 <malloc+0x124>
    3634:	e0 e0       	ldi	r30, 0x00	; 0
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	cf 01       	movw	r24, r30
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	08 95       	ret

00003644 <free>:
    3644:	cf 93       	push	r28
    3646:	df 93       	push	r29
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	09 f4       	brne	.+2      	; 0x364e <free+0xa>
    364c:	81 c0       	rjmp	.+258    	; 0x3750 <free+0x10c>
    364e:	fc 01       	movw	r30, r24
    3650:	32 97       	sbiw	r30, 0x02	; 2
    3652:	13 82       	std	Z+3, r1	; 0x03
    3654:	12 82       	std	Z+2, r1	; 0x02
    3656:	a0 91 ee 0d 	lds	r26, 0x0DEE	; 0x800dee <__flp>
    365a:	b0 91 ef 0d 	lds	r27, 0x0DEF	; 0x800def <__flp+0x1>
    365e:	10 97       	sbiw	r26, 0x00	; 0
    3660:	81 f4       	brne	.+32     	; 0x3682 <free+0x3e>
    3662:	20 81       	ld	r18, Z
    3664:	31 81       	ldd	r19, Z+1	; 0x01
    3666:	82 0f       	add	r24, r18
    3668:	93 1f       	adc	r25, r19
    366a:	20 91 ec 0d 	lds	r18, 0x0DEC	; 0x800dec <__brkval>
    366e:	30 91 ed 0d 	lds	r19, 0x0DED	; 0x800ded <__brkval+0x1>
    3672:	28 17       	cp	r18, r24
    3674:	39 07       	cpc	r19, r25
    3676:	51 f5       	brne	.+84     	; 0x36cc <free+0x88>
    3678:	f0 93 ed 0d 	sts	0x0DED, r31	; 0x800ded <__brkval+0x1>
    367c:	e0 93 ec 0d 	sts	0x0DEC, r30	; 0x800dec <__brkval>
    3680:	67 c0       	rjmp	.+206    	; 0x3750 <free+0x10c>
    3682:	ed 01       	movw	r28, r26
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	ce 17       	cp	r28, r30
    368a:	df 07       	cpc	r29, r31
    368c:	40 f4       	brcc	.+16     	; 0x369e <free+0x5a>
    368e:	4a 81       	ldd	r20, Y+2	; 0x02
    3690:	5b 81       	ldd	r21, Y+3	; 0x03
    3692:	9e 01       	movw	r18, r28
    3694:	41 15       	cp	r20, r1
    3696:	51 05       	cpc	r21, r1
    3698:	f1 f0       	breq	.+60     	; 0x36d6 <free+0x92>
    369a:	ea 01       	movw	r28, r20
    369c:	f5 cf       	rjmp	.-22     	; 0x3688 <free+0x44>
    369e:	d3 83       	std	Z+3, r29	; 0x03
    36a0:	c2 83       	std	Z+2, r28	; 0x02
    36a2:	40 81       	ld	r20, Z
    36a4:	51 81       	ldd	r21, Z+1	; 0x01
    36a6:	84 0f       	add	r24, r20
    36a8:	95 1f       	adc	r25, r21
    36aa:	c8 17       	cp	r28, r24
    36ac:	d9 07       	cpc	r29, r25
    36ae:	59 f4       	brne	.+22     	; 0x36c6 <free+0x82>
    36b0:	88 81       	ld	r24, Y
    36b2:	99 81       	ldd	r25, Y+1	; 0x01
    36b4:	84 0f       	add	r24, r20
    36b6:	95 1f       	adc	r25, r21
    36b8:	02 96       	adiw	r24, 0x02	; 2
    36ba:	91 83       	std	Z+1, r25	; 0x01
    36bc:	80 83       	st	Z, r24
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	9b 81       	ldd	r25, Y+3	; 0x03
    36c2:	93 83       	std	Z+3, r25	; 0x03
    36c4:	82 83       	std	Z+2, r24	; 0x02
    36c6:	21 15       	cp	r18, r1
    36c8:	31 05       	cpc	r19, r1
    36ca:	29 f4       	brne	.+10     	; 0x36d6 <free+0x92>
    36cc:	f0 93 ef 0d 	sts	0x0DEF, r31	; 0x800def <__flp+0x1>
    36d0:	e0 93 ee 0d 	sts	0x0DEE, r30	; 0x800dee <__flp>
    36d4:	3d c0       	rjmp	.+122    	; 0x3750 <free+0x10c>
    36d6:	e9 01       	movw	r28, r18
    36d8:	fb 83       	std	Y+3, r31	; 0x03
    36da:	ea 83       	std	Y+2, r30	; 0x02
    36dc:	49 91       	ld	r20, Y+
    36de:	59 91       	ld	r21, Y+
    36e0:	c4 0f       	add	r28, r20
    36e2:	d5 1f       	adc	r29, r21
    36e4:	ec 17       	cp	r30, r28
    36e6:	fd 07       	cpc	r31, r29
    36e8:	61 f4       	brne	.+24     	; 0x3702 <free+0xbe>
    36ea:	80 81       	ld	r24, Z
    36ec:	91 81       	ldd	r25, Z+1	; 0x01
    36ee:	84 0f       	add	r24, r20
    36f0:	95 1f       	adc	r25, r21
    36f2:	02 96       	adiw	r24, 0x02	; 2
    36f4:	e9 01       	movw	r28, r18
    36f6:	99 83       	std	Y+1, r25	; 0x01
    36f8:	88 83       	st	Y, r24
    36fa:	82 81       	ldd	r24, Z+2	; 0x02
    36fc:	93 81       	ldd	r25, Z+3	; 0x03
    36fe:	9b 83       	std	Y+3, r25	; 0x03
    3700:	8a 83       	std	Y+2, r24	; 0x02
    3702:	e0 e0       	ldi	r30, 0x00	; 0
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	12 96       	adiw	r26, 0x02	; 2
    3708:	8d 91       	ld	r24, X+
    370a:	9c 91       	ld	r25, X
    370c:	13 97       	sbiw	r26, 0x03	; 3
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	19 f0       	breq	.+6      	; 0x3718 <free+0xd4>
    3712:	fd 01       	movw	r30, r26
    3714:	dc 01       	movw	r26, r24
    3716:	f7 cf       	rjmp	.-18     	; 0x3706 <free+0xc2>
    3718:	8d 91       	ld	r24, X+
    371a:	9c 91       	ld	r25, X
    371c:	11 97       	sbiw	r26, 0x01	; 1
    371e:	9d 01       	movw	r18, r26
    3720:	2e 5f       	subi	r18, 0xFE	; 254
    3722:	3f 4f       	sbci	r19, 0xFF	; 255
    3724:	82 0f       	add	r24, r18
    3726:	93 1f       	adc	r25, r19
    3728:	20 91 ec 0d 	lds	r18, 0x0DEC	; 0x800dec <__brkval>
    372c:	30 91 ed 0d 	lds	r19, 0x0DED	; 0x800ded <__brkval+0x1>
    3730:	28 17       	cp	r18, r24
    3732:	39 07       	cpc	r19, r25
    3734:	69 f4       	brne	.+26     	; 0x3750 <free+0x10c>
    3736:	30 97       	sbiw	r30, 0x00	; 0
    3738:	29 f4       	brne	.+10     	; 0x3744 <free+0x100>
    373a:	10 92 ef 0d 	sts	0x0DEF, r1	; 0x800def <__flp+0x1>
    373e:	10 92 ee 0d 	sts	0x0DEE, r1	; 0x800dee <__flp>
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <free+0x104>
    3744:	13 82       	std	Z+3, r1	; 0x03
    3746:	12 82       	std	Z+2, r1	; 0x02
    3748:	b0 93 ed 0d 	sts	0x0DED, r27	; 0x800ded <__brkval+0x1>
    374c:	a0 93 ec 0d 	sts	0x0DEC, r26	; 0x800dec <__brkval>
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	08 95       	ret

00003756 <abort>:
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	f8 94       	cli
    375c:	00 c3       	rjmp	.+1536   	; 0x3d5e <_exit>

0000375e <memcpy>:
    375e:	fb 01       	movw	r30, r22
    3760:	dc 01       	movw	r26, r24
    3762:	02 c0       	rjmp	.+4      	; 0x3768 <memcpy+0xa>
    3764:	01 90       	ld	r0, Z+
    3766:	0d 92       	st	X+, r0
    3768:	41 50       	subi	r20, 0x01	; 1
    376a:	50 40       	sbci	r21, 0x00	; 0
    376c:	d8 f7       	brcc	.-10     	; 0x3764 <memcpy+0x6>
    376e:	08 95       	ret

00003770 <memset>:
    3770:	dc 01       	movw	r26, r24
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <memset+0x6>
    3774:	6d 93       	st	X+, r22
    3776:	41 50       	subi	r20, 0x01	; 1
    3778:	50 40       	sbci	r21, 0x00	; 0
    377a:	e0 f7       	brcc	.-8      	; 0x3774 <memset+0x4>
    377c:	08 95       	ret

0000377e <printf>:
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	ae 01       	movw	r20, r28
    3788:	4a 5f       	subi	r20, 0xFA	; 250
    378a:	5f 4f       	sbci	r21, 0xFF	; 255
    378c:	fa 01       	movw	r30, r20
    378e:	61 91       	ld	r22, Z+
    3790:	71 91       	ld	r23, Z+
    3792:	af 01       	movw	r20, r30
    3794:	80 91 f2 0d 	lds	r24, 0x0DF2	; 0x800df2 <__iob+0x2>
    3798:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <__iob+0x3>
    379c:	33 d0       	rcall	.+102    	; 0x3804 <vfprintf>
    379e:	df 91       	pop	r29
    37a0:	cf 91       	pop	r28
    37a2:	08 95       	ret

000037a4 <puts>:
    37a4:	0f 93       	push	r16
    37a6:	1f 93       	push	r17
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	e0 91 f2 0d 	lds	r30, 0x0DF2	; 0x800df2 <__iob+0x2>
    37b0:	f0 91 f3 0d 	lds	r31, 0x0DF3	; 0x800df3 <__iob+0x3>
    37b4:	23 81       	ldd	r18, Z+3	; 0x03
    37b6:	21 ff       	sbrs	r18, 1
    37b8:	1b c0       	rjmp	.+54     	; 0x37f0 <puts+0x4c>
    37ba:	8c 01       	movw	r16, r24
    37bc:	d0 e0       	ldi	r29, 0x00	; 0
    37be:	c0 e0       	ldi	r28, 0x00	; 0
    37c0:	f8 01       	movw	r30, r16
    37c2:	81 91       	ld	r24, Z+
    37c4:	8f 01       	movw	r16, r30
    37c6:	60 91 f2 0d 	lds	r22, 0x0DF2	; 0x800df2 <__iob+0x2>
    37ca:	70 91 f3 0d 	lds	r23, 0x0DF3	; 0x800df3 <__iob+0x3>
    37ce:	db 01       	movw	r26, r22
    37d0:	18 96       	adiw	r26, 0x08	; 8
    37d2:	ed 91       	ld	r30, X+
    37d4:	fc 91       	ld	r31, X
    37d6:	19 97       	sbiw	r26, 0x09	; 9
    37d8:	88 23       	and	r24, r24
    37da:	31 f0       	breq	.+12     	; 0x37e8 <puts+0x44>
    37dc:	19 95       	eicall
    37de:	89 2b       	or	r24, r25
    37e0:	79 f3       	breq	.-34     	; 0x37c0 <puts+0x1c>
    37e2:	df ef       	ldi	r29, 0xFF	; 255
    37e4:	cf ef       	ldi	r28, 0xFF	; 255
    37e6:	ec cf       	rjmp	.-40     	; 0x37c0 <puts+0x1c>
    37e8:	8a e0       	ldi	r24, 0x0A	; 10
    37ea:	19 95       	eicall
    37ec:	89 2b       	or	r24, r25
    37ee:	19 f0       	breq	.+6      	; 0x37f6 <puts+0x52>
    37f0:	8f ef       	ldi	r24, 0xFF	; 255
    37f2:	9f ef       	ldi	r25, 0xFF	; 255
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <puts+0x56>
    37f6:	8d 2f       	mov	r24, r29
    37f8:	9c 2f       	mov	r25, r28
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	08 95       	ret

00003804 <vfprintf>:
    3804:	2f 92       	push	r2
    3806:	3f 92       	push	r3
    3808:	4f 92       	push	r4
    380a:	5f 92       	push	r5
    380c:	6f 92       	push	r6
    380e:	7f 92       	push	r7
    3810:	8f 92       	push	r8
    3812:	9f 92       	push	r9
    3814:	af 92       	push	r10
    3816:	bf 92       	push	r11
    3818:	cf 92       	push	r12
    381a:	df 92       	push	r13
    381c:	ef 92       	push	r14
    381e:	ff 92       	push	r15
    3820:	0f 93       	push	r16
    3822:	1f 93       	push	r17
    3824:	cf 93       	push	r28
    3826:	df 93       	push	r29
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62
    382c:	2b 97       	sbiw	r28, 0x0b	; 11
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	6c 01       	movw	r12, r24
    383a:	7b 01       	movw	r14, r22
    383c:	8a 01       	movw	r16, r20
    383e:	fc 01       	movw	r30, r24
    3840:	17 82       	std	Z+7, r1	; 0x07
    3842:	16 82       	std	Z+6, r1	; 0x06
    3844:	83 81       	ldd	r24, Z+3	; 0x03
    3846:	81 ff       	sbrs	r24, 1
    3848:	bf c1       	rjmp	.+894    	; 0x3bc8 <vfprintf+0x3c4>
    384a:	ce 01       	movw	r24, r28
    384c:	01 96       	adiw	r24, 0x01	; 1
    384e:	3c 01       	movw	r6, r24
    3850:	f6 01       	movw	r30, r12
    3852:	93 81       	ldd	r25, Z+3	; 0x03
    3854:	f7 01       	movw	r30, r14
    3856:	93 fd       	sbrc	r25, 3
    3858:	85 91       	lpm	r24, Z+
    385a:	93 ff       	sbrs	r25, 3
    385c:	81 91       	ld	r24, Z+
    385e:	7f 01       	movw	r14, r30
    3860:	88 23       	and	r24, r24
    3862:	09 f4       	brne	.+2      	; 0x3866 <vfprintf+0x62>
    3864:	ad c1       	rjmp	.+858    	; 0x3bc0 <vfprintf+0x3bc>
    3866:	85 32       	cpi	r24, 0x25	; 37
    3868:	39 f4       	brne	.+14     	; 0x3878 <vfprintf+0x74>
    386a:	93 fd       	sbrc	r25, 3
    386c:	85 91       	lpm	r24, Z+
    386e:	93 ff       	sbrs	r25, 3
    3870:	81 91       	ld	r24, Z+
    3872:	7f 01       	movw	r14, r30
    3874:	85 32       	cpi	r24, 0x25	; 37
    3876:	21 f4       	brne	.+8      	; 0x3880 <vfprintf+0x7c>
    3878:	b6 01       	movw	r22, r12
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	d6 d1       	rcall	.+940    	; 0x3c2a <fputc>
    387e:	e8 cf       	rjmp	.-48     	; 0x3850 <vfprintf+0x4c>
    3880:	91 2c       	mov	r9, r1
    3882:	21 2c       	mov	r2, r1
    3884:	31 2c       	mov	r3, r1
    3886:	ff e1       	ldi	r31, 0x1F	; 31
    3888:	f3 15       	cp	r31, r3
    388a:	d8 f0       	brcs	.+54     	; 0x38c2 <vfprintf+0xbe>
    388c:	8b 32       	cpi	r24, 0x2B	; 43
    388e:	79 f0       	breq	.+30     	; 0x38ae <vfprintf+0xaa>
    3890:	38 f4       	brcc	.+14     	; 0x38a0 <vfprintf+0x9c>
    3892:	80 32       	cpi	r24, 0x20	; 32
    3894:	79 f0       	breq	.+30     	; 0x38b4 <vfprintf+0xb0>
    3896:	83 32       	cpi	r24, 0x23	; 35
    3898:	a1 f4       	brne	.+40     	; 0x38c2 <vfprintf+0xbe>
    389a:	23 2d       	mov	r18, r3
    389c:	20 61       	ori	r18, 0x10	; 16
    389e:	1d c0       	rjmp	.+58     	; 0x38da <vfprintf+0xd6>
    38a0:	8d 32       	cpi	r24, 0x2D	; 45
    38a2:	61 f0       	breq	.+24     	; 0x38bc <vfprintf+0xb8>
    38a4:	80 33       	cpi	r24, 0x30	; 48
    38a6:	69 f4       	brne	.+26     	; 0x38c2 <vfprintf+0xbe>
    38a8:	23 2d       	mov	r18, r3
    38aa:	21 60       	ori	r18, 0x01	; 1
    38ac:	16 c0       	rjmp	.+44     	; 0x38da <vfprintf+0xd6>
    38ae:	83 2d       	mov	r24, r3
    38b0:	82 60       	ori	r24, 0x02	; 2
    38b2:	38 2e       	mov	r3, r24
    38b4:	e3 2d       	mov	r30, r3
    38b6:	e4 60       	ori	r30, 0x04	; 4
    38b8:	3e 2e       	mov	r3, r30
    38ba:	2a c0       	rjmp	.+84     	; 0x3910 <vfprintf+0x10c>
    38bc:	f3 2d       	mov	r31, r3
    38be:	f8 60       	ori	r31, 0x08	; 8
    38c0:	1d c0       	rjmp	.+58     	; 0x38fc <vfprintf+0xf8>
    38c2:	37 fc       	sbrc	r3, 7
    38c4:	2d c0       	rjmp	.+90     	; 0x3920 <vfprintf+0x11c>
    38c6:	20 ed       	ldi	r18, 0xD0	; 208
    38c8:	28 0f       	add	r18, r24
    38ca:	2a 30       	cpi	r18, 0x0A	; 10
    38cc:	40 f0       	brcs	.+16     	; 0x38de <vfprintf+0xda>
    38ce:	8e 32       	cpi	r24, 0x2E	; 46
    38d0:	b9 f4       	brne	.+46     	; 0x3900 <vfprintf+0xfc>
    38d2:	36 fc       	sbrc	r3, 6
    38d4:	75 c1       	rjmp	.+746    	; 0x3bc0 <vfprintf+0x3bc>
    38d6:	23 2d       	mov	r18, r3
    38d8:	20 64       	ori	r18, 0x40	; 64
    38da:	32 2e       	mov	r3, r18
    38dc:	19 c0       	rjmp	.+50     	; 0x3910 <vfprintf+0x10c>
    38de:	36 fe       	sbrs	r3, 6
    38e0:	06 c0       	rjmp	.+12     	; 0x38ee <vfprintf+0xea>
    38e2:	8a e0       	ldi	r24, 0x0A	; 10
    38e4:	98 9e       	mul	r9, r24
    38e6:	20 0d       	add	r18, r0
    38e8:	11 24       	eor	r1, r1
    38ea:	92 2e       	mov	r9, r18
    38ec:	11 c0       	rjmp	.+34     	; 0x3910 <vfprintf+0x10c>
    38ee:	ea e0       	ldi	r30, 0x0A	; 10
    38f0:	2e 9e       	mul	r2, r30
    38f2:	20 0d       	add	r18, r0
    38f4:	11 24       	eor	r1, r1
    38f6:	22 2e       	mov	r2, r18
    38f8:	f3 2d       	mov	r31, r3
    38fa:	f0 62       	ori	r31, 0x20	; 32
    38fc:	3f 2e       	mov	r3, r31
    38fe:	08 c0       	rjmp	.+16     	; 0x3910 <vfprintf+0x10c>
    3900:	8c 36       	cpi	r24, 0x6C	; 108
    3902:	21 f4       	brne	.+8      	; 0x390c <vfprintf+0x108>
    3904:	83 2d       	mov	r24, r3
    3906:	80 68       	ori	r24, 0x80	; 128
    3908:	38 2e       	mov	r3, r24
    390a:	02 c0       	rjmp	.+4      	; 0x3910 <vfprintf+0x10c>
    390c:	88 36       	cpi	r24, 0x68	; 104
    390e:	41 f4       	brne	.+16     	; 0x3920 <vfprintf+0x11c>
    3910:	f7 01       	movw	r30, r14
    3912:	93 fd       	sbrc	r25, 3
    3914:	85 91       	lpm	r24, Z+
    3916:	93 ff       	sbrs	r25, 3
    3918:	81 91       	ld	r24, Z+
    391a:	7f 01       	movw	r14, r30
    391c:	81 11       	cpse	r24, r1
    391e:	b3 cf       	rjmp	.-154    	; 0x3886 <vfprintf+0x82>
    3920:	98 2f       	mov	r25, r24
    3922:	9f 7d       	andi	r25, 0xDF	; 223
    3924:	95 54       	subi	r25, 0x45	; 69
    3926:	93 30       	cpi	r25, 0x03	; 3
    3928:	28 f4       	brcc	.+10     	; 0x3934 <vfprintf+0x130>
    392a:	0c 5f       	subi	r16, 0xFC	; 252
    392c:	1f 4f       	sbci	r17, 0xFF	; 255
    392e:	9f e3       	ldi	r25, 0x3F	; 63
    3930:	99 83       	std	Y+1, r25	; 0x01
    3932:	0d c0       	rjmp	.+26     	; 0x394e <vfprintf+0x14a>
    3934:	83 36       	cpi	r24, 0x63	; 99
    3936:	31 f0       	breq	.+12     	; 0x3944 <vfprintf+0x140>
    3938:	83 37       	cpi	r24, 0x73	; 115
    393a:	71 f0       	breq	.+28     	; 0x3958 <vfprintf+0x154>
    393c:	83 35       	cpi	r24, 0x53	; 83
    393e:	09 f0       	breq	.+2      	; 0x3942 <vfprintf+0x13e>
    3940:	55 c0       	rjmp	.+170    	; 0x39ec <vfprintf+0x1e8>
    3942:	20 c0       	rjmp	.+64     	; 0x3984 <vfprintf+0x180>
    3944:	f8 01       	movw	r30, r16
    3946:	80 81       	ld	r24, Z
    3948:	89 83       	std	Y+1, r24	; 0x01
    394a:	0e 5f       	subi	r16, 0xFE	; 254
    394c:	1f 4f       	sbci	r17, 0xFF	; 255
    394e:	88 24       	eor	r8, r8
    3950:	83 94       	inc	r8
    3952:	91 2c       	mov	r9, r1
    3954:	53 01       	movw	r10, r6
    3956:	12 c0       	rjmp	.+36     	; 0x397c <vfprintf+0x178>
    3958:	28 01       	movw	r4, r16
    395a:	f2 e0       	ldi	r31, 0x02	; 2
    395c:	4f 0e       	add	r4, r31
    395e:	51 1c       	adc	r5, r1
    3960:	f8 01       	movw	r30, r16
    3962:	a0 80       	ld	r10, Z
    3964:	b1 80       	ldd	r11, Z+1	; 0x01
    3966:	36 fe       	sbrs	r3, 6
    3968:	03 c0       	rjmp	.+6      	; 0x3970 <vfprintf+0x16c>
    396a:	69 2d       	mov	r22, r9
    396c:	70 e0       	ldi	r23, 0x00	; 0
    396e:	02 c0       	rjmp	.+4      	; 0x3974 <vfprintf+0x170>
    3970:	6f ef       	ldi	r22, 0xFF	; 255
    3972:	7f ef       	ldi	r23, 0xFF	; 255
    3974:	c5 01       	movw	r24, r10
    3976:	4e d1       	rcall	.+668    	; 0x3c14 <strnlen>
    3978:	4c 01       	movw	r8, r24
    397a:	82 01       	movw	r16, r4
    397c:	f3 2d       	mov	r31, r3
    397e:	ff 77       	andi	r31, 0x7F	; 127
    3980:	3f 2e       	mov	r3, r31
    3982:	15 c0       	rjmp	.+42     	; 0x39ae <vfprintf+0x1aa>
    3984:	28 01       	movw	r4, r16
    3986:	22 e0       	ldi	r18, 0x02	; 2
    3988:	42 0e       	add	r4, r18
    398a:	51 1c       	adc	r5, r1
    398c:	f8 01       	movw	r30, r16
    398e:	a0 80       	ld	r10, Z
    3990:	b1 80       	ldd	r11, Z+1	; 0x01
    3992:	36 fe       	sbrs	r3, 6
    3994:	03 c0       	rjmp	.+6      	; 0x399c <vfprintf+0x198>
    3996:	69 2d       	mov	r22, r9
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	02 c0       	rjmp	.+4      	; 0x39a0 <vfprintf+0x19c>
    399c:	6f ef       	ldi	r22, 0xFF	; 255
    399e:	7f ef       	ldi	r23, 0xFF	; 255
    39a0:	c5 01       	movw	r24, r10
    39a2:	2d d1       	rcall	.+602    	; 0x3bfe <strnlen_P>
    39a4:	4c 01       	movw	r8, r24
    39a6:	f3 2d       	mov	r31, r3
    39a8:	f0 68       	ori	r31, 0x80	; 128
    39aa:	3f 2e       	mov	r3, r31
    39ac:	82 01       	movw	r16, r4
    39ae:	33 fc       	sbrc	r3, 3
    39b0:	19 c0       	rjmp	.+50     	; 0x39e4 <vfprintf+0x1e0>
    39b2:	82 2d       	mov	r24, r2
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	88 16       	cp	r8, r24
    39b8:	99 06       	cpc	r9, r25
    39ba:	a0 f4       	brcc	.+40     	; 0x39e4 <vfprintf+0x1e0>
    39bc:	b6 01       	movw	r22, r12
    39be:	80 e2       	ldi	r24, 0x20	; 32
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	33 d1       	rcall	.+614    	; 0x3c2a <fputc>
    39c4:	2a 94       	dec	r2
    39c6:	f5 cf       	rjmp	.-22     	; 0x39b2 <vfprintf+0x1ae>
    39c8:	f5 01       	movw	r30, r10
    39ca:	37 fc       	sbrc	r3, 7
    39cc:	85 91       	lpm	r24, Z+
    39ce:	37 fe       	sbrs	r3, 7
    39d0:	81 91       	ld	r24, Z+
    39d2:	5f 01       	movw	r10, r30
    39d4:	b6 01       	movw	r22, r12
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	28 d1       	rcall	.+592    	; 0x3c2a <fputc>
    39da:	21 10       	cpse	r2, r1
    39dc:	2a 94       	dec	r2
    39de:	21 e0       	ldi	r18, 0x01	; 1
    39e0:	82 1a       	sub	r8, r18
    39e2:	91 08       	sbc	r9, r1
    39e4:	81 14       	cp	r8, r1
    39e6:	91 04       	cpc	r9, r1
    39e8:	79 f7       	brne	.-34     	; 0x39c8 <vfprintf+0x1c4>
    39ea:	e1 c0       	rjmp	.+450    	; 0x3bae <vfprintf+0x3aa>
    39ec:	84 36       	cpi	r24, 0x64	; 100
    39ee:	11 f0       	breq	.+4      	; 0x39f4 <vfprintf+0x1f0>
    39f0:	89 36       	cpi	r24, 0x69	; 105
    39f2:	39 f5       	brne	.+78     	; 0x3a42 <vfprintf+0x23e>
    39f4:	f8 01       	movw	r30, r16
    39f6:	37 fe       	sbrs	r3, 7
    39f8:	07 c0       	rjmp	.+14     	; 0x3a08 <vfprintf+0x204>
    39fa:	60 81       	ld	r22, Z
    39fc:	71 81       	ldd	r23, Z+1	; 0x01
    39fe:	82 81       	ldd	r24, Z+2	; 0x02
    3a00:	93 81       	ldd	r25, Z+3	; 0x03
    3a02:	0c 5f       	subi	r16, 0xFC	; 252
    3a04:	1f 4f       	sbci	r17, 0xFF	; 255
    3a06:	08 c0       	rjmp	.+16     	; 0x3a18 <vfprintf+0x214>
    3a08:	60 81       	ld	r22, Z
    3a0a:	71 81       	ldd	r23, Z+1	; 0x01
    3a0c:	07 2e       	mov	r0, r23
    3a0e:	00 0c       	add	r0, r0
    3a10:	88 0b       	sbc	r24, r24
    3a12:	99 0b       	sbc	r25, r25
    3a14:	0e 5f       	subi	r16, 0xFE	; 254
    3a16:	1f 4f       	sbci	r17, 0xFF	; 255
    3a18:	f3 2d       	mov	r31, r3
    3a1a:	ff 76       	andi	r31, 0x6F	; 111
    3a1c:	3f 2e       	mov	r3, r31
    3a1e:	97 ff       	sbrs	r25, 7
    3a20:	09 c0       	rjmp	.+18     	; 0x3a34 <vfprintf+0x230>
    3a22:	90 95       	com	r25
    3a24:	80 95       	com	r24
    3a26:	70 95       	com	r23
    3a28:	61 95       	neg	r22
    3a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a30:	f0 68       	ori	r31, 0x80	; 128
    3a32:	3f 2e       	mov	r3, r31
    3a34:	2a e0       	ldi	r18, 0x0A	; 10
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	a3 01       	movw	r20, r6
    3a3a:	33 d1       	rcall	.+614    	; 0x3ca2 <__ultoa_invert>
    3a3c:	88 2e       	mov	r8, r24
    3a3e:	86 18       	sub	r8, r6
    3a40:	44 c0       	rjmp	.+136    	; 0x3aca <vfprintf+0x2c6>
    3a42:	85 37       	cpi	r24, 0x75	; 117
    3a44:	31 f4       	brne	.+12     	; 0x3a52 <vfprintf+0x24e>
    3a46:	23 2d       	mov	r18, r3
    3a48:	2f 7e       	andi	r18, 0xEF	; 239
    3a4a:	b2 2e       	mov	r11, r18
    3a4c:	2a e0       	ldi	r18, 0x0A	; 10
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	25 c0       	rjmp	.+74     	; 0x3a9c <vfprintf+0x298>
    3a52:	93 2d       	mov	r25, r3
    3a54:	99 7f       	andi	r25, 0xF9	; 249
    3a56:	b9 2e       	mov	r11, r25
    3a58:	8f 36       	cpi	r24, 0x6F	; 111
    3a5a:	c1 f0       	breq	.+48     	; 0x3a8c <vfprintf+0x288>
    3a5c:	18 f4       	brcc	.+6      	; 0x3a64 <vfprintf+0x260>
    3a5e:	88 35       	cpi	r24, 0x58	; 88
    3a60:	79 f0       	breq	.+30     	; 0x3a80 <vfprintf+0x27c>
    3a62:	ae c0       	rjmp	.+348    	; 0x3bc0 <vfprintf+0x3bc>
    3a64:	80 37       	cpi	r24, 0x70	; 112
    3a66:	19 f0       	breq	.+6      	; 0x3a6e <vfprintf+0x26a>
    3a68:	88 37       	cpi	r24, 0x78	; 120
    3a6a:	21 f0       	breq	.+8      	; 0x3a74 <vfprintf+0x270>
    3a6c:	a9 c0       	rjmp	.+338    	; 0x3bc0 <vfprintf+0x3bc>
    3a6e:	e9 2f       	mov	r30, r25
    3a70:	e0 61       	ori	r30, 0x10	; 16
    3a72:	be 2e       	mov	r11, r30
    3a74:	b4 fe       	sbrs	r11, 4
    3a76:	0d c0       	rjmp	.+26     	; 0x3a92 <vfprintf+0x28e>
    3a78:	fb 2d       	mov	r31, r11
    3a7a:	f4 60       	ori	r31, 0x04	; 4
    3a7c:	bf 2e       	mov	r11, r31
    3a7e:	09 c0       	rjmp	.+18     	; 0x3a92 <vfprintf+0x28e>
    3a80:	34 fe       	sbrs	r3, 4
    3a82:	0a c0       	rjmp	.+20     	; 0x3a98 <vfprintf+0x294>
    3a84:	29 2f       	mov	r18, r25
    3a86:	26 60       	ori	r18, 0x06	; 6
    3a88:	b2 2e       	mov	r11, r18
    3a8a:	06 c0       	rjmp	.+12     	; 0x3a98 <vfprintf+0x294>
    3a8c:	28 e0       	ldi	r18, 0x08	; 8
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	05 c0       	rjmp	.+10     	; 0x3a9c <vfprintf+0x298>
    3a92:	20 e1       	ldi	r18, 0x10	; 16
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	02 c0       	rjmp	.+4      	; 0x3a9c <vfprintf+0x298>
    3a98:	20 e1       	ldi	r18, 0x10	; 16
    3a9a:	32 e0       	ldi	r19, 0x02	; 2
    3a9c:	f8 01       	movw	r30, r16
    3a9e:	b7 fe       	sbrs	r11, 7
    3aa0:	07 c0       	rjmp	.+14     	; 0x3ab0 <vfprintf+0x2ac>
    3aa2:	60 81       	ld	r22, Z
    3aa4:	71 81       	ldd	r23, Z+1	; 0x01
    3aa6:	82 81       	ldd	r24, Z+2	; 0x02
    3aa8:	93 81       	ldd	r25, Z+3	; 0x03
    3aaa:	0c 5f       	subi	r16, 0xFC	; 252
    3aac:	1f 4f       	sbci	r17, 0xFF	; 255
    3aae:	06 c0       	rjmp	.+12     	; 0x3abc <vfprintf+0x2b8>
    3ab0:	60 81       	ld	r22, Z
    3ab2:	71 81       	ldd	r23, Z+1	; 0x01
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	0e 5f       	subi	r16, 0xFE	; 254
    3aba:	1f 4f       	sbci	r17, 0xFF	; 255
    3abc:	a3 01       	movw	r20, r6
    3abe:	f1 d0       	rcall	.+482    	; 0x3ca2 <__ultoa_invert>
    3ac0:	88 2e       	mov	r8, r24
    3ac2:	86 18       	sub	r8, r6
    3ac4:	fb 2d       	mov	r31, r11
    3ac6:	ff 77       	andi	r31, 0x7F	; 127
    3ac8:	3f 2e       	mov	r3, r31
    3aca:	36 fe       	sbrs	r3, 6
    3acc:	0d c0       	rjmp	.+26     	; 0x3ae8 <vfprintf+0x2e4>
    3ace:	23 2d       	mov	r18, r3
    3ad0:	2e 7f       	andi	r18, 0xFE	; 254
    3ad2:	a2 2e       	mov	r10, r18
    3ad4:	89 14       	cp	r8, r9
    3ad6:	58 f4       	brcc	.+22     	; 0x3aee <vfprintf+0x2ea>
    3ad8:	34 fe       	sbrs	r3, 4
    3ada:	0b c0       	rjmp	.+22     	; 0x3af2 <vfprintf+0x2ee>
    3adc:	32 fc       	sbrc	r3, 2
    3ade:	09 c0       	rjmp	.+18     	; 0x3af2 <vfprintf+0x2ee>
    3ae0:	83 2d       	mov	r24, r3
    3ae2:	8e 7e       	andi	r24, 0xEE	; 238
    3ae4:	a8 2e       	mov	r10, r24
    3ae6:	05 c0       	rjmp	.+10     	; 0x3af2 <vfprintf+0x2ee>
    3ae8:	b8 2c       	mov	r11, r8
    3aea:	a3 2c       	mov	r10, r3
    3aec:	03 c0       	rjmp	.+6      	; 0x3af4 <vfprintf+0x2f0>
    3aee:	b8 2c       	mov	r11, r8
    3af0:	01 c0       	rjmp	.+2      	; 0x3af4 <vfprintf+0x2f0>
    3af2:	b9 2c       	mov	r11, r9
    3af4:	a4 fe       	sbrs	r10, 4
    3af6:	0f c0       	rjmp	.+30     	; 0x3b16 <vfprintf+0x312>
    3af8:	fe 01       	movw	r30, r28
    3afa:	e8 0d       	add	r30, r8
    3afc:	f1 1d       	adc	r31, r1
    3afe:	80 81       	ld	r24, Z
    3b00:	80 33       	cpi	r24, 0x30	; 48
    3b02:	21 f4       	brne	.+8      	; 0x3b0c <vfprintf+0x308>
    3b04:	9a 2d       	mov	r25, r10
    3b06:	99 7e       	andi	r25, 0xE9	; 233
    3b08:	a9 2e       	mov	r10, r25
    3b0a:	09 c0       	rjmp	.+18     	; 0x3b1e <vfprintf+0x31a>
    3b0c:	a2 fe       	sbrs	r10, 2
    3b0e:	06 c0       	rjmp	.+12     	; 0x3b1c <vfprintf+0x318>
    3b10:	b3 94       	inc	r11
    3b12:	b3 94       	inc	r11
    3b14:	04 c0       	rjmp	.+8      	; 0x3b1e <vfprintf+0x31a>
    3b16:	8a 2d       	mov	r24, r10
    3b18:	86 78       	andi	r24, 0x86	; 134
    3b1a:	09 f0       	breq	.+2      	; 0x3b1e <vfprintf+0x31a>
    3b1c:	b3 94       	inc	r11
    3b1e:	a3 fc       	sbrc	r10, 3
    3b20:	10 c0       	rjmp	.+32     	; 0x3b42 <vfprintf+0x33e>
    3b22:	a0 fe       	sbrs	r10, 0
    3b24:	06 c0       	rjmp	.+12     	; 0x3b32 <vfprintf+0x32e>
    3b26:	b2 14       	cp	r11, r2
    3b28:	80 f4       	brcc	.+32     	; 0x3b4a <vfprintf+0x346>
    3b2a:	28 0c       	add	r2, r8
    3b2c:	92 2c       	mov	r9, r2
    3b2e:	9b 18       	sub	r9, r11
    3b30:	0d c0       	rjmp	.+26     	; 0x3b4c <vfprintf+0x348>
    3b32:	b2 14       	cp	r11, r2
    3b34:	58 f4       	brcc	.+22     	; 0x3b4c <vfprintf+0x348>
    3b36:	b6 01       	movw	r22, r12
    3b38:	80 e2       	ldi	r24, 0x20	; 32
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	76 d0       	rcall	.+236    	; 0x3c2a <fputc>
    3b3e:	b3 94       	inc	r11
    3b40:	f8 cf       	rjmp	.-16     	; 0x3b32 <vfprintf+0x32e>
    3b42:	b2 14       	cp	r11, r2
    3b44:	18 f4       	brcc	.+6      	; 0x3b4c <vfprintf+0x348>
    3b46:	2b 18       	sub	r2, r11
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <vfprintf+0x34a>
    3b4a:	98 2c       	mov	r9, r8
    3b4c:	21 2c       	mov	r2, r1
    3b4e:	a4 fe       	sbrs	r10, 4
    3b50:	0f c0       	rjmp	.+30     	; 0x3b70 <vfprintf+0x36c>
    3b52:	b6 01       	movw	r22, r12
    3b54:	80 e3       	ldi	r24, 0x30	; 48
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	68 d0       	rcall	.+208    	; 0x3c2a <fputc>
    3b5a:	a2 fe       	sbrs	r10, 2
    3b5c:	16 c0       	rjmp	.+44     	; 0x3b8a <vfprintf+0x386>
    3b5e:	a1 fc       	sbrc	r10, 1
    3b60:	03 c0       	rjmp	.+6      	; 0x3b68 <vfprintf+0x364>
    3b62:	88 e7       	ldi	r24, 0x78	; 120
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <vfprintf+0x368>
    3b68:	88 e5       	ldi	r24, 0x58	; 88
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	b6 01       	movw	r22, r12
    3b6e:	0c c0       	rjmp	.+24     	; 0x3b88 <vfprintf+0x384>
    3b70:	8a 2d       	mov	r24, r10
    3b72:	86 78       	andi	r24, 0x86	; 134
    3b74:	51 f0       	breq	.+20     	; 0x3b8a <vfprintf+0x386>
    3b76:	a1 fe       	sbrs	r10, 1
    3b78:	02 c0       	rjmp	.+4      	; 0x3b7e <vfprintf+0x37a>
    3b7a:	8b e2       	ldi	r24, 0x2B	; 43
    3b7c:	01 c0       	rjmp	.+2      	; 0x3b80 <vfprintf+0x37c>
    3b7e:	80 e2       	ldi	r24, 0x20	; 32
    3b80:	a7 fc       	sbrc	r10, 7
    3b82:	8d e2       	ldi	r24, 0x2D	; 45
    3b84:	b6 01       	movw	r22, r12
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	50 d0       	rcall	.+160    	; 0x3c2a <fputc>
    3b8a:	89 14       	cp	r8, r9
    3b8c:	30 f4       	brcc	.+12     	; 0x3b9a <vfprintf+0x396>
    3b8e:	b6 01       	movw	r22, r12
    3b90:	80 e3       	ldi	r24, 0x30	; 48
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	4a d0       	rcall	.+148    	; 0x3c2a <fputc>
    3b96:	9a 94       	dec	r9
    3b98:	f8 cf       	rjmp	.-16     	; 0x3b8a <vfprintf+0x386>
    3b9a:	8a 94       	dec	r8
    3b9c:	f3 01       	movw	r30, r6
    3b9e:	e8 0d       	add	r30, r8
    3ba0:	f1 1d       	adc	r31, r1
    3ba2:	80 81       	ld	r24, Z
    3ba4:	b6 01       	movw	r22, r12
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	40 d0       	rcall	.+128    	; 0x3c2a <fputc>
    3baa:	81 10       	cpse	r8, r1
    3bac:	f6 cf       	rjmp	.-20     	; 0x3b9a <vfprintf+0x396>
    3bae:	22 20       	and	r2, r2
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <vfprintf+0x3b0>
    3bb2:	4e ce       	rjmp	.-868    	; 0x3850 <vfprintf+0x4c>
    3bb4:	b6 01       	movw	r22, r12
    3bb6:	80 e2       	ldi	r24, 0x20	; 32
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	37 d0       	rcall	.+110    	; 0x3c2a <fputc>
    3bbc:	2a 94       	dec	r2
    3bbe:	f7 cf       	rjmp	.-18     	; 0x3bae <vfprintf+0x3aa>
    3bc0:	f6 01       	movw	r30, r12
    3bc2:	86 81       	ldd	r24, Z+6	; 0x06
    3bc4:	97 81       	ldd	r25, Z+7	; 0x07
    3bc6:	02 c0       	rjmp	.+4      	; 0x3bcc <vfprintf+0x3c8>
    3bc8:	8f ef       	ldi	r24, 0xFF	; 255
    3bca:	9f ef       	ldi	r25, 0xFF	; 255
    3bcc:	2b 96       	adiw	r28, 0x0b	; 11
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	f8 94       	cli
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	cd bf       	out	0x3d, r28	; 61
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	1f 91       	pop	r17
    3bde:	0f 91       	pop	r16
    3be0:	ff 90       	pop	r15
    3be2:	ef 90       	pop	r14
    3be4:	df 90       	pop	r13
    3be6:	cf 90       	pop	r12
    3be8:	bf 90       	pop	r11
    3bea:	af 90       	pop	r10
    3bec:	9f 90       	pop	r9
    3bee:	8f 90       	pop	r8
    3bf0:	7f 90       	pop	r7
    3bf2:	6f 90       	pop	r6
    3bf4:	5f 90       	pop	r5
    3bf6:	4f 90       	pop	r4
    3bf8:	3f 90       	pop	r3
    3bfa:	2f 90       	pop	r2
    3bfc:	08 95       	ret

00003bfe <strnlen_P>:
    3bfe:	fc 01       	movw	r30, r24
    3c00:	05 90       	lpm	r0, Z+
    3c02:	61 50       	subi	r22, 0x01	; 1
    3c04:	70 40       	sbci	r23, 0x00	; 0
    3c06:	01 10       	cpse	r0, r1
    3c08:	d8 f7       	brcc	.-10     	; 0x3c00 <strnlen_P+0x2>
    3c0a:	80 95       	com	r24
    3c0c:	90 95       	com	r25
    3c0e:	8e 0f       	add	r24, r30
    3c10:	9f 1f       	adc	r25, r31
    3c12:	08 95       	ret

00003c14 <strnlen>:
    3c14:	fc 01       	movw	r30, r24
    3c16:	61 50       	subi	r22, 0x01	; 1
    3c18:	70 40       	sbci	r23, 0x00	; 0
    3c1a:	01 90       	ld	r0, Z+
    3c1c:	01 10       	cpse	r0, r1
    3c1e:	d8 f7       	brcc	.-10     	; 0x3c16 <strnlen+0x2>
    3c20:	80 95       	com	r24
    3c22:	90 95       	com	r25
    3c24:	8e 0f       	add	r24, r30
    3c26:	9f 1f       	adc	r25, r31
    3c28:	08 95       	ret

00003c2a <fputc>:
    3c2a:	0f 93       	push	r16
    3c2c:	1f 93       	push	r17
    3c2e:	cf 93       	push	r28
    3c30:	df 93       	push	r29
    3c32:	fb 01       	movw	r30, r22
    3c34:	23 81       	ldd	r18, Z+3	; 0x03
    3c36:	21 fd       	sbrc	r18, 1
    3c38:	03 c0       	rjmp	.+6      	; 0x3c40 <fputc+0x16>
    3c3a:	8f ef       	ldi	r24, 0xFF	; 255
    3c3c:	9f ef       	ldi	r25, 0xFF	; 255
    3c3e:	2c c0       	rjmp	.+88     	; 0x3c98 <fputc+0x6e>
    3c40:	22 ff       	sbrs	r18, 2
    3c42:	16 c0       	rjmp	.+44     	; 0x3c70 <fputc+0x46>
    3c44:	46 81       	ldd	r20, Z+6	; 0x06
    3c46:	57 81       	ldd	r21, Z+7	; 0x07
    3c48:	24 81       	ldd	r18, Z+4	; 0x04
    3c4a:	35 81       	ldd	r19, Z+5	; 0x05
    3c4c:	42 17       	cp	r20, r18
    3c4e:	53 07       	cpc	r21, r19
    3c50:	44 f4       	brge	.+16     	; 0x3c62 <fputc+0x38>
    3c52:	a0 81       	ld	r26, Z
    3c54:	b1 81       	ldd	r27, Z+1	; 0x01
    3c56:	9d 01       	movw	r18, r26
    3c58:	2f 5f       	subi	r18, 0xFF	; 255
    3c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5c:	31 83       	std	Z+1, r19	; 0x01
    3c5e:	20 83       	st	Z, r18
    3c60:	8c 93       	st	X, r24
    3c62:	26 81       	ldd	r18, Z+6	; 0x06
    3c64:	37 81       	ldd	r19, Z+7	; 0x07
    3c66:	2f 5f       	subi	r18, 0xFF	; 255
    3c68:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6a:	37 83       	std	Z+7, r19	; 0x07
    3c6c:	26 83       	std	Z+6, r18	; 0x06
    3c6e:	14 c0       	rjmp	.+40     	; 0x3c98 <fputc+0x6e>
    3c70:	8b 01       	movw	r16, r22
    3c72:	ec 01       	movw	r28, r24
    3c74:	fb 01       	movw	r30, r22
    3c76:	00 84       	ldd	r0, Z+8	; 0x08
    3c78:	f1 85       	ldd	r31, Z+9	; 0x09
    3c7a:	e0 2d       	mov	r30, r0
    3c7c:	19 95       	eicall
    3c7e:	89 2b       	or	r24, r25
    3c80:	e1 f6       	brne	.-72     	; 0x3c3a <fputc+0x10>
    3c82:	d8 01       	movw	r26, r16
    3c84:	16 96       	adiw	r26, 0x06	; 6
    3c86:	8d 91       	ld	r24, X+
    3c88:	9c 91       	ld	r25, X
    3c8a:	17 97       	sbiw	r26, 0x07	; 7
    3c8c:	01 96       	adiw	r24, 0x01	; 1
    3c8e:	17 96       	adiw	r26, 0x07	; 7
    3c90:	9c 93       	st	X, r25
    3c92:	8e 93       	st	-X, r24
    3c94:	16 97       	sbiw	r26, 0x06	; 6
    3c96:	ce 01       	movw	r24, r28
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	1f 91       	pop	r17
    3c9e:	0f 91       	pop	r16
    3ca0:	08 95       	ret

00003ca2 <__ultoa_invert>:
    3ca2:	fa 01       	movw	r30, r20
    3ca4:	aa 27       	eor	r26, r26
    3ca6:	28 30       	cpi	r18, 0x08	; 8
    3ca8:	51 f1       	breq	.+84     	; 0x3cfe <__ultoa_invert+0x5c>
    3caa:	20 31       	cpi	r18, 0x10	; 16
    3cac:	81 f1       	breq	.+96     	; 0x3d0e <__ultoa_invert+0x6c>
    3cae:	e8 94       	clt
    3cb0:	6f 93       	push	r22
    3cb2:	6e 7f       	andi	r22, 0xFE	; 254
    3cb4:	6e 5f       	subi	r22, 0xFE	; 254
    3cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    3cba:	9f 4f       	sbci	r25, 0xFF	; 255
    3cbc:	af 4f       	sbci	r26, 0xFF	; 255
    3cbe:	b1 e0       	ldi	r27, 0x01	; 1
    3cc0:	3e d0       	rcall	.+124    	; 0x3d3e <__ultoa_invert+0x9c>
    3cc2:	b4 e0       	ldi	r27, 0x04	; 4
    3cc4:	3c d0       	rcall	.+120    	; 0x3d3e <__ultoa_invert+0x9c>
    3cc6:	67 0f       	add	r22, r23
    3cc8:	78 1f       	adc	r23, r24
    3cca:	89 1f       	adc	r24, r25
    3ccc:	9a 1f       	adc	r25, r26
    3cce:	a1 1d       	adc	r26, r1
    3cd0:	68 0f       	add	r22, r24
    3cd2:	79 1f       	adc	r23, r25
    3cd4:	8a 1f       	adc	r24, r26
    3cd6:	91 1d       	adc	r25, r1
    3cd8:	a1 1d       	adc	r26, r1
    3cda:	6a 0f       	add	r22, r26
    3cdc:	71 1d       	adc	r23, r1
    3cde:	81 1d       	adc	r24, r1
    3ce0:	91 1d       	adc	r25, r1
    3ce2:	a1 1d       	adc	r26, r1
    3ce4:	20 d0       	rcall	.+64     	; 0x3d26 <__ultoa_invert+0x84>
    3ce6:	09 f4       	brne	.+2      	; 0x3cea <__ultoa_invert+0x48>
    3ce8:	68 94       	set
    3cea:	3f 91       	pop	r19
    3cec:	2a e0       	ldi	r18, 0x0A	; 10
    3cee:	26 9f       	mul	r18, r22
    3cf0:	11 24       	eor	r1, r1
    3cf2:	30 19       	sub	r19, r0
    3cf4:	30 5d       	subi	r19, 0xD0	; 208
    3cf6:	31 93       	st	Z+, r19
    3cf8:	de f6       	brtc	.-74     	; 0x3cb0 <__ultoa_invert+0xe>
    3cfa:	cf 01       	movw	r24, r30
    3cfc:	08 95       	ret
    3cfe:	46 2f       	mov	r20, r22
    3d00:	47 70       	andi	r20, 0x07	; 7
    3d02:	40 5d       	subi	r20, 0xD0	; 208
    3d04:	41 93       	st	Z+, r20
    3d06:	b3 e0       	ldi	r27, 0x03	; 3
    3d08:	0f d0       	rcall	.+30     	; 0x3d28 <__ultoa_invert+0x86>
    3d0a:	c9 f7       	brne	.-14     	; 0x3cfe <__ultoa_invert+0x5c>
    3d0c:	f6 cf       	rjmp	.-20     	; 0x3cfa <__ultoa_invert+0x58>
    3d0e:	46 2f       	mov	r20, r22
    3d10:	4f 70       	andi	r20, 0x0F	; 15
    3d12:	40 5d       	subi	r20, 0xD0	; 208
    3d14:	4a 33       	cpi	r20, 0x3A	; 58
    3d16:	18 f0       	brcs	.+6      	; 0x3d1e <__ultoa_invert+0x7c>
    3d18:	49 5d       	subi	r20, 0xD9	; 217
    3d1a:	31 fd       	sbrc	r19, 1
    3d1c:	40 52       	subi	r20, 0x20	; 32
    3d1e:	41 93       	st	Z+, r20
    3d20:	02 d0       	rcall	.+4      	; 0x3d26 <__ultoa_invert+0x84>
    3d22:	a9 f7       	brne	.-22     	; 0x3d0e <__ultoa_invert+0x6c>
    3d24:	ea cf       	rjmp	.-44     	; 0x3cfa <__ultoa_invert+0x58>
    3d26:	b4 e0       	ldi	r27, 0x04	; 4
    3d28:	a6 95       	lsr	r26
    3d2a:	97 95       	ror	r25
    3d2c:	87 95       	ror	r24
    3d2e:	77 95       	ror	r23
    3d30:	67 95       	ror	r22
    3d32:	ba 95       	dec	r27
    3d34:	c9 f7       	brne	.-14     	; 0x3d28 <__ultoa_invert+0x86>
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	61 05       	cpc	r22, r1
    3d3a:	71 05       	cpc	r23, r1
    3d3c:	08 95       	ret
    3d3e:	9b 01       	movw	r18, r22
    3d40:	ac 01       	movw	r20, r24
    3d42:	0a 2e       	mov	r0, r26
    3d44:	06 94       	lsr	r0
    3d46:	57 95       	ror	r21
    3d48:	47 95       	ror	r20
    3d4a:	37 95       	ror	r19
    3d4c:	27 95       	ror	r18
    3d4e:	ba 95       	dec	r27
    3d50:	c9 f7       	brne	.-14     	; 0x3d44 <__ultoa_invert+0xa2>
    3d52:	62 0f       	add	r22, r18
    3d54:	73 1f       	adc	r23, r19
    3d56:	84 1f       	adc	r24, r20
    3d58:	95 1f       	adc	r25, r21
    3d5a:	a0 1d       	adc	r26, r0
    3d5c:	08 95       	ret

00003d5e <_exit>:
    3d5e:	f8 94       	cli

00003d60 <__stop_program>:
    3d60:	ff cf       	rjmp	.-2      	; 0x3d60 <__stop_program>
