
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000776  00800200  00006576  0000660a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006576  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001097  00800976  00800976  00006d80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006d80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000af8  00000000  00000000  00006e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000daee  00000000  00000000  00007914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003766  00000000  00000000  00015402  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007002  00000000  00000000  00018b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002650  00000000  00000000  0001fb6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000040e4  00000000  00000000  000221bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000baea  00000000  00000000  000262a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a10  00000000  00000000  00031d8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	8d c4       	rjmp	.+2330   	; 0x94c <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__vector_25>
      68:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 aa 26 	jmp	0x4d54	; 0x4d54 <__vector_36>
      94:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 36 2b 	jmp	0x566c	; 0x566c <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 40 27 	jmp	0x4e80	; 0x4e80 <__vector_51>
      d0:	0c 94 92 27 	jmp	0x4f24	; 0x4f24 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d6 27 	jmp	0x4fac	; 0x4fac <__vector_54>
      dc:	0c 94 28 28 	jmp	0x5050	; 0x5050 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	50 19       	sub	r21, r0
      e6:	50 19       	sub	r21, r0
      e8:	50 19       	sub	r21, r0
      ea:	87 19       	sub	r24, r7
      ec:	8f 19       	sub	r24, r15
      ee:	a4 19       	sub	r26, r4
      f0:	50 19       	sub	r21, r0
      f2:	50 19       	sub	r21, r0
      f4:	87 19       	sub	r24, r7
      f6:	8f 19       	sub	r24, r15
      f8:	58 2b       	or	r21, r24
      fa:	c8 2b       	or	r28, r24
      fc:	c8 2b       	or	r28, r24
      fe:	c8 2b       	or	r28, r24
     100:	c8 2b       	or	r28, r24
     102:	c8 2b       	or	r28, r24
     104:	c8 2b       	or	r28, r24
     106:	c8 2b       	or	r28, r24
     108:	58 2b       	or	r21, r24
     10a:	c8 2b       	or	r28, r24
     10c:	c8 2b       	or	r28, r24
     10e:	c8 2b       	or	r28, r24
     110:	c8 2b       	or	r28, r24
     112:	c8 2b       	or	r28, r24
     114:	c8 2b       	or	r28, r24
     116:	c8 2b       	or	r28, r24
     118:	5a 2b       	or	r21, r26
     11a:	c8 2b       	or	r28, r24
     11c:	c8 2b       	or	r28, r24
     11e:	c8 2b       	or	r28, r24
     120:	c8 2b       	or	r28, r24
     122:	c8 2b       	or	r28, r24
     124:	c8 2b       	or	r28, r24
     126:	c8 2b       	or	r28, r24
     128:	c8 2b       	or	r28, r24
     12a:	c8 2b       	or	r28, r24
     12c:	c8 2b       	or	r28, r24
     12e:	c8 2b       	or	r28, r24
     130:	c8 2b       	or	r28, r24
     132:	c8 2b       	or	r28, r24
     134:	c8 2b       	or	r28, r24
     136:	c8 2b       	or	r28, r24
     138:	5a 2b       	or	r21, r26
     13a:	c8 2b       	or	r28, r24
     13c:	c8 2b       	or	r28, r24
     13e:	c8 2b       	or	r28, r24
     140:	c8 2b       	or	r28, r24
     142:	c8 2b       	or	r28, r24
     144:	c8 2b       	or	r28, r24
     146:	c8 2b       	or	r28, r24
     148:	c8 2b       	or	r28, r24
     14a:	c8 2b       	or	r28, r24
     14c:	c8 2b       	or	r28, r24
     14e:	c8 2b       	or	r28, r24
     150:	c8 2b       	or	r28, r24
     152:	c8 2b       	or	r28, r24
     154:	c8 2b       	or	r28, r24
     156:	c8 2b       	or	r28, r24
     158:	c4 2b       	or	r28, r20
     15a:	c8 2b       	or	r28, r24
     15c:	c8 2b       	or	r28, r24
     15e:	c8 2b       	or	r28, r24
     160:	c8 2b       	or	r28, r24
     162:	c8 2b       	or	r28, r24
     164:	c8 2b       	or	r28, r24
     166:	c8 2b       	or	r28, r24
     168:	8f 2b       	or	r24, r31
     16a:	c8 2b       	or	r28, r24
     16c:	c8 2b       	or	r28, r24
     16e:	c8 2b       	or	r28, r24
     170:	c8 2b       	or	r28, r24
     172:	c8 2b       	or	r28, r24
     174:	c8 2b       	or	r28, r24
     176:	c8 2b       	or	r28, r24
     178:	c8 2b       	or	r28, r24
     17a:	c8 2b       	or	r28, r24
     17c:	c8 2b       	or	r28, r24
     17e:	c8 2b       	or	r28, r24
     180:	c8 2b       	or	r28, r24
     182:	c8 2b       	or	r28, r24
     184:	c8 2b       	or	r28, r24
     186:	c8 2b       	or	r28, r24
     188:	83 2b       	or	r24, r19
     18a:	c8 2b       	or	r28, r24
     18c:	c8 2b       	or	r28, r24
     18e:	c8 2b       	or	r28, r24
     190:	c8 2b       	or	r28, r24
     192:	c8 2b       	or	r28, r24
     194:	c8 2b       	or	r28, r24
     196:	c8 2b       	or	r28, r24
     198:	a7 2b       	or	r26, r23

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <prvCheckTasksWaitingTermination>
     19e:	80 91 83 17 	lds	r24, 0x1783	; 0x801783 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	0c d3       	rcall	.+1560   	; 0x7c0 <vPortYield>
     1a8:	0e 94 cd 19 	call	0x339a	; 0x339a <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 c2 18 	call	0x3184	; 0x3184 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 19 19 	call	0x3232	; 0x3232 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	19 e0       	ldi	r17, 0x09	; 9
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e6 e7       	ldi	r30, 0x76	; 118
     1e4:	f5 e6       	ldi	r31, 0x65	; 101
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a6 37       	cpi	r26, 0x76	; 118
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	2a e1       	ldi	r18, 0x1A	; 26
     1f8:	a6 e7       	ldi	r26, 0x76	; 118
     1fa:	b9 e0       	ldi	r27, 0x09	; 9
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ad 30       	cpi	r26, 0x0D	; 13
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <main>
     20a:	0c 94 b9 32 	jmp	0x6572	; 0x6572 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <initializeSharedDataQueue>:
SharedData sharedData;

void initializeSharedDataQueue()
{
	// Creating queue with 5 positions
	xQueueShared = xQueueCreate(5, sizeof(SharedData));
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	66 e0       	ldi	r22, 0x06	; 6
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	c9 d4       	rcall	.+2450   	; 0xbaa <xQueueGenericCreate>
     218:	90 93 8e 19 	sts	0x198E, r25	; 0x80198e <xQueueShared+0x1>
     21c:	80 93 8d 19 	sts	0x198D, r24	; 0x80198d <xQueueShared>
     220:	08 95       	ret

00000222 <enqueueSharedData>:
}

void enqueueSharedData()
{
     222:	af 92       	push	r10
     224:	bf 92       	push	r11
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
	bool flag = false;
	
	// Declaring and initializing values to insert into struct
	uint16_t co2 = 0;
	int16_t temp = 0;
	uint16_t hum = 0;
     236:	e1 2c       	mov	r14, r1
     238:	f1 2c       	mov	r15, r1
	// Declaring flag for corrupt data
	bool flag = false;
	
	// Declaring and initializing values to insert into struct
	uint16_t co2 = 0;
	int16_t temp = 0;
     23a:	c1 2c       	mov	r12, r1
     23c:	d1 2c       	mov	r13, r1
	
	// Declaring flag for corrupt data
	bool flag = false;
	
	// Declaring and initializing values to insert into struct
	uint16_t co2 = 0;
     23e:	a1 2c       	mov	r10, r1
     240:	b1 2c       	mov	r11, r1
{
	TickType_t xDelay = 25/portTICK_PERIOD_MS;
	int counter = 0;
	
	// Declaring flag for corrupt data
	bool flag = false;
     242:	10 e0       	ldi	r17, 0x00	; 0
}

void enqueueSharedData()
{
	TickType_t xDelay = 25/portTICK_PERIOD_MS;
	int counter = 0;
     244:	c0 e0       	ldi	r28, 0x00	; 0
     246:	d0 e0       	ldi	r29, 0x00	; 0
	int co2res = 0;
	int tempres = 0;
	int humres = 0;
	
	// Loop for dequeuing 10 measures 
	while (counter < 10) {
     248:	2b c0       	rjmp	.+86     	; 0x2a0 <enqueueSharedData+0x7e>
		// Declaring integer to hold dequeue value
		int dequeuemeasure;
		
		// Dequeuing 
		dequeuemeasure = dequeueCO2Measure();
     24a:	0e 94 3f 1a 	call	0x347e	; 0x347e <dequeueCO2Measure>
		
		// Check to see if measure = 0 which is indicator of corrupt measure
		if (dequeuemeasure == 0)
     24e:	00 97       	sbiw	r24, 0x00	; 0
     250:	49 f0       	breq	.+18     	; 0x264 <enqueueSharedData+0x42>
			// Setting flag to true indicating that we discard all data
			flag = true;
		}
		// If the measure is not 0 we increment co2 with dequeue value
		else {
			co2 += dequeuemeasure;
     252:	a8 0e       	add	r10, r24
     254:	b9 1e       	adc	r11, r25
			vTaskDelay(xDelay);
     256:	61 e0       	ldi	r22, 0x01	; 1
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <vTaskDelay>
     262:	01 c0       	rjmp	.+2      	; 0x266 <enqueueSharedData+0x44>
		
		// Check to see if measure = 0 which is indicator of corrupt measure
		if (dequeuemeasure == 0)
		{
			// Setting flag to true indicating that we discard all data
			flag = true;
     264:	11 e0       	ldi	r17, 0x01	; 1
		else {
			co2 += dequeuemeasure;
			vTaskDelay(xDelay);
		}
		
		dequeuemeasure = dequeueTempMeasure();
     266:	0e 94 45 1b 	call	0x368a	; 0x368a <dequeueTempMeasure>
		if (dequeuemeasure == 0)
     26a:	00 97       	sbiw	r24, 0x00	; 0
     26c:	49 f0       	breq	.+18     	; 0x280 <enqueueSharedData+0x5e>
		{
			flag = true;
		}
		else {
		temp += dequeuemeasure;
     26e:	c8 0e       	add	r12, r24
     270:	d9 1e       	adc	r13, r25
		vTaskDelay(xDelay);
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <vTaskDelay>
     27e:	01 c0       	rjmp	.+2      	; 0x282 <enqueueSharedData+0x60>
		}
		
		dequeuemeasure = dequeueTempMeasure();
		if (dequeuemeasure == 0)
		{
			flag = true;
     280:	11 e0       	ldi	r17, 0x01	; 1
		else {
		temp += dequeuemeasure;
		vTaskDelay(xDelay);
		}
		
		dequeuemeasure = dequeueHumidityMeasure();
     282:	0e 94 76 1b 	call	0x36ec	; 0x36ec <dequeueHumidityMeasure>
		if (dequeuemeasure == 0)
     286:	00 97       	sbiw	r24, 0x00	; 0
     288:	49 f0       	breq	.+18     	; 0x29c <enqueueSharedData+0x7a>
		{
			flag = true;
		}
		else {
		hum += dequeuemeasure;
     28a:	e8 0e       	add	r14, r24
     28c:	f9 1e       	adc	r15, r25
		vTaskDelay(xDelay);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <vTaskDelay>
     29a:	01 c0       	rjmp	.+2      	; 0x29e <enqueueSharedData+0x7c>
		}
		
		dequeuemeasure = dequeueHumidityMeasure();
		if (dequeuemeasure == 0)
		{
			flag = true;
     29c:	11 e0       	ldi	r17, 0x01	; 1
		}
		else {
		hum += dequeuemeasure;
		vTaskDelay(xDelay);
		}
		counter++;
     29e:	21 96       	adiw	r28, 0x01	; 1
	int co2res = 0;
	int tempres = 0;
	int humres = 0;
	
	// Loop for dequeuing 10 measures 
	while (counter < 10) {
     2a0:	ca 30       	cpi	r28, 0x0A	; 10
     2a2:	d1 05       	cpc	r29, r1
     2a4:	94 f2       	brlt	.-92     	; 0x24a <enqueueSharedData+0x28>
	}
	
	SharedData_t shared = &sharedData;
		
	// If data is corrupt, putting 0 for all measures into struct
	if (flag)
     2a6:	11 23       	and	r17, r17
     2a8:	49 f0       	breq	.+18     	; 0x2bc <enqueueSharedData+0x9a>
	{
		shared->co2 = 0;
     2aa:	e7 e8       	ldi	r30, 0x87	; 135
     2ac:	f9 e1       	ldi	r31, 0x19	; 25
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	10 82       	st	Z, r1
		shared->temperature = 0;
     2b2:	13 82       	std	Z+3, r1	; 0x03
     2b4:	12 82       	std	Z+2, r1	; 0x02
		shared->humidity = 0;
     2b6:	15 82       	std	Z+5, r1	; 0x05
     2b8:	14 82       	std	Z+4, r1	; 0x04
     2ba:	16 c0       	rjmp	.+44     	; 0x2e8 <enqueueSharedData+0xc6>
	}
	else {
		// Average calc of co2
		co2res = (co2 / counter);
     2bc:	c5 01       	movw	r24, r10
     2be:	be 01       	movw	r22, r28
     2c0:	0e 94 ac 2d 	call	0x5b58	; 0x5b58 <__udivmodhi4>
     2c4:	5b 01       	movw	r10, r22
		co2 = (uint16_t) co2res;
		
		// Average calc of temperature
		tempres = (temp / counter);
     2c6:	c6 01       	movw	r24, r12
     2c8:	be 01       	movw	r22, r28
     2ca:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <__divmodhi4>
     2ce:	9b 01       	movw	r18, r22
		temp = (int16_t) tempres;
		
		// Average calc of humidity
		humres = (hum / counter);
     2d0:	c7 01       	movw	r24, r14
     2d2:	be 01       	movw	r22, r28
     2d4:	0e 94 ac 2d 	call	0x5b58	; 0x5b58 <__udivmodhi4>
		hum = (uint16_t) humres;

		//Inserting values into struct
		shared->co2 = co2;
     2d8:	e7 e8       	ldi	r30, 0x87	; 135
     2da:	f9 e1       	ldi	r31, 0x19	; 25
     2dc:	b1 82       	std	Z+1, r11	; 0x01
     2de:	a0 82       	st	Z, r10
		shared->temperature = temp;
     2e0:	33 83       	std	Z+3, r19	; 0x03
     2e2:	22 83       	std	Z+2, r18	; 0x02
		shared->humidity = hum;
     2e4:	75 83       	std	Z+5, r23	; 0x05
     2e6:	64 83       	std	Z+4, r22	; 0x04
	}

	printf("ENQUEUE: humidity: %d, co2: %d, Temp: %d \n", shared->humidity, shared->co2, shared->temperature);
     2e8:	e7 e8       	ldi	r30, 0x87	; 135
     2ea:	f9 e1       	ldi	r31, 0x19	; 25
     2ec:	83 81       	ldd	r24, Z+3	; 0x03
     2ee:	8f 93       	push	r24
     2f0:	82 81       	ldd	r24, Z+2	; 0x02
     2f2:	8f 93       	push	r24
     2f4:	81 81       	ldd	r24, Z+1	; 0x01
     2f6:	8f 93       	push	r24
     2f8:	80 81       	ld	r24, Z
     2fa:	8f 93       	push	r24
     2fc:	85 81       	ldd	r24, Z+5	; 0x05
     2fe:	8f 93       	push	r24
     300:	84 81       	ldd	r24, Z+4	; 0x04
     302:	8f 93       	push	r24
     304:	8f e6       	ldi	r24, 0x6F	; 111
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>

	// Inserting shared data into queue
	xQueueSend(xQueueShared, (void*)&sharedData, portMAX_DELAY);
     310:	00 e0       	ldi	r16, 0x00	; 0
     312:	2f ef       	ldi	r18, 0xFF	; 255
     314:	3f ef       	ldi	r19, 0xFF	; 255
     316:	a9 01       	movw	r20, r18
     318:	67 e8       	ldi	r22, 0x87	; 135
     31a:	79 e1       	ldi	r23, 0x19	; 25
     31c:	80 91 8d 19 	lds	r24, 0x198D	; 0x80198d <xQueueShared>
     320:	90 91 8e 19 	lds	r25, 0x198E	; 0x80198e <xQueueShared+0x1>
     324:	65 d4       	rcall	.+2250   	; 0xbf0 <xQueueGenericSend>

}
     326:	8d b7       	in	r24, 0x3d	; 61
     328:	9e b7       	in	r25, 0x3e	; 62
     32a:	08 96       	adiw	r24, 0x08	; 8
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	9e bf       	out	0x3e, r25	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	8d bf       	out	0x3d, r24	; 61
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
     346:	bf 90       	pop	r11
     348:	af 90       	pop	r10
     34a:	08 95       	ret

0000034c <dequeueSharedData>:
SharedData_t dequeueSharedData() {
	// Declaring pointer, referencing address of class variable
	SharedData_t data = &receiveSharedData;
	
	//Receiving shared data from queue	
	xQueueReceive(xQueueShared, &receiveSharedData, (TickType_t) 10);
     34c:	2a e0       	ldi	r18, 0x0A	; 10
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	6f e8       	ldi	r22, 0x8F	; 143
     356:	79 e1       	ldi	r23, 0x19	; 25
     358:	80 91 8d 19 	lds	r24, 0x198D	; 0x80198d <xQueueShared>
     35c:	90 91 8e 19 	lds	r25, 0x198E	; 0x80198e <xQueueShared+0x1>
     360:	14 d5       	rcall	.+2600   	; 0xd8a <xQueueReceive>
	return data;
}
     362:	8f e8       	ldi	r24, 0x8F	; 143
     364:	99 e1       	ldi	r25, 0x19	; 25
     366:	08 95       	ret

00000368 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     368:	e2 e8       	ldi	r30, 0x82	; 130
     36a:	f9 e0       	ldi	r31, 0x09	; 9
     36c:	a6 e8       	ldi	r26, 0x86	; 134
     36e:	b9 e0       	ldi	r27, 0x09	; 9
     370:	b1 83       	std	Z+1, r27	; 0x01
     372:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     374:	13 82       	std	Z+3, r1	; 0x03
     376:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     378:	ee e2       	ldi	r30, 0x2E	; 46
     37a:	f7 e1       	ldi	r31, 0x17	; 23
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     37c:	f0 93 81 09 	sts	0x0981, r31	; 0x800981 <pxEnd+0x1>
     380:	e0 93 80 09 	sts	0x0980, r30	; 0x800980 <pxEnd>
    pxEnd->xBlockSize = 0;
     384:	13 82       	std	Z+3, r1	; 0x03
     386:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     388:	11 82       	std	Z+1, r1	; 0x01
     38a:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     38c:	88 ea       	ldi	r24, 0xA8	; 168
     38e:	9d e0       	ldi	r25, 0x0D	; 13
     390:	13 96       	adiw	r26, 0x03	; 3
     392:	9c 93       	st	X, r25
     394:	8e 93       	st	-X, r24
     396:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     398:	ed 93       	st	X+, r30
     39a:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     39c:	90 93 7d 09 	sts	0x097D, r25	; 0x80097d <xMinimumEverFreeBytesRemaining+0x1>
     3a0:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     3a4:	90 93 7f 09 	sts	0x097F, r25	; 0x80097f <xFreeBytesRemaining+0x1>
     3a8:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e8       	ldi	r25, 0x80	; 128
     3b0:	90 93 77 09 	sts	0x0977, r25	; 0x800977 <__data_end+0x1>
     3b4:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <__data_end>
     3b8:	08 95       	ret

000003ba <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     3c0:	a2 e8       	ldi	r26, 0x82	; 130
     3c2:	b9 e0       	ldi	r27, 0x09	; 9
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <prvInsertBlockIntoFreeList+0xe>
     3c6:	df 01       	movw	r26, r30
     3c8:	ed 91       	ld	r30, X+
     3ca:	fc 91       	ld	r31, X
     3cc:	11 97       	sbiw	r26, 0x01	; 1
     3ce:	ec 17       	cp	r30, r28
     3d0:	fd 07       	cpc	r31, r29
     3d2:	c8 f3       	brcs	.-14     	; 0x3c6 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     3d4:	12 96       	adiw	r26, 0x02	; 2
     3d6:	8d 91       	ld	r24, X+
     3d8:	9c 91       	ld	r25, X
     3da:	13 97       	sbiw	r26, 0x03	; 3
     3dc:	9d 01       	movw	r18, r26
     3de:	28 0f       	add	r18, r24
     3e0:	39 1f       	adc	r19, r25
     3e2:	c2 17       	cp	r28, r18
     3e4:	d3 07       	cpc	r29, r19
     3e6:	49 f4       	brne	.+18     	; 0x3fa <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     3e8:	2a 81       	ldd	r18, Y+2	; 0x02
     3ea:	3b 81       	ldd	r19, Y+3	; 0x03
     3ec:	82 0f       	add	r24, r18
     3ee:	93 1f       	adc	r25, r19
     3f0:	13 96       	adiw	r26, 0x03	; 3
     3f2:	9c 93       	st	X, r25
     3f4:	8e 93       	st	-X, r24
     3f6:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     3f8:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	9b 81       	ldd	r25, Y+3	; 0x03
     3fe:	9e 01       	movw	r18, r28
     400:	28 0f       	add	r18, r24
     402:	39 1f       	adc	r19, r25
     404:	e2 17       	cp	r30, r18
     406:	f3 07       	cpc	r31, r19
     408:	c1 f4       	brne	.+48     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     40a:	20 91 80 09 	lds	r18, 0x0980	; 0x800980 <pxEnd>
     40e:	30 91 81 09 	lds	r19, 0x0981	; 0x800981 <pxEnd+0x1>
     412:	e2 17       	cp	r30, r18
     414:	f3 07       	cpc	r31, r19
     416:	71 f0       	breq	.+28     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     418:	22 81       	ldd	r18, Z+2	; 0x02
     41a:	33 81       	ldd	r19, Z+3	; 0x03
     41c:	82 0f       	add	r24, r18
     41e:	93 1f       	adc	r25, r19
     420:	9b 83       	std	Y+3, r25	; 0x03
     422:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     424:	ed 91       	ld	r30, X+
     426:	fc 91       	ld	r31, X
     428:	11 97       	sbiw	r26, 0x01	; 1
     42a:	80 81       	ld	r24, Z
     42c:	91 81       	ldd	r25, Z+1	; 0x01
     42e:	99 83       	std	Y+1, r25	; 0x01
     430:	88 83       	st	Y, r24
     432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     434:	39 83       	std	Y+1, r19	; 0x01
     436:	28 83       	st	Y, r18
     438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     43a:	f9 83       	std	Y+1, r31	; 0x01
     43c:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     43e:	ca 17       	cp	r28, r26
     440:	db 07       	cpc	r29, r27
     442:	11 f0       	breq	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     444:	cd 93       	st	X+, r28
     446:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     45c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     460:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <pxEnd>
     464:	90 91 81 09 	lds	r25, 0x0981	; 0x800981 <pxEnd+0x1>
     468:	89 2b       	or	r24, r25
     46a:	09 f4       	brne	.+2      	; 0x46e <pvPortMalloc+0x20>
        {
            prvHeapInit();
     46c:	7d df       	rcall	.-262    	; 0x368 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     46e:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <__data_end>
     472:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <__data_end+0x1>
     476:	80 23       	and	r24, r16
     478:	91 23       	and	r25, r17
     47a:	89 2b       	or	r24, r25
     47c:	09 f0       	breq	.+2      	; 0x480 <pvPortMalloc+0x32>
     47e:	76 c0       	rjmp	.+236    	; 0x56c <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     480:	01 15       	cp	r16, r1
     482:	11 05       	cpc	r17, r1
     484:	49 f0       	breq	.+18     	; 0x498 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     486:	c8 01       	movw	r24, r16
     488:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     48a:	08 17       	cp	r16, r24
     48c:	19 07       	cpc	r17, r25
     48e:	18 f0       	brcs	.+6      	; 0x496 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     490:	00 e0       	ldi	r16, 0x00	; 0
     492:	10 e0       	ldi	r17, 0x00	; 0
     494:	01 c0       	rjmp	.+2      	; 0x498 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     496:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     498:	01 15       	cp	r16, r1
     49a:	11 05       	cpc	r17, r1
     49c:	09 f4       	brne	.+2      	; 0x4a0 <pvPortMalloc+0x52>
     49e:	69 c0       	rjmp	.+210    	; 0x572 <pvPortMalloc+0x124>
     4a0:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <xFreeBytesRemaining>
     4a4:	90 91 7f 09 	lds	r25, 0x097F	; 0x80097f <xFreeBytesRemaining+0x1>
     4a8:	80 17       	cp	r24, r16
     4aa:	91 07       	cpc	r25, r17
     4ac:	08 f4       	brcc	.+2      	; 0x4b0 <pvPortMalloc+0x62>
     4ae:	64 c0       	rjmp	.+200    	; 0x578 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     4b0:	c0 91 82 09 	lds	r28, 0x0982	; 0x800982 <xStart>
     4b4:	d0 91 83 09 	lds	r29, 0x0983	; 0x800983 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     4b8:	e2 e8       	ldi	r30, 0x82	; 130
     4ba:	f9 e0       	ldi	r31, 0x09	; 9
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     4be:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     4c0:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	9b 81       	ldd	r25, Y+3	; 0x03
     4c6:	80 17       	cp	r24, r16
     4c8:	91 07       	cpc	r25, r17
     4ca:	20 f4       	brcc	.+8      	; 0x4d4 <pvPortMalloc+0x86>
     4cc:	88 81       	ld	r24, Y
     4ce:	99 81       	ldd	r25, Y+1	; 0x01
     4d0:	00 97       	sbiw	r24, 0x00	; 0
     4d2:	a9 f7       	brne	.-22     	; 0x4be <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     4d4:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <pxEnd>
     4d8:	90 91 81 09 	lds	r25, 0x0981	; 0x800981 <pxEnd+0x1>
     4dc:	c8 17       	cp	r28, r24
     4de:	d9 07       	cpc	r29, r25
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <pvPortMalloc+0x96>
     4e2:	4d c0       	rjmp	.+154    	; 0x57e <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     4e4:	e0 80       	ld	r14, Z
     4e6:	f1 80       	ldd	r15, Z+1	; 0x01
     4e8:	84 e0       	ldi	r24, 0x04	; 4
     4ea:	e8 0e       	add	r14, r24
     4ec:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     4ee:	88 81       	ld	r24, Y
     4f0:	99 81       	ldd	r25, Y+1	; 0x01
     4f2:	91 83       	std	Z+1, r25	; 0x01
     4f4:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4f6:	2a 81       	ldd	r18, Y+2	; 0x02
     4f8:	3b 81       	ldd	r19, Y+3	; 0x03
     4fa:	20 1b       	sub	r18, r16
     4fc:	31 0b       	sbc	r19, r17
     4fe:	29 30       	cpi	r18, 0x09	; 9
     500:	31 05       	cpc	r19, r1
     502:	48 f0       	brcs	.+18     	; 0x516 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     504:	ce 01       	movw	r24, r28
     506:	80 0f       	add	r24, r16
     508:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     50a:	fc 01       	movw	r30, r24
     50c:	33 83       	std	Z+3, r19	; 0x03
     50e:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     510:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     512:	0a 83       	std	Y+2, r16	; 0x02
     514:	52 df       	rcall	.-348    	; 0x3ba <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     516:	2a 81       	ldd	r18, Y+2	; 0x02
     518:	3b 81       	ldd	r19, Y+3	; 0x03
     51a:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <xFreeBytesRemaining>
     51e:	90 91 7f 09 	lds	r25, 0x097F	; 0x80097f <xFreeBytesRemaining+0x1>
     522:	82 1b       	sub	r24, r18
     524:	93 0b       	sbc	r25, r19
     526:	90 93 7f 09 	sts	0x097F, r25	; 0x80097f <xFreeBytesRemaining+0x1>
     52a:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     52e:	40 91 7c 09 	lds	r20, 0x097C	; 0x80097c <xMinimumEverFreeBytesRemaining>
     532:	50 91 7d 09 	lds	r21, 0x097D	; 0x80097d <xMinimumEverFreeBytesRemaining+0x1>
     536:	84 17       	cp	r24, r20
     538:	95 07       	cpc	r25, r21
     53a:	20 f4       	brcc	.+8      	; 0x544 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     53c:	90 93 7d 09 	sts	0x097D, r25	; 0x80097d <xMinimumEverFreeBytesRemaining+0x1>
     540:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     544:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <__data_end>
     548:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <__data_end+0x1>
     54c:	28 2b       	or	r18, r24
     54e:	39 2b       	or	r19, r25
     550:	3b 83       	std	Y+3, r19	; 0x03
     552:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     554:	19 82       	std	Y+1, r1	; 0x01
     556:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     558:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <xNumberOfSuccessfulAllocations>
     55c:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <xNumberOfSuccessfulAllocations+0x1>
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	90 93 7b 09 	sts	0x097B, r25	; 0x80097b <xNumberOfSuccessfulAllocations+0x1>
     566:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <xNumberOfSuccessfulAllocations>
     56a:	0b c0       	rjmp	.+22     	; 0x582 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     56c:	e1 2c       	mov	r14, r1
     56e:	f1 2c       	mov	r15, r1
     570:	08 c0       	rjmp	.+16     	; 0x582 <pvPortMalloc+0x134>
     572:	e1 2c       	mov	r14, r1
     574:	f1 2c       	mov	r15, r1
     576:	05 c0       	rjmp	.+10     	; 0x582 <pvPortMalloc+0x134>
     578:	e1 2c       	mov	r14, r1
     57a:	f1 2c       	mov	r15, r1
     57c:	02 c0       	rjmp	.+4      	; 0x582 <pvPortMalloc+0x134>
     57e:	e1 2c       	mov	r14, r1
     580:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     582:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     586:	e1 14       	cp	r14, r1
     588:	f1 04       	cpc	r15, r1
     58a:	11 f4       	brne	.+4      	; 0x590 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     58c:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     590:	c7 01       	movw	r24, r14
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	08 95       	ret

000005a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     5a8:	00 97       	sbiw	r24, 0x00	; 0
     5aa:	91 f1       	breq	.+100    	; 0x610 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     5ac:	ec 01       	movw	r28, r24
     5ae:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     5b0:	4a 81       	ldd	r20, Y+2	; 0x02
     5b2:	5b 81       	ldd	r21, Y+3	; 0x03
     5b4:	20 91 76 09 	lds	r18, 0x0976	; 0x800976 <__data_end>
     5b8:	30 91 77 09 	lds	r19, 0x0977	; 0x800977 <__data_end+0x1>
     5bc:	ba 01       	movw	r22, r20
     5be:	62 23       	and	r22, r18
     5c0:	73 23       	and	r23, r19
     5c2:	67 2b       	or	r22, r23
     5c4:	29 f1       	breq	.+74     	; 0x610 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     5c6:	68 81       	ld	r22, Y
     5c8:	79 81       	ldd	r23, Y+1	; 0x01
     5ca:	67 2b       	or	r22, r23
     5cc:	09 f5       	brne	.+66     	; 0x610 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     5ce:	20 95       	com	r18
     5d0:	30 95       	com	r19
     5d2:	24 23       	and	r18, r20
     5d4:	35 23       	and	r19, r21
     5d6:	3b 83       	std	Y+3, r19	; 0x03
     5d8:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     5da:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     5de:	8a 81       	ldd	r24, Y+2	; 0x02
     5e0:	9b 81       	ldd	r25, Y+3	; 0x03
     5e2:	20 91 7e 09 	lds	r18, 0x097E	; 0x80097e <xFreeBytesRemaining>
     5e6:	30 91 7f 09 	lds	r19, 0x097F	; 0x80097f <xFreeBytesRemaining+0x1>
     5ea:	82 0f       	add	r24, r18
     5ec:	93 1f       	adc	r25, r19
     5ee:	90 93 7f 09 	sts	0x097F, r25	; 0x80097f <xFreeBytesRemaining+0x1>
     5f2:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5f6:	ce 01       	movw	r24, r28
     5f8:	e0 de       	rcall	.-576    	; 0x3ba <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     5fa:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <xNumberOfSuccessfulFrees>
     5fe:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <xNumberOfSuccessfulFrees+0x1>
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <xNumberOfSuccessfulFrees+0x1>
     608:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     60c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	08 95       	ret

0000061a <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    return xFreeBytesRemaining;
}
     61a:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <xFreeBytesRemaining>
     61e:	90 91 7f 09 	lds	r25, 0x097F	; 0x80097f <xFreeBytesRemaining+0x1>
     622:	08 95       	ret

00000624 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     624:	fc 01       	movw	r30, r24
     626:	03 96       	adiw	r24, 0x03	; 3
     628:	92 83       	std	Z+2, r25	; 0x02
     62a:	81 83       	std	Z+1, r24	; 0x01
     62c:	4f ef       	ldi	r20, 0xFF	; 255
     62e:	5f ef       	ldi	r21, 0xFF	; 255
     630:	ba 01       	movw	r22, r20
     632:	43 83       	std	Z+3, r20	; 0x03
     634:	54 83       	std	Z+4, r21	; 0x04
     636:	65 83       	std	Z+5, r22	; 0x05
     638:	76 83       	std	Z+6, r23	; 0x06
     63a:	90 87       	std	Z+8, r25	; 0x08
     63c:	87 83       	std	Z+7, r24	; 0x07
     63e:	92 87       	std	Z+10, r25	; 0x0a
     640:	81 87       	std	Z+9, r24	; 0x09
     642:	10 82       	st	Z, r1
     644:	08 95       	ret

00000646 <vListInitialiseItem>:
     646:	fc 01       	movw	r30, r24
     648:	13 86       	std	Z+11, r1	; 0x0b
     64a:	12 86       	std	Z+10, r1	; 0x0a
     64c:	08 95       	ret

0000064e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     658:	08 81       	ld	r16, Y
     65a:	19 81       	ldd	r17, Y+1	; 0x01
     65c:	2a 81       	ldd	r18, Y+2	; 0x02
     65e:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     660:	0f 3f       	cpi	r16, 0xFF	; 255
     662:	4f ef       	ldi	r20, 0xFF	; 255
     664:	14 07       	cpc	r17, r20
     666:	24 07       	cpc	r18, r20
     668:	34 07       	cpc	r19, r20
     66a:	21 f4       	brne	.+8      	; 0x674 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     66c:	fc 01       	movw	r30, r24
     66e:	a1 85       	ldd	r26, Z+9	; 0x09
     670:	b2 85       	ldd	r27, Z+10	; 0x0a
     672:	11 c0       	rjmp	.+34     	; 0x696 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     674:	dc 01       	movw	r26, r24
     676:	13 96       	adiw	r26, 0x03	; 3
     678:	01 c0       	rjmp	.+2      	; 0x67c <vListInsert+0x2e>
     67a:	df 01       	movw	r26, r30
     67c:	14 96       	adiw	r26, 0x04	; 4
     67e:	ed 91       	ld	r30, X+
     680:	fc 91       	ld	r31, X
     682:	15 97       	sbiw	r26, 0x05	; 5
     684:	40 81       	ld	r20, Z
     686:	51 81       	ldd	r21, Z+1	; 0x01
     688:	62 81       	ldd	r22, Z+2	; 0x02
     68a:	73 81       	ldd	r23, Z+3	; 0x03
     68c:	04 17       	cp	r16, r20
     68e:	15 07       	cpc	r17, r21
     690:	26 07       	cpc	r18, r22
     692:	37 07       	cpc	r19, r23
     694:	90 f7       	brcc	.-28     	; 0x67a <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     696:	14 96       	adiw	r26, 0x04	; 4
     698:	ed 91       	ld	r30, X+
     69a:	fc 91       	ld	r31, X
     69c:	15 97       	sbiw	r26, 0x05	; 5
     69e:	fd 83       	std	Y+5, r31	; 0x05
     6a0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     6a2:	d7 83       	std	Z+7, r29	; 0x07
     6a4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     6a6:	bf 83       	std	Y+7, r27	; 0x07
     6a8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     6aa:	15 96       	adiw	r26, 0x05	; 5
     6ac:	dc 93       	st	X, r29
     6ae:	ce 93       	st	-X, r28
     6b0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     6b2:	9b 87       	std	Y+11, r25	; 0x0b
     6b4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 81       	ld	r18, Z
     6ba:	2f 5f       	subi	r18, 0xFF	; 255
     6bc:	20 83       	st	Z, r18
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	08 95       	ret

000006c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     6ce:	a2 85       	ldd	r26, Z+10	; 0x0a
     6d0:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6d2:	c4 81       	ldd	r28, Z+4	; 0x04
     6d4:	d5 81       	ldd	r29, Z+5	; 0x05
     6d6:	86 81       	ldd	r24, Z+6	; 0x06
     6d8:	97 81       	ldd	r25, Z+7	; 0x07
     6da:	9f 83       	std	Y+7, r25	; 0x07
     6dc:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6de:	c6 81       	ldd	r28, Z+6	; 0x06
     6e0:	d7 81       	ldd	r29, Z+7	; 0x07
     6e2:	84 81       	ldd	r24, Z+4	; 0x04
     6e4:	95 81       	ldd	r25, Z+5	; 0x05
     6e6:	9d 83       	std	Y+5, r25	; 0x05
     6e8:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     6ea:	11 96       	adiw	r26, 0x01	; 1
     6ec:	8d 91       	ld	r24, X+
     6ee:	9c 91       	ld	r25, X
     6f0:	12 97       	sbiw	r26, 0x02	; 2
     6f2:	e8 17       	cp	r30, r24
     6f4:	f9 07       	cpc	r31, r25
     6f6:	31 f4       	brne	.+12     	; 0x704 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6f8:	86 81       	ldd	r24, Z+6	; 0x06
     6fa:	97 81       	ldd	r25, Z+7	; 0x07
     6fc:	12 96       	adiw	r26, 0x02	; 2
     6fe:	9c 93       	st	X, r25
     700:	8e 93       	st	-X, r24
     702:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     704:	13 86       	std	Z+11, r1	; 0x0b
     706:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     708:	8c 91       	ld	r24, X
     70a:	81 50       	subi	r24, 0x01	; 1
     70c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     70e:	8c 91       	ld	r24, X
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     716:	a8 95       	wdr
     718:	90 ec       	ldi	r25, 0xC0	; 192
     71a:	88 e1       	ldi	r24, 0x18	; 24
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	a8 95       	wdr
     722:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     726:	0f be       	out	0x3f, r0	; 63
     728:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     72c:	08 95       	ret

0000072e <pxPortInitialiseStack>:
     72e:	fc 01       	movw	r30, r24
     730:	60 83       	st	Z, r22
     732:	31 97       	sbiw	r30, 0x01	; 1
     734:	70 83       	st	Z, r23
     736:	31 97       	sbiw	r30, 0x01	; 1
     738:	10 82       	st	Z, r1
     73a:	31 97       	sbiw	r30, 0x01	; 1
     73c:	10 82       	st	Z, r1
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	20 e8       	ldi	r18, 0x80	; 128
     742:	20 83       	st	Z, r18
     744:	31 97       	sbiw	r30, 0x01	; 1
     746:	10 82       	st	Z, r1
     748:	31 97       	sbiw	r30, 0x01	; 1
     74a:	10 82       	st	Z, r1
     74c:	31 97       	sbiw	r30, 0x01	; 1
     74e:	10 82       	st	Z, r1
     750:	77 97       	sbiw	r30, 0x17	; 23
     752:	40 83       	st	Z, r20
     754:	31 97       	sbiw	r30, 0x01	; 1
     756:	50 83       	st	Z, r21
     758:	86 97       	sbiw	r24, 0x26	; 38
     75a:	08 95       	ret

0000075c <xPortStartScheduler>:
     75c:	dc df       	rcall	.-72     	; 0x716 <prvSetupTimerInterrupt>
     75e:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
     762:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
     766:	cd 91       	ld	r28, X+
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	dd 91       	ld	r29, X+
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	ff 91       	pop	r31
     770:	ef 91       	pop	r30
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	bf 91       	pop	r27
     778:	af 91       	pop	r26
     77a:	9f 91       	pop	r25
     77c:	8f 91       	pop	r24
     77e:	7f 91       	pop	r23
     780:	6f 91       	pop	r22
     782:	5f 91       	pop	r21
     784:	4f 91       	pop	r20
     786:	3f 91       	pop	r19
     788:	2f 91       	pop	r18
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	bf 90       	pop	r11
     798:	af 90       	pop	r10
     79a:	9f 90       	pop	r9
     79c:	8f 90       	pop	r8
     79e:	7f 90       	pop	r7
     7a0:	6f 90       	pop	r6
     7a2:	5f 90       	pop	r5
     7a4:	4f 90       	pop	r4
     7a6:	3f 90       	pop	r3
     7a8:	2f 90       	pop	r2
     7aa:	1f 90       	pop	r1
     7ac:	0f 90       	pop	r0
     7ae:	0c be       	out	0x3c, r0	; 60
     7b0:	0f 90       	pop	r0
     7b2:	0b be       	out	0x3b, r0	; 59
     7b4:	0f 90       	pop	r0
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	0f 90       	pop	r0
     7ba:	08 95       	ret
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	08 95       	ret

000007c0 <vPortYield>:
     7c0:	0f 92       	push	r0
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	0f 92       	push	r0
     7c8:	0b b6       	in	r0, 0x3b	; 59
     7ca:	0f 92       	push	r0
     7cc:	0c b6       	in	r0, 0x3c	; 60
     7ce:	0f 92       	push	r0
     7d0:	1f 92       	push	r1
     7d2:	11 24       	eor	r1, r1
     7d4:	2f 92       	push	r2
     7d6:	3f 92       	push	r3
     7d8:	4f 92       	push	r4
     7da:	5f 92       	push	r5
     7dc:	6f 92       	push	r6
     7de:	7f 92       	push	r7
     7e0:	8f 92       	push	r8
     7e2:	9f 92       	push	r9
     7e4:	af 92       	push	r10
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	2f 93       	push	r18
     7f6:	3f 93       	push	r19
     7f8:	4f 93       	push	r20
     7fa:	5f 93       	push	r21
     7fc:	6f 93       	push	r22
     7fe:	7f 93       	push	r23
     800:	8f 93       	push	r24
     802:	9f 93       	push	r25
     804:	af 93       	push	r26
     806:	bf 93       	push	r27
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	ef 93       	push	r30
     80e:	ff 93       	push	r31
     810:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
     814:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
     818:	0d b6       	in	r0, 0x3d	; 61
     81a:	0d 92       	st	X+, r0
     81c:	0e b6       	in	r0, 0x3e	; 62
     81e:	0d 92       	st	X+, r0
     820:	0e 94 87 10 	call	0x210e	; 0x210e <vTaskSwitchContext>
     824:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
     828:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
     82c:	cd 91       	ld	r28, X+
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	dd 91       	ld	r29, X+
     832:	de bf       	out	0x3e, r29	; 62
     834:	ff 91       	pop	r31
     836:	ef 91       	pop	r30
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	bf 91       	pop	r27
     83e:	af 91       	pop	r26
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	7f 91       	pop	r23
     846:	6f 91       	pop	r22
     848:	5f 91       	pop	r21
     84a:	4f 91       	pop	r20
     84c:	3f 91       	pop	r19
     84e:	2f 91       	pop	r18
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	df 90       	pop	r13
     85a:	cf 90       	pop	r12
     85c:	bf 90       	pop	r11
     85e:	af 90       	pop	r10
     860:	9f 90       	pop	r9
     862:	8f 90       	pop	r8
     864:	7f 90       	pop	r7
     866:	6f 90       	pop	r6
     868:	5f 90       	pop	r5
     86a:	4f 90       	pop	r4
     86c:	3f 90       	pop	r3
     86e:	2f 90       	pop	r2
     870:	1f 90       	pop	r1
     872:	0f 90       	pop	r0
     874:	0c be       	out	0x3c, r0	; 60
     876:	0f 90       	pop	r0
     878:	0b be       	out	0x3b, r0	; 59
     87a:	0f 90       	pop	r0
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	0f 90       	pop	r0
     880:	08 95       	ret

00000882 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     882:	0f 92       	push	r0
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	0f 92       	push	r0
     88a:	0b b6       	in	r0, 0x3b	; 59
     88c:	0f 92       	push	r0
     88e:	0c b6       	in	r0, 0x3c	; 60
     890:	0f 92       	push	r0
     892:	1f 92       	push	r1
     894:	11 24       	eor	r1, r1
     896:	2f 92       	push	r2
     898:	3f 92       	push	r3
     89a:	4f 92       	push	r4
     89c:	5f 92       	push	r5
     89e:	6f 92       	push	r6
     8a0:	7f 92       	push	r7
     8a2:	8f 92       	push	r8
     8a4:	9f 92       	push	r9
     8a6:	af 92       	push	r10
     8a8:	bf 92       	push	r11
     8aa:	cf 92       	push	r12
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
     8d2:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
     8d6:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
     8da:	0d b6       	in	r0, 0x3d	; 61
     8dc:	0d 92       	st	X+, r0
     8de:	0e b6       	in	r0, 0x3e	; 62
     8e0:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     8e2:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     8e4:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <xTaskIncrementTick>
     8e8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     8ea:	0e 94 87 10 	call	0x210e	; 0x210e <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     8ee:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
     8f2:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
     8f6:	cd 91       	ld	r28, X+
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	dd 91       	ld	r29, X+
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	ff 91       	pop	r31
     900:	ef 91       	pop	r30
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	bf 91       	pop	r27
     908:	af 91       	pop	r26
     90a:	9f 91       	pop	r25
     90c:	8f 91       	pop	r24
     90e:	7f 91       	pop	r23
     910:	6f 91       	pop	r22
     912:	5f 91       	pop	r21
     914:	4f 91       	pop	r20
     916:	3f 91       	pop	r19
     918:	2f 91       	pop	r18
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	9f 90       	pop	r9
     92c:	8f 90       	pop	r8
     92e:	7f 90       	pop	r7
     930:	6f 90       	pop	r6
     932:	5f 90       	pop	r5
     934:	4f 90       	pop	r4
     936:	3f 90       	pop	r3
     938:	2f 90       	pop	r2
     93a:	1f 90       	pop	r1
     93c:	0f 90       	pop	r0
     93e:	0c be       	out	0x3c, r0	; 60
     940:	0f 90       	pop	r0
     942:	0b be       	out	0x3b, r0	; 59
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     94a:	08 95       	ret

0000094c <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     94c:	9a df       	rcall	.-204    	; 0x882 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     94e:	18 95       	reti

00000950 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     950:	dc 01       	movw	r26, r24
     952:	53 96       	adiw	r26, 0x13	; 19
     954:	2c 91       	ld	r18, X
     956:	53 97       	sbiw	r26, 0x13	; 19
     958:	22 23       	and	r18, r18
     95a:	41 f0       	breq	.+16     	; 0x96c <prvGetDisinheritPriorityAfterTimeout+0x1c>
     95c:	5a 96       	adiw	r26, 0x1a	; 26
     95e:	ed 91       	ld	r30, X+
     960:	fc 91       	ld	r31, X
     962:	5b 97       	sbiw	r26, 0x1b	; 27
     964:	90 81       	ld	r25, Z
     966:	8a e0       	ldi	r24, 0x0A	; 10
     968:	89 1b       	sub	r24, r25
     96a:	08 95       	ret
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	08 95       	ret

00000970 <prvIsQueueEmpty>:
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	0f 92       	push	r0
     976:	fc 01       	movw	r30, r24
     978:	86 8d       	ldd	r24, Z+30	; 0x1e
     97a:	81 11       	cpse	r24, r1
     97c:	02 c0       	rjmp	.+4      	; 0x982 <prvIsQueueEmpty+0x12>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	01 c0       	rjmp	.+2      	; 0x984 <prvIsQueueEmpty+0x14>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	0f 90       	pop	r0
     986:	0f be       	out	0x3f, r0	; 63
     988:	08 95       	ret

0000098a <prvIsQueueFull>:
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	0f 92       	push	r0
     990:	fc 01       	movw	r30, r24
     992:	26 8d       	ldd	r18, Z+30	; 0x1e
     994:	87 8d       	ldd	r24, Z+31	; 0x1f
     996:	28 13       	cpse	r18, r24
     998:	02 c0       	rjmp	.+4      	; 0x99e <prvIsQueueFull+0x14>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <prvIsQueueFull+0x16>
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	08 95       	ret

000009a6 <prvCopyDataToQueue>:
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	ec 01       	movw	r28, r24
     9b0:	04 2f       	mov	r16, r20
     9b2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     9b4:	48 a1       	ldd	r20, Y+32	; 0x20
     9b6:	41 11       	cpse	r20, r1
     9b8:	0c c0       	rjmp	.+24     	; 0x9d2 <prvCopyDataToQueue+0x2c>
     9ba:	88 81       	ld	r24, Y
     9bc:	99 81       	ldd	r25, Y+1	; 0x01
     9be:	89 2b       	or	r24, r25
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <prvCopyDataToQueue+0x1e>
     9c2:	42 c0       	rjmp	.+132    	; 0xa48 <prvCopyDataToQueue+0xa2>
     9c4:	8c 81       	ldd	r24, Y+4	; 0x04
     9c6:	9d 81       	ldd	r25, Y+5	; 0x05
     9c8:	0e 94 1f 13 	call	0x263e	; 0x263e <xTaskPriorityDisinherit>
     9cc:	1d 82       	std	Y+5, r1	; 0x05
     9ce:	1c 82       	std	Y+4, r1	; 0x04
     9d0:	42 c0       	rjmp	.+132    	; 0xa56 <prvCopyDataToQueue+0xb0>
     9d2:	01 11       	cpse	r16, r1
     9d4:	17 c0       	rjmp	.+46     	; 0xa04 <prvCopyDataToQueue+0x5e>
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
     9dc:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <memcpy>
     9e0:	28 a1       	ldd	r18, Y+32	; 0x20
     9e2:	8a 81       	ldd	r24, Y+2	; 0x02
     9e4:	9b 81       	ldd	r25, Y+3	; 0x03
     9e6:	82 0f       	add	r24, r18
     9e8:	91 1d       	adc	r25, r1
     9ea:	9b 83       	std	Y+3, r25	; 0x03
     9ec:	8a 83       	std	Y+2, r24	; 0x02
     9ee:	2c 81       	ldd	r18, Y+4	; 0x04
     9f0:	3d 81       	ldd	r19, Y+5	; 0x05
     9f2:	82 17       	cp	r24, r18
     9f4:	93 07       	cpc	r25, r19
     9f6:	50 f1       	brcs	.+84     	; 0xa4c <prvCopyDataToQueue+0xa6>
     9f8:	88 81       	ld	r24, Y
     9fa:	99 81       	ldd	r25, Y+1	; 0x01
     9fc:	9b 83       	std	Y+3, r25	; 0x03
     9fe:	8a 83       	std	Y+2, r24	; 0x02
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	29 c0       	rjmp	.+82     	; 0xa56 <prvCopyDataToQueue+0xb0>
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	8e 81       	ldd	r24, Y+6	; 0x06
     a08:	9f 81       	ldd	r25, Y+7	; 0x07
     a0a:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <memcpy>
     a0e:	88 a1       	ldd	r24, Y+32	; 0x20
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	91 95       	neg	r25
     a14:	81 95       	neg	r24
     a16:	91 09       	sbc	r25, r1
     a18:	2e 81       	ldd	r18, Y+6	; 0x06
     a1a:	3f 81       	ldd	r19, Y+7	; 0x07
     a1c:	28 0f       	add	r18, r24
     a1e:	39 1f       	adc	r19, r25
     a20:	3f 83       	std	Y+7, r19	; 0x07
     a22:	2e 83       	std	Y+6, r18	; 0x06
     a24:	48 81       	ld	r20, Y
     a26:	59 81       	ldd	r21, Y+1	; 0x01
     a28:	24 17       	cp	r18, r20
     a2a:	35 07       	cpc	r19, r21
     a2c:	30 f4       	brcc	.+12     	; 0xa3a <prvCopyDataToQueue+0x94>
     a2e:	2c 81       	ldd	r18, Y+4	; 0x04
     a30:	3d 81       	ldd	r19, Y+5	; 0x05
     a32:	82 0f       	add	r24, r18
     a34:	93 1f       	adc	r25, r19
     a36:	9f 83       	std	Y+7, r25	; 0x07
     a38:	8e 83       	std	Y+6, r24	; 0x06
     a3a:	02 30       	cpi	r16, 0x02	; 2
     a3c:	49 f4       	brne	.+18     	; 0xa50 <prvCopyDataToQueue+0xaa>
     a3e:	11 23       	and	r17, r17
     a40:	49 f0       	breq	.+18     	; 0xa54 <prvCopyDataToQueue+0xae>
     a42:	11 50       	subi	r17, 0x01	; 1
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	07 c0       	rjmp	.+14     	; 0xa56 <prvCopyDataToQueue+0xb0>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <prvCopyDataToQueue+0xb0>
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	03 c0       	rjmp	.+6      	; 0xa56 <prvCopyDataToQueue+0xb0>
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <prvCopyDataToQueue+0xb0>
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	1f 5f       	subi	r17, 0xFF	; 255
     a58:	1e 8f       	std	Y+30, r17	; 0x1e
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret

00000a64 <prvCopyDataFromQueue>:
     a64:	fc 01       	movw	r30, r24
     a66:	40 a1       	ldd	r20, Z+32	; 0x20
     a68:	44 23       	and	r20, r20
     a6a:	a9 f0       	breq	.+42     	; 0xa96 <prvCopyDataFromQueue+0x32>
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	26 81       	ldd	r18, Z+6	; 0x06
     a70:	37 81       	ldd	r19, Z+7	; 0x07
     a72:	24 0f       	add	r18, r20
     a74:	35 1f       	adc	r19, r21
     a76:	37 83       	std	Z+7, r19	; 0x07
     a78:	26 83       	std	Z+6, r18	; 0x06
     a7a:	84 81       	ldd	r24, Z+4	; 0x04
     a7c:	95 81       	ldd	r25, Z+5	; 0x05
     a7e:	28 17       	cp	r18, r24
     a80:	39 07       	cpc	r19, r25
     a82:	20 f0       	brcs	.+8      	; 0xa8c <prvCopyDataFromQueue+0x28>
     a84:	80 81       	ld	r24, Z
     a86:	91 81       	ldd	r25, Z+1	; 0x01
     a88:	97 83       	std	Z+7, r25	; 0x07
     a8a:	86 83       	std	Z+6, r24	; 0x06
     a8c:	cb 01       	movw	r24, r22
     a8e:	66 81       	ldd	r22, Z+6	; 0x06
     a90:	77 81       	ldd	r23, Z+7	; 0x07
     a92:	0c 94 3c 2f 	jmp	0x5e78	; 0x5e78 <memcpy>
     a96:	08 95       	ret

00000a98 <prvUnlockQueue>:
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	ec 01       	movw	r28, r24
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	0f 92       	push	r0
     aa6:	1a a1       	ldd	r17, Y+34	; 0x22
     aa8:	0b c0       	rjmp	.+22     	; 0xac0 <prvUnlockQueue+0x28>
     aaa:	8b 89       	ldd	r24, Y+19	; 0x13
     aac:	88 23       	and	r24, r24
     aae:	51 f0       	breq	.+20     	; 0xac4 <prvUnlockQueue+0x2c>
     ab0:	ce 01       	movw	r24, r28
     ab2:	43 96       	adiw	r24, 0x13	; 19
     ab4:	0e 94 45 11 	call	0x228a	; 0x228a <xTaskRemoveFromEventList>
     ab8:	81 11       	cpse	r24, r1
     aba:	0e 94 81 12 	call	0x2502	; 0x2502 <vTaskMissedYield>
     abe:	11 50       	subi	r17, 0x01	; 1
     ac0:	11 16       	cp	r1, r17
     ac2:	9c f3       	brlt	.-26     	; 0xaaa <prvUnlockQueue+0x12>
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	8a a3       	std	Y+34, r24	; 0x22
     ac8:	0f 90       	pop	r0
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	0f 92       	push	r0
     ad2:	19 a1       	ldd	r17, Y+33	; 0x21
     ad4:	0b c0       	rjmp	.+22     	; 0xaec <prvUnlockQueue+0x54>
     ad6:	88 85       	ldd	r24, Y+8	; 0x08
     ad8:	88 23       	and	r24, r24
     ada:	51 f0       	breq	.+20     	; 0xaf0 <prvUnlockQueue+0x58>
     adc:	ce 01       	movw	r24, r28
     ade:	08 96       	adiw	r24, 0x08	; 8
     ae0:	0e 94 45 11 	call	0x228a	; 0x228a <xTaskRemoveFromEventList>
     ae4:	81 11       	cpse	r24, r1
     ae6:	0e 94 81 12 	call	0x2502	; 0x2502 <vTaskMissedYield>
     aea:	11 50       	subi	r17, 0x01	; 1
     aec:	11 16       	cp	r1, r17
     aee:	9c f3       	brlt	.-26     	; 0xad6 <prvUnlockQueue+0x3e>
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	89 a3       	std	Y+33, r24	; 0x21
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	08 95       	ret

00000b00 <xQueueGenericReset>:
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	ec 01       	movw	r28, r24
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	0f 92       	push	r0
     b0c:	e8 81       	ld	r30, Y
     b0e:	f9 81       	ldd	r31, Y+1	; 0x01
     b10:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b12:	28 a1       	ldd	r18, Y+32	; 0x20
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	82 9f       	mul	r24, r18
     b1a:	a0 01       	movw	r20, r0
     b1c:	83 9f       	mul	r24, r19
     b1e:	50 0d       	add	r21, r0
     b20:	92 9f       	mul	r25, r18
     b22:	50 0d       	add	r21, r0
     b24:	11 24       	eor	r1, r1
     b26:	4e 0f       	add	r20, r30
     b28:	5f 1f       	adc	r21, r31
     b2a:	5d 83       	std	Y+5, r21	; 0x05
     b2c:	4c 83       	std	Y+4, r20	; 0x04
     b2e:	1e 8e       	std	Y+30, r1	; 0x1e
     b30:	fb 83       	std	Y+3, r31	; 0x03
     b32:	ea 83       	std	Y+2, r30	; 0x02
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	28 9f       	mul	r18, r24
     b38:	a0 01       	movw	r20, r0
     b3a:	29 9f       	mul	r18, r25
     b3c:	50 0d       	add	r21, r0
     b3e:	38 9f       	mul	r19, r24
     b40:	50 0d       	add	r21, r0
     b42:	11 24       	eor	r1, r1
     b44:	cf 01       	movw	r24, r30
     b46:	84 0f       	add	r24, r20
     b48:	95 1f       	adc	r25, r21
     b4a:	9f 83       	std	Y+7, r25	; 0x07
     b4c:	8e 83       	std	Y+6, r24	; 0x06
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	89 a3       	std	Y+33, r24	; 0x21
     b52:	8a a3       	std	Y+34, r24	; 0x22
     b54:	61 11       	cpse	r22, r1
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <xQueueGenericReset+0x6e>
     b58:	88 85       	ldd	r24, Y+8	; 0x08
     b5a:	88 23       	and	r24, r24
     b5c:	71 f0       	breq	.+28     	; 0xb7a <xQueueGenericReset+0x7a>
     b5e:	ce 01       	movw	r24, r28
     b60:	08 96       	adiw	r24, 0x08	; 8
     b62:	0e 94 45 11 	call	0x228a	; 0x228a <xTaskRemoveFromEventList>
     b66:	88 23       	and	r24, r24
     b68:	41 f0       	breq	.+16     	; 0xb7a <xQueueGenericReset+0x7a>
     b6a:	2a de       	rcall	.-940    	; 0x7c0 <vPortYield>
     b6c:	06 c0       	rjmp	.+12     	; 0xb7a <xQueueGenericReset+0x7a>
     b6e:	ce 01       	movw	r24, r28
     b70:	08 96       	adiw	r24, 0x08	; 8
     b72:	58 dd       	rcall	.-1360   	; 0x624 <vListInitialise>
     b74:	ce 01       	movw	r24, r28
     b76:	43 96       	adiw	r24, 0x13	; 19
     b78:	55 dd       	rcall	.-1366   	; 0x624 <vListInitialise>
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <prvInitialiseNewQueue>:
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	f8 01       	movw	r30, r16
     b8c:	61 11       	cpse	r22, r1
     b8e:	03 c0       	rjmp	.+6      	; 0xb96 <prvInitialiseNewQueue+0x10>
     b90:	11 83       	std	Z+1, r17	; 0x01
     b92:	00 83       	st	Z, r16
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <prvInitialiseNewQueue+0x14>
     b96:	51 83       	std	Z+1, r21	; 0x01
     b98:	40 83       	st	Z, r20
     b9a:	87 8f       	std	Z+31, r24	; 0x1f
     b9c:	60 a3       	std	Z+32, r22	; 0x20
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	cf 01       	movw	r24, r30
     ba2:	ae df       	rcall	.-164    	; 0xb00 <xQueueGenericReset>
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <xQueueGenericCreate>:
     baa:	df 92       	push	r13
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	f8 2e       	mov	r15, r24
     bba:	e6 2e       	mov	r14, r22
     bbc:	d4 2e       	mov	r13, r20
     bbe:	86 9f       	mul	r24, r22
     bc0:	c0 01       	movw	r24, r0
     bc2:	11 24       	eor	r1, r1
     bc4:	83 96       	adiw	r24, 0x23	; 35
     bc6:	43 dc       	rcall	.-1914   	; 0x44e <pvPortMalloc>
     bc8:	ec 01       	movw	r28, r24
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	41 f0       	breq	.+16     	; 0xbde <xQueueGenericCreate+0x34>
     bce:	8c 01       	movw	r16, r24
     bd0:	2d 2d       	mov	r18, r13
     bd2:	ac 01       	movw	r20, r24
     bd4:	4d 5d       	subi	r20, 0xDD	; 221
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	6e 2d       	mov	r22, r14
     bda:	8f 2d       	mov	r24, r15
     bdc:	d4 df       	rcall	.-88     	; 0xb86 <prvInitialiseNewQueue>
     bde:	ce 01       	movw	r24, r28
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <xQueueGenericSend>:
     bf0:	cf 92       	push	r12
     bf2:	df 92       	push	r13
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	29 97       	sbiw	r28, 0x09	; 9
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	7c 01       	movw	r14, r24
     c12:	6b 01       	movw	r12, r22
     c14:	2e 83       	std	Y+6, r18	; 0x06
     c16:	3f 83       	std	Y+7, r19	; 0x07
     c18:	48 87       	std	Y+8, r20	; 0x08
     c1a:	59 87       	std	Y+9, r21	; 0x09
     c1c:	10 e0       	ldi	r17, 0x00	; 0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	0f 92       	push	r0
     c24:	f7 01       	movw	r30, r14
     c26:	96 8d       	ldd	r25, Z+30	; 0x1e
     c28:	87 8d       	ldd	r24, Z+31	; 0x1f
     c2a:	98 17       	cp	r25, r24
     c2c:	10 f0       	brcs	.+4      	; 0xc32 <xQueueGenericSend+0x42>
     c2e:	02 30       	cpi	r16, 0x02	; 2
     c30:	b1 f4       	brne	.+44     	; 0xc5e <xQueueGenericSend+0x6e>
     c32:	40 2f       	mov	r20, r16
     c34:	b6 01       	movw	r22, r12
     c36:	c7 01       	movw	r24, r14
     c38:	b6 de       	rcall	.-660    	; 0x9a6 <prvCopyDataToQueue>
     c3a:	f7 01       	movw	r30, r14
     c3c:	93 89       	ldd	r25, Z+19	; 0x13
     c3e:	99 23       	and	r25, r25
     c40:	41 f0       	breq	.+16     	; 0xc52 <xQueueGenericSend+0x62>
     c42:	c7 01       	movw	r24, r14
     c44:	43 96       	adiw	r24, 0x13	; 19
     c46:	0e 94 45 11 	call	0x228a	; 0x228a <xTaskRemoveFromEventList>
     c4a:	88 23       	and	r24, r24
     c4c:	21 f0       	breq	.+8      	; 0xc56 <xQueueGenericSend+0x66>
     c4e:	b8 dd       	rcall	.-1168   	; 0x7c0 <vPortYield>
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <xQueueGenericSend+0x66>
     c52:	81 11       	cpse	r24, r1
     c54:	b5 dd       	rcall	.-1174   	; 0x7c0 <vPortYield>
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	4c c0       	rjmp	.+152    	; 0xcf6 <xQueueGenericSend+0x106>
     c5e:	8e 81       	ldd	r24, Y+6	; 0x06
     c60:	9f 81       	ldd	r25, Y+7	; 0x07
     c62:	a8 85       	ldd	r26, Y+8	; 0x08
     c64:	b9 85       	ldd	r27, Y+9	; 0x09
     c66:	89 2b       	or	r24, r25
     c68:	8a 2b       	or	r24, r26
     c6a:	8b 2b       	or	r24, r27
     c6c:	21 f4       	brne	.+8      	; 0xc76 <xQueueGenericSend+0x86>
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	40 c0       	rjmp	.+128    	; 0xcf6 <xQueueGenericSend+0x106>
     c76:	11 11       	cpse	r17, r1
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <xQueueGenericSend+0x94>
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	0e 94 0a 12 	call	0x2414	; 0x2414 <vTaskInternalSetTimeOutState>
     c82:	11 e0       	ldi	r17, 0x01	; 1
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	a6 d7       	rcall	.+3916   	; 0x1bd6 <vTaskSuspendAll>
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	0f 92       	push	r0
     c90:	f7 01       	movw	r30, r14
     c92:	81 a1       	ldd	r24, Z+33	; 0x21
     c94:	8f 3f       	cpi	r24, 0xFF	; 255
     c96:	09 f4       	brne	.+2      	; 0xc9a <xQueueGenericSend+0xaa>
     c98:	11 a2       	std	Z+33, r1	; 0x21
     c9a:	f7 01       	movw	r30, r14
     c9c:	82 a1       	ldd	r24, Z+34	; 0x22
     c9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ca0:	09 f4       	brne	.+2      	; 0xca4 <xQueueGenericSend+0xb4>
     ca2:	12 a2       	std	Z+34, r1	; 0x22
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	be 01       	movw	r22, r28
     caa:	6a 5f       	subi	r22, 0xFA	; 250
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 1b 12 	call	0x2436	; 0x2436 <xTaskCheckForTimeOut>
     cb6:	81 11       	cpse	r24, r1
     cb8:	19 c0       	rjmp	.+50     	; 0xcec <xQueueGenericSend+0xfc>
     cba:	c7 01       	movw	r24, r14
     cbc:	66 de       	rcall	.-820    	; 0x98a <prvIsQueueFull>
     cbe:	88 23       	and	r24, r24
     cc0:	81 f0       	breq	.+32     	; 0xce2 <xQueueGenericSend+0xf2>
     cc2:	4e 81       	ldd	r20, Y+6	; 0x06
     cc4:	5f 81       	ldd	r21, Y+7	; 0x07
     cc6:	68 85       	ldd	r22, Y+8	; 0x08
     cc8:	79 85       	ldd	r23, Y+9	; 0x09
     cca:	c7 01       	movw	r24, r14
     ccc:	08 96       	adiw	r24, 0x08	; 8
     cce:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <vTaskPlaceOnEventList>
     cd2:	c7 01       	movw	r24, r14
     cd4:	e1 de       	rcall	.-574    	; 0xa98 <prvUnlockQueue>
     cd6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xTaskResumeAll>
     cda:	81 11       	cpse	r24, r1
     cdc:	a0 cf       	rjmp	.-192    	; 0xc1e <xQueueGenericSend+0x2e>
     cde:	70 dd       	rcall	.-1312   	; 0x7c0 <vPortYield>
     ce0:	9e cf       	rjmp	.-196    	; 0xc1e <xQueueGenericSend+0x2e>
     ce2:	c7 01       	movw	r24, r14
     ce4:	d9 de       	rcall	.-590    	; 0xa98 <prvUnlockQueue>
     ce6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xTaskResumeAll>
     cea:	99 cf       	rjmp	.-206    	; 0xc1e <xQueueGenericSend+0x2e>
     cec:	c7 01       	movw	r24, r14
     cee:	d4 de       	rcall	.-600    	; 0xa98 <prvUnlockQueue>
     cf0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xTaskResumeAll>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	29 96       	adiw	r28, 0x09	; 9
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	08 95       	ret

00000d14 <xQueueGenericSendFromISR>:
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	8a 01       	movw	r16, r20
     d22:	fc 01       	movw	r30, r24
     d24:	56 8d       	ldd	r21, Z+30	; 0x1e
     d26:	37 8d       	ldd	r19, Z+31	; 0x1f
     d28:	53 17       	cp	r21, r19
     d2a:	10 f0       	brcs	.+4      	; 0xd30 <xQueueGenericSendFromISR+0x1c>
     d2c:	22 30       	cpi	r18, 0x02	; 2
     d2e:	f9 f4       	brne	.+62     	; 0xd6e <xQueueGenericSendFromISR+0x5a>
     d30:	42 2f       	mov	r20, r18
     d32:	78 01       	movw	r14, r16
     d34:	ec 01       	movw	r28, r24
     d36:	1a a1       	ldd	r17, Y+34	; 0x22
     d38:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d3a:	ce 01       	movw	r24, r28
     d3c:	34 de       	rcall	.-920    	; 0x9a6 <prvCopyDataToQueue>
     d3e:	1f 3f       	cpi	r17, 0xFF	; 255
     d40:	81 f4       	brne	.+32     	; 0xd62 <xQueueGenericSendFromISR+0x4e>
     d42:	8b 89       	ldd	r24, Y+19	; 0x13
     d44:	88 23       	and	r24, r24
     d46:	a9 f0       	breq	.+42     	; 0xd72 <xQueueGenericSendFromISR+0x5e>
     d48:	ce 01       	movw	r24, r28
     d4a:	43 96       	adiw	r24, 0x13	; 19
     d4c:	0e 94 45 11 	call	0x228a	; 0x228a <xTaskRemoveFromEventList>
     d50:	88 23       	and	r24, r24
     d52:	89 f0       	breq	.+34     	; 0xd76 <xQueueGenericSendFromISR+0x62>
     d54:	e1 14       	cp	r14, r1
     d56:	f1 04       	cpc	r15, r1
     d58:	81 f0       	breq	.+32     	; 0xd7a <xQueueGenericSendFromISR+0x66>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	f7 01       	movw	r30, r14
     d5e:	80 83       	st	Z, r24
     d60:	0d c0       	rjmp	.+26     	; 0xd7c <xQueueGenericSendFromISR+0x68>
     d62:	ff 24       	eor	r15, r15
     d64:	f3 94       	inc	r15
     d66:	f1 0e       	add	r15, r17
     d68:	fa a2       	std	Y+34, r15	; 0x22
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	07 c0       	rjmp	.+14     	; 0xd7c <xQueueGenericSendFromISR+0x68>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <xQueueGenericSendFromISR+0x68>
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <xQueueGenericSendFromISR+0x68>
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <xQueueGenericSendFromISR+0x68>
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	08 95       	ret

00000d8a <xQueueReceive>:
     d8a:	cf 92       	push	r12
     d8c:	df 92       	push	r13
     d8e:	ef 92       	push	r14
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	29 97       	sbiw	r28, 0x09	; 9
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	8c 01       	movw	r16, r24
     dac:	6b 01       	movw	r12, r22
     dae:	2e 83       	std	Y+6, r18	; 0x06
     db0:	3f 83       	std	Y+7, r19	; 0x07
     db2:	48 87       	std	Y+8, r20	; 0x08
     db4:	59 87       	std	Y+9, r21	; 0x09
     db6:	e1 2c       	mov	r14, r1
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	0f 92       	push	r0
     dbe:	f8 01       	movw	r30, r16
     dc0:	f6 8c       	ldd	r15, Z+30	; 0x1e
     dc2:	ff 20       	and	r15, r15
     dc4:	99 f0       	breq	.+38     	; 0xdec <xQueueReceive+0x62>
     dc6:	b6 01       	movw	r22, r12
     dc8:	c8 01       	movw	r24, r16
     dca:	4c de       	rcall	.-872    	; 0xa64 <prvCopyDataFromQueue>
     dcc:	fa 94       	dec	r15
     dce:	f8 01       	movw	r30, r16
     dd0:	f6 8e       	std	Z+30, r15	; 0x1e
     dd2:	80 85       	ldd	r24, Z+8	; 0x08
     dd4:	88 23       	and	r24, r24
     dd6:	31 f0       	breq	.+12     	; 0xde4 <xQueueReceive+0x5a>
     dd8:	c8 01       	movw	r24, r16
     dda:	08 96       	adiw	r24, 0x08	; 8
     ddc:	0e 94 45 11 	call	0x228a	; 0x228a <xTaskRemoveFromEventList>
     de0:	81 11       	cpse	r24, r1
     de2:	ee dc       	rcall	.-1572   	; 0x7c0 <vPortYield>
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	4f c0       	rjmp	.+158    	; 0xe8a <xQueueReceive+0x100>
     dec:	8e 81       	ldd	r24, Y+6	; 0x06
     dee:	9f 81       	ldd	r25, Y+7	; 0x07
     df0:	a8 85       	ldd	r26, Y+8	; 0x08
     df2:	b9 85       	ldd	r27, Y+9	; 0x09
     df4:	89 2b       	or	r24, r25
     df6:	8a 2b       	or	r24, r26
     df8:	8b 2b       	or	r24, r27
     dfa:	21 f4       	brne	.+8      	; 0xe04 <xQueueReceive+0x7a>
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	43 c0       	rjmp	.+134    	; 0xe8a <xQueueReceive+0x100>
     e04:	e1 10       	cpse	r14, r1
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <xQueueReceive+0x8a>
     e08:	ce 01       	movw	r24, r28
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	0e 94 0a 12 	call	0x2414	; 0x2414 <vTaskInternalSetTimeOutState>
     e10:	ee 24       	eor	r14, r14
     e12:	e3 94       	inc	r14
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	de d6       	rcall	.+3516   	; 0x1bd6 <vTaskSuspendAll>
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	0f 92       	push	r0
     e20:	f8 01       	movw	r30, r16
     e22:	81 a1       	ldd	r24, Z+33	; 0x21
     e24:	8f 3f       	cpi	r24, 0xFF	; 255
     e26:	09 f4       	brne	.+2      	; 0xe2a <xQueueReceive+0xa0>
     e28:	11 a2       	std	Z+33, r1	; 0x21
     e2a:	f8 01       	movw	r30, r16
     e2c:	82 a1       	ldd	r24, Z+34	; 0x22
     e2e:	8f 3f       	cpi	r24, 0xFF	; 255
     e30:	09 f4       	brne	.+2      	; 0xe34 <xQueueReceive+0xaa>
     e32:	12 a2       	std	Z+34, r1	; 0x22
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	be 01       	movw	r22, r28
     e3a:	6a 5f       	subi	r22, 0xFA	; 250
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	0e 94 1b 12 	call	0x2436	; 0x2436 <xTaskCheckForTimeOut>
     e46:	81 11       	cpse	r24, r1
     e48:	17 c0       	rjmp	.+46     	; 0xe78 <xQueueReceive+0xee>
     e4a:	c8 01       	movw	r24, r16
     e4c:	91 dd       	rcall	.-1246   	; 0x970 <prvIsQueueEmpty>
     e4e:	88 23       	and	r24, r24
     e50:	79 f0       	breq	.+30     	; 0xe70 <xQueueReceive+0xe6>
     e52:	4e 81       	ldd	r20, Y+6	; 0x06
     e54:	5f 81       	ldd	r21, Y+7	; 0x07
     e56:	68 85       	ldd	r22, Y+8	; 0x08
     e58:	79 85       	ldd	r23, Y+9	; 0x09
     e5a:	c8 01       	movw	r24, r16
     e5c:	43 96       	adiw	r24, 0x13	; 19
     e5e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <vTaskPlaceOnEventList>
     e62:	c8 01       	movw	r24, r16
     e64:	19 de       	rcall	.-974    	; 0xa98 <prvUnlockQueue>
     e66:	f7 d7       	rcall	.+4078   	; 0x1e56 <xTaskResumeAll>
     e68:	81 11       	cpse	r24, r1
     e6a:	a6 cf       	rjmp	.-180    	; 0xdb8 <xQueueReceive+0x2e>
     e6c:	a9 dc       	rcall	.-1710   	; 0x7c0 <vPortYield>
     e6e:	a4 cf       	rjmp	.-184    	; 0xdb8 <xQueueReceive+0x2e>
     e70:	c8 01       	movw	r24, r16
     e72:	12 de       	rcall	.-988    	; 0xa98 <prvUnlockQueue>
     e74:	f0 d7       	rcall	.+4064   	; 0x1e56 <xTaskResumeAll>
     e76:	a0 cf       	rjmp	.-192    	; 0xdb8 <xQueueReceive+0x2e>
     e78:	c8 01       	movw	r24, r16
     e7a:	0e de       	rcall	.-996    	; 0xa98 <prvUnlockQueue>
     e7c:	ec d7       	rcall	.+4056   	; 0x1e56 <xTaskResumeAll>
     e7e:	c8 01       	movw	r24, r16
     e80:	77 dd       	rcall	.-1298   	; 0x970 <prvIsQueueEmpty>
     e82:	88 23       	and	r24, r24
     e84:	09 f4       	brne	.+2      	; 0xe88 <xQueueReceive+0xfe>
     e86:	98 cf       	rjmp	.-208    	; 0xdb8 <xQueueReceive+0x2e>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	29 96       	adiw	r28, 0x09	; 9
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	08 95       	ret

00000ea8 <xQueueSemaphoreTake>:
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	29 97       	sbiw	r28, 0x09	; 9
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	8c 01       	movw	r16, r24
     ec6:	4e 83       	std	Y+6, r20	; 0x06
     ec8:	5f 83       	std	Y+7, r21	; 0x07
     eca:	68 87       	std	Y+8, r22	; 0x08
     ecc:	79 87       	std	Y+9, r23	; 0x09
     ece:	e1 2c       	mov	r14, r1
     ed0:	f1 2c       	mov	r15, r1
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	0f 92       	push	r0
     ed8:	f8 01       	movw	r30, r16
     eda:	86 8d       	ldd	r24, Z+30	; 0x1e
     edc:	88 23       	and	r24, r24
     ede:	c9 f0       	breq	.+50     	; 0xf12 <xQueueSemaphoreTake+0x6a>
     ee0:	81 50       	subi	r24, 0x01	; 1
     ee2:	86 8f       	std	Z+30, r24	; 0x1e
     ee4:	80 81       	ld	r24, Z
     ee6:	91 81       	ldd	r25, Z+1	; 0x01
     ee8:	89 2b       	or	r24, r25
     eea:	29 f4       	brne	.+10     	; 0xef6 <xQueueSemaphoreTake+0x4e>
     eec:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <pvTaskIncrementMutexHeldCount>
     ef0:	f8 01       	movw	r30, r16
     ef2:	95 83       	std	Z+5, r25	; 0x05
     ef4:	84 83       	std	Z+4, r24	; 0x04
     ef6:	f8 01       	movw	r30, r16
     ef8:	80 85       	ldd	r24, Z+8	; 0x08
     efa:	88 23       	and	r24, r24
     efc:	31 f0       	breq	.+12     	; 0xf0a <xQueueSemaphoreTake+0x62>
     efe:	c8 01       	movw	r24, r16
     f00:	08 96       	adiw	r24, 0x08	; 8
     f02:	0e 94 45 11 	call	0x228a	; 0x228a <xTaskRemoveFromEventList>
     f06:	81 11       	cpse	r24, r1
     f08:	5b dc       	rcall	.-1866   	; 0x7c0 <vPortYield>
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	6f c0       	rjmp	.+222    	; 0xff0 <xQueueSemaphoreTake+0x148>
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	a8 85       	ldd	r26, Y+8	; 0x08
     f18:	b9 85       	ldd	r27, Y+9	; 0x09
     f1a:	89 2b       	or	r24, r25
     f1c:	8a 2b       	or	r24, r26
     f1e:	8b 2b       	or	r24, r27
     f20:	21 f4       	brne	.+8      	; 0xf2a <xQueueSemaphoreTake+0x82>
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	63 c0       	rjmp	.+198    	; 0xff0 <xQueueSemaphoreTake+0x148>
     f2a:	f1 10       	cpse	r15, r1
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <xQueueSemaphoreTake+0x92>
     f2e:	ce 01       	movw	r24, r28
     f30:	01 96       	adiw	r24, 0x01	; 1
     f32:	0e 94 0a 12 	call	0x2414	; 0x2414 <vTaskInternalSetTimeOutState>
     f36:	ff 24       	eor	r15, r15
     f38:	f3 94       	inc	r15
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	4b d6       	rcall	.+3222   	; 0x1bd6 <vTaskSuspendAll>
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	0f 92       	push	r0
     f46:	f8 01       	movw	r30, r16
     f48:	81 a1       	ldd	r24, Z+33	; 0x21
     f4a:	8f 3f       	cpi	r24, 0xFF	; 255
     f4c:	09 f4       	brne	.+2      	; 0xf50 <xQueueSemaphoreTake+0xa8>
     f4e:	11 a2       	std	Z+33, r1	; 0x21
     f50:	f8 01       	movw	r30, r16
     f52:	82 a1       	ldd	r24, Z+34	; 0x22
     f54:	8f 3f       	cpi	r24, 0xFF	; 255
     f56:	09 f4       	brne	.+2      	; 0xf5a <xQueueSemaphoreTake+0xb2>
     f58:	12 a2       	std	Z+34, r1	; 0x22
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	be 01       	movw	r22, r28
     f60:	6a 5f       	subi	r22, 0xFA	; 250
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	ce 01       	movw	r24, r28
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	0e 94 1b 12 	call	0x2436	; 0x2436 <xTaskCheckForTimeOut>
     f6c:	81 11       	cpse	r24, r1
     f6e:	26 c0       	rjmp	.+76     	; 0xfbc <xQueueSemaphoreTake+0x114>
     f70:	c8 01       	movw	r24, r16
     f72:	fe dc       	rcall	.-1540   	; 0x970 <prvIsQueueEmpty>
     f74:	88 23       	and	r24, r24
     f76:	f1 f0       	breq	.+60     	; 0xfb4 <xQueueSemaphoreTake+0x10c>
     f78:	f8 01       	movw	r30, r16
     f7a:	80 81       	ld	r24, Z
     f7c:	91 81       	ldd	r25, Z+1	; 0x01
     f7e:	89 2b       	or	r24, r25
     f80:	51 f4       	brne	.+20     	; 0xf96 <xQueueSemaphoreTake+0xee>
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	0f 92       	push	r0
     f88:	84 81       	ldd	r24, Z+4	; 0x04
     f8a:	95 81       	ldd	r25, Z+5	; 0x05
     f8c:	0e 94 98 12 	call	0x2530	; 0x2530 <xTaskPriorityInherit>
     f90:	e8 2e       	mov	r14, r24
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	4e 81       	ldd	r20, Y+6	; 0x06
     f98:	5f 81       	ldd	r21, Y+7	; 0x07
     f9a:	68 85       	ldd	r22, Y+8	; 0x08
     f9c:	79 85       	ldd	r23, Y+9	; 0x09
     f9e:	c8 01       	movw	r24, r16
     fa0:	43 96       	adiw	r24, 0x13	; 19
     fa2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <vTaskPlaceOnEventList>
     fa6:	c8 01       	movw	r24, r16
     fa8:	77 dd       	rcall	.-1298   	; 0xa98 <prvUnlockQueue>
     faa:	55 d7       	rcall	.+3754   	; 0x1e56 <xTaskResumeAll>
     fac:	81 11       	cpse	r24, r1
     fae:	91 cf       	rjmp	.-222    	; 0xed2 <xQueueSemaphoreTake+0x2a>
     fb0:	07 dc       	rcall	.-2034   	; 0x7c0 <vPortYield>
     fb2:	8f cf       	rjmp	.-226    	; 0xed2 <xQueueSemaphoreTake+0x2a>
     fb4:	c8 01       	movw	r24, r16
     fb6:	70 dd       	rcall	.-1312   	; 0xa98 <prvUnlockQueue>
     fb8:	4e d7       	rcall	.+3740   	; 0x1e56 <xTaskResumeAll>
     fba:	8b cf       	rjmp	.-234    	; 0xed2 <xQueueSemaphoreTake+0x2a>
     fbc:	c8 01       	movw	r24, r16
     fbe:	6c dd       	rcall	.-1320   	; 0xa98 <prvUnlockQueue>
     fc0:	4a d7       	rcall	.+3732   	; 0x1e56 <xTaskResumeAll>
     fc2:	c8 01       	movw	r24, r16
     fc4:	d5 dc       	rcall	.-1622   	; 0x970 <prvIsQueueEmpty>
     fc6:	88 23       	and	r24, r24
     fc8:	09 f4       	brne	.+2      	; 0xfcc <xQueueSemaphoreTake+0x124>
     fca:	83 cf       	rjmp	.-250    	; 0xed2 <xQueueSemaphoreTake+0x2a>
     fcc:	ee 20       	and	r14, r14
     fce:	79 f0       	breq	.+30     	; 0xfee <xQueueSemaphoreTake+0x146>
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	0f 92       	push	r0
     fd6:	c8 01       	movw	r24, r16
     fd8:	bb dc       	rcall	.-1674   	; 0x950 <prvGetDisinheritPriorityAfterTimeout>
     fda:	68 2f       	mov	r22, r24
     fdc:	f8 01       	movw	r30, r16
     fde:	84 81       	ldd	r24, Z+4	; 0x04
     fe0:	95 81       	ldd	r25, Z+5	; 0x05
     fe2:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <vTaskPriorityDisinheritAfterTimeout>
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <xQueueSemaphoreTake+0x148>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	29 96       	adiw	r28, 0x09	; 9
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	08 95       	ret

0000100a <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	0f 92       	push	r0
    1016:	89 a1       	ldd	r24, Y+33	; 0x21
    1018:	8f 3f       	cpi	r24, 0xFF	; 255
    101a:	09 f4       	brne	.+2      	; 0x101e <vQueueWaitForMessageRestricted+0x14>
    101c:	19 a2       	std	Y+33, r1	; 0x21
    101e:	8a a1       	ldd	r24, Y+34	; 0x22
    1020:	8f 3f       	cpi	r24, 0xFF	; 255
    1022:	09 f4       	brne	.+2      	; 0x1026 <vQueueWaitForMessageRestricted+0x1c>
    1024:	1a a2       	std	Y+34, r1	; 0x22
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    102a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    102c:	81 11       	cpse	r24, r1
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1030:	ce 01       	movw	r24, r28
    1032:	43 96       	adiw	r24, 0x13	; 19
    1034:	0e 94 03 11 	call	0x2206	; 0x2206 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1038:	ce 01       	movw	r24, r28
    103a:	2e dd       	rcall	.-1444   	; 0xa98 <prvUnlockQueue>
    }
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1042:	fc 01       	movw	r30, r24
    1044:	44 81       	ldd	r20, Z+4	; 0x04
    1046:	55 81       	ldd	r21, Z+5	; 0x05
    1048:	22 81       	ldd	r18, Z+2	; 0x02
    104a:	33 81       	ldd	r19, Z+3	; 0x03
    104c:	24 0f       	add	r18, r20
    104e:	35 1f       	adc	r19, r21
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	b9 01       	movw	r22, r18
    1056:	68 1b       	sub	r22, r24
    1058:	79 0b       	sbc	r23, r25
    105a:	cb 01       	movw	r24, r22
    105c:	64 17       	cp	r22, r20
    105e:	75 07       	cpc	r23, r21
    1060:	10 f0       	brcs	.+4      	; 0x1066 <prvBytesInBuffer+0x24>
    1062:	84 1b       	sub	r24, r20
    1064:	95 0b       	sbc	r25, r21
    1066:	08 95       	ret

00001068 <prvInitialiseNewStreamBuffer>:
    1068:	0f 93       	push	r16
    106a:	fc 01       	movw	r30, r24
    106c:	8f e0       	ldi	r24, 0x0F	; 15
    106e:	df 01       	movw	r26, r30
    1070:	1d 92       	st	X+, r1
    1072:	8a 95       	dec	r24
    1074:	e9 f7       	brne	.-6      	; 0x1070 <prvInitialiseNewStreamBuffer+0x8>
    1076:	75 87       	std	Z+13, r23	; 0x0d
    1078:	64 87       	std	Z+12, r22	; 0x0c
    107a:	55 83       	std	Z+5, r21	; 0x05
    107c:	44 83       	std	Z+4, r20	; 0x04
    107e:	37 83       	std	Z+7, r19	; 0x07
    1080:	26 83       	std	Z+6, r18	; 0x06
    1082:	06 87       	std	Z+14, r16	; 0x0e
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <prvWriteBytesToBuffer>:
    1088:	af 92       	push	r10
    108a:	bf 92       	push	r11
    108c:	cf 92       	push	r12
    108e:	df 92       	push	r13
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	6c 01       	movw	r12, r24
    109e:	5b 01       	movw	r10, r22
    10a0:	7a 01       	movw	r14, r20
    10a2:	fc 01       	movw	r30, r24
    10a4:	c2 81       	ldd	r28, Z+2	; 0x02
    10a6:	d3 81       	ldd	r29, Z+3	; 0x03
    10a8:	04 81       	ldd	r16, Z+4	; 0x04
    10aa:	15 81       	ldd	r17, Z+5	; 0x05
    10ac:	0c 1b       	sub	r16, r28
    10ae:	1d 0b       	sbc	r17, r29
    10b0:	40 17       	cp	r20, r16
    10b2:	51 07       	cpc	r21, r17
    10b4:	08 f4       	brcc	.+2      	; 0x10b8 <prvWriteBytesToBuffer+0x30>
    10b6:	8a 01       	movw	r16, r20
    10b8:	f6 01       	movw	r30, r12
    10ba:	84 85       	ldd	r24, Z+12	; 0x0c
    10bc:	95 85       	ldd	r25, Z+13	; 0x0d
    10be:	a8 01       	movw	r20, r16
    10c0:	b5 01       	movw	r22, r10
    10c2:	8c 0f       	add	r24, r28
    10c4:	9d 1f       	adc	r25, r29
    10c6:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <memcpy>
    10ca:	0e 15       	cp	r16, r14
    10cc:	1f 05       	cpc	r17, r15
    10ce:	58 f4       	brcc	.+22     	; 0x10e6 <prvWriteBytesToBuffer+0x5e>
    10d0:	a7 01       	movw	r20, r14
    10d2:	40 1b       	sub	r20, r16
    10d4:	51 0b       	sbc	r21, r17
    10d6:	b5 01       	movw	r22, r10
    10d8:	60 0f       	add	r22, r16
    10da:	71 1f       	adc	r23, r17
    10dc:	f6 01       	movw	r30, r12
    10de:	84 85       	ldd	r24, Z+12	; 0x0c
    10e0:	95 85       	ldd	r25, Z+13	; 0x0d
    10e2:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <memcpy>
    10e6:	ce 01       	movw	r24, r28
    10e8:	8e 0d       	add	r24, r14
    10ea:	9f 1d       	adc	r25, r15
    10ec:	f6 01       	movw	r30, r12
    10ee:	24 81       	ldd	r18, Z+4	; 0x04
    10f0:	35 81       	ldd	r19, Z+5	; 0x05
    10f2:	82 17       	cp	r24, r18
    10f4:	93 07       	cpc	r25, r19
    10f6:	10 f0       	brcs	.+4      	; 0x10fc <prvWriteBytesToBuffer+0x74>
    10f8:	82 1b       	sub	r24, r18
    10fa:	93 0b       	sbc	r25, r19
    10fc:	f6 01       	movw	r30, r12
    10fe:	93 83       	std	Z+3, r25	; 0x03
    1100:	82 83       	std	Z+2, r24	; 0x02
    1102:	c7 01       	movw	r24, r14
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	cf 90       	pop	r12
    1114:	bf 90       	pop	r11
    1116:	af 90       	pop	r10
    1118:	08 95       	ret

0000111a <prvWriteMessageToBuffer>:
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	1f 92       	push	r1
    112c:	1f 92       	push	r1
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	7c 01       	movw	r14, r24
    1134:	6b 01       	movw	r12, r22
    1136:	5a 83       	std	Y+2, r21	; 0x02
    1138:	49 83       	std	Y+1, r20	; 0x01
    113a:	21 15       	cp	r18, r1
    113c:	31 05       	cpc	r19, r1
    113e:	c1 f0       	breq	.+48     	; 0x1170 <prvWriteMessageToBuffer+0x56>
    1140:	fc 01       	movw	r30, r24
    1142:	86 85       	ldd	r24, Z+14	; 0x0e
    1144:	80 fd       	sbrc	r24, 0
    1146:	08 c0       	rjmp	.+16     	; 0x1158 <prvWriteMessageToBuffer+0x3e>
    1148:	42 17       	cp	r20, r18
    114a:	53 07       	cpc	r21, r19
    114c:	08 f4       	brcc	.+2      	; 0x1150 <prvWriteMessageToBuffer+0x36>
    114e:	9a 01       	movw	r18, r20
    1150:	3a 83       	std	Y+2, r19	; 0x02
    1152:	29 83       	std	Y+1, r18	; 0x01
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <prvWriteMessageToBuffer+0x5c>
    1158:	20 17       	cp	r18, r16
    115a:	31 07       	cpc	r19, r17
    115c:	58 f0       	brcs	.+22     	; 0x1174 <prvWriteMessageToBuffer+0x5a>
    115e:	42 e0       	ldi	r20, 0x02	; 2
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	be 01       	movw	r22, r28
    1164:	6f 5f       	subi	r22, 0xFF	; 255
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	c7 01       	movw	r24, r14
    116a:	8e df       	rcall	.-228    	; 0x1088 <prvWriteBytesToBuffer>
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <prvWriteMessageToBuffer+0x5c>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <prvWriteMessageToBuffer+0x5c>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	88 23       	and	r24, r24
    1178:	31 f0       	breq	.+12     	; 0x1186 <prvWriteMessageToBuffer+0x6c>
    117a:	49 81       	ldd	r20, Y+1	; 0x01
    117c:	5a 81       	ldd	r21, Y+2	; 0x02
    117e:	b6 01       	movw	r22, r12
    1180:	c7 01       	movw	r24, r14
    1182:	82 df       	rcall	.-252    	; 0x1088 <prvWriteBytesToBuffer>
    1184:	02 c0       	rjmp	.+4      	; 0x118a <prvWriteMessageToBuffer+0x70>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ff 90       	pop	r15
    1198:	ef 90       	pop	r14
    119a:	df 90       	pop	r13
    119c:	cf 90       	pop	r12
    119e:	08 95       	ret

000011a0 <prvReadBytesFromBuffer>:
    11a0:	af 92       	push	r10
    11a2:	bf 92       	push	r11
    11a4:	cf 92       	push	r12
    11a6:	df 92       	push	r13
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	7c 01       	movw	r14, r24
    11b6:	5b 01       	movw	r10, r22
    11b8:	e9 01       	movw	r28, r18
    11ba:	42 17       	cp	r20, r18
    11bc:	53 07       	cpc	r21, r19
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <prvReadBytesFromBuffer+0x22>
    11c0:	ea 01       	movw	r28, r20
    11c2:	20 97       	sbiw	r28, 0x00	; 0
    11c4:	81 f1       	breq	.+96     	; 0x1226 <prvReadBytesFromBuffer+0x86>
    11c6:	f7 01       	movw	r30, r14
    11c8:	00 81       	ld	r16, Z
    11ca:	11 81       	ldd	r17, Z+1	; 0x01
    11cc:	84 81       	ldd	r24, Z+4	; 0x04
    11ce:	95 81       	ldd	r25, Z+5	; 0x05
    11d0:	80 1b       	sub	r24, r16
    11d2:	91 0b       	sbc	r25, r17
    11d4:	6e 01       	movw	r12, r28
    11d6:	8c 17       	cp	r24, r28
    11d8:	9d 07       	cpc	r25, r29
    11da:	08 f4       	brcc	.+2      	; 0x11de <prvReadBytesFromBuffer+0x3e>
    11dc:	6c 01       	movw	r12, r24
    11de:	f7 01       	movw	r30, r14
    11e0:	64 85       	ldd	r22, Z+12	; 0x0c
    11e2:	75 85       	ldd	r23, Z+13	; 0x0d
    11e4:	60 0f       	add	r22, r16
    11e6:	71 1f       	adc	r23, r17
    11e8:	a6 01       	movw	r20, r12
    11ea:	c5 01       	movw	r24, r10
    11ec:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <memcpy>
    11f0:	cc 16       	cp	r12, r28
    11f2:	dd 06       	cpc	r13, r29
    11f4:	58 f4       	brcc	.+22     	; 0x120c <prvReadBytesFromBuffer+0x6c>
    11f6:	ae 01       	movw	r20, r28
    11f8:	4c 19       	sub	r20, r12
    11fa:	5d 09       	sbc	r21, r13
    11fc:	f7 01       	movw	r30, r14
    11fe:	64 85       	ldd	r22, Z+12	; 0x0c
    1200:	75 85       	ldd	r23, Z+13	; 0x0d
    1202:	c5 01       	movw	r24, r10
    1204:	8c 0d       	add	r24, r12
    1206:	9d 1d       	adc	r25, r13
    1208:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <memcpy>
    120c:	0c 0f       	add	r16, r28
    120e:	1d 1f       	adc	r17, r29
    1210:	f7 01       	movw	r30, r14
    1212:	84 81       	ldd	r24, Z+4	; 0x04
    1214:	95 81       	ldd	r25, Z+5	; 0x05
    1216:	08 17       	cp	r16, r24
    1218:	19 07       	cpc	r17, r25
    121a:	10 f0       	brcs	.+4      	; 0x1220 <prvReadBytesFromBuffer+0x80>
    121c:	08 1b       	sub	r16, r24
    121e:	19 0b       	sbc	r17, r25
    1220:	f7 01       	movw	r30, r14
    1222:	11 83       	std	Z+1, r17	; 0x01
    1224:	00 83       	st	Z, r16
    1226:	ce 01       	movw	r24, r28
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	08 95       	ret

0000123e <prvReadMessageFromBuffer>:
    123e:	6f 92       	push	r6
    1240:	7f 92       	push	r7
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	1f 92       	push	r1
    125c:	1f 92       	push	r1
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	6c 01       	movw	r12, r24
    1264:	4b 01       	movw	r8, r22
    1266:	5a 01       	movw	r10, r20
    1268:	79 01       	movw	r14, r18
    126a:	01 15       	cp	r16, r1
    126c:	11 05       	cpc	r17, r1
    126e:	b1 f0       	breq	.+44     	; 0x129c <prvReadMessageFromBuffer+0x5e>
    1270:	fc 01       	movw	r30, r24
    1272:	60 80       	ld	r6, Z
    1274:	71 80       	ldd	r7, Z+1	; 0x01
    1276:	a8 01       	movw	r20, r16
    1278:	be 01       	movw	r22, r28
    127a:	6f 5f       	subi	r22, 0xFF	; 255
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	90 df       	rcall	.-224    	; 0x11a0 <prvReadBytesFromBuffer>
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	e0 1a       	sub	r14, r16
    1286:	f1 0a       	sbc	r15, r17
    1288:	a8 16       	cp	r10, r24
    128a:	b9 06       	cpc	r11, r25
    128c:	30 f4       	brcc	.+12     	; 0x129a <prvReadMessageFromBuffer+0x5c>
    128e:	f6 01       	movw	r30, r12
    1290:	71 82       	std	Z+1, r7	; 0x01
    1292:	60 82       	st	Z, r6
    1294:	a1 2c       	mov	r10, r1
    1296:	b1 2c       	mov	r11, r1
    1298:	01 c0       	rjmp	.+2      	; 0x129c <prvReadMessageFromBuffer+0x5e>
    129a:	5c 01       	movw	r10, r24
    129c:	97 01       	movw	r18, r14
    129e:	a5 01       	movw	r20, r10
    12a0:	b4 01       	movw	r22, r8
    12a2:	c6 01       	movw	r24, r12
    12a4:	7d df       	rcall	.-262    	; 0x11a0 <prvReadBytesFromBuffer>
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	df 90       	pop	r13
    12b8:	cf 90       	pop	r12
    12ba:	bf 90       	pop	r11
    12bc:	af 90       	pop	r10
    12be:	9f 90       	pop	r9
    12c0:	8f 90       	pop	r8
    12c2:	7f 90       	pop	r7
    12c4:	6f 90       	pop	r6
    12c6:	08 95       	ret

000012c8 <xStreamBufferGenericCreate>:
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	ec 01       	movw	r28, r24
    12d8:	6b 01       	movw	r12, r22
    12da:	41 30       	cpi	r20, 0x01	; 1
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <xStreamBufferGenericCreate+0x1a>
    12de:	01 e0       	ldi	r16, 0x01	; 1
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <xStreamBufferGenericCreate+0x1c>
    12e2:	00 e0       	ldi	r16, 0x00	; 0
    12e4:	c1 14       	cp	r12, r1
    12e6:	d1 04       	cpc	r13, r1
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <xStreamBufferGenericCreate+0x28>
    12ea:	cc 24       	eor	r12, r12
    12ec:	c3 94       	inc	r12
    12ee:	d1 2c       	mov	r13, r1
    12f0:	ce 01       	movw	r24, r28
    12f2:	40 96       	adiw	r24, 0x10	; 16
    12f4:	c8 17       	cp	r28, r24
    12f6:	d9 07       	cpc	r29, r25
    12f8:	20 f4       	brcc	.+8      	; 0x1302 <xStreamBufferGenericCreate+0x3a>
    12fa:	21 96       	adiw	r28, 0x01	; 1
    12fc:	a8 d8       	rcall	.-3760   	; 0x44e <pvPortMalloc>
    12fe:	7c 01       	movw	r14, r24
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <xStreamBufferGenericCreate+0x3e>
    1302:	e1 2c       	mov	r14, r1
    1304:	f1 2c       	mov	r15, r1
    1306:	e1 14       	cp	r14, r1
    1308:	f1 04       	cpc	r15, r1
    130a:	39 f0       	breq	.+14     	; 0x131a <xStreamBufferGenericCreate+0x52>
    130c:	96 01       	movw	r18, r12
    130e:	ae 01       	movw	r20, r28
    1310:	b7 01       	movw	r22, r14
    1312:	61 5f       	subi	r22, 0xF1	; 241
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	c7 01       	movw	r24, r14
    1318:	a7 de       	rcall	.-690    	; 0x1068 <prvInitialiseNewStreamBuffer>
    131a:	c7 01       	movw	r24, r14
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	0f 91       	pop	r16
    1322:	ff 90       	pop	r15
    1324:	ef 90       	pop	r14
    1326:	df 90       	pop	r13
    1328:	cf 90       	pop	r12
    132a:	08 95       	ret

0000132c <xStreamBufferReset>:
    132c:	0f 93       	push	r16
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	0f 92       	push	r0
    1334:	fc 01       	movw	r30, r24
    1336:	20 85       	ldd	r18, Z+8	; 0x08
    1338:	31 85       	ldd	r19, Z+9	; 0x09
    133a:	23 2b       	or	r18, r19
    133c:	71 f4       	brne	.+28     	; 0x135a <xStreamBufferReset+0x2e>
    133e:	22 85       	ldd	r18, Z+10	; 0x0a
    1340:	33 85       	ldd	r19, Z+11	; 0x0b
    1342:	23 2b       	or	r18, r19
    1344:	61 f4       	brne	.+24     	; 0x135e <xStreamBufferReset+0x32>
    1346:	26 81       	ldd	r18, Z+6	; 0x06
    1348:	37 81       	ldd	r19, Z+7	; 0x07
    134a:	44 81       	ldd	r20, Z+4	; 0x04
    134c:	55 81       	ldd	r21, Z+5	; 0x05
    134e:	64 85       	ldd	r22, Z+12	; 0x0c
    1350:	75 85       	ldd	r23, Z+13	; 0x0d
    1352:	06 85       	ldd	r16, Z+14	; 0x0e
    1354:	89 de       	rcall	.-750    	; 0x1068 <prvInitialiseNewStreamBuffer>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <xStreamBufferReset+0x34>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <xStreamBufferReset+0x34>
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	0f 90       	pop	r0
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	0f 91       	pop	r16
    1366:	08 95       	ret

00001368 <xStreamBufferSpacesAvailable>:
    1368:	fc 01       	movw	r30, r24
    136a:	24 81       	ldd	r18, Z+4	; 0x04
    136c:	35 81       	ldd	r19, Z+5	; 0x05
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	82 0f       	add	r24, r18
    1374:	93 1f       	adc	r25, r19
    1376:	42 81       	ldd	r20, Z+2	; 0x02
    1378:	53 81       	ldd	r21, Z+3	; 0x03
    137a:	84 1b       	sub	r24, r20
    137c:	95 0b       	sbc	r25, r21
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	82 17       	cp	r24, r18
    1382:	93 07       	cpc	r25, r19
    1384:	10 f0       	brcs	.+4      	; 0x138a <xStreamBufferSpacesAvailable+0x22>
    1386:	82 1b       	sub	r24, r18
    1388:	93 0b       	sbc	r25, r19
    138a:	08 95       	ret

0000138c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    138c:	2f 92       	push	r2
    138e:	3f 92       	push	r3
    1390:	4f 92       	push	r4
    1392:	5f 92       	push	r5
    1394:	6f 92       	push	r6
    1396:	7f 92       	push	r7
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	2b 97       	sbiw	r28, 0x0b	; 11
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	4c 01       	movw	r8, r24
    13c2:	7b 87       	std	Y+11, r23	; 0x0b
    13c4:	6a 87       	std	Y+10, r22	; 0x0a
    13c6:	1a 01       	movw	r2, r20
    13c8:	0e 83       	std	Y+6, r16	; 0x06
    13ca:	1f 83       	std	Y+7, r17	; 0x07
    13cc:	28 87       	std	Y+8, r18	; 0x08
    13ce:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    13d0:	fc 01       	movw	r30, r24
    13d2:	84 81       	ldd	r24, Z+4	; 0x04
    13d4:	95 81       	ldd	r25, Z+5	; 0x05
    13d6:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    13d8:	26 85       	ldd	r18, Z+14	; 0x0e
    13da:	20 ff       	sbrs	r18, 0
    13dc:	0c c0       	rjmp	.+24     	; 0x13f6 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    13de:	2a 01       	movw	r4, r20
    13e0:	f2 e0       	ldi	r31, 0x02	; 2
    13e2:	4f 0e       	add	r4, r31
    13e4:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    13e6:	84 15       	cp	r24, r4
    13e8:	95 05       	cpc	r25, r5
    13ea:	58 f4       	brcc	.+22     	; 0x1402 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    13ec:	1e 82       	std	Y+6, r1	; 0x06
    13ee:	1f 82       	std	Y+7, r1	; 0x07
    13f0:	18 86       	std	Y+8, r1	; 0x08
    13f2:	19 86       	std	Y+9, r1	; 0x09
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    13f6:	84 17       	cp	r24, r20
    13f8:	95 07       	cpc	r25, r21
    13fa:	10 f0       	brcs	.+4      	; 0x1400 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    13fc:	2a 01       	movw	r4, r20
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1400:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1402:	8e 81       	ldd	r24, Y+6	; 0x06
    1404:	9f 81       	ldd	r25, Y+7	; 0x07
    1406:	a8 85       	ldd	r26, Y+8	; 0x08
    1408:	b9 85       	ldd	r27, Y+9	; 0x09
    140a:	89 2b       	or	r24, r25
    140c:	8a 2b       	or	r24, r26
    140e:	8b 2b       	or	r24, r27
    1410:	09 f4       	brne	.+2      	; 0x1414 <xStreamBufferSend+0x88>
    1412:	36 c0       	rjmp	.+108    	; 0x1480 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1414:	ce 01       	movw	r24, r28
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	e7 d7       	rcall	.+4046   	; 0x23e8 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1420:	c4 01       	movw	r24, r8
    1422:	a2 df       	rcall	.-188    	; 0x1368 <xStreamBufferSpacesAvailable>
    1424:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1426:	84 15       	cp	r24, r4
    1428:	95 05       	cpc	r25, r5
    142a:	38 f5       	brcc	.+78     	; 0x147a <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1436:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskGetCurrentTaskHandle>
    143a:	f4 01       	movw	r30, r8
    143c:	93 87       	std	Z+11, r25	; 0x0b
    143e:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1444:	ae 80       	ldd	r10, Y+6	; 0x06
    1446:	bf 80       	ldd	r11, Y+7	; 0x07
    1448:	c8 84       	ldd	r12, Y+8	; 0x08
    144a:	d9 84       	ldd	r13, Y+9	; 0x09
    144c:	e1 2c       	mov	r14, r1
    144e:	f1 2c       	mov	r15, r1
    1450:	00 e0       	ldi	r16, 0x00	; 0
    1452:	10 e0       	ldi	r17, 0x00	; 0
    1454:	98 01       	movw	r18, r16
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	ba 01       	movw	r22, r20
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1462:	f4 01       	movw	r30, r8
    1464:	13 86       	std	Z+11, r1	; 0x0b
    1466:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1468:	be 01       	movw	r22, r28
    146a:	6a 5f       	subi	r22, 0xFA	; 250
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	ce 01       	movw	r24, r28
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	e1 d7       	rcall	.+4034   	; 0x2436 <xTaskCheckForTimeOut>
    1474:	88 23       	and	r24, r24
    1476:	89 f2       	breq	.-94     	; 0x141a <xStreamBufferSend+0x8e>
    1478:	05 c0       	rjmp	.+10     	; 0x1484 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
                    break;
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1480:	61 2c       	mov	r6, r1
    1482:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1484:	61 14       	cp	r6, r1
    1486:	71 04       	cpc	r7, r1
    1488:	19 f4       	brne	.+6      	; 0x1490 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    148a:	c4 01       	movw	r24, r8
    148c:	6d df       	rcall	.-294    	; 0x1368 <xStreamBufferSpacesAvailable>
    148e:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1490:	82 01       	movw	r16, r4
    1492:	93 01       	movw	r18, r6
    1494:	a1 01       	movw	r20, r2
    1496:	6a 85       	ldd	r22, Y+10	; 0x0a
    1498:	7b 85       	ldd	r23, Y+11	; 0x0b
    149a:	c4 01       	movw	r24, r8
    149c:	3e de       	rcall	.-900    	; 0x111a <prvWriteMessageToBuffer>
    149e:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    14a0:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    14a2:	e9 f0       	breq	.+58     	; 0x14de <xStreamBufferSend+0x152>
    14a4:	c4 01       	movw	r24, r8
    14a6:	cd dd       	rcall	.-1126   	; 0x1042 <prvBytesInBuffer>
    14a8:	f4 01       	movw	r30, r8
    14aa:	26 81       	ldd	r18, Z+6	; 0x06
    14ac:	37 81       	ldd	r19, Z+7	; 0x07
    14ae:	82 17       	cp	r24, r18
    14b0:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    14b2:	a8 f0       	brcs	.+42     	; 0x14de <xStreamBufferSend+0x152>
    14b4:	90 d3       	rcall	.+1824   	; 0x1bd6 <vTaskSuspendAll>
    14b6:	f4 01       	movw	r30, r8
    14b8:	80 85       	ldd	r24, Z+8	; 0x08
    14ba:	91 85       	ldd	r25, Z+9	; 0x09
    14bc:	89 2b       	or	r24, r25
    14be:	71 f0       	breq	.+28     	; 0x14dc <xStreamBufferSend+0x150>
    14c0:	80 85       	ldd	r24, Z+8	; 0x08
    14c2:	91 85       	ldd	r25, Z+9	; 0x09
    14c4:	e1 2c       	mov	r14, r1
    14c6:	f1 2c       	mov	r15, r1
    14c8:	00 e0       	ldi	r16, 0x00	; 0
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	a9 01       	movw	r20, r18
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	0e 94 9a 14 	call	0x2934	; 0x2934 <xTaskGenericNotify>
    14d6:	f4 01       	movw	r30, r8
    14d8:	11 86       	std	Z+9, r1	; 0x09
    14da:	10 86       	std	Z+8, r1	; 0x08
    14dc:	bc d4       	rcall	.+2424   	; 0x1e56 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    14de:	c6 01       	movw	r24, r12
    14e0:	2b 96       	adiw	r28, 0x0b	; 11
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	bf 90       	pop	r11
    14fe:	af 90       	pop	r10
    1500:	9f 90       	pop	r9
    1502:	8f 90       	pop	r8
    1504:	7f 90       	pop	r7
    1506:	6f 90       	pop	r6
    1508:	5f 90       	pop	r5
    150a:	4f 90       	pop	r4
    150c:	3f 90       	pop	r3
    150e:	2f 90       	pop	r2
    1510:	08 95       	ret

00001512 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1512:	af 92       	push	r10
    1514:	bf 92       	push	r11
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	ec 01       	movw	r28, r24
    1528:	7b 01       	movw	r14, r22
    152a:	5a 01       	movw	r10, r20
    152c:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    152e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1530:	80 ff       	sbrs	r24, 0
    1532:	04 c0       	rjmp	.+8      	; 0x153c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1534:	8a 01       	movw	r16, r20
    1536:	0e 5f       	subi	r16, 0xFE	; 254
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	01 c0       	rjmp	.+2      	; 0x153e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    153c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    153e:	ce 01       	movw	r24, r28
    1540:	13 df       	rcall	.-474    	; 0x1368 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1542:	9c 01       	movw	r18, r24
    1544:	a5 01       	movw	r20, r10
    1546:	b7 01       	movw	r22, r14
    1548:	ce 01       	movw	r24, r28
    154a:	e7 dd       	rcall	.-1074   	; 0x111a <prvWriteMessageToBuffer>
    154c:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    154e:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1550:	c1 f0       	breq	.+48     	; 0x1582 <xStreamBufferSendFromISR+0x70>
    1552:	ce 01       	movw	r24, r28
    1554:	76 dd       	rcall	.-1300   	; 0x1042 <prvBytesInBuffer>
    1556:	2e 81       	ldd	r18, Y+6	; 0x06
    1558:	3f 81       	ldd	r19, Y+7	; 0x07
    155a:	82 17       	cp	r24, r18
    155c:	93 07       	cpc	r25, r19
    155e:	88 f0       	brcs	.+34     	; 0x1582 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1560:	88 85       	ldd	r24, Y+8	; 0x08
    1562:	99 85       	ldd	r25, Y+9	; 0x09
    1564:	89 2b       	or	r24, r25
    1566:	69 f0       	breq	.+26     	; 0x1582 <xStreamBufferSendFromISR+0x70>
    1568:	88 85       	ldd	r24, Y+8	; 0x08
    156a:	99 85       	ldd	r25, Y+9	; 0x09
    156c:	e1 2c       	mov	r14, r1
    156e:	f1 2c       	mov	r15, r1
    1570:	00 e0       	ldi	r16, 0x00	; 0
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	a9 01       	movw	r20, r18
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <xTaskGenericNotifyFromISR>
    157e:	19 86       	std	Y+9, r1	; 0x09
    1580:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1582:	c5 01       	movw	r24, r10
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	df 90       	pop	r13
    1592:	cf 90       	pop	r12
    1594:	bf 90       	pop	r11
    1596:	af 90       	pop	r10
    1598:	08 95       	ret

0000159a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    159a:	4f 92       	push	r4
    159c:	5f 92       	push	r5
    159e:	6f 92       	push	r6
    15a0:	7f 92       	push	r7
    15a2:	8f 92       	push	r8
    15a4:	9f 92       	push	r9
    15a6:	af 92       	push	r10
    15a8:	bf 92       	push	r11
    15aa:	cf 92       	push	r12
    15ac:	df 92       	push	r13
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	ec 01       	movw	r28, r24
    15bc:	2b 01       	movw	r4, r22
    15be:	3a 01       	movw	r6, r20
    15c0:	58 01       	movw	r10, r16
    15c2:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    15c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c6:	80 ff       	sbrs	r24, 0
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    15ca:	68 94       	set
    15cc:	88 24       	eor	r8, r8
    15ce:	81 f8       	bld	r8, 1
    15d0:	91 2c       	mov	r9, r1
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    15d4:	81 2c       	mov	r8, r1
    15d6:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    15d8:	a1 14       	cp	r10, r1
    15da:	b1 04       	cpc	r11, r1
    15dc:	c1 04       	cpc	r12, r1
    15de:	d1 04       	cpc	r13, r1
    15e0:	39 f1       	breq	.+78     	; 0x1630 <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15e8:	ce 01       	movw	r24, r28
    15ea:	2b dd       	rcall	.-1450   	; 0x1042 <prvBytesInBuffer>
    15ec:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    15ee:	88 16       	cp	r8, r24
    15f0:	99 06       	cpc	r9, r25
    15f2:	40 f0       	brcs	.+16     	; 0x1604 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    15fe:	85 d7       	rcall	.+3850   	; 0x250a <xTaskGetCurrentTaskHandle>
    1600:	99 87       	std	Y+9, r25	; 0x09
    1602:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1608:	8e 14       	cp	r8, r14
    160a:	9f 04       	cpc	r9, r15
    160c:	a0 f0       	brcs	.+40     	; 0x1636 <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    160e:	e1 2c       	mov	r14, r1
    1610:	f1 2c       	mov	r15, r1
    1612:	00 e0       	ldi	r16, 0x00	; 0
    1614:	10 e0       	ldi	r17, 0x00	; 0
    1616:	98 01       	movw	r18, r16
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	ba 01       	movw	r22, r20
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1624:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1626:	18 86       	std	Y+8, r1	; 0x08
    1628:	ce 01       	movw	r24, r28
    162a:	0b dd       	rcall	.-1514   	; 0x1042 <prvBytesInBuffer>
    162c:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <xStreamBufferReceive+0x9c>
    1630:	ce 01       	movw	r24, r28
    1632:	07 dd       	rcall	.-1522   	; 0x1042 <prvBytesInBuffer>
    1634:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1636:	8e 14       	cp	r8, r14
    1638:	9f 04       	cpc	r9, r15
    163a:	e8 f4       	brcc	.+58     	; 0x1676 <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    163c:	84 01       	movw	r16, r8
    163e:	97 01       	movw	r18, r14
    1640:	a3 01       	movw	r20, r6
    1642:	b2 01       	movw	r22, r4
    1644:	ce 01       	movw	r24, r28
    1646:	fb dd       	rcall	.-1034   	; 0x123e <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1648:	6c 01       	movw	r12, r24
    164a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    164c:	b1 f0       	breq	.+44     	; 0x167a <xStreamBufferReceive+0xe0>
    164e:	c3 d2       	rcall	.+1414   	; 0x1bd6 <vTaskSuspendAll>
    1650:	8a 85       	ldd	r24, Y+10	; 0x0a
    1652:	9b 85       	ldd	r25, Y+11	; 0x0b
    1654:	89 2b       	or	r24, r25
    1656:	69 f0       	breq	.+26     	; 0x1672 <xStreamBufferReceive+0xd8>
    1658:	8a 85       	ldd	r24, Y+10	; 0x0a
    165a:	9b 85       	ldd	r25, Y+11	; 0x0b
    165c:	e1 2c       	mov	r14, r1
    165e:	f1 2c       	mov	r15, r1
    1660:	00 e0       	ldi	r16, 0x00	; 0
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	a9 01       	movw	r20, r18
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	0e 94 9a 14 	call	0x2934	; 0x2934 <xTaskGenericNotify>
    166e:	1b 86       	std	Y+11, r1	; 0x0b
    1670:	1a 86       	std	Y+10, r1	; 0x0a
    1672:	f1 d3       	rcall	.+2018   	; 0x1e56 <xTaskResumeAll>
    1674:	02 c0       	rjmp	.+4      	; 0x167a <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1676:	c1 2c       	mov	r12, r1
    1678:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    167a:	c6 01       	movw	r24, r12
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	bf 90       	pop	r11
    168e:	af 90       	pop	r10
    1690:	9f 90       	pop	r9
    1692:	8f 90       	pop	r8
    1694:	7f 90       	pop	r7
    1696:	6f 90       	pop	r6
    1698:	5f 90       	pop	r5
    169a:	4f 90       	pop	r4
    169c:	08 95       	ret

0000169e <prvResetNextTaskUnblockTime>:
    169e:	e0 91 6b 17 	lds	r30, 0x176B	; 0x80176b <pxDelayedTaskList>
    16a2:	f0 91 6c 17 	lds	r31, 0x176C	; 0x80176c <pxDelayedTaskList+0x1>
    16a6:	80 81       	ld	r24, Z
    16a8:	81 11       	cpse	r24, r1
    16aa:	0c c0       	rjmp	.+24     	; 0x16c4 <prvResetNextTaskUnblockTime+0x26>
    16ac:	8f ef       	ldi	r24, 0xFF	; 255
    16ae:	9f ef       	ldi	r25, 0xFF	; 255
    16b0:	dc 01       	movw	r26, r24
    16b2:	80 93 35 17 	sts	0x1735, r24	; 0x801735 <xNextTaskUnblockTime>
    16b6:	90 93 36 17 	sts	0x1736, r25	; 0x801736 <xNextTaskUnblockTime+0x1>
    16ba:	a0 93 37 17 	sts	0x1737, r26	; 0x801737 <xNextTaskUnblockTime+0x2>
    16be:	b0 93 38 17 	sts	0x1738, r27	; 0x801738 <xNextTaskUnblockTime+0x3>
    16c2:	08 95       	ret
    16c4:	e0 91 6b 17 	lds	r30, 0x176B	; 0x80176b <pxDelayedTaskList>
    16c8:	f0 91 6c 17 	lds	r31, 0x176C	; 0x80176c <pxDelayedTaskList+0x1>
    16cc:	07 80       	ldd	r0, Z+7	; 0x07
    16ce:	f0 85       	ldd	r31, Z+8	; 0x08
    16d0:	e0 2d       	mov	r30, r0
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	a2 81       	ldd	r26, Z+2	; 0x02
    16d8:	b3 81       	ldd	r27, Z+3	; 0x03
    16da:	80 93 35 17 	sts	0x1735, r24	; 0x801735 <xNextTaskUnblockTime>
    16de:	90 93 36 17 	sts	0x1736, r25	; 0x801736 <xNextTaskUnblockTime+0x1>
    16e2:	a0 93 37 17 	sts	0x1737, r26	; 0x801737 <xNextTaskUnblockTime+0x2>
    16e6:	b0 93 38 17 	sts	0x1738, r27	; 0x801738 <xNextTaskUnblockTime+0x3>
    16ea:	08 95       	ret

000016ec <prvDeleteTCB>:
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	ec 01       	movw	r28, r24
    16f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vPortFree>
    16fa:	ce 01       	movw	r24, r28
    16fc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vPortFree>
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <prvInitialiseNewTask>:
    1706:	4f 92       	push	r4
    1708:	5f 92       	push	r5
    170a:	6f 92       	push	r6
    170c:	7f 92       	push	r7
    170e:	8f 92       	push	r8
    1710:	9f 92       	push	r9
    1712:	af 92       	push	r10
    1714:	bf 92       	push	r11
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	2c 01       	movw	r4, r24
    1726:	5b 01       	movw	r10, r22
    1728:	4a 01       	movw	r8, r20
    172a:	39 01       	movw	r6, r18
    172c:	e6 01       	movw	r28, r12
    172e:	65 ea       	ldi	r22, 0xA5	; 165
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1736:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <memset>
    173a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173e:	21 e0       	ldi	r18, 0x01	; 1
    1740:	82 1a       	sub	r8, r18
    1742:	91 08       	sbc	r9, r1
    1744:	88 0e       	add	r8, r24
    1746:	99 1e       	adc	r9, r25
    1748:	a1 14       	cp	r10, r1
    174a:	b1 04       	cpc	r11, r1
    174c:	89 f4       	brne	.+34     	; 0x1770 <prvInitialiseNewTask+0x6a>
    174e:	15 c0       	rjmp	.+42     	; 0x177a <prvInitialiseNewTask+0x74>
    1750:	82 2f       	mov	r24, r18
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	f5 01       	movw	r30, r10
    1756:	e8 0f       	add	r30, r24
    1758:	f9 1f       	adc	r31, r25
    175a:	30 81       	ld	r19, Z
    175c:	de 01       	movw	r26, r28
    175e:	a8 0f       	add	r26, r24
    1760:	b9 1f       	adc	r27, r25
    1762:	5d 96       	adiw	r26, 0x1d	; 29
    1764:	3c 93       	st	X, r19
    1766:	80 81       	ld	r24, Z
    1768:	88 23       	and	r24, r24
    176a:	29 f0       	breq	.+10     	; 0x1776 <prvInitialiseNewTask+0x70>
    176c:	2f 5f       	subi	r18, 0xFF	; 255
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <prvInitialiseNewTask+0x6c>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	20 31       	cpi	r18, 0x10	; 16
    1774:	68 f3       	brcs	.-38     	; 0x1750 <prvInitialiseNewTask+0x4a>
    1776:	1c a6       	std	Y+44, r1	; 0x2c
    1778:	01 c0       	rjmp	.+2      	; 0x177c <prvInitialiseNewTask+0x76>
    177a:	1d 8e       	std	Y+29, r1	; 0x1d
    177c:	0a 30       	cpi	r16, 0x0A	; 10
    177e:	08 f0       	brcs	.+2      	; 0x1782 <prvInitialiseNewTask+0x7c>
    1780:	09 e0       	ldi	r16, 0x09	; 9
    1782:	0a 8f       	std	Y+26, r16	; 0x1a
    1784:	0d a7       	std	Y+45, r16	; 0x2d
    1786:	1e a6       	std	Y+46, r1	; 0x2e
    1788:	ce 01       	movw	r24, r28
    178a:	02 96       	adiw	r24, 0x02	; 2
    178c:	0e 94 23 03 	call	0x646	; 0x646 <vListInitialiseItem>
    1790:	ce 01       	movw	r24, r28
    1792:	0e 96       	adiw	r24, 0x0e	; 14
    1794:	0e 94 23 03 	call	0x646	; 0x646 <vListInitialiseItem>
    1798:	db 87       	std	Y+11, r29	; 0x0b
    179a:	ca 87       	std	Y+10, r28	; 0x0a
    179c:	8a e0       	ldi	r24, 0x0A	; 10
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a0 e0       	ldi	r26, 0x00	; 0
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	80 1b       	sub	r24, r16
    17a6:	91 09       	sbc	r25, r1
    17a8:	a1 09       	sbc	r26, r1
    17aa:	b1 09       	sbc	r27, r1
    17ac:	8e 87       	std	Y+14, r24	; 0x0e
    17ae:	9f 87       	std	Y+15, r25	; 0x0f
    17b0:	a8 8b       	std	Y+16, r26	; 0x10
    17b2:	b9 8b       	std	Y+17, r27	; 0x11
    17b4:	df 8b       	std	Y+23, r29	; 0x17
    17b6:	ce 8b       	std	Y+22, r28	; 0x16
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	fe 01       	movw	r30, r28
    17bc:	bf 96       	adiw	r30, 0x2f	; 47
    17be:	df 01       	movw	r26, r30
    17c0:	1d 92       	st	X+, r1
    17c2:	8a 95       	dec	r24
    17c4:	e9 f7       	brne	.-6      	; 0x17c0 <prvInitialiseNewTask+0xba>
    17c6:	1b aa       	std	Y+51, r1	; 0x33
    17c8:	a3 01       	movw	r20, r6
    17ca:	b2 01       	movw	r22, r4
    17cc:	c4 01       	movw	r24, r8
    17ce:	0e 94 97 03 	call	0x72e	; 0x72e <pxPortInitialiseStack>
    17d2:	99 83       	std	Y+1, r25	; 0x01
    17d4:	88 83       	st	Y, r24
    17d6:	e1 14       	cp	r14, r1
    17d8:	f1 04       	cpc	r15, r1
    17da:	19 f0       	breq	.+6      	; 0x17e2 <prvInitialiseNewTask+0xdc>
    17dc:	f7 01       	movw	r30, r14
    17de:	d1 83       	std	Z+1, r29	; 0x01
    17e0:	c0 83       	st	Z, r28
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	df 90       	pop	r13
    17ee:	cf 90       	pop	r12
    17f0:	bf 90       	pop	r11
    17f2:	af 90       	pop	r10
    17f4:	9f 90       	pop	r9
    17f6:	8f 90       	pop	r8
    17f8:	7f 90       	pop	r7
    17fa:	6f 90       	pop	r6
    17fc:	5f 90       	pop	r5
    17fe:	4f 90       	pop	r4
    1800:	08 95       	ret

00001802 <prvInitialiseTaskLists>:
    1802:	cf 93       	push	r28
    1804:	c0 e0       	ldi	r28, 0x00	; 0
    1806:	09 c0       	rjmp	.+18     	; 0x181a <prvInitialiseTaskLists+0x18>
    1808:	2b e0       	ldi	r18, 0x0B	; 11
    180a:	c2 9f       	mul	r28, r18
    180c:	c0 01       	movw	r24, r0
    180e:	11 24       	eor	r1, r1
    1810:	8d 57       	subi	r24, 0x7D	; 125
    1812:	98 4e       	sbci	r25, 0xE8	; 232
    1814:	0e 94 12 03 	call	0x624	; 0x624 <vListInitialise>
    1818:	cf 5f       	subi	r28, 0xFF	; 255
    181a:	ca 30       	cpi	r28, 0x0A	; 10
    181c:	a8 f3       	brcs	.-22     	; 0x1808 <prvInitialiseTaskLists+0x6>
    181e:	88 e7       	ldi	r24, 0x78	; 120
    1820:	97 e1       	ldi	r25, 0x17	; 23
    1822:	0e 94 12 03 	call	0x624	; 0x624 <vListInitialise>
    1826:	8d e6       	ldi	r24, 0x6D	; 109
    1828:	97 e1       	ldi	r25, 0x17	; 23
    182a:	0e 94 12 03 	call	0x624	; 0x624 <vListInitialise>
    182e:	8e e5       	ldi	r24, 0x5E	; 94
    1830:	97 e1       	ldi	r25, 0x17	; 23
    1832:	0e 94 12 03 	call	0x624	; 0x624 <vListInitialise>
    1836:	83 e5       	ldi	r24, 0x53	; 83
    1838:	97 e1       	ldi	r25, 0x17	; 23
    183a:	0e 94 12 03 	call	0x624	; 0x624 <vListInitialise>
    183e:	87 e4       	ldi	r24, 0x47	; 71
    1840:	97 e1       	ldi	r25, 0x17	; 23
    1842:	0e 94 12 03 	call	0x624	; 0x624 <vListInitialise>
    1846:	88 e7       	ldi	r24, 0x78	; 120
    1848:	97 e1       	ldi	r25, 0x17	; 23
    184a:	90 93 6c 17 	sts	0x176C, r25	; 0x80176c <pxDelayedTaskList+0x1>
    184e:	80 93 6b 17 	sts	0x176B, r24	; 0x80176b <pxDelayedTaskList>
    1852:	8d e6       	ldi	r24, 0x6D	; 109
    1854:	97 e1       	ldi	r25, 0x17	; 23
    1856:	90 93 6a 17 	sts	0x176A, r25	; 0x80176a <pxOverflowDelayedTaskList+0x1>
    185a:	80 93 69 17 	sts	0x1769, r24	; 0x801769 <pxOverflowDelayedTaskList>
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <prvAddNewTaskToReadyList>:
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	ec 01       	movw	r28, r24
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	0f 92       	push	r0
    186e:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <uxCurrentNumberOfTasks>
    1872:	8f 5f       	subi	r24, 0xFF	; 255
    1874:	80 93 46 17 	sts	0x1746, r24	; 0x801746 <uxCurrentNumberOfTasks>
    1878:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    187c:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    1880:	89 2b       	or	r24, r25
    1882:	51 f4       	brne	.+20     	; 0x1898 <prvAddNewTaskToReadyList+0x36>
    1884:	d0 93 f2 17 	sts	0x17F2, r29	; 0x8017f2 <pxCurrentTCB+0x1>
    1888:	c0 93 f1 17 	sts	0x17F1, r28	; 0x8017f1 <pxCurrentTCB>
    188c:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <uxCurrentNumberOfTasks>
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	91 f4       	brne	.+36     	; 0x18b8 <prvAddNewTaskToReadyList+0x56>
    1894:	b6 df       	rcall	.-148    	; 0x1802 <prvInitialiseTaskLists>
    1896:	10 c0       	rjmp	.+32     	; 0x18b8 <prvAddNewTaskToReadyList+0x56>
    1898:	80 91 40 17 	lds	r24, 0x1740	; 0x801740 <xSchedulerRunning>
    189c:	81 11       	cpse	r24, r1
    189e:	0c c0       	rjmp	.+24     	; 0x18b8 <prvAddNewTaskToReadyList+0x56>
    18a0:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    18a4:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    18a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    18aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18ac:	89 17       	cp	r24, r25
    18ae:	20 f0       	brcs	.+8      	; 0x18b8 <prvAddNewTaskToReadyList+0x56>
    18b0:	d0 93 f2 17 	sts	0x17F2, r29	; 0x8017f2 <pxCurrentTCB+0x1>
    18b4:	c0 93 f1 17 	sts	0x17F1, r28	; 0x8017f1 <pxCurrentTCB>
    18b8:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <uxTaskNumber>
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	80 93 39 17 	sts	0x1739, r24	; 0x801739 <uxTaskNumber>
    18c2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    18c4:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <uxTopReadyPriority>
    18c8:	8e 17       	cp	r24, r30
    18ca:	10 f4       	brcc	.+4      	; 0x18d0 <prvAddNewTaskToReadyList+0x6e>
    18cc:	e0 93 41 17 	sts	0x1741, r30	; 0x801741 <uxTopReadyPriority>
    18d0:	8b e0       	ldi	r24, 0x0B	; 11
    18d2:	8e 9f       	mul	r24, r30
    18d4:	f0 01       	movw	r30, r0
    18d6:	11 24       	eor	r1, r1
    18d8:	ed 57       	subi	r30, 0x7D	; 125
    18da:	f8 4e       	sbci	r31, 0xE8	; 232
    18dc:	01 80       	ldd	r0, Z+1	; 0x01
    18de:	f2 81       	ldd	r31, Z+2	; 0x02
    18e0:	e0 2d       	mov	r30, r0
    18e2:	ff 83       	std	Y+7, r31	; 0x07
    18e4:	ee 83       	std	Y+6, r30	; 0x06
    18e6:	26 81       	ldd	r18, Z+6	; 0x06
    18e8:	37 81       	ldd	r19, Z+7	; 0x07
    18ea:	39 87       	std	Y+9, r19	; 0x09
    18ec:	28 87       	std	Y+8, r18	; 0x08
    18ee:	a6 81       	ldd	r26, Z+6	; 0x06
    18f0:	b7 81       	ldd	r27, Z+7	; 0x07
    18f2:	9e 01       	movw	r18, r28
    18f4:	2e 5f       	subi	r18, 0xFE	; 254
    18f6:	3f 4f       	sbci	r19, 0xFF	; 255
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	3c 93       	st	X, r19
    18fc:	2e 93       	st	-X, r18
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	37 83       	std	Z+7, r19	; 0x07
    1902:	26 83       	std	Z+6, r18	; 0x06
    1904:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1906:	8e 9f       	mul	r24, r30
    1908:	f0 01       	movw	r30, r0
    190a:	11 24       	eor	r1, r1
    190c:	ed 57       	subi	r30, 0x7D	; 125
    190e:	f8 4e       	sbci	r31, 0xE8	; 232
    1910:	fd 87       	std	Y+13, r31	; 0x0d
    1912:	ec 87       	std	Y+12, r30	; 0x0c
    1914:	80 81       	ld	r24, Z
    1916:	8f 5f       	subi	r24, 0xFF	; 255
    1918:	80 83       	st	Z, r24
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	80 91 40 17 	lds	r24, 0x1740	; 0x801740 <xSchedulerRunning>
    1922:	88 23       	and	r24, r24
    1924:	51 f0       	breq	.+20     	; 0x193a <prvAddNewTaskToReadyList+0xd8>
    1926:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    192a:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    192e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1930:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1932:	98 17       	cp	r25, r24
    1934:	10 f4       	brcc	.+4      	; 0x193a <prvAddNewTaskToReadyList+0xd8>
    1936:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vPortYield>
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <prvCheckTasksWaitingTermination>:
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	1b c0       	rjmp	.+54     	; 0x197c <prvCheckTasksWaitingTermination+0x3c>
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	0f 92       	push	r0
    194c:	e0 91 5a 17 	lds	r30, 0x175A	; 0x80175a <xTasksWaitingTermination+0x7>
    1950:	f0 91 5b 17 	lds	r31, 0x175B	; 0x80175b <xTasksWaitingTermination+0x8>
    1954:	c0 85       	ldd	r28, Z+8	; 0x08
    1956:	d1 85       	ldd	r29, Z+9	; 0x09
    1958:	ce 01       	movw	r24, r28
    195a:	02 96       	adiw	r24, 0x02	; 2
    195c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
    1960:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <uxCurrentNumberOfTasks>
    1964:	81 50       	subi	r24, 0x01	; 1
    1966:	80 93 46 17 	sts	0x1746, r24	; 0x801746 <uxCurrentNumberOfTasks>
    196a:	80 91 52 17 	lds	r24, 0x1752	; 0x801752 <uxDeletedTasksWaitingCleanUp>
    196e:	81 50       	subi	r24, 0x01	; 1
    1970:	80 93 52 17 	sts	0x1752, r24	; 0x801752 <uxDeletedTasksWaitingCleanUp>
    1974:	0f 90       	pop	r0
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	ce 01       	movw	r24, r28
    197a:	b8 de       	rcall	.-656    	; 0x16ec <prvDeleteTCB>
    197c:	80 91 52 17 	lds	r24, 0x1752	; 0x801752 <uxDeletedTasksWaitingCleanUp>
    1980:	81 11       	cpse	r24, r1
    1982:	e1 cf       	rjmp	.-62     	; 0x1946 <prvCheckTasksWaitingTermination+0x6>
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	08 95       	ret

0000198a <prvAddCurrentTaskToDelayedList>:
    198a:	8f 92       	push	r8
    198c:	9f 92       	push	r9
    198e:	af 92       	push	r10
    1990:	bf 92       	push	r11
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	6b 01       	movw	r12, r22
    19a0:	7c 01       	movw	r14, r24
    19a2:	c4 2f       	mov	r28, r20
    19a4:	80 90 42 17 	lds	r8, 0x1742	; 0x801742 <xTickCount>
    19a8:	90 90 43 17 	lds	r9, 0x1743	; 0x801743 <xTickCount+0x1>
    19ac:	a0 90 44 17 	lds	r10, 0x1744	; 0x801744 <xTickCount+0x2>
    19b0:	b0 90 45 17 	lds	r11, 0x1745	; 0x801745 <xTickCount+0x3>
    19b4:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    19b8:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    19bc:	02 96       	adiw	r24, 0x02	; 2
    19be:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	c8 16       	cp	r12, r24
    19c6:	d8 06       	cpc	r13, r24
    19c8:	e8 06       	cpc	r14, r24
    19ca:	f8 06       	cpc	r15, r24
    19cc:	b1 f5       	brne	.+108    	; 0x1a3a <prvAddCurrentTaskToDelayedList+0xb0>
    19ce:	cc 23       	and	r28, r28
    19d0:	a1 f1       	breq	.+104    	; 0x1a3a <prvAddCurrentTaskToDelayedList+0xb0>
    19d2:	e7 e4       	ldi	r30, 0x47	; 71
    19d4:	f7 e1       	ldi	r31, 0x17	; 23
    19d6:	a1 81       	ldd	r26, Z+1	; 0x01
    19d8:	b2 81       	ldd	r27, Z+2	; 0x02
    19da:	c0 91 f1 17 	lds	r28, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    19de:	d0 91 f2 17 	lds	r29, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    19e2:	bf 83       	std	Y+7, r27	; 0x07
    19e4:	ae 83       	std	Y+6, r26	; 0x06
    19e6:	c0 91 f1 17 	lds	r28, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    19ea:	d0 91 f2 17 	lds	r29, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    19ee:	16 96       	adiw	r26, 0x06	; 6
    19f0:	8d 91       	ld	r24, X+
    19f2:	9c 91       	ld	r25, X
    19f4:	17 97       	sbiw	r26, 0x07	; 7
    19f6:	99 87       	std	Y+9, r25	; 0x09
    19f8:	88 87       	std	Y+8, r24	; 0x08
    19fa:	16 96       	adiw	r26, 0x06	; 6
    19fc:	cd 91       	ld	r28, X+
    19fe:	dc 91       	ld	r29, X
    1a00:	17 97       	sbiw	r26, 0x07	; 7
    1a02:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    1a06:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    1a0a:	02 96       	adiw	r24, 0x02	; 2
    1a0c:	9d 83       	std	Y+5, r25	; 0x05
    1a0e:	8c 83       	std	Y+4, r24	; 0x04
    1a10:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    1a14:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    1a18:	02 96       	adiw	r24, 0x02	; 2
    1a1a:	17 96       	adiw	r26, 0x07	; 7
    1a1c:	9c 93       	st	X, r25
    1a1e:	8e 93       	st	-X, r24
    1a20:	16 97       	sbiw	r26, 0x06	; 6
    1a22:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    1a26:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    1a2a:	1d 96       	adiw	r26, 0x0d	; 13
    1a2c:	fc 93       	st	X, r31
    1a2e:	ee 93       	st	-X, r30
    1a30:	1c 97       	sbiw	r26, 0x0c	; 12
    1a32:	80 81       	ld	r24, Z
    1a34:	8f 5f       	subi	r24, 0xFF	; 255
    1a36:	80 83       	st	Z, r24
    1a38:	3f c0       	rjmp	.+126    	; 0x1ab8 <prvAddCurrentTaskToDelayedList+0x12e>
    1a3a:	c8 0c       	add	r12, r8
    1a3c:	d9 1c       	adc	r13, r9
    1a3e:	ea 1c       	adc	r14, r10
    1a40:	fb 1c       	adc	r15, r11
    1a42:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    1a46:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    1a4a:	c2 82       	std	Z+2, r12	; 0x02
    1a4c:	d3 82       	std	Z+3, r13	; 0x03
    1a4e:	e4 82       	std	Z+4, r14	; 0x04
    1a50:	f5 82       	std	Z+5, r15	; 0x05
    1a52:	c8 14       	cp	r12, r8
    1a54:	d9 04       	cpc	r13, r9
    1a56:	ea 04       	cpc	r14, r10
    1a58:	fb 04       	cpc	r15, r11
    1a5a:	68 f4       	brcc	.+26     	; 0x1a76 <prvAddCurrentTaskToDelayedList+0xec>
    1a5c:	60 91 f1 17 	lds	r22, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    1a60:	70 91 f2 17 	lds	r23, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    1a64:	80 91 69 17 	lds	r24, 0x1769	; 0x801769 <pxOverflowDelayedTaskList>
    1a68:	90 91 6a 17 	lds	r25, 0x176A	; 0x80176a <pxOverflowDelayedTaskList+0x1>
    1a6c:	6e 5f       	subi	r22, 0xFE	; 254
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	0e 94 27 03 	call	0x64e	; 0x64e <vListInsert>
    1a74:	21 c0       	rjmp	.+66     	; 0x1ab8 <prvAddCurrentTaskToDelayedList+0x12e>
    1a76:	60 91 f1 17 	lds	r22, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    1a7a:	70 91 f2 17 	lds	r23, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    1a7e:	80 91 6b 17 	lds	r24, 0x176B	; 0x80176b <pxDelayedTaskList>
    1a82:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <pxDelayedTaskList+0x1>
    1a86:	6e 5f       	subi	r22, 0xFE	; 254
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	0e 94 27 03 	call	0x64e	; 0x64e <vListInsert>
    1a8e:	80 91 35 17 	lds	r24, 0x1735	; 0x801735 <xNextTaskUnblockTime>
    1a92:	90 91 36 17 	lds	r25, 0x1736	; 0x801736 <xNextTaskUnblockTime+0x1>
    1a96:	a0 91 37 17 	lds	r26, 0x1737	; 0x801737 <xNextTaskUnblockTime+0x2>
    1a9a:	b0 91 38 17 	lds	r27, 0x1738	; 0x801738 <xNextTaskUnblockTime+0x3>
    1a9e:	c8 16       	cp	r12, r24
    1aa0:	d9 06       	cpc	r13, r25
    1aa2:	ea 06       	cpc	r14, r26
    1aa4:	fb 06       	cpc	r15, r27
    1aa6:	40 f4       	brcc	.+16     	; 0x1ab8 <prvAddCurrentTaskToDelayedList+0x12e>
    1aa8:	c0 92 35 17 	sts	0x1735, r12	; 0x801735 <xNextTaskUnblockTime>
    1aac:	d0 92 36 17 	sts	0x1736, r13	; 0x801736 <xNextTaskUnblockTime+0x1>
    1ab0:	e0 92 37 17 	sts	0x1737, r14	; 0x801737 <xNextTaskUnblockTime+0x2>
    1ab4:	f0 92 38 17 	sts	0x1738, r15	; 0x801738 <xNextTaskUnblockTime+0x3>
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	df 90       	pop	r13
    1ac2:	cf 90       	pop	r12
    1ac4:	bf 90       	pop	r11
    1ac6:	af 90       	pop	r10
    1ac8:	9f 90       	pop	r9
    1aca:	8f 90       	pop	r8
    1acc:	08 95       	ret

00001ace <xTaskCreate>:
    1ace:	2f 92       	push	r2
    1ad0:	3f 92       	push	r3
    1ad2:	4f 92       	push	r4
    1ad4:	5f 92       	push	r5
    1ad6:	6f 92       	push	r6
    1ad8:	7f 92       	push	r7
    1ada:	8f 92       	push	r8
    1adc:	9f 92       	push	r9
    1ade:	af 92       	push	r10
    1ae0:	bf 92       	push	r11
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	0f 93       	push	r16
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	3c 01       	movw	r6, r24
    1af2:	1b 01       	movw	r2, r22
    1af4:	4a 01       	movw	r8, r20
    1af6:	29 01       	movw	r4, r18
    1af8:	ca 01       	movw	r24, r20
    1afa:	0e 94 27 02 	call	0x44e	; 0x44e <pvPortMalloc>
    1afe:	6c 01       	movw	r12, r24
    1b00:	89 2b       	or	r24, r25
    1b02:	71 f0       	breq	.+28     	; 0x1b20 <xTaskCreate+0x52>
    1b04:	84 e3       	ldi	r24, 0x34	; 52
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 27 02 	call	0x44e	; 0x44e <pvPortMalloc>
    1b0c:	ec 01       	movw	r28, r24
    1b0e:	89 2b       	or	r24, r25
    1b10:	19 f0       	breq	.+6      	; 0x1b18 <xTaskCreate+0x4a>
    1b12:	dc 8e       	std	Y+28, r13	; 0x1c
    1b14:	cb 8e       	std	Y+27, r12	; 0x1b
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <xTaskCreate+0x56>
    1b18:	c6 01       	movw	r24, r12
    1b1a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vPortFree>
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <xTaskCreate+0x56>
    1b20:	c0 e0       	ldi	r28, 0x00	; 0
    1b22:	d0 e0       	ldi	r29, 0x00	; 0
    1b24:	20 97       	sbiw	r28, 0x00	; 0
    1b26:	61 f0       	breq	.+24     	; 0x1b40 <xTaskCreate+0x72>
    1b28:	a1 2c       	mov	r10, r1
    1b2a:	b1 2c       	mov	r11, r1
    1b2c:	6e 01       	movw	r12, r28
    1b2e:	92 01       	movw	r18, r4
    1b30:	a4 01       	movw	r20, r8
    1b32:	b1 01       	movw	r22, r2
    1b34:	c3 01       	movw	r24, r6
    1b36:	e7 dd       	rcall	.-1074   	; 0x1706 <prvInitialiseNewTask>
    1b38:	ce 01       	movw	r24, r28
    1b3a:	93 de       	rcall	.-730    	; 0x1862 <prvAddNewTaskToReadyList>
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <xTaskCreate+0x74>
    1b40:	8f ef       	ldi	r24, 0xFF	; 255
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	bf 90       	pop	r11
    1b52:	af 90       	pop	r10
    1b54:	9f 90       	pop	r9
    1b56:	8f 90       	pop	r8
    1b58:	7f 90       	pop	r7
    1b5a:	6f 90       	pop	r6
    1b5c:	5f 90       	pop	r5
    1b5e:	4f 90       	pop	r4
    1b60:	3f 90       	pop	r3
    1b62:	2f 90       	pop	r2
    1b64:	08 95       	ret

00001b66 <vTaskStartScheduler>:
    1b66:	ef 92       	push	r14
    1b68:	ff 92       	push	r15
    1b6a:	0f 93       	push	r16
    1b6c:	0f 2e       	mov	r0, r31
    1b6e:	f3 e3       	ldi	r31, 0x33	; 51
    1b70:	ef 2e       	mov	r14, r31
    1b72:	f7 e1       	ldi	r31, 0x17	; 23
    1b74:	ff 2e       	mov	r15, r31
    1b76:	f0 2d       	mov	r31, r0
    1b78:	00 e0       	ldi	r16, 0x00	; 0
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 ec       	ldi	r20, 0xC0	; 192
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	6a e9       	ldi	r22, 0x9A	; 154
    1b84:	72 e0       	ldi	r23, 0x02	; 2
    1b86:	8d ec       	ldi	r24, 0xCD	; 205
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a1 df       	rcall	.-190    	; 0x1ace <xTaskCreate>
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	11 f4       	brne	.+4      	; 0x1b94 <vTaskStartScheduler+0x2e>
    1b90:	0e 94 57 17 	call	0x2eae	; 0x2eae <xTimerCreateTimerTask>
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	c9 f4       	brne	.+50     	; 0x1bca <vTaskStartScheduler+0x64>
    1b98:	f8 94       	cli
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	9f ef       	ldi	r25, 0xFF	; 255
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	80 93 35 17 	sts	0x1735, r24	; 0x801735 <xNextTaskUnblockTime>
    1ba4:	90 93 36 17 	sts	0x1736, r25	; 0x801736 <xNextTaskUnblockTime+0x1>
    1ba8:	a0 93 37 17 	sts	0x1737, r26	; 0x801737 <xNextTaskUnblockTime+0x2>
    1bac:	b0 93 38 17 	sts	0x1738, r27	; 0x801738 <xNextTaskUnblockTime+0x3>
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	80 93 40 17 	sts	0x1740, r24	; 0x801740 <xSchedulerRunning>
    1bb6:	10 92 42 17 	sts	0x1742, r1	; 0x801742 <xTickCount>
    1bba:	10 92 43 17 	sts	0x1743, r1	; 0x801743 <xTickCount+0x1>
    1bbe:	10 92 44 17 	sts	0x1744, r1	; 0x801744 <xTickCount+0x2>
    1bc2:	10 92 45 17 	sts	0x1745, r1	; 0x801745 <xTickCount+0x3>
    1bc6:	0e 94 ae 03 	call	0x75c	; 0x75c <xPortStartScheduler>
    1bca:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	08 95       	ret

00001bd6 <vTaskSuspendAll>:
    1bd6:	80 91 32 17 	lds	r24, 0x1732	; 0x801732 <uxSchedulerSuspended>
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	80 93 32 17 	sts	0x1732, r24	; 0x801732 <uxSchedulerSuspended>
    1be0:	08 95       	ret

00001be2 <xTaskGetTickCount>:
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	0f 92       	push	r0
    1be8:	60 91 42 17 	lds	r22, 0x1742	; 0x801742 <xTickCount>
    1bec:	70 91 43 17 	lds	r23, 0x1743	; 0x801743 <xTickCount+0x1>
    1bf0:	80 91 44 17 	lds	r24, 0x1744	; 0x801744 <xTickCount+0x2>
    1bf4:	90 91 45 17 	lds	r25, 0x1745	; 0x801745 <xTickCount+0x3>
    1bf8:	0f 90       	pop	r0
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	08 95       	ret

00001bfe <xTaskIncrementTick>:
    1bfe:	cf 92       	push	r12
    1c00:	df 92       	push	r13
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	80 91 32 17 	lds	r24, 0x1732	; 0x801732 <uxSchedulerSuspended>
    1c0e:	81 11       	cpse	r24, r1
    1c10:	05 c1       	rjmp	.+522    	; 0x1e1c <xTaskIncrementTick+0x21e>
    1c12:	c0 90 42 17 	lds	r12, 0x1742	; 0x801742 <xTickCount>
    1c16:	d0 90 43 17 	lds	r13, 0x1743	; 0x801743 <xTickCount+0x1>
    1c1a:	e0 90 44 17 	lds	r14, 0x1744	; 0x801744 <xTickCount+0x2>
    1c1e:	f0 90 45 17 	lds	r15, 0x1745	; 0x801745 <xTickCount+0x3>
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	c8 1a       	sub	r12, r24
    1c26:	d8 0a       	sbc	r13, r24
    1c28:	e8 0a       	sbc	r14, r24
    1c2a:	f8 0a       	sbc	r15, r24
    1c2c:	c0 92 42 17 	sts	0x1742, r12	; 0x801742 <xTickCount>
    1c30:	d0 92 43 17 	sts	0x1743, r13	; 0x801743 <xTickCount+0x1>
    1c34:	e0 92 44 17 	sts	0x1744, r14	; 0x801744 <xTickCount+0x2>
    1c38:	f0 92 45 17 	sts	0x1745, r15	; 0x801745 <xTickCount+0x3>
    1c3c:	c1 14       	cp	r12, r1
    1c3e:	d1 04       	cpc	r13, r1
    1c40:	e1 04       	cpc	r14, r1
    1c42:	f1 04       	cpc	r15, r1
    1c44:	b1 f4       	brne	.+44     	; 0x1c72 <xTaskIncrementTick+0x74>
    1c46:	80 91 6b 17 	lds	r24, 0x176B	; 0x80176b <pxDelayedTaskList>
    1c4a:	90 91 6c 17 	lds	r25, 0x176C	; 0x80176c <pxDelayedTaskList+0x1>
    1c4e:	20 91 69 17 	lds	r18, 0x1769	; 0x801769 <pxOverflowDelayedTaskList>
    1c52:	30 91 6a 17 	lds	r19, 0x176A	; 0x80176a <pxOverflowDelayedTaskList+0x1>
    1c56:	30 93 6c 17 	sts	0x176C, r19	; 0x80176c <pxDelayedTaskList+0x1>
    1c5a:	20 93 6b 17 	sts	0x176B, r18	; 0x80176b <pxDelayedTaskList>
    1c5e:	90 93 6a 17 	sts	0x176A, r25	; 0x80176a <pxOverflowDelayedTaskList+0x1>
    1c62:	80 93 69 17 	sts	0x1769, r24	; 0x801769 <pxOverflowDelayedTaskList>
    1c66:	80 91 3a 17 	lds	r24, 0x173A	; 0x80173a <xNumOfOverflows>
    1c6a:	8f 5f       	subi	r24, 0xFF	; 255
    1c6c:	80 93 3a 17 	sts	0x173A, r24	; 0x80173a <xNumOfOverflows>
    1c70:	16 dd       	rcall	.-1492   	; 0x169e <prvResetNextTaskUnblockTime>
    1c72:	80 91 35 17 	lds	r24, 0x1735	; 0x801735 <xNextTaskUnblockTime>
    1c76:	90 91 36 17 	lds	r25, 0x1736	; 0x801736 <xNextTaskUnblockTime+0x1>
    1c7a:	a0 91 37 17 	lds	r26, 0x1737	; 0x801737 <xNextTaskUnblockTime+0x2>
    1c7e:	b0 91 38 17 	lds	r27, 0x1738	; 0x801738 <xNextTaskUnblockTime+0x3>
    1c82:	c8 16       	cp	r12, r24
    1c84:	d9 06       	cpc	r13, r25
    1c86:	ea 06       	cpc	r14, r26
    1c88:	fb 06       	cpc	r15, r27
    1c8a:	20 f4       	brcc	.+8      	; 0x1c94 <xTaskIncrementTick+0x96>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	b2 c0       	rjmp	.+356    	; 0x1df4 <xTaskIncrementTick+0x1f6>
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <xTaskIncrementTick+0x98>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	e0 91 6b 17 	lds	r30, 0x176B	; 0x80176b <pxDelayedTaskList>
    1c9a:	f0 91 6c 17 	lds	r31, 0x176C	; 0x80176c <pxDelayedTaskList+0x1>
    1c9e:	90 81       	ld	r25, Z
    1ca0:	91 11       	cpse	r25, r1
    1ca2:	0c c0       	rjmp	.+24     	; 0x1cbc <xTaskIncrementTick+0xbe>
    1ca4:	4f ef       	ldi	r20, 0xFF	; 255
    1ca6:	5f ef       	ldi	r21, 0xFF	; 255
    1ca8:	ba 01       	movw	r22, r20
    1caa:	40 93 35 17 	sts	0x1735, r20	; 0x801735 <xNextTaskUnblockTime>
    1cae:	50 93 36 17 	sts	0x1736, r21	; 0x801736 <xNextTaskUnblockTime+0x1>
    1cb2:	60 93 37 17 	sts	0x1737, r22	; 0x801737 <xNextTaskUnblockTime+0x2>
    1cb6:	70 93 38 17 	sts	0x1738, r23	; 0x801738 <xNextTaskUnblockTime+0x3>
    1cba:	9c c0       	rjmp	.+312    	; 0x1df4 <xTaskIncrementTick+0x1f6>
    1cbc:	e0 91 6b 17 	lds	r30, 0x176B	; 0x80176b <pxDelayedTaskList>
    1cc0:	f0 91 6c 17 	lds	r31, 0x176C	; 0x80176c <pxDelayedTaskList+0x1>
    1cc4:	07 80       	ldd	r0, Z+7	; 0x07
    1cc6:	f0 85       	ldd	r31, Z+8	; 0x08
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	00 84       	ldd	r0, Z+8	; 0x08
    1ccc:	f1 85       	ldd	r31, Z+9	; 0x09
    1cce:	e0 2d       	mov	r30, r0
    1cd0:	42 81       	ldd	r20, Z+2	; 0x02
    1cd2:	53 81       	ldd	r21, Z+3	; 0x03
    1cd4:	64 81       	ldd	r22, Z+4	; 0x04
    1cd6:	75 81       	ldd	r23, Z+5	; 0x05
    1cd8:	c4 16       	cp	r12, r20
    1cda:	d5 06       	cpc	r13, r21
    1cdc:	e6 06       	cpc	r14, r22
    1cde:	f7 06       	cpc	r15, r23
    1ce0:	48 f4       	brcc	.+18     	; 0x1cf4 <xTaskIncrementTick+0xf6>
    1ce2:	40 93 35 17 	sts	0x1735, r20	; 0x801735 <xNextTaskUnblockTime>
    1ce6:	50 93 36 17 	sts	0x1736, r21	; 0x801736 <xNextTaskUnblockTime+0x1>
    1cea:	60 93 37 17 	sts	0x1737, r22	; 0x801737 <xNextTaskUnblockTime+0x2>
    1cee:	70 93 38 17 	sts	0x1738, r23	; 0x801738 <xNextTaskUnblockTime+0x3>
    1cf2:	80 c0       	rjmp	.+256    	; 0x1df4 <xTaskIncrementTick+0x1f6>
    1cf4:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cf6:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cf8:	c6 81       	ldd	r28, Z+6	; 0x06
    1cfa:	d7 81       	ldd	r29, Z+7	; 0x07
    1cfc:	20 85       	ldd	r18, Z+8	; 0x08
    1cfe:	31 85       	ldd	r19, Z+9	; 0x09
    1d00:	3f 83       	std	Y+7, r19	; 0x07
    1d02:	2e 83       	std	Y+6, r18	; 0x06
    1d04:	c0 85       	ldd	r28, Z+8	; 0x08
    1d06:	d1 85       	ldd	r29, Z+9	; 0x09
    1d08:	26 81       	ldd	r18, Z+6	; 0x06
    1d0a:	37 81       	ldd	r19, Z+7	; 0x07
    1d0c:	3d 83       	std	Y+5, r19	; 0x05
    1d0e:	2c 83       	std	Y+4, r18	; 0x04
    1d10:	11 96       	adiw	r26, 0x01	; 1
    1d12:	4d 91       	ld	r20, X+
    1d14:	5c 91       	ld	r21, X
    1d16:	12 97       	sbiw	r26, 0x02	; 2
    1d18:	9f 01       	movw	r18, r30
    1d1a:	2e 5f       	subi	r18, 0xFE	; 254
    1d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1e:	42 17       	cp	r20, r18
    1d20:	53 07       	cpc	r21, r19
    1d22:	31 f4       	brne	.+12     	; 0x1d30 <xTaskIncrementTick+0x132>
    1d24:	40 85       	ldd	r20, Z+8	; 0x08
    1d26:	51 85       	ldd	r21, Z+9	; 0x09
    1d28:	12 96       	adiw	r26, 0x02	; 2
    1d2a:	5c 93       	st	X, r21
    1d2c:	4e 93       	st	-X, r20
    1d2e:	11 97       	sbiw	r26, 0x01	; 1
    1d30:	15 86       	std	Z+13, r1	; 0x0d
    1d32:	14 86       	std	Z+12, r1	; 0x0c
    1d34:	9c 91       	ld	r25, X
    1d36:	91 50       	subi	r25, 0x01	; 1
    1d38:	9c 93       	st	X, r25
    1d3a:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d3c:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d3e:	10 97       	sbiw	r26, 0x00	; 0
    1d40:	09 f1       	breq	.+66     	; 0x1d84 <xTaskIncrementTick+0x186>
    1d42:	c2 89       	ldd	r28, Z+18	; 0x12
    1d44:	d3 89       	ldd	r29, Z+19	; 0x13
    1d46:	44 89       	ldd	r20, Z+20	; 0x14
    1d48:	55 89       	ldd	r21, Z+21	; 0x15
    1d4a:	5f 83       	std	Y+7, r21	; 0x07
    1d4c:	4e 83       	std	Y+6, r20	; 0x06
    1d4e:	c4 89       	ldd	r28, Z+20	; 0x14
    1d50:	d5 89       	ldd	r29, Z+21	; 0x15
    1d52:	42 89       	ldd	r20, Z+18	; 0x12
    1d54:	53 89       	ldd	r21, Z+19	; 0x13
    1d56:	5d 83       	std	Y+5, r21	; 0x05
    1d58:	4c 83       	std	Y+4, r20	; 0x04
    1d5a:	11 96       	adiw	r26, 0x01	; 1
    1d5c:	6d 91       	ld	r22, X+
    1d5e:	7c 91       	ld	r23, X
    1d60:	12 97       	sbiw	r26, 0x02	; 2
    1d62:	af 01       	movw	r20, r30
    1d64:	42 5f       	subi	r20, 0xF2	; 242
    1d66:	5f 4f       	sbci	r21, 0xFF	; 255
    1d68:	64 17       	cp	r22, r20
    1d6a:	75 07       	cpc	r23, r21
    1d6c:	31 f4       	brne	.+12     	; 0x1d7a <xTaskIncrementTick+0x17c>
    1d6e:	44 89       	ldd	r20, Z+20	; 0x14
    1d70:	55 89       	ldd	r21, Z+21	; 0x15
    1d72:	12 96       	adiw	r26, 0x02	; 2
    1d74:	5c 93       	st	X, r21
    1d76:	4e 93       	st	-X, r20
    1d78:	11 97       	sbiw	r26, 0x01	; 1
    1d7a:	11 8e       	std	Z+25, r1	; 0x19
    1d7c:	10 8e       	std	Z+24, r1	; 0x18
    1d7e:	9c 91       	ld	r25, X
    1d80:	91 50       	subi	r25, 0x01	; 1
    1d82:	9c 93       	st	X, r25
    1d84:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d86:	90 91 41 17 	lds	r25, 0x1741	; 0x801741 <uxTopReadyPriority>
    1d8a:	9a 17       	cp	r25, r26
    1d8c:	10 f4       	brcc	.+4      	; 0x1d92 <xTaskIncrementTick+0x194>
    1d8e:	a0 93 41 17 	sts	0x1741, r26	; 0x801741 <uxTopReadyPriority>
    1d92:	9b e0       	ldi	r25, 0x0B	; 11
    1d94:	9a 9f       	mul	r25, r26
    1d96:	d0 01       	movw	r26, r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	ad 57       	subi	r26, 0x7D	; 125
    1d9c:	b8 4e       	sbci	r27, 0xE8	; 232
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	0d 90       	ld	r0, X+
    1da2:	bc 91       	ld	r27, X
    1da4:	a0 2d       	mov	r26, r0
    1da6:	b7 83       	std	Z+7, r27	; 0x07
    1da8:	a6 83       	std	Z+6, r26	; 0x06
    1daa:	16 96       	adiw	r26, 0x06	; 6
    1dac:	4d 91       	ld	r20, X+
    1dae:	5c 91       	ld	r21, X
    1db0:	17 97       	sbiw	r26, 0x07	; 7
    1db2:	51 87       	std	Z+9, r21	; 0x09
    1db4:	40 87       	std	Z+8, r20	; 0x08
    1db6:	16 96       	adiw	r26, 0x06	; 6
    1db8:	cd 91       	ld	r28, X+
    1dba:	dc 91       	ld	r29, X
    1dbc:	17 97       	sbiw	r26, 0x07	; 7
    1dbe:	3d 83       	std	Y+5, r19	; 0x05
    1dc0:	2c 83       	std	Y+4, r18	; 0x04
    1dc2:	17 96       	adiw	r26, 0x07	; 7
    1dc4:	3c 93       	st	X, r19
    1dc6:	2e 93       	st	-X, r18
    1dc8:	16 97       	sbiw	r26, 0x06	; 6
    1dca:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1dcc:	9a 9f       	mul	r25, r26
    1dce:	d0 01       	movw	r26, r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	ad 57       	subi	r26, 0x7D	; 125
    1dd4:	b8 4e       	sbci	r27, 0xE8	; 232
    1dd6:	b5 87       	std	Z+13, r27	; 0x0d
    1dd8:	a4 87       	std	Z+12, r26	; 0x0c
    1dda:	9c 91       	ld	r25, X
    1ddc:	9f 5f       	subi	r25, 0xFF	; 255
    1dde:	9c 93       	st	X, r25
    1de0:	22 8d       	ldd	r18, Z+26	; 0x1a
    1de2:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    1de6:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    1dea:	92 8d       	ldd	r25, Z+26	; 0x1a
    1dec:	29 17       	cp	r18, r25
    1dee:	08 f0       	brcs	.+2      	; 0x1df2 <xTaskIncrementTick+0x1f4>
    1df0:	4f cf       	rjmp	.-354    	; 0x1c90 <xTaskIncrementTick+0x92>
    1df2:	51 cf       	rjmp	.-350    	; 0x1c96 <xTaskIncrementTick+0x98>
    1df4:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    1df8:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    1dfc:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1dfe:	9b e0       	ldi	r25, 0x0B	; 11
    1e00:	e9 9f       	mul	r30, r25
    1e02:	f0 01       	movw	r30, r0
    1e04:	11 24       	eor	r1, r1
    1e06:	ed 57       	subi	r30, 0x7D	; 125
    1e08:	f8 4e       	sbci	r31, 0xE8	; 232
    1e0a:	90 81       	ld	r25, Z
    1e0c:	92 30       	cpi	r25, 0x02	; 2
    1e0e:	08 f0       	brcs	.+2      	; 0x1e12 <xTaskIncrementTick+0x214>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 91 3b 17 	lds	r25, 0x173B	; 0x80173b <xYieldPending>
    1e16:	91 11       	cpse	r25, r1
    1e18:	16 c0       	rjmp	.+44     	; 0x1e46 <xTaskIncrementTick+0x248>
    1e1a:	16 c0       	rjmp	.+44     	; 0x1e48 <xTaskIncrementTick+0x24a>
    1e1c:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <xPendedTicks>
    1e20:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <xPendedTicks+0x1>
    1e24:	a0 91 3e 17 	lds	r26, 0x173E	; 0x80173e <xPendedTicks+0x2>
    1e28:	b0 91 3f 17 	lds	r27, 0x173F	; 0x80173f <xPendedTicks+0x3>
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	a1 1d       	adc	r26, r1
    1e30:	b1 1d       	adc	r27, r1
    1e32:	80 93 3c 17 	sts	0x173C, r24	; 0x80173c <xPendedTicks>
    1e36:	90 93 3d 17 	sts	0x173D, r25	; 0x80173d <xPendedTicks+0x1>
    1e3a:	a0 93 3e 17 	sts	0x173E, r26	; 0x80173e <xPendedTicks+0x2>
    1e3e:	b0 93 3f 17 	sts	0x173F, r27	; 0x80173f <xPendedTicks+0x3>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <xTaskIncrementTick+0x24a>
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	ff 90       	pop	r15
    1e4e:	ef 90       	pop	r14
    1e50:	df 90       	pop	r13
    1e52:	cf 90       	pop	r12
    1e54:	08 95       	ret

00001e56 <xTaskResumeAll>:
    1e56:	cf 92       	push	r12
    1e58:	df 92       	push	r13
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	0f 92       	push	r0
    1e68:	80 91 32 17 	lds	r24, 0x1732	; 0x801732 <uxSchedulerSuspended>
    1e6c:	81 50       	subi	r24, 0x01	; 1
    1e6e:	80 93 32 17 	sts	0x1732, r24	; 0x801732 <uxSchedulerSuspended>
    1e72:	80 91 32 17 	lds	r24, 0x1732	; 0x801732 <uxSchedulerSuspended>
    1e76:	81 11       	cpse	r24, r1
    1e78:	be c0       	rjmp	.+380    	; 0x1ff6 <xTaskResumeAll+0x1a0>
    1e7a:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <uxCurrentNumberOfTasks>
    1e7e:	81 11       	cpse	r24, r1
    1e80:	88 c0       	rjmp	.+272    	; 0x1f92 <xTaskResumeAll+0x13c>
    1e82:	bc c0       	rjmp	.+376    	; 0x1ffc <xTaskResumeAll+0x1a6>
    1e84:	e0 91 65 17 	lds	r30, 0x1765	; 0x801765 <xPendingReadyList+0x7>
    1e88:	f0 91 66 17 	lds	r31, 0x1766	; 0x801766 <xPendingReadyList+0x8>
    1e8c:	00 84       	ldd	r0, Z+8	; 0x08
    1e8e:	f1 85       	ldd	r31, Z+9	; 0x09
    1e90:	e0 2d       	mov	r30, r0
    1e92:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e94:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e96:	c2 89       	ldd	r28, Z+18	; 0x12
    1e98:	d3 89       	ldd	r29, Z+19	; 0x13
    1e9a:	84 89       	ldd	r24, Z+20	; 0x14
    1e9c:	95 89       	ldd	r25, Z+21	; 0x15
    1e9e:	9f 83       	std	Y+7, r25	; 0x07
    1ea0:	8e 83       	std	Y+6, r24	; 0x06
    1ea2:	c4 89       	ldd	r28, Z+20	; 0x14
    1ea4:	d5 89       	ldd	r29, Z+21	; 0x15
    1ea6:	82 89       	ldd	r24, Z+18	; 0x12
    1ea8:	93 89       	ldd	r25, Z+19	; 0x13
    1eaa:	9d 83       	std	Y+5, r25	; 0x05
    1eac:	8c 83       	std	Y+4, r24	; 0x04
    1eae:	11 96       	adiw	r26, 0x01	; 1
    1eb0:	2d 91       	ld	r18, X+
    1eb2:	3c 91       	ld	r19, X
    1eb4:	12 97       	sbiw	r26, 0x02	; 2
    1eb6:	cf 01       	movw	r24, r30
    1eb8:	0e 96       	adiw	r24, 0x0e	; 14
    1eba:	28 17       	cp	r18, r24
    1ebc:	39 07       	cpc	r19, r25
    1ebe:	31 f4       	brne	.+12     	; 0x1ecc <xTaskResumeAll+0x76>
    1ec0:	84 89       	ldd	r24, Z+20	; 0x14
    1ec2:	95 89       	ldd	r25, Z+21	; 0x15
    1ec4:	12 96       	adiw	r26, 0x02	; 2
    1ec6:	9c 93       	st	X, r25
    1ec8:	8e 93       	st	-X, r24
    1eca:	11 97       	sbiw	r26, 0x01	; 1
    1ecc:	11 8e       	std	Z+25, r1	; 0x19
    1ece:	10 8e       	std	Z+24, r1	; 0x18
    1ed0:	8c 91       	ld	r24, X
    1ed2:	81 50       	subi	r24, 0x01	; 1
    1ed4:	8c 93       	st	X, r24
    1ed6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ed8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1eda:	c6 81       	ldd	r28, Z+6	; 0x06
    1edc:	d7 81       	ldd	r29, Z+7	; 0x07
    1ede:	80 85       	ldd	r24, Z+8	; 0x08
    1ee0:	91 85       	ldd	r25, Z+9	; 0x09
    1ee2:	9f 83       	std	Y+7, r25	; 0x07
    1ee4:	8e 83       	std	Y+6, r24	; 0x06
    1ee6:	c0 85       	ldd	r28, Z+8	; 0x08
    1ee8:	d1 85       	ldd	r29, Z+9	; 0x09
    1eea:	86 81       	ldd	r24, Z+6	; 0x06
    1eec:	97 81       	ldd	r25, Z+7	; 0x07
    1eee:	9d 83       	std	Y+5, r25	; 0x05
    1ef0:	8c 83       	std	Y+4, r24	; 0x04
    1ef2:	11 96       	adiw	r26, 0x01	; 1
    1ef4:	8d 91       	ld	r24, X+
    1ef6:	9c 91       	ld	r25, X
    1ef8:	12 97       	sbiw	r26, 0x02	; 2
    1efa:	9f 01       	movw	r18, r30
    1efc:	2e 5f       	subi	r18, 0xFE	; 254
    1efe:	3f 4f       	sbci	r19, 0xFF	; 255
    1f00:	82 17       	cp	r24, r18
    1f02:	93 07       	cpc	r25, r19
    1f04:	31 f4       	brne	.+12     	; 0x1f12 <xTaskResumeAll+0xbc>
    1f06:	80 85       	ldd	r24, Z+8	; 0x08
    1f08:	91 85       	ldd	r25, Z+9	; 0x09
    1f0a:	12 96       	adiw	r26, 0x02	; 2
    1f0c:	9c 93       	st	X, r25
    1f0e:	8e 93       	st	-X, r24
    1f10:	11 97       	sbiw	r26, 0x01	; 1
    1f12:	15 86       	std	Z+13, r1	; 0x0d
    1f14:	14 86       	std	Z+12, r1	; 0x0c
    1f16:	8c 91       	ld	r24, X
    1f18:	81 50       	subi	r24, 0x01	; 1
    1f1a:	8c 93       	st	X, r24
    1f1c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f1e:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <uxTopReadyPriority>
    1f22:	8a 17       	cp	r24, r26
    1f24:	10 f4       	brcc	.+4      	; 0x1f2a <xTaskResumeAll+0xd4>
    1f26:	a0 93 41 17 	sts	0x1741, r26	; 0x801741 <uxTopReadyPriority>
    1f2a:	8b e0       	ldi	r24, 0x0B	; 11
    1f2c:	8a 9f       	mul	r24, r26
    1f2e:	d0 01       	movw	r26, r0
    1f30:	11 24       	eor	r1, r1
    1f32:	ad 57       	subi	r26, 0x7D	; 125
    1f34:	b8 4e       	sbci	r27, 0xE8	; 232
    1f36:	11 96       	adiw	r26, 0x01	; 1
    1f38:	0d 90       	ld	r0, X+
    1f3a:	bc 91       	ld	r27, X
    1f3c:	a0 2d       	mov	r26, r0
    1f3e:	b7 83       	std	Z+7, r27	; 0x07
    1f40:	a6 83       	std	Z+6, r26	; 0x06
    1f42:	16 96       	adiw	r26, 0x06	; 6
    1f44:	4d 91       	ld	r20, X+
    1f46:	5c 91       	ld	r21, X
    1f48:	17 97       	sbiw	r26, 0x07	; 7
    1f4a:	51 87       	std	Z+9, r21	; 0x09
    1f4c:	40 87       	std	Z+8, r20	; 0x08
    1f4e:	16 96       	adiw	r26, 0x06	; 6
    1f50:	cd 91       	ld	r28, X+
    1f52:	dc 91       	ld	r29, X
    1f54:	17 97       	sbiw	r26, 0x07	; 7
    1f56:	3d 83       	std	Y+5, r19	; 0x05
    1f58:	2c 83       	std	Y+4, r18	; 0x04
    1f5a:	17 96       	adiw	r26, 0x07	; 7
    1f5c:	3c 93       	st	X, r19
    1f5e:	2e 93       	st	-X, r18
    1f60:	16 97       	sbiw	r26, 0x06	; 6
    1f62:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f64:	8a 9f       	mul	r24, r26
    1f66:	d0 01       	movw	r26, r0
    1f68:	11 24       	eor	r1, r1
    1f6a:	ad 57       	subi	r26, 0x7D	; 125
    1f6c:	b8 4e       	sbci	r27, 0xE8	; 232
    1f6e:	b5 87       	std	Z+13, r27	; 0x0d
    1f70:	a4 87       	std	Z+12, r26	; 0x0c
    1f72:	8c 91       	ld	r24, X
    1f74:	8f 5f       	subi	r24, 0xFF	; 255
    1f76:	8c 93       	st	X, r24
    1f78:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f7a:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    1f7e:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    1f82:	5a 96       	adiw	r26, 0x1a	; 26
    1f84:	8c 91       	ld	r24, X
    1f86:	98 17       	cp	r25, r24
    1f88:	30 f0       	brcs	.+12     	; 0x1f96 <xTaskResumeAll+0x140>
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <xYieldPending>
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <xTaskResumeAll+0x140>
    1f92:	e0 e0       	ldi	r30, 0x00	; 0
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <xPendingReadyList>
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	73 cf       	rjmp	.-282    	; 0x1e84 <xTaskResumeAll+0x2e>
    1f9e:	ef 2b       	or	r30, r31
    1fa0:	09 f0       	breq	.+2      	; 0x1fa4 <xTaskResumeAll+0x14e>
    1fa2:	7d db       	rcall	.-2310   	; 0x169e <prvResetNextTaskUnblockTime>
    1fa4:	c0 90 3c 17 	lds	r12, 0x173C	; 0x80173c <xPendedTicks>
    1fa8:	d0 90 3d 17 	lds	r13, 0x173D	; 0x80173d <xPendedTicks+0x1>
    1fac:	e0 90 3e 17 	lds	r14, 0x173E	; 0x80173e <xPendedTicks+0x2>
    1fb0:	f0 90 3f 17 	lds	r15, 0x173F	; 0x80173f <xPendedTicks+0x3>
    1fb4:	c1 14       	cp	r12, r1
    1fb6:	d1 04       	cpc	r13, r1
    1fb8:	e1 04       	cpc	r14, r1
    1fba:	f1 04       	cpc	r15, r1
    1fbc:	a1 f0       	breq	.+40     	; 0x1fe6 <xTaskResumeAll+0x190>
    1fbe:	1f de       	rcall	.-962    	; 0x1bfe <xTaskIncrementTick>
    1fc0:	88 23       	and	r24, r24
    1fc2:	19 f0       	breq	.+6      	; 0x1fca <xTaskResumeAll+0x174>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <xYieldPending>
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	c8 1a       	sub	r12, r24
    1fce:	d1 08       	sbc	r13, r1
    1fd0:	e1 08       	sbc	r14, r1
    1fd2:	f1 08       	sbc	r15, r1
    1fd4:	a1 f7       	brne	.-24     	; 0x1fbe <xTaskResumeAll+0x168>
    1fd6:	10 92 3c 17 	sts	0x173C, r1	; 0x80173c <xPendedTicks>
    1fda:	10 92 3d 17 	sts	0x173D, r1	; 0x80173d <xPendedTicks+0x1>
    1fde:	10 92 3e 17 	sts	0x173E, r1	; 0x80173e <xPendedTicks+0x2>
    1fe2:	10 92 3f 17 	sts	0x173F, r1	; 0x80173f <xPendedTicks+0x3>
    1fe6:	80 91 3b 17 	lds	r24, 0x173B	; 0x80173b <xYieldPending>
    1fea:	88 23       	and	r24, r24
    1fec:	31 f0       	breq	.+12     	; 0x1ffa <xTaskResumeAll+0x1a4>
    1fee:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vPortYield>
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	03 c0       	rjmp	.+6      	; 0x1ffc <xTaskResumeAll+0x1a6>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	01 c0       	rjmp	.+2      	; 0x1ffc <xTaskResumeAll+0x1a6>
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	ff 90       	pop	r15
    2006:	ef 90       	pop	r14
    2008:	df 90       	pop	r13
    200a:	cf 90       	pop	r12
    200c:	08 95       	ret

0000200e <xTaskDelayUntil>:
    200e:	8f 92       	push	r8
    2010:	9f 92       	push	r9
    2012:	af 92       	push	r10
    2014:	bf 92       	push	r11
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	ec 01       	movw	r28, r24
    2026:	6a 01       	movw	r12, r20
    2028:	7b 01       	movw	r14, r22
    202a:	d5 dd       	rcall	.-1110   	; 0x1bd6 <vTaskSuspendAll>
    202c:	80 90 42 17 	lds	r8, 0x1742	; 0x801742 <xTickCount>
    2030:	90 90 43 17 	lds	r9, 0x1743	; 0x801743 <xTickCount+0x1>
    2034:	a0 90 44 17 	lds	r10, 0x1744	; 0x801744 <xTickCount+0x2>
    2038:	b0 90 45 17 	lds	r11, 0x1745	; 0x801745 <xTickCount+0x3>
    203c:	88 81       	ld	r24, Y
    203e:	99 81       	ldd	r25, Y+1	; 0x01
    2040:	aa 81       	ldd	r26, Y+2	; 0x02
    2042:	bb 81       	ldd	r27, Y+3	; 0x03
    2044:	ac 01       	movw	r20, r24
    2046:	bd 01       	movw	r22, r26
    2048:	4c 0d       	add	r20, r12
    204a:	5d 1d       	adc	r21, r13
    204c:	6e 1d       	adc	r22, r14
    204e:	7f 1d       	adc	r23, r15
    2050:	88 16       	cp	r8, r24
    2052:	99 06       	cpc	r9, r25
    2054:	aa 06       	cpc	r10, r26
    2056:	bb 06       	cpc	r11, r27
    2058:	60 f4       	brcc	.+24     	; 0x2072 <xTaskDelayUntil+0x64>
    205a:	48 17       	cp	r20, r24
    205c:	59 07       	cpc	r21, r25
    205e:	6a 07       	cpc	r22, r26
    2060:	7b 07       	cpc	r23, r27
    2062:	98 f4       	brcc	.+38     	; 0x208a <xTaskDelayUntil+0x7c>
    2064:	84 16       	cp	r8, r20
    2066:	95 06       	cpc	r9, r21
    2068:	a6 06       	cpc	r10, r22
    206a:	b7 06       	cpc	r11, r23
    206c:	80 f0       	brcs	.+32     	; 0x208e <xTaskDelayUntil+0x80>
    206e:	10 e0       	ldi	r17, 0x00	; 0
    2070:	13 c0       	rjmp	.+38     	; 0x2098 <xTaskDelayUntil+0x8a>
    2072:	48 17       	cp	r20, r24
    2074:	59 07       	cpc	r21, r25
    2076:	6a 07       	cpc	r22, r26
    2078:	7b 07       	cpc	r23, r27
    207a:	58 f0       	brcs	.+22     	; 0x2092 <xTaskDelayUntil+0x84>
    207c:	84 16       	cp	r8, r20
    207e:	95 06       	cpc	r9, r21
    2080:	a6 06       	cpc	r10, r22
    2082:	b7 06       	cpc	r11, r23
    2084:	40 f0       	brcs	.+16     	; 0x2096 <xTaskDelayUntil+0x88>
    2086:	10 e0       	ldi	r17, 0x00	; 0
    2088:	07 c0       	rjmp	.+14     	; 0x2098 <xTaskDelayUntil+0x8a>
    208a:	10 e0       	ldi	r17, 0x00	; 0
    208c:	05 c0       	rjmp	.+10     	; 0x2098 <xTaskDelayUntil+0x8a>
    208e:	11 e0       	ldi	r17, 0x01	; 1
    2090:	03 c0       	rjmp	.+6      	; 0x2098 <xTaskDelayUntil+0x8a>
    2092:	11 e0       	ldi	r17, 0x01	; 1
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <xTaskDelayUntil+0x8a>
    2096:	11 e0       	ldi	r17, 0x01	; 1
    2098:	48 83       	st	Y, r20
    209a:	59 83       	std	Y+1, r21	; 0x01
    209c:	6a 83       	std	Y+2, r22	; 0x02
    209e:	7b 83       	std	Y+3, r23	; 0x03
    20a0:	11 23       	and	r17, r17
    20a2:	41 f0       	breq	.+16     	; 0x20b4 <xTaskDelayUntil+0xa6>
    20a4:	cb 01       	movw	r24, r22
    20a6:	ba 01       	movw	r22, r20
    20a8:	68 19       	sub	r22, r8
    20aa:	79 09       	sbc	r23, r9
    20ac:	8a 09       	sbc	r24, r10
    20ae:	9b 09       	sbc	r25, r11
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	6b dc       	rcall	.-1834   	; 0x198a <prvAddCurrentTaskToDelayedList>
    20b4:	d0 de       	rcall	.-608    	; 0x1e56 <xTaskResumeAll>
    20b6:	81 11       	cpse	r24, r1
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <xTaskDelayUntil+0xb0>
    20ba:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vPortYield>
    20be:	81 2f       	mov	r24, r17
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	ff 90       	pop	r15
    20c8:	ef 90       	pop	r14
    20ca:	df 90       	pop	r13
    20cc:	cf 90       	pop	r12
    20ce:	bf 90       	pop	r11
    20d0:	af 90       	pop	r10
    20d2:	9f 90       	pop	r9
    20d4:	8f 90       	pop	r8
    20d6:	08 95       	ret

000020d8 <vTaskDelay>:
    20d8:	cf 92       	push	r12
    20da:	df 92       	push	r13
    20dc:	ef 92       	push	r14
    20de:	ff 92       	push	r15
    20e0:	6b 01       	movw	r12, r22
    20e2:	7c 01       	movw	r14, r24
    20e4:	67 2b       	or	r22, r23
    20e6:	68 2b       	or	r22, r24
    20e8:	69 2b       	or	r22, r25
    20ea:	39 f0       	breq	.+14     	; 0x20fa <vTaskDelay+0x22>
    20ec:	74 dd       	rcall	.-1304   	; 0x1bd6 <vTaskSuspendAll>
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	c7 01       	movw	r24, r14
    20f2:	b6 01       	movw	r22, r12
    20f4:	4a dc       	rcall	.-1900   	; 0x198a <prvAddCurrentTaskToDelayedList>
    20f6:	af de       	rcall	.-674    	; 0x1e56 <xTaskResumeAll>
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <vTaskDelay+0x24>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	81 11       	cpse	r24, r1
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <vTaskDelay+0x2c>
    2100:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vPortYield>
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	df 90       	pop	r13
    210a:	cf 90       	pop	r12
    210c:	08 95       	ret

0000210e <vTaskSwitchContext>:
    210e:	80 91 32 17 	lds	r24, 0x1732	; 0x801732 <uxSchedulerSuspended>
    2112:	88 23       	and	r24, r24
    2114:	21 f0       	breq	.+8      	; 0x211e <vTaskSwitchContext+0x10>
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <xYieldPending>
    211c:	08 95       	ret
    211e:	10 92 3b 17 	sts	0x173B, r1	; 0x80173b <xYieldPending>
    2122:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2126:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    212a:	20 81       	ld	r18, Z
    212c:	31 81       	ldd	r19, Z+1	; 0x01
    212e:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2132:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2136:	83 8d       	ldd	r24, Z+27	; 0x1b
    2138:	94 8d       	ldd	r25, Z+28	; 0x1c
    213a:	82 17       	cp	r24, r18
    213c:	93 07       	cpc	r25, r19
    213e:	60 f0       	brcs	.+24     	; 0x2158 <vTaskSwitchContext+0x4a>
    2140:	60 91 f1 17 	lds	r22, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2144:	70 91 f2 17 	lds	r23, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2148:	63 5e       	subi	r22, 0xE3	; 227
    214a:	7f 4f       	sbci	r23, 0xFF	; 255
    214c:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2150:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2154:	0e 94 e5 19 	call	0x33ca	; 0x33ca <vApplicationStackOverflowHook>
    2158:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <uxTopReadyPriority>
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <vTaskSwitchContext+0x52>
    215e:	81 50       	subi	r24, 0x01	; 1
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	9b e0       	ldi	r25, 0x0B	; 11
    2166:	92 9f       	mul	r25, r18
    2168:	f0 01       	movw	r30, r0
    216a:	93 9f       	mul	r25, r19
    216c:	f0 0d       	add	r31, r0
    216e:	11 24       	eor	r1, r1
    2170:	ed 57       	subi	r30, 0x7D	; 125
    2172:	f8 4e       	sbci	r31, 0xE8	; 232
    2174:	90 81       	ld	r25, Z
    2176:	99 23       	and	r25, r25
    2178:	91 f3       	breq	.-28     	; 0x215e <vTaskSwitchContext+0x50>
    217a:	9b e0       	ldi	r25, 0x0B	; 11
    217c:	92 9f       	mul	r25, r18
    217e:	a0 01       	movw	r20, r0
    2180:	93 9f       	mul	r25, r19
    2182:	50 0d       	add	r21, r0
    2184:	11 24       	eor	r1, r1
    2186:	df 01       	movw	r26, r30
    2188:	01 80       	ldd	r0, Z+1	; 0x01
    218a:	f2 81       	ldd	r31, Z+2	; 0x02
    218c:	e0 2d       	mov	r30, r0
    218e:	04 80       	ldd	r0, Z+4	; 0x04
    2190:	f5 81       	ldd	r31, Z+5	; 0x05
    2192:	e0 2d       	mov	r30, r0
    2194:	12 96       	adiw	r26, 0x02	; 2
    2196:	fc 93       	st	X, r31
    2198:	ee 93       	st	-X, r30
    219a:	11 97       	sbiw	r26, 0x01	; 1
    219c:	4a 57       	subi	r20, 0x7A	; 122
    219e:	58 4e       	sbci	r21, 0xE8	; 232
    21a0:	e4 17       	cp	r30, r20
    21a2:	f5 07       	cpc	r31, r21
    21a4:	29 f4       	brne	.+10     	; 0x21b0 <vTaskSwitchContext+0xa2>
    21a6:	44 81       	ldd	r20, Z+4	; 0x04
    21a8:	55 81       	ldd	r21, Z+5	; 0x05
    21aa:	fd 01       	movw	r30, r26
    21ac:	52 83       	std	Z+2, r21	; 0x02
    21ae:	41 83       	std	Z+1, r20	; 0x01
    21b0:	9b e0       	ldi	r25, 0x0B	; 11
    21b2:	92 9f       	mul	r25, r18
    21b4:	f0 01       	movw	r30, r0
    21b6:	93 9f       	mul	r25, r19
    21b8:	f0 0d       	add	r31, r0
    21ba:	11 24       	eor	r1, r1
    21bc:	ed 57       	subi	r30, 0x7D	; 125
    21be:	f8 4e       	sbci	r31, 0xE8	; 232
    21c0:	01 80       	ldd	r0, Z+1	; 0x01
    21c2:	f2 81       	ldd	r31, Z+2	; 0x02
    21c4:	e0 2d       	mov	r30, r0
    21c6:	20 85       	ldd	r18, Z+8	; 0x08
    21c8:	31 85       	ldd	r19, Z+9	; 0x09
    21ca:	30 93 f2 17 	sts	0x17F2, r19	; 0x8017f2 <pxCurrentTCB+0x1>
    21ce:	20 93 f1 17 	sts	0x17F1, r18	; 0x8017f1 <pxCurrentTCB>
    21d2:	80 93 41 17 	sts	0x1741, r24	; 0x801741 <uxTopReadyPriority>
    21d6:	08 95       	ret

000021d8 <vTaskPlaceOnEventList>:
    21d8:	cf 92       	push	r12
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	6a 01       	movw	r12, r20
    21e2:	7b 01       	movw	r14, r22
    21e4:	60 91 f1 17 	lds	r22, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    21e8:	70 91 f2 17 	lds	r23, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    21ec:	62 5f       	subi	r22, 0xF2	; 242
    21ee:	7f 4f       	sbci	r23, 0xFF	; 255
    21f0:	0e 94 27 03 	call	0x64e	; 0x64e <vListInsert>
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	c7 01       	movw	r24, r14
    21f8:	b6 01       	movw	r22, r12
    21fa:	c7 db       	rcall	.-2162   	; 0x198a <prvAddCurrentTaskToDelayedList>
    21fc:	ff 90       	pop	r15
    21fe:	ef 90       	pop	r14
    2200:	df 90       	pop	r13
    2202:	cf 90       	pop	r12
    2204:	08 95       	ret

00002206 <vTaskPlaceOnEventListRestricted>:
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	fc 01       	movw	r30, r24
    220c:	cb 01       	movw	r24, r22
    220e:	ba 01       	movw	r22, r20
    2210:	a1 81       	ldd	r26, Z+1	; 0x01
    2212:	b2 81       	ldd	r27, Z+2	; 0x02
    2214:	c0 91 f1 17 	lds	r28, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2218:	d0 91 f2 17 	lds	r29, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    221c:	bb 8b       	std	Y+19, r27	; 0x13
    221e:	aa 8b       	std	Y+18, r26	; 0x12
    2220:	c0 91 f1 17 	lds	r28, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2224:	d0 91 f2 17 	lds	r29, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2228:	16 96       	adiw	r26, 0x06	; 6
    222a:	4d 91       	ld	r20, X+
    222c:	5c 91       	ld	r21, X
    222e:	17 97       	sbiw	r26, 0x07	; 7
    2230:	5d 8b       	std	Y+21, r21	; 0x15
    2232:	4c 8b       	std	Y+20, r20	; 0x14
    2234:	16 96       	adiw	r26, 0x06	; 6
    2236:	cd 91       	ld	r28, X+
    2238:	dc 91       	ld	r29, X
    223a:	17 97       	sbiw	r26, 0x07	; 7
    223c:	40 91 f1 17 	lds	r20, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2240:	50 91 f2 17 	lds	r21, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2244:	42 5f       	subi	r20, 0xF2	; 242
    2246:	5f 4f       	sbci	r21, 0xFF	; 255
    2248:	5d 83       	std	Y+5, r21	; 0x05
    224a:	4c 83       	std	Y+4, r20	; 0x04
    224c:	40 91 f1 17 	lds	r20, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2250:	50 91 f2 17 	lds	r21, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2254:	42 5f       	subi	r20, 0xF2	; 242
    2256:	5f 4f       	sbci	r21, 0xFF	; 255
    2258:	17 96       	adiw	r26, 0x07	; 7
    225a:	5c 93       	st	X, r21
    225c:	4e 93       	st	-X, r20
    225e:	16 97       	sbiw	r26, 0x06	; 6
    2260:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2264:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2268:	59 96       	adiw	r26, 0x19	; 25
    226a:	fc 93       	st	X, r31
    226c:	ee 93       	st	-X, r30
    226e:	58 97       	sbiw	r26, 0x18	; 24
    2270:	30 81       	ld	r19, Z
    2272:	3f 5f       	subi	r19, 0xFF	; 255
    2274:	30 83       	st	Z, r19
    2276:	22 23       	and	r18, r18
    2278:	19 f0       	breq	.+6      	; 0x2280 <vTaskPlaceOnEventListRestricted+0x7a>
    227a:	6f ef       	ldi	r22, 0xFF	; 255
    227c:	7f ef       	ldi	r23, 0xFF	; 255
    227e:	cb 01       	movw	r24, r22
    2280:	42 2f       	mov	r20, r18
    2282:	83 db       	rcall	.-2298   	; 0x198a <prvAddCurrentTaskToDelayedList>
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	08 95       	ret

0000228a <xTaskRemoveFromEventList>:
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	dc 01       	movw	r26, r24
    2290:	17 96       	adiw	r26, 0x07	; 7
    2292:	ed 91       	ld	r30, X+
    2294:	fc 91       	ld	r31, X
    2296:	18 97       	sbiw	r26, 0x08	; 8
    2298:	00 84       	ldd	r0, Z+8	; 0x08
    229a:	f1 85       	ldd	r31, Z+9	; 0x09
    229c:	e0 2d       	mov	r30, r0
    229e:	a0 8d       	ldd	r26, Z+24	; 0x18
    22a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    22a2:	c2 89       	ldd	r28, Z+18	; 0x12
    22a4:	d3 89       	ldd	r29, Z+19	; 0x13
    22a6:	84 89       	ldd	r24, Z+20	; 0x14
    22a8:	95 89       	ldd	r25, Z+21	; 0x15
    22aa:	9f 83       	std	Y+7, r25	; 0x07
    22ac:	8e 83       	std	Y+6, r24	; 0x06
    22ae:	c4 89       	ldd	r28, Z+20	; 0x14
    22b0:	d5 89       	ldd	r29, Z+21	; 0x15
    22b2:	82 89       	ldd	r24, Z+18	; 0x12
    22b4:	93 89       	ldd	r25, Z+19	; 0x13
    22b6:	9d 83       	std	Y+5, r25	; 0x05
    22b8:	8c 83       	std	Y+4, r24	; 0x04
    22ba:	11 96       	adiw	r26, 0x01	; 1
    22bc:	8d 91       	ld	r24, X+
    22be:	9c 91       	ld	r25, X
    22c0:	12 97       	sbiw	r26, 0x02	; 2
    22c2:	9f 01       	movw	r18, r30
    22c4:	22 5f       	subi	r18, 0xF2	; 242
    22c6:	3f 4f       	sbci	r19, 0xFF	; 255
    22c8:	82 17       	cp	r24, r18
    22ca:	93 07       	cpc	r25, r19
    22cc:	31 f4       	brne	.+12     	; 0x22da <xTaskRemoveFromEventList+0x50>
    22ce:	84 89       	ldd	r24, Z+20	; 0x14
    22d0:	95 89       	ldd	r25, Z+21	; 0x15
    22d2:	12 96       	adiw	r26, 0x02	; 2
    22d4:	9c 93       	st	X, r25
    22d6:	8e 93       	st	-X, r24
    22d8:	11 97       	sbiw	r26, 0x01	; 1
    22da:	11 8e       	std	Z+25, r1	; 0x19
    22dc:	10 8e       	std	Z+24, r1	; 0x18
    22de:	8c 91       	ld	r24, X
    22e0:	81 50       	subi	r24, 0x01	; 1
    22e2:	8c 93       	st	X, r24
    22e4:	80 91 32 17 	lds	r24, 0x1732	; 0x801732 <uxSchedulerSuspended>
    22e8:	81 11       	cpse	r24, r1
    22ea:	52 c0       	rjmp	.+164    	; 0x2390 <xTaskRemoveFromEventList+0x106>
    22ec:	a4 85       	ldd	r26, Z+12	; 0x0c
    22ee:	b5 85       	ldd	r27, Z+13	; 0x0d
    22f0:	c6 81       	ldd	r28, Z+6	; 0x06
    22f2:	d7 81       	ldd	r29, Z+7	; 0x07
    22f4:	80 85       	ldd	r24, Z+8	; 0x08
    22f6:	91 85       	ldd	r25, Z+9	; 0x09
    22f8:	9f 83       	std	Y+7, r25	; 0x07
    22fa:	8e 83       	std	Y+6, r24	; 0x06
    22fc:	c0 85       	ldd	r28, Z+8	; 0x08
    22fe:	d1 85       	ldd	r29, Z+9	; 0x09
    2300:	86 81       	ldd	r24, Z+6	; 0x06
    2302:	97 81       	ldd	r25, Z+7	; 0x07
    2304:	9d 83       	std	Y+5, r25	; 0x05
    2306:	8c 83       	std	Y+4, r24	; 0x04
    2308:	11 96       	adiw	r26, 0x01	; 1
    230a:	8d 91       	ld	r24, X+
    230c:	9c 91       	ld	r25, X
    230e:	12 97       	sbiw	r26, 0x02	; 2
    2310:	9f 01       	movw	r18, r30
    2312:	2e 5f       	subi	r18, 0xFE	; 254
    2314:	3f 4f       	sbci	r19, 0xFF	; 255
    2316:	82 17       	cp	r24, r18
    2318:	93 07       	cpc	r25, r19
    231a:	31 f4       	brne	.+12     	; 0x2328 <xTaskRemoveFromEventList+0x9e>
    231c:	80 85       	ldd	r24, Z+8	; 0x08
    231e:	91 85       	ldd	r25, Z+9	; 0x09
    2320:	12 96       	adiw	r26, 0x02	; 2
    2322:	9c 93       	st	X, r25
    2324:	8e 93       	st	-X, r24
    2326:	11 97       	sbiw	r26, 0x01	; 1
    2328:	15 86       	std	Z+13, r1	; 0x0d
    232a:	14 86       	std	Z+12, r1	; 0x0c
    232c:	8c 91       	ld	r24, X
    232e:	81 50       	subi	r24, 0x01	; 1
    2330:	8c 93       	st	X, r24
    2332:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2334:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <uxTopReadyPriority>
    2338:	8a 17       	cp	r24, r26
    233a:	10 f4       	brcc	.+4      	; 0x2340 <xTaskRemoveFromEventList+0xb6>
    233c:	a0 93 41 17 	sts	0x1741, r26	; 0x801741 <uxTopReadyPriority>
    2340:	8b e0       	ldi	r24, 0x0B	; 11
    2342:	8a 9f       	mul	r24, r26
    2344:	d0 01       	movw	r26, r0
    2346:	11 24       	eor	r1, r1
    2348:	ad 57       	subi	r26, 0x7D	; 125
    234a:	b8 4e       	sbci	r27, 0xE8	; 232
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	0d 90       	ld	r0, X+
    2350:	bc 91       	ld	r27, X
    2352:	a0 2d       	mov	r26, r0
    2354:	b7 83       	std	Z+7, r27	; 0x07
    2356:	a6 83       	std	Z+6, r26	; 0x06
    2358:	16 96       	adiw	r26, 0x06	; 6
    235a:	4d 91       	ld	r20, X+
    235c:	5c 91       	ld	r21, X
    235e:	17 97       	sbiw	r26, 0x07	; 7
    2360:	51 87       	std	Z+9, r21	; 0x09
    2362:	40 87       	std	Z+8, r20	; 0x08
    2364:	16 96       	adiw	r26, 0x06	; 6
    2366:	cd 91       	ld	r28, X+
    2368:	dc 91       	ld	r29, X
    236a:	17 97       	sbiw	r26, 0x07	; 7
    236c:	3d 83       	std	Y+5, r19	; 0x05
    236e:	2c 83       	std	Y+4, r18	; 0x04
    2370:	17 96       	adiw	r26, 0x07	; 7
    2372:	3c 93       	st	X, r19
    2374:	2e 93       	st	-X, r18
    2376:	16 97       	sbiw	r26, 0x06	; 6
    2378:	a2 8d       	ldd	r26, Z+26	; 0x1a
    237a:	8a 9f       	mul	r24, r26
    237c:	d0 01       	movw	r26, r0
    237e:	11 24       	eor	r1, r1
    2380:	ad 57       	subi	r26, 0x7D	; 125
    2382:	b8 4e       	sbci	r27, 0xE8	; 232
    2384:	b5 87       	std	Z+13, r27	; 0x0d
    2386:	a4 87       	std	Z+12, r26	; 0x0c
    2388:	8c 91       	ld	r24, X
    238a:	8f 5f       	subi	r24, 0xFF	; 255
    238c:	8c 93       	st	X, r24
    238e:	1c c0       	rjmp	.+56     	; 0x23c8 <xTaskRemoveFromEventList+0x13e>
    2390:	4e e5       	ldi	r20, 0x5E	; 94
    2392:	57 e1       	ldi	r21, 0x17	; 23
    2394:	da 01       	movw	r26, r20
    2396:	11 96       	adiw	r26, 0x01	; 1
    2398:	cd 91       	ld	r28, X+
    239a:	dc 91       	ld	r29, X
    239c:	12 97       	sbiw	r26, 0x02	; 2
    239e:	d3 8b       	std	Z+19, r29	; 0x13
    23a0:	c2 8b       	std	Z+18, r28	; 0x12
    23a2:	8e 81       	ldd	r24, Y+6	; 0x06
    23a4:	9f 81       	ldd	r25, Y+7	; 0x07
    23a6:	95 8b       	std	Z+21, r25	; 0x15
    23a8:	84 8b       	std	Z+20, r24	; 0x14
    23aa:	8e 81       	ldd	r24, Y+6	; 0x06
    23ac:	9f 81       	ldd	r25, Y+7	; 0x07
    23ae:	dc 01       	movw	r26, r24
    23b0:	15 96       	adiw	r26, 0x05	; 5
    23b2:	3c 93       	st	X, r19
    23b4:	2e 93       	st	-X, r18
    23b6:	14 97       	sbiw	r26, 0x04	; 4
    23b8:	3f 83       	std	Y+7, r19	; 0x07
    23ba:	2e 83       	std	Y+6, r18	; 0x06
    23bc:	51 8f       	std	Z+25, r21	; 0x19
    23be:	40 8f       	std	Z+24, r20	; 0x18
    23c0:	da 01       	movw	r26, r20
    23c2:	8c 91       	ld	r24, X
    23c4:	8f 5f       	subi	r24, 0xFF	; 255
    23c6:	8c 93       	st	X, r24
    23c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    23ca:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    23ce:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    23d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    23d4:	89 17       	cp	r24, r25
    23d6:	20 f4       	brcc	.+8      	; 0x23e0 <xTaskRemoveFromEventList+0x156>
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <xYieldPending>
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <xTaskRemoveFromEventList+0x158>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	08 95       	ret

000023e8 <vTaskSetTimeOutState>:
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	0f 92       	push	r0
    23ee:	20 91 3a 17 	lds	r18, 0x173A	; 0x80173a <xNumOfOverflows>
    23f2:	fc 01       	movw	r30, r24
    23f4:	20 83       	st	Z, r18
    23f6:	40 91 42 17 	lds	r20, 0x1742	; 0x801742 <xTickCount>
    23fa:	50 91 43 17 	lds	r21, 0x1743	; 0x801743 <xTickCount+0x1>
    23fe:	60 91 44 17 	lds	r22, 0x1744	; 0x801744 <xTickCount+0x2>
    2402:	70 91 45 17 	lds	r23, 0x1745	; 0x801745 <xTickCount+0x3>
    2406:	41 83       	std	Z+1, r20	; 0x01
    2408:	52 83       	std	Z+2, r21	; 0x02
    240a:	63 83       	std	Z+3, r22	; 0x03
    240c:	74 83       	std	Z+4, r23	; 0x04
    240e:	0f 90       	pop	r0
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	08 95       	ret

00002414 <vTaskInternalSetTimeOutState>:
    2414:	20 91 3a 17 	lds	r18, 0x173A	; 0x80173a <xNumOfOverflows>
    2418:	fc 01       	movw	r30, r24
    241a:	20 83       	st	Z, r18
    241c:	40 91 42 17 	lds	r20, 0x1742	; 0x801742 <xTickCount>
    2420:	50 91 43 17 	lds	r21, 0x1743	; 0x801743 <xTickCount+0x1>
    2424:	60 91 44 17 	lds	r22, 0x1744	; 0x801744 <xTickCount+0x2>
    2428:	70 91 45 17 	lds	r23, 0x1745	; 0x801745 <xTickCount+0x3>
    242c:	41 83       	std	Z+1, r20	; 0x01
    242e:	52 83       	std	Z+2, r21	; 0x02
    2430:	63 83       	std	Z+3, r22	; 0x03
    2432:	74 83       	std	Z+4, r23	; 0x04
    2434:	08 95       	ret

00002436 <xTaskCheckForTimeOut>:
    2436:	8f 92       	push	r8
    2438:	9f 92       	push	r9
    243a:	af 92       	push	r10
    243c:	bf 92       	push	r11
    243e:	cf 92       	push	r12
    2440:	df 92       	push	r13
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	fb 01       	movw	r30, r22
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	0f 92       	push	r0
    2456:	c0 90 42 17 	lds	r12, 0x1742	; 0x801742 <xTickCount>
    245a:	d0 90 43 17 	lds	r13, 0x1743	; 0x801743 <xTickCount+0x1>
    245e:	e0 90 44 17 	lds	r14, 0x1744	; 0x801744 <xTickCount+0x2>
    2462:	f0 90 45 17 	lds	r15, 0x1745	; 0x801745 <xTickCount+0x3>
    2466:	dc 01       	movw	r26, r24
    2468:	11 96       	adiw	r26, 0x01	; 1
    246a:	0d 91       	ld	r16, X+
    246c:	1d 91       	ld	r17, X+
    246e:	2d 91       	ld	r18, X+
    2470:	3c 91       	ld	r19, X
    2472:	14 97       	sbiw	r26, 0x04	; 4
    2474:	46 01       	movw	r8, r12
    2476:	57 01       	movw	r10, r14
    2478:	80 1a       	sub	r8, r16
    247a:	91 0a       	sbc	r9, r17
    247c:	a2 0a       	sbc	r10, r18
    247e:	b3 0a       	sbc	r11, r19
    2480:	40 81       	ld	r20, Z
    2482:	51 81       	ldd	r21, Z+1	; 0x01
    2484:	62 81       	ldd	r22, Z+2	; 0x02
    2486:	73 81       	ldd	r23, Z+3	; 0x03
    2488:	4f 3f       	cpi	r20, 0xFF	; 255
    248a:	bf ef       	ldi	r27, 0xFF	; 255
    248c:	5b 07       	cpc	r21, r27
    248e:	6b 07       	cpc	r22, r27
    2490:	7b 07       	cpc	r23, r27
    2492:	39 f1       	breq	.+78     	; 0x24e2 <xTaskCheckForTimeOut+0xac>
    2494:	ec 01       	movw	r28, r24
    2496:	b8 81       	ld	r27, Y
    2498:	a0 91 3a 17 	lds	r26, 0x173A	; 0x80173a <xNumOfOverflows>
    249c:	ba 17       	cp	r27, r26
    249e:	59 f0       	breq	.+22     	; 0x24b6 <xTaskCheckForTimeOut+0x80>
    24a0:	c0 16       	cp	r12, r16
    24a2:	d1 06       	cpc	r13, r17
    24a4:	e2 06       	cpc	r14, r18
    24a6:	f3 06       	cpc	r15, r19
    24a8:	30 f0       	brcs	.+12     	; 0x24b6 <xTaskCheckForTimeOut+0x80>
    24aa:	10 82       	st	Z, r1
    24ac:	11 82       	std	Z+1, r1	; 0x01
    24ae:	12 82       	std	Z+2, r1	; 0x02
    24b0:	13 82       	std	Z+3, r1	; 0x03
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	17 c0       	rjmp	.+46     	; 0x24e4 <xTaskCheckForTimeOut+0xae>
    24b6:	84 16       	cp	r8, r20
    24b8:	95 06       	cpc	r9, r21
    24ba:	a6 06       	cpc	r10, r22
    24bc:	b7 06       	cpc	r11, r23
    24be:	58 f4       	brcc	.+22     	; 0x24d6 <xTaskCheckForTimeOut+0xa0>
    24c0:	48 19       	sub	r20, r8
    24c2:	59 09       	sbc	r21, r9
    24c4:	6a 09       	sbc	r22, r10
    24c6:	7b 09       	sbc	r23, r11
    24c8:	40 83       	st	Z, r20
    24ca:	51 83       	std	Z+1, r21	; 0x01
    24cc:	62 83       	std	Z+2, r22	; 0x02
    24ce:	73 83       	std	Z+3, r23	; 0x03
    24d0:	a1 df       	rcall	.-190    	; 0x2414 <vTaskInternalSetTimeOutState>
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	07 c0       	rjmp	.+14     	; 0x24e4 <xTaskCheckForTimeOut+0xae>
    24d6:	10 82       	st	Z, r1
    24d8:	11 82       	std	Z+1, r1	; 0x01
    24da:	12 82       	std	Z+2, r1	; 0x02
    24dc:	13 82       	std	Z+3, r1	; 0x03
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	01 c0       	rjmp	.+2      	; 0x24e4 <xTaskCheckForTimeOut+0xae>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	0f 90       	pop	r0
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	ef 90       	pop	r14
    24f4:	df 90       	pop	r13
    24f6:	cf 90       	pop	r12
    24f8:	bf 90       	pop	r11
    24fa:	af 90       	pop	r10
    24fc:	9f 90       	pop	r9
    24fe:	8f 90       	pop	r8
    2500:	08 95       	ret

00002502 <vTaskMissedYield>:
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <xYieldPending>
    2508:	08 95       	ret

0000250a <xTaskGetCurrentTaskHandle>:
    250a:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    250e:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2512:	08 95       	ret

00002514 <xTaskGetSchedulerState>:
    2514:	80 91 40 17 	lds	r24, 0x1740	; 0x801740 <xSchedulerRunning>
    2518:	88 23       	and	r24, r24
    251a:	31 f0       	breq	.+12     	; 0x2528 <xTaskGetSchedulerState+0x14>
    251c:	80 91 32 17 	lds	r24, 0x1732	; 0x801732 <uxSchedulerSuspended>
    2520:	81 11       	cpse	r24, r1
    2522:	04 c0       	rjmp	.+8      	; 0x252c <xTaskGetSchedulerState+0x18>
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	08 95       	ret
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	08 95       	ret
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	08 95       	ret

00002530 <xTaskPriorityInherit>:
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	fc 01       	movw	r30, r24
    253a:	89 2b       	or	r24, r25
    253c:	09 f4       	brne	.+2      	; 0x2540 <xTaskPriorityInherit+0x10>
    253e:	77 c0       	rjmp	.+238    	; 0x262e <xTaskPriorityInherit+0xfe>
    2540:	82 8d       	ldd	r24, Z+26	; 0x1a
    2542:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2546:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    254a:	5a 96       	adiw	r26, 0x1a	; 26
    254c:	9c 91       	ld	r25, X
    254e:	89 17       	cp	r24, r25
    2550:	08 f0       	brcs	.+2      	; 0x2554 <xTaskPriorityInherit+0x24>
    2552:	63 c0       	rjmp	.+198    	; 0x261a <xTaskPriorityInherit+0xea>
    2554:	46 85       	ldd	r20, Z+14	; 0x0e
    2556:	57 85       	ldd	r21, Z+15	; 0x0f
    2558:	60 89       	ldd	r22, Z+16	; 0x10
    255a:	71 89       	ldd	r23, Z+17	; 0x11
    255c:	77 23       	and	r23, r23
    255e:	94 f0       	brlt	.+36     	; 0x2584 <xTaskPriorityInherit+0x54>
    2560:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2564:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2568:	5a 96       	adiw	r26, 0x1a	; 26
    256a:	9c 91       	ld	r25, X
    256c:	4a e0       	ldi	r20, 0x0A	; 10
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	49 1b       	sub	r20, r25
    2576:	51 09       	sbc	r21, r1
    2578:	61 09       	sbc	r22, r1
    257a:	71 09       	sbc	r23, r1
    257c:	46 87       	std	Z+14, r20	; 0x0e
    257e:	57 87       	std	Z+15, r21	; 0x0f
    2580:	60 8b       	std	Z+16, r22	; 0x10
    2582:	71 8b       	std	Z+17, r23	; 0x11
    2584:	24 85       	ldd	r18, Z+12	; 0x0c
    2586:	35 85       	ldd	r19, Z+13	; 0x0d
    2588:	4b e0       	ldi	r20, 0x0B	; 11
    258a:	84 9f       	mul	r24, r20
    258c:	c0 01       	movw	r24, r0
    258e:	11 24       	eor	r1, r1
    2590:	8d 57       	subi	r24, 0x7D	; 125
    2592:	98 4e       	sbci	r25, 0xE8	; 232
    2594:	28 17       	cp	r18, r24
    2596:	39 07       	cpc	r19, r25
    2598:	b9 f5       	brne	.+110    	; 0x2608 <xTaskPriorityInherit+0xd8>
    259a:	ef 01       	movw	r28, r30
    259c:	8f 01       	movw	r16, r30
    259e:	0e 5f       	subi	r16, 0xFE	; 254
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
    25a2:	c8 01       	movw	r24, r16
    25a4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
    25a8:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    25ac:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    25b0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    25b2:	ea 8f       	std	Y+26, r30	; 0x1a
    25b4:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <uxTopReadyPriority>
    25b8:	8e 17       	cp	r24, r30
    25ba:	10 f4       	brcc	.+4      	; 0x25c0 <xTaskPriorityInherit+0x90>
    25bc:	e0 93 41 17 	sts	0x1741, r30	; 0x801741 <uxTopReadyPriority>
    25c0:	8b e0       	ldi	r24, 0x0B	; 11
    25c2:	8e 9f       	mul	r24, r30
    25c4:	f0 01       	movw	r30, r0
    25c6:	11 24       	eor	r1, r1
    25c8:	ed 57       	subi	r30, 0x7D	; 125
    25ca:	f8 4e       	sbci	r31, 0xE8	; 232
    25cc:	01 80       	ldd	r0, Z+1	; 0x01
    25ce:	f2 81       	ldd	r31, Z+2	; 0x02
    25d0:	e0 2d       	mov	r30, r0
    25d2:	ff 83       	std	Y+7, r31	; 0x07
    25d4:	ee 83       	std	Y+6, r30	; 0x06
    25d6:	26 81       	ldd	r18, Z+6	; 0x06
    25d8:	37 81       	ldd	r19, Z+7	; 0x07
    25da:	39 87       	std	Y+9, r19	; 0x09
    25dc:	28 87       	std	Y+8, r18	; 0x08
    25de:	a6 81       	ldd	r26, Z+6	; 0x06
    25e0:	b7 81       	ldd	r27, Z+7	; 0x07
    25e2:	15 96       	adiw	r26, 0x05	; 5
    25e4:	1c 93       	st	X, r17
    25e6:	0e 93       	st	-X, r16
    25e8:	14 97       	sbiw	r26, 0x04	; 4
    25ea:	17 83       	std	Z+7, r17	; 0x07
    25ec:	06 83       	std	Z+6, r16	; 0x06
    25ee:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25f0:	8e 9f       	mul	r24, r30
    25f2:	f0 01       	movw	r30, r0
    25f4:	11 24       	eor	r1, r1
    25f6:	ed 57       	subi	r30, 0x7D	; 125
    25f8:	f8 4e       	sbci	r31, 0xE8	; 232
    25fa:	fd 87       	std	Y+13, r31	; 0x0d
    25fc:	ec 87       	std	Y+12, r30	; 0x0c
    25fe:	80 81       	ld	r24, Z
    2600:	8f 5f       	subi	r24, 0xFF	; 255
    2602:	80 83       	st	Z, r24
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	16 c0       	rjmp	.+44     	; 0x2634 <xTaskPriorityInherit+0x104>
    2608:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    260c:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2610:	5a 96       	adiw	r26, 0x1a	; 26
    2612:	8c 91       	ld	r24, X
    2614:	82 8f       	std	Z+26, r24	; 0x1a
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	0d c0       	rjmp	.+26     	; 0x2634 <xTaskPriorityInherit+0x104>
    261a:	95 a5       	ldd	r25, Z+45	; 0x2d
    261c:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2620:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2624:	82 8d       	ldd	r24, Z+26	; 0x1a
    2626:	98 17       	cp	r25, r24
    2628:	20 f0       	brcs	.+8      	; 0x2632 <xTaskPriorityInherit+0x102>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	03 c0       	rjmp	.+6      	; 0x2634 <xTaskPriorityInherit+0x104>
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <xTaskPriorityInherit+0x104>
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	08 95       	ret

0000263e <xTaskPriorityDisinherit>:
    263e:	0f 93       	push	r16
    2640:	1f 93       	push	r17
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	fc 01       	movw	r30, r24
    2648:	89 2b       	or	r24, r25
    264a:	09 f4       	brne	.+2      	; 0x264e <xTaskPriorityDisinherit+0x10>
    264c:	49 c0       	rjmp	.+146    	; 0x26e0 <xTaskPriorityDisinherit+0xa2>
    264e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2650:	81 50       	subi	r24, 0x01	; 1
    2652:	86 a7       	std	Z+46, r24	; 0x2e
    2654:	22 8d       	ldd	r18, Z+26	; 0x1a
    2656:	95 a5       	ldd	r25, Z+45	; 0x2d
    2658:	29 17       	cp	r18, r25
    265a:	09 f4       	brne	.+2      	; 0x265e <xTaskPriorityDisinherit+0x20>
    265c:	43 c0       	rjmp	.+134    	; 0x26e4 <xTaskPriorityDisinherit+0xa6>
    265e:	81 11       	cpse	r24, r1
    2660:	43 c0       	rjmp	.+134    	; 0x26e8 <xTaskPriorityDisinherit+0xaa>
    2662:	ef 01       	movw	r28, r30
    2664:	8f 01       	movw	r16, r30
    2666:	0e 5f       	subi	r16, 0xFE	; 254
    2668:	1f 4f       	sbci	r17, 0xFF	; 255
    266a:	c8 01       	movw	r24, r16
    266c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
    2670:	ed a5       	ldd	r30, Y+45	; 0x2d
    2672:	ea 8f       	std	Y+26, r30	; 0x1a
    2674:	8a e0       	ldi	r24, 0x0A	; 10
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	a0 e0       	ldi	r26, 0x00	; 0
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	8e 1b       	sub	r24, r30
    267e:	91 09       	sbc	r25, r1
    2680:	a1 09       	sbc	r26, r1
    2682:	b1 09       	sbc	r27, r1
    2684:	8e 87       	std	Y+14, r24	; 0x0e
    2686:	9f 87       	std	Y+15, r25	; 0x0f
    2688:	a8 8b       	std	Y+16, r26	; 0x10
    268a:	b9 8b       	std	Y+17, r27	; 0x11
    268c:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <uxTopReadyPriority>
    2690:	8e 17       	cp	r24, r30
    2692:	10 f4       	brcc	.+4      	; 0x2698 <xTaskPriorityDisinherit+0x5a>
    2694:	e0 93 41 17 	sts	0x1741, r30	; 0x801741 <uxTopReadyPriority>
    2698:	8b e0       	ldi	r24, 0x0B	; 11
    269a:	8e 9f       	mul	r24, r30
    269c:	f0 01       	movw	r30, r0
    269e:	11 24       	eor	r1, r1
    26a0:	ed 57       	subi	r30, 0x7D	; 125
    26a2:	f8 4e       	sbci	r31, 0xE8	; 232
    26a4:	01 80       	ldd	r0, Z+1	; 0x01
    26a6:	f2 81       	ldd	r31, Z+2	; 0x02
    26a8:	e0 2d       	mov	r30, r0
    26aa:	ff 83       	std	Y+7, r31	; 0x07
    26ac:	ee 83       	std	Y+6, r30	; 0x06
    26ae:	26 81       	ldd	r18, Z+6	; 0x06
    26b0:	37 81       	ldd	r19, Z+7	; 0x07
    26b2:	39 87       	std	Y+9, r19	; 0x09
    26b4:	28 87       	std	Y+8, r18	; 0x08
    26b6:	a6 81       	ldd	r26, Z+6	; 0x06
    26b8:	b7 81       	ldd	r27, Z+7	; 0x07
    26ba:	15 96       	adiw	r26, 0x05	; 5
    26bc:	1c 93       	st	X, r17
    26be:	0e 93       	st	-X, r16
    26c0:	14 97       	sbiw	r26, 0x04	; 4
    26c2:	17 83       	std	Z+7, r17	; 0x07
    26c4:	06 83       	std	Z+6, r16	; 0x06
    26c6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26c8:	8e 9f       	mul	r24, r30
    26ca:	f0 01       	movw	r30, r0
    26cc:	11 24       	eor	r1, r1
    26ce:	ed 57       	subi	r30, 0x7D	; 125
    26d0:	f8 4e       	sbci	r31, 0xE8	; 232
    26d2:	fd 87       	std	Y+13, r31	; 0x0d
    26d4:	ec 87       	std	Y+12, r30	; 0x0c
    26d6:	80 81       	ld	r24, Z
    26d8:	8f 5f       	subi	r24, 0xFF	; 255
    26da:	80 83       	st	Z, r24
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	05 c0       	rjmp	.+10     	; 0x26ea <xTaskPriorityDisinherit+0xac>
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	03 c0       	rjmp	.+6      	; 0x26ea <xTaskPriorityDisinherit+0xac>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	01 c0       	rjmp	.+2      	; 0x26ea <xTaskPriorityDisinherit+0xac>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	1f 91       	pop	r17
    26f0:	0f 91       	pop	r16
    26f2:	08 95       	ret

000026f4 <vTaskPriorityDisinheritAfterTimeout>:
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	fc 01       	movw	r30, r24
    26fe:	89 2b       	or	r24, r25
    2700:	09 f4       	brne	.+2      	; 0x2704 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2702:	5a c0       	rjmp	.+180    	; 0x27b8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2704:	85 a5       	ldd	r24, Z+45	; 0x2d
    2706:	86 17       	cp	r24, r22
    2708:	08 f4       	brcc	.+2      	; 0x270c <vTaskPriorityDisinheritAfterTimeout+0x18>
    270a:	86 2f       	mov	r24, r22
    270c:	92 8d       	ldd	r25, Z+26	; 0x1a
    270e:	89 17       	cp	r24, r25
    2710:	09 f4       	brne	.+2      	; 0x2714 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2712:	52 c0       	rjmp	.+164    	; 0x27b8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2714:	26 a5       	ldd	r18, Z+46	; 0x2e
    2716:	21 30       	cpi	r18, 0x01	; 1
    2718:	09 f0       	breq	.+2      	; 0x271c <vTaskPriorityDisinheritAfterTimeout+0x28>
    271a:	4e c0       	rjmp	.+156    	; 0x27b8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    271c:	82 8f       	std	Z+26, r24	; 0x1a
    271e:	46 85       	ldd	r20, Z+14	; 0x0e
    2720:	57 85       	ldd	r21, Z+15	; 0x0f
    2722:	60 89       	ldd	r22, Z+16	; 0x10
    2724:	71 89       	ldd	r23, Z+17	; 0x11
    2726:	77 23       	and	r23, r23
    2728:	64 f0       	brlt	.+24     	; 0x2742 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    272a:	4a e0       	ldi	r20, 0x0A	; 10
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	48 1b       	sub	r20, r24
    2734:	51 09       	sbc	r21, r1
    2736:	61 09       	sbc	r22, r1
    2738:	71 09       	sbc	r23, r1
    273a:	46 87       	std	Z+14, r20	; 0x0e
    273c:	57 87       	std	Z+15, r21	; 0x0f
    273e:	60 8b       	std	Z+16, r22	; 0x10
    2740:	71 8b       	std	Z+17, r23	; 0x11
    2742:	24 85       	ldd	r18, Z+12	; 0x0c
    2744:	35 85       	ldd	r19, Z+13	; 0x0d
    2746:	4b e0       	ldi	r20, 0x0B	; 11
    2748:	94 9f       	mul	r25, r20
    274a:	c0 01       	movw	r24, r0
    274c:	11 24       	eor	r1, r1
    274e:	8d 57       	subi	r24, 0x7D	; 125
    2750:	98 4e       	sbci	r25, 0xE8	; 232
    2752:	28 17       	cp	r18, r24
    2754:	39 07       	cpc	r19, r25
    2756:	81 f5       	brne	.+96     	; 0x27b8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2758:	ef 01       	movw	r28, r30
    275a:	8f 01       	movw	r16, r30
    275c:	0e 5f       	subi	r16, 0xFE	; 254
    275e:	1f 4f       	sbci	r17, 0xFF	; 255
    2760:	c8 01       	movw	r24, r16
    2762:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
    2766:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2768:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <uxTopReadyPriority>
    276c:	8e 17       	cp	r24, r30
    276e:	10 f4       	brcc	.+4      	; 0x2774 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2770:	e0 93 41 17 	sts	0x1741, r30	; 0x801741 <uxTopReadyPriority>
    2774:	8b e0       	ldi	r24, 0x0B	; 11
    2776:	8e 9f       	mul	r24, r30
    2778:	f0 01       	movw	r30, r0
    277a:	11 24       	eor	r1, r1
    277c:	ed 57       	subi	r30, 0x7D	; 125
    277e:	f8 4e       	sbci	r31, 0xE8	; 232
    2780:	01 80       	ldd	r0, Z+1	; 0x01
    2782:	f2 81       	ldd	r31, Z+2	; 0x02
    2784:	e0 2d       	mov	r30, r0
    2786:	ff 83       	std	Y+7, r31	; 0x07
    2788:	ee 83       	std	Y+6, r30	; 0x06
    278a:	26 81       	ldd	r18, Z+6	; 0x06
    278c:	37 81       	ldd	r19, Z+7	; 0x07
    278e:	39 87       	std	Y+9, r19	; 0x09
    2790:	28 87       	std	Y+8, r18	; 0x08
    2792:	a6 81       	ldd	r26, Z+6	; 0x06
    2794:	b7 81       	ldd	r27, Z+7	; 0x07
    2796:	15 96       	adiw	r26, 0x05	; 5
    2798:	1c 93       	st	X, r17
    279a:	0e 93       	st	-X, r16
    279c:	14 97       	sbiw	r26, 0x04	; 4
    279e:	17 83       	std	Z+7, r17	; 0x07
    27a0:	06 83       	std	Z+6, r16	; 0x06
    27a2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    27a4:	8e 9f       	mul	r24, r30
    27a6:	f0 01       	movw	r30, r0
    27a8:	11 24       	eor	r1, r1
    27aa:	ed 57       	subi	r30, 0x7D	; 125
    27ac:	f8 4e       	sbci	r31, 0xE8	; 232
    27ae:	fd 87       	std	Y+13, r31	; 0x0d
    27b0:	ec 87       	std	Y+12, r30	; 0x0c
    27b2:	80 81       	ld	r24, Z
    27b4:	8f 5f       	subi	r24, 0xFF	; 255
    27b6:	80 83       	st	Z, r24
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	08 95       	ret

000027c2 <pvTaskIncrementMutexHeldCount>:
    27c2:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    27c6:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    27ca:	89 2b       	or	r24, r25
    27cc:	39 f0       	breq	.+14     	; 0x27dc <pvTaskIncrementMutexHeldCount+0x1a>
    27ce:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    27d2:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    27d6:	86 a5       	ldd	r24, Z+46	; 0x2e
    27d8:	8f 5f       	subi	r24, 0xFF	; 255
    27da:	86 a7       	std	Z+46, r24	; 0x2e
    27dc:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    27e0:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    27e4:	08 95       	ret

000027e6 <xTaskGenericNotifyWait>:
    27e6:	4f 92       	push	r4
    27e8:	5f 92       	push	r5
    27ea:	6f 92       	push	r6
    27ec:	7f 92       	push	r7
    27ee:	af 92       	push	r10
    27f0:	bf 92       	push	r11
    27f2:	cf 92       	push	r12
    27f4:	df 92       	push	r13
    27f6:	ef 92       	push	r14
    27f8:	ff 92       	push	r15
    27fa:	0f 93       	push	r16
    27fc:	1f 93       	push	r17
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	28 01       	movw	r4, r16
    2804:	39 01       	movw	r6, r18
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	0f 92       	push	r0
    280c:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2810:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2814:	c8 2f       	mov	r28, r24
    2816:	d0 e0       	ldi	r29, 0x00	; 0
    2818:	ec 0f       	add	r30, r28
    281a:	fd 1f       	adc	r31, r29
    281c:	83 a9       	ldd	r24, Z+51	; 0x33
    281e:	82 30       	cpi	r24, 0x02	; 2
    2820:	71 f1       	breq	.+92     	; 0x287e <xTaskGenericNotifyWait+0x98>
    2822:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2826:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    282a:	ce 01       	movw	r24, r28
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	e8 0f       	add	r30, r24
    2836:	f9 1f       	adc	r31, r25
    2838:	87 a5       	ldd	r24, Z+47	; 0x2f
    283a:	90 a9       	ldd	r25, Z+48	; 0x30
    283c:	a1 a9       	ldd	r26, Z+49	; 0x31
    283e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2840:	40 95       	com	r20
    2842:	50 95       	com	r21
    2844:	60 95       	com	r22
    2846:	70 95       	com	r23
    2848:	48 23       	and	r20, r24
    284a:	59 23       	and	r21, r25
    284c:	6a 23       	and	r22, r26
    284e:	7b 23       	and	r23, r27
    2850:	47 a7       	std	Z+47, r20	; 0x2f
    2852:	50 ab       	std	Z+48, r21	; 0x30
    2854:	61 ab       	std	Z+49, r22	; 0x31
    2856:	72 ab       	std	Z+50, r23	; 0x32
    2858:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    285c:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2860:	ec 0f       	add	r30, r28
    2862:	fd 1f       	adc	r31, r29
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	83 ab       	std	Z+51, r24	; 0x33
    2868:	a1 14       	cp	r10, r1
    286a:	b1 04       	cpc	r11, r1
    286c:	c1 04       	cpc	r12, r1
    286e:	d1 04       	cpc	r13, r1
    2870:	31 f0       	breq	.+12     	; 0x287e <xTaskGenericNotifyWait+0x98>
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	c6 01       	movw	r24, r12
    2876:	b5 01       	movw	r22, r10
    2878:	88 d8       	rcall	.-3824   	; 0x198a <prvAddCurrentTaskToDelayedList>
    287a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vPortYield>
    287e:	0f 90       	pop	r0
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	0f 92       	push	r0
    2888:	e1 14       	cp	r14, r1
    288a:	f1 04       	cpc	r15, r1
    288c:	a1 f0       	breq	.+40     	; 0x28b6 <xTaskGenericNotifyWait+0xd0>
    288e:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2892:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2896:	ce 01       	movw	r24, r28
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	e8 0f       	add	r30, r24
    28a2:	f9 1f       	adc	r31, r25
    28a4:	87 a5       	ldd	r24, Z+47	; 0x2f
    28a6:	90 a9       	ldd	r25, Z+48	; 0x30
    28a8:	a1 a9       	ldd	r26, Z+49	; 0x31
    28aa:	b2 a9       	ldd	r27, Z+50	; 0x32
    28ac:	f7 01       	movw	r30, r14
    28ae:	80 83       	st	Z, r24
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	a2 83       	std	Z+2, r26	; 0x02
    28b4:	b3 83       	std	Z+3, r27	; 0x03
    28b6:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    28ba:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    28be:	ec 0f       	add	r30, r28
    28c0:	fd 1f       	adc	r31, r29
    28c2:	83 a9       	ldd	r24, Z+51	; 0x33
    28c4:	82 30       	cpi	r24, 0x02	; 2
    28c6:	e9 f4       	brne	.+58     	; 0x2902 <xTaskGenericNotifyWait+0x11c>
    28c8:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    28cc:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    28d0:	ce 01       	movw	r24, r28
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	e8 0f       	add	r30, r24
    28dc:	f9 1f       	adc	r31, r25
    28de:	87 a5       	ldd	r24, Z+47	; 0x2f
    28e0:	90 a9       	ldd	r25, Z+48	; 0x30
    28e2:	a1 a9       	ldd	r26, Z+49	; 0x31
    28e4:	b2 a9       	ldd	r27, Z+50	; 0x32
    28e6:	40 94       	com	r4
    28e8:	50 94       	com	r5
    28ea:	60 94       	com	r6
    28ec:	70 94       	com	r7
    28ee:	48 22       	and	r4, r24
    28f0:	59 22       	and	r5, r25
    28f2:	6a 22       	and	r6, r26
    28f4:	7b 22       	and	r7, r27
    28f6:	47 a6       	std	Z+47, r4	; 0x2f
    28f8:	50 aa       	std	Z+48, r5	; 0x30
    28fa:	61 aa       	std	Z+49, r6	; 0x31
    28fc:	72 aa       	std	Z+50, r7	; 0x32
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <xTaskGenericNotifyWait+0x11e>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	20 91 f1 17 	lds	r18, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2908:	30 91 f2 17 	lds	r19, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    290c:	c2 0f       	add	r28, r18
    290e:	d3 1f       	adc	r29, r19
    2910:	1b aa       	std	Y+51, r1	; 0x33
    2912:	0f 90       	pop	r0
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    291a:	1f 91       	pop	r17
    291c:	0f 91       	pop	r16
    291e:	ff 90       	pop	r15
    2920:	ef 90       	pop	r14
    2922:	df 90       	pop	r13
    2924:	cf 90       	pop	r12
    2926:	bf 90       	pop	r11
    2928:	af 90       	pop	r10
    292a:	7f 90       	pop	r7
    292c:	6f 90       	pop	r6
    292e:	5f 90       	pop	r5
    2930:	4f 90       	pop	r4
    2932:	08 95       	ret

00002934 <xTaskGenericNotify>:
    2934:	8f 92       	push	r8
    2936:	9f 92       	push	r9
    2938:	af 92       	push	r10
    293a:	bf 92       	push	r11
    293c:	ef 92       	push	r14
    293e:	ff 92       	push	r15
    2940:	0f 93       	push	r16
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	dc 01       	movw	r26, r24
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	0f 92       	push	r0
    294e:	e1 14       	cp	r14, r1
    2950:	f1 04       	cpc	r15, r1
    2952:	89 f0       	breq	.+34     	; 0x2976 <xTaskGenericNotify+0x42>
    2954:	e6 2f       	mov	r30, r22
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	ee 0f       	add	r30, r30
    295a:	ff 1f       	adc	r31, r31
    295c:	ee 0f       	add	r30, r30
    295e:	ff 1f       	adc	r31, r31
    2960:	e8 0f       	add	r30, r24
    2962:	f9 1f       	adc	r31, r25
    2964:	87 a4       	ldd	r8, Z+47	; 0x2f
    2966:	90 a8       	ldd	r9, Z+48	; 0x30
    2968:	a1 a8       	ldd	r10, Z+49	; 0x31
    296a:	b2 a8       	ldd	r11, Z+50	; 0x32
    296c:	f7 01       	movw	r30, r14
    296e:	80 82       	st	Z, r8
    2970:	91 82       	std	Z+1, r9	; 0x01
    2972:	a2 82       	std	Z+2, r10	; 0x02
    2974:	b3 82       	std	Z+3, r11	; 0x03
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	fd 01       	movw	r30, r26
    297a:	e6 0f       	add	r30, r22
    297c:	f7 1f       	adc	r31, r23
    297e:	83 a9       	ldd	r24, Z+51	; 0x33
    2980:	92 e0       	ldi	r25, 0x02	; 2
    2982:	93 ab       	std	Z+51, r25	; 0x33
    2984:	02 30       	cpi	r16, 0x02	; 2
    2986:	01 f1       	breq	.+64     	; 0x29c8 <xTaskGenericNotify+0x94>
    2988:	18 f4       	brcc	.+6      	; 0x2990 <xTaskGenericNotify+0x5c>
    298a:	01 30       	cpi	r16, 0x01	; 1
    298c:	31 f0       	breq	.+12     	; 0x299a <xTaskGenericNotify+0x66>
    298e:	4d c0       	rjmp	.+154    	; 0x2a2a <xTaskGenericNotify+0xf6>
    2990:	03 30       	cpi	r16, 0x03	; 3
    2992:	79 f1       	breq	.+94     	; 0x29f2 <xTaskGenericNotify+0xbe>
    2994:	04 30       	cpi	r16, 0x04	; 4
    2996:	d1 f1       	breq	.+116    	; 0x2a0c <xTaskGenericNotify+0xd8>
    2998:	48 c0       	rjmp	.+144    	; 0x2a2a <xTaskGenericNotify+0xf6>
    299a:	66 0f       	add	r22, r22
    299c:	77 1f       	adc	r23, r23
    299e:	66 0f       	add	r22, r22
    29a0:	77 1f       	adc	r23, r23
    29a2:	fd 01       	movw	r30, r26
    29a4:	e6 0f       	add	r30, r22
    29a6:	f7 1f       	adc	r31, r23
    29a8:	87 a4       	ldd	r8, Z+47	; 0x2f
    29aa:	90 a8       	ldd	r9, Z+48	; 0x30
    29ac:	a1 a8       	ldd	r10, Z+49	; 0x31
    29ae:	b2 a8       	ldd	r11, Z+50	; 0x32
    29b0:	ba 01       	movw	r22, r20
    29b2:	a9 01       	movw	r20, r18
    29b4:	48 29       	or	r20, r8
    29b6:	59 29       	or	r21, r9
    29b8:	6a 29       	or	r22, r10
    29ba:	7b 29       	or	r23, r11
    29bc:	47 a7       	std	Z+47, r20	; 0x2f
    29be:	50 ab       	std	Z+48, r21	; 0x30
    29c0:	61 ab       	std	Z+49, r22	; 0x31
    29c2:	72 ab       	std	Z+50, r23	; 0x32
    29c4:	01 e0       	ldi	r16, 0x01	; 1
    29c6:	34 c0       	rjmp	.+104    	; 0x2a30 <xTaskGenericNotify+0xfc>
    29c8:	66 0f       	add	r22, r22
    29ca:	77 1f       	adc	r23, r23
    29cc:	66 0f       	add	r22, r22
    29ce:	77 1f       	adc	r23, r23
    29d0:	fd 01       	movw	r30, r26
    29d2:	e6 0f       	add	r30, r22
    29d4:	f7 1f       	adc	r31, r23
    29d6:	47 a5       	ldd	r20, Z+47	; 0x2f
    29d8:	50 a9       	ldd	r21, Z+48	; 0x30
    29da:	61 a9       	ldd	r22, Z+49	; 0x31
    29dc:	72 a9       	ldd	r23, Z+50	; 0x32
    29de:	4f 5f       	subi	r20, 0xFF	; 255
    29e0:	5f 4f       	sbci	r21, 0xFF	; 255
    29e2:	6f 4f       	sbci	r22, 0xFF	; 255
    29e4:	7f 4f       	sbci	r23, 0xFF	; 255
    29e6:	47 a7       	std	Z+47, r20	; 0x2f
    29e8:	50 ab       	std	Z+48, r21	; 0x30
    29ea:	61 ab       	std	Z+49, r22	; 0x31
    29ec:	72 ab       	std	Z+50, r23	; 0x32
    29ee:	01 e0       	ldi	r16, 0x01	; 1
    29f0:	1f c0       	rjmp	.+62     	; 0x2a30 <xTaskGenericNotify+0xfc>
    29f2:	66 0f       	add	r22, r22
    29f4:	77 1f       	adc	r23, r23
    29f6:	66 0f       	add	r22, r22
    29f8:	77 1f       	adc	r23, r23
    29fa:	fd 01       	movw	r30, r26
    29fc:	e6 0f       	add	r30, r22
    29fe:	f7 1f       	adc	r31, r23
    2a00:	27 a7       	std	Z+47, r18	; 0x2f
    2a02:	30 ab       	std	Z+48, r19	; 0x30
    2a04:	41 ab       	std	Z+49, r20	; 0x31
    2a06:	52 ab       	std	Z+50, r21	; 0x32
    2a08:	01 e0       	ldi	r16, 0x01	; 1
    2a0a:	12 c0       	rjmp	.+36     	; 0x2a30 <xTaskGenericNotify+0xfc>
    2a0c:	82 30       	cpi	r24, 0x02	; 2
    2a0e:	79 f0       	breq	.+30     	; 0x2a2e <xTaskGenericNotify+0xfa>
    2a10:	66 0f       	add	r22, r22
    2a12:	77 1f       	adc	r23, r23
    2a14:	66 0f       	add	r22, r22
    2a16:	77 1f       	adc	r23, r23
    2a18:	fd 01       	movw	r30, r26
    2a1a:	e6 0f       	add	r30, r22
    2a1c:	f7 1f       	adc	r31, r23
    2a1e:	27 a7       	std	Z+47, r18	; 0x2f
    2a20:	30 ab       	std	Z+48, r19	; 0x30
    2a22:	41 ab       	std	Z+49, r20	; 0x31
    2a24:	52 ab       	std	Z+50, r21	; 0x32
    2a26:	01 e0       	ldi	r16, 0x01	; 1
    2a28:	03 c0       	rjmp	.+6      	; 0x2a30 <xTaskGenericNotify+0xfc>
    2a2a:	01 e0       	ldi	r16, 0x01	; 1
    2a2c:	01 c0       	rjmp	.+2      	; 0x2a30 <xTaskGenericNotify+0xfc>
    2a2e:	00 e0       	ldi	r16, 0x00	; 0
    2a30:	81 30       	cpi	r24, 0x01	; 1
    2a32:	09 f0       	breq	.+2      	; 0x2a36 <xTaskGenericNotify+0x102>
    2a34:	69 c0       	rjmp	.+210    	; 0x2b08 <xTaskGenericNotify+0x1d4>
    2a36:	1c 96       	adiw	r26, 0x0c	; 12
    2a38:	ed 91       	ld	r30, X+
    2a3a:	fc 91       	ld	r31, X
    2a3c:	1d 97       	sbiw	r26, 0x0d	; 13
    2a3e:	16 96       	adiw	r26, 0x06	; 6
    2a40:	cd 91       	ld	r28, X+
    2a42:	dc 91       	ld	r29, X
    2a44:	17 97       	sbiw	r26, 0x07	; 7
    2a46:	18 96       	adiw	r26, 0x08	; 8
    2a48:	8d 91       	ld	r24, X+
    2a4a:	9c 91       	ld	r25, X
    2a4c:	19 97       	sbiw	r26, 0x09	; 9
    2a4e:	9f 83       	std	Y+7, r25	; 0x07
    2a50:	8e 83       	std	Y+6, r24	; 0x06
    2a52:	18 96       	adiw	r26, 0x08	; 8
    2a54:	cd 91       	ld	r28, X+
    2a56:	dc 91       	ld	r29, X
    2a58:	19 97       	sbiw	r26, 0x09	; 9
    2a5a:	16 96       	adiw	r26, 0x06	; 6
    2a5c:	8d 91       	ld	r24, X+
    2a5e:	9c 91       	ld	r25, X
    2a60:	17 97       	sbiw	r26, 0x07	; 7
    2a62:	9d 83       	std	Y+5, r25	; 0x05
    2a64:	8c 83       	std	Y+4, r24	; 0x04
    2a66:	81 81       	ldd	r24, Z+1	; 0x01
    2a68:	92 81       	ldd	r25, Z+2	; 0x02
    2a6a:	9d 01       	movw	r18, r26
    2a6c:	2e 5f       	subi	r18, 0xFE	; 254
    2a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a70:	82 17       	cp	r24, r18
    2a72:	93 07       	cpc	r25, r19
    2a74:	31 f4       	brne	.+12     	; 0x2a82 <xTaskGenericNotify+0x14e>
    2a76:	18 96       	adiw	r26, 0x08	; 8
    2a78:	8d 91       	ld	r24, X+
    2a7a:	9c 91       	ld	r25, X
    2a7c:	19 97       	sbiw	r26, 0x09	; 9
    2a7e:	92 83       	std	Z+2, r25	; 0x02
    2a80:	81 83       	std	Z+1, r24	; 0x01
    2a82:	1d 96       	adiw	r26, 0x0d	; 13
    2a84:	1c 92       	st	X, r1
    2a86:	1e 92       	st	-X, r1
    2a88:	1c 97       	sbiw	r26, 0x0c	; 12
    2a8a:	80 81       	ld	r24, Z
    2a8c:	81 50       	subi	r24, 0x01	; 1
    2a8e:	80 83       	st	Z, r24
    2a90:	5a 96       	adiw	r26, 0x1a	; 26
    2a92:	ec 91       	ld	r30, X
    2a94:	5a 97       	sbiw	r26, 0x1a	; 26
    2a96:	80 91 41 17 	lds	r24, 0x1741	; 0x801741 <uxTopReadyPriority>
    2a9a:	8e 17       	cp	r24, r30
    2a9c:	10 f4       	brcc	.+4      	; 0x2aa2 <xTaskGenericNotify+0x16e>
    2a9e:	e0 93 41 17 	sts	0x1741, r30	; 0x801741 <uxTopReadyPriority>
    2aa2:	8b e0       	ldi	r24, 0x0B	; 11
    2aa4:	8e 9f       	mul	r24, r30
    2aa6:	f0 01       	movw	r30, r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	ed 57       	subi	r30, 0x7D	; 125
    2aac:	f8 4e       	sbci	r31, 0xE8	; 232
    2aae:	01 80       	ldd	r0, Z+1	; 0x01
    2ab0:	f2 81       	ldd	r31, Z+2	; 0x02
    2ab2:	e0 2d       	mov	r30, r0
    2ab4:	17 96       	adiw	r26, 0x07	; 7
    2ab6:	fc 93       	st	X, r31
    2ab8:	ee 93       	st	-X, r30
    2aba:	16 97       	sbiw	r26, 0x06	; 6
    2abc:	46 81       	ldd	r20, Z+6	; 0x06
    2abe:	57 81       	ldd	r21, Z+7	; 0x07
    2ac0:	19 96       	adiw	r26, 0x09	; 9
    2ac2:	5c 93       	st	X, r21
    2ac4:	4e 93       	st	-X, r20
    2ac6:	18 97       	sbiw	r26, 0x08	; 8
    2ac8:	c6 81       	ldd	r28, Z+6	; 0x06
    2aca:	d7 81       	ldd	r29, Z+7	; 0x07
    2acc:	3d 83       	std	Y+5, r19	; 0x05
    2ace:	2c 83       	std	Y+4, r18	; 0x04
    2ad0:	37 83       	std	Z+7, r19	; 0x07
    2ad2:	26 83       	std	Z+6, r18	; 0x06
    2ad4:	5a 96       	adiw	r26, 0x1a	; 26
    2ad6:	ec 91       	ld	r30, X
    2ad8:	5a 97       	sbiw	r26, 0x1a	; 26
    2ada:	8e 9f       	mul	r24, r30
    2adc:	f0 01       	movw	r30, r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	ed 57       	subi	r30, 0x7D	; 125
    2ae2:	f8 4e       	sbci	r31, 0xE8	; 232
    2ae4:	1d 96       	adiw	r26, 0x0d	; 13
    2ae6:	fc 93       	st	X, r31
    2ae8:	ee 93       	st	-X, r30
    2aea:	1c 97       	sbiw	r26, 0x0c	; 12
    2aec:	80 81       	ld	r24, Z
    2aee:	8f 5f       	subi	r24, 0xFF	; 255
    2af0:	80 83       	st	Z, r24
    2af2:	5a 96       	adiw	r26, 0x1a	; 26
    2af4:	9c 91       	ld	r25, X
    2af6:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2afa:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2afe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b00:	89 17       	cp	r24, r25
    2b02:	10 f4       	brcc	.+4      	; 0x2b08 <xTaskGenericNotify+0x1d4>
    2b04:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vPortYield>
    2b08:	0f 90       	pop	r0
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	80 2f       	mov	r24, r16
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	0f 91       	pop	r16
    2b14:	ff 90       	pop	r15
    2b16:	ef 90       	pop	r14
    2b18:	bf 90       	pop	r11
    2b1a:	af 90       	pop	r10
    2b1c:	9f 90       	pop	r9
    2b1e:	8f 90       	pop	r8
    2b20:	08 95       	ret

00002b22 <xTaskGenericNotifyFromISR>:
    2b22:	8f 92       	push	r8
    2b24:	9f 92       	push	r9
    2b26:	af 92       	push	r10
    2b28:	bf 92       	push	r11
    2b2a:	cf 92       	push	r12
    2b2c:	df 92       	push	r13
    2b2e:	ef 92       	push	r14
    2b30:	ff 92       	push	r15
    2b32:	0f 93       	push	r16
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	dc 01       	movw	r26, r24
    2b3a:	e1 14       	cp	r14, r1
    2b3c:	f1 04       	cpc	r15, r1
    2b3e:	89 f0       	breq	.+34     	; 0x2b62 <xTaskGenericNotifyFromISR+0x40>
    2b40:	e6 2f       	mov	r30, r22
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	ee 0f       	add	r30, r30
    2b46:	ff 1f       	adc	r31, r31
    2b48:	ee 0f       	add	r30, r30
    2b4a:	ff 1f       	adc	r31, r31
    2b4c:	e8 0f       	add	r30, r24
    2b4e:	f9 1f       	adc	r31, r25
    2b50:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b52:	90 a8       	ldd	r9, Z+48	; 0x30
    2b54:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b56:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b58:	f7 01       	movw	r30, r14
    2b5a:	80 82       	st	Z, r8
    2b5c:	91 82       	std	Z+1, r9	; 0x01
    2b5e:	a2 82       	std	Z+2, r10	; 0x02
    2b60:	b3 82       	std	Z+3, r11	; 0x03
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	fd 01       	movw	r30, r26
    2b66:	e6 0f       	add	r30, r22
    2b68:	f7 1f       	adc	r31, r23
    2b6a:	93 a9       	ldd	r25, Z+51	; 0x33
    2b6c:	82 e0       	ldi	r24, 0x02	; 2
    2b6e:	83 ab       	std	Z+51, r24	; 0x33
    2b70:	02 30       	cpi	r16, 0x02	; 2
    2b72:	01 f1       	breq	.+64     	; 0x2bb4 <xTaskGenericNotifyFromISR+0x92>
    2b74:	18 f4       	brcc	.+6      	; 0x2b7c <xTaskGenericNotifyFromISR+0x5a>
    2b76:	01 30       	cpi	r16, 0x01	; 1
    2b78:	31 f0       	breq	.+12     	; 0x2b86 <xTaskGenericNotifyFromISR+0x64>
    2b7a:	4d c0       	rjmp	.+154    	; 0x2c16 <xTaskGenericNotifyFromISR+0xf4>
    2b7c:	03 30       	cpi	r16, 0x03	; 3
    2b7e:	79 f1       	breq	.+94     	; 0x2bde <xTaskGenericNotifyFromISR+0xbc>
    2b80:	04 30       	cpi	r16, 0x04	; 4
    2b82:	d1 f1       	breq	.+116    	; 0x2bf8 <xTaskGenericNotifyFromISR+0xd6>
    2b84:	48 c0       	rjmp	.+144    	; 0x2c16 <xTaskGenericNotifyFromISR+0xf4>
    2b86:	66 0f       	add	r22, r22
    2b88:	77 1f       	adc	r23, r23
    2b8a:	66 0f       	add	r22, r22
    2b8c:	77 1f       	adc	r23, r23
    2b8e:	fd 01       	movw	r30, r26
    2b90:	e6 0f       	add	r30, r22
    2b92:	f7 1f       	adc	r31, r23
    2b94:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b96:	90 a8       	ldd	r9, Z+48	; 0x30
    2b98:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b9a:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b9c:	ba 01       	movw	r22, r20
    2b9e:	a9 01       	movw	r20, r18
    2ba0:	48 29       	or	r20, r8
    2ba2:	59 29       	or	r21, r9
    2ba4:	6a 29       	or	r22, r10
    2ba6:	7b 29       	or	r23, r11
    2ba8:	47 a7       	std	Z+47, r20	; 0x2f
    2baa:	50 ab       	std	Z+48, r21	; 0x30
    2bac:	61 ab       	std	Z+49, r22	; 0x31
    2bae:	72 ab       	std	Z+50, r23	; 0x32
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	34 c0       	rjmp	.+104    	; 0x2c1c <xTaskGenericNotifyFromISR+0xfa>
    2bb4:	66 0f       	add	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	66 0f       	add	r22, r22
    2bba:	77 1f       	adc	r23, r23
    2bbc:	fd 01       	movw	r30, r26
    2bbe:	e6 0f       	add	r30, r22
    2bc0:	f7 1f       	adc	r31, r23
    2bc2:	47 a5       	ldd	r20, Z+47	; 0x2f
    2bc4:	50 a9       	ldd	r21, Z+48	; 0x30
    2bc6:	61 a9       	ldd	r22, Z+49	; 0x31
    2bc8:	72 a9       	ldd	r23, Z+50	; 0x32
    2bca:	4f 5f       	subi	r20, 0xFF	; 255
    2bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bce:	6f 4f       	sbci	r22, 0xFF	; 255
    2bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd2:	47 a7       	std	Z+47, r20	; 0x2f
    2bd4:	50 ab       	std	Z+48, r21	; 0x30
    2bd6:	61 ab       	std	Z+49, r22	; 0x31
    2bd8:	72 ab       	std	Z+50, r23	; 0x32
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	1f c0       	rjmp	.+62     	; 0x2c1c <xTaskGenericNotifyFromISR+0xfa>
    2bde:	66 0f       	add	r22, r22
    2be0:	77 1f       	adc	r23, r23
    2be2:	66 0f       	add	r22, r22
    2be4:	77 1f       	adc	r23, r23
    2be6:	fd 01       	movw	r30, r26
    2be8:	e6 0f       	add	r30, r22
    2bea:	f7 1f       	adc	r31, r23
    2bec:	27 a7       	std	Z+47, r18	; 0x2f
    2bee:	30 ab       	std	Z+48, r19	; 0x30
    2bf0:	41 ab       	std	Z+49, r20	; 0x31
    2bf2:	52 ab       	std	Z+50, r21	; 0x32
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	12 c0       	rjmp	.+36     	; 0x2c1c <xTaskGenericNotifyFromISR+0xfa>
    2bf8:	92 30       	cpi	r25, 0x02	; 2
    2bfa:	79 f0       	breq	.+30     	; 0x2c1a <xTaskGenericNotifyFromISR+0xf8>
    2bfc:	66 0f       	add	r22, r22
    2bfe:	77 1f       	adc	r23, r23
    2c00:	66 0f       	add	r22, r22
    2c02:	77 1f       	adc	r23, r23
    2c04:	fd 01       	movw	r30, r26
    2c06:	e6 0f       	add	r30, r22
    2c08:	f7 1f       	adc	r31, r23
    2c0a:	27 a7       	std	Z+47, r18	; 0x2f
    2c0c:	30 ab       	std	Z+48, r19	; 0x30
    2c0e:	41 ab       	std	Z+49, r20	; 0x31
    2c10:	52 ab       	std	Z+50, r21	; 0x32
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	03 c0       	rjmp	.+6      	; 0x2c1c <xTaskGenericNotifyFromISR+0xfa>
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <xTaskGenericNotifyFromISR+0xfa>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	91 30       	cpi	r25, 0x01	; 1
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <xTaskGenericNotifyFromISR+0x100>
    2c20:	96 c0       	rjmp	.+300    	; 0x2d4e <xTaskGenericNotifyFromISR+0x22c>
    2c22:	90 91 32 17 	lds	r25, 0x1732	; 0x801732 <uxSchedulerSuspended>
    2c26:	91 11       	cpse	r25, r1
    2c28:	5f c0       	rjmp	.+190    	; 0x2ce8 <xTaskGenericNotifyFromISR+0x1c6>
    2c2a:	1c 96       	adiw	r26, 0x0c	; 12
    2c2c:	ed 91       	ld	r30, X+
    2c2e:	fc 91       	ld	r31, X
    2c30:	1d 97       	sbiw	r26, 0x0d	; 13
    2c32:	16 96       	adiw	r26, 0x06	; 6
    2c34:	cd 91       	ld	r28, X+
    2c36:	dc 91       	ld	r29, X
    2c38:	17 97       	sbiw	r26, 0x07	; 7
    2c3a:	18 96       	adiw	r26, 0x08	; 8
    2c3c:	2d 91       	ld	r18, X+
    2c3e:	3c 91       	ld	r19, X
    2c40:	19 97       	sbiw	r26, 0x09	; 9
    2c42:	3f 83       	std	Y+7, r19	; 0x07
    2c44:	2e 83       	std	Y+6, r18	; 0x06
    2c46:	18 96       	adiw	r26, 0x08	; 8
    2c48:	cd 91       	ld	r28, X+
    2c4a:	dc 91       	ld	r29, X
    2c4c:	19 97       	sbiw	r26, 0x09	; 9
    2c4e:	16 96       	adiw	r26, 0x06	; 6
    2c50:	2d 91       	ld	r18, X+
    2c52:	3c 91       	ld	r19, X
    2c54:	17 97       	sbiw	r26, 0x07	; 7
    2c56:	3d 83       	std	Y+5, r19	; 0x05
    2c58:	2c 83       	std	Y+4, r18	; 0x04
    2c5a:	41 81       	ldd	r20, Z+1	; 0x01
    2c5c:	52 81       	ldd	r21, Z+2	; 0x02
    2c5e:	9d 01       	movw	r18, r26
    2c60:	2e 5f       	subi	r18, 0xFE	; 254
    2c62:	3f 4f       	sbci	r19, 0xFF	; 255
    2c64:	42 17       	cp	r20, r18
    2c66:	53 07       	cpc	r21, r19
    2c68:	31 f4       	brne	.+12     	; 0x2c76 <xTaskGenericNotifyFromISR+0x154>
    2c6a:	18 96       	adiw	r26, 0x08	; 8
    2c6c:	4d 91       	ld	r20, X+
    2c6e:	5c 91       	ld	r21, X
    2c70:	19 97       	sbiw	r26, 0x09	; 9
    2c72:	52 83       	std	Z+2, r21	; 0x02
    2c74:	41 83       	std	Z+1, r20	; 0x01
    2c76:	1d 96       	adiw	r26, 0x0d	; 13
    2c78:	1c 92       	st	X, r1
    2c7a:	1e 92       	st	-X, r1
    2c7c:	1c 97       	sbiw	r26, 0x0c	; 12
    2c7e:	90 81       	ld	r25, Z
    2c80:	91 50       	subi	r25, 0x01	; 1
    2c82:	90 83       	st	Z, r25
    2c84:	5a 96       	adiw	r26, 0x1a	; 26
    2c86:	ec 91       	ld	r30, X
    2c88:	5a 97       	sbiw	r26, 0x1a	; 26
    2c8a:	90 91 41 17 	lds	r25, 0x1741	; 0x801741 <uxTopReadyPriority>
    2c8e:	9e 17       	cp	r25, r30
    2c90:	10 f4       	brcc	.+4      	; 0x2c96 <xTaskGenericNotifyFromISR+0x174>
    2c92:	e0 93 41 17 	sts	0x1741, r30	; 0x801741 <uxTopReadyPriority>
    2c96:	9b e0       	ldi	r25, 0x0B	; 11
    2c98:	9e 9f       	mul	r25, r30
    2c9a:	f0 01       	movw	r30, r0
    2c9c:	11 24       	eor	r1, r1
    2c9e:	ed 57       	subi	r30, 0x7D	; 125
    2ca0:	f8 4e       	sbci	r31, 0xE8	; 232
    2ca2:	01 80       	ldd	r0, Z+1	; 0x01
    2ca4:	f2 81       	ldd	r31, Z+2	; 0x02
    2ca6:	e0 2d       	mov	r30, r0
    2ca8:	17 96       	adiw	r26, 0x07	; 7
    2caa:	fc 93       	st	X, r31
    2cac:	ee 93       	st	-X, r30
    2cae:	16 97       	sbiw	r26, 0x06	; 6
    2cb0:	46 81       	ldd	r20, Z+6	; 0x06
    2cb2:	57 81       	ldd	r21, Z+7	; 0x07
    2cb4:	19 96       	adiw	r26, 0x09	; 9
    2cb6:	5c 93       	st	X, r21
    2cb8:	4e 93       	st	-X, r20
    2cba:	18 97       	sbiw	r26, 0x08	; 8
    2cbc:	c6 81       	ldd	r28, Z+6	; 0x06
    2cbe:	d7 81       	ldd	r29, Z+7	; 0x07
    2cc0:	3d 83       	std	Y+5, r19	; 0x05
    2cc2:	2c 83       	std	Y+4, r18	; 0x04
    2cc4:	37 83       	std	Z+7, r19	; 0x07
    2cc6:	26 83       	std	Z+6, r18	; 0x06
    2cc8:	5a 96       	adiw	r26, 0x1a	; 26
    2cca:	ec 91       	ld	r30, X
    2ccc:	5a 97       	sbiw	r26, 0x1a	; 26
    2cce:	9e 9f       	mul	r25, r30
    2cd0:	f0 01       	movw	r30, r0
    2cd2:	11 24       	eor	r1, r1
    2cd4:	ed 57       	subi	r30, 0x7D	; 125
    2cd6:	f8 4e       	sbci	r31, 0xE8	; 232
    2cd8:	1d 96       	adiw	r26, 0x0d	; 13
    2cda:	fc 93       	st	X, r31
    2cdc:	ee 93       	st	-X, r30
    2cde:	1c 97       	sbiw	r26, 0x0c	; 12
    2ce0:	90 81       	ld	r25, Z
    2ce2:	9f 5f       	subi	r25, 0xFF	; 255
    2ce4:	90 83       	st	Z, r25
    2ce6:	21 c0       	rjmp	.+66     	; 0x2d2a <xTaskGenericNotifyFromISR+0x208>
    2ce8:	6e e5       	ldi	r22, 0x5E	; 94
    2cea:	77 e1       	ldi	r23, 0x17	; 23
    2cec:	fb 01       	movw	r30, r22
    2cee:	c1 81       	ldd	r28, Z+1	; 0x01
    2cf0:	d2 81       	ldd	r29, Z+2	; 0x02
    2cf2:	53 96       	adiw	r26, 0x13	; 19
    2cf4:	dc 93       	st	X, r29
    2cf6:	ce 93       	st	-X, r28
    2cf8:	52 97       	sbiw	r26, 0x12	; 18
    2cfa:	2e 81       	ldd	r18, Y+6	; 0x06
    2cfc:	3f 81       	ldd	r19, Y+7	; 0x07
    2cfe:	55 96       	adiw	r26, 0x15	; 21
    2d00:	3c 93       	st	X, r19
    2d02:	2e 93       	st	-X, r18
    2d04:	54 97       	sbiw	r26, 0x14	; 20
    2d06:	4e 81       	ldd	r20, Y+6	; 0x06
    2d08:	5f 81       	ldd	r21, Y+7	; 0x07
    2d0a:	9d 01       	movw	r18, r26
    2d0c:	22 5f       	subi	r18, 0xF2	; 242
    2d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d10:	fa 01       	movw	r30, r20
    2d12:	35 83       	std	Z+5, r19	; 0x05
    2d14:	24 83       	std	Z+4, r18	; 0x04
    2d16:	3f 83       	std	Y+7, r19	; 0x07
    2d18:	2e 83       	std	Y+6, r18	; 0x06
    2d1a:	59 96       	adiw	r26, 0x19	; 25
    2d1c:	7c 93       	st	X, r23
    2d1e:	6e 93       	st	-X, r22
    2d20:	58 97       	sbiw	r26, 0x18	; 24
    2d22:	fb 01       	movw	r30, r22
    2d24:	90 81       	ld	r25, Z
    2d26:	9f 5f       	subi	r25, 0xFF	; 255
    2d28:	90 83       	st	Z, r25
    2d2a:	5a 96       	adiw	r26, 0x1a	; 26
    2d2c:	2c 91       	ld	r18, X
    2d2e:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2d32:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>
    2d36:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d38:	92 17       	cp	r25, r18
    2d3a:	48 f4       	brcc	.+18     	; 0x2d4e <xTaskGenericNotifyFromISR+0x22c>
    2d3c:	c1 14       	cp	r12, r1
    2d3e:	d1 04       	cpc	r13, r1
    2d40:	19 f0       	breq	.+6      	; 0x2d48 <xTaskGenericNotifyFromISR+0x226>
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	f6 01       	movw	r30, r12
    2d46:	90 83       	st	Z, r25
    2d48:	91 e0       	ldi	r25, 0x01	; 1
    2d4a:	90 93 3b 17 	sts	0x173B, r25	; 0x80173b <xYieldPending>
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	0f 91       	pop	r16
    2d54:	ff 90       	pop	r15
    2d56:	ef 90       	pop	r14
    2d58:	df 90       	pop	r13
    2d5a:	cf 90       	pop	r12
    2d5c:	bf 90       	pop	r11
    2d5e:	af 90       	pop	r10
    2d60:	9f 90       	pop	r9
    2d62:	8f 90       	pop	r8
    2d64:	08 95       	ret

00002d66 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	21 f4       	brne	.+8      	; 0x2d72 <xTaskGenericNotifyStateClear+0xc>
    2d6a:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <pxCurrentTCB>
    2d6e:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	f8 94       	cli
    2d76:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	e6 0f       	add	r30, r22
    2d7e:	f7 1f       	adc	r31, r23
    2d80:	23 a9       	ldd	r18, Z+51	; 0x33
    2d82:	22 30       	cpi	r18, 0x02	; 2
    2d84:	31 f4       	brne	.+12     	; 0x2d92 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2d86:	fc 01       	movw	r30, r24
    2d88:	e6 0f       	add	r30, r22
    2d8a:	f7 1f       	adc	r31, r23
    2d8c:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	01 c0       	rjmp	.+2      	; 0x2d94 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2d92:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2d94:	0f 90       	pop	r0
    2d96:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2d98:	08 95       	ret

00002d9a <prvGetNextExpireTime>:
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	e0 91 fd 17 	lds	r30, 0x17FD	; 0x8017fd <pxCurrentTimerList>
    2da0:	f0 91 fe 17 	lds	r31, 0x17FE	; 0x8017fe <pxCurrentTimerList+0x1>
    2da4:	80 81       	ld	r24, Z
    2da6:	91 e0       	ldi	r25, 0x01	; 1
    2da8:	81 11       	cpse	r24, r1
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	9c 93       	st	X, r25
    2dae:	91 11       	cpse	r25, r1
    2db0:	08 c0       	rjmp	.+16     	; 0x2dc2 <prvGetNextExpireTime+0x28>
    2db2:	07 80       	ldd	r0, Z+7	; 0x07
    2db4:	f0 85       	ldd	r31, Z+8	; 0x08
    2db6:	e0 2d       	mov	r30, r0
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	08 95       	ret
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	08 95       	ret

00002dca <prvInsertTimerInActiveList>:
    2dca:	cf 92       	push	r12
    2dcc:	df 92       	push	r13
    2dce:	ef 92       	push	r14
    2dd0:	ff 92       	push	r15
    2dd2:	0f 93       	push	r16
    2dd4:	1f 93       	push	r17
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	42 83       	std	Z+2, r20	; 0x02
    2dda:	53 83       	std	Z+3, r21	; 0x03
    2ddc:	64 83       	std	Z+4, r22	; 0x04
    2dde:	75 83       	std	Z+5, r23	; 0x05
    2de0:	93 87       	std	Z+11, r25	; 0x0b
    2de2:	82 87       	std	Z+10, r24	; 0x0a
    2de4:	04 17       	cp	r16, r20
    2de6:	15 07       	cpc	r17, r21
    2de8:	26 07       	cpc	r18, r22
    2dea:	37 07       	cpc	r19, r23
    2dec:	c0 f0       	brcs	.+48     	; 0x2e1e <prvInsertTimerInActiveList+0x54>
    2dee:	0c 19       	sub	r16, r12
    2df0:	1d 09       	sbc	r17, r13
    2df2:	2e 09       	sbc	r18, r14
    2df4:	3f 09       	sbc	r19, r15
    2df6:	86 85       	ldd	r24, Z+14	; 0x0e
    2df8:	97 85       	ldd	r25, Z+15	; 0x0f
    2dfa:	a0 89       	ldd	r26, Z+16	; 0x10
    2dfc:	b1 89       	ldd	r27, Z+17	; 0x11
    2dfe:	08 17       	cp	r16, r24
    2e00:	19 07       	cpc	r17, r25
    2e02:	2a 07       	cpc	r18, r26
    2e04:	3b 07       	cpc	r19, r27
    2e06:	00 f5       	brcc	.+64     	; 0x2e48 <prvInsertTimerInActiveList+0x7e>
    2e08:	bf 01       	movw	r22, r30
    2e0a:	6e 5f       	subi	r22, 0xFE	; 254
    2e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0e:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <pxOverflowTimerList>
    2e12:	90 91 fc 17 	lds	r25, 0x17FC	; 0x8017fc <pxOverflowTimerList+0x1>
    2e16:	0e 94 27 03 	call	0x64e	; 0x64e <vListInsert>
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	18 c0       	rjmp	.+48     	; 0x2e4e <prvInsertTimerInActiveList+0x84>
    2e1e:	0c 15       	cp	r16, r12
    2e20:	1d 05       	cpc	r17, r13
    2e22:	2e 05       	cpc	r18, r14
    2e24:	3f 05       	cpc	r19, r15
    2e26:	28 f4       	brcc	.+10     	; 0x2e32 <prvInsertTimerInActiveList+0x68>
    2e28:	4c 15       	cp	r20, r12
    2e2a:	5d 05       	cpc	r21, r13
    2e2c:	6e 05       	cpc	r22, r14
    2e2e:	7f 05       	cpc	r23, r15
    2e30:	68 f4       	brcc	.+26     	; 0x2e4c <prvInsertTimerInActiveList+0x82>
    2e32:	bf 01       	movw	r22, r30
    2e34:	6e 5f       	subi	r22, 0xFE	; 254
    2e36:	7f 4f       	sbci	r23, 0xFF	; 255
    2e38:	80 91 fd 17 	lds	r24, 0x17FD	; 0x8017fd <pxCurrentTimerList>
    2e3c:	90 91 fe 17 	lds	r25, 0x17FE	; 0x8017fe <pxCurrentTimerList+0x1>
    2e40:	0e 94 27 03 	call	0x64e	; 0x64e <vListInsert>
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	03 c0       	rjmp	.+6      	; 0x2e4e <prvInsertTimerInActiveList+0x84>
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	01 c0       	rjmp	.+2      	; 0x2e4e <prvInsertTimerInActiveList+0x84>
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	ff 90       	pop	r15
    2e54:	ef 90       	pop	r14
    2e56:	df 90       	pop	r13
    2e58:	cf 90       	pop	r12
    2e5a:	08 95       	ret

00002e5c <prvCheckForValidListAndQueue>:
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	0f 92       	push	r0
    2e62:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <xTimerQueue>
    2e66:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <xTimerQueue+0x1>
    2e6a:	89 2b       	or	r24, r25
    2e6c:	e9 f4       	brne	.+58     	; 0x2ea8 <prvCheckForValidListAndQueue+0x4c>
    2e6e:	8a e0       	ldi	r24, 0x0A	; 10
    2e70:	98 e1       	ldi	r25, 0x18	; 24
    2e72:	0e 94 12 03 	call	0x624	; 0x624 <vListInitialise>
    2e76:	8f ef       	ldi	r24, 0xFF	; 255
    2e78:	97 e1       	ldi	r25, 0x17	; 23
    2e7a:	0e 94 12 03 	call	0x624	; 0x624 <vListInitialise>
    2e7e:	8a e0       	ldi	r24, 0x0A	; 10
    2e80:	98 e1       	ldi	r25, 0x18	; 24
    2e82:	90 93 fe 17 	sts	0x17FE, r25	; 0x8017fe <pxCurrentTimerList+0x1>
    2e86:	80 93 fd 17 	sts	0x17FD, r24	; 0x8017fd <pxCurrentTimerList>
    2e8a:	8f ef       	ldi	r24, 0xFF	; 255
    2e8c:	97 e1       	ldi	r25, 0x17	; 23
    2e8e:	90 93 fc 17 	sts	0x17FC, r25	; 0x8017fc <pxOverflowTimerList+0x1>
    2e92:	80 93 fb 17 	sts	0x17FB, r24	; 0x8017fb <pxOverflowTimerList>
    2e96:	40 e0       	ldi	r20, 0x00	; 0
    2e98:	67 e0       	ldi	r22, 0x07	; 7
    2e9a:	8a e0       	ldi	r24, 0x0A	; 10
    2e9c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <xQueueGenericCreate>
    2ea0:	90 93 fa 17 	sts	0x17FA, r25	; 0x8017fa <xTimerQueue+0x1>
    2ea4:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <xTimerQueue>
    2ea8:	0f 90       	pop	r0
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	08 95       	ret

00002eae <xTimerCreateTimerTask>:
    2eae:	ef 92       	push	r14
    2eb0:	ff 92       	push	r15
    2eb2:	0f 93       	push	r16
    2eb4:	d3 df       	rcall	.-90     	; 0x2e5c <prvCheckForValidListAndQueue>
    2eb6:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <xTimerQueue>
    2eba:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <xTimerQueue+0x1>
    2ebe:	89 2b       	or	r24, r25
    2ec0:	91 f0       	breq	.+36     	; 0x2ee6 <xTimerCreateTimerTask+0x38>
    2ec2:	0f 2e       	mov	r0, r31
    2ec4:	f7 ef       	ldi	r31, 0xF7	; 247
    2ec6:	ef 2e       	mov	r14, r31
    2ec8:	f7 e1       	ldi	r31, 0x17	; 23
    2eca:	ff 2e       	mov	r15, r31
    2ecc:	f0 2d       	mov	r31, r0
    2ece:	03 e0       	ldi	r16, 0x03	; 3
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 ec       	ldi	r20, 0xC0	; 192
    2ed6:	50 e0       	ldi	r21, 0x00	; 0
    2ed8:	6f e9       	ldi	r22, 0x9F	; 159
    2eda:	72 e0       	ldi	r23, 0x02	; 2
    2edc:	87 ed       	ldi	r24, 0xD7	; 215
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
    2ee4:	01 c0       	rjmp	.+2      	; 0x2ee8 <xTimerCreateTimerTask+0x3a>
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	08 95       	ret

00002ef0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2ef0:	8f 92       	push	r8
    2ef2:	9f 92       	push	r9
    2ef4:	af 92       	push	r10
    2ef6:	bf 92       	push	r11
    2ef8:	cf 92       	push	r12
    2efa:	df 92       	push	r13
    2efc:	ef 92       	push	r14
    2efe:	ff 92       	push	r15
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	27 97       	sbiw	r28, 0x07	; 7
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2f18:	e0 91 f9 17 	lds	r30, 0x17F9	; 0x8017f9 <xTimerQueue>
    2f1c:	f0 91 fa 17 	lds	r31, 0x17FA	; 0x8017fa <xTimerQueue+0x1>
    2f20:	30 97       	sbiw	r30, 0x00	; 0
    2f22:	81 f1       	breq	.+96     	; 0x2f84 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2f24:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2f26:	2a 83       	std	Y+2, r18	; 0x02
    2f28:	3b 83       	std	Y+3, r19	; 0x03
    2f2a:	4c 83       	std	Y+4, r20	; 0x04
    2f2c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2f2e:	9f 83       	std	Y+7, r25	; 0x07
    2f30:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2f32:	66 30       	cpi	r22, 0x06	; 6
    2f34:	f4 f4       	brge	.+60     	; 0x2f72 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2f36:	ee da       	rcall	.-2596   	; 0x2514 <xTaskGetSchedulerState>
    2f38:	82 30       	cpi	r24, 0x02	; 2
    2f3a:	69 f4       	brne	.+26     	; 0x2f56 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2f3c:	00 e0       	ldi	r16, 0x00	; 0
    2f3e:	a7 01       	movw	r20, r14
    2f40:	96 01       	movw	r18, r12
    2f42:	be 01       	movw	r22, r28
    2f44:	6f 5f       	subi	r22, 0xFF	; 255
    2f46:	7f 4f       	sbci	r23, 0xFF	; 255
    2f48:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <xTimerQueue>
    2f4c:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <xTimerQueue+0x1>
    2f50:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xQueueGenericSend>
    2f54:	18 c0       	rjmp	.+48     	; 0x2f86 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2f56:	00 e0       	ldi	r16, 0x00	; 0
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	a9 01       	movw	r20, r18
    2f5e:	be 01       	movw	r22, r28
    2f60:	6f 5f       	subi	r22, 0xFF	; 255
    2f62:	7f 4f       	sbci	r23, 0xFF	; 255
    2f64:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <xTimerQueue>
    2f68:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <xTimerQueue+0x1>
    2f6c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xQueueGenericSend>
    2f70:	0a c0       	rjmp	.+20     	; 0x2f86 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	a8 01       	movw	r20, r16
    2f76:	be 01       	movw	r22, r28
    2f78:	6f 5f       	subi	r22, 0xFF	; 255
    2f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7c:	cf 01       	movw	r24, r30
    2f7e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xQueueGenericSendFromISR>
    2f82:	01 c0       	rjmp	.+2      	; 0x2f86 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2f84:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2f86:	27 96       	adiw	r28, 0x07	; 7
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	f8 94       	cli
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	0f be       	out	0x3f, r0	; 63
    2f90:	cd bf       	out	0x3d, r28	; 61
    2f92:	df 91       	pop	r29
    2f94:	cf 91       	pop	r28
    2f96:	1f 91       	pop	r17
    2f98:	0f 91       	pop	r16
    2f9a:	ff 90       	pop	r15
    2f9c:	ef 90       	pop	r14
    2f9e:	df 90       	pop	r13
    2fa0:	cf 90       	pop	r12
    2fa2:	bf 90       	pop	r11
    2fa4:	af 90       	pop	r10
    2fa6:	9f 90       	pop	r9
    2fa8:	8f 90       	pop	r8
    2faa:	08 95       	ret

00002fac <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2fac:	8f 92       	push	r8
    2fae:	9f 92       	push	r9
    2fb0:	af 92       	push	r10
    2fb2:	bf 92       	push	r11
    2fb4:	cf 92       	push	r12
    2fb6:	df 92       	push	r13
    2fb8:	ef 92       	push	r14
    2fba:	ff 92       	push	r15
    2fbc:	0f 93       	push	r16
    2fbe:	1f 93       	push	r17
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2fc4:	3b c0       	rjmp	.+118    	; 0x303c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2fc6:	07 80       	ldd	r0, Z+7	; 0x07
    2fc8:	f0 85       	ldd	r31, Z+8	; 0x08
    2fca:	e0 2d       	mov	r30, r0
    2fcc:	80 80       	ld	r8, Z
    2fce:	91 80       	ldd	r9, Z+1	; 0x01
    2fd0:	a2 80       	ldd	r10, Z+2	; 0x02
    2fd2:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2fd4:	c0 85       	ldd	r28, Z+8	; 0x08
    2fd6:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2fd8:	8e 01       	movw	r16, r28
    2fda:	0e 5f       	subi	r16, 0xFE	; 254
    2fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fde:	c8 01       	movw	r24, r16
    2fe0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2fe4:	ec 89       	ldd	r30, Y+20	; 0x14
    2fe6:	fd 89       	ldd	r31, Y+21	; 0x15
    2fe8:	ce 01       	movw	r24, r28
    2fea:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2fec:	8e 89       	ldd	r24, Y+22	; 0x16
    2fee:	82 ff       	sbrs	r24, 2
    2ff0:	25 c0       	rjmp	.+74     	; 0x303c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2ff2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ff4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ff6:	a8 89       	ldd	r26, Y+16	; 0x10
    2ff8:	b9 89       	ldd	r27, Y+17	; 0x11
    2ffa:	88 0d       	add	r24, r8
    2ffc:	99 1d       	adc	r25, r9
    2ffe:	aa 1d       	adc	r26, r10
    3000:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3002:	88 16       	cp	r8, r24
    3004:	99 06       	cpc	r9, r25
    3006:	aa 06       	cpc	r10, r26
    3008:	bb 06       	cpc	r11, r27
    300a:	70 f4       	brcc	.+28     	; 0x3028 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    300c:	8a 83       	std	Y+2, r24	; 0x02
    300e:	9b 83       	std	Y+3, r25	; 0x03
    3010:	ac 83       	std	Y+4, r26	; 0x04
    3012:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3014:	db 87       	std	Y+11, r29	; 0x0b
    3016:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3018:	b8 01       	movw	r22, r16
    301a:	80 91 fd 17 	lds	r24, 0x17FD	; 0x8017fd <pxCurrentTimerList>
    301e:	90 91 fe 17 	lds	r25, 0x17FE	; 0x8017fe <pxCurrentTimerList+0x1>
    3022:	0e 94 27 03 	call	0x64e	; 0x64e <vListInsert>
    3026:	0a c0       	rjmp	.+20     	; 0x303c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3028:	c1 2c       	mov	r12, r1
    302a:	d1 2c       	mov	r13, r1
    302c:	76 01       	movw	r14, r12
    302e:	00 e0       	ldi	r16, 0x00	; 0
    3030:	10 e0       	ldi	r17, 0x00	; 0
    3032:	a5 01       	movw	r20, r10
    3034:	94 01       	movw	r18, r8
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	ce 01       	movw	r24, r28
    303a:	5a df       	rcall	.-332    	; 0x2ef0 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    303c:	e0 91 fd 17 	lds	r30, 0x17FD	; 0x8017fd <pxCurrentTimerList>
    3040:	f0 91 fe 17 	lds	r31, 0x17FE	; 0x8017fe <pxCurrentTimerList+0x1>
    3044:	80 81       	ld	r24, Z
    3046:	81 11       	cpse	r24, r1
    3048:	be cf       	rjmp	.-132    	; 0x2fc6 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    304a:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <pxOverflowTimerList>
    304e:	90 91 fc 17 	lds	r25, 0x17FC	; 0x8017fc <pxOverflowTimerList+0x1>
    3052:	90 93 fe 17 	sts	0x17FE, r25	; 0x8017fe <pxCurrentTimerList+0x1>
    3056:	80 93 fd 17 	sts	0x17FD, r24	; 0x8017fd <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    305a:	f0 93 fc 17 	sts	0x17FC, r31	; 0x8017fc <pxOverflowTimerList+0x1>
    305e:	e0 93 fb 17 	sts	0x17FB, r30	; 0x8017fb <pxOverflowTimerList>
    }
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	ff 90       	pop	r15
    306c:	ef 90       	pop	r14
    306e:	df 90       	pop	r13
    3070:	cf 90       	pop	r12
    3072:	bf 90       	pop	r11
    3074:	af 90       	pop	r10
    3076:	9f 90       	pop	r9
    3078:	8f 90       	pop	r8
    307a:	08 95       	ret

0000307c <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    307c:	cf 92       	push	r12
    307e:	df 92       	push	r13
    3080:	ef 92       	push	r14
    3082:	ff 92       	push	r15
    3084:	cf 93       	push	r28
    3086:	df 93       	push	r29
    3088:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    308a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xTaskGetTickCount>
    308e:	6b 01       	movw	r12, r22
    3090:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3092:	80 91 f3 17 	lds	r24, 0x17F3	; 0x8017f3 <xLastTime.2436>
    3096:	90 91 f4 17 	lds	r25, 0x17F4	; 0x8017f4 <xLastTime.2436+0x1>
    309a:	a0 91 f5 17 	lds	r26, 0x17F5	; 0x8017f5 <xLastTime.2436+0x2>
    309e:	b0 91 f6 17 	lds	r27, 0x17F6	; 0x8017f6 <xLastTime.2436+0x3>
    30a2:	c8 16       	cp	r12, r24
    30a4:	d9 06       	cpc	r13, r25
    30a6:	ea 06       	cpc	r14, r26
    30a8:	fb 06       	cpc	r15, r27
    30aa:	20 f4       	brcc	.+8      	; 0x30b4 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    30ac:	7f df       	rcall	.-258    	; 0x2fac <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	88 83       	st	Y, r24
    30b2:	01 c0       	rjmp	.+2      	; 0x30b6 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    30b4:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    30b6:	c0 92 f3 17 	sts	0x17F3, r12	; 0x8017f3 <xLastTime.2436>
    30ba:	d0 92 f4 17 	sts	0x17F4, r13	; 0x8017f4 <xLastTime.2436+0x1>
    30be:	e0 92 f5 17 	sts	0x17F5, r14	; 0x8017f5 <xLastTime.2436+0x2>
    30c2:	f0 92 f6 17 	sts	0x17F6, r15	; 0x8017f6 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    30c6:	c7 01       	movw	r24, r14
    30c8:	b6 01       	movw	r22, r12
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	ff 90       	pop	r15
    30d0:	ef 90       	pop	r14
    30d2:	df 90       	pop	r13
    30d4:	cf 90       	pop	r12
    30d6:	08 95       	ret

000030d8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    30d8:	4f 92       	push	r4
    30da:	5f 92       	push	r5
    30dc:	6f 92       	push	r6
    30de:	7f 92       	push	r7
    30e0:	8f 92       	push	r8
    30e2:	9f 92       	push	r9
    30e4:	af 92       	push	r10
    30e6:	bf 92       	push	r11
    30e8:	cf 92       	push	r12
    30ea:	df 92       	push	r13
    30ec:	ef 92       	push	r14
    30ee:	ff 92       	push	r15
    30f0:	0f 93       	push	r16
    30f2:	1f 93       	push	r17
    30f4:	cf 93       	push	r28
    30f6:	df 93       	push	r29
    30f8:	4b 01       	movw	r8, r22
    30fa:	5c 01       	movw	r10, r24
    30fc:	29 01       	movw	r4, r18
    30fe:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3100:	e0 91 fd 17 	lds	r30, 0x17FD	; 0x8017fd <pxCurrentTimerList>
    3104:	f0 91 fe 17 	lds	r31, 0x17FE	; 0x8017fe <pxCurrentTimerList+0x1>
    3108:	07 80       	ldd	r0, Z+7	; 0x07
    310a:	f0 85       	ldd	r31, Z+8	; 0x08
    310c:	e0 2d       	mov	r30, r0
    310e:	c0 85       	ldd	r28, Z+8	; 0x08
    3110:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3112:	ce 01       	movw	r24, r28
    3114:	02 96       	adiw	r24, 0x02	; 2
    3116:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    311a:	8e 89       	ldd	r24, Y+22	; 0x16
    311c:	82 ff       	sbrs	r24, 2
    311e:	1b c0       	rjmp	.+54     	; 0x3156 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3120:	4e 85       	ldd	r20, Y+14	; 0x0e
    3122:	5f 85       	ldd	r21, Y+15	; 0x0f
    3124:	68 89       	ldd	r22, Y+16	; 0x10
    3126:	79 89       	ldd	r23, Y+17	; 0x11
    3128:	48 0d       	add	r20, r8
    312a:	59 1d       	adc	r21, r9
    312c:	6a 1d       	adc	r22, r10
    312e:	7b 1d       	adc	r23, r11
    3130:	75 01       	movw	r14, r10
    3132:	64 01       	movw	r12, r8
    3134:	93 01       	movw	r18, r6
    3136:	82 01       	movw	r16, r4
    3138:	ce 01       	movw	r24, r28
    313a:	47 de       	rcall	.-882    	; 0x2dca <prvInsertTimerInActiveList>
    313c:	88 23       	and	r24, r24
    313e:	69 f0       	breq	.+26     	; 0x315a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3140:	c1 2c       	mov	r12, r1
    3142:	d1 2c       	mov	r13, r1
    3144:	76 01       	movw	r14, r12
    3146:	00 e0       	ldi	r16, 0x00	; 0
    3148:	10 e0       	ldi	r17, 0x00	; 0
    314a:	a5 01       	movw	r20, r10
    314c:	94 01       	movw	r18, r8
    314e:	60 e0       	ldi	r22, 0x00	; 0
    3150:	ce 01       	movw	r24, r28
    3152:	ce de       	rcall	.-612    	; 0x2ef0 <xTimerGenericCommand>
    3154:	02 c0       	rjmp	.+4      	; 0x315a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3156:	8e 7f       	andi	r24, 0xFE	; 254
    3158:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    315a:	ec 89       	ldd	r30, Y+20	; 0x14
    315c:	fd 89       	ldd	r31, Y+21	; 0x15
    315e:	ce 01       	movw	r24, r28
    3160:	19 95       	eicall
    }
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	ff 90       	pop	r15
    316c:	ef 90       	pop	r14
    316e:	df 90       	pop	r13
    3170:	cf 90       	pop	r12
    3172:	bf 90       	pop	r11
    3174:	af 90       	pop	r10
    3176:	9f 90       	pop	r9
    3178:	8f 90       	pop	r8
    317a:	7f 90       	pop	r7
    317c:	6f 90       	pop	r6
    317e:	5f 90       	pop	r5
    3180:	4f 90       	pop	r4
    3182:	08 95       	ret

00003184 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3184:	8f 92       	push	r8
    3186:	9f 92       	push	r9
    3188:	af 92       	push	r10
    318a:	bf 92       	push	r11
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	1f 93       	push	r17
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	1f 92       	push	r1
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	6b 01       	movw	r12, r22
    31a2:	7c 01       	movw	r14, r24
    31a4:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    31a6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    31aa:	ce 01       	movw	r24, r28
    31ac:	01 96       	adiw	r24, 0x01	; 1
    31ae:	66 df       	rcall	.-308    	; 0x307c <prvSampleTimeNow>
    31b0:	4b 01       	movw	r8, r22
    31b2:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	81 11       	cpse	r24, r1
    31b8:	2d c0       	rjmp	.+90     	; 0x3214 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    31ba:	11 11       	cpse	r17, r1
    31bc:	0d c0       	rjmp	.+26     	; 0x31d8 <prvProcessTimerOrBlockTask+0x54>
    31be:	8c 14       	cp	r8, r12
    31c0:	9d 04       	cpc	r9, r13
    31c2:	ae 04       	cpc	r10, r14
    31c4:	bf 04       	cpc	r11, r15
    31c6:	40 f0       	brcs	.+16     	; 0x31d8 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    31c8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    31cc:	a5 01       	movw	r20, r10
    31ce:	94 01       	movw	r18, r8
    31d0:	c7 01       	movw	r24, r14
    31d2:	b6 01       	movw	r22, r12
    31d4:	81 df       	rcall	.-254    	; 0x30d8 <prvProcessExpiredTimer>
    31d6:	20 c0       	rjmp	.+64     	; 0x3218 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    31d8:	11 23       	and	r17, r17
    31da:	41 f0       	breq	.+16     	; 0x31ec <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    31dc:	e0 91 fb 17 	lds	r30, 0x17FB	; 0x8017fb <pxOverflowTimerList>
    31e0:	f0 91 fc 17 	lds	r31, 0x17FC	; 0x8017fc <pxOverflowTimerList+0x1>
    31e4:	80 81       	ld	r24, Z
    31e6:	11 e0       	ldi	r17, 0x01	; 1
    31e8:	81 11       	cpse	r24, r1
    31ea:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    31ec:	b7 01       	movw	r22, r14
    31ee:	a6 01       	movw	r20, r12
    31f0:	48 19       	sub	r20, r8
    31f2:	59 09       	sbc	r21, r9
    31f4:	6a 09       	sbc	r22, r10
    31f6:	7b 09       	sbc	r23, r11
    31f8:	21 2f       	mov	r18, r17
    31fa:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <xTimerQueue>
    31fe:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <xTimerQueue+0x1>
    3202:	0e 94 05 08 	call	0x100a	; 0x100a <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3206:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xTaskResumeAll>
    320a:	81 11       	cpse	r24, r1
    320c:	05 c0       	rjmp	.+10     	; 0x3218 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    320e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vPortYield>
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3214:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xTaskResumeAll>
            }
        }
    }
    3218:	0f 90       	pop	r0
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	1f 91       	pop	r17
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	df 90       	pop	r13
    3226:	cf 90       	pop	r12
    3228:	bf 90       	pop	r11
    322a:	af 90       	pop	r10
    322c:	9f 90       	pop	r9
    322e:	8f 90       	pop	r8
    3230:	08 95       	ret

00003232 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3232:	af 92       	push	r10
    3234:	bf 92       	push	r11
    3236:	cf 92       	push	r12
    3238:	df 92       	push	r13
    323a:	ef 92       	push	r14
    323c:	ff 92       	push	r15
    323e:	0f 93       	push	r16
    3240:	1f 93       	push	r17
    3242:	cf 93       	push	r28
    3244:	df 93       	push	r29
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
    324a:	28 97       	sbiw	r28, 0x08	; 8
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3256:	82 c0       	rjmp	.+260    	; 0x335c <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	88 23       	and	r24, r24
    325c:	0c f4       	brge	.+2      	; 0x3260 <prvProcessReceivedCommands+0x2e>
    325e:	7e c0       	rjmp	.+252    	; 0x335c <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3260:	ae 80       	ldd	r10, Y+6	; 0x06
    3262:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3264:	d5 01       	movw	r26, r10
    3266:	1c 96       	adiw	r26, 0x0c	; 12
    3268:	8d 91       	ld	r24, X+
    326a:	9c 91       	ld	r25, X
    326c:	1d 97       	sbiw	r26, 0x0d	; 13
    326e:	89 2b       	or	r24, r25
    3270:	21 f0       	breq	.+8      	; 0x327a <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3272:	c5 01       	movw	r24, r10
    3274:	02 96       	adiw	r24, 0x02	; 2
    3276:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    327a:	ce 01       	movw	r24, r28
    327c:	08 96       	adiw	r24, 0x08	; 8
    327e:	fe de       	rcall	.-516    	; 0x307c <prvSampleTimeNow>
    3280:	8b 01       	movw	r16, r22
    3282:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3284:	e9 81       	ldd	r30, Y+1	; 0x01
    3286:	0e 2e       	mov	r0, r30
    3288:	00 0c       	add	r0, r0
    328a:	ff 0b       	sbc	r31, r31
    328c:	ea 30       	cpi	r30, 0x0A	; 10
    328e:	f1 05       	cpc	r31, r1
    3290:	08 f0       	brcs	.+2      	; 0x3294 <prvProcessReceivedCommands+0x62>
    3292:	64 c0       	rjmp	.+200    	; 0x335c <prvProcessReceivedCommands+0x12a>
    3294:	88 27       	eor	r24, r24
    3296:	ee 58       	subi	r30, 0x8E	; 142
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	8f 4f       	sbci	r24, 0xFF	; 255
    329c:	0c 94 f5 2d 	jmp	0x5bea	; 0x5bea <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    32a0:	f5 01       	movw	r30, r10
    32a2:	86 89       	ldd	r24, Z+22	; 0x16
    32a4:	81 60       	ori	r24, 0x01	; 1
    32a6:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    32a8:	ca 80       	ldd	r12, Y+2	; 0x02
    32aa:	db 80       	ldd	r13, Y+3	; 0x03
    32ac:	ec 80       	ldd	r14, Y+4	; 0x04
    32ae:	fd 80       	ldd	r15, Y+5	; 0x05
    32b0:	46 85       	ldd	r20, Z+14	; 0x0e
    32b2:	57 85       	ldd	r21, Z+15	; 0x0f
    32b4:	60 89       	ldd	r22, Z+16	; 0x10
    32b6:	71 89       	ldd	r23, Z+17	; 0x11
    32b8:	4c 0d       	add	r20, r12
    32ba:	5d 1d       	adc	r21, r13
    32bc:	6e 1d       	adc	r22, r14
    32be:	7f 1d       	adc	r23, r15
    32c0:	c5 01       	movw	r24, r10
    32c2:	83 dd       	rcall	.-1274   	; 0x2dca <prvInsertTimerInActiveList>
    32c4:	88 23       	and	r24, r24
    32c6:	09 f4       	brne	.+2      	; 0x32ca <prvProcessReceivedCommands+0x98>
    32c8:	49 c0       	rjmp	.+146    	; 0x335c <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    32ca:	d5 01       	movw	r26, r10
    32cc:	54 96       	adiw	r26, 0x14	; 20
    32ce:	ed 91       	ld	r30, X+
    32d0:	fc 91       	ld	r31, X
    32d2:	55 97       	sbiw	r26, 0x15	; 21
    32d4:	c5 01       	movw	r24, r10
    32d6:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    32d8:	f5 01       	movw	r30, r10
    32da:	86 89       	ldd	r24, Z+22	; 0x16
    32dc:	82 ff       	sbrs	r24, 2
    32de:	3e c0       	rjmp	.+124    	; 0x335c <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    32e0:	4a 81       	ldd	r20, Y+2	; 0x02
    32e2:	5b 81       	ldd	r21, Y+3	; 0x03
    32e4:	6c 81       	ldd	r22, Y+4	; 0x04
    32e6:	7d 81       	ldd	r23, Y+5	; 0x05
    32e8:	86 85       	ldd	r24, Z+14	; 0x0e
    32ea:	97 85       	ldd	r25, Z+15	; 0x0f
    32ec:	a0 89       	ldd	r26, Z+16	; 0x10
    32ee:	b1 89       	ldd	r27, Z+17	; 0x11
    32f0:	9a 01       	movw	r18, r20
    32f2:	ab 01       	movw	r20, r22
    32f4:	28 0f       	add	r18, r24
    32f6:	39 1f       	adc	r19, r25
    32f8:	4a 1f       	adc	r20, r26
    32fa:	5b 1f       	adc	r21, r27
    32fc:	c1 2c       	mov	r12, r1
    32fe:	d1 2c       	mov	r13, r1
    3300:	76 01       	movw	r14, r12
    3302:	00 e0       	ldi	r16, 0x00	; 0
    3304:	10 e0       	ldi	r17, 0x00	; 0
    3306:	60 e0       	ldi	r22, 0x00	; 0
    3308:	c5 01       	movw	r24, r10
    330a:	f2 dd       	rcall	.-1052   	; 0x2ef0 <xTimerGenericCommand>
    330c:	27 c0       	rjmp	.+78     	; 0x335c <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    330e:	d5 01       	movw	r26, r10
    3310:	56 96       	adiw	r26, 0x16	; 22
    3312:	8c 91       	ld	r24, X
    3314:	56 97       	sbiw	r26, 0x16	; 22
    3316:	8e 7f       	andi	r24, 0xFE	; 254
    3318:	56 96       	adiw	r26, 0x16	; 22
    331a:	8c 93       	st	X, r24
                        break;
    331c:	1f c0       	rjmp	.+62     	; 0x335c <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    331e:	f5 01       	movw	r30, r10
    3320:	86 89       	ldd	r24, Z+22	; 0x16
    3322:	81 60       	ori	r24, 0x01	; 1
    3324:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3326:	4a 81       	ldd	r20, Y+2	; 0x02
    3328:	5b 81       	ldd	r21, Y+3	; 0x03
    332a:	6c 81       	ldd	r22, Y+4	; 0x04
    332c:	7d 81       	ldd	r23, Y+5	; 0x05
    332e:	46 87       	std	Z+14, r20	; 0x0e
    3330:	57 87       	std	Z+15, r21	; 0x0f
    3332:	60 8b       	std	Z+16, r22	; 0x10
    3334:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3336:	40 0f       	add	r20, r16
    3338:	51 1f       	adc	r21, r17
    333a:	62 1f       	adc	r22, r18
    333c:	73 1f       	adc	r23, r19
    333e:	68 01       	movw	r12, r16
    3340:	79 01       	movw	r14, r18
    3342:	c5 01       	movw	r24, r10
    3344:	42 dd       	rcall	.-1404   	; 0x2dca <prvInsertTimerInActiveList>
                        break;
    3346:	0a c0       	rjmp	.+20     	; 0x335c <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3348:	f5 01       	movw	r30, r10
    334a:	86 89       	ldd	r24, Z+22	; 0x16
    334c:	81 fd       	sbrc	r24, 1
    334e:	04 c0       	rjmp	.+8      	; 0x3358 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3350:	c5 01       	movw	r24, r10
    3352:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vPortFree>
    3356:	02 c0       	rjmp	.+4      	; 0x335c <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3358:	8e 7f       	andi	r24, 0xFE	; 254
    335a:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	a9 01       	movw	r20, r18
    3362:	be 01       	movw	r22, r28
    3364:	6f 5f       	subi	r22, 0xFF	; 255
    3366:	7f 4f       	sbci	r23, 0xFF	; 255
    3368:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <xTimerQueue>
    336c:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <xTimerQueue+0x1>
    3370:	0e 94 c5 06 	call	0xd8a	; 0xd8a <xQueueReceive>
    3374:	81 11       	cpse	r24, r1
    3376:	70 cf       	rjmp	.-288    	; 0x3258 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3378:	28 96       	adiw	r28, 0x08	; 8
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	ff 90       	pop	r15
    338e:	ef 90       	pop	r14
    3390:	df 90       	pop	r13
    3392:	cf 90       	pop	r12
    3394:	bf 90       	pop	r11
    3396:	af 90       	pop	r10
    3398:	08 95       	ret

0000339a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    339a:	08 95       	ret

0000339c <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    339c:	84 b1       	in	r24, 0x04	; 4
    339e:	80 68       	ori	r24, 0x80	; 128
    33a0:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    33a2:	85 b1       	in	r24, 0x05	; 5
    33a4:	80 68       	ori	r24, 0x80	; 128
    33a6:	85 b9       	out	0x05, r24	; 5
    33a8:	08 95       	ret

000033aa <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    33aa:	83 b1       	in	r24, 0x03	; 3
    33ac:	80 68       	ori	r24, 0x80	; 128
    33ae:	83 b9       	out	0x03, r24	; 3
    33b0:	08 95       	ret

000033b2 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    33b2:	f4 df       	rcall	.-24     	; 0x339c <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33b4:	2f ef       	ldi	r18, 0xFF	; 255
    33b6:	80 e7       	ldi	r24, 0x70	; 112
    33b8:	92 e0       	ldi	r25, 0x02	; 2
    33ba:	21 50       	subi	r18, 0x01	; 1
    33bc:	80 40       	sbci	r24, 0x00	; 0
    33be:	90 40       	sbci	r25, 0x00	; 0
    33c0:	e1 f7       	brne	.-8      	; 0x33ba <vApplicationMallocFailedHook+0x8>
    33c2:	00 c0       	rjmp	.+0      	; 0x33c4 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    33c4:	00 00       	nop
    33c6:	f1 df       	rcall	.-30     	; 0x33aa <prvBlinkMainLed>
    33c8:	f5 cf       	rjmp	.-22     	; 0x33b4 <vApplicationMallocFailedHook+0x2>

000033ca <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    33ca:	e8 df       	rcall	.-48     	; 0x339c <prvSetMainLedOn>
    33cc:	2f ef       	ldi	r18, 0xFF	; 255
    33ce:	87 ea       	ldi	r24, 0xA7	; 167
    33d0:	91 e6       	ldi	r25, 0x61	; 97
    33d2:	21 50       	subi	r18, 0x01	; 1
    33d4:	80 40       	sbci	r24, 0x00	; 0
    33d6:	90 40       	sbci	r25, 0x00	; 0
    33d8:	e1 f7       	brne	.-8      	; 0x33d2 <vApplicationStackOverflowHook+0x8>
    33da:	00 c0       	rjmp	.+0      	; 0x33dc <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    33dc:	00 00       	nop
    33de:	e5 df       	rcall	.-54     	; 0x33aa <prvBlinkMainLed>
    33e0:	f5 cf       	rjmp	.-22     	; 0x33cc <vApplicationStackOverflowHook+0x2>

000033e2 <enqueueCO2Measure>:
	// Creating queue with 10 positions
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
}


void enqueueCO2Measure(uint16_t ppm){
    33e2:	0f 93       	push	r16
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	1f 92       	push	r1
    33ea:	1f 92       	push	r1
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
    33f0:	9a 83       	std	Y+2, r25	; 0x02
    33f2:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting CO2: %d in the queue \n", ppm);
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	8f 93       	push	r24
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	8f 93       	push	r24
    33fc:	87 ea       	ldi	r24, 0xA7	; 167
    33fe:	92 e0       	ldi	r25, 0x02	; 2
    3400:	9f 93       	push	r25
    3402:	8f 93       	push	r24
    3404:	87 e9       	ldi	r24, 0x97	; 151
    3406:	99 e1       	ldi	r25, 0x19	; 25
    3408:	9f 93       	push	r25
    340a:	8f 93       	push	r24
    340c:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
	test_outprint(printstring);
    3410:	87 e9       	ldi	r24, 0x97	; 151
    3412:	99 e1       	ldi	r25, 0x19	; 25
    3414:	72 d3       	rcall	.+1764   	; 0x3afa <test_outprint>
	
	// Sending measure to queue
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    3416:	00 e0       	ldi	r16, 0x00	; 0
    3418:	2f ef       	ldi	r18, 0xFF	; 255
    341a:	3f ef       	ldi	r19, 0xFF	; 255
    341c:	a9 01       	movw	r20, r18
    341e:	be 01       	movw	r22, r28
    3420:	6f 5f       	subi	r22, 0xFF	; 255
    3422:	7f 4f       	sbci	r23, 0xFF	; 255
    3424:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <xQueueCO2>
    3428:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <xQueueCO2+0x1>
    342c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xQueueGenericSend>
}
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	df 91       	pop	r29
    3442:	cf 91       	pop	r28
    3444:	0f 91       	pop	r16
    3446:	08 95       	ret

00003448 <initializeCO2Queue>:

QueueHandle_t xQueueCO2;

void initializeCO2Queue() {
	// Creating queue with 10 positions
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
    3448:	40 e0       	ldi	r20, 0x00	; 0
    344a:	62 e0       	ldi	r22, 0x02	; 2
    344c:	8a e0       	ldi	r24, 0x0A	; 10
    344e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <xQueueGenericCreate>
    3452:	90 93 fc 19 	sts	0x19FC, r25	; 0x8019fc <xQueueCO2+0x1>
    3456:	80 93 fb 19 	sts	0x19FB, r24	; 0x8019fb <xQueueCO2>
    345a:	08 95       	ret

0000345c <co2Measure>:
}

void co2Measure() {
	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
    345c:	0e 94 6f 24 	call	0x48de	; 0x48de <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
    3460:	81 11       	cpse	r24, r1
    3462:	05 c0       	rjmp	.+10     	; 0x346e <co2Measure+0x12>
	{
		// Callback method to enqueue measure
		mh_z19_injectCallBack(enqueueCO2Measure);
    3464:	81 ef       	ldi	r24, 0xF1	; 241
    3466:	99 e1       	ldi	r25, 0x19	; 25
    3468:	0c 94 6a 24 	jmp	0x48d4	; 0x48d4 <mh_z19_injectCallBack>
    346c:	08 95       	ret
	}
	else
	{
		puts("Det gik galt");
    346e:	86 ec       	ldi	r24, 0xC6	; 198
    3470:	92 e0       	ldi	r25, 0x02	; 2
    3472:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <puts>
		// Enqueueing 0=ERROR CODE, if measure went wrong
		enqueueCO2Measure(0);
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	b3 cf       	rjmp	.-154    	; 0x33e2 <enqueueCO2Measure>
    347c:	08 95       	ret

0000347e <dequeueCO2Measure>:
	}
}


uint16_t dequeueCO2Measure(){
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	1f 92       	push	r1
    3484:	1f 92       	push	r1
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	
	//Receiving measure from queue
	xQueueReceive(xQueueCO2, &ppm, 1500);
    348a:	2c ed       	ldi	r18, 0xDC	; 220
    348c:	35 e0       	ldi	r19, 0x05	; 5
    348e:	40 e0       	ldi	r20, 0x00	; 0
    3490:	50 e0       	ldi	r21, 0x00	; 0
    3492:	be 01       	movw	r22, r28
    3494:	6f 5f       	subi	r22, 0xFF	; 255
    3496:	7f 4f       	sbci	r23, 0xFF	; 255
    3498:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <xQueueCO2>
    349c:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <xQueueCO2+0x1>
    34a0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <xQueueReceive>
	
	sprintf(printstring, "Removing CO2: %d from the queue \n", ppm);
    34a4:	8a 81       	ldd	r24, Y+2	; 0x02
    34a6:	8f 93       	push	r24
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	8f 93       	push	r24
    34ac:	83 ed       	ldi	r24, 0xD3	; 211
    34ae:	92 e0       	ldi	r25, 0x02	; 2
    34b0:	9f 93       	push	r25
    34b2:	8f 93       	push	r24
    34b4:	87 e9       	ldi	r24, 0x97	; 151
    34b6:	99 e1       	ldi	r25, 0x19	; 25
    34b8:	9f 93       	push	r25
    34ba:	8f 93       	push	r24
    34bc:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
	test_outprint(printstring);
    34c0:	87 e9       	ldi	r24, 0x97	; 151
    34c2:	99 e1       	ldi	r25, 0x19	; 25
    34c4:	1a d3       	rcall	.+1588   	; 0x3afa <test_outprint>

	return ppm;
    34c6:	0f 90       	pop	r0
    34c8:	0f 90       	pop	r0
    34ca:	0f 90       	pop	r0
    34cc:	0f 90       	pop	r0
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	9a 81       	ldd	r25, Y+2	; 0x02
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	df 91       	pop	r29
    34dc:	cf 91       	pop	r28
    34de:	08 95       	ret

000034e0 <initializeTempHumQueues>:
QueueHandle_t xQueueHum;


void initializeTempHumQueues(){
	// Creating queues with 10 positions
	xQueueTemp = xQueueCreate(10, sizeof(int16_t));
    34e0:	40 e0       	ldi	r20, 0x00	; 0
    34e2:	62 e0       	ldi	r22, 0x02	; 2
    34e4:	8a e0       	ldi	r24, 0x0A	; 10
    34e6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <xQueueGenericCreate>
    34ea:	90 93 00 1a 	sts	0x1A00, r25	; 0x801a00 <xQueueTemp+0x1>
    34ee:	80 93 ff 19 	sts	0x19FF, r24	; 0x8019ff <xQueueTemp>
	xQueueHum = xQueueCreate(10, sizeof(uint16_t));
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	62 e0       	ldi	r22, 0x02	; 2
    34f6:	8a e0       	ldi	r24, 0x0A	; 10
    34f8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <xQueueGenericCreate>
    34fc:	90 93 fe 19 	sts	0x19FE, r25	; 0x8019fe <xQueueHum+0x1>
    3500:	80 93 fd 19 	sts	0x19FD, r24	; 0x8019fd <xQueueHum>
    3504:	08 95       	ret

00003506 <enqueueTemperature>:
}

void enqueueTemperature(int16_t temp){
    3506:	0f 93       	push	r16
    3508:	cf 93       	push	r28
    350a:	df 93       	push	r29
    350c:	1f 92       	push	r1
    350e:	1f 92       	push	r1
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	9a 83       	std	Y+2, r25	; 0x02
    3516:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting temperature: %d in the queue \n", temp);
    3518:	8a 81       	ldd	r24, Y+2	; 0x02
    351a:	8f 93       	push	r24
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	8f 93       	push	r24
    3520:	85 ef       	ldi	r24, 0xF5	; 245
    3522:	92 e0       	ldi	r25, 0x02	; 2
    3524:	9f 93       	push	r25
    3526:	8f 93       	push	r24
    3528:	87 e9       	ldi	r24, 0x97	; 151
    352a:	99 e1       	ldi	r25, 0x19	; 25
    352c:	9f 93       	push	r25
    352e:	8f 93       	push	r24
    3530:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
	test_outprint(printstring);
    3534:	87 e9       	ldi	r24, 0x97	; 151
    3536:	99 e1       	ldi	r25, 0x19	; 25
    3538:	e0 d2       	rcall	.+1472   	; 0x3afa <test_outprint>
	
	// Sending measure to queue
	xQueueSend(xQueueTemp, (void*)&temp, portMAX_DELAY);
    353a:	00 e0       	ldi	r16, 0x00	; 0
    353c:	2f ef       	ldi	r18, 0xFF	; 255
    353e:	3f ef       	ldi	r19, 0xFF	; 255
    3540:	a9 01       	movw	r20, r18
    3542:	be 01       	movw	r22, r28
    3544:	6f 5f       	subi	r22, 0xFF	; 255
    3546:	7f 4f       	sbci	r23, 0xFF	; 255
    3548:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <xQueueTemp>
    354c:	90 91 00 1a 	lds	r25, 0x1A00	; 0x801a00 <xQueueTemp+0x1>
    3550:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xQueueGenericSend>
}
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <enqueueHumidity>:

void enqueueHumidity(uint16_t hum){
    356c:	0f 93       	push	r16
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	1f 92       	push	r1
    3574:	1f 92       	push	r1
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
    357a:	9a 83       	std	Y+2, r25	; 0x02
    357c:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting humidity: %d in the queue \n", hum);
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	8f 93       	push	r24
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	8f 93       	push	r24
    3586:	8c e1       	ldi	r24, 0x1C	; 28
    3588:	93 e0       	ldi	r25, 0x03	; 3
    358a:	9f 93       	push	r25
    358c:	8f 93       	push	r24
    358e:	87 e9       	ldi	r24, 0x97	; 151
    3590:	99 e1       	ldi	r25, 0x19	; 25
    3592:	9f 93       	push	r25
    3594:	8f 93       	push	r24
    3596:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
	test_outprint(printstring);
    359a:	87 e9       	ldi	r24, 0x97	; 151
    359c:	99 e1       	ldi	r25, 0x19	; 25
    359e:	ad d2       	rcall	.+1370   	; 0x3afa <test_outprint>
	
	// Sending measure to queue	
	xQueueSend(xQueueHum, (void*)&hum, portMAX_DELAY);	
    35a0:	00 e0       	ldi	r16, 0x00	; 0
    35a2:	2f ef       	ldi	r18, 0xFF	; 255
    35a4:	3f ef       	ldi	r19, 0xFF	; 255
    35a6:	a9 01       	movw	r20, r18
    35a8:	be 01       	movw	r22, r28
    35aa:	6f 5f       	subi	r22, 0xFF	; 255
    35ac:	7f 4f       	sbci	r23, 0xFF	; 255
    35ae:	80 91 fd 19 	lds	r24, 0x19FD	; 0x8019fd <xQueueHum>
    35b2:	90 91 fe 19 	lds	r25, 0x19FE	; 0x8019fe <xQueueHum+0x1>
    35b6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xQueueGenericSend>
}
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	df 91       	pop	r29
    35cc:	cf 91       	pop	r28
    35ce:	0f 91       	pop	r16
    35d0:	08 95       	ret

000035d2 <tempHumMeasure>:


void tempHumMeasure()
{
    35d2:	ef 92       	push	r14
    35d4:	ff 92       	push	r15
    35d6:	0f 93       	push	r16
    35d8:	1f 93       	push	r17
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
    35de:	00 d0       	rcall	.+0      	; 0x35e0 <tempHumMeasure+0xe>
    35e0:	1f 92       	push	r1
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5/portTICK_PERIOD_MS; 
	const TickType_t xFrequency2 = 50/portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    35e6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xTaskGetTickCount>
    35ea:	69 83       	std	Y+1, r22	; 0x01
    35ec:	7a 83       	std	Y+2, r23	; 0x02
    35ee:	8b 83       	std	Y+3, r24	; 0x03
    35f0:	9c 83       	std	Y+4, r25	; 0x04

	if(HIH8120_OK != hih8120_wakeup())
    35f2:	2f d4       	rcall	.+2142   	; 0x3e52 <hih8120_wakeup>
    35f4:	88 23       	and	r24, r24
    35f6:	21 f0       	breq	.+8      	; 0x3600 <tempHumMeasure+0x2e>
	{
		puts("HIH8120 Wakeup gik galt");
    35f8:	80 e4       	ldi	r24, 0x40	; 64
    35fa:	93 e0       	ldi	r25, 0x03	; 3
    35fc:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <puts>
	}
	
	//Short delay so the driver has time to wakeup
	xTaskDelayUntil( &xLastWakeTime, xFrequency2 );
    3600:	43 e0       	ldi	r20, 0x03	; 3
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	60 e0       	ldi	r22, 0x00	; 0
    3606:	70 e0       	ldi	r23, 0x00	; 0
    3608:	ce 01       	movw	r24, r28
    360a:	01 96       	adiw	r24, 0x01	; 1
    360c:	0e 94 07 10 	call	0x200e	; 0x200e <xTaskDelayUntil>
	
	if(HIH8120_OK != hih8120_measure())
    3610:	35 d4       	rcall	.+2154   	; 0x3e7c <hih8120_measure>
    3612:	88 23       	and	r24, r24
    3614:	51 f0       	breq	.+20     	; 0x362a <tempHumMeasure+0x58>
	{
		puts("Humidity & temperature measure went wrong");
    3616:	88 e5       	ldi	r24, 0x58	; 88
    3618:	93 e0       	ldi	r25, 0x03	; 3
    361a:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <puts>
		
		// Enqueueing 0=ERROR CODE, if measure went wrong
		enqueueHumidity(0);
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	a4 df       	rcall	.-184    	; 0x356c <enqueueHumidity>
		enqueueTemperature(0);
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	6e df       	rcall	.-292    	; 0x3506 <enqueueTemperature>
    362a:	40 e0       	ldi	r20, 0x00	; 0
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    362c:	50 e0       	ldi	r21, 0x00	; 0
    362e:	ba 01       	movw	r22, r20
    3630:	ce 01       	movw	r24, r28
    3632:	01 96       	adiw	r24, 0x01	; 1
    3634:	0e 94 07 10 	call	0x200e	; 0x200e <xTaskDelayUntil>
	
	// Call to get value from driver
	uint16_t humidity = hih8120_getHumidity();
    3638:	32 d4       	rcall	.+2148   	; 0x3e9e <hih8120_getHumidity>
    363a:	71 d3       	rcall	.+1762   	; 0x3d1e <__fixunssfsi>
    363c:	8b 01       	movw	r16, r22
	int16_t temp = hih8120_getTemperature();
    363e:	44 d4       	rcall	.+2184   	; 0x3ec8 <hih8120_getTemperature>
    3640:	69 d3       	rcall	.+1746   	; 0x3d14 <__fixsfsi>
    3642:	7b 01       	movw	r14, r22
    3644:	00 36       	cpi	r16, 0x60	; 96
    3646:	11 05       	cpc	r17, r1
	
	// Helps to make sure that the first measurevalues is discarded, as they're always max value
	if (humidity > 95 && temp > 100) {
    3648:	88 f0       	brcs	.+34     	; 0x366c <tempHumMeasure+0x9a>
    364a:	85 e6       	ldi	r24, 0x65	; 101
    364c:	e8 16       	cp	r14, r24
    364e:	f1 04       	cpc	r15, r1
    3650:	6c f0       	brlt	.+26     	; 0x366c <tempHumMeasure+0x9a>
    3652:	40 e0       	ldi	r20, 0x00	; 0
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3654:	50 e0       	ldi	r21, 0x00	; 0
    3656:	ba 01       	movw	r22, r20
    3658:	ce 01       	movw	r24, r28
    365a:	01 96       	adiw	r24, 0x01	; 1
			
		humidity = hih8120_getHumidity();
    365c:	0e 94 07 10 	call	0x200e	; 0x200e <xTaskDelayUntil>
    3660:	1e d4       	rcall	.+2108   	; 0x3e9e <hih8120_getHumidity>
    3662:	5d d3       	rcall	.+1722   	; 0x3d1e <__fixunssfsi>
		temp = hih8120_getTemperature();
    3664:	8b 01       	movw	r16, r22
    3666:	30 d4       	rcall	.+2144   	; 0x3ec8 <hih8120_getTemperature>
    3668:	55 d3       	rcall	.+1706   	; 0x3d14 <__fixsfsi>
    366a:	7b 01       	movw	r14, r22
    366c:	c8 01       	movw	r24, r16
	}
	
	// Enqueueing the two measures
	enqueueHumidity(humidity);
    366e:	7e df       	rcall	.-260    	; 0x356c <enqueueHumidity>
    3670:	c7 01       	movw	r24, r14
    3672:	49 df       	rcall	.-366    	; 0x3506 <enqueueTemperature>
	enqueueTemperature(temp);
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	0f 90       	pop	r0
}
    367a:	0f 90       	pop	r0
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	1f 91       	pop	r17
    3682:	0f 91       	pop	r16
    3684:	ff 90       	pop	r15
    3686:	ef 90       	pop	r14
    3688:	08 95       	ret

0000368a <dequeueTempMeasure>:
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29
    368e:	1f 92       	push	r1


int16_t dequeueTempMeasure(){
    3690:	1f 92       	push	r1
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	
	//Receiving measure from queue
	xQueueReceive(xQueueTemp, &temp, 1500);
    3696:	2c ed       	ldi	r18, 0xDC	; 220
    3698:	35 e0       	ldi	r19, 0x05	; 5
    369a:	40 e0       	ldi	r20, 0x00	; 0
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	be 01       	movw	r22, r28
    36a0:	6f 5f       	subi	r22, 0xFF	; 255
    36a2:	7f 4f       	sbci	r23, 0xFF	; 255
    36a4:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <xQueueTemp>
    36a8:	90 91 00 1a 	lds	r25, 0x1A00	; 0x801a00 <xQueueTemp+0x1>
    36ac:	0e 94 c5 06 	call	0xd8a	; 0xd8a <xQueueReceive>
	
	sprintf(printstring, "Removing temperature: %d from the queue \n", temp);
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	8f 93       	push	r24
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	8f 93       	push	r24
    36b8:	82 e8       	ldi	r24, 0x82	; 130
    36ba:	93 e0       	ldi	r25, 0x03	; 3
    36bc:	9f 93       	push	r25
    36be:	8f 93       	push	r24
    36c0:	87 e9       	ldi	r24, 0x97	; 151
    36c2:	99 e1       	ldi	r25, 0x19	; 25
    36c4:	9f 93       	push	r25
    36c6:	8f 93       	push	r24
    36c8:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
	test_outprint(printstring);
    36cc:	87 e9       	ldi	r24, 0x97	; 151
    36ce:	99 e1       	ldi	r25, 0x19	; 25
    36d0:	14 d2       	rcall	.+1064   	; 0x3afa <test_outprint>
	
	return temp;
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
}
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	08 95       	ret

000036ec <dequeueHumidityMeasure>:

uint16_t dequeueHumidityMeasure(){
    36ec:	cf 93       	push	r28
    36ee:	df 93       	push	r29
    36f0:	1f 92       	push	r1
    36f2:	1f 92       	push	r1
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
	uint16_t hum;
	
	//Receiving measure from queue	
	xQueueReceive(xQueueHum, &hum, 1500);
    36f8:	2c ed       	ldi	r18, 0xDC	; 220
    36fa:	35 e0       	ldi	r19, 0x05	; 5
    36fc:	40 e0       	ldi	r20, 0x00	; 0
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	be 01       	movw	r22, r28
    3702:	6f 5f       	subi	r22, 0xFF	; 255
    3704:	7f 4f       	sbci	r23, 0xFF	; 255
    3706:	80 91 fd 19 	lds	r24, 0x19FD	; 0x8019fd <xQueueHum>
    370a:	90 91 fe 19 	lds	r25, 0x19FE	; 0x8019fe <xQueueHum+0x1>
    370e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <xQueueReceive>
	
	sprintf(printstring, "Removing humidity: %d from the queue \n", hum);
    3712:	8a 81       	ldd	r24, Y+2	; 0x02
    3714:	8f 93       	push	r24
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	8f 93       	push	r24
    371a:	8c ea       	ldi	r24, 0xAC	; 172
    371c:	93 e0       	ldi	r25, 0x03	; 3
    371e:	9f 93       	push	r25
    3720:	8f 93       	push	r24
    3722:	87 e9       	ldi	r24, 0x97	; 151
    3724:	99 e1       	ldi	r25, 0x19	; 25
    3726:	9f 93       	push	r25
    3728:	8f 93       	push	r24
    372a:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
	test_outprint(printstring);
    372e:	87 e9       	ldi	r24, 0x97	; 151
    3730:	99 e1       	ldi	r25, 0x19	; 25
    3732:	e3 d1       	rcall	.+966    	; 0x3afa <test_outprint>
		
	return hum;
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	9a 81       	ldd	r25, Y+2	; 0x02
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	df 91       	pop	r29
    374a:	cf 91       	pop	r28
    374c:	08 95       	ret

0000374e <_lora_setup>:
	,  ((UBaseType_t)3)  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    374e:	0f 93       	push	r16
    3750:	1f 93       	push	r17
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	64 97       	sbiw	r28, 0x14	; 20
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61

	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	0e 94 df 29 	call	0x53be	; 0x53be <status_leds_slowBlink>

	// Factory reset the transceiver
	//sprintf(printstring, "FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
	//test_outprint(printstring);
	
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    376c:	35 d5       	rcall	.+2666   	; 0x41d8 <lora_driver_rn2483FactoryReset>
    376e:	b1 d7       	rcall	.+3938   	; 0x46d2 <lora_driver_mapReturnCodeToText>
    3770:	9f 93       	push	r25
    3772:	8f 93       	push	r24
    3774:	83 ed       	ldi	r24, 0xD3	; 211
    3776:	93 e0       	ldi	r25, 0x03	; 3
    3778:	9f 93       	push	r25
    377a:	8f 93       	push	r24
    377c:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>
	
	// Configure to EU868 LoRaWAN standards
	//sprintf(printstring, "Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
	//test_outprint(printstring);
	
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3780:	a9 d6       	rcall	.+3410   	; 0x44d4 <lora_driver_configureToEu868>
    3782:	a7 d7       	rcall	.+3918   	; 0x46d2 <lora_driver_mapReturnCodeToText>
    3784:	9f 93       	push	r25
    3786:	8f 93       	push	r24
    3788:	86 ee       	ldi	r24, 0xE6	; 230
    378a:	93 e0       	ldi	r25, 0x03	; 3
    378c:	9f 93       	push	r25
    378e:	8f 93       	push	r24
    3790:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>
    3794:	8e 01       	movw	r16, r28
    3796:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI	
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3798:	1f 4f       	sbci	r17, 0xFF	; 255
    379a:	c8 01       	movw	r24, r16
    379c:	2f d5       	rcall	.+2654   	; 0x41fc <lora_driver_getRn2483Hweui>
    379e:	99 d7       	rcall	.+3890   	; 0x46d2 <lora_driver_mapReturnCodeToText>
	
	//sprintf(printstring, "Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
	//test_outprint(printstring);

	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    37a0:	1f 93       	push	r17
    37a2:	0f 93       	push	r16
    37a4:	9f 93       	push	r25
    37a6:	8f 93       	push	r24
    37a8:	8f ef       	ldi	r24, 0xFF	; 255
    37aa:	93 e0       	ldi	r25, 0x03	; 3
    37ac:	9f 93       	push	r25
    37ae:	8f 93       	push	r24
    37b0:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	//sprintf(printstring, "Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
	//test_outprint(printstring);
	
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    37b4:	c8 01       	movw	r24, r16
    37b6:	3e d5       	rcall	.+2684   	; 0x4234 <lora_driver_setDeviceIdentifier>
    37b8:	8c d7       	rcall	.+3864   	; 0x46d2 <lora_driver_mapReturnCodeToText>
    37ba:	9f 93       	push	r25
    37bc:	8f 93       	push	r24
    37be:	1f 93       	push	r17
    37c0:	0f 93       	push	r16
    37c2:	83 e1       	ldi	r24, 0x13	; 19
    37c4:	94 e0       	ldi	r25, 0x04	; 4
    37c6:	9f 93       	push	r25
    37c8:	8f 93       	push	r24
    37ca:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>
    37ce:	a8 01       	movw	r20, r16

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	//sprintf(printstring, "Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
	//test_outprint(printstring);
	
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    37d0:	68 e2       	ldi	r22, 0x28	; 40
    37d2:	74 e0       	ldi	r23, 0x04	; 4
    37d4:	89 e4       	ldi	r24, 0x49	; 73
    37d6:	94 e0       	ldi	r25, 0x04	; 4
    37d8:	5b d7       	rcall	.+3766   	; 0x4690 <lora_driver_setOtaaIdentity>
    37da:	7b d7       	rcall	.+3830   	; 0x46d2 <lora_driver_mapReturnCodeToText>
    37dc:	9f 93       	push	r25
    37de:	8f 93       	push	r24
    37e0:	1f 93       	push	r17
    37e2:	0f 93       	push	r16
    37e4:	88 e2       	ldi	r24, 0x28	; 40
    37e6:	94 e0       	ldi	r25, 0x04	; 4
    37e8:	9f 93       	push	r25
    37ea:	8f 93       	push	r24
    37ec:	89 e4       	ldi	r24, 0x49	; 73
    37ee:	94 e0       	ldi	r25, 0x04	; 4
    37f0:	9f 93       	push	r25
    37f2:	8f 93       	push	r24
    37f4:	8a e5       	ldi	r24, 0x5A	; 90
    37f6:	94 e0       	ldi	r25, 0x04	; 4
    37f8:	9f 93       	push	r25
    37fa:	8f 93       	push	r24
    37fc:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>

	// Save all the MAC settings in the transceiver
	//sprintf(printstring, "Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
	//test_outprint(printstring);
	
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3800:	4c d5       	rcall	.+2712   	; 0x429a <lora_driver_saveMac>
    3802:	67 d7       	rcall	.+3790   	; 0x46d2 <lora_driver_mapReturnCodeToText>
    3804:	9f 93       	push	r25
    3806:	8f 93       	push	r24
    3808:	80 e9       	ldi	r24, 0x90	; 144
    380a:	94 e0       	ldi	r25, 0x04	; 4
    380c:	9f 93       	push	r25
    380e:	8f 93       	push	r24
    3810:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>

	// Enable Adaptive Data Rate
	//sprintf(printstring, "Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
	//test_outprint(printstring);
	
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	36 d6       	rcall	.+3180   	; 0x448e <lora_driver_setAdaptiveDataRate>
    3822:	57 d7       	rcall	.+3758   	; 0x46d2 <lora_driver_mapReturnCodeToText>
    3824:	9f 93       	push	r25
    3826:	8f 93       	push	r24
    3828:	8f e9       	ldi	r24, 0x9F	; 159
    382a:	94 e0       	ldi	r25, 0x04	; 4
    382c:	9f 93       	push	r25
    382e:	8f 93       	push	r24
    3830:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	//sprintf(printstring, "Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
	//test_outprint(printstring);
	
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3834:	84 ef       	ldi	r24, 0xF4	; 244
    3836:	91 e0       	ldi	r25, 0x01	; 1
    3838:	35 d6       	rcall	.+3178   	; 0x44a4 <lora_driver_setReceiveDelay>
    383a:	4b d7       	rcall	.+3734   	; 0x46d2 <lora_driver_mapReturnCodeToText>
    383c:	9f 93       	push	r25
    383e:	8f 93       	push	r24
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	8f 93       	push	r24
    3844:	84 ef       	ldi	r24, 0xF4	; 244
    3846:	8f 93       	push	r24
    3848:	80 ec       	ldi	r24, 0xC0	; 192
    384a:	94 e0       	ldi	r25, 0x04	; 4
    384c:	9f 93       	push	r25
    384e:	8f 93       	push	r24
    3850:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	f8 94       	cli
    3858:	de bf       	out	0x3e, r29	; 62
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    385e:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	21 d5       	rcall	.+2626   	; 0x42a6 <lora_driver_join>
    3864:	08 2f       	mov	r16, r24
    3866:	35 d7       	rcall	.+3690   	; 0x46d2 <lora_driver_mapReturnCodeToText>
		
		//sprintf(printstring, "Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
		//test_outprint(printstring);
		
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3868:	9f 93       	push	r25
    386a:	8f 93       	push	r24
    386c:	1f 92       	push	r1
    386e:	1f 93       	push	r17
    3870:	80 ee       	ldi	r24, 0xE0	; 224
    3872:	94 e0       	ldi	r25, 0x04	; 4
    3874:	9f 93       	push	r25
    3876:	8f 93       	push	r24
    3878:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	08 30       	cpi	r16, 0x08	; 8
    388a:	59 f0       	breq	.+22     	; 0x38a2 <_lora_setup+0x154>
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	0e 94 43 2a 	call	0x5486	; 0x5486 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3892:	66 e3       	ldi	r22, 0x36	; 54
    3894:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <vTaskDelay>
    389e:	11 50       	subi	r17, 0x01	; 1
    38a0:	f9 f6       	brne	.-66     	; 0x3860 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    38a2:	08 30       	cpi	r16, 0x08	; 8
    38a4:	41 f4       	brne	.+16     	; 0x38b6 <_lora_setup+0x168>

	if (rc == LORA_ACCEPTED)
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	95 e0       	ldi	r25, 0x05	; 5
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		printf("\t We have been accepted \n");
    38aa:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <puts>
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	0e 94 25 2a 	call	0x544a	; 0x544a <status_leds_ledOn>
		status_leds_ledOn(led_ST2); // OPTIONAL
    38b4:	09 c0       	rjmp	.+18     	; 0x38c8 <_lora_setup+0x17a>
    38b6:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    38b8:	0e 94 34 2a 	call	0x5468	; 0x5468 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	0e 94 02 2a 	call	0x5404	; 0x5404 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    38c2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    38c6:	fd cf       	rjmp	.-6      	; 0x38c2 <_lora_setup+0x174>
    38c8:	64 96       	adiw	r28, 0x14	; 20
    38ca:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    38cc:	f8 94       	cli
    38ce:	de bf       	out	0x3e, r29	; 62
    38d0:	0f be       	out	0x3f, r0	; 63
    38d2:	cd bf       	out	0x3d, r28	; 61
    38d4:	df 91       	pop	r29
    38d6:	cf 91       	pop	r28
    38d8:	1f 91       	pop	r17
    38da:	0f 91       	pop	r16
    38dc:	08 95       	ret

000038de <lora_handler_task>:
    38de:	cf 93       	push	r28
    38e0:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    38e2:	00 d0       	rcall	.+0      	; 0x38e4 <lora_handler_task+0x6>
    38e4:	1f 92       	push	r1
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	67 d4       	rcall	.+2254   	; 0x41bc <lora_driver_resetRn2483>
	vTaskDelay(2);
    38ee:	62 e0       	ldi	r22, 0x02	; 2
    38f0:	70 e0       	ldi	r23, 0x00	; 0
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <vTaskDelay>
	lora_driver_resetRn2483(0);
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	5f d4       	rcall	.+2238   	; 0x41bc <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    38fe:	66 e9       	ldi	r22, 0x96	; 150
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    390a:	11 d4       	rcall	.+2082   	; 0x412e <lora_driver_flushBuffers>

	_lora_setup();
    390c:	20 df       	rcall	.-448    	; 0x374e <_lora_setup>
    390e:	e5 e1       	ldi	r30, 0x15	; 21

	// DEFINING SIZE OF PAYLOAD
	_uplink_payload.len = 8;
    3910:	f8 e1       	ldi	r31, 0x18	; 24
    3912:	88 e0       	ldi	r24, 0x08	; 8
    3914:	81 83       	std	Z+1, r24	; 0x01
    3916:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    3918:	80 83       	st	Z, r24
    391a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(600000UL); // Upload message every 10 minutes (600000 ms)
	xLastWakeTime = xTaskGetTickCount();
    391e:	69 83       	std	Y+1, r22	; 0x01
    3920:	7a 83       	std	Y+2, r23	; 0x02
    3922:	8b 83       	std	Y+3, r24	; 0x03
    3924:	9c 83       	std	Y+4, r25	; 0x04
    3926:	89 e1       	ldi	r24, 0x19	; 25

	for(;;)
	{
		uint16_t growbroId = 1;
		
		puts("\t going into delay");
    3928:	95 e0       	ldi	r25, 0x05	; 5
    392a:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <puts>
    392e:	40 e5       	ldi	r20, 0x50	; 80
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3930:	51 e9       	ldi	r21, 0x91	; 145
    3932:	60 e0       	ldi	r22, 0x00	; 0
    3934:	70 e0       	ldi	r23, 0x00	; 0
    3936:	ce 01       	movw	r24, r28
    3938:	01 96       	adiw	r24, 0x01	; 1
    393a:	0e 94 07 10 	call	0x200e	; 0x200e <xTaskDelayUntil>
    393e:	0e 94 a6 01 	call	0x34c	; 0x34c <dequeueSharedData>
		
		// Creating struct and dequeueing data
		SharedData_t sharedData;
		sharedData = dequeueSharedData();
    3942:	8c 01       	movw	r16, r24
    3944:	dc 01       	movw	r26, r24
		
		sprintf(printstring, "DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
    3946:	13 96       	adiw	r26, 0x03	; 3
    3948:	8c 91       	ld	r24, X
    394a:	13 97       	sbiw	r26, 0x03	; 3
    394c:	8f 93       	push	r24
    394e:	12 96       	adiw	r26, 0x02	; 2
    3950:	8c 91       	ld	r24, X
    3952:	12 97       	sbiw	r26, 0x02	; 2
    3954:	8f 93       	push	r24
    3956:	11 96       	adiw	r26, 0x01	; 1
    3958:	8c 91       	ld	r24, X
    395a:	11 97       	sbiw	r26, 0x01	; 1
    395c:	8f 93       	push	r24
    395e:	8c 91       	ld	r24, X
    3960:	8f 93       	push	r24
    3962:	15 96       	adiw	r26, 0x05	; 5
    3964:	8c 91       	ld	r24, X
    3966:	15 97       	sbiw	r26, 0x05	; 5
    3968:	8f 93       	push	r24
    396a:	14 96       	adiw	r26, 0x04	; 4
    396c:	8c 91       	ld	r24, X
    396e:	8f 93       	push	r24
    3970:	8c e2       	ldi	r24, 0x2C	; 44
    3972:	95 e0       	ldi	r25, 0x05	; 5
    3974:	9f 93       	push	r25
    3976:	8f 93       	push	r24
    3978:	0f 2e       	mov	r0, r31
    397a:	f7 e9       	ldi	r31, 0x97	; 151
    397c:	ef 2e       	mov	r14, r31
    397e:	f9 e1       	ldi	r31, 0x19	; 25
    3980:	ff 2e       	mov	r15, r31
    3982:	f0 2d       	mov	r31, r0
    3984:	ff 92       	push	r15
    3986:	ef 92       	push	r14
    3988:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
		test_outprint(printstring);
    398c:	c7 01       	movw	r24, r14
    398e:	b5 d0       	rcall	.+362    	; 0x3afa <test_outprint>
    3990:	e5 e1       	ldi	r30, 0x15	; 21
		
		//printf("DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
		
		// CREATING OUR OWN PAYLOAD: GrowbroId, CO2, Humidity & Temperature
		_uplink_payload.bytes[0] = growbroId >> 8;
    3992:	f8 e1       	ldi	r31, 0x18	; 24
    3994:	12 82       	std	Z+2, r1	; 0x02
    3996:	81 e0       	ldi	r24, 0x01	; 1
		_uplink_payload.bytes[1] = growbroId & 0xFF;
    3998:	83 83       	std	Z+3, r24	; 0x03
    399a:	d8 01       	movw	r26, r16
		_uplink_payload.bytes[2] = sharedData->co2 >> 8;
    399c:	11 96       	adiw	r26, 0x01	; 1
    399e:	8c 91       	ld	r24, X
    39a0:	11 97       	sbiw	r26, 0x01	; 1
    39a2:	84 83       	std	Z+4, r24	; 0x04
    39a4:	8c 91       	ld	r24, X
		_uplink_payload.bytes[3] = sharedData->co2 & 0xFF;
    39a6:	85 83       	std	Z+5, r24	; 0x05
    39a8:	15 96       	adiw	r26, 0x05	; 5
		_uplink_payload.bytes[4] = sharedData->humidity >> 8;
    39aa:	8c 91       	ld	r24, X
    39ac:	15 97       	sbiw	r26, 0x05	; 5
    39ae:	86 83       	std	Z+6, r24	; 0x06
    39b0:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[5] = sharedData->humidity & 0xFF;
    39b2:	8c 91       	ld	r24, X
    39b4:	14 97       	sbiw	r26, 0x04	; 4
    39b6:	87 83       	std	Z+7, r24	; 0x07
    39b8:	13 96       	adiw	r26, 0x03	; 3
		_uplink_payload.bytes[6] = sharedData->temperature >> 8;
    39ba:	8c 91       	ld	r24, X
    39bc:	13 97       	sbiw	r26, 0x03	; 3
    39be:	80 87       	std	Z+8, r24	; 0x08
    39c0:	12 96       	adiw	r26, 0x02	; 2
		_uplink_payload.bytes[7] = sharedData->temperature & 0xFF;
    39c2:	8c 91       	ld	r24, X
		
		// SENDING PAYLOAD	
		sprintf(printstring, "Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    39c4:	81 87       	std	Z+9, r24	; 0x09
    39c6:	bf 01       	movw	r22, r30
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	96 d4       	rcall	.+2348   	; 0x42f8 <lora_driver_sendUploadMessage>
    39cc:	82 d6       	rcall	.+3332   	; 0x46d2 <lora_driver_mapReturnCodeToText>
    39ce:	9f 93       	push	r25
    39d0:	8f 93       	push	r24
    39d2:	87 e5       	ldi	r24, 0x57	; 87
    39d4:	95 e0       	ldi	r25, 0x05	; 5
    39d6:	9f 93       	push	r25
    39d8:	8f 93       	push	r24
    39da:	ff 92       	push	r15
    39dc:	ef 92       	push	r14
    39de:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
		test_outprint(printstring);
    39e2:	c7 01       	movw	r24, r14
    39e4:	8a d0       	rcall	.+276    	; 0x3afa <test_outprint>
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	9a cf       	rjmp	.-204    	; 0x3926 <lora_handler_task+0x48>

000039f2 <task_download>:
    39f2:	cf 93       	push	r28
	}

}

void task_download( void *pvParameters )
{
    39f4:	df 93       	push	r29
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
    39fa:	66 97       	sbiw	r28, 0x16	; 22
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	d9 d3       	rcall	.+1970   	; 0x41bc <lora_driver_resetRn2483>
	vTaskDelay(2);
    3a0a:	62 e0       	ldi	r22, 0x02	; 2
    3a0c:	70 e0       	ldi	r23, 0x00	; 0
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	d1 d3       	rcall	.+1954   	; 0x41bc <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3a1a:	66 e9       	ldi	r22, 0x96	; 150
    3a1c:	70 e0       	ldi	r23, 0x00	; 0
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3a26:	83 d3       	rcall	.+1798   	; 0x412e <lora_driver_flushBuffers>
	// Declaring requestCode & Payload
	uint16_t requestCode;
	lora_driver_payload_t downlinkPayload;
	
	// Setting portNo & length for payload
	downlinkPayload.portNo = 2;
    3a28:	82 e0       	ldi	r24, 0x02	; 2
    3a2a:	89 83       	std	Y+1, r24	; 0x01
	downlinkPayload.len = 4;
    3a2c:	84 e0       	ldi	r24, 0x04	; 4
    3a2e:	8a 83       	std	Y+2, r24	; 0x02

	for(;;)
	{		
		// Receiving from LoRaWAN 
		xMessageBufferReceive(downlinkMessageBufferHandle, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    3a30:	0f ef       	ldi	r16, 0xFF	; 255
    3a32:	1f ef       	ldi	r17, 0xFF	; 255
    3a34:	98 01       	movw	r18, r16
    3a36:	46 e1       	ldi	r20, 0x16	; 22
    3a38:	50 e0       	ldi	r21, 0x00	; 0
    3a3a:	be 01       	movw	r22, r28
    3a3c:	6f 5f       	subi	r22, 0xFF	; 255
    3a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a40:	80 91 01 1a 	lds	r24, 0x1A01	; 0x801a01 <downlinkMessageBufferHandle>
    3a44:	90 91 02 1a 	lds	r25, 0x1A02	; 0x801a02 <downlinkMessageBufferHandle+0x1>
    3a48:	0e 94 cd 0a 	call	0x159a	; 0x159a <xStreamBufferReceive>
		
		sprintf(printstring, "DOWN LINK: %d bytes received! \n", downlinkPayload.len);
    3a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4e:	1f 92       	push	r1
    3a50:	8f 93       	push	r24
    3a52:	8c e6       	ldi	r24, 0x6C	; 108
    3a54:	95 e0       	ldi	r25, 0x05	; 5
    3a56:	9f 93       	push	r25
    3a58:	8f 93       	push	r24
    3a5a:	87 e9       	ldi	r24, 0x97	; 151
    3a5c:	99 e1       	ldi	r25, 0x19	; 25
    3a5e:	9f 93       	push	r25
    3a60:	8f 93       	push	r24
    3a62:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
		test_outprint(printstring);
    3a66:	87 e9       	ldi	r24, 0x97	; 151
    3a68:	99 e1       	ldi	r25, 0x19	; 25
    3a6a:	47 d0       	rcall	.+142    	; 0x3afa <test_outprint>
		
		if (4 == downlinkPayload.len) // Check that we've received the expected 4 bytes
    3a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	0f 90       	pop	r0
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	84 30       	cpi	r24, 0x04	; 4
    3a7c:	c9 f6       	brne	.-78     	; 0x3a30 <task_download+0x3e>
		{	
		//Converting bytes to integer
		requestCode = (downlinkPayload.bytes[2] << 8) + downlinkPayload.bytes[3];
    3a7e:	0d 81       	ldd	r16, Y+5	; 0x05
    3a80:	10 e0       	ldi	r17, 0x00	; 0
    3a82:	10 2f       	mov	r17, r16
    3a84:	00 27       	eor	r16, r16
    3a86:	8e 81       	ldd	r24, Y+6	; 0x06
    3a88:	08 0f       	add	r16, r24
    3a8a:	11 1d       	adc	r17, r1
		
		sprintf(printstring, "Requestcode received from downlink: %d \n", requestCode);
    3a8c:	1f 93       	push	r17
    3a8e:	0f 93       	push	r16
    3a90:	8c e8       	ldi	r24, 0x8C	; 140
    3a92:	95 e0       	ldi	r25, 0x05	; 5
    3a94:	9f 93       	push	r25
    3a96:	8f 93       	push	r24
    3a98:	87 e9       	ldi	r24, 0x97	; 151
    3a9a:	99 e1       	ldi	r25, 0x19	; 25
    3a9c:	9f 93       	push	r25
    3a9e:	8f 93       	push	r24
    3aa0:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
		test_outprint(printstring);
    3aa4:	87 e9       	ldi	r24, 0x97	; 151
    3aa6:	99 e1       	ldi	r25, 0x19	; 25
		
		//Calling servo to handle request
		handleServoRequest(requestCode);
    3aa8:	28 d0       	rcall	.+80     	; 0x3afa <test_outprint>
    3aaa:	c8 01       	movw	r24, r16
    3aac:	66 d0       	rcall	.+204    	; 0x3b7a <handleServoRequest>
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	0f 90       	pop	r0
    3aba:	ba cf       	rjmp	.-140    	; 0x3a30 <task_download+0x3e>

00003abc <lora_handler_initialise>:
void task_download( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3abc:	ef 92       	push	r14
    3abe:	ff 92       	push	r15
    3ac0:	0f 93       	push	r16
	xTaskCreate(
    3ac2:	e1 2c       	mov	r14, r1
    3ac4:	f1 2c       	mov	r15, r1
    3ac6:	02 e0       	ldi	r16, 0x02	; 2
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	48 e8       	ldi	r20, 0x88	; 136
    3ace:	51 e0       	ldi	r21, 0x01	; 1
    3ad0:	65 eb       	ldi	r22, 0xB5	; 181
    3ad2:	75 e0       	ldi	r23, 0x05	; 5
    3ad4:	8f e6       	ldi	r24, 0x6F	; 111
    3ad6:	9c e1       	ldi	r25, 0x1C	; 28
    3ad8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  ((UBaseType_t)2)  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
		xTaskCreate(
    3adc:	03 e0       	ldi	r16, 0x03	; 3
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	48 e8       	ldi	r20, 0x88	; 136
    3ae4:	51 e0       	ldi	r21, 0x01	; 1
    3ae6:	6c eb       	ldi	r22, 0xBC	; 188
    3ae8:	75 e0       	ldi	r23, 0x05	; 5
    3aea:	89 ef       	ldi	r24, 0xF9	; 249
    3aec:	9c e1       	ldi	r25, 0x1C	; 28
    3aee:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
	,  "LRHanddown"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  ((UBaseType_t)3)  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3af2:	0f 91       	pop	r16
    3af4:	ff 90       	pop	r15
    3af6:	ef 90       	pop	r14
    3af8:	08 95       	ret

00003afa <test_outprint>:
 */ 

#include "../semaphore/header/testOutprint.h"


void test_outprint(char* outprint) {
    3afa:	0f 93       	push	r16
    3afc:	cf 93       	push	r28
    3afe:	df 93       	push	r29
    3b00:	c8 2f       	mov	r28, r24
    3b02:	d9 2f       	mov	r29, r25
	// Check to see if semaphore is free
	if( xSemaphoreTake( xSemaphore, ( TickType_t ) 100 ) == pdTRUE )
    3b04:	44 e6       	ldi	r20, 0x64	; 100
    3b06:	50 e0       	ldi	r21, 0x00	; 0
    3b08:	60 e0       	ldi	r22, 0x00	; 0
    3b0a:	70 e0       	ldi	r23, 0x00	; 0
    3b0c:	80 91 95 19 	lds	r24, 0x1995	; 0x801995 <xSemaphore>
    3b10:	90 91 96 19 	lds	r25, 0x1996	; 0x801996 <xSemaphore+0x1>
    3b14:	0e 94 54 07 	call	0xea8	; 0xea8 <xQueueSemaphoreTake>
    3b18:	81 30       	cpi	r24, 0x01	; 1
    3b1a:	99 f4       	brne	.+38     	; 0x3b42 <test_outprint+0x48>
	{
		// Protecting critical section
		printf(outprint);		
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <printf>
		
		// Releasing semaphore again
		xSemaphoreGive( xSemaphore );
    3b24:	00 e0       	ldi	r16, 0x00	; 0
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	a9 01       	movw	r20, r18
    3b2c:	60 e0       	ldi	r22, 0x00	; 0
    3b2e:	70 e0       	ldi	r23, 0x00	; 0
    3b30:	80 91 95 19 	lds	r24, 0x1995	; 0x801995 <xSemaphore>
    3b34:	90 91 96 19 	lds	r25, 0x1996	; 0x801996 <xSemaphore+0x1>
    3b38:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xQueueGenericSend>
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	04 c0       	rjmp	.+8      	; 0x3b4a <test_outprint+0x50>
	}
	else
	{ 
		puts("The semaphore was already taken");
    3b42:	87 ec       	ldi	r24, 0xC7	; 199
    3b44:	95 e0       	ldi	r25, 0x05	; 5
    3b46:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <puts>
	}
}
    3b4a:	df 91       	pop	r29
    3b4c:	cf 91       	pop	r28
    3b4e:	0f 91       	pop	r16
    3b50:	08 95       	ret

00003b52 <initializeSemaphore>:

void initializeSemaphore(){
    3b52:	0f 93       	push	r16
	xSemaphore = xSemaphoreCreateBinary();
    3b54:	43 e0       	ldi	r20, 0x03	; 3
    3b56:	60 e0       	ldi	r22, 0x00	; 0
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <xQueueGenericCreate>
    3b5e:	90 93 96 19 	sts	0x1996, r25	; 0x801996 <xSemaphore+0x1>
    3b62:	80 93 95 19 	sts	0x1995, r24	; 0x801995 <xSemaphore>
	xSemaphoreGive(xSemaphore);
    3b66:	00 e0       	ldi	r16, 0x00	; 0
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	a9 01       	movw	r20, r18
    3b6e:	60 e0       	ldi	r22, 0x00	; 0
    3b70:	70 e0       	ldi	r23, 0x00	; 0
    3b72:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <xQueueGenericSend>
    3b76:	0f 91       	pop	r16
    3b78:	08 95       	ret

00003b7a <handleServoRequest>:

void handleServoRequest(int requestcode) {
	uint8_t servoNo = 1;
	int8_t percent;

	switch(requestcode) {
    3b7a:	83 30       	cpi	r24, 0x03	; 3
    3b7c:	91 05       	cpc	r25, r1
    3b7e:	d9 f0       	breq	.+54     	; 0x3bb6 <handleServoRequest+0x3c>
    3b80:	34 f4       	brge	.+12     	; 0x3b8e <handleServoRequest+0x14>
    3b82:	81 30       	cpi	r24, 0x01	; 1
    3b84:	91 05       	cpc	r25, r1
    3b86:	49 f0       	breq	.+18     	; 0x3b9a <handleServoRequest+0x20>
    3b88:	02 97       	sbiw	r24, 0x02	; 2
    3b8a:	71 f0       	breq	.+28     	; 0x3ba8 <handleServoRequest+0x2e>
    3b8c:	2f c0       	rjmp	.+94     	; 0x3bec <handleServoRequest+0x72>
    3b8e:	84 30       	cpi	r24, 0x04	; 4
    3b90:	91 05       	cpc	r25, r1
    3b92:	c1 f0       	breq	.+48     	; 0x3bc4 <handleServoRequest+0x4a>
    3b94:	05 97       	sbiw	r24, 0x05	; 5
    3b96:	01 f1       	breq	.+64     	; 0x3bd8 <handleServoRequest+0x5e>
    3b98:	29 c0       	rjmp	.+82     	; 0x3bec <handleServoRequest+0x72>
		case 1: {
			test_outprint("Water growbro \n");
    3b9a:	87 ee       	ldi	r24, 0xE7	; 231
    3b9c:	95 e0       	ldi	r25, 0x05	; 5
    3b9e:	ad df       	rcall	.-166    	; 0x3afa <test_outprint>
			percent = 100;
			rc_servo_setPosition(servoNo, percent);
    3ba0:	64 e6       	ldi	r22, 0x64	; 100
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	cb c6       	rjmp	.+3478   	; 0x493c <rc_servo_setPosition>
			break;
    3ba6:	08 95       	ret
		}
		case 2: {
			test_outprint("Open window \n");
    3ba8:	87 ef       	ldi	r24, 0xF7	; 247
    3baa:	95 e0       	ldi	r25, 0x05	; 5
    3bac:	a6 df       	rcall	.-180    	; 0x3afa <test_outprint>
			percent = -100;
			rc_servo_setPosition(servoNo, percent);
    3bae:	6c e9       	ldi	r22, 0x9C	; 156
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	c4 c6       	rjmp	.+3464   	; 0x493c <rc_servo_setPosition>
			break;
    3bb4:	08 95       	ret
		}
		case 3: {
			test_outprint("Close window \n");
    3bb6:	85 e0       	ldi	r24, 0x05	; 5
    3bb8:	96 e0       	ldi	r25, 0x06	; 6
    3bba:	9f df       	rcall	.-194    	; 0x3afa <test_outprint>
			percent = -50;
			rc_servo_setPosition(servoNo, percent);
    3bbc:	6e ec       	ldi	r22, 0xCE	; 206
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	bd c6       	rjmp	.+3450   	; 0x493c <rc_servo_setPosition>
			break;
		}
		case 4: {
			test_outprint("Water growbro & open window \n");
    3bc2:	08 95       	ret
    3bc4:	84 e1       	ldi	r24, 0x14	; 20
    3bc6:	96 e0       	ldi	r25, 0x06	; 6
			percent = 100;
			rc_servo_setPosition(servoNo, percent);
    3bc8:	98 df       	rcall	.-208    	; 0x3afa <test_outprint>
    3bca:	64 e6       	ldi	r22, 0x64	; 100
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
			percent = -100;
			rc_servo_setPosition(servoNo, percent);
    3bce:	b6 d6       	rcall	.+3436   	; 0x493c <rc_servo_setPosition>
    3bd0:	6c e9       	ldi	r22, 0x9C	; 156
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
		case 5: {
			test_outprint("Water growbro & close window \n");
    3bd4:	b3 c6       	rjmp	.+3430   	; 0x493c <rc_servo_setPosition>
    3bd6:	08 95       	ret
    3bd8:	82 e3       	ldi	r24, 0x32	; 50
    3bda:	96 e0       	ldi	r25, 0x06	; 6
			percent = 100;
			rc_servo_setPosition(servoNo, percent);
    3bdc:	8e df       	rcall	.-228    	; 0x3afa <test_outprint>
    3bde:	64 e6       	ldi	r22, 0x64	; 100
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	ac d6       	rcall	.+3416   	; 0x493c <rc_servo_setPosition>
			percent = -50;
			rc_servo_setPosition(servoNo, percent);
    3be4:	6e ec       	ldi	r22, 0xCE	; 206
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	a9 c6       	rjmp	.+3410   	; 0x493c <rc_servo_setPosition>
    3bea:	08 95       	ret
			break;
    3bec:	81 e5       	ldi	r24, 0x51	; 81
		}
		// If code doesn't represent something that we can use
		default: {
			puts("Unknown request code");
    3bee:	96 e0       	ldi	r25, 0x06	; 6
    3bf0:	0c 94 ae 2f 	jmp	0x5f5c	; 0x5f5c <puts>
    3bf4:	08 95       	ret

00003bf6 <takeMeasure>:
	
}


void takeMeasure(void *pvParameters)
{
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	00 d0       	rcall	.+0      	; 0x3bfc <takeMeasure+0x6>
    3bfc:	1f 92       	push	r1
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 60000/portTICK_PERIOD_MS; // 60 s

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3c02:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xTaskGetTickCount>
    3c06:	69 83       	std	Y+1, r22	; 0x01
    3c08:	7a 83       	std	Y+2, r23	; 0x02
    3c0a:	8b 83       	std	Y+3, r24	; 0x03
    3c0c:	9c 83       	std	Y+4, r25	; 0x04
		
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c0e:	46 ea       	ldi	r20, 0xA6	; 166
    3c10:	5e e0       	ldi	r21, 0x0E	; 14
    3c12:	60 e0       	ldi	r22, 0x00	; 0
    3c14:	70 e0       	ldi	r23, 0x00	; 0
    3c16:	ce 01       	movw	r24, r28
    3c18:	01 96       	adiw	r24, 0x01	; 1
    3c1a:	0e 94 07 10 	call	0x200e	; 0x200e <xTaskDelayUntil>
		tempHumMeasure(); // Call TempHumHandler to take measure
    3c1e:	d9 dc       	rcall	.-1614   	; 0x35d2 <tempHumMeasure>
		co2Measure(); // Call CO2Handler to take measure
    3c20:	1d dc       	rcall	.-1990   	; 0x345c <co2Measure>
    3c22:	f5 cf       	rjmp	.-22     	; 0x3c0e <takeMeasure+0x18>

00003c24 <enqueueMeasures>:
    3c24:	cf 93       	push	r28
	}
}

void enqueueMeasures(void *pvParameters)
{
    3c26:	df 93       	push	r29
    3c28:	00 d0       	rcall	.+0      	; 0x3c2a <enqueueMeasures+0x6>
    3c2a:	1f 92       	push	r1
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 600000/portTICK_PERIOD_MS; // 10 minutes

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3c30:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xTaskGetTickCount>
    3c34:	69 83       	std	Y+1, r22	; 0x01
    3c36:	7a 83       	std	Y+2, r23	; 0x02
    3c38:	8b 83       	std	Y+3, r24	; 0x03
    3c3a:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3c3c:	4c e7       	ldi	r20, 0x7C	; 124
    3c3e:	52 e9       	ldi	r21, 0x92	; 146
    3c40:	60 e0       	ldi	r22, 0x00	; 0
    3c42:	70 e0       	ldi	r23, 0x00	; 0
    3c44:	ce 01       	movw	r24, r28
    3c46:	01 96       	adiw	r24, 0x01	; 1
    3c48:	0e 94 07 10 	call	0x200e	; 0x200e <xTaskDelayUntil>
		enqueueSharedData(); // Call SharedDataQueue to enqueue the measures
    3c4c:	0e 94 11 01 	call	0x222	; 0x222 <enqueueSharedData>
    3c50:	f5 cf       	rjmp	.-22     	; 0x3c3c <enqueueMeasures+0x18>

00003c52 <setupTasks>:
void takeMeasure( void *pvParameters );
void enqueueMeasures( void *pvParameters );


void setupTasks(void) // Can only setup 2 tasks, memory problems?
{
    3c52:	ef 92       	push	r14
    3c54:	ff 92       	push	r15
    3c56:	0f 93       	push	r16
	
	xTaskCreate(
    3c58:	e1 2c       	mov	r14, r1
    3c5a:	f1 2c       	mov	r15, r1
    3c5c:	00 e0       	ldi	r16, 0x00	; 0
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 ec       	ldi	r20, 0xC0	; 192
    3c64:	50 e0       	ldi	r21, 0x00	; 0
    3c66:	66 e6       	ldi	r22, 0x66	; 102
    3c68:	76 e0       	ldi	r23, 0x06	; 6
    3c6a:	8b ef       	ldi	r24, 0xFB	; 251
    3c6c:	9d e1       	ldi	r25, 0x1D	; 29
    3c6e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	40 ec       	ldi	r20, 0xC0	; 192
    3c78:	50 e0       	ldi	r21, 0x00	; 0
    3c7a:	62 e7       	ldi	r22, 0x72	; 114
    3c7c:	76 e0       	ldi	r23, 0x06	; 6
    3c7e:	82 e1       	ldi	r24, 0x12	; 18
    3c80:	9e e1       	ldi	r25, 0x1E	; 30
    3c82:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );	
	
}
    3c86:	0f 91       	pop	r16
    3c88:	ff 90       	pop	r15
    3c8a:	ef 90       	pop	r14
    3c8c:	08 95       	ret

00003c8e <startTasks>:
}


void startTasks()
{
	setupTasks();
    3c8e:	e1 df       	rcall	.-62     	; 0x3c52 <setupTasks>
	
	sprintf(printstring, "Heapsize: %d \n", xPortGetFreeHeapSize()); // Check to see if there is enough heap
    3c90:	0e 94 0d 03 	call	0x61a	; 0x61a <xPortGetFreeHeapSize>
    3c94:	9f 93       	push	r25
    3c96:	8f 93       	push	r24
    3c98:	82 e8       	ldi	r24, 0x82	; 130
    3c9a:	96 e0       	ldi	r25, 0x06	; 6
    3c9c:	9f 93       	push	r25
    3c9e:	8f 93       	push	r24
    3ca0:	87 e9       	ldi	r24, 0x97	; 151
    3ca2:	99 e1       	ldi	r25, 0x19	; 25
    3ca4:	9f 93       	push	r25
    3ca6:	8f 93       	push	r24
    3ca8:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
	//test_outprint(printstring);
	
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3cac:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <vTaskStartScheduler>
}
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	08 95       	ret

00003cbe <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3cbe:	81 b1       	in	r24, 0x01	; 1
    3cc0:	81 68       	ori	r24, 0x81	; 129
    3cc2:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	0e 94 8a 28 	call	0x5114	; 0x5114 <stdio_initialise>
	
	// Initialize queues
	initializeCO2Queue();
    3ccc:	bd db       	rcall	.-2182   	; 0x3448 <initializeCO2Queue>
	initializeTempHumQueues();
    3cce:	08 dc       	rcall	.-2032   	; 0x34e0 <initializeTempHumQueues>
    3cd0:	0e 94 08 01 	call	0x210	; 0x210 <initializeSharedDataQueue>
	initializeSharedDataQueue();
	
	// Initializing semaphore for test outprints
	initializeSemaphore();
    3cd4:	3e df       	rcall	.-388    	; 0x3b52 <initializeSemaphore>

	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    3cd6:	83 e0       	ldi	r24, 0x03	; 3
    3cd8:	d8 d5       	rcall	.+2992   	; 0x488a <mh_z19_initialise>
	// Initializing temperature & humidity sensor
	hih8120_initialise();
    3cda:	a3 d0       	rcall	.+326    	; 0x3e22 <hih8120_initialise>
    3cdc:	47 d6       	rcall	.+3214   	; 0x496c <rc_servo_initialise>
	// Initializing servo
	rc_servo_initialise();
    3cde:	85 e0       	ldi	r24, 0x05	; 5
    3ce0:	0e 94 91 29 	call	0x5322	; 0x5322 <status_leds_initialise>



	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3ce4:	41 e0       	ldi	r20, 0x01	; 1
    3ce6:	60 e0       	ldi	r22, 0x00	; 0
	// Initialise the LoRaWAN driver without down-link buffer
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3ce8:	70 e0       	ldi	r23, 0x00	; 0
    3cea:	8c e2       	ldi	r24, 0x2C	; 44
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xStreamBufferGenericCreate>
    3cf2:	90 93 02 1a 	sts	0x1A02, r25	; 0x801a02 <downlinkMessageBufferHandle+0x1>
    3cf6:	80 93 01 1a 	sts	0x1A01, r24	; 0x801a01 <downlinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    3cfa:	bc 01       	movw	r22, r24
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	1e d2       	rcall	.+1084   	; 0x413c <lora_driver_initialise>
    3d00:	83 e0       	ldi	r24, 0x03	; 3
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3d02:	dc ce       	rjmp	.-584    	; 0x3abc <lora_handler_initialise>
    3d04:	08 95       	ret

00003d06 <main>:
    3d06:	db df       	rcall	.-74     	; 0x3cbe <initialiseSystem>
    3d08:	81 e9       	ldi	r24, 0x91	; 145
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	
	puts("Program started!");
    3d0a:	96 e0       	ldi	r25, 0x06	; 6
    3d0c:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <puts>
	
	startTasks();
    3d10:	be df       	rcall	.-132    	; 0x3c8e <startTasks>
    3d12:	ff cf       	rjmp	.-2      	; 0x3d12 <main+0xc>

00003d14 <__fixsfsi>:
    3d14:	04 d0       	rcall	.+8      	; 0x3d1e <__fixunssfsi>
    3d16:	68 94       	set
    3d18:	b1 11       	cpse	r27, r1
    3d1a:	50 c0       	rjmp	.+160    	; 0x3dbc <__fp_szero>
    3d1c:	08 95       	ret

00003d1e <__fixunssfsi>:
    3d1e:	33 d0       	rcall	.+102    	; 0x3d86 <__fp_splitA>
    3d20:	88 f0       	brcs	.+34     	; 0x3d44 <__fixunssfsi+0x26>
    3d22:	9f 57       	subi	r25, 0x7F	; 127
    3d24:	90 f0       	brcs	.+36     	; 0x3d4a <__fixunssfsi+0x2c>
    3d26:	b9 2f       	mov	r27, r25
    3d28:	99 27       	eor	r25, r25
    3d2a:	b7 51       	subi	r27, 0x17	; 23
    3d2c:	a0 f0       	brcs	.+40     	; 0x3d56 <__fixunssfsi+0x38>
    3d2e:	d1 f0       	breq	.+52     	; 0x3d64 <__fixunssfsi+0x46>
    3d30:	66 0f       	add	r22, r22
    3d32:	77 1f       	adc	r23, r23
    3d34:	88 1f       	adc	r24, r24
    3d36:	99 1f       	adc	r25, r25
    3d38:	1a f0       	brmi	.+6      	; 0x3d40 <__fixunssfsi+0x22>
    3d3a:	ba 95       	dec	r27
    3d3c:	c9 f7       	brne	.-14     	; 0x3d30 <__fixunssfsi+0x12>
    3d3e:	12 c0       	rjmp	.+36     	; 0x3d64 <__fixunssfsi+0x46>
    3d40:	b1 30       	cpi	r27, 0x01	; 1
    3d42:	81 f0       	breq	.+32     	; 0x3d64 <__fixunssfsi+0x46>
    3d44:	3a d0       	rcall	.+116    	; 0x3dba <__fp_zero>
    3d46:	b1 e0       	ldi	r27, 0x01	; 1
    3d48:	08 95       	ret
    3d4a:	37 c0       	rjmp	.+110    	; 0x3dba <__fp_zero>
    3d4c:	67 2f       	mov	r22, r23
    3d4e:	78 2f       	mov	r23, r24
    3d50:	88 27       	eor	r24, r24
    3d52:	b8 5f       	subi	r27, 0xF8	; 248
    3d54:	39 f0       	breq	.+14     	; 0x3d64 <__fixunssfsi+0x46>
    3d56:	b9 3f       	cpi	r27, 0xF9	; 249
    3d58:	cc f3       	brlt	.-14     	; 0x3d4c <__fixunssfsi+0x2e>
    3d5a:	86 95       	lsr	r24
    3d5c:	77 95       	ror	r23
    3d5e:	67 95       	ror	r22
    3d60:	b3 95       	inc	r27
    3d62:	d9 f7       	brne	.-10     	; 0x3d5a <__fixunssfsi+0x3c>
    3d64:	3e f4       	brtc	.+14     	; 0x3d74 <__fixunssfsi+0x56>
    3d66:	90 95       	com	r25
    3d68:	80 95       	com	r24
    3d6a:	70 95       	com	r23
    3d6c:	61 95       	neg	r22
    3d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d70:	8f 4f       	sbci	r24, 0xFF	; 255
    3d72:	9f 4f       	sbci	r25, 0xFF	; 255
    3d74:	08 95       	ret

00003d76 <__fp_split3>:
    3d76:	57 fd       	sbrc	r21, 7
    3d78:	90 58       	subi	r25, 0x80	; 128
    3d7a:	44 0f       	add	r20, r20
    3d7c:	55 1f       	adc	r21, r21
    3d7e:	59 f0       	breq	.+22     	; 0x3d96 <__fp_splitA+0x10>
    3d80:	5f 3f       	cpi	r21, 0xFF	; 255
    3d82:	71 f0       	breq	.+28     	; 0x3da0 <__fp_splitA+0x1a>
    3d84:	47 95       	ror	r20

00003d86 <__fp_splitA>:
    3d86:	88 0f       	add	r24, r24
    3d88:	97 fb       	bst	r25, 7
    3d8a:	99 1f       	adc	r25, r25
    3d8c:	61 f0       	breq	.+24     	; 0x3da6 <__fp_splitA+0x20>
    3d8e:	9f 3f       	cpi	r25, 0xFF	; 255
    3d90:	79 f0       	breq	.+30     	; 0x3db0 <__fp_splitA+0x2a>
    3d92:	87 95       	ror	r24
    3d94:	08 95       	ret
    3d96:	12 16       	cp	r1, r18
    3d98:	13 06       	cpc	r1, r19
    3d9a:	14 06       	cpc	r1, r20
    3d9c:	55 1f       	adc	r21, r21
    3d9e:	f2 cf       	rjmp	.-28     	; 0x3d84 <__fp_split3+0xe>
    3da0:	46 95       	lsr	r20
    3da2:	f1 df       	rcall	.-30     	; 0x3d86 <__fp_splitA>
    3da4:	08 c0       	rjmp	.+16     	; 0x3db6 <__fp_splitA+0x30>
    3da6:	16 16       	cp	r1, r22
    3da8:	17 06       	cpc	r1, r23
    3daa:	18 06       	cpc	r1, r24
    3dac:	99 1f       	adc	r25, r25
    3dae:	f1 cf       	rjmp	.-30     	; 0x3d92 <__fp_splitA+0xc>
    3db0:	86 95       	lsr	r24
    3db2:	71 05       	cpc	r23, r1
    3db4:	61 05       	cpc	r22, r1
    3db6:	08 94       	sec
    3db8:	08 95       	ret

00003dba <__fp_zero>:
    3dba:	e8 94       	clt

00003dbc <__fp_szero>:
    3dbc:	bb 27       	eor	r27, r27
    3dbe:	66 27       	eor	r22, r22
    3dc0:	77 27       	eor	r23, r23
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	97 f9       	bld	r25, 7
    3dc6:	08 95       	ret

00003dc8 <_hihTwiCallback>:
    3dc8:	65 30       	cpi	r22, 0x05	; 5
    3dca:	f1 f4       	brne	.+60     	; 0x3e08 <_hihTwiCallback+0x40>
    3dcc:	fa 01       	movw	r30, r20
    3dce:	80 81       	ld	r24, Z
    3dd0:	8f 73       	andi	r24, 0x3F	; 63
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	98 2f       	mov	r25, r24
    3dd6:	88 27       	eor	r24, r24
    3dd8:	21 81       	ldd	r18, Z+1	; 0x01
    3dda:	82 2b       	or	r24, r18
    3ddc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3de0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3de4:	82 81       	ldd	r24, Z+2	; 0x02
    3de6:	f0 e4       	ldi	r31, 0x40	; 64
    3de8:	8f 9f       	mul	r24, r31
    3dea:	c0 01       	movw	r24, r0
    3dec:	11 24       	eor	r1, r1
    3dee:	fa 01       	movw	r30, r20
    3df0:	23 81       	ldd	r18, Z+3	; 0x03
    3df2:	26 95       	lsr	r18
    3df4:	26 95       	lsr	r18
    3df6:	82 2b       	or	r24, r18
    3df8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3dfc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	80 93 2b 18 	sts	0x182B, r24	; 0x80182b <_measuringIsReady>
    3e06:	08 95       	ret
    3e08:	64 30       	cpi	r22, 0x04	; 4
    3e0a:	51 f0       	breq	.+20     	; 0x3e20 <_hihTwiCallback+0x58>
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	90 e4       	ldi	r25, 0x40	; 64
    3e10:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3e14:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3e18:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3e1c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3e20:	08 95       	ret

00003e22 <hih8120_initialise>:
    3e22:	0f 93       	push	r16
    3e24:	1f 93       	push	r17
    3e26:	04 ee       	ldi	r16, 0xE4	; 228
    3e28:	1e e1       	ldi	r17, 0x1E	; 30
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	34 e2       	ldi	r19, 0x24	; 36
    3e2e:	44 ef       	ldi	r20, 0xF4	; 244
    3e30:	50 e0       	ldi	r21, 0x00	; 0
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	87 e2       	ldi	r24, 0x27	; 39
    3e36:	0e 94 66 2a 	call	0x54cc	; 0x54cc <twiCreate>
    3e3a:	90 93 2d 18 	sts	0x182D, r25	; 0x80182d <_hih8120Handler+0x1>
    3e3e:	80 93 2c 18 	sts	0x182C, r24	; 0x80182c <_hih8120Handler>
    3e42:	21 e0       	ldi	r18, 0x01	; 1
    3e44:	89 2b       	or	r24, r25
    3e46:	09 f0       	breq	.+2      	; 0x3e4a <hih8120_initialise+0x28>
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	82 2f       	mov	r24, r18
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	08 95       	ret

00003e52 <hih8120_wakeup>:
    3e52:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_hih8120Handler>
    3e56:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_hih8120Handler+0x1>
    3e5a:	00 97       	sbiw	r24, 0x00	; 0
    3e5c:	59 f0       	breq	.+22     	; 0x3e74 <hih8120_wakeup+0x22>
    3e5e:	40 e0       	ldi	r20, 0x00	; 0
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	70 e0       	ldi	r23, 0x00	; 0
    3e64:	0e 94 b7 2a 	call	0x556e	; 0x556e <twiTransmit>
    3e68:	84 30       	cpi	r24, 0x04	; 4
    3e6a:	31 f4       	brne	.+12     	; 0x3e78 <hih8120_wakeup+0x26>
    3e6c:	10 92 2b 18 	sts	0x182B, r1	; 0x80182b <_measuringIsReady>
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	08 95       	ret
    3e74:	82 e0       	ldi	r24, 0x02	; 2
    3e76:	08 95       	ret
    3e78:	83 e0       	ldi	r24, 0x03	; 3
    3e7a:	08 95       	ret

00003e7c <hih8120_measure>:
    3e7c:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_hih8120Handler>
    3e80:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_hih8120Handler+0x1>
    3e84:	00 97       	sbiw	r24, 0x00	; 0
    3e86:	39 f0       	breq	.+14     	; 0x3e96 <hih8120_measure+0x1a>
    3e88:	64 e0       	ldi	r22, 0x04	; 4
    3e8a:	0e 94 03 2b 	call	0x5606	; 0x5606 <twiReceive>
    3e8e:	85 30       	cpi	r24, 0x05	; 5
    3e90:	21 f0       	breq	.+8      	; 0x3e9a <hih8120_measure+0x1e>
    3e92:	83 e0       	ldi	r24, 0x03	; 3
    3e94:	08 95       	ret
    3e96:	82 e0       	ldi	r24, 0x02	; 2
    3e98:	08 95       	ret
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	08 95       	ret

00003e9e <hih8120_getHumidity>:
    3e9e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3ea2:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <__floatunsisf>
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	48 ec       	ldi	r20, 0xC8	; 200
    3eb4:	52 e4       	ldi	r21, 0x42	; 66
    3eb6:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <__mulsf3>
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	38 ef       	ldi	r19, 0xF8	; 248
    3ebe:	4f e7       	ldi	r20, 0x7F	; 127
    3ec0:	56 e4       	ldi	r21, 0x46	; 70
    3ec2:	0c 94 76 2c 	jmp	0x58ec	; 0x58ec <__divsf3>
    3ec6:	08 95       	ret

00003ec8 <hih8120_getTemperature>:
    3ec8:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3ecc:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <__floatunsisf>
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	45 e2       	ldi	r20, 0x25	; 37
    3ede:	53 e4       	ldi	r21, 0x43	; 67
    3ee0:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <__mulsf3>
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	38 ef       	ldi	r19, 0xF8	; 248
    3ee8:	4f e7       	ldi	r20, 0x7F	; 127
    3eea:	56 e4       	ldi	r21, 0x46	; 70
    3eec:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__divsf3>
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e2       	ldi	r20, 0x20	; 32
    3ef6:	52 e4       	ldi	r21, 0x42	; 66
    3ef8:	0c 94 0f 2c 	jmp	0x581e	; 0x581e <__subsf3>
    3efc:	08 95       	ret

00003efe <_serialCallBack>:
    3efe:	0f 93       	push	r16
    3f00:	1f 93       	push	r17
    3f02:	cf 93       	push	r28
    3f04:	df 93       	push	r29
    3f06:	1f 92       	push	r1
    3f08:	1f 92       	push	r1
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
    3f0e:	8c 01       	movw	r16, r24
    3f10:	19 82       	std	Y+1, r1	; 0x01
    3f12:	2d c0       	rjmp	.+90     	; 0x3f6e <_serialCallBack+0x70>
    3f14:	e0 91 92 18 	lds	r30, 0x1892	; 0x801892 <rec_buf_inp.2878>
    3f18:	ec 32       	cpi	r30, 0x2C	; 44
    3f1a:	50 f4       	brcc	.+20     	; 0x3f30 <_serialCallBack+0x32>
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	8e 0f       	add	r24, r30
    3f20:	80 93 92 18 	sts	0x1892, r24	; 0x801892 <rec_buf_inp.2878>
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	ec 53       	subi	r30, 0x3C	; 60
    3f28:	f7 4e       	sbci	r31, 0xE7	; 231
    3f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2c:	80 83       	st	Z, r24
    3f2e:	02 c0       	rjmp	.+4      	; 0x3f34 <_serialCallBack+0x36>
    3f30:	10 92 92 18 	sts	0x1892, r1	; 0x801892 <rec_buf_inp.2878>
    3f34:	8a 81       	ldd	r24, Y+2	; 0x02
    3f36:	8a 30       	cpi	r24, 0x0A	; 10
    3f38:	d1 f4       	brne	.+52     	; 0x3f6e <_serialCallBack+0x70>
    3f3a:	40 91 92 18 	lds	r20, 0x1892	; 0x801892 <rec_buf_inp.2878>
    3f3e:	50 e0       	ldi	r21, 0x00	; 0
    3f40:	fa 01       	movw	r30, r20
    3f42:	ee 53       	subi	r30, 0x3E	; 62
    3f44:	f7 4e       	sbci	r31, 0xE7	; 231
    3f46:	10 82       	st	Z, r1
    3f48:	41 50       	subi	r20, 0x01	; 1
    3f4a:	51 09       	sbc	r21, r1
    3f4c:	9e 01       	movw	r18, r28
    3f4e:	2f 5f       	subi	r18, 0xFF	; 255
    3f50:	3f 4f       	sbci	r19, 0xFF	; 255
    3f52:	64 ec       	ldi	r22, 0xC4	; 196
    3f54:	78 e1       	ldi	r23, 0x18	; 24
    3f56:	80 91 95 18 	lds	r24, 0x1895	; 0x801895 <_serialReplyBufferHandle>
    3f5a:	90 91 96 18 	lds	r25, 0x1896	; 0x801896 <_serialReplyBufferHandle+0x1>
    3f5e:	0e 94 89 0a 	call	0x1512	; 0x1512 <xStreamBufferSendFromISR>
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
    3f64:	81 11       	cpse	r24, r1
    3f66:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <vPortYield>
    3f6a:	10 92 92 18 	sts	0x1892, r1	; 0x801892 <rec_buf_inp.2878>
    3f6e:	be 01       	movw	r22, r28
    3f70:	6e 5f       	subi	r22, 0xFE	; 254
    3f72:	7f 4f       	sbci	r23, 0xFF	; 255
    3f74:	c8 01       	movw	r24, r16
    3f76:	38 d6       	rcall	.+3184   	; 0x4be8 <serial_getByte>
    3f78:	88 23       	and	r24, r24
    3f7a:	61 f2       	breq	.-104    	; 0x3f14 <_serialCallBack+0x16>
    3f7c:	0f 90       	pop	r0
    3f7e:	0f 90       	pop	r0
    3f80:	df 91       	pop	r29
    3f82:	cf 91       	pop	r28
    3f84:	1f 91       	pop	r17
    3f86:	0f 91       	pop	r16
    3f88:	08 95       	ret

00003f8a <_uploadMessage>:
    3f8a:	0f 93       	push	r16
    3f8c:	1f 93       	push	r17
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	8c 01       	movw	r16, r24
    3f94:	eb 01       	movw	r28, r22
    3f96:	80 91 95 18 	lds	r24, 0x1895	; 0x801895 <_serialReplyBufferHandle>
    3f9a:	90 91 96 18 	lds	r25, 0x1896	; 0x801896 <_serialReplyBufferHandle+0x1>
    3f9e:	0e 94 96 09 	call	0x132c	; 0x132c <xStreamBufferReset>
    3fa2:	b8 01       	movw	r22, r16
    3fa4:	8e e2       	ldi	r24, 0x2E	; 46
    3fa6:	98 e1       	ldi	r25, 0x18	; 24
    3fa8:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <strcpy>
    3fac:	20 97       	sbiw	r28, 0x00	; 0
    3fae:	79 f0       	breq	.+30     	; 0x3fce <_uploadMessage+0x44>
    3fb0:	ee e2       	ldi	r30, 0x2E	; 46
    3fb2:	f8 e1       	ldi	r31, 0x18	; 24
    3fb4:	01 90       	ld	r0, Z+
    3fb6:	00 20       	and	r0, r0
    3fb8:	e9 f7       	brne	.-6      	; 0x3fb4 <_uploadMessage+0x2a>
    3fba:	31 97       	sbiw	r30, 0x01	; 1
    3fbc:	80 e2       	ldi	r24, 0x20	; 32
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	91 83       	std	Z+1, r25	; 0x01
    3fc2:	80 83       	st	Z, r24
    3fc4:	be 01       	movw	r22, r28
    3fc6:	8e e2       	ldi	r24, 0x2E	; 46
    3fc8:	98 e1       	ldi	r25, 0x18	; 24
    3fca:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <strcat>
    3fce:	ee e2       	ldi	r30, 0x2E	; 46
    3fd0:	f8 e1       	ldi	r31, 0x18	; 24
    3fd2:	df 01       	movw	r26, r30
    3fd4:	0d 90       	ld	r0, X+
    3fd6:	00 20       	and	r0, r0
    3fd8:	e9 f7       	brne	.-6      	; 0x3fd4 <_uploadMessage+0x4a>
    3fda:	11 97       	sbiw	r26, 0x01	; 1
    3fdc:	8d e0       	ldi	r24, 0x0D	; 13
    3fde:	9a e0       	ldi	r25, 0x0A	; 10
    3fe0:	11 96       	adiw	r26, 0x01	; 1
    3fe2:	9c 93       	st	X, r25
    3fe4:	8e 93       	st	-X, r24
    3fe6:	12 96       	adiw	r26, 0x02	; 2
    3fe8:	1c 92       	st	X, r1
    3fea:	01 90       	ld	r0, Z+
    3fec:	00 20       	and	r0, r0
    3fee:	e9 f7       	brne	.-6      	; 0x3fea <_uploadMessage+0x60>
    3ff0:	31 97       	sbiw	r30, 0x01	; 1
    3ff2:	ee 52       	subi	r30, 0x2E	; 46
    3ff4:	f8 41       	sbci	r31, 0x18	; 24
    3ff6:	ae 2f       	mov	r26, r30
    3ff8:	8e e2       	ldi	r24, 0x2E	; 46
    3ffa:	98 e1       	ldi	r25, 0x18	; 24
    3ffc:	ac 01       	movw	r20, r24
    3ffe:	6a 2f       	mov	r22, r26
    4000:	80 91 97 18 	lds	r24, 0x1897	; 0x801897 <_rn2483_serial>
    4004:	90 91 98 18 	lds	r25, 0x1898	; 0x801898 <_rn2483_serial+0x1>
    4008:	9a d5       	rcall	.+2868   	; 0x4b3e <serial_sendBytes>
    400a:	81 11       	cpse	r24, r1
    400c:	11 c0       	rjmp	.+34     	; 0x4030 <_uploadMessage+0xa6>
    400e:	08 e2       	ldi	r16, 0x28	; 40
    4010:	15 e0       	ldi	r17, 0x05	; 5
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	4d e2       	ldi	r20, 0x2D	; 45
    4018:	50 e0       	ldi	r21, 0x00	; 0
    401a:	6e e1       	ldi	r22, 0x1E	; 30
    401c:	79 e1       	ldi	r23, 0x19	; 25
    401e:	80 91 95 18 	lds	r24, 0x1895	; 0x801895 <_serialReplyBufferHandle>
    4022:	90 91 96 18 	lds	r25, 0x1896	; 0x801896 <_serialReplyBufferHandle+0x1>
    4026:	0e 94 cd 0a 	call	0x159a	; 0x159a <xStreamBufferReceive>
    402a:	8e e1       	ldi	r24, 0x1E	; 30
    402c:	99 e1       	ldi	r25, 0x19	; 25
    402e:	02 c0       	rjmp	.+4      	; 0x4034 <_uploadMessage+0xaa>
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	df 91       	pop	r29
    4036:	cf 91       	pop	r28
    4038:	1f 91       	pop	r17
    403a:	0f 91       	pop	r16
    403c:	08 95       	ret

0000403e <_reply2ReturnCode>:
    403e:	2f 92       	push	r2
    4040:	3f 92       	push	r3
    4042:	4f 92       	push	r4
    4044:	5f 92       	push	r5
    4046:	6f 92       	push	r6
    4048:	7f 92       	push	r7
    404a:	8f 92       	push	r8
    404c:	9f 92       	push	r9
    404e:	af 92       	push	r10
    4050:	bf 92       	push	r11
    4052:	cf 92       	push	r12
    4054:	df 92       	push	r13
    4056:	ef 92       	push	r14
    4058:	ff 92       	push	r15
    405a:	0f 93       	push	r16
    405c:	1f 93       	push	r17
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	5c 01       	movw	r10, r24
    4064:	fc 01       	movw	r30, r24
    4066:	01 90       	ld	r0, Z+
    4068:	00 20       	and	r0, r0
    406a:	e9 f7       	brne	.-6      	; 0x4066 <_reply2ReturnCode+0x28>
    406c:	31 97       	sbiw	r30, 0x01	; 1
    406e:	6f 01       	movw	r12, r30
    4070:	c8 1a       	sub	r12, r24
    4072:	d9 0a       	sbc	r13, r25
    4074:	5c 2c       	mov	r5, r12
    4076:	0f 2e       	mov	r0, r31
    4078:	fb e3       	ldi	r31, 0x3B	; 59
    407a:	8f 2e       	mov	r8, r31
    407c:	f9 e0       	ldi	r31, 0x09	; 9
    407e:	9f 2e       	mov	r9, r31
    4080:	f0 2d       	mov	r31, r0
    4082:	e1 2c       	mov	r14, r1
    4084:	f1 2c       	mov	r15, r1
    4086:	4c 2c       	mov	r4, r12
    4088:	37 01       	movw	r6, r14
    408a:	f4 01       	movw	r30, r8
    408c:	01 81       	ldd	r16, Z+1	; 0x01
    408e:	12 81       	ldd	r17, Z+2	; 0x02
    4090:	e8 01       	movw	r28, r16
    4092:	09 90       	ld	r0, Y+
    4094:	00 20       	and	r0, r0
    4096:	e9 f7       	brne	.-6      	; 0x4092 <_reply2ReturnCode+0x54>
    4098:	21 97       	sbiw	r28, 0x01	; 1
    409a:	c0 1b       	sub	r28, r16
    409c:	d1 0b       	sbc	r29, r17
    409e:	3c 2e       	mov	r3, r28
    40a0:	f9 e0       	ldi	r31, 0x09	; 9
    40a2:	cf 16       	cp	r12, r31
    40a4:	d1 04       	cpc	r13, r1
    40a6:	58 f0       	brcs	.+22     	; 0x40be <_reply2ReturnCode+0x80>
    40a8:	f4 01       	movw	r30, r8
    40aa:	20 80       	ld	r2, Z
    40ac:	fe e0       	ldi	r31, 0x0E	; 14
    40ae:	2f 12       	cpse	r2, r31
    40b0:	06 c0       	rjmp	.+12     	; 0x40be <_reply2ReturnCode+0x80>
    40b2:	b8 01       	movw	r22, r16
    40b4:	c5 01       	movw	r24, r10
    40b6:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <strcasestr>
    40ba:	89 2b       	or	r24, r25
    40bc:	09 f5       	brne	.+66     	; 0x4100 <_reply2ReturnCode+0xc2>
    40be:	44 2d       	mov	r20, r4
    40c0:	35 14       	cp	r3, r5
    40c2:	08 f4       	brcc	.+2      	; 0x40c6 <_reply2ReturnCode+0x88>
    40c4:	4c 2f       	mov	r20, r28
    40c6:	50 e0       	ldi	r21, 0x00	; 0
    40c8:	b8 01       	movw	r22, r16
    40ca:	c5 01       	movw	r24, r10
    40cc:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <strncasecmp>
    40d0:	89 2b       	or	r24, r25
    40d2:	49 f4       	brne	.+18     	; 0x40e6 <_reply2ReturnCode+0xa8>
    40d4:	f3 01       	movw	r30, r6
    40d6:	ee 0f       	add	r30, r30
    40d8:	ff 1f       	adc	r31, r31
    40da:	e6 0d       	add	r30, r6
    40dc:	f7 1d       	adc	r31, r7
    40de:	e5 5c       	subi	r30, 0xC5	; 197
    40e0:	f6 4f       	sbci	r31, 0xF6	; 246
    40e2:	20 80       	ld	r2, Z
    40e4:	0d c0       	rjmp	.+26     	; 0x4100 <_reply2ReturnCode+0xc2>
    40e6:	8f ef       	ldi	r24, 0xFF	; 255
    40e8:	e8 1a       	sub	r14, r24
    40ea:	f8 0a       	sbc	r15, r24
    40ec:	e3 e0       	ldi	r30, 0x03	; 3
    40ee:	8e 0e       	add	r8, r30
    40f0:	91 1c       	adc	r9, r1
    40f2:	f1 e1       	ldi	r31, 0x11	; 17
    40f4:	ef 16       	cp	r14, r31
    40f6:	f1 04       	cpc	r15, r1
    40f8:	39 f6       	brne	.-114    	; 0x4088 <_reply2ReturnCode+0x4a>
    40fa:	68 94       	set
    40fc:	22 24       	eor	r2, r2
    40fe:	24 f8       	bld	r2, 4
    4100:	82 2d       	mov	r24, r2
    4102:	df 91       	pop	r29
    4104:	cf 91       	pop	r28
    4106:	1f 91       	pop	r17
    4108:	0f 91       	pop	r16
    410a:	ff 90       	pop	r15
    410c:	ef 90       	pop	r14
    410e:	df 90       	pop	r13
    4110:	cf 90       	pop	r12
    4112:	bf 90       	pop	r11
    4114:	af 90       	pop	r10
    4116:	9f 90       	pop	r9
    4118:	8f 90       	pop	r8
    411a:	7f 90       	pop	r7
    411c:	6f 90       	pop	r6
    411e:	5f 90       	pop	r5
    4120:	4f 90       	pop	r4
    4122:	3f 90       	pop	r3
    4124:	2f 90       	pop	r2
    4126:	08 95       	ret

00004128 <_uploadMessageRc>:
    4128:	30 df       	rcall	.-416    	; 0x3f8a <_uploadMessage>
    412a:	89 cf       	rjmp	.-238    	; 0x403e <_reply2ReturnCode>
    412c:	08 95       	ret

0000412e <lora_driver_flushBuffers>:
    412e:	80 91 95 18 	lds	r24, 0x1895	; 0x801895 <_serialReplyBufferHandle>
    4132:	90 91 96 18 	lds	r25, 0x1896	; 0x801896 <_serialReplyBufferHandle+0x1>
    4136:	0c 94 96 09 	jmp	0x132c	; 0x132c <xStreamBufferReset>
    413a:	08 95       	ret

0000413c <lora_driver_initialise>:
    413c:	8f 92       	push	r8
    413e:	9f 92       	push	r9
    4140:	af 92       	push	r10
    4142:	cf 92       	push	r12
    4144:	ef 92       	push	r14
    4146:	0f 93       	push	r16
    4148:	1f 93       	push	r17
    414a:	cf 93       	push	r28
    414c:	c8 2f       	mov	r28, r24
    414e:	8b 01       	movw	r16, r22
    4150:	41 e0       	ldi	r20, 0x01	; 1
    4152:	60 e0       	ldi	r22, 0x00	; 0
    4154:	70 e0       	ldi	r23, 0x00	; 0
    4156:	88 ec       	ldi	r24, 0xC8	; 200
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xStreamBufferGenericCreate>
    415e:	90 93 96 18 	sts	0x1896, r25	; 0x801896 <_serialReplyBufferHandle+0x1>
    4162:	80 93 95 18 	sts	0x1895, r24	; 0x801895 <_serialReplyBufferHandle>
    4166:	10 93 94 18 	sts	0x1894, r17	; 0x801894 <_downlinkMessageBuffer+0x1>
    416a:	00 93 93 18 	sts	0x1893, r16	; 0x801893 <_downlinkMessageBuffer>
    416e:	0f 2e       	mov	r0, r31
    4170:	ff e7       	ldi	r31, 0x7F	; 127
    4172:	8f 2e       	mov	r8, r31
    4174:	ff e1       	ldi	r31, 0x1F	; 31
    4176:	9f 2e       	mov	r9, r31
    4178:	f0 2d       	mov	r31, r0
    417a:	68 94       	set
    417c:	aa 24       	eor	r10, r10
    417e:	a6 f8       	bld	r10, 6
    4180:	68 94       	set
    4182:	cc 24       	eor	r12, r12
    4184:	c6 f8       	bld	r12, 6
    4186:	e1 2c       	mov	r14, r1
    4188:	00 e0       	ldi	r16, 0x00	; 0
    418a:	23 e0       	ldi	r18, 0x03	; 3
    418c:	40 e0       	ldi	r20, 0x00	; 0
    418e:	51 ee       	ldi	r21, 0xE1	; 225
    4190:	60 e0       	ldi	r22, 0x00	; 0
    4192:	70 e0       	ldi	r23, 0x00	; 0
    4194:	8c 2f       	mov	r24, r28
    4196:	06 d4       	rcall	.+2060   	; 0x49a4 <serial_create>
    4198:	90 93 98 18 	sts	0x1898, r25	; 0x801898 <_rn2483_serial+0x1>
    419c:	80 93 97 18 	sts	0x1897, r24	; 0x801897 <_rn2483_serial>
    41a0:	e7 e0       	ldi	r30, 0x07	; 7
    41a2:	f1 e0       	ldi	r31, 0x01	; 1
    41a4:	80 81       	ld	r24, Z
    41a6:	80 61       	ori	r24, 0x10	; 16
    41a8:	80 83       	st	Z, r24
    41aa:	cf 91       	pop	r28
    41ac:	1f 91       	pop	r17
    41ae:	0f 91       	pop	r16
    41b0:	ef 90       	pop	r14
    41b2:	cf 90       	pop	r12
    41b4:	af 90       	pop	r10
    41b6:	9f 90       	pop	r9
    41b8:	8f 90       	pop	r8
    41ba:	08 95       	ret

000041bc <lora_driver_resetRn2483>:
    41bc:	88 23       	and	r24, r24
    41be:	31 f0       	breq	.+12     	; 0x41cc <lora_driver_resetRn2483+0x10>
    41c0:	e8 e0       	ldi	r30, 0x08	; 8
    41c2:	f1 e0       	ldi	r31, 0x01	; 1
    41c4:	80 81       	ld	r24, Z
    41c6:	8f 7e       	andi	r24, 0xEF	; 239
    41c8:	80 83       	st	Z, r24
    41ca:	08 95       	ret
    41cc:	e8 e0       	ldi	r30, 0x08	; 8
    41ce:	f1 e0       	ldi	r31, 0x01	; 1
    41d0:	80 81       	ld	r24, Z
    41d2:	80 61       	ori	r24, 0x10	; 16
    41d4:	80 83       	st	Z, r24
    41d6:	08 95       	ret

000041d8 <lora_driver_rn2483FactoryReset>:
    41d8:	60 e0       	ldi	r22, 0x00	; 0
    41da:	70 e0       	ldi	r23, 0x00	; 0
    41dc:	81 ec       	ldi	r24, 0xC1	; 193
    41de:	96 e0       	ldi	r25, 0x06	; 6
    41e0:	d4 de       	rcall	.-600    	; 0x3f8a <_uploadMessage>
    41e2:	ee e1       	ldi	r30, 0x1E	; 30
    41e4:	f9 e1       	ldi	r31, 0x19	; 25
    41e6:	01 90       	ld	r0, Z+
    41e8:	00 20       	and	r0, r0
    41ea:	e9 f7       	brne	.-6      	; 0x41e6 <lora_driver_rn2483FactoryReset+0xe>
    41ec:	31 97       	sbiw	r30, 0x01	; 1
    41ee:	ee 51       	subi	r30, 0x1E	; 30
    41f0:	f9 41       	sbci	r31, 0x19	; 25
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	75 97       	sbiw	r30, 0x15	; 21
    41f6:	08 f0       	brcs	.+2      	; 0x41fa <lora_driver_rn2483FactoryReset+0x22>
    41f8:	80 e0       	ldi	r24, 0x00	; 0
    41fa:	08 95       	ret

000041fc <lora_driver_getRn2483Hweui>:
    41fc:	cf 93       	push	r28
    41fe:	df 93       	push	r29
    4200:	ec 01       	movw	r28, r24
    4202:	60 e0       	ldi	r22, 0x00	; 0
    4204:	70 e0       	ldi	r23, 0x00	; 0
    4206:	82 ed       	ldi	r24, 0xD2	; 210
    4208:	96 e0       	ldi	r25, 0x06	; 6
    420a:	bf de       	rcall	.-642    	; 0x3f8a <_uploadMessage>
    420c:	ee e1       	ldi	r30, 0x1E	; 30
    420e:	f9 e1       	ldi	r31, 0x19	; 25
    4210:	01 90       	ld	r0, Z+
    4212:	00 20       	and	r0, r0
    4214:	e9 f7       	brne	.-6      	; 0x4210 <lora_driver_getRn2483Hweui+0x14>
    4216:	ef 52       	subi	r30, 0x2F	; 47
    4218:	f9 41       	sbci	r31, 0x19	; 25
    421a:	39 f4       	brne	.+14     	; 0x422a <lora_driver_getRn2483Hweui+0x2e>
    421c:	6e e1       	ldi	r22, 0x1E	; 30
    421e:	79 e1       	ldi	r23, 0x19	; 25
    4220:	ce 01       	movw	r24, r28
    4222:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <strcpy>
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	02 c0       	rjmp	.+4      	; 0x422e <lora_driver_getRn2483Hweui+0x32>
    422a:	18 82       	st	Y, r1
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	df 91       	pop	r29
    4230:	cf 91       	pop	r28
    4232:	08 95       	ret

00004234 <lora_driver_setDeviceIdentifier>:
    4234:	fc 01       	movw	r30, r24
    4236:	01 90       	ld	r0, Z+
    4238:	00 20       	and	r0, r0
    423a:	e9 f7       	brne	.-6      	; 0x4236 <lora_driver_setDeviceIdentifier+0x2>
    423c:	9f 01       	movw	r18, r30
    423e:	21 51       	subi	r18, 0x11	; 17
    4240:	31 09       	sbc	r19, r1
    4242:	28 17       	cp	r18, r24
    4244:	39 07       	cpc	r19, r25
    4246:	29 f4       	brne	.+10     	; 0x4252 <lora_driver_setDeviceIdentifier+0x1e>
    4248:	bc 01       	movw	r22, r24
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	97 e0       	ldi	r25, 0x07	; 7
    424e:	6c cf       	rjmp	.-296    	; 0x4128 <_uploadMessageRc>
    4250:	08 95       	ret
    4252:	89 e0       	ldi	r24, 0x09	; 9
    4254:	08 95       	ret

00004256 <lora_driver_setApplicationIdentifier>:
    4256:	fc 01       	movw	r30, r24
    4258:	01 90       	ld	r0, Z+
    425a:	00 20       	and	r0, r0
    425c:	e9 f7       	brne	.-6      	; 0x4258 <lora_driver_setApplicationIdentifier+0x2>
    425e:	9f 01       	movw	r18, r30
    4260:	21 51       	subi	r18, 0x11	; 17
    4262:	31 09       	sbc	r19, r1
    4264:	28 17       	cp	r18, r24
    4266:	39 07       	cpc	r19, r25
    4268:	29 f4       	brne	.+10     	; 0x4274 <lora_driver_setApplicationIdentifier+0x1e>
    426a:	bc 01       	movw	r22, r24
    426c:	8f e0       	ldi	r24, 0x0F	; 15
    426e:	97 e0       	ldi	r25, 0x07	; 7
    4270:	5b cf       	rjmp	.-330    	; 0x4128 <_uploadMessageRc>
    4272:	08 95       	ret
    4274:	89 e0       	ldi	r24, 0x09	; 9
    4276:	08 95       	ret

00004278 <lora_driver_setApplicationKey>:
    4278:	fc 01       	movw	r30, r24
    427a:	01 90       	ld	r0, Z+
    427c:	00 20       	and	r0, r0
    427e:	e9 f7       	brne	.-6      	; 0x427a <lora_driver_setApplicationKey+0x2>
    4280:	9f 01       	movw	r18, r30
    4282:	21 52       	subi	r18, 0x21	; 33
    4284:	31 09       	sbc	r19, r1
    4286:	28 17       	cp	r18, r24
    4288:	39 07       	cpc	r19, r25
    428a:	29 f4       	brne	.+10     	; 0x4296 <lora_driver_setApplicationKey+0x1e>
    428c:	bc 01       	movw	r22, r24
    428e:	8e e1       	ldi	r24, 0x1E	; 30
    4290:	97 e0       	ldi	r25, 0x07	; 7
    4292:	4a cf       	rjmp	.-364    	; 0x4128 <_uploadMessageRc>
    4294:	08 95       	ret
    4296:	89 e0       	ldi	r24, 0x09	; 9
    4298:	08 95       	ret

0000429a <lora_driver_saveMac>:
    429a:	60 e0       	ldi	r22, 0x00	; 0
    429c:	70 e0       	ldi	r23, 0x00	; 0
    429e:	8d e5       	ldi	r24, 0x5D	; 93
    42a0:	97 e0       	ldi	r25, 0x07	; 7
    42a2:	42 cf       	rjmp	.-380    	; 0x4128 <_uploadMessageRc>
    42a4:	08 95       	ret

000042a6 <lora_driver_join>:
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	e8 2f       	mov	r30, r24
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	ee 0f       	add	r30, r30
    42b0:	ff 1f       	adc	r31, r31
    42b2:	e9 5c       	subi	r30, 0xC9	; 201
    42b4:	f6 4f       	sbci	r31, 0xF6	; 246
    42b6:	60 81       	ld	r22, Z
    42b8:	71 81       	ldd	r23, Z+1	; 0x01
    42ba:	86 e6       	ldi	r24, 0x66	; 102
    42bc:	97 e0       	ldi	r25, 0x07	; 7
    42be:	34 df       	rcall	.-408    	; 0x4128 <_uploadMessageRc>
    42c0:	81 11       	cpse	r24, r1
    42c2:	14 c0       	rjmp	.+40     	; 0x42ec <lora_driver_join+0x46>
    42c4:	08 e2       	ldi	r16, 0x28	; 40
    42c6:	15 e0       	ldi	r17, 0x05	; 5
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	4d e2       	ldi	r20, 0x2D	; 45
    42ce:	50 e0       	ldi	r21, 0x00	; 0
    42d0:	6e e1       	ldi	r22, 0x1E	; 30
    42d2:	79 e1       	ldi	r23, 0x19	; 25
    42d4:	80 91 95 18 	lds	r24, 0x1895	; 0x801895 <_serialReplyBufferHandle>
    42d8:	90 91 96 18 	lds	r25, 0x1896	; 0x801896 <_serialReplyBufferHandle+0x1>
    42dc:	0e 94 cd 0a 	call	0x159a	; 0x159a <xStreamBufferReceive>
    42e0:	88 23       	and	r24, r24
    42e2:	21 f0       	breq	.+8      	; 0x42ec <lora_driver_join+0x46>
    42e4:	8e e1       	ldi	r24, 0x1E	; 30
    42e6:	99 e1       	ldi	r25, 0x19	; 25
    42e8:	aa de       	rcall	.-684    	; 0x403e <_reply2ReturnCode>
    42ea:	03 c0       	rjmp	.+6      	; 0x42f2 <lora_driver_join+0x4c>
    42ec:	8e e1       	ldi	r24, 0x1E	; 30
    42ee:	99 e1       	ldi	r25, 0x19	; 25
    42f0:	a6 de       	rcall	.-692    	; 0x403e <_reply2ReturnCode>
    42f2:	1f 91       	pop	r17
    42f4:	0f 91       	pop	r16
    42f6:	08 95       	ret

000042f8 <lora_driver_sendUploadMessage>:
    42f8:	0f 93       	push	r16
    42fa:	1f 93       	push	r17
    42fc:	cf 93       	push	r28
    42fe:	df 93       	push	r29
    4300:	1f 92       	push	r1
    4302:	cd b7       	in	r28, 0x3d	; 61
    4304:	de b7       	in	r29, 0x3e	; 62
    4306:	db 01       	movw	r26, r22
    4308:	11 96       	adiw	r26, 0x01	; 1
    430a:	9c 91       	ld	r25, X
    430c:	11 97       	sbiw	r26, 0x01	; 1
    430e:	95 31       	cpi	r25, 0x15	; 21
    4310:	08 f0       	brcs	.+2      	; 0x4314 <lora_driver_sendUploadMessage+0x1c>
    4312:	b4 c0       	rjmp	.+360    	; 0x447c <lora_driver_sendUploadMessage+0x184>
    4314:	99 23       	and	r25, r25
    4316:	81 f1       	breq	.+96     	; 0x4378 <lora_driver_sendUploadMessage+0x80>
    4318:	60 e0       	ldi	r22, 0x00	; 0
    431a:	70 e0       	ldi	r23, 0x00	; 0
    431c:	27 2f       	mov	r18, r23
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	46 2f       	mov	r20, r22
    4322:	50 e0       	ldi	r21, 0x00	; 0
    4324:	fd 01       	movw	r30, r26
    4326:	e4 0f       	add	r30, r20
    4328:	f5 1f       	adc	r31, r21
    432a:	92 81       	ldd	r25, Z+2	; 0x02
    432c:	92 95       	swap	r25
    432e:	9f 70       	andi	r25, 0x0F	; 15
    4330:	9a 30       	cpi	r25, 0x0A	; 10
    4332:	10 f0       	brcs	.+4      	; 0x4338 <lora_driver_sendUploadMessage+0x40>
    4334:	99 5c       	subi	r25, 0xC9	; 201
    4336:	01 c0       	rjmp	.+2      	; 0x433a <lora_driver_sendUploadMessage+0x42>
    4338:	90 5d       	subi	r25, 0xD0	; 208
    433a:	f9 01       	movw	r30, r18
    433c:	e1 55       	subi	r30, 0x51	; 81
    433e:	f7 4e       	sbci	r31, 0xE7	; 231
    4340:	90 83       	st	Z, r25
    4342:	2f 5f       	subi	r18, 0xFF	; 255
    4344:	3f 4f       	sbci	r19, 0xFF	; 255
    4346:	fd 01       	movw	r30, r26
    4348:	e4 0f       	add	r30, r20
    434a:	f5 1f       	adc	r31, r21
    434c:	92 81       	ldd	r25, Z+2	; 0x02
    434e:	9f 70       	andi	r25, 0x0F	; 15
    4350:	49 2f       	mov	r20, r25
    4352:	50 e0       	ldi	r21, 0x00	; 0
    4354:	4a 30       	cpi	r20, 0x0A	; 10
    4356:	51 05       	cpc	r21, r1
    4358:	14 f0       	brlt	.+4      	; 0x435e <lora_driver_sendUploadMessage+0x66>
    435a:	99 5c       	subi	r25, 0xC9	; 201
    435c:	01 c0       	rjmp	.+2      	; 0x4360 <lora_driver_sendUploadMessage+0x68>
    435e:	90 5d       	subi	r25, 0xD0	; 208
    4360:	f9 01       	movw	r30, r18
    4362:	e1 55       	subi	r30, 0x51	; 81
    4364:	f7 4e       	sbci	r31, 0xE7	; 231
    4366:	90 83       	st	Z, r25
    4368:	7e 5f       	subi	r23, 0xFE	; 254
    436a:	6f 5f       	subi	r22, 0xFF	; 255
    436c:	11 96       	adiw	r26, 0x01	; 1
    436e:	9c 91       	ld	r25, X
    4370:	11 97       	sbiw	r26, 0x01	; 1
    4372:	69 17       	cp	r22, r25
    4374:	98 f2       	brcs	.-90     	; 0x431c <lora_driver_sendUploadMessage+0x24>
    4376:	01 c0       	rjmp	.+2      	; 0x437a <lora_driver_sendUploadMessage+0x82>
    4378:	70 e0       	ldi	r23, 0x00	; 0
    437a:	e7 2f       	mov	r30, r23
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	e1 55       	subi	r30, 0x51	; 81
    4380:	f7 4e       	sbci	r31, 0xE7	; 231
    4382:	10 82       	st	Z, r1
    4384:	4c 91       	ld	r20, X
    4386:	81 11       	cpse	r24, r1
    4388:	03 c0       	rjmp	.+6      	; 0x4390 <lora_driver_sendUploadMessage+0x98>
    438a:	8f e6       	ldi	r24, 0x6F	; 111
    438c:	97 e0       	ldi	r25, 0x07	; 7
    438e:	02 c0       	rjmp	.+4      	; 0x4394 <lora_driver_sendUploadMessage+0x9c>
    4390:	81 e7       	ldi	r24, 0x71	; 113
    4392:	97 e0       	ldi	r25, 0x07	; 7
    4394:	2f ea       	ldi	r18, 0xAF	; 175
    4396:	38 e1       	ldi	r19, 0x18	; 24
    4398:	3f 93       	push	r19
    439a:	2f 93       	push	r18
    439c:	1f 92       	push	r1
    439e:	4f 93       	push	r20
    43a0:	9f 93       	push	r25
    43a2:	8f 93       	push	r24
    43a4:	85 e7       	ldi	r24, 0x75	; 117
    43a6:	97 e0       	ldi	r25, 0x07	; 7
    43a8:	9f 93       	push	r25
    43aa:	8f 93       	push	r24
    43ac:	81 ef       	ldi	r24, 0xF1	; 241
    43ae:	98 e1       	ldi	r25, 0x18	; 24
    43b0:	9f 93       	push	r25
    43b2:	8f 93       	push	r24
    43b4:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	70 e0       	ldi	r23, 0x00	; 0
    43bc:	81 ef       	ldi	r24, 0xF1	; 241
    43be:	98 e1       	ldi	r25, 0x18	; 24
    43c0:	b3 de       	rcall	.-666    	; 0x4128 <_uploadMessageRc>
    43c2:	0f b6       	in	r0, 0x3f	; 63
    43c4:	f8 94       	cli
    43c6:	de bf       	out	0x3e, r29	; 62
    43c8:	0f be       	out	0x3f, r0	; 63
    43ca:	cd bf       	out	0x3d, r28	; 61
    43cc:	81 11       	cpse	r24, r1
    43ce:	59 c0       	rjmp	.+178    	; 0x4482 <lora_driver_sendUploadMessage+0x18a>
    43d0:	08 e2       	ldi	r16, 0x28	; 40
    43d2:	15 e0       	ldi	r17, 0x05	; 5
    43d4:	20 e0       	ldi	r18, 0x00	; 0
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	4d e2       	ldi	r20, 0x2D	; 45
    43da:	50 e0       	ldi	r21, 0x00	; 0
    43dc:	6e e1       	ldi	r22, 0x1E	; 30
    43de:	79 e1       	ldi	r23, 0x19	; 25
    43e0:	80 91 95 18 	lds	r24, 0x1895	; 0x801895 <_serialReplyBufferHandle>
    43e4:	90 91 96 18 	lds	r25, 0x1896	; 0x801896 <_serialReplyBufferHandle+0x1>
    43e8:	0e 94 cd 0a 	call	0x159a	; 0x159a <xStreamBufferReceive>
    43ec:	88 23       	and	r24, r24
    43ee:	09 f4       	brne	.+2      	; 0x43f2 <lora_driver_sendUploadMessage+0xfa>
    43f0:	47 c0       	rjmp	.+142    	; 0x4480 <lora_driver_sendUploadMessage+0x188>
    43f2:	8e e1       	ldi	r24, 0x1E	; 30
    43f4:	99 e1       	ldi	r25, 0x19	; 25
    43f6:	23 de       	rcall	.-954    	; 0x403e <_reply2ReturnCode>
    43f8:	8e 30       	cpi	r24, 0x0E	; 14
    43fa:	09 f0       	breq	.+2      	; 0x43fe <lora_driver_sendUploadMessage+0x106>
    43fc:	42 c0       	rjmp	.+132    	; 0x4482 <lora_driver_sendUploadMessage+0x18a>
    43fe:	87 e0       	ldi	r24, 0x07	; 7
    4400:	89 83       	std	Y+1, r24	; 0x01
    4402:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <_downlinkMessageBuffer>
    4406:	90 91 94 18 	lds	r25, 0x1894	; 0x801894 <_downlinkMessageBuffer+0x1>
    440a:	89 2b       	or	r24, r25
    440c:	a9 f1       	breq	.+106    	; 0x4478 <lora_driver_sendUploadMessage+0x180>
    440e:	be 01       	movw	r22, r28
    4410:	6f 5f       	subi	r22, 0xFF	; 255
    4412:	7f 4f       	sbci	r23, 0xFF	; 255
    4414:	8e e1       	ldi	r24, 0x1E	; 30
    4416:	99 e1       	ldi	r25, 0x19	; 25
    4418:	68 d1       	rcall	.+720    	; 0x46ea <decode_port_no>
    441a:	80 93 99 18 	sts	0x1899, r24	; 0x801899 <_downlinkPayload>
    441e:	e9 81       	ldd	r30, Y+1	; 0x01
    4420:	f0 e0       	ldi	r31, 0x00	; 0
    4422:	e2 5e       	subi	r30, 0xE2	; 226
    4424:	f6 4e       	sbci	r31, 0xE6	; 230
    4426:	df 01       	movw	r26, r30
    4428:	0d 90       	ld	r0, X+
    442a:	00 20       	and	r0, r0
    442c:	e9 f7       	brne	.-6      	; 0x4428 <lora_driver_sendUploadMessage+0x130>
    442e:	11 97       	sbiw	r26, 0x01	; 1
    4430:	ae 1b       	sub	r26, r30
    4432:	bf 0b       	sbc	r27, r31
    4434:	aa 23       	and	r26, r26
    4436:	91 f0       	breq	.+36     	; 0x445c <lora_driver_sendUploadMessage+0x164>
    4438:	bb 27       	eor	r27, r27
    443a:	cd 01       	movw	r24, r26
    443c:	01 97       	sbiw	r24, 0x01	; 1
    443e:	9c 01       	movw	r18, r24
    4440:	12 f4       	brpl	.+4      	; 0x4446 <lora_driver_sendUploadMessage+0x14e>
    4442:	2f 5f       	subi	r18, 0xFF	; 255
    4444:	3f 4f       	sbci	r19, 0xFF	; 255
    4446:	35 95       	asr	r19
    4448:	27 95       	ror	r18
    444a:	20 93 9a 18 	sts	0x189A, r18	; 0x80189a <_downlinkPayload+0x1>
    444e:	af 01       	movw	r20, r30
    4450:	4f 5f       	subi	r20, 0xFF	; 255
    4452:	5f 4f       	sbci	r21, 0xFF	; 255
    4454:	64 e1       	ldi	r22, 0x14	; 20
    4456:	8b e9       	ldi	r24, 0x9B	; 155
    4458:	98 e1       	ldi	r25, 0x18	; 24
    445a:	73 d1       	rcall	.+742    	; 0x4742 <decode_hexadecimal_string_bytes>
    445c:	01 e0       	ldi	r16, 0x01	; 1
    445e:	10 e0       	ldi	r17, 0x00	; 0
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	46 e1       	ldi	r20, 0x16	; 22
    4466:	50 e0       	ldi	r21, 0x00	; 0
    4468:	69 e9       	ldi	r22, 0x99	; 153
    446a:	78 e1       	ldi	r23, 0x18	; 24
    446c:	80 91 93 18 	lds	r24, 0x1893	; 0x801893 <_downlinkMessageBuffer>
    4470:	90 91 94 18 	lds	r25, 0x1894	; 0x801894 <_downlinkMessageBuffer+0x1>
    4474:	0e 94 c6 09 	call	0x138c	; 0x138c <xStreamBufferSend>
    4478:	8e e0       	ldi	r24, 0x0E	; 14
    447a:	03 c0       	rjmp	.+6      	; 0x4482 <lora_driver_sendUploadMessage+0x18a>
    447c:	84 e1       	ldi	r24, 0x14	; 20
    447e:	01 c0       	rjmp	.+2      	; 0x4482 <lora_driver_sendUploadMessage+0x18a>
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	0f 90       	pop	r0
    4484:	df 91       	pop	r29
    4486:	cf 91       	pop	r28
    4488:	1f 91       	pop	r17
    448a:	0f 91       	pop	r16
    448c:	08 95       	ret

0000448e <lora_driver_setAdaptiveDataRate>:
    448e:	81 30       	cpi	r24, 0x01	; 1
    4490:	19 f0       	breq	.+6      	; 0x4498 <lora_driver_setAdaptiveDataRate+0xa>
    4492:	65 e8       	ldi	r22, 0x85	; 133
    4494:	77 e0       	ldi	r23, 0x07	; 7
    4496:	02 c0       	rjmp	.+4      	; 0x449c <lora_driver_setAdaptiveDataRate+0xe>
    4498:	6e e5       	ldi	r22, 0x5E	; 94
    449a:	78 e0       	ldi	r23, 0x08	; 8
    449c:	89 e8       	ldi	r24, 0x89	; 137
    449e:	97 e0       	ldi	r25, 0x07	; 7
    44a0:	43 ce       	rjmp	.-890    	; 0x4128 <_uploadMessageRc>
    44a2:	08 95       	ret

000044a4 <lora_driver_setReceiveDelay>:
    44a4:	9f 93       	push	r25
    44a6:	8f 93       	push	r24
    44a8:	8a eb       	ldi	r24, 0xBA	; 186
    44aa:	97 e0       	ldi	r25, 0x07	; 7
    44ac:	9f 93       	push	r25
    44ae:	8f 93       	push	r24
    44b0:	81 ef       	ldi	r24, 0xF1	; 241
    44b2:	98 e1       	ldi	r25, 0x18	; 24
    44b4:	9f 93       	push	r25
    44b6:	8f 93       	push	r24
    44b8:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
    44bc:	60 e0       	ldi	r22, 0x00	; 0
    44be:	70 e0       	ldi	r23, 0x00	; 0
    44c0:	81 ef       	ldi	r24, 0xF1	; 241
    44c2:	98 e1       	ldi	r25, 0x18	; 24
    44c4:	31 de       	rcall	.-926    	; 0x4128 <_uploadMessageRc>
    44c6:	0f 90       	pop	r0
    44c8:	0f 90       	pop	r0
    44ca:	0f 90       	pop	r0
    44cc:	0f 90       	pop	r0
    44ce:	0f 90       	pop	r0
    44d0:	0f 90       	pop	r0
    44d2:	08 95       	ret

000044d4 <lora_driver_configureToEu868>:
    44d4:	2f 92       	push	r2
    44d6:	3f 92       	push	r3
    44d8:	4f 92       	push	r4
    44da:	5f 92       	push	r5
    44dc:	6f 92       	push	r6
    44de:	7f 92       	push	r7
    44e0:	8f 92       	push	r8
    44e2:	9f 92       	push	r9
    44e4:	af 92       	push	r10
    44e6:	bf 92       	push	r11
    44e8:	cf 92       	push	r12
    44ea:	df 92       	push	r13
    44ec:	ef 92       	push	r14
    44ee:	ff 92       	push	r15
    44f0:	0f 93       	push	r16
    44f2:	1f 93       	push	r17
    44f4:	cf 93       	push	r28
    44f6:	df 93       	push	r29
    44f8:	cd b7       	in	r28, 0x3d	; 61
    44fa:	de b7       	in	r29, 0x3e	; 62
    44fc:	a0 97       	sbiw	r28, 0x20	; 32
    44fe:	0f b6       	in	r0, 0x3f	; 63
    4500:	f8 94       	cli
    4502:	de bf       	out	0x3e, r29	; 62
    4504:	0f be       	out	0x3f, r0	; 63
    4506:	cd bf       	out	0x3d, r28	; 61
    4508:	67 ee       	ldi	r22, 0xE7	; 231
    450a:	77 e0       	ldi	r23, 0x07	; 7
    450c:	83 ef       	ldi	r24, 0xF3	; 243
    450e:	97 e0       	ldi	r25, 0x07	; 7
    4510:	3c dd       	rcall	.-1416   	; 0x3f8a <_uploadMessage>
    4512:	95 dd       	rcall	.-1238   	; 0x403e <_reply2ReturnCode>
    4514:	81 11       	cpse	r24, r1
    4516:	a3 c0       	rjmp	.+326    	; 0x465e <lora_driver_configureToEu868+0x18a>
    4518:	80 e2       	ldi	r24, 0x20	; 32
    451a:	e2 e2       	ldi	r30, 0x22	; 34
    451c:	f2 e0       	ldi	r31, 0x02	; 2
    451e:	de 01       	movw	r26, r28
    4520:	11 96       	adiw	r26, 0x01	; 1
    4522:	01 90       	ld	r0, Z+
    4524:	0d 92       	st	X+, r0
    4526:	8a 95       	dec	r24
    4528:	e1 f7       	brne	.-8      	; 0x4522 <lora_driver_configureToEu868+0x4e>
    452a:	9e 01       	movw	r18, r28
    452c:	2f 5f       	subi	r18, 0xFF	; 255
    452e:	3f 4f       	sbci	r19, 0xFF	; 255
    4530:	69 01       	movw	r12, r18
    4532:	e1 2c       	mov	r14, r1
    4534:	f1 2c       	mov	r15, r1
    4536:	0f 2e       	mov	r0, r31
    4538:	ff ef       	ldi	r31, 0xFF	; 255
    453a:	af 2e       	mov	r10, r31
    453c:	f7 e0       	ldi	r31, 0x07	; 7
    453e:	bf 2e       	mov	r11, r31
    4540:	f0 2d       	mov	r31, r0
    4542:	01 ef       	ldi	r16, 0xF1	; 241
    4544:	18 e1       	ldi	r17, 0x18	; 24
    4546:	0f 2e       	mov	r0, r31
    4548:	f8 e1       	ldi	r31, 0x18	; 24
    454a:	4f 2e       	mov	r4, r31
    454c:	f8 e0       	ldi	r31, 0x08	; 8
    454e:	5f 2e       	mov	r5, r31
    4550:	f0 2d       	mov	r31, r0
    4552:	0f 2e       	mov	r0, r31
    4554:	ff e2       	ldi	r31, 0x2F	; 47
    4556:	8f 2e       	mov	r8, r31
    4558:	f8 e0       	ldi	r31, 0x08	; 8
    455a:	9f 2e       	mov	r9, r31
    455c:	f0 2d       	mov	r31, r0
    455e:	0f 2e       	mov	r0, r31
    4560:	f9 e4       	ldi	r31, 0x49	; 73
    4562:	6f 2e       	mov	r6, r31
    4564:	f8 e0       	ldi	r31, 0x08	; 8
    4566:	7f 2e       	mov	r7, r31
    4568:	f0 2d       	mov	r31, r0
    456a:	3e 2c       	mov	r3, r14
    456c:	2f 2c       	mov	r2, r15
    456e:	ff 92       	push	r15
    4570:	ef 92       	push	r14
    4572:	bf 92       	push	r11
    4574:	af 92       	push	r10
    4576:	1f 93       	push	r17
    4578:	0f 93       	push	r16
    457a:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
    457e:	60 e0       	ldi	r22, 0x00	; 0
    4580:	70 e0       	ldi	r23, 0x00	; 0
    4582:	c8 01       	movw	r24, r16
    4584:	02 dd       	rcall	.-1532   	; 0x3f8a <_uploadMessage>
    4586:	5b dd       	rcall	.-1354   	; 0x403e <_reply2ReturnCode>
    4588:	0f 90       	pop	r0
    458a:	0f 90       	pop	r0
    458c:	0f 90       	pop	r0
    458e:	0f 90       	pop	r0
    4590:	0f 90       	pop	r0
    4592:	0f 90       	pop	r0
    4594:	81 11       	cpse	r24, r1
    4596:	63 c0       	rjmp	.+198    	; 0x465e <lora_driver_configureToEu868+0x18a>
    4598:	32 e0       	ldi	r19, 0x02	; 2
    459a:	3e 15       	cp	r19, r14
    459c:	e8 f4       	brcc	.+58     	; 0x45d8 <lora_driver_configureToEu868+0x104>
    459e:	f6 01       	movw	r30, r12
    45a0:	83 81       	ldd	r24, Z+3	; 0x03
    45a2:	8f 93       	push	r24
    45a4:	82 81       	ldd	r24, Z+2	; 0x02
    45a6:	8f 93       	push	r24
    45a8:	81 81       	ldd	r24, Z+1	; 0x01
    45aa:	8f 93       	push	r24
    45ac:	80 81       	ld	r24, Z
    45ae:	8f 93       	push	r24
    45b0:	ff 92       	push	r15
    45b2:	ef 92       	push	r14
    45b4:	5f 92       	push	r5
    45b6:	4f 92       	push	r4
    45b8:	1f 93       	push	r17
    45ba:	0f 93       	push	r16
    45bc:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
    45c0:	60 e0       	ldi	r22, 0x00	; 0
    45c2:	70 e0       	ldi	r23, 0x00	; 0
    45c4:	c8 01       	movw	r24, r16
    45c6:	e1 dc       	rcall	.-1598   	; 0x3f8a <_uploadMessage>
    45c8:	3a dd       	rcall	.-1420   	; 0x403e <_reply2ReturnCode>
    45ca:	0f b6       	in	r0, 0x3f	; 63
    45cc:	f8 94       	cli
    45ce:	de bf       	out	0x3e, r29	; 62
    45d0:	0f be       	out	0x3f, r0	; 63
    45d2:	cd bf       	out	0x3d, r28	; 61
    45d4:	81 11       	cpse	r24, r1
    45d6:	43 c0       	rjmp	.+134    	; 0x465e <lora_driver_configureToEu868+0x18a>
    45d8:	2f 92       	push	r2
    45da:	3f 92       	push	r3
    45dc:	9f 92       	push	r9
    45de:	8f 92       	push	r8
    45e0:	1f 93       	push	r17
    45e2:	0f 93       	push	r16
    45e4:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
    45e8:	60 e0       	ldi	r22, 0x00	; 0
    45ea:	70 e0       	ldi	r23, 0x00	; 0
    45ec:	c8 01       	movw	r24, r16
    45ee:	cd dc       	rcall	.-1638   	; 0x3f8a <_uploadMessage>
    45f0:	26 dd       	rcall	.-1460   	; 0x403e <_reply2ReturnCode>
    45f2:	0f 90       	pop	r0
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	0f 90       	pop	r0
    45fa:	0f 90       	pop	r0
    45fc:	0f 90       	pop	r0
    45fe:	81 11       	cpse	r24, r1
    4600:	2e c0       	rjmp	.+92     	; 0x465e <lora_driver_configureToEu868+0x18a>
    4602:	2f 92       	push	r2
    4604:	3f 92       	push	r3
    4606:	7f 92       	push	r7
    4608:	6f 92       	push	r6
    460a:	1f 93       	push	r17
    460c:	0f 93       	push	r16
    460e:	0e 94 de 2f 	call	0x5fbc	; 0x5fbc <sprintf>
    4612:	60 e0       	ldi	r22, 0x00	; 0
    4614:	70 e0       	ldi	r23, 0x00	; 0
    4616:	c8 01       	movw	r24, r16
    4618:	b8 dc       	rcall	.-1680   	; 0x3f8a <_uploadMessage>
    461a:	11 dd       	rcall	.-1502   	; 0x403e <_reply2ReturnCode>
    461c:	0f 90       	pop	r0
    461e:	0f 90       	pop	r0
    4620:	0f 90       	pop	r0
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	0f 90       	pop	r0
    4628:	81 11       	cpse	r24, r1
    462a:	19 c0       	rjmp	.+50     	; 0x465e <lora_driver_configureToEu868+0x18a>
    462c:	3f ef       	ldi	r19, 0xFF	; 255
    462e:	e3 1a       	sub	r14, r19
    4630:	f3 0a       	sbc	r15, r19
    4632:	84 e0       	ldi	r24, 0x04	; 4
    4634:	c8 0e       	add	r12, r24
    4636:	d1 1c       	adc	r13, r1
    4638:	98 e0       	ldi	r25, 0x08	; 8
    463a:	e9 16       	cp	r14, r25
    463c:	f1 04       	cpc	r15, r1
    463e:	09 f0       	breq	.+2      	; 0x4642 <lora_driver_configureToEu868+0x16e>
    4640:	94 cf       	rjmp	.-216    	; 0x456a <lora_driver_configureToEu868+0x96>
    4642:	60 e0       	ldi	r22, 0x00	; 0
    4644:	70 e0       	ldi	r23, 0x00	; 0
    4646:	81 e6       	ldi	r24, 0x61	; 97
    4648:	98 e0       	ldi	r25, 0x08	; 8
    464a:	9f dc       	rcall	.-1730   	; 0x3f8a <_uploadMessage>
    464c:	f8 dc       	rcall	.-1552   	; 0x403e <_reply2ReturnCode>
    464e:	81 11       	cpse	r24, r1
    4650:	06 c0       	rjmp	.+12     	; 0x465e <lora_driver_configureToEu868+0x18a>
    4652:	60 e0       	ldi	r22, 0x00	; 0
    4654:	70 e0       	ldi	r23, 0x00	; 0
    4656:	82 e7       	ldi	r24, 0x72	; 114
    4658:	98 e0       	ldi	r25, 0x08	; 8
    465a:	97 dc       	rcall	.-1746   	; 0x3f8a <_uploadMessage>
    465c:	f0 dc       	rcall	.-1568   	; 0x403e <_reply2ReturnCode>
    465e:	a0 96       	adiw	r28, 0x20	; 32
    4660:	0f b6       	in	r0, 0x3f	; 63
    4662:	f8 94       	cli
    4664:	de bf       	out	0x3e, r29	; 62
    4666:	0f be       	out	0x3f, r0	; 63
    4668:	cd bf       	out	0x3d, r28	; 61
    466a:	df 91       	pop	r29
    466c:	cf 91       	pop	r28
    466e:	1f 91       	pop	r17
    4670:	0f 91       	pop	r16
    4672:	ff 90       	pop	r15
    4674:	ef 90       	pop	r14
    4676:	df 90       	pop	r13
    4678:	cf 90       	pop	r12
    467a:	bf 90       	pop	r11
    467c:	af 90       	pop	r10
    467e:	9f 90       	pop	r9
    4680:	8f 90       	pop	r8
    4682:	7f 90       	pop	r7
    4684:	6f 90       	pop	r6
    4686:	5f 90       	pop	r5
    4688:	4f 90       	pop	r4
    468a:	3f 90       	pop	r3
    468c:	2f 90       	pop	r2
    468e:	08 95       	ret

00004690 <lora_driver_setOtaaIdentity>:
    4690:	ef 92       	push	r14
    4692:	ff 92       	push	r15
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
    469c:	ec 01       	movw	r28, r24
    469e:	8b 01       	movw	r16, r22
    46a0:	7a 01       	movw	r14, r20
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	f4 de       	rcall	.-536    	; 0x448e <lora_driver_setAdaptiveDataRate>
    46a6:	81 11       	cpse	r24, r1
    46a8:	0d c0       	rjmp	.+26     	; 0x46c4 <lora_driver_setOtaaIdentity+0x34>
    46aa:	ce 01       	movw	r24, r28
    46ac:	d4 dd       	rcall	.-1112   	; 0x4256 <lora_driver_setApplicationIdentifier>
    46ae:	81 11       	cpse	r24, r1
    46b0:	09 c0       	rjmp	.+18     	; 0x46c4 <lora_driver_setOtaaIdentity+0x34>
    46b2:	c8 01       	movw	r24, r16
    46b4:	e1 dd       	rcall	.-1086   	; 0x4278 <lora_driver_setApplicationKey>
    46b6:	81 11       	cpse	r24, r1
    46b8:	05 c0       	rjmp	.+10     	; 0x46c4 <lora_driver_setOtaaIdentity+0x34>
    46ba:	c7 01       	movw	r24, r14
    46bc:	bb dd       	rcall	.-1162   	; 0x4234 <lora_driver_setDeviceIdentifier>
    46be:	81 11       	cpse	r24, r1
    46c0:	01 c0       	rjmp	.+2      	; 0x46c4 <lora_driver_setOtaaIdentity+0x34>
    46c2:	eb dd       	rcall	.-1066   	; 0x429a <lora_driver_saveMac>
    46c4:	df 91       	pop	r29
    46c6:	cf 91       	pop	r28
    46c8:	1f 91       	pop	r17
    46ca:	0f 91       	pop	r16
    46cc:	ff 90       	pop	r15
    46ce:	ef 90       	pop	r14
    46d0:	08 95       	ret

000046d2 <lora_driver_mapReturnCodeToText>:
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	fc 01       	movw	r30, r24
    46d6:	ee 0f       	add	r30, r30
    46d8:	ff 1f       	adc	r31, r31
    46da:	8e 0f       	add	r24, r30
    46dc:	9f 1f       	adc	r25, r31
    46de:	fc 01       	movw	r30, r24
    46e0:	e5 5c       	subi	r30, 0xC5	; 197
    46e2:	f6 4f       	sbci	r31, 0xF6	; 246
    46e4:	81 81       	ldd	r24, Z+1	; 0x01
    46e6:	92 81       	ldd	r25, Z+2	; 0x02
    46e8:	08 95       	ret

000046ea <decode_port_no>:
    46ea:	dc 01       	movw	r26, r24
    46ec:	00 97       	sbiw	r24, 0x00	; 0
    46ee:	29 f1       	breq	.+74     	; 0x473a <decode_port_no+0x50>
    46f0:	fb 01       	movw	r30, r22
    46f2:	20 81       	ld	r18, Z
    46f4:	fc 01       	movw	r30, r24
    46f6:	01 90       	ld	r0, Z+
    46f8:	00 20       	and	r0, r0
    46fa:	e9 f7       	brne	.-6      	; 0x46f6 <decode_port_no+0xc>
    46fc:	31 97       	sbiw	r30, 0x01	; 1
    46fe:	e8 1b       	sub	r30, r24
    4700:	f9 0b       	sbc	r31, r25
    4702:	82 2f       	mov	r24, r18
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	e8 17       	cp	r30, r24
    4708:	f9 07       	cpc	r31, r25
    470a:	c8 f0       	brcs	.+50     	; 0x473e <decode_port_no+0x54>
    470c:	80 e0       	ldi	r24, 0x00	; 0
    470e:	08 c0       	rjmp	.+16     	; 0x4720 <decode_port_no+0x36>
    4710:	88 0f       	add	r24, r24
    4712:	38 2f       	mov	r19, r24
    4714:	33 0f       	add	r19, r19
    4716:	33 0f       	add	r19, r19
    4718:	83 0f       	add	r24, r19
    471a:	80 53       	subi	r24, 0x30	; 48
    471c:	89 0f       	add	r24, r25
    471e:	2f 5f       	subi	r18, 0xFF	; 255
    4720:	fd 01       	movw	r30, r26
    4722:	e2 0f       	add	r30, r18
    4724:	f1 1d       	adc	r31, r1
    4726:	90 81       	ld	r25, Z
    4728:	30 ed       	ldi	r19, 0xD0	; 208
    472a:	39 0f       	add	r19, r25
    472c:	3a 30       	cpi	r19, 0x0A	; 10
    472e:	10 f4       	brcc	.+4      	; 0x4734 <decode_port_no+0x4a>
    4730:	91 11       	cpse	r25, r1
    4732:	ee cf       	rjmp	.-36     	; 0x4710 <decode_port_no+0x26>
    4734:	fb 01       	movw	r30, r22
    4736:	20 83       	st	Z, r18
    4738:	08 95       	ret
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	08 95       	ret
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	08 95       	ret

00004742 <decode_hexadecimal_string_bytes>:
    4742:	0f 93       	push	r16
    4744:	1f 93       	push	r17
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	dc 01       	movw	r26, r24
    474c:	ea 01       	movw	r28, r20
    474e:	20 97       	sbiw	r28, 0x00	; 0
    4750:	e1 f1       	breq	.+120    	; 0x47ca <decode_hexadecimal_string_bytes+0x88>
    4752:	fa 01       	movw	r30, r20
    4754:	01 90       	ld	r0, Z+
    4756:	00 20       	and	r0, r0
    4758:	e9 f7       	brne	.-6      	; 0x4754 <decode_hexadecimal_string_bytes+0x12>
    475a:	31 97       	sbiw	r30, 0x01	; 1
    475c:	e4 1b       	sub	r30, r20
    475e:	f5 0b       	sbc	r31, r21
    4760:	32 97       	sbiw	r30, 0x02	; 2
    4762:	10 f5       	brcc	.+68     	; 0x47a8 <decode_hexadecimal_string_bytes+0x66>
    4764:	32 c0       	rjmp	.+100    	; 0x47ca <decode_hexadecimal_string_bytes+0x88>
    4766:	8d 01       	movw	r16, r26
    4768:	04 0f       	add	r16, r20
    476a:	15 1f       	adc	r17, r21
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	ae 01       	movw	r20, r28
    4770:	42 0f       	add	r20, r18
    4772:	53 1f       	adc	r21, r19
    4774:	fa 01       	movw	r30, r20
    4776:	90 81       	ld	r25, Z
    4778:	91 34       	cpi	r25, 0x41	; 65
    477a:	28 f0       	brcs	.+10     	; 0x4786 <decode_hexadecimal_string_bytes+0x44>
    477c:	97 53       	subi	r25, 0x37	; 55
    477e:	59 2f       	mov	r21, r25
    4780:	52 95       	swap	r21
    4782:	50 7f       	andi	r21, 0xF0	; 240
    4784:	03 c0       	rjmp	.+6      	; 0x478c <decode_hexadecimal_string_bytes+0x4a>
    4786:	59 2f       	mov	r21, r25
    4788:	52 95       	swap	r21
    478a:	50 7f       	andi	r21, 0xF0	; 240
    478c:	2c 0f       	add	r18, r28
    478e:	3d 1f       	adc	r19, r29
    4790:	f9 01       	movw	r30, r18
    4792:	91 81       	ldd	r25, Z+1	; 0x01
    4794:	91 34       	cpi	r25, 0x41	; 65
    4796:	10 f0       	brcs	.+4      	; 0x479c <decode_hexadecimal_string_bytes+0x5a>
    4798:	97 53       	subi	r25, 0x37	; 55
    479a:	01 c0       	rjmp	.+2      	; 0x479e <decode_hexadecimal_string_bytes+0x5c>
    479c:	90 53       	subi	r25, 0x30	; 48
    479e:	95 0f       	add	r25, r21
    47a0:	f8 01       	movw	r30, r16
    47a2:	90 83       	st	Z, r25
    47a4:	8f 5f       	subi	r24, 0xFF	; 255
    47a6:	01 c0       	rjmp	.+2      	; 0x47aa <decode_hexadecimal_string_bytes+0x68>
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	28 2f       	mov	r18, r24
    47ac:	22 0f       	add	r18, r18
    47ae:	48 2f       	mov	r20, r24
    47b0:	50 e0       	ldi	r21, 0x00	; 0
    47b2:	fe 01       	movw	r30, r28
    47b4:	01 90       	ld	r0, Z+
    47b6:	00 20       	and	r0, r0
    47b8:	e9 f7       	brne	.-6      	; 0x47b4 <decode_hexadecimal_string_bytes+0x72>
    47ba:	31 97       	sbiw	r30, 0x01	; 1
    47bc:	ec 1b       	sub	r30, r28
    47be:	fd 0b       	sbc	r31, r29
    47c0:	4e 17       	cp	r20, r30
    47c2:	5f 07       	cpc	r21, r31
    47c4:	10 f4       	brcc	.+4      	; 0x47ca <decode_hexadecimal_string_bytes+0x88>
    47c6:	86 13       	cpse	r24, r22
    47c8:	ce cf       	rjmp	.-100    	; 0x4766 <decode_hexadecimal_string_bytes+0x24>
    47ca:	df 91       	pop	r29
    47cc:	cf 91       	pop	r28
    47ce:	1f 91       	pop	r17
    47d0:	0f 91       	pop	r16
    47d2:	08 95       	ret

000047d4 <_serialCallBack>:
    47d4:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <crc_sum.1945>
    47d8:	86 0f       	add	r24, r22
    47da:	80 93 4e 19 	sts	0x194E, r24	; 0x80194e <crc_sum.1945>
    47de:	90 91 51 19 	lds	r25, 0x1951	; 0x801951 <_mh_state>
    47e2:	91 30       	cpi	r25, 0x01	; 1
    47e4:	79 f0       	breq	.+30     	; 0x4804 <_serialCallBack+0x30>
    47e6:	28 f0       	brcs	.+10     	; 0x47f2 <_serialCallBack+0x1e>
    47e8:	92 30       	cpi	r25, 0x02	; 2
    47ea:	a9 f0       	breq	.+42     	; 0x4816 <_serialCallBack+0x42>
    47ec:	93 30       	cpi	r25, 0x03	; 3
    47ee:	19 f1       	breq	.+70     	; 0x4836 <_serialCallBack+0x62>
    47f0:	08 95       	ret
    47f2:	6f 3f       	cpi	r22, 0xFF	; 255
    47f4:	09 f0       	breq	.+2      	; 0x47f8 <_serialCallBack+0x24>
    47f6:	48 c0       	rjmp	.+144    	; 0x4888 <_serialCallBack+0xb4>
    47f8:	10 92 4e 19 	sts	0x194E, r1	; 0x80194e <crc_sum.1945>
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <_mh_state>
    4802:	08 95       	ret
    4804:	66 38       	cpi	r22, 0x86	; 134
    4806:	09 f0       	breq	.+2      	; 0x480a <_serialCallBack+0x36>
    4808:	3f c0       	rjmp	.+126    	; 0x4888 <_serialCallBack+0xb4>
    480a:	10 92 4d 19 	sts	0x194D, r1	; 0x80194d <inDex.1943>
    480e:	82 e0       	ldi	r24, 0x02	; 2
    4810:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <_mh_state>
    4814:	08 95       	ret
    4816:	e0 91 4d 19 	lds	r30, 0x194D	; 0x80194d <inDex.1943>
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	8e 0f       	add	r24, r30
    481e:	80 93 4d 19 	sts	0x194D, r24	; 0x80194d <inDex.1943>
    4822:	f0 e0       	ldi	r31, 0x00	; 0
    4824:	e5 5b       	subi	r30, 0xB5	; 181
    4826:	f6 4e       	sbci	r31, 0xE6	; 230
    4828:	60 83       	st	Z, r22
    482a:	82 30       	cpi	r24, 0x02	; 2
    482c:	69 f5       	brne	.+90     	; 0x4888 <_serialCallBack+0xb4>
    482e:	83 e0       	ldi	r24, 0x03	; 3
    4830:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <_mh_state>
    4834:	08 95       	ret
    4836:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <inDex.1943>
    483a:	21 e0       	ldi	r18, 0x01	; 1
    483c:	29 0f       	add	r18, r25
    483e:	20 93 4d 19 	sts	0x194D, r18	; 0x80194d <inDex.1943>
    4842:	96 30       	cpi	r25, 0x06	; 6
    4844:	09 f5       	brne	.+66     	; 0x4888 <_serialCallBack+0xb4>
    4846:	81 11       	cpse	r24, r1
    4848:	0e c0       	rjmp	.+28     	; 0x4866 <_serialCallBack+0x92>
    484a:	eb e4       	ldi	r30, 0x4B	; 75
    484c:	f9 e1       	ldi	r31, 0x19	; 25
    484e:	80 81       	ld	r24, Z
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	98 2f       	mov	r25, r24
    4854:	88 27       	eor	r24, r24
    4856:	21 81       	ldd	r18, Z+1	; 0x01
    4858:	82 0f       	add	r24, r18
    485a:	91 1d       	adc	r25, r1
    485c:	90 93 53 19 	sts	0x1953, r25	; 0x801953 <_ppm+0x1>
    4860:	80 93 52 19 	sts	0x1952, r24	; 0x801952 <_ppm>
    4864:	04 c0       	rjmp	.+8      	; 0x486e <_serialCallBack+0x9a>
    4866:	10 92 53 19 	sts	0x1953, r1	; 0x801953 <_ppm+0x1>
    486a:	10 92 52 19 	sts	0x1952, r1	; 0x801952 <_ppm>
    486e:	10 92 51 19 	sts	0x1951, r1	; 0x801951 <_mh_state>
    4872:	e0 91 4f 19 	lds	r30, 0x194F	; 0x80194f <_appCallBack>
    4876:	f0 91 50 19 	lds	r31, 0x1950	; 0x801950 <_appCallBack+0x1>
    487a:	30 97       	sbiw	r30, 0x00	; 0
    487c:	29 f0       	breq	.+10     	; 0x4888 <_serialCallBack+0xb4>
    487e:	80 91 52 19 	lds	r24, 0x1952	; 0x801952 <_ppm>
    4882:	90 91 53 19 	lds	r25, 0x1953	; 0x801953 <_ppm+0x1>
    4886:	19 95       	eicall
    4888:	08 95       	ret

0000488a <mh_z19_initialise>:
    488a:	8f 92       	push	r8
    488c:	9f 92       	push	r9
    488e:	af 92       	push	r10
    4890:	cf 92       	push	r12
    4892:	ef 92       	push	r14
    4894:	0f 93       	push	r16
    4896:	0f 2e       	mov	r0, r31
    4898:	fa ee       	ldi	r31, 0xEA	; 234
    489a:	8f 2e       	mov	r8, r31
    489c:	f3 e2       	ldi	r31, 0x23	; 35
    489e:	9f 2e       	mov	r9, r31
    48a0:	f0 2d       	mov	r31, r0
    48a2:	68 94       	set
    48a4:	aa 24       	eor	r10, r10
    48a6:	a4 f8       	bld	r10, 4
    48a8:	68 94       	set
    48aa:	cc 24       	eor	r12, r12
    48ac:	c4 f8       	bld	r12, 4
    48ae:	e1 2c       	mov	r14, r1
    48b0:	00 e0       	ldi	r16, 0x00	; 0
    48b2:	23 e0       	ldi	r18, 0x03	; 3
    48b4:	40 e8       	ldi	r20, 0x80	; 128
    48b6:	55 e2       	ldi	r21, 0x25	; 37
    48b8:	60 e0       	ldi	r22, 0x00	; 0
    48ba:	70 e0       	ldi	r23, 0x00	; 0
    48bc:	73 d0       	rcall	.+230    	; 0x49a4 <serial_create>
    48be:	90 93 55 19 	sts	0x1955, r25	; 0x801955 <_serial+0x1>
    48c2:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <_serial>
    48c6:	0f 91       	pop	r16
    48c8:	ef 90       	pop	r14
    48ca:	cf 90       	pop	r12
    48cc:	af 90       	pop	r10
    48ce:	9f 90       	pop	r9
    48d0:	8f 90       	pop	r8
    48d2:	08 95       	ret

000048d4 <mh_z19_injectCallBack>:
    48d4:	90 93 50 19 	sts	0x1950, r25	; 0x801950 <_appCallBack+0x1>
    48d8:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <_appCallBack>
    48dc:	08 95       	ret

000048de <mh_z19_takeMeassuring>:
    48de:	cf 93       	push	r28
    48e0:	df 93       	push	r29
    48e2:	cd b7       	in	r28, 0x3d	; 61
    48e4:	de b7       	in	r29, 0x3e	; 62
    48e6:	29 97       	sbiw	r28, 0x09	; 9
    48e8:	0f b6       	in	r0, 0x3f	; 63
    48ea:	f8 94       	cli
    48ec:	de bf       	out	0x3e, r29	; 62
    48ee:	0f be       	out	0x3f, r0	; 63
    48f0:	cd bf       	out	0x3d, r28	; 61
    48f2:	89 e0       	ldi	r24, 0x09	; 9
    48f4:	e2 e4       	ldi	r30, 0x42	; 66
    48f6:	f2 e0       	ldi	r31, 0x02	; 2
    48f8:	9e 01       	movw	r18, r28
    48fa:	2f 5f       	subi	r18, 0xFF	; 255
    48fc:	3f 4f       	sbci	r19, 0xFF	; 255
    48fe:	d9 01       	movw	r26, r18
    4900:	01 90       	ld	r0, Z+
    4902:	0d 92       	st	X+, r0
    4904:	8a 95       	dec	r24
    4906:	e1 f7       	brne	.-8      	; 0x4900 <mh_z19_takeMeassuring+0x22>
    4908:	10 92 53 19 	sts	0x1953, r1	; 0x801953 <_ppm+0x1>
    490c:	10 92 52 19 	sts	0x1952, r1	; 0x801952 <_ppm>
    4910:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <_serial>
    4914:	90 91 55 19 	lds	r25, 0x1955	; 0x801955 <_serial+0x1>
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	31 f0       	breq	.+12     	; 0x4928 <mh_z19_takeMeassuring+0x4a>
    491c:	42 2f       	mov	r20, r18
    491e:	53 2f       	mov	r21, r19
    4920:	69 e0       	ldi	r22, 0x09	; 9
    4922:	0d d1       	rcall	.+538    	; 0x4b3e <serial_sendBytes>
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	01 c0       	rjmp	.+2      	; 0x492a <mh_z19_takeMeassuring+0x4c>
    4928:	82 e0       	ldi	r24, 0x02	; 2
    492a:	29 96       	adiw	r28, 0x09	; 9
    492c:	0f b6       	in	r0, 0x3f	; 63
    492e:	f8 94       	cli
    4930:	de bf       	out	0x3e, r29	; 62
    4932:	0f be       	out	0x3f, r0	; 63
    4934:	cd bf       	out	0x3d, r28	; 61
    4936:	df 91       	pop	r29
    4938:	cf 91       	pop	r28
    493a:	08 95       	ret

0000493c <rc_servo_setPosition>:
    493c:	65 36       	cpi	r22, 0x65	; 101
    493e:	0c f0       	brlt	.+2      	; 0x4942 <rc_servo_setPosition+0x6>
    4940:	64 e6       	ldi	r22, 0x64	; 100
    4942:	6c 39       	cpi	r22, 0x9C	; 156
    4944:	0c f4       	brge	.+2      	; 0x4948 <rc_servo_setPosition+0xc>
    4946:	6c e9       	ldi	r22, 0x9C	; 156
    4948:	96 ef       	ldi	r25, 0xF6	; 246
    494a:	69 02       	muls	r22, r25
    494c:	b0 01       	movw	r22, r0
    494e:	11 24       	eor	r1, r1
    4950:	68 54       	subi	r22, 0x48	; 72
    4952:	74 4f       	sbci	r23, 0xF4	; 244
    4954:	81 11       	cpse	r24, r1
    4956:	05 c0       	rjmp	.+10     	; 0x4962 <rc_servo_setPosition+0x26>
    4958:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    495c:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4960:	08 95       	ret
    4962:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4966:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    496a:	08 95       	ret

0000496c <rc_servo_initialise>:
    496c:	ea e0       	ldi	r30, 0x0A	; 10
    496e:	f1 e0       	ldi	r31, 0x01	; 1
    4970:	80 81       	ld	r24, Z
    4972:	88 61       	ori	r24, 0x18	; 24
    4974:	80 83       	st	Z, r24
    4976:	8f e3       	ldi	r24, 0x3F	; 63
    4978:	9c e9       	ldi	r25, 0x9C	; 156
    497a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    497e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4982:	60 e0       	ldi	r22, 0x00	; 0
    4984:	80 e0       	ldi	r24, 0x00	; 0
    4986:	da df       	rcall	.-76     	; 0x493c <rc_servo_setPosition>
    4988:	60 e0       	ldi	r22, 0x00	; 0
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	d7 df       	rcall	.-82     	; 0x493c <rc_servo_setPosition>
    498e:	e0 e2       	ldi	r30, 0x20	; 32
    4990:	f1 e0       	ldi	r31, 0x01	; 1
    4992:	80 81       	ld	r24, Z
    4994:	82 6a       	ori	r24, 0xA2	; 162
    4996:	80 83       	st	Z, r24
    4998:	e1 e2       	ldi	r30, 0x21	; 33
    499a:	f1 e0       	ldi	r31, 0x01	; 1
    499c:	80 81       	ld	r24, Z
    499e:	8a 61       	ori	r24, 0x1A	; 26
    49a0:	80 83       	st	Z, r24
    49a2:	08 95       	ret

000049a4 <serial_create>:
    49a4:	2f 92       	push	r2
    49a6:	3f 92       	push	r3
    49a8:	4f 92       	push	r4
    49aa:	5f 92       	push	r5
    49ac:	6f 92       	push	r6
    49ae:	7f 92       	push	r7
    49b0:	8f 92       	push	r8
    49b2:	9f 92       	push	r9
    49b4:	af 92       	push	r10
    49b6:	cf 92       	push	r12
    49b8:	ef 92       	push	r14
    49ba:	ff 92       	push	r15
    49bc:	0f 93       	push	r16
    49be:	1f 93       	push	r17
    49c0:	cf 93       	push	r28
    49c2:	df 93       	push	r29
    49c4:	cd b7       	in	r28, 0x3d	; 61
    49c6:	de b7       	in	r29, 0x3e	; 62
    49c8:	f8 2e       	mov	r15, r24
    49ca:	2a 01       	movw	r4, r20
    49cc:	3b 01       	movw	r6, r22
    49ce:	88 e0       	ldi	r24, 0x08	; 8
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <malloc>
    49d6:	8c 01       	movw	r16, r24
    49d8:	8f 2d       	mov	r24, r15
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	fc 01       	movw	r30, r24
    49de:	ee 0f       	add	r30, r30
    49e0:	ff 1f       	adc	r31, r31
    49e2:	ea 5a       	subi	r30, 0xAA	; 170
    49e4:	f6 4e       	sbci	r31, 0xE6	; 230
    49e6:	11 83       	std	Z+1, r17	; 0x01
    49e8:	00 83       	st	Z, r16
    49ea:	01 15       	cp	r16, r1
    49ec:	11 05       	cpc	r17, r1
    49ee:	09 f4       	brne	.+2      	; 0x49f2 <serial_create+0x4e>
    49f0:	69 c0       	rjmp	.+210    	; 0x4ac4 <serial_create+0x120>
    49f2:	88 0f       	add	r24, r24
    49f4:	99 1f       	adc	r25, r25
    49f6:	fc 01       	movw	r30, r24
    49f8:	e5 5f       	subi	r30, 0xF5	; 245
    49fa:	fd 4f       	sbci	r31, 0xFD	; 253
    49fc:	80 81       	ld	r24, Z
    49fe:	91 81       	ldd	r25, Z+1	; 0x01
    4a00:	d8 01       	movw	r26, r16
    4a02:	8d 93       	st	X+, r24
    4a04:	9c 93       	st	X, r25
    4a06:	6c 2d       	mov	r22, r12
    4a08:	70 e0       	ldi	r23, 0x00	; 0
    4a0a:	84 e0       	ldi	r24, 0x04	; 4
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <calloc>
    4a12:	1c 01       	movw	r2, r24
    4a14:	61 e0       	ldi	r22, 0x01	; 1
    4a16:	70 e0       	ldi	r23, 0x00	; 0
    4a18:	86 e0       	ldi	r24, 0x06	; 6
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <calloc>
    4a20:	7c 01       	movw	r14, r24
    4a22:	4c 2d       	mov	r20, r12
    4a24:	b1 01       	movw	r22, r2
    4a26:	df d6       	rcall	.+3518   	; 0x57e6 <fifo_init>
    4a28:	f8 01       	movw	r30, r16
    4a2a:	f5 82       	std	Z+5, r15	; 0x05
    4a2c:	e4 82       	std	Z+4, r14	; 0x04
    4a2e:	6a 2d       	mov	r22, r10
    4a30:	70 e0       	ldi	r23, 0x00	; 0
    4a32:	84 e0       	ldi	r24, 0x04	; 4
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <calloc>
    4a3a:	1c 01       	movw	r2, r24
    4a3c:	61 e0       	ldi	r22, 0x01	; 1
    4a3e:	70 e0       	ldi	r23, 0x00	; 0
    4a40:	86 e0       	ldi	r24, 0x06	; 6
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <calloc>
    4a48:	7c 01       	movw	r14, r24
    4a4a:	4a 2d       	mov	r20, r10
    4a4c:	b1 01       	movw	r22, r2
    4a4e:	cb d6       	rcall	.+3478   	; 0x57e6 <fifo_init>
    4a50:	d8 01       	movw	r26, r16
    4a52:	13 96       	adiw	r26, 0x03	; 3
    4a54:	fc 92       	st	X, r15
    4a56:	ee 92       	st	-X, r14
    4a58:	12 97       	sbiw	r26, 0x02	; 2
    4a5a:	17 96       	adiw	r26, 0x07	; 7
    4a5c:	9c 92       	st	X, r9
    4a5e:	8e 92       	st	-X, r8
    4a60:	16 97       	sbiw	r26, 0x06	; 6
    4a62:	ff b6       	in	r15, 0x3f	; 63
    4a64:	f8 94       	cli
    4a66:	ed 91       	ld	r30, X+
    4a68:	fc 91       	ld	r31, X
    4a6a:	11 97       	sbiw	r26, 0x01	; 1
    4a6c:	36 97       	sbiw	r30, 0x06	; 6
    4a6e:	80 81       	ld	r24, Z
    4a70:	82 60       	ori	r24, 0x02	; 2
    4a72:	80 83       	st	Z, r24
    4a74:	8d 90       	ld	r8, X+
    4a76:	9c 90       	ld	r9, X
    4a78:	c3 01       	movw	r24, r6
    4a7a:	b2 01       	movw	r22, r4
    4a7c:	a2 d7       	rcall	.+3908   	; 0x59c2 <__floatunsisf>
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	40 e0       	ldi	r20, 0x00	; 0
    4a84:	51 e4       	ldi	r21, 0x41	; 65
    4a86:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <__mulsf3>
    4a8a:	9b 01       	movw	r18, r22
    4a8c:	ac 01       	movw	r20, r24
    4a8e:	60 e0       	ldi	r22, 0x00	; 0
    4a90:	74 e2       	ldi	r23, 0x24	; 36
    4a92:	84 e7       	ldi	r24, 0x74	; 116
    4a94:	9b e4       	ldi	r25, 0x4B	; 75
    4a96:	2a d7       	rcall	.+3668   	; 0x58ec <__divsf3>
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	40 e8       	ldi	r20, 0x80	; 128
    4a9e:	5f e3       	ldi	r21, 0x3F	; 63
    4aa0:	be d6       	rcall	.+3452   	; 0x581e <__subsf3>
    4aa2:	3d d9       	rcall	.-3462   	; 0x3d1e <__fixunssfsi>
    4aa4:	f4 01       	movw	r30, r8
    4aa6:	32 97       	sbiw	r30, 0x02	; 2
    4aa8:	60 83       	st	Z, r22
    4aaa:	d8 01       	movw	r26, r16
    4aac:	ed 91       	ld	r30, X+
    4aae:	fc 91       	ld	r31, X
    4ab0:	11 97       	sbiw	r26, 0x01	; 1
    4ab2:	35 97       	sbiw	r30, 0x05	; 5
    4ab4:	88 e9       	ldi	r24, 0x98	; 152
    4ab6:	80 83       	st	Z, r24
    4ab8:	ed 91       	ld	r30, X+
    4aba:	fc 91       	ld	r31, X
    4abc:	34 97       	sbiw	r30, 0x04	; 4
    4abe:	86 e0       	ldi	r24, 0x06	; 6
    4ac0:	80 83       	st	Z, r24
    4ac2:	ff be       	out	0x3f, r15	; 63
    4ac4:	c8 01       	movw	r24, r16
    4ac6:	df 91       	pop	r29
    4ac8:	cf 91       	pop	r28
    4aca:	1f 91       	pop	r17
    4acc:	0f 91       	pop	r16
    4ace:	ff 90       	pop	r15
    4ad0:	ef 90       	pop	r14
    4ad2:	cf 90       	pop	r12
    4ad4:	af 90       	pop	r10
    4ad6:	9f 90       	pop	r9
    4ad8:	8f 90       	pop	r8
    4ada:	7f 90       	pop	r7
    4adc:	6f 90       	pop	r6
    4ade:	5f 90       	pop	r5
    4ae0:	4f 90       	pop	r4
    4ae2:	3f 90       	pop	r3
    4ae4:	2f 90       	pop	r2
    4ae6:	08 95       	ret

00004ae8 <serial_sendByte>:
    4ae8:	cf 93       	push	r28
    4aea:	df 93       	push	r29
    4aec:	dc 01       	movw	r26, r24
    4aee:	89 2b       	or	r24, r25
    4af0:	01 f1       	breq	.+64     	; 0x4b32 <serial_sendByte+0x4a>
    4af2:	12 96       	adiw	r26, 0x02	; 2
    4af4:	ed 91       	ld	r30, X+
    4af6:	fc 91       	ld	r31, X
    4af8:	13 97       	sbiw	r26, 0x03	; 3
    4afa:	93 81       	ldd	r25, Z+3	; 0x03
    4afc:	82 81       	ldd	r24, Z+2	; 0x02
    4afe:	25 81       	ldd	r18, Z+5	; 0x05
    4b00:	98 1b       	sub	r25, r24
    4b02:	92 23       	and	r25, r18
    4b04:	84 81       	ldd	r24, Z+4	; 0x04
    4b06:	98 17       	cp	r25, r24
    4b08:	b1 f0       	breq	.+44     	; 0x4b36 <serial_sendByte+0x4e>
    4b0a:	83 81       	ldd	r24, Z+3	; 0x03
    4b0c:	26 95       	lsr	r18
    4b0e:	28 23       	and	r18, r24
    4b10:	c0 81       	ld	r28, Z
    4b12:	d1 81       	ldd	r29, Z+1	; 0x01
    4b14:	c2 0f       	add	r28, r18
    4b16:	d1 1d       	adc	r29, r1
    4b18:	68 83       	st	Y, r22
    4b1a:	8f 5f       	subi	r24, 0xFF	; 255
    4b1c:	95 81       	ldd	r25, Z+5	; 0x05
    4b1e:	89 23       	and	r24, r25
    4b20:	83 83       	std	Z+3, r24	; 0x03
    4b22:	ed 91       	ld	r30, X+
    4b24:	fc 91       	ld	r31, X
    4b26:	35 97       	sbiw	r30, 0x05	; 5
    4b28:	80 81       	ld	r24, Z
    4b2a:	80 62       	ori	r24, 0x20	; 32
    4b2c:	80 83       	st	Z, r24
    4b2e:	80 e0       	ldi	r24, 0x00	; 0
    4b30:	03 c0       	rjmp	.+6      	; 0x4b38 <serial_sendByte+0x50>
    4b32:	81 e0       	ldi	r24, 0x01	; 1
    4b34:	01 c0       	rjmp	.+2      	; 0x4b38 <serial_sendByte+0x50>
    4b36:	82 e0       	ldi	r24, 0x02	; 2
    4b38:	df 91       	pop	r29
    4b3a:	cf 91       	pop	r28
    4b3c:	08 95       	ret

00004b3e <serial_sendBytes>:
    4b3e:	ef 92       	push	r14
    4b40:	ff 92       	push	r15
    4b42:	0f 93       	push	r16
    4b44:	1f 93       	push	r17
    4b46:	cf 93       	push	r28
    4b48:	df 93       	push	r29
    4b4a:	7c 01       	movw	r14, r24
    4b4c:	00 97       	sbiw	r24, 0x00	; 0
    4b4e:	09 f4       	brne	.+2      	; 0x4b52 <serial_sendBytes+0x14>
    4b50:	41 c0       	rjmp	.+130    	; 0x4bd4 <serial_sendBytes+0x96>
    4b52:	dc 01       	movw	r26, r24
    4b54:	12 96       	adiw	r26, 0x02	; 2
    4b56:	ed 91       	ld	r30, X+
    4b58:	fc 91       	ld	r31, X
    4b5a:	13 97       	sbiw	r26, 0x03	; 3
    4b5c:	93 81       	ldd	r25, Z+3	; 0x03
    4b5e:	82 81       	ldd	r24, Z+2	; 0x02
    4b60:	98 1b       	sub	r25, r24
    4b62:	85 81       	ldd	r24, Z+5	; 0x05
    4b64:	98 23       	and	r25, r24
    4b66:	84 81       	ldd	r24, Z+4	; 0x04
    4b68:	89 1b       	sub	r24, r25
    4b6a:	86 17       	cp	r24, r22
    4b6c:	a8 f1       	brcs	.+106    	; 0x4bd8 <serial_sendBytes+0x9a>
    4b6e:	66 23       	and	r22, r22
    4b70:	41 f1       	breq	.+80     	; 0x4bc2 <serial_sendBytes+0x84>
    4b72:	84 2f       	mov	r24, r20
    4b74:	95 2f       	mov	r25, r21
    4b76:	dc 01       	movw	r26, r24
    4b78:	61 50       	subi	r22, 0x01	; 1
    4b7a:	46 2f       	mov	r20, r22
    4b7c:	50 e0       	ldi	r21, 0x00	; 0
    4b7e:	4f 5f       	subi	r20, 0xFF	; 255
    4b80:	5f 4f       	sbci	r21, 0xFF	; 255
    4b82:	48 0f       	add	r20, r24
    4b84:	59 1f       	adc	r21, r25
    4b86:	e7 01       	movw	r28, r14
    4b88:	ea 81       	ldd	r30, Y+2	; 0x02
    4b8a:	fb 81       	ldd	r31, Y+3	; 0x03
    4b8c:	93 81       	ldd	r25, Z+3	; 0x03
    4b8e:	82 81       	ldd	r24, Z+2	; 0x02
    4b90:	25 81       	ldd	r18, Z+5	; 0x05
    4b92:	98 1b       	sub	r25, r24
    4b94:	92 23       	and	r25, r18
    4b96:	84 81       	ldd	r24, Z+4	; 0x04
    4b98:	98 17       	cp	r25, r24
    4b9a:	79 f0       	breq	.+30     	; 0x4bba <serial_sendBytes+0x7c>
    4b9c:	8c 91       	ld	r24, X
    4b9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ba0:	26 95       	lsr	r18
    4ba2:	29 23       	and	r18, r25
    4ba4:	60 81       	ld	r22, Z
    4ba6:	71 81       	ldd	r23, Z+1	; 0x01
    4ba8:	8b 01       	movw	r16, r22
    4baa:	02 0f       	add	r16, r18
    4bac:	11 1d       	adc	r17, r1
    4bae:	e8 01       	movw	r28, r16
    4bb0:	88 83       	st	Y, r24
    4bb2:	9f 5f       	subi	r25, 0xFF	; 255
    4bb4:	85 81       	ldd	r24, Z+5	; 0x05
    4bb6:	98 23       	and	r25, r24
    4bb8:	93 83       	std	Z+3, r25	; 0x03
    4bba:	11 96       	adiw	r26, 0x01	; 1
    4bbc:	a4 17       	cp	r26, r20
    4bbe:	b5 07       	cpc	r27, r21
    4bc0:	11 f7       	brne	.-60     	; 0x4b86 <serial_sendBytes+0x48>
    4bc2:	d7 01       	movw	r26, r14
    4bc4:	ed 91       	ld	r30, X+
    4bc6:	fc 91       	ld	r31, X
    4bc8:	35 97       	sbiw	r30, 0x05	; 5
    4bca:	80 81       	ld	r24, Z
    4bcc:	80 62       	ori	r24, 0x20	; 32
    4bce:	80 83       	st	Z, r24
    4bd0:	80 e0       	ldi	r24, 0x00	; 0
    4bd2:	03 c0       	rjmp	.+6      	; 0x4bda <serial_sendBytes+0x9c>
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	01 c0       	rjmp	.+2      	; 0x4bda <serial_sendBytes+0x9c>
    4bd8:	82 e0       	ldi	r24, 0x02	; 2
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	1f 91       	pop	r17
    4be0:	0f 91       	pop	r16
    4be2:	ff 90       	pop	r15
    4be4:	ef 90       	pop	r14
    4be6:	08 95       	ret

00004be8 <serial_getByte>:
    4be8:	00 97       	sbiw	r24, 0x00	; 0
    4bea:	d1 f0       	breq	.+52     	; 0x4c20 <serial_getByte+0x38>
    4bec:	dc 01       	movw	r26, r24
    4bee:	14 96       	adiw	r26, 0x04	; 4
    4bf0:	ed 91       	ld	r30, X+
    4bf2:	fc 91       	ld	r31, X
    4bf4:	15 97       	sbiw	r26, 0x05	; 5
    4bf6:	93 81       	ldd	r25, Z+3	; 0x03
    4bf8:	82 81       	ldd	r24, Z+2	; 0x02
    4bfa:	98 17       	cp	r25, r24
    4bfc:	99 f0       	breq	.+38     	; 0x4c24 <serial_getByte+0x3c>
    4bfe:	92 81       	ldd	r25, Z+2	; 0x02
    4c00:	85 81       	ldd	r24, Z+5	; 0x05
    4c02:	86 95       	lsr	r24
    4c04:	89 23       	and	r24, r25
    4c06:	a0 81       	ld	r26, Z
    4c08:	b1 81       	ldd	r27, Z+1	; 0x01
    4c0a:	a8 0f       	add	r26, r24
    4c0c:	b1 1d       	adc	r27, r1
    4c0e:	8c 91       	ld	r24, X
    4c10:	db 01       	movw	r26, r22
    4c12:	8c 93       	st	X, r24
    4c14:	9f 5f       	subi	r25, 0xFF	; 255
    4c16:	85 81       	ldd	r24, Z+5	; 0x05
    4c18:	98 23       	and	r25, r24
    4c1a:	92 83       	std	Z+2, r25	; 0x02
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	08 95       	ret
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	08 95       	ret
    4c24:	83 e0       	ldi	r24, 0x03	; 3
    4c26:	08 95       	ret

00004c28 <__vector_25>:
    4c28:	1f 92       	push	r1
    4c2a:	0f 92       	push	r0
    4c2c:	0f b6       	in	r0, 0x3f	; 63
    4c2e:	0f 92       	push	r0
    4c30:	11 24       	eor	r1, r1
    4c32:	0b b6       	in	r0, 0x3b	; 59
    4c34:	0f 92       	push	r0
    4c36:	2f 93       	push	r18
    4c38:	3f 93       	push	r19
    4c3a:	4f 93       	push	r20
    4c3c:	5f 93       	push	r21
    4c3e:	6f 93       	push	r22
    4c40:	7f 93       	push	r23
    4c42:	8f 93       	push	r24
    4c44:	9f 93       	push	r25
    4c46:	af 93       	push	r26
    4c48:	bf 93       	push	r27
    4c4a:	cf 93       	push	r28
    4c4c:	df 93       	push	r29
    4c4e:	ef 93       	push	r30
    4c50:	ff 93       	push	r31
    4c52:	a0 91 56 19 	lds	r26, 0x1956	; 0x801956 <_ser_handle>
    4c56:	b0 91 57 19 	lds	r27, 0x1957	; 0x801957 <_ser_handle+0x1>
    4c5a:	10 97       	sbiw	r26, 0x00	; 0
    4c5c:	11 f1       	breq	.+68     	; 0x4ca2 <__vector_25+0x7a>
    4c5e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4c62:	14 96       	adiw	r26, 0x04	; 4
    4c64:	ed 91       	ld	r30, X+
    4c66:	fc 91       	ld	r31, X
    4c68:	15 97       	sbiw	r26, 0x05	; 5
    4c6a:	93 81       	ldd	r25, Z+3	; 0x03
    4c6c:	82 81       	ldd	r24, Z+2	; 0x02
    4c6e:	25 81       	ldd	r18, Z+5	; 0x05
    4c70:	98 1b       	sub	r25, r24
    4c72:	92 23       	and	r25, r18
    4c74:	84 81       	ldd	r24, Z+4	; 0x04
    4c76:	98 17       	cp	r25, r24
    4c78:	61 f0       	breq	.+24     	; 0x4c92 <__vector_25+0x6a>
    4c7a:	83 81       	ldd	r24, Z+3	; 0x03
    4c7c:	26 95       	lsr	r18
    4c7e:	28 23       	and	r18, r24
    4c80:	c0 81       	ld	r28, Z
    4c82:	d1 81       	ldd	r29, Z+1	; 0x01
    4c84:	c2 0f       	add	r28, r18
    4c86:	d1 1d       	adc	r29, r1
    4c88:	68 83       	st	Y, r22
    4c8a:	8f 5f       	subi	r24, 0xFF	; 255
    4c8c:	95 81       	ldd	r25, Z+5	; 0x05
    4c8e:	89 23       	and	r24, r25
    4c90:	83 83       	std	Z+3, r24	; 0x03
    4c92:	16 96       	adiw	r26, 0x06	; 6
    4c94:	ed 91       	ld	r30, X+
    4c96:	fc 91       	ld	r31, X
    4c98:	17 97       	sbiw	r26, 0x07	; 7
    4c9a:	30 97       	sbiw	r30, 0x00	; 0
    4c9c:	11 f0       	breq	.+4      	; 0x4ca2 <__vector_25+0x7a>
    4c9e:	cd 01       	movw	r24, r26
    4ca0:	19 95       	eicall
    4ca2:	ff 91       	pop	r31
    4ca4:	ef 91       	pop	r30
    4ca6:	df 91       	pop	r29
    4ca8:	cf 91       	pop	r28
    4caa:	bf 91       	pop	r27
    4cac:	af 91       	pop	r26
    4cae:	9f 91       	pop	r25
    4cb0:	8f 91       	pop	r24
    4cb2:	7f 91       	pop	r23
    4cb4:	6f 91       	pop	r22
    4cb6:	5f 91       	pop	r21
    4cb8:	4f 91       	pop	r20
    4cba:	3f 91       	pop	r19
    4cbc:	2f 91       	pop	r18
    4cbe:	0f 90       	pop	r0
    4cc0:	0b be       	out	0x3b, r0	; 59
    4cc2:	0f 90       	pop	r0
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	0f 90       	pop	r0
    4cc8:	1f 90       	pop	r1
    4cca:	18 95       	reti

00004ccc <__vector_26>:
    4ccc:	1f 92       	push	r1
    4cce:	0f 92       	push	r0
    4cd0:	0f b6       	in	r0, 0x3f	; 63
    4cd2:	0f 92       	push	r0
    4cd4:	11 24       	eor	r1, r1
    4cd6:	0b b6       	in	r0, 0x3b	; 59
    4cd8:	0f 92       	push	r0
    4cda:	2f 93       	push	r18
    4cdc:	8f 93       	push	r24
    4cde:	9f 93       	push	r25
    4ce0:	af 93       	push	r26
    4ce2:	bf 93       	push	r27
    4ce4:	ef 93       	push	r30
    4ce6:	ff 93       	push	r31
    4ce8:	e0 91 56 19 	lds	r30, 0x1956	; 0x801956 <_ser_handle>
    4cec:	f0 91 57 19 	lds	r31, 0x1957	; 0x801957 <_ser_handle+0x1>
    4cf0:	30 97       	sbiw	r30, 0x00	; 0
    4cf2:	b9 f0       	breq	.+46     	; 0x4d22 <__vector_26+0x56>
    4cf4:	02 80       	ldd	r0, Z+2	; 0x02
    4cf6:	f3 81       	ldd	r31, Z+3	; 0x03
    4cf8:	e0 2d       	mov	r30, r0
    4cfa:	93 81       	ldd	r25, Z+3	; 0x03
    4cfc:	82 81       	ldd	r24, Z+2	; 0x02
    4cfe:	98 17       	cp	r25, r24
    4d00:	b1 f0       	breq	.+44     	; 0x4d2e <__vector_26+0x62>
    4d02:	92 81       	ldd	r25, Z+2	; 0x02
    4d04:	85 81       	ldd	r24, Z+5	; 0x05
    4d06:	28 2f       	mov	r18, r24
    4d08:	26 95       	lsr	r18
    4d0a:	29 23       	and	r18, r25
    4d0c:	a0 81       	ld	r26, Z
    4d0e:	b1 81       	ldd	r27, Z+1	; 0x01
    4d10:	a2 0f       	add	r26, r18
    4d12:	b1 1d       	adc	r27, r1
    4d14:	2c 91       	ld	r18, X
    4d16:	9f 5f       	subi	r25, 0xFF	; 255
    4d18:	89 23       	and	r24, r25
    4d1a:	82 83       	std	Z+2, r24	; 0x02
    4d1c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4d20:	0b c0       	rjmp	.+22     	; 0x4d38 <__vector_26+0x6c>
    4d22:	e1 ec       	ldi	r30, 0xC1	; 193
    4d24:	f0 e0       	ldi	r31, 0x00	; 0
    4d26:	80 81       	ld	r24, Z
    4d28:	8f 7d       	andi	r24, 0xDF	; 223
    4d2a:	80 83       	st	Z, r24
    4d2c:	05 c0       	rjmp	.+10     	; 0x4d38 <__vector_26+0x6c>
    4d2e:	e1 ec       	ldi	r30, 0xC1	; 193
    4d30:	f0 e0       	ldi	r31, 0x00	; 0
    4d32:	80 81       	ld	r24, Z
    4d34:	8f 7d       	andi	r24, 0xDF	; 223
    4d36:	80 83       	st	Z, r24
    4d38:	ff 91       	pop	r31
    4d3a:	ef 91       	pop	r30
    4d3c:	bf 91       	pop	r27
    4d3e:	af 91       	pop	r26
    4d40:	9f 91       	pop	r25
    4d42:	8f 91       	pop	r24
    4d44:	2f 91       	pop	r18
    4d46:	0f 90       	pop	r0
    4d48:	0b be       	out	0x3b, r0	; 59
    4d4a:	0f 90       	pop	r0
    4d4c:	0f be       	out	0x3f, r0	; 63
    4d4e:	0f 90       	pop	r0
    4d50:	1f 90       	pop	r1
    4d52:	18 95       	reti

00004d54 <__vector_36>:
    4d54:	1f 92       	push	r1
    4d56:	0f 92       	push	r0
    4d58:	0f b6       	in	r0, 0x3f	; 63
    4d5a:	0f 92       	push	r0
    4d5c:	11 24       	eor	r1, r1
    4d5e:	0b b6       	in	r0, 0x3b	; 59
    4d60:	0f 92       	push	r0
    4d62:	2f 93       	push	r18
    4d64:	3f 93       	push	r19
    4d66:	4f 93       	push	r20
    4d68:	5f 93       	push	r21
    4d6a:	6f 93       	push	r22
    4d6c:	7f 93       	push	r23
    4d6e:	8f 93       	push	r24
    4d70:	9f 93       	push	r25
    4d72:	af 93       	push	r26
    4d74:	bf 93       	push	r27
    4d76:	cf 93       	push	r28
    4d78:	df 93       	push	r29
    4d7a:	ef 93       	push	r30
    4d7c:	ff 93       	push	r31
    4d7e:	a0 91 58 19 	lds	r26, 0x1958	; 0x801958 <_ser_handle+0x2>
    4d82:	b0 91 59 19 	lds	r27, 0x1959	; 0x801959 <_ser_handle+0x3>
    4d86:	10 97       	sbiw	r26, 0x00	; 0
    4d88:	11 f1       	breq	.+68     	; 0x4dce <__vector_36+0x7a>
    4d8a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4d8e:	14 96       	adiw	r26, 0x04	; 4
    4d90:	ed 91       	ld	r30, X+
    4d92:	fc 91       	ld	r31, X
    4d94:	15 97       	sbiw	r26, 0x05	; 5
    4d96:	93 81       	ldd	r25, Z+3	; 0x03
    4d98:	82 81       	ldd	r24, Z+2	; 0x02
    4d9a:	25 81       	ldd	r18, Z+5	; 0x05
    4d9c:	98 1b       	sub	r25, r24
    4d9e:	92 23       	and	r25, r18
    4da0:	84 81       	ldd	r24, Z+4	; 0x04
    4da2:	98 17       	cp	r25, r24
    4da4:	61 f0       	breq	.+24     	; 0x4dbe <__vector_36+0x6a>
    4da6:	83 81       	ldd	r24, Z+3	; 0x03
    4da8:	26 95       	lsr	r18
    4daa:	28 23       	and	r18, r24
    4dac:	c0 81       	ld	r28, Z
    4dae:	d1 81       	ldd	r29, Z+1	; 0x01
    4db0:	c2 0f       	add	r28, r18
    4db2:	d1 1d       	adc	r29, r1
    4db4:	68 83       	st	Y, r22
    4db6:	8f 5f       	subi	r24, 0xFF	; 255
    4db8:	95 81       	ldd	r25, Z+5	; 0x05
    4dba:	89 23       	and	r24, r25
    4dbc:	83 83       	std	Z+3, r24	; 0x03
    4dbe:	16 96       	adiw	r26, 0x06	; 6
    4dc0:	ed 91       	ld	r30, X+
    4dc2:	fc 91       	ld	r31, X
    4dc4:	17 97       	sbiw	r26, 0x07	; 7
    4dc6:	30 97       	sbiw	r30, 0x00	; 0
    4dc8:	11 f0       	breq	.+4      	; 0x4dce <__vector_36+0x7a>
    4dca:	cd 01       	movw	r24, r26
    4dcc:	19 95       	eicall
    4dce:	ff 91       	pop	r31
    4dd0:	ef 91       	pop	r30
    4dd2:	df 91       	pop	r29
    4dd4:	cf 91       	pop	r28
    4dd6:	bf 91       	pop	r27
    4dd8:	af 91       	pop	r26
    4dda:	9f 91       	pop	r25
    4ddc:	8f 91       	pop	r24
    4dde:	7f 91       	pop	r23
    4de0:	6f 91       	pop	r22
    4de2:	5f 91       	pop	r21
    4de4:	4f 91       	pop	r20
    4de6:	3f 91       	pop	r19
    4de8:	2f 91       	pop	r18
    4dea:	0f 90       	pop	r0
    4dec:	0b be       	out	0x3b, r0	; 59
    4dee:	0f 90       	pop	r0
    4df0:	0f be       	out	0x3f, r0	; 63
    4df2:	0f 90       	pop	r0
    4df4:	1f 90       	pop	r1
    4df6:	18 95       	reti

00004df8 <__vector_37>:
    4df8:	1f 92       	push	r1
    4dfa:	0f 92       	push	r0
    4dfc:	0f b6       	in	r0, 0x3f	; 63
    4dfe:	0f 92       	push	r0
    4e00:	11 24       	eor	r1, r1
    4e02:	0b b6       	in	r0, 0x3b	; 59
    4e04:	0f 92       	push	r0
    4e06:	2f 93       	push	r18
    4e08:	8f 93       	push	r24
    4e0a:	9f 93       	push	r25
    4e0c:	af 93       	push	r26
    4e0e:	bf 93       	push	r27
    4e10:	ef 93       	push	r30
    4e12:	ff 93       	push	r31
    4e14:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <_ser_handle+0x2>
    4e18:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <_ser_handle+0x3>
    4e1c:	30 97       	sbiw	r30, 0x00	; 0
    4e1e:	b9 f0       	breq	.+46     	; 0x4e4e <__vector_37+0x56>
    4e20:	02 80       	ldd	r0, Z+2	; 0x02
    4e22:	f3 81       	ldd	r31, Z+3	; 0x03
    4e24:	e0 2d       	mov	r30, r0
    4e26:	93 81       	ldd	r25, Z+3	; 0x03
    4e28:	82 81       	ldd	r24, Z+2	; 0x02
    4e2a:	98 17       	cp	r25, r24
    4e2c:	b1 f0       	breq	.+44     	; 0x4e5a <__vector_37+0x62>
    4e2e:	92 81       	ldd	r25, Z+2	; 0x02
    4e30:	85 81       	ldd	r24, Z+5	; 0x05
    4e32:	28 2f       	mov	r18, r24
    4e34:	26 95       	lsr	r18
    4e36:	29 23       	and	r18, r25
    4e38:	a0 81       	ld	r26, Z
    4e3a:	b1 81       	ldd	r27, Z+1	; 0x01
    4e3c:	a2 0f       	add	r26, r18
    4e3e:	b1 1d       	adc	r27, r1
    4e40:	2c 91       	ld	r18, X
    4e42:	9f 5f       	subi	r25, 0xFF	; 255
    4e44:	89 23       	and	r24, r25
    4e46:	82 83       	std	Z+2, r24	; 0x02
    4e48:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4e4c:	0b c0       	rjmp	.+22     	; 0x4e64 <__vector_37+0x6c>
    4e4e:	e9 ec       	ldi	r30, 0xC9	; 201
    4e50:	f0 e0       	ldi	r31, 0x00	; 0
    4e52:	80 81       	ld	r24, Z
    4e54:	8f 7d       	andi	r24, 0xDF	; 223
    4e56:	80 83       	st	Z, r24
    4e58:	05 c0       	rjmp	.+10     	; 0x4e64 <__vector_37+0x6c>
    4e5a:	e9 ec       	ldi	r30, 0xC9	; 201
    4e5c:	f0 e0       	ldi	r31, 0x00	; 0
    4e5e:	80 81       	ld	r24, Z
    4e60:	8f 7d       	andi	r24, 0xDF	; 223
    4e62:	80 83       	st	Z, r24
    4e64:	ff 91       	pop	r31
    4e66:	ef 91       	pop	r30
    4e68:	bf 91       	pop	r27
    4e6a:	af 91       	pop	r26
    4e6c:	9f 91       	pop	r25
    4e6e:	8f 91       	pop	r24
    4e70:	2f 91       	pop	r18
    4e72:	0f 90       	pop	r0
    4e74:	0b be       	out	0x3b, r0	; 59
    4e76:	0f 90       	pop	r0
    4e78:	0f be       	out	0x3f, r0	; 63
    4e7a:	0f 90       	pop	r0
    4e7c:	1f 90       	pop	r1
    4e7e:	18 95       	reti

00004e80 <__vector_51>:
    4e80:	1f 92       	push	r1
    4e82:	0f 92       	push	r0
    4e84:	0f b6       	in	r0, 0x3f	; 63
    4e86:	0f 92       	push	r0
    4e88:	11 24       	eor	r1, r1
    4e8a:	0b b6       	in	r0, 0x3b	; 59
    4e8c:	0f 92       	push	r0
    4e8e:	2f 93       	push	r18
    4e90:	3f 93       	push	r19
    4e92:	4f 93       	push	r20
    4e94:	5f 93       	push	r21
    4e96:	6f 93       	push	r22
    4e98:	7f 93       	push	r23
    4e9a:	8f 93       	push	r24
    4e9c:	9f 93       	push	r25
    4e9e:	af 93       	push	r26
    4ea0:	bf 93       	push	r27
    4ea2:	cf 93       	push	r28
    4ea4:	df 93       	push	r29
    4ea6:	ef 93       	push	r30
    4ea8:	ff 93       	push	r31
    4eaa:	a0 91 5a 19 	lds	r26, 0x195A	; 0x80195a <_ser_handle+0x4>
    4eae:	b0 91 5b 19 	lds	r27, 0x195B	; 0x80195b <_ser_handle+0x5>
    4eb2:	10 97       	sbiw	r26, 0x00	; 0
    4eb4:	11 f1       	breq	.+68     	; 0x4efa <__vector_51+0x7a>
    4eb6:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4eba:	14 96       	adiw	r26, 0x04	; 4
    4ebc:	ed 91       	ld	r30, X+
    4ebe:	fc 91       	ld	r31, X
    4ec0:	15 97       	sbiw	r26, 0x05	; 5
    4ec2:	93 81       	ldd	r25, Z+3	; 0x03
    4ec4:	82 81       	ldd	r24, Z+2	; 0x02
    4ec6:	25 81       	ldd	r18, Z+5	; 0x05
    4ec8:	98 1b       	sub	r25, r24
    4eca:	92 23       	and	r25, r18
    4ecc:	84 81       	ldd	r24, Z+4	; 0x04
    4ece:	98 17       	cp	r25, r24
    4ed0:	61 f0       	breq	.+24     	; 0x4eea <__vector_51+0x6a>
    4ed2:	83 81       	ldd	r24, Z+3	; 0x03
    4ed4:	26 95       	lsr	r18
    4ed6:	28 23       	and	r18, r24
    4ed8:	c0 81       	ld	r28, Z
    4eda:	d1 81       	ldd	r29, Z+1	; 0x01
    4edc:	c2 0f       	add	r28, r18
    4ede:	d1 1d       	adc	r29, r1
    4ee0:	68 83       	st	Y, r22
    4ee2:	8f 5f       	subi	r24, 0xFF	; 255
    4ee4:	95 81       	ldd	r25, Z+5	; 0x05
    4ee6:	89 23       	and	r24, r25
    4ee8:	83 83       	std	Z+3, r24	; 0x03
    4eea:	16 96       	adiw	r26, 0x06	; 6
    4eec:	ed 91       	ld	r30, X+
    4eee:	fc 91       	ld	r31, X
    4ef0:	17 97       	sbiw	r26, 0x07	; 7
    4ef2:	30 97       	sbiw	r30, 0x00	; 0
    4ef4:	11 f0       	breq	.+4      	; 0x4efa <__vector_51+0x7a>
    4ef6:	cd 01       	movw	r24, r26
    4ef8:	19 95       	eicall
    4efa:	ff 91       	pop	r31
    4efc:	ef 91       	pop	r30
    4efe:	df 91       	pop	r29
    4f00:	cf 91       	pop	r28
    4f02:	bf 91       	pop	r27
    4f04:	af 91       	pop	r26
    4f06:	9f 91       	pop	r25
    4f08:	8f 91       	pop	r24
    4f0a:	7f 91       	pop	r23
    4f0c:	6f 91       	pop	r22
    4f0e:	5f 91       	pop	r21
    4f10:	4f 91       	pop	r20
    4f12:	3f 91       	pop	r19
    4f14:	2f 91       	pop	r18
    4f16:	0f 90       	pop	r0
    4f18:	0b be       	out	0x3b, r0	; 59
    4f1a:	0f 90       	pop	r0
    4f1c:	0f be       	out	0x3f, r0	; 63
    4f1e:	0f 90       	pop	r0
    4f20:	1f 90       	pop	r1
    4f22:	18 95       	reti

00004f24 <__vector_52>:
    4f24:	1f 92       	push	r1
    4f26:	0f 92       	push	r0
    4f28:	0f b6       	in	r0, 0x3f	; 63
    4f2a:	0f 92       	push	r0
    4f2c:	11 24       	eor	r1, r1
    4f2e:	0b b6       	in	r0, 0x3b	; 59
    4f30:	0f 92       	push	r0
    4f32:	2f 93       	push	r18
    4f34:	8f 93       	push	r24
    4f36:	9f 93       	push	r25
    4f38:	af 93       	push	r26
    4f3a:	bf 93       	push	r27
    4f3c:	ef 93       	push	r30
    4f3e:	ff 93       	push	r31
    4f40:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <_ser_handle+0x4>
    4f44:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <_ser_handle+0x5>
    4f48:	30 97       	sbiw	r30, 0x00	; 0
    4f4a:	b9 f0       	breq	.+46     	; 0x4f7a <__vector_52+0x56>
    4f4c:	02 80       	ldd	r0, Z+2	; 0x02
    4f4e:	f3 81       	ldd	r31, Z+3	; 0x03
    4f50:	e0 2d       	mov	r30, r0
    4f52:	93 81       	ldd	r25, Z+3	; 0x03
    4f54:	82 81       	ldd	r24, Z+2	; 0x02
    4f56:	98 17       	cp	r25, r24
    4f58:	b1 f0       	breq	.+44     	; 0x4f86 <__vector_52+0x62>
    4f5a:	92 81       	ldd	r25, Z+2	; 0x02
    4f5c:	85 81       	ldd	r24, Z+5	; 0x05
    4f5e:	28 2f       	mov	r18, r24
    4f60:	26 95       	lsr	r18
    4f62:	29 23       	and	r18, r25
    4f64:	a0 81       	ld	r26, Z
    4f66:	b1 81       	ldd	r27, Z+1	; 0x01
    4f68:	a2 0f       	add	r26, r18
    4f6a:	b1 1d       	adc	r27, r1
    4f6c:	2c 91       	ld	r18, X
    4f6e:	9f 5f       	subi	r25, 0xFF	; 255
    4f70:	89 23       	and	r24, r25
    4f72:	82 83       	std	Z+2, r24	; 0x02
    4f74:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4f78:	0b c0       	rjmp	.+22     	; 0x4f90 <__vector_52+0x6c>
    4f7a:	e1 ed       	ldi	r30, 0xD1	; 209
    4f7c:	f0 e0       	ldi	r31, 0x00	; 0
    4f7e:	80 81       	ld	r24, Z
    4f80:	8f 7d       	andi	r24, 0xDF	; 223
    4f82:	80 83       	st	Z, r24
    4f84:	05 c0       	rjmp	.+10     	; 0x4f90 <__vector_52+0x6c>
    4f86:	e1 ed       	ldi	r30, 0xD1	; 209
    4f88:	f0 e0       	ldi	r31, 0x00	; 0
    4f8a:	80 81       	ld	r24, Z
    4f8c:	8f 7d       	andi	r24, 0xDF	; 223
    4f8e:	80 83       	st	Z, r24
    4f90:	ff 91       	pop	r31
    4f92:	ef 91       	pop	r30
    4f94:	bf 91       	pop	r27
    4f96:	af 91       	pop	r26
    4f98:	9f 91       	pop	r25
    4f9a:	8f 91       	pop	r24
    4f9c:	2f 91       	pop	r18
    4f9e:	0f 90       	pop	r0
    4fa0:	0b be       	out	0x3b, r0	; 59
    4fa2:	0f 90       	pop	r0
    4fa4:	0f be       	out	0x3f, r0	; 63
    4fa6:	0f 90       	pop	r0
    4fa8:	1f 90       	pop	r1
    4faa:	18 95       	reti

00004fac <__vector_54>:
    4fac:	1f 92       	push	r1
    4fae:	0f 92       	push	r0
    4fb0:	0f b6       	in	r0, 0x3f	; 63
    4fb2:	0f 92       	push	r0
    4fb4:	11 24       	eor	r1, r1
    4fb6:	0b b6       	in	r0, 0x3b	; 59
    4fb8:	0f 92       	push	r0
    4fba:	2f 93       	push	r18
    4fbc:	3f 93       	push	r19
    4fbe:	4f 93       	push	r20
    4fc0:	5f 93       	push	r21
    4fc2:	6f 93       	push	r22
    4fc4:	7f 93       	push	r23
    4fc6:	8f 93       	push	r24
    4fc8:	9f 93       	push	r25
    4fca:	af 93       	push	r26
    4fcc:	bf 93       	push	r27
    4fce:	cf 93       	push	r28
    4fd0:	df 93       	push	r29
    4fd2:	ef 93       	push	r30
    4fd4:	ff 93       	push	r31
    4fd6:	a0 91 5c 19 	lds	r26, 0x195C	; 0x80195c <_ser_handle+0x6>
    4fda:	b0 91 5d 19 	lds	r27, 0x195D	; 0x80195d <_ser_handle+0x7>
    4fde:	10 97       	sbiw	r26, 0x00	; 0
    4fe0:	11 f1       	breq	.+68     	; 0x5026 <__vector_54+0x7a>
    4fe2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4fe6:	14 96       	adiw	r26, 0x04	; 4
    4fe8:	ed 91       	ld	r30, X+
    4fea:	fc 91       	ld	r31, X
    4fec:	15 97       	sbiw	r26, 0x05	; 5
    4fee:	93 81       	ldd	r25, Z+3	; 0x03
    4ff0:	82 81       	ldd	r24, Z+2	; 0x02
    4ff2:	25 81       	ldd	r18, Z+5	; 0x05
    4ff4:	98 1b       	sub	r25, r24
    4ff6:	92 23       	and	r25, r18
    4ff8:	84 81       	ldd	r24, Z+4	; 0x04
    4ffa:	98 17       	cp	r25, r24
    4ffc:	61 f0       	breq	.+24     	; 0x5016 <__vector_54+0x6a>
    4ffe:	83 81       	ldd	r24, Z+3	; 0x03
    5000:	26 95       	lsr	r18
    5002:	28 23       	and	r18, r24
    5004:	c0 81       	ld	r28, Z
    5006:	d1 81       	ldd	r29, Z+1	; 0x01
    5008:	c2 0f       	add	r28, r18
    500a:	d1 1d       	adc	r29, r1
    500c:	68 83       	st	Y, r22
    500e:	8f 5f       	subi	r24, 0xFF	; 255
    5010:	95 81       	ldd	r25, Z+5	; 0x05
    5012:	89 23       	and	r24, r25
    5014:	83 83       	std	Z+3, r24	; 0x03
    5016:	16 96       	adiw	r26, 0x06	; 6
    5018:	ed 91       	ld	r30, X+
    501a:	fc 91       	ld	r31, X
    501c:	17 97       	sbiw	r26, 0x07	; 7
    501e:	30 97       	sbiw	r30, 0x00	; 0
    5020:	11 f0       	breq	.+4      	; 0x5026 <__vector_54+0x7a>
    5022:	cd 01       	movw	r24, r26
    5024:	19 95       	eicall
    5026:	ff 91       	pop	r31
    5028:	ef 91       	pop	r30
    502a:	df 91       	pop	r29
    502c:	cf 91       	pop	r28
    502e:	bf 91       	pop	r27
    5030:	af 91       	pop	r26
    5032:	9f 91       	pop	r25
    5034:	8f 91       	pop	r24
    5036:	7f 91       	pop	r23
    5038:	6f 91       	pop	r22
    503a:	5f 91       	pop	r21
    503c:	4f 91       	pop	r20
    503e:	3f 91       	pop	r19
    5040:	2f 91       	pop	r18
    5042:	0f 90       	pop	r0
    5044:	0b be       	out	0x3b, r0	; 59
    5046:	0f 90       	pop	r0
    5048:	0f be       	out	0x3f, r0	; 63
    504a:	0f 90       	pop	r0
    504c:	1f 90       	pop	r1
    504e:	18 95       	reti

00005050 <__vector_55>:
    5050:	1f 92       	push	r1
    5052:	0f 92       	push	r0
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	0f 92       	push	r0
    5058:	11 24       	eor	r1, r1
    505a:	0b b6       	in	r0, 0x3b	; 59
    505c:	0f 92       	push	r0
    505e:	2f 93       	push	r18
    5060:	8f 93       	push	r24
    5062:	9f 93       	push	r25
    5064:	af 93       	push	r26
    5066:	bf 93       	push	r27
    5068:	ef 93       	push	r30
    506a:	ff 93       	push	r31
    506c:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <_ser_handle+0x6>
    5070:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <_ser_handle+0x7>
    5074:	30 97       	sbiw	r30, 0x00	; 0
    5076:	b9 f0       	breq	.+46     	; 0x50a6 <__vector_55+0x56>
    5078:	02 80       	ldd	r0, Z+2	; 0x02
    507a:	f3 81       	ldd	r31, Z+3	; 0x03
    507c:	e0 2d       	mov	r30, r0
    507e:	93 81       	ldd	r25, Z+3	; 0x03
    5080:	82 81       	ldd	r24, Z+2	; 0x02
    5082:	98 17       	cp	r25, r24
    5084:	b1 f0       	breq	.+44     	; 0x50b2 <__vector_55+0x62>
    5086:	92 81       	ldd	r25, Z+2	; 0x02
    5088:	85 81       	ldd	r24, Z+5	; 0x05
    508a:	28 2f       	mov	r18, r24
    508c:	26 95       	lsr	r18
    508e:	29 23       	and	r18, r25
    5090:	a0 81       	ld	r26, Z
    5092:	b1 81       	ldd	r27, Z+1	; 0x01
    5094:	a2 0f       	add	r26, r18
    5096:	b1 1d       	adc	r27, r1
    5098:	2c 91       	ld	r18, X
    509a:	9f 5f       	subi	r25, 0xFF	; 255
    509c:	89 23       	and	r24, r25
    509e:	82 83       	std	Z+2, r24	; 0x02
    50a0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    50a4:	0b c0       	rjmp	.+22     	; 0x50bc <__vector_55+0x6c>
    50a6:	e1 e3       	ldi	r30, 0x31	; 49
    50a8:	f1 e0       	ldi	r31, 0x01	; 1
    50aa:	80 81       	ld	r24, Z
    50ac:	8f 7d       	andi	r24, 0xDF	; 223
    50ae:	80 83       	st	Z, r24
    50b0:	05 c0       	rjmp	.+10     	; 0x50bc <__vector_55+0x6c>
    50b2:	e1 e3       	ldi	r30, 0x31	; 49
    50b4:	f1 e0       	ldi	r31, 0x01	; 1
    50b6:	80 81       	ld	r24, Z
    50b8:	8f 7d       	andi	r24, 0xDF	; 223
    50ba:	80 83       	st	Z, r24
    50bc:	ff 91       	pop	r31
    50be:	ef 91       	pop	r30
    50c0:	bf 91       	pop	r27
    50c2:	af 91       	pop	r26
    50c4:	9f 91       	pop	r25
    50c6:	8f 91       	pop	r24
    50c8:	2f 91       	pop	r18
    50ca:	0f 90       	pop	r0
    50cc:	0b be       	out	0x3b, r0	; 59
    50ce:	0f 90       	pop	r0
    50d0:	0f be       	out	0x3f, r0	; 63
    50d2:	0f 90       	pop	r0
    50d4:	1f 90       	pop	r1
    50d6:	18 95       	reti

000050d8 <usart_getchar>:
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	1f 92       	push	r1
    50de:	cd b7       	in	r28, 0x3d	; 61
    50e0:	de b7       	in	r29, 0x3e	; 62
    50e2:	be 01       	movw	r22, r28
    50e4:	6f 5f       	subi	r22, 0xFF	; 255
    50e6:	7f 4f       	sbci	r23, 0xFF	; 255
    50e8:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_com_serial_instance>
    50ec:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <_com_serial_instance+0x1>
    50f0:	7b dd       	rcall	.-1290   	; 0x4be8 <serial_getByte>
    50f2:	81 11       	cpse	r24, r1
    50f4:	f6 cf       	rjmp	.-20     	; 0x50e2 <usart_getchar+0xa>
    50f6:	89 81       	ldd	r24, Y+1	; 0x01
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	0f 90       	pop	r0
    50fc:	df 91       	pop	r29
    50fe:	cf 91       	pop	r28
    5100:	08 95       	ret

00005102 <usart_putchar>:
    5102:	68 2f       	mov	r22, r24
    5104:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_com_serial_instance>
    5108:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <_com_serial_instance+0x1>
    510c:	ed dc       	rcall	.-1574   	; 0x4ae8 <serial_sendByte>
    510e:	80 e0       	ldi	r24, 0x00	; 0
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	08 95       	ret

00005114 <stdio_initialise>:
    5114:	8f 92       	push	r8
    5116:	9f 92       	push	r9
    5118:	af 92       	push	r10
    511a:	cf 92       	push	r12
    511c:	ef 92       	push	r14
    511e:	0f 93       	push	r16
    5120:	81 2c       	mov	r8, r1
    5122:	91 2c       	mov	r9, r1
    5124:	68 94       	set
    5126:	aa 24       	eor	r10, r10
    5128:	a7 f8       	bld	r10, 7
    512a:	68 94       	set
    512c:	cc 24       	eor	r12, r12
    512e:	c7 f8       	bld	r12, 7
    5130:	e1 2c       	mov	r14, r1
    5132:	00 e0       	ldi	r16, 0x00	; 0
    5134:	23 e0       	ldi	r18, 0x03	; 3
    5136:	40 e0       	ldi	r20, 0x00	; 0
    5138:	51 ee       	ldi	r21, 0xE1	; 225
    513a:	60 e0       	ldi	r22, 0x00	; 0
    513c:	70 e0       	ldi	r23, 0x00	; 0
    513e:	32 dc       	rcall	.-1948   	; 0x49a4 <serial_create>
    5140:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <_com_serial_instance+0x1>
    5144:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_com_serial_instance>
    5148:	e7 e0       	ldi	r30, 0x07	; 7
    514a:	fa e1       	ldi	r31, 0x1A	; 26
    514c:	83 e1       	ldi	r24, 0x13	; 19
    514e:	92 e0       	ldi	r25, 0x02	; 2
    5150:	91 83       	std	Z+1, r25	; 0x01
    5152:	80 83       	st	Z, r24
    5154:	93 83       	std	Z+3, r25	; 0x03
    5156:	82 83       	std	Z+2, r24	; 0x02
    5158:	0f 91       	pop	r16
    515a:	ef 90       	pop	r14
    515c:	cf 90       	pop	r12
    515e:	af 90       	pop	r10
    5160:	9f 90       	pop	r9
    5162:	8f 90       	pop	r8
    5164:	08 95       	ret

00005166 <_turn_off>:
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	fc 01       	movw	r30, r24
    516a:	ee 0f       	add	r30, r30
    516c:	ff 1f       	adc	r31, r31
    516e:	e8 0f       	add	r30, r24
    5170:	f9 1f       	adc	r31, r25
    5172:	ee 0f       	add	r30, r30
    5174:	ff 1f       	adc	r31, r31
    5176:	e0 5a       	subi	r30, 0xA0	; 160
    5178:	f6 4e       	sbci	r31, 0xE6	; 230
    517a:	23 81       	ldd	r18, Z+3	; 0x03
    517c:	21 11       	cpse	r18, r1
    517e:	1f c0       	rjmp	.+62     	; 0x51be <_turn_off+0x58>
    5180:	9c 01       	movw	r18, r24
    5182:	22 0f       	add	r18, r18
    5184:	33 1f       	adc	r19, r19
    5186:	f9 01       	movw	r30, r18
    5188:	e8 0f       	add	r30, r24
    518a:	f9 1f       	adc	r31, r25
    518c:	ee 0f       	add	r30, r30
    518e:	ff 1f       	adc	r31, r31
    5190:	e0 5a       	subi	r30, 0xA0	; 160
    5192:	f6 4e       	sbci	r31, 0xE6	; 230
    5194:	a0 81       	ld	r26, Z
    5196:	b1 81       	ldd	r27, Z+1	; 0x01
    5198:	4c 91       	ld	r20, X
    519a:	f9 01       	movw	r30, r18
    519c:	e8 0f       	add	r30, r24
    519e:	f9 1f       	adc	r31, r25
    51a0:	ee 0f       	add	r30, r30
    51a2:	ff 1f       	adc	r31, r31
    51a4:	e0 5a       	subi	r30, 0xA0	; 160
    51a6:	f6 4e       	sbci	r31, 0xE6	; 230
    51a8:	81 e0       	ldi	r24, 0x01	; 1
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	02 80       	ldd	r0, Z+2	; 0x02
    51ae:	02 c0       	rjmp	.+4      	; 0x51b4 <_turn_off+0x4e>
    51b0:	88 0f       	add	r24, r24
    51b2:	99 1f       	adc	r25, r25
    51b4:	0a 94       	dec	r0
    51b6:	e2 f7       	brpl	.-8      	; 0x51b0 <_turn_off+0x4a>
    51b8:	84 2b       	or	r24, r20
    51ba:	8c 93       	st	X, r24
    51bc:	08 95       	ret
    51be:	fc 01       	movw	r30, r24
    51c0:	ee 0f       	add	r30, r30
    51c2:	ff 1f       	adc	r31, r31
    51c4:	df 01       	movw	r26, r30
    51c6:	a8 0f       	add	r26, r24
    51c8:	b9 1f       	adc	r27, r25
    51ca:	aa 0f       	add	r26, r26
    51cc:	bb 1f       	adc	r27, r27
    51ce:	a0 5a       	subi	r26, 0xA0	; 160
    51d0:	b6 4e       	sbci	r27, 0xE6	; 230
    51d2:	0d 90       	ld	r0, X+
    51d4:	bc 91       	ld	r27, X
    51d6:	a0 2d       	mov	r26, r0
    51d8:	2c 91       	ld	r18, X
    51da:	e8 0f       	add	r30, r24
    51dc:	f9 1f       	adc	r31, r25
    51de:	ee 0f       	add	r30, r30
    51e0:	ff 1f       	adc	r31, r31
    51e2:	e0 5a       	subi	r30, 0xA0	; 160
    51e4:	f6 4e       	sbci	r31, 0xE6	; 230
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	90 e0       	ldi	r25, 0x00	; 0
    51ea:	02 80       	ldd	r0, Z+2	; 0x02
    51ec:	02 c0       	rjmp	.+4      	; 0x51f2 <_turn_off+0x8c>
    51ee:	88 0f       	add	r24, r24
    51f0:	99 1f       	adc	r25, r25
    51f2:	0a 94       	dec	r0
    51f4:	e2 f7       	brpl	.-8      	; 0x51ee <_turn_off+0x88>
    51f6:	80 95       	com	r24
    51f8:	82 23       	and	r24, r18
    51fa:	8c 93       	st	X, r24
    51fc:	08 95       	ret

000051fe <_turn_on>:
    51fe:	90 e0       	ldi	r25, 0x00	; 0
    5200:	fc 01       	movw	r30, r24
    5202:	ee 0f       	add	r30, r30
    5204:	ff 1f       	adc	r31, r31
    5206:	e8 0f       	add	r30, r24
    5208:	f9 1f       	adc	r31, r25
    520a:	ee 0f       	add	r30, r30
    520c:	ff 1f       	adc	r31, r31
    520e:	e0 5a       	subi	r30, 0xA0	; 160
    5210:	f6 4e       	sbci	r31, 0xE6	; 230
    5212:	23 81       	ldd	r18, Z+3	; 0x03
    5214:	21 11       	cpse	r18, r1
    5216:	20 c0       	rjmp	.+64     	; 0x5258 <_turn_on+0x5a>
    5218:	9c 01       	movw	r18, r24
    521a:	22 0f       	add	r18, r18
    521c:	33 1f       	adc	r19, r19
    521e:	f9 01       	movw	r30, r18
    5220:	e8 0f       	add	r30, r24
    5222:	f9 1f       	adc	r31, r25
    5224:	ee 0f       	add	r30, r30
    5226:	ff 1f       	adc	r31, r31
    5228:	e0 5a       	subi	r30, 0xA0	; 160
    522a:	f6 4e       	sbci	r31, 0xE6	; 230
    522c:	a0 81       	ld	r26, Z
    522e:	b1 81       	ldd	r27, Z+1	; 0x01
    5230:	4c 91       	ld	r20, X
    5232:	f9 01       	movw	r30, r18
    5234:	e8 0f       	add	r30, r24
    5236:	f9 1f       	adc	r31, r25
    5238:	ee 0f       	add	r30, r30
    523a:	ff 1f       	adc	r31, r31
    523c:	e0 5a       	subi	r30, 0xA0	; 160
    523e:	f6 4e       	sbci	r31, 0xE6	; 230
    5240:	81 e0       	ldi	r24, 0x01	; 1
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	02 80       	ldd	r0, Z+2	; 0x02
    5246:	02 c0       	rjmp	.+4      	; 0x524c <_turn_on+0x4e>
    5248:	88 0f       	add	r24, r24
    524a:	99 1f       	adc	r25, r25
    524c:	0a 94       	dec	r0
    524e:	e2 f7       	brpl	.-8      	; 0x5248 <_turn_on+0x4a>
    5250:	80 95       	com	r24
    5252:	84 23       	and	r24, r20
    5254:	8c 93       	st	X, r24
    5256:	08 95       	ret
    5258:	fc 01       	movw	r30, r24
    525a:	ee 0f       	add	r30, r30
    525c:	ff 1f       	adc	r31, r31
    525e:	df 01       	movw	r26, r30
    5260:	a8 0f       	add	r26, r24
    5262:	b9 1f       	adc	r27, r25
    5264:	aa 0f       	add	r26, r26
    5266:	bb 1f       	adc	r27, r27
    5268:	a0 5a       	subi	r26, 0xA0	; 160
    526a:	b6 4e       	sbci	r27, 0xE6	; 230
    526c:	0d 90       	ld	r0, X+
    526e:	bc 91       	ld	r27, X
    5270:	a0 2d       	mov	r26, r0
    5272:	2c 91       	ld	r18, X
    5274:	e8 0f       	add	r30, r24
    5276:	f9 1f       	adc	r31, r25
    5278:	ee 0f       	add	r30, r30
    527a:	ff 1f       	adc	r31, r31
    527c:	e0 5a       	subi	r30, 0xA0	; 160
    527e:	f6 4e       	sbci	r31, 0xE6	; 230
    5280:	81 e0       	ldi	r24, 0x01	; 1
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	02 80       	ldd	r0, Z+2	; 0x02
    5286:	02 c0       	rjmp	.+4      	; 0x528c <_turn_on+0x8e>
    5288:	88 0f       	add	r24, r24
    528a:	99 1f       	adc	r25, r25
    528c:	0a 94       	dec	r0
    528e:	e2 f7       	brpl	.-8      	; 0x5288 <_turn_on+0x8a>
    5290:	82 2b       	or	r24, r18
    5292:	8c 93       	st	X, r24
    5294:	08 95       	ret

00005296 <_hal_led_task>:
    5296:	cc 24       	eor	r12, r12
    5298:	c3 94       	inc	r12
    529a:	d1 2c       	mov	r13, r1
    529c:	68 94       	set
    529e:	bb 24       	eor	r11, r11
    52a0:	b2 f8       	bld	r11, 2
    52a2:	c0 e6       	ldi	r28, 0x60	; 96
    52a4:	d9 e1       	ldi	r29, 0x19	; 25
    52a6:	10 e0       	ldi	r17, 0x00	; 0
    52a8:	8c 81       	ldd	r24, Y+4	; 0x04
    52aa:	81 30       	cpi	r24, 0x01	; 1
    52ac:	81 f0       	breq	.+32     	; 0x52ce <_hal_led_task+0x38>
    52ae:	18 f1       	brcs	.+70     	; 0x52f6 <_hal_led_task+0x60>
    52b0:	82 30       	cpi	r24, 0x02	; 2
    52b2:	61 f5       	brne	.+88     	; 0x530c <_hal_led_task+0x76>
    52b4:	e8 81       	ld	r30, Y
    52b6:	f9 81       	ldd	r31, Y+1	; 0x01
    52b8:	20 81       	ld	r18, Z
    52ba:	c6 01       	movw	r24, r12
    52bc:	0a 80       	ldd	r0, Y+2	; 0x02
    52be:	02 c0       	rjmp	.+4      	; 0x52c4 <_hal_led_task+0x2e>
    52c0:	88 0f       	add	r24, r24
    52c2:	99 1f       	adc	r25, r25
    52c4:	0a 94       	dec	r0
    52c6:	e2 f7       	brpl	.-8      	; 0x52c0 <_hal_led_task+0x2a>
    52c8:	82 27       	eor	r24, r18
    52ca:	80 83       	st	Z, r24
    52cc:	1f c0       	rjmp	.+62     	; 0x530c <_hal_led_task+0x76>
    52ce:	8d 81       	ldd	r24, Y+5	; 0x05
    52d0:	8f 5f       	subi	r24, 0xFF	; 255
    52d2:	8a 30       	cpi	r24, 0x0A	; 10
    52d4:	10 f4       	brcc	.+4      	; 0x52da <_hal_led_task+0x44>
    52d6:	8d 83       	std	Y+5, r24	; 0x05
    52d8:	19 c0       	rjmp	.+50     	; 0x530c <_hal_led_task+0x76>
    52da:	1d 82       	std	Y+5, r1	; 0x05
    52dc:	e8 81       	ld	r30, Y
    52de:	f9 81       	ldd	r31, Y+1	; 0x01
    52e0:	20 81       	ld	r18, Z
    52e2:	c6 01       	movw	r24, r12
    52e4:	0a 80       	ldd	r0, Y+2	; 0x02
    52e6:	02 c0       	rjmp	.+4      	; 0x52ec <_hal_led_task+0x56>
    52e8:	88 0f       	add	r24, r24
    52ea:	99 1f       	adc	r25, r25
    52ec:	0a 94       	dec	r0
    52ee:	e2 f7       	brpl	.-8      	; 0x52e8 <_hal_led_task+0x52>
    52f0:	82 27       	eor	r24, r18
    52f2:	80 83       	st	Z, r24
    52f4:	0b c0       	rjmp	.+22     	; 0x530c <_hal_led_task+0x76>
    52f6:	0d 81       	ldd	r16, Y+5	; 0x05
    52f8:	00 23       	and	r16, r16
    52fa:	29 f0       	breq	.+10     	; 0x5306 <_hal_led_task+0x70>
    52fc:	81 2f       	mov	r24, r17
    52fe:	7f df       	rcall	.-258    	; 0x51fe <_turn_on>
    5300:	01 50       	subi	r16, 0x01	; 1
    5302:	0d 83       	std	Y+5, r16	; 0x05
    5304:	03 c0       	rjmp	.+6      	; 0x530c <_hal_led_task+0x76>
    5306:	bc 82       	std	Y+4, r11	; 0x04
    5308:	81 2f       	mov	r24, r17
    530a:	2d df       	rcall	.-422    	; 0x5166 <_turn_off>
    530c:	1f 5f       	subi	r17, 0xFF	; 255
    530e:	26 96       	adiw	r28, 0x06	; 6
    5310:	14 30       	cpi	r17, 0x04	; 4
    5312:	51 f6       	brne	.-108    	; 0x52a8 <_hal_led_task+0x12>
    5314:	65 e0       	ldi	r22, 0x05	; 5
    5316:	70 e0       	ldi	r23, 0x00	; 0
    5318:	80 e0       	ldi	r24, 0x00	; 0
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <vTaskDelay>
    5320:	c0 cf       	rjmp	.-128    	; 0x52a2 <_hal_led_task+0xc>

00005322 <status_leds_initialise>:
    5322:	ef 92       	push	r14
    5324:	ff 92       	push	r15
    5326:	0f 93       	push	r16
    5328:	1f 93       	push	r17
    532a:	cf 93       	push	r28
    532c:	df 93       	push	r29
    532e:	08 2f       	mov	r16, r24
    5330:	80 e4       	ldi	r24, 0x40	; 64
    5332:	87 b9       	out	0x07, r24	; 7
    5334:	c0 e6       	ldi	r28, 0x60	; 96
    5336:	d9 e1       	ldi	r29, 0x19	; 25
    5338:	0f 2e       	mov	r0, r31
    533a:	f8 e2       	ldi	r31, 0x28	; 40
    533c:	ef 2e       	mov	r14, r31
    533e:	f1 2c       	mov	r15, r1
    5340:	f0 2d       	mov	r31, r0
    5342:	f9 82       	std	Y+1, r15	; 0x01
    5344:	e8 82       	st	Y, r14
    5346:	86 e0       	ldi	r24, 0x06	; 6
    5348:	8a 83       	std	Y+2, r24	; 0x02
    534a:	1b 82       	std	Y+3, r1	; 0x03
    534c:	14 e0       	ldi	r17, 0x04	; 4
    534e:	1c 83       	std	Y+4, r17	; 0x04
    5350:	80 e0       	ldi	r24, 0x00	; 0
    5352:	09 df       	rcall	.-494    	; 0x5166 <_turn_off>
    5354:	80 e8       	ldi	r24, 0x80	; 128
    5356:	87 b9       	out	0x07, r24	; 7
    5358:	ff 82       	std	Y+7, r15	; 0x07
    535a:	ee 82       	std	Y+6, r14	; 0x06
    535c:	87 e0       	ldi	r24, 0x07	; 7
    535e:	88 87       	std	Y+8, r24	; 0x08
    5360:	19 86       	std	Y+9, r1	; 0x09
    5362:	1a 87       	std	Y+10, r17	; 0x0a
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	ff de       	rcall	.-514    	; 0x5166 <_turn_off>
    5368:	80 e2       	ldi	r24, 0x20	; 32
    536a:	83 bb       	out	0x13, r24	; 19
    536c:	84 e3       	ldi	r24, 0x34	; 52
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	9d 87       	std	Y+13, r25	; 0x0d
    5372:	8c 87       	std	Y+12, r24	; 0x0c
    5374:	85 e0       	ldi	r24, 0x05	; 5
    5376:	8e 87       	std	Y+14, r24	; 0x0e
    5378:	1f 86       	std	Y+15, r1	; 0x0f
    537a:	18 8b       	std	Y+16, r17	; 0x10
    537c:	82 e0       	ldi	r24, 0x02	; 2
    537e:	f3 de       	rcall	.-538    	; 0x5166 <_turn_off>
    5380:	80 e1       	ldi	r24, 0x10	; 16
    5382:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5386:	82 e0       	ldi	r24, 0x02	; 2
    5388:	91 e0       	ldi	r25, 0x01	; 1
    538a:	9b 8b       	std	Y+19, r25	; 0x13
    538c:	8a 8b       	std	Y+18, r24	; 0x12
    538e:	1c 8b       	std	Y+20, r17	; 0x14
    5390:	1d 8a       	std	Y+21, r1	; 0x15
    5392:	1e 8b       	std	Y+22, r17	; 0x16
    5394:	83 e0       	ldi	r24, 0x03	; 3
    5396:	e7 de       	rcall	.-562    	; 0x5166 <_turn_off>
    5398:	e1 2c       	mov	r14, r1
    539a:	f1 2c       	mov	r15, r1
    539c:	20 e0       	ldi	r18, 0x00	; 0
    539e:	30 e0       	ldi	r19, 0x00	; 0
    53a0:	40 ec       	ldi	r20, 0xC0	; 192
    53a2:	50 e0       	ldi	r21, 0x00	; 0
    53a4:	6e e6       	ldi	r22, 0x6E	; 110
    53a6:	79 e0       	ldi	r23, 0x09	; 9
    53a8:	8b e4       	ldi	r24, 0x4B	; 75
    53aa:	99 e2       	ldi	r25, 0x29	; 41
    53ac:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
    53b0:	df 91       	pop	r29
    53b2:	cf 91       	pop	r28
    53b4:	1f 91       	pop	r17
    53b6:	0f 91       	pop	r16
    53b8:	ff 90       	pop	r15
    53ba:	ef 90       	pop	r14
    53bc:	08 95       	ret

000053be <status_leds_slowBlink>:
    53be:	cf 93       	push	r28
    53c0:	df 93       	push	r29
    53c2:	90 e0       	ldi	r25, 0x00	; 0
    53c4:	fc 01       	movw	r30, r24
    53c6:	ee 0f       	add	r30, r30
    53c8:	ff 1f       	adc	r31, r31
    53ca:	df 01       	movw	r26, r30
    53cc:	a8 0f       	add	r26, r24
    53ce:	b9 1f       	adc	r27, r25
    53d0:	aa 0f       	add	r26, r26
    53d2:	bb 1f       	adc	r27, r27
    53d4:	a0 5a       	subi	r26, 0xA0	; 160
    53d6:	b6 4e       	sbci	r27, 0xE6	; 230
    53d8:	cd 91       	ld	r28, X+
    53da:	dc 91       	ld	r29, X
    53dc:	11 97       	sbiw	r26, 0x01	; 1
    53de:	48 81       	ld	r20, Y
    53e0:	21 e0       	ldi	r18, 0x01	; 1
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	12 96       	adiw	r26, 0x02	; 2
    53e6:	0c 90       	ld	r0, X
    53e8:	12 97       	sbiw	r26, 0x02	; 2
    53ea:	02 c0       	rjmp	.+4      	; 0x53f0 <status_leds_slowBlink+0x32>
    53ec:	22 0f       	add	r18, r18
    53ee:	33 1f       	adc	r19, r19
    53f0:	0a 94       	dec	r0
    53f2:	e2 f7       	brpl	.-8      	; 0x53ec <status_leds_slowBlink+0x2e>
    53f4:	24 27       	eor	r18, r20
    53f6:	28 83       	st	Y, r18
    53f8:	fd 01       	movw	r30, r26
    53fa:	81 e0       	ldi	r24, 0x01	; 1
    53fc:	84 83       	std	Z+4, r24	; 0x04
    53fe:	df 91       	pop	r29
    5400:	cf 91       	pop	r28
    5402:	08 95       	ret

00005404 <status_leds_fastBlink>:
    5404:	cf 93       	push	r28
    5406:	df 93       	push	r29
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	fc 01       	movw	r30, r24
    540c:	ee 0f       	add	r30, r30
    540e:	ff 1f       	adc	r31, r31
    5410:	df 01       	movw	r26, r30
    5412:	a8 0f       	add	r26, r24
    5414:	b9 1f       	adc	r27, r25
    5416:	aa 0f       	add	r26, r26
    5418:	bb 1f       	adc	r27, r27
    541a:	a0 5a       	subi	r26, 0xA0	; 160
    541c:	b6 4e       	sbci	r27, 0xE6	; 230
    541e:	cd 91       	ld	r28, X+
    5420:	dc 91       	ld	r29, X
    5422:	11 97       	sbiw	r26, 0x01	; 1
    5424:	48 81       	ld	r20, Y
    5426:	21 e0       	ldi	r18, 0x01	; 1
    5428:	30 e0       	ldi	r19, 0x00	; 0
    542a:	12 96       	adiw	r26, 0x02	; 2
    542c:	0c 90       	ld	r0, X
    542e:	12 97       	sbiw	r26, 0x02	; 2
    5430:	02 c0       	rjmp	.+4      	; 0x5436 <status_leds_fastBlink+0x32>
    5432:	22 0f       	add	r18, r18
    5434:	33 1f       	adc	r19, r19
    5436:	0a 94       	dec	r0
    5438:	e2 f7       	brpl	.-8      	; 0x5432 <status_leds_fastBlink+0x2e>
    543a:	24 27       	eor	r18, r20
    543c:	28 83       	st	Y, r18
    543e:	fd 01       	movw	r30, r26
    5440:	82 e0       	ldi	r24, 0x02	; 2
    5442:	84 83       	std	Z+4, r24	; 0x04
    5444:	df 91       	pop	r29
    5446:	cf 91       	pop	r28
    5448:	08 95       	ret

0000544a <status_leds_ledOn>:
    544a:	28 2f       	mov	r18, r24
    544c:	30 e0       	ldi	r19, 0x00	; 0
    544e:	f9 01       	movw	r30, r18
    5450:	ee 0f       	add	r30, r30
    5452:	ff 1f       	adc	r31, r31
    5454:	e2 0f       	add	r30, r18
    5456:	f3 1f       	adc	r31, r19
    5458:	ee 0f       	add	r30, r30
    545a:	ff 1f       	adc	r31, r31
    545c:	e0 5a       	subi	r30, 0xA0	; 160
    545e:	f6 4e       	sbci	r31, 0xE6	; 230
    5460:	93 e0       	ldi	r25, 0x03	; 3
    5462:	94 83       	std	Z+4, r25	; 0x04
    5464:	cc ce       	rjmp	.-616    	; 0x51fe <_turn_on>
    5466:	08 95       	ret

00005468 <status_leds_ledOff>:
    5468:	28 2f       	mov	r18, r24
    546a:	30 e0       	ldi	r19, 0x00	; 0
    546c:	f9 01       	movw	r30, r18
    546e:	ee 0f       	add	r30, r30
    5470:	ff 1f       	adc	r31, r31
    5472:	e2 0f       	add	r30, r18
    5474:	f3 1f       	adc	r31, r19
    5476:	ee 0f       	add	r30, r30
    5478:	ff 1f       	adc	r31, r31
    547a:	e0 5a       	subi	r30, 0xA0	; 160
    547c:	f6 4e       	sbci	r31, 0xE6	; 230
    547e:	94 e0       	ldi	r25, 0x04	; 4
    5480:	94 83       	std	Z+4, r25	; 0x04
    5482:	71 ce       	rjmp	.-798    	; 0x5166 <_turn_off>
    5484:	08 95       	ret

00005486 <status_leds_longPuls>:
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	fc 01       	movw	r30, r24
    548a:	ee 0f       	add	r30, r30
    548c:	ff 1f       	adc	r31, r31
    548e:	df 01       	movw	r26, r30
    5490:	a8 0f       	add	r26, r24
    5492:	b9 1f       	adc	r27, r25
    5494:	aa 0f       	add	r26, r26
    5496:	bb 1f       	adc	r27, r27
    5498:	a0 5a       	subi	r26, 0xA0	; 160
    549a:	b6 4e       	sbci	r27, 0xE6	; 230
    549c:	24 e0       	ldi	r18, 0x04	; 4
    549e:	15 96       	adiw	r26, 0x05	; 5
    54a0:	2c 93       	st	X, r18
    54a2:	15 97       	sbiw	r26, 0x05	; 5
    54a4:	fd 01       	movw	r30, r26
    54a6:	14 82       	std	Z+4, r1	; 0x04
    54a8:	08 95       	ret

000054aa <_initTwiInterface>:
    54aa:	80 91 86 19 	lds	r24, 0x1986	; 0x801986 <_twiIsInitiated>
    54ae:	81 11       	cpse	r24, r1
    54b0:	0c c0       	rjmp	.+24     	; 0x54ca <_initTwiInterface+0x20>
    54b2:	8c e0       	ldi	r24, 0x0C	; 12
    54b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    54b8:	8f ef       	ldi	r24, 0xFF	; 255
    54ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54be:	84 e0       	ldi	r24, 0x04	; 4
    54c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	80 93 86 19 	sts	0x1986, r24	; 0x801986 <_twiIsInitiated>
    54ca:	08 95       	ret

000054cc <twiCreate>:
    54cc:	af 92       	push	r10
    54ce:	bf 92       	push	r11
    54d0:	cf 92       	push	r12
    54d2:	df 92       	push	r13
    54d4:	ef 92       	push	r14
    54d6:	ff 92       	push	r15
    54d8:	0f 93       	push	r16
    54da:	1f 93       	push	r17
    54dc:	cf 93       	push	r28
    54de:	df 93       	push	r29
    54e0:	a8 2e       	mov	r10, r24
    54e2:	b6 2e       	mov	r11, r22
    54e4:	69 01       	movw	r12, r18
    54e6:	7a 01       	movw	r14, r20
    54e8:	84 e0       	ldi	r24, 0x04	; 4
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	a0 d3       	rcall	.+1856   	; 0x5c2e <malloc>
    54ee:	ec 01       	movw	r28, r24
    54f0:	89 2b       	or	r24, r25
    54f2:	61 f1       	breq	.+88     	; 0x554c <twiCreate+0x80>
    54f4:	a8 82       	st	Y, r10
    54f6:	81 e0       	ldi	r24, 0x01	; 1
    54f8:	b8 12       	cpse	r11, r24
    54fa:	12 c0       	rjmp	.+36     	; 0x5520 <twiCreate+0x54>
    54fc:	c7 01       	movw	r24, r14
    54fe:	b6 01       	movw	r22, r12
    5500:	20 ea       	ldi	r18, 0xA0	; 160
    5502:	36 e8       	ldi	r19, 0x86	; 134
    5504:	41 e0       	ldi	r20, 0x01	; 1
    5506:	50 e0       	ldi	r21, 0x00	; 0
    5508:	4e d3       	rcall	.+1692   	; 0x5ba6 <__udivmodsi4>
    550a:	da 01       	movw	r26, r20
    550c:	c9 01       	movw	r24, r18
    550e:	40 97       	sbiw	r24, 0x10	; 16
    5510:	a1 09       	sbc	r26, r1
    5512:	b1 09       	sbc	r27, r1
    5514:	b6 95       	lsr	r27
    5516:	a7 95       	ror	r26
    5518:	97 95       	ror	r25
    551a:	87 95       	ror	r24
    551c:	89 83       	std	Y+1, r24	; 0x01
    551e:	11 c0       	rjmp	.+34     	; 0x5542 <twiCreate+0x76>
    5520:	c7 01       	movw	r24, r14
    5522:	b6 01       	movw	r22, r12
    5524:	20 e8       	ldi	r18, 0x80	; 128
    5526:	3a e1       	ldi	r19, 0x1A	; 26
    5528:	46 e0       	ldi	r20, 0x06	; 6
    552a:	50 e0       	ldi	r21, 0x00	; 0
    552c:	3c d3       	rcall	.+1656   	; 0x5ba6 <__udivmodsi4>
    552e:	da 01       	movw	r26, r20
    5530:	c9 01       	movw	r24, r18
    5532:	40 97       	sbiw	r24, 0x10	; 16
    5534:	a1 09       	sbc	r26, r1
    5536:	b1 09       	sbc	r27, r1
    5538:	b6 95       	lsr	r27
    553a:	a7 95       	ror	r26
    553c:	97 95       	ror	r25
    553e:	87 95       	ror	r24
    5540:	89 83       	std	Y+1, r24	; 0x01
    5542:	1b 83       	std	Y+3, r17	; 0x03
    5544:	0a 83       	std	Y+2, r16	; 0x02
    5546:	8c 2f       	mov	r24, r28
    5548:	9d 2f       	mov	r25, r29
    554a:	02 c0       	rjmp	.+4      	; 0x5550 <twiCreate+0x84>
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	df 91       	pop	r29
    5552:	cf 91       	pop	r28
    5554:	1f 91       	pop	r17
    5556:	0f 91       	pop	r16
    5558:	ff 90       	pop	r15
    555a:	ef 90       	pop	r14
    555c:	df 90       	pop	r13
    555e:	cf 90       	pop	r12
    5560:	bf 90       	pop	r11
    5562:	af 90       	pop	r10
    5564:	08 95       	ret

00005566 <twiIsBusy>:
    5566:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    556a:	81 70       	andi	r24, 0x01	; 1
    556c:	08 95       	ret

0000556e <twiTransmit>:
    556e:	ff 92       	push	r15
    5570:	0f 93       	push	r16
    5572:	1f 93       	push	r17
    5574:	cf 93       	push	r28
    5576:	df 93       	push	r29
    5578:	00 97       	sbiw	r24, 0x00	; 0
    557a:	d1 f1       	breq	.+116    	; 0x55f0 <twiTransmit+0x82>
    557c:	4a 30       	cpi	r20, 0x0A	; 10
    557e:	d0 f5       	brcc	.+116    	; 0x55f4 <twiTransmit+0x86>
    5580:	f4 2e       	mov	r15, r20
    5582:	8b 01       	movw	r16, r22
    5584:	ec 01       	movw	r28, r24
    5586:	ef df       	rcall	.-34     	; 0x5566 <twiIsBusy>
    5588:	81 11       	cpse	r24, r1
    558a:	36 c0       	rjmp	.+108    	; 0x55f8 <twiTransmit+0x8a>
    558c:	80 91 79 19 	lds	r24, 0x1979	; 0x801979 <_twiCurrentHandler>
    5590:	90 91 7a 19 	lds	r25, 0x197A	; 0x80197a <_twiCurrentHandler+0x1>
    5594:	c8 17       	cp	r28, r24
    5596:	d9 07       	cpc	r29, r25
    5598:	41 f0       	breq	.+16     	; 0x55aa <twiTransmit+0x3c>
    559a:	87 df       	rcall	.-242    	; 0x54aa <_initTwiInterface>
    559c:	89 81       	ldd	r24, Y+1	; 0x01
    559e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    55a2:	d0 93 7a 19 	sts	0x197A, r29	; 0x80197a <_twiCurrentHandler+0x1>
    55a6:	c0 93 79 19 	sts	0x1979, r28	; 0x801979 <_twiCurrentHandler>
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	8f 0d       	add	r24, r15
    55ae:	80 93 7b 19 	sts	0x197B, r24	; 0x80197b <_twiMessageLen>
    55b2:	88 81       	ld	r24, Y
    55b4:	88 0f       	add	r24, r24
    55b6:	80 93 7c 19 	sts	0x197C, r24	; 0x80197c <_twiMessageBuffer>
    55ba:	ff 20       	and	r15, r15
    55bc:	89 f0       	breq	.+34     	; 0x55e0 <twiTransmit+0x72>
    55be:	f8 01       	movw	r30, r16
    55c0:	ad e7       	ldi	r26, 0x7D	; 125
    55c2:	b9 e1       	ldi	r27, 0x19	; 25
    55c4:	4f ef       	ldi	r20, 0xFF	; 255
    55c6:	4f 0d       	add	r20, r15
    55c8:	64 2f       	mov	r22, r20
    55ca:	70 e0       	ldi	r23, 0x00	; 0
    55cc:	cb 01       	movw	r24, r22
    55ce:	01 96       	adiw	r24, 0x01	; 1
    55d0:	b8 01       	movw	r22, r16
    55d2:	68 0f       	add	r22, r24
    55d4:	79 1f       	adc	r23, r25
    55d6:	81 91       	ld	r24, Z+
    55d8:	8d 93       	st	X+, r24
    55da:	e6 17       	cp	r30, r22
    55dc:	f7 07       	cpc	r31, r23
    55de:	d9 f7       	brne	.-10     	; 0x55d6 <twiTransmit+0x68>
    55e0:	88 ef       	ldi	r24, 0xF8	; 248
    55e2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    55e6:	85 ea       	ldi	r24, 0xA5	; 165
    55e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55ec:	84 e0       	ldi	r24, 0x04	; 4
    55ee:	05 c0       	rjmp	.+10     	; 0x55fa <twiTransmit+0x8c>
    55f0:	86 e0       	ldi	r24, 0x06	; 6
    55f2:	03 c0       	rjmp	.+6      	; 0x55fa <twiTransmit+0x8c>
    55f4:	87 e0       	ldi	r24, 0x07	; 7
    55f6:	01 c0       	rjmp	.+2      	; 0x55fa <twiTransmit+0x8c>
    55f8:	82 e0       	ldi	r24, 0x02	; 2
    55fa:	df 91       	pop	r29
    55fc:	cf 91       	pop	r28
    55fe:	1f 91       	pop	r17
    5600:	0f 91       	pop	r16
    5602:	ff 90       	pop	r15
    5604:	08 95       	ret

00005606 <twiReceive>:
    5606:	1f 93       	push	r17
    5608:	cf 93       	push	r28
    560a:	df 93       	push	r29
    560c:	00 97       	sbiw	r24, 0x00	; 0
    560e:	29 f1       	breq	.+74     	; 0x565a <twiReceive+0x54>
    5610:	6b 30       	cpi	r22, 0x0B	; 11
    5612:	28 f5       	brcc	.+74     	; 0x565e <twiReceive+0x58>
    5614:	16 2f       	mov	r17, r22
    5616:	ec 01       	movw	r28, r24
    5618:	a6 df       	rcall	.-180    	; 0x5566 <twiIsBusy>
    561a:	81 11       	cpse	r24, r1
    561c:	22 c0       	rjmp	.+68     	; 0x5662 <twiReceive+0x5c>
    561e:	80 91 79 19 	lds	r24, 0x1979	; 0x801979 <_twiCurrentHandler>
    5622:	90 91 7a 19 	lds	r25, 0x197A	; 0x80197a <_twiCurrentHandler+0x1>
    5626:	c8 17       	cp	r28, r24
    5628:	d9 07       	cpc	r29, r25
    562a:	41 f0       	breq	.+16     	; 0x563c <twiReceive+0x36>
    562c:	3e df       	rcall	.-388    	; 0x54aa <_initTwiInterface>
    562e:	89 81       	ldd	r24, Y+1	; 0x01
    5630:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5634:	d0 93 7a 19 	sts	0x197A, r29	; 0x80197a <_twiCurrentHandler+0x1>
    5638:	c0 93 79 19 	sts	0x1979, r28	; 0x801979 <_twiCurrentHandler>
    563c:	10 93 7b 19 	sts	0x197B, r17	; 0x80197b <_twiMessageLen>
    5640:	88 81       	ld	r24, Y
    5642:	88 0f       	add	r24, r24
    5644:	81 60       	ori	r24, 0x01	; 1
    5646:	80 93 7c 19 	sts	0x197C, r24	; 0x80197c <_twiMessageBuffer>
    564a:	88 ef       	ldi	r24, 0xF8	; 248
    564c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5650:	85 ea       	ldi	r24, 0xA5	; 165
    5652:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5656:	85 e0       	ldi	r24, 0x05	; 5
    5658:	05 c0       	rjmp	.+10     	; 0x5664 <twiReceive+0x5e>
    565a:	86 e0       	ldi	r24, 0x06	; 6
    565c:	03 c0       	rjmp	.+6      	; 0x5664 <twiReceive+0x5e>
    565e:	87 e0       	ldi	r24, 0x07	; 7
    5660:	01 c0       	rjmp	.+2      	; 0x5664 <twiReceive+0x5e>
    5662:	82 e0       	ldi	r24, 0x02	; 2
    5664:	df 91       	pop	r29
    5666:	cf 91       	pop	r28
    5668:	1f 91       	pop	r17
    566a:	08 95       	ret

0000566c <__vector_39>:
    566c:	1f 92       	push	r1
    566e:	0f 92       	push	r0
    5670:	0f b6       	in	r0, 0x3f	; 63
    5672:	0f 92       	push	r0
    5674:	11 24       	eor	r1, r1
    5676:	0b b6       	in	r0, 0x3b	; 59
    5678:	0f 92       	push	r0
    567a:	2f 93       	push	r18
    567c:	3f 93       	push	r19
    567e:	4f 93       	push	r20
    5680:	5f 93       	push	r21
    5682:	6f 93       	push	r22
    5684:	7f 93       	push	r23
    5686:	8f 93       	push	r24
    5688:	9f 93       	push	r25
    568a:	af 93       	push	r26
    568c:	bf 93       	push	r27
    568e:	ef 93       	push	r30
    5690:	ff 93       	push	r31
    5692:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5696:	8e 2f       	mov	r24, r30
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	fc 01       	movw	r30, r24
    569c:	38 97       	sbiw	r30, 0x08	; 8
    569e:	e1 35       	cpi	r30, 0x51	; 81
    56a0:	f1 05       	cpc	r31, r1
    56a2:	08 f0       	brcs	.+2      	; 0x56a6 <__vector_39+0x3a>
    56a4:	75 c0       	rjmp	.+234    	; 0x5790 <__vector_39+0x124>
    56a6:	88 27       	eor	r24, r24
    56a8:	e4 58       	subi	r30, 0x84	; 132
    56aa:	ff 4f       	sbci	r31, 0xFF	; 255
    56ac:	8f 4f       	sbci	r24, 0xFF	; 255
    56ae:	9d c2       	rjmp	.+1338   	; 0x5bea <__tablejump2__>
    56b0:	10 92 78 19 	sts	0x1978, r1	; 0x801978 <_index.1885>
    56b4:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <_index.1885>
    56b8:	80 91 7b 19 	lds	r24, 0x197B	; 0x80197b <_twiMessageLen>
    56bc:	e8 17       	cp	r30, r24
    56be:	70 f4       	brcc	.+28     	; 0x56dc <__vector_39+0x70>
    56c0:	81 e0       	ldi	r24, 0x01	; 1
    56c2:	8e 0f       	add	r24, r30
    56c4:	80 93 78 19 	sts	0x1978, r24	; 0x801978 <_index.1885>
    56c8:	f0 e0       	ldi	r31, 0x00	; 0
    56ca:	e4 58       	subi	r30, 0x84	; 132
    56cc:	f6 4e       	sbci	r31, 0xE6	; 230
    56ce:	80 81       	ld	r24, Z
    56d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56d4:	85 e8       	ldi	r24, 0x85	; 133
    56d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56da:	72 c0       	rjmp	.+228    	; 0x57c0 <__vector_39+0x154>
    56dc:	84 e9       	ldi	r24, 0x94	; 148
    56de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56e2:	80 91 79 19 	lds	r24, 0x1979	; 0x801979 <_twiCurrentHandler>
    56e6:	90 91 7a 19 	lds	r25, 0x197A	; 0x80197a <_twiCurrentHandler+0x1>
    56ea:	dc 01       	movw	r26, r24
    56ec:	12 96       	adiw	r26, 0x02	; 2
    56ee:	ed 91       	ld	r30, X+
    56f0:	fc 91       	ld	r31, X
    56f2:	13 97       	sbiw	r26, 0x03	; 3
    56f4:	30 97       	sbiw	r30, 0x00	; 0
    56f6:	09 f4       	brne	.+2      	; 0x56fa <__vector_39+0x8e>
    56f8:	63 c0       	rjmp	.+198    	; 0x57c0 <__vector_39+0x154>
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	40 e0       	ldi	r20, 0x00	; 0
    56fe:	50 e0       	ldi	r21, 0x00	; 0
    5700:	64 e0       	ldi	r22, 0x04	; 4
    5702:	19 95       	eicall
    5704:	5d c0       	rjmp	.+186    	; 0x57c0 <__vector_39+0x154>
    5706:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <_index.1885>
    570a:	81 e0       	ldi	r24, 0x01	; 1
    570c:	8e 0f       	add	r24, r30
    570e:	80 93 78 19 	sts	0x1978, r24	; 0x801978 <_index.1885>
    5712:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5716:	f0 e0       	ldi	r31, 0x00	; 0
    5718:	e4 58       	subi	r30, 0x84	; 132
    571a:	f6 4e       	sbci	r31, 0xE6	; 230
    571c:	80 83       	st	Z, r24
    571e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5722:	80 34       	cpi	r24, 0x40	; 64
    5724:	11 f4       	brne	.+4      	; 0x572a <__vector_39+0xbe>
    5726:	10 92 78 19 	sts	0x1978, r1	; 0x801978 <_index.1885>
    572a:	20 91 78 19 	lds	r18, 0x1978	; 0x801978 <_index.1885>
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	80 91 7b 19 	lds	r24, 0x197B	; 0x80197b <_twiMessageLen>
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	28 17       	cp	r18, r24
    573a:	39 07       	cpc	r19, r25
    573c:	24 f4       	brge	.+8      	; 0x5746 <__vector_39+0xda>
    573e:	85 ec       	ldi	r24, 0xC5	; 197
    5740:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5744:	3d c0       	rjmp	.+122    	; 0x57c0 <__vector_39+0x154>
    5746:	85 e8       	ldi	r24, 0x85	; 133
    5748:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    574c:	39 c0       	rjmp	.+114    	; 0x57c0 <__vector_39+0x154>
    574e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5752:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <_index.1885>
    5756:	f0 e0       	ldi	r31, 0x00	; 0
    5758:	e4 58       	subi	r30, 0x84	; 132
    575a:	f6 4e       	sbci	r31, 0xE6	; 230
    575c:	80 83       	st	Z, r24
    575e:	84 e9       	ldi	r24, 0x94	; 148
    5760:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5764:	80 91 79 19 	lds	r24, 0x1979	; 0x801979 <_twiCurrentHandler>
    5768:	90 91 7a 19 	lds	r25, 0x197A	; 0x80197a <_twiCurrentHandler+0x1>
    576c:	dc 01       	movw	r26, r24
    576e:	12 96       	adiw	r26, 0x02	; 2
    5770:	ed 91       	ld	r30, X+
    5772:	fc 91       	ld	r31, X
    5774:	13 97       	sbiw	r26, 0x03	; 3
    5776:	30 97       	sbiw	r30, 0x00	; 0
    5778:	19 f1       	breq	.+70     	; 0x57c0 <__vector_39+0x154>
    577a:	20 91 7b 19 	lds	r18, 0x197B	; 0x80197b <_twiMessageLen>
    577e:	4c e7       	ldi	r20, 0x7C	; 124
    5780:	59 e1       	ldi	r21, 0x19	; 25
    5782:	65 e0       	ldi	r22, 0x05	; 5
    5784:	19 95       	eicall
    5786:	1c c0       	rjmp	.+56     	; 0x57c0 <__vector_39+0x154>
    5788:	85 ea       	ldi	r24, 0xA5	; 165
    578a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    578e:	18 c0       	rjmp	.+48     	; 0x57c0 <__vector_39+0x154>
    5790:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5794:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5798:	84 e0       	ldi	r24, 0x04	; 4
    579a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    579e:	80 91 79 19 	lds	r24, 0x1979	; 0x801979 <_twiCurrentHandler>
    57a2:	90 91 7a 19 	lds	r25, 0x197A	; 0x80197a <_twiCurrentHandler+0x1>
    57a6:	dc 01       	movw	r26, r24
    57a8:	12 96       	adiw	r26, 0x02	; 2
    57aa:	ed 91       	ld	r30, X+
    57ac:	fc 91       	ld	r31, X
    57ae:	13 97       	sbiw	r26, 0x03	; 3
    57b0:	30 97       	sbiw	r30, 0x00	; 0
    57b2:	31 f0       	breq	.+12     	; 0x57c0 <__vector_39+0x154>
    57b4:	20 e0       	ldi	r18, 0x00	; 0
    57b6:	40 e0       	ldi	r20, 0x00	; 0
    57b8:	50 e0       	ldi	r21, 0x00	; 0
    57ba:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    57be:	19 95       	eicall
    57c0:	ff 91       	pop	r31
    57c2:	ef 91       	pop	r30
    57c4:	bf 91       	pop	r27
    57c6:	af 91       	pop	r26
    57c8:	9f 91       	pop	r25
    57ca:	8f 91       	pop	r24
    57cc:	7f 91       	pop	r23
    57ce:	6f 91       	pop	r22
    57d0:	5f 91       	pop	r21
    57d2:	4f 91       	pop	r20
    57d4:	3f 91       	pop	r19
    57d6:	2f 91       	pop	r18
    57d8:	0f 90       	pop	r0
    57da:	0b be       	out	0x3b, r0	; 59
    57dc:	0f 90       	pop	r0
    57de:	0f be       	out	0x3f, r0	; 63
    57e0:	0f 90       	pop	r0
    57e2:	1f 90       	pop	r1
    57e4:	18 95       	reti

000057e6 <fifo_init>:
    57e6:	fc 01       	movw	r30, r24
    57e8:	41 11       	cpse	r20, r1
    57ea:	01 c0       	rjmp	.+2      	; 0x57ee <fifo_init+0x8>
    57ec:	41 d3       	rcall	.+1666   	; 0x5e70 <abort>
    57ee:	84 2f       	mov	r24, r20
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	9c 01       	movw	r18, r24
    57f4:	21 50       	subi	r18, 0x01	; 1
    57f6:	31 09       	sbc	r19, r1
    57f8:	82 23       	and	r24, r18
    57fa:	93 23       	and	r25, r19
    57fc:	89 2b       	or	r24, r25
    57fe:	09 f0       	breq	.+2      	; 0x5802 <fifo_init+0x1c>
    5800:	37 d3       	rcall	.+1646   	; 0x5e70 <abort>
    5802:	41 38       	cpi	r20, 0x81	; 129
    5804:	08 f0       	brcs	.+2      	; 0x5808 <fifo_init+0x22>
    5806:	34 d3       	rcall	.+1640   	; 0x5e70 <abort>
    5808:	12 82       	std	Z+2, r1	; 0x02
    580a:	13 82       	std	Z+3, r1	; 0x03
    580c:	44 83       	std	Z+4, r20	; 0x04
    580e:	44 0f       	add	r20, r20
    5810:	41 50       	subi	r20, 0x01	; 1
    5812:	45 83       	std	Z+5, r20	; 0x05
    5814:	71 83       	std	Z+1, r23	; 0x01
    5816:	60 83       	st	Z, r22
    5818:	80 e0       	ldi	r24, 0x00	; 0
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	08 95       	ret

0000581e <__subsf3>:
    581e:	50 58       	subi	r21, 0x80	; 128

00005820 <__addsf3>:
    5820:	bb 27       	eor	r27, r27
    5822:	aa 27       	eor	r26, r26
    5824:	0e d0       	rcall	.+28     	; 0x5842 <__addsf3x>
    5826:	21 c1       	rjmp	.+578    	; 0x5a6a <__fp_round>
    5828:	12 d1       	rcall	.+548    	; 0x5a4e <__fp_pscA>
    582a:	30 f0       	brcs	.+12     	; 0x5838 <__addsf3+0x18>
    582c:	17 d1       	rcall	.+558    	; 0x5a5c <__fp_pscB>
    582e:	20 f0       	brcs	.+8      	; 0x5838 <__addsf3+0x18>
    5830:	31 f4       	brne	.+12     	; 0x583e <__addsf3+0x1e>
    5832:	9f 3f       	cpi	r25, 0xFF	; 255
    5834:	11 f4       	brne	.+4      	; 0x583a <__addsf3+0x1a>
    5836:	1e f4       	brtc	.+6      	; 0x583e <__addsf3+0x1e>
    5838:	07 c1       	rjmp	.+526    	; 0x5a48 <__fp_nan>
    583a:	0e f4       	brtc	.+2      	; 0x583e <__addsf3+0x1e>
    583c:	e0 95       	com	r30
    583e:	e7 fb       	bst	r30, 7
    5840:	fd c0       	rjmp	.+506    	; 0x5a3c <__fp_inf>

00005842 <__addsf3x>:
    5842:	e9 2f       	mov	r30, r25
    5844:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <__fp_split3>
    5848:	78 f3       	brcs	.-34     	; 0x5828 <__addsf3+0x8>
    584a:	ba 17       	cp	r27, r26
    584c:	62 07       	cpc	r22, r18
    584e:	73 07       	cpc	r23, r19
    5850:	84 07       	cpc	r24, r20
    5852:	95 07       	cpc	r25, r21
    5854:	20 f0       	brcs	.+8      	; 0x585e <__addsf3x+0x1c>
    5856:	79 f4       	brne	.+30     	; 0x5876 <__addsf3x+0x34>
    5858:	a6 f5       	brtc	.+104    	; 0x58c2 <__addsf3x+0x80>
    585a:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__fp_zero>
    585e:	0e f4       	brtc	.+2      	; 0x5862 <__addsf3x+0x20>
    5860:	e0 95       	com	r30
    5862:	0b 2e       	mov	r0, r27
    5864:	ba 2f       	mov	r27, r26
    5866:	a0 2d       	mov	r26, r0
    5868:	0b 01       	movw	r0, r22
    586a:	b9 01       	movw	r22, r18
    586c:	90 01       	movw	r18, r0
    586e:	0c 01       	movw	r0, r24
    5870:	ca 01       	movw	r24, r20
    5872:	a0 01       	movw	r20, r0
    5874:	11 24       	eor	r1, r1
    5876:	ff 27       	eor	r31, r31
    5878:	59 1b       	sub	r21, r25
    587a:	99 f0       	breq	.+38     	; 0x58a2 <__addsf3x+0x60>
    587c:	59 3f       	cpi	r21, 0xF9	; 249
    587e:	50 f4       	brcc	.+20     	; 0x5894 <__addsf3x+0x52>
    5880:	50 3e       	cpi	r21, 0xE0	; 224
    5882:	68 f1       	brcs	.+90     	; 0x58de <__addsf3x+0x9c>
    5884:	1a 16       	cp	r1, r26
    5886:	f0 40       	sbci	r31, 0x00	; 0
    5888:	a2 2f       	mov	r26, r18
    588a:	23 2f       	mov	r18, r19
    588c:	34 2f       	mov	r19, r20
    588e:	44 27       	eor	r20, r20
    5890:	58 5f       	subi	r21, 0xF8	; 248
    5892:	f3 cf       	rjmp	.-26     	; 0x587a <__addsf3x+0x38>
    5894:	46 95       	lsr	r20
    5896:	37 95       	ror	r19
    5898:	27 95       	ror	r18
    589a:	a7 95       	ror	r26
    589c:	f0 40       	sbci	r31, 0x00	; 0
    589e:	53 95       	inc	r21
    58a0:	c9 f7       	brne	.-14     	; 0x5894 <__addsf3x+0x52>
    58a2:	7e f4       	brtc	.+30     	; 0x58c2 <__addsf3x+0x80>
    58a4:	1f 16       	cp	r1, r31
    58a6:	ba 0b       	sbc	r27, r26
    58a8:	62 0b       	sbc	r22, r18
    58aa:	73 0b       	sbc	r23, r19
    58ac:	84 0b       	sbc	r24, r20
    58ae:	ba f0       	brmi	.+46     	; 0x58de <__addsf3x+0x9c>
    58b0:	91 50       	subi	r25, 0x01	; 1
    58b2:	a1 f0       	breq	.+40     	; 0x58dc <__addsf3x+0x9a>
    58b4:	ff 0f       	add	r31, r31
    58b6:	bb 1f       	adc	r27, r27
    58b8:	66 1f       	adc	r22, r22
    58ba:	77 1f       	adc	r23, r23
    58bc:	88 1f       	adc	r24, r24
    58be:	c2 f7       	brpl	.-16     	; 0x58b0 <__addsf3x+0x6e>
    58c0:	0e c0       	rjmp	.+28     	; 0x58de <__addsf3x+0x9c>
    58c2:	ba 0f       	add	r27, r26
    58c4:	62 1f       	adc	r22, r18
    58c6:	73 1f       	adc	r23, r19
    58c8:	84 1f       	adc	r24, r20
    58ca:	48 f4       	brcc	.+18     	; 0x58de <__addsf3x+0x9c>
    58cc:	87 95       	ror	r24
    58ce:	77 95       	ror	r23
    58d0:	67 95       	ror	r22
    58d2:	b7 95       	ror	r27
    58d4:	f7 95       	ror	r31
    58d6:	9e 3f       	cpi	r25, 0xFE	; 254
    58d8:	08 f0       	brcs	.+2      	; 0x58dc <__addsf3x+0x9a>
    58da:	b1 cf       	rjmp	.-158    	; 0x583e <__addsf3+0x1e>
    58dc:	93 95       	inc	r25
    58de:	88 0f       	add	r24, r24
    58e0:	08 f0       	brcs	.+2      	; 0x58e4 <__addsf3x+0xa2>
    58e2:	99 27       	eor	r25, r25
    58e4:	ee 0f       	add	r30, r30
    58e6:	97 95       	ror	r25
    58e8:	87 95       	ror	r24
    58ea:	08 95       	ret

000058ec <__divsf3>:
    58ec:	0d d0       	rcall	.+26     	; 0x5908 <__divsf3x>
    58ee:	bd c0       	rjmp	.+378    	; 0x5a6a <__fp_round>
    58f0:	b5 d0       	rcall	.+362    	; 0x5a5c <__fp_pscB>
    58f2:	48 f0       	brcs	.+18     	; 0x5906 <__divsf3+0x1a>
    58f4:	ac d0       	rcall	.+344    	; 0x5a4e <__fp_pscA>
    58f6:	38 f0       	brcs	.+14     	; 0x5906 <__divsf3+0x1a>
    58f8:	21 f4       	brne	.+8      	; 0x5902 <__divsf3+0x16>
    58fa:	5f 3f       	cpi	r21, 0xFF	; 255
    58fc:	21 f0       	breq	.+8      	; 0x5906 <__divsf3+0x1a>
    58fe:	9e c0       	rjmp	.+316    	; 0x5a3c <__fp_inf>
    5900:	51 11       	cpse	r21, r1
    5902:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__fp_szero>
    5906:	a0 c0       	rjmp	.+320    	; 0x5a48 <__fp_nan>

00005908 <__divsf3x>:
    5908:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <__fp_split3>
    590c:	88 f3       	brcs	.-30     	; 0x58f0 <__divsf3+0x4>

0000590e <__divsf3_pse>:
    590e:	99 23       	and	r25, r25
    5910:	b9 f3       	breq	.-18     	; 0x5900 <__divsf3+0x14>
    5912:	55 23       	and	r21, r21
    5914:	a1 f3       	breq	.-24     	; 0x58fe <__divsf3+0x12>
    5916:	95 1b       	sub	r25, r21
    5918:	55 0b       	sbc	r21, r21
    591a:	bb 27       	eor	r27, r27
    591c:	aa 27       	eor	r26, r26
    591e:	62 17       	cp	r22, r18
    5920:	73 07       	cpc	r23, r19
    5922:	84 07       	cpc	r24, r20
    5924:	38 f0       	brcs	.+14     	; 0x5934 <__divsf3_pse+0x26>
    5926:	9f 5f       	subi	r25, 0xFF	; 255
    5928:	5f 4f       	sbci	r21, 0xFF	; 255
    592a:	22 0f       	add	r18, r18
    592c:	33 1f       	adc	r19, r19
    592e:	44 1f       	adc	r20, r20
    5930:	aa 1f       	adc	r26, r26
    5932:	a9 f3       	breq	.-22     	; 0x591e <__divsf3_pse+0x10>
    5934:	34 d0       	rcall	.+104    	; 0x599e <__divsf3_pse+0x90>
    5936:	0e 2e       	mov	r0, r30
    5938:	3a f0       	brmi	.+14     	; 0x5948 <__divsf3_pse+0x3a>
    593a:	e0 e8       	ldi	r30, 0x80	; 128
    593c:	31 d0       	rcall	.+98     	; 0x59a0 <__divsf3_pse+0x92>
    593e:	91 50       	subi	r25, 0x01	; 1
    5940:	50 40       	sbci	r21, 0x00	; 0
    5942:	e6 95       	lsr	r30
    5944:	00 1c       	adc	r0, r0
    5946:	ca f7       	brpl	.-14     	; 0x593a <__divsf3_pse+0x2c>
    5948:	2a d0       	rcall	.+84     	; 0x599e <__divsf3_pse+0x90>
    594a:	fe 2f       	mov	r31, r30
    594c:	28 d0       	rcall	.+80     	; 0x599e <__divsf3_pse+0x90>
    594e:	66 0f       	add	r22, r22
    5950:	77 1f       	adc	r23, r23
    5952:	88 1f       	adc	r24, r24
    5954:	bb 1f       	adc	r27, r27
    5956:	26 17       	cp	r18, r22
    5958:	37 07       	cpc	r19, r23
    595a:	48 07       	cpc	r20, r24
    595c:	ab 07       	cpc	r26, r27
    595e:	b0 e8       	ldi	r27, 0x80	; 128
    5960:	09 f0       	breq	.+2      	; 0x5964 <__divsf3_pse+0x56>
    5962:	bb 0b       	sbc	r27, r27
    5964:	80 2d       	mov	r24, r0
    5966:	bf 01       	movw	r22, r30
    5968:	ff 27       	eor	r31, r31
    596a:	93 58       	subi	r25, 0x83	; 131
    596c:	5f 4f       	sbci	r21, 0xFF	; 255
    596e:	32 f0       	brmi	.+12     	; 0x597c <__divsf3_pse+0x6e>
    5970:	9e 3f       	cpi	r25, 0xFE	; 254
    5972:	51 05       	cpc	r21, r1
    5974:	70 f0       	brcs	.+28     	; 0x5992 <__divsf3_pse+0x84>
    5976:	62 c0       	rjmp	.+196    	; 0x5a3c <__fp_inf>
    5978:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__fp_szero>
    597c:	5f 3f       	cpi	r21, 0xFF	; 255
    597e:	e4 f3       	brlt	.-8      	; 0x5978 <__divsf3_pse+0x6a>
    5980:	98 3e       	cpi	r25, 0xE8	; 232
    5982:	d4 f3       	brlt	.-12     	; 0x5978 <__divsf3_pse+0x6a>
    5984:	86 95       	lsr	r24
    5986:	77 95       	ror	r23
    5988:	67 95       	ror	r22
    598a:	b7 95       	ror	r27
    598c:	f7 95       	ror	r31
    598e:	9f 5f       	subi	r25, 0xFF	; 255
    5990:	c9 f7       	brne	.-14     	; 0x5984 <__divsf3_pse+0x76>
    5992:	88 0f       	add	r24, r24
    5994:	91 1d       	adc	r25, r1
    5996:	96 95       	lsr	r25
    5998:	87 95       	ror	r24
    599a:	97 f9       	bld	r25, 7
    599c:	08 95       	ret
    599e:	e1 e0       	ldi	r30, 0x01	; 1
    59a0:	66 0f       	add	r22, r22
    59a2:	77 1f       	adc	r23, r23
    59a4:	88 1f       	adc	r24, r24
    59a6:	bb 1f       	adc	r27, r27
    59a8:	62 17       	cp	r22, r18
    59aa:	73 07       	cpc	r23, r19
    59ac:	84 07       	cpc	r24, r20
    59ae:	ba 07       	cpc	r27, r26
    59b0:	20 f0       	brcs	.+8      	; 0x59ba <__divsf3_pse+0xac>
    59b2:	62 1b       	sub	r22, r18
    59b4:	73 0b       	sbc	r23, r19
    59b6:	84 0b       	sbc	r24, r20
    59b8:	ba 0b       	sbc	r27, r26
    59ba:	ee 1f       	adc	r30, r30
    59bc:	88 f7       	brcc	.-30     	; 0x59a0 <__divsf3_pse+0x92>
    59be:	e0 95       	com	r30
    59c0:	08 95       	ret

000059c2 <__floatunsisf>:
    59c2:	e8 94       	clt
    59c4:	09 c0       	rjmp	.+18     	; 0x59d8 <__floatsisf+0x12>

000059c6 <__floatsisf>:
    59c6:	97 fb       	bst	r25, 7
    59c8:	3e f4       	brtc	.+14     	; 0x59d8 <__floatsisf+0x12>
    59ca:	90 95       	com	r25
    59cc:	80 95       	com	r24
    59ce:	70 95       	com	r23
    59d0:	61 95       	neg	r22
    59d2:	7f 4f       	sbci	r23, 0xFF	; 255
    59d4:	8f 4f       	sbci	r24, 0xFF	; 255
    59d6:	9f 4f       	sbci	r25, 0xFF	; 255
    59d8:	99 23       	and	r25, r25
    59da:	a9 f0       	breq	.+42     	; 0x5a06 <__floatsisf+0x40>
    59dc:	f9 2f       	mov	r31, r25
    59de:	96 e9       	ldi	r25, 0x96	; 150
    59e0:	bb 27       	eor	r27, r27
    59e2:	93 95       	inc	r25
    59e4:	f6 95       	lsr	r31
    59e6:	87 95       	ror	r24
    59e8:	77 95       	ror	r23
    59ea:	67 95       	ror	r22
    59ec:	b7 95       	ror	r27
    59ee:	f1 11       	cpse	r31, r1
    59f0:	f8 cf       	rjmp	.-16     	; 0x59e2 <__floatsisf+0x1c>
    59f2:	fa f4       	brpl	.+62     	; 0x5a32 <__floatsisf+0x6c>
    59f4:	bb 0f       	add	r27, r27
    59f6:	11 f4       	brne	.+4      	; 0x59fc <__floatsisf+0x36>
    59f8:	60 ff       	sbrs	r22, 0
    59fa:	1b c0       	rjmp	.+54     	; 0x5a32 <__floatsisf+0x6c>
    59fc:	6f 5f       	subi	r22, 0xFF	; 255
    59fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5a00:	8f 4f       	sbci	r24, 0xFF	; 255
    5a02:	9f 4f       	sbci	r25, 0xFF	; 255
    5a04:	16 c0       	rjmp	.+44     	; 0x5a32 <__floatsisf+0x6c>
    5a06:	88 23       	and	r24, r24
    5a08:	11 f0       	breq	.+4      	; 0x5a0e <__floatsisf+0x48>
    5a0a:	96 e9       	ldi	r25, 0x96	; 150
    5a0c:	11 c0       	rjmp	.+34     	; 0x5a30 <__floatsisf+0x6a>
    5a0e:	77 23       	and	r23, r23
    5a10:	21 f0       	breq	.+8      	; 0x5a1a <__floatsisf+0x54>
    5a12:	9e e8       	ldi	r25, 0x8E	; 142
    5a14:	87 2f       	mov	r24, r23
    5a16:	76 2f       	mov	r23, r22
    5a18:	05 c0       	rjmp	.+10     	; 0x5a24 <__floatsisf+0x5e>
    5a1a:	66 23       	and	r22, r22
    5a1c:	71 f0       	breq	.+28     	; 0x5a3a <__floatsisf+0x74>
    5a1e:	96 e8       	ldi	r25, 0x86	; 134
    5a20:	86 2f       	mov	r24, r22
    5a22:	70 e0       	ldi	r23, 0x00	; 0
    5a24:	60 e0       	ldi	r22, 0x00	; 0
    5a26:	2a f0       	brmi	.+10     	; 0x5a32 <__floatsisf+0x6c>
    5a28:	9a 95       	dec	r25
    5a2a:	66 0f       	add	r22, r22
    5a2c:	77 1f       	adc	r23, r23
    5a2e:	88 1f       	adc	r24, r24
    5a30:	da f7       	brpl	.-10     	; 0x5a28 <__floatsisf+0x62>
    5a32:	88 0f       	add	r24, r24
    5a34:	96 95       	lsr	r25
    5a36:	87 95       	ror	r24
    5a38:	97 f9       	bld	r25, 7
    5a3a:	08 95       	ret

00005a3c <__fp_inf>:
    5a3c:	97 f9       	bld	r25, 7
    5a3e:	9f 67       	ori	r25, 0x7F	; 127
    5a40:	80 e8       	ldi	r24, 0x80	; 128
    5a42:	70 e0       	ldi	r23, 0x00	; 0
    5a44:	60 e0       	ldi	r22, 0x00	; 0
    5a46:	08 95       	ret

00005a48 <__fp_nan>:
    5a48:	9f ef       	ldi	r25, 0xFF	; 255
    5a4a:	80 ec       	ldi	r24, 0xC0	; 192
    5a4c:	08 95       	ret

00005a4e <__fp_pscA>:
    5a4e:	00 24       	eor	r0, r0
    5a50:	0a 94       	dec	r0
    5a52:	16 16       	cp	r1, r22
    5a54:	17 06       	cpc	r1, r23
    5a56:	18 06       	cpc	r1, r24
    5a58:	09 06       	cpc	r0, r25
    5a5a:	08 95       	ret

00005a5c <__fp_pscB>:
    5a5c:	00 24       	eor	r0, r0
    5a5e:	0a 94       	dec	r0
    5a60:	12 16       	cp	r1, r18
    5a62:	13 06       	cpc	r1, r19
    5a64:	14 06       	cpc	r1, r20
    5a66:	05 06       	cpc	r0, r21
    5a68:	08 95       	ret

00005a6a <__fp_round>:
    5a6a:	09 2e       	mov	r0, r25
    5a6c:	03 94       	inc	r0
    5a6e:	00 0c       	add	r0, r0
    5a70:	11 f4       	brne	.+4      	; 0x5a76 <__fp_round+0xc>
    5a72:	88 23       	and	r24, r24
    5a74:	52 f0       	brmi	.+20     	; 0x5a8a <__fp_round+0x20>
    5a76:	bb 0f       	add	r27, r27
    5a78:	40 f4       	brcc	.+16     	; 0x5a8a <__fp_round+0x20>
    5a7a:	bf 2b       	or	r27, r31
    5a7c:	11 f4       	brne	.+4      	; 0x5a82 <__fp_round+0x18>
    5a7e:	60 ff       	sbrs	r22, 0
    5a80:	04 c0       	rjmp	.+8      	; 0x5a8a <__fp_round+0x20>
    5a82:	6f 5f       	subi	r22, 0xFF	; 255
    5a84:	7f 4f       	sbci	r23, 0xFF	; 255
    5a86:	8f 4f       	sbci	r24, 0xFF	; 255
    5a88:	9f 4f       	sbci	r25, 0xFF	; 255
    5a8a:	08 95       	ret

00005a8c <__mulsf3>:
    5a8c:	0c d0       	rcall	.+24     	; 0x5aa6 <__mulsf3x>
    5a8e:	ed cf       	rjmp	.-38     	; 0x5a6a <__fp_round>
    5a90:	de df       	rcall	.-68     	; 0x5a4e <__fp_pscA>
    5a92:	28 f0       	brcs	.+10     	; 0x5a9e <__mulsf3+0x12>
    5a94:	e3 df       	rcall	.-58     	; 0x5a5c <__fp_pscB>
    5a96:	18 f0       	brcs	.+6      	; 0x5a9e <__mulsf3+0x12>
    5a98:	95 23       	and	r25, r21
    5a9a:	09 f0       	breq	.+2      	; 0x5a9e <__mulsf3+0x12>
    5a9c:	cf cf       	rjmp	.-98     	; 0x5a3c <__fp_inf>
    5a9e:	d4 cf       	rjmp	.-88     	; 0x5a48 <__fp_nan>
    5aa0:	11 24       	eor	r1, r1
    5aa2:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__fp_szero>

00005aa6 <__mulsf3x>:
    5aa6:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <__fp_split3>
    5aaa:	90 f3       	brcs	.-28     	; 0x5a90 <__mulsf3+0x4>

00005aac <__mulsf3_pse>:
    5aac:	95 9f       	mul	r25, r21
    5aae:	c1 f3       	breq	.-16     	; 0x5aa0 <__mulsf3+0x14>
    5ab0:	95 0f       	add	r25, r21
    5ab2:	50 e0       	ldi	r21, 0x00	; 0
    5ab4:	55 1f       	adc	r21, r21
    5ab6:	62 9f       	mul	r22, r18
    5ab8:	f0 01       	movw	r30, r0
    5aba:	72 9f       	mul	r23, r18
    5abc:	bb 27       	eor	r27, r27
    5abe:	f0 0d       	add	r31, r0
    5ac0:	b1 1d       	adc	r27, r1
    5ac2:	63 9f       	mul	r22, r19
    5ac4:	aa 27       	eor	r26, r26
    5ac6:	f0 0d       	add	r31, r0
    5ac8:	b1 1d       	adc	r27, r1
    5aca:	aa 1f       	adc	r26, r26
    5acc:	64 9f       	mul	r22, r20
    5ace:	66 27       	eor	r22, r22
    5ad0:	b0 0d       	add	r27, r0
    5ad2:	a1 1d       	adc	r26, r1
    5ad4:	66 1f       	adc	r22, r22
    5ad6:	82 9f       	mul	r24, r18
    5ad8:	22 27       	eor	r18, r18
    5ada:	b0 0d       	add	r27, r0
    5adc:	a1 1d       	adc	r26, r1
    5ade:	62 1f       	adc	r22, r18
    5ae0:	73 9f       	mul	r23, r19
    5ae2:	b0 0d       	add	r27, r0
    5ae4:	a1 1d       	adc	r26, r1
    5ae6:	62 1f       	adc	r22, r18
    5ae8:	83 9f       	mul	r24, r19
    5aea:	a0 0d       	add	r26, r0
    5aec:	61 1d       	adc	r22, r1
    5aee:	22 1f       	adc	r18, r18
    5af0:	74 9f       	mul	r23, r20
    5af2:	33 27       	eor	r19, r19
    5af4:	a0 0d       	add	r26, r0
    5af6:	61 1d       	adc	r22, r1
    5af8:	23 1f       	adc	r18, r19
    5afa:	84 9f       	mul	r24, r20
    5afc:	60 0d       	add	r22, r0
    5afe:	21 1d       	adc	r18, r1
    5b00:	82 2f       	mov	r24, r18
    5b02:	76 2f       	mov	r23, r22
    5b04:	6a 2f       	mov	r22, r26
    5b06:	11 24       	eor	r1, r1
    5b08:	9f 57       	subi	r25, 0x7F	; 127
    5b0a:	50 40       	sbci	r21, 0x00	; 0
    5b0c:	92 f0       	brmi	.+36     	; 0x5b32 <__mulsf3_pse+0x86>
    5b0e:	e9 f0       	breq	.+58     	; 0x5b4a <__mulsf3_pse+0x9e>
    5b10:	88 23       	and	r24, r24
    5b12:	4a f0       	brmi	.+18     	; 0x5b26 <__mulsf3_pse+0x7a>
    5b14:	ee 0f       	add	r30, r30
    5b16:	ff 1f       	adc	r31, r31
    5b18:	bb 1f       	adc	r27, r27
    5b1a:	66 1f       	adc	r22, r22
    5b1c:	77 1f       	adc	r23, r23
    5b1e:	88 1f       	adc	r24, r24
    5b20:	91 50       	subi	r25, 0x01	; 1
    5b22:	50 40       	sbci	r21, 0x00	; 0
    5b24:	a9 f7       	brne	.-22     	; 0x5b10 <__mulsf3_pse+0x64>
    5b26:	9e 3f       	cpi	r25, 0xFE	; 254
    5b28:	51 05       	cpc	r21, r1
    5b2a:	78 f0       	brcs	.+30     	; 0x5b4a <__mulsf3_pse+0x9e>
    5b2c:	87 cf       	rjmp	.-242    	; 0x5a3c <__fp_inf>
    5b2e:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__fp_szero>
    5b32:	5f 3f       	cpi	r21, 0xFF	; 255
    5b34:	e4 f3       	brlt	.-8      	; 0x5b2e <__mulsf3_pse+0x82>
    5b36:	98 3e       	cpi	r25, 0xE8	; 232
    5b38:	d4 f3       	brlt	.-12     	; 0x5b2e <__mulsf3_pse+0x82>
    5b3a:	86 95       	lsr	r24
    5b3c:	77 95       	ror	r23
    5b3e:	67 95       	ror	r22
    5b40:	b7 95       	ror	r27
    5b42:	f7 95       	ror	r31
    5b44:	e7 95       	ror	r30
    5b46:	9f 5f       	subi	r25, 0xFF	; 255
    5b48:	c1 f7       	brne	.-16     	; 0x5b3a <__mulsf3_pse+0x8e>
    5b4a:	fe 2b       	or	r31, r30
    5b4c:	88 0f       	add	r24, r24
    5b4e:	91 1d       	adc	r25, r1
    5b50:	96 95       	lsr	r25
    5b52:	87 95       	ror	r24
    5b54:	97 f9       	bld	r25, 7
    5b56:	08 95       	ret

00005b58 <__udivmodhi4>:
    5b58:	aa 1b       	sub	r26, r26
    5b5a:	bb 1b       	sub	r27, r27
    5b5c:	51 e1       	ldi	r21, 0x11	; 17
    5b5e:	07 c0       	rjmp	.+14     	; 0x5b6e <__udivmodhi4_ep>

00005b60 <__udivmodhi4_loop>:
    5b60:	aa 1f       	adc	r26, r26
    5b62:	bb 1f       	adc	r27, r27
    5b64:	a6 17       	cp	r26, r22
    5b66:	b7 07       	cpc	r27, r23
    5b68:	10 f0       	brcs	.+4      	; 0x5b6e <__udivmodhi4_ep>
    5b6a:	a6 1b       	sub	r26, r22
    5b6c:	b7 0b       	sbc	r27, r23

00005b6e <__udivmodhi4_ep>:
    5b6e:	88 1f       	adc	r24, r24
    5b70:	99 1f       	adc	r25, r25
    5b72:	5a 95       	dec	r21
    5b74:	a9 f7       	brne	.-22     	; 0x5b60 <__udivmodhi4_loop>
    5b76:	80 95       	com	r24
    5b78:	90 95       	com	r25
    5b7a:	bc 01       	movw	r22, r24
    5b7c:	cd 01       	movw	r24, r26
    5b7e:	08 95       	ret

00005b80 <__divmodhi4>:
    5b80:	97 fb       	bst	r25, 7
    5b82:	07 2e       	mov	r0, r23
    5b84:	16 f4       	brtc	.+4      	; 0x5b8a <__divmodhi4+0xa>
    5b86:	00 94       	com	r0
    5b88:	06 d0       	rcall	.+12     	; 0x5b96 <__divmodhi4_neg1>
    5b8a:	77 fd       	sbrc	r23, 7
    5b8c:	08 d0       	rcall	.+16     	; 0x5b9e <__divmodhi4_neg2>
    5b8e:	e4 df       	rcall	.-56     	; 0x5b58 <__udivmodhi4>
    5b90:	07 fc       	sbrc	r0, 7
    5b92:	05 d0       	rcall	.+10     	; 0x5b9e <__divmodhi4_neg2>
    5b94:	3e f4       	brtc	.+14     	; 0x5ba4 <__divmodhi4_exit>

00005b96 <__divmodhi4_neg1>:
    5b96:	90 95       	com	r25
    5b98:	81 95       	neg	r24
    5b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b9c:	08 95       	ret

00005b9e <__divmodhi4_neg2>:
    5b9e:	70 95       	com	r23
    5ba0:	61 95       	neg	r22
    5ba2:	7f 4f       	sbci	r23, 0xFF	; 255

00005ba4 <__divmodhi4_exit>:
    5ba4:	08 95       	ret

00005ba6 <__udivmodsi4>:
    5ba6:	a1 e2       	ldi	r26, 0x21	; 33
    5ba8:	1a 2e       	mov	r1, r26
    5baa:	aa 1b       	sub	r26, r26
    5bac:	bb 1b       	sub	r27, r27
    5bae:	fd 01       	movw	r30, r26
    5bb0:	0d c0       	rjmp	.+26     	; 0x5bcc <__udivmodsi4_ep>

00005bb2 <__udivmodsi4_loop>:
    5bb2:	aa 1f       	adc	r26, r26
    5bb4:	bb 1f       	adc	r27, r27
    5bb6:	ee 1f       	adc	r30, r30
    5bb8:	ff 1f       	adc	r31, r31
    5bba:	a2 17       	cp	r26, r18
    5bbc:	b3 07       	cpc	r27, r19
    5bbe:	e4 07       	cpc	r30, r20
    5bc0:	f5 07       	cpc	r31, r21
    5bc2:	20 f0       	brcs	.+8      	; 0x5bcc <__udivmodsi4_ep>
    5bc4:	a2 1b       	sub	r26, r18
    5bc6:	b3 0b       	sbc	r27, r19
    5bc8:	e4 0b       	sbc	r30, r20
    5bca:	f5 0b       	sbc	r31, r21

00005bcc <__udivmodsi4_ep>:
    5bcc:	66 1f       	adc	r22, r22
    5bce:	77 1f       	adc	r23, r23
    5bd0:	88 1f       	adc	r24, r24
    5bd2:	99 1f       	adc	r25, r25
    5bd4:	1a 94       	dec	r1
    5bd6:	69 f7       	brne	.-38     	; 0x5bb2 <__udivmodsi4_loop>
    5bd8:	60 95       	com	r22
    5bda:	70 95       	com	r23
    5bdc:	80 95       	com	r24
    5bde:	90 95       	com	r25
    5be0:	9b 01       	movw	r18, r22
    5be2:	ac 01       	movw	r20, r24
    5be4:	bd 01       	movw	r22, r26
    5be6:	cf 01       	movw	r24, r30
    5be8:	08 95       	ret

00005bea <__tablejump2__>:
    5bea:	ee 0f       	add	r30, r30
    5bec:	ff 1f       	adc	r31, r31
    5bee:	88 1f       	adc	r24, r24
    5bf0:	8b bf       	out	0x3b, r24	; 59
    5bf2:	07 90       	elpm	r0, Z+
    5bf4:	f6 91       	elpm	r31, Z
    5bf6:	e0 2d       	mov	r30, r0
    5bf8:	19 94       	eijmp

00005bfa <calloc>:
    5bfa:	0f 93       	push	r16
    5bfc:	1f 93       	push	r17
    5bfe:	cf 93       	push	r28
    5c00:	df 93       	push	r29
    5c02:	86 9f       	mul	r24, r22
    5c04:	80 01       	movw	r16, r0
    5c06:	87 9f       	mul	r24, r23
    5c08:	10 0d       	add	r17, r0
    5c0a:	96 9f       	mul	r25, r22
    5c0c:	10 0d       	add	r17, r0
    5c0e:	11 24       	eor	r1, r1
    5c10:	c8 01       	movw	r24, r16
    5c12:	0d d0       	rcall	.+26     	; 0x5c2e <malloc>
    5c14:	ec 01       	movw	r28, r24
    5c16:	00 97       	sbiw	r24, 0x00	; 0
    5c18:	21 f0       	breq	.+8      	; 0x5c22 <calloc+0x28>
    5c1a:	a8 01       	movw	r20, r16
    5c1c:	60 e0       	ldi	r22, 0x00	; 0
    5c1e:	70 e0       	ldi	r23, 0x00	; 0
    5c20:	34 d1       	rcall	.+616    	; 0x5e8a <memset>
    5c22:	ce 01       	movw	r24, r28
    5c24:	df 91       	pop	r29
    5c26:	cf 91       	pop	r28
    5c28:	1f 91       	pop	r17
    5c2a:	0f 91       	pop	r16
    5c2c:	08 95       	ret

00005c2e <malloc>:
    5c2e:	0f 93       	push	r16
    5c30:	1f 93       	push	r17
    5c32:	cf 93       	push	r28
    5c34:	df 93       	push	r29
    5c36:	82 30       	cpi	r24, 0x02	; 2
    5c38:	91 05       	cpc	r25, r1
    5c3a:	10 f4       	brcc	.+4      	; 0x5c40 <malloc+0x12>
    5c3c:	82 e0       	ldi	r24, 0x02	; 2
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	e0 91 05 1a 	lds	r30, 0x1A05	; 0x801a05 <__flp>
    5c44:	f0 91 06 1a 	lds	r31, 0x1A06	; 0x801a06 <__flp+0x1>
    5c48:	20 e0       	ldi	r18, 0x00	; 0
    5c4a:	30 e0       	ldi	r19, 0x00	; 0
    5c4c:	a0 e0       	ldi	r26, 0x00	; 0
    5c4e:	b0 e0       	ldi	r27, 0x00	; 0
    5c50:	30 97       	sbiw	r30, 0x00	; 0
    5c52:	19 f1       	breq	.+70     	; 0x5c9a <malloc+0x6c>
    5c54:	40 81       	ld	r20, Z
    5c56:	51 81       	ldd	r21, Z+1	; 0x01
    5c58:	02 81       	ldd	r16, Z+2	; 0x02
    5c5a:	13 81       	ldd	r17, Z+3	; 0x03
    5c5c:	48 17       	cp	r20, r24
    5c5e:	59 07       	cpc	r21, r25
    5c60:	c8 f0       	brcs	.+50     	; 0x5c94 <malloc+0x66>
    5c62:	84 17       	cp	r24, r20
    5c64:	95 07       	cpc	r25, r21
    5c66:	69 f4       	brne	.+26     	; 0x5c82 <malloc+0x54>
    5c68:	10 97       	sbiw	r26, 0x00	; 0
    5c6a:	31 f0       	breq	.+12     	; 0x5c78 <malloc+0x4a>
    5c6c:	12 96       	adiw	r26, 0x02	; 2
    5c6e:	0c 93       	st	X, r16
    5c70:	12 97       	sbiw	r26, 0x02	; 2
    5c72:	13 96       	adiw	r26, 0x03	; 3
    5c74:	1c 93       	st	X, r17
    5c76:	27 c0       	rjmp	.+78     	; 0x5cc6 <malloc+0x98>
    5c78:	00 93 05 1a 	sts	0x1A05, r16	; 0x801a05 <__flp>
    5c7c:	10 93 06 1a 	sts	0x1A06, r17	; 0x801a06 <__flp+0x1>
    5c80:	22 c0       	rjmp	.+68     	; 0x5cc6 <malloc+0x98>
    5c82:	21 15       	cp	r18, r1
    5c84:	31 05       	cpc	r19, r1
    5c86:	19 f0       	breq	.+6      	; 0x5c8e <malloc+0x60>
    5c88:	42 17       	cp	r20, r18
    5c8a:	53 07       	cpc	r21, r19
    5c8c:	18 f4       	brcc	.+6      	; 0x5c94 <malloc+0x66>
    5c8e:	9a 01       	movw	r18, r20
    5c90:	bd 01       	movw	r22, r26
    5c92:	ef 01       	movw	r28, r30
    5c94:	df 01       	movw	r26, r30
    5c96:	f8 01       	movw	r30, r16
    5c98:	db cf       	rjmp	.-74     	; 0x5c50 <malloc+0x22>
    5c9a:	21 15       	cp	r18, r1
    5c9c:	31 05       	cpc	r19, r1
    5c9e:	f9 f0       	breq	.+62     	; 0x5cde <malloc+0xb0>
    5ca0:	28 1b       	sub	r18, r24
    5ca2:	39 0b       	sbc	r19, r25
    5ca4:	24 30       	cpi	r18, 0x04	; 4
    5ca6:	31 05       	cpc	r19, r1
    5ca8:	80 f4       	brcc	.+32     	; 0x5cca <malloc+0x9c>
    5caa:	8a 81       	ldd	r24, Y+2	; 0x02
    5cac:	9b 81       	ldd	r25, Y+3	; 0x03
    5cae:	61 15       	cp	r22, r1
    5cb0:	71 05       	cpc	r23, r1
    5cb2:	21 f0       	breq	.+8      	; 0x5cbc <malloc+0x8e>
    5cb4:	fb 01       	movw	r30, r22
    5cb6:	93 83       	std	Z+3, r25	; 0x03
    5cb8:	82 83       	std	Z+2, r24	; 0x02
    5cba:	04 c0       	rjmp	.+8      	; 0x5cc4 <malloc+0x96>
    5cbc:	90 93 06 1a 	sts	0x1A06, r25	; 0x801a06 <__flp+0x1>
    5cc0:	80 93 05 1a 	sts	0x1A05, r24	; 0x801a05 <__flp>
    5cc4:	fe 01       	movw	r30, r28
    5cc6:	32 96       	adiw	r30, 0x02	; 2
    5cc8:	44 c0       	rjmp	.+136    	; 0x5d52 <malloc+0x124>
    5cca:	fe 01       	movw	r30, r28
    5ccc:	e2 0f       	add	r30, r18
    5cce:	f3 1f       	adc	r31, r19
    5cd0:	81 93       	st	Z+, r24
    5cd2:	91 93       	st	Z+, r25
    5cd4:	22 50       	subi	r18, 0x02	; 2
    5cd6:	31 09       	sbc	r19, r1
    5cd8:	39 83       	std	Y+1, r19	; 0x01
    5cda:	28 83       	st	Y, r18
    5cdc:	3a c0       	rjmp	.+116    	; 0x5d52 <malloc+0x124>
    5cde:	20 91 03 1a 	lds	r18, 0x1A03	; 0x801a03 <__brkval>
    5ce2:	30 91 04 1a 	lds	r19, 0x1A04	; 0x801a04 <__brkval+0x1>
    5ce6:	23 2b       	or	r18, r19
    5ce8:	41 f4       	brne	.+16     	; 0x5cfa <malloc+0xcc>
    5cea:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5cee:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5cf2:	30 93 04 1a 	sts	0x1A04, r19	; 0x801a04 <__brkval+0x1>
    5cf6:	20 93 03 1a 	sts	0x1A03, r18	; 0x801a03 <__brkval>
    5cfa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5cfe:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5d02:	21 15       	cp	r18, r1
    5d04:	31 05       	cpc	r19, r1
    5d06:	41 f4       	brne	.+16     	; 0x5d18 <malloc+0xea>
    5d08:	2d b7       	in	r18, 0x3d	; 61
    5d0a:	3e b7       	in	r19, 0x3e	; 62
    5d0c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5d10:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5d14:	24 1b       	sub	r18, r20
    5d16:	35 0b       	sbc	r19, r21
    5d18:	e0 91 03 1a 	lds	r30, 0x1A03	; 0x801a03 <__brkval>
    5d1c:	f0 91 04 1a 	lds	r31, 0x1A04	; 0x801a04 <__brkval+0x1>
    5d20:	e2 17       	cp	r30, r18
    5d22:	f3 07       	cpc	r31, r19
    5d24:	a0 f4       	brcc	.+40     	; 0x5d4e <malloc+0x120>
    5d26:	2e 1b       	sub	r18, r30
    5d28:	3f 0b       	sbc	r19, r31
    5d2a:	28 17       	cp	r18, r24
    5d2c:	39 07       	cpc	r19, r25
    5d2e:	78 f0       	brcs	.+30     	; 0x5d4e <malloc+0x120>
    5d30:	ac 01       	movw	r20, r24
    5d32:	4e 5f       	subi	r20, 0xFE	; 254
    5d34:	5f 4f       	sbci	r21, 0xFF	; 255
    5d36:	24 17       	cp	r18, r20
    5d38:	35 07       	cpc	r19, r21
    5d3a:	48 f0       	brcs	.+18     	; 0x5d4e <malloc+0x120>
    5d3c:	4e 0f       	add	r20, r30
    5d3e:	5f 1f       	adc	r21, r31
    5d40:	50 93 04 1a 	sts	0x1A04, r21	; 0x801a04 <__brkval+0x1>
    5d44:	40 93 03 1a 	sts	0x1A03, r20	; 0x801a03 <__brkval>
    5d48:	81 93       	st	Z+, r24
    5d4a:	91 93       	st	Z+, r25
    5d4c:	02 c0       	rjmp	.+4      	; 0x5d52 <malloc+0x124>
    5d4e:	e0 e0       	ldi	r30, 0x00	; 0
    5d50:	f0 e0       	ldi	r31, 0x00	; 0
    5d52:	cf 01       	movw	r24, r30
    5d54:	df 91       	pop	r29
    5d56:	cf 91       	pop	r28
    5d58:	1f 91       	pop	r17
    5d5a:	0f 91       	pop	r16
    5d5c:	08 95       	ret

00005d5e <free>:
    5d5e:	cf 93       	push	r28
    5d60:	df 93       	push	r29
    5d62:	00 97       	sbiw	r24, 0x00	; 0
    5d64:	09 f4       	brne	.+2      	; 0x5d68 <free+0xa>
    5d66:	81 c0       	rjmp	.+258    	; 0x5e6a <free+0x10c>
    5d68:	fc 01       	movw	r30, r24
    5d6a:	32 97       	sbiw	r30, 0x02	; 2
    5d6c:	13 82       	std	Z+3, r1	; 0x03
    5d6e:	12 82       	std	Z+2, r1	; 0x02
    5d70:	a0 91 05 1a 	lds	r26, 0x1A05	; 0x801a05 <__flp>
    5d74:	b0 91 06 1a 	lds	r27, 0x1A06	; 0x801a06 <__flp+0x1>
    5d78:	10 97       	sbiw	r26, 0x00	; 0
    5d7a:	81 f4       	brne	.+32     	; 0x5d9c <free+0x3e>
    5d7c:	20 81       	ld	r18, Z
    5d7e:	31 81       	ldd	r19, Z+1	; 0x01
    5d80:	82 0f       	add	r24, r18
    5d82:	93 1f       	adc	r25, r19
    5d84:	20 91 03 1a 	lds	r18, 0x1A03	; 0x801a03 <__brkval>
    5d88:	30 91 04 1a 	lds	r19, 0x1A04	; 0x801a04 <__brkval+0x1>
    5d8c:	28 17       	cp	r18, r24
    5d8e:	39 07       	cpc	r19, r25
    5d90:	51 f5       	brne	.+84     	; 0x5de6 <free+0x88>
    5d92:	f0 93 04 1a 	sts	0x1A04, r31	; 0x801a04 <__brkval+0x1>
    5d96:	e0 93 03 1a 	sts	0x1A03, r30	; 0x801a03 <__brkval>
    5d9a:	67 c0       	rjmp	.+206    	; 0x5e6a <free+0x10c>
    5d9c:	ed 01       	movw	r28, r26
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	ce 17       	cp	r28, r30
    5da4:	df 07       	cpc	r29, r31
    5da6:	40 f4       	brcc	.+16     	; 0x5db8 <free+0x5a>
    5da8:	4a 81       	ldd	r20, Y+2	; 0x02
    5daa:	5b 81       	ldd	r21, Y+3	; 0x03
    5dac:	9e 01       	movw	r18, r28
    5dae:	41 15       	cp	r20, r1
    5db0:	51 05       	cpc	r21, r1
    5db2:	f1 f0       	breq	.+60     	; 0x5df0 <free+0x92>
    5db4:	ea 01       	movw	r28, r20
    5db6:	f5 cf       	rjmp	.-22     	; 0x5da2 <free+0x44>
    5db8:	d3 83       	std	Z+3, r29	; 0x03
    5dba:	c2 83       	std	Z+2, r28	; 0x02
    5dbc:	40 81       	ld	r20, Z
    5dbe:	51 81       	ldd	r21, Z+1	; 0x01
    5dc0:	84 0f       	add	r24, r20
    5dc2:	95 1f       	adc	r25, r21
    5dc4:	c8 17       	cp	r28, r24
    5dc6:	d9 07       	cpc	r29, r25
    5dc8:	59 f4       	brne	.+22     	; 0x5de0 <free+0x82>
    5dca:	88 81       	ld	r24, Y
    5dcc:	99 81       	ldd	r25, Y+1	; 0x01
    5dce:	84 0f       	add	r24, r20
    5dd0:	95 1f       	adc	r25, r21
    5dd2:	02 96       	adiw	r24, 0x02	; 2
    5dd4:	91 83       	std	Z+1, r25	; 0x01
    5dd6:	80 83       	st	Z, r24
    5dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    5dda:	9b 81       	ldd	r25, Y+3	; 0x03
    5ddc:	93 83       	std	Z+3, r25	; 0x03
    5dde:	82 83       	std	Z+2, r24	; 0x02
    5de0:	21 15       	cp	r18, r1
    5de2:	31 05       	cpc	r19, r1
    5de4:	29 f4       	brne	.+10     	; 0x5df0 <free+0x92>
    5de6:	f0 93 06 1a 	sts	0x1A06, r31	; 0x801a06 <__flp+0x1>
    5dea:	e0 93 05 1a 	sts	0x1A05, r30	; 0x801a05 <__flp>
    5dee:	3d c0       	rjmp	.+122    	; 0x5e6a <free+0x10c>
    5df0:	e9 01       	movw	r28, r18
    5df2:	fb 83       	std	Y+3, r31	; 0x03
    5df4:	ea 83       	std	Y+2, r30	; 0x02
    5df6:	49 91       	ld	r20, Y+
    5df8:	59 91       	ld	r21, Y+
    5dfa:	c4 0f       	add	r28, r20
    5dfc:	d5 1f       	adc	r29, r21
    5dfe:	ec 17       	cp	r30, r28
    5e00:	fd 07       	cpc	r31, r29
    5e02:	61 f4       	brne	.+24     	; 0x5e1c <free+0xbe>
    5e04:	80 81       	ld	r24, Z
    5e06:	91 81       	ldd	r25, Z+1	; 0x01
    5e08:	84 0f       	add	r24, r20
    5e0a:	95 1f       	adc	r25, r21
    5e0c:	02 96       	adiw	r24, 0x02	; 2
    5e0e:	e9 01       	movw	r28, r18
    5e10:	99 83       	std	Y+1, r25	; 0x01
    5e12:	88 83       	st	Y, r24
    5e14:	82 81       	ldd	r24, Z+2	; 0x02
    5e16:	93 81       	ldd	r25, Z+3	; 0x03
    5e18:	9b 83       	std	Y+3, r25	; 0x03
    5e1a:	8a 83       	std	Y+2, r24	; 0x02
    5e1c:	e0 e0       	ldi	r30, 0x00	; 0
    5e1e:	f0 e0       	ldi	r31, 0x00	; 0
    5e20:	12 96       	adiw	r26, 0x02	; 2
    5e22:	8d 91       	ld	r24, X+
    5e24:	9c 91       	ld	r25, X
    5e26:	13 97       	sbiw	r26, 0x03	; 3
    5e28:	00 97       	sbiw	r24, 0x00	; 0
    5e2a:	19 f0       	breq	.+6      	; 0x5e32 <free+0xd4>
    5e2c:	fd 01       	movw	r30, r26
    5e2e:	dc 01       	movw	r26, r24
    5e30:	f7 cf       	rjmp	.-18     	; 0x5e20 <free+0xc2>
    5e32:	8d 91       	ld	r24, X+
    5e34:	9c 91       	ld	r25, X
    5e36:	11 97       	sbiw	r26, 0x01	; 1
    5e38:	9d 01       	movw	r18, r26
    5e3a:	2e 5f       	subi	r18, 0xFE	; 254
    5e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e3e:	82 0f       	add	r24, r18
    5e40:	93 1f       	adc	r25, r19
    5e42:	20 91 03 1a 	lds	r18, 0x1A03	; 0x801a03 <__brkval>
    5e46:	30 91 04 1a 	lds	r19, 0x1A04	; 0x801a04 <__brkval+0x1>
    5e4a:	28 17       	cp	r18, r24
    5e4c:	39 07       	cpc	r19, r25
    5e4e:	69 f4       	brne	.+26     	; 0x5e6a <free+0x10c>
    5e50:	30 97       	sbiw	r30, 0x00	; 0
    5e52:	29 f4       	brne	.+10     	; 0x5e5e <free+0x100>
    5e54:	10 92 06 1a 	sts	0x1A06, r1	; 0x801a06 <__flp+0x1>
    5e58:	10 92 05 1a 	sts	0x1A05, r1	; 0x801a05 <__flp>
    5e5c:	02 c0       	rjmp	.+4      	; 0x5e62 <free+0x104>
    5e5e:	13 82       	std	Z+3, r1	; 0x03
    5e60:	12 82       	std	Z+2, r1	; 0x02
    5e62:	b0 93 04 1a 	sts	0x1A04, r27	; 0x801a04 <__brkval+0x1>
    5e66:	a0 93 03 1a 	sts	0x1A03, r26	; 0x801a03 <__brkval>
    5e6a:	df 91       	pop	r29
    5e6c:	cf 91       	pop	r28
    5e6e:	08 95       	ret

00005e70 <abort>:
    5e70:	81 e0       	ldi	r24, 0x01	; 1
    5e72:	90 e0       	ldi	r25, 0x00	; 0
    5e74:	f8 94       	cli
    5e76:	7d c3       	rjmp	.+1786   	; 0x6572 <_exit>

00005e78 <memcpy>:
    5e78:	fb 01       	movw	r30, r22
    5e7a:	dc 01       	movw	r26, r24
    5e7c:	02 c0       	rjmp	.+4      	; 0x5e82 <memcpy+0xa>
    5e7e:	01 90       	ld	r0, Z+
    5e80:	0d 92       	st	X+, r0
    5e82:	41 50       	subi	r20, 0x01	; 1
    5e84:	50 40       	sbci	r21, 0x00	; 0
    5e86:	d8 f7       	brcc	.-10     	; 0x5e7e <memcpy+0x6>
    5e88:	08 95       	ret

00005e8a <memset>:
    5e8a:	dc 01       	movw	r26, r24
    5e8c:	01 c0       	rjmp	.+2      	; 0x5e90 <memset+0x6>
    5e8e:	6d 93       	st	X+, r22
    5e90:	41 50       	subi	r20, 0x01	; 1
    5e92:	50 40       	sbci	r21, 0x00	; 0
    5e94:	e0 f7       	brcc	.-8      	; 0x5e8e <memset+0x4>
    5e96:	08 95       	ret

00005e98 <strcasestr>:
    5e98:	fb 01       	movw	r30, r22
    5e9a:	51 91       	ld	r21, Z+
    5e9c:	55 23       	and	r21, r21
    5e9e:	b1 f0       	breq	.+44     	; 0x5ecc <strcasestr+0x34>
    5ea0:	bf 01       	movw	r22, r30
    5ea2:	dc 01       	movw	r26, r24
    5ea4:	05 2e       	mov	r0, r21
    5ea6:	4d 91       	ld	r20, X+
    5ea8:	44 23       	and	r20, r20
    5eaa:	69 f0       	breq	.+26     	; 0x5ec6 <strcasestr+0x2e>
    5eac:	10 d0       	rcall	.+32     	; 0x5ece <strcasestr+0x36>
    5eae:	d9 f7       	brne	.-10     	; 0x5ea6 <strcasestr+0xe>
    5eb0:	cd 01       	movw	r24, r26
    5eb2:	01 90       	ld	r0, Z+
    5eb4:	00 20       	and	r0, r0
    5eb6:	49 f0       	breq	.+18     	; 0x5eca <strcasestr+0x32>
    5eb8:	4d 91       	ld	r20, X+
    5eba:	41 11       	cpse	r20, r1
    5ebc:	08 d0       	rcall	.+16     	; 0x5ece <strcasestr+0x36>
    5ebe:	c9 f3       	breq	.-14     	; 0x5eb2 <strcasestr+0x1a>
    5ec0:	fb 01       	movw	r30, r22
    5ec2:	41 11       	cpse	r20, r1
    5ec4:	ee cf       	rjmp	.-36     	; 0x5ea2 <strcasestr+0xa>
    5ec6:	81 e0       	ldi	r24, 0x01	; 1
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	01 97       	sbiw	r24, 0x01	; 1
    5ecc:	08 95       	ret
    5ece:	40 25       	eor	r20, r0
    5ed0:	39 f0       	breq	.+14     	; 0x5ee0 <strcasestr+0x48>
    5ed2:	40 32       	cpi	r20, 0x20	; 32
    5ed4:	29 f4       	brne	.+10     	; 0x5ee0 <strcasestr+0x48>
    5ed6:	40 29       	or	r20, r0
    5ed8:	4b 57       	subi	r20, 0x7B	; 123
    5eda:	46 5e       	subi	r20, 0xE6	; 230
    5edc:	08 f0       	brcs	.+2      	; 0x5ee0 <strcasestr+0x48>
    5ede:	18 94       	sez
    5ee0:	08 95       	ret

00005ee2 <strcat>:
    5ee2:	fb 01       	movw	r30, r22
    5ee4:	dc 01       	movw	r26, r24
    5ee6:	0d 90       	ld	r0, X+
    5ee8:	00 20       	and	r0, r0
    5eea:	e9 f7       	brne	.-6      	; 0x5ee6 <strcat+0x4>
    5eec:	11 97       	sbiw	r26, 0x01	; 1
    5eee:	01 90       	ld	r0, Z+
    5ef0:	0d 92       	st	X+, r0
    5ef2:	00 20       	and	r0, r0
    5ef4:	e1 f7       	brne	.-8      	; 0x5eee <strcat+0xc>
    5ef6:	08 95       	ret

00005ef8 <strcpy>:
    5ef8:	fb 01       	movw	r30, r22
    5efa:	dc 01       	movw	r26, r24
    5efc:	01 90       	ld	r0, Z+
    5efe:	0d 92       	st	X+, r0
    5f00:	00 20       	and	r0, r0
    5f02:	e1 f7       	brne	.-8      	; 0x5efc <strcpy+0x4>
    5f04:	08 95       	ret

00005f06 <strncasecmp>:
    5f06:	fb 01       	movw	r30, r22
    5f08:	dc 01       	movw	r26, r24
    5f0a:	41 50       	subi	r20, 0x01	; 1
    5f0c:	50 40       	sbci	r21, 0x00	; 0
    5f0e:	88 f0       	brcs	.+34     	; 0x5f32 <strncasecmp+0x2c>
    5f10:	8d 91       	ld	r24, X+
    5f12:	81 34       	cpi	r24, 0x41	; 65
    5f14:	1c f0       	brlt	.+6      	; 0x5f1c <strncasecmp+0x16>
    5f16:	8b 35       	cpi	r24, 0x5B	; 91
    5f18:	0c f4       	brge	.+2      	; 0x5f1c <strncasecmp+0x16>
    5f1a:	80 5e       	subi	r24, 0xE0	; 224
    5f1c:	61 91       	ld	r22, Z+
    5f1e:	61 34       	cpi	r22, 0x41	; 65
    5f20:	1c f0       	brlt	.+6      	; 0x5f28 <strncasecmp+0x22>
    5f22:	6b 35       	cpi	r22, 0x5B	; 91
    5f24:	0c f4       	brge	.+2      	; 0x5f28 <strncasecmp+0x22>
    5f26:	60 5e       	subi	r22, 0xE0	; 224
    5f28:	86 1b       	sub	r24, r22
    5f2a:	61 11       	cpse	r22, r1
    5f2c:	71 f3       	breq	.-36     	; 0x5f0a <strncasecmp+0x4>
    5f2e:	99 0b       	sbc	r25, r25
    5f30:	08 95       	ret
    5f32:	88 1b       	sub	r24, r24
    5f34:	fc cf       	rjmp	.-8      	; 0x5f2e <strncasecmp+0x28>

00005f36 <printf>:
    5f36:	cf 93       	push	r28
    5f38:	df 93       	push	r29
    5f3a:	cd b7       	in	r28, 0x3d	; 61
    5f3c:	de b7       	in	r29, 0x3e	; 62
    5f3e:	ae 01       	movw	r20, r28
    5f40:	4a 5f       	subi	r20, 0xFA	; 250
    5f42:	5f 4f       	sbci	r21, 0xFF	; 255
    5f44:	fa 01       	movw	r30, r20
    5f46:	61 91       	ld	r22, Z+
    5f48:	71 91       	ld	r23, Z+
    5f4a:	af 01       	movw	r20, r30
    5f4c:	80 91 09 1a 	lds	r24, 0x1A09	; 0x801a09 <__iob+0x2>
    5f50:	90 91 0a 1a 	lds	r25, 0x1A0A	; 0x801a0a <__iob+0x3>
    5f54:	61 d0       	rcall	.+194    	; 0x6018 <vfprintf>
    5f56:	df 91       	pop	r29
    5f58:	cf 91       	pop	r28
    5f5a:	08 95       	ret

00005f5c <puts>:
    5f5c:	0f 93       	push	r16
    5f5e:	1f 93       	push	r17
    5f60:	cf 93       	push	r28
    5f62:	df 93       	push	r29
    5f64:	e0 91 09 1a 	lds	r30, 0x1A09	; 0x801a09 <__iob+0x2>
    5f68:	f0 91 0a 1a 	lds	r31, 0x1A0A	; 0x801a0a <__iob+0x3>
    5f6c:	23 81       	ldd	r18, Z+3	; 0x03
    5f6e:	21 ff       	sbrs	r18, 1
    5f70:	1b c0       	rjmp	.+54     	; 0x5fa8 <puts+0x4c>
    5f72:	8c 01       	movw	r16, r24
    5f74:	d0 e0       	ldi	r29, 0x00	; 0
    5f76:	c0 e0       	ldi	r28, 0x00	; 0
    5f78:	f8 01       	movw	r30, r16
    5f7a:	81 91       	ld	r24, Z+
    5f7c:	8f 01       	movw	r16, r30
    5f7e:	60 91 09 1a 	lds	r22, 0x1A09	; 0x801a09 <__iob+0x2>
    5f82:	70 91 0a 1a 	lds	r23, 0x1A0A	; 0x801a0a <__iob+0x3>
    5f86:	db 01       	movw	r26, r22
    5f88:	18 96       	adiw	r26, 0x08	; 8
    5f8a:	ed 91       	ld	r30, X+
    5f8c:	fc 91       	ld	r31, X
    5f8e:	19 97       	sbiw	r26, 0x09	; 9
    5f90:	88 23       	and	r24, r24
    5f92:	31 f0       	breq	.+12     	; 0x5fa0 <puts+0x44>
    5f94:	19 95       	eicall
    5f96:	89 2b       	or	r24, r25
    5f98:	79 f3       	breq	.-34     	; 0x5f78 <puts+0x1c>
    5f9a:	df ef       	ldi	r29, 0xFF	; 255
    5f9c:	cf ef       	ldi	r28, 0xFF	; 255
    5f9e:	ec cf       	rjmp	.-40     	; 0x5f78 <puts+0x1c>
    5fa0:	8a e0       	ldi	r24, 0x0A	; 10
    5fa2:	19 95       	eicall
    5fa4:	89 2b       	or	r24, r25
    5fa6:	19 f0       	breq	.+6      	; 0x5fae <puts+0x52>
    5fa8:	8f ef       	ldi	r24, 0xFF	; 255
    5faa:	9f ef       	ldi	r25, 0xFF	; 255
    5fac:	02 c0       	rjmp	.+4      	; 0x5fb2 <puts+0x56>
    5fae:	8d 2f       	mov	r24, r29
    5fb0:	9c 2f       	mov	r25, r28
    5fb2:	df 91       	pop	r29
    5fb4:	cf 91       	pop	r28
    5fb6:	1f 91       	pop	r17
    5fb8:	0f 91       	pop	r16
    5fba:	08 95       	ret

00005fbc <sprintf>:
    5fbc:	0f 93       	push	r16
    5fbe:	1f 93       	push	r17
    5fc0:	cf 93       	push	r28
    5fc2:	df 93       	push	r29
    5fc4:	cd b7       	in	r28, 0x3d	; 61
    5fc6:	de b7       	in	r29, 0x3e	; 62
    5fc8:	2e 97       	sbiw	r28, 0x0e	; 14
    5fca:	0f b6       	in	r0, 0x3f	; 63
    5fcc:	f8 94       	cli
    5fce:	de bf       	out	0x3e, r29	; 62
    5fd0:	0f be       	out	0x3f, r0	; 63
    5fd2:	cd bf       	out	0x3d, r28	; 61
    5fd4:	0e 89       	ldd	r16, Y+22	; 0x16
    5fd6:	1f 89       	ldd	r17, Y+23	; 0x17
    5fd8:	86 e0       	ldi	r24, 0x06	; 6
    5fda:	8c 83       	std	Y+4, r24	; 0x04
    5fdc:	1a 83       	std	Y+2, r17	; 0x02
    5fde:	09 83       	std	Y+1, r16	; 0x01
    5fe0:	8f ef       	ldi	r24, 0xFF	; 255
    5fe2:	9f e7       	ldi	r25, 0x7F	; 127
    5fe4:	9e 83       	std	Y+6, r25	; 0x06
    5fe6:	8d 83       	std	Y+5, r24	; 0x05
    5fe8:	ae 01       	movw	r20, r28
    5fea:	46 5e       	subi	r20, 0xE6	; 230
    5fec:	5f 4f       	sbci	r21, 0xFF	; 255
    5fee:	68 8d       	ldd	r22, Y+24	; 0x18
    5ff0:	79 8d       	ldd	r23, Y+25	; 0x19
    5ff2:	ce 01       	movw	r24, r28
    5ff4:	01 96       	adiw	r24, 0x01	; 1
    5ff6:	10 d0       	rcall	.+32     	; 0x6018 <vfprintf>
    5ff8:	ef 81       	ldd	r30, Y+7	; 0x07
    5ffa:	f8 85       	ldd	r31, Y+8	; 0x08
    5ffc:	e0 0f       	add	r30, r16
    5ffe:	f1 1f       	adc	r31, r17
    6000:	10 82       	st	Z, r1
    6002:	2e 96       	adiw	r28, 0x0e	; 14
    6004:	0f b6       	in	r0, 0x3f	; 63
    6006:	f8 94       	cli
    6008:	de bf       	out	0x3e, r29	; 62
    600a:	0f be       	out	0x3f, r0	; 63
    600c:	cd bf       	out	0x3d, r28	; 61
    600e:	df 91       	pop	r29
    6010:	cf 91       	pop	r28
    6012:	1f 91       	pop	r17
    6014:	0f 91       	pop	r16
    6016:	08 95       	ret

00006018 <vfprintf>:
    6018:	2f 92       	push	r2
    601a:	3f 92       	push	r3
    601c:	4f 92       	push	r4
    601e:	5f 92       	push	r5
    6020:	6f 92       	push	r6
    6022:	7f 92       	push	r7
    6024:	8f 92       	push	r8
    6026:	9f 92       	push	r9
    6028:	af 92       	push	r10
    602a:	bf 92       	push	r11
    602c:	cf 92       	push	r12
    602e:	df 92       	push	r13
    6030:	ef 92       	push	r14
    6032:	ff 92       	push	r15
    6034:	0f 93       	push	r16
    6036:	1f 93       	push	r17
    6038:	cf 93       	push	r28
    603a:	df 93       	push	r29
    603c:	cd b7       	in	r28, 0x3d	; 61
    603e:	de b7       	in	r29, 0x3e	; 62
    6040:	2b 97       	sbiw	r28, 0x0b	; 11
    6042:	0f b6       	in	r0, 0x3f	; 63
    6044:	f8 94       	cli
    6046:	de bf       	out	0x3e, r29	; 62
    6048:	0f be       	out	0x3f, r0	; 63
    604a:	cd bf       	out	0x3d, r28	; 61
    604c:	6c 01       	movw	r12, r24
    604e:	7b 01       	movw	r14, r22
    6050:	8a 01       	movw	r16, r20
    6052:	fc 01       	movw	r30, r24
    6054:	17 82       	std	Z+7, r1	; 0x07
    6056:	16 82       	std	Z+6, r1	; 0x06
    6058:	83 81       	ldd	r24, Z+3	; 0x03
    605a:	81 ff       	sbrs	r24, 1
    605c:	bf c1       	rjmp	.+894    	; 0x63dc <vfprintf+0x3c4>
    605e:	ce 01       	movw	r24, r28
    6060:	01 96       	adiw	r24, 0x01	; 1
    6062:	3c 01       	movw	r6, r24
    6064:	f6 01       	movw	r30, r12
    6066:	93 81       	ldd	r25, Z+3	; 0x03
    6068:	f7 01       	movw	r30, r14
    606a:	93 fd       	sbrc	r25, 3
    606c:	85 91       	lpm	r24, Z+
    606e:	93 ff       	sbrs	r25, 3
    6070:	81 91       	ld	r24, Z+
    6072:	7f 01       	movw	r14, r30
    6074:	88 23       	and	r24, r24
    6076:	09 f4       	brne	.+2      	; 0x607a <vfprintf+0x62>
    6078:	ad c1       	rjmp	.+858    	; 0x63d4 <vfprintf+0x3bc>
    607a:	85 32       	cpi	r24, 0x25	; 37
    607c:	39 f4       	brne	.+14     	; 0x608c <vfprintf+0x74>
    607e:	93 fd       	sbrc	r25, 3
    6080:	85 91       	lpm	r24, Z+
    6082:	93 ff       	sbrs	r25, 3
    6084:	81 91       	ld	r24, Z+
    6086:	7f 01       	movw	r14, r30
    6088:	85 32       	cpi	r24, 0x25	; 37
    608a:	21 f4       	brne	.+8      	; 0x6094 <vfprintf+0x7c>
    608c:	b6 01       	movw	r22, r12
    608e:	90 e0       	ldi	r25, 0x00	; 0
    6090:	d6 d1       	rcall	.+940    	; 0x643e <fputc>
    6092:	e8 cf       	rjmp	.-48     	; 0x6064 <vfprintf+0x4c>
    6094:	91 2c       	mov	r9, r1
    6096:	21 2c       	mov	r2, r1
    6098:	31 2c       	mov	r3, r1
    609a:	ff e1       	ldi	r31, 0x1F	; 31
    609c:	f3 15       	cp	r31, r3
    609e:	d8 f0       	brcs	.+54     	; 0x60d6 <vfprintf+0xbe>
    60a0:	8b 32       	cpi	r24, 0x2B	; 43
    60a2:	79 f0       	breq	.+30     	; 0x60c2 <vfprintf+0xaa>
    60a4:	38 f4       	brcc	.+14     	; 0x60b4 <vfprintf+0x9c>
    60a6:	80 32       	cpi	r24, 0x20	; 32
    60a8:	79 f0       	breq	.+30     	; 0x60c8 <vfprintf+0xb0>
    60aa:	83 32       	cpi	r24, 0x23	; 35
    60ac:	a1 f4       	brne	.+40     	; 0x60d6 <vfprintf+0xbe>
    60ae:	23 2d       	mov	r18, r3
    60b0:	20 61       	ori	r18, 0x10	; 16
    60b2:	1d c0       	rjmp	.+58     	; 0x60ee <vfprintf+0xd6>
    60b4:	8d 32       	cpi	r24, 0x2D	; 45
    60b6:	61 f0       	breq	.+24     	; 0x60d0 <vfprintf+0xb8>
    60b8:	80 33       	cpi	r24, 0x30	; 48
    60ba:	69 f4       	brne	.+26     	; 0x60d6 <vfprintf+0xbe>
    60bc:	23 2d       	mov	r18, r3
    60be:	21 60       	ori	r18, 0x01	; 1
    60c0:	16 c0       	rjmp	.+44     	; 0x60ee <vfprintf+0xd6>
    60c2:	83 2d       	mov	r24, r3
    60c4:	82 60       	ori	r24, 0x02	; 2
    60c6:	38 2e       	mov	r3, r24
    60c8:	e3 2d       	mov	r30, r3
    60ca:	e4 60       	ori	r30, 0x04	; 4
    60cc:	3e 2e       	mov	r3, r30
    60ce:	2a c0       	rjmp	.+84     	; 0x6124 <vfprintf+0x10c>
    60d0:	f3 2d       	mov	r31, r3
    60d2:	f8 60       	ori	r31, 0x08	; 8
    60d4:	1d c0       	rjmp	.+58     	; 0x6110 <vfprintf+0xf8>
    60d6:	37 fc       	sbrc	r3, 7
    60d8:	2d c0       	rjmp	.+90     	; 0x6134 <vfprintf+0x11c>
    60da:	20 ed       	ldi	r18, 0xD0	; 208
    60dc:	28 0f       	add	r18, r24
    60de:	2a 30       	cpi	r18, 0x0A	; 10
    60e0:	40 f0       	brcs	.+16     	; 0x60f2 <vfprintf+0xda>
    60e2:	8e 32       	cpi	r24, 0x2E	; 46
    60e4:	b9 f4       	brne	.+46     	; 0x6114 <vfprintf+0xfc>
    60e6:	36 fc       	sbrc	r3, 6
    60e8:	75 c1       	rjmp	.+746    	; 0x63d4 <vfprintf+0x3bc>
    60ea:	23 2d       	mov	r18, r3
    60ec:	20 64       	ori	r18, 0x40	; 64
    60ee:	32 2e       	mov	r3, r18
    60f0:	19 c0       	rjmp	.+50     	; 0x6124 <vfprintf+0x10c>
    60f2:	36 fe       	sbrs	r3, 6
    60f4:	06 c0       	rjmp	.+12     	; 0x6102 <vfprintf+0xea>
    60f6:	8a e0       	ldi	r24, 0x0A	; 10
    60f8:	98 9e       	mul	r9, r24
    60fa:	20 0d       	add	r18, r0
    60fc:	11 24       	eor	r1, r1
    60fe:	92 2e       	mov	r9, r18
    6100:	11 c0       	rjmp	.+34     	; 0x6124 <vfprintf+0x10c>
    6102:	ea e0       	ldi	r30, 0x0A	; 10
    6104:	2e 9e       	mul	r2, r30
    6106:	20 0d       	add	r18, r0
    6108:	11 24       	eor	r1, r1
    610a:	22 2e       	mov	r2, r18
    610c:	f3 2d       	mov	r31, r3
    610e:	f0 62       	ori	r31, 0x20	; 32
    6110:	3f 2e       	mov	r3, r31
    6112:	08 c0       	rjmp	.+16     	; 0x6124 <vfprintf+0x10c>
    6114:	8c 36       	cpi	r24, 0x6C	; 108
    6116:	21 f4       	brne	.+8      	; 0x6120 <vfprintf+0x108>
    6118:	83 2d       	mov	r24, r3
    611a:	80 68       	ori	r24, 0x80	; 128
    611c:	38 2e       	mov	r3, r24
    611e:	02 c0       	rjmp	.+4      	; 0x6124 <vfprintf+0x10c>
    6120:	88 36       	cpi	r24, 0x68	; 104
    6122:	41 f4       	brne	.+16     	; 0x6134 <vfprintf+0x11c>
    6124:	f7 01       	movw	r30, r14
    6126:	93 fd       	sbrc	r25, 3
    6128:	85 91       	lpm	r24, Z+
    612a:	93 ff       	sbrs	r25, 3
    612c:	81 91       	ld	r24, Z+
    612e:	7f 01       	movw	r14, r30
    6130:	81 11       	cpse	r24, r1
    6132:	b3 cf       	rjmp	.-154    	; 0x609a <vfprintf+0x82>
    6134:	98 2f       	mov	r25, r24
    6136:	9f 7d       	andi	r25, 0xDF	; 223
    6138:	95 54       	subi	r25, 0x45	; 69
    613a:	93 30       	cpi	r25, 0x03	; 3
    613c:	28 f4       	brcc	.+10     	; 0x6148 <vfprintf+0x130>
    613e:	0c 5f       	subi	r16, 0xFC	; 252
    6140:	1f 4f       	sbci	r17, 0xFF	; 255
    6142:	9f e3       	ldi	r25, 0x3F	; 63
    6144:	99 83       	std	Y+1, r25	; 0x01
    6146:	0d c0       	rjmp	.+26     	; 0x6162 <vfprintf+0x14a>
    6148:	83 36       	cpi	r24, 0x63	; 99
    614a:	31 f0       	breq	.+12     	; 0x6158 <vfprintf+0x140>
    614c:	83 37       	cpi	r24, 0x73	; 115
    614e:	71 f0       	breq	.+28     	; 0x616c <vfprintf+0x154>
    6150:	83 35       	cpi	r24, 0x53	; 83
    6152:	09 f0       	breq	.+2      	; 0x6156 <vfprintf+0x13e>
    6154:	55 c0       	rjmp	.+170    	; 0x6200 <vfprintf+0x1e8>
    6156:	20 c0       	rjmp	.+64     	; 0x6198 <vfprintf+0x180>
    6158:	f8 01       	movw	r30, r16
    615a:	80 81       	ld	r24, Z
    615c:	89 83       	std	Y+1, r24	; 0x01
    615e:	0e 5f       	subi	r16, 0xFE	; 254
    6160:	1f 4f       	sbci	r17, 0xFF	; 255
    6162:	88 24       	eor	r8, r8
    6164:	83 94       	inc	r8
    6166:	91 2c       	mov	r9, r1
    6168:	53 01       	movw	r10, r6
    616a:	12 c0       	rjmp	.+36     	; 0x6190 <vfprintf+0x178>
    616c:	28 01       	movw	r4, r16
    616e:	f2 e0       	ldi	r31, 0x02	; 2
    6170:	4f 0e       	add	r4, r31
    6172:	51 1c       	adc	r5, r1
    6174:	f8 01       	movw	r30, r16
    6176:	a0 80       	ld	r10, Z
    6178:	b1 80       	ldd	r11, Z+1	; 0x01
    617a:	36 fe       	sbrs	r3, 6
    617c:	03 c0       	rjmp	.+6      	; 0x6184 <vfprintf+0x16c>
    617e:	69 2d       	mov	r22, r9
    6180:	70 e0       	ldi	r23, 0x00	; 0
    6182:	02 c0       	rjmp	.+4      	; 0x6188 <vfprintf+0x170>
    6184:	6f ef       	ldi	r22, 0xFF	; 255
    6186:	7f ef       	ldi	r23, 0xFF	; 255
    6188:	c5 01       	movw	r24, r10
    618a:	4e d1       	rcall	.+668    	; 0x6428 <strnlen>
    618c:	4c 01       	movw	r8, r24
    618e:	82 01       	movw	r16, r4
    6190:	f3 2d       	mov	r31, r3
    6192:	ff 77       	andi	r31, 0x7F	; 127
    6194:	3f 2e       	mov	r3, r31
    6196:	15 c0       	rjmp	.+42     	; 0x61c2 <vfprintf+0x1aa>
    6198:	28 01       	movw	r4, r16
    619a:	22 e0       	ldi	r18, 0x02	; 2
    619c:	42 0e       	add	r4, r18
    619e:	51 1c       	adc	r5, r1
    61a0:	f8 01       	movw	r30, r16
    61a2:	a0 80       	ld	r10, Z
    61a4:	b1 80       	ldd	r11, Z+1	; 0x01
    61a6:	36 fe       	sbrs	r3, 6
    61a8:	03 c0       	rjmp	.+6      	; 0x61b0 <vfprintf+0x198>
    61aa:	69 2d       	mov	r22, r9
    61ac:	70 e0       	ldi	r23, 0x00	; 0
    61ae:	02 c0       	rjmp	.+4      	; 0x61b4 <vfprintf+0x19c>
    61b0:	6f ef       	ldi	r22, 0xFF	; 255
    61b2:	7f ef       	ldi	r23, 0xFF	; 255
    61b4:	c5 01       	movw	r24, r10
    61b6:	2d d1       	rcall	.+602    	; 0x6412 <strnlen_P>
    61b8:	4c 01       	movw	r8, r24
    61ba:	f3 2d       	mov	r31, r3
    61bc:	f0 68       	ori	r31, 0x80	; 128
    61be:	3f 2e       	mov	r3, r31
    61c0:	82 01       	movw	r16, r4
    61c2:	33 fc       	sbrc	r3, 3
    61c4:	19 c0       	rjmp	.+50     	; 0x61f8 <vfprintf+0x1e0>
    61c6:	82 2d       	mov	r24, r2
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	88 16       	cp	r8, r24
    61cc:	99 06       	cpc	r9, r25
    61ce:	a0 f4       	brcc	.+40     	; 0x61f8 <vfprintf+0x1e0>
    61d0:	b6 01       	movw	r22, r12
    61d2:	80 e2       	ldi	r24, 0x20	; 32
    61d4:	90 e0       	ldi	r25, 0x00	; 0
    61d6:	33 d1       	rcall	.+614    	; 0x643e <fputc>
    61d8:	2a 94       	dec	r2
    61da:	f5 cf       	rjmp	.-22     	; 0x61c6 <vfprintf+0x1ae>
    61dc:	f5 01       	movw	r30, r10
    61de:	37 fc       	sbrc	r3, 7
    61e0:	85 91       	lpm	r24, Z+
    61e2:	37 fe       	sbrs	r3, 7
    61e4:	81 91       	ld	r24, Z+
    61e6:	5f 01       	movw	r10, r30
    61e8:	b6 01       	movw	r22, r12
    61ea:	90 e0       	ldi	r25, 0x00	; 0
    61ec:	28 d1       	rcall	.+592    	; 0x643e <fputc>
    61ee:	21 10       	cpse	r2, r1
    61f0:	2a 94       	dec	r2
    61f2:	21 e0       	ldi	r18, 0x01	; 1
    61f4:	82 1a       	sub	r8, r18
    61f6:	91 08       	sbc	r9, r1
    61f8:	81 14       	cp	r8, r1
    61fa:	91 04       	cpc	r9, r1
    61fc:	79 f7       	brne	.-34     	; 0x61dc <vfprintf+0x1c4>
    61fe:	e1 c0       	rjmp	.+450    	; 0x63c2 <vfprintf+0x3aa>
    6200:	84 36       	cpi	r24, 0x64	; 100
    6202:	11 f0       	breq	.+4      	; 0x6208 <vfprintf+0x1f0>
    6204:	89 36       	cpi	r24, 0x69	; 105
    6206:	39 f5       	brne	.+78     	; 0x6256 <vfprintf+0x23e>
    6208:	f8 01       	movw	r30, r16
    620a:	37 fe       	sbrs	r3, 7
    620c:	07 c0       	rjmp	.+14     	; 0x621c <vfprintf+0x204>
    620e:	60 81       	ld	r22, Z
    6210:	71 81       	ldd	r23, Z+1	; 0x01
    6212:	82 81       	ldd	r24, Z+2	; 0x02
    6214:	93 81       	ldd	r25, Z+3	; 0x03
    6216:	0c 5f       	subi	r16, 0xFC	; 252
    6218:	1f 4f       	sbci	r17, 0xFF	; 255
    621a:	08 c0       	rjmp	.+16     	; 0x622c <vfprintf+0x214>
    621c:	60 81       	ld	r22, Z
    621e:	71 81       	ldd	r23, Z+1	; 0x01
    6220:	07 2e       	mov	r0, r23
    6222:	00 0c       	add	r0, r0
    6224:	88 0b       	sbc	r24, r24
    6226:	99 0b       	sbc	r25, r25
    6228:	0e 5f       	subi	r16, 0xFE	; 254
    622a:	1f 4f       	sbci	r17, 0xFF	; 255
    622c:	f3 2d       	mov	r31, r3
    622e:	ff 76       	andi	r31, 0x6F	; 111
    6230:	3f 2e       	mov	r3, r31
    6232:	97 ff       	sbrs	r25, 7
    6234:	09 c0       	rjmp	.+18     	; 0x6248 <vfprintf+0x230>
    6236:	90 95       	com	r25
    6238:	80 95       	com	r24
    623a:	70 95       	com	r23
    623c:	61 95       	neg	r22
    623e:	7f 4f       	sbci	r23, 0xFF	; 255
    6240:	8f 4f       	sbci	r24, 0xFF	; 255
    6242:	9f 4f       	sbci	r25, 0xFF	; 255
    6244:	f0 68       	ori	r31, 0x80	; 128
    6246:	3f 2e       	mov	r3, r31
    6248:	2a e0       	ldi	r18, 0x0A	; 10
    624a:	30 e0       	ldi	r19, 0x00	; 0
    624c:	a3 01       	movw	r20, r6
    624e:	33 d1       	rcall	.+614    	; 0x64b6 <__ultoa_invert>
    6250:	88 2e       	mov	r8, r24
    6252:	86 18       	sub	r8, r6
    6254:	44 c0       	rjmp	.+136    	; 0x62de <vfprintf+0x2c6>
    6256:	85 37       	cpi	r24, 0x75	; 117
    6258:	31 f4       	brne	.+12     	; 0x6266 <vfprintf+0x24e>
    625a:	23 2d       	mov	r18, r3
    625c:	2f 7e       	andi	r18, 0xEF	; 239
    625e:	b2 2e       	mov	r11, r18
    6260:	2a e0       	ldi	r18, 0x0A	; 10
    6262:	30 e0       	ldi	r19, 0x00	; 0
    6264:	25 c0       	rjmp	.+74     	; 0x62b0 <vfprintf+0x298>
    6266:	93 2d       	mov	r25, r3
    6268:	99 7f       	andi	r25, 0xF9	; 249
    626a:	b9 2e       	mov	r11, r25
    626c:	8f 36       	cpi	r24, 0x6F	; 111
    626e:	c1 f0       	breq	.+48     	; 0x62a0 <vfprintf+0x288>
    6270:	18 f4       	brcc	.+6      	; 0x6278 <vfprintf+0x260>
    6272:	88 35       	cpi	r24, 0x58	; 88
    6274:	79 f0       	breq	.+30     	; 0x6294 <vfprintf+0x27c>
    6276:	ae c0       	rjmp	.+348    	; 0x63d4 <vfprintf+0x3bc>
    6278:	80 37       	cpi	r24, 0x70	; 112
    627a:	19 f0       	breq	.+6      	; 0x6282 <vfprintf+0x26a>
    627c:	88 37       	cpi	r24, 0x78	; 120
    627e:	21 f0       	breq	.+8      	; 0x6288 <vfprintf+0x270>
    6280:	a9 c0       	rjmp	.+338    	; 0x63d4 <vfprintf+0x3bc>
    6282:	e9 2f       	mov	r30, r25
    6284:	e0 61       	ori	r30, 0x10	; 16
    6286:	be 2e       	mov	r11, r30
    6288:	b4 fe       	sbrs	r11, 4
    628a:	0d c0       	rjmp	.+26     	; 0x62a6 <vfprintf+0x28e>
    628c:	fb 2d       	mov	r31, r11
    628e:	f4 60       	ori	r31, 0x04	; 4
    6290:	bf 2e       	mov	r11, r31
    6292:	09 c0       	rjmp	.+18     	; 0x62a6 <vfprintf+0x28e>
    6294:	34 fe       	sbrs	r3, 4
    6296:	0a c0       	rjmp	.+20     	; 0x62ac <vfprintf+0x294>
    6298:	29 2f       	mov	r18, r25
    629a:	26 60       	ori	r18, 0x06	; 6
    629c:	b2 2e       	mov	r11, r18
    629e:	06 c0       	rjmp	.+12     	; 0x62ac <vfprintf+0x294>
    62a0:	28 e0       	ldi	r18, 0x08	; 8
    62a2:	30 e0       	ldi	r19, 0x00	; 0
    62a4:	05 c0       	rjmp	.+10     	; 0x62b0 <vfprintf+0x298>
    62a6:	20 e1       	ldi	r18, 0x10	; 16
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	02 c0       	rjmp	.+4      	; 0x62b0 <vfprintf+0x298>
    62ac:	20 e1       	ldi	r18, 0x10	; 16
    62ae:	32 e0       	ldi	r19, 0x02	; 2
    62b0:	f8 01       	movw	r30, r16
    62b2:	b7 fe       	sbrs	r11, 7
    62b4:	07 c0       	rjmp	.+14     	; 0x62c4 <vfprintf+0x2ac>
    62b6:	60 81       	ld	r22, Z
    62b8:	71 81       	ldd	r23, Z+1	; 0x01
    62ba:	82 81       	ldd	r24, Z+2	; 0x02
    62bc:	93 81       	ldd	r25, Z+3	; 0x03
    62be:	0c 5f       	subi	r16, 0xFC	; 252
    62c0:	1f 4f       	sbci	r17, 0xFF	; 255
    62c2:	06 c0       	rjmp	.+12     	; 0x62d0 <vfprintf+0x2b8>
    62c4:	60 81       	ld	r22, Z
    62c6:	71 81       	ldd	r23, Z+1	; 0x01
    62c8:	80 e0       	ldi	r24, 0x00	; 0
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	0e 5f       	subi	r16, 0xFE	; 254
    62ce:	1f 4f       	sbci	r17, 0xFF	; 255
    62d0:	a3 01       	movw	r20, r6
    62d2:	f1 d0       	rcall	.+482    	; 0x64b6 <__ultoa_invert>
    62d4:	88 2e       	mov	r8, r24
    62d6:	86 18       	sub	r8, r6
    62d8:	fb 2d       	mov	r31, r11
    62da:	ff 77       	andi	r31, 0x7F	; 127
    62dc:	3f 2e       	mov	r3, r31
    62de:	36 fe       	sbrs	r3, 6
    62e0:	0d c0       	rjmp	.+26     	; 0x62fc <vfprintf+0x2e4>
    62e2:	23 2d       	mov	r18, r3
    62e4:	2e 7f       	andi	r18, 0xFE	; 254
    62e6:	a2 2e       	mov	r10, r18
    62e8:	89 14       	cp	r8, r9
    62ea:	58 f4       	brcc	.+22     	; 0x6302 <vfprintf+0x2ea>
    62ec:	34 fe       	sbrs	r3, 4
    62ee:	0b c0       	rjmp	.+22     	; 0x6306 <vfprintf+0x2ee>
    62f0:	32 fc       	sbrc	r3, 2
    62f2:	09 c0       	rjmp	.+18     	; 0x6306 <vfprintf+0x2ee>
    62f4:	83 2d       	mov	r24, r3
    62f6:	8e 7e       	andi	r24, 0xEE	; 238
    62f8:	a8 2e       	mov	r10, r24
    62fa:	05 c0       	rjmp	.+10     	; 0x6306 <vfprintf+0x2ee>
    62fc:	b8 2c       	mov	r11, r8
    62fe:	a3 2c       	mov	r10, r3
    6300:	03 c0       	rjmp	.+6      	; 0x6308 <vfprintf+0x2f0>
    6302:	b8 2c       	mov	r11, r8
    6304:	01 c0       	rjmp	.+2      	; 0x6308 <vfprintf+0x2f0>
    6306:	b9 2c       	mov	r11, r9
    6308:	a4 fe       	sbrs	r10, 4
    630a:	0f c0       	rjmp	.+30     	; 0x632a <vfprintf+0x312>
    630c:	fe 01       	movw	r30, r28
    630e:	e8 0d       	add	r30, r8
    6310:	f1 1d       	adc	r31, r1
    6312:	80 81       	ld	r24, Z
    6314:	80 33       	cpi	r24, 0x30	; 48
    6316:	21 f4       	brne	.+8      	; 0x6320 <vfprintf+0x308>
    6318:	9a 2d       	mov	r25, r10
    631a:	99 7e       	andi	r25, 0xE9	; 233
    631c:	a9 2e       	mov	r10, r25
    631e:	09 c0       	rjmp	.+18     	; 0x6332 <vfprintf+0x31a>
    6320:	a2 fe       	sbrs	r10, 2
    6322:	06 c0       	rjmp	.+12     	; 0x6330 <vfprintf+0x318>
    6324:	b3 94       	inc	r11
    6326:	b3 94       	inc	r11
    6328:	04 c0       	rjmp	.+8      	; 0x6332 <vfprintf+0x31a>
    632a:	8a 2d       	mov	r24, r10
    632c:	86 78       	andi	r24, 0x86	; 134
    632e:	09 f0       	breq	.+2      	; 0x6332 <vfprintf+0x31a>
    6330:	b3 94       	inc	r11
    6332:	a3 fc       	sbrc	r10, 3
    6334:	10 c0       	rjmp	.+32     	; 0x6356 <vfprintf+0x33e>
    6336:	a0 fe       	sbrs	r10, 0
    6338:	06 c0       	rjmp	.+12     	; 0x6346 <vfprintf+0x32e>
    633a:	b2 14       	cp	r11, r2
    633c:	80 f4       	brcc	.+32     	; 0x635e <vfprintf+0x346>
    633e:	28 0c       	add	r2, r8
    6340:	92 2c       	mov	r9, r2
    6342:	9b 18       	sub	r9, r11
    6344:	0d c0       	rjmp	.+26     	; 0x6360 <vfprintf+0x348>
    6346:	b2 14       	cp	r11, r2
    6348:	58 f4       	brcc	.+22     	; 0x6360 <vfprintf+0x348>
    634a:	b6 01       	movw	r22, r12
    634c:	80 e2       	ldi	r24, 0x20	; 32
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	76 d0       	rcall	.+236    	; 0x643e <fputc>
    6352:	b3 94       	inc	r11
    6354:	f8 cf       	rjmp	.-16     	; 0x6346 <vfprintf+0x32e>
    6356:	b2 14       	cp	r11, r2
    6358:	18 f4       	brcc	.+6      	; 0x6360 <vfprintf+0x348>
    635a:	2b 18       	sub	r2, r11
    635c:	02 c0       	rjmp	.+4      	; 0x6362 <vfprintf+0x34a>
    635e:	98 2c       	mov	r9, r8
    6360:	21 2c       	mov	r2, r1
    6362:	a4 fe       	sbrs	r10, 4
    6364:	0f c0       	rjmp	.+30     	; 0x6384 <vfprintf+0x36c>
    6366:	b6 01       	movw	r22, r12
    6368:	80 e3       	ldi	r24, 0x30	; 48
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	68 d0       	rcall	.+208    	; 0x643e <fputc>
    636e:	a2 fe       	sbrs	r10, 2
    6370:	16 c0       	rjmp	.+44     	; 0x639e <vfprintf+0x386>
    6372:	a1 fc       	sbrc	r10, 1
    6374:	03 c0       	rjmp	.+6      	; 0x637c <vfprintf+0x364>
    6376:	88 e7       	ldi	r24, 0x78	; 120
    6378:	90 e0       	ldi	r25, 0x00	; 0
    637a:	02 c0       	rjmp	.+4      	; 0x6380 <vfprintf+0x368>
    637c:	88 e5       	ldi	r24, 0x58	; 88
    637e:	90 e0       	ldi	r25, 0x00	; 0
    6380:	b6 01       	movw	r22, r12
    6382:	0c c0       	rjmp	.+24     	; 0x639c <vfprintf+0x384>
    6384:	8a 2d       	mov	r24, r10
    6386:	86 78       	andi	r24, 0x86	; 134
    6388:	51 f0       	breq	.+20     	; 0x639e <vfprintf+0x386>
    638a:	a1 fe       	sbrs	r10, 1
    638c:	02 c0       	rjmp	.+4      	; 0x6392 <vfprintf+0x37a>
    638e:	8b e2       	ldi	r24, 0x2B	; 43
    6390:	01 c0       	rjmp	.+2      	; 0x6394 <vfprintf+0x37c>
    6392:	80 e2       	ldi	r24, 0x20	; 32
    6394:	a7 fc       	sbrc	r10, 7
    6396:	8d e2       	ldi	r24, 0x2D	; 45
    6398:	b6 01       	movw	r22, r12
    639a:	90 e0       	ldi	r25, 0x00	; 0
    639c:	50 d0       	rcall	.+160    	; 0x643e <fputc>
    639e:	89 14       	cp	r8, r9
    63a0:	30 f4       	brcc	.+12     	; 0x63ae <vfprintf+0x396>
    63a2:	b6 01       	movw	r22, r12
    63a4:	80 e3       	ldi	r24, 0x30	; 48
    63a6:	90 e0       	ldi	r25, 0x00	; 0
    63a8:	4a d0       	rcall	.+148    	; 0x643e <fputc>
    63aa:	9a 94       	dec	r9
    63ac:	f8 cf       	rjmp	.-16     	; 0x639e <vfprintf+0x386>
    63ae:	8a 94       	dec	r8
    63b0:	f3 01       	movw	r30, r6
    63b2:	e8 0d       	add	r30, r8
    63b4:	f1 1d       	adc	r31, r1
    63b6:	80 81       	ld	r24, Z
    63b8:	b6 01       	movw	r22, r12
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	40 d0       	rcall	.+128    	; 0x643e <fputc>
    63be:	81 10       	cpse	r8, r1
    63c0:	f6 cf       	rjmp	.-20     	; 0x63ae <vfprintf+0x396>
    63c2:	22 20       	and	r2, r2
    63c4:	09 f4       	brne	.+2      	; 0x63c8 <vfprintf+0x3b0>
    63c6:	4e ce       	rjmp	.-868    	; 0x6064 <vfprintf+0x4c>
    63c8:	b6 01       	movw	r22, r12
    63ca:	80 e2       	ldi	r24, 0x20	; 32
    63cc:	90 e0       	ldi	r25, 0x00	; 0
    63ce:	37 d0       	rcall	.+110    	; 0x643e <fputc>
    63d0:	2a 94       	dec	r2
    63d2:	f7 cf       	rjmp	.-18     	; 0x63c2 <vfprintf+0x3aa>
    63d4:	f6 01       	movw	r30, r12
    63d6:	86 81       	ldd	r24, Z+6	; 0x06
    63d8:	97 81       	ldd	r25, Z+7	; 0x07
    63da:	02 c0       	rjmp	.+4      	; 0x63e0 <vfprintf+0x3c8>
    63dc:	8f ef       	ldi	r24, 0xFF	; 255
    63de:	9f ef       	ldi	r25, 0xFF	; 255
    63e0:	2b 96       	adiw	r28, 0x0b	; 11
    63e2:	0f b6       	in	r0, 0x3f	; 63
    63e4:	f8 94       	cli
    63e6:	de bf       	out	0x3e, r29	; 62
    63e8:	0f be       	out	0x3f, r0	; 63
    63ea:	cd bf       	out	0x3d, r28	; 61
    63ec:	df 91       	pop	r29
    63ee:	cf 91       	pop	r28
    63f0:	1f 91       	pop	r17
    63f2:	0f 91       	pop	r16
    63f4:	ff 90       	pop	r15
    63f6:	ef 90       	pop	r14
    63f8:	df 90       	pop	r13
    63fa:	cf 90       	pop	r12
    63fc:	bf 90       	pop	r11
    63fe:	af 90       	pop	r10
    6400:	9f 90       	pop	r9
    6402:	8f 90       	pop	r8
    6404:	7f 90       	pop	r7
    6406:	6f 90       	pop	r6
    6408:	5f 90       	pop	r5
    640a:	4f 90       	pop	r4
    640c:	3f 90       	pop	r3
    640e:	2f 90       	pop	r2
    6410:	08 95       	ret

00006412 <strnlen_P>:
    6412:	fc 01       	movw	r30, r24
    6414:	05 90       	lpm	r0, Z+
    6416:	61 50       	subi	r22, 0x01	; 1
    6418:	70 40       	sbci	r23, 0x00	; 0
    641a:	01 10       	cpse	r0, r1
    641c:	d8 f7       	brcc	.-10     	; 0x6414 <strnlen_P+0x2>
    641e:	80 95       	com	r24
    6420:	90 95       	com	r25
    6422:	8e 0f       	add	r24, r30
    6424:	9f 1f       	adc	r25, r31
    6426:	08 95       	ret

00006428 <strnlen>:
    6428:	fc 01       	movw	r30, r24
    642a:	61 50       	subi	r22, 0x01	; 1
    642c:	70 40       	sbci	r23, 0x00	; 0
    642e:	01 90       	ld	r0, Z+
    6430:	01 10       	cpse	r0, r1
    6432:	d8 f7       	brcc	.-10     	; 0x642a <strnlen+0x2>
    6434:	80 95       	com	r24
    6436:	90 95       	com	r25
    6438:	8e 0f       	add	r24, r30
    643a:	9f 1f       	adc	r25, r31
    643c:	08 95       	ret

0000643e <fputc>:
    643e:	0f 93       	push	r16
    6440:	1f 93       	push	r17
    6442:	cf 93       	push	r28
    6444:	df 93       	push	r29
    6446:	fb 01       	movw	r30, r22
    6448:	23 81       	ldd	r18, Z+3	; 0x03
    644a:	21 fd       	sbrc	r18, 1
    644c:	03 c0       	rjmp	.+6      	; 0x6454 <fputc+0x16>
    644e:	8f ef       	ldi	r24, 0xFF	; 255
    6450:	9f ef       	ldi	r25, 0xFF	; 255
    6452:	2c c0       	rjmp	.+88     	; 0x64ac <fputc+0x6e>
    6454:	22 ff       	sbrs	r18, 2
    6456:	16 c0       	rjmp	.+44     	; 0x6484 <fputc+0x46>
    6458:	46 81       	ldd	r20, Z+6	; 0x06
    645a:	57 81       	ldd	r21, Z+7	; 0x07
    645c:	24 81       	ldd	r18, Z+4	; 0x04
    645e:	35 81       	ldd	r19, Z+5	; 0x05
    6460:	42 17       	cp	r20, r18
    6462:	53 07       	cpc	r21, r19
    6464:	44 f4       	brge	.+16     	; 0x6476 <fputc+0x38>
    6466:	a0 81       	ld	r26, Z
    6468:	b1 81       	ldd	r27, Z+1	; 0x01
    646a:	9d 01       	movw	r18, r26
    646c:	2f 5f       	subi	r18, 0xFF	; 255
    646e:	3f 4f       	sbci	r19, 0xFF	; 255
    6470:	31 83       	std	Z+1, r19	; 0x01
    6472:	20 83       	st	Z, r18
    6474:	8c 93       	st	X, r24
    6476:	26 81       	ldd	r18, Z+6	; 0x06
    6478:	37 81       	ldd	r19, Z+7	; 0x07
    647a:	2f 5f       	subi	r18, 0xFF	; 255
    647c:	3f 4f       	sbci	r19, 0xFF	; 255
    647e:	37 83       	std	Z+7, r19	; 0x07
    6480:	26 83       	std	Z+6, r18	; 0x06
    6482:	14 c0       	rjmp	.+40     	; 0x64ac <fputc+0x6e>
    6484:	8b 01       	movw	r16, r22
    6486:	ec 01       	movw	r28, r24
    6488:	fb 01       	movw	r30, r22
    648a:	00 84       	ldd	r0, Z+8	; 0x08
    648c:	f1 85       	ldd	r31, Z+9	; 0x09
    648e:	e0 2d       	mov	r30, r0
    6490:	19 95       	eicall
    6492:	89 2b       	or	r24, r25
    6494:	e1 f6       	brne	.-72     	; 0x644e <fputc+0x10>
    6496:	d8 01       	movw	r26, r16
    6498:	16 96       	adiw	r26, 0x06	; 6
    649a:	8d 91       	ld	r24, X+
    649c:	9c 91       	ld	r25, X
    649e:	17 97       	sbiw	r26, 0x07	; 7
    64a0:	01 96       	adiw	r24, 0x01	; 1
    64a2:	17 96       	adiw	r26, 0x07	; 7
    64a4:	9c 93       	st	X, r25
    64a6:	8e 93       	st	-X, r24
    64a8:	16 97       	sbiw	r26, 0x06	; 6
    64aa:	ce 01       	movw	r24, r28
    64ac:	df 91       	pop	r29
    64ae:	cf 91       	pop	r28
    64b0:	1f 91       	pop	r17
    64b2:	0f 91       	pop	r16
    64b4:	08 95       	ret

000064b6 <__ultoa_invert>:
    64b6:	fa 01       	movw	r30, r20
    64b8:	aa 27       	eor	r26, r26
    64ba:	28 30       	cpi	r18, 0x08	; 8
    64bc:	51 f1       	breq	.+84     	; 0x6512 <__ultoa_invert+0x5c>
    64be:	20 31       	cpi	r18, 0x10	; 16
    64c0:	81 f1       	breq	.+96     	; 0x6522 <__ultoa_invert+0x6c>
    64c2:	e8 94       	clt
    64c4:	6f 93       	push	r22
    64c6:	6e 7f       	andi	r22, 0xFE	; 254
    64c8:	6e 5f       	subi	r22, 0xFE	; 254
    64ca:	7f 4f       	sbci	r23, 0xFF	; 255
    64cc:	8f 4f       	sbci	r24, 0xFF	; 255
    64ce:	9f 4f       	sbci	r25, 0xFF	; 255
    64d0:	af 4f       	sbci	r26, 0xFF	; 255
    64d2:	b1 e0       	ldi	r27, 0x01	; 1
    64d4:	3e d0       	rcall	.+124    	; 0x6552 <__ultoa_invert+0x9c>
    64d6:	b4 e0       	ldi	r27, 0x04	; 4
    64d8:	3c d0       	rcall	.+120    	; 0x6552 <__ultoa_invert+0x9c>
    64da:	67 0f       	add	r22, r23
    64dc:	78 1f       	adc	r23, r24
    64de:	89 1f       	adc	r24, r25
    64e0:	9a 1f       	adc	r25, r26
    64e2:	a1 1d       	adc	r26, r1
    64e4:	68 0f       	add	r22, r24
    64e6:	79 1f       	adc	r23, r25
    64e8:	8a 1f       	adc	r24, r26
    64ea:	91 1d       	adc	r25, r1
    64ec:	a1 1d       	adc	r26, r1
    64ee:	6a 0f       	add	r22, r26
    64f0:	71 1d       	adc	r23, r1
    64f2:	81 1d       	adc	r24, r1
    64f4:	91 1d       	adc	r25, r1
    64f6:	a1 1d       	adc	r26, r1
    64f8:	20 d0       	rcall	.+64     	; 0x653a <__ultoa_invert+0x84>
    64fa:	09 f4       	brne	.+2      	; 0x64fe <__ultoa_invert+0x48>
    64fc:	68 94       	set
    64fe:	3f 91       	pop	r19
    6500:	2a e0       	ldi	r18, 0x0A	; 10
    6502:	26 9f       	mul	r18, r22
    6504:	11 24       	eor	r1, r1
    6506:	30 19       	sub	r19, r0
    6508:	30 5d       	subi	r19, 0xD0	; 208
    650a:	31 93       	st	Z+, r19
    650c:	de f6       	brtc	.-74     	; 0x64c4 <__ultoa_invert+0xe>
    650e:	cf 01       	movw	r24, r30
    6510:	08 95       	ret
    6512:	46 2f       	mov	r20, r22
    6514:	47 70       	andi	r20, 0x07	; 7
    6516:	40 5d       	subi	r20, 0xD0	; 208
    6518:	41 93       	st	Z+, r20
    651a:	b3 e0       	ldi	r27, 0x03	; 3
    651c:	0f d0       	rcall	.+30     	; 0x653c <__ultoa_invert+0x86>
    651e:	c9 f7       	brne	.-14     	; 0x6512 <__ultoa_invert+0x5c>
    6520:	f6 cf       	rjmp	.-20     	; 0x650e <__ultoa_invert+0x58>
    6522:	46 2f       	mov	r20, r22
    6524:	4f 70       	andi	r20, 0x0F	; 15
    6526:	40 5d       	subi	r20, 0xD0	; 208
    6528:	4a 33       	cpi	r20, 0x3A	; 58
    652a:	18 f0       	brcs	.+6      	; 0x6532 <__ultoa_invert+0x7c>
    652c:	49 5d       	subi	r20, 0xD9	; 217
    652e:	31 fd       	sbrc	r19, 1
    6530:	40 52       	subi	r20, 0x20	; 32
    6532:	41 93       	st	Z+, r20
    6534:	02 d0       	rcall	.+4      	; 0x653a <__ultoa_invert+0x84>
    6536:	a9 f7       	brne	.-22     	; 0x6522 <__ultoa_invert+0x6c>
    6538:	ea cf       	rjmp	.-44     	; 0x650e <__ultoa_invert+0x58>
    653a:	b4 e0       	ldi	r27, 0x04	; 4
    653c:	a6 95       	lsr	r26
    653e:	97 95       	ror	r25
    6540:	87 95       	ror	r24
    6542:	77 95       	ror	r23
    6544:	67 95       	ror	r22
    6546:	ba 95       	dec	r27
    6548:	c9 f7       	brne	.-14     	; 0x653c <__ultoa_invert+0x86>
    654a:	00 97       	sbiw	r24, 0x00	; 0
    654c:	61 05       	cpc	r22, r1
    654e:	71 05       	cpc	r23, r1
    6550:	08 95       	ret
    6552:	9b 01       	movw	r18, r22
    6554:	ac 01       	movw	r20, r24
    6556:	0a 2e       	mov	r0, r26
    6558:	06 94       	lsr	r0
    655a:	57 95       	ror	r21
    655c:	47 95       	ror	r20
    655e:	37 95       	ror	r19
    6560:	27 95       	ror	r18
    6562:	ba 95       	dec	r27
    6564:	c9 f7       	brne	.-14     	; 0x6558 <__ultoa_invert+0xa2>
    6566:	62 0f       	add	r22, r18
    6568:	73 1f       	adc	r23, r19
    656a:	84 1f       	adc	r24, r20
    656c:	95 1f       	adc	r25, r21
    656e:	a0 1d       	adc	r26, r0
    6570:	08 95       	ret

00006572 <_exit>:
    6572:	f8 94       	cli

00006574 <__stop_program>:
    6574:	ff cf       	rjmp	.-2      	; 0x6574 <__stop_program>
