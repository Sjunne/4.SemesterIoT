
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006be  00800200  00006432  000064c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006432  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000caf  008008be  008008be  00006b84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006b84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab0  00000000  00000000  00006c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d6bd  00000000  00000000  000076d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035be  00000000  00000000  00014d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006ca2  00000000  00000000  0001834b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025f0  00000000  00000000  0001eff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000402b  00000000  00000000  000215e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b930  00000000  00000000  0002560b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e8  00000000  00000000  00030f3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6c c4       	rjmp	.+2264   	; 0x90a <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__vector_25>
      68:	0c 94 b2 25 	jmp	0x4b64	; 0x4b64 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f6 25 	jmp	0x4bec	; 0x4bec <__vector_36>
      94:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 94 2a 	jmp	0x5528	; 0x5528 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 8c 26 	jmp	0x4d18	; 0x4d18 <__vector_51>
      d0:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__vector_54>
      dc:	0c 94 74 27 	jmp	0x4ee8	; 0x4ee8 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2f 19       	sub	r18, r15
      e6:	2f 19       	sub	r18, r15
      e8:	2f 19       	sub	r18, r15
      ea:	66 19       	sub	r22, r6
      ec:	6e 19       	sub	r22, r14
      ee:	83 19       	sub	r24, r3
      f0:	2f 19       	sub	r18, r15
      f2:	2f 19       	sub	r18, r15
      f4:	66 19       	sub	r22, r6
      f6:	6e 19       	sub	r22, r14
      f8:	b6 2a       	or	r11, r22
      fa:	26 2b       	or	r18, r22
      fc:	26 2b       	or	r18, r22
      fe:	26 2b       	or	r18, r22
     100:	26 2b       	or	r18, r22
     102:	26 2b       	or	r18, r22
     104:	26 2b       	or	r18, r22
     106:	26 2b       	or	r18, r22
     108:	b6 2a       	or	r11, r22
     10a:	26 2b       	or	r18, r22
     10c:	26 2b       	or	r18, r22
     10e:	26 2b       	or	r18, r22
     110:	26 2b       	or	r18, r22
     112:	26 2b       	or	r18, r22
     114:	26 2b       	or	r18, r22
     116:	26 2b       	or	r18, r22
     118:	b8 2a       	or	r11, r24
     11a:	26 2b       	or	r18, r22
     11c:	26 2b       	or	r18, r22
     11e:	26 2b       	or	r18, r22
     120:	26 2b       	or	r18, r22
     122:	26 2b       	or	r18, r22
     124:	26 2b       	or	r18, r22
     126:	26 2b       	or	r18, r22
     128:	26 2b       	or	r18, r22
     12a:	26 2b       	or	r18, r22
     12c:	26 2b       	or	r18, r22
     12e:	26 2b       	or	r18, r22
     130:	26 2b       	or	r18, r22
     132:	26 2b       	or	r18, r22
     134:	26 2b       	or	r18, r22
     136:	26 2b       	or	r18, r22
     138:	b8 2a       	or	r11, r24
     13a:	26 2b       	or	r18, r22
     13c:	26 2b       	or	r18, r22
     13e:	26 2b       	or	r18, r22
     140:	26 2b       	or	r18, r22
     142:	26 2b       	or	r18, r22
     144:	26 2b       	or	r18, r22
     146:	26 2b       	or	r18, r22
     148:	26 2b       	or	r18, r22
     14a:	26 2b       	or	r18, r22
     14c:	26 2b       	or	r18, r22
     14e:	26 2b       	or	r18, r22
     150:	26 2b       	or	r18, r22
     152:	26 2b       	or	r18, r22
     154:	26 2b       	or	r18, r22
     156:	26 2b       	or	r18, r22
     158:	22 2b       	or	r18, r18
     15a:	26 2b       	or	r18, r22
     15c:	26 2b       	or	r18, r22
     15e:	26 2b       	or	r18, r22
     160:	26 2b       	or	r18, r22
     162:	26 2b       	or	r18, r22
     164:	26 2b       	or	r18, r22
     166:	26 2b       	or	r18, r22
     168:	ed 2a       	or	r14, r29
     16a:	26 2b       	or	r18, r22
     16c:	26 2b       	or	r18, r22
     16e:	26 2b       	or	r18, r22
     170:	26 2b       	or	r18, r22
     172:	26 2b       	or	r18, r22
     174:	26 2b       	or	r18, r22
     176:	26 2b       	or	r18, r22
     178:	26 2b       	or	r18, r22
     17a:	26 2b       	or	r18, r22
     17c:	26 2b       	or	r18, r22
     17e:	26 2b       	or	r18, r22
     180:	26 2b       	or	r18, r22
     182:	26 2b       	or	r18, r22
     184:	26 2b       	or	r18, r22
     186:	26 2b       	or	r18, r22
     188:	e1 2a       	or	r14, r17
     18a:	26 2b       	or	r18, r22
     18c:	26 2b       	or	r18, r22
     18e:	26 2b       	or	r18, r22
     190:	26 2b       	or	r18, r22
     192:	26 2b       	or	r18, r22
     194:	26 2b       	or	r18, r22
     196:	26 2b       	or	r18, r22
     198:	05 2b       	or	r16, r21

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <prvCheckTasksWaitingTermination>
     19e:	80 91 e3 12 	lds	r24, 0x12E3	; 0x8012e3 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	eb d2       	rcall	.+1494   	; 0x77e <vPortYield>
     1a8:	0e 94 ac 19 	call	0x3358	; 0x3358 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 a1 18 	call	0x3142	; 0x3142 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e2 e3       	ldi	r30, 0x32	; 50
     1e4:	f4 e6       	ldi	r31, 0x64	; 100
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ae 3b       	cpi	r26, 0xBE	; 190
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	25 e1       	ldi	r18, 0x15	; 21
     1f8:	ae eb       	ldi	r26, 0xBE	; 190
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ad 36       	cpi	r26, 0x6D	; 109
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <main>
     20a:	0c 94 17 32 	jmp	0x642e	; 0x642e <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <initializeSharedDataQueue>:
SharedData receiveSharedData;
SharedData sharedData;

void initializeSharedDataQueue()
{
	xQueueShared = xQueueCreate(5, sizeof(SharedData));
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	66 e0       	ldi	r22, 0x06	; 6
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	a8 d4       	rcall	.+2384   	; 0xb68 <xQueueGenericCreate>
     218:	90 93 ee 14 	sts	0x14EE, r25	; 0x8014ee <xQueueShared+0x1>
     21c:	80 93 ed 14 	sts	0x14ED, r24	; 0x8014ed <xQueueShared>
     220:	08 95       	ret

00000222 <enqueueSharedData>:
}

void enqueueSharedData()
{
     222:	cf 92       	push	r12
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
	TickType_t xDelay = 25/portTICK_PERIOD_MS;
	int counter = 0;
	
	uint16_t co2 = 0;
	int16_t temp = 0;
	uint16_t hum = 0;
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	10 e0       	ldi	r17, 0x00	; 0
{
	TickType_t xDelay = 25/portTICK_PERIOD_MS;
	int counter = 0;
	
	uint16_t co2 = 0;
	int16_t temp = 0;
     236:	e1 2c       	mov	r14, r1
     238:	f1 2c       	mov	r15, r1
void enqueueSharedData()
{
	TickType_t xDelay = 25/portTICK_PERIOD_MS;
	int counter = 0;
	
	uint16_t co2 = 0;
     23a:	c1 2c       	mov	r12, r1
     23c:	d1 2c       	mov	r13, r1
}

void enqueueSharedData()
{
	TickType_t xDelay = 25/portTICK_PERIOD_MS;
	int counter = 0;
     23e:	c0 e0       	ldi	r28, 0x00	; 0
     240:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t hum = 0;
	
	int co2res = 0;
	int tempres = 0;
	int humres = 0;
	while (counter < 10) {
     242:	1f c0       	rjmp	.+62     	; 0x282 <enqueueSharedData+0x60>
		co2 += dequeueCO2Measure();
     244:	0e 94 1e 1a 	call	0x343c	; 0x343c <dequeueCO2Measure>
     248:	c8 0e       	add	r12, r24
     24a:	d9 1e       	adc	r13, r25
		vTaskDelay(xDelay);
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskDelay>
		temp += dequeueTempMeasure();
     258:	0e 94 24 1b 	call	0x3648	; 0x3648 <dequeueTempMeasure>
     25c:	e8 0e       	add	r14, r24
     25e:	f9 1e       	adc	r15, r25
		vTaskDelay(xDelay);
     260:	61 e0       	ldi	r22, 0x01	; 1
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskDelay>
		hum += dequeueHumidityMeasure();
     26c:	0e 94 55 1b 	call	0x36aa	; 0x36aa <dequeueHumidityMeasure>
     270:	08 0f       	add	r16, r24
     272:	19 1f       	adc	r17, r25
		vTaskDelay(xDelay);
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskDelay>
		counter++;
     280:	21 96       	adiw	r28, 0x01	; 1
	uint16_t hum = 0;
	
	int co2res = 0;
	int tempres = 0;
	int humres = 0;
	while (counter < 10) {
     282:	ca 30       	cpi	r28, 0x0A	; 10
     284:	d1 05       	cpc	r29, r1
     286:	f4 f2       	brlt	.-68     	; 0x244 <enqueueSharedData+0x22>
		vTaskDelay(xDelay);
		counter++;
	}
	
	
	co2res = (co2 / (counter + 1));
     288:	21 96       	adiw	r28, 0x01	; 1
     28a:	c6 01       	movw	r24, r12
     28c:	be 01       	movw	r22, r28
     28e:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodhi4>
     292:	26 2f       	mov	r18, r22
     294:	37 2f       	mov	r19, r23
	co2 = (uint16_t) co2res;
	
	tempres = (temp / (counter + 1));
     296:	c7 01       	movw	r24, r14
     298:	be 01       	movw	r22, r28
     29a:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <__divmodhi4>
     29e:	46 2f       	mov	r20, r22
     2a0:	f7 2e       	mov	r15, r23
	temp = (int16_t) tempres;
	
	humres = (hum / (counter + 1));
     2a2:	c8 01       	movw	r24, r16
     2a4:	be 01       	movw	r22, r28
     2a6:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__udivmodhi4>
	
	


	SharedData_t shared = &sharedData;
	shared->co2 = co2;
     2aa:	e7 ee       	ldi	r30, 0xE7	; 231
     2ac:	f4 e1       	ldi	r31, 0x14	; 20
     2ae:	20 83       	st	Z, r18
     2b0:	31 83       	std	Z+1, r19	; 0x01
	shared->temperature = temp;
     2b2:	42 83       	std	Z+2, r20	; 0x02
     2b4:	f3 82       	std	Z+3, r15	; 0x03
	shared->humidity = hum;
     2b6:	64 83       	std	Z+4, r22	; 0x04
     2b8:	75 83       	std	Z+5, r23	; 0x05

	printf("ENQUEUE: humidity: %d, co2: %d, Temp: %d \n", shared->humidity, shared->co2, shared->temperature);
     2ba:	ff 92       	push	r15
     2bc:	4f 93       	push	r20
     2be:	3f 93       	push	r19
     2c0:	2f 93       	push	r18
     2c2:	7f 93       	push	r23
     2c4:	6f 93       	push	r22
     2c6:	8f e6       	ldi	r24, 0x6F	; 111
     2c8:	92 e0       	ldi	r25, 0x02	; 2
     2ca:	9f 93       	push	r25
     2cc:	8f 93       	push	r24
     2ce:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>

	xQueueSend(xQueueShared, (void*)&sharedData, portMAX_DELAY);
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	2f ef       	ldi	r18, 0xFF	; 255
     2d6:	3f ef       	ldi	r19, 0xFF	; 255
     2d8:	a9 01       	movw	r20, r18
     2da:	67 ee       	ldi	r22, 0xE7	; 231
     2dc:	74 e1       	ldi	r23, 0x14	; 20
     2de:	80 91 ed 14 	lds	r24, 0x14ED	; 0x8014ed <xQueueShared>
     2e2:	90 91 ee 14 	lds	r25, 0x14EE	; 0x8014ee <xQueueShared+0x1>
     2e6:	63 d4       	rcall	.+2246   	; 0xbae <xQueueGenericSend>

}
     2e8:	8d b7       	in	r24, 0x3d	; 61
     2ea:	9e b7       	in	r25, 0x3e	; 62
     2ec:	08 96       	adiw	r24, 0x08	; 8
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	9e bf       	out	0x3e, r25	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	8d bf       	out	0x3d, r24	; 61
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	08 95       	ret

0000030a <dequeueSharedData>:

SharedData_t dequeueSharedData() {
	SharedData_t data = &receiveSharedData;
	xQueueReceive(xQueueShared, &receiveSharedData, (TickType_t) 10);
     30a:	2a e0       	ldi	r18, 0x0A	; 10
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	6f ee       	ldi	r22, 0xEF	; 239
     314:	74 e1       	ldi	r23, 0x14	; 20
     316:	80 91 ed 14 	lds	r24, 0x14ED	; 0x8014ed <xQueueShared>
     31a:	90 91 ee 14 	lds	r25, 0x14EE	; 0x8014ee <xQueueShared+0x1>
     31e:	14 d5       	rcall	.+2600   	; 0xd48 <xQueueReceive>
	return data;
}
     320:	8f ee       	ldi	r24, 0xEF	; 239
     322:	94 e1       	ldi	r25, 0x14	; 20
     324:	08 95       	ret

00000326 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     326:	ea ec       	ldi	r30, 0xCA	; 202
     328:	f8 e0       	ldi	r31, 0x08	; 8
     32a:	ae ec       	ldi	r26, 0xCE	; 206
     32c:	b8 e0       	ldi	r27, 0x08	; 8
     32e:	b1 83       	std	Z+1, r27	; 0x01
     330:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     332:	13 82       	std	Z+3, r1	; 0x03
     334:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     336:	ee e8       	ldi	r30, 0x8E	; 142
     338:	f2 e1       	ldi	r31, 0x12	; 18
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     33a:	f0 93 c9 08 	sts	0x08C9, r31	; 0x8008c9 <pxEnd+0x1>
     33e:	e0 93 c8 08 	sts	0x08C8, r30	; 0x8008c8 <pxEnd>
    pxEnd->xBlockSize = 0;
     342:	13 82       	std	Z+3, r1	; 0x03
     344:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     346:	11 82       	std	Z+1, r1	; 0x01
     348:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     34a:	80 ec       	ldi	r24, 0xC0	; 192
     34c:	99 e0       	ldi	r25, 0x09	; 9
     34e:	13 96       	adiw	r26, 0x03	; 3
     350:	9c 93       	st	X, r25
     352:	8e 93       	st	-X, r24
     354:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     356:	ed 93       	st	X+, r30
     358:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     35a:	90 93 c5 08 	sts	0x08C5, r25	; 0x8008c5 <xMinimumEverFreeBytesRemaining+0x1>
     35e:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     362:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <xFreeBytesRemaining+0x1>
     366:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e8       	ldi	r25, 0x80	; 128
     36e:	90 93 bf 08 	sts	0x08BF, r25	; 0x8008bf <__data_end+0x1>
     372:	80 93 be 08 	sts	0x08BE, r24	; 0x8008be <__data_end>
     376:	08 95       	ret

00000378 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     37e:	aa ec       	ldi	r26, 0xCA	; 202
     380:	b8 e0       	ldi	r27, 0x08	; 8
     382:	01 c0       	rjmp	.+2      	; 0x386 <prvInsertBlockIntoFreeList+0xe>
     384:	df 01       	movw	r26, r30
     386:	ed 91       	ld	r30, X+
     388:	fc 91       	ld	r31, X
     38a:	11 97       	sbiw	r26, 0x01	; 1
     38c:	ec 17       	cp	r30, r28
     38e:	fd 07       	cpc	r31, r29
     390:	c8 f3       	brcs	.-14     	; 0x384 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     392:	12 96       	adiw	r26, 0x02	; 2
     394:	8d 91       	ld	r24, X+
     396:	9c 91       	ld	r25, X
     398:	13 97       	sbiw	r26, 0x03	; 3
     39a:	9d 01       	movw	r18, r26
     39c:	28 0f       	add	r18, r24
     39e:	39 1f       	adc	r19, r25
     3a0:	c2 17       	cp	r28, r18
     3a2:	d3 07       	cpc	r29, r19
     3a4:	49 f4       	brne	.+18     	; 0x3b8 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     3a6:	2a 81       	ldd	r18, Y+2	; 0x02
     3a8:	3b 81       	ldd	r19, Y+3	; 0x03
     3aa:	82 0f       	add	r24, r18
     3ac:	93 1f       	adc	r25, r19
     3ae:	13 96       	adiw	r26, 0x03	; 3
     3b0:	9c 93       	st	X, r25
     3b2:	8e 93       	st	-X, r24
     3b4:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     3b6:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	9b 81       	ldd	r25, Y+3	; 0x03
     3bc:	9e 01       	movw	r18, r28
     3be:	28 0f       	add	r18, r24
     3c0:	39 1f       	adc	r19, r25
     3c2:	e2 17       	cp	r30, r18
     3c4:	f3 07       	cpc	r31, r19
     3c6:	c1 f4       	brne	.+48     	; 0x3f8 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     3c8:	20 91 c8 08 	lds	r18, 0x08C8	; 0x8008c8 <pxEnd>
     3cc:	30 91 c9 08 	lds	r19, 0x08C9	; 0x8008c9 <pxEnd+0x1>
     3d0:	e2 17       	cp	r30, r18
     3d2:	f3 07       	cpc	r31, r19
     3d4:	71 f0       	breq	.+28     	; 0x3f2 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     3d6:	22 81       	ldd	r18, Z+2	; 0x02
     3d8:	33 81       	ldd	r19, Z+3	; 0x03
     3da:	82 0f       	add	r24, r18
     3dc:	93 1f       	adc	r25, r19
     3de:	9b 83       	std	Y+3, r25	; 0x03
     3e0:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     3e2:	ed 91       	ld	r30, X+
     3e4:	fc 91       	ld	r31, X
     3e6:	11 97       	sbiw	r26, 0x01	; 1
     3e8:	80 81       	ld	r24, Z
     3ea:	91 81       	ldd	r25, Z+1	; 0x01
     3ec:	99 83       	std	Y+1, r25	; 0x01
     3ee:	88 83       	st	Y, r24
     3f0:	05 c0       	rjmp	.+10     	; 0x3fc <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     3f2:	39 83       	std	Y+1, r19	; 0x01
     3f4:	28 83       	st	Y, r18
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     3f8:	f9 83       	std	Y+1, r31	; 0x01
     3fa:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     3fc:	ca 17       	cp	r28, r26
     3fe:	db 07       	cpc	r29, r27
     400:	11 f0       	breq	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     402:	cd 93       	st	X+, r28
     404:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     41a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     41e:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <pxEnd>
     422:	90 91 c9 08 	lds	r25, 0x08C9	; 0x8008c9 <pxEnd+0x1>
     426:	89 2b       	or	r24, r25
     428:	09 f4       	brne	.+2      	; 0x42c <pvPortMalloc+0x20>
        {
            prvHeapInit();
     42a:	7d df       	rcall	.-262    	; 0x326 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     42c:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <__data_end>
     430:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <__data_end+0x1>
     434:	80 23       	and	r24, r16
     436:	91 23       	and	r25, r17
     438:	89 2b       	or	r24, r25
     43a:	09 f0       	breq	.+2      	; 0x43e <pvPortMalloc+0x32>
     43c:	76 c0       	rjmp	.+236    	; 0x52a <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     43e:	01 15       	cp	r16, r1
     440:	11 05       	cpc	r17, r1
     442:	49 f0       	breq	.+18     	; 0x456 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     444:	c8 01       	movw	r24, r16
     446:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     448:	08 17       	cp	r16, r24
     44a:	19 07       	cpc	r17, r25
     44c:	18 f0       	brcs	.+6      	; 0x454 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     44e:	00 e0       	ldi	r16, 0x00	; 0
     450:	10 e0       	ldi	r17, 0x00	; 0
     452:	01 c0       	rjmp	.+2      	; 0x456 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     454:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     456:	01 15       	cp	r16, r1
     458:	11 05       	cpc	r17, r1
     45a:	09 f4       	brne	.+2      	; 0x45e <pvPortMalloc+0x52>
     45c:	69 c0       	rjmp	.+210    	; 0x530 <pvPortMalloc+0x124>
     45e:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <xFreeBytesRemaining>
     462:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <xFreeBytesRemaining+0x1>
     466:	80 17       	cp	r24, r16
     468:	91 07       	cpc	r25, r17
     46a:	08 f4       	brcc	.+2      	; 0x46e <pvPortMalloc+0x62>
     46c:	64 c0       	rjmp	.+200    	; 0x536 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     46e:	c0 91 ca 08 	lds	r28, 0x08CA	; 0x8008ca <xStart>
     472:	d0 91 cb 08 	lds	r29, 0x08CB	; 0x8008cb <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     476:	ea ec       	ldi	r30, 0xCA	; 202
     478:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     47a:	02 c0       	rjmp	.+4      	; 0x480 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     47c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     47e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     480:	8a 81       	ldd	r24, Y+2	; 0x02
     482:	9b 81       	ldd	r25, Y+3	; 0x03
     484:	80 17       	cp	r24, r16
     486:	91 07       	cpc	r25, r17
     488:	20 f4       	brcc	.+8      	; 0x492 <pvPortMalloc+0x86>
     48a:	88 81       	ld	r24, Y
     48c:	99 81       	ldd	r25, Y+1	; 0x01
     48e:	00 97       	sbiw	r24, 0x00	; 0
     490:	a9 f7       	brne	.-22     	; 0x47c <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     492:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <pxEnd>
     496:	90 91 c9 08 	lds	r25, 0x08C9	; 0x8008c9 <pxEnd+0x1>
     49a:	c8 17       	cp	r28, r24
     49c:	d9 07       	cpc	r29, r25
     49e:	09 f4       	brne	.+2      	; 0x4a2 <pvPortMalloc+0x96>
     4a0:	4d c0       	rjmp	.+154    	; 0x53c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     4a2:	e0 80       	ld	r14, Z
     4a4:	f1 80       	ldd	r15, Z+1	; 0x01
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	e8 0e       	add	r14, r24
     4aa:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     4ac:	88 81       	ld	r24, Y
     4ae:	99 81       	ldd	r25, Y+1	; 0x01
     4b0:	91 83       	std	Z+1, r25	; 0x01
     4b2:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4b4:	2a 81       	ldd	r18, Y+2	; 0x02
     4b6:	3b 81       	ldd	r19, Y+3	; 0x03
     4b8:	20 1b       	sub	r18, r16
     4ba:	31 0b       	sbc	r19, r17
     4bc:	29 30       	cpi	r18, 0x09	; 9
     4be:	31 05       	cpc	r19, r1
     4c0:	48 f0       	brcs	.+18     	; 0x4d4 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     4c2:	ce 01       	movw	r24, r28
     4c4:	80 0f       	add	r24, r16
     4c6:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     4c8:	fc 01       	movw	r30, r24
     4ca:	33 83       	std	Z+3, r19	; 0x03
     4cc:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     4ce:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     4d0:	0a 83       	std	Y+2, r16	; 0x02
     4d2:	52 df       	rcall	.-348    	; 0x378 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     4d4:	2a 81       	ldd	r18, Y+2	; 0x02
     4d6:	3b 81       	ldd	r19, Y+3	; 0x03
     4d8:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <xFreeBytesRemaining>
     4dc:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <xFreeBytesRemaining+0x1>
     4e0:	82 1b       	sub	r24, r18
     4e2:	93 0b       	sbc	r25, r19
     4e4:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <xFreeBytesRemaining+0x1>
     4e8:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     4ec:	40 91 c4 08 	lds	r20, 0x08C4	; 0x8008c4 <xMinimumEverFreeBytesRemaining>
     4f0:	50 91 c5 08 	lds	r21, 0x08C5	; 0x8008c5 <xMinimumEverFreeBytesRemaining+0x1>
     4f4:	84 17       	cp	r24, r20
     4f6:	95 07       	cpc	r25, r21
     4f8:	20 f4       	brcc	.+8      	; 0x502 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     4fa:	90 93 c5 08 	sts	0x08C5, r25	; 0x8008c5 <xMinimumEverFreeBytesRemaining+0x1>
     4fe:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     502:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <__data_end>
     506:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <__data_end+0x1>
     50a:	28 2b       	or	r18, r24
     50c:	39 2b       	or	r19, r25
     50e:	3b 83       	std	Y+3, r19	; 0x03
     510:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     512:	19 82       	std	Y+1, r1	; 0x01
     514:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     516:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <xNumberOfSuccessfulAllocations>
     51a:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <xNumberOfSuccessfulAllocations+0x1>
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	90 93 c3 08 	sts	0x08C3, r25	; 0x8008c3 <xNumberOfSuccessfulAllocations+0x1>
     524:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <xNumberOfSuccessfulAllocations>
     528:	0b c0       	rjmp	.+22     	; 0x540 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     52a:	e1 2c       	mov	r14, r1
     52c:	f1 2c       	mov	r15, r1
     52e:	08 c0       	rjmp	.+16     	; 0x540 <pvPortMalloc+0x134>
     530:	e1 2c       	mov	r14, r1
     532:	f1 2c       	mov	r15, r1
     534:	05 c0       	rjmp	.+10     	; 0x540 <pvPortMalloc+0x134>
     536:	e1 2c       	mov	r14, r1
     538:	f1 2c       	mov	r15, r1
     53a:	02 c0       	rjmp	.+4      	; 0x540 <pvPortMalloc+0x134>
     53c:	e1 2c       	mov	r14, r1
     53e:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     540:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     544:	e1 14       	cp	r14, r1
     546:	f1 04       	cpc	r15, r1
     548:	11 f4       	brne	.+4      	; 0x54e <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     54a:	0e 94 b8 19 	call	0x3370	; 0x3370 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     54e:	c7 01       	movw	r24, r14
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	08 95       	ret

0000055e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     566:	00 97       	sbiw	r24, 0x00	; 0
     568:	91 f1       	breq	.+100    	; 0x5ce <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     56a:	ec 01       	movw	r28, r24
     56c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     56e:	4a 81       	ldd	r20, Y+2	; 0x02
     570:	5b 81       	ldd	r21, Y+3	; 0x03
     572:	20 91 be 08 	lds	r18, 0x08BE	; 0x8008be <__data_end>
     576:	30 91 bf 08 	lds	r19, 0x08BF	; 0x8008bf <__data_end+0x1>
     57a:	ba 01       	movw	r22, r20
     57c:	62 23       	and	r22, r18
     57e:	73 23       	and	r23, r19
     580:	67 2b       	or	r22, r23
     582:	29 f1       	breq	.+74     	; 0x5ce <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     584:	68 81       	ld	r22, Y
     586:	79 81       	ldd	r23, Y+1	; 0x01
     588:	67 2b       	or	r22, r23
     58a:	09 f5       	brne	.+66     	; 0x5ce <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     58c:	20 95       	com	r18
     58e:	30 95       	com	r19
     590:	24 23       	and	r18, r20
     592:	35 23       	and	r19, r21
     594:	3b 83       	std	Y+3, r19	; 0x03
     596:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     598:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     59c:	8a 81       	ldd	r24, Y+2	; 0x02
     59e:	9b 81       	ldd	r25, Y+3	; 0x03
     5a0:	20 91 c6 08 	lds	r18, 0x08C6	; 0x8008c6 <xFreeBytesRemaining>
     5a4:	30 91 c7 08 	lds	r19, 0x08C7	; 0x8008c7 <xFreeBytesRemaining+0x1>
     5a8:	82 0f       	add	r24, r18
     5aa:	93 1f       	adc	r25, r19
     5ac:	90 93 c7 08 	sts	0x08C7, r25	; 0x8008c7 <xFreeBytesRemaining+0x1>
     5b0:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5b4:	ce 01       	movw	r24, r28
     5b6:	e0 de       	rcall	.-576    	; 0x378 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     5b8:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <xNumberOfSuccessfulFrees>
     5bc:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <xNumberOfSuccessfulFrees+0x1>
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <xNumberOfSuccessfulFrees+0x1>
     5c6:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     5ca:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    return xFreeBytesRemaining;
}
     5d8:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <xFreeBytesRemaining>
     5dc:	90 91 c7 08 	lds	r25, 0x08C7	; 0x8008c7 <xFreeBytesRemaining+0x1>
     5e0:	08 95       	ret

000005e2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     5e2:	fc 01       	movw	r30, r24
     5e4:	03 96       	adiw	r24, 0x03	; 3
     5e6:	92 83       	std	Z+2, r25	; 0x02
     5e8:	81 83       	std	Z+1, r24	; 0x01
     5ea:	4f ef       	ldi	r20, 0xFF	; 255
     5ec:	5f ef       	ldi	r21, 0xFF	; 255
     5ee:	ba 01       	movw	r22, r20
     5f0:	43 83       	std	Z+3, r20	; 0x03
     5f2:	54 83       	std	Z+4, r21	; 0x04
     5f4:	65 83       	std	Z+5, r22	; 0x05
     5f6:	76 83       	std	Z+6, r23	; 0x06
     5f8:	90 87       	std	Z+8, r25	; 0x08
     5fa:	87 83       	std	Z+7, r24	; 0x07
     5fc:	92 87       	std	Z+10, r25	; 0x0a
     5fe:	81 87       	std	Z+9, r24	; 0x09
     600:	10 82       	st	Z, r1
     602:	08 95       	ret

00000604 <vListInitialiseItem>:
     604:	fc 01       	movw	r30, r24
     606:	13 86       	std	Z+11, r1	; 0x0b
     608:	12 86       	std	Z+10, r1	; 0x0a
     60a:	08 95       	ret

0000060c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     616:	08 81       	ld	r16, Y
     618:	19 81       	ldd	r17, Y+1	; 0x01
     61a:	2a 81       	ldd	r18, Y+2	; 0x02
     61c:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     61e:	0f 3f       	cpi	r16, 0xFF	; 255
     620:	4f ef       	ldi	r20, 0xFF	; 255
     622:	14 07       	cpc	r17, r20
     624:	24 07       	cpc	r18, r20
     626:	34 07       	cpc	r19, r20
     628:	21 f4       	brne	.+8      	; 0x632 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     62a:	fc 01       	movw	r30, r24
     62c:	a1 85       	ldd	r26, Z+9	; 0x09
     62e:	b2 85       	ldd	r27, Z+10	; 0x0a
     630:	11 c0       	rjmp	.+34     	; 0x654 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     632:	dc 01       	movw	r26, r24
     634:	13 96       	adiw	r26, 0x03	; 3
     636:	01 c0       	rjmp	.+2      	; 0x63a <vListInsert+0x2e>
     638:	df 01       	movw	r26, r30
     63a:	14 96       	adiw	r26, 0x04	; 4
     63c:	ed 91       	ld	r30, X+
     63e:	fc 91       	ld	r31, X
     640:	15 97       	sbiw	r26, 0x05	; 5
     642:	40 81       	ld	r20, Z
     644:	51 81       	ldd	r21, Z+1	; 0x01
     646:	62 81       	ldd	r22, Z+2	; 0x02
     648:	73 81       	ldd	r23, Z+3	; 0x03
     64a:	04 17       	cp	r16, r20
     64c:	15 07       	cpc	r17, r21
     64e:	26 07       	cpc	r18, r22
     650:	37 07       	cpc	r19, r23
     652:	90 f7       	brcc	.-28     	; 0x638 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     654:	14 96       	adiw	r26, 0x04	; 4
     656:	ed 91       	ld	r30, X+
     658:	fc 91       	ld	r31, X
     65a:	15 97       	sbiw	r26, 0x05	; 5
     65c:	fd 83       	std	Y+5, r31	; 0x05
     65e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     660:	d7 83       	std	Z+7, r29	; 0x07
     662:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     664:	bf 83       	std	Y+7, r27	; 0x07
     666:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     668:	15 96       	adiw	r26, 0x05	; 5
     66a:	dc 93       	st	X, r29
     66c:	ce 93       	st	-X, r28
     66e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     670:	9b 87       	std	Y+11, r25	; 0x0b
     672:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     674:	fc 01       	movw	r30, r24
     676:	20 81       	ld	r18, Z
     678:	2f 5f       	subi	r18, 0xFF	; 255
     67a:	20 83       	st	Z, r18
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     68c:	a2 85       	ldd	r26, Z+10	; 0x0a
     68e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     690:	c4 81       	ldd	r28, Z+4	; 0x04
     692:	d5 81       	ldd	r29, Z+5	; 0x05
     694:	86 81       	ldd	r24, Z+6	; 0x06
     696:	97 81       	ldd	r25, Z+7	; 0x07
     698:	9f 83       	std	Y+7, r25	; 0x07
     69a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     69c:	c6 81       	ldd	r28, Z+6	; 0x06
     69e:	d7 81       	ldd	r29, Z+7	; 0x07
     6a0:	84 81       	ldd	r24, Z+4	; 0x04
     6a2:	95 81       	ldd	r25, Z+5	; 0x05
     6a4:	9d 83       	std	Y+5, r25	; 0x05
     6a6:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     6a8:	11 96       	adiw	r26, 0x01	; 1
     6aa:	8d 91       	ld	r24, X+
     6ac:	9c 91       	ld	r25, X
     6ae:	12 97       	sbiw	r26, 0x02	; 2
     6b0:	e8 17       	cp	r30, r24
     6b2:	f9 07       	cpc	r31, r25
     6b4:	31 f4       	brne	.+12     	; 0x6c2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6b6:	86 81       	ldd	r24, Z+6	; 0x06
     6b8:	97 81       	ldd	r25, Z+7	; 0x07
     6ba:	12 96       	adiw	r26, 0x02	; 2
     6bc:	9c 93       	st	X, r25
     6be:	8e 93       	st	-X, r24
     6c0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6c2:	13 86       	std	Z+11, r1	; 0x0b
     6c4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     6c6:	8c 91       	ld	r24, X
     6c8:	81 50       	subi	r24, 0x01	; 1
     6ca:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     6cc:	8c 91       	ld	r24, X
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     6d4:	a8 95       	wdr
     6d6:	90 ec       	ldi	r25, 0xC0	; 192
     6d8:	88 e1       	ldi	r24, 0x18	; 24
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	a8 95       	wdr
     6e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6ea:	08 95       	ret

000006ec <pxPortInitialiseStack>:
     6ec:	fc 01       	movw	r30, r24
     6ee:	60 83       	st	Z, r22
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	70 83       	st	Z, r23
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	10 82       	st	Z, r1
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	10 82       	st	Z, r1
     6fc:	31 97       	sbiw	r30, 0x01	; 1
     6fe:	20 e8       	ldi	r18, 0x80	; 128
     700:	20 83       	st	Z, r18
     702:	31 97       	sbiw	r30, 0x01	; 1
     704:	10 82       	st	Z, r1
     706:	31 97       	sbiw	r30, 0x01	; 1
     708:	10 82       	st	Z, r1
     70a:	31 97       	sbiw	r30, 0x01	; 1
     70c:	10 82       	st	Z, r1
     70e:	77 97       	sbiw	r30, 0x17	; 23
     710:	40 83       	st	Z, r20
     712:	31 97       	sbiw	r30, 0x01	; 1
     714:	50 83       	st	Z, r21
     716:	86 97       	sbiw	r24, 0x26	; 38
     718:	08 95       	ret

0000071a <xPortStartScheduler>:
     71a:	dc df       	rcall	.-72     	; 0x6d4 <prvSetupTimerInterrupt>
     71c:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
     720:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
     724:	cd 91       	ld	r28, X+
     726:	cd bf       	out	0x3d, r28	; 61
     728:	dd 91       	ld	r29, X+
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	ff 91       	pop	r31
     72e:	ef 91       	pop	r30
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	bf 91       	pop	r27
     736:	af 91       	pop	r26
     738:	9f 91       	pop	r25
     73a:	8f 91       	pop	r24
     73c:	7f 91       	pop	r23
     73e:	6f 91       	pop	r22
     740:	5f 91       	pop	r21
     742:	4f 91       	pop	r20
     744:	3f 91       	pop	r19
     746:	2f 91       	pop	r18
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	bf 90       	pop	r11
     756:	af 90       	pop	r10
     758:	9f 90       	pop	r9
     75a:	8f 90       	pop	r8
     75c:	7f 90       	pop	r7
     75e:	6f 90       	pop	r6
     760:	5f 90       	pop	r5
     762:	4f 90       	pop	r4
     764:	3f 90       	pop	r3
     766:	2f 90       	pop	r2
     768:	1f 90       	pop	r1
     76a:	0f 90       	pop	r0
     76c:	0c be       	out	0x3c, r0	; 60
     76e:	0f 90       	pop	r0
     770:	0b be       	out	0x3b, r0	; 59
     772:	0f 90       	pop	r0
     774:	0f be       	out	0x3f, r0	; 63
     776:	0f 90       	pop	r0
     778:	08 95       	ret
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	08 95       	ret

0000077e <vPortYield>:
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	0f 92       	push	r0
     786:	0b b6       	in	r0, 0x3b	; 59
     788:	0f 92       	push	r0
     78a:	0c b6       	in	r0, 0x3c	; 60
     78c:	0f 92       	push	r0
     78e:	1f 92       	push	r1
     790:	11 24       	eor	r1, r1
     792:	2f 92       	push	r2
     794:	3f 92       	push	r3
     796:	4f 92       	push	r4
     798:	5f 92       	push	r5
     79a:	6f 92       	push	r6
     79c:	7f 92       	push	r7
     79e:	8f 92       	push	r8
     7a0:	9f 92       	push	r9
     7a2:	af 92       	push	r10
     7a4:	bf 92       	push	r11
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	2f 93       	push	r18
     7b4:	3f 93       	push	r19
     7b6:	4f 93       	push	r20
     7b8:	5f 93       	push	r21
     7ba:	6f 93       	push	r22
     7bc:	7f 93       	push	r23
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
     7c2:	af 93       	push	r26
     7c4:	bf 93       	push	r27
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	ef 93       	push	r30
     7cc:	ff 93       	push	r31
     7ce:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
     7d2:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
     7d6:	0d b6       	in	r0, 0x3d	; 61
     7d8:	0d 92       	st	X+, r0
     7da:	0e b6       	in	r0, 0x3e	; 62
     7dc:	0d 92       	st	X+, r0
     7de:	0e 94 66 10 	call	0x20cc	; 0x20cc <vTaskSwitchContext>
     7e2:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
     7e6:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
     7ea:	cd 91       	ld	r28, X+
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	dd 91       	ld	r29, X+
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	ff 91       	pop	r31
     7f4:	ef 91       	pop	r30
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	bf 91       	pop	r27
     7fc:	af 91       	pop	r26
     7fe:	9f 91       	pop	r25
     800:	8f 91       	pop	r24
     802:	7f 91       	pop	r23
     804:	6f 91       	pop	r22
     806:	5f 91       	pop	r21
     808:	4f 91       	pop	r20
     80a:	3f 91       	pop	r19
     80c:	2f 91       	pop	r18
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	bf 90       	pop	r11
     81c:	af 90       	pop	r10
     81e:	9f 90       	pop	r9
     820:	8f 90       	pop	r8
     822:	7f 90       	pop	r7
     824:	6f 90       	pop	r6
     826:	5f 90       	pop	r5
     828:	4f 90       	pop	r4
     82a:	3f 90       	pop	r3
     82c:	2f 90       	pop	r2
     82e:	1f 90       	pop	r1
     830:	0f 90       	pop	r0
     832:	0c be       	out	0x3c, r0	; 60
     834:	0f 90       	pop	r0
     836:	0b be       	out	0x3b, r0	; 59
     838:	0f 90       	pop	r0
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	0f 90       	pop	r0
     83e:	08 95       	ret

00000840 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     840:	0f 92       	push	r0
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	0f 92       	push	r0
     848:	0b b6       	in	r0, 0x3b	; 59
     84a:	0f 92       	push	r0
     84c:	0c b6       	in	r0, 0x3c	; 60
     84e:	0f 92       	push	r0
     850:	1f 92       	push	r1
     852:	11 24       	eor	r1, r1
     854:	2f 92       	push	r2
     856:	3f 92       	push	r3
     858:	4f 92       	push	r4
     85a:	5f 92       	push	r5
     85c:	6f 92       	push	r6
     85e:	7f 92       	push	r7
     860:	8f 92       	push	r8
     862:	9f 92       	push	r9
     864:	af 92       	push	r10
     866:	bf 92       	push	r11
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	2f 93       	push	r18
     876:	3f 93       	push	r19
     878:	4f 93       	push	r20
     87a:	5f 93       	push	r21
     87c:	6f 93       	push	r22
     87e:	7f 93       	push	r23
     880:	8f 93       	push	r24
     882:	9f 93       	push	r25
     884:	af 93       	push	r26
     886:	bf 93       	push	r27
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
     890:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
     894:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
     898:	0d b6       	in	r0, 0x3d	; 61
     89a:	0d 92       	st	X+, r0
     89c:	0e b6       	in	r0, 0x3e	; 62
     89e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     8a0:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     8a2:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <xTaskIncrementTick>
     8a6:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     8a8:	0e 94 66 10 	call	0x20cc	; 0x20cc <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     8ac:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
     8b0:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
     8b4:	cd 91       	ld	r28, X+
     8b6:	cd bf       	out	0x3d, r28	; 61
     8b8:	dd 91       	ld	r29, X+
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	ff 91       	pop	r31
     8be:	ef 91       	pop	r30
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	7f 91       	pop	r23
     8ce:	6f 91       	pop	r22
     8d0:	5f 91       	pop	r21
     8d2:	4f 91       	pop	r20
     8d4:	3f 91       	pop	r19
     8d6:	2f 91       	pop	r18
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	cf 90       	pop	r12
     8e4:	bf 90       	pop	r11
     8e6:	af 90       	pop	r10
     8e8:	9f 90       	pop	r9
     8ea:	8f 90       	pop	r8
     8ec:	7f 90       	pop	r7
     8ee:	6f 90       	pop	r6
     8f0:	5f 90       	pop	r5
     8f2:	4f 90       	pop	r4
     8f4:	3f 90       	pop	r3
     8f6:	2f 90       	pop	r2
     8f8:	1f 90       	pop	r1
     8fa:	0f 90       	pop	r0
     8fc:	0c be       	out	0x3c, r0	; 60
     8fe:	0f 90       	pop	r0
     900:	0b be       	out	0x3b, r0	; 59
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     908:	08 95       	ret

0000090a <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     90a:	9a df       	rcall	.-204    	; 0x840 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     90c:	18 95       	reti

0000090e <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     90e:	dc 01       	movw	r26, r24
     910:	53 96       	adiw	r26, 0x13	; 19
     912:	2c 91       	ld	r18, X
     914:	53 97       	sbiw	r26, 0x13	; 19
     916:	22 23       	and	r18, r18
     918:	41 f0       	breq	.+16     	; 0x92a <prvGetDisinheritPriorityAfterTimeout+0x1c>
     91a:	5a 96       	adiw	r26, 0x1a	; 26
     91c:	ed 91       	ld	r30, X+
     91e:	fc 91       	ld	r31, X
     920:	5b 97       	sbiw	r26, 0x1b	; 27
     922:	90 81       	ld	r25, Z
     924:	8a e0       	ldi	r24, 0x0A	; 10
     926:	89 1b       	sub	r24, r25
     928:	08 95       	ret
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	08 95       	ret

0000092e <prvIsQueueEmpty>:
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	0f 92       	push	r0
     934:	fc 01       	movw	r30, r24
     936:	86 8d       	ldd	r24, Z+30	; 0x1e
     938:	81 11       	cpse	r24, r1
     93a:	02 c0       	rjmp	.+4      	; 0x940 <prvIsQueueEmpty+0x12>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	01 c0       	rjmp	.+2      	; 0x942 <prvIsQueueEmpty+0x14>
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	0f 90       	pop	r0
     944:	0f be       	out	0x3f, r0	; 63
     946:	08 95       	ret

00000948 <prvIsQueueFull>:
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	0f 92       	push	r0
     94e:	fc 01       	movw	r30, r24
     950:	26 8d       	ldd	r18, Z+30	; 0x1e
     952:	87 8d       	ldd	r24, Z+31	; 0x1f
     954:	28 13       	cpse	r18, r24
     956:	02 c0       	rjmp	.+4      	; 0x95c <prvIsQueueFull+0x14>
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	01 c0       	rjmp	.+2      	; 0x95e <prvIsQueueFull+0x16>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0f 90       	pop	r0
     960:	0f be       	out	0x3f, r0	; 63
     962:	08 95       	ret

00000964 <prvCopyDataToQueue>:
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	ec 01       	movw	r28, r24
     96e:	04 2f       	mov	r16, r20
     970:	1e 8d       	ldd	r17, Y+30	; 0x1e
     972:	48 a1       	ldd	r20, Y+32	; 0x20
     974:	41 11       	cpse	r20, r1
     976:	0c c0       	rjmp	.+24     	; 0x990 <prvCopyDataToQueue+0x2c>
     978:	88 81       	ld	r24, Y
     97a:	99 81       	ldd	r25, Y+1	; 0x01
     97c:	89 2b       	or	r24, r25
     97e:	09 f0       	breq	.+2      	; 0x982 <prvCopyDataToQueue+0x1e>
     980:	42 c0       	rjmp	.+132    	; 0xa06 <prvCopyDataToQueue+0xa2>
     982:	8c 81       	ldd	r24, Y+4	; 0x04
     984:	9d 81       	ldd	r25, Y+5	; 0x05
     986:	0e 94 fe 12 	call	0x25fc	; 0x25fc <xTaskPriorityDisinherit>
     98a:	1d 82       	std	Y+5, r1	; 0x05
     98c:	1c 82       	std	Y+4, r1	; 0x04
     98e:	42 c0       	rjmp	.+132    	; 0xa14 <prvCopyDataToQueue+0xb0>
     990:	01 11       	cpse	r16, r1
     992:	17 c0       	rjmp	.+46     	; 0x9c2 <prvCopyDataToQueue+0x5e>
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	8a 81       	ldd	r24, Y+2	; 0x02
     998:	9b 81       	ldd	r25, Y+3	; 0x03
     99a:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <memcpy>
     99e:	28 a1       	ldd	r18, Y+32	; 0x20
     9a0:	8a 81       	ldd	r24, Y+2	; 0x02
     9a2:	9b 81       	ldd	r25, Y+3	; 0x03
     9a4:	82 0f       	add	r24, r18
     9a6:	91 1d       	adc	r25, r1
     9a8:	9b 83       	std	Y+3, r25	; 0x03
     9aa:	8a 83       	std	Y+2, r24	; 0x02
     9ac:	2c 81       	ldd	r18, Y+4	; 0x04
     9ae:	3d 81       	ldd	r19, Y+5	; 0x05
     9b0:	82 17       	cp	r24, r18
     9b2:	93 07       	cpc	r25, r19
     9b4:	50 f1       	brcs	.+84     	; 0xa0a <prvCopyDataToQueue+0xa6>
     9b6:	88 81       	ld	r24, Y
     9b8:	99 81       	ldd	r25, Y+1	; 0x01
     9ba:	9b 83       	std	Y+3, r25	; 0x03
     9bc:	8a 83       	std	Y+2, r24	; 0x02
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	29 c0       	rjmp	.+82     	; 0xa14 <prvCopyDataToQueue+0xb0>
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	8e 81       	ldd	r24, Y+6	; 0x06
     9c6:	9f 81       	ldd	r25, Y+7	; 0x07
     9c8:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <memcpy>
     9cc:	88 a1       	ldd	r24, Y+32	; 0x20
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	91 95       	neg	r25
     9d2:	81 95       	neg	r24
     9d4:	91 09       	sbc	r25, r1
     9d6:	2e 81       	ldd	r18, Y+6	; 0x06
     9d8:	3f 81       	ldd	r19, Y+7	; 0x07
     9da:	28 0f       	add	r18, r24
     9dc:	39 1f       	adc	r19, r25
     9de:	3f 83       	std	Y+7, r19	; 0x07
     9e0:	2e 83       	std	Y+6, r18	; 0x06
     9e2:	48 81       	ld	r20, Y
     9e4:	59 81       	ldd	r21, Y+1	; 0x01
     9e6:	24 17       	cp	r18, r20
     9e8:	35 07       	cpc	r19, r21
     9ea:	30 f4       	brcc	.+12     	; 0x9f8 <prvCopyDataToQueue+0x94>
     9ec:	2c 81       	ldd	r18, Y+4	; 0x04
     9ee:	3d 81       	ldd	r19, Y+5	; 0x05
     9f0:	82 0f       	add	r24, r18
     9f2:	93 1f       	adc	r25, r19
     9f4:	9f 83       	std	Y+7, r25	; 0x07
     9f6:	8e 83       	std	Y+6, r24	; 0x06
     9f8:	02 30       	cpi	r16, 0x02	; 2
     9fa:	49 f4       	brne	.+18     	; 0xa0e <prvCopyDataToQueue+0xaa>
     9fc:	11 23       	and	r17, r17
     9fe:	49 f0       	breq	.+18     	; 0xa12 <prvCopyDataToQueue+0xae>
     a00:	11 50       	subi	r17, 0x01	; 1
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	07 c0       	rjmp	.+14     	; 0xa14 <prvCopyDataToQueue+0xb0>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	05 c0       	rjmp	.+10     	; 0xa14 <prvCopyDataToQueue+0xb0>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <prvCopyDataToQueue+0xb0>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <prvCopyDataToQueue+0xb0>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	1f 5f       	subi	r17, 0xFF	; 255
     a16:	1e 8f       	std	Y+30, r17	; 0x1e
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	08 95       	ret

00000a22 <prvCopyDataFromQueue>:
     a22:	fc 01       	movw	r30, r24
     a24:	40 a1       	ldd	r20, Z+32	; 0x20
     a26:	44 23       	and	r20, r20
     a28:	a9 f0       	breq	.+42     	; 0xa54 <prvCopyDataFromQueue+0x32>
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	26 81       	ldd	r18, Z+6	; 0x06
     a2e:	37 81       	ldd	r19, Z+7	; 0x07
     a30:	24 0f       	add	r18, r20
     a32:	35 1f       	adc	r19, r21
     a34:	37 83       	std	Z+7, r19	; 0x07
     a36:	26 83       	std	Z+6, r18	; 0x06
     a38:	84 81       	ldd	r24, Z+4	; 0x04
     a3a:	95 81       	ldd	r25, Z+5	; 0x05
     a3c:	28 17       	cp	r18, r24
     a3e:	39 07       	cpc	r19, r25
     a40:	20 f0       	brcs	.+8      	; 0xa4a <prvCopyDataFromQueue+0x28>
     a42:	80 81       	ld	r24, Z
     a44:	91 81       	ldd	r25, Z+1	; 0x01
     a46:	97 83       	std	Z+7, r25	; 0x07
     a48:	86 83       	std	Z+6, r24	; 0x06
     a4a:	cb 01       	movw	r24, r22
     a4c:	66 81       	ldd	r22, Z+6	; 0x06
     a4e:	77 81       	ldd	r23, Z+7	; 0x07
     a50:	0c 94 9a 2e 	jmp	0x5d34	; 0x5d34 <memcpy>
     a54:	08 95       	ret

00000a56 <prvUnlockQueue>:
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	0f 92       	push	r0
     a64:	1a a1       	ldd	r17, Y+34	; 0x22
     a66:	0b c0       	rjmp	.+22     	; 0xa7e <prvUnlockQueue+0x28>
     a68:	8b 89       	ldd	r24, Y+19	; 0x13
     a6a:	88 23       	and	r24, r24
     a6c:	51 f0       	breq	.+20     	; 0xa82 <prvUnlockQueue+0x2c>
     a6e:	ce 01       	movw	r24, r28
     a70:	43 96       	adiw	r24, 0x13	; 19
     a72:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskRemoveFromEventList>
     a76:	81 11       	cpse	r24, r1
     a78:	0e 94 60 12 	call	0x24c0	; 0x24c0 <vTaskMissedYield>
     a7c:	11 50       	subi	r17, 0x01	; 1
     a7e:	11 16       	cp	r1, r17
     a80:	9c f3       	brlt	.-26     	; 0xa68 <prvUnlockQueue+0x12>
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	8a a3       	std	Y+34, r24	; 0x22
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	0f 92       	push	r0
     a90:	19 a1       	ldd	r17, Y+33	; 0x21
     a92:	0b c0       	rjmp	.+22     	; 0xaaa <prvUnlockQueue+0x54>
     a94:	88 85       	ldd	r24, Y+8	; 0x08
     a96:	88 23       	and	r24, r24
     a98:	51 f0       	breq	.+20     	; 0xaae <prvUnlockQueue+0x58>
     a9a:	ce 01       	movw	r24, r28
     a9c:	08 96       	adiw	r24, 0x08	; 8
     a9e:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskRemoveFromEventList>
     aa2:	81 11       	cpse	r24, r1
     aa4:	0e 94 60 12 	call	0x24c0	; 0x24c0 <vTaskMissedYield>
     aa8:	11 50       	subi	r17, 0x01	; 1
     aaa:	11 16       	cp	r1, r17
     aac:	9c f3       	brlt	.-26     	; 0xa94 <prvUnlockQueue+0x3e>
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	89 a3       	std	Y+33, r24	; 0x21
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	08 95       	ret

00000abe <xQueueGenericReset>:
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	0f 92       	push	r0
     aca:	e8 81       	ld	r30, Y
     acc:	f9 81       	ldd	r31, Y+1	; 0x01
     ace:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ad0:	28 a1       	ldd	r18, Y+32	; 0x20
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	82 9f       	mul	r24, r18
     ad8:	a0 01       	movw	r20, r0
     ada:	83 9f       	mul	r24, r19
     adc:	50 0d       	add	r21, r0
     ade:	92 9f       	mul	r25, r18
     ae0:	50 0d       	add	r21, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	4e 0f       	add	r20, r30
     ae6:	5f 1f       	adc	r21, r31
     ae8:	5d 83       	std	Y+5, r21	; 0x05
     aea:	4c 83       	std	Y+4, r20	; 0x04
     aec:	1e 8e       	std	Y+30, r1	; 0x1e
     aee:	fb 83       	std	Y+3, r31	; 0x03
     af0:	ea 83       	std	Y+2, r30	; 0x02
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	28 9f       	mul	r18, r24
     af6:	a0 01       	movw	r20, r0
     af8:	29 9f       	mul	r18, r25
     afa:	50 0d       	add	r21, r0
     afc:	38 9f       	mul	r19, r24
     afe:	50 0d       	add	r21, r0
     b00:	11 24       	eor	r1, r1
     b02:	cf 01       	movw	r24, r30
     b04:	84 0f       	add	r24, r20
     b06:	95 1f       	adc	r25, r21
     b08:	9f 83       	std	Y+7, r25	; 0x07
     b0a:	8e 83       	std	Y+6, r24	; 0x06
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	89 a3       	std	Y+33, r24	; 0x21
     b10:	8a a3       	std	Y+34, r24	; 0x22
     b12:	61 11       	cpse	r22, r1
     b14:	0b c0       	rjmp	.+22     	; 0xb2c <xQueueGenericReset+0x6e>
     b16:	88 85       	ldd	r24, Y+8	; 0x08
     b18:	88 23       	and	r24, r24
     b1a:	71 f0       	breq	.+28     	; 0xb38 <xQueueGenericReset+0x7a>
     b1c:	ce 01       	movw	r24, r28
     b1e:	08 96       	adiw	r24, 0x08	; 8
     b20:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskRemoveFromEventList>
     b24:	88 23       	and	r24, r24
     b26:	41 f0       	breq	.+16     	; 0xb38 <xQueueGenericReset+0x7a>
     b28:	2a de       	rcall	.-940    	; 0x77e <vPortYield>
     b2a:	06 c0       	rjmp	.+12     	; 0xb38 <xQueueGenericReset+0x7a>
     b2c:	ce 01       	movw	r24, r28
     b2e:	08 96       	adiw	r24, 0x08	; 8
     b30:	58 dd       	rcall	.-1360   	; 0x5e2 <vListInitialise>
     b32:	ce 01       	movw	r24, r28
     b34:	43 96       	adiw	r24, 0x13	; 19
     b36:	55 dd       	rcall	.-1366   	; 0x5e2 <vListInitialise>
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <prvInitialiseNewQueue>:
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	f8 01       	movw	r30, r16
     b4a:	61 11       	cpse	r22, r1
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <prvInitialiseNewQueue+0x10>
     b4e:	11 83       	std	Z+1, r17	; 0x01
     b50:	00 83       	st	Z, r16
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <prvInitialiseNewQueue+0x14>
     b54:	51 83       	std	Z+1, r21	; 0x01
     b56:	40 83       	st	Z, r20
     b58:	87 8f       	std	Z+31, r24	; 0x1f
     b5a:	60 a3       	std	Z+32, r22	; 0x20
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	cf 01       	movw	r24, r30
     b60:	ae df       	rcall	.-164    	; 0xabe <xQueueGenericReset>
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	08 95       	ret

00000b68 <xQueueGenericCreate>:
     b68:	df 92       	push	r13
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	f8 2e       	mov	r15, r24
     b78:	e6 2e       	mov	r14, r22
     b7a:	d4 2e       	mov	r13, r20
     b7c:	86 9f       	mul	r24, r22
     b7e:	c0 01       	movw	r24, r0
     b80:	11 24       	eor	r1, r1
     b82:	83 96       	adiw	r24, 0x23	; 35
     b84:	43 dc       	rcall	.-1914   	; 0x40c <pvPortMalloc>
     b86:	ec 01       	movw	r28, r24
     b88:	00 97       	sbiw	r24, 0x00	; 0
     b8a:	41 f0       	breq	.+16     	; 0xb9c <xQueueGenericCreate+0x34>
     b8c:	8c 01       	movw	r16, r24
     b8e:	2d 2d       	mov	r18, r13
     b90:	ac 01       	movw	r20, r24
     b92:	4d 5d       	subi	r20, 0xDD	; 221
     b94:	5f 4f       	sbci	r21, 0xFF	; 255
     b96:	6e 2d       	mov	r22, r14
     b98:	8f 2d       	mov	r24, r15
     b9a:	d4 df       	rcall	.-88     	; 0xb44 <prvInitialiseNewQueue>
     b9c:	ce 01       	movw	r24, r28
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	08 95       	ret

00000bae <xQueueGenericSend>:
     bae:	cf 92       	push	r12
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	29 97       	sbiw	r28, 0x09	; 9
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	7c 01       	movw	r14, r24
     bd0:	6b 01       	movw	r12, r22
     bd2:	2e 83       	std	Y+6, r18	; 0x06
     bd4:	3f 83       	std	Y+7, r19	; 0x07
     bd6:	48 87       	std	Y+8, r20	; 0x08
     bd8:	59 87       	std	Y+9, r21	; 0x09
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	0f 92       	push	r0
     be2:	f7 01       	movw	r30, r14
     be4:	96 8d       	ldd	r25, Z+30	; 0x1e
     be6:	87 8d       	ldd	r24, Z+31	; 0x1f
     be8:	98 17       	cp	r25, r24
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <xQueueGenericSend+0x42>
     bec:	02 30       	cpi	r16, 0x02	; 2
     bee:	b1 f4       	brne	.+44     	; 0xc1c <xQueueGenericSend+0x6e>
     bf0:	40 2f       	mov	r20, r16
     bf2:	b6 01       	movw	r22, r12
     bf4:	c7 01       	movw	r24, r14
     bf6:	b6 de       	rcall	.-660    	; 0x964 <prvCopyDataToQueue>
     bf8:	f7 01       	movw	r30, r14
     bfa:	93 89       	ldd	r25, Z+19	; 0x13
     bfc:	99 23       	and	r25, r25
     bfe:	41 f0       	breq	.+16     	; 0xc10 <xQueueGenericSend+0x62>
     c00:	c7 01       	movw	r24, r14
     c02:	43 96       	adiw	r24, 0x13	; 19
     c04:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskRemoveFromEventList>
     c08:	88 23       	and	r24, r24
     c0a:	21 f0       	breq	.+8      	; 0xc14 <xQueueGenericSend+0x66>
     c0c:	b8 dd       	rcall	.-1168   	; 0x77e <vPortYield>
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <xQueueGenericSend+0x66>
     c10:	81 11       	cpse	r24, r1
     c12:	b5 dd       	rcall	.-1174   	; 0x77e <vPortYield>
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	4c c0       	rjmp	.+152    	; 0xcb4 <xQueueGenericSend+0x106>
     c1c:	8e 81       	ldd	r24, Y+6	; 0x06
     c1e:	9f 81       	ldd	r25, Y+7	; 0x07
     c20:	a8 85       	ldd	r26, Y+8	; 0x08
     c22:	b9 85       	ldd	r27, Y+9	; 0x09
     c24:	89 2b       	or	r24, r25
     c26:	8a 2b       	or	r24, r26
     c28:	8b 2b       	or	r24, r27
     c2a:	21 f4       	brne	.+8      	; 0xc34 <xQueueGenericSend+0x86>
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	40 c0       	rjmp	.+128    	; 0xcb4 <xQueueGenericSend+0x106>
     c34:	11 11       	cpse	r17, r1
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <xQueueGenericSend+0x94>
     c38:	ce 01       	movw	r24, r28
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <vTaskInternalSetTimeOutState>
     c40:	11 e0       	ldi	r17, 0x01	; 1
     c42:	0f 90       	pop	r0
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	a6 d7       	rcall	.+3916   	; 0x1b94 <vTaskSuspendAll>
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	0f 92       	push	r0
     c4e:	f7 01       	movw	r30, r14
     c50:	81 a1       	ldd	r24, Z+33	; 0x21
     c52:	8f 3f       	cpi	r24, 0xFF	; 255
     c54:	09 f4       	brne	.+2      	; 0xc58 <xQueueGenericSend+0xaa>
     c56:	11 a2       	std	Z+33, r1	; 0x21
     c58:	f7 01       	movw	r30, r14
     c5a:	82 a1       	ldd	r24, Z+34	; 0x22
     c5c:	8f 3f       	cpi	r24, 0xFF	; 255
     c5e:	09 f4       	brne	.+2      	; 0xc62 <xQueueGenericSend+0xb4>
     c60:	12 a2       	std	Z+34, r1	; 0x22
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	be 01       	movw	r22, r28
     c68:	6a 5f       	subi	r22, 0xFA	; 250
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	ce 01       	movw	r24, r28
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <xTaskCheckForTimeOut>
     c74:	81 11       	cpse	r24, r1
     c76:	19 c0       	rjmp	.+50     	; 0xcaa <xQueueGenericSend+0xfc>
     c78:	c7 01       	movw	r24, r14
     c7a:	66 de       	rcall	.-820    	; 0x948 <prvIsQueueFull>
     c7c:	88 23       	and	r24, r24
     c7e:	81 f0       	breq	.+32     	; 0xca0 <xQueueGenericSend+0xf2>
     c80:	4e 81       	ldd	r20, Y+6	; 0x06
     c82:	5f 81       	ldd	r21, Y+7	; 0x07
     c84:	68 85       	ldd	r22, Y+8	; 0x08
     c86:	79 85       	ldd	r23, Y+9	; 0x09
     c88:	c7 01       	movw	r24, r14
     c8a:	08 96       	adiw	r24, 0x08	; 8
     c8c:	0e 94 cb 10 	call	0x2196	; 0x2196 <vTaskPlaceOnEventList>
     c90:	c7 01       	movw	r24, r14
     c92:	e1 de       	rcall	.-574    	; 0xa56 <prvUnlockQueue>
     c94:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskResumeAll>
     c98:	81 11       	cpse	r24, r1
     c9a:	a0 cf       	rjmp	.-192    	; 0xbdc <xQueueGenericSend+0x2e>
     c9c:	70 dd       	rcall	.-1312   	; 0x77e <vPortYield>
     c9e:	9e cf       	rjmp	.-196    	; 0xbdc <xQueueGenericSend+0x2e>
     ca0:	c7 01       	movw	r24, r14
     ca2:	d9 de       	rcall	.-590    	; 0xa56 <prvUnlockQueue>
     ca4:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskResumeAll>
     ca8:	99 cf       	rjmp	.-206    	; 0xbdc <xQueueGenericSend+0x2e>
     caa:	c7 01       	movw	r24, r14
     cac:	d4 de       	rcall	.-600    	; 0xa56 <prvUnlockQueue>
     cae:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskResumeAll>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	29 96       	adiw	r28, 0x09	; 9
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	08 95       	ret

00000cd2 <xQueueGenericSendFromISR>:
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	8a 01       	movw	r16, r20
     ce0:	fc 01       	movw	r30, r24
     ce2:	56 8d       	ldd	r21, Z+30	; 0x1e
     ce4:	37 8d       	ldd	r19, Z+31	; 0x1f
     ce6:	53 17       	cp	r21, r19
     ce8:	10 f0       	brcs	.+4      	; 0xcee <xQueueGenericSendFromISR+0x1c>
     cea:	22 30       	cpi	r18, 0x02	; 2
     cec:	f9 f4       	brne	.+62     	; 0xd2c <xQueueGenericSendFromISR+0x5a>
     cee:	42 2f       	mov	r20, r18
     cf0:	78 01       	movw	r14, r16
     cf2:	ec 01       	movw	r28, r24
     cf4:	1a a1       	ldd	r17, Y+34	; 0x22
     cf6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cf8:	ce 01       	movw	r24, r28
     cfa:	34 de       	rcall	.-920    	; 0x964 <prvCopyDataToQueue>
     cfc:	1f 3f       	cpi	r17, 0xFF	; 255
     cfe:	81 f4       	brne	.+32     	; 0xd20 <xQueueGenericSendFromISR+0x4e>
     d00:	8b 89       	ldd	r24, Y+19	; 0x13
     d02:	88 23       	and	r24, r24
     d04:	a9 f0       	breq	.+42     	; 0xd30 <xQueueGenericSendFromISR+0x5e>
     d06:	ce 01       	movw	r24, r28
     d08:	43 96       	adiw	r24, 0x13	; 19
     d0a:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskRemoveFromEventList>
     d0e:	88 23       	and	r24, r24
     d10:	89 f0       	breq	.+34     	; 0xd34 <xQueueGenericSendFromISR+0x62>
     d12:	e1 14       	cp	r14, r1
     d14:	f1 04       	cpc	r15, r1
     d16:	81 f0       	breq	.+32     	; 0xd38 <xQueueGenericSendFromISR+0x66>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	f7 01       	movw	r30, r14
     d1c:	80 83       	st	Z, r24
     d1e:	0d c0       	rjmp	.+26     	; 0xd3a <xQueueGenericSendFromISR+0x68>
     d20:	ff 24       	eor	r15, r15
     d22:	f3 94       	inc	r15
     d24:	f1 0e       	add	r15, r17
     d26:	fa a2       	std	Y+34, r15	; 0x22
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <xQueueGenericSendFromISR+0x68>
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <xQueueGenericSendFromISR+0x68>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <xQueueGenericSendFromISR+0x68>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <xQueueGenericSendFromISR+0x68>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	08 95       	ret

00000d48 <xQueueReceive>:
     d48:	cf 92       	push	r12
     d4a:	df 92       	push	r13
     d4c:	ef 92       	push	r14
     d4e:	ff 92       	push	r15
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	29 97       	sbiw	r28, 0x09	; 9
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	8c 01       	movw	r16, r24
     d6a:	6b 01       	movw	r12, r22
     d6c:	2e 83       	std	Y+6, r18	; 0x06
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	48 87       	std	Y+8, r20	; 0x08
     d72:	59 87       	std	Y+9, r21	; 0x09
     d74:	e1 2c       	mov	r14, r1
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	0f 92       	push	r0
     d7c:	f8 01       	movw	r30, r16
     d7e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d80:	ff 20       	and	r15, r15
     d82:	99 f0       	breq	.+38     	; 0xdaa <xQueueReceive+0x62>
     d84:	b6 01       	movw	r22, r12
     d86:	c8 01       	movw	r24, r16
     d88:	4c de       	rcall	.-872    	; 0xa22 <prvCopyDataFromQueue>
     d8a:	fa 94       	dec	r15
     d8c:	f8 01       	movw	r30, r16
     d8e:	f6 8e       	std	Z+30, r15	; 0x1e
     d90:	80 85       	ldd	r24, Z+8	; 0x08
     d92:	88 23       	and	r24, r24
     d94:	31 f0       	breq	.+12     	; 0xda2 <xQueueReceive+0x5a>
     d96:	c8 01       	movw	r24, r16
     d98:	08 96       	adiw	r24, 0x08	; 8
     d9a:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskRemoveFromEventList>
     d9e:	81 11       	cpse	r24, r1
     da0:	ee dc       	rcall	.-1572   	; 0x77e <vPortYield>
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	4f c0       	rjmp	.+158    	; 0xe48 <xQueueReceive+0x100>
     daa:	8e 81       	ldd	r24, Y+6	; 0x06
     dac:	9f 81       	ldd	r25, Y+7	; 0x07
     dae:	a8 85       	ldd	r26, Y+8	; 0x08
     db0:	b9 85       	ldd	r27, Y+9	; 0x09
     db2:	89 2b       	or	r24, r25
     db4:	8a 2b       	or	r24, r26
     db6:	8b 2b       	or	r24, r27
     db8:	21 f4       	brne	.+8      	; 0xdc2 <xQueueReceive+0x7a>
     dba:	0f 90       	pop	r0
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	43 c0       	rjmp	.+134    	; 0xe48 <xQueueReceive+0x100>
     dc2:	e1 10       	cpse	r14, r1
     dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <xQueueReceive+0x8a>
     dc6:	ce 01       	movw	r24, r28
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <vTaskInternalSetTimeOutState>
     dce:	ee 24       	eor	r14, r14
     dd0:	e3 94       	inc	r14
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	de d6       	rcall	.+3516   	; 0x1b94 <vTaskSuspendAll>
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	0f 92       	push	r0
     dde:	f8 01       	movw	r30, r16
     de0:	81 a1       	ldd	r24, Z+33	; 0x21
     de2:	8f 3f       	cpi	r24, 0xFF	; 255
     de4:	09 f4       	brne	.+2      	; 0xde8 <xQueueReceive+0xa0>
     de6:	11 a2       	std	Z+33, r1	; 0x21
     de8:	f8 01       	movw	r30, r16
     dea:	82 a1       	ldd	r24, Z+34	; 0x22
     dec:	8f 3f       	cpi	r24, 0xFF	; 255
     dee:	09 f4       	brne	.+2      	; 0xdf2 <xQueueReceive+0xaa>
     df0:	12 a2       	std	Z+34, r1	; 0x22
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	be 01       	movw	r22, r28
     df8:	6a 5f       	subi	r22, 0xFA	; 250
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <xTaskCheckForTimeOut>
     e04:	81 11       	cpse	r24, r1
     e06:	17 c0       	rjmp	.+46     	; 0xe36 <xQueueReceive+0xee>
     e08:	c8 01       	movw	r24, r16
     e0a:	91 dd       	rcall	.-1246   	; 0x92e <prvIsQueueEmpty>
     e0c:	88 23       	and	r24, r24
     e0e:	79 f0       	breq	.+30     	; 0xe2e <xQueueReceive+0xe6>
     e10:	4e 81       	ldd	r20, Y+6	; 0x06
     e12:	5f 81       	ldd	r21, Y+7	; 0x07
     e14:	68 85       	ldd	r22, Y+8	; 0x08
     e16:	79 85       	ldd	r23, Y+9	; 0x09
     e18:	c8 01       	movw	r24, r16
     e1a:	43 96       	adiw	r24, 0x13	; 19
     e1c:	0e 94 cb 10 	call	0x2196	; 0x2196 <vTaskPlaceOnEventList>
     e20:	c8 01       	movw	r24, r16
     e22:	19 de       	rcall	.-974    	; 0xa56 <prvUnlockQueue>
     e24:	f7 d7       	rcall	.+4078   	; 0x1e14 <xTaskResumeAll>
     e26:	81 11       	cpse	r24, r1
     e28:	a6 cf       	rjmp	.-180    	; 0xd76 <xQueueReceive+0x2e>
     e2a:	a9 dc       	rcall	.-1710   	; 0x77e <vPortYield>
     e2c:	a4 cf       	rjmp	.-184    	; 0xd76 <xQueueReceive+0x2e>
     e2e:	c8 01       	movw	r24, r16
     e30:	12 de       	rcall	.-988    	; 0xa56 <prvUnlockQueue>
     e32:	f0 d7       	rcall	.+4064   	; 0x1e14 <xTaskResumeAll>
     e34:	a0 cf       	rjmp	.-192    	; 0xd76 <xQueueReceive+0x2e>
     e36:	c8 01       	movw	r24, r16
     e38:	0e de       	rcall	.-996    	; 0xa56 <prvUnlockQueue>
     e3a:	ec d7       	rcall	.+4056   	; 0x1e14 <xTaskResumeAll>
     e3c:	c8 01       	movw	r24, r16
     e3e:	77 dd       	rcall	.-1298   	; 0x92e <prvIsQueueEmpty>
     e40:	88 23       	and	r24, r24
     e42:	09 f4       	brne	.+2      	; 0xe46 <xQueueReceive+0xfe>
     e44:	98 cf       	rjmp	.-208    	; 0xd76 <xQueueReceive+0x2e>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	29 96       	adiw	r28, 0x09	; 9
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	08 95       	ret

00000e66 <xQueueSemaphoreTake>:
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	29 97       	sbiw	r28, 0x09	; 9
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	8c 01       	movw	r16, r24
     e84:	4e 83       	std	Y+6, r20	; 0x06
     e86:	5f 83       	std	Y+7, r21	; 0x07
     e88:	68 87       	std	Y+8, r22	; 0x08
     e8a:	79 87       	std	Y+9, r23	; 0x09
     e8c:	e1 2c       	mov	r14, r1
     e8e:	f1 2c       	mov	r15, r1
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	0f 92       	push	r0
     e96:	f8 01       	movw	r30, r16
     e98:	86 8d       	ldd	r24, Z+30	; 0x1e
     e9a:	88 23       	and	r24, r24
     e9c:	c9 f0       	breq	.+50     	; 0xed0 <xQueueSemaphoreTake+0x6a>
     e9e:	81 50       	subi	r24, 0x01	; 1
     ea0:	86 8f       	std	Z+30, r24	; 0x1e
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	89 2b       	or	r24, r25
     ea8:	29 f4       	brne	.+10     	; 0xeb4 <xQueueSemaphoreTake+0x4e>
     eaa:	0e 94 c0 13 	call	0x2780	; 0x2780 <pvTaskIncrementMutexHeldCount>
     eae:	f8 01       	movw	r30, r16
     eb0:	95 83       	std	Z+5, r25	; 0x05
     eb2:	84 83       	std	Z+4, r24	; 0x04
     eb4:	f8 01       	movw	r30, r16
     eb6:	80 85       	ldd	r24, Z+8	; 0x08
     eb8:	88 23       	and	r24, r24
     eba:	31 f0       	breq	.+12     	; 0xec8 <xQueueSemaphoreTake+0x62>
     ebc:	c8 01       	movw	r24, r16
     ebe:	08 96       	adiw	r24, 0x08	; 8
     ec0:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskRemoveFromEventList>
     ec4:	81 11       	cpse	r24, r1
     ec6:	5b dc       	rcall	.-1866   	; 0x77e <vPortYield>
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	6f c0       	rjmp	.+222    	; 0xfae <xQueueSemaphoreTake+0x148>
     ed0:	8e 81       	ldd	r24, Y+6	; 0x06
     ed2:	9f 81       	ldd	r25, Y+7	; 0x07
     ed4:	a8 85       	ldd	r26, Y+8	; 0x08
     ed6:	b9 85       	ldd	r27, Y+9	; 0x09
     ed8:	89 2b       	or	r24, r25
     eda:	8a 2b       	or	r24, r26
     edc:	8b 2b       	or	r24, r27
     ede:	21 f4       	brne	.+8      	; 0xee8 <xQueueSemaphoreTake+0x82>
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	63 c0       	rjmp	.+198    	; 0xfae <xQueueSemaphoreTake+0x148>
     ee8:	f1 10       	cpse	r15, r1
     eea:	06 c0       	rjmp	.+12     	; 0xef8 <xQueueSemaphoreTake+0x92>
     eec:	ce 01       	movw	r24, r28
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <vTaskInternalSetTimeOutState>
     ef4:	ff 24       	eor	r15, r15
     ef6:	f3 94       	inc	r15
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	4b d6       	rcall	.+3222   	; 0x1b94 <vTaskSuspendAll>
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	0f 92       	push	r0
     f04:	f8 01       	movw	r30, r16
     f06:	81 a1       	ldd	r24, Z+33	; 0x21
     f08:	8f 3f       	cpi	r24, 0xFF	; 255
     f0a:	09 f4       	brne	.+2      	; 0xf0e <xQueueSemaphoreTake+0xa8>
     f0c:	11 a2       	std	Z+33, r1	; 0x21
     f0e:	f8 01       	movw	r30, r16
     f10:	82 a1       	ldd	r24, Z+34	; 0x22
     f12:	8f 3f       	cpi	r24, 0xFF	; 255
     f14:	09 f4       	brne	.+2      	; 0xf18 <xQueueSemaphoreTake+0xb2>
     f16:	12 a2       	std	Z+34, r1	; 0x22
     f18:	0f 90       	pop	r0
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	be 01       	movw	r22, r28
     f1e:	6a 5f       	subi	r22, 0xFA	; 250
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <xTaskCheckForTimeOut>
     f2a:	81 11       	cpse	r24, r1
     f2c:	26 c0       	rjmp	.+76     	; 0xf7a <xQueueSemaphoreTake+0x114>
     f2e:	c8 01       	movw	r24, r16
     f30:	fe dc       	rcall	.-1540   	; 0x92e <prvIsQueueEmpty>
     f32:	88 23       	and	r24, r24
     f34:	f1 f0       	breq	.+60     	; 0xf72 <xQueueSemaphoreTake+0x10c>
     f36:	f8 01       	movw	r30, r16
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	89 2b       	or	r24, r25
     f3e:	51 f4       	brne	.+20     	; 0xf54 <xQueueSemaphoreTake+0xee>
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	0f 92       	push	r0
     f46:	84 81       	ldd	r24, Z+4	; 0x04
     f48:	95 81       	ldd	r25, Z+5	; 0x05
     f4a:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskPriorityInherit>
     f4e:	e8 2e       	mov	r14, r24
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	4e 81       	ldd	r20, Y+6	; 0x06
     f56:	5f 81       	ldd	r21, Y+7	; 0x07
     f58:	68 85       	ldd	r22, Y+8	; 0x08
     f5a:	79 85       	ldd	r23, Y+9	; 0x09
     f5c:	c8 01       	movw	r24, r16
     f5e:	43 96       	adiw	r24, 0x13	; 19
     f60:	0e 94 cb 10 	call	0x2196	; 0x2196 <vTaskPlaceOnEventList>
     f64:	c8 01       	movw	r24, r16
     f66:	77 dd       	rcall	.-1298   	; 0xa56 <prvUnlockQueue>
     f68:	55 d7       	rcall	.+3754   	; 0x1e14 <xTaskResumeAll>
     f6a:	81 11       	cpse	r24, r1
     f6c:	91 cf       	rjmp	.-222    	; 0xe90 <xQueueSemaphoreTake+0x2a>
     f6e:	07 dc       	rcall	.-2034   	; 0x77e <vPortYield>
     f70:	8f cf       	rjmp	.-226    	; 0xe90 <xQueueSemaphoreTake+0x2a>
     f72:	c8 01       	movw	r24, r16
     f74:	70 dd       	rcall	.-1312   	; 0xa56 <prvUnlockQueue>
     f76:	4e d7       	rcall	.+3740   	; 0x1e14 <xTaskResumeAll>
     f78:	8b cf       	rjmp	.-234    	; 0xe90 <xQueueSemaphoreTake+0x2a>
     f7a:	c8 01       	movw	r24, r16
     f7c:	6c dd       	rcall	.-1320   	; 0xa56 <prvUnlockQueue>
     f7e:	4a d7       	rcall	.+3732   	; 0x1e14 <xTaskResumeAll>
     f80:	c8 01       	movw	r24, r16
     f82:	d5 dc       	rcall	.-1622   	; 0x92e <prvIsQueueEmpty>
     f84:	88 23       	and	r24, r24
     f86:	09 f4       	brne	.+2      	; 0xf8a <xQueueSemaphoreTake+0x124>
     f88:	83 cf       	rjmp	.-250    	; 0xe90 <xQueueSemaphoreTake+0x2a>
     f8a:	ee 20       	and	r14, r14
     f8c:	79 f0       	breq	.+30     	; 0xfac <xQueueSemaphoreTake+0x146>
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	0f 92       	push	r0
     f94:	c8 01       	movw	r24, r16
     f96:	bb dc       	rcall	.-1674   	; 0x90e <prvGetDisinheritPriorityAfterTimeout>
     f98:	68 2f       	mov	r22, r24
     f9a:	f8 01       	movw	r30, r16
     f9c:	84 81       	ldd	r24, Z+4	; 0x04
     f9e:	95 81       	ldd	r25, Z+5	; 0x05
     fa0:	0e 94 59 13 	call	0x26b2	; 0x26b2 <vTaskPriorityDisinheritAfterTimeout>
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	01 c0       	rjmp	.+2      	; 0xfae <xQueueSemaphoreTake+0x148>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	29 96       	adiw	r28, 0x09	; 9
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	08 95       	ret

00000fc8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	0f 92       	push	r0
     fd4:	89 a1       	ldd	r24, Y+33	; 0x21
     fd6:	8f 3f       	cpi	r24, 0xFF	; 255
     fd8:	09 f4       	brne	.+2      	; 0xfdc <vQueueWaitForMessageRestricted+0x14>
     fda:	19 a2       	std	Y+33, r1	; 0x21
     fdc:	8a a1       	ldd	r24, Y+34	; 0x22
     fde:	8f 3f       	cpi	r24, 0xFF	; 255
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <vQueueWaitForMessageRestricted+0x1c>
     fe2:	1a a2       	std	Y+34, r1	; 0x22
     fe4:	0f 90       	pop	r0
     fe6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     fe8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fea:	81 11       	cpse	r24, r1
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     fee:	ce 01       	movw	r24, r28
     ff0:	43 96       	adiw	r24, 0x13	; 19
     ff2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     ff6:	ce 01       	movw	r24, r28
     ff8:	2e dd       	rcall	.-1444   	; 0xa56 <prvUnlockQueue>
    }
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1000:	fc 01       	movw	r30, r24
    1002:	44 81       	ldd	r20, Z+4	; 0x04
    1004:	55 81       	ldd	r21, Z+5	; 0x05
    1006:	22 81       	ldd	r18, Z+2	; 0x02
    1008:	33 81       	ldd	r19, Z+3	; 0x03
    100a:	24 0f       	add	r18, r20
    100c:	35 1f       	adc	r19, r21
    100e:	80 81       	ld	r24, Z
    1010:	91 81       	ldd	r25, Z+1	; 0x01
    1012:	b9 01       	movw	r22, r18
    1014:	68 1b       	sub	r22, r24
    1016:	79 0b       	sbc	r23, r25
    1018:	cb 01       	movw	r24, r22
    101a:	64 17       	cp	r22, r20
    101c:	75 07       	cpc	r23, r21
    101e:	10 f0       	brcs	.+4      	; 0x1024 <prvBytesInBuffer+0x24>
    1020:	84 1b       	sub	r24, r20
    1022:	95 0b       	sbc	r25, r21
    1024:	08 95       	ret

00001026 <prvInitialiseNewStreamBuffer>:
    1026:	0f 93       	push	r16
    1028:	fc 01       	movw	r30, r24
    102a:	8f e0       	ldi	r24, 0x0F	; 15
    102c:	df 01       	movw	r26, r30
    102e:	1d 92       	st	X+, r1
    1030:	8a 95       	dec	r24
    1032:	e9 f7       	brne	.-6      	; 0x102e <prvInitialiseNewStreamBuffer+0x8>
    1034:	75 87       	std	Z+13, r23	; 0x0d
    1036:	64 87       	std	Z+12, r22	; 0x0c
    1038:	55 83       	std	Z+5, r21	; 0x05
    103a:	44 83       	std	Z+4, r20	; 0x04
    103c:	37 83       	std	Z+7, r19	; 0x07
    103e:	26 83       	std	Z+6, r18	; 0x06
    1040:	06 87       	std	Z+14, r16	; 0x0e
    1042:	0f 91       	pop	r16
    1044:	08 95       	ret

00001046 <prvWriteBytesToBuffer>:
    1046:	af 92       	push	r10
    1048:	bf 92       	push	r11
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	6c 01       	movw	r12, r24
    105c:	5b 01       	movw	r10, r22
    105e:	7a 01       	movw	r14, r20
    1060:	fc 01       	movw	r30, r24
    1062:	c2 81       	ldd	r28, Z+2	; 0x02
    1064:	d3 81       	ldd	r29, Z+3	; 0x03
    1066:	04 81       	ldd	r16, Z+4	; 0x04
    1068:	15 81       	ldd	r17, Z+5	; 0x05
    106a:	0c 1b       	sub	r16, r28
    106c:	1d 0b       	sbc	r17, r29
    106e:	40 17       	cp	r20, r16
    1070:	51 07       	cpc	r21, r17
    1072:	08 f4       	brcc	.+2      	; 0x1076 <prvWriteBytesToBuffer+0x30>
    1074:	8a 01       	movw	r16, r20
    1076:	f6 01       	movw	r30, r12
    1078:	84 85       	ldd	r24, Z+12	; 0x0c
    107a:	95 85       	ldd	r25, Z+13	; 0x0d
    107c:	a8 01       	movw	r20, r16
    107e:	b5 01       	movw	r22, r10
    1080:	8c 0f       	add	r24, r28
    1082:	9d 1f       	adc	r25, r29
    1084:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <memcpy>
    1088:	0e 15       	cp	r16, r14
    108a:	1f 05       	cpc	r17, r15
    108c:	58 f4       	brcc	.+22     	; 0x10a4 <prvWriteBytesToBuffer+0x5e>
    108e:	a7 01       	movw	r20, r14
    1090:	40 1b       	sub	r20, r16
    1092:	51 0b       	sbc	r21, r17
    1094:	b5 01       	movw	r22, r10
    1096:	60 0f       	add	r22, r16
    1098:	71 1f       	adc	r23, r17
    109a:	f6 01       	movw	r30, r12
    109c:	84 85       	ldd	r24, Z+12	; 0x0c
    109e:	95 85       	ldd	r25, Z+13	; 0x0d
    10a0:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <memcpy>
    10a4:	ce 01       	movw	r24, r28
    10a6:	8e 0d       	add	r24, r14
    10a8:	9f 1d       	adc	r25, r15
    10aa:	f6 01       	movw	r30, r12
    10ac:	24 81       	ldd	r18, Z+4	; 0x04
    10ae:	35 81       	ldd	r19, Z+5	; 0x05
    10b0:	82 17       	cp	r24, r18
    10b2:	93 07       	cpc	r25, r19
    10b4:	10 f0       	brcs	.+4      	; 0x10ba <prvWriteBytesToBuffer+0x74>
    10b6:	82 1b       	sub	r24, r18
    10b8:	93 0b       	sbc	r25, r19
    10ba:	f6 01       	movw	r30, r12
    10bc:	93 83       	std	Z+3, r25	; 0x03
    10be:	82 83       	std	Z+2, r24	; 0x02
    10c0:	c7 01       	movw	r24, r14
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	08 95       	ret

000010d8 <prvWriteMessageToBuffer>:
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	1f 92       	push	r1
    10ea:	1f 92       	push	r1
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	7c 01       	movw	r14, r24
    10f2:	6b 01       	movw	r12, r22
    10f4:	5a 83       	std	Y+2, r21	; 0x02
    10f6:	49 83       	std	Y+1, r20	; 0x01
    10f8:	21 15       	cp	r18, r1
    10fa:	31 05       	cpc	r19, r1
    10fc:	c1 f0       	breq	.+48     	; 0x112e <prvWriteMessageToBuffer+0x56>
    10fe:	fc 01       	movw	r30, r24
    1100:	86 85       	ldd	r24, Z+14	; 0x0e
    1102:	80 fd       	sbrc	r24, 0
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <prvWriteMessageToBuffer+0x3e>
    1106:	42 17       	cp	r20, r18
    1108:	53 07       	cpc	r21, r19
    110a:	08 f4       	brcc	.+2      	; 0x110e <prvWriteMessageToBuffer+0x36>
    110c:	9a 01       	movw	r18, r20
    110e:	3a 83       	std	Y+2, r19	; 0x02
    1110:	29 83       	std	Y+1, r18	; 0x01
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	0f c0       	rjmp	.+30     	; 0x1134 <prvWriteMessageToBuffer+0x5c>
    1116:	20 17       	cp	r18, r16
    1118:	31 07       	cpc	r19, r17
    111a:	58 f0       	brcs	.+22     	; 0x1132 <prvWriteMessageToBuffer+0x5a>
    111c:	42 e0       	ldi	r20, 0x02	; 2
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	be 01       	movw	r22, r28
    1122:	6f 5f       	subi	r22, 0xFF	; 255
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	c7 01       	movw	r24, r14
    1128:	8e df       	rcall	.-228    	; 0x1046 <prvWriteBytesToBuffer>
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <prvWriteMessageToBuffer+0x5c>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <prvWriteMessageToBuffer+0x5c>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	88 23       	and	r24, r24
    1136:	31 f0       	breq	.+12     	; 0x1144 <prvWriteMessageToBuffer+0x6c>
    1138:	49 81       	ldd	r20, Y+1	; 0x01
    113a:	5a 81       	ldd	r21, Y+2	; 0x02
    113c:	b6 01       	movw	r22, r12
    113e:	c7 01       	movw	r24, r14
    1140:	82 df       	rcall	.-252    	; 0x1046 <prvWriteBytesToBuffer>
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <prvWriteMessageToBuffer+0x70>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
    115c:	08 95       	ret

0000115e <prvReadBytesFromBuffer>:
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	7c 01       	movw	r14, r24
    1174:	5b 01       	movw	r10, r22
    1176:	e9 01       	movw	r28, r18
    1178:	42 17       	cp	r20, r18
    117a:	53 07       	cpc	r21, r19
    117c:	08 f4       	brcc	.+2      	; 0x1180 <prvReadBytesFromBuffer+0x22>
    117e:	ea 01       	movw	r28, r20
    1180:	20 97       	sbiw	r28, 0x00	; 0
    1182:	81 f1       	breq	.+96     	; 0x11e4 <prvReadBytesFromBuffer+0x86>
    1184:	f7 01       	movw	r30, r14
    1186:	00 81       	ld	r16, Z
    1188:	11 81       	ldd	r17, Z+1	; 0x01
    118a:	84 81       	ldd	r24, Z+4	; 0x04
    118c:	95 81       	ldd	r25, Z+5	; 0x05
    118e:	80 1b       	sub	r24, r16
    1190:	91 0b       	sbc	r25, r17
    1192:	6e 01       	movw	r12, r28
    1194:	8c 17       	cp	r24, r28
    1196:	9d 07       	cpc	r25, r29
    1198:	08 f4       	brcc	.+2      	; 0x119c <prvReadBytesFromBuffer+0x3e>
    119a:	6c 01       	movw	r12, r24
    119c:	f7 01       	movw	r30, r14
    119e:	64 85       	ldd	r22, Z+12	; 0x0c
    11a0:	75 85       	ldd	r23, Z+13	; 0x0d
    11a2:	60 0f       	add	r22, r16
    11a4:	71 1f       	adc	r23, r17
    11a6:	a6 01       	movw	r20, r12
    11a8:	c5 01       	movw	r24, r10
    11aa:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <memcpy>
    11ae:	cc 16       	cp	r12, r28
    11b0:	dd 06       	cpc	r13, r29
    11b2:	58 f4       	brcc	.+22     	; 0x11ca <prvReadBytesFromBuffer+0x6c>
    11b4:	ae 01       	movw	r20, r28
    11b6:	4c 19       	sub	r20, r12
    11b8:	5d 09       	sbc	r21, r13
    11ba:	f7 01       	movw	r30, r14
    11bc:	64 85       	ldd	r22, Z+12	; 0x0c
    11be:	75 85       	ldd	r23, Z+13	; 0x0d
    11c0:	c5 01       	movw	r24, r10
    11c2:	8c 0d       	add	r24, r12
    11c4:	9d 1d       	adc	r25, r13
    11c6:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <memcpy>
    11ca:	0c 0f       	add	r16, r28
    11cc:	1d 1f       	adc	r17, r29
    11ce:	f7 01       	movw	r30, r14
    11d0:	84 81       	ldd	r24, Z+4	; 0x04
    11d2:	95 81       	ldd	r25, Z+5	; 0x05
    11d4:	08 17       	cp	r16, r24
    11d6:	19 07       	cpc	r17, r25
    11d8:	10 f0       	brcs	.+4      	; 0x11de <prvReadBytesFromBuffer+0x80>
    11da:	08 1b       	sub	r16, r24
    11dc:	19 0b       	sbc	r17, r25
    11de:	f7 01       	movw	r30, r14
    11e0:	11 83       	std	Z+1, r17	; 0x01
    11e2:	00 83       	st	Z, r16
    11e4:	ce 01       	movw	r24, r28
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	bf 90       	pop	r11
    11f8:	af 90       	pop	r10
    11fa:	08 95       	ret

000011fc <prvReadMessageFromBuffer>:
    11fc:	6f 92       	push	r6
    11fe:	7f 92       	push	r7
    1200:	8f 92       	push	r8
    1202:	9f 92       	push	r9
    1204:	af 92       	push	r10
    1206:	bf 92       	push	r11
    1208:	cf 92       	push	r12
    120a:	df 92       	push	r13
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	1f 92       	push	r1
    121a:	1f 92       	push	r1
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	6c 01       	movw	r12, r24
    1222:	4b 01       	movw	r8, r22
    1224:	5a 01       	movw	r10, r20
    1226:	79 01       	movw	r14, r18
    1228:	01 15       	cp	r16, r1
    122a:	11 05       	cpc	r17, r1
    122c:	b1 f0       	breq	.+44     	; 0x125a <prvReadMessageFromBuffer+0x5e>
    122e:	fc 01       	movw	r30, r24
    1230:	60 80       	ld	r6, Z
    1232:	71 80       	ldd	r7, Z+1	; 0x01
    1234:	a8 01       	movw	r20, r16
    1236:	be 01       	movw	r22, r28
    1238:	6f 5f       	subi	r22, 0xFF	; 255
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	90 df       	rcall	.-224    	; 0x115e <prvReadBytesFromBuffer>
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	e0 1a       	sub	r14, r16
    1244:	f1 0a       	sbc	r15, r17
    1246:	a8 16       	cp	r10, r24
    1248:	b9 06       	cpc	r11, r25
    124a:	30 f4       	brcc	.+12     	; 0x1258 <prvReadMessageFromBuffer+0x5c>
    124c:	f6 01       	movw	r30, r12
    124e:	71 82       	std	Z+1, r7	; 0x01
    1250:	60 82       	st	Z, r6
    1252:	a1 2c       	mov	r10, r1
    1254:	b1 2c       	mov	r11, r1
    1256:	01 c0       	rjmp	.+2      	; 0x125a <prvReadMessageFromBuffer+0x5e>
    1258:	5c 01       	movw	r10, r24
    125a:	97 01       	movw	r18, r14
    125c:	a5 01       	movw	r20, r10
    125e:	b4 01       	movw	r22, r8
    1260:	c6 01       	movw	r24, r12
    1262:	7d df       	rcall	.-262    	; 0x115e <prvReadBytesFromBuffer>
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	df 90       	pop	r13
    1276:	cf 90       	pop	r12
    1278:	bf 90       	pop	r11
    127a:	af 90       	pop	r10
    127c:	9f 90       	pop	r9
    127e:	8f 90       	pop	r8
    1280:	7f 90       	pop	r7
    1282:	6f 90       	pop	r6
    1284:	08 95       	ret

00001286 <xStreamBufferGenericCreate>:
    1286:	cf 92       	push	r12
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	ec 01       	movw	r28, r24
    1296:	6b 01       	movw	r12, r22
    1298:	41 30       	cpi	r20, 0x01	; 1
    129a:	11 f4       	brne	.+4      	; 0x12a0 <xStreamBufferGenericCreate+0x1a>
    129c:	01 e0       	ldi	r16, 0x01	; 1
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <xStreamBufferGenericCreate+0x1c>
    12a0:	00 e0       	ldi	r16, 0x00	; 0
    12a2:	c1 14       	cp	r12, r1
    12a4:	d1 04       	cpc	r13, r1
    12a6:	19 f4       	brne	.+6      	; 0x12ae <xStreamBufferGenericCreate+0x28>
    12a8:	cc 24       	eor	r12, r12
    12aa:	c3 94       	inc	r12
    12ac:	d1 2c       	mov	r13, r1
    12ae:	ce 01       	movw	r24, r28
    12b0:	40 96       	adiw	r24, 0x10	; 16
    12b2:	c8 17       	cp	r28, r24
    12b4:	d9 07       	cpc	r29, r25
    12b6:	20 f4       	brcc	.+8      	; 0x12c0 <xStreamBufferGenericCreate+0x3a>
    12b8:	21 96       	adiw	r28, 0x01	; 1
    12ba:	a8 d8       	rcall	.-3760   	; 0x40c <pvPortMalloc>
    12bc:	7c 01       	movw	r14, r24
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <xStreamBufferGenericCreate+0x3e>
    12c0:	e1 2c       	mov	r14, r1
    12c2:	f1 2c       	mov	r15, r1
    12c4:	e1 14       	cp	r14, r1
    12c6:	f1 04       	cpc	r15, r1
    12c8:	39 f0       	breq	.+14     	; 0x12d8 <xStreamBufferGenericCreate+0x52>
    12ca:	96 01       	movw	r18, r12
    12cc:	ae 01       	movw	r20, r28
    12ce:	b7 01       	movw	r22, r14
    12d0:	61 5f       	subi	r22, 0xF1	; 241
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	c7 01       	movw	r24, r14
    12d6:	a7 de       	rcall	.-690    	; 0x1026 <prvInitialiseNewStreamBuffer>
    12d8:	c7 01       	movw	r24, r14
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	08 95       	ret

000012ea <xStreamBufferReset>:
    12ea:	0f 93       	push	r16
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	0f 92       	push	r0
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 85       	ldd	r18, Z+8	; 0x08
    12f6:	31 85       	ldd	r19, Z+9	; 0x09
    12f8:	23 2b       	or	r18, r19
    12fa:	71 f4       	brne	.+28     	; 0x1318 <xStreamBufferReset+0x2e>
    12fc:	22 85       	ldd	r18, Z+10	; 0x0a
    12fe:	33 85       	ldd	r19, Z+11	; 0x0b
    1300:	23 2b       	or	r18, r19
    1302:	61 f4       	brne	.+24     	; 0x131c <xStreamBufferReset+0x32>
    1304:	26 81       	ldd	r18, Z+6	; 0x06
    1306:	37 81       	ldd	r19, Z+7	; 0x07
    1308:	44 81       	ldd	r20, Z+4	; 0x04
    130a:	55 81       	ldd	r21, Z+5	; 0x05
    130c:	64 85       	ldd	r22, Z+12	; 0x0c
    130e:	75 85       	ldd	r23, Z+13	; 0x0d
    1310:	06 85       	ldd	r16, Z+14	; 0x0e
    1312:	89 de       	rcall	.-750    	; 0x1026 <prvInitialiseNewStreamBuffer>
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	03 c0       	rjmp	.+6      	; 0x131e <xStreamBufferReset+0x34>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	01 c0       	rjmp	.+2      	; 0x131e <xStreamBufferReset+0x34>
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 91       	pop	r16
    1324:	08 95       	ret

00001326 <xStreamBufferSpacesAvailable>:
    1326:	fc 01       	movw	r30, r24
    1328:	24 81       	ldd	r18, Z+4	; 0x04
    132a:	35 81       	ldd	r19, Z+5	; 0x05
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	82 0f       	add	r24, r18
    1332:	93 1f       	adc	r25, r19
    1334:	42 81       	ldd	r20, Z+2	; 0x02
    1336:	53 81       	ldd	r21, Z+3	; 0x03
    1338:	84 1b       	sub	r24, r20
    133a:	95 0b       	sbc	r25, r21
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	82 17       	cp	r24, r18
    1340:	93 07       	cpc	r25, r19
    1342:	10 f0       	brcs	.+4      	; 0x1348 <xStreamBufferSpacesAvailable+0x22>
    1344:	82 1b       	sub	r24, r18
    1346:	93 0b       	sbc	r25, r19
    1348:	08 95       	ret

0000134a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    134a:	2f 92       	push	r2
    134c:	3f 92       	push	r3
    134e:	4f 92       	push	r4
    1350:	5f 92       	push	r5
    1352:	6f 92       	push	r6
    1354:	7f 92       	push	r7
    1356:	8f 92       	push	r8
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	2b 97       	sbiw	r28, 0x0b	; 11
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	4c 01       	movw	r8, r24
    1380:	7b 87       	std	Y+11, r23	; 0x0b
    1382:	6a 87       	std	Y+10, r22	; 0x0a
    1384:	1a 01       	movw	r2, r20
    1386:	0e 83       	std	Y+6, r16	; 0x06
    1388:	1f 83       	std	Y+7, r17	; 0x07
    138a:	28 87       	std	Y+8, r18	; 0x08
    138c:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    138e:	fc 01       	movw	r30, r24
    1390:	84 81       	ldd	r24, Z+4	; 0x04
    1392:	95 81       	ldd	r25, Z+5	; 0x05
    1394:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1396:	26 85       	ldd	r18, Z+14	; 0x0e
    1398:	20 ff       	sbrs	r18, 0
    139a:	0c c0       	rjmp	.+24     	; 0x13b4 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    139c:	2a 01       	movw	r4, r20
    139e:	f2 e0       	ldi	r31, 0x02	; 2
    13a0:	4f 0e       	add	r4, r31
    13a2:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    13a4:	84 15       	cp	r24, r4
    13a6:	95 05       	cpc	r25, r5
    13a8:	58 f4       	brcc	.+22     	; 0x13c0 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    13aa:	1e 82       	std	Y+6, r1	; 0x06
    13ac:	1f 82       	std	Y+7, r1	; 0x07
    13ae:	18 86       	std	Y+8, r1	; 0x08
    13b0:	19 86       	std	Y+9, r1	; 0x09
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    13b4:	84 17       	cp	r24, r20
    13b6:	95 07       	cpc	r25, r21
    13b8:	10 f0       	brcs	.+4      	; 0x13be <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    13ba:	2a 01       	movw	r4, r20
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    13be:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    13c0:	8e 81       	ldd	r24, Y+6	; 0x06
    13c2:	9f 81       	ldd	r25, Y+7	; 0x07
    13c4:	a8 85       	ldd	r26, Y+8	; 0x08
    13c6:	b9 85       	ldd	r27, Y+9	; 0x09
    13c8:	89 2b       	or	r24, r25
    13ca:	8a 2b       	or	r24, r26
    13cc:	8b 2b       	or	r24, r27
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <xStreamBufferSend+0x88>
    13d0:	36 c0       	rjmp	.+108    	; 0x143e <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    13d2:	ce 01       	movw	r24, r28
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	e7 d7       	rcall	.+4046   	; 0x23a6 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13de:	c4 01       	movw	r24, r8
    13e0:	a2 df       	rcall	.-188    	; 0x1326 <xStreamBufferSpacesAvailable>
    13e2:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    13e4:	84 15       	cp	r24, r4
    13e6:	95 05       	cpc	r25, r5
    13e8:	38 f5       	brcc	.+78     	; 0x1438 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 92 16 	call	0x2d24	; 0x2d24 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    13f4:	0e 94 64 12 	call	0x24c8	; 0x24c8 <xTaskGetCurrentTaskHandle>
    13f8:	f4 01       	movw	r30, r8
    13fa:	93 87       	std	Z+11, r25	; 0x0b
    13fc:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1402:	ae 80       	ldd	r10, Y+6	; 0x06
    1404:	bf 80       	ldd	r11, Y+7	; 0x07
    1406:	c8 84       	ldd	r12, Y+8	; 0x08
    1408:	d9 84       	ldd	r13, Y+9	; 0x09
    140a:	e1 2c       	mov	r14, r1
    140c:	f1 2c       	mov	r15, r1
    140e:	00 e0       	ldi	r16, 0x00	; 0
    1410:	10 e0       	ldi	r17, 0x00	; 0
    1412:	98 01       	movw	r18, r16
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	ba 01       	movw	r22, r20
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1420:	f4 01       	movw	r30, r8
    1422:	13 86       	std	Z+11, r1	; 0x0b
    1424:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1426:	be 01       	movw	r22, r28
    1428:	6a 5f       	subi	r22, 0xFA	; 250
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	e1 d7       	rcall	.+4034   	; 0x23f4 <xTaskCheckForTimeOut>
    1432:	88 23       	and	r24, r24
    1434:	89 f2       	breq	.-94     	; 0x13d8 <xStreamBufferSend+0x8e>
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
                    break;
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    143e:	61 2c       	mov	r6, r1
    1440:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1442:	61 14       	cp	r6, r1
    1444:	71 04       	cpc	r7, r1
    1446:	19 f4       	brne	.+6      	; 0x144e <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1448:	c4 01       	movw	r24, r8
    144a:	6d df       	rcall	.-294    	; 0x1326 <xStreamBufferSpacesAvailable>
    144c:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    144e:	82 01       	movw	r16, r4
    1450:	93 01       	movw	r18, r6
    1452:	a1 01       	movw	r20, r2
    1454:	6a 85       	ldd	r22, Y+10	; 0x0a
    1456:	7b 85       	ldd	r23, Y+11	; 0x0b
    1458:	c4 01       	movw	r24, r8
    145a:	3e de       	rcall	.-900    	; 0x10d8 <prvWriteMessageToBuffer>
    145c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    145e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1460:	e9 f0       	breq	.+58     	; 0x149c <xStreamBufferSend+0x152>
    1462:	c4 01       	movw	r24, r8
    1464:	cd dd       	rcall	.-1126   	; 0x1000 <prvBytesInBuffer>
    1466:	f4 01       	movw	r30, r8
    1468:	26 81       	ldd	r18, Z+6	; 0x06
    146a:	37 81       	ldd	r19, Z+7	; 0x07
    146c:	82 17       	cp	r24, r18
    146e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1470:	a8 f0       	brcs	.+42     	; 0x149c <xStreamBufferSend+0x152>
    1472:	90 d3       	rcall	.+1824   	; 0x1b94 <vTaskSuspendAll>
    1474:	f4 01       	movw	r30, r8
    1476:	80 85       	ldd	r24, Z+8	; 0x08
    1478:	91 85       	ldd	r25, Z+9	; 0x09
    147a:	89 2b       	or	r24, r25
    147c:	71 f0       	breq	.+28     	; 0x149a <xStreamBufferSend+0x150>
    147e:	80 85       	ldd	r24, Z+8	; 0x08
    1480:	91 85       	ldd	r25, Z+9	; 0x09
    1482:	e1 2c       	mov	r14, r1
    1484:	f1 2c       	mov	r15, r1
    1486:	00 e0       	ldi	r16, 0x00	; 0
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	a9 01       	movw	r20, r18
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	0e 94 79 14 	call	0x28f2	; 0x28f2 <xTaskGenericNotify>
    1494:	f4 01       	movw	r30, r8
    1496:	11 86       	std	Z+9, r1	; 0x09
    1498:	10 86       	std	Z+8, r1	; 0x08
    149a:	bc d4       	rcall	.+2424   	; 0x1e14 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    149c:	c6 01       	movw	r24, r12
    149e:	2b 96       	adiw	r28, 0x0b	; 11
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	df 90       	pop	r13
    14b8:	cf 90       	pop	r12
    14ba:	bf 90       	pop	r11
    14bc:	af 90       	pop	r10
    14be:	9f 90       	pop	r9
    14c0:	8f 90       	pop	r8
    14c2:	7f 90       	pop	r7
    14c4:	6f 90       	pop	r6
    14c6:	5f 90       	pop	r5
    14c8:	4f 90       	pop	r4
    14ca:	3f 90       	pop	r3
    14cc:	2f 90       	pop	r2
    14ce:	08 95       	ret

000014d0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    14d0:	af 92       	push	r10
    14d2:	bf 92       	push	r11
    14d4:	cf 92       	push	r12
    14d6:	df 92       	push	r13
    14d8:	ef 92       	push	r14
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	ec 01       	movw	r28, r24
    14e6:	7b 01       	movw	r14, r22
    14e8:	5a 01       	movw	r10, r20
    14ea:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    14ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    14ee:	80 ff       	sbrs	r24, 0
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    14f2:	8a 01       	movw	r16, r20
    14f4:	0e 5f       	subi	r16, 0xFE	; 254
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    14fa:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    14fc:	ce 01       	movw	r24, r28
    14fe:	13 df       	rcall	.-474    	; 0x1326 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1500:	9c 01       	movw	r18, r24
    1502:	a5 01       	movw	r20, r10
    1504:	b7 01       	movw	r22, r14
    1506:	ce 01       	movw	r24, r28
    1508:	e7 dd       	rcall	.-1074   	; 0x10d8 <prvWriteMessageToBuffer>
    150a:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    150c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    150e:	c1 f0       	breq	.+48     	; 0x1540 <xStreamBufferSendFromISR+0x70>
    1510:	ce 01       	movw	r24, r28
    1512:	76 dd       	rcall	.-1300   	; 0x1000 <prvBytesInBuffer>
    1514:	2e 81       	ldd	r18, Y+6	; 0x06
    1516:	3f 81       	ldd	r19, Y+7	; 0x07
    1518:	82 17       	cp	r24, r18
    151a:	93 07       	cpc	r25, r19
    151c:	88 f0       	brcs	.+34     	; 0x1540 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    151e:	88 85       	ldd	r24, Y+8	; 0x08
    1520:	99 85       	ldd	r25, Y+9	; 0x09
    1522:	89 2b       	or	r24, r25
    1524:	69 f0       	breq	.+26     	; 0x1540 <xStreamBufferSendFromISR+0x70>
    1526:	88 85       	ldd	r24, Y+8	; 0x08
    1528:	99 85       	ldd	r25, Y+9	; 0x09
    152a:	e1 2c       	mov	r14, r1
    152c:	f1 2c       	mov	r15, r1
    152e:	00 e0       	ldi	r16, 0x00	; 0
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	a9 01       	movw	r20, r18
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <xTaskGenericNotifyFromISR>
    153c:	19 86       	std	Y+9, r1	; 0x09
    153e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1540:	c5 01       	movw	r24, r10
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	bf 90       	pop	r11
    1554:	af 90       	pop	r10
    1556:	08 95       	ret

00001558 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1558:	4f 92       	push	r4
    155a:	5f 92       	push	r5
    155c:	6f 92       	push	r6
    155e:	7f 92       	push	r7
    1560:	8f 92       	push	r8
    1562:	9f 92       	push	r9
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	ec 01       	movw	r28, r24
    157a:	2b 01       	movw	r4, r22
    157c:	3a 01       	movw	r6, r20
    157e:	58 01       	movw	r10, r16
    1580:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1582:	8e 85       	ldd	r24, Y+14	; 0x0e
    1584:	80 ff       	sbrs	r24, 0
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1588:	68 94       	set
    158a:	88 24       	eor	r8, r8
    158c:	81 f8       	bld	r8, 1
    158e:	91 2c       	mov	r9, r1
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1592:	81 2c       	mov	r8, r1
    1594:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1596:	a1 14       	cp	r10, r1
    1598:	b1 04       	cpc	r11, r1
    159a:	c1 04       	cpc	r12, r1
    159c:	d1 04       	cpc	r13, r1
    159e:	39 f1       	breq	.+78     	; 0x15ee <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15a6:	ce 01       	movw	r24, r28
    15a8:	2b dd       	rcall	.-1450   	; 0x1000 <prvBytesInBuffer>
    15aa:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    15ac:	88 16       	cp	r8, r24
    15ae:	99 06       	cpc	r9, r25
    15b0:	40 f0       	brcs	.+16     	; 0x15c2 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 92 16 	call	0x2d24	; 0x2d24 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    15bc:	85 d7       	rcall	.+3850   	; 0x24c8 <xTaskGetCurrentTaskHandle>
    15be:	99 87       	std	Y+9, r25	; 0x09
    15c0:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    15c6:	8e 14       	cp	r8, r14
    15c8:	9f 04       	cpc	r9, r15
    15ca:	a0 f0       	brcs	.+40     	; 0x15f4 <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    15cc:	e1 2c       	mov	r14, r1
    15ce:	f1 2c       	mov	r15, r1
    15d0:	00 e0       	ldi	r16, 0x00	; 0
    15d2:	10 e0       	ldi	r17, 0x00	; 0
    15d4:	98 01       	movw	r18, r16
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	50 e0       	ldi	r21, 0x00	; 0
    15da:	ba 01       	movw	r22, r20
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    15e2:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15e4:	18 86       	std	Y+8, r1	; 0x08
    15e6:	ce 01       	movw	r24, r28
    15e8:	0b dd       	rcall	.-1514   	; 0x1000 <prvBytesInBuffer>
    15ea:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <xStreamBufferReceive+0x9c>
    15ee:	ce 01       	movw	r24, r28
    15f0:	07 dd       	rcall	.-1522   	; 0x1000 <prvBytesInBuffer>
    15f2:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    15f4:	8e 14       	cp	r8, r14
    15f6:	9f 04       	cpc	r9, r15
    15f8:	e8 f4       	brcc	.+58     	; 0x1634 <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    15fa:	84 01       	movw	r16, r8
    15fc:	97 01       	movw	r18, r14
    15fe:	a3 01       	movw	r20, r6
    1600:	b2 01       	movw	r22, r4
    1602:	ce 01       	movw	r24, r28
    1604:	fb dd       	rcall	.-1034   	; 0x11fc <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1606:	6c 01       	movw	r12, r24
    1608:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    160a:	b1 f0       	breq	.+44     	; 0x1638 <xStreamBufferReceive+0xe0>
    160c:	c3 d2       	rcall	.+1414   	; 0x1b94 <vTaskSuspendAll>
    160e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1610:	9b 85       	ldd	r25, Y+11	; 0x0b
    1612:	89 2b       	or	r24, r25
    1614:	69 f0       	breq	.+26     	; 0x1630 <xStreamBufferReceive+0xd8>
    1616:	8a 85       	ldd	r24, Y+10	; 0x0a
    1618:	9b 85       	ldd	r25, Y+11	; 0x0b
    161a:	e1 2c       	mov	r14, r1
    161c:	f1 2c       	mov	r15, r1
    161e:	00 e0       	ldi	r16, 0x00	; 0
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	0e 94 79 14 	call	0x28f2	; 0x28f2 <xTaskGenericNotify>
    162c:	1b 86       	std	Y+11, r1	; 0x0b
    162e:	1a 86       	std	Y+10, r1	; 0x0a
    1630:	f1 d3       	rcall	.+2018   	; 0x1e14 <xTaskResumeAll>
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1634:	c1 2c       	mov	r12, r1
    1636:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1638:	c6 01       	movw	r24, r12
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	bf 90       	pop	r11
    164c:	af 90       	pop	r10
    164e:	9f 90       	pop	r9
    1650:	8f 90       	pop	r8
    1652:	7f 90       	pop	r7
    1654:	6f 90       	pop	r6
    1656:	5f 90       	pop	r5
    1658:	4f 90       	pop	r4
    165a:	08 95       	ret

0000165c <prvResetNextTaskUnblockTime>:
    165c:	e0 91 cb 12 	lds	r30, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    1660:	f0 91 cc 12 	lds	r31, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    1664:	80 81       	ld	r24, Z
    1666:	81 11       	cpse	r24, r1
    1668:	0c c0       	rjmp	.+24     	; 0x1682 <prvResetNextTaskUnblockTime+0x26>
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	9f ef       	ldi	r25, 0xFF	; 255
    166e:	dc 01       	movw	r26, r24
    1670:	80 93 95 12 	sts	0x1295, r24	; 0x801295 <xNextTaskUnblockTime>
    1674:	90 93 96 12 	sts	0x1296, r25	; 0x801296 <xNextTaskUnblockTime+0x1>
    1678:	a0 93 97 12 	sts	0x1297, r26	; 0x801297 <xNextTaskUnblockTime+0x2>
    167c:	b0 93 98 12 	sts	0x1298, r27	; 0x801298 <xNextTaskUnblockTime+0x3>
    1680:	08 95       	ret
    1682:	e0 91 cb 12 	lds	r30, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    1686:	f0 91 cc 12 	lds	r31, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    168a:	07 80       	ldd	r0, Z+7	; 0x07
    168c:	f0 85       	ldd	r31, Z+8	; 0x08
    168e:	e0 2d       	mov	r30, r0
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	a2 81       	ldd	r26, Z+2	; 0x02
    1696:	b3 81       	ldd	r27, Z+3	; 0x03
    1698:	80 93 95 12 	sts	0x1295, r24	; 0x801295 <xNextTaskUnblockTime>
    169c:	90 93 96 12 	sts	0x1296, r25	; 0x801296 <xNextTaskUnblockTime+0x1>
    16a0:	a0 93 97 12 	sts	0x1297, r26	; 0x801297 <xNextTaskUnblockTime+0x2>
    16a4:	b0 93 98 12 	sts	0x1298, r27	; 0x801298 <xNextTaskUnblockTime+0x3>
    16a8:	08 95       	ret

000016aa <prvDeleteTCB>:
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	ec 01       	movw	r28, r24
    16b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b4:	0e 94 af 02 	call	0x55e	; 0x55e <vPortFree>
    16b8:	ce 01       	movw	r24, r28
    16ba:	0e 94 af 02 	call	0x55e	; 0x55e <vPortFree>
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	08 95       	ret

000016c4 <prvInitialiseNewTask>:
    16c4:	4f 92       	push	r4
    16c6:	5f 92       	push	r5
    16c8:	6f 92       	push	r6
    16ca:	7f 92       	push	r7
    16cc:	8f 92       	push	r8
    16ce:	9f 92       	push	r9
    16d0:	af 92       	push	r10
    16d2:	bf 92       	push	r11
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	2c 01       	movw	r4, r24
    16e4:	5b 01       	movw	r10, r22
    16e6:	4a 01       	movw	r8, r20
    16e8:	39 01       	movw	r6, r18
    16ea:	e6 01       	movw	r28, r12
    16ec:	65 ea       	ldi	r22, 0xA5	; 165
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f4:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <memset>
    16f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	82 1a       	sub	r8, r18
    1700:	91 08       	sbc	r9, r1
    1702:	88 0e       	add	r8, r24
    1704:	99 1e       	adc	r9, r25
    1706:	a1 14       	cp	r10, r1
    1708:	b1 04       	cpc	r11, r1
    170a:	89 f4       	brne	.+34     	; 0x172e <prvInitialiseNewTask+0x6a>
    170c:	15 c0       	rjmp	.+42     	; 0x1738 <prvInitialiseNewTask+0x74>
    170e:	82 2f       	mov	r24, r18
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	f5 01       	movw	r30, r10
    1714:	e8 0f       	add	r30, r24
    1716:	f9 1f       	adc	r31, r25
    1718:	30 81       	ld	r19, Z
    171a:	de 01       	movw	r26, r28
    171c:	a8 0f       	add	r26, r24
    171e:	b9 1f       	adc	r27, r25
    1720:	5d 96       	adiw	r26, 0x1d	; 29
    1722:	3c 93       	st	X, r19
    1724:	80 81       	ld	r24, Z
    1726:	88 23       	and	r24, r24
    1728:	29 f0       	breq	.+10     	; 0x1734 <prvInitialiseNewTask+0x70>
    172a:	2f 5f       	subi	r18, 0xFF	; 255
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <prvInitialiseNewTask+0x6c>
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	20 31       	cpi	r18, 0x10	; 16
    1732:	68 f3       	brcs	.-38     	; 0x170e <prvInitialiseNewTask+0x4a>
    1734:	1c a6       	std	Y+44, r1	; 0x2c
    1736:	01 c0       	rjmp	.+2      	; 0x173a <prvInitialiseNewTask+0x76>
    1738:	1d 8e       	std	Y+29, r1	; 0x1d
    173a:	0a 30       	cpi	r16, 0x0A	; 10
    173c:	08 f0       	brcs	.+2      	; 0x1740 <prvInitialiseNewTask+0x7c>
    173e:	09 e0       	ldi	r16, 0x09	; 9
    1740:	0a 8f       	std	Y+26, r16	; 0x1a
    1742:	0d a7       	std	Y+45, r16	; 0x2d
    1744:	1e a6       	std	Y+46, r1	; 0x2e
    1746:	ce 01       	movw	r24, r28
    1748:	02 96       	adiw	r24, 0x02	; 2
    174a:	0e 94 02 03 	call	0x604	; 0x604 <vListInitialiseItem>
    174e:	ce 01       	movw	r24, r28
    1750:	0e 96       	adiw	r24, 0x0e	; 14
    1752:	0e 94 02 03 	call	0x604	; 0x604 <vListInitialiseItem>
    1756:	db 87       	std	Y+11, r29	; 0x0b
    1758:	ca 87       	std	Y+10, r28	; 0x0a
    175a:	8a e0       	ldi	r24, 0x0A	; 10
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a0 e0       	ldi	r26, 0x00	; 0
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	80 1b       	sub	r24, r16
    1764:	91 09       	sbc	r25, r1
    1766:	a1 09       	sbc	r26, r1
    1768:	b1 09       	sbc	r27, r1
    176a:	8e 87       	std	Y+14, r24	; 0x0e
    176c:	9f 87       	std	Y+15, r25	; 0x0f
    176e:	a8 8b       	std	Y+16, r26	; 0x10
    1770:	b9 8b       	std	Y+17, r27	; 0x11
    1772:	df 8b       	std	Y+23, r29	; 0x17
    1774:	ce 8b       	std	Y+22, r28	; 0x16
    1776:	84 e0       	ldi	r24, 0x04	; 4
    1778:	fe 01       	movw	r30, r28
    177a:	bf 96       	adiw	r30, 0x2f	; 47
    177c:	df 01       	movw	r26, r30
    177e:	1d 92       	st	X+, r1
    1780:	8a 95       	dec	r24
    1782:	e9 f7       	brne	.-6      	; 0x177e <prvInitialiseNewTask+0xba>
    1784:	1b aa       	std	Y+51, r1	; 0x33
    1786:	a3 01       	movw	r20, r6
    1788:	b2 01       	movw	r22, r4
    178a:	c4 01       	movw	r24, r8
    178c:	0e 94 76 03 	call	0x6ec	; 0x6ec <pxPortInitialiseStack>
    1790:	99 83       	std	Y+1, r25	; 0x01
    1792:	88 83       	st	Y, r24
    1794:	e1 14       	cp	r14, r1
    1796:	f1 04       	cpc	r15, r1
    1798:	19 f0       	breq	.+6      	; 0x17a0 <prvInitialiseNewTask+0xdc>
    179a:	f7 01       	movw	r30, r14
    179c:	d1 83       	std	Z+1, r29	; 0x01
    179e:	c0 83       	st	Z, r28
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	bf 90       	pop	r11
    17b0:	af 90       	pop	r10
    17b2:	9f 90       	pop	r9
    17b4:	8f 90       	pop	r8
    17b6:	7f 90       	pop	r7
    17b8:	6f 90       	pop	r6
    17ba:	5f 90       	pop	r5
    17bc:	4f 90       	pop	r4
    17be:	08 95       	ret

000017c0 <prvInitialiseTaskLists>:
    17c0:	cf 93       	push	r28
    17c2:	c0 e0       	ldi	r28, 0x00	; 0
    17c4:	09 c0       	rjmp	.+18     	; 0x17d8 <prvInitialiseTaskLists+0x18>
    17c6:	2b e0       	ldi	r18, 0x0B	; 11
    17c8:	c2 9f       	mul	r28, r18
    17ca:	c0 01       	movw	r24, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	8d 51       	subi	r24, 0x1D	; 29
    17d0:	9d 4e       	sbci	r25, 0xED	; 237
    17d2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <vListInitialise>
    17d6:	cf 5f       	subi	r28, 0xFF	; 255
    17d8:	ca 30       	cpi	r28, 0x0A	; 10
    17da:	a8 f3       	brcs	.-22     	; 0x17c6 <prvInitialiseTaskLists+0x6>
    17dc:	88 ed       	ldi	r24, 0xD8	; 216
    17de:	92 e1       	ldi	r25, 0x12	; 18
    17e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <vListInitialise>
    17e4:	8d ec       	ldi	r24, 0xCD	; 205
    17e6:	92 e1       	ldi	r25, 0x12	; 18
    17e8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <vListInitialise>
    17ec:	8e eb       	ldi	r24, 0xBE	; 190
    17ee:	92 e1       	ldi	r25, 0x12	; 18
    17f0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <vListInitialise>
    17f4:	83 eb       	ldi	r24, 0xB3	; 179
    17f6:	92 e1       	ldi	r25, 0x12	; 18
    17f8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <vListInitialise>
    17fc:	87 ea       	ldi	r24, 0xA7	; 167
    17fe:	92 e1       	ldi	r25, 0x12	; 18
    1800:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <vListInitialise>
    1804:	88 ed       	ldi	r24, 0xD8	; 216
    1806:	92 e1       	ldi	r25, 0x12	; 18
    1808:	90 93 cc 12 	sts	0x12CC, r25	; 0x8012cc <pxDelayedTaskList+0x1>
    180c:	80 93 cb 12 	sts	0x12CB, r24	; 0x8012cb <pxDelayedTaskList>
    1810:	8d ec       	ldi	r24, 0xCD	; 205
    1812:	92 e1       	ldi	r25, 0x12	; 18
    1814:	90 93 ca 12 	sts	0x12CA, r25	; 0x8012ca <pxOverflowDelayedTaskList+0x1>
    1818:	80 93 c9 12 	sts	0x12C9, r24	; 0x8012c9 <pxOverflowDelayedTaskList>
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <prvAddNewTaskToReadyList>:
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	ec 01       	movw	r28, r24
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	0f 92       	push	r0
    182c:	80 91 a6 12 	lds	r24, 0x12A6	; 0x8012a6 <uxCurrentNumberOfTasks>
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	80 93 a6 12 	sts	0x12A6, r24	; 0x8012a6 <uxCurrentNumberOfTasks>
    1836:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    183a:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    183e:	89 2b       	or	r24, r25
    1840:	51 f4       	brne	.+20     	; 0x1856 <prvAddNewTaskToReadyList+0x36>
    1842:	d0 93 52 13 	sts	0x1352, r29	; 0x801352 <pxCurrentTCB+0x1>
    1846:	c0 93 51 13 	sts	0x1351, r28	; 0x801351 <pxCurrentTCB>
    184a:	80 91 a6 12 	lds	r24, 0x12A6	; 0x8012a6 <uxCurrentNumberOfTasks>
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 f4       	brne	.+36     	; 0x1876 <prvAddNewTaskToReadyList+0x56>
    1852:	b6 df       	rcall	.-148    	; 0x17c0 <prvInitialiseTaskLists>
    1854:	10 c0       	rjmp	.+32     	; 0x1876 <prvAddNewTaskToReadyList+0x56>
    1856:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <xSchedulerRunning>
    185a:	81 11       	cpse	r24, r1
    185c:	0c c0       	rjmp	.+24     	; 0x1876 <prvAddNewTaskToReadyList+0x56>
    185e:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    1862:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1866:	92 8d       	ldd	r25, Z+26	; 0x1a
    1868:	8a 8d       	ldd	r24, Y+26	; 0x1a
    186a:	89 17       	cp	r24, r25
    186c:	20 f0       	brcs	.+8      	; 0x1876 <prvAddNewTaskToReadyList+0x56>
    186e:	d0 93 52 13 	sts	0x1352, r29	; 0x801352 <pxCurrentTCB+0x1>
    1872:	c0 93 51 13 	sts	0x1351, r28	; 0x801351 <pxCurrentTCB>
    1876:	80 91 99 12 	lds	r24, 0x1299	; 0x801299 <uxTaskNumber>
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	80 93 99 12 	sts	0x1299, r24	; 0x801299 <uxTaskNumber>
    1880:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1882:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    1886:	8e 17       	cp	r24, r30
    1888:	10 f4       	brcc	.+4      	; 0x188e <prvAddNewTaskToReadyList+0x6e>
    188a:	e0 93 a1 12 	sts	0x12A1, r30	; 0x8012a1 <uxTopReadyPriority>
    188e:	8b e0       	ldi	r24, 0x0B	; 11
    1890:	8e 9f       	mul	r24, r30
    1892:	f0 01       	movw	r30, r0
    1894:	11 24       	eor	r1, r1
    1896:	ed 51       	subi	r30, 0x1D	; 29
    1898:	fd 4e       	sbci	r31, 0xED	; 237
    189a:	01 80       	ldd	r0, Z+1	; 0x01
    189c:	f2 81       	ldd	r31, Z+2	; 0x02
    189e:	e0 2d       	mov	r30, r0
    18a0:	ff 83       	std	Y+7, r31	; 0x07
    18a2:	ee 83       	std	Y+6, r30	; 0x06
    18a4:	26 81       	ldd	r18, Z+6	; 0x06
    18a6:	37 81       	ldd	r19, Z+7	; 0x07
    18a8:	39 87       	std	Y+9, r19	; 0x09
    18aa:	28 87       	std	Y+8, r18	; 0x08
    18ac:	a6 81       	ldd	r26, Z+6	; 0x06
    18ae:	b7 81       	ldd	r27, Z+7	; 0x07
    18b0:	9e 01       	movw	r18, r28
    18b2:	2e 5f       	subi	r18, 0xFE	; 254
    18b4:	3f 4f       	sbci	r19, 0xFF	; 255
    18b6:	15 96       	adiw	r26, 0x05	; 5
    18b8:	3c 93       	st	X, r19
    18ba:	2e 93       	st	-X, r18
    18bc:	14 97       	sbiw	r26, 0x04	; 4
    18be:	37 83       	std	Z+7, r19	; 0x07
    18c0:	26 83       	std	Z+6, r18	; 0x06
    18c2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    18c4:	8e 9f       	mul	r24, r30
    18c6:	f0 01       	movw	r30, r0
    18c8:	11 24       	eor	r1, r1
    18ca:	ed 51       	subi	r30, 0x1D	; 29
    18cc:	fd 4e       	sbci	r31, 0xED	; 237
    18ce:	fd 87       	std	Y+13, r31	; 0x0d
    18d0:	ec 87       	std	Y+12, r30	; 0x0c
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 5f       	subi	r24, 0xFF	; 255
    18d6:	80 83       	st	Z, r24
    18d8:	0f 90       	pop	r0
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <xSchedulerRunning>
    18e0:	88 23       	and	r24, r24
    18e2:	51 f0       	breq	.+20     	; 0x18f8 <prvAddNewTaskToReadyList+0xd8>
    18e4:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    18e8:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    18ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    18ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18f0:	98 17       	cp	r25, r24
    18f2:	10 f4       	brcc	.+4      	; 0x18f8 <prvAddNewTaskToReadyList+0xd8>
    18f4:	0e 94 bf 03 	call	0x77e	; 0x77e <vPortYield>
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <prvCheckTasksWaitingTermination>:
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	1b c0       	rjmp	.+54     	; 0x193a <prvCheckTasksWaitingTermination+0x3c>
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	0f 92       	push	r0
    190a:	e0 91 ba 12 	lds	r30, 0x12BA	; 0x8012ba <xTasksWaitingTermination+0x7>
    190e:	f0 91 bb 12 	lds	r31, 0x12BB	; 0x8012bb <xTasksWaitingTermination+0x8>
    1912:	c0 85       	ldd	r28, Z+8	; 0x08
    1914:	d1 85       	ldd	r29, Z+9	; 0x09
    1916:	ce 01       	movw	r24, r28
    1918:	02 96       	adiw	r24, 0x02	; 2
    191a:	0e 94 43 03 	call	0x686	; 0x686 <uxListRemove>
    191e:	80 91 a6 12 	lds	r24, 0x12A6	; 0x8012a6 <uxCurrentNumberOfTasks>
    1922:	81 50       	subi	r24, 0x01	; 1
    1924:	80 93 a6 12 	sts	0x12A6, r24	; 0x8012a6 <uxCurrentNumberOfTasks>
    1928:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxDeletedTasksWaitingCleanUp>
    192c:	81 50       	subi	r24, 0x01	; 1
    192e:	80 93 b2 12 	sts	0x12B2, r24	; 0x8012b2 <uxDeletedTasksWaitingCleanUp>
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	ce 01       	movw	r24, r28
    1938:	b8 de       	rcall	.-656    	; 0x16aa <prvDeleteTCB>
    193a:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxDeletedTasksWaitingCleanUp>
    193e:	81 11       	cpse	r24, r1
    1940:	e1 cf       	rjmp	.-62     	; 0x1904 <prvCheckTasksWaitingTermination+0x6>
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <prvAddCurrentTaskToDelayedList>:
    1948:	8f 92       	push	r8
    194a:	9f 92       	push	r9
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	6b 01       	movw	r12, r22
    195e:	7c 01       	movw	r14, r24
    1960:	c4 2f       	mov	r28, r20
    1962:	80 90 a2 12 	lds	r8, 0x12A2	; 0x8012a2 <xTickCount>
    1966:	90 90 a3 12 	lds	r9, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    196a:	a0 90 a4 12 	lds	r10, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    196e:	b0 90 a5 12 	lds	r11, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    1972:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    1976:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    197a:	02 96       	adiw	r24, 0x02	; 2
    197c:	0e 94 43 03 	call	0x686	; 0x686 <uxListRemove>
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	c8 16       	cp	r12, r24
    1984:	d8 06       	cpc	r13, r24
    1986:	e8 06       	cpc	r14, r24
    1988:	f8 06       	cpc	r15, r24
    198a:	b1 f5       	brne	.+108    	; 0x19f8 <prvAddCurrentTaskToDelayedList+0xb0>
    198c:	cc 23       	and	r28, r28
    198e:	a1 f1       	breq	.+104    	; 0x19f8 <prvAddCurrentTaskToDelayedList+0xb0>
    1990:	e7 ea       	ldi	r30, 0xA7	; 167
    1992:	f2 e1       	ldi	r31, 0x12	; 18
    1994:	a1 81       	ldd	r26, Z+1	; 0x01
    1996:	b2 81       	ldd	r27, Z+2	; 0x02
    1998:	c0 91 51 13 	lds	r28, 0x1351	; 0x801351 <pxCurrentTCB>
    199c:	d0 91 52 13 	lds	r29, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    19a0:	bf 83       	std	Y+7, r27	; 0x07
    19a2:	ae 83       	std	Y+6, r26	; 0x06
    19a4:	c0 91 51 13 	lds	r28, 0x1351	; 0x801351 <pxCurrentTCB>
    19a8:	d0 91 52 13 	lds	r29, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    19ac:	16 96       	adiw	r26, 0x06	; 6
    19ae:	8d 91       	ld	r24, X+
    19b0:	9c 91       	ld	r25, X
    19b2:	17 97       	sbiw	r26, 0x07	; 7
    19b4:	99 87       	std	Y+9, r25	; 0x09
    19b6:	88 87       	std	Y+8, r24	; 0x08
    19b8:	16 96       	adiw	r26, 0x06	; 6
    19ba:	cd 91       	ld	r28, X+
    19bc:	dc 91       	ld	r29, X
    19be:	17 97       	sbiw	r26, 0x07	; 7
    19c0:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    19c4:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    19c8:	02 96       	adiw	r24, 0x02	; 2
    19ca:	9d 83       	std	Y+5, r25	; 0x05
    19cc:	8c 83       	std	Y+4, r24	; 0x04
    19ce:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    19d2:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    19d6:	02 96       	adiw	r24, 0x02	; 2
    19d8:	17 96       	adiw	r26, 0x07	; 7
    19da:	9c 93       	st	X, r25
    19dc:	8e 93       	st	-X, r24
    19de:	16 97       	sbiw	r26, 0x06	; 6
    19e0:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    19e4:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    19e8:	1d 96       	adiw	r26, 0x0d	; 13
    19ea:	fc 93       	st	X, r31
    19ec:	ee 93       	st	-X, r30
    19ee:	1c 97       	sbiw	r26, 0x0c	; 12
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 5f       	subi	r24, 0xFF	; 255
    19f4:	80 83       	st	Z, r24
    19f6:	3f c0       	rjmp	.+126    	; 0x1a76 <prvAddCurrentTaskToDelayedList+0x12e>
    19f8:	c8 0c       	add	r12, r8
    19fa:	d9 1c       	adc	r13, r9
    19fc:	ea 1c       	adc	r14, r10
    19fe:	fb 1c       	adc	r15, r11
    1a00:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    1a04:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1a08:	c2 82       	std	Z+2, r12	; 0x02
    1a0a:	d3 82       	std	Z+3, r13	; 0x03
    1a0c:	e4 82       	std	Z+4, r14	; 0x04
    1a0e:	f5 82       	std	Z+5, r15	; 0x05
    1a10:	c8 14       	cp	r12, r8
    1a12:	d9 04       	cpc	r13, r9
    1a14:	ea 04       	cpc	r14, r10
    1a16:	fb 04       	cpc	r15, r11
    1a18:	68 f4       	brcc	.+26     	; 0x1a34 <prvAddCurrentTaskToDelayedList+0xec>
    1a1a:	60 91 51 13 	lds	r22, 0x1351	; 0x801351 <pxCurrentTCB>
    1a1e:	70 91 52 13 	lds	r23, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1a22:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxOverflowDelayedTaskList>
    1a26:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxOverflowDelayedTaskList+0x1>
    1a2a:	6e 5f       	subi	r22, 0xFE	; 254
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	0e 94 06 03 	call	0x60c	; 0x60c <vListInsert>
    1a32:	21 c0       	rjmp	.+66     	; 0x1a76 <prvAddCurrentTaskToDelayedList+0x12e>
    1a34:	60 91 51 13 	lds	r22, 0x1351	; 0x801351 <pxCurrentTCB>
    1a38:	70 91 52 13 	lds	r23, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1a3c:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    1a40:	90 91 cc 12 	lds	r25, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    1a44:	6e 5f       	subi	r22, 0xFE	; 254
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	0e 94 06 03 	call	0x60c	; 0x60c <vListInsert>
    1a4c:	80 91 95 12 	lds	r24, 0x1295	; 0x801295 <xNextTaskUnblockTime>
    1a50:	90 91 96 12 	lds	r25, 0x1296	; 0x801296 <xNextTaskUnblockTime+0x1>
    1a54:	a0 91 97 12 	lds	r26, 0x1297	; 0x801297 <xNextTaskUnblockTime+0x2>
    1a58:	b0 91 98 12 	lds	r27, 0x1298	; 0x801298 <xNextTaskUnblockTime+0x3>
    1a5c:	c8 16       	cp	r12, r24
    1a5e:	d9 06       	cpc	r13, r25
    1a60:	ea 06       	cpc	r14, r26
    1a62:	fb 06       	cpc	r15, r27
    1a64:	40 f4       	brcc	.+16     	; 0x1a76 <prvAddCurrentTaskToDelayedList+0x12e>
    1a66:	c0 92 95 12 	sts	0x1295, r12	; 0x801295 <xNextTaskUnblockTime>
    1a6a:	d0 92 96 12 	sts	0x1296, r13	; 0x801296 <xNextTaskUnblockTime+0x1>
    1a6e:	e0 92 97 12 	sts	0x1297, r14	; 0x801297 <xNextTaskUnblockTime+0x2>
    1a72:	f0 92 98 12 	sts	0x1298, r15	; 0x801298 <xNextTaskUnblockTime+0x3>
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	df 90       	pop	r13
    1a80:	cf 90       	pop	r12
    1a82:	bf 90       	pop	r11
    1a84:	af 90       	pop	r10
    1a86:	9f 90       	pop	r9
    1a88:	8f 90       	pop	r8
    1a8a:	08 95       	ret

00001a8c <xTaskCreate>:
    1a8c:	2f 92       	push	r2
    1a8e:	3f 92       	push	r3
    1a90:	4f 92       	push	r4
    1a92:	5f 92       	push	r5
    1a94:	6f 92       	push	r6
    1a96:	7f 92       	push	r7
    1a98:	8f 92       	push	r8
    1a9a:	9f 92       	push	r9
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	3c 01       	movw	r6, r24
    1ab0:	1b 01       	movw	r2, r22
    1ab2:	4a 01       	movw	r8, r20
    1ab4:	29 01       	movw	r4, r18
    1ab6:	ca 01       	movw	r24, r20
    1ab8:	0e 94 06 02 	call	0x40c	; 0x40c <pvPortMalloc>
    1abc:	6c 01       	movw	r12, r24
    1abe:	89 2b       	or	r24, r25
    1ac0:	71 f0       	breq	.+28     	; 0x1ade <xTaskCreate+0x52>
    1ac2:	84 e3       	ldi	r24, 0x34	; 52
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 06 02 	call	0x40c	; 0x40c <pvPortMalloc>
    1aca:	ec 01       	movw	r28, r24
    1acc:	89 2b       	or	r24, r25
    1ace:	19 f0       	breq	.+6      	; 0x1ad6 <xTaskCreate+0x4a>
    1ad0:	dc 8e       	std	Y+28, r13	; 0x1c
    1ad2:	cb 8e       	std	Y+27, r12	; 0x1b
    1ad4:	06 c0       	rjmp	.+12     	; 0x1ae2 <xTaskCreate+0x56>
    1ad6:	c6 01       	movw	r24, r12
    1ad8:	0e 94 af 02 	call	0x55e	; 0x55e <vPortFree>
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <xTaskCreate+0x56>
    1ade:	c0 e0       	ldi	r28, 0x00	; 0
    1ae0:	d0 e0       	ldi	r29, 0x00	; 0
    1ae2:	20 97       	sbiw	r28, 0x00	; 0
    1ae4:	61 f0       	breq	.+24     	; 0x1afe <xTaskCreate+0x72>
    1ae6:	a1 2c       	mov	r10, r1
    1ae8:	b1 2c       	mov	r11, r1
    1aea:	6e 01       	movw	r12, r28
    1aec:	92 01       	movw	r18, r4
    1aee:	a4 01       	movw	r20, r8
    1af0:	b1 01       	movw	r22, r2
    1af2:	c3 01       	movw	r24, r6
    1af4:	e7 dd       	rcall	.-1074   	; 0x16c4 <prvInitialiseNewTask>
    1af6:	ce 01       	movw	r24, r28
    1af8:	93 de       	rcall	.-730    	; 0x1820 <prvAddNewTaskToReadyList>
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <xTaskCreate+0x74>
    1afe:	8f ef       	ldi	r24, 0xFF	; 255
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	df 90       	pop	r13
    1b0c:	cf 90       	pop	r12
    1b0e:	bf 90       	pop	r11
    1b10:	af 90       	pop	r10
    1b12:	9f 90       	pop	r9
    1b14:	8f 90       	pop	r8
    1b16:	7f 90       	pop	r7
    1b18:	6f 90       	pop	r6
    1b1a:	5f 90       	pop	r5
    1b1c:	4f 90       	pop	r4
    1b1e:	3f 90       	pop	r3
    1b20:	2f 90       	pop	r2
    1b22:	08 95       	ret

00001b24 <vTaskStartScheduler>:
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	0f 2e       	mov	r0, r31
    1b2c:	f3 e9       	ldi	r31, 0x93	; 147
    1b2e:	ef 2e       	mov	r14, r31
    1b30:	f2 e1       	ldi	r31, 0x12	; 18
    1b32:	ff 2e       	mov	r15, r31
    1b34:	f0 2d       	mov	r31, r0
    1b36:	00 e0       	ldi	r16, 0x00	; 0
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 ec       	ldi	r20, 0xC0	; 192
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	6a e9       	ldi	r22, 0x9A	; 154
    1b42:	72 e0       	ldi	r23, 0x02	; 2
    1b44:	8d ec       	ldi	r24, 0xCD	; 205
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a1 df       	rcall	.-190    	; 0x1a8c <xTaskCreate>
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	11 f4       	brne	.+4      	; 0x1b52 <vTaskStartScheduler+0x2e>
    1b4e:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <xTimerCreateTimerTask>
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	c9 f4       	brne	.+50     	; 0x1b88 <vTaskStartScheduler+0x64>
    1b56:	f8 94       	cli
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	9f ef       	ldi	r25, 0xFF	; 255
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	80 93 95 12 	sts	0x1295, r24	; 0x801295 <xNextTaskUnblockTime>
    1b62:	90 93 96 12 	sts	0x1296, r25	; 0x801296 <xNextTaskUnblockTime+0x1>
    1b66:	a0 93 97 12 	sts	0x1297, r26	; 0x801297 <xNextTaskUnblockTime+0x2>
    1b6a:	b0 93 98 12 	sts	0x1298, r27	; 0x801298 <xNextTaskUnblockTime+0x3>
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	80 93 a0 12 	sts	0x12A0, r24	; 0x8012a0 <xSchedulerRunning>
    1b74:	10 92 a2 12 	sts	0x12A2, r1	; 0x8012a2 <xTickCount>
    1b78:	10 92 a3 12 	sts	0x12A3, r1	; 0x8012a3 <xTickCount+0x1>
    1b7c:	10 92 a4 12 	sts	0x12A4, r1	; 0x8012a4 <xTickCount+0x2>
    1b80:	10 92 a5 12 	sts	0x12A5, r1	; 0x8012a5 <xTickCount+0x3>
    1b84:	0e 94 8d 03 	call	0x71a	; 0x71a <xPortStartScheduler>
    1b88:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	08 95       	ret

00001b94 <vTaskSuspendAll>:
    1b94:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	80 93 92 12 	sts	0x1292, r24	; 0x801292 <uxSchedulerSuspended>
    1b9e:	08 95       	ret

00001ba0 <xTaskGetTickCount>:
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	0f 92       	push	r0
    1ba6:	60 91 a2 12 	lds	r22, 0x12A2	; 0x8012a2 <xTickCount>
    1baa:	70 91 a3 12 	lds	r23, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    1bae:	80 91 a4 12 	lds	r24, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    1bb2:	90 91 a5 12 	lds	r25, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    1bb6:	0f 90       	pop	r0
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	08 95       	ret

00001bbc <xTaskIncrementTick>:
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    1bcc:	81 11       	cpse	r24, r1
    1bce:	05 c1       	rjmp	.+522    	; 0x1dda <xTaskIncrementTick+0x21e>
    1bd0:	c0 90 a2 12 	lds	r12, 0x12A2	; 0x8012a2 <xTickCount>
    1bd4:	d0 90 a3 12 	lds	r13, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    1bd8:	e0 90 a4 12 	lds	r14, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    1bdc:	f0 90 a5 12 	lds	r15, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	c8 1a       	sub	r12, r24
    1be4:	d8 0a       	sbc	r13, r24
    1be6:	e8 0a       	sbc	r14, r24
    1be8:	f8 0a       	sbc	r15, r24
    1bea:	c0 92 a2 12 	sts	0x12A2, r12	; 0x8012a2 <xTickCount>
    1bee:	d0 92 a3 12 	sts	0x12A3, r13	; 0x8012a3 <xTickCount+0x1>
    1bf2:	e0 92 a4 12 	sts	0x12A4, r14	; 0x8012a4 <xTickCount+0x2>
    1bf6:	f0 92 a5 12 	sts	0x12A5, r15	; 0x8012a5 <xTickCount+0x3>
    1bfa:	c1 14       	cp	r12, r1
    1bfc:	d1 04       	cpc	r13, r1
    1bfe:	e1 04       	cpc	r14, r1
    1c00:	f1 04       	cpc	r15, r1
    1c02:	b1 f4       	brne	.+44     	; 0x1c30 <xTaskIncrementTick+0x74>
    1c04:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    1c08:	90 91 cc 12 	lds	r25, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    1c0c:	20 91 c9 12 	lds	r18, 0x12C9	; 0x8012c9 <pxOverflowDelayedTaskList>
    1c10:	30 91 ca 12 	lds	r19, 0x12CA	; 0x8012ca <pxOverflowDelayedTaskList+0x1>
    1c14:	30 93 cc 12 	sts	0x12CC, r19	; 0x8012cc <pxDelayedTaskList+0x1>
    1c18:	20 93 cb 12 	sts	0x12CB, r18	; 0x8012cb <pxDelayedTaskList>
    1c1c:	90 93 ca 12 	sts	0x12CA, r25	; 0x8012ca <pxOverflowDelayedTaskList+0x1>
    1c20:	80 93 c9 12 	sts	0x12C9, r24	; 0x8012c9 <pxOverflowDelayedTaskList>
    1c24:	80 91 9a 12 	lds	r24, 0x129A	; 0x80129a <xNumOfOverflows>
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	80 93 9a 12 	sts	0x129A, r24	; 0x80129a <xNumOfOverflows>
    1c2e:	16 dd       	rcall	.-1492   	; 0x165c <prvResetNextTaskUnblockTime>
    1c30:	80 91 95 12 	lds	r24, 0x1295	; 0x801295 <xNextTaskUnblockTime>
    1c34:	90 91 96 12 	lds	r25, 0x1296	; 0x801296 <xNextTaskUnblockTime+0x1>
    1c38:	a0 91 97 12 	lds	r26, 0x1297	; 0x801297 <xNextTaskUnblockTime+0x2>
    1c3c:	b0 91 98 12 	lds	r27, 0x1298	; 0x801298 <xNextTaskUnblockTime+0x3>
    1c40:	c8 16       	cp	r12, r24
    1c42:	d9 06       	cpc	r13, r25
    1c44:	ea 06       	cpc	r14, r26
    1c46:	fb 06       	cpc	r15, r27
    1c48:	20 f4       	brcc	.+8      	; 0x1c52 <xTaskIncrementTick+0x96>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	b2 c0       	rjmp	.+356    	; 0x1db2 <xTaskIncrementTick+0x1f6>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <xTaskIncrementTick+0x98>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	e0 91 cb 12 	lds	r30, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    1c58:	f0 91 cc 12 	lds	r31, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    1c5c:	90 81       	ld	r25, Z
    1c5e:	91 11       	cpse	r25, r1
    1c60:	0c c0       	rjmp	.+24     	; 0x1c7a <xTaskIncrementTick+0xbe>
    1c62:	4f ef       	ldi	r20, 0xFF	; 255
    1c64:	5f ef       	ldi	r21, 0xFF	; 255
    1c66:	ba 01       	movw	r22, r20
    1c68:	40 93 95 12 	sts	0x1295, r20	; 0x801295 <xNextTaskUnblockTime>
    1c6c:	50 93 96 12 	sts	0x1296, r21	; 0x801296 <xNextTaskUnblockTime+0x1>
    1c70:	60 93 97 12 	sts	0x1297, r22	; 0x801297 <xNextTaskUnblockTime+0x2>
    1c74:	70 93 98 12 	sts	0x1298, r23	; 0x801298 <xNextTaskUnblockTime+0x3>
    1c78:	9c c0       	rjmp	.+312    	; 0x1db2 <xTaskIncrementTick+0x1f6>
    1c7a:	e0 91 cb 12 	lds	r30, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    1c7e:	f0 91 cc 12 	lds	r31, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    1c82:	07 80       	ldd	r0, Z+7	; 0x07
    1c84:	f0 85       	ldd	r31, Z+8	; 0x08
    1c86:	e0 2d       	mov	r30, r0
    1c88:	00 84       	ldd	r0, Z+8	; 0x08
    1c8a:	f1 85       	ldd	r31, Z+9	; 0x09
    1c8c:	e0 2d       	mov	r30, r0
    1c8e:	42 81       	ldd	r20, Z+2	; 0x02
    1c90:	53 81       	ldd	r21, Z+3	; 0x03
    1c92:	64 81       	ldd	r22, Z+4	; 0x04
    1c94:	75 81       	ldd	r23, Z+5	; 0x05
    1c96:	c4 16       	cp	r12, r20
    1c98:	d5 06       	cpc	r13, r21
    1c9a:	e6 06       	cpc	r14, r22
    1c9c:	f7 06       	cpc	r15, r23
    1c9e:	48 f4       	brcc	.+18     	; 0x1cb2 <xTaskIncrementTick+0xf6>
    1ca0:	40 93 95 12 	sts	0x1295, r20	; 0x801295 <xNextTaskUnblockTime>
    1ca4:	50 93 96 12 	sts	0x1296, r21	; 0x801296 <xNextTaskUnblockTime+0x1>
    1ca8:	60 93 97 12 	sts	0x1297, r22	; 0x801297 <xNextTaskUnblockTime+0x2>
    1cac:	70 93 98 12 	sts	0x1298, r23	; 0x801298 <xNextTaskUnblockTime+0x3>
    1cb0:	80 c0       	rjmp	.+256    	; 0x1db2 <xTaskIncrementTick+0x1f6>
    1cb2:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cb4:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cb6:	c6 81       	ldd	r28, Z+6	; 0x06
    1cb8:	d7 81       	ldd	r29, Z+7	; 0x07
    1cba:	20 85       	ldd	r18, Z+8	; 0x08
    1cbc:	31 85       	ldd	r19, Z+9	; 0x09
    1cbe:	3f 83       	std	Y+7, r19	; 0x07
    1cc0:	2e 83       	std	Y+6, r18	; 0x06
    1cc2:	c0 85       	ldd	r28, Z+8	; 0x08
    1cc4:	d1 85       	ldd	r29, Z+9	; 0x09
    1cc6:	26 81       	ldd	r18, Z+6	; 0x06
    1cc8:	37 81       	ldd	r19, Z+7	; 0x07
    1cca:	3d 83       	std	Y+5, r19	; 0x05
    1ccc:	2c 83       	std	Y+4, r18	; 0x04
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	4d 91       	ld	r20, X+
    1cd2:	5c 91       	ld	r21, X
    1cd4:	12 97       	sbiw	r26, 0x02	; 2
    1cd6:	9f 01       	movw	r18, r30
    1cd8:	2e 5f       	subi	r18, 0xFE	; 254
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	42 17       	cp	r20, r18
    1cde:	53 07       	cpc	r21, r19
    1ce0:	31 f4       	brne	.+12     	; 0x1cee <xTaskIncrementTick+0x132>
    1ce2:	40 85       	ldd	r20, Z+8	; 0x08
    1ce4:	51 85       	ldd	r21, Z+9	; 0x09
    1ce6:	12 96       	adiw	r26, 0x02	; 2
    1ce8:	5c 93       	st	X, r21
    1cea:	4e 93       	st	-X, r20
    1cec:	11 97       	sbiw	r26, 0x01	; 1
    1cee:	15 86       	std	Z+13, r1	; 0x0d
    1cf0:	14 86       	std	Z+12, r1	; 0x0c
    1cf2:	9c 91       	ld	r25, X
    1cf4:	91 50       	subi	r25, 0x01	; 1
    1cf6:	9c 93       	st	X, r25
    1cf8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1cfa:	b1 8d       	ldd	r27, Z+25	; 0x19
    1cfc:	10 97       	sbiw	r26, 0x00	; 0
    1cfe:	09 f1       	breq	.+66     	; 0x1d42 <xTaskIncrementTick+0x186>
    1d00:	c2 89       	ldd	r28, Z+18	; 0x12
    1d02:	d3 89       	ldd	r29, Z+19	; 0x13
    1d04:	44 89       	ldd	r20, Z+20	; 0x14
    1d06:	55 89       	ldd	r21, Z+21	; 0x15
    1d08:	5f 83       	std	Y+7, r21	; 0x07
    1d0a:	4e 83       	std	Y+6, r20	; 0x06
    1d0c:	c4 89       	ldd	r28, Z+20	; 0x14
    1d0e:	d5 89       	ldd	r29, Z+21	; 0x15
    1d10:	42 89       	ldd	r20, Z+18	; 0x12
    1d12:	53 89       	ldd	r21, Z+19	; 0x13
    1d14:	5d 83       	std	Y+5, r21	; 0x05
    1d16:	4c 83       	std	Y+4, r20	; 0x04
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	6d 91       	ld	r22, X+
    1d1c:	7c 91       	ld	r23, X
    1d1e:	12 97       	sbiw	r26, 0x02	; 2
    1d20:	af 01       	movw	r20, r30
    1d22:	42 5f       	subi	r20, 0xF2	; 242
    1d24:	5f 4f       	sbci	r21, 0xFF	; 255
    1d26:	64 17       	cp	r22, r20
    1d28:	75 07       	cpc	r23, r21
    1d2a:	31 f4       	brne	.+12     	; 0x1d38 <xTaskIncrementTick+0x17c>
    1d2c:	44 89       	ldd	r20, Z+20	; 0x14
    1d2e:	55 89       	ldd	r21, Z+21	; 0x15
    1d30:	12 96       	adiw	r26, 0x02	; 2
    1d32:	5c 93       	st	X, r21
    1d34:	4e 93       	st	-X, r20
    1d36:	11 97       	sbiw	r26, 0x01	; 1
    1d38:	11 8e       	std	Z+25, r1	; 0x19
    1d3a:	10 8e       	std	Z+24, r1	; 0x18
    1d3c:	9c 91       	ld	r25, X
    1d3e:	91 50       	subi	r25, 0x01	; 1
    1d40:	9c 93       	st	X, r25
    1d42:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d44:	90 91 a1 12 	lds	r25, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    1d48:	9a 17       	cp	r25, r26
    1d4a:	10 f4       	brcc	.+4      	; 0x1d50 <xTaskIncrementTick+0x194>
    1d4c:	a0 93 a1 12 	sts	0x12A1, r26	; 0x8012a1 <uxTopReadyPriority>
    1d50:	9b e0       	ldi	r25, 0x0B	; 11
    1d52:	9a 9f       	mul	r25, r26
    1d54:	d0 01       	movw	r26, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	ad 51       	subi	r26, 0x1D	; 29
    1d5a:	bd 4e       	sbci	r27, 0xED	; 237
    1d5c:	11 96       	adiw	r26, 0x01	; 1
    1d5e:	0d 90       	ld	r0, X+
    1d60:	bc 91       	ld	r27, X
    1d62:	a0 2d       	mov	r26, r0
    1d64:	b7 83       	std	Z+7, r27	; 0x07
    1d66:	a6 83       	std	Z+6, r26	; 0x06
    1d68:	16 96       	adiw	r26, 0x06	; 6
    1d6a:	4d 91       	ld	r20, X+
    1d6c:	5c 91       	ld	r21, X
    1d6e:	17 97       	sbiw	r26, 0x07	; 7
    1d70:	51 87       	std	Z+9, r21	; 0x09
    1d72:	40 87       	std	Z+8, r20	; 0x08
    1d74:	16 96       	adiw	r26, 0x06	; 6
    1d76:	cd 91       	ld	r28, X+
    1d78:	dc 91       	ld	r29, X
    1d7a:	17 97       	sbiw	r26, 0x07	; 7
    1d7c:	3d 83       	std	Y+5, r19	; 0x05
    1d7e:	2c 83       	std	Y+4, r18	; 0x04
    1d80:	17 96       	adiw	r26, 0x07	; 7
    1d82:	3c 93       	st	X, r19
    1d84:	2e 93       	st	-X, r18
    1d86:	16 97       	sbiw	r26, 0x06	; 6
    1d88:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d8a:	9a 9f       	mul	r25, r26
    1d8c:	d0 01       	movw	r26, r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	ad 51       	subi	r26, 0x1D	; 29
    1d92:	bd 4e       	sbci	r27, 0xED	; 237
    1d94:	b5 87       	std	Z+13, r27	; 0x0d
    1d96:	a4 87       	std	Z+12, r26	; 0x0c
    1d98:	9c 91       	ld	r25, X
    1d9a:	9f 5f       	subi	r25, 0xFF	; 255
    1d9c:	9c 93       	st	X, r25
    1d9e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1da0:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    1da4:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1da8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1daa:	29 17       	cp	r18, r25
    1dac:	08 f0       	brcs	.+2      	; 0x1db0 <xTaskIncrementTick+0x1f4>
    1dae:	4f cf       	rjmp	.-354    	; 0x1c4e <xTaskIncrementTick+0x92>
    1db0:	51 cf       	rjmp	.-350    	; 0x1c54 <xTaskIncrementTick+0x98>
    1db2:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    1db6:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1dba:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1dbc:	9b e0       	ldi	r25, 0x0B	; 11
    1dbe:	e9 9f       	mul	r30, r25
    1dc0:	f0 01       	movw	r30, r0
    1dc2:	11 24       	eor	r1, r1
    1dc4:	ed 51       	subi	r30, 0x1D	; 29
    1dc6:	fd 4e       	sbci	r31, 0xED	; 237
    1dc8:	90 81       	ld	r25, Z
    1dca:	92 30       	cpi	r25, 0x02	; 2
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <xTaskIncrementTick+0x214>
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 91 9b 12 	lds	r25, 0x129B	; 0x80129b <xYieldPending>
    1dd4:	91 11       	cpse	r25, r1
    1dd6:	16 c0       	rjmp	.+44     	; 0x1e04 <xTaskIncrementTick+0x248>
    1dd8:	16 c0       	rjmp	.+44     	; 0x1e06 <xTaskIncrementTick+0x24a>
    1dda:	80 91 9c 12 	lds	r24, 0x129C	; 0x80129c <xPendedTicks>
    1dde:	90 91 9d 12 	lds	r25, 0x129D	; 0x80129d <xPendedTicks+0x1>
    1de2:	a0 91 9e 12 	lds	r26, 0x129E	; 0x80129e <xPendedTicks+0x2>
    1de6:	b0 91 9f 12 	lds	r27, 0x129F	; 0x80129f <xPendedTicks+0x3>
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	a1 1d       	adc	r26, r1
    1dee:	b1 1d       	adc	r27, r1
    1df0:	80 93 9c 12 	sts	0x129C, r24	; 0x80129c <xPendedTicks>
    1df4:	90 93 9d 12 	sts	0x129D, r25	; 0x80129d <xPendedTicks+0x1>
    1df8:	a0 93 9e 12 	sts	0x129E, r26	; 0x80129e <xPendedTicks+0x2>
    1dfc:	b0 93 9f 12 	sts	0x129F, r27	; 0x80129f <xPendedTicks+0x3>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <xTaskIncrementTick+0x24a>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	ff 90       	pop	r15
    1e0c:	ef 90       	pop	r14
    1e0e:	df 90       	pop	r13
    1e10:	cf 90       	pop	r12
    1e12:	08 95       	ret

00001e14 <xTaskResumeAll>:
    1e14:	cf 92       	push	r12
    1e16:	df 92       	push	r13
    1e18:	ef 92       	push	r14
    1e1a:	ff 92       	push	r15
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	0f 92       	push	r0
    1e26:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    1e2a:	81 50       	subi	r24, 0x01	; 1
    1e2c:	80 93 92 12 	sts	0x1292, r24	; 0x801292 <uxSchedulerSuspended>
    1e30:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    1e34:	81 11       	cpse	r24, r1
    1e36:	be c0       	rjmp	.+380    	; 0x1fb4 <xTaskResumeAll+0x1a0>
    1e38:	80 91 a6 12 	lds	r24, 0x12A6	; 0x8012a6 <uxCurrentNumberOfTasks>
    1e3c:	81 11       	cpse	r24, r1
    1e3e:	88 c0       	rjmp	.+272    	; 0x1f50 <xTaskResumeAll+0x13c>
    1e40:	bc c0       	rjmp	.+376    	; 0x1fba <xTaskResumeAll+0x1a6>
    1e42:	e0 91 c5 12 	lds	r30, 0x12C5	; 0x8012c5 <xPendingReadyList+0x7>
    1e46:	f0 91 c6 12 	lds	r31, 0x12C6	; 0x8012c6 <xPendingReadyList+0x8>
    1e4a:	00 84       	ldd	r0, Z+8	; 0x08
    1e4c:	f1 85       	ldd	r31, Z+9	; 0x09
    1e4e:	e0 2d       	mov	r30, r0
    1e50:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e52:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e54:	c2 89       	ldd	r28, Z+18	; 0x12
    1e56:	d3 89       	ldd	r29, Z+19	; 0x13
    1e58:	84 89       	ldd	r24, Z+20	; 0x14
    1e5a:	95 89       	ldd	r25, Z+21	; 0x15
    1e5c:	9f 83       	std	Y+7, r25	; 0x07
    1e5e:	8e 83       	std	Y+6, r24	; 0x06
    1e60:	c4 89       	ldd	r28, Z+20	; 0x14
    1e62:	d5 89       	ldd	r29, Z+21	; 0x15
    1e64:	82 89       	ldd	r24, Z+18	; 0x12
    1e66:	93 89       	ldd	r25, Z+19	; 0x13
    1e68:	9d 83       	std	Y+5, r25	; 0x05
    1e6a:	8c 83       	std	Y+4, r24	; 0x04
    1e6c:	11 96       	adiw	r26, 0x01	; 1
    1e6e:	2d 91       	ld	r18, X+
    1e70:	3c 91       	ld	r19, X
    1e72:	12 97       	sbiw	r26, 0x02	; 2
    1e74:	cf 01       	movw	r24, r30
    1e76:	0e 96       	adiw	r24, 0x0e	; 14
    1e78:	28 17       	cp	r18, r24
    1e7a:	39 07       	cpc	r19, r25
    1e7c:	31 f4       	brne	.+12     	; 0x1e8a <xTaskResumeAll+0x76>
    1e7e:	84 89       	ldd	r24, Z+20	; 0x14
    1e80:	95 89       	ldd	r25, Z+21	; 0x15
    1e82:	12 96       	adiw	r26, 0x02	; 2
    1e84:	9c 93       	st	X, r25
    1e86:	8e 93       	st	-X, r24
    1e88:	11 97       	sbiw	r26, 0x01	; 1
    1e8a:	11 8e       	std	Z+25, r1	; 0x19
    1e8c:	10 8e       	std	Z+24, r1	; 0x18
    1e8e:	8c 91       	ld	r24, X
    1e90:	81 50       	subi	r24, 0x01	; 1
    1e92:	8c 93       	st	X, r24
    1e94:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e96:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e98:	c6 81       	ldd	r28, Z+6	; 0x06
    1e9a:	d7 81       	ldd	r29, Z+7	; 0x07
    1e9c:	80 85       	ldd	r24, Z+8	; 0x08
    1e9e:	91 85       	ldd	r25, Z+9	; 0x09
    1ea0:	9f 83       	std	Y+7, r25	; 0x07
    1ea2:	8e 83       	std	Y+6, r24	; 0x06
    1ea4:	c0 85       	ldd	r28, Z+8	; 0x08
    1ea6:	d1 85       	ldd	r29, Z+9	; 0x09
    1ea8:	86 81       	ldd	r24, Z+6	; 0x06
    1eaa:	97 81       	ldd	r25, Z+7	; 0x07
    1eac:	9d 83       	std	Y+5, r25	; 0x05
    1eae:	8c 83       	std	Y+4, r24	; 0x04
    1eb0:	11 96       	adiw	r26, 0x01	; 1
    1eb2:	8d 91       	ld	r24, X+
    1eb4:	9c 91       	ld	r25, X
    1eb6:	12 97       	sbiw	r26, 0x02	; 2
    1eb8:	9f 01       	movw	r18, r30
    1eba:	2e 5f       	subi	r18, 0xFE	; 254
    1ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebe:	82 17       	cp	r24, r18
    1ec0:	93 07       	cpc	r25, r19
    1ec2:	31 f4       	brne	.+12     	; 0x1ed0 <xTaskResumeAll+0xbc>
    1ec4:	80 85       	ldd	r24, Z+8	; 0x08
    1ec6:	91 85       	ldd	r25, Z+9	; 0x09
    1ec8:	12 96       	adiw	r26, 0x02	; 2
    1eca:	9c 93       	st	X, r25
    1ecc:	8e 93       	st	-X, r24
    1ece:	11 97       	sbiw	r26, 0x01	; 1
    1ed0:	15 86       	std	Z+13, r1	; 0x0d
    1ed2:	14 86       	std	Z+12, r1	; 0x0c
    1ed4:	8c 91       	ld	r24, X
    1ed6:	81 50       	subi	r24, 0x01	; 1
    1ed8:	8c 93       	st	X, r24
    1eda:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1edc:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    1ee0:	8a 17       	cp	r24, r26
    1ee2:	10 f4       	brcc	.+4      	; 0x1ee8 <xTaskResumeAll+0xd4>
    1ee4:	a0 93 a1 12 	sts	0x12A1, r26	; 0x8012a1 <uxTopReadyPriority>
    1ee8:	8b e0       	ldi	r24, 0x0B	; 11
    1eea:	8a 9f       	mul	r24, r26
    1eec:	d0 01       	movw	r26, r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	ad 51       	subi	r26, 0x1D	; 29
    1ef2:	bd 4e       	sbci	r27, 0xED	; 237
    1ef4:	11 96       	adiw	r26, 0x01	; 1
    1ef6:	0d 90       	ld	r0, X+
    1ef8:	bc 91       	ld	r27, X
    1efa:	a0 2d       	mov	r26, r0
    1efc:	b7 83       	std	Z+7, r27	; 0x07
    1efe:	a6 83       	std	Z+6, r26	; 0x06
    1f00:	16 96       	adiw	r26, 0x06	; 6
    1f02:	4d 91       	ld	r20, X+
    1f04:	5c 91       	ld	r21, X
    1f06:	17 97       	sbiw	r26, 0x07	; 7
    1f08:	51 87       	std	Z+9, r21	; 0x09
    1f0a:	40 87       	std	Z+8, r20	; 0x08
    1f0c:	16 96       	adiw	r26, 0x06	; 6
    1f0e:	cd 91       	ld	r28, X+
    1f10:	dc 91       	ld	r29, X
    1f12:	17 97       	sbiw	r26, 0x07	; 7
    1f14:	3d 83       	std	Y+5, r19	; 0x05
    1f16:	2c 83       	std	Y+4, r18	; 0x04
    1f18:	17 96       	adiw	r26, 0x07	; 7
    1f1a:	3c 93       	st	X, r19
    1f1c:	2e 93       	st	-X, r18
    1f1e:	16 97       	sbiw	r26, 0x06	; 6
    1f20:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f22:	8a 9f       	mul	r24, r26
    1f24:	d0 01       	movw	r26, r0
    1f26:	11 24       	eor	r1, r1
    1f28:	ad 51       	subi	r26, 0x1D	; 29
    1f2a:	bd 4e       	sbci	r27, 0xED	; 237
    1f2c:	b5 87       	std	Z+13, r27	; 0x0d
    1f2e:	a4 87       	std	Z+12, r26	; 0x0c
    1f30:	8c 91       	ld	r24, X
    1f32:	8f 5f       	subi	r24, 0xFF	; 255
    1f34:	8c 93       	st	X, r24
    1f36:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f38:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    1f3c:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1f40:	5a 96       	adiw	r26, 0x1a	; 26
    1f42:	8c 91       	ld	r24, X
    1f44:	98 17       	cp	r25, r24
    1f46:	30 f0       	brcs	.+12     	; 0x1f54 <xTaskResumeAll+0x140>
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <xTaskResumeAll+0x140>
    1f50:	e0 e0       	ldi	r30, 0x00	; 0
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 91 be 12 	lds	r24, 0x12BE	; 0x8012be <xPendingReadyList>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	73 cf       	rjmp	.-282    	; 0x1e42 <xTaskResumeAll+0x2e>
    1f5c:	ef 2b       	or	r30, r31
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <xTaskResumeAll+0x14e>
    1f60:	7d db       	rcall	.-2310   	; 0x165c <prvResetNextTaskUnblockTime>
    1f62:	c0 90 9c 12 	lds	r12, 0x129C	; 0x80129c <xPendedTicks>
    1f66:	d0 90 9d 12 	lds	r13, 0x129D	; 0x80129d <xPendedTicks+0x1>
    1f6a:	e0 90 9e 12 	lds	r14, 0x129E	; 0x80129e <xPendedTicks+0x2>
    1f6e:	f0 90 9f 12 	lds	r15, 0x129F	; 0x80129f <xPendedTicks+0x3>
    1f72:	c1 14       	cp	r12, r1
    1f74:	d1 04       	cpc	r13, r1
    1f76:	e1 04       	cpc	r14, r1
    1f78:	f1 04       	cpc	r15, r1
    1f7a:	a1 f0       	breq	.+40     	; 0x1fa4 <xTaskResumeAll+0x190>
    1f7c:	1f de       	rcall	.-962    	; 0x1bbc <xTaskIncrementTick>
    1f7e:	88 23       	and	r24, r24
    1f80:	19 f0       	breq	.+6      	; 0x1f88 <xTaskResumeAll+0x174>
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	c8 1a       	sub	r12, r24
    1f8c:	d1 08       	sbc	r13, r1
    1f8e:	e1 08       	sbc	r14, r1
    1f90:	f1 08       	sbc	r15, r1
    1f92:	a1 f7       	brne	.-24     	; 0x1f7c <xTaskResumeAll+0x168>
    1f94:	10 92 9c 12 	sts	0x129C, r1	; 0x80129c <xPendedTicks>
    1f98:	10 92 9d 12 	sts	0x129D, r1	; 0x80129d <xPendedTicks+0x1>
    1f9c:	10 92 9e 12 	sts	0x129E, r1	; 0x80129e <xPendedTicks+0x2>
    1fa0:	10 92 9f 12 	sts	0x129F, r1	; 0x80129f <xPendedTicks+0x3>
    1fa4:	80 91 9b 12 	lds	r24, 0x129B	; 0x80129b <xYieldPending>
    1fa8:	88 23       	and	r24, r24
    1faa:	31 f0       	breq	.+12     	; 0x1fb8 <xTaskResumeAll+0x1a4>
    1fac:	0e 94 bf 03 	call	0x77e	; 0x77e <vPortYield>
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	03 c0       	rjmp	.+6      	; 0x1fba <xTaskResumeAll+0x1a6>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <xTaskResumeAll+0x1a6>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	0f 90       	pop	r0
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	df 90       	pop	r13
    1fc8:	cf 90       	pop	r12
    1fca:	08 95       	ret

00001fcc <xTaskDelayUntil>:
    1fcc:	8f 92       	push	r8
    1fce:	9f 92       	push	r9
    1fd0:	af 92       	push	r10
    1fd2:	bf 92       	push	r11
    1fd4:	cf 92       	push	r12
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	ec 01       	movw	r28, r24
    1fe4:	6a 01       	movw	r12, r20
    1fe6:	7b 01       	movw	r14, r22
    1fe8:	d5 dd       	rcall	.-1110   	; 0x1b94 <vTaskSuspendAll>
    1fea:	80 90 a2 12 	lds	r8, 0x12A2	; 0x8012a2 <xTickCount>
    1fee:	90 90 a3 12 	lds	r9, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    1ff2:	a0 90 a4 12 	lds	r10, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    1ff6:	b0 90 a5 12 	lds	r11, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    1ffa:	88 81       	ld	r24, Y
    1ffc:	99 81       	ldd	r25, Y+1	; 0x01
    1ffe:	aa 81       	ldd	r26, Y+2	; 0x02
    2000:	bb 81       	ldd	r27, Y+3	; 0x03
    2002:	ac 01       	movw	r20, r24
    2004:	bd 01       	movw	r22, r26
    2006:	4c 0d       	add	r20, r12
    2008:	5d 1d       	adc	r21, r13
    200a:	6e 1d       	adc	r22, r14
    200c:	7f 1d       	adc	r23, r15
    200e:	88 16       	cp	r8, r24
    2010:	99 06       	cpc	r9, r25
    2012:	aa 06       	cpc	r10, r26
    2014:	bb 06       	cpc	r11, r27
    2016:	60 f4       	brcc	.+24     	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    2018:	48 17       	cp	r20, r24
    201a:	59 07       	cpc	r21, r25
    201c:	6a 07       	cpc	r22, r26
    201e:	7b 07       	cpc	r23, r27
    2020:	98 f4       	brcc	.+38     	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
    2022:	84 16       	cp	r8, r20
    2024:	95 06       	cpc	r9, r21
    2026:	a6 06       	cpc	r10, r22
    2028:	b7 06       	cpc	r11, r23
    202a:	80 f0       	brcs	.+32     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    202c:	10 e0       	ldi	r17, 0x00	; 0
    202e:	13 c0       	rjmp	.+38     	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    2030:	48 17       	cp	r20, r24
    2032:	59 07       	cpc	r21, r25
    2034:	6a 07       	cpc	r22, r26
    2036:	7b 07       	cpc	r23, r27
    2038:	58 f0       	brcs	.+22     	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
    203a:	84 16       	cp	r8, r20
    203c:	95 06       	cpc	r9, r21
    203e:	a6 06       	cpc	r10, r22
    2040:	b7 06       	cpc	r11, r23
    2042:	40 f0       	brcs	.+16     	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    2044:	10 e0       	ldi	r17, 0x00	; 0
    2046:	07 c0       	rjmp	.+14     	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    2048:	10 e0       	ldi	r17, 0x00	; 0
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    204c:	11 e0       	ldi	r17, 0x01	; 1
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    2050:	11 e0       	ldi	r17, 0x01	; 1
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    2054:	11 e0       	ldi	r17, 0x01	; 1
    2056:	48 83       	st	Y, r20
    2058:	59 83       	std	Y+1, r21	; 0x01
    205a:	6a 83       	std	Y+2, r22	; 0x02
    205c:	7b 83       	std	Y+3, r23	; 0x03
    205e:	11 23       	and	r17, r17
    2060:	41 f0       	breq	.+16     	; 0x2072 <__DATA_REGION_LENGTH__+0x72>
    2062:	cb 01       	movw	r24, r22
    2064:	ba 01       	movw	r22, r20
    2066:	68 19       	sub	r22, r8
    2068:	79 09       	sbc	r23, r9
    206a:	8a 09       	sbc	r24, r10
    206c:	9b 09       	sbc	r25, r11
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	6b dc       	rcall	.-1834   	; 0x1948 <prvAddCurrentTaskToDelayedList>
    2072:	d0 de       	rcall	.-608    	; 0x1e14 <xTaskResumeAll>
    2074:	81 11       	cpse	r24, r1
    2076:	02 c0       	rjmp	.+4      	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    2078:	0e 94 bf 03 	call	0x77e	; 0x77e <vPortYield>
    207c:	81 2f       	mov	r24, r17
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	df 90       	pop	r13
    208a:	cf 90       	pop	r12
    208c:	bf 90       	pop	r11
    208e:	af 90       	pop	r10
    2090:	9f 90       	pop	r9
    2092:	8f 90       	pop	r8
    2094:	08 95       	ret

00002096 <vTaskDelay>:
    2096:	cf 92       	push	r12
    2098:	df 92       	push	r13
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	6b 01       	movw	r12, r22
    20a0:	7c 01       	movw	r14, r24
    20a2:	67 2b       	or	r22, r23
    20a4:	68 2b       	or	r22, r24
    20a6:	69 2b       	or	r22, r25
    20a8:	39 f0       	breq	.+14     	; 0x20b8 <vTaskDelay+0x22>
    20aa:	74 dd       	rcall	.-1304   	; 0x1b94 <vTaskSuspendAll>
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	c7 01       	movw	r24, r14
    20b0:	b6 01       	movw	r22, r12
    20b2:	4a dc       	rcall	.-1900   	; 0x1948 <prvAddCurrentTaskToDelayedList>
    20b4:	af de       	rcall	.-674    	; 0x1e14 <xTaskResumeAll>
    20b6:	01 c0       	rjmp	.+2      	; 0x20ba <vTaskDelay+0x24>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	81 11       	cpse	r24, r1
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <vTaskDelay+0x2c>
    20be:	0e 94 bf 03 	call	0x77e	; 0x77e <vPortYield>
    20c2:	ff 90       	pop	r15
    20c4:	ef 90       	pop	r14
    20c6:	df 90       	pop	r13
    20c8:	cf 90       	pop	r12
    20ca:	08 95       	ret

000020cc <vTaskSwitchContext>:
    20cc:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    20d0:	88 23       	and	r24, r24
    20d2:	21 f0       	breq	.+8      	; 0x20dc <vTaskSwitchContext+0x10>
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    20da:	08 95       	ret
    20dc:	10 92 9b 12 	sts	0x129B, r1	; 0x80129b <xYieldPending>
    20e0:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    20e4:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    20e8:	20 81       	ld	r18, Z
    20ea:	31 81       	ldd	r19, Z+1	; 0x01
    20ec:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    20f0:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    20f4:	83 8d       	ldd	r24, Z+27	; 0x1b
    20f6:	94 8d       	ldd	r25, Z+28	; 0x1c
    20f8:	82 17       	cp	r24, r18
    20fa:	93 07       	cpc	r25, r19
    20fc:	60 f0       	brcs	.+24     	; 0x2116 <vTaskSwitchContext+0x4a>
    20fe:	60 91 51 13 	lds	r22, 0x1351	; 0x801351 <pxCurrentTCB>
    2102:	70 91 52 13 	lds	r23, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2106:	63 5e       	subi	r22, 0xE3	; 227
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    210e:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2112:	0e 94 c4 19 	call	0x3388	; 0x3388 <vApplicationStackOverflowHook>
    2116:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    211a:	01 c0       	rjmp	.+2      	; 0x211e <vTaskSwitchContext+0x52>
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	9b e0       	ldi	r25, 0x0B	; 11
    2124:	92 9f       	mul	r25, r18
    2126:	f0 01       	movw	r30, r0
    2128:	93 9f       	mul	r25, r19
    212a:	f0 0d       	add	r31, r0
    212c:	11 24       	eor	r1, r1
    212e:	ed 51       	subi	r30, 0x1D	; 29
    2130:	fd 4e       	sbci	r31, 0xED	; 237
    2132:	90 81       	ld	r25, Z
    2134:	99 23       	and	r25, r25
    2136:	91 f3       	breq	.-28     	; 0x211c <vTaskSwitchContext+0x50>
    2138:	9b e0       	ldi	r25, 0x0B	; 11
    213a:	92 9f       	mul	r25, r18
    213c:	a0 01       	movw	r20, r0
    213e:	93 9f       	mul	r25, r19
    2140:	50 0d       	add	r21, r0
    2142:	11 24       	eor	r1, r1
    2144:	df 01       	movw	r26, r30
    2146:	01 80       	ldd	r0, Z+1	; 0x01
    2148:	f2 81       	ldd	r31, Z+2	; 0x02
    214a:	e0 2d       	mov	r30, r0
    214c:	04 80       	ldd	r0, Z+4	; 0x04
    214e:	f5 81       	ldd	r31, Z+5	; 0x05
    2150:	e0 2d       	mov	r30, r0
    2152:	12 96       	adiw	r26, 0x02	; 2
    2154:	fc 93       	st	X, r31
    2156:	ee 93       	st	-X, r30
    2158:	11 97       	sbiw	r26, 0x01	; 1
    215a:	4a 51       	subi	r20, 0x1A	; 26
    215c:	5d 4e       	sbci	r21, 0xED	; 237
    215e:	e4 17       	cp	r30, r20
    2160:	f5 07       	cpc	r31, r21
    2162:	29 f4       	brne	.+10     	; 0x216e <vTaskSwitchContext+0xa2>
    2164:	44 81       	ldd	r20, Z+4	; 0x04
    2166:	55 81       	ldd	r21, Z+5	; 0x05
    2168:	fd 01       	movw	r30, r26
    216a:	52 83       	std	Z+2, r21	; 0x02
    216c:	41 83       	std	Z+1, r20	; 0x01
    216e:	9b e0       	ldi	r25, 0x0B	; 11
    2170:	92 9f       	mul	r25, r18
    2172:	f0 01       	movw	r30, r0
    2174:	93 9f       	mul	r25, r19
    2176:	f0 0d       	add	r31, r0
    2178:	11 24       	eor	r1, r1
    217a:	ed 51       	subi	r30, 0x1D	; 29
    217c:	fd 4e       	sbci	r31, 0xED	; 237
    217e:	01 80       	ldd	r0, Z+1	; 0x01
    2180:	f2 81       	ldd	r31, Z+2	; 0x02
    2182:	e0 2d       	mov	r30, r0
    2184:	20 85       	ldd	r18, Z+8	; 0x08
    2186:	31 85       	ldd	r19, Z+9	; 0x09
    2188:	30 93 52 13 	sts	0x1352, r19	; 0x801352 <pxCurrentTCB+0x1>
    218c:	20 93 51 13 	sts	0x1351, r18	; 0x801351 <pxCurrentTCB>
    2190:	80 93 a1 12 	sts	0x12A1, r24	; 0x8012a1 <uxTopReadyPriority>
    2194:	08 95       	ret

00002196 <vTaskPlaceOnEventList>:
    2196:	cf 92       	push	r12
    2198:	df 92       	push	r13
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	6a 01       	movw	r12, r20
    21a0:	7b 01       	movw	r14, r22
    21a2:	60 91 51 13 	lds	r22, 0x1351	; 0x801351 <pxCurrentTCB>
    21a6:	70 91 52 13 	lds	r23, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    21aa:	62 5f       	subi	r22, 0xF2	; 242
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	0e 94 06 03 	call	0x60c	; 0x60c <vListInsert>
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	c7 01       	movw	r24, r14
    21b6:	b6 01       	movw	r22, r12
    21b8:	c7 db       	rcall	.-2162   	; 0x1948 <prvAddCurrentTaskToDelayedList>
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	df 90       	pop	r13
    21c0:	cf 90       	pop	r12
    21c2:	08 95       	ret

000021c4 <vTaskPlaceOnEventListRestricted>:
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	fc 01       	movw	r30, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	ba 01       	movw	r22, r20
    21ce:	a1 81       	ldd	r26, Z+1	; 0x01
    21d0:	b2 81       	ldd	r27, Z+2	; 0x02
    21d2:	c0 91 51 13 	lds	r28, 0x1351	; 0x801351 <pxCurrentTCB>
    21d6:	d0 91 52 13 	lds	r29, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    21da:	bb 8b       	std	Y+19, r27	; 0x13
    21dc:	aa 8b       	std	Y+18, r26	; 0x12
    21de:	c0 91 51 13 	lds	r28, 0x1351	; 0x801351 <pxCurrentTCB>
    21e2:	d0 91 52 13 	lds	r29, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    21e6:	16 96       	adiw	r26, 0x06	; 6
    21e8:	4d 91       	ld	r20, X+
    21ea:	5c 91       	ld	r21, X
    21ec:	17 97       	sbiw	r26, 0x07	; 7
    21ee:	5d 8b       	std	Y+21, r21	; 0x15
    21f0:	4c 8b       	std	Y+20, r20	; 0x14
    21f2:	16 96       	adiw	r26, 0x06	; 6
    21f4:	cd 91       	ld	r28, X+
    21f6:	dc 91       	ld	r29, X
    21f8:	17 97       	sbiw	r26, 0x07	; 7
    21fa:	40 91 51 13 	lds	r20, 0x1351	; 0x801351 <pxCurrentTCB>
    21fe:	50 91 52 13 	lds	r21, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2202:	42 5f       	subi	r20, 0xF2	; 242
    2204:	5f 4f       	sbci	r21, 0xFF	; 255
    2206:	5d 83       	std	Y+5, r21	; 0x05
    2208:	4c 83       	std	Y+4, r20	; 0x04
    220a:	40 91 51 13 	lds	r20, 0x1351	; 0x801351 <pxCurrentTCB>
    220e:	50 91 52 13 	lds	r21, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2212:	42 5f       	subi	r20, 0xF2	; 242
    2214:	5f 4f       	sbci	r21, 0xFF	; 255
    2216:	17 96       	adiw	r26, 0x07	; 7
    2218:	5c 93       	st	X, r21
    221a:	4e 93       	st	-X, r20
    221c:	16 97       	sbiw	r26, 0x06	; 6
    221e:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    2222:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2226:	59 96       	adiw	r26, 0x19	; 25
    2228:	fc 93       	st	X, r31
    222a:	ee 93       	st	-X, r30
    222c:	58 97       	sbiw	r26, 0x18	; 24
    222e:	30 81       	ld	r19, Z
    2230:	3f 5f       	subi	r19, 0xFF	; 255
    2232:	30 83       	st	Z, r19
    2234:	22 23       	and	r18, r18
    2236:	19 f0       	breq	.+6      	; 0x223e <__stack+0x3f>
    2238:	6f ef       	ldi	r22, 0xFF	; 255
    223a:	7f ef       	ldi	r23, 0xFF	; 255
    223c:	cb 01       	movw	r24, r22
    223e:	42 2f       	mov	r20, r18
    2240:	83 db       	rcall	.-2298   	; 0x1948 <prvAddCurrentTaskToDelayedList>
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	08 95       	ret

00002248 <xTaskRemoveFromEventList>:
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	dc 01       	movw	r26, r24
    224e:	17 96       	adiw	r26, 0x07	; 7
    2250:	ed 91       	ld	r30, X+
    2252:	fc 91       	ld	r31, X
    2254:	18 97       	sbiw	r26, 0x08	; 8
    2256:	00 84       	ldd	r0, Z+8	; 0x08
    2258:	f1 85       	ldd	r31, Z+9	; 0x09
    225a:	e0 2d       	mov	r30, r0
    225c:	a0 8d       	ldd	r26, Z+24	; 0x18
    225e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2260:	c2 89       	ldd	r28, Z+18	; 0x12
    2262:	d3 89       	ldd	r29, Z+19	; 0x13
    2264:	84 89       	ldd	r24, Z+20	; 0x14
    2266:	95 89       	ldd	r25, Z+21	; 0x15
    2268:	9f 83       	std	Y+7, r25	; 0x07
    226a:	8e 83       	std	Y+6, r24	; 0x06
    226c:	c4 89       	ldd	r28, Z+20	; 0x14
    226e:	d5 89       	ldd	r29, Z+21	; 0x15
    2270:	82 89       	ldd	r24, Z+18	; 0x12
    2272:	93 89       	ldd	r25, Z+19	; 0x13
    2274:	9d 83       	std	Y+5, r25	; 0x05
    2276:	8c 83       	std	Y+4, r24	; 0x04
    2278:	11 96       	adiw	r26, 0x01	; 1
    227a:	8d 91       	ld	r24, X+
    227c:	9c 91       	ld	r25, X
    227e:	12 97       	sbiw	r26, 0x02	; 2
    2280:	9f 01       	movw	r18, r30
    2282:	22 5f       	subi	r18, 0xF2	; 242
    2284:	3f 4f       	sbci	r19, 0xFF	; 255
    2286:	82 17       	cp	r24, r18
    2288:	93 07       	cpc	r25, r19
    228a:	31 f4       	brne	.+12     	; 0x2298 <xTaskRemoveFromEventList+0x50>
    228c:	84 89       	ldd	r24, Z+20	; 0x14
    228e:	95 89       	ldd	r25, Z+21	; 0x15
    2290:	12 96       	adiw	r26, 0x02	; 2
    2292:	9c 93       	st	X, r25
    2294:	8e 93       	st	-X, r24
    2296:	11 97       	sbiw	r26, 0x01	; 1
    2298:	11 8e       	std	Z+25, r1	; 0x19
    229a:	10 8e       	std	Z+24, r1	; 0x18
    229c:	8c 91       	ld	r24, X
    229e:	81 50       	subi	r24, 0x01	; 1
    22a0:	8c 93       	st	X, r24
    22a2:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    22a6:	81 11       	cpse	r24, r1
    22a8:	52 c0       	rjmp	.+164    	; 0x234e <xTaskRemoveFromEventList+0x106>
    22aa:	a4 85       	ldd	r26, Z+12	; 0x0c
    22ac:	b5 85       	ldd	r27, Z+13	; 0x0d
    22ae:	c6 81       	ldd	r28, Z+6	; 0x06
    22b0:	d7 81       	ldd	r29, Z+7	; 0x07
    22b2:	80 85       	ldd	r24, Z+8	; 0x08
    22b4:	91 85       	ldd	r25, Z+9	; 0x09
    22b6:	9f 83       	std	Y+7, r25	; 0x07
    22b8:	8e 83       	std	Y+6, r24	; 0x06
    22ba:	c0 85       	ldd	r28, Z+8	; 0x08
    22bc:	d1 85       	ldd	r29, Z+9	; 0x09
    22be:	86 81       	ldd	r24, Z+6	; 0x06
    22c0:	97 81       	ldd	r25, Z+7	; 0x07
    22c2:	9d 83       	std	Y+5, r25	; 0x05
    22c4:	8c 83       	std	Y+4, r24	; 0x04
    22c6:	11 96       	adiw	r26, 0x01	; 1
    22c8:	8d 91       	ld	r24, X+
    22ca:	9c 91       	ld	r25, X
    22cc:	12 97       	sbiw	r26, 0x02	; 2
    22ce:	9f 01       	movw	r18, r30
    22d0:	2e 5f       	subi	r18, 0xFE	; 254
    22d2:	3f 4f       	sbci	r19, 0xFF	; 255
    22d4:	82 17       	cp	r24, r18
    22d6:	93 07       	cpc	r25, r19
    22d8:	31 f4       	brne	.+12     	; 0x22e6 <xTaskRemoveFromEventList+0x9e>
    22da:	80 85       	ldd	r24, Z+8	; 0x08
    22dc:	91 85       	ldd	r25, Z+9	; 0x09
    22de:	12 96       	adiw	r26, 0x02	; 2
    22e0:	9c 93       	st	X, r25
    22e2:	8e 93       	st	-X, r24
    22e4:	11 97       	sbiw	r26, 0x01	; 1
    22e6:	15 86       	std	Z+13, r1	; 0x0d
    22e8:	14 86       	std	Z+12, r1	; 0x0c
    22ea:	8c 91       	ld	r24, X
    22ec:	81 50       	subi	r24, 0x01	; 1
    22ee:	8c 93       	st	X, r24
    22f0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22f2:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    22f6:	8a 17       	cp	r24, r26
    22f8:	10 f4       	brcc	.+4      	; 0x22fe <xTaskRemoveFromEventList+0xb6>
    22fa:	a0 93 a1 12 	sts	0x12A1, r26	; 0x8012a1 <uxTopReadyPriority>
    22fe:	8b e0       	ldi	r24, 0x0B	; 11
    2300:	8a 9f       	mul	r24, r26
    2302:	d0 01       	movw	r26, r0
    2304:	11 24       	eor	r1, r1
    2306:	ad 51       	subi	r26, 0x1D	; 29
    2308:	bd 4e       	sbci	r27, 0xED	; 237
    230a:	11 96       	adiw	r26, 0x01	; 1
    230c:	0d 90       	ld	r0, X+
    230e:	bc 91       	ld	r27, X
    2310:	a0 2d       	mov	r26, r0
    2312:	b7 83       	std	Z+7, r27	; 0x07
    2314:	a6 83       	std	Z+6, r26	; 0x06
    2316:	16 96       	adiw	r26, 0x06	; 6
    2318:	4d 91       	ld	r20, X+
    231a:	5c 91       	ld	r21, X
    231c:	17 97       	sbiw	r26, 0x07	; 7
    231e:	51 87       	std	Z+9, r21	; 0x09
    2320:	40 87       	std	Z+8, r20	; 0x08
    2322:	16 96       	adiw	r26, 0x06	; 6
    2324:	cd 91       	ld	r28, X+
    2326:	dc 91       	ld	r29, X
    2328:	17 97       	sbiw	r26, 0x07	; 7
    232a:	3d 83       	std	Y+5, r19	; 0x05
    232c:	2c 83       	std	Y+4, r18	; 0x04
    232e:	17 96       	adiw	r26, 0x07	; 7
    2330:	3c 93       	st	X, r19
    2332:	2e 93       	st	-X, r18
    2334:	16 97       	sbiw	r26, 0x06	; 6
    2336:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2338:	8a 9f       	mul	r24, r26
    233a:	d0 01       	movw	r26, r0
    233c:	11 24       	eor	r1, r1
    233e:	ad 51       	subi	r26, 0x1D	; 29
    2340:	bd 4e       	sbci	r27, 0xED	; 237
    2342:	b5 87       	std	Z+13, r27	; 0x0d
    2344:	a4 87       	std	Z+12, r26	; 0x0c
    2346:	8c 91       	ld	r24, X
    2348:	8f 5f       	subi	r24, 0xFF	; 255
    234a:	8c 93       	st	X, r24
    234c:	1c c0       	rjmp	.+56     	; 0x2386 <xTaskRemoveFromEventList+0x13e>
    234e:	4e eb       	ldi	r20, 0xBE	; 190
    2350:	52 e1       	ldi	r21, 0x12	; 18
    2352:	da 01       	movw	r26, r20
    2354:	11 96       	adiw	r26, 0x01	; 1
    2356:	cd 91       	ld	r28, X+
    2358:	dc 91       	ld	r29, X
    235a:	12 97       	sbiw	r26, 0x02	; 2
    235c:	d3 8b       	std	Z+19, r29	; 0x13
    235e:	c2 8b       	std	Z+18, r28	; 0x12
    2360:	8e 81       	ldd	r24, Y+6	; 0x06
    2362:	9f 81       	ldd	r25, Y+7	; 0x07
    2364:	95 8b       	std	Z+21, r25	; 0x15
    2366:	84 8b       	std	Z+20, r24	; 0x14
    2368:	8e 81       	ldd	r24, Y+6	; 0x06
    236a:	9f 81       	ldd	r25, Y+7	; 0x07
    236c:	dc 01       	movw	r26, r24
    236e:	15 96       	adiw	r26, 0x05	; 5
    2370:	3c 93       	st	X, r19
    2372:	2e 93       	st	-X, r18
    2374:	14 97       	sbiw	r26, 0x04	; 4
    2376:	3f 83       	std	Y+7, r19	; 0x07
    2378:	2e 83       	std	Y+6, r18	; 0x06
    237a:	51 8f       	std	Z+25, r21	; 0x19
    237c:	40 8f       	std	Z+24, r20	; 0x18
    237e:	da 01       	movw	r26, r20
    2380:	8c 91       	ld	r24, X
    2382:	8f 5f       	subi	r24, 0xFF	; 255
    2384:	8c 93       	st	X, r24
    2386:	92 8d       	ldd	r25, Z+26	; 0x1a
    2388:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    238c:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2390:	82 8d       	ldd	r24, Z+26	; 0x1a
    2392:	89 17       	cp	r24, r25
    2394:	20 f4       	brcc	.+8      	; 0x239e <xTaskRemoveFromEventList+0x156>
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <xTaskRemoveFromEventList+0x158>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	08 95       	ret

000023a6 <vTaskSetTimeOutState>:
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	0f 92       	push	r0
    23ac:	20 91 9a 12 	lds	r18, 0x129A	; 0x80129a <xNumOfOverflows>
    23b0:	fc 01       	movw	r30, r24
    23b2:	20 83       	st	Z, r18
    23b4:	40 91 a2 12 	lds	r20, 0x12A2	; 0x8012a2 <xTickCount>
    23b8:	50 91 a3 12 	lds	r21, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    23bc:	60 91 a4 12 	lds	r22, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    23c0:	70 91 a5 12 	lds	r23, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    23c4:	41 83       	std	Z+1, r20	; 0x01
    23c6:	52 83       	std	Z+2, r21	; 0x02
    23c8:	63 83       	std	Z+3, r22	; 0x03
    23ca:	74 83       	std	Z+4, r23	; 0x04
    23cc:	0f 90       	pop	r0
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	08 95       	ret

000023d2 <vTaskInternalSetTimeOutState>:
    23d2:	20 91 9a 12 	lds	r18, 0x129A	; 0x80129a <xNumOfOverflows>
    23d6:	fc 01       	movw	r30, r24
    23d8:	20 83       	st	Z, r18
    23da:	40 91 a2 12 	lds	r20, 0x12A2	; 0x8012a2 <xTickCount>
    23de:	50 91 a3 12 	lds	r21, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    23e2:	60 91 a4 12 	lds	r22, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    23e6:	70 91 a5 12 	lds	r23, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    23ea:	41 83       	std	Z+1, r20	; 0x01
    23ec:	52 83       	std	Z+2, r21	; 0x02
    23ee:	63 83       	std	Z+3, r22	; 0x03
    23f0:	74 83       	std	Z+4, r23	; 0x04
    23f2:	08 95       	ret

000023f4 <xTaskCheckForTimeOut>:
    23f4:	8f 92       	push	r8
    23f6:	9f 92       	push	r9
    23f8:	af 92       	push	r10
    23fa:	bf 92       	push	r11
    23fc:	cf 92       	push	r12
    23fe:	df 92       	push	r13
    2400:	ef 92       	push	r14
    2402:	ff 92       	push	r15
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	fb 01       	movw	r30, r22
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	0f 92       	push	r0
    2414:	c0 90 a2 12 	lds	r12, 0x12A2	; 0x8012a2 <xTickCount>
    2418:	d0 90 a3 12 	lds	r13, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    241c:	e0 90 a4 12 	lds	r14, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    2420:	f0 90 a5 12 	lds	r15, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    2424:	dc 01       	movw	r26, r24
    2426:	11 96       	adiw	r26, 0x01	; 1
    2428:	0d 91       	ld	r16, X+
    242a:	1d 91       	ld	r17, X+
    242c:	2d 91       	ld	r18, X+
    242e:	3c 91       	ld	r19, X
    2430:	14 97       	sbiw	r26, 0x04	; 4
    2432:	46 01       	movw	r8, r12
    2434:	57 01       	movw	r10, r14
    2436:	80 1a       	sub	r8, r16
    2438:	91 0a       	sbc	r9, r17
    243a:	a2 0a       	sbc	r10, r18
    243c:	b3 0a       	sbc	r11, r19
    243e:	40 81       	ld	r20, Z
    2440:	51 81       	ldd	r21, Z+1	; 0x01
    2442:	62 81       	ldd	r22, Z+2	; 0x02
    2444:	73 81       	ldd	r23, Z+3	; 0x03
    2446:	4f 3f       	cpi	r20, 0xFF	; 255
    2448:	bf ef       	ldi	r27, 0xFF	; 255
    244a:	5b 07       	cpc	r21, r27
    244c:	6b 07       	cpc	r22, r27
    244e:	7b 07       	cpc	r23, r27
    2450:	39 f1       	breq	.+78     	; 0x24a0 <xTaskCheckForTimeOut+0xac>
    2452:	ec 01       	movw	r28, r24
    2454:	b8 81       	ld	r27, Y
    2456:	a0 91 9a 12 	lds	r26, 0x129A	; 0x80129a <xNumOfOverflows>
    245a:	ba 17       	cp	r27, r26
    245c:	59 f0       	breq	.+22     	; 0x2474 <xTaskCheckForTimeOut+0x80>
    245e:	c0 16       	cp	r12, r16
    2460:	d1 06       	cpc	r13, r17
    2462:	e2 06       	cpc	r14, r18
    2464:	f3 06       	cpc	r15, r19
    2466:	30 f0       	brcs	.+12     	; 0x2474 <xTaskCheckForTimeOut+0x80>
    2468:	10 82       	st	Z, r1
    246a:	11 82       	std	Z+1, r1	; 0x01
    246c:	12 82       	std	Z+2, r1	; 0x02
    246e:	13 82       	std	Z+3, r1	; 0x03
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	17 c0       	rjmp	.+46     	; 0x24a2 <xTaskCheckForTimeOut+0xae>
    2474:	84 16       	cp	r8, r20
    2476:	95 06       	cpc	r9, r21
    2478:	a6 06       	cpc	r10, r22
    247a:	b7 06       	cpc	r11, r23
    247c:	58 f4       	brcc	.+22     	; 0x2494 <xTaskCheckForTimeOut+0xa0>
    247e:	48 19       	sub	r20, r8
    2480:	59 09       	sbc	r21, r9
    2482:	6a 09       	sbc	r22, r10
    2484:	7b 09       	sbc	r23, r11
    2486:	40 83       	st	Z, r20
    2488:	51 83       	std	Z+1, r21	; 0x01
    248a:	62 83       	std	Z+2, r22	; 0x02
    248c:	73 83       	std	Z+3, r23	; 0x03
    248e:	a1 df       	rcall	.-190    	; 0x23d2 <vTaskInternalSetTimeOutState>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	07 c0       	rjmp	.+14     	; 0x24a2 <xTaskCheckForTimeOut+0xae>
    2494:	10 82       	st	Z, r1
    2496:	11 82       	std	Z+1, r1	; 0x01
    2498:	12 82       	std	Z+2, r1	; 0x02
    249a:	13 82       	std	Z+3, r1	; 0x03
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	01 c0       	rjmp	.+2      	; 0x24a2 <xTaskCheckForTimeOut+0xae>
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0f 90       	pop	r0
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	ff 90       	pop	r15
    24b0:	ef 90       	pop	r14
    24b2:	df 90       	pop	r13
    24b4:	cf 90       	pop	r12
    24b6:	bf 90       	pop	r11
    24b8:	af 90       	pop	r10
    24ba:	9f 90       	pop	r9
    24bc:	8f 90       	pop	r8
    24be:	08 95       	ret

000024c0 <vTaskMissedYield>:
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    24c6:	08 95       	ret

000024c8 <xTaskGetCurrentTaskHandle>:
    24c8:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    24cc:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    24d0:	08 95       	ret

000024d2 <xTaskGetSchedulerState>:
    24d2:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <xSchedulerRunning>
    24d6:	88 23       	and	r24, r24
    24d8:	31 f0       	breq	.+12     	; 0x24e6 <xTaskGetSchedulerState+0x14>
    24da:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    24de:	81 11       	cpse	r24, r1
    24e0:	04 c0       	rjmp	.+8      	; 0x24ea <xTaskGetSchedulerState+0x18>
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	08 95       	ret
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	08 95       	ret
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	08 95       	ret

000024ee <xTaskPriorityInherit>:
    24ee:	0f 93       	push	r16
    24f0:	1f 93       	push	r17
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	fc 01       	movw	r30, r24
    24f8:	89 2b       	or	r24, r25
    24fa:	09 f4       	brne	.+2      	; 0x24fe <xTaskPriorityInherit+0x10>
    24fc:	77 c0       	rjmp	.+238    	; 0x25ec <xTaskPriorityInherit+0xfe>
    24fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2500:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    2504:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2508:	5a 96       	adiw	r26, 0x1a	; 26
    250a:	9c 91       	ld	r25, X
    250c:	89 17       	cp	r24, r25
    250e:	08 f0       	brcs	.+2      	; 0x2512 <xTaskPriorityInherit+0x24>
    2510:	63 c0       	rjmp	.+198    	; 0x25d8 <xTaskPriorityInherit+0xea>
    2512:	46 85       	ldd	r20, Z+14	; 0x0e
    2514:	57 85       	ldd	r21, Z+15	; 0x0f
    2516:	60 89       	ldd	r22, Z+16	; 0x10
    2518:	71 89       	ldd	r23, Z+17	; 0x11
    251a:	77 23       	and	r23, r23
    251c:	94 f0       	brlt	.+36     	; 0x2542 <xTaskPriorityInherit+0x54>
    251e:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    2522:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2526:	5a 96       	adiw	r26, 0x1a	; 26
    2528:	9c 91       	ld	r25, X
    252a:	4a e0       	ldi	r20, 0x0A	; 10
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	49 1b       	sub	r20, r25
    2534:	51 09       	sbc	r21, r1
    2536:	61 09       	sbc	r22, r1
    2538:	71 09       	sbc	r23, r1
    253a:	46 87       	std	Z+14, r20	; 0x0e
    253c:	57 87       	std	Z+15, r21	; 0x0f
    253e:	60 8b       	std	Z+16, r22	; 0x10
    2540:	71 8b       	std	Z+17, r23	; 0x11
    2542:	24 85       	ldd	r18, Z+12	; 0x0c
    2544:	35 85       	ldd	r19, Z+13	; 0x0d
    2546:	4b e0       	ldi	r20, 0x0B	; 11
    2548:	84 9f       	mul	r24, r20
    254a:	c0 01       	movw	r24, r0
    254c:	11 24       	eor	r1, r1
    254e:	8d 51       	subi	r24, 0x1D	; 29
    2550:	9d 4e       	sbci	r25, 0xED	; 237
    2552:	28 17       	cp	r18, r24
    2554:	39 07       	cpc	r19, r25
    2556:	b9 f5       	brne	.+110    	; 0x25c6 <xTaskPriorityInherit+0xd8>
    2558:	ef 01       	movw	r28, r30
    255a:	8f 01       	movw	r16, r30
    255c:	0e 5f       	subi	r16, 0xFE	; 254
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
    2560:	c8 01       	movw	r24, r16
    2562:	0e 94 43 03 	call	0x686	; 0x686 <uxListRemove>
    2566:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    256a:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    256e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2570:	ea 8f       	std	Y+26, r30	; 0x1a
    2572:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    2576:	8e 17       	cp	r24, r30
    2578:	10 f4       	brcc	.+4      	; 0x257e <xTaskPriorityInherit+0x90>
    257a:	e0 93 a1 12 	sts	0x12A1, r30	; 0x8012a1 <uxTopReadyPriority>
    257e:	8b e0       	ldi	r24, 0x0B	; 11
    2580:	8e 9f       	mul	r24, r30
    2582:	f0 01       	movw	r30, r0
    2584:	11 24       	eor	r1, r1
    2586:	ed 51       	subi	r30, 0x1D	; 29
    2588:	fd 4e       	sbci	r31, 0xED	; 237
    258a:	01 80       	ldd	r0, Z+1	; 0x01
    258c:	f2 81       	ldd	r31, Z+2	; 0x02
    258e:	e0 2d       	mov	r30, r0
    2590:	ff 83       	std	Y+7, r31	; 0x07
    2592:	ee 83       	std	Y+6, r30	; 0x06
    2594:	26 81       	ldd	r18, Z+6	; 0x06
    2596:	37 81       	ldd	r19, Z+7	; 0x07
    2598:	39 87       	std	Y+9, r19	; 0x09
    259a:	28 87       	std	Y+8, r18	; 0x08
    259c:	a6 81       	ldd	r26, Z+6	; 0x06
    259e:	b7 81       	ldd	r27, Z+7	; 0x07
    25a0:	15 96       	adiw	r26, 0x05	; 5
    25a2:	1c 93       	st	X, r17
    25a4:	0e 93       	st	-X, r16
    25a6:	14 97       	sbiw	r26, 0x04	; 4
    25a8:	17 83       	std	Z+7, r17	; 0x07
    25aa:	06 83       	std	Z+6, r16	; 0x06
    25ac:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25ae:	8e 9f       	mul	r24, r30
    25b0:	f0 01       	movw	r30, r0
    25b2:	11 24       	eor	r1, r1
    25b4:	ed 51       	subi	r30, 0x1D	; 29
    25b6:	fd 4e       	sbci	r31, 0xED	; 237
    25b8:	fd 87       	std	Y+13, r31	; 0x0d
    25ba:	ec 87       	std	Y+12, r30	; 0x0c
    25bc:	80 81       	ld	r24, Z
    25be:	8f 5f       	subi	r24, 0xFF	; 255
    25c0:	80 83       	st	Z, r24
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	16 c0       	rjmp	.+44     	; 0x25f2 <xTaskPriorityInherit+0x104>
    25c6:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    25ca:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    25ce:	5a 96       	adiw	r26, 0x1a	; 26
    25d0:	8c 91       	ld	r24, X
    25d2:	82 8f       	std	Z+26, r24	; 0x1a
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	0d c0       	rjmp	.+26     	; 0x25f2 <xTaskPriorityInherit+0x104>
    25d8:	95 a5       	ldd	r25, Z+45	; 0x2d
    25da:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    25de:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    25e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    25e4:	98 17       	cp	r25, r24
    25e6:	20 f0       	brcs	.+8      	; 0x25f0 <xTaskPriorityInherit+0x102>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	03 c0       	rjmp	.+6      	; 0x25f2 <xTaskPriorityInherit+0x104>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	01 c0       	rjmp	.+2      	; 0x25f2 <xTaskPriorityInherit+0x104>
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	08 95       	ret

000025fc <xTaskPriorityDisinherit>:
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	fc 01       	movw	r30, r24
    2606:	89 2b       	or	r24, r25
    2608:	09 f4       	brne	.+2      	; 0x260c <xTaskPriorityDisinherit+0x10>
    260a:	49 c0       	rjmp	.+146    	; 0x269e <xTaskPriorityDisinherit+0xa2>
    260c:	86 a5       	ldd	r24, Z+46	; 0x2e
    260e:	81 50       	subi	r24, 0x01	; 1
    2610:	86 a7       	std	Z+46, r24	; 0x2e
    2612:	22 8d       	ldd	r18, Z+26	; 0x1a
    2614:	95 a5       	ldd	r25, Z+45	; 0x2d
    2616:	29 17       	cp	r18, r25
    2618:	09 f4       	brne	.+2      	; 0x261c <xTaskPriorityDisinherit+0x20>
    261a:	43 c0       	rjmp	.+134    	; 0x26a2 <xTaskPriorityDisinherit+0xa6>
    261c:	81 11       	cpse	r24, r1
    261e:	43 c0       	rjmp	.+134    	; 0x26a6 <xTaskPriorityDisinherit+0xaa>
    2620:	ef 01       	movw	r28, r30
    2622:	8f 01       	movw	r16, r30
    2624:	0e 5f       	subi	r16, 0xFE	; 254
    2626:	1f 4f       	sbci	r17, 0xFF	; 255
    2628:	c8 01       	movw	r24, r16
    262a:	0e 94 43 03 	call	0x686	; 0x686 <uxListRemove>
    262e:	ed a5       	ldd	r30, Y+45	; 0x2d
    2630:	ea 8f       	std	Y+26, r30	; 0x1a
    2632:	8a e0       	ldi	r24, 0x0A	; 10
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	a0 e0       	ldi	r26, 0x00	; 0
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	8e 1b       	sub	r24, r30
    263c:	91 09       	sbc	r25, r1
    263e:	a1 09       	sbc	r26, r1
    2640:	b1 09       	sbc	r27, r1
    2642:	8e 87       	std	Y+14, r24	; 0x0e
    2644:	9f 87       	std	Y+15, r25	; 0x0f
    2646:	a8 8b       	std	Y+16, r26	; 0x10
    2648:	b9 8b       	std	Y+17, r27	; 0x11
    264a:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    264e:	8e 17       	cp	r24, r30
    2650:	10 f4       	brcc	.+4      	; 0x2656 <xTaskPriorityDisinherit+0x5a>
    2652:	e0 93 a1 12 	sts	0x12A1, r30	; 0x8012a1 <uxTopReadyPriority>
    2656:	8b e0       	ldi	r24, 0x0B	; 11
    2658:	8e 9f       	mul	r24, r30
    265a:	f0 01       	movw	r30, r0
    265c:	11 24       	eor	r1, r1
    265e:	ed 51       	subi	r30, 0x1D	; 29
    2660:	fd 4e       	sbci	r31, 0xED	; 237
    2662:	01 80       	ldd	r0, Z+1	; 0x01
    2664:	f2 81       	ldd	r31, Z+2	; 0x02
    2666:	e0 2d       	mov	r30, r0
    2668:	ff 83       	std	Y+7, r31	; 0x07
    266a:	ee 83       	std	Y+6, r30	; 0x06
    266c:	26 81       	ldd	r18, Z+6	; 0x06
    266e:	37 81       	ldd	r19, Z+7	; 0x07
    2670:	39 87       	std	Y+9, r19	; 0x09
    2672:	28 87       	std	Y+8, r18	; 0x08
    2674:	a6 81       	ldd	r26, Z+6	; 0x06
    2676:	b7 81       	ldd	r27, Z+7	; 0x07
    2678:	15 96       	adiw	r26, 0x05	; 5
    267a:	1c 93       	st	X, r17
    267c:	0e 93       	st	-X, r16
    267e:	14 97       	sbiw	r26, 0x04	; 4
    2680:	17 83       	std	Z+7, r17	; 0x07
    2682:	06 83       	std	Z+6, r16	; 0x06
    2684:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2686:	8e 9f       	mul	r24, r30
    2688:	f0 01       	movw	r30, r0
    268a:	11 24       	eor	r1, r1
    268c:	ed 51       	subi	r30, 0x1D	; 29
    268e:	fd 4e       	sbci	r31, 0xED	; 237
    2690:	fd 87       	std	Y+13, r31	; 0x0d
    2692:	ec 87       	std	Y+12, r30	; 0x0c
    2694:	80 81       	ld	r24, Z
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	80 83       	st	Z, r24
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	05 c0       	rjmp	.+10     	; 0x26a8 <xTaskPriorityDisinherit+0xac>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <xTaskPriorityDisinherit+0xac>
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	01 c0       	rjmp	.+2      	; 0x26a8 <xTaskPriorityDisinherit+0xac>
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	08 95       	ret

000026b2 <vTaskPriorityDisinheritAfterTimeout>:
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	fc 01       	movw	r30, r24
    26bc:	89 2b       	or	r24, r25
    26be:	09 f4       	brne	.+2      	; 0x26c2 <vTaskPriorityDisinheritAfterTimeout+0x10>
    26c0:	5a c0       	rjmp	.+180    	; 0x2776 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    26c2:	85 a5       	ldd	r24, Z+45	; 0x2d
    26c4:	86 17       	cp	r24, r22
    26c6:	08 f4       	brcc	.+2      	; 0x26ca <vTaskPriorityDisinheritAfterTimeout+0x18>
    26c8:	86 2f       	mov	r24, r22
    26ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    26cc:	89 17       	cp	r24, r25
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <vTaskPriorityDisinheritAfterTimeout+0x20>
    26d0:	52 c0       	rjmp	.+164    	; 0x2776 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    26d2:	26 a5       	ldd	r18, Z+46	; 0x2e
    26d4:	21 30       	cpi	r18, 0x01	; 1
    26d6:	09 f0       	breq	.+2      	; 0x26da <vTaskPriorityDisinheritAfterTimeout+0x28>
    26d8:	4e c0       	rjmp	.+156    	; 0x2776 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    26da:	82 8f       	std	Z+26, r24	; 0x1a
    26dc:	46 85       	ldd	r20, Z+14	; 0x0e
    26de:	57 85       	ldd	r21, Z+15	; 0x0f
    26e0:	60 89       	ldd	r22, Z+16	; 0x10
    26e2:	71 89       	ldd	r23, Z+17	; 0x11
    26e4:	77 23       	and	r23, r23
    26e6:	64 f0       	brlt	.+24     	; 0x2700 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    26e8:	4a e0       	ldi	r20, 0x0A	; 10
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	70 e0       	ldi	r23, 0x00	; 0
    26f0:	48 1b       	sub	r20, r24
    26f2:	51 09       	sbc	r21, r1
    26f4:	61 09       	sbc	r22, r1
    26f6:	71 09       	sbc	r23, r1
    26f8:	46 87       	std	Z+14, r20	; 0x0e
    26fa:	57 87       	std	Z+15, r21	; 0x0f
    26fc:	60 8b       	std	Z+16, r22	; 0x10
    26fe:	71 8b       	std	Z+17, r23	; 0x11
    2700:	24 85       	ldd	r18, Z+12	; 0x0c
    2702:	35 85       	ldd	r19, Z+13	; 0x0d
    2704:	4b e0       	ldi	r20, 0x0B	; 11
    2706:	94 9f       	mul	r25, r20
    2708:	c0 01       	movw	r24, r0
    270a:	11 24       	eor	r1, r1
    270c:	8d 51       	subi	r24, 0x1D	; 29
    270e:	9d 4e       	sbci	r25, 0xED	; 237
    2710:	28 17       	cp	r18, r24
    2712:	39 07       	cpc	r19, r25
    2714:	81 f5       	brne	.+96     	; 0x2776 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2716:	ef 01       	movw	r28, r30
    2718:	8f 01       	movw	r16, r30
    271a:	0e 5f       	subi	r16, 0xFE	; 254
    271c:	1f 4f       	sbci	r17, 0xFF	; 255
    271e:	c8 01       	movw	r24, r16
    2720:	0e 94 43 03 	call	0x686	; 0x686 <uxListRemove>
    2724:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2726:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    272a:	8e 17       	cp	r24, r30
    272c:	10 f4       	brcc	.+4      	; 0x2732 <vTaskPriorityDisinheritAfterTimeout+0x80>
    272e:	e0 93 a1 12 	sts	0x12A1, r30	; 0x8012a1 <uxTopReadyPriority>
    2732:	8b e0       	ldi	r24, 0x0B	; 11
    2734:	8e 9f       	mul	r24, r30
    2736:	f0 01       	movw	r30, r0
    2738:	11 24       	eor	r1, r1
    273a:	ed 51       	subi	r30, 0x1D	; 29
    273c:	fd 4e       	sbci	r31, 0xED	; 237
    273e:	01 80       	ldd	r0, Z+1	; 0x01
    2740:	f2 81       	ldd	r31, Z+2	; 0x02
    2742:	e0 2d       	mov	r30, r0
    2744:	ff 83       	std	Y+7, r31	; 0x07
    2746:	ee 83       	std	Y+6, r30	; 0x06
    2748:	26 81       	ldd	r18, Z+6	; 0x06
    274a:	37 81       	ldd	r19, Z+7	; 0x07
    274c:	39 87       	std	Y+9, r19	; 0x09
    274e:	28 87       	std	Y+8, r18	; 0x08
    2750:	a6 81       	ldd	r26, Z+6	; 0x06
    2752:	b7 81       	ldd	r27, Z+7	; 0x07
    2754:	15 96       	adiw	r26, 0x05	; 5
    2756:	1c 93       	st	X, r17
    2758:	0e 93       	st	-X, r16
    275a:	14 97       	sbiw	r26, 0x04	; 4
    275c:	17 83       	std	Z+7, r17	; 0x07
    275e:	06 83       	std	Z+6, r16	; 0x06
    2760:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2762:	8e 9f       	mul	r24, r30
    2764:	f0 01       	movw	r30, r0
    2766:	11 24       	eor	r1, r1
    2768:	ed 51       	subi	r30, 0x1D	; 29
    276a:	fd 4e       	sbci	r31, 0xED	; 237
    276c:	fd 87       	std	Y+13, r31	; 0x0d
    276e:	ec 87       	std	Y+12, r30	; 0x0c
    2770:	80 81       	ld	r24, Z
    2772:	8f 5f       	subi	r24, 0xFF	; 255
    2774:	80 83       	st	Z, r24
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	08 95       	ret

00002780 <pvTaskIncrementMutexHeldCount>:
    2780:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    2784:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2788:	89 2b       	or	r24, r25
    278a:	39 f0       	breq	.+14     	; 0x279a <pvTaskIncrementMutexHeldCount+0x1a>
    278c:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    2790:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2794:	86 a5       	ldd	r24, Z+46	; 0x2e
    2796:	8f 5f       	subi	r24, 0xFF	; 255
    2798:	86 a7       	std	Z+46, r24	; 0x2e
    279a:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    279e:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    27a2:	08 95       	ret

000027a4 <xTaskGenericNotifyWait>:
    27a4:	4f 92       	push	r4
    27a6:	5f 92       	push	r5
    27a8:	6f 92       	push	r6
    27aa:	7f 92       	push	r7
    27ac:	af 92       	push	r10
    27ae:	bf 92       	push	r11
    27b0:	cf 92       	push	r12
    27b2:	df 92       	push	r13
    27b4:	ef 92       	push	r14
    27b6:	ff 92       	push	r15
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	28 01       	movw	r4, r16
    27c2:	39 01       	movw	r6, r18
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	0f 92       	push	r0
    27ca:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    27ce:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    27d2:	c8 2f       	mov	r28, r24
    27d4:	d0 e0       	ldi	r29, 0x00	; 0
    27d6:	ec 0f       	add	r30, r28
    27d8:	fd 1f       	adc	r31, r29
    27da:	83 a9       	ldd	r24, Z+51	; 0x33
    27dc:	82 30       	cpi	r24, 0x02	; 2
    27de:	71 f1       	breq	.+92     	; 0x283c <xTaskGenericNotifyWait+0x98>
    27e0:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    27e4:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    27e8:	ce 01       	movw	r24, r28
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	88 0f       	add	r24, r24
    27f0:	99 1f       	adc	r25, r25
    27f2:	e8 0f       	add	r30, r24
    27f4:	f9 1f       	adc	r31, r25
    27f6:	87 a5       	ldd	r24, Z+47	; 0x2f
    27f8:	90 a9       	ldd	r25, Z+48	; 0x30
    27fa:	a1 a9       	ldd	r26, Z+49	; 0x31
    27fc:	b2 a9       	ldd	r27, Z+50	; 0x32
    27fe:	40 95       	com	r20
    2800:	50 95       	com	r21
    2802:	60 95       	com	r22
    2804:	70 95       	com	r23
    2806:	48 23       	and	r20, r24
    2808:	59 23       	and	r21, r25
    280a:	6a 23       	and	r22, r26
    280c:	7b 23       	and	r23, r27
    280e:	47 a7       	std	Z+47, r20	; 0x2f
    2810:	50 ab       	std	Z+48, r21	; 0x30
    2812:	61 ab       	std	Z+49, r22	; 0x31
    2814:	72 ab       	std	Z+50, r23	; 0x32
    2816:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    281a:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    281e:	ec 0f       	add	r30, r28
    2820:	fd 1f       	adc	r31, r29
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	83 ab       	std	Z+51, r24	; 0x33
    2826:	a1 14       	cp	r10, r1
    2828:	b1 04       	cpc	r11, r1
    282a:	c1 04       	cpc	r12, r1
    282c:	d1 04       	cpc	r13, r1
    282e:	31 f0       	breq	.+12     	; 0x283c <xTaskGenericNotifyWait+0x98>
    2830:	41 e0       	ldi	r20, 0x01	; 1
    2832:	c6 01       	movw	r24, r12
    2834:	b5 01       	movw	r22, r10
    2836:	88 d8       	rcall	.-3824   	; 0x1948 <prvAddCurrentTaskToDelayedList>
    2838:	0e 94 bf 03 	call	0x77e	; 0x77e <vPortYield>
    283c:	0f 90       	pop	r0
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	0f 92       	push	r0
    2846:	e1 14       	cp	r14, r1
    2848:	f1 04       	cpc	r15, r1
    284a:	a1 f0       	breq	.+40     	; 0x2874 <xTaskGenericNotifyWait+0xd0>
    284c:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    2850:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2854:	ce 01       	movw	r24, r28
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	88 0f       	add	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	e8 0f       	add	r30, r24
    2860:	f9 1f       	adc	r31, r25
    2862:	87 a5       	ldd	r24, Z+47	; 0x2f
    2864:	90 a9       	ldd	r25, Z+48	; 0x30
    2866:	a1 a9       	ldd	r26, Z+49	; 0x31
    2868:	b2 a9       	ldd	r27, Z+50	; 0x32
    286a:	f7 01       	movw	r30, r14
    286c:	80 83       	st	Z, r24
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	a2 83       	std	Z+2, r26	; 0x02
    2872:	b3 83       	std	Z+3, r27	; 0x03
    2874:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    2878:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    287c:	ec 0f       	add	r30, r28
    287e:	fd 1f       	adc	r31, r29
    2880:	83 a9       	ldd	r24, Z+51	; 0x33
    2882:	82 30       	cpi	r24, 0x02	; 2
    2884:	e9 f4       	brne	.+58     	; 0x28c0 <xTaskGenericNotifyWait+0x11c>
    2886:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    288a:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    288e:	ce 01       	movw	r24, r28
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	88 0f       	add	r24, r24
    2896:	99 1f       	adc	r25, r25
    2898:	e8 0f       	add	r30, r24
    289a:	f9 1f       	adc	r31, r25
    289c:	87 a5       	ldd	r24, Z+47	; 0x2f
    289e:	90 a9       	ldd	r25, Z+48	; 0x30
    28a0:	a1 a9       	ldd	r26, Z+49	; 0x31
    28a2:	b2 a9       	ldd	r27, Z+50	; 0x32
    28a4:	40 94       	com	r4
    28a6:	50 94       	com	r5
    28a8:	60 94       	com	r6
    28aa:	70 94       	com	r7
    28ac:	48 22       	and	r4, r24
    28ae:	59 22       	and	r5, r25
    28b0:	6a 22       	and	r6, r26
    28b2:	7b 22       	and	r7, r27
    28b4:	47 a6       	std	Z+47, r4	; 0x2f
    28b6:	50 aa       	std	Z+48, r5	; 0x30
    28b8:	61 aa       	std	Z+49, r6	; 0x31
    28ba:	72 aa       	std	Z+50, r7	; 0x32
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	01 c0       	rjmp	.+2      	; 0x28c2 <xTaskGenericNotifyWait+0x11e>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	20 91 51 13 	lds	r18, 0x1351	; 0x801351 <pxCurrentTCB>
    28c6:	30 91 52 13 	lds	r19, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    28ca:	c2 0f       	add	r28, r18
    28cc:	d3 1f       	adc	r29, r19
    28ce:	1b aa       	std	Y+51, r1	; 0x33
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	ff 90       	pop	r15
    28de:	ef 90       	pop	r14
    28e0:	df 90       	pop	r13
    28e2:	cf 90       	pop	r12
    28e4:	bf 90       	pop	r11
    28e6:	af 90       	pop	r10
    28e8:	7f 90       	pop	r7
    28ea:	6f 90       	pop	r6
    28ec:	5f 90       	pop	r5
    28ee:	4f 90       	pop	r4
    28f0:	08 95       	ret

000028f2 <xTaskGenericNotify>:
    28f2:	8f 92       	push	r8
    28f4:	9f 92       	push	r9
    28f6:	af 92       	push	r10
    28f8:	bf 92       	push	r11
    28fa:	ef 92       	push	r14
    28fc:	ff 92       	push	r15
    28fe:	0f 93       	push	r16
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	dc 01       	movw	r26, r24
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	0f 92       	push	r0
    290c:	e1 14       	cp	r14, r1
    290e:	f1 04       	cpc	r15, r1
    2910:	89 f0       	breq	.+34     	; 0x2934 <xTaskGenericNotify+0x42>
    2912:	e6 2f       	mov	r30, r22
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	ee 0f       	add	r30, r30
    2918:	ff 1f       	adc	r31, r31
    291a:	ee 0f       	add	r30, r30
    291c:	ff 1f       	adc	r31, r31
    291e:	e8 0f       	add	r30, r24
    2920:	f9 1f       	adc	r31, r25
    2922:	87 a4       	ldd	r8, Z+47	; 0x2f
    2924:	90 a8       	ldd	r9, Z+48	; 0x30
    2926:	a1 a8       	ldd	r10, Z+49	; 0x31
    2928:	b2 a8       	ldd	r11, Z+50	; 0x32
    292a:	f7 01       	movw	r30, r14
    292c:	80 82       	st	Z, r8
    292e:	91 82       	std	Z+1, r9	; 0x01
    2930:	a2 82       	std	Z+2, r10	; 0x02
    2932:	b3 82       	std	Z+3, r11	; 0x03
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	fd 01       	movw	r30, r26
    2938:	e6 0f       	add	r30, r22
    293a:	f7 1f       	adc	r31, r23
    293c:	83 a9       	ldd	r24, Z+51	; 0x33
    293e:	92 e0       	ldi	r25, 0x02	; 2
    2940:	93 ab       	std	Z+51, r25	; 0x33
    2942:	02 30       	cpi	r16, 0x02	; 2
    2944:	01 f1       	breq	.+64     	; 0x2986 <xTaskGenericNotify+0x94>
    2946:	18 f4       	brcc	.+6      	; 0x294e <xTaskGenericNotify+0x5c>
    2948:	01 30       	cpi	r16, 0x01	; 1
    294a:	31 f0       	breq	.+12     	; 0x2958 <xTaskGenericNotify+0x66>
    294c:	4d c0       	rjmp	.+154    	; 0x29e8 <xTaskGenericNotify+0xf6>
    294e:	03 30       	cpi	r16, 0x03	; 3
    2950:	79 f1       	breq	.+94     	; 0x29b0 <xTaskGenericNotify+0xbe>
    2952:	04 30       	cpi	r16, 0x04	; 4
    2954:	d1 f1       	breq	.+116    	; 0x29ca <xTaskGenericNotify+0xd8>
    2956:	48 c0       	rjmp	.+144    	; 0x29e8 <xTaskGenericNotify+0xf6>
    2958:	66 0f       	add	r22, r22
    295a:	77 1f       	adc	r23, r23
    295c:	66 0f       	add	r22, r22
    295e:	77 1f       	adc	r23, r23
    2960:	fd 01       	movw	r30, r26
    2962:	e6 0f       	add	r30, r22
    2964:	f7 1f       	adc	r31, r23
    2966:	87 a4       	ldd	r8, Z+47	; 0x2f
    2968:	90 a8       	ldd	r9, Z+48	; 0x30
    296a:	a1 a8       	ldd	r10, Z+49	; 0x31
    296c:	b2 a8       	ldd	r11, Z+50	; 0x32
    296e:	ba 01       	movw	r22, r20
    2970:	a9 01       	movw	r20, r18
    2972:	48 29       	or	r20, r8
    2974:	59 29       	or	r21, r9
    2976:	6a 29       	or	r22, r10
    2978:	7b 29       	or	r23, r11
    297a:	47 a7       	std	Z+47, r20	; 0x2f
    297c:	50 ab       	std	Z+48, r21	; 0x30
    297e:	61 ab       	std	Z+49, r22	; 0x31
    2980:	72 ab       	std	Z+50, r23	; 0x32
    2982:	01 e0       	ldi	r16, 0x01	; 1
    2984:	34 c0       	rjmp	.+104    	; 0x29ee <xTaskGenericNotify+0xfc>
    2986:	66 0f       	add	r22, r22
    2988:	77 1f       	adc	r23, r23
    298a:	66 0f       	add	r22, r22
    298c:	77 1f       	adc	r23, r23
    298e:	fd 01       	movw	r30, r26
    2990:	e6 0f       	add	r30, r22
    2992:	f7 1f       	adc	r31, r23
    2994:	47 a5       	ldd	r20, Z+47	; 0x2f
    2996:	50 a9       	ldd	r21, Z+48	; 0x30
    2998:	61 a9       	ldd	r22, Z+49	; 0x31
    299a:	72 a9       	ldd	r23, Z+50	; 0x32
    299c:	4f 5f       	subi	r20, 0xFF	; 255
    299e:	5f 4f       	sbci	r21, 0xFF	; 255
    29a0:	6f 4f       	sbci	r22, 0xFF	; 255
    29a2:	7f 4f       	sbci	r23, 0xFF	; 255
    29a4:	47 a7       	std	Z+47, r20	; 0x2f
    29a6:	50 ab       	std	Z+48, r21	; 0x30
    29a8:	61 ab       	std	Z+49, r22	; 0x31
    29aa:	72 ab       	std	Z+50, r23	; 0x32
    29ac:	01 e0       	ldi	r16, 0x01	; 1
    29ae:	1f c0       	rjmp	.+62     	; 0x29ee <xTaskGenericNotify+0xfc>
    29b0:	66 0f       	add	r22, r22
    29b2:	77 1f       	adc	r23, r23
    29b4:	66 0f       	add	r22, r22
    29b6:	77 1f       	adc	r23, r23
    29b8:	fd 01       	movw	r30, r26
    29ba:	e6 0f       	add	r30, r22
    29bc:	f7 1f       	adc	r31, r23
    29be:	27 a7       	std	Z+47, r18	; 0x2f
    29c0:	30 ab       	std	Z+48, r19	; 0x30
    29c2:	41 ab       	std	Z+49, r20	; 0x31
    29c4:	52 ab       	std	Z+50, r21	; 0x32
    29c6:	01 e0       	ldi	r16, 0x01	; 1
    29c8:	12 c0       	rjmp	.+36     	; 0x29ee <xTaskGenericNotify+0xfc>
    29ca:	82 30       	cpi	r24, 0x02	; 2
    29cc:	79 f0       	breq	.+30     	; 0x29ec <xTaskGenericNotify+0xfa>
    29ce:	66 0f       	add	r22, r22
    29d0:	77 1f       	adc	r23, r23
    29d2:	66 0f       	add	r22, r22
    29d4:	77 1f       	adc	r23, r23
    29d6:	fd 01       	movw	r30, r26
    29d8:	e6 0f       	add	r30, r22
    29da:	f7 1f       	adc	r31, r23
    29dc:	27 a7       	std	Z+47, r18	; 0x2f
    29de:	30 ab       	std	Z+48, r19	; 0x30
    29e0:	41 ab       	std	Z+49, r20	; 0x31
    29e2:	52 ab       	std	Z+50, r21	; 0x32
    29e4:	01 e0       	ldi	r16, 0x01	; 1
    29e6:	03 c0       	rjmp	.+6      	; 0x29ee <xTaskGenericNotify+0xfc>
    29e8:	01 e0       	ldi	r16, 0x01	; 1
    29ea:	01 c0       	rjmp	.+2      	; 0x29ee <xTaskGenericNotify+0xfc>
    29ec:	00 e0       	ldi	r16, 0x00	; 0
    29ee:	81 30       	cpi	r24, 0x01	; 1
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <xTaskGenericNotify+0x102>
    29f2:	69 c0       	rjmp	.+210    	; 0x2ac6 <xTaskGenericNotify+0x1d4>
    29f4:	1c 96       	adiw	r26, 0x0c	; 12
    29f6:	ed 91       	ld	r30, X+
    29f8:	fc 91       	ld	r31, X
    29fa:	1d 97       	sbiw	r26, 0x0d	; 13
    29fc:	16 96       	adiw	r26, 0x06	; 6
    29fe:	cd 91       	ld	r28, X+
    2a00:	dc 91       	ld	r29, X
    2a02:	17 97       	sbiw	r26, 0x07	; 7
    2a04:	18 96       	adiw	r26, 0x08	; 8
    2a06:	8d 91       	ld	r24, X+
    2a08:	9c 91       	ld	r25, X
    2a0a:	19 97       	sbiw	r26, 0x09	; 9
    2a0c:	9f 83       	std	Y+7, r25	; 0x07
    2a0e:	8e 83       	std	Y+6, r24	; 0x06
    2a10:	18 96       	adiw	r26, 0x08	; 8
    2a12:	cd 91       	ld	r28, X+
    2a14:	dc 91       	ld	r29, X
    2a16:	19 97       	sbiw	r26, 0x09	; 9
    2a18:	16 96       	adiw	r26, 0x06	; 6
    2a1a:	8d 91       	ld	r24, X+
    2a1c:	9c 91       	ld	r25, X
    2a1e:	17 97       	sbiw	r26, 0x07	; 7
    2a20:	9d 83       	std	Y+5, r25	; 0x05
    2a22:	8c 83       	std	Y+4, r24	; 0x04
    2a24:	81 81       	ldd	r24, Z+1	; 0x01
    2a26:	92 81       	ldd	r25, Z+2	; 0x02
    2a28:	9d 01       	movw	r18, r26
    2a2a:	2e 5f       	subi	r18, 0xFE	; 254
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	82 17       	cp	r24, r18
    2a30:	93 07       	cpc	r25, r19
    2a32:	31 f4       	brne	.+12     	; 0x2a40 <xTaskGenericNotify+0x14e>
    2a34:	18 96       	adiw	r26, 0x08	; 8
    2a36:	8d 91       	ld	r24, X+
    2a38:	9c 91       	ld	r25, X
    2a3a:	19 97       	sbiw	r26, 0x09	; 9
    2a3c:	92 83       	std	Z+2, r25	; 0x02
    2a3e:	81 83       	std	Z+1, r24	; 0x01
    2a40:	1d 96       	adiw	r26, 0x0d	; 13
    2a42:	1c 92       	st	X, r1
    2a44:	1e 92       	st	-X, r1
    2a46:	1c 97       	sbiw	r26, 0x0c	; 12
    2a48:	80 81       	ld	r24, Z
    2a4a:	81 50       	subi	r24, 0x01	; 1
    2a4c:	80 83       	st	Z, r24
    2a4e:	5a 96       	adiw	r26, 0x1a	; 26
    2a50:	ec 91       	ld	r30, X
    2a52:	5a 97       	sbiw	r26, 0x1a	; 26
    2a54:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    2a58:	8e 17       	cp	r24, r30
    2a5a:	10 f4       	brcc	.+4      	; 0x2a60 <xTaskGenericNotify+0x16e>
    2a5c:	e0 93 a1 12 	sts	0x12A1, r30	; 0x8012a1 <uxTopReadyPriority>
    2a60:	8b e0       	ldi	r24, 0x0B	; 11
    2a62:	8e 9f       	mul	r24, r30
    2a64:	f0 01       	movw	r30, r0
    2a66:	11 24       	eor	r1, r1
    2a68:	ed 51       	subi	r30, 0x1D	; 29
    2a6a:	fd 4e       	sbci	r31, 0xED	; 237
    2a6c:	01 80       	ldd	r0, Z+1	; 0x01
    2a6e:	f2 81       	ldd	r31, Z+2	; 0x02
    2a70:	e0 2d       	mov	r30, r0
    2a72:	17 96       	adiw	r26, 0x07	; 7
    2a74:	fc 93       	st	X, r31
    2a76:	ee 93       	st	-X, r30
    2a78:	16 97       	sbiw	r26, 0x06	; 6
    2a7a:	46 81       	ldd	r20, Z+6	; 0x06
    2a7c:	57 81       	ldd	r21, Z+7	; 0x07
    2a7e:	19 96       	adiw	r26, 0x09	; 9
    2a80:	5c 93       	st	X, r21
    2a82:	4e 93       	st	-X, r20
    2a84:	18 97       	sbiw	r26, 0x08	; 8
    2a86:	c6 81       	ldd	r28, Z+6	; 0x06
    2a88:	d7 81       	ldd	r29, Z+7	; 0x07
    2a8a:	3d 83       	std	Y+5, r19	; 0x05
    2a8c:	2c 83       	std	Y+4, r18	; 0x04
    2a8e:	37 83       	std	Z+7, r19	; 0x07
    2a90:	26 83       	std	Z+6, r18	; 0x06
    2a92:	5a 96       	adiw	r26, 0x1a	; 26
    2a94:	ec 91       	ld	r30, X
    2a96:	5a 97       	sbiw	r26, 0x1a	; 26
    2a98:	8e 9f       	mul	r24, r30
    2a9a:	f0 01       	movw	r30, r0
    2a9c:	11 24       	eor	r1, r1
    2a9e:	ed 51       	subi	r30, 0x1D	; 29
    2aa0:	fd 4e       	sbci	r31, 0xED	; 237
    2aa2:	1d 96       	adiw	r26, 0x0d	; 13
    2aa4:	fc 93       	st	X, r31
    2aa6:	ee 93       	st	-X, r30
    2aa8:	1c 97       	sbiw	r26, 0x0c	; 12
    2aaa:	80 81       	ld	r24, Z
    2aac:	8f 5f       	subi	r24, 0xFF	; 255
    2aae:	80 83       	st	Z, r24
    2ab0:	5a 96       	adiw	r26, 0x1a	; 26
    2ab2:	9c 91       	ld	r25, X
    2ab4:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    2ab8:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2abc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2abe:	89 17       	cp	r24, r25
    2ac0:	10 f4       	brcc	.+4      	; 0x2ac6 <xTaskGenericNotify+0x1d4>
    2ac2:	0e 94 bf 03 	call	0x77e	; 0x77e <vPortYield>
    2ac6:	0f 90       	pop	r0
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	80 2f       	mov	r24, r16
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	bf 90       	pop	r11
    2ad8:	af 90       	pop	r10
    2ada:	9f 90       	pop	r9
    2adc:	8f 90       	pop	r8
    2ade:	08 95       	ret

00002ae0 <xTaskGenericNotifyFromISR>:
    2ae0:	8f 92       	push	r8
    2ae2:	9f 92       	push	r9
    2ae4:	af 92       	push	r10
    2ae6:	bf 92       	push	r11
    2ae8:	cf 92       	push	r12
    2aea:	df 92       	push	r13
    2aec:	ef 92       	push	r14
    2aee:	ff 92       	push	r15
    2af0:	0f 93       	push	r16
    2af2:	cf 93       	push	r28
    2af4:	df 93       	push	r29
    2af6:	dc 01       	movw	r26, r24
    2af8:	e1 14       	cp	r14, r1
    2afa:	f1 04       	cpc	r15, r1
    2afc:	89 f0       	breq	.+34     	; 0x2b20 <xTaskGenericNotifyFromISR+0x40>
    2afe:	e6 2f       	mov	r30, r22
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	ee 0f       	add	r30, r30
    2b04:	ff 1f       	adc	r31, r31
    2b06:	ee 0f       	add	r30, r30
    2b08:	ff 1f       	adc	r31, r31
    2b0a:	e8 0f       	add	r30, r24
    2b0c:	f9 1f       	adc	r31, r25
    2b0e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b10:	90 a8       	ldd	r9, Z+48	; 0x30
    2b12:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b14:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b16:	f7 01       	movw	r30, r14
    2b18:	80 82       	st	Z, r8
    2b1a:	91 82       	std	Z+1, r9	; 0x01
    2b1c:	a2 82       	std	Z+2, r10	; 0x02
    2b1e:	b3 82       	std	Z+3, r11	; 0x03
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	fd 01       	movw	r30, r26
    2b24:	e6 0f       	add	r30, r22
    2b26:	f7 1f       	adc	r31, r23
    2b28:	93 a9       	ldd	r25, Z+51	; 0x33
    2b2a:	82 e0       	ldi	r24, 0x02	; 2
    2b2c:	83 ab       	std	Z+51, r24	; 0x33
    2b2e:	02 30       	cpi	r16, 0x02	; 2
    2b30:	01 f1       	breq	.+64     	; 0x2b72 <xTaskGenericNotifyFromISR+0x92>
    2b32:	18 f4       	brcc	.+6      	; 0x2b3a <xTaskGenericNotifyFromISR+0x5a>
    2b34:	01 30       	cpi	r16, 0x01	; 1
    2b36:	31 f0       	breq	.+12     	; 0x2b44 <xTaskGenericNotifyFromISR+0x64>
    2b38:	4d c0       	rjmp	.+154    	; 0x2bd4 <xTaskGenericNotifyFromISR+0xf4>
    2b3a:	03 30       	cpi	r16, 0x03	; 3
    2b3c:	79 f1       	breq	.+94     	; 0x2b9c <xTaskGenericNotifyFromISR+0xbc>
    2b3e:	04 30       	cpi	r16, 0x04	; 4
    2b40:	d1 f1       	breq	.+116    	; 0x2bb6 <xTaskGenericNotifyFromISR+0xd6>
    2b42:	48 c0       	rjmp	.+144    	; 0x2bd4 <xTaskGenericNotifyFromISR+0xf4>
    2b44:	66 0f       	add	r22, r22
    2b46:	77 1f       	adc	r23, r23
    2b48:	66 0f       	add	r22, r22
    2b4a:	77 1f       	adc	r23, r23
    2b4c:	fd 01       	movw	r30, r26
    2b4e:	e6 0f       	add	r30, r22
    2b50:	f7 1f       	adc	r31, r23
    2b52:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b54:	90 a8       	ldd	r9, Z+48	; 0x30
    2b56:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b58:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b5a:	ba 01       	movw	r22, r20
    2b5c:	a9 01       	movw	r20, r18
    2b5e:	48 29       	or	r20, r8
    2b60:	59 29       	or	r21, r9
    2b62:	6a 29       	or	r22, r10
    2b64:	7b 29       	or	r23, r11
    2b66:	47 a7       	std	Z+47, r20	; 0x2f
    2b68:	50 ab       	std	Z+48, r21	; 0x30
    2b6a:	61 ab       	std	Z+49, r22	; 0x31
    2b6c:	72 ab       	std	Z+50, r23	; 0x32
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	34 c0       	rjmp	.+104    	; 0x2bda <xTaskGenericNotifyFromISR+0xfa>
    2b72:	66 0f       	add	r22, r22
    2b74:	77 1f       	adc	r23, r23
    2b76:	66 0f       	add	r22, r22
    2b78:	77 1f       	adc	r23, r23
    2b7a:	fd 01       	movw	r30, r26
    2b7c:	e6 0f       	add	r30, r22
    2b7e:	f7 1f       	adc	r31, r23
    2b80:	47 a5       	ldd	r20, Z+47	; 0x2f
    2b82:	50 a9       	ldd	r21, Z+48	; 0x30
    2b84:	61 a9       	ldd	r22, Z+49	; 0x31
    2b86:	72 a9       	ldd	r23, Z+50	; 0x32
    2b88:	4f 5f       	subi	r20, 0xFF	; 255
    2b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b8c:	6f 4f       	sbci	r22, 0xFF	; 255
    2b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b90:	47 a7       	std	Z+47, r20	; 0x2f
    2b92:	50 ab       	std	Z+48, r21	; 0x30
    2b94:	61 ab       	std	Z+49, r22	; 0x31
    2b96:	72 ab       	std	Z+50, r23	; 0x32
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	1f c0       	rjmp	.+62     	; 0x2bda <xTaskGenericNotifyFromISR+0xfa>
    2b9c:	66 0f       	add	r22, r22
    2b9e:	77 1f       	adc	r23, r23
    2ba0:	66 0f       	add	r22, r22
    2ba2:	77 1f       	adc	r23, r23
    2ba4:	fd 01       	movw	r30, r26
    2ba6:	e6 0f       	add	r30, r22
    2ba8:	f7 1f       	adc	r31, r23
    2baa:	27 a7       	std	Z+47, r18	; 0x2f
    2bac:	30 ab       	std	Z+48, r19	; 0x30
    2bae:	41 ab       	std	Z+49, r20	; 0x31
    2bb0:	52 ab       	std	Z+50, r21	; 0x32
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	12 c0       	rjmp	.+36     	; 0x2bda <xTaskGenericNotifyFromISR+0xfa>
    2bb6:	92 30       	cpi	r25, 0x02	; 2
    2bb8:	79 f0       	breq	.+30     	; 0x2bd8 <xTaskGenericNotifyFromISR+0xf8>
    2bba:	66 0f       	add	r22, r22
    2bbc:	77 1f       	adc	r23, r23
    2bbe:	66 0f       	add	r22, r22
    2bc0:	77 1f       	adc	r23, r23
    2bc2:	fd 01       	movw	r30, r26
    2bc4:	e6 0f       	add	r30, r22
    2bc6:	f7 1f       	adc	r31, r23
    2bc8:	27 a7       	std	Z+47, r18	; 0x2f
    2bca:	30 ab       	std	Z+48, r19	; 0x30
    2bcc:	41 ab       	std	Z+49, r20	; 0x31
    2bce:	52 ab       	std	Z+50, r21	; 0x32
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	03 c0       	rjmp	.+6      	; 0x2bda <xTaskGenericNotifyFromISR+0xfa>
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	01 c0       	rjmp	.+2      	; 0x2bda <xTaskGenericNotifyFromISR+0xfa>
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	91 30       	cpi	r25, 0x01	; 1
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <xTaskGenericNotifyFromISR+0x100>
    2bde:	96 c0       	rjmp	.+300    	; 0x2d0c <xTaskGenericNotifyFromISR+0x22c>
    2be0:	90 91 92 12 	lds	r25, 0x1292	; 0x801292 <uxSchedulerSuspended>
    2be4:	91 11       	cpse	r25, r1
    2be6:	5f c0       	rjmp	.+190    	; 0x2ca6 <xTaskGenericNotifyFromISR+0x1c6>
    2be8:	1c 96       	adiw	r26, 0x0c	; 12
    2bea:	ed 91       	ld	r30, X+
    2bec:	fc 91       	ld	r31, X
    2bee:	1d 97       	sbiw	r26, 0x0d	; 13
    2bf0:	16 96       	adiw	r26, 0x06	; 6
    2bf2:	cd 91       	ld	r28, X+
    2bf4:	dc 91       	ld	r29, X
    2bf6:	17 97       	sbiw	r26, 0x07	; 7
    2bf8:	18 96       	adiw	r26, 0x08	; 8
    2bfa:	2d 91       	ld	r18, X+
    2bfc:	3c 91       	ld	r19, X
    2bfe:	19 97       	sbiw	r26, 0x09	; 9
    2c00:	3f 83       	std	Y+7, r19	; 0x07
    2c02:	2e 83       	std	Y+6, r18	; 0x06
    2c04:	18 96       	adiw	r26, 0x08	; 8
    2c06:	cd 91       	ld	r28, X+
    2c08:	dc 91       	ld	r29, X
    2c0a:	19 97       	sbiw	r26, 0x09	; 9
    2c0c:	16 96       	adiw	r26, 0x06	; 6
    2c0e:	2d 91       	ld	r18, X+
    2c10:	3c 91       	ld	r19, X
    2c12:	17 97       	sbiw	r26, 0x07	; 7
    2c14:	3d 83       	std	Y+5, r19	; 0x05
    2c16:	2c 83       	std	Y+4, r18	; 0x04
    2c18:	41 81       	ldd	r20, Z+1	; 0x01
    2c1a:	52 81       	ldd	r21, Z+2	; 0x02
    2c1c:	9d 01       	movw	r18, r26
    2c1e:	2e 5f       	subi	r18, 0xFE	; 254
    2c20:	3f 4f       	sbci	r19, 0xFF	; 255
    2c22:	42 17       	cp	r20, r18
    2c24:	53 07       	cpc	r21, r19
    2c26:	31 f4       	brne	.+12     	; 0x2c34 <xTaskGenericNotifyFromISR+0x154>
    2c28:	18 96       	adiw	r26, 0x08	; 8
    2c2a:	4d 91       	ld	r20, X+
    2c2c:	5c 91       	ld	r21, X
    2c2e:	19 97       	sbiw	r26, 0x09	; 9
    2c30:	52 83       	std	Z+2, r21	; 0x02
    2c32:	41 83       	std	Z+1, r20	; 0x01
    2c34:	1d 96       	adiw	r26, 0x0d	; 13
    2c36:	1c 92       	st	X, r1
    2c38:	1e 92       	st	-X, r1
    2c3a:	1c 97       	sbiw	r26, 0x0c	; 12
    2c3c:	90 81       	ld	r25, Z
    2c3e:	91 50       	subi	r25, 0x01	; 1
    2c40:	90 83       	st	Z, r25
    2c42:	5a 96       	adiw	r26, 0x1a	; 26
    2c44:	ec 91       	ld	r30, X
    2c46:	5a 97       	sbiw	r26, 0x1a	; 26
    2c48:	90 91 a1 12 	lds	r25, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    2c4c:	9e 17       	cp	r25, r30
    2c4e:	10 f4       	brcc	.+4      	; 0x2c54 <xTaskGenericNotifyFromISR+0x174>
    2c50:	e0 93 a1 12 	sts	0x12A1, r30	; 0x8012a1 <uxTopReadyPriority>
    2c54:	9b e0       	ldi	r25, 0x0B	; 11
    2c56:	9e 9f       	mul	r25, r30
    2c58:	f0 01       	movw	r30, r0
    2c5a:	11 24       	eor	r1, r1
    2c5c:	ed 51       	subi	r30, 0x1D	; 29
    2c5e:	fd 4e       	sbci	r31, 0xED	; 237
    2c60:	01 80       	ldd	r0, Z+1	; 0x01
    2c62:	f2 81       	ldd	r31, Z+2	; 0x02
    2c64:	e0 2d       	mov	r30, r0
    2c66:	17 96       	adiw	r26, 0x07	; 7
    2c68:	fc 93       	st	X, r31
    2c6a:	ee 93       	st	-X, r30
    2c6c:	16 97       	sbiw	r26, 0x06	; 6
    2c6e:	46 81       	ldd	r20, Z+6	; 0x06
    2c70:	57 81       	ldd	r21, Z+7	; 0x07
    2c72:	19 96       	adiw	r26, 0x09	; 9
    2c74:	5c 93       	st	X, r21
    2c76:	4e 93       	st	-X, r20
    2c78:	18 97       	sbiw	r26, 0x08	; 8
    2c7a:	c6 81       	ldd	r28, Z+6	; 0x06
    2c7c:	d7 81       	ldd	r29, Z+7	; 0x07
    2c7e:	3d 83       	std	Y+5, r19	; 0x05
    2c80:	2c 83       	std	Y+4, r18	; 0x04
    2c82:	37 83       	std	Z+7, r19	; 0x07
    2c84:	26 83       	std	Z+6, r18	; 0x06
    2c86:	5a 96       	adiw	r26, 0x1a	; 26
    2c88:	ec 91       	ld	r30, X
    2c8a:	5a 97       	sbiw	r26, 0x1a	; 26
    2c8c:	9e 9f       	mul	r25, r30
    2c8e:	f0 01       	movw	r30, r0
    2c90:	11 24       	eor	r1, r1
    2c92:	ed 51       	subi	r30, 0x1D	; 29
    2c94:	fd 4e       	sbci	r31, 0xED	; 237
    2c96:	1d 96       	adiw	r26, 0x0d	; 13
    2c98:	fc 93       	st	X, r31
    2c9a:	ee 93       	st	-X, r30
    2c9c:	1c 97       	sbiw	r26, 0x0c	; 12
    2c9e:	90 81       	ld	r25, Z
    2ca0:	9f 5f       	subi	r25, 0xFF	; 255
    2ca2:	90 83       	st	Z, r25
    2ca4:	21 c0       	rjmp	.+66     	; 0x2ce8 <xTaskGenericNotifyFromISR+0x208>
    2ca6:	6e eb       	ldi	r22, 0xBE	; 190
    2ca8:	72 e1       	ldi	r23, 0x12	; 18
    2caa:	fb 01       	movw	r30, r22
    2cac:	c1 81       	ldd	r28, Z+1	; 0x01
    2cae:	d2 81       	ldd	r29, Z+2	; 0x02
    2cb0:	53 96       	adiw	r26, 0x13	; 19
    2cb2:	dc 93       	st	X, r29
    2cb4:	ce 93       	st	-X, r28
    2cb6:	52 97       	sbiw	r26, 0x12	; 18
    2cb8:	2e 81       	ldd	r18, Y+6	; 0x06
    2cba:	3f 81       	ldd	r19, Y+7	; 0x07
    2cbc:	55 96       	adiw	r26, 0x15	; 21
    2cbe:	3c 93       	st	X, r19
    2cc0:	2e 93       	st	-X, r18
    2cc2:	54 97       	sbiw	r26, 0x14	; 20
    2cc4:	4e 81       	ldd	r20, Y+6	; 0x06
    2cc6:	5f 81       	ldd	r21, Y+7	; 0x07
    2cc8:	9d 01       	movw	r18, r26
    2cca:	22 5f       	subi	r18, 0xF2	; 242
    2ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cce:	fa 01       	movw	r30, r20
    2cd0:	35 83       	std	Z+5, r19	; 0x05
    2cd2:	24 83       	std	Z+4, r18	; 0x04
    2cd4:	3f 83       	std	Y+7, r19	; 0x07
    2cd6:	2e 83       	std	Y+6, r18	; 0x06
    2cd8:	59 96       	adiw	r26, 0x19	; 25
    2cda:	7c 93       	st	X, r23
    2cdc:	6e 93       	st	-X, r22
    2cde:	58 97       	sbiw	r26, 0x18	; 24
    2ce0:	fb 01       	movw	r30, r22
    2ce2:	90 81       	ld	r25, Z
    2ce4:	9f 5f       	subi	r25, 0xFF	; 255
    2ce6:	90 83       	st	Z, r25
    2ce8:	5a 96       	adiw	r26, 0x1a	; 26
    2cea:	2c 91       	ld	r18, X
    2cec:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    2cf0:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2cf4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cf6:	92 17       	cp	r25, r18
    2cf8:	48 f4       	brcc	.+18     	; 0x2d0c <xTaskGenericNotifyFromISR+0x22c>
    2cfa:	c1 14       	cp	r12, r1
    2cfc:	d1 04       	cpc	r13, r1
    2cfe:	19 f0       	breq	.+6      	; 0x2d06 <xTaskGenericNotifyFromISR+0x226>
    2d00:	91 e0       	ldi	r25, 0x01	; 1
    2d02:	f6 01       	movw	r30, r12
    2d04:	90 83       	st	Z, r25
    2d06:	91 e0       	ldi	r25, 0x01	; 1
    2d08:	90 93 9b 12 	sts	0x129B, r25	; 0x80129b <xYieldPending>
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	0f 91       	pop	r16
    2d12:	ff 90       	pop	r15
    2d14:	ef 90       	pop	r14
    2d16:	df 90       	pop	r13
    2d18:	cf 90       	pop	r12
    2d1a:	bf 90       	pop	r11
    2d1c:	af 90       	pop	r10
    2d1e:	9f 90       	pop	r9
    2d20:	8f 90       	pop	r8
    2d22:	08 95       	ret

00002d24 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	21 f4       	brne	.+8      	; 0x2d30 <xTaskGenericNotifyStateClear+0xc>
    2d28:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    2d2c:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2d36:	70 e0       	ldi	r23, 0x00	; 0
    2d38:	fc 01       	movw	r30, r24
    2d3a:	e6 0f       	add	r30, r22
    2d3c:	f7 1f       	adc	r31, r23
    2d3e:	23 a9       	ldd	r18, Z+51	; 0x33
    2d40:	22 30       	cpi	r18, 0x02	; 2
    2d42:	31 f4       	brne	.+12     	; 0x2d50 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2d44:	fc 01       	movw	r30, r24
    2d46:	e6 0f       	add	r30, r22
    2d48:	f7 1f       	adc	r31, r23
    2d4a:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	01 c0       	rjmp	.+2      	; 0x2d52 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2d50:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2d52:	0f 90       	pop	r0
    2d54:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2d56:	08 95       	ret

00002d58 <prvGetNextExpireTime>:
    2d58:	dc 01       	movw	r26, r24
    2d5a:	e0 91 5d 13 	lds	r30, 0x135D	; 0x80135d <pxCurrentTimerList>
    2d5e:	f0 91 5e 13 	lds	r31, 0x135E	; 0x80135e <pxCurrentTimerList+0x1>
    2d62:	80 81       	ld	r24, Z
    2d64:	91 e0       	ldi	r25, 0x01	; 1
    2d66:	81 11       	cpse	r24, r1
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	9c 93       	st	X, r25
    2d6c:	91 11       	cpse	r25, r1
    2d6e:	08 c0       	rjmp	.+16     	; 0x2d80 <prvGetNextExpireTime+0x28>
    2d70:	07 80       	ldd	r0, Z+7	; 0x07
    2d72:	f0 85       	ldd	r31, Z+8	; 0x08
    2d74:	e0 2d       	mov	r30, r0
    2d76:	60 81       	ld	r22, Z
    2d78:	71 81       	ldd	r23, Z+1	; 0x01
    2d7a:	82 81       	ldd	r24, Z+2	; 0x02
    2d7c:	93 81       	ldd	r25, Z+3	; 0x03
    2d7e:	08 95       	ret
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	cb 01       	movw	r24, r22
    2d86:	08 95       	ret

00002d88 <prvInsertTimerInActiveList>:
    2d88:	cf 92       	push	r12
    2d8a:	df 92       	push	r13
    2d8c:	ef 92       	push	r14
    2d8e:	ff 92       	push	r15
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	fc 01       	movw	r30, r24
    2d96:	42 83       	std	Z+2, r20	; 0x02
    2d98:	53 83       	std	Z+3, r21	; 0x03
    2d9a:	64 83       	std	Z+4, r22	; 0x04
    2d9c:	75 83       	std	Z+5, r23	; 0x05
    2d9e:	93 87       	std	Z+11, r25	; 0x0b
    2da0:	82 87       	std	Z+10, r24	; 0x0a
    2da2:	04 17       	cp	r16, r20
    2da4:	15 07       	cpc	r17, r21
    2da6:	26 07       	cpc	r18, r22
    2da8:	37 07       	cpc	r19, r23
    2daa:	c0 f0       	brcs	.+48     	; 0x2ddc <prvInsertTimerInActiveList+0x54>
    2dac:	0c 19       	sub	r16, r12
    2dae:	1d 09       	sbc	r17, r13
    2db0:	2e 09       	sbc	r18, r14
    2db2:	3f 09       	sbc	r19, r15
    2db4:	86 85       	ldd	r24, Z+14	; 0x0e
    2db6:	97 85       	ldd	r25, Z+15	; 0x0f
    2db8:	a0 89       	ldd	r26, Z+16	; 0x10
    2dba:	b1 89       	ldd	r27, Z+17	; 0x11
    2dbc:	08 17       	cp	r16, r24
    2dbe:	19 07       	cpc	r17, r25
    2dc0:	2a 07       	cpc	r18, r26
    2dc2:	3b 07       	cpc	r19, r27
    2dc4:	00 f5       	brcc	.+64     	; 0x2e06 <prvInsertTimerInActiveList+0x7e>
    2dc6:	bf 01       	movw	r22, r30
    2dc8:	6e 5f       	subi	r22, 0xFE	; 254
    2dca:	7f 4f       	sbci	r23, 0xFF	; 255
    2dcc:	80 91 5b 13 	lds	r24, 0x135B	; 0x80135b <pxOverflowTimerList>
    2dd0:	90 91 5c 13 	lds	r25, 0x135C	; 0x80135c <pxOverflowTimerList+0x1>
    2dd4:	0e 94 06 03 	call	0x60c	; 0x60c <vListInsert>
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	18 c0       	rjmp	.+48     	; 0x2e0c <prvInsertTimerInActiveList+0x84>
    2ddc:	0c 15       	cp	r16, r12
    2dde:	1d 05       	cpc	r17, r13
    2de0:	2e 05       	cpc	r18, r14
    2de2:	3f 05       	cpc	r19, r15
    2de4:	28 f4       	brcc	.+10     	; 0x2df0 <prvInsertTimerInActiveList+0x68>
    2de6:	4c 15       	cp	r20, r12
    2de8:	5d 05       	cpc	r21, r13
    2dea:	6e 05       	cpc	r22, r14
    2dec:	7f 05       	cpc	r23, r15
    2dee:	68 f4       	brcc	.+26     	; 0x2e0a <prvInsertTimerInActiveList+0x82>
    2df0:	bf 01       	movw	r22, r30
    2df2:	6e 5f       	subi	r22, 0xFE	; 254
    2df4:	7f 4f       	sbci	r23, 0xFF	; 255
    2df6:	80 91 5d 13 	lds	r24, 0x135D	; 0x80135d <pxCurrentTimerList>
    2dfa:	90 91 5e 13 	lds	r25, 0x135E	; 0x80135e <pxCurrentTimerList+0x1>
    2dfe:	0e 94 06 03 	call	0x60c	; 0x60c <vListInsert>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	03 c0       	rjmp	.+6      	; 0x2e0c <prvInsertTimerInActiveList+0x84>
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	01 c0       	rjmp	.+2      	; 0x2e0c <prvInsertTimerInActiveList+0x84>
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	1f 91       	pop	r17
    2e0e:	0f 91       	pop	r16
    2e10:	ff 90       	pop	r15
    2e12:	ef 90       	pop	r14
    2e14:	df 90       	pop	r13
    2e16:	cf 90       	pop	r12
    2e18:	08 95       	ret

00002e1a <prvCheckForValidListAndQueue>:
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	0f 92       	push	r0
    2e20:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    2e24:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2e28:	89 2b       	or	r24, r25
    2e2a:	e9 f4       	brne	.+58     	; 0x2e66 <prvCheckForValidListAndQueue+0x4c>
    2e2c:	8a e6       	ldi	r24, 0x6A	; 106
    2e2e:	93 e1       	ldi	r25, 0x13	; 19
    2e30:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <vListInitialise>
    2e34:	8f e5       	ldi	r24, 0x5F	; 95
    2e36:	93 e1       	ldi	r25, 0x13	; 19
    2e38:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <vListInitialise>
    2e3c:	8a e6       	ldi	r24, 0x6A	; 106
    2e3e:	93 e1       	ldi	r25, 0x13	; 19
    2e40:	90 93 5e 13 	sts	0x135E, r25	; 0x80135e <pxCurrentTimerList+0x1>
    2e44:	80 93 5d 13 	sts	0x135D, r24	; 0x80135d <pxCurrentTimerList>
    2e48:	8f e5       	ldi	r24, 0x5F	; 95
    2e4a:	93 e1       	ldi	r25, 0x13	; 19
    2e4c:	90 93 5c 13 	sts	0x135C, r25	; 0x80135c <pxOverflowTimerList+0x1>
    2e50:	80 93 5b 13 	sts	0x135B, r24	; 0x80135b <pxOverflowTimerList>
    2e54:	40 e0       	ldi	r20, 0x00	; 0
    2e56:	67 e0       	ldi	r22, 0x07	; 7
    2e58:	8a e0       	ldi	r24, 0x0A	; 10
    2e5a:	0e 94 b4 05 	call	0xb68	; 0xb68 <xQueueGenericCreate>
    2e5e:	90 93 5a 13 	sts	0x135A, r25	; 0x80135a <xTimerQueue+0x1>
    2e62:	80 93 59 13 	sts	0x1359, r24	; 0x801359 <xTimerQueue>
    2e66:	0f 90       	pop	r0
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	08 95       	ret

00002e6c <xTimerCreateTimerTask>:
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	0f 93       	push	r16
    2e72:	d3 df       	rcall	.-90     	; 0x2e1a <prvCheckForValidListAndQueue>
    2e74:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    2e78:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2e7c:	89 2b       	or	r24, r25
    2e7e:	91 f0       	breq	.+36     	; 0x2ea4 <xTimerCreateTimerTask+0x38>
    2e80:	0f 2e       	mov	r0, r31
    2e82:	f7 e5       	ldi	r31, 0x57	; 87
    2e84:	ef 2e       	mov	r14, r31
    2e86:	f3 e1       	ldi	r31, 0x13	; 19
    2e88:	ff 2e       	mov	r15, r31
    2e8a:	f0 2d       	mov	r31, r0
    2e8c:	03 e0       	ldi	r16, 0x03	; 3
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 ec       	ldi	r20, 0xC0	; 192
    2e94:	50 e0       	ldi	r21, 0x00	; 0
    2e96:	6f e9       	ldi	r22, 0x9F	; 159
    2e98:	72 e0       	ldi	r23, 0x02	; 2
    2e9a:	87 ed       	ldi	r24, 0xD7	; 215
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
    2ea2:	01 c0       	rjmp	.+2      	; 0x2ea6 <xTimerCreateTimerTask+0x3a>
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	0f 91       	pop	r16
    2ea8:	ff 90       	pop	r15
    2eaa:	ef 90       	pop	r14
    2eac:	08 95       	ret

00002eae <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2eae:	8f 92       	push	r8
    2eb0:	9f 92       	push	r9
    2eb2:	af 92       	push	r10
    2eb4:	bf 92       	push	r11
    2eb6:	cf 92       	push	r12
    2eb8:	df 92       	push	r13
    2eba:	ef 92       	push	r14
    2ebc:	ff 92       	push	r15
    2ebe:	0f 93       	push	r16
    2ec0:	1f 93       	push	r17
    2ec2:	cf 93       	push	r28
    2ec4:	df 93       	push	r29
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	27 97       	sbiw	r28, 0x07	; 7
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2ed6:	e0 91 59 13 	lds	r30, 0x1359	; 0x801359 <xTimerQueue>
    2eda:	f0 91 5a 13 	lds	r31, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2ede:	30 97       	sbiw	r30, 0x00	; 0
    2ee0:	81 f1       	breq	.+96     	; 0x2f42 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2ee2:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2ee4:	2a 83       	std	Y+2, r18	; 0x02
    2ee6:	3b 83       	std	Y+3, r19	; 0x03
    2ee8:	4c 83       	std	Y+4, r20	; 0x04
    2eea:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2eec:	9f 83       	std	Y+7, r25	; 0x07
    2eee:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2ef0:	66 30       	cpi	r22, 0x06	; 6
    2ef2:	f4 f4       	brge	.+60     	; 0x2f30 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2ef4:	ee da       	rcall	.-2596   	; 0x24d2 <xTaskGetSchedulerState>
    2ef6:	82 30       	cpi	r24, 0x02	; 2
    2ef8:	69 f4       	brne	.+26     	; 0x2f14 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2efa:	00 e0       	ldi	r16, 0x00	; 0
    2efc:	a7 01       	movw	r20, r14
    2efe:	96 01       	movw	r18, r12
    2f00:	be 01       	movw	r22, r28
    2f02:	6f 5f       	subi	r22, 0xFF	; 255
    2f04:	7f 4f       	sbci	r23, 0xFF	; 255
    2f06:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    2f0a:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2f0e:	0e 94 d7 05 	call	0xbae	; 0xbae <xQueueGenericSend>
    2f12:	18 c0       	rjmp	.+48     	; 0x2f44 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2f14:	00 e0       	ldi	r16, 0x00	; 0
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	a9 01       	movw	r20, r18
    2f1c:	be 01       	movw	r22, r28
    2f1e:	6f 5f       	subi	r22, 0xFF	; 255
    2f20:	7f 4f       	sbci	r23, 0xFF	; 255
    2f22:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    2f26:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2f2a:	0e 94 d7 05 	call	0xbae	; 0xbae <xQueueGenericSend>
    2f2e:	0a c0       	rjmp	.+20     	; 0x2f44 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	a8 01       	movw	r20, r16
    2f34:	be 01       	movw	r22, r28
    2f36:	6f 5f       	subi	r22, 0xFF	; 255
    2f38:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3a:	cf 01       	movw	r24, r30
    2f3c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <xQueueGenericSendFromISR>
    2f40:	01 c0       	rjmp	.+2      	; 0x2f44 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2f42:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2f44:	27 96       	adiw	r28, 0x07	; 7
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	1f 91       	pop	r17
    2f56:	0f 91       	pop	r16
    2f58:	ff 90       	pop	r15
    2f5a:	ef 90       	pop	r14
    2f5c:	df 90       	pop	r13
    2f5e:	cf 90       	pop	r12
    2f60:	bf 90       	pop	r11
    2f62:	af 90       	pop	r10
    2f64:	9f 90       	pop	r9
    2f66:	8f 90       	pop	r8
    2f68:	08 95       	ret

00002f6a <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2f6a:	8f 92       	push	r8
    2f6c:	9f 92       	push	r9
    2f6e:	af 92       	push	r10
    2f70:	bf 92       	push	r11
    2f72:	cf 92       	push	r12
    2f74:	df 92       	push	r13
    2f76:	ef 92       	push	r14
    2f78:	ff 92       	push	r15
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
    2f7e:	cf 93       	push	r28
    2f80:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2f82:	3b c0       	rjmp	.+118    	; 0x2ffa <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2f84:	07 80       	ldd	r0, Z+7	; 0x07
    2f86:	f0 85       	ldd	r31, Z+8	; 0x08
    2f88:	e0 2d       	mov	r30, r0
    2f8a:	80 80       	ld	r8, Z
    2f8c:	91 80       	ldd	r9, Z+1	; 0x01
    2f8e:	a2 80       	ldd	r10, Z+2	; 0x02
    2f90:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2f92:	c0 85       	ldd	r28, Z+8	; 0x08
    2f94:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f96:	8e 01       	movw	r16, r28
    2f98:	0e 5f       	subi	r16, 0xFE	; 254
    2f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9c:	c8 01       	movw	r24, r16
    2f9e:	0e 94 43 03 	call	0x686	; 0x686 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2fa2:	ec 89       	ldd	r30, Y+20	; 0x14
    2fa4:	fd 89       	ldd	r31, Y+21	; 0x15
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2faa:	8e 89       	ldd	r24, Y+22	; 0x16
    2fac:	82 ff       	sbrs	r24, 2
    2fae:	25 c0       	rjmp	.+74     	; 0x2ffa <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2fb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fb4:	a8 89       	ldd	r26, Y+16	; 0x10
    2fb6:	b9 89       	ldd	r27, Y+17	; 0x11
    2fb8:	88 0d       	add	r24, r8
    2fba:	99 1d       	adc	r25, r9
    2fbc:	aa 1d       	adc	r26, r10
    2fbe:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2fc0:	88 16       	cp	r8, r24
    2fc2:	99 06       	cpc	r9, r25
    2fc4:	aa 06       	cpc	r10, r26
    2fc6:	bb 06       	cpc	r11, r27
    2fc8:	70 f4       	brcc	.+28     	; 0x2fe6 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2fca:	8a 83       	std	Y+2, r24	; 0x02
    2fcc:	9b 83       	std	Y+3, r25	; 0x03
    2fce:	ac 83       	std	Y+4, r26	; 0x04
    2fd0:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2fd2:	db 87       	std	Y+11, r29	; 0x0b
    2fd4:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2fd6:	b8 01       	movw	r22, r16
    2fd8:	80 91 5d 13 	lds	r24, 0x135D	; 0x80135d <pxCurrentTimerList>
    2fdc:	90 91 5e 13 	lds	r25, 0x135E	; 0x80135e <pxCurrentTimerList+0x1>
    2fe0:	0e 94 06 03 	call	0x60c	; 0x60c <vListInsert>
    2fe4:	0a c0       	rjmp	.+20     	; 0x2ffa <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2fe6:	c1 2c       	mov	r12, r1
    2fe8:	d1 2c       	mov	r13, r1
    2fea:	76 01       	movw	r14, r12
    2fec:	00 e0       	ldi	r16, 0x00	; 0
    2fee:	10 e0       	ldi	r17, 0x00	; 0
    2ff0:	a5 01       	movw	r20, r10
    2ff2:	94 01       	movw	r18, r8
    2ff4:	60 e0       	ldi	r22, 0x00	; 0
    2ff6:	ce 01       	movw	r24, r28
    2ff8:	5a df       	rcall	.-332    	; 0x2eae <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2ffa:	e0 91 5d 13 	lds	r30, 0x135D	; 0x80135d <pxCurrentTimerList>
    2ffe:	f0 91 5e 13 	lds	r31, 0x135E	; 0x80135e <pxCurrentTimerList+0x1>
    3002:	80 81       	ld	r24, Z
    3004:	81 11       	cpse	r24, r1
    3006:	be cf       	rjmp	.-132    	; 0x2f84 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3008:	80 91 5b 13 	lds	r24, 0x135B	; 0x80135b <pxOverflowTimerList>
    300c:	90 91 5c 13 	lds	r25, 0x135C	; 0x80135c <pxOverflowTimerList+0x1>
    3010:	90 93 5e 13 	sts	0x135E, r25	; 0x80135e <pxCurrentTimerList+0x1>
    3014:	80 93 5d 13 	sts	0x135D, r24	; 0x80135d <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3018:	f0 93 5c 13 	sts	0x135C, r31	; 0x80135c <pxOverflowTimerList+0x1>
    301c:	e0 93 5b 13 	sts	0x135B, r30	; 0x80135b <pxOverflowTimerList>
    }
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	ff 90       	pop	r15
    302a:	ef 90       	pop	r14
    302c:	df 90       	pop	r13
    302e:	cf 90       	pop	r12
    3030:	bf 90       	pop	r11
    3032:	af 90       	pop	r10
    3034:	9f 90       	pop	r9
    3036:	8f 90       	pop	r8
    3038:	08 95       	ret

0000303a <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    303a:	cf 92       	push	r12
    303c:	df 92       	push	r13
    303e:	ef 92       	push	r14
    3040:	ff 92       	push	r15
    3042:	cf 93       	push	r28
    3044:	df 93       	push	r29
    3046:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3048:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskGetTickCount>
    304c:	6b 01       	movw	r12, r22
    304e:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3050:	80 91 53 13 	lds	r24, 0x1353	; 0x801353 <xLastTime.2436>
    3054:	90 91 54 13 	lds	r25, 0x1354	; 0x801354 <xLastTime.2436+0x1>
    3058:	a0 91 55 13 	lds	r26, 0x1355	; 0x801355 <xLastTime.2436+0x2>
    305c:	b0 91 56 13 	lds	r27, 0x1356	; 0x801356 <xLastTime.2436+0x3>
    3060:	c8 16       	cp	r12, r24
    3062:	d9 06       	cpc	r13, r25
    3064:	ea 06       	cpc	r14, r26
    3066:	fb 06       	cpc	r15, r27
    3068:	20 f4       	brcc	.+8      	; 0x3072 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    306a:	7f df       	rcall	.-258    	; 0x2f6a <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	88 83       	st	Y, r24
    3070:	01 c0       	rjmp	.+2      	; 0x3074 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3072:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3074:	c0 92 53 13 	sts	0x1353, r12	; 0x801353 <xLastTime.2436>
    3078:	d0 92 54 13 	sts	0x1354, r13	; 0x801354 <xLastTime.2436+0x1>
    307c:	e0 92 55 13 	sts	0x1355, r14	; 0x801355 <xLastTime.2436+0x2>
    3080:	f0 92 56 13 	sts	0x1356, r15	; 0x801356 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3084:	c7 01       	movw	r24, r14
    3086:	b6 01       	movw	r22, r12
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	ff 90       	pop	r15
    308e:	ef 90       	pop	r14
    3090:	df 90       	pop	r13
    3092:	cf 90       	pop	r12
    3094:	08 95       	ret

00003096 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3096:	4f 92       	push	r4
    3098:	5f 92       	push	r5
    309a:	6f 92       	push	r6
    309c:	7f 92       	push	r7
    309e:	8f 92       	push	r8
    30a0:	9f 92       	push	r9
    30a2:	af 92       	push	r10
    30a4:	bf 92       	push	r11
    30a6:	cf 92       	push	r12
    30a8:	df 92       	push	r13
    30aa:	ef 92       	push	r14
    30ac:	ff 92       	push	r15
    30ae:	0f 93       	push	r16
    30b0:	1f 93       	push	r17
    30b2:	cf 93       	push	r28
    30b4:	df 93       	push	r29
    30b6:	4b 01       	movw	r8, r22
    30b8:	5c 01       	movw	r10, r24
    30ba:	29 01       	movw	r4, r18
    30bc:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    30be:	e0 91 5d 13 	lds	r30, 0x135D	; 0x80135d <pxCurrentTimerList>
    30c2:	f0 91 5e 13 	lds	r31, 0x135E	; 0x80135e <pxCurrentTimerList+0x1>
    30c6:	07 80       	ldd	r0, Z+7	; 0x07
    30c8:	f0 85       	ldd	r31, Z+8	; 0x08
    30ca:	e0 2d       	mov	r30, r0
    30cc:	c0 85       	ldd	r28, Z+8	; 0x08
    30ce:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30d0:	ce 01       	movw	r24, r28
    30d2:	02 96       	adiw	r24, 0x02	; 2
    30d4:	0e 94 43 03 	call	0x686	; 0x686 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    30d8:	8e 89       	ldd	r24, Y+22	; 0x16
    30da:	82 ff       	sbrs	r24, 2
    30dc:	1b c0       	rjmp	.+54     	; 0x3114 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    30de:	4e 85       	ldd	r20, Y+14	; 0x0e
    30e0:	5f 85       	ldd	r21, Y+15	; 0x0f
    30e2:	68 89       	ldd	r22, Y+16	; 0x10
    30e4:	79 89       	ldd	r23, Y+17	; 0x11
    30e6:	48 0d       	add	r20, r8
    30e8:	59 1d       	adc	r21, r9
    30ea:	6a 1d       	adc	r22, r10
    30ec:	7b 1d       	adc	r23, r11
    30ee:	75 01       	movw	r14, r10
    30f0:	64 01       	movw	r12, r8
    30f2:	93 01       	movw	r18, r6
    30f4:	82 01       	movw	r16, r4
    30f6:	ce 01       	movw	r24, r28
    30f8:	47 de       	rcall	.-882    	; 0x2d88 <prvInsertTimerInActiveList>
    30fa:	88 23       	and	r24, r24
    30fc:	69 f0       	breq	.+26     	; 0x3118 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    30fe:	c1 2c       	mov	r12, r1
    3100:	d1 2c       	mov	r13, r1
    3102:	76 01       	movw	r14, r12
    3104:	00 e0       	ldi	r16, 0x00	; 0
    3106:	10 e0       	ldi	r17, 0x00	; 0
    3108:	a5 01       	movw	r20, r10
    310a:	94 01       	movw	r18, r8
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	ce 01       	movw	r24, r28
    3110:	ce de       	rcall	.-612    	; 0x2eae <xTimerGenericCommand>
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3114:	8e 7f       	andi	r24, 0xFE	; 254
    3116:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3118:	ec 89       	ldd	r30, Y+20	; 0x14
    311a:	fd 89       	ldd	r31, Y+21	; 0x15
    311c:	ce 01       	movw	r24, r28
    311e:	19 95       	eicall
    }
    3120:	df 91       	pop	r29
    3122:	cf 91       	pop	r28
    3124:	1f 91       	pop	r17
    3126:	0f 91       	pop	r16
    3128:	ff 90       	pop	r15
    312a:	ef 90       	pop	r14
    312c:	df 90       	pop	r13
    312e:	cf 90       	pop	r12
    3130:	bf 90       	pop	r11
    3132:	af 90       	pop	r10
    3134:	9f 90       	pop	r9
    3136:	8f 90       	pop	r8
    3138:	7f 90       	pop	r7
    313a:	6f 90       	pop	r6
    313c:	5f 90       	pop	r5
    313e:	4f 90       	pop	r4
    3140:	08 95       	ret

00003142 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3142:	8f 92       	push	r8
    3144:	9f 92       	push	r9
    3146:	af 92       	push	r10
    3148:	bf 92       	push	r11
    314a:	cf 92       	push	r12
    314c:	df 92       	push	r13
    314e:	ef 92       	push	r14
    3150:	ff 92       	push	r15
    3152:	1f 93       	push	r17
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	1f 92       	push	r1
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	6b 01       	movw	r12, r22
    3160:	7c 01       	movw	r14, r24
    3162:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3164:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3168:	ce 01       	movw	r24, r28
    316a:	01 96       	adiw	r24, 0x01	; 1
    316c:	66 df       	rcall	.-308    	; 0x303a <prvSampleTimeNow>
    316e:	4b 01       	movw	r8, r22
    3170:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	81 11       	cpse	r24, r1
    3176:	2d c0       	rjmp	.+90     	; 0x31d2 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3178:	11 11       	cpse	r17, r1
    317a:	0d c0       	rjmp	.+26     	; 0x3196 <prvProcessTimerOrBlockTask+0x54>
    317c:	8c 14       	cp	r8, r12
    317e:	9d 04       	cpc	r9, r13
    3180:	ae 04       	cpc	r10, r14
    3182:	bf 04       	cpc	r11, r15
    3184:	40 f0       	brcs	.+16     	; 0x3196 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3186:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    318a:	a5 01       	movw	r20, r10
    318c:	94 01       	movw	r18, r8
    318e:	c7 01       	movw	r24, r14
    3190:	b6 01       	movw	r22, r12
    3192:	81 df       	rcall	.-254    	; 0x3096 <prvProcessExpiredTimer>
    3194:	20 c0       	rjmp	.+64     	; 0x31d6 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3196:	11 23       	and	r17, r17
    3198:	41 f0       	breq	.+16     	; 0x31aa <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    319a:	e0 91 5b 13 	lds	r30, 0x135B	; 0x80135b <pxOverflowTimerList>
    319e:	f0 91 5c 13 	lds	r31, 0x135C	; 0x80135c <pxOverflowTimerList+0x1>
    31a2:	80 81       	ld	r24, Z
    31a4:	11 e0       	ldi	r17, 0x01	; 1
    31a6:	81 11       	cpse	r24, r1
    31a8:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    31aa:	b7 01       	movw	r22, r14
    31ac:	a6 01       	movw	r20, r12
    31ae:	48 19       	sub	r20, r8
    31b0:	59 09       	sbc	r21, r9
    31b2:	6a 09       	sbc	r22, r10
    31b4:	7b 09       	sbc	r23, r11
    31b6:	21 2f       	mov	r18, r17
    31b8:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    31bc:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    31c0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    31c4:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskResumeAll>
    31c8:	81 11       	cpse	r24, r1
    31ca:	05 c0       	rjmp	.+10     	; 0x31d6 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    31cc:	0e 94 bf 03 	call	0x77e	; 0x77e <vPortYield>
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    31d2:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xTaskResumeAll>
            }
        }
    }
    31d6:	0f 90       	pop	r0
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	1f 91       	pop	r17
    31de:	ff 90       	pop	r15
    31e0:	ef 90       	pop	r14
    31e2:	df 90       	pop	r13
    31e4:	cf 90       	pop	r12
    31e6:	bf 90       	pop	r11
    31e8:	af 90       	pop	r10
    31ea:	9f 90       	pop	r9
    31ec:	8f 90       	pop	r8
    31ee:	08 95       	ret

000031f0 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    31f0:	af 92       	push	r10
    31f2:	bf 92       	push	r11
    31f4:	cf 92       	push	r12
    31f6:	df 92       	push	r13
    31f8:	ef 92       	push	r14
    31fa:	ff 92       	push	r15
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
    3208:	28 97       	sbiw	r28, 0x08	; 8
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	f8 94       	cli
    320e:	de bf       	out	0x3e, r29	; 62
    3210:	0f be       	out	0x3f, r0	; 63
    3212:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3214:	82 c0       	rjmp	.+260    	; 0x331a <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	88 23       	and	r24, r24
    321a:	0c f4       	brge	.+2      	; 0x321e <prvProcessReceivedCommands+0x2e>
    321c:	7e c0       	rjmp	.+252    	; 0x331a <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    321e:	ae 80       	ldd	r10, Y+6	; 0x06
    3220:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3222:	d5 01       	movw	r26, r10
    3224:	1c 96       	adiw	r26, 0x0c	; 12
    3226:	8d 91       	ld	r24, X+
    3228:	9c 91       	ld	r25, X
    322a:	1d 97       	sbiw	r26, 0x0d	; 13
    322c:	89 2b       	or	r24, r25
    322e:	21 f0       	breq	.+8      	; 0x3238 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3230:	c5 01       	movw	r24, r10
    3232:	02 96       	adiw	r24, 0x02	; 2
    3234:	0e 94 43 03 	call	0x686	; 0x686 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3238:	ce 01       	movw	r24, r28
    323a:	08 96       	adiw	r24, 0x08	; 8
    323c:	fe de       	rcall	.-516    	; 0x303a <prvSampleTimeNow>
    323e:	8b 01       	movw	r16, r22
    3240:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3242:	e9 81       	ldd	r30, Y+1	; 0x01
    3244:	0e 2e       	mov	r0, r30
    3246:	00 0c       	add	r0, r0
    3248:	ff 0b       	sbc	r31, r31
    324a:	ea 30       	cpi	r30, 0x0A	; 10
    324c:	f1 05       	cpc	r31, r1
    324e:	08 f0       	brcs	.+2      	; 0x3252 <prvProcessReceivedCommands+0x62>
    3250:	64 c0       	rjmp	.+200    	; 0x331a <prvProcessReceivedCommands+0x12a>
    3252:	88 27       	eor	r24, r24
    3254:	ee 58       	subi	r30, 0x8E	; 142
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	8f 4f       	sbci	r24, 0xFF	; 255
    325a:	0c 94 53 2d 	jmp	0x5aa6	; 0x5aa6 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    325e:	f5 01       	movw	r30, r10
    3260:	86 89       	ldd	r24, Z+22	; 0x16
    3262:	81 60       	ori	r24, 0x01	; 1
    3264:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3266:	ca 80       	ldd	r12, Y+2	; 0x02
    3268:	db 80       	ldd	r13, Y+3	; 0x03
    326a:	ec 80       	ldd	r14, Y+4	; 0x04
    326c:	fd 80       	ldd	r15, Y+5	; 0x05
    326e:	46 85       	ldd	r20, Z+14	; 0x0e
    3270:	57 85       	ldd	r21, Z+15	; 0x0f
    3272:	60 89       	ldd	r22, Z+16	; 0x10
    3274:	71 89       	ldd	r23, Z+17	; 0x11
    3276:	4c 0d       	add	r20, r12
    3278:	5d 1d       	adc	r21, r13
    327a:	6e 1d       	adc	r22, r14
    327c:	7f 1d       	adc	r23, r15
    327e:	c5 01       	movw	r24, r10
    3280:	83 dd       	rcall	.-1274   	; 0x2d88 <prvInsertTimerInActiveList>
    3282:	88 23       	and	r24, r24
    3284:	09 f4       	brne	.+2      	; 0x3288 <prvProcessReceivedCommands+0x98>
    3286:	49 c0       	rjmp	.+146    	; 0x331a <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3288:	d5 01       	movw	r26, r10
    328a:	54 96       	adiw	r26, 0x14	; 20
    328c:	ed 91       	ld	r30, X+
    328e:	fc 91       	ld	r31, X
    3290:	55 97       	sbiw	r26, 0x15	; 21
    3292:	c5 01       	movw	r24, r10
    3294:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3296:	f5 01       	movw	r30, r10
    3298:	86 89       	ldd	r24, Z+22	; 0x16
    329a:	82 ff       	sbrs	r24, 2
    329c:	3e c0       	rjmp	.+124    	; 0x331a <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    329e:	4a 81       	ldd	r20, Y+2	; 0x02
    32a0:	5b 81       	ldd	r21, Y+3	; 0x03
    32a2:	6c 81       	ldd	r22, Y+4	; 0x04
    32a4:	7d 81       	ldd	r23, Y+5	; 0x05
    32a6:	86 85       	ldd	r24, Z+14	; 0x0e
    32a8:	97 85       	ldd	r25, Z+15	; 0x0f
    32aa:	a0 89       	ldd	r26, Z+16	; 0x10
    32ac:	b1 89       	ldd	r27, Z+17	; 0x11
    32ae:	9a 01       	movw	r18, r20
    32b0:	ab 01       	movw	r20, r22
    32b2:	28 0f       	add	r18, r24
    32b4:	39 1f       	adc	r19, r25
    32b6:	4a 1f       	adc	r20, r26
    32b8:	5b 1f       	adc	r21, r27
    32ba:	c1 2c       	mov	r12, r1
    32bc:	d1 2c       	mov	r13, r1
    32be:	76 01       	movw	r14, r12
    32c0:	00 e0       	ldi	r16, 0x00	; 0
    32c2:	10 e0       	ldi	r17, 0x00	; 0
    32c4:	60 e0       	ldi	r22, 0x00	; 0
    32c6:	c5 01       	movw	r24, r10
    32c8:	f2 dd       	rcall	.-1052   	; 0x2eae <xTimerGenericCommand>
    32ca:	27 c0       	rjmp	.+78     	; 0x331a <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    32cc:	d5 01       	movw	r26, r10
    32ce:	56 96       	adiw	r26, 0x16	; 22
    32d0:	8c 91       	ld	r24, X
    32d2:	56 97       	sbiw	r26, 0x16	; 22
    32d4:	8e 7f       	andi	r24, 0xFE	; 254
    32d6:	56 96       	adiw	r26, 0x16	; 22
    32d8:	8c 93       	st	X, r24
                        break;
    32da:	1f c0       	rjmp	.+62     	; 0x331a <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    32dc:	f5 01       	movw	r30, r10
    32de:	86 89       	ldd	r24, Z+22	; 0x16
    32e0:	81 60       	ori	r24, 0x01	; 1
    32e2:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    32e4:	4a 81       	ldd	r20, Y+2	; 0x02
    32e6:	5b 81       	ldd	r21, Y+3	; 0x03
    32e8:	6c 81       	ldd	r22, Y+4	; 0x04
    32ea:	7d 81       	ldd	r23, Y+5	; 0x05
    32ec:	46 87       	std	Z+14, r20	; 0x0e
    32ee:	57 87       	std	Z+15, r21	; 0x0f
    32f0:	60 8b       	std	Z+16, r22	; 0x10
    32f2:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    32f4:	40 0f       	add	r20, r16
    32f6:	51 1f       	adc	r21, r17
    32f8:	62 1f       	adc	r22, r18
    32fa:	73 1f       	adc	r23, r19
    32fc:	68 01       	movw	r12, r16
    32fe:	79 01       	movw	r14, r18
    3300:	c5 01       	movw	r24, r10
    3302:	42 dd       	rcall	.-1404   	; 0x2d88 <prvInsertTimerInActiveList>
                        break;
    3304:	0a c0       	rjmp	.+20     	; 0x331a <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3306:	f5 01       	movw	r30, r10
    3308:	86 89       	ldd	r24, Z+22	; 0x16
    330a:	81 fd       	sbrc	r24, 1
    330c:	04 c0       	rjmp	.+8      	; 0x3316 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    330e:	c5 01       	movw	r24, r10
    3310:	0e 94 af 02 	call	0x55e	; 0x55e <vPortFree>
    3314:	02 c0       	rjmp	.+4      	; 0x331a <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3316:	8e 7f       	andi	r24, 0xFE	; 254
    3318:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	a9 01       	movw	r20, r18
    3320:	be 01       	movw	r22, r28
    3322:	6f 5f       	subi	r22, 0xFF	; 255
    3324:	7f 4f       	sbci	r23, 0xFF	; 255
    3326:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    332a:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    332e:	0e 94 a4 06 	call	0xd48	; 0xd48 <xQueueReceive>
    3332:	81 11       	cpse	r24, r1
    3334:	70 cf       	rjmp	.-288    	; 0x3216 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3336:	28 96       	adiw	r28, 0x08	; 8
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	cf 90       	pop	r12
    3352:	bf 90       	pop	r11
    3354:	af 90       	pop	r10
    3356:	08 95       	ret

00003358 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3358:	08 95       	ret

0000335a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    335a:	84 b1       	in	r24, 0x04	; 4
    335c:	80 68       	ori	r24, 0x80	; 128
    335e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3360:	85 b1       	in	r24, 0x05	; 5
    3362:	80 68       	ori	r24, 0x80	; 128
    3364:	85 b9       	out	0x05, r24	; 5
    3366:	08 95       	ret

00003368 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3368:	83 b1       	in	r24, 0x03	; 3
    336a:	80 68       	ori	r24, 0x80	; 128
    336c:	83 b9       	out	0x03, r24	; 3
    336e:	08 95       	ret

00003370 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3370:	f4 df       	rcall	.-24     	; 0x335a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3372:	2f ef       	ldi	r18, 0xFF	; 255
    3374:	80 e7       	ldi	r24, 0x70	; 112
    3376:	92 e0       	ldi	r25, 0x02	; 2
    3378:	21 50       	subi	r18, 0x01	; 1
    337a:	80 40       	sbci	r24, 0x00	; 0
    337c:	90 40       	sbci	r25, 0x00	; 0
    337e:	e1 f7       	brne	.-8      	; 0x3378 <vApplicationMallocFailedHook+0x8>
    3380:	00 c0       	rjmp	.+0      	; 0x3382 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3382:	00 00       	nop
    3384:	f1 df       	rcall	.-30     	; 0x3368 <prvBlinkMainLed>
    3386:	f5 cf       	rjmp	.-22     	; 0x3372 <vApplicationMallocFailedHook+0x2>

00003388 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3388:	e8 df       	rcall	.-48     	; 0x335a <prvSetMainLedOn>
    338a:	2f ef       	ldi	r18, 0xFF	; 255
    338c:	87 ea       	ldi	r24, 0xA7	; 167
    338e:	91 e6       	ldi	r25, 0x61	; 97
    3390:	21 50       	subi	r18, 0x01	; 1
    3392:	80 40       	sbci	r24, 0x00	; 0
    3394:	90 40       	sbci	r25, 0x00	; 0
    3396:	e1 f7       	brne	.-8      	; 0x3390 <vApplicationStackOverflowHook+0x8>
    3398:	00 c0       	rjmp	.+0      	; 0x339a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    339a:	00 00       	nop
    339c:	e5 df       	rcall	.-54     	; 0x3368 <prvBlinkMainLed>
    339e:	f5 cf       	rjmp	.-22     	; 0x338a <vApplicationStackOverflowHook+0x2>

000033a0 <enqueueCO2Measure>:
void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
}


void enqueueCO2Measure(uint16_t ppm){
    33a0:	0f 93       	push	r16
    33a2:	cf 93       	push	r28
    33a4:	df 93       	push	r29
    33a6:	1f 92       	push	r1
    33a8:	1f 92       	push	r1
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	9a 83       	std	Y+2, r25	; 0x02
    33b0:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting CO2: %d in the queue \n", ppm);
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	8f 93       	push	r24
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
    33b8:	8f 93       	push	r24
    33ba:	87 ea       	ldi	r24, 0xA7	; 167
    33bc:	92 e0       	ldi	r25, 0x02	; 2
    33be:	9f 93       	push	r25
    33c0:	8f 93       	push	r24
    33c2:	87 ef       	ldi	r24, 0xF7	; 247
    33c4:	94 e1       	ldi	r25, 0x14	; 20
    33c6:	9f 93       	push	r25
    33c8:	8f 93       	push	r24
    33ca:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
	test_outprint(printstring);
    33ce:	87 ef       	ldi	r24, 0xF7	; 247
    33d0:	94 e1       	ldi	r25, 0x14	; 20
    33d2:	52 d3       	rcall	.+1700   	; 0x3a78 <test_outprint>
	
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    33d4:	00 e0       	ldi	r16, 0x00	; 0
    33d6:	2f ef       	ldi	r18, 0xFF	; 255
    33d8:	3f ef       	ldi	r19, 0xFF	; 255
    33da:	a9 01       	movw	r20, r18
    33dc:	be 01       	movw	r22, r28
    33de:	6f 5f       	subi	r22, 0xFF	; 255
    33e0:	7f 4f       	sbci	r23, 0xFF	; 255
    33e2:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <xQueueCO2>
    33e6:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <xQueueCO2+0x1>
    33ea:	0e 94 d7 05 	call	0xbae	; 0xbae <xQueueGenericSend>
}
    33ee:	0f 90       	pop	r0
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	df 91       	pop	r29
    3400:	cf 91       	pop	r28
    3402:	0f 91       	pop	r16
    3404:	08 95       	ret

00003406 <initializeCO2Queue>:
#include "../semaphore/header/testOutprint.h"

QueueHandle_t xQueueCO2;

void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
    3406:	40 e0       	ldi	r20, 0x00	; 0
    3408:	62 e0       	ldi	r22, 0x02	; 2
    340a:	8a e0       	ldi	r24, 0x0A	; 10
    340c:	0e 94 b4 05 	call	0xb68	; 0xb68 <xQueueGenericCreate>
    3410:	90 93 5c 15 	sts	0x155C, r25	; 0x80155c <xQueueCO2+0x1>
    3414:	80 93 5b 15 	sts	0x155B, r24	; 0x80155b <xQueueCO2>
    3418:	08 95       	ret

0000341a <co2Measure>:
}

void co2Measure() {
	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
    341a:	0e 94 ef 23 	call	0x47de	; 0x47de <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
    341e:	81 11       	cpse	r24, r1
    3420:	05 c0       	rjmp	.+10     	; 0x342c <co2Measure+0x12>
	{
		mh_z19_injectCallBack(enqueueCO2Measure);
    3422:	80 ed       	ldi	r24, 0xD0	; 208
    3424:	99 e1       	ldi	r25, 0x19	; 25
    3426:	0c 94 ea 23 	jmp	0x47d4	; 0x47d4 <mh_z19_injectCallBack>
    342a:	08 95       	ret
	}
	else
	{
		puts("Det gik galt");
    342c:	86 ec       	ldi	r24, 0xC6	; 198
    342e:	92 e0       	ldi	r25, 0x02	; 2
    3430:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <puts>
		enqueueCO2Measure(0);
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	b3 cf       	rjmp	.-154    	; 0x33a0 <enqueueCO2Measure>
    343a:	08 95       	ret

0000343c <dequeueCO2Measure>:
	}
}


uint16_t dequeueCO2Measure(){
    343c:	cf 93       	push	r28
    343e:	df 93       	push	r29
    3440:	1f 92       	push	r1
    3442:	1f 92       	push	r1
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	
	xQueueReceive(xQueueCO2, &ppm, 1500);
    3448:	2c ed       	ldi	r18, 0xDC	; 220
    344a:	35 e0       	ldi	r19, 0x05	; 5
    344c:	40 e0       	ldi	r20, 0x00	; 0
    344e:	50 e0       	ldi	r21, 0x00	; 0
    3450:	be 01       	movw	r22, r28
    3452:	6f 5f       	subi	r22, 0xFF	; 255
    3454:	7f 4f       	sbci	r23, 0xFF	; 255
    3456:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <xQueueCO2>
    345a:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <xQueueCO2+0x1>
    345e:	0e 94 a4 06 	call	0xd48	; 0xd48 <xQueueReceive>
	
	sprintf(printstring, "Removing CO2: %d from the queue \n", ppm);
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	8f 93       	push	r24
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	8f 93       	push	r24
    346a:	83 ed       	ldi	r24, 0xD3	; 211
    346c:	92 e0       	ldi	r25, 0x02	; 2
    346e:	9f 93       	push	r25
    3470:	8f 93       	push	r24
    3472:	87 ef       	ldi	r24, 0xF7	; 247
    3474:	94 e1       	ldi	r25, 0x14	; 20
    3476:	9f 93       	push	r25
    3478:	8f 93       	push	r24
    347a:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
	test_outprint(printstring);
    347e:	87 ef       	ldi	r24, 0xF7	; 247
    3480:	94 e1       	ldi	r25, 0x14	; 20
    3482:	fa d2       	rcall	.+1524   	; 0x3a78 <test_outprint>

	return ppm;
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	9a 81       	ldd	r25, Y+2	; 0x02
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	08 95       	ret

0000349e <initializeTempHumQueues>:
QueueHandle_t xQueueHum;


void initializeTempHumQueues()
{
	xQueueTemp = xQueueCreate(10, sizeof(int16_t));
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	62 e0       	ldi	r22, 0x02	; 2
    34a2:	8a e0       	ldi	r24, 0x0A	; 10
    34a4:	0e 94 b4 05 	call	0xb68	; 0xb68 <xQueueGenericCreate>
    34a8:	90 93 60 15 	sts	0x1560, r25	; 0x801560 <xQueueTemp+0x1>
    34ac:	80 93 5f 15 	sts	0x155F, r24	; 0x80155f <xQueueTemp>
	xQueueHum = xQueueCreate(10, sizeof(uint16_t));
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	62 e0       	ldi	r22, 0x02	; 2
    34b4:	8a e0       	ldi	r24, 0x0A	; 10
    34b6:	0e 94 b4 05 	call	0xb68	; 0xb68 <xQueueGenericCreate>
    34ba:	90 93 5e 15 	sts	0x155E, r25	; 0x80155e <xQueueHum+0x1>
    34be:	80 93 5d 15 	sts	0x155D, r24	; 0x80155d <xQueueHum>
    34c2:	08 95       	ret

000034c4 <enqueueTemperature>:
}

void enqueueTemperature(int16_t temp){
    34c4:	0f 93       	push	r16
    34c6:	cf 93       	push	r28
    34c8:	df 93       	push	r29
    34ca:	1f 92       	push	r1
    34cc:	1f 92       	push	r1
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	9a 83       	std	Y+2, r25	; 0x02
    34d4:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting temperature: %d in the queue \n", temp);
    34d6:	8a 81       	ldd	r24, Y+2	; 0x02
    34d8:	8f 93       	push	r24
    34da:	89 81       	ldd	r24, Y+1	; 0x01
    34dc:	8f 93       	push	r24
    34de:	85 ef       	ldi	r24, 0xF5	; 245
    34e0:	92 e0       	ldi	r25, 0x02	; 2
    34e2:	9f 93       	push	r25
    34e4:	8f 93       	push	r24
    34e6:	87 ef       	ldi	r24, 0xF7	; 247
    34e8:	94 e1       	ldi	r25, 0x14	; 20
    34ea:	9f 93       	push	r25
    34ec:	8f 93       	push	r24
    34ee:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
	test_outprint(printstring);
    34f2:	87 ef       	ldi	r24, 0xF7	; 247
    34f4:	94 e1       	ldi	r25, 0x14	; 20
    34f6:	c0 d2       	rcall	.+1408   	; 0x3a78 <test_outprint>
	
	xQueueSend(xQueueTemp, (void*)&temp, portMAX_DELAY);
    34f8:	00 e0       	ldi	r16, 0x00	; 0
    34fa:	2f ef       	ldi	r18, 0xFF	; 255
    34fc:	3f ef       	ldi	r19, 0xFF	; 255
    34fe:	a9 01       	movw	r20, r18
    3500:	be 01       	movw	r22, r28
    3502:	6f 5f       	subi	r22, 0xFF	; 255
    3504:	7f 4f       	sbci	r23, 0xFF	; 255
    3506:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <xQueueTemp>
    350a:	90 91 60 15 	lds	r25, 0x1560	; 0x801560 <xQueueTemp+0x1>
    350e:	0e 94 d7 05 	call	0xbae	; 0xbae <xQueueGenericSend>
}
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	df 91       	pop	r29
    3524:	cf 91       	pop	r28
    3526:	0f 91       	pop	r16
    3528:	08 95       	ret

0000352a <enqueueHumidity>:

void enqueueHumidity(uint16_t hum){
    352a:	0f 93       	push	r16
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	1f 92       	push	r1
    3532:	1f 92       	push	r1
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	9a 83       	std	Y+2, r25	; 0x02
    353a:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting humidity: %d in the queue \n", hum);
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	8f 93       	push	r24
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	8f 93       	push	r24
    3544:	8c e1       	ldi	r24, 0x1C	; 28
    3546:	93 e0       	ldi	r25, 0x03	; 3
    3548:	9f 93       	push	r25
    354a:	8f 93       	push	r24
    354c:	87 ef       	ldi	r24, 0xF7	; 247
    354e:	94 e1       	ldi	r25, 0x14	; 20
    3550:	9f 93       	push	r25
    3552:	8f 93       	push	r24
    3554:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
	test_outprint(printstring);
    3558:	87 ef       	ldi	r24, 0xF7	; 247
    355a:	94 e1       	ldi	r25, 0x14	; 20
    355c:	8d d2       	rcall	.+1306   	; 0x3a78 <test_outprint>
	
	xQueueSend(xQueueHum, (void*)&hum, portMAX_DELAY);	
    355e:	00 e0       	ldi	r16, 0x00	; 0
    3560:	2f ef       	ldi	r18, 0xFF	; 255
    3562:	3f ef       	ldi	r19, 0xFF	; 255
    3564:	a9 01       	movw	r20, r18
    3566:	be 01       	movw	r22, r28
    3568:	6f 5f       	subi	r22, 0xFF	; 255
    356a:	7f 4f       	sbci	r23, 0xFF	; 255
    356c:	80 91 5d 15 	lds	r24, 0x155D	; 0x80155d <xQueueHum>
    3570:	90 91 5e 15 	lds	r25, 0x155E	; 0x80155e <xQueueHum+0x1>
    3574:	0e 94 d7 05 	call	0xbae	; 0xbae <xQueueGenericSend>
}
    3578:	0f 90       	pop	r0
    357a:	0f 90       	pop	r0
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	0f 91       	pop	r16
    358e:	08 95       	ret

00003590 <tempHumMeasure>:


void tempHumMeasure()
{
    3590:	ef 92       	push	r14
    3592:	ff 92       	push	r15
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	00 d0       	rcall	.+0      	; 0x359e <tempHumMeasure+0xe>
    359e:	1f 92       	push	r1
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5/portTICK_PERIOD_MS; 
	const TickType_t xFrequency2 = 50/portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    35a4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskGetTickCount>
    35a8:	69 83       	std	Y+1, r22	; 0x01
    35aa:	7a 83       	std	Y+2, r23	; 0x02
    35ac:	8b 83       	std	Y+3, r24	; 0x03
    35ae:	9c 83       	std	Y+4, r25	; 0x04

	if(HIH8120_OK != hih8120_wakeup())
    35b0:	d0 d3       	rcall	.+1952   	; 0x3d52 <hih8120_wakeup>
    35b2:	88 23       	and	r24, r24
    35b4:	21 f0       	breq	.+8      	; 0x35be <tempHumMeasure+0x2e>
	{
		puts("Wakeup gik galt");
    35b6:	80 e4       	ldi	r24, 0x40	; 64
    35b8:	93 e0       	ldi	r25, 0x03	; 3
    35ba:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <puts>
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency2 );
    35be:	43 e0       	ldi	r20, 0x03	; 3
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	70 e0       	ldi	r23, 0x00	; 0
    35c6:	ce 01       	movw	r24, r28
    35c8:	01 96       	adiw	r24, 0x01	; 1
    35ca:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <xTaskDelayUntil>
	if(HIH8120_OK != hih8120_measure())
    35ce:	d6 d3       	rcall	.+1964   	; 0x3d7c <hih8120_measure>
    35d0:	88 23       	and	r24, r24
    35d2:	51 f0       	breq	.+20     	; 0x35e8 <tempHumMeasure+0x58>
	{
		puts("Measure gik galt");
    35d4:	80 e5       	ldi	r24, 0x50	; 80
    35d6:	93 e0       	ldi	r25, 0x03	; 3
    35d8:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <puts>
		enqueueHumidity(0);
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	a4 df       	rcall	.-184    	; 0x352a <enqueueHumidity>
		enqueueTemperature(0);
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	6e df       	rcall	.-292    	; 0x34c4 <enqueueTemperature>
    35e8:	40 e0       	ldi	r20, 0x00	; 0
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    35ea:	50 e0       	ldi	r21, 0x00	; 0
    35ec:	ba 01       	movw	r22, r20
    35ee:	ce 01       	movw	r24, r28
    35f0:	01 96       	adiw	r24, 0x01	; 1
    35f2:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <xTaskDelayUntil>
	
	uint16_t humidity = hih8120_getHumidity();
    35f6:	d3 d3       	rcall	.+1958   	; 0x3d9e <hih8120_getHumidity>
    35f8:	12 d3       	rcall	.+1572   	; 0x3c1e <__fixunssfsi>
    35fa:	8b 01       	movw	r16, r22
	int16_t temp = hih8120_getTemperature();
    35fc:	e5 d3       	rcall	.+1994   	; 0x3dc8 <hih8120_getTemperature>
    35fe:	0a d3       	rcall	.+1556   	; 0x3c14 <__fixsfsi>
    3600:	7b 01       	movw	r14, r22
    3602:	00 36       	cpi	r16, 0x60	; 96
    3604:	11 05       	cpc	r17, r1
	
	if (humidity > 95 && temp > 100) {
    3606:	88 f0       	brcs	.+34     	; 0x362a <tempHumMeasure+0x9a>
    3608:	85 e6       	ldi	r24, 0x65	; 101
    360a:	e8 16       	cp	r14, r24
    360c:	f1 04       	cpc	r15, r1
    360e:	6c f0       	brlt	.+26     	; 0x362a <tempHumMeasure+0x9a>
    3610:	40 e0       	ldi	r20, 0x00	; 0
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	ba 01       	movw	r22, r20
    3616:	ce 01       	movw	r24, r28
    3618:	01 96       	adiw	r24, 0x01	; 1
			
		humidity = hih8120_getHumidity();
    361a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <xTaskDelayUntil>
    361e:	bf d3       	rcall	.+1918   	; 0x3d9e <hih8120_getHumidity>
    3620:	fe d2       	rcall	.+1532   	; 0x3c1e <__fixunssfsi>
		temp = hih8120_getTemperature();
    3622:	8b 01       	movw	r16, r22
    3624:	d1 d3       	rcall	.+1954   	; 0x3dc8 <hih8120_getTemperature>
    3626:	f6 d2       	rcall	.+1516   	; 0x3c14 <__fixsfsi>
    3628:	7b 01       	movw	r14, r22
    362a:	c8 01       	movw	r24, r16
	}
	
	enqueueHumidity(humidity);
    362c:	7e df       	rcall	.-260    	; 0x352a <enqueueHumidity>
    362e:	c7 01       	movw	r24, r14
    3630:	49 df       	rcall	.-366    	; 0x34c4 <enqueueTemperature>
	enqueueTemperature(temp);
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
}
    3638:	0f 90       	pop	r0
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	ff 90       	pop	r15
    3644:	ef 90       	pop	r14
    3646:	08 95       	ret

00003648 <dequeueTempMeasure>:
    3648:	cf 93       	push	r28
    364a:	df 93       	push	r29
    364c:	1f 92       	push	r1


int16_t dequeueTempMeasure(){
    364e:	1f 92       	push	r1
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	
	xQueueReceive(xQueueTemp, &temp, 1500);
    3654:	2c ed       	ldi	r18, 0xDC	; 220
    3656:	35 e0       	ldi	r19, 0x05	; 5
    3658:	40 e0       	ldi	r20, 0x00	; 0
    365a:	50 e0       	ldi	r21, 0x00	; 0
    365c:	be 01       	movw	r22, r28
    365e:	6f 5f       	subi	r22, 0xFF	; 255
    3660:	7f 4f       	sbci	r23, 0xFF	; 255
    3662:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <xQueueTemp>
    3666:	90 91 60 15 	lds	r25, 0x1560	; 0x801560 <xQueueTemp+0x1>
    366a:	0e 94 a4 06 	call	0xd48	; 0xd48 <xQueueReceive>
	
	sprintf(printstring, "Removing temperature: %d from the queue \n", temp);
    366e:	8a 81       	ldd	r24, Y+2	; 0x02
    3670:	8f 93       	push	r24
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	8f 93       	push	r24
    3676:	81 e6       	ldi	r24, 0x61	; 97
    3678:	93 e0       	ldi	r25, 0x03	; 3
    367a:	9f 93       	push	r25
    367c:	8f 93       	push	r24
    367e:	87 ef       	ldi	r24, 0xF7	; 247
    3680:	94 e1       	ldi	r25, 0x14	; 20
    3682:	9f 93       	push	r25
    3684:	8f 93       	push	r24
    3686:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
	test_outprint(printstring);
    368a:	87 ef       	ldi	r24, 0xF7	; 247
    368c:	94 e1       	ldi	r25, 0x14	; 20
    368e:	f4 d1       	rcall	.+1000   	; 0x3a78 <test_outprint>
	
	return temp;
    3690:	0f 90       	pop	r0
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
}
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	08 95       	ret

000036aa <dequeueHumidityMeasure>:

uint16_t dequeueHumidityMeasure(){
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	1f 92       	push	r1
    36b0:	1f 92       	push	r1
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62
	uint16_t hum;
	
	xQueueReceive(xQueueHum, &hum, 1500);
    36b6:	2c ed       	ldi	r18, 0xDC	; 220
    36b8:	35 e0       	ldi	r19, 0x05	; 5
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	be 01       	movw	r22, r28
    36c0:	6f 5f       	subi	r22, 0xFF	; 255
    36c2:	7f 4f       	sbci	r23, 0xFF	; 255
    36c4:	80 91 5d 15 	lds	r24, 0x155D	; 0x80155d <xQueueHum>
    36c8:	90 91 5e 15 	lds	r25, 0x155E	; 0x80155e <xQueueHum+0x1>
    36cc:	0e 94 a4 06 	call	0xd48	; 0xd48 <xQueueReceive>
	
	sprintf(printstring, "Removing humidity: %d from the queue \n", hum);
    36d0:	8a 81       	ldd	r24, Y+2	; 0x02
    36d2:	8f 93       	push	r24
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	8f 93       	push	r24
    36d8:	8b e8       	ldi	r24, 0x8B	; 139
    36da:	93 e0       	ldi	r25, 0x03	; 3
    36dc:	9f 93       	push	r25
    36de:	8f 93       	push	r24
    36e0:	87 ef       	ldi	r24, 0xF7	; 247
    36e2:	94 e1       	ldi	r25, 0x14	; 20
    36e4:	9f 93       	push	r25
    36e6:	8f 93       	push	r24
    36e8:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
	test_outprint(printstring);
    36ec:	87 ef       	ldi	r24, 0xF7	; 247
    36ee:	94 e1       	ldi	r25, 0x14	; 20
    36f0:	c3 d1       	rcall	.+902    	; 0x3a78 <test_outprint>
		
	return hum;
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	9a 81       	ldd	r25, Y+2	; 0x02
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	08 95       	ret

0000370c <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    370c:	0f 93       	push	r16
    370e:	1f 93       	push	r17
    3710:	cf 93       	push	r28
    3712:	df 93       	push	r29
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	64 97       	sbiw	r28, 0x14	; 20
    371a:	0f b6       	in	r0, 0x3f	; 63
    371c:	f8 94       	cli
    371e:	de bf       	out	0x3e, r29	; 62
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	cd bf       	out	0x3d, r28	; 61

	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	0e 94 2b 29 	call	0x5256	; 0x5256 <status_leds_slowBlink>

	// Factory reset the transceiver
	//sprintf(printstring, "FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
	//test_outprint(printstring);
	
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    372a:	d6 d4       	rcall	.+2476   	; 0x40d8 <lora_driver_rn2483FactoryReset>
    372c:	52 d7       	rcall	.+3748   	; 0x45d2 <lora_driver_mapReturnCodeToText>
    372e:	9f 93       	push	r25
    3730:	8f 93       	push	r24
    3732:	82 eb       	ldi	r24, 0xB2	; 178
    3734:	93 e0       	ldi	r25, 0x03	; 3
    3736:	9f 93       	push	r25
    3738:	8f 93       	push	r24
    373a:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>
	
	// Configure to EU868 LoRaWAN standards
	//sprintf(printstring, "Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
	//test_outprint(printstring);
	
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    373e:	4a d6       	rcall	.+3220   	; 0x43d4 <lora_driver_configureToEu868>
    3740:	48 d7       	rcall	.+3728   	; 0x45d2 <lora_driver_mapReturnCodeToText>
    3742:	9f 93       	push	r25
    3744:	8f 93       	push	r24
    3746:	85 ec       	ldi	r24, 0xC5	; 197
    3748:	93 e0       	ldi	r25, 0x03	; 3
    374a:	9f 93       	push	r25
    374c:	8f 93       	push	r24
    374e:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>
    3752:	8e 01       	movw	r16, r28
    3754:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI	
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3756:	1f 4f       	sbci	r17, 0xFF	; 255
    3758:	c8 01       	movw	r24, r16
    375a:	d0 d4       	rcall	.+2464   	; 0x40fc <lora_driver_getRn2483Hweui>
    375c:	3a d7       	rcall	.+3700   	; 0x45d2 <lora_driver_mapReturnCodeToText>
	
	//sprintf(printstring, "Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
	//test_outprint(printstring);

	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    375e:	1f 93       	push	r17
    3760:	0f 93       	push	r16
    3762:	9f 93       	push	r25
    3764:	8f 93       	push	r24
    3766:	8e ed       	ldi	r24, 0xDE	; 222
    3768:	93 e0       	ldi	r25, 0x03	; 3
    376a:	9f 93       	push	r25
    376c:	8f 93       	push	r24
    376e:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	//sprintf(printstring, "Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
	//test_outprint(printstring);
	
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3772:	c8 01       	movw	r24, r16
    3774:	df d4       	rcall	.+2494   	; 0x4134 <lora_driver_setDeviceIdentifier>
    3776:	2d d7       	rcall	.+3674   	; 0x45d2 <lora_driver_mapReturnCodeToText>
    3778:	9f 93       	push	r25
    377a:	8f 93       	push	r24
    377c:	1f 93       	push	r17
    377e:	0f 93       	push	r16
    3780:	82 ef       	ldi	r24, 0xF2	; 242
    3782:	93 e0       	ldi	r25, 0x03	; 3
    3784:	9f 93       	push	r25
    3786:	8f 93       	push	r24
    3788:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	//sprintf(printstring, "Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
	//test_outprint(printstring);
	
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    378c:	a8 01       	movw	r20, r16
    378e:	67 e0       	ldi	r22, 0x07	; 7
    3790:	74 e0       	ldi	r23, 0x04	; 4
    3792:	88 e2       	ldi	r24, 0x28	; 40
    3794:	94 e0       	ldi	r25, 0x04	; 4
    3796:	fc d6       	rcall	.+3576   	; 0x4590 <lora_driver_setOtaaIdentity>
    3798:	1c d7       	rcall	.+3640   	; 0x45d2 <lora_driver_mapReturnCodeToText>
    379a:	9f 93       	push	r25
    379c:	8f 93       	push	r24
    379e:	1f 93       	push	r17
    37a0:	0f 93       	push	r16
    37a2:	87 e0       	ldi	r24, 0x07	; 7
    37a4:	94 e0       	ldi	r25, 0x04	; 4
    37a6:	9f 93       	push	r25
    37a8:	8f 93       	push	r24
    37aa:	88 e2       	ldi	r24, 0x28	; 40
    37ac:	94 e0       	ldi	r25, 0x04	; 4
    37ae:	9f 93       	push	r25
    37b0:	8f 93       	push	r24
    37b2:	89 e3       	ldi	r24, 0x39	; 57
    37b4:	94 e0       	ldi	r25, 0x04	; 4
    37b6:	9f 93       	push	r25
    37b8:	8f 93       	push	r24
    37ba:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>

	// Save all the MAC settings in the transceiver
	//sprintf(printstring, "Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
	//test_outprint(printstring);
	
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    37be:	ed d4       	rcall	.+2522   	; 0x419a <lora_driver_saveMac>
    37c0:	08 d7       	rcall	.+3600   	; 0x45d2 <lora_driver_mapReturnCodeToText>
    37c2:	9f 93       	push	r25
    37c4:	8f 93       	push	r24
    37c6:	8f e6       	ldi	r24, 0x6F	; 111
    37c8:	94 e0       	ldi	r25, 0x04	; 4
    37ca:	9f 93       	push	r25
    37cc:	8f 93       	push	r24
    37ce:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>

	// Enable Adaptive Data Rate
	//sprintf(printstring, "Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
	//test_outprint(printstring);
	
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	f8 94       	cli
    37d6:	de bf       	out	0x3e, r29	; 62
    37d8:	0f be       	out	0x3f, r0	; 63
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	d7 d5       	rcall	.+2990   	; 0x438e <lora_driver_setAdaptiveDataRate>
    37e0:	f8 d6       	rcall	.+3568   	; 0x45d2 <lora_driver_mapReturnCodeToText>
    37e2:	9f 93       	push	r25
    37e4:	8f 93       	push	r24
    37e6:	8e e7       	ldi	r24, 0x7E	; 126
    37e8:	94 e0       	ldi	r25, 0x04	; 4
    37ea:	9f 93       	push	r25
    37ec:	8f 93       	push	r24
    37ee:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	//sprintf(printstring, "Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
	//test_outprint(printstring);
	
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    37f2:	84 ef       	ldi	r24, 0xF4	; 244
    37f4:	91 e0       	ldi	r25, 0x01	; 1
    37f6:	d6 d5       	rcall	.+2988   	; 0x43a4 <lora_driver_setReceiveDelay>
    37f8:	ec d6       	rcall	.+3544   	; 0x45d2 <lora_driver_mapReturnCodeToText>
    37fa:	9f 93       	push	r25
    37fc:	8f 93       	push	r24
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	8f 93       	push	r24
    3802:	84 ef       	ldi	r24, 0xF4	; 244
    3804:	8f 93       	push	r24
    3806:	8f e9       	ldi	r24, 0x9F	; 159
    3808:	94 e0       	ldi	r25, 0x04	; 4
    380a:	9f 93       	push	r25
    380c:	8f 93       	push	r24
    380e:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    381c:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	c2 d4       	rcall	.+2436   	; 0x41a6 <lora_driver_join>
    3822:	08 2f       	mov	r16, r24
    3824:	d6 d6       	rcall	.+3500   	; 0x45d2 <lora_driver_mapReturnCodeToText>
		
		//sprintf(printstring, "Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
		//test_outprint(printstring);
		
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3826:	9f 93       	push	r25
    3828:	8f 93       	push	r24
    382a:	1f 92       	push	r1
    382c:	1f 93       	push	r17
    382e:	8f eb       	ldi	r24, 0xBF	; 191
    3830:	94 e0       	ldi	r25, 0x04	; 4
    3832:	9f 93       	push	r25
    3834:	8f 93       	push	r24
    3836:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	08 30       	cpi	r16, 0x08	; 8
    3848:	59 f0       	breq	.+22     	; 0x3860 <_lora_setup+0x154>
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	0e 94 8f 29 	call	0x531e	; 0x531e <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3850:	66 e3       	ldi	r22, 0x36	; 54
    3852:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskDelay>
    385c:	11 50       	subi	r17, 0x01	; 1
    385e:	f9 f6       	brne	.-66     	; 0x381e <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3860:	08 30       	cpi	r16, 0x08	; 8
    3862:	41 f4       	brne	.+16     	; 0x3874 <_lora_setup+0x168>

	if (rc == LORA_ACCEPTED)
    3864:	8f ed       	ldi	r24, 0xDF	; 223
    3866:	94 e0       	ldi	r25, 0x04	; 4
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		printf("\t We have been accepted \n");
    3868:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <puts>
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	0e 94 71 29 	call	0x52e2	; 0x52e2 <status_leds_ledOn>
		status_leds_ledOn(led_ST2); // OPTIONAL
    3872:	09 c0       	rjmp	.+18     	; 0x3886 <_lora_setup+0x17a>
    3874:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3876:	0e 94 80 29 	call	0x5300	; 0x5300 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	0e 94 4e 29 	call	0x529c	; 0x529c <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3880:	0e 94 bf 03 	call	0x77e	; 0x77e <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3884:	fd cf       	rjmp	.-6      	; 0x3880 <_lora_setup+0x174>
    3886:	64 96       	adiw	r28, 0x14	; 20
    3888:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    388a:	f8 94       	cli
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	df 91       	pop	r29
    3894:	cf 91       	pop	r28
    3896:	1f 91       	pop	r17
    3898:	0f 91       	pop	r16
    389a:	08 95       	ret

0000389c <lora_handler_task>:
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    38a0:	00 d0       	rcall	.+0      	; 0x38a2 <lora_handler_task+0x6>
    38a2:	1f 92       	push	r1
    38a4:	cd b7       	in	r28, 0x3d	; 61
    38a6:	de b7       	in	r29, 0x3e	; 62

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	08 d4       	rcall	.+2064   	; 0x40bc <lora_driver_resetRn2483>
	vTaskDelay(2);
    38ac:	62 e0       	ldi	r22, 0x02	; 2
    38ae:	70 e0       	ldi	r23, 0x00	; 0
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskDelay>
	lora_driver_resetRn2483(0);
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	00 d4       	rcall	.+2048   	; 0x40bc <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    38bc:	66 e9       	ldi	r22, 0x96	; 150
    38be:	70 e0       	ldi	r23, 0x00	; 0
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    38c8:	b2 d3       	rcall	.+1892   	; 0x402e <lora_driver_flushBuffers>

	_lora_setup();
    38ca:	20 df       	rcall	.-448    	; 0x370c <_lora_setup>
    38cc:	e5 e7       	ldi	r30, 0x75	; 117

	// DEFINING SIZE OF PAYLOAD
	_uplink_payload.len = 8;
    38ce:	f3 e1       	ldi	r31, 0x13	; 19
    38d0:	88 e0       	ldi	r24, 0x08	; 8
    38d2:	81 83       	std	Z+1, r24	; 0x01
    38d4:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    38d6:	80 83       	st	Z, r24
    38d8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // UNDER TESTING 30000 (30 sec) Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    38dc:	69 83       	std	Y+1, r22	; 0x01
    38de:	7a 83       	std	Y+2, r23	; 0x02
    38e0:	8b 83       	std	Y+3, r24	; 0x03
    38e2:	9c 83       	std	Y+4, r25	; 0x04
    38e4:	88 ef       	ldi	r24, 0xF8	; 248

	for(;;)
	{
		uint16_t growbroId = 1;
			
		puts("\t going into delay");
    38e6:	94 e0       	ldi	r25, 0x04	; 4
    38e8:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <puts>
    38ec:	48 ea       	ldi	r20, 0xA8	; 168
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    38ee:	58 e4       	ldi	r21, 0x48	; 72
    38f0:	60 e0       	ldi	r22, 0x00	; 0
    38f2:	70 e0       	ldi	r23, 0x00	; 0
    38f4:	ce 01       	movw	r24, r28
    38f6:	01 96       	adiw	r24, 0x01	; 1
    38f8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <xTaskDelayUntil>
    38fc:	0e 94 85 01 	call	0x30a	; 0x30a <dequeueSharedData>
		
		// Creating struct and dequeueing data
		SharedData_t sharedData;
		sharedData = dequeueSharedData();
    3900:	8c 01       	movw	r16, r24
    3902:	dc 01       	movw	r26, r24
		
		sprintf(printstring, "DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
    3904:	13 96       	adiw	r26, 0x03	; 3
    3906:	8c 91       	ld	r24, X
    3908:	13 97       	sbiw	r26, 0x03	; 3
    390a:	8f 93       	push	r24
    390c:	12 96       	adiw	r26, 0x02	; 2
    390e:	8c 91       	ld	r24, X
    3910:	12 97       	sbiw	r26, 0x02	; 2
    3912:	8f 93       	push	r24
    3914:	11 96       	adiw	r26, 0x01	; 1
    3916:	8c 91       	ld	r24, X
    3918:	11 97       	sbiw	r26, 0x01	; 1
    391a:	8f 93       	push	r24
    391c:	8c 91       	ld	r24, X
    391e:	8f 93       	push	r24
    3920:	15 96       	adiw	r26, 0x05	; 5
    3922:	8c 91       	ld	r24, X
    3924:	15 97       	sbiw	r26, 0x05	; 5
    3926:	8f 93       	push	r24
    3928:	14 96       	adiw	r26, 0x04	; 4
    392a:	8c 91       	ld	r24, X
    392c:	8f 93       	push	r24
    392e:	8b e0       	ldi	r24, 0x0B	; 11
    3930:	95 e0       	ldi	r25, 0x05	; 5
    3932:	9f 93       	push	r25
    3934:	8f 93       	push	r24
    3936:	0f 2e       	mov	r0, r31
    3938:	f7 ef       	ldi	r31, 0xF7	; 247
    393a:	ef 2e       	mov	r14, r31
    393c:	f4 e1       	ldi	r31, 0x14	; 20
    393e:	ff 2e       	mov	r15, r31
    3940:	f0 2d       	mov	r31, r0
    3942:	ff 92       	push	r15
    3944:	ef 92       	push	r14
    3946:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
		test_outprint(printstring);
    394a:	c7 01       	movw	r24, r14
    394c:	95 d0       	rcall	.+298    	; 0x3a78 <test_outprint>
    394e:	e5 e7       	ldi	r30, 0x75	; 117
		
		//printf("DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
		
		// CREATING OUR OWN PAYLOAD
		_uplink_payload.bytes[0] = growbroId >> 8;
    3950:	f3 e1       	ldi	r31, 0x13	; 19
    3952:	12 82       	std	Z+2, r1	; 0x02
    3954:	81 e0       	ldi	r24, 0x01	; 1
		_uplink_payload.bytes[1] = growbroId & 0xFF;
    3956:	83 83       	std	Z+3, r24	; 0x03
    3958:	d8 01       	movw	r26, r16
		_uplink_payload.bytes[2] = sharedData->co2 >> 8;
    395a:	11 96       	adiw	r26, 0x01	; 1
    395c:	8c 91       	ld	r24, X
    395e:	11 97       	sbiw	r26, 0x01	; 1
    3960:	84 83       	std	Z+4, r24	; 0x04
    3962:	8c 91       	ld	r24, X
		_uplink_payload.bytes[3] = sharedData->co2 & 0xFF;
    3964:	85 83       	std	Z+5, r24	; 0x05
    3966:	15 96       	adiw	r26, 0x05	; 5
		_uplink_payload.bytes[4] = sharedData->humidity >> 8;
    3968:	8c 91       	ld	r24, X
    396a:	15 97       	sbiw	r26, 0x05	; 5
    396c:	86 83       	std	Z+6, r24	; 0x06
    396e:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[5] = sharedData->humidity & 0xFF;
    3970:	8c 91       	ld	r24, X
    3972:	14 97       	sbiw	r26, 0x04	; 4
    3974:	87 83       	std	Z+7, r24	; 0x07
    3976:	13 96       	adiw	r26, 0x03	; 3
		_uplink_payload.bytes[6] = sharedData->temperature >> 8;
    3978:	8c 91       	ld	r24, X
    397a:	13 97       	sbiw	r26, 0x03	; 3
    397c:	80 87       	std	Z+8, r24	; 0x08
    397e:	12 96       	adiw	r26, 0x02	; 2
		_uplink_payload.bytes[7] = sharedData->temperature & 0xFF;
    3980:	8c 91       	ld	r24, X
    3982:	81 87       	std	Z+9, r24	; 0x09
    3984:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3986:	0e 94 a1 29 	call	0x5342	; 0x5342 <status_leds_shortPuls>
		
		// SENDING PAYLOAD
		//printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
		
		sprintf(printstring, "Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    398a:	65 e7       	ldi	r22, 0x75	; 117
    398c:	73 e1       	ldi	r23, 0x13	; 19
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	33 d4       	rcall	.+2150   	; 0x41f8 <lora_driver_sendUploadMessage>
    3992:	1f d6       	rcall	.+3134   	; 0x45d2 <lora_driver_mapReturnCodeToText>
    3994:	9f 93       	push	r25
    3996:	8f 93       	push	r24
    3998:	86 e3       	ldi	r24, 0x36	; 54
    399a:	95 e0       	ldi	r25, 0x05	; 5
    399c:	9f 93       	push	r25
    399e:	8f 93       	push	r24
    39a0:	ff 92       	push	r15
    39a2:	ef 92       	push	r14
    39a4:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
    39a8:	c7 01       	movw	r24, r14
		test_outprint(printstring);
    39aa:	66 d0       	rcall	.+204    	; 0x3a78 <test_outprint>
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	96 cf       	rjmp	.-212    	; 0x38e4 <lora_handler_task+0x48>

000039b8 <task_download>:
    39b8:	cf 93       	push	r28
    39ba:	df 93       	push	r29
	}

}

void task_download( void *pvParameters )
{
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
    39c0:	66 97       	sbiw	r28, 0x16	; 22
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	f8 94       	cli
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	0f be       	out	0x3f, r0	; 63
    39ca:	cd bf       	out	0x3d, r28	; 61

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	76 d3       	rcall	.+1772   	; 0x40bc <lora_driver_resetRn2483>
	vTaskDelay(2);
    39d0:	62 e0       	ldi	r22, 0x02	; 2
    39d2:	70 e0       	ldi	r23, 0x00	; 0
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskDelay>
	lora_driver_resetRn2483(0);
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	6e d3       	rcall	.+1756   	; 0x40bc <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    39e0:	66 e9       	ldi	r22, 0x96	; 150
    39e2:	70 e0       	ldi	r23, 0x00	; 0
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    39ec:	20 d3       	rcall	.+1600   	; 0x402e <lora_driver_flushBuffers>
	//int8_t percent = 100;
	//rc_servo_setPosition(servoNo, percent);
	
	
	lora_driver_payload_t downlinkPayload;
	downlinkPayload.portNo = 2;
    39ee:	82 e0       	ldi	r24, 0x02	; 2
    39f0:	89 83       	std	Y+1, r24	; 0x01
	downlinkPayload.len = 4;
    39f2:	84 e0       	ldi	r24, 0x04	; 4
    39f4:	8a 83       	std	Y+2, r24	; 0x02
	uint16_t recieve;
	for(;;)
	{	
		xMessageBufferReceive(downlinkMessageBufferHandle, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    39f6:	0f ef       	ldi	r16, 0xFF	; 255
    39f8:	1f ef       	ldi	r17, 0xFF	; 255
    39fa:	98 01       	movw	r18, r16
    39fc:	46 e1       	ldi	r20, 0x16	; 22
    39fe:	50 e0       	ldi	r21, 0x00	; 0
    3a00:	be 01       	movw	r22, r28
    3a02:	6f 5f       	subi	r22, 0xFF	; 255
    3a04:	7f 4f       	sbci	r23, 0xFF	; 255
    3a06:	80 91 61 15 	lds	r24, 0x1561	; 0x801561 <downlinkMessageBufferHandle>
    3a0a:	90 91 62 15 	lds	r25, 0x1562	; 0x801562 <downlinkMessageBufferHandle+0x1>
    3a0e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <xStreamBufferReceive>
		printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len); // Just for Debug
    3a12:	9a 81       	ldd	r25, Y+2	; 0x02
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
    3a16:	1f 92       	push	r1
    3a18:	9f 93       	push	r25
    3a1a:	1f 92       	push	r1
    3a1c:	8f 93       	push	r24
    3a1e:	8b e4       	ldi	r24, 0x4B	; 75
    3a20:	95 e0       	ldi	r25, 0x05	; 5
    3a22:	9f 93       	push	r25
    3a24:	8f 93       	push	r24
    3a26:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	df cf       	rjmp	.-66     	; 0x39f6 <task_download+0x3e>

00003a38 <lora_handler_initialise>:
void task_download( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3a38:	ef 92       	push	r14
    3a3a:	ff 92       	push	r15
    3a3c:	0f 93       	push	r16
    3a3e:	cf 93       	push	r28
	xTaskCreate(
    3a40:	e1 2c       	mov	r14, r1
    3a42:	f1 2c       	mov	r15, r1
    3a44:	08 2f       	mov	r16, r24
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	48 e8       	ldi	r20, 0x88	; 136
    3a4c:	51 e0       	ldi	r21, 0x01	; 1
    3a4e:	6c e7       	ldi	r22, 0x7C	; 124
    3a50:	75 e0       	ldi	r23, 0x05	; 5
    3a52:	8e e4       	ldi	r24, 0x4E	; 78
    3a54:	9c e1       	ldi	r25, 0x1C	; 28
    3a56:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
		xTaskCreate(
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	48 e8       	ldi	r20, 0x88	; 136
    3a60:	51 e0       	ldi	r21, 0x01	; 1
    3a62:	63 e8       	ldi	r22, 0x83	; 131
    3a64:	75 e0       	ldi	r23, 0x05	; 5
    3a66:	8c ed       	ldi	r24, 0xDC	; 220
    3a68:	9c e1       	ldi	r25, 0x1C	; 28
    3a6a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
	,  "LRHanddown"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3a6e:	cf 91       	pop	r28
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	08 95       	ret

00003a78 <test_outprint>:
 */ 

#include "../semaphore/header/testOutprint.h"


void test_outprint(char* outprint) {
    3a78:	0f 93       	push	r16
    3a7a:	cf 93       	push	r28
    3a7c:	df 93       	push	r29
    3a7e:	c8 2f       	mov	r28, r24
    3a80:	d9 2f       	mov	r29, r25
	if( xSemaphoreTake( xSemaphore, ( TickType_t ) 100 ) == pdTRUE )
    3a82:	44 e6       	ldi	r20, 0x64	; 100
    3a84:	50 e0       	ldi	r21, 0x00	; 0
    3a86:	60 e0       	ldi	r22, 0x00	; 0
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	80 91 f5 14 	lds	r24, 0x14F5	; 0x8014f5 <xSemaphore>
    3a8e:	90 91 f6 14 	lds	r25, 0x14F6	; 0x8014f6 <xSemaphore+0x1>
    3a92:	0e 94 33 07 	call	0xe66	; 0xe66 <xQueueSemaphoreTake>
    3a96:	81 30       	cpi	r24, 0x01	; 1
    3a98:	99 f4       	brne	.+38     	; 0x3ac0 <test_outprint+0x48>
	{
		printf(outprint);
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <printf>
		//TickType_t xDelay = 100 / portTICK_PERIOD_MS;
		//vTaskDelay(xDelay);
		
		xSemaphoreGive( xSemaphore );
    3aa2:	00 e0       	ldi	r16, 0x00	; 0
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	a9 01       	movw	r20, r18
    3aaa:	60 e0       	ldi	r22, 0x00	; 0
    3aac:	70 e0       	ldi	r23, 0x00	; 0
    3aae:	80 91 f5 14 	lds	r24, 0x14F5	; 0x8014f5 <xSemaphore>
    3ab2:	90 91 f6 14 	lds	r25, 0x14F6	; 0x8014f6 <xSemaphore+0x1>
    3ab6:	0e 94 d7 05 	call	0xbae	; 0xbae <xQueueGenericSend>
    3aba:	0f 90       	pop	r0
    3abc:	0f 90       	pop	r0
    3abe:	04 c0       	rjmp	.+8      	; 0x3ac8 <test_outprint+0x50>
	}
	else
	{ 
		puts("The semaphore was already taken");
    3ac0:	8e e8       	ldi	r24, 0x8E	; 142
    3ac2:	95 e0       	ldi	r25, 0x05	; 5
    3ac4:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <puts>
	}
	

	
}
    3ac8:	df 91       	pop	r29
    3aca:	cf 91       	pop	r28
    3acc:	0f 91       	pop	r16
    3ace:	08 95       	ret

00003ad0 <initializeSemaphore>:

void initializeSemaphore(){
    3ad0:	0f 93       	push	r16
	xSemaphore = xSemaphoreCreateBinary();
    3ad2:	43 e0       	ldi	r20, 0x03	; 3
    3ad4:	60 e0       	ldi	r22, 0x00	; 0
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	0e 94 b4 05 	call	0xb68	; 0xb68 <xQueueGenericCreate>
    3adc:	90 93 f6 14 	sts	0x14F6, r25	; 0x8014f6 <xSemaphore+0x1>
    3ae0:	80 93 f5 14 	sts	0x14F5, r24	; 0x8014f5 <xSemaphore>
	xSemaphoreGive(xSemaphore);
    3ae4:	00 e0       	ldi	r16, 0x00	; 0
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	a9 01       	movw	r20, r18
    3aec:	60 e0       	ldi	r22, 0x00	; 0
    3aee:	70 e0       	ldi	r23, 0x00	; 0
    3af0:	0e 94 d7 05 	call	0xbae	; 0xbae <xQueueGenericSend>
    3af4:	0f 91       	pop	r16
    3af6:	08 95       	ret

00003af8 <takeMeasure>:
	
}


void takeMeasure(void *pvParameters)
{
    3af8:	cf 93       	push	r28
    3afa:	df 93       	push	r29
    3afc:	00 d0       	rcall	.+0      	; 0x3afe <takeMeasure+0x6>
    3afe:	1f 92       	push	r1
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 3000/portTICK_PERIOD_MS; // 60 s

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3b04:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskGetTickCount>
    3b08:	69 83       	std	Y+1, r22	; 0x01
    3b0a:	7a 83       	std	Y+2, r23	; 0x02
    3b0c:	8b 83       	std	Y+3, r24	; 0x03
    3b0e:	9c 83       	std	Y+4, r25	; 0x04
		
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3b10:	4b eb       	ldi	r20, 0xBB	; 187
    3b12:	50 e0       	ldi	r21, 0x00	; 0
    3b14:	60 e0       	ldi	r22, 0x00	; 0
    3b16:	70 e0       	ldi	r23, 0x00	; 0
    3b18:	ce 01       	movw	r24, r28
    3b1a:	01 96       	adiw	r24, 0x01	; 1
    3b1c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <xTaskDelayUntil>
		tempHumMeasure();	
    3b20:	37 dd       	rcall	.-1426   	; 0x3590 <tempHumMeasure>
		co2Measure(); // Call CO2HandlerImpl to take measure
    3b22:	7b dc       	rcall	.-1802   	; 0x341a <co2Measure>
    3b24:	f5 cf       	rjmp	.-22     	; 0x3b10 <takeMeasure+0x18>

00003b26 <enqueueMeasures>:
    3b26:	cf 93       	push	r28
	}
}

void enqueueMeasures(void *pvParameters)
{
    3b28:	df 93       	push	r29
    3b2a:	00 d0       	rcall	.+0      	; 0x3b2c <enqueueMeasures+0x6>
    3b2c:	1f 92       	push	r1
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 30000/portTICK_PERIOD_MS; // 65 s

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3b32:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskGetTickCount>
    3b36:	69 83       	std	Y+1, r22	; 0x01
    3b38:	7a 83       	std	Y+2, r23	; 0x02
    3b3a:	8b 83       	std	Y+3, r24	; 0x03
    3b3c:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3b3e:	43 e5       	ldi	r20, 0x53	; 83
    3b40:	57 e0       	ldi	r21, 0x07	; 7
    3b42:	60 e0       	ldi	r22, 0x00	; 0
    3b44:	70 e0       	ldi	r23, 0x00	; 0
    3b46:	ce 01       	movw	r24, r28
    3b48:	01 96       	adiw	r24, 0x01	; 1
    3b4a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <xTaskDelayUntil>
		enqueueSharedData(); // Call SharedDataQueueImpl to enqueue the measures
    3b4e:	0e 94 11 01 	call	0x222	; 0x222 <enqueueSharedData>
    3b52:	f5 cf       	rjmp	.-22     	; 0x3b3e <enqueueMeasures+0x18>

00003b54 <setupTasks>:
void takeMeasure( void *pvParameters );
void enqueueMeasures( void *pvParameters );


void setupTasks(void) // Can only setup 2 tasks, memory problems?
{
    3b54:	ef 92       	push	r14
    3b56:	ff 92       	push	r15
    3b58:	0f 93       	push	r16
	
	xTaskCreate(
    3b5a:	e1 2c       	mov	r14, r1
    3b5c:	f1 2c       	mov	r15, r1
    3b5e:	00 e0       	ldi	r16, 0x00	; 0
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	40 ec       	ldi	r20, 0xC0	; 192
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	6e ea       	ldi	r22, 0xAE	; 174
    3b6a:	75 e0       	ldi	r23, 0x05	; 5
    3b6c:	8c e7       	ldi	r24, 0x7C	; 124
    3b6e:	9d e1       	ldi	r25, 0x1D	; 29
    3b70:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 ec       	ldi	r20, 0xC0	; 192
    3b7a:	50 e0       	ldi	r21, 0x00	; 0
    3b7c:	6a eb       	ldi	r22, 0xBA	; 186
    3b7e:	75 e0       	ldi	r23, 0x05	; 5
    3b80:	83 e9       	ldi	r24, 0x93	; 147
    3b82:	9d e1       	ldi	r25, 0x1D	; 29
    3b84:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );	
	
}
    3b88:	0f 91       	pop	r16
    3b8a:	ff 90       	pop	r15
    3b8c:	ef 90       	pop	r14
    3b8e:	08 95       	ret

00003b90 <startTasks>:
}


void startTasks()
{
	setupTasks();
    3b90:	e1 df       	rcall	.-62     	; 0x3b54 <setupTasks>
	
	sprintf(printstring, "Heapsize: %d \n", xPortGetFreeHeapSize());
    3b92:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <xPortGetFreeHeapSize>
    3b96:	9f 93       	push	r25
    3b98:	8f 93       	push	r24
    3b9a:	8a ec       	ldi	r24, 0xCA	; 202
    3b9c:	95 e0       	ldi	r25, 0x05	; 5
    3b9e:	9f 93       	push	r25
    3ba0:	8f 93       	push	r24
    3ba2:	87 ef       	ldi	r24, 0xF7	; 247
    3ba4:	94 e1       	ldi	r25, 0x14	; 20
    3ba6:	9f 93       	push	r25
    3ba8:	8f 93       	push	r24
    3baa:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
	//test_outprint(printstring);
	
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3bae:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <vTaskStartScheduler>
}
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	08 95       	ret

00003bc0 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3bc0:	81 b1       	in	r24, 0x01	; 1
    3bc2:	81 68       	ori	r24, 0x81	; 129
    3bc4:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 d6 27 	call	0x4fac	; 0x4fac <stdio_initialise>
	
	// Initialize queues
	initializeCO2Queue();
    3bce:	1b dc       	rcall	.-1994   	; 0x3406 <initializeCO2Queue>
	initializeTempHumQueues();
    3bd0:	66 dc       	rcall	.-1844   	; 0x349e <initializeTempHumQueues>
    3bd2:	0e 94 08 01 	call	0x210	; 0x210 <initializeSharedDataQueue>
	initializeSharedDataQueue();

	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    3bd6:	83 e0       	ldi	r24, 0x03	; 3
    3bd8:	d8 d5       	rcall	.+2992   	; 0x478a <mh_z19_initialise>
	hih8120_initialise();
    3bda:	a3 d0       	rcall	.+326    	; 0x3d22 <hih8120_initialise>
    3bdc:	85 e0       	ldi	r24, 0x05	; 5



	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3bde:	0e 94 dd 28 	call	0x51ba	; 0x51ba <status_leds_initialise>
    3be2:	41 e0       	ldi	r20, 0x01	; 1
	// Initialise the LoRaWAN driver without down-link buffer
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3be4:	60 e0       	ldi	r22, 0x00	; 0
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	8c e2       	ldi	r24, 0x2C	; 44
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 43 09 	call	0x1286	; 0x1286 <xStreamBufferGenericCreate>
    3bf0:	90 93 62 15 	sts	0x1562, r25	; 0x801562 <downlinkMessageBufferHandle+0x1>
    3bf4:	80 93 61 15 	sts	0x1561, r24	; 0x801561 <downlinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    3bf8:	bc 01       	movw	r22, r24
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	1f d2       	rcall	.+1086   	; 0x403c <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3bfe:	83 e0       	ldi	r24, 0x03	; 3
    3c00:	1b cf       	rjmp	.-458    	; 0x3a38 <lora_handler_initialise>
    3c02:	08 95       	ret

00003c04 <main>:
    3c04:	dd df       	rcall	.-70     	; 0x3bc0 <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	
	initializeSemaphore();
    3c06:	64 df       	rcall	.-312    	; 0x3ad0 <initializeSemaphore>
    3c08:	89 ed       	ldi	r24, 0xD9	; 217
	
	puts("Program started!");
    3c0a:	95 e0       	ldi	r25, 0x05	; 5
    3c0c:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <puts>
	
	startTasks();
    3c10:	bf df       	rcall	.-130    	; 0x3b90 <startTasks>
    3c12:	ff cf       	rjmp	.-2      	; 0x3c12 <main+0xe>

00003c14 <__fixsfsi>:
    3c14:	04 d0       	rcall	.+8      	; 0x3c1e <__fixunssfsi>
    3c16:	68 94       	set
    3c18:	b1 11       	cpse	r27, r1
    3c1a:	50 c0       	rjmp	.+160    	; 0x3cbc <__fp_szero>
    3c1c:	08 95       	ret

00003c1e <__fixunssfsi>:
    3c1e:	33 d0       	rcall	.+102    	; 0x3c86 <__fp_splitA>
    3c20:	88 f0       	brcs	.+34     	; 0x3c44 <__fixunssfsi+0x26>
    3c22:	9f 57       	subi	r25, 0x7F	; 127
    3c24:	90 f0       	brcs	.+36     	; 0x3c4a <__fixunssfsi+0x2c>
    3c26:	b9 2f       	mov	r27, r25
    3c28:	99 27       	eor	r25, r25
    3c2a:	b7 51       	subi	r27, 0x17	; 23
    3c2c:	a0 f0       	brcs	.+40     	; 0x3c56 <__fixunssfsi+0x38>
    3c2e:	d1 f0       	breq	.+52     	; 0x3c64 <__fixunssfsi+0x46>
    3c30:	66 0f       	add	r22, r22
    3c32:	77 1f       	adc	r23, r23
    3c34:	88 1f       	adc	r24, r24
    3c36:	99 1f       	adc	r25, r25
    3c38:	1a f0       	brmi	.+6      	; 0x3c40 <__fixunssfsi+0x22>
    3c3a:	ba 95       	dec	r27
    3c3c:	c9 f7       	brne	.-14     	; 0x3c30 <__fixunssfsi+0x12>
    3c3e:	12 c0       	rjmp	.+36     	; 0x3c64 <__fixunssfsi+0x46>
    3c40:	b1 30       	cpi	r27, 0x01	; 1
    3c42:	81 f0       	breq	.+32     	; 0x3c64 <__fixunssfsi+0x46>
    3c44:	3a d0       	rcall	.+116    	; 0x3cba <__fp_zero>
    3c46:	b1 e0       	ldi	r27, 0x01	; 1
    3c48:	08 95       	ret
    3c4a:	37 c0       	rjmp	.+110    	; 0x3cba <__fp_zero>
    3c4c:	67 2f       	mov	r22, r23
    3c4e:	78 2f       	mov	r23, r24
    3c50:	88 27       	eor	r24, r24
    3c52:	b8 5f       	subi	r27, 0xF8	; 248
    3c54:	39 f0       	breq	.+14     	; 0x3c64 <__fixunssfsi+0x46>
    3c56:	b9 3f       	cpi	r27, 0xF9	; 249
    3c58:	cc f3       	brlt	.-14     	; 0x3c4c <__fixunssfsi+0x2e>
    3c5a:	86 95       	lsr	r24
    3c5c:	77 95       	ror	r23
    3c5e:	67 95       	ror	r22
    3c60:	b3 95       	inc	r27
    3c62:	d9 f7       	brne	.-10     	; 0x3c5a <__fixunssfsi+0x3c>
    3c64:	3e f4       	brtc	.+14     	; 0x3c74 <__fixunssfsi+0x56>
    3c66:	90 95       	com	r25
    3c68:	80 95       	com	r24
    3c6a:	70 95       	com	r23
    3c6c:	61 95       	neg	r22
    3c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c70:	8f 4f       	sbci	r24, 0xFF	; 255
    3c72:	9f 4f       	sbci	r25, 0xFF	; 255
    3c74:	08 95       	ret

00003c76 <__fp_split3>:
    3c76:	57 fd       	sbrc	r21, 7
    3c78:	90 58       	subi	r25, 0x80	; 128
    3c7a:	44 0f       	add	r20, r20
    3c7c:	55 1f       	adc	r21, r21
    3c7e:	59 f0       	breq	.+22     	; 0x3c96 <__fp_splitA+0x10>
    3c80:	5f 3f       	cpi	r21, 0xFF	; 255
    3c82:	71 f0       	breq	.+28     	; 0x3ca0 <__fp_splitA+0x1a>
    3c84:	47 95       	ror	r20

00003c86 <__fp_splitA>:
    3c86:	88 0f       	add	r24, r24
    3c88:	97 fb       	bst	r25, 7
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	61 f0       	breq	.+24     	; 0x3ca6 <__fp_splitA+0x20>
    3c8e:	9f 3f       	cpi	r25, 0xFF	; 255
    3c90:	79 f0       	breq	.+30     	; 0x3cb0 <__fp_splitA+0x2a>
    3c92:	87 95       	ror	r24
    3c94:	08 95       	ret
    3c96:	12 16       	cp	r1, r18
    3c98:	13 06       	cpc	r1, r19
    3c9a:	14 06       	cpc	r1, r20
    3c9c:	55 1f       	adc	r21, r21
    3c9e:	f2 cf       	rjmp	.-28     	; 0x3c84 <__fp_split3+0xe>
    3ca0:	46 95       	lsr	r20
    3ca2:	f1 df       	rcall	.-30     	; 0x3c86 <__fp_splitA>
    3ca4:	08 c0       	rjmp	.+16     	; 0x3cb6 <__fp_splitA+0x30>
    3ca6:	16 16       	cp	r1, r22
    3ca8:	17 06       	cpc	r1, r23
    3caa:	18 06       	cpc	r1, r24
    3cac:	99 1f       	adc	r25, r25
    3cae:	f1 cf       	rjmp	.-30     	; 0x3c92 <__fp_splitA+0xc>
    3cb0:	86 95       	lsr	r24
    3cb2:	71 05       	cpc	r23, r1
    3cb4:	61 05       	cpc	r22, r1
    3cb6:	08 94       	sec
    3cb8:	08 95       	ret

00003cba <__fp_zero>:
    3cba:	e8 94       	clt

00003cbc <__fp_szero>:
    3cbc:	bb 27       	eor	r27, r27
    3cbe:	66 27       	eor	r22, r22
    3cc0:	77 27       	eor	r23, r23
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	97 f9       	bld	r25, 7
    3cc6:	08 95       	ret

00003cc8 <_hihTwiCallback>:
    3cc8:	65 30       	cpi	r22, 0x05	; 5
    3cca:	f1 f4       	brne	.+60     	; 0x3d08 <_hihTwiCallback+0x40>
    3ccc:	fa 01       	movw	r30, r20
    3cce:	80 81       	ld	r24, Z
    3cd0:	8f 73       	andi	r24, 0x3F	; 63
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	98 2f       	mov	r25, r24
    3cd6:	88 27       	eor	r24, r24
    3cd8:	21 81       	ldd	r18, Z+1	; 0x01
    3cda:	82 2b       	or	r24, r18
    3cdc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3ce0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3ce4:	82 81       	ldd	r24, Z+2	; 0x02
    3ce6:	f0 e4       	ldi	r31, 0x40	; 64
    3ce8:	8f 9f       	mul	r24, r31
    3cea:	c0 01       	movw	r24, r0
    3cec:	11 24       	eor	r1, r1
    3cee:	fa 01       	movw	r30, r20
    3cf0:	23 81       	ldd	r18, Z+3	; 0x03
    3cf2:	26 95       	lsr	r18
    3cf4:	26 95       	lsr	r18
    3cf6:	82 2b       	or	r24, r18
    3cf8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3cfc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	80 93 8b 13 	sts	0x138B, r24	; 0x80138b <_measuringIsReady>
    3d06:	08 95       	ret
    3d08:	64 30       	cpi	r22, 0x04	; 4
    3d0a:	51 f0       	breq	.+20     	; 0x3d20 <_hihTwiCallback+0x58>
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	90 e4       	ldi	r25, 0x40	; 64
    3d10:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d14:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d18:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3d1c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d20:	08 95       	ret

00003d22 <hih8120_initialise>:
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	04 e6       	ldi	r16, 0x64	; 100
    3d28:	1e e1       	ldi	r17, 0x1E	; 30
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	34 e2       	ldi	r19, 0x24	; 36
    3d2e:	44 ef       	ldi	r20, 0xF4	; 244
    3d30:	50 e0       	ldi	r21, 0x00	; 0
    3d32:	60 e0       	ldi	r22, 0x00	; 0
    3d34:	87 e2       	ldi	r24, 0x27	; 39
    3d36:	0e 94 c4 29 	call	0x5388	; 0x5388 <twiCreate>
    3d3a:	90 93 8d 13 	sts	0x138D, r25	; 0x80138d <_hih8120Handler+0x1>
    3d3e:	80 93 8c 13 	sts	0x138C, r24	; 0x80138c <_hih8120Handler>
    3d42:	21 e0       	ldi	r18, 0x01	; 1
    3d44:	89 2b       	or	r24, r25
    3d46:	09 f0       	breq	.+2      	; 0x3d4a <hih8120_initialise+0x28>
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	82 2f       	mov	r24, r18
    3d4c:	1f 91       	pop	r17
    3d4e:	0f 91       	pop	r16
    3d50:	08 95       	ret

00003d52 <hih8120_wakeup>:
    3d52:	80 91 8c 13 	lds	r24, 0x138C	; 0x80138c <_hih8120Handler>
    3d56:	90 91 8d 13 	lds	r25, 0x138D	; 0x80138d <_hih8120Handler+0x1>
    3d5a:	00 97       	sbiw	r24, 0x00	; 0
    3d5c:	59 f0       	breq	.+22     	; 0x3d74 <hih8120_wakeup+0x22>
    3d5e:	40 e0       	ldi	r20, 0x00	; 0
    3d60:	60 e0       	ldi	r22, 0x00	; 0
    3d62:	70 e0       	ldi	r23, 0x00	; 0
    3d64:	0e 94 15 2a 	call	0x542a	; 0x542a <twiTransmit>
    3d68:	84 30       	cpi	r24, 0x04	; 4
    3d6a:	31 f4       	brne	.+12     	; 0x3d78 <hih8120_wakeup+0x26>
    3d6c:	10 92 8b 13 	sts	0x138B, r1	; 0x80138b <_measuringIsReady>
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	08 95       	ret
    3d74:	82 e0       	ldi	r24, 0x02	; 2
    3d76:	08 95       	ret
    3d78:	83 e0       	ldi	r24, 0x03	; 3
    3d7a:	08 95       	ret

00003d7c <hih8120_measure>:
    3d7c:	80 91 8c 13 	lds	r24, 0x138C	; 0x80138c <_hih8120Handler>
    3d80:	90 91 8d 13 	lds	r25, 0x138D	; 0x80138d <_hih8120Handler+0x1>
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	39 f0       	breq	.+14     	; 0x3d96 <hih8120_measure+0x1a>
    3d88:	64 e0       	ldi	r22, 0x04	; 4
    3d8a:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <twiReceive>
    3d8e:	85 30       	cpi	r24, 0x05	; 5
    3d90:	21 f0       	breq	.+8      	; 0x3d9a <hih8120_measure+0x1e>
    3d92:	83 e0       	ldi	r24, 0x03	; 3
    3d94:	08 95       	ret
    3d96:	82 e0       	ldi	r24, 0x02	; 2
    3d98:	08 95       	ret
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	08 95       	ret

00003d9e <hih8120_getHumidity>:
    3d9e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3da2:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	0e 94 3f 2c 	call	0x587e	; 0x587e <__floatunsisf>
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	48 ec       	ldi	r20, 0xC8	; 200
    3db4:	52 e4       	ldi	r21, 0x42	; 66
    3db6:	0e 94 a4 2c 	call	0x5948	; 0x5948 <__mulsf3>
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	38 ef       	ldi	r19, 0xF8	; 248
    3dbe:	4f e7       	ldi	r20, 0x7F	; 127
    3dc0:	56 e4       	ldi	r21, 0x46	; 70
    3dc2:	0c 94 d4 2b 	jmp	0x57a8	; 0x57a8 <__divsf3>
    3dc6:	08 95       	ret

00003dc8 <hih8120_getTemperature>:
    3dc8:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3dcc:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	0e 94 3f 2c 	call	0x587e	; 0x587e <__floatunsisf>
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	45 e2       	ldi	r20, 0x25	; 37
    3dde:	53 e4       	ldi	r21, 0x43	; 67
    3de0:	0e 94 a4 2c 	call	0x5948	; 0x5948 <__mulsf3>
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	38 ef       	ldi	r19, 0xF8	; 248
    3de8:	4f e7       	ldi	r20, 0x7F	; 127
    3dea:	56 e4       	ldi	r21, 0x46	; 70
    3dec:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <__divsf3>
    3df0:	20 e0       	ldi	r18, 0x00	; 0
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	40 e2       	ldi	r20, 0x20	; 32
    3df6:	52 e4       	ldi	r21, 0x42	; 66
    3df8:	0c 94 6d 2b 	jmp	0x56da	; 0x56da <__subsf3>
    3dfc:	08 95       	ret

00003dfe <_serialCallBack>:
    3dfe:	0f 93       	push	r16
    3e00:	1f 93       	push	r17
    3e02:	cf 93       	push	r28
    3e04:	df 93       	push	r29
    3e06:	1f 92       	push	r1
    3e08:	1f 92       	push	r1
    3e0a:	cd b7       	in	r28, 0x3d	; 61
    3e0c:	de b7       	in	r29, 0x3e	; 62
    3e0e:	8c 01       	movw	r16, r24
    3e10:	19 82       	std	Y+1, r1	; 0x01
    3e12:	2d c0       	rjmp	.+90     	; 0x3e6e <_serialCallBack+0x70>
    3e14:	e0 91 f2 13 	lds	r30, 0x13F2	; 0x8013f2 <rec_buf_inp.2878>
    3e18:	ec 32       	cpi	r30, 0x2C	; 44
    3e1a:	50 f4       	brcc	.+20     	; 0x3e30 <_serialCallBack+0x32>
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	8e 0f       	add	r24, r30
    3e20:	80 93 f2 13 	sts	0x13F2, r24	; 0x8013f2 <rec_buf_inp.2878>
    3e24:	f0 e0       	ldi	r31, 0x00	; 0
    3e26:	ec 5d       	subi	r30, 0xDC	; 220
    3e28:	fb 4e       	sbci	r31, 0xEB	; 235
    3e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2c:	80 83       	st	Z, r24
    3e2e:	02 c0       	rjmp	.+4      	; 0x3e34 <_serialCallBack+0x36>
    3e30:	10 92 f2 13 	sts	0x13F2, r1	; 0x8013f2 <rec_buf_inp.2878>
    3e34:	8a 81       	ldd	r24, Y+2	; 0x02
    3e36:	8a 30       	cpi	r24, 0x0A	; 10
    3e38:	d1 f4       	brne	.+52     	; 0x3e6e <_serialCallBack+0x70>
    3e3a:	40 91 f2 13 	lds	r20, 0x13F2	; 0x8013f2 <rec_buf_inp.2878>
    3e3e:	50 e0       	ldi	r21, 0x00	; 0
    3e40:	fa 01       	movw	r30, r20
    3e42:	ee 5d       	subi	r30, 0xDE	; 222
    3e44:	fb 4e       	sbci	r31, 0xEB	; 235
    3e46:	10 82       	st	Z, r1
    3e48:	41 50       	subi	r20, 0x01	; 1
    3e4a:	51 09       	sbc	r21, r1
    3e4c:	9e 01       	movw	r18, r28
    3e4e:	2f 5f       	subi	r18, 0xFF	; 255
    3e50:	3f 4f       	sbci	r19, 0xFF	; 255
    3e52:	64 e2       	ldi	r22, 0x24	; 36
    3e54:	74 e1       	ldi	r23, 0x14	; 20
    3e56:	80 91 f5 13 	lds	r24, 0x13F5	; 0x8013f5 <_serialReplyBufferHandle>
    3e5a:	90 91 f6 13 	lds	r25, 0x13F6	; 0x8013f6 <_serialReplyBufferHandle+0x1>
    3e5e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <xStreamBufferSendFromISR>
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
    3e64:	81 11       	cpse	r24, r1
    3e66:	0e 94 bf 03 	call	0x77e	; 0x77e <vPortYield>
    3e6a:	10 92 f2 13 	sts	0x13F2, r1	; 0x8013f2 <rec_buf_inp.2878>
    3e6e:	be 01       	movw	r22, r28
    3e70:	6e 5f       	subi	r22, 0xFE	; 254
    3e72:	7f 4f       	sbci	r23, 0xFF	; 255
    3e74:	c8 01       	movw	r24, r16
    3e76:	04 d6       	rcall	.+3080   	; 0x4a80 <serial_getByte>
    3e78:	88 23       	and	r24, r24
    3e7a:	61 f2       	breq	.-104    	; 0x3e14 <_serialCallBack+0x16>
    3e7c:	0f 90       	pop	r0
    3e7e:	0f 90       	pop	r0
    3e80:	df 91       	pop	r29
    3e82:	cf 91       	pop	r28
    3e84:	1f 91       	pop	r17
    3e86:	0f 91       	pop	r16
    3e88:	08 95       	ret

00003e8a <_uploadMessage>:
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
    3e92:	8c 01       	movw	r16, r24
    3e94:	eb 01       	movw	r28, r22
    3e96:	80 91 f5 13 	lds	r24, 0x13F5	; 0x8013f5 <_serialReplyBufferHandle>
    3e9a:	90 91 f6 13 	lds	r25, 0x13F6	; 0x8013f6 <_serialReplyBufferHandle+0x1>
    3e9e:	0e 94 75 09 	call	0x12ea	; 0x12ea <xStreamBufferReset>
    3ea2:	b8 01       	movw	r22, r16
    3ea4:	8e e8       	ldi	r24, 0x8E	; 142
    3ea6:	93 e1       	ldi	r25, 0x13	; 19
    3ea8:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <strcpy>
    3eac:	20 97       	sbiw	r28, 0x00	; 0
    3eae:	79 f0       	breq	.+30     	; 0x3ece <_uploadMessage+0x44>
    3eb0:	ee e8       	ldi	r30, 0x8E	; 142
    3eb2:	f3 e1       	ldi	r31, 0x13	; 19
    3eb4:	01 90       	ld	r0, Z+
    3eb6:	00 20       	and	r0, r0
    3eb8:	e9 f7       	brne	.-6      	; 0x3eb4 <_uploadMessage+0x2a>
    3eba:	31 97       	sbiw	r30, 0x01	; 1
    3ebc:	80 e2       	ldi	r24, 0x20	; 32
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	91 83       	std	Z+1, r25	; 0x01
    3ec2:	80 83       	st	Z, r24
    3ec4:	be 01       	movw	r22, r28
    3ec6:	8e e8       	ldi	r24, 0x8E	; 142
    3ec8:	93 e1       	ldi	r25, 0x13	; 19
    3eca:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <strcat>
    3ece:	ee e8       	ldi	r30, 0x8E	; 142
    3ed0:	f3 e1       	ldi	r31, 0x13	; 19
    3ed2:	df 01       	movw	r26, r30
    3ed4:	0d 90       	ld	r0, X+
    3ed6:	00 20       	and	r0, r0
    3ed8:	e9 f7       	brne	.-6      	; 0x3ed4 <_uploadMessage+0x4a>
    3eda:	11 97       	sbiw	r26, 0x01	; 1
    3edc:	8d e0       	ldi	r24, 0x0D	; 13
    3ede:	9a e0       	ldi	r25, 0x0A	; 10
    3ee0:	11 96       	adiw	r26, 0x01	; 1
    3ee2:	9c 93       	st	X, r25
    3ee4:	8e 93       	st	-X, r24
    3ee6:	12 96       	adiw	r26, 0x02	; 2
    3ee8:	1c 92       	st	X, r1
    3eea:	01 90       	ld	r0, Z+
    3eec:	00 20       	and	r0, r0
    3eee:	e9 f7       	brne	.-6      	; 0x3eea <_uploadMessage+0x60>
    3ef0:	31 97       	sbiw	r30, 0x01	; 1
    3ef2:	ee 58       	subi	r30, 0x8E	; 142
    3ef4:	f3 41       	sbci	r31, 0x13	; 19
    3ef6:	ae 2f       	mov	r26, r30
    3ef8:	8e e8       	ldi	r24, 0x8E	; 142
    3efa:	93 e1       	ldi	r25, 0x13	; 19
    3efc:	ac 01       	movw	r20, r24
    3efe:	6a 2f       	mov	r22, r26
    3f00:	80 91 f7 13 	lds	r24, 0x13F7	; 0x8013f7 <_rn2483_serial>
    3f04:	90 91 f8 13 	lds	r25, 0x13F8	; 0x8013f8 <_rn2483_serial+0x1>
    3f08:	66 d5       	rcall	.+2764   	; 0x49d6 <serial_sendBytes>
    3f0a:	81 11       	cpse	r24, r1
    3f0c:	11 c0       	rjmp	.+34     	; 0x3f30 <_uploadMessage+0xa6>
    3f0e:	08 e2       	ldi	r16, 0x28	; 40
    3f10:	15 e0       	ldi	r17, 0x05	; 5
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	4d e2       	ldi	r20, 0x2D	; 45
    3f18:	50 e0       	ldi	r21, 0x00	; 0
    3f1a:	6e e7       	ldi	r22, 0x7E	; 126
    3f1c:	74 e1       	ldi	r23, 0x14	; 20
    3f1e:	80 91 f5 13 	lds	r24, 0x13F5	; 0x8013f5 <_serialReplyBufferHandle>
    3f22:	90 91 f6 13 	lds	r25, 0x13F6	; 0x8013f6 <_serialReplyBufferHandle+0x1>
    3f26:	0e 94 ac 0a 	call	0x1558	; 0x1558 <xStreamBufferReceive>
    3f2a:	8e e7       	ldi	r24, 0x7E	; 126
    3f2c:	94 e1       	ldi	r25, 0x14	; 20
    3f2e:	02 c0       	rjmp	.+4      	; 0x3f34 <_uploadMessage+0xaa>
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	df 91       	pop	r29
    3f36:	cf 91       	pop	r28
    3f38:	1f 91       	pop	r17
    3f3a:	0f 91       	pop	r16
    3f3c:	08 95       	ret

00003f3e <_reply2ReturnCode>:
    3f3e:	2f 92       	push	r2
    3f40:	3f 92       	push	r3
    3f42:	4f 92       	push	r4
    3f44:	5f 92       	push	r5
    3f46:	6f 92       	push	r6
    3f48:	7f 92       	push	r7
    3f4a:	8f 92       	push	r8
    3f4c:	9f 92       	push	r9
    3f4e:	af 92       	push	r10
    3f50:	bf 92       	push	r11
    3f52:	cf 92       	push	r12
    3f54:	df 92       	push	r13
    3f56:	ef 92       	push	r14
    3f58:	ff 92       	push	r15
    3f5a:	0f 93       	push	r16
    3f5c:	1f 93       	push	r17
    3f5e:	cf 93       	push	r28
    3f60:	df 93       	push	r29
    3f62:	5c 01       	movw	r10, r24
    3f64:	fc 01       	movw	r30, r24
    3f66:	01 90       	ld	r0, Z+
    3f68:	00 20       	and	r0, r0
    3f6a:	e9 f7       	brne	.-6      	; 0x3f66 <_reply2ReturnCode+0x28>
    3f6c:	31 97       	sbiw	r30, 0x01	; 1
    3f6e:	6f 01       	movw	r12, r30
    3f70:	c8 1a       	sub	r12, r24
    3f72:	d9 0a       	sbc	r13, r25
    3f74:	5c 2c       	mov	r5, r12
    3f76:	0f 2e       	mov	r0, r31
    3f78:	f3 e8       	ldi	r31, 0x83	; 131
    3f7a:	8f 2e       	mov	r8, r31
    3f7c:	f8 e0       	ldi	r31, 0x08	; 8
    3f7e:	9f 2e       	mov	r9, r31
    3f80:	f0 2d       	mov	r31, r0
    3f82:	e1 2c       	mov	r14, r1
    3f84:	f1 2c       	mov	r15, r1
    3f86:	4c 2c       	mov	r4, r12
    3f88:	37 01       	movw	r6, r14
    3f8a:	f4 01       	movw	r30, r8
    3f8c:	01 81       	ldd	r16, Z+1	; 0x01
    3f8e:	12 81       	ldd	r17, Z+2	; 0x02
    3f90:	e8 01       	movw	r28, r16
    3f92:	09 90       	ld	r0, Y+
    3f94:	00 20       	and	r0, r0
    3f96:	e9 f7       	brne	.-6      	; 0x3f92 <_reply2ReturnCode+0x54>
    3f98:	21 97       	sbiw	r28, 0x01	; 1
    3f9a:	c0 1b       	sub	r28, r16
    3f9c:	d1 0b       	sbc	r29, r17
    3f9e:	3c 2e       	mov	r3, r28
    3fa0:	f9 e0       	ldi	r31, 0x09	; 9
    3fa2:	cf 16       	cp	r12, r31
    3fa4:	d1 04       	cpc	r13, r1
    3fa6:	58 f0       	brcs	.+22     	; 0x3fbe <_reply2ReturnCode+0x80>
    3fa8:	f4 01       	movw	r30, r8
    3faa:	20 80       	ld	r2, Z
    3fac:	fe e0       	ldi	r31, 0x0E	; 14
    3fae:	2f 12       	cpse	r2, r31
    3fb0:	06 c0       	rjmp	.+12     	; 0x3fbe <_reply2ReturnCode+0x80>
    3fb2:	b8 01       	movw	r22, r16
    3fb4:	c5 01       	movw	r24, r10
    3fb6:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <strcasestr>
    3fba:	89 2b       	or	r24, r25
    3fbc:	09 f5       	brne	.+66     	; 0x4000 <_reply2ReturnCode+0xc2>
    3fbe:	44 2d       	mov	r20, r4
    3fc0:	35 14       	cp	r3, r5
    3fc2:	08 f4       	brcc	.+2      	; 0x3fc6 <_reply2ReturnCode+0x88>
    3fc4:	4c 2f       	mov	r20, r28
    3fc6:	50 e0       	ldi	r21, 0x00	; 0
    3fc8:	b8 01       	movw	r22, r16
    3fca:	c5 01       	movw	r24, r10
    3fcc:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <strncasecmp>
    3fd0:	89 2b       	or	r24, r25
    3fd2:	49 f4       	brne	.+18     	; 0x3fe6 <_reply2ReturnCode+0xa8>
    3fd4:	f3 01       	movw	r30, r6
    3fd6:	ee 0f       	add	r30, r30
    3fd8:	ff 1f       	adc	r31, r31
    3fda:	e6 0d       	add	r30, r6
    3fdc:	f7 1d       	adc	r31, r7
    3fde:	ed 57       	subi	r30, 0x7D	; 125
    3fe0:	f7 4f       	sbci	r31, 0xF7	; 247
    3fe2:	20 80       	ld	r2, Z
    3fe4:	0d c0       	rjmp	.+26     	; 0x4000 <_reply2ReturnCode+0xc2>
    3fe6:	8f ef       	ldi	r24, 0xFF	; 255
    3fe8:	e8 1a       	sub	r14, r24
    3fea:	f8 0a       	sbc	r15, r24
    3fec:	e3 e0       	ldi	r30, 0x03	; 3
    3fee:	8e 0e       	add	r8, r30
    3ff0:	91 1c       	adc	r9, r1
    3ff2:	f1 e1       	ldi	r31, 0x11	; 17
    3ff4:	ef 16       	cp	r14, r31
    3ff6:	f1 04       	cpc	r15, r1
    3ff8:	39 f6       	brne	.-114    	; 0x3f88 <_reply2ReturnCode+0x4a>
    3ffa:	68 94       	set
    3ffc:	22 24       	eor	r2, r2
    3ffe:	24 f8       	bld	r2, 4
    4000:	82 2d       	mov	r24, r2
    4002:	df 91       	pop	r29
    4004:	cf 91       	pop	r28
    4006:	1f 91       	pop	r17
    4008:	0f 91       	pop	r16
    400a:	ff 90       	pop	r15
    400c:	ef 90       	pop	r14
    400e:	df 90       	pop	r13
    4010:	cf 90       	pop	r12
    4012:	bf 90       	pop	r11
    4014:	af 90       	pop	r10
    4016:	9f 90       	pop	r9
    4018:	8f 90       	pop	r8
    401a:	7f 90       	pop	r7
    401c:	6f 90       	pop	r6
    401e:	5f 90       	pop	r5
    4020:	4f 90       	pop	r4
    4022:	3f 90       	pop	r3
    4024:	2f 90       	pop	r2
    4026:	08 95       	ret

00004028 <_uploadMessageRc>:
    4028:	30 df       	rcall	.-416    	; 0x3e8a <_uploadMessage>
    402a:	89 cf       	rjmp	.-238    	; 0x3f3e <_reply2ReturnCode>
    402c:	08 95       	ret

0000402e <lora_driver_flushBuffers>:
    402e:	80 91 f5 13 	lds	r24, 0x13F5	; 0x8013f5 <_serialReplyBufferHandle>
    4032:	90 91 f6 13 	lds	r25, 0x13F6	; 0x8013f6 <_serialReplyBufferHandle+0x1>
    4036:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <xStreamBufferReset>
    403a:	08 95       	ret

0000403c <lora_driver_initialise>:
    403c:	8f 92       	push	r8
    403e:	9f 92       	push	r9
    4040:	af 92       	push	r10
    4042:	cf 92       	push	r12
    4044:	ef 92       	push	r14
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	cf 93       	push	r28
    404c:	c8 2f       	mov	r28, r24
    404e:	8b 01       	movw	r16, r22
    4050:	41 e0       	ldi	r20, 0x01	; 1
    4052:	60 e0       	ldi	r22, 0x00	; 0
    4054:	70 e0       	ldi	r23, 0x00	; 0
    4056:	88 ec       	ldi	r24, 0xC8	; 200
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	0e 94 43 09 	call	0x1286	; 0x1286 <xStreamBufferGenericCreate>
    405e:	90 93 f6 13 	sts	0x13F6, r25	; 0x8013f6 <_serialReplyBufferHandle+0x1>
    4062:	80 93 f5 13 	sts	0x13F5, r24	; 0x8013f5 <_serialReplyBufferHandle>
    4066:	10 93 f4 13 	sts	0x13F4, r17	; 0x8013f4 <_downlinkMessageBuffer+0x1>
    406a:	00 93 f3 13 	sts	0x13F3, r16	; 0x8013f3 <_downlinkMessageBuffer>
    406e:	0f 2e       	mov	r0, r31
    4070:	ff ef       	ldi	r31, 0xFF	; 255
    4072:	8f 2e       	mov	r8, r31
    4074:	fe e1       	ldi	r31, 0x1E	; 30
    4076:	9f 2e       	mov	r9, r31
    4078:	f0 2d       	mov	r31, r0
    407a:	68 94       	set
    407c:	aa 24       	eor	r10, r10
    407e:	a6 f8       	bld	r10, 6
    4080:	68 94       	set
    4082:	cc 24       	eor	r12, r12
    4084:	c6 f8       	bld	r12, 6
    4086:	e1 2c       	mov	r14, r1
    4088:	00 e0       	ldi	r16, 0x00	; 0
    408a:	23 e0       	ldi	r18, 0x03	; 3
    408c:	40 e0       	ldi	r20, 0x00	; 0
    408e:	51 ee       	ldi	r21, 0xE1	; 225
    4090:	60 e0       	ldi	r22, 0x00	; 0
    4092:	70 e0       	ldi	r23, 0x00	; 0
    4094:	8c 2f       	mov	r24, r28
    4096:	d2 d3       	rcall	.+1956   	; 0x483c <serial_create>
    4098:	90 93 f8 13 	sts	0x13F8, r25	; 0x8013f8 <_rn2483_serial+0x1>
    409c:	80 93 f7 13 	sts	0x13F7, r24	; 0x8013f7 <_rn2483_serial>
    40a0:	e7 e0       	ldi	r30, 0x07	; 7
    40a2:	f1 e0       	ldi	r31, 0x01	; 1
    40a4:	80 81       	ld	r24, Z
    40a6:	80 61       	ori	r24, 0x10	; 16
    40a8:	80 83       	st	Z, r24
    40aa:	cf 91       	pop	r28
    40ac:	1f 91       	pop	r17
    40ae:	0f 91       	pop	r16
    40b0:	ef 90       	pop	r14
    40b2:	cf 90       	pop	r12
    40b4:	af 90       	pop	r10
    40b6:	9f 90       	pop	r9
    40b8:	8f 90       	pop	r8
    40ba:	08 95       	ret

000040bc <lora_driver_resetRn2483>:
    40bc:	88 23       	and	r24, r24
    40be:	31 f0       	breq	.+12     	; 0x40cc <lora_driver_resetRn2483+0x10>
    40c0:	e8 e0       	ldi	r30, 0x08	; 8
    40c2:	f1 e0       	ldi	r31, 0x01	; 1
    40c4:	80 81       	ld	r24, Z
    40c6:	8f 7e       	andi	r24, 0xEF	; 239
    40c8:	80 83       	st	Z, r24
    40ca:	08 95       	ret
    40cc:	e8 e0       	ldi	r30, 0x08	; 8
    40ce:	f1 e0       	ldi	r31, 0x01	; 1
    40d0:	80 81       	ld	r24, Z
    40d2:	80 61       	ori	r24, 0x10	; 16
    40d4:	80 83       	st	Z, r24
    40d6:	08 95       	ret

000040d8 <lora_driver_rn2483FactoryReset>:
    40d8:	60 e0       	ldi	r22, 0x00	; 0
    40da:	70 e0       	ldi	r23, 0x00	; 0
    40dc:	89 e0       	ldi	r24, 0x09	; 9
    40de:	96 e0       	ldi	r25, 0x06	; 6
    40e0:	d4 de       	rcall	.-600    	; 0x3e8a <_uploadMessage>
    40e2:	ee e7       	ldi	r30, 0x7E	; 126
    40e4:	f4 e1       	ldi	r31, 0x14	; 20
    40e6:	01 90       	ld	r0, Z+
    40e8:	00 20       	and	r0, r0
    40ea:	e9 f7       	brne	.-6      	; 0x40e6 <lora_driver_rn2483FactoryReset+0xe>
    40ec:	31 97       	sbiw	r30, 0x01	; 1
    40ee:	ee 57       	subi	r30, 0x7E	; 126
    40f0:	f4 41       	sbci	r31, 0x14	; 20
    40f2:	81 e0       	ldi	r24, 0x01	; 1
    40f4:	75 97       	sbiw	r30, 0x15	; 21
    40f6:	08 f0       	brcs	.+2      	; 0x40fa <lora_driver_rn2483FactoryReset+0x22>
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	08 95       	ret

000040fc <lora_driver_getRn2483Hweui>:
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	ec 01       	movw	r28, r24
    4102:	60 e0       	ldi	r22, 0x00	; 0
    4104:	70 e0       	ldi	r23, 0x00	; 0
    4106:	8a e1       	ldi	r24, 0x1A	; 26
    4108:	96 e0       	ldi	r25, 0x06	; 6
    410a:	bf de       	rcall	.-642    	; 0x3e8a <_uploadMessage>
    410c:	ee e7       	ldi	r30, 0x7E	; 126
    410e:	f4 e1       	ldi	r31, 0x14	; 20
    4110:	01 90       	ld	r0, Z+
    4112:	00 20       	and	r0, r0
    4114:	e9 f7       	brne	.-6      	; 0x4110 <lora_driver_getRn2483Hweui+0x14>
    4116:	ef 58       	subi	r30, 0x8F	; 143
    4118:	f4 41       	sbci	r31, 0x14	; 20
    411a:	39 f4       	brne	.+14     	; 0x412a <lora_driver_getRn2483Hweui+0x2e>
    411c:	6e e7       	ldi	r22, 0x7E	; 126
    411e:	74 e1       	ldi	r23, 0x14	; 20
    4120:	ce 01       	movw	r24, r28
    4122:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <strcpy>
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	02 c0       	rjmp	.+4      	; 0x412e <lora_driver_getRn2483Hweui+0x32>
    412a:	18 82       	st	Y, r1
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    4132:	08 95       	ret

00004134 <lora_driver_setDeviceIdentifier>:
    4134:	fc 01       	movw	r30, r24
    4136:	01 90       	ld	r0, Z+
    4138:	00 20       	and	r0, r0
    413a:	e9 f7       	brne	.-6      	; 0x4136 <lora_driver_setDeviceIdentifier+0x2>
    413c:	9f 01       	movw	r18, r30
    413e:	21 51       	subi	r18, 0x11	; 17
    4140:	31 09       	sbc	r19, r1
    4142:	28 17       	cp	r18, r24
    4144:	39 07       	cpc	r19, r25
    4146:	29 f4       	brne	.+10     	; 0x4152 <lora_driver_setDeviceIdentifier+0x1e>
    4148:	bc 01       	movw	r22, r24
    414a:	88 e4       	ldi	r24, 0x48	; 72
    414c:	96 e0       	ldi	r25, 0x06	; 6
    414e:	6c cf       	rjmp	.-296    	; 0x4028 <_uploadMessageRc>
    4150:	08 95       	ret
    4152:	89 e0       	ldi	r24, 0x09	; 9
    4154:	08 95       	ret

00004156 <lora_driver_setApplicationIdentifier>:
    4156:	fc 01       	movw	r30, r24
    4158:	01 90       	ld	r0, Z+
    415a:	00 20       	and	r0, r0
    415c:	e9 f7       	brne	.-6      	; 0x4158 <lora_driver_setApplicationIdentifier+0x2>
    415e:	9f 01       	movw	r18, r30
    4160:	21 51       	subi	r18, 0x11	; 17
    4162:	31 09       	sbc	r19, r1
    4164:	28 17       	cp	r18, r24
    4166:	39 07       	cpc	r19, r25
    4168:	29 f4       	brne	.+10     	; 0x4174 <lora_driver_setApplicationIdentifier+0x1e>
    416a:	bc 01       	movw	r22, r24
    416c:	87 e5       	ldi	r24, 0x57	; 87
    416e:	96 e0       	ldi	r25, 0x06	; 6
    4170:	5b cf       	rjmp	.-330    	; 0x4028 <_uploadMessageRc>
    4172:	08 95       	ret
    4174:	89 e0       	ldi	r24, 0x09	; 9
    4176:	08 95       	ret

00004178 <lora_driver_setApplicationKey>:
    4178:	fc 01       	movw	r30, r24
    417a:	01 90       	ld	r0, Z+
    417c:	00 20       	and	r0, r0
    417e:	e9 f7       	brne	.-6      	; 0x417a <lora_driver_setApplicationKey+0x2>
    4180:	9f 01       	movw	r18, r30
    4182:	21 52       	subi	r18, 0x21	; 33
    4184:	31 09       	sbc	r19, r1
    4186:	28 17       	cp	r18, r24
    4188:	39 07       	cpc	r19, r25
    418a:	29 f4       	brne	.+10     	; 0x4196 <lora_driver_setApplicationKey+0x1e>
    418c:	bc 01       	movw	r22, r24
    418e:	86 e6       	ldi	r24, 0x66	; 102
    4190:	96 e0       	ldi	r25, 0x06	; 6
    4192:	4a cf       	rjmp	.-364    	; 0x4028 <_uploadMessageRc>
    4194:	08 95       	ret
    4196:	89 e0       	ldi	r24, 0x09	; 9
    4198:	08 95       	ret

0000419a <lora_driver_saveMac>:
    419a:	60 e0       	ldi	r22, 0x00	; 0
    419c:	70 e0       	ldi	r23, 0x00	; 0
    419e:	85 ea       	ldi	r24, 0xA5	; 165
    41a0:	96 e0       	ldi	r25, 0x06	; 6
    41a2:	42 cf       	rjmp	.-380    	; 0x4028 <_uploadMessageRc>
    41a4:	08 95       	ret

000041a6 <lora_driver_join>:
    41a6:	0f 93       	push	r16
    41a8:	1f 93       	push	r17
    41aa:	e8 2f       	mov	r30, r24
    41ac:	f0 e0       	ldi	r31, 0x00	; 0
    41ae:	ee 0f       	add	r30, r30
    41b0:	ff 1f       	adc	r31, r31
    41b2:	e1 58       	subi	r30, 0x81	; 129
    41b4:	f7 4f       	sbci	r31, 0xF7	; 247
    41b6:	60 81       	ld	r22, Z
    41b8:	71 81       	ldd	r23, Z+1	; 0x01
    41ba:	8e ea       	ldi	r24, 0xAE	; 174
    41bc:	96 e0       	ldi	r25, 0x06	; 6
    41be:	34 df       	rcall	.-408    	; 0x4028 <_uploadMessageRc>
    41c0:	81 11       	cpse	r24, r1
    41c2:	14 c0       	rjmp	.+40     	; 0x41ec <lora_driver_join+0x46>
    41c4:	08 e2       	ldi	r16, 0x28	; 40
    41c6:	15 e0       	ldi	r17, 0x05	; 5
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	4d e2       	ldi	r20, 0x2D	; 45
    41ce:	50 e0       	ldi	r21, 0x00	; 0
    41d0:	6e e7       	ldi	r22, 0x7E	; 126
    41d2:	74 e1       	ldi	r23, 0x14	; 20
    41d4:	80 91 f5 13 	lds	r24, 0x13F5	; 0x8013f5 <_serialReplyBufferHandle>
    41d8:	90 91 f6 13 	lds	r25, 0x13F6	; 0x8013f6 <_serialReplyBufferHandle+0x1>
    41dc:	0e 94 ac 0a 	call	0x1558	; 0x1558 <xStreamBufferReceive>
    41e0:	88 23       	and	r24, r24
    41e2:	21 f0       	breq	.+8      	; 0x41ec <lora_driver_join+0x46>
    41e4:	8e e7       	ldi	r24, 0x7E	; 126
    41e6:	94 e1       	ldi	r25, 0x14	; 20
    41e8:	aa de       	rcall	.-684    	; 0x3f3e <_reply2ReturnCode>
    41ea:	03 c0       	rjmp	.+6      	; 0x41f2 <lora_driver_join+0x4c>
    41ec:	8e e7       	ldi	r24, 0x7E	; 126
    41ee:	94 e1       	ldi	r25, 0x14	; 20
    41f0:	a6 de       	rcall	.-692    	; 0x3f3e <_reply2ReturnCode>
    41f2:	1f 91       	pop	r17
    41f4:	0f 91       	pop	r16
    41f6:	08 95       	ret

000041f8 <lora_driver_sendUploadMessage>:
    41f8:	0f 93       	push	r16
    41fa:	1f 93       	push	r17
    41fc:	cf 93       	push	r28
    41fe:	df 93       	push	r29
    4200:	1f 92       	push	r1
    4202:	cd b7       	in	r28, 0x3d	; 61
    4204:	de b7       	in	r29, 0x3e	; 62
    4206:	db 01       	movw	r26, r22
    4208:	11 96       	adiw	r26, 0x01	; 1
    420a:	9c 91       	ld	r25, X
    420c:	11 97       	sbiw	r26, 0x01	; 1
    420e:	95 31       	cpi	r25, 0x15	; 21
    4210:	08 f0       	brcs	.+2      	; 0x4214 <lora_driver_sendUploadMessage+0x1c>
    4212:	b4 c0       	rjmp	.+360    	; 0x437c <lora_driver_sendUploadMessage+0x184>
    4214:	99 23       	and	r25, r25
    4216:	81 f1       	breq	.+96     	; 0x4278 <lora_driver_sendUploadMessage+0x80>
    4218:	60 e0       	ldi	r22, 0x00	; 0
    421a:	70 e0       	ldi	r23, 0x00	; 0
    421c:	27 2f       	mov	r18, r23
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	46 2f       	mov	r20, r22
    4222:	50 e0       	ldi	r21, 0x00	; 0
    4224:	fd 01       	movw	r30, r26
    4226:	e4 0f       	add	r30, r20
    4228:	f5 1f       	adc	r31, r21
    422a:	92 81       	ldd	r25, Z+2	; 0x02
    422c:	92 95       	swap	r25
    422e:	9f 70       	andi	r25, 0x0F	; 15
    4230:	9a 30       	cpi	r25, 0x0A	; 10
    4232:	10 f0       	brcs	.+4      	; 0x4238 <lora_driver_sendUploadMessage+0x40>
    4234:	99 5c       	subi	r25, 0xC9	; 201
    4236:	01 c0       	rjmp	.+2      	; 0x423a <lora_driver_sendUploadMessage+0x42>
    4238:	90 5d       	subi	r25, 0xD0	; 208
    423a:	f9 01       	movw	r30, r18
    423c:	e1 5f       	subi	r30, 0xF1	; 241
    423e:	fb 4e       	sbci	r31, 0xEB	; 235
    4240:	90 83       	st	Z, r25
    4242:	2f 5f       	subi	r18, 0xFF	; 255
    4244:	3f 4f       	sbci	r19, 0xFF	; 255
    4246:	fd 01       	movw	r30, r26
    4248:	e4 0f       	add	r30, r20
    424a:	f5 1f       	adc	r31, r21
    424c:	92 81       	ldd	r25, Z+2	; 0x02
    424e:	9f 70       	andi	r25, 0x0F	; 15
    4250:	49 2f       	mov	r20, r25
    4252:	50 e0       	ldi	r21, 0x00	; 0
    4254:	4a 30       	cpi	r20, 0x0A	; 10
    4256:	51 05       	cpc	r21, r1
    4258:	14 f0       	brlt	.+4      	; 0x425e <lora_driver_sendUploadMessage+0x66>
    425a:	99 5c       	subi	r25, 0xC9	; 201
    425c:	01 c0       	rjmp	.+2      	; 0x4260 <lora_driver_sendUploadMessage+0x68>
    425e:	90 5d       	subi	r25, 0xD0	; 208
    4260:	f9 01       	movw	r30, r18
    4262:	e1 5f       	subi	r30, 0xF1	; 241
    4264:	fb 4e       	sbci	r31, 0xEB	; 235
    4266:	90 83       	st	Z, r25
    4268:	7e 5f       	subi	r23, 0xFE	; 254
    426a:	6f 5f       	subi	r22, 0xFF	; 255
    426c:	11 96       	adiw	r26, 0x01	; 1
    426e:	9c 91       	ld	r25, X
    4270:	11 97       	sbiw	r26, 0x01	; 1
    4272:	69 17       	cp	r22, r25
    4274:	98 f2       	brcs	.-90     	; 0x421c <lora_driver_sendUploadMessage+0x24>
    4276:	01 c0       	rjmp	.+2      	; 0x427a <lora_driver_sendUploadMessage+0x82>
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	e7 2f       	mov	r30, r23
    427c:	f0 e0       	ldi	r31, 0x00	; 0
    427e:	e1 5f       	subi	r30, 0xF1	; 241
    4280:	fb 4e       	sbci	r31, 0xEB	; 235
    4282:	10 82       	st	Z, r1
    4284:	4c 91       	ld	r20, X
    4286:	81 11       	cpse	r24, r1
    4288:	03 c0       	rjmp	.+6      	; 0x4290 <lora_driver_sendUploadMessage+0x98>
    428a:	87 eb       	ldi	r24, 0xB7	; 183
    428c:	96 e0       	ldi	r25, 0x06	; 6
    428e:	02 c0       	rjmp	.+4      	; 0x4294 <lora_driver_sendUploadMessage+0x9c>
    4290:	89 eb       	ldi	r24, 0xB9	; 185
    4292:	96 e0       	ldi	r25, 0x06	; 6
    4294:	2f e0       	ldi	r18, 0x0F	; 15
    4296:	34 e1       	ldi	r19, 0x14	; 20
    4298:	3f 93       	push	r19
    429a:	2f 93       	push	r18
    429c:	1f 92       	push	r1
    429e:	4f 93       	push	r20
    42a0:	9f 93       	push	r25
    42a2:	8f 93       	push	r24
    42a4:	8d eb       	ldi	r24, 0xBD	; 189
    42a6:	96 e0       	ldi	r25, 0x06	; 6
    42a8:	9f 93       	push	r25
    42aa:	8f 93       	push	r24
    42ac:	81 e5       	ldi	r24, 0x51	; 81
    42ae:	94 e1       	ldi	r25, 0x14	; 20
    42b0:	9f 93       	push	r25
    42b2:	8f 93       	push	r24
    42b4:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
    42b8:	60 e0       	ldi	r22, 0x00	; 0
    42ba:	70 e0       	ldi	r23, 0x00	; 0
    42bc:	81 e5       	ldi	r24, 0x51	; 81
    42be:	94 e1       	ldi	r25, 0x14	; 20
    42c0:	b3 de       	rcall	.-666    	; 0x4028 <_uploadMessageRc>
    42c2:	0f b6       	in	r0, 0x3f	; 63
    42c4:	f8 94       	cli
    42c6:	de bf       	out	0x3e, r29	; 62
    42c8:	0f be       	out	0x3f, r0	; 63
    42ca:	cd bf       	out	0x3d, r28	; 61
    42cc:	81 11       	cpse	r24, r1
    42ce:	59 c0       	rjmp	.+178    	; 0x4382 <lora_driver_sendUploadMessage+0x18a>
    42d0:	08 e2       	ldi	r16, 0x28	; 40
    42d2:	15 e0       	ldi	r17, 0x05	; 5
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	4d e2       	ldi	r20, 0x2D	; 45
    42da:	50 e0       	ldi	r21, 0x00	; 0
    42dc:	6e e7       	ldi	r22, 0x7E	; 126
    42de:	74 e1       	ldi	r23, 0x14	; 20
    42e0:	80 91 f5 13 	lds	r24, 0x13F5	; 0x8013f5 <_serialReplyBufferHandle>
    42e4:	90 91 f6 13 	lds	r25, 0x13F6	; 0x8013f6 <_serialReplyBufferHandle+0x1>
    42e8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <xStreamBufferReceive>
    42ec:	88 23       	and	r24, r24
    42ee:	09 f4       	brne	.+2      	; 0x42f2 <lora_driver_sendUploadMessage+0xfa>
    42f0:	47 c0       	rjmp	.+142    	; 0x4380 <lora_driver_sendUploadMessage+0x188>
    42f2:	8e e7       	ldi	r24, 0x7E	; 126
    42f4:	94 e1       	ldi	r25, 0x14	; 20
    42f6:	23 de       	rcall	.-954    	; 0x3f3e <_reply2ReturnCode>
    42f8:	8e 30       	cpi	r24, 0x0E	; 14
    42fa:	09 f0       	breq	.+2      	; 0x42fe <lora_driver_sendUploadMessage+0x106>
    42fc:	42 c0       	rjmp	.+132    	; 0x4382 <lora_driver_sendUploadMessage+0x18a>
    42fe:	87 e0       	ldi	r24, 0x07	; 7
    4300:	89 83       	std	Y+1, r24	; 0x01
    4302:	80 91 f3 13 	lds	r24, 0x13F3	; 0x8013f3 <_downlinkMessageBuffer>
    4306:	90 91 f4 13 	lds	r25, 0x13F4	; 0x8013f4 <_downlinkMessageBuffer+0x1>
    430a:	89 2b       	or	r24, r25
    430c:	a9 f1       	breq	.+106    	; 0x4378 <lora_driver_sendUploadMessage+0x180>
    430e:	be 01       	movw	r22, r28
    4310:	6f 5f       	subi	r22, 0xFF	; 255
    4312:	7f 4f       	sbci	r23, 0xFF	; 255
    4314:	8e e7       	ldi	r24, 0x7E	; 126
    4316:	94 e1       	ldi	r25, 0x14	; 20
    4318:	68 d1       	rcall	.+720    	; 0x45ea <decode_port_no>
    431a:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <_downlinkPayload>
    431e:	e9 81       	ldd	r30, Y+1	; 0x01
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	e2 58       	subi	r30, 0x82	; 130
    4324:	fb 4e       	sbci	r31, 0xEB	; 235
    4326:	df 01       	movw	r26, r30
    4328:	0d 90       	ld	r0, X+
    432a:	00 20       	and	r0, r0
    432c:	e9 f7       	brne	.-6      	; 0x4328 <lora_driver_sendUploadMessage+0x130>
    432e:	11 97       	sbiw	r26, 0x01	; 1
    4330:	ae 1b       	sub	r26, r30
    4332:	bf 0b       	sbc	r27, r31
    4334:	aa 23       	and	r26, r26
    4336:	91 f0       	breq	.+36     	; 0x435c <lora_driver_sendUploadMessage+0x164>
    4338:	bb 27       	eor	r27, r27
    433a:	cd 01       	movw	r24, r26
    433c:	01 97       	sbiw	r24, 0x01	; 1
    433e:	9c 01       	movw	r18, r24
    4340:	12 f4       	brpl	.+4      	; 0x4346 <lora_driver_sendUploadMessage+0x14e>
    4342:	2f 5f       	subi	r18, 0xFF	; 255
    4344:	3f 4f       	sbci	r19, 0xFF	; 255
    4346:	35 95       	asr	r19
    4348:	27 95       	ror	r18
    434a:	20 93 fa 13 	sts	0x13FA, r18	; 0x8013fa <_downlinkPayload+0x1>
    434e:	af 01       	movw	r20, r30
    4350:	4f 5f       	subi	r20, 0xFF	; 255
    4352:	5f 4f       	sbci	r21, 0xFF	; 255
    4354:	64 e1       	ldi	r22, 0x14	; 20
    4356:	8b ef       	ldi	r24, 0xFB	; 251
    4358:	93 e1       	ldi	r25, 0x13	; 19
    435a:	73 d1       	rcall	.+742    	; 0x4642 <decode_hexadecimal_string_bytes>
    435c:	01 e0       	ldi	r16, 0x01	; 1
    435e:	10 e0       	ldi	r17, 0x00	; 0
    4360:	20 e0       	ldi	r18, 0x00	; 0
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	46 e1       	ldi	r20, 0x16	; 22
    4366:	50 e0       	ldi	r21, 0x00	; 0
    4368:	69 ef       	ldi	r22, 0xF9	; 249
    436a:	73 e1       	ldi	r23, 0x13	; 19
    436c:	80 91 f3 13 	lds	r24, 0x13F3	; 0x8013f3 <_downlinkMessageBuffer>
    4370:	90 91 f4 13 	lds	r25, 0x13F4	; 0x8013f4 <_downlinkMessageBuffer+0x1>
    4374:	0e 94 a5 09 	call	0x134a	; 0x134a <xStreamBufferSend>
    4378:	8e e0       	ldi	r24, 0x0E	; 14
    437a:	03 c0       	rjmp	.+6      	; 0x4382 <lora_driver_sendUploadMessage+0x18a>
    437c:	84 e1       	ldi	r24, 0x14	; 20
    437e:	01 c0       	rjmp	.+2      	; 0x4382 <lora_driver_sendUploadMessage+0x18a>
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	0f 90       	pop	r0
    4384:	df 91       	pop	r29
    4386:	cf 91       	pop	r28
    4388:	1f 91       	pop	r17
    438a:	0f 91       	pop	r16
    438c:	08 95       	ret

0000438e <lora_driver_setAdaptiveDataRate>:
    438e:	81 30       	cpi	r24, 0x01	; 1
    4390:	19 f0       	breq	.+6      	; 0x4398 <lora_driver_setAdaptiveDataRate+0xa>
    4392:	6d ec       	ldi	r22, 0xCD	; 205
    4394:	76 e0       	ldi	r23, 0x06	; 6
    4396:	02 c0       	rjmp	.+4      	; 0x439c <lora_driver_setAdaptiveDataRate+0xe>
    4398:	66 ea       	ldi	r22, 0xA6	; 166
    439a:	77 e0       	ldi	r23, 0x07	; 7
    439c:	81 ed       	ldi	r24, 0xD1	; 209
    439e:	96 e0       	ldi	r25, 0x06	; 6
    43a0:	43 ce       	rjmp	.-890    	; 0x4028 <_uploadMessageRc>
    43a2:	08 95       	ret

000043a4 <lora_driver_setReceiveDelay>:
    43a4:	9f 93       	push	r25
    43a6:	8f 93       	push	r24
    43a8:	82 e0       	ldi	r24, 0x02	; 2
    43aa:	97 e0       	ldi	r25, 0x07	; 7
    43ac:	9f 93       	push	r25
    43ae:	8f 93       	push	r24
    43b0:	81 e5       	ldi	r24, 0x51	; 81
    43b2:	94 e1       	ldi	r25, 0x14	; 20
    43b4:	9f 93       	push	r25
    43b6:	8f 93       	push	r24
    43b8:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
    43bc:	60 e0       	ldi	r22, 0x00	; 0
    43be:	70 e0       	ldi	r23, 0x00	; 0
    43c0:	81 e5       	ldi	r24, 0x51	; 81
    43c2:	94 e1       	ldi	r25, 0x14	; 20
    43c4:	31 de       	rcall	.-926    	; 0x4028 <_uploadMessageRc>
    43c6:	0f 90       	pop	r0
    43c8:	0f 90       	pop	r0
    43ca:	0f 90       	pop	r0
    43cc:	0f 90       	pop	r0
    43ce:	0f 90       	pop	r0
    43d0:	0f 90       	pop	r0
    43d2:	08 95       	ret

000043d4 <lora_driver_configureToEu868>:
    43d4:	2f 92       	push	r2
    43d6:	3f 92       	push	r3
    43d8:	4f 92       	push	r4
    43da:	5f 92       	push	r5
    43dc:	6f 92       	push	r6
    43de:	7f 92       	push	r7
    43e0:	8f 92       	push	r8
    43e2:	9f 92       	push	r9
    43e4:	af 92       	push	r10
    43e6:	bf 92       	push	r11
    43e8:	cf 92       	push	r12
    43ea:	df 92       	push	r13
    43ec:	ef 92       	push	r14
    43ee:	ff 92       	push	r15
    43f0:	0f 93       	push	r16
    43f2:	1f 93       	push	r17
    43f4:	cf 93       	push	r28
    43f6:	df 93       	push	r29
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	a0 97       	sbiw	r28, 0x20	; 32
    43fe:	0f b6       	in	r0, 0x3f	; 63
    4400:	f8 94       	cli
    4402:	de bf       	out	0x3e, r29	; 62
    4404:	0f be       	out	0x3f, r0	; 63
    4406:	cd bf       	out	0x3d, r28	; 61
    4408:	6f e2       	ldi	r22, 0x2F	; 47
    440a:	77 e0       	ldi	r23, 0x07	; 7
    440c:	8b e3       	ldi	r24, 0x3B	; 59
    440e:	97 e0       	ldi	r25, 0x07	; 7
    4410:	3c dd       	rcall	.-1416   	; 0x3e8a <_uploadMessage>
    4412:	95 dd       	rcall	.-1238   	; 0x3f3e <_reply2ReturnCode>
    4414:	81 11       	cpse	r24, r1
    4416:	a3 c0       	rjmp	.+326    	; 0x455e <lora_driver_configureToEu868+0x18a>
    4418:	80 e2       	ldi	r24, 0x20	; 32
    441a:	e2 e2       	ldi	r30, 0x22	; 34
    441c:	f2 e0       	ldi	r31, 0x02	; 2
    441e:	de 01       	movw	r26, r28
    4420:	11 96       	adiw	r26, 0x01	; 1
    4422:	01 90       	ld	r0, Z+
    4424:	0d 92       	st	X+, r0
    4426:	8a 95       	dec	r24
    4428:	e1 f7       	brne	.-8      	; 0x4422 <lora_driver_configureToEu868+0x4e>
    442a:	9e 01       	movw	r18, r28
    442c:	2f 5f       	subi	r18, 0xFF	; 255
    442e:	3f 4f       	sbci	r19, 0xFF	; 255
    4430:	69 01       	movw	r12, r18
    4432:	e1 2c       	mov	r14, r1
    4434:	f1 2c       	mov	r15, r1
    4436:	0f 2e       	mov	r0, r31
    4438:	f7 e4       	ldi	r31, 0x47	; 71
    443a:	af 2e       	mov	r10, r31
    443c:	f7 e0       	ldi	r31, 0x07	; 7
    443e:	bf 2e       	mov	r11, r31
    4440:	f0 2d       	mov	r31, r0
    4442:	01 e5       	ldi	r16, 0x51	; 81
    4444:	14 e1       	ldi	r17, 0x14	; 20
    4446:	0f 2e       	mov	r0, r31
    4448:	f0 e6       	ldi	r31, 0x60	; 96
    444a:	4f 2e       	mov	r4, r31
    444c:	f7 e0       	ldi	r31, 0x07	; 7
    444e:	5f 2e       	mov	r5, r31
    4450:	f0 2d       	mov	r31, r0
    4452:	0f 2e       	mov	r0, r31
    4454:	f7 e7       	ldi	r31, 0x77	; 119
    4456:	8f 2e       	mov	r8, r31
    4458:	f7 e0       	ldi	r31, 0x07	; 7
    445a:	9f 2e       	mov	r9, r31
    445c:	f0 2d       	mov	r31, r0
    445e:	0f 2e       	mov	r0, r31
    4460:	f1 e9       	ldi	r31, 0x91	; 145
    4462:	6f 2e       	mov	r6, r31
    4464:	f7 e0       	ldi	r31, 0x07	; 7
    4466:	7f 2e       	mov	r7, r31
    4468:	f0 2d       	mov	r31, r0
    446a:	3e 2c       	mov	r3, r14
    446c:	2f 2c       	mov	r2, r15
    446e:	ff 92       	push	r15
    4470:	ef 92       	push	r14
    4472:	bf 92       	push	r11
    4474:	af 92       	push	r10
    4476:	1f 93       	push	r17
    4478:	0f 93       	push	r16
    447a:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
    447e:	60 e0       	ldi	r22, 0x00	; 0
    4480:	70 e0       	ldi	r23, 0x00	; 0
    4482:	c8 01       	movw	r24, r16
    4484:	02 dd       	rcall	.-1532   	; 0x3e8a <_uploadMessage>
    4486:	5b dd       	rcall	.-1354   	; 0x3f3e <_reply2ReturnCode>
    4488:	0f 90       	pop	r0
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	81 11       	cpse	r24, r1
    4496:	63 c0       	rjmp	.+198    	; 0x455e <lora_driver_configureToEu868+0x18a>
    4498:	32 e0       	ldi	r19, 0x02	; 2
    449a:	3e 15       	cp	r19, r14
    449c:	e8 f4       	brcc	.+58     	; 0x44d8 <lora_driver_configureToEu868+0x104>
    449e:	f6 01       	movw	r30, r12
    44a0:	83 81       	ldd	r24, Z+3	; 0x03
    44a2:	8f 93       	push	r24
    44a4:	82 81       	ldd	r24, Z+2	; 0x02
    44a6:	8f 93       	push	r24
    44a8:	81 81       	ldd	r24, Z+1	; 0x01
    44aa:	8f 93       	push	r24
    44ac:	80 81       	ld	r24, Z
    44ae:	8f 93       	push	r24
    44b0:	ff 92       	push	r15
    44b2:	ef 92       	push	r14
    44b4:	5f 92       	push	r5
    44b6:	4f 92       	push	r4
    44b8:	1f 93       	push	r17
    44ba:	0f 93       	push	r16
    44bc:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
    44c0:	60 e0       	ldi	r22, 0x00	; 0
    44c2:	70 e0       	ldi	r23, 0x00	; 0
    44c4:	c8 01       	movw	r24, r16
    44c6:	e1 dc       	rcall	.-1598   	; 0x3e8a <_uploadMessage>
    44c8:	3a dd       	rcall	.-1420   	; 0x3f3e <_reply2ReturnCode>
    44ca:	0f b6       	in	r0, 0x3f	; 63
    44cc:	f8 94       	cli
    44ce:	de bf       	out	0x3e, r29	; 62
    44d0:	0f be       	out	0x3f, r0	; 63
    44d2:	cd bf       	out	0x3d, r28	; 61
    44d4:	81 11       	cpse	r24, r1
    44d6:	43 c0       	rjmp	.+134    	; 0x455e <lora_driver_configureToEu868+0x18a>
    44d8:	2f 92       	push	r2
    44da:	3f 92       	push	r3
    44dc:	9f 92       	push	r9
    44de:	8f 92       	push	r8
    44e0:	1f 93       	push	r17
    44e2:	0f 93       	push	r16
    44e4:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
    44e8:	60 e0       	ldi	r22, 0x00	; 0
    44ea:	70 e0       	ldi	r23, 0x00	; 0
    44ec:	c8 01       	movw	r24, r16
    44ee:	cd dc       	rcall	.-1638   	; 0x3e8a <_uploadMessage>
    44f0:	26 dd       	rcall	.-1460   	; 0x3f3e <_reply2ReturnCode>
    44f2:	0f 90       	pop	r0
    44f4:	0f 90       	pop	r0
    44f6:	0f 90       	pop	r0
    44f8:	0f 90       	pop	r0
    44fa:	0f 90       	pop	r0
    44fc:	0f 90       	pop	r0
    44fe:	81 11       	cpse	r24, r1
    4500:	2e c0       	rjmp	.+92     	; 0x455e <lora_driver_configureToEu868+0x18a>
    4502:	2f 92       	push	r2
    4504:	3f 92       	push	r3
    4506:	7f 92       	push	r7
    4508:	6f 92       	push	r6
    450a:	1f 93       	push	r17
    450c:	0f 93       	push	r16
    450e:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <sprintf>
    4512:	60 e0       	ldi	r22, 0x00	; 0
    4514:	70 e0       	ldi	r23, 0x00	; 0
    4516:	c8 01       	movw	r24, r16
    4518:	b8 dc       	rcall	.-1680   	; 0x3e8a <_uploadMessage>
    451a:	11 dd       	rcall	.-1502   	; 0x3f3e <_reply2ReturnCode>
    451c:	0f 90       	pop	r0
    451e:	0f 90       	pop	r0
    4520:	0f 90       	pop	r0
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
    4526:	0f 90       	pop	r0
    4528:	81 11       	cpse	r24, r1
    452a:	19 c0       	rjmp	.+50     	; 0x455e <lora_driver_configureToEu868+0x18a>
    452c:	3f ef       	ldi	r19, 0xFF	; 255
    452e:	e3 1a       	sub	r14, r19
    4530:	f3 0a       	sbc	r15, r19
    4532:	84 e0       	ldi	r24, 0x04	; 4
    4534:	c8 0e       	add	r12, r24
    4536:	d1 1c       	adc	r13, r1
    4538:	98 e0       	ldi	r25, 0x08	; 8
    453a:	e9 16       	cp	r14, r25
    453c:	f1 04       	cpc	r15, r1
    453e:	09 f0       	breq	.+2      	; 0x4542 <lora_driver_configureToEu868+0x16e>
    4540:	94 cf       	rjmp	.-216    	; 0x446a <lora_driver_configureToEu868+0x96>
    4542:	60 e0       	ldi	r22, 0x00	; 0
    4544:	70 e0       	ldi	r23, 0x00	; 0
    4546:	89 ea       	ldi	r24, 0xA9	; 169
    4548:	97 e0       	ldi	r25, 0x07	; 7
    454a:	9f dc       	rcall	.-1730   	; 0x3e8a <_uploadMessage>
    454c:	f8 dc       	rcall	.-1552   	; 0x3f3e <_reply2ReturnCode>
    454e:	81 11       	cpse	r24, r1
    4550:	06 c0       	rjmp	.+12     	; 0x455e <lora_driver_configureToEu868+0x18a>
    4552:	60 e0       	ldi	r22, 0x00	; 0
    4554:	70 e0       	ldi	r23, 0x00	; 0
    4556:	8a eb       	ldi	r24, 0xBA	; 186
    4558:	97 e0       	ldi	r25, 0x07	; 7
    455a:	97 dc       	rcall	.-1746   	; 0x3e8a <_uploadMessage>
    455c:	f0 dc       	rcall	.-1568   	; 0x3f3e <_reply2ReturnCode>
    455e:	a0 96       	adiw	r28, 0x20	; 32
    4560:	0f b6       	in	r0, 0x3f	; 63
    4562:	f8 94       	cli
    4564:	de bf       	out	0x3e, r29	; 62
    4566:	0f be       	out	0x3f, r0	; 63
    4568:	cd bf       	out	0x3d, r28	; 61
    456a:	df 91       	pop	r29
    456c:	cf 91       	pop	r28
    456e:	1f 91       	pop	r17
    4570:	0f 91       	pop	r16
    4572:	ff 90       	pop	r15
    4574:	ef 90       	pop	r14
    4576:	df 90       	pop	r13
    4578:	cf 90       	pop	r12
    457a:	bf 90       	pop	r11
    457c:	af 90       	pop	r10
    457e:	9f 90       	pop	r9
    4580:	8f 90       	pop	r8
    4582:	7f 90       	pop	r7
    4584:	6f 90       	pop	r6
    4586:	5f 90       	pop	r5
    4588:	4f 90       	pop	r4
    458a:	3f 90       	pop	r3
    458c:	2f 90       	pop	r2
    458e:	08 95       	ret

00004590 <lora_driver_setOtaaIdentity>:
    4590:	ef 92       	push	r14
    4592:	ff 92       	push	r15
    4594:	0f 93       	push	r16
    4596:	1f 93       	push	r17
    4598:	cf 93       	push	r28
    459a:	df 93       	push	r29
    459c:	ec 01       	movw	r28, r24
    459e:	8b 01       	movw	r16, r22
    45a0:	7a 01       	movw	r14, r20
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	f4 de       	rcall	.-536    	; 0x438e <lora_driver_setAdaptiveDataRate>
    45a6:	81 11       	cpse	r24, r1
    45a8:	0d c0       	rjmp	.+26     	; 0x45c4 <lora_driver_setOtaaIdentity+0x34>
    45aa:	ce 01       	movw	r24, r28
    45ac:	d4 dd       	rcall	.-1112   	; 0x4156 <lora_driver_setApplicationIdentifier>
    45ae:	81 11       	cpse	r24, r1
    45b0:	09 c0       	rjmp	.+18     	; 0x45c4 <lora_driver_setOtaaIdentity+0x34>
    45b2:	c8 01       	movw	r24, r16
    45b4:	e1 dd       	rcall	.-1086   	; 0x4178 <lora_driver_setApplicationKey>
    45b6:	81 11       	cpse	r24, r1
    45b8:	05 c0       	rjmp	.+10     	; 0x45c4 <lora_driver_setOtaaIdentity+0x34>
    45ba:	c7 01       	movw	r24, r14
    45bc:	bb dd       	rcall	.-1162   	; 0x4134 <lora_driver_setDeviceIdentifier>
    45be:	81 11       	cpse	r24, r1
    45c0:	01 c0       	rjmp	.+2      	; 0x45c4 <lora_driver_setOtaaIdentity+0x34>
    45c2:	eb dd       	rcall	.-1066   	; 0x419a <lora_driver_saveMac>
    45c4:	df 91       	pop	r29
    45c6:	cf 91       	pop	r28
    45c8:	1f 91       	pop	r17
    45ca:	0f 91       	pop	r16
    45cc:	ff 90       	pop	r15
    45ce:	ef 90       	pop	r14
    45d0:	08 95       	ret

000045d2 <lora_driver_mapReturnCodeToText>:
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	fc 01       	movw	r30, r24
    45d6:	ee 0f       	add	r30, r30
    45d8:	ff 1f       	adc	r31, r31
    45da:	8e 0f       	add	r24, r30
    45dc:	9f 1f       	adc	r25, r31
    45de:	fc 01       	movw	r30, r24
    45e0:	ed 57       	subi	r30, 0x7D	; 125
    45e2:	f7 4f       	sbci	r31, 0xF7	; 247
    45e4:	81 81       	ldd	r24, Z+1	; 0x01
    45e6:	92 81       	ldd	r25, Z+2	; 0x02
    45e8:	08 95       	ret

000045ea <decode_port_no>:
    45ea:	dc 01       	movw	r26, r24
    45ec:	00 97       	sbiw	r24, 0x00	; 0
    45ee:	29 f1       	breq	.+74     	; 0x463a <decode_port_no+0x50>
    45f0:	fb 01       	movw	r30, r22
    45f2:	20 81       	ld	r18, Z
    45f4:	fc 01       	movw	r30, r24
    45f6:	01 90       	ld	r0, Z+
    45f8:	00 20       	and	r0, r0
    45fa:	e9 f7       	brne	.-6      	; 0x45f6 <decode_port_no+0xc>
    45fc:	31 97       	sbiw	r30, 0x01	; 1
    45fe:	e8 1b       	sub	r30, r24
    4600:	f9 0b       	sbc	r31, r25
    4602:	82 2f       	mov	r24, r18
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	e8 17       	cp	r30, r24
    4608:	f9 07       	cpc	r31, r25
    460a:	c8 f0       	brcs	.+50     	; 0x463e <decode_port_no+0x54>
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	08 c0       	rjmp	.+16     	; 0x4620 <decode_port_no+0x36>
    4610:	88 0f       	add	r24, r24
    4612:	38 2f       	mov	r19, r24
    4614:	33 0f       	add	r19, r19
    4616:	33 0f       	add	r19, r19
    4618:	83 0f       	add	r24, r19
    461a:	80 53       	subi	r24, 0x30	; 48
    461c:	89 0f       	add	r24, r25
    461e:	2f 5f       	subi	r18, 0xFF	; 255
    4620:	fd 01       	movw	r30, r26
    4622:	e2 0f       	add	r30, r18
    4624:	f1 1d       	adc	r31, r1
    4626:	90 81       	ld	r25, Z
    4628:	30 ed       	ldi	r19, 0xD0	; 208
    462a:	39 0f       	add	r19, r25
    462c:	3a 30       	cpi	r19, 0x0A	; 10
    462e:	10 f4       	brcc	.+4      	; 0x4634 <decode_port_no+0x4a>
    4630:	91 11       	cpse	r25, r1
    4632:	ee cf       	rjmp	.-36     	; 0x4610 <decode_port_no+0x26>
    4634:	fb 01       	movw	r30, r22
    4636:	20 83       	st	Z, r18
    4638:	08 95       	ret
    463a:	80 e0       	ldi	r24, 0x00	; 0
    463c:	08 95       	ret
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	08 95       	ret

00004642 <decode_hexadecimal_string_bytes>:
    4642:	0f 93       	push	r16
    4644:	1f 93       	push	r17
    4646:	cf 93       	push	r28
    4648:	df 93       	push	r29
    464a:	dc 01       	movw	r26, r24
    464c:	ea 01       	movw	r28, r20
    464e:	20 97       	sbiw	r28, 0x00	; 0
    4650:	e1 f1       	breq	.+120    	; 0x46ca <decode_hexadecimal_string_bytes+0x88>
    4652:	fa 01       	movw	r30, r20
    4654:	01 90       	ld	r0, Z+
    4656:	00 20       	and	r0, r0
    4658:	e9 f7       	brne	.-6      	; 0x4654 <decode_hexadecimal_string_bytes+0x12>
    465a:	31 97       	sbiw	r30, 0x01	; 1
    465c:	e4 1b       	sub	r30, r20
    465e:	f5 0b       	sbc	r31, r21
    4660:	32 97       	sbiw	r30, 0x02	; 2
    4662:	10 f5       	brcc	.+68     	; 0x46a8 <decode_hexadecimal_string_bytes+0x66>
    4664:	32 c0       	rjmp	.+100    	; 0x46ca <decode_hexadecimal_string_bytes+0x88>
    4666:	8d 01       	movw	r16, r26
    4668:	04 0f       	add	r16, r20
    466a:	15 1f       	adc	r17, r21
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	ae 01       	movw	r20, r28
    4670:	42 0f       	add	r20, r18
    4672:	53 1f       	adc	r21, r19
    4674:	fa 01       	movw	r30, r20
    4676:	90 81       	ld	r25, Z
    4678:	91 34       	cpi	r25, 0x41	; 65
    467a:	28 f0       	brcs	.+10     	; 0x4686 <decode_hexadecimal_string_bytes+0x44>
    467c:	97 53       	subi	r25, 0x37	; 55
    467e:	59 2f       	mov	r21, r25
    4680:	52 95       	swap	r21
    4682:	50 7f       	andi	r21, 0xF0	; 240
    4684:	03 c0       	rjmp	.+6      	; 0x468c <decode_hexadecimal_string_bytes+0x4a>
    4686:	59 2f       	mov	r21, r25
    4688:	52 95       	swap	r21
    468a:	50 7f       	andi	r21, 0xF0	; 240
    468c:	2c 0f       	add	r18, r28
    468e:	3d 1f       	adc	r19, r29
    4690:	f9 01       	movw	r30, r18
    4692:	91 81       	ldd	r25, Z+1	; 0x01
    4694:	91 34       	cpi	r25, 0x41	; 65
    4696:	10 f0       	brcs	.+4      	; 0x469c <decode_hexadecimal_string_bytes+0x5a>
    4698:	97 53       	subi	r25, 0x37	; 55
    469a:	01 c0       	rjmp	.+2      	; 0x469e <decode_hexadecimal_string_bytes+0x5c>
    469c:	90 53       	subi	r25, 0x30	; 48
    469e:	95 0f       	add	r25, r21
    46a0:	f8 01       	movw	r30, r16
    46a2:	90 83       	st	Z, r25
    46a4:	8f 5f       	subi	r24, 0xFF	; 255
    46a6:	01 c0       	rjmp	.+2      	; 0x46aa <decode_hexadecimal_string_bytes+0x68>
    46a8:	80 e0       	ldi	r24, 0x00	; 0
    46aa:	28 2f       	mov	r18, r24
    46ac:	22 0f       	add	r18, r18
    46ae:	48 2f       	mov	r20, r24
    46b0:	50 e0       	ldi	r21, 0x00	; 0
    46b2:	fe 01       	movw	r30, r28
    46b4:	01 90       	ld	r0, Z+
    46b6:	00 20       	and	r0, r0
    46b8:	e9 f7       	brne	.-6      	; 0x46b4 <decode_hexadecimal_string_bytes+0x72>
    46ba:	31 97       	sbiw	r30, 0x01	; 1
    46bc:	ec 1b       	sub	r30, r28
    46be:	fd 0b       	sbc	r31, r29
    46c0:	4e 17       	cp	r20, r30
    46c2:	5f 07       	cpc	r21, r31
    46c4:	10 f4       	brcc	.+4      	; 0x46ca <decode_hexadecimal_string_bytes+0x88>
    46c6:	86 13       	cpse	r24, r22
    46c8:	ce cf       	rjmp	.-100    	; 0x4666 <decode_hexadecimal_string_bytes+0x24>
    46ca:	df 91       	pop	r29
    46cc:	cf 91       	pop	r28
    46ce:	1f 91       	pop	r17
    46d0:	0f 91       	pop	r16
    46d2:	08 95       	ret

000046d4 <_serialCallBack>:
    46d4:	80 91 ae 14 	lds	r24, 0x14AE	; 0x8014ae <crc_sum.1945>
    46d8:	86 0f       	add	r24, r22
    46da:	80 93 ae 14 	sts	0x14AE, r24	; 0x8014ae <crc_sum.1945>
    46de:	90 91 b1 14 	lds	r25, 0x14B1	; 0x8014b1 <_mh_state>
    46e2:	91 30       	cpi	r25, 0x01	; 1
    46e4:	79 f0       	breq	.+30     	; 0x4704 <_serialCallBack+0x30>
    46e6:	28 f0       	brcs	.+10     	; 0x46f2 <_serialCallBack+0x1e>
    46e8:	92 30       	cpi	r25, 0x02	; 2
    46ea:	a9 f0       	breq	.+42     	; 0x4716 <_serialCallBack+0x42>
    46ec:	93 30       	cpi	r25, 0x03	; 3
    46ee:	19 f1       	breq	.+70     	; 0x4736 <_serialCallBack+0x62>
    46f0:	08 95       	ret
    46f2:	6f 3f       	cpi	r22, 0xFF	; 255
    46f4:	09 f0       	breq	.+2      	; 0x46f8 <_serialCallBack+0x24>
    46f6:	48 c0       	rjmp	.+144    	; 0x4788 <_serialCallBack+0xb4>
    46f8:	10 92 ae 14 	sts	0x14AE, r1	; 0x8014ae <crc_sum.1945>
    46fc:	81 e0       	ldi	r24, 0x01	; 1
    46fe:	80 93 b1 14 	sts	0x14B1, r24	; 0x8014b1 <_mh_state>
    4702:	08 95       	ret
    4704:	66 38       	cpi	r22, 0x86	; 134
    4706:	09 f0       	breq	.+2      	; 0x470a <_serialCallBack+0x36>
    4708:	3f c0       	rjmp	.+126    	; 0x4788 <_serialCallBack+0xb4>
    470a:	10 92 ad 14 	sts	0x14AD, r1	; 0x8014ad <inDex.1943>
    470e:	82 e0       	ldi	r24, 0x02	; 2
    4710:	80 93 b1 14 	sts	0x14B1, r24	; 0x8014b1 <_mh_state>
    4714:	08 95       	ret
    4716:	e0 91 ad 14 	lds	r30, 0x14AD	; 0x8014ad <inDex.1943>
    471a:	81 e0       	ldi	r24, 0x01	; 1
    471c:	8e 0f       	add	r24, r30
    471e:	80 93 ad 14 	sts	0x14AD, r24	; 0x8014ad <inDex.1943>
    4722:	f0 e0       	ldi	r31, 0x00	; 0
    4724:	e5 55       	subi	r30, 0x55	; 85
    4726:	fb 4e       	sbci	r31, 0xEB	; 235
    4728:	60 83       	st	Z, r22
    472a:	82 30       	cpi	r24, 0x02	; 2
    472c:	69 f5       	brne	.+90     	; 0x4788 <_serialCallBack+0xb4>
    472e:	83 e0       	ldi	r24, 0x03	; 3
    4730:	80 93 b1 14 	sts	0x14B1, r24	; 0x8014b1 <_mh_state>
    4734:	08 95       	ret
    4736:	90 91 ad 14 	lds	r25, 0x14AD	; 0x8014ad <inDex.1943>
    473a:	21 e0       	ldi	r18, 0x01	; 1
    473c:	29 0f       	add	r18, r25
    473e:	20 93 ad 14 	sts	0x14AD, r18	; 0x8014ad <inDex.1943>
    4742:	96 30       	cpi	r25, 0x06	; 6
    4744:	09 f5       	brne	.+66     	; 0x4788 <_serialCallBack+0xb4>
    4746:	81 11       	cpse	r24, r1
    4748:	0e c0       	rjmp	.+28     	; 0x4766 <_serialCallBack+0x92>
    474a:	eb ea       	ldi	r30, 0xAB	; 171
    474c:	f4 e1       	ldi	r31, 0x14	; 20
    474e:	80 81       	ld	r24, Z
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	98 2f       	mov	r25, r24
    4754:	88 27       	eor	r24, r24
    4756:	21 81       	ldd	r18, Z+1	; 0x01
    4758:	82 0f       	add	r24, r18
    475a:	91 1d       	adc	r25, r1
    475c:	90 93 b3 14 	sts	0x14B3, r25	; 0x8014b3 <_ppm+0x1>
    4760:	80 93 b2 14 	sts	0x14B2, r24	; 0x8014b2 <_ppm>
    4764:	04 c0       	rjmp	.+8      	; 0x476e <_serialCallBack+0x9a>
    4766:	10 92 b3 14 	sts	0x14B3, r1	; 0x8014b3 <_ppm+0x1>
    476a:	10 92 b2 14 	sts	0x14B2, r1	; 0x8014b2 <_ppm>
    476e:	10 92 b1 14 	sts	0x14B1, r1	; 0x8014b1 <_mh_state>
    4772:	e0 91 af 14 	lds	r30, 0x14AF	; 0x8014af <_appCallBack>
    4776:	f0 91 b0 14 	lds	r31, 0x14B0	; 0x8014b0 <_appCallBack+0x1>
    477a:	30 97       	sbiw	r30, 0x00	; 0
    477c:	29 f0       	breq	.+10     	; 0x4788 <_serialCallBack+0xb4>
    477e:	80 91 b2 14 	lds	r24, 0x14B2	; 0x8014b2 <_ppm>
    4782:	90 91 b3 14 	lds	r25, 0x14B3	; 0x8014b3 <_ppm+0x1>
    4786:	19 95       	eicall
    4788:	08 95       	ret

0000478a <mh_z19_initialise>:
    478a:	8f 92       	push	r8
    478c:	9f 92       	push	r9
    478e:	af 92       	push	r10
    4790:	cf 92       	push	r12
    4792:	ef 92       	push	r14
    4794:	0f 93       	push	r16
    4796:	0f 2e       	mov	r0, r31
    4798:	fa e6       	ldi	r31, 0x6A	; 106
    479a:	8f 2e       	mov	r8, r31
    479c:	f3 e2       	ldi	r31, 0x23	; 35
    479e:	9f 2e       	mov	r9, r31
    47a0:	f0 2d       	mov	r31, r0
    47a2:	68 94       	set
    47a4:	aa 24       	eor	r10, r10
    47a6:	a4 f8       	bld	r10, 4
    47a8:	68 94       	set
    47aa:	cc 24       	eor	r12, r12
    47ac:	c4 f8       	bld	r12, 4
    47ae:	e1 2c       	mov	r14, r1
    47b0:	00 e0       	ldi	r16, 0x00	; 0
    47b2:	23 e0       	ldi	r18, 0x03	; 3
    47b4:	40 e8       	ldi	r20, 0x80	; 128
    47b6:	55 e2       	ldi	r21, 0x25	; 37
    47b8:	60 e0       	ldi	r22, 0x00	; 0
    47ba:	70 e0       	ldi	r23, 0x00	; 0
    47bc:	3f d0       	rcall	.+126    	; 0x483c <serial_create>
    47be:	90 93 b5 14 	sts	0x14B5, r25	; 0x8014b5 <_serial+0x1>
    47c2:	80 93 b4 14 	sts	0x14B4, r24	; 0x8014b4 <_serial>
    47c6:	0f 91       	pop	r16
    47c8:	ef 90       	pop	r14
    47ca:	cf 90       	pop	r12
    47cc:	af 90       	pop	r10
    47ce:	9f 90       	pop	r9
    47d0:	8f 90       	pop	r8
    47d2:	08 95       	ret

000047d4 <mh_z19_injectCallBack>:
    47d4:	90 93 b0 14 	sts	0x14B0, r25	; 0x8014b0 <_appCallBack+0x1>
    47d8:	80 93 af 14 	sts	0x14AF, r24	; 0x8014af <_appCallBack>
    47dc:	08 95       	ret

000047de <mh_z19_takeMeassuring>:
    47de:	cf 93       	push	r28
    47e0:	df 93       	push	r29
    47e2:	cd b7       	in	r28, 0x3d	; 61
    47e4:	de b7       	in	r29, 0x3e	; 62
    47e6:	29 97       	sbiw	r28, 0x09	; 9
    47e8:	0f b6       	in	r0, 0x3f	; 63
    47ea:	f8 94       	cli
    47ec:	de bf       	out	0x3e, r29	; 62
    47ee:	0f be       	out	0x3f, r0	; 63
    47f0:	cd bf       	out	0x3d, r28	; 61
    47f2:	89 e0       	ldi	r24, 0x09	; 9
    47f4:	e2 e4       	ldi	r30, 0x42	; 66
    47f6:	f2 e0       	ldi	r31, 0x02	; 2
    47f8:	9e 01       	movw	r18, r28
    47fa:	2f 5f       	subi	r18, 0xFF	; 255
    47fc:	3f 4f       	sbci	r19, 0xFF	; 255
    47fe:	d9 01       	movw	r26, r18
    4800:	01 90       	ld	r0, Z+
    4802:	0d 92       	st	X+, r0
    4804:	8a 95       	dec	r24
    4806:	e1 f7       	brne	.-8      	; 0x4800 <mh_z19_takeMeassuring+0x22>
    4808:	10 92 b3 14 	sts	0x14B3, r1	; 0x8014b3 <_ppm+0x1>
    480c:	10 92 b2 14 	sts	0x14B2, r1	; 0x8014b2 <_ppm>
    4810:	80 91 b4 14 	lds	r24, 0x14B4	; 0x8014b4 <_serial>
    4814:	90 91 b5 14 	lds	r25, 0x14B5	; 0x8014b5 <_serial+0x1>
    4818:	00 97       	sbiw	r24, 0x00	; 0
    481a:	31 f0       	breq	.+12     	; 0x4828 <mh_z19_takeMeassuring+0x4a>
    481c:	42 2f       	mov	r20, r18
    481e:	53 2f       	mov	r21, r19
    4820:	69 e0       	ldi	r22, 0x09	; 9
    4822:	d9 d0       	rcall	.+434    	; 0x49d6 <serial_sendBytes>
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	01 c0       	rjmp	.+2      	; 0x482a <mh_z19_takeMeassuring+0x4c>
    4828:	82 e0       	ldi	r24, 0x02	; 2
    482a:	29 96       	adiw	r28, 0x09	; 9
    482c:	0f b6       	in	r0, 0x3f	; 63
    482e:	f8 94       	cli
    4830:	de bf       	out	0x3e, r29	; 62
    4832:	0f be       	out	0x3f, r0	; 63
    4834:	cd bf       	out	0x3d, r28	; 61
    4836:	df 91       	pop	r29
    4838:	cf 91       	pop	r28
    483a:	08 95       	ret

0000483c <serial_create>:
    483c:	2f 92       	push	r2
    483e:	3f 92       	push	r3
    4840:	4f 92       	push	r4
    4842:	5f 92       	push	r5
    4844:	6f 92       	push	r6
    4846:	7f 92       	push	r7
    4848:	8f 92       	push	r8
    484a:	9f 92       	push	r9
    484c:	af 92       	push	r10
    484e:	cf 92       	push	r12
    4850:	ef 92       	push	r14
    4852:	ff 92       	push	r15
    4854:	0f 93       	push	r16
    4856:	1f 93       	push	r17
    4858:	cf 93       	push	r28
    485a:	df 93       	push	r29
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    4860:	f8 2e       	mov	r15, r24
    4862:	2a 01       	movw	r4, r20
    4864:	3b 01       	movw	r6, r22
    4866:	88 e0       	ldi	r24, 0x08	; 8
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	0e 94 75 2d 	call	0x5aea	; 0x5aea <malloc>
    486e:	8c 01       	movw	r16, r24
    4870:	8f 2d       	mov	r24, r15
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	fc 01       	movw	r30, r24
    4876:	ee 0f       	add	r30, r30
    4878:	ff 1f       	adc	r31, r31
    487a:	ea 54       	subi	r30, 0x4A	; 74
    487c:	fb 4e       	sbci	r31, 0xEB	; 235
    487e:	11 83       	std	Z+1, r17	; 0x01
    4880:	00 83       	st	Z, r16
    4882:	01 15       	cp	r16, r1
    4884:	11 05       	cpc	r17, r1
    4886:	09 f4       	brne	.+2      	; 0x488a <serial_create+0x4e>
    4888:	69 c0       	rjmp	.+210    	; 0x495c <serial_create+0x120>
    488a:	88 0f       	add	r24, r24
    488c:	99 1f       	adc	r25, r25
    488e:	fc 01       	movw	r30, r24
    4890:	e5 5f       	subi	r30, 0xF5	; 245
    4892:	fd 4f       	sbci	r31, 0xFD	; 253
    4894:	80 81       	ld	r24, Z
    4896:	91 81       	ldd	r25, Z+1	; 0x01
    4898:	d8 01       	movw	r26, r16
    489a:	8d 93       	st	X+, r24
    489c:	9c 93       	st	X, r25
    489e:	6c 2d       	mov	r22, r12
    48a0:	70 e0       	ldi	r23, 0x00	; 0
    48a2:	84 e0       	ldi	r24, 0x04	; 4
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <calloc>
    48aa:	1c 01       	movw	r2, r24
    48ac:	61 e0       	ldi	r22, 0x01	; 1
    48ae:	70 e0       	ldi	r23, 0x00	; 0
    48b0:	86 e0       	ldi	r24, 0x06	; 6
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <calloc>
    48b8:	7c 01       	movw	r14, r24
    48ba:	4c 2d       	mov	r20, r12
    48bc:	b1 01       	movw	r22, r2
    48be:	f1 d6       	rcall	.+3554   	; 0x56a2 <fifo_init>
    48c0:	f8 01       	movw	r30, r16
    48c2:	f5 82       	std	Z+5, r15	; 0x05
    48c4:	e4 82       	std	Z+4, r14	; 0x04
    48c6:	6a 2d       	mov	r22, r10
    48c8:	70 e0       	ldi	r23, 0x00	; 0
    48ca:	84 e0       	ldi	r24, 0x04	; 4
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <calloc>
    48d2:	1c 01       	movw	r2, r24
    48d4:	61 e0       	ldi	r22, 0x01	; 1
    48d6:	70 e0       	ldi	r23, 0x00	; 0
    48d8:	86 e0       	ldi	r24, 0x06	; 6
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <calloc>
    48e0:	7c 01       	movw	r14, r24
    48e2:	4a 2d       	mov	r20, r10
    48e4:	b1 01       	movw	r22, r2
    48e6:	dd d6       	rcall	.+3514   	; 0x56a2 <fifo_init>
    48e8:	d8 01       	movw	r26, r16
    48ea:	13 96       	adiw	r26, 0x03	; 3
    48ec:	fc 92       	st	X, r15
    48ee:	ee 92       	st	-X, r14
    48f0:	12 97       	sbiw	r26, 0x02	; 2
    48f2:	17 96       	adiw	r26, 0x07	; 7
    48f4:	9c 92       	st	X, r9
    48f6:	8e 92       	st	-X, r8
    48f8:	16 97       	sbiw	r26, 0x06	; 6
    48fa:	ff b6       	in	r15, 0x3f	; 63
    48fc:	f8 94       	cli
    48fe:	ed 91       	ld	r30, X+
    4900:	fc 91       	ld	r31, X
    4902:	11 97       	sbiw	r26, 0x01	; 1
    4904:	36 97       	sbiw	r30, 0x06	; 6
    4906:	80 81       	ld	r24, Z
    4908:	82 60       	ori	r24, 0x02	; 2
    490a:	80 83       	st	Z, r24
    490c:	8d 90       	ld	r8, X+
    490e:	9c 90       	ld	r9, X
    4910:	c3 01       	movw	r24, r6
    4912:	b2 01       	movw	r22, r4
    4914:	b4 d7       	rcall	.+3944   	; 0x587e <__floatunsisf>
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	40 e0       	ldi	r20, 0x00	; 0
    491c:	51 e4       	ldi	r21, 0x41	; 65
    491e:	0e 94 a4 2c 	call	0x5948	; 0x5948 <__mulsf3>
    4922:	9b 01       	movw	r18, r22
    4924:	ac 01       	movw	r20, r24
    4926:	60 e0       	ldi	r22, 0x00	; 0
    4928:	74 e2       	ldi	r23, 0x24	; 36
    492a:	84 e7       	ldi	r24, 0x74	; 116
    492c:	9b e4       	ldi	r25, 0x4B	; 75
    492e:	3c d7       	rcall	.+3704   	; 0x57a8 <__divsf3>
    4930:	20 e0       	ldi	r18, 0x00	; 0
    4932:	30 e0       	ldi	r19, 0x00	; 0
    4934:	40 e8       	ldi	r20, 0x80	; 128
    4936:	5f e3       	ldi	r21, 0x3F	; 63
    4938:	d0 d6       	rcall	.+3488   	; 0x56da <__subsf3>
    493a:	71 d9       	rcall	.-3358   	; 0x3c1e <__fixunssfsi>
    493c:	f4 01       	movw	r30, r8
    493e:	32 97       	sbiw	r30, 0x02	; 2
    4940:	60 83       	st	Z, r22
    4942:	d8 01       	movw	r26, r16
    4944:	ed 91       	ld	r30, X+
    4946:	fc 91       	ld	r31, X
    4948:	11 97       	sbiw	r26, 0x01	; 1
    494a:	35 97       	sbiw	r30, 0x05	; 5
    494c:	88 e9       	ldi	r24, 0x98	; 152
    494e:	80 83       	st	Z, r24
    4950:	ed 91       	ld	r30, X+
    4952:	fc 91       	ld	r31, X
    4954:	34 97       	sbiw	r30, 0x04	; 4
    4956:	86 e0       	ldi	r24, 0x06	; 6
    4958:	80 83       	st	Z, r24
    495a:	ff be       	out	0x3f, r15	; 63
    495c:	c8 01       	movw	r24, r16
    495e:	df 91       	pop	r29
    4960:	cf 91       	pop	r28
    4962:	1f 91       	pop	r17
    4964:	0f 91       	pop	r16
    4966:	ff 90       	pop	r15
    4968:	ef 90       	pop	r14
    496a:	cf 90       	pop	r12
    496c:	af 90       	pop	r10
    496e:	9f 90       	pop	r9
    4970:	8f 90       	pop	r8
    4972:	7f 90       	pop	r7
    4974:	6f 90       	pop	r6
    4976:	5f 90       	pop	r5
    4978:	4f 90       	pop	r4
    497a:	3f 90       	pop	r3
    497c:	2f 90       	pop	r2
    497e:	08 95       	ret

00004980 <serial_sendByte>:
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
    4984:	dc 01       	movw	r26, r24
    4986:	89 2b       	or	r24, r25
    4988:	01 f1       	breq	.+64     	; 0x49ca <serial_sendByte+0x4a>
    498a:	12 96       	adiw	r26, 0x02	; 2
    498c:	ed 91       	ld	r30, X+
    498e:	fc 91       	ld	r31, X
    4990:	13 97       	sbiw	r26, 0x03	; 3
    4992:	93 81       	ldd	r25, Z+3	; 0x03
    4994:	82 81       	ldd	r24, Z+2	; 0x02
    4996:	25 81       	ldd	r18, Z+5	; 0x05
    4998:	98 1b       	sub	r25, r24
    499a:	92 23       	and	r25, r18
    499c:	84 81       	ldd	r24, Z+4	; 0x04
    499e:	98 17       	cp	r25, r24
    49a0:	b1 f0       	breq	.+44     	; 0x49ce <serial_sendByte+0x4e>
    49a2:	83 81       	ldd	r24, Z+3	; 0x03
    49a4:	26 95       	lsr	r18
    49a6:	28 23       	and	r18, r24
    49a8:	c0 81       	ld	r28, Z
    49aa:	d1 81       	ldd	r29, Z+1	; 0x01
    49ac:	c2 0f       	add	r28, r18
    49ae:	d1 1d       	adc	r29, r1
    49b0:	68 83       	st	Y, r22
    49b2:	8f 5f       	subi	r24, 0xFF	; 255
    49b4:	95 81       	ldd	r25, Z+5	; 0x05
    49b6:	89 23       	and	r24, r25
    49b8:	83 83       	std	Z+3, r24	; 0x03
    49ba:	ed 91       	ld	r30, X+
    49bc:	fc 91       	ld	r31, X
    49be:	35 97       	sbiw	r30, 0x05	; 5
    49c0:	80 81       	ld	r24, Z
    49c2:	80 62       	ori	r24, 0x20	; 32
    49c4:	80 83       	st	Z, r24
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	03 c0       	rjmp	.+6      	; 0x49d0 <serial_sendByte+0x50>
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	01 c0       	rjmp	.+2      	; 0x49d0 <serial_sendByte+0x50>
    49ce:	82 e0       	ldi	r24, 0x02	; 2
    49d0:	df 91       	pop	r29
    49d2:	cf 91       	pop	r28
    49d4:	08 95       	ret

000049d6 <serial_sendBytes>:
    49d6:	ef 92       	push	r14
    49d8:	ff 92       	push	r15
    49da:	0f 93       	push	r16
    49dc:	1f 93       	push	r17
    49de:	cf 93       	push	r28
    49e0:	df 93       	push	r29
    49e2:	7c 01       	movw	r14, r24
    49e4:	00 97       	sbiw	r24, 0x00	; 0
    49e6:	09 f4       	brne	.+2      	; 0x49ea <serial_sendBytes+0x14>
    49e8:	41 c0       	rjmp	.+130    	; 0x4a6c <serial_sendBytes+0x96>
    49ea:	dc 01       	movw	r26, r24
    49ec:	12 96       	adiw	r26, 0x02	; 2
    49ee:	ed 91       	ld	r30, X+
    49f0:	fc 91       	ld	r31, X
    49f2:	13 97       	sbiw	r26, 0x03	; 3
    49f4:	93 81       	ldd	r25, Z+3	; 0x03
    49f6:	82 81       	ldd	r24, Z+2	; 0x02
    49f8:	98 1b       	sub	r25, r24
    49fa:	85 81       	ldd	r24, Z+5	; 0x05
    49fc:	98 23       	and	r25, r24
    49fe:	84 81       	ldd	r24, Z+4	; 0x04
    4a00:	89 1b       	sub	r24, r25
    4a02:	86 17       	cp	r24, r22
    4a04:	a8 f1       	brcs	.+106    	; 0x4a70 <serial_sendBytes+0x9a>
    4a06:	66 23       	and	r22, r22
    4a08:	41 f1       	breq	.+80     	; 0x4a5a <serial_sendBytes+0x84>
    4a0a:	84 2f       	mov	r24, r20
    4a0c:	95 2f       	mov	r25, r21
    4a0e:	dc 01       	movw	r26, r24
    4a10:	61 50       	subi	r22, 0x01	; 1
    4a12:	46 2f       	mov	r20, r22
    4a14:	50 e0       	ldi	r21, 0x00	; 0
    4a16:	4f 5f       	subi	r20, 0xFF	; 255
    4a18:	5f 4f       	sbci	r21, 0xFF	; 255
    4a1a:	48 0f       	add	r20, r24
    4a1c:	59 1f       	adc	r21, r25
    4a1e:	e7 01       	movw	r28, r14
    4a20:	ea 81       	ldd	r30, Y+2	; 0x02
    4a22:	fb 81       	ldd	r31, Y+3	; 0x03
    4a24:	93 81       	ldd	r25, Z+3	; 0x03
    4a26:	82 81       	ldd	r24, Z+2	; 0x02
    4a28:	25 81       	ldd	r18, Z+5	; 0x05
    4a2a:	98 1b       	sub	r25, r24
    4a2c:	92 23       	and	r25, r18
    4a2e:	84 81       	ldd	r24, Z+4	; 0x04
    4a30:	98 17       	cp	r25, r24
    4a32:	79 f0       	breq	.+30     	; 0x4a52 <serial_sendBytes+0x7c>
    4a34:	8c 91       	ld	r24, X
    4a36:	93 81       	ldd	r25, Z+3	; 0x03
    4a38:	26 95       	lsr	r18
    4a3a:	29 23       	and	r18, r25
    4a3c:	60 81       	ld	r22, Z
    4a3e:	71 81       	ldd	r23, Z+1	; 0x01
    4a40:	8b 01       	movw	r16, r22
    4a42:	02 0f       	add	r16, r18
    4a44:	11 1d       	adc	r17, r1
    4a46:	e8 01       	movw	r28, r16
    4a48:	88 83       	st	Y, r24
    4a4a:	9f 5f       	subi	r25, 0xFF	; 255
    4a4c:	85 81       	ldd	r24, Z+5	; 0x05
    4a4e:	98 23       	and	r25, r24
    4a50:	93 83       	std	Z+3, r25	; 0x03
    4a52:	11 96       	adiw	r26, 0x01	; 1
    4a54:	a4 17       	cp	r26, r20
    4a56:	b5 07       	cpc	r27, r21
    4a58:	11 f7       	brne	.-60     	; 0x4a1e <serial_sendBytes+0x48>
    4a5a:	d7 01       	movw	r26, r14
    4a5c:	ed 91       	ld	r30, X+
    4a5e:	fc 91       	ld	r31, X
    4a60:	35 97       	sbiw	r30, 0x05	; 5
    4a62:	80 81       	ld	r24, Z
    4a64:	80 62       	ori	r24, 0x20	; 32
    4a66:	80 83       	st	Z, r24
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	03 c0       	rjmp	.+6      	; 0x4a72 <serial_sendBytes+0x9c>
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	01 c0       	rjmp	.+2      	; 0x4a72 <serial_sendBytes+0x9c>
    4a70:	82 e0       	ldi	r24, 0x02	; 2
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	1f 91       	pop	r17
    4a78:	0f 91       	pop	r16
    4a7a:	ff 90       	pop	r15
    4a7c:	ef 90       	pop	r14
    4a7e:	08 95       	ret

00004a80 <serial_getByte>:
    4a80:	00 97       	sbiw	r24, 0x00	; 0
    4a82:	d1 f0       	breq	.+52     	; 0x4ab8 <serial_getByte+0x38>
    4a84:	dc 01       	movw	r26, r24
    4a86:	14 96       	adiw	r26, 0x04	; 4
    4a88:	ed 91       	ld	r30, X+
    4a8a:	fc 91       	ld	r31, X
    4a8c:	15 97       	sbiw	r26, 0x05	; 5
    4a8e:	93 81       	ldd	r25, Z+3	; 0x03
    4a90:	82 81       	ldd	r24, Z+2	; 0x02
    4a92:	98 17       	cp	r25, r24
    4a94:	99 f0       	breq	.+38     	; 0x4abc <serial_getByte+0x3c>
    4a96:	92 81       	ldd	r25, Z+2	; 0x02
    4a98:	85 81       	ldd	r24, Z+5	; 0x05
    4a9a:	86 95       	lsr	r24
    4a9c:	89 23       	and	r24, r25
    4a9e:	a0 81       	ld	r26, Z
    4aa0:	b1 81       	ldd	r27, Z+1	; 0x01
    4aa2:	a8 0f       	add	r26, r24
    4aa4:	b1 1d       	adc	r27, r1
    4aa6:	8c 91       	ld	r24, X
    4aa8:	db 01       	movw	r26, r22
    4aaa:	8c 93       	st	X, r24
    4aac:	9f 5f       	subi	r25, 0xFF	; 255
    4aae:	85 81       	ldd	r24, Z+5	; 0x05
    4ab0:	98 23       	and	r25, r24
    4ab2:	92 83       	std	Z+2, r25	; 0x02
    4ab4:	80 e0       	ldi	r24, 0x00	; 0
    4ab6:	08 95       	ret
    4ab8:	81 e0       	ldi	r24, 0x01	; 1
    4aba:	08 95       	ret
    4abc:	83 e0       	ldi	r24, 0x03	; 3
    4abe:	08 95       	ret

00004ac0 <__vector_25>:
    4ac0:	1f 92       	push	r1
    4ac2:	0f 92       	push	r0
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	0f 92       	push	r0
    4ac8:	11 24       	eor	r1, r1
    4aca:	0b b6       	in	r0, 0x3b	; 59
    4acc:	0f 92       	push	r0
    4ace:	2f 93       	push	r18
    4ad0:	3f 93       	push	r19
    4ad2:	4f 93       	push	r20
    4ad4:	5f 93       	push	r21
    4ad6:	6f 93       	push	r22
    4ad8:	7f 93       	push	r23
    4ada:	8f 93       	push	r24
    4adc:	9f 93       	push	r25
    4ade:	af 93       	push	r26
    4ae0:	bf 93       	push	r27
    4ae2:	cf 93       	push	r28
    4ae4:	df 93       	push	r29
    4ae6:	ef 93       	push	r30
    4ae8:	ff 93       	push	r31
    4aea:	a0 91 b6 14 	lds	r26, 0x14B6	; 0x8014b6 <_ser_handle>
    4aee:	b0 91 b7 14 	lds	r27, 0x14B7	; 0x8014b7 <_ser_handle+0x1>
    4af2:	10 97       	sbiw	r26, 0x00	; 0
    4af4:	11 f1       	breq	.+68     	; 0x4b3a <__vector_25+0x7a>
    4af6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4afa:	14 96       	adiw	r26, 0x04	; 4
    4afc:	ed 91       	ld	r30, X+
    4afe:	fc 91       	ld	r31, X
    4b00:	15 97       	sbiw	r26, 0x05	; 5
    4b02:	93 81       	ldd	r25, Z+3	; 0x03
    4b04:	82 81       	ldd	r24, Z+2	; 0x02
    4b06:	25 81       	ldd	r18, Z+5	; 0x05
    4b08:	98 1b       	sub	r25, r24
    4b0a:	92 23       	and	r25, r18
    4b0c:	84 81       	ldd	r24, Z+4	; 0x04
    4b0e:	98 17       	cp	r25, r24
    4b10:	61 f0       	breq	.+24     	; 0x4b2a <__vector_25+0x6a>
    4b12:	83 81       	ldd	r24, Z+3	; 0x03
    4b14:	26 95       	lsr	r18
    4b16:	28 23       	and	r18, r24
    4b18:	c0 81       	ld	r28, Z
    4b1a:	d1 81       	ldd	r29, Z+1	; 0x01
    4b1c:	c2 0f       	add	r28, r18
    4b1e:	d1 1d       	adc	r29, r1
    4b20:	68 83       	st	Y, r22
    4b22:	8f 5f       	subi	r24, 0xFF	; 255
    4b24:	95 81       	ldd	r25, Z+5	; 0x05
    4b26:	89 23       	and	r24, r25
    4b28:	83 83       	std	Z+3, r24	; 0x03
    4b2a:	16 96       	adiw	r26, 0x06	; 6
    4b2c:	ed 91       	ld	r30, X+
    4b2e:	fc 91       	ld	r31, X
    4b30:	17 97       	sbiw	r26, 0x07	; 7
    4b32:	30 97       	sbiw	r30, 0x00	; 0
    4b34:	11 f0       	breq	.+4      	; 0x4b3a <__vector_25+0x7a>
    4b36:	cd 01       	movw	r24, r26
    4b38:	19 95       	eicall
    4b3a:	ff 91       	pop	r31
    4b3c:	ef 91       	pop	r30
    4b3e:	df 91       	pop	r29
    4b40:	cf 91       	pop	r28
    4b42:	bf 91       	pop	r27
    4b44:	af 91       	pop	r26
    4b46:	9f 91       	pop	r25
    4b48:	8f 91       	pop	r24
    4b4a:	7f 91       	pop	r23
    4b4c:	6f 91       	pop	r22
    4b4e:	5f 91       	pop	r21
    4b50:	4f 91       	pop	r20
    4b52:	3f 91       	pop	r19
    4b54:	2f 91       	pop	r18
    4b56:	0f 90       	pop	r0
    4b58:	0b be       	out	0x3b, r0	; 59
    4b5a:	0f 90       	pop	r0
    4b5c:	0f be       	out	0x3f, r0	; 63
    4b5e:	0f 90       	pop	r0
    4b60:	1f 90       	pop	r1
    4b62:	18 95       	reti

00004b64 <__vector_26>:
    4b64:	1f 92       	push	r1
    4b66:	0f 92       	push	r0
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	0f 92       	push	r0
    4b6c:	11 24       	eor	r1, r1
    4b6e:	0b b6       	in	r0, 0x3b	; 59
    4b70:	0f 92       	push	r0
    4b72:	2f 93       	push	r18
    4b74:	8f 93       	push	r24
    4b76:	9f 93       	push	r25
    4b78:	af 93       	push	r26
    4b7a:	bf 93       	push	r27
    4b7c:	ef 93       	push	r30
    4b7e:	ff 93       	push	r31
    4b80:	e0 91 b6 14 	lds	r30, 0x14B6	; 0x8014b6 <_ser_handle>
    4b84:	f0 91 b7 14 	lds	r31, 0x14B7	; 0x8014b7 <_ser_handle+0x1>
    4b88:	30 97       	sbiw	r30, 0x00	; 0
    4b8a:	b9 f0       	breq	.+46     	; 0x4bba <__vector_26+0x56>
    4b8c:	02 80       	ldd	r0, Z+2	; 0x02
    4b8e:	f3 81       	ldd	r31, Z+3	; 0x03
    4b90:	e0 2d       	mov	r30, r0
    4b92:	93 81       	ldd	r25, Z+3	; 0x03
    4b94:	82 81       	ldd	r24, Z+2	; 0x02
    4b96:	98 17       	cp	r25, r24
    4b98:	b1 f0       	breq	.+44     	; 0x4bc6 <__vector_26+0x62>
    4b9a:	92 81       	ldd	r25, Z+2	; 0x02
    4b9c:	85 81       	ldd	r24, Z+5	; 0x05
    4b9e:	28 2f       	mov	r18, r24
    4ba0:	26 95       	lsr	r18
    4ba2:	29 23       	and	r18, r25
    4ba4:	a0 81       	ld	r26, Z
    4ba6:	b1 81       	ldd	r27, Z+1	; 0x01
    4ba8:	a2 0f       	add	r26, r18
    4baa:	b1 1d       	adc	r27, r1
    4bac:	2c 91       	ld	r18, X
    4bae:	9f 5f       	subi	r25, 0xFF	; 255
    4bb0:	89 23       	and	r24, r25
    4bb2:	82 83       	std	Z+2, r24	; 0x02
    4bb4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4bb8:	0b c0       	rjmp	.+22     	; 0x4bd0 <__vector_26+0x6c>
    4bba:	e1 ec       	ldi	r30, 0xC1	; 193
    4bbc:	f0 e0       	ldi	r31, 0x00	; 0
    4bbe:	80 81       	ld	r24, Z
    4bc0:	8f 7d       	andi	r24, 0xDF	; 223
    4bc2:	80 83       	st	Z, r24
    4bc4:	05 c0       	rjmp	.+10     	; 0x4bd0 <__vector_26+0x6c>
    4bc6:	e1 ec       	ldi	r30, 0xC1	; 193
    4bc8:	f0 e0       	ldi	r31, 0x00	; 0
    4bca:	80 81       	ld	r24, Z
    4bcc:	8f 7d       	andi	r24, 0xDF	; 223
    4bce:	80 83       	st	Z, r24
    4bd0:	ff 91       	pop	r31
    4bd2:	ef 91       	pop	r30
    4bd4:	bf 91       	pop	r27
    4bd6:	af 91       	pop	r26
    4bd8:	9f 91       	pop	r25
    4bda:	8f 91       	pop	r24
    4bdc:	2f 91       	pop	r18
    4bde:	0f 90       	pop	r0
    4be0:	0b be       	out	0x3b, r0	; 59
    4be2:	0f 90       	pop	r0
    4be4:	0f be       	out	0x3f, r0	; 63
    4be6:	0f 90       	pop	r0
    4be8:	1f 90       	pop	r1
    4bea:	18 95       	reti

00004bec <__vector_36>:
    4bec:	1f 92       	push	r1
    4bee:	0f 92       	push	r0
    4bf0:	0f b6       	in	r0, 0x3f	; 63
    4bf2:	0f 92       	push	r0
    4bf4:	11 24       	eor	r1, r1
    4bf6:	0b b6       	in	r0, 0x3b	; 59
    4bf8:	0f 92       	push	r0
    4bfa:	2f 93       	push	r18
    4bfc:	3f 93       	push	r19
    4bfe:	4f 93       	push	r20
    4c00:	5f 93       	push	r21
    4c02:	6f 93       	push	r22
    4c04:	7f 93       	push	r23
    4c06:	8f 93       	push	r24
    4c08:	9f 93       	push	r25
    4c0a:	af 93       	push	r26
    4c0c:	bf 93       	push	r27
    4c0e:	cf 93       	push	r28
    4c10:	df 93       	push	r29
    4c12:	ef 93       	push	r30
    4c14:	ff 93       	push	r31
    4c16:	a0 91 b8 14 	lds	r26, 0x14B8	; 0x8014b8 <_ser_handle+0x2>
    4c1a:	b0 91 b9 14 	lds	r27, 0x14B9	; 0x8014b9 <_ser_handle+0x3>
    4c1e:	10 97       	sbiw	r26, 0x00	; 0
    4c20:	11 f1       	breq	.+68     	; 0x4c66 <__vector_36+0x7a>
    4c22:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4c26:	14 96       	adiw	r26, 0x04	; 4
    4c28:	ed 91       	ld	r30, X+
    4c2a:	fc 91       	ld	r31, X
    4c2c:	15 97       	sbiw	r26, 0x05	; 5
    4c2e:	93 81       	ldd	r25, Z+3	; 0x03
    4c30:	82 81       	ldd	r24, Z+2	; 0x02
    4c32:	25 81       	ldd	r18, Z+5	; 0x05
    4c34:	98 1b       	sub	r25, r24
    4c36:	92 23       	and	r25, r18
    4c38:	84 81       	ldd	r24, Z+4	; 0x04
    4c3a:	98 17       	cp	r25, r24
    4c3c:	61 f0       	breq	.+24     	; 0x4c56 <__vector_36+0x6a>
    4c3e:	83 81       	ldd	r24, Z+3	; 0x03
    4c40:	26 95       	lsr	r18
    4c42:	28 23       	and	r18, r24
    4c44:	c0 81       	ld	r28, Z
    4c46:	d1 81       	ldd	r29, Z+1	; 0x01
    4c48:	c2 0f       	add	r28, r18
    4c4a:	d1 1d       	adc	r29, r1
    4c4c:	68 83       	st	Y, r22
    4c4e:	8f 5f       	subi	r24, 0xFF	; 255
    4c50:	95 81       	ldd	r25, Z+5	; 0x05
    4c52:	89 23       	and	r24, r25
    4c54:	83 83       	std	Z+3, r24	; 0x03
    4c56:	16 96       	adiw	r26, 0x06	; 6
    4c58:	ed 91       	ld	r30, X+
    4c5a:	fc 91       	ld	r31, X
    4c5c:	17 97       	sbiw	r26, 0x07	; 7
    4c5e:	30 97       	sbiw	r30, 0x00	; 0
    4c60:	11 f0       	breq	.+4      	; 0x4c66 <__vector_36+0x7a>
    4c62:	cd 01       	movw	r24, r26
    4c64:	19 95       	eicall
    4c66:	ff 91       	pop	r31
    4c68:	ef 91       	pop	r30
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	bf 91       	pop	r27
    4c70:	af 91       	pop	r26
    4c72:	9f 91       	pop	r25
    4c74:	8f 91       	pop	r24
    4c76:	7f 91       	pop	r23
    4c78:	6f 91       	pop	r22
    4c7a:	5f 91       	pop	r21
    4c7c:	4f 91       	pop	r20
    4c7e:	3f 91       	pop	r19
    4c80:	2f 91       	pop	r18
    4c82:	0f 90       	pop	r0
    4c84:	0b be       	out	0x3b, r0	; 59
    4c86:	0f 90       	pop	r0
    4c88:	0f be       	out	0x3f, r0	; 63
    4c8a:	0f 90       	pop	r0
    4c8c:	1f 90       	pop	r1
    4c8e:	18 95       	reti

00004c90 <__vector_37>:
    4c90:	1f 92       	push	r1
    4c92:	0f 92       	push	r0
    4c94:	0f b6       	in	r0, 0x3f	; 63
    4c96:	0f 92       	push	r0
    4c98:	11 24       	eor	r1, r1
    4c9a:	0b b6       	in	r0, 0x3b	; 59
    4c9c:	0f 92       	push	r0
    4c9e:	2f 93       	push	r18
    4ca0:	8f 93       	push	r24
    4ca2:	9f 93       	push	r25
    4ca4:	af 93       	push	r26
    4ca6:	bf 93       	push	r27
    4ca8:	ef 93       	push	r30
    4caa:	ff 93       	push	r31
    4cac:	e0 91 b8 14 	lds	r30, 0x14B8	; 0x8014b8 <_ser_handle+0x2>
    4cb0:	f0 91 b9 14 	lds	r31, 0x14B9	; 0x8014b9 <_ser_handle+0x3>
    4cb4:	30 97       	sbiw	r30, 0x00	; 0
    4cb6:	b9 f0       	breq	.+46     	; 0x4ce6 <__vector_37+0x56>
    4cb8:	02 80       	ldd	r0, Z+2	; 0x02
    4cba:	f3 81       	ldd	r31, Z+3	; 0x03
    4cbc:	e0 2d       	mov	r30, r0
    4cbe:	93 81       	ldd	r25, Z+3	; 0x03
    4cc0:	82 81       	ldd	r24, Z+2	; 0x02
    4cc2:	98 17       	cp	r25, r24
    4cc4:	b1 f0       	breq	.+44     	; 0x4cf2 <__vector_37+0x62>
    4cc6:	92 81       	ldd	r25, Z+2	; 0x02
    4cc8:	85 81       	ldd	r24, Z+5	; 0x05
    4cca:	28 2f       	mov	r18, r24
    4ccc:	26 95       	lsr	r18
    4cce:	29 23       	and	r18, r25
    4cd0:	a0 81       	ld	r26, Z
    4cd2:	b1 81       	ldd	r27, Z+1	; 0x01
    4cd4:	a2 0f       	add	r26, r18
    4cd6:	b1 1d       	adc	r27, r1
    4cd8:	2c 91       	ld	r18, X
    4cda:	9f 5f       	subi	r25, 0xFF	; 255
    4cdc:	89 23       	and	r24, r25
    4cde:	82 83       	std	Z+2, r24	; 0x02
    4ce0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4ce4:	0b c0       	rjmp	.+22     	; 0x4cfc <__vector_37+0x6c>
    4ce6:	e9 ec       	ldi	r30, 0xC9	; 201
    4ce8:	f0 e0       	ldi	r31, 0x00	; 0
    4cea:	80 81       	ld	r24, Z
    4cec:	8f 7d       	andi	r24, 0xDF	; 223
    4cee:	80 83       	st	Z, r24
    4cf0:	05 c0       	rjmp	.+10     	; 0x4cfc <__vector_37+0x6c>
    4cf2:	e9 ec       	ldi	r30, 0xC9	; 201
    4cf4:	f0 e0       	ldi	r31, 0x00	; 0
    4cf6:	80 81       	ld	r24, Z
    4cf8:	8f 7d       	andi	r24, 0xDF	; 223
    4cfa:	80 83       	st	Z, r24
    4cfc:	ff 91       	pop	r31
    4cfe:	ef 91       	pop	r30
    4d00:	bf 91       	pop	r27
    4d02:	af 91       	pop	r26
    4d04:	9f 91       	pop	r25
    4d06:	8f 91       	pop	r24
    4d08:	2f 91       	pop	r18
    4d0a:	0f 90       	pop	r0
    4d0c:	0b be       	out	0x3b, r0	; 59
    4d0e:	0f 90       	pop	r0
    4d10:	0f be       	out	0x3f, r0	; 63
    4d12:	0f 90       	pop	r0
    4d14:	1f 90       	pop	r1
    4d16:	18 95       	reti

00004d18 <__vector_51>:
    4d18:	1f 92       	push	r1
    4d1a:	0f 92       	push	r0
    4d1c:	0f b6       	in	r0, 0x3f	; 63
    4d1e:	0f 92       	push	r0
    4d20:	11 24       	eor	r1, r1
    4d22:	0b b6       	in	r0, 0x3b	; 59
    4d24:	0f 92       	push	r0
    4d26:	2f 93       	push	r18
    4d28:	3f 93       	push	r19
    4d2a:	4f 93       	push	r20
    4d2c:	5f 93       	push	r21
    4d2e:	6f 93       	push	r22
    4d30:	7f 93       	push	r23
    4d32:	8f 93       	push	r24
    4d34:	9f 93       	push	r25
    4d36:	af 93       	push	r26
    4d38:	bf 93       	push	r27
    4d3a:	cf 93       	push	r28
    4d3c:	df 93       	push	r29
    4d3e:	ef 93       	push	r30
    4d40:	ff 93       	push	r31
    4d42:	a0 91 ba 14 	lds	r26, 0x14BA	; 0x8014ba <_ser_handle+0x4>
    4d46:	b0 91 bb 14 	lds	r27, 0x14BB	; 0x8014bb <_ser_handle+0x5>
    4d4a:	10 97       	sbiw	r26, 0x00	; 0
    4d4c:	11 f1       	breq	.+68     	; 0x4d92 <__vector_51+0x7a>
    4d4e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4d52:	14 96       	adiw	r26, 0x04	; 4
    4d54:	ed 91       	ld	r30, X+
    4d56:	fc 91       	ld	r31, X
    4d58:	15 97       	sbiw	r26, 0x05	; 5
    4d5a:	93 81       	ldd	r25, Z+3	; 0x03
    4d5c:	82 81       	ldd	r24, Z+2	; 0x02
    4d5e:	25 81       	ldd	r18, Z+5	; 0x05
    4d60:	98 1b       	sub	r25, r24
    4d62:	92 23       	and	r25, r18
    4d64:	84 81       	ldd	r24, Z+4	; 0x04
    4d66:	98 17       	cp	r25, r24
    4d68:	61 f0       	breq	.+24     	; 0x4d82 <__vector_51+0x6a>
    4d6a:	83 81       	ldd	r24, Z+3	; 0x03
    4d6c:	26 95       	lsr	r18
    4d6e:	28 23       	and	r18, r24
    4d70:	c0 81       	ld	r28, Z
    4d72:	d1 81       	ldd	r29, Z+1	; 0x01
    4d74:	c2 0f       	add	r28, r18
    4d76:	d1 1d       	adc	r29, r1
    4d78:	68 83       	st	Y, r22
    4d7a:	8f 5f       	subi	r24, 0xFF	; 255
    4d7c:	95 81       	ldd	r25, Z+5	; 0x05
    4d7e:	89 23       	and	r24, r25
    4d80:	83 83       	std	Z+3, r24	; 0x03
    4d82:	16 96       	adiw	r26, 0x06	; 6
    4d84:	ed 91       	ld	r30, X+
    4d86:	fc 91       	ld	r31, X
    4d88:	17 97       	sbiw	r26, 0x07	; 7
    4d8a:	30 97       	sbiw	r30, 0x00	; 0
    4d8c:	11 f0       	breq	.+4      	; 0x4d92 <__vector_51+0x7a>
    4d8e:	cd 01       	movw	r24, r26
    4d90:	19 95       	eicall
    4d92:	ff 91       	pop	r31
    4d94:	ef 91       	pop	r30
    4d96:	df 91       	pop	r29
    4d98:	cf 91       	pop	r28
    4d9a:	bf 91       	pop	r27
    4d9c:	af 91       	pop	r26
    4d9e:	9f 91       	pop	r25
    4da0:	8f 91       	pop	r24
    4da2:	7f 91       	pop	r23
    4da4:	6f 91       	pop	r22
    4da6:	5f 91       	pop	r21
    4da8:	4f 91       	pop	r20
    4daa:	3f 91       	pop	r19
    4dac:	2f 91       	pop	r18
    4dae:	0f 90       	pop	r0
    4db0:	0b be       	out	0x3b, r0	; 59
    4db2:	0f 90       	pop	r0
    4db4:	0f be       	out	0x3f, r0	; 63
    4db6:	0f 90       	pop	r0
    4db8:	1f 90       	pop	r1
    4dba:	18 95       	reti

00004dbc <__vector_52>:
    4dbc:	1f 92       	push	r1
    4dbe:	0f 92       	push	r0
    4dc0:	0f b6       	in	r0, 0x3f	; 63
    4dc2:	0f 92       	push	r0
    4dc4:	11 24       	eor	r1, r1
    4dc6:	0b b6       	in	r0, 0x3b	; 59
    4dc8:	0f 92       	push	r0
    4dca:	2f 93       	push	r18
    4dcc:	8f 93       	push	r24
    4dce:	9f 93       	push	r25
    4dd0:	af 93       	push	r26
    4dd2:	bf 93       	push	r27
    4dd4:	ef 93       	push	r30
    4dd6:	ff 93       	push	r31
    4dd8:	e0 91 ba 14 	lds	r30, 0x14BA	; 0x8014ba <_ser_handle+0x4>
    4ddc:	f0 91 bb 14 	lds	r31, 0x14BB	; 0x8014bb <_ser_handle+0x5>
    4de0:	30 97       	sbiw	r30, 0x00	; 0
    4de2:	b9 f0       	breq	.+46     	; 0x4e12 <__vector_52+0x56>
    4de4:	02 80       	ldd	r0, Z+2	; 0x02
    4de6:	f3 81       	ldd	r31, Z+3	; 0x03
    4de8:	e0 2d       	mov	r30, r0
    4dea:	93 81       	ldd	r25, Z+3	; 0x03
    4dec:	82 81       	ldd	r24, Z+2	; 0x02
    4dee:	98 17       	cp	r25, r24
    4df0:	b1 f0       	breq	.+44     	; 0x4e1e <__vector_52+0x62>
    4df2:	92 81       	ldd	r25, Z+2	; 0x02
    4df4:	85 81       	ldd	r24, Z+5	; 0x05
    4df6:	28 2f       	mov	r18, r24
    4df8:	26 95       	lsr	r18
    4dfa:	29 23       	and	r18, r25
    4dfc:	a0 81       	ld	r26, Z
    4dfe:	b1 81       	ldd	r27, Z+1	; 0x01
    4e00:	a2 0f       	add	r26, r18
    4e02:	b1 1d       	adc	r27, r1
    4e04:	2c 91       	ld	r18, X
    4e06:	9f 5f       	subi	r25, 0xFF	; 255
    4e08:	89 23       	and	r24, r25
    4e0a:	82 83       	std	Z+2, r24	; 0x02
    4e0c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4e10:	0b c0       	rjmp	.+22     	; 0x4e28 <__vector_52+0x6c>
    4e12:	e1 ed       	ldi	r30, 0xD1	; 209
    4e14:	f0 e0       	ldi	r31, 0x00	; 0
    4e16:	80 81       	ld	r24, Z
    4e18:	8f 7d       	andi	r24, 0xDF	; 223
    4e1a:	80 83       	st	Z, r24
    4e1c:	05 c0       	rjmp	.+10     	; 0x4e28 <__vector_52+0x6c>
    4e1e:	e1 ed       	ldi	r30, 0xD1	; 209
    4e20:	f0 e0       	ldi	r31, 0x00	; 0
    4e22:	80 81       	ld	r24, Z
    4e24:	8f 7d       	andi	r24, 0xDF	; 223
    4e26:	80 83       	st	Z, r24
    4e28:	ff 91       	pop	r31
    4e2a:	ef 91       	pop	r30
    4e2c:	bf 91       	pop	r27
    4e2e:	af 91       	pop	r26
    4e30:	9f 91       	pop	r25
    4e32:	8f 91       	pop	r24
    4e34:	2f 91       	pop	r18
    4e36:	0f 90       	pop	r0
    4e38:	0b be       	out	0x3b, r0	; 59
    4e3a:	0f 90       	pop	r0
    4e3c:	0f be       	out	0x3f, r0	; 63
    4e3e:	0f 90       	pop	r0
    4e40:	1f 90       	pop	r1
    4e42:	18 95       	reti

00004e44 <__vector_54>:
    4e44:	1f 92       	push	r1
    4e46:	0f 92       	push	r0
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	0f 92       	push	r0
    4e4c:	11 24       	eor	r1, r1
    4e4e:	0b b6       	in	r0, 0x3b	; 59
    4e50:	0f 92       	push	r0
    4e52:	2f 93       	push	r18
    4e54:	3f 93       	push	r19
    4e56:	4f 93       	push	r20
    4e58:	5f 93       	push	r21
    4e5a:	6f 93       	push	r22
    4e5c:	7f 93       	push	r23
    4e5e:	8f 93       	push	r24
    4e60:	9f 93       	push	r25
    4e62:	af 93       	push	r26
    4e64:	bf 93       	push	r27
    4e66:	cf 93       	push	r28
    4e68:	df 93       	push	r29
    4e6a:	ef 93       	push	r30
    4e6c:	ff 93       	push	r31
    4e6e:	a0 91 bc 14 	lds	r26, 0x14BC	; 0x8014bc <_ser_handle+0x6>
    4e72:	b0 91 bd 14 	lds	r27, 0x14BD	; 0x8014bd <_ser_handle+0x7>
    4e76:	10 97       	sbiw	r26, 0x00	; 0
    4e78:	11 f1       	breq	.+68     	; 0x4ebe <__vector_54+0x7a>
    4e7a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4e7e:	14 96       	adiw	r26, 0x04	; 4
    4e80:	ed 91       	ld	r30, X+
    4e82:	fc 91       	ld	r31, X
    4e84:	15 97       	sbiw	r26, 0x05	; 5
    4e86:	93 81       	ldd	r25, Z+3	; 0x03
    4e88:	82 81       	ldd	r24, Z+2	; 0x02
    4e8a:	25 81       	ldd	r18, Z+5	; 0x05
    4e8c:	98 1b       	sub	r25, r24
    4e8e:	92 23       	and	r25, r18
    4e90:	84 81       	ldd	r24, Z+4	; 0x04
    4e92:	98 17       	cp	r25, r24
    4e94:	61 f0       	breq	.+24     	; 0x4eae <__vector_54+0x6a>
    4e96:	83 81       	ldd	r24, Z+3	; 0x03
    4e98:	26 95       	lsr	r18
    4e9a:	28 23       	and	r18, r24
    4e9c:	c0 81       	ld	r28, Z
    4e9e:	d1 81       	ldd	r29, Z+1	; 0x01
    4ea0:	c2 0f       	add	r28, r18
    4ea2:	d1 1d       	adc	r29, r1
    4ea4:	68 83       	st	Y, r22
    4ea6:	8f 5f       	subi	r24, 0xFF	; 255
    4ea8:	95 81       	ldd	r25, Z+5	; 0x05
    4eaa:	89 23       	and	r24, r25
    4eac:	83 83       	std	Z+3, r24	; 0x03
    4eae:	16 96       	adiw	r26, 0x06	; 6
    4eb0:	ed 91       	ld	r30, X+
    4eb2:	fc 91       	ld	r31, X
    4eb4:	17 97       	sbiw	r26, 0x07	; 7
    4eb6:	30 97       	sbiw	r30, 0x00	; 0
    4eb8:	11 f0       	breq	.+4      	; 0x4ebe <__vector_54+0x7a>
    4eba:	cd 01       	movw	r24, r26
    4ebc:	19 95       	eicall
    4ebe:	ff 91       	pop	r31
    4ec0:	ef 91       	pop	r30
    4ec2:	df 91       	pop	r29
    4ec4:	cf 91       	pop	r28
    4ec6:	bf 91       	pop	r27
    4ec8:	af 91       	pop	r26
    4eca:	9f 91       	pop	r25
    4ecc:	8f 91       	pop	r24
    4ece:	7f 91       	pop	r23
    4ed0:	6f 91       	pop	r22
    4ed2:	5f 91       	pop	r21
    4ed4:	4f 91       	pop	r20
    4ed6:	3f 91       	pop	r19
    4ed8:	2f 91       	pop	r18
    4eda:	0f 90       	pop	r0
    4edc:	0b be       	out	0x3b, r0	; 59
    4ede:	0f 90       	pop	r0
    4ee0:	0f be       	out	0x3f, r0	; 63
    4ee2:	0f 90       	pop	r0
    4ee4:	1f 90       	pop	r1
    4ee6:	18 95       	reti

00004ee8 <__vector_55>:
    4ee8:	1f 92       	push	r1
    4eea:	0f 92       	push	r0
    4eec:	0f b6       	in	r0, 0x3f	; 63
    4eee:	0f 92       	push	r0
    4ef0:	11 24       	eor	r1, r1
    4ef2:	0b b6       	in	r0, 0x3b	; 59
    4ef4:	0f 92       	push	r0
    4ef6:	2f 93       	push	r18
    4ef8:	8f 93       	push	r24
    4efa:	9f 93       	push	r25
    4efc:	af 93       	push	r26
    4efe:	bf 93       	push	r27
    4f00:	ef 93       	push	r30
    4f02:	ff 93       	push	r31
    4f04:	e0 91 bc 14 	lds	r30, 0x14BC	; 0x8014bc <_ser_handle+0x6>
    4f08:	f0 91 bd 14 	lds	r31, 0x14BD	; 0x8014bd <_ser_handle+0x7>
    4f0c:	30 97       	sbiw	r30, 0x00	; 0
    4f0e:	b9 f0       	breq	.+46     	; 0x4f3e <__vector_55+0x56>
    4f10:	02 80       	ldd	r0, Z+2	; 0x02
    4f12:	f3 81       	ldd	r31, Z+3	; 0x03
    4f14:	e0 2d       	mov	r30, r0
    4f16:	93 81       	ldd	r25, Z+3	; 0x03
    4f18:	82 81       	ldd	r24, Z+2	; 0x02
    4f1a:	98 17       	cp	r25, r24
    4f1c:	b1 f0       	breq	.+44     	; 0x4f4a <__vector_55+0x62>
    4f1e:	92 81       	ldd	r25, Z+2	; 0x02
    4f20:	85 81       	ldd	r24, Z+5	; 0x05
    4f22:	28 2f       	mov	r18, r24
    4f24:	26 95       	lsr	r18
    4f26:	29 23       	and	r18, r25
    4f28:	a0 81       	ld	r26, Z
    4f2a:	b1 81       	ldd	r27, Z+1	; 0x01
    4f2c:	a2 0f       	add	r26, r18
    4f2e:	b1 1d       	adc	r27, r1
    4f30:	2c 91       	ld	r18, X
    4f32:	9f 5f       	subi	r25, 0xFF	; 255
    4f34:	89 23       	and	r24, r25
    4f36:	82 83       	std	Z+2, r24	; 0x02
    4f38:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4f3c:	0b c0       	rjmp	.+22     	; 0x4f54 <__vector_55+0x6c>
    4f3e:	e1 e3       	ldi	r30, 0x31	; 49
    4f40:	f1 e0       	ldi	r31, 0x01	; 1
    4f42:	80 81       	ld	r24, Z
    4f44:	8f 7d       	andi	r24, 0xDF	; 223
    4f46:	80 83       	st	Z, r24
    4f48:	05 c0       	rjmp	.+10     	; 0x4f54 <__vector_55+0x6c>
    4f4a:	e1 e3       	ldi	r30, 0x31	; 49
    4f4c:	f1 e0       	ldi	r31, 0x01	; 1
    4f4e:	80 81       	ld	r24, Z
    4f50:	8f 7d       	andi	r24, 0xDF	; 223
    4f52:	80 83       	st	Z, r24
    4f54:	ff 91       	pop	r31
    4f56:	ef 91       	pop	r30
    4f58:	bf 91       	pop	r27
    4f5a:	af 91       	pop	r26
    4f5c:	9f 91       	pop	r25
    4f5e:	8f 91       	pop	r24
    4f60:	2f 91       	pop	r18
    4f62:	0f 90       	pop	r0
    4f64:	0b be       	out	0x3b, r0	; 59
    4f66:	0f 90       	pop	r0
    4f68:	0f be       	out	0x3f, r0	; 63
    4f6a:	0f 90       	pop	r0
    4f6c:	1f 90       	pop	r1
    4f6e:	18 95       	reti

00004f70 <usart_getchar>:
    4f70:	cf 93       	push	r28
    4f72:	df 93       	push	r29
    4f74:	1f 92       	push	r1
    4f76:	cd b7       	in	r28, 0x3d	; 61
    4f78:	de b7       	in	r29, 0x3e	; 62
    4f7a:	be 01       	movw	r22, r28
    4f7c:	6f 5f       	subi	r22, 0xFF	; 255
    4f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f80:	80 91 be 14 	lds	r24, 0x14BE	; 0x8014be <_com_serial_instance>
    4f84:	90 91 bf 14 	lds	r25, 0x14BF	; 0x8014bf <_com_serial_instance+0x1>
    4f88:	7b dd       	rcall	.-1290   	; 0x4a80 <serial_getByte>
    4f8a:	81 11       	cpse	r24, r1
    4f8c:	f6 cf       	rjmp	.-20     	; 0x4f7a <usart_getchar+0xa>
    4f8e:	89 81       	ldd	r24, Y+1	; 0x01
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	0f 90       	pop	r0
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	08 95       	ret

00004f9a <usart_putchar>:
    4f9a:	68 2f       	mov	r22, r24
    4f9c:	80 91 be 14 	lds	r24, 0x14BE	; 0x8014be <_com_serial_instance>
    4fa0:	90 91 bf 14 	lds	r25, 0x14BF	; 0x8014bf <_com_serial_instance+0x1>
    4fa4:	ed dc       	rcall	.-1574   	; 0x4980 <serial_sendByte>
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	08 95       	ret

00004fac <stdio_initialise>:
    4fac:	8f 92       	push	r8
    4fae:	9f 92       	push	r9
    4fb0:	af 92       	push	r10
    4fb2:	cf 92       	push	r12
    4fb4:	ef 92       	push	r14
    4fb6:	0f 93       	push	r16
    4fb8:	81 2c       	mov	r8, r1
    4fba:	91 2c       	mov	r9, r1
    4fbc:	68 94       	set
    4fbe:	aa 24       	eor	r10, r10
    4fc0:	a7 f8       	bld	r10, 7
    4fc2:	68 94       	set
    4fc4:	cc 24       	eor	r12, r12
    4fc6:	c7 f8       	bld	r12, 7
    4fc8:	e1 2c       	mov	r14, r1
    4fca:	00 e0       	ldi	r16, 0x00	; 0
    4fcc:	23 e0       	ldi	r18, 0x03	; 3
    4fce:	40 e0       	ldi	r20, 0x00	; 0
    4fd0:	51 ee       	ldi	r21, 0xE1	; 225
    4fd2:	60 e0       	ldi	r22, 0x00	; 0
    4fd4:	70 e0       	ldi	r23, 0x00	; 0
    4fd6:	32 dc       	rcall	.-1948   	; 0x483c <serial_create>
    4fd8:	90 93 bf 14 	sts	0x14BF, r25	; 0x8014bf <_com_serial_instance+0x1>
    4fdc:	80 93 be 14 	sts	0x14BE, r24	; 0x8014be <_com_serial_instance>
    4fe0:	e7 e6       	ldi	r30, 0x67	; 103
    4fe2:	f5 e1       	ldi	r31, 0x15	; 21
    4fe4:	83 e1       	ldi	r24, 0x13	; 19
    4fe6:	92 e0       	ldi	r25, 0x02	; 2
    4fe8:	91 83       	std	Z+1, r25	; 0x01
    4fea:	80 83       	st	Z, r24
    4fec:	93 83       	std	Z+3, r25	; 0x03
    4fee:	82 83       	std	Z+2, r24	; 0x02
    4ff0:	0f 91       	pop	r16
    4ff2:	ef 90       	pop	r14
    4ff4:	cf 90       	pop	r12
    4ff6:	af 90       	pop	r10
    4ff8:	9f 90       	pop	r9
    4ffa:	8f 90       	pop	r8
    4ffc:	08 95       	ret

00004ffe <_turn_off>:
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	fc 01       	movw	r30, r24
    5002:	ee 0f       	add	r30, r30
    5004:	ff 1f       	adc	r31, r31
    5006:	e8 0f       	add	r30, r24
    5008:	f9 1f       	adc	r31, r25
    500a:	ee 0f       	add	r30, r30
    500c:	ff 1f       	adc	r31, r31
    500e:	e0 54       	subi	r30, 0x40	; 64
    5010:	fb 4e       	sbci	r31, 0xEB	; 235
    5012:	23 81       	ldd	r18, Z+3	; 0x03
    5014:	21 11       	cpse	r18, r1
    5016:	1f c0       	rjmp	.+62     	; 0x5056 <_turn_off+0x58>
    5018:	9c 01       	movw	r18, r24
    501a:	22 0f       	add	r18, r18
    501c:	33 1f       	adc	r19, r19
    501e:	f9 01       	movw	r30, r18
    5020:	e8 0f       	add	r30, r24
    5022:	f9 1f       	adc	r31, r25
    5024:	ee 0f       	add	r30, r30
    5026:	ff 1f       	adc	r31, r31
    5028:	e0 54       	subi	r30, 0x40	; 64
    502a:	fb 4e       	sbci	r31, 0xEB	; 235
    502c:	a0 81       	ld	r26, Z
    502e:	b1 81       	ldd	r27, Z+1	; 0x01
    5030:	4c 91       	ld	r20, X
    5032:	f9 01       	movw	r30, r18
    5034:	e8 0f       	add	r30, r24
    5036:	f9 1f       	adc	r31, r25
    5038:	ee 0f       	add	r30, r30
    503a:	ff 1f       	adc	r31, r31
    503c:	e0 54       	subi	r30, 0x40	; 64
    503e:	fb 4e       	sbci	r31, 0xEB	; 235
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	02 80       	ldd	r0, Z+2	; 0x02
    5046:	02 c0       	rjmp	.+4      	; 0x504c <_turn_off+0x4e>
    5048:	88 0f       	add	r24, r24
    504a:	99 1f       	adc	r25, r25
    504c:	0a 94       	dec	r0
    504e:	e2 f7       	brpl	.-8      	; 0x5048 <_turn_off+0x4a>
    5050:	84 2b       	or	r24, r20
    5052:	8c 93       	st	X, r24
    5054:	08 95       	ret
    5056:	fc 01       	movw	r30, r24
    5058:	ee 0f       	add	r30, r30
    505a:	ff 1f       	adc	r31, r31
    505c:	df 01       	movw	r26, r30
    505e:	a8 0f       	add	r26, r24
    5060:	b9 1f       	adc	r27, r25
    5062:	aa 0f       	add	r26, r26
    5064:	bb 1f       	adc	r27, r27
    5066:	a0 54       	subi	r26, 0x40	; 64
    5068:	bb 4e       	sbci	r27, 0xEB	; 235
    506a:	0d 90       	ld	r0, X+
    506c:	bc 91       	ld	r27, X
    506e:	a0 2d       	mov	r26, r0
    5070:	2c 91       	ld	r18, X
    5072:	e8 0f       	add	r30, r24
    5074:	f9 1f       	adc	r31, r25
    5076:	ee 0f       	add	r30, r30
    5078:	ff 1f       	adc	r31, r31
    507a:	e0 54       	subi	r30, 0x40	; 64
    507c:	fb 4e       	sbci	r31, 0xEB	; 235
    507e:	81 e0       	ldi	r24, 0x01	; 1
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	02 80       	ldd	r0, Z+2	; 0x02
    5084:	02 c0       	rjmp	.+4      	; 0x508a <_turn_off+0x8c>
    5086:	88 0f       	add	r24, r24
    5088:	99 1f       	adc	r25, r25
    508a:	0a 94       	dec	r0
    508c:	e2 f7       	brpl	.-8      	; 0x5086 <_turn_off+0x88>
    508e:	80 95       	com	r24
    5090:	82 23       	and	r24, r18
    5092:	8c 93       	st	X, r24
    5094:	08 95       	ret

00005096 <_turn_on>:
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	fc 01       	movw	r30, r24
    509a:	ee 0f       	add	r30, r30
    509c:	ff 1f       	adc	r31, r31
    509e:	e8 0f       	add	r30, r24
    50a0:	f9 1f       	adc	r31, r25
    50a2:	ee 0f       	add	r30, r30
    50a4:	ff 1f       	adc	r31, r31
    50a6:	e0 54       	subi	r30, 0x40	; 64
    50a8:	fb 4e       	sbci	r31, 0xEB	; 235
    50aa:	23 81       	ldd	r18, Z+3	; 0x03
    50ac:	21 11       	cpse	r18, r1
    50ae:	20 c0       	rjmp	.+64     	; 0x50f0 <_turn_on+0x5a>
    50b0:	9c 01       	movw	r18, r24
    50b2:	22 0f       	add	r18, r18
    50b4:	33 1f       	adc	r19, r19
    50b6:	f9 01       	movw	r30, r18
    50b8:	e8 0f       	add	r30, r24
    50ba:	f9 1f       	adc	r31, r25
    50bc:	ee 0f       	add	r30, r30
    50be:	ff 1f       	adc	r31, r31
    50c0:	e0 54       	subi	r30, 0x40	; 64
    50c2:	fb 4e       	sbci	r31, 0xEB	; 235
    50c4:	a0 81       	ld	r26, Z
    50c6:	b1 81       	ldd	r27, Z+1	; 0x01
    50c8:	4c 91       	ld	r20, X
    50ca:	f9 01       	movw	r30, r18
    50cc:	e8 0f       	add	r30, r24
    50ce:	f9 1f       	adc	r31, r25
    50d0:	ee 0f       	add	r30, r30
    50d2:	ff 1f       	adc	r31, r31
    50d4:	e0 54       	subi	r30, 0x40	; 64
    50d6:	fb 4e       	sbci	r31, 0xEB	; 235
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	90 e0       	ldi	r25, 0x00	; 0
    50dc:	02 80       	ldd	r0, Z+2	; 0x02
    50de:	02 c0       	rjmp	.+4      	; 0x50e4 <_turn_on+0x4e>
    50e0:	88 0f       	add	r24, r24
    50e2:	99 1f       	adc	r25, r25
    50e4:	0a 94       	dec	r0
    50e6:	e2 f7       	brpl	.-8      	; 0x50e0 <_turn_on+0x4a>
    50e8:	80 95       	com	r24
    50ea:	84 23       	and	r24, r20
    50ec:	8c 93       	st	X, r24
    50ee:	08 95       	ret
    50f0:	fc 01       	movw	r30, r24
    50f2:	ee 0f       	add	r30, r30
    50f4:	ff 1f       	adc	r31, r31
    50f6:	df 01       	movw	r26, r30
    50f8:	a8 0f       	add	r26, r24
    50fa:	b9 1f       	adc	r27, r25
    50fc:	aa 0f       	add	r26, r26
    50fe:	bb 1f       	adc	r27, r27
    5100:	a0 54       	subi	r26, 0x40	; 64
    5102:	bb 4e       	sbci	r27, 0xEB	; 235
    5104:	0d 90       	ld	r0, X+
    5106:	bc 91       	ld	r27, X
    5108:	a0 2d       	mov	r26, r0
    510a:	2c 91       	ld	r18, X
    510c:	e8 0f       	add	r30, r24
    510e:	f9 1f       	adc	r31, r25
    5110:	ee 0f       	add	r30, r30
    5112:	ff 1f       	adc	r31, r31
    5114:	e0 54       	subi	r30, 0x40	; 64
    5116:	fb 4e       	sbci	r31, 0xEB	; 235
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	02 80       	ldd	r0, Z+2	; 0x02
    511e:	02 c0       	rjmp	.+4      	; 0x5124 <_turn_on+0x8e>
    5120:	88 0f       	add	r24, r24
    5122:	99 1f       	adc	r25, r25
    5124:	0a 94       	dec	r0
    5126:	e2 f7       	brpl	.-8      	; 0x5120 <_turn_on+0x8a>
    5128:	82 2b       	or	r24, r18
    512a:	8c 93       	st	X, r24
    512c:	08 95       	ret

0000512e <_hal_led_task>:
    512e:	cc 24       	eor	r12, r12
    5130:	c3 94       	inc	r12
    5132:	d1 2c       	mov	r13, r1
    5134:	68 94       	set
    5136:	bb 24       	eor	r11, r11
    5138:	b2 f8       	bld	r11, 2
    513a:	c0 ec       	ldi	r28, 0xC0	; 192
    513c:	d4 e1       	ldi	r29, 0x14	; 20
    513e:	10 e0       	ldi	r17, 0x00	; 0
    5140:	8c 81       	ldd	r24, Y+4	; 0x04
    5142:	81 30       	cpi	r24, 0x01	; 1
    5144:	81 f0       	breq	.+32     	; 0x5166 <_hal_led_task+0x38>
    5146:	18 f1       	brcs	.+70     	; 0x518e <_hal_led_task+0x60>
    5148:	82 30       	cpi	r24, 0x02	; 2
    514a:	61 f5       	brne	.+88     	; 0x51a4 <_hal_led_task+0x76>
    514c:	e8 81       	ld	r30, Y
    514e:	f9 81       	ldd	r31, Y+1	; 0x01
    5150:	20 81       	ld	r18, Z
    5152:	c6 01       	movw	r24, r12
    5154:	0a 80       	ldd	r0, Y+2	; 0x02
    5156:	02 c0       	rjmp	.+4      	; 0x515c <_hal_led_task+0x2e>
    5158:	88 0f       	add	r24, r24
    515a:	99 1f       	adc	r25, r25
    515c:	0a 94       	dec	r0
    515e:	e2 f7       	brpl	.-8      	; 0x5158 <_hal_led_task+0x2a>
    5160:	82 27       	eor	r24, r18
    5162:	80 83       	st	Z, r24
    5164:	1f c0       	rjmp	.+62     	; 0x51a4 <_hal_led_task+0x76>
    5166:	8d 81       	ldd	r24, Y+5	; 0x05
    5168:	8f 5f       	subi	r24, 0xFF	; 255
    516a:	8a 30       	cpi	r24, 0x0A	; 10
    516c:	10 f4       	brcc	.+4      	; 0x5172 <_hal_led_task+0x44>
    516e:	8d 83       	std	Y+5, r24	; 0x05
    5170:	19 c0       	rjmp	.+50     	; 0x51a4 <_hal_led_task+0x76>
    5172:	1d 82       	std	Y+5, r1	; 0x05
    5174:	e8 81       	ld	r30, Y
    5176:	f9 81       	ldd	r31, Y+1	; 0x01
    5178:	20 81       	ld	r18, Z
    517a:	c6 01       	movw	r24, r12
    517c:	0a 80       	ldd	r0, Y+2	; 0x02
    517e:	02 c0       	rjmp	.+4      	; 0x5184 <_hal_led_task+0x56>
    5180:	88 0f       	add	r24, r24
    5182:	99 1f       	adc	r25, r25
    5184:	0a 94       	dec	r0
    5186:	e2 f7       	brpl	.-8      	; 0x5180 <_hal_led_task+0x52>
    5188:	82 27       	eor	r24, r18
    518a:	80 83       	st	Z, r24
    518c:	0b c0       	rjmp	.+22     	; 0x51a4 <_hal_led_task+0x76>
    518e:	0d 81       	ldd	r16, Y+5	; 0x05
    5190:	00 23       	and	r16, r16
    5192:	29 f0       	breq	.+10     	; 0x519e <_hal_led_task+0x70>
    5194:	81 2f       	mov	r24, r17
    5196:	7f df       	rcall	.-258    	; 0x5096 <_turn_on>
    5198:	01 50       	subi	r16, 0x01	; 1
    519a:	0d 83       	std	Y+5, r16	; 0x05
    519c:	03 c0       	rjmp	.+6      	; 0x51a4 <_hal_led_task+0x76>
    519e:	bc 82       	std	Y+4, r11	; 0x04
    51a0:	81 2f       	mov	r24, r17
    51a2:	2d df       	rcall	.-422    	; 0x4ffe <_turn_off>
    51a4:	1f 5f       	subi	r17, 0xFF	; 255
    51a6:	26 96       	adiw	r28, 0x06	; 6
    51a8:	14 30       	cpi	r17, 0x04	; 4
    51aa:	51 f6       	brne	.-108    	; 0x5140 <_hal_led_task+0x12>
    51ac:	65 e0       	ldi	r22, 0x05	; 5
    51ae:	70 e0       	ldi	r23, 0x00	; 0
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	0e 94 4b 10 	call	0x2096	; 0x2096 <vTaskDelay>
    51b8:	c0 cf       	rjmp	.-128    	; 0x513a <_hal_led_task+0xc>

000051ba <status_leds_initialise>:
    51ba:	ef 92       	push	r14
    51bc:	ff 92       	push	r15
    51be:	0f 93       	push	r16
    51c0:	1f 93       	push	r17
    51c2:	cf 93       	push	r28
    51c4:	df 93       	push	r29
    51c6:	08 2f       	mov	r16, r24
    51c8:	80 e4       	ldi	r24, 0x40	; 64
    51ca:	87 b9       	out	0x07, r24	; 7
    51cc:	c0 ec       	ldi	r28, 0xC0	; 192
    51ce:	d4 e1       	ldi	r29, 0x14	; 20
    51d0:	0f 2e       	mov	r0, r31
    51d2:	f8 e2       	ldi	r31, 0x28	; 40
    51d4:	ef 2e       	mov	r14, r31
    51d6:	f1 2c       	mov	r15, r1
    51d8:	f0 2d       	mov	r31, r0
    51da:	f9 82       	std	Y+1, r15	; 0x01
    51dc:	e8 82       	st	Y, r14
    51de:	86 e0       	ldi	r24, 0x06	; 6
    51e0:	8a 83       	std	Y+2, r24	; 0x02
    51e2:	1b 82       	std	Y+3, r1	; 0x03
    51e4:	14 e0       	ldi	r17, 0x04	; 4
    51e6:	1c 83       	std	Y+4, r17	; 0x04
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	09 df       	rcall	.-494    	; 0x4ffe <_turn_off>
    51ec:	80 e8       	ldi	r24, 0x80	; 128
    51ee:	87 b9       	out	0x07, r24	; 7
    51f0:	ff 82       	std	Y+7, r15	; 0x07
    51f2:	ee 82       	std	Y+6, r14	; 0x06
    51f4:	87 e0       	ldi	r24, 0x07	; 7
    51f6:	88 87       	std	Y+8, r24	; 0x08
    51f8:	19 86       	std	Y+9, r1	; 0x09
    51fa:	1a 87       	std	Y+10, r17	; 0x0a
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	ff de       	rcall	.-514    	; 0x4ffe <_turn_off>
    5200:	80 e2       	ldi	r24, 0x20	; 32
    5202:	83 bb       	out	0x13, r24	; 19
    5204:	84 e3       	ldi	r24, 0x34	; 52
    5206:	90 e0       	ldi	r25, 0x00	; 0
    5208:	9d 87       	std	Y+13, r25	; 0x0d
    520a:	8c 87       	std	Y+12, r24	; 0x0c
    520c:	85 e0       	ldi	r24, 0x05	; 5
    520e:	8e 87       	std	Y+14, r24	; 0x0e
    5210:	1f 86       	std	Y+15, r1	; 0x0f
    5212:	18 8b       	std	Y+16, r17	; 0x10
    5214:	82 e0       	ldi	r24, 0x02	; 2
    5216:	f3 de       	rcall	.-538    	; 0x4ffe <_turn_off>
    5218:	80 e1       	ldi	r24, 0x10	; 16
    521a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    521e:	82 e0       	ldi	r24, 0x02	; 2
    5220:	91 e0       	ldi	r25, 0x01	; 1
    5222:	9b 8b       	std	Y+19, r25	; 0x13
    5224:	8a 8b       	std	Y+18, r24	; 0x12
    5226:	1c 8b       	std	Y+20, r17	; 0x14
    5228:	1d 8a       	std	Y+21, r1	; 0x15
    522a:	1e 8b       	std	Y+22, r17	; 0x16
    522c:	83 e0       	ldi	r24, 0x03	; 3
    522e:	e7 de       	rcall	.-562    	; 0x4ffe <_turn_off>
    5230:	e1 2c       	mov	r14, r1
    5232:	f1 2c       	mov	r15, r1
    5234:	20 e0       	ldi	r18, 0x00	; 0
    5236:	30 e0       	ldi	r19, 0x00	; 0
    5238:	40 ec       	ldi	r20, 0xC0	; 192
    523a:	50 e0       	ldi	r21, 0x00	; 0
    523c:	66 eb       	ldi	r22, 0xB6	; 182
    523e:	78 e0       	ldi	r23, 0x08	; 8
    5240:	87 e9       	ldi	r24, 0x97	; 151
    5242:	98 e2       	ldi	r25, 0x28	; 40
    5244:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
    5248:	df 91       	pop	r29
    524a:	cf 91       	pop	r28
    524c:	1f 91       	pop	r17
    524e:	0f 91       	pop	r16
    5250:	ff 90       	pop	r15
    5252:	ef 90       	pop	r14
    5254:	08 95       	ret

00005256 <status_leds_slowBlink>:
    5256:	cf 93       	push	r28
    5258:	df 93       	push	r29
    525a:	90 e0       	ldi	r25, 0x00	; 0
    525c:	fc 01       	movw	r30, r24
    525e:	ee 0f       	add	r30, r30
    5260:	ff 1f       	adc	r31, r31
    5262:	df 01       	movw	r26, r30
    5264:	a8 0f       	add	r26, r24
    5266:	b9 1f       	adc	r27, r25
    5268:	aa 0f       	add	r26, r26
    526a:	bb 1f       	adc	r27, r27
    526c:	a0 54       	subi	r26, 0x40	; 64
    526e:	bb 4e       	sbci	r27, 0xEB	; 235
    5270:	cd 91       	ld	r28, X+
    5272:	dc 91       	ld	r29, X
    5274:	11 97       	sbiw	r26, 0x01	; 1
    5276:	48 81       	ld	r20, Y
    5278:	21 e0       	ldi	r18, 0x01	; 1
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	12 96       	adiw	r26, 0x02	; 2
    527e:	0c 90       	ld	r0, X
    5280:	12 97       	sbiw	r26, 0x02	; 2
    5282:	02 c0       	rjmp	.+4      	; 0x5288 <status_leds_slowBlink+0x32>
    5284:	22 0f       	add	r18, r18
    5286:	33 1f       	adc	r19, r19
    5288:	0a 94       	dec	r0
    528a:	e2 f7       	brpl	.-8      	; 0x5284 <status_leds_slowBlink+0x2e>
    528c:	24 27       	eor	r18, r20
    528e:	28 83       	st	Y, r18
    5290:	fd 01       	movw	r30, r26
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	84 83       	std	Z+4, r24	; 0x04
    5296:	df 91       	pop	r29
    5298:	cf 91       	pop	r28
    529a:	08 95       	ret

0000529c <status_leds_fastBlink>:
    529c:	cf 93       	push	r28
    529e:	df 93       	push	r29
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	fc 01       	movw	r30, r24
    52a4:	ee 0f       	add	r30, r30
    52a6:	ff 1f       	adc	r31, r31
    52a8:	df 01       	movw	r26, r30
    52aa:	a8 0f       	add	r26, r24
    52ac:	b9 1f       	adc	r27, r25
    52ae:	aa 0f       	add	r26, r26
    52b0:	bb 1f       	adc	r27, r27
    52b2:	a0 54       	subi	r26, 0x40	; 64
    52b4:	bb 4e       	sbci	r27, 0xEB	; 235
    52b6:	cd 91       	ld	r28, X+
    52b8:	dc 91       	ld	r29, X
    52ba:	11 97       	sbiw	r26, 0x01	; 1
    52bc:	48 81       	ld	r20, Y
    52be:	21 e0       	ldi	r18, 0x01	; 1
    52c0:	30 e0       	ldi	r19, 0x00	; 0
    52c2:	12 96       	adiw	r26, 0x02	; 2
    52c4:	0c 90       	ld	r0, X
    52c6:	12 97       	sbiw	r26, 0x02	; 2
    52c8:	02 c0       	rjmp	.+4      	; 0x52ce <status_leds_fastBlink+0x32>
    52ca:	22 0f       	add	r18, r18
    52cc:	33 1f       	adc	r19, r19
    52ce:	0a 94       	dec	r0
    52d0:	e2 f7       	brpl	.-8      	; 0x52ca <status_leds_fastBlink+0x2e>
    52d2:	24 27       	eor	r18, r20
    52d4:	28 83       	st	Y, r18
    52d6:	fd 01       	movw	r30, r26
    52d8:	82 e0       	ldi	r24, 0x02	; 2
    52da:	84 83       	std	Z+4, r24	; 0x04
    52dc:	df 91       	pop	r29
    52de:	cf 91       	pop	r28
    52e0:	08 95       	ret

000052e2 <status_leds_ledOn>:
    52e2:	28 2f       	mov	r18, r24
    52e4:	30 e0       	ldi	r19, 0x00	; 0
    52e6:	f9 01       	movw	r30, r18
    52e8:	ee 0f       	add	r30, r30
    52ea:	ff 1f       	adc	r31, r31
    52ec:	e2 0f       	add	r30, r18
    52ee:	f3 1f       	adc	r31, r19
    52f0:	ee 0f       	add	r30, r30
    52f2:	ff 1f       	adc	r31, r31
    52f4:	e0 54       	subi	r30, 0x40	; 64
    52f6:	fb 4e       	sbci	r31, 0xEB	; 235
    52f8:	93 e0       	ldi	r25, 0x03	; 3
    52fa:	94 83       	std	Z+4, r25	; 0x04
    52fc:	cc ce       	rjmp	.-616    	; 0x5096 <_turn_on>
    52fe:	08 95       	ret

00005300 <status_leds_ledOff>:
    5300:	28 2f       	mov	r18, r24
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	f9 01       	movw	r30, r18
    5306:	ee 0f       	add	r30, r30
    5308:	ff 1f       	adc	r31, r31
    530a:	e2 0f       	add	r30, r18
    530c:	f3 1f       	adc	r31, r19
    530e:	ee 0f       	add	r30, r30
    5310:	ff 1f       	adc	r31, r31
    5312:	e0 54       	subi	r30, 0x40	; 64
    5314:	fb 4e       	sbci	r31, 0xEB	; 235
    5316:	94 e0       	ldi	r25, 0x04	; 4
    5318:	94 83       	std	Z+4, r25	; 0x04
    531a:	71 ce       	rjmp	.-798    	; 0x4ffe <_turn_off>
    531c:	08 95       	ret

0000531e <status_leds_longPuls>:
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	fc 01       	movw	r30, r24
    5322:	ee 0f       	add	r30, r30
    5324:	ff 1f       	adc	r31, r31
    5326:	df 01       	movw	r26, r30
    5328:	a8 0f       	add	r26, r24
    532a:	b9 1f       	adc	r27, r25
    532c:	aa 0f       	add	r26, r26
    532e:	bb 1f       	adc	r27, r27
    5330:	a0 54       	subi	r26, 0x40	; 64
    5332:	bb 4e       	sbci	r27, 0xEB	; 235
    5334:	24 e0       	ldi	r18, 0x04	; 4
    5336:	15 96       	adiw	r26, 0x05	; 5
    5338:	2c 93       	st	X, r18
    533a:	15 97       	sbiw	r26, 0x05	; 5
    533c:	fd 01       	movw	r30, r26
    533e:	14 82       	std	Z+4, r1	; 0x04
    5340:	08 95       	ret

00005342 <status_leds_shortPuls>:
    5342:	90 e0       	ldi	r25, 0x00	; 0
    5344:	fc 01       	movw	r30, r24
    5346:	ee 0f       	add	r30, r30
    5348:	ff 1f       	adc	r31, r31
    534a:	df 01       	movw	r26, r30
    534c:	a8 0f       	add	r26, r24
    534e:	b9 1f       	adc	r27, r25
    5350:	aa 0f       	add	r26, r26
    5352:	bb 1f       	adc	r27, r27
    5354:	a0 54       	subi	r26, 0x40	; 64
    5356:	bb 4e       	sbci	r27, 0xEB	; 235
    5358:	21 e0       	ldi	r18, 0x01	; 1
    535a:	15 96       	adiw	r26, 0x05	; 5
    535c:	2c 93       	st	X, r18
    535e:	15 97       	sbiw	r26, 0x05	; 5
    5360:	fd 01       	movw	r30, r26
    5362:	14 82       	std	Z+4, r1	; 0x04
    5364:	08 95       	ret

00005366 <_initTwiInterface>:
    5366:	80 91 e6 14 	lds	r24, 0x14E6	; 0x8014e6 <_twiIsInitiated>
    536a:	81 11       	cpse	r24, r1
    536c:	0c c0       	rjmp	.+24     	; 0x5386 <_initTwiInterface+0x20>
    536e:	8c e0       	ldi	r24, 0x0C	; 12
    5370:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5374:	8f ef       	ldi	r24, 0xFF	; 255
    5376:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    537a:	84 e0       	ldi	r24, 0x04	; 4
    537c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	80 93 e6 14 	sts	0x14E6, r24	; 0x8014e6 <_twiIsInitiated>
    5386:	08 95       	ret

00005388 <twiCreate>:
    5388:	af 92       	push	r10
    538a:	bf 92       	push	r11
    538c:	cf 92       	push	r12
    538e:	df 92       	push	r13
    5390:	ef 92       	push	r14
    5392:	ff 92       	push	r15
    5394:	0f 93       	push	r16
    5396:	1f 93       	push	r17
    5398:	cf 93       	push	r28
    539a:	df 93       	push	r29
    539c:	a8 2e       	mov	r10, r24
    539e:	b6 2e       	mov	r11, r22
    53a0:	69 01       	movw	r12, r18
    53a2:	7a 01       	movw	r14, r20
    53a4:	84 e0       	ldi	r24, 0x04	; 4
    53a6:	90 e0       	ldi	r25, 0x00	; 0
    53a8:	a0 d3       	rcall	.+1856   	; 0x5aea <malloc>
    53aa:	ec 01       	movw	r28, r24
    53ac:	89 2b       	or	r24, r25
    53ae:	61 f1       	breq	.+88     	; 0x5408 <twiCreate+0x80>
    53b0:	a8 82       	st	Y, r10
    53b2:	81 e0       	ldi	r24, 0x01	; 1
    53b4:	b8 12       	cpse	r11, r24
    53b6:	12 c0       	rjmp	.+36     	; 0x53dc <twiCreate+0x54>
    53b8:	c7 01       	movw	r24, r14
    53ba:	b6 01       	movw	r22, r12
    53bc:	20 ea       	ldi	r18, 0xA0	; 160
    53be:	36 e8       	ldi	r19, 0x86	; 134
    53c0:	41 e0       	ldi	r20, 0x01	; 1
    53c2:	50 e0       	ldi	r21, 0x00	; 0
    53c4:	4e d3       	rcall	.+1692   	; 0x5a62 <__udivmodsi4>
    53c6:	da 01       	movw	r26, r20
    53c8:	c9 01       	movw	r24, r18
    53ca:	40 97       	sbiw	r24, 0x10	; 16
    53cc:	a1 09       	sbc	r26, r1
    53ce:	b1 09       	sbc	r27, r1
    53d0:	b6 95       	lsr	r27
    53d2:	a7 95       	ror	r26
    53d4:	97 95       	ror	r25
    53d6:	87 95       	ror	r24
    53d8:	89 83       	std	Y+1, r24	; 0x01
    53da:	11 c0       	rjmp	.+34     	; 0x53fe <twiCreate+0x76>
    53dc:	c7 01       	movw	r24, r14
    53de:	b6 01       	movw	r22, r12
    53e0:	20 e8       	ldi	r18, 0x80	; 128
    53e2:	3a e1       	ldi	r19, 0x1A	; 26
    53e4:	46 e0       	ldi	r20, 0x06	; 6
    53e6:	50 e0       	ldi	r21, 0x00	; 0
    53e8:	3c d3       	rcall	.+1656   	; 0x5a62 <__udivmodsi4>
    53ea:	da 01       	movw	r26, r20
    53ec:	c9 01       	movw	r24, r18
    53ee:	40 97       	sbiw	r24, 0x10	; 16
    53f0:	a1 09       	sbc	r26, r1
    53f2:	b1 09       	sbc	r27, r1
    53f4:	b6 95       	lsr	r27
    53f6:	a7 95       	ror	r26
    53f8:	97 95       	ror	r25
    53fa:	87 95       	ror	r24
    53fc:	89 83       	std	Y+1, r24	; 0x01
    53fe:	1b 83       	std	Y+3, r17	; 0x03
    5400:	0a 83       	std	Y+2, r16	; 0x02
    5402:	8c 2f       	mov	r24, r28
    5404:	9d 2f       	mov	r25, r29
    5406:	02 c0       	rjmp	.+4      	; 0x540c <twiCreate+0x84>
    5408:	80 e0       	ldi	r24, 0x00	; 0
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	df 91       	pop	r29
    540e:	cf 91       	pop	r28
    5410:	1f 91       	pop	r17
    5412:	0f 91       	pop	r16
    5414:	ff 90       	pop	r15
    5416:	ef 90       	pop	r14
    5418:	df 90       	pop	r13
    541a:	cf 90       	pop	r12
    541c:	bf 90       	pop	r11
    541e:	af 90       	pop	r10
    5420:	08 95       	ret

00005422 <twiIsBusy>:
    5422:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5426:	81 70       	andi	r24, 0x01	; 1
    5428:	08 95       	ret

0000542a <twiTransmit>:
    542a:	ff 92       	push	r15
    542c:	0f 93       	push	r16
    542e:	1f 93       	push	r17
    5430:	cf 93       	push	r28
    5432:	df 93       	push	r29
    5434:	00 97       	sbiw	r24, 0x00	; 0
    5436:	d1 f1       	breq	.+116    	; 0x54ac <twiTransmit+0x82>
    5438:	4a 30       	cpi	r20, 0x0A	; 10
    543a:	d0 f5       	brcc	.+116    	; 0x54b0 <twiTransmit+0x86>
    543c:	f4 2e       	mov	r15, r20
    543e:	8b 01       	movw	r16, r22
    5440:	ec 01       	movw	r28, r24
    5442:	ef df       	rcall	.-34     	; 0x5422 <twiIsBusy>
    5444:	81 11       	cpse	r24, r1
    5446:	36 c0       	rjmp	.+108    	; 0x54b4 <twiTransmit+0x8a>
    5448:	80 91 d9 14 	lds	r24, 0x14D9	; 0x8014d9 <_twiCurrentHandler>
    544c:	90 91 da 14 	lds	r25, 0x14DA	; 0x8014da <_twiCurrentHandler+0x1>
    5450:	c8 17       	cp	r28, r24
    5452:	d9 07       	cpc	r29, r25
    5454:	41 f0       	breq	.+16     	; 0x5466 <twiTransmit+0x3c>
    5456:	87 df       	rcall	.-242    	; 0x5366 <_initTwiInterface>
    5458:	89 81       	ldd	r24, Y+1	; 0x01
    545a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    545e:	d0 93 da 14 	sts	0x14DA, r29	; 0x8014da <_twiCurrentHandler+0x1>
    5462:	c0 93 d9 14 	sts	0x14D9, r28	; 0x8014d9 <_twiCurrentHandler>
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	8f 0d       	add	r24, r15
    546a:	80 93 db 14 	sts	0x14DB, r24	; 0x8014db <_twiMessageLen>
    546e:	88 81       	ld	r24, Y
    5470:	88 0f       	add	r24, r24
    5472:	80 93 dc 14 	sts	0x14DC, r24	; 0x8014dc <_twiMessageBuffer>
    5476:	ff 20       	and	r15, r15
    5478:	89 f0       	breq	.+34     	; 0x549c <twiTransmit+0x72>
    547a:	f8 01       	movw	r30, r16
    547c:	ad ed       	ldi	r26, 0xDD	; 221
    547e:	b4 e1       	ldi	r27, 0x14	; 20
    5480:	4f ef       	ldi	r20, 0xFF	; 255
    5482:	4f 0d       	add	r20, r15
    5484:	64 2f       	mov	r22, r20
    5486:	70 e0       	ldi	r23, 0x00	; 0
    5488:	cb 01       	movw	r24, r22
    548a:	01 96       	adiw	r24, 0x01	; 1
    548c:	b8 01       	movw	r22, r16
    548e:	68 0f       	add	r22, r24
    5490:	79 1f       	adc	r23, r25
    5492:	81 91       	ld	r24, Z+
    5494:	8d 93       	st	X+, r24
    5496:	e6 17       	cp	r30, r22
    5498:	f7 07       	cpc	r31, r23
    549a:	d9 f7       	brne	.-10     	; 0x5492 <twiTransmit+0x68>
    549c:	88 ef       	ldi	r24, 0xF8	; 248
    549e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    54a2:	85 ea       	ldi	r24, 0xA5	; 165
    54a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54a8:	84 e0       	ldi	r24, 0x04	; 4
    54aa:	05 c0       	rjmp	.+10     	; 0x54b6 <twiTransmit+0x8c>
    54ac:	86 e0       	ldi	r24, 0x06	; 6
    54ae:	03 c0       	rjmp	.+6      	; 0x54b6 <twiTransmit+0x8c>
    54b0:	87 e0       	ldi	r24, 0x07	; 7
    54b2:	01 c0       	rjmp	.+2      	; 0x54b6 <twiTransmit+0x8c>
    54b4:	82 e0       	ldi	r24, 0x02	; 2
    54b6:	df 91       	pop	r29
    54b8:	cf 91       	pop	r28
    54ba:	1f 91       	pop	r17
    54bc:	0f 91       	pop	r16
    54be:	ff 90       	pop	r15
    54c0:	08 95       	ret

000054c2 <twiReceive>:
    54c2:	1f 93       	push	r17
    54c4:	cf 93       	push	r28
    54c6:	df 93       	push	r29
    54c8:	00 97       	sbiw	r24, 0x00	; 0
    54ca:	29 f1       	breq	.+74     	; 0x5516 <twiReceive+0x54>
    54cc:	6b 30       	cpi	r22, 0x0B	; 11
    54ce:	28 f5       	brcc	.+74     	; 0x551a <twiReceive+0x58>
    54d0:	16 2f       	mov	r17, r22
    54d2:	ec 01       	movw	r28, r24
    54d4:	a6 df       	rcall	.-180    	; 0x5422 <twiIsBusy>
    54d6:	81 11       	cpse	r24, r1
    54d8:	22 c0       	rjmp	.+68     	; 0x551e <twiReceive+0x5c>
    54da:	80 91 d9 14 	lds	r24, 0x14D9	; 0x8014d9 <_twiCurrentHandler>
    54de:	90 91 da 14 	lds	r25, 0x14DA	; 0x8014da <_twiCurrentHandler+0x1>
    54e2:	c8 17       	cp	r28, r24
    54e4:	d9 07       	cpc	r29, r25
    54e6:	41 f0       	breq	.+16     	; 0x54f8 <twiReceive+0x36>
    54e8:	3e df       	rcall	.-388    	; 0x5366 <_initTwiInterface>
    54ea:	89 81       	ldd	r24, Y+1	; 0x01
    54ec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    54f0:	d0 93 da 14 	sts	0x14DA, r29	; 0x8014da <_twiCurrentHandler+0x1>
    54f4:	c0 93 d9 14 	sts	0x14D9, r28	; 0x8014d9 <_twiCurrentHandler>
    54f8:	10 93 db 14 	sts	0x14DB, r17	; 0x8014db <_twiMessageLen>
    54fc:	88 81       	ld	r24, Y
    54fe:	88 0f       	add	r24, r24
    5500:	81 60       	ori	r24, 0x01	; 1
    5502:	80 93 dc 14 	sts	0x14DC, r24	; 0x8014dc <_twiMessageBuffer>
    5506:	88 ef       	ldi	r24, 0xF8	; 248
    5508:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    550c:	85 ea       	ldi	r24, 0xA5	; 165
    550e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5512:	85 e0       	ldi	r24, 0x05	; 5
    5514:	05 c0       	rjmp	.+10     	; 0x5520 <twiReceive+0x5e>
    5516:	86 e0       	ldi	r24, 0x06	; 6
    5518:	03 c0       	rjmp	.+6      	; 0x5520 <twiReceive+0x5e>
    551a:	87 e0       	ldi	r24, 0x07	; 7
    551c:	01 c0       	rjmp	.+2      	; 0x5520 <twiReceive+0x5e>
    551e:	82 e0       	ldi	r24, 0x02	; 2
    5520:	df 91       	pop	r29
    5522:	cf 91       	pop	r28
    5524:	1f 91       	pop	r17
    5526:	08 95       	ret

00005528 <__vector_39>:
    5528:	1f 92       	push	r1
    552a:	0f 92       	push	r0
    552c:	0f b6       	in	r0, 0x3f	; 63
    552e:	0f 92       	push	r0
    5530:	11 24       	eor	r1, r1
    5532:	0b b6       	in	r0, 0x3b	; 59
    5534:	0f 92       	push	r0
    5536:	2f 93       	push	r18
    5538:	3f 93       	push	r19
    553a:	4f 93       	push	r20
    553c:	5f 93       	push	r21
    553e:	6f 93       	push	r22
    5540:	7f 93       	push	r23
    5542:	8f 93       	push	r24
    5544:	9f 93       	push	r25
    5546:	af 93       	push	r26
    5548:	bf 93       	push	r27
    554a:	ef 93       	push	r30
    554c:	ff 93       	push	r31
    554e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5552:	8e 2f       	mov	r24, r30
    5554:	90 e0       	ldi	r25, 0x00	; 0
    5556:	fc 01       	movw	r30, r24
    5558:	38 97       	sbiw	r30, 0x08	; 8
    555a:	e1 35       	cpi	r30, 0x51	; 81
    555c:	f1 05       	cpc	r31, r1
    555e:	08 f0       	brcs	.+2      	; 0x5562 <__vector_39+0x3a>
    5560:	75 c0       	rjmp	.+234    	; 0x564c <__vector_39+0x124>
    5562:	88 27       	eor	r24, r24
    5564:	e4 58       	subi	r30, 0x84	; 132
    5566:	ff 4f       	sbci	r31, 0xFF	; 255
    5568:	8f 4f       	sbci	r24, 0xFF	; 255
    556a:	9d c2       	rjmp	.+1338   	; 0x5aa6 <__tablejump2__>
    556c:	10 92 d8 14 	sts	0x14D8, r1	; 0x8014d8 <_index.1885>
    5570:	e0 91 d8 14 	lds	r30, 0x14D8	; 0x8014d8 <_index.1885>
    5574:	80 91 db 14 	lds	r24, 0x14DB	; 0x8014db <_twiMessageLen>
    5578:	e8 17       	cp	r30, r24
    557a:	70 f4       	brcc	.+28     	; 0x5598 <__vector_39+0x70>
    557c:	81 e0       	ldi	r24, 0x01	; 1
    557e:	8e 0f       	add	r24, r30
    5580:	80 93 d8 14 	sts	0x14D8, r24	; 0x8014d8 <_index.1885>
    5584:	f0 e0       	ldi	r31, 0x00	; 0
    5586:	e4 52       	subi	r30, 0x24	; 36
    5588:	fb 4e       	sbci	r31, 0xEB	; 235
    558a:	80 81       	ld	r24, Z
    558c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5590:	85 e8       	ldi	r24, 0x85	; 133
    5592:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5596:	72 c0       	rjmp	.+228    	; 0x567c <__vector_39+0x154>
    5598:	84 e9       	ldi	r24, 0x94	; 148
    559a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    559e:	80 91 d9 14 	lds	r24, 0x14D9	; 0x8014d9 <_twiCurrentHandler>
    55a2:	90 91 da 14 	lds	r25, 0x14DA	; 0x8014da <_twiCurrentHandler+0x1>
    55a6:	dc 01       	movw	r26, r24
    55a8:	12 96       	adiw	r26, 0x02	; 2
    55aa:	ed 91       	ld	r30, X+
    55ac:	fc 91       	ld	r31, X
    55ae:	13 97       	sbiw	r26, 0x03	; 3
    55b0:	30 97       	sbiw	r30, 0x00	; 0
    55b2:	09 f4       	brne	.+2      	; 0x55b6 <__vector_39+0x8e>
    55b4:	63 c0       	rjmp	.+198    	; 0x567c <__vector_39+0x154>
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	40 e0       	ldi	r20, 0x00	; 0
    55ba:	50 e0       	ldi	r21, 0x00	; 0
    55bc:	64 e0       	ldi	r22, 0x04	; 4
    55be:	19 95       	eicall
    55c0:	5d c0       	rjmp	.+186    	; 0x567c <__vector_39+0x154>
    55c2:	e0 91 d8 14 	lds	r30, 0x14D8	; 0x8014d8 <_index.1885>
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	8e 0f       	add	r24, r30
    55ca:	80 93 d8 14 	sts	0x14D8, r24	; 0x8014d8 <_index.1885>
    55ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55d2:	f0 e0       	ldi	r31, 0x00	; 0
    55d4:	e4 52       	subi	r30, 0x24	; 36
    55d6:	fb 4e       	sbci	r31, 0xEB	; 235
    55d8:	80 83       	st	Z, r24
    55da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    55de:	80 34       	cpi	r24, 0x40	; 64
    55e0:	11 f4       	brne	.+4      	; 0x55e6 <__vector_39+0xbe>
    55e2:	10 92 d8 14 	sts	0x14D8, r1	; 0x8014d8 <_index.1885>
    55e6:	20 91 d8 14 	lds	r18, 0x14D8	; 0x8014d8 <_index.1885>
    55ea:	30 e0       	ldi	r19, 0x00	; 0
    55ec:	80 91 db 14 	lds	r24, 0x14DB	; 0x8014db <_twiMessageLen>
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	01 97       	sbiw	r24, 0x01	; 1
    55f4:	28 17       	cp	r18, r24
    55f6:	39 07       	cpc	r19, r25
    55f8:	24 f4       	brge	.+8      	; 0x5602 <__vector_39+0xda>
    55fa:	85 ec       	ldi	r24, 0xC5	; 197
    55fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5600:	3d c0       	rjmp	.+122    	; 0x567c <__vector_39+0x154>
    5602:	85 e8       	ldi	r24, 0x85	; 133
    5604:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5608:	39 c0       	rjmp	.+114    	; 0x567c <__vector_39+0x154>
    560a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    560e:	e0 91 d8 14 	lds	r30, 0x14D8	; 0x8014d8 <_index.1885>
    5612:	f0 e0       	ldi	r31, 0x00	; 0
    5614:	e4 52       	subi	r30, 0x24	; 36
    5616:	fb 4e       	sbci	r31, 0xEB	; 235
    5618:	80 83       	st	Z, r24
    561a:	84 e9       	ldi	r24, 0x94	; 148
    561c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5620:	80 91 d9 14 	lds	r24, 0x14D9	; 0x8014d9 <_twiCurrentHandler>
    5624:	90 91 da 14 	lds	r25, 0x14DA	; 0x8014da <_twiCurrentHandler+0x1>
    5628:	dc 01       	movw	r26, r24
    562a:	12 96       	adiw	r26, 0x02	; 2
    562c:	ed 91       	ld	r30, X+
    562e:	fc 91       	ld	r31, X
    5630:	13 97       	sbiw	r26, 0x03	; 3
    5632:	30 97       	sbiw	r30, 0x00	; 0
    5634:	19 f1       	breq	.+70     	; 0x567c <__vector_39+0x154>
    5636:	20 91 db 14 	lds	r18, 0x14DB	; 0x8014db <_twiMessageLen>
    563a:	4c ed       	ldi	r20, 0xDC	; 220
    563c:	54 e1       	ldi	r21, 0x14	; 20
    563e:	65 e0       	ldi	r22, 0x05	; 5
    5640:	19 95       	eicall
    5642:	1c c0       	rjmp	.+56     	; 0x567c <__vector_39+0x154>
    5644:	85 ea       	ldi	r24, 0xA5	; 165
    5646:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    564a:	18 c0       	rjmp	.+48     	; 0x567c <__vector_39+0x154>
    564c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5650:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5654:	84 e0       	ldi	r24, 0x04	; 4
    5656:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    565a:	80 91 d9 14 	lds	r24, 0x14D9	; 0x8014d9 <_twiCurrentHandler>
    565e:	90 91 da 14 	lds	r25, 0x14DA	; 0x8014da <_twiCurrentHandler+0x1>
    5662:	dc 01       	movw	r26, r24
    5664:	12 96       	adiw	r26, 0x02	; 2
    5666:	ed 91       	ld	r30, X+
    5668:	fc 91       	ld	r31, X
    566a:	13 97       	sbiw	r26, 0x03	; 3
    566c:	30 97       	sbiw	r30, 0x00	; 0
    566e:	31 f0       	breq	.+12     	; 0x567c <__vector_39+0x154>
    5670:	20 e0       	ldi	r18, 0x00	; 0
    5672:	40 e0       	ldi	r20, 0x00	; 0
    5674:	50 e0       	ldi	r21, 0x00	; 0
    5676:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    567a:	19 95       	eicall
    567c:	ff 91       	pop	r31
    567e:	ef 91       	pop	r30
    5680:	bf 91       	pop	r27
    5682:	af 91       	pop	r26
    5684:	9f 91       	pop	r25
    5686:	8f 91       	pop	r24
    5688:	7f 91       	pop	r23
    568a:	6f 91       	pop	r22
    568c:	5f 91       	pop	r21
    568e:	4f 91       	pop	r20
    5690:	3f 91       	pop	r19
    5692:	2f 91       	pop	r18
    5694:	0f 90       	pop	r0
    5696:	0b be       	out	0x3b, r0	; 59
    5698:	0f 90       	pop	r0
    569a:	0f be       	out	0x3f, r0	; 63
    569c:	0f 90       	pop	r0
    569e:	1f 90       	pop	r1
    56a0:	18 95       	reti

000056a2 <fifo_init>:
    56a2:	fc 01       	movw	r30, r24
    56a4:	41 11       	cpse	r20, r1
    56a6:	01 c0       	rjmp	.+2      	; 0x56aa <fifo_init+0x8>
    56a8:	41 d3       	rcall	.+1666   	; 0x5d2c <abort>
    56aa:	84 2f       	mov	r24, r20
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	9c 01       	movw	r18, r24
    56b0:	21 50       	subi	r18, 0x01	; 1
    56b2:	31 09       	sbc	r19, r1
    56b4:	82 23       	and	r24, r18
    56b6:	93 23       	and	r25, r19
    56b8:	89 2b       	or	r24, r25
    56ba:	09 f0       	breq	.+2      	; 0x56be <fifo_init+0x1c>
    56bc:	37 d3       	rcall	.+1646   	; 0x5d2c <abort>
    56be:	41 38       	cpi	r20, 0x81	; 129
    56c0:	08 f0       	brcs	.+2      	; 0x56c4 <fifo_init+0x22>
    56c2:	34 d3       	rcall	.+1640   	; 0x5d2c <abort>
    56c4:	12 82       	std	Z+2, r1	; 0x02
    56c6:	13 82       	std	Z+3, r1	; 0x03
    56c8:	44 83       	std	Z+4, r20	; 0x04
    56ca:	44 0f       	add	r20, r20
    56cc:	41 50       	subi	r20, 0x01	; 1
    56ce:	45 83       	std	Z+5, r20	; 0x05
    56d0:	71 83       	std	Z+1, r23	; 0x01
    56d2:	60 83       	st	Z, r22
    56d4:	80 e0       	ldi	r24, 0x00	; 0
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	08 95       	ret

000056da <__subsf3>:
    56da:	50 58       	subi	r21, 0x80	; 128

000056dc <__addsf3>:
    56dc:	bb 27       	eor	r27, r27
    56de:	aa 27       	eor	r26, r26
    56e0:	0e d0       	rcall	.+28     	; 0x56fe <__addsf3x>
    56e2:	21 c1       	rjmp	.+578    	; 0x5926 <__fp_round>
    56e4:	12 d1       	rcall	.+548    	; 0x590a <__fp_pscA>
    56e6:	30 f0       	brcs	.+12     	; 0x56f4 <__addsf3+0x18>
    56e8:	17 d1       	rcall	.+558    	; 0x5918 <__fp_pscB>
    56ea:	20 f0       	brcs	.+8      	; 0x56f4 <__addsf3+0x18>
    56ec:	31 f4       	brne	.+12     	; 0x56fa <__addsf3+0x1e>
    56ee:	9f 3f       	cpi	r25, 0xFF	; 255
    56f0:	11 f4       	brne	.+4      	; 0x56f6 <__addsf3+0x1a>
    56f2:	1e f4       	brtc	.+6      	; 0x56fa <__addsf3+0x1e>
    56f4:	07 c1       	rjmp	.+526    	; 0x5904 <__fp_nan>
    56f6:	0e f4       	brtc	.+2      	; 0x56fa <__addsf3+0x1e>
    56f8:	e0 95       	com	r30
    56fa:	e7 fb       	bst	r30, 7
    56fc:	fd c0       	rjmp	.+506    	; 0x58f8 <__fp_inf>

000056fe <__addsf3x>:
    56fe:	e9 2f       	mov	r30, r25
    5700:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__fp_split3>
    5704:	78 f3       	brcs	.-34     	; 0x56e4 <__addsf3+0x8>
    5706:	ba 17       	cp	r27, r26
    5708:	62 07       	cpc	r22, r18
    570a:	73 07       	cpc	r23, r19
    570c:	84 07       	cpc	r24, r20
    570e:	95 07       	cpc	r25, r21
    5710:	20 f0       	brcs	.+8      	; 0x571a <__addsf3x+0x1c>
    5712:	79 f4       	brne	.+30     	; 0x5732 <__addsf3x+0x34>
    5714:	a6 f5       	brtc	.+104    	; 0x577e <__addsf3x+0x80>
    5716:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__fp_zero>
    571a:	0e f4       	brtc	.+2      	; 0x571e <__addsf3x+0x20>
    571c:	e0 95       	com	r30
    571e:	0b 2e       	mov	r0, r27
    5720:	ba 2f       	mov	r27, r26
    5722:	a0 2d       	mov	r26, r0
    5724:	0b 01       	movw	r0, r22
    5726:	b9 01       	movw	r22, r18
    5728:	90 01       	movw	r18, r0
    572a:	0c 01       	movw	r0, r24
    572c:	ca 01       	movw	r24, r20
    572e:	a0 01       	movw	r20, r0
    5730:	11 24       	eor	r1, r1
    5732:	ff 27       	eor	r31, r31
    5734:	59 1b       	sub	r21, r25
    5736:	99 f0       	breq	.+38     	; 0x575e <__addsf3x+0x60>
    5738:	59 3f       	cpi	r21, 0xF9	; 249
    573a:	50 f4       	brcc	.+20     	; 0x5750 <__addsf3x+0x52>
    573c:	50 3e       	cpi	r21, 0xE0	; 224
    573e:	68 f1       	brcs	.+90     	; 0x579a <__addsf3x+0x9c>
    5740:	1a 16       	cp	r1, r26
    5742:	f0 40       	sbci	r31, 0x00	; 0
    5744:	a2 2f       	mov	r26, r18
    5746:	23 2f       	mov	r18, r19
    5748:	34 2f       	mov	r19, r20
    574a:	44 27       	eor	r20, r20
    574c:	58 5f       	subi	r21, 0xF8	; 248
    574e:	f3 cf       	rjmp	.-26     	; 0x5736 <__addsf3x+0x38>
    5750:	46 95       	lsr	r20
    5752:	37 95       	ror	r19
    5754:	27 95       	ror	r18
    5756:	a7 95       	ror	r26
    5758:	f0 40       	sbci	r31, 0x00	; 0
    575a:	53 95       	inc	r21
    575c:	c9 f7       	brne	.-14     	; 0x5750 <__addsf3x+0x52>
    575e:	7e f4       	brtc	.+30     	; 0x577e <__addsf3x+0x80>
    5760:	1f 16       	cp	r1, r31
    5762:	ba 0b       	sbc	r27, r26
    5764:	62 0b       	sbc	r22, r18
    5766:	73 0b       	sbc	r23, r19
    5768:	84 0b       	sbc	r24, r20
    576a:	ba f0       	brmi	.+46     	; 0x579a <__addsf3x+0x9c>
    576c:	91 50       	subi	r25, 0x01	; 1
    576e:	a1 f0       	breq	.+40     	; 0x5798 <__addsf3x+0x9a>
    5770:	ff 0f       	add	r31, r31
    5772:	bb 1f       	adc	r27, r27
    5774:	66 1f       	adc	r22, r22
    5776:	77 1f       	adc	r23, r23
    5778:	88 1f       	adc	r24, r24
    577a:	c2 f7       	brpl	.-16     	; 0x576c <__addsf3x+0x6e>
    577c:	0e c0       	rjmp	.+28     	; 0x579a <__addsf3x+0x9c>
    577e:	ba 0f       	add	r27, r26
    5780:	62 1f       	adc	r22, r18
    5782:	73 1f       	adc	r23, r19
    5784:	84 1f       	adc	r24, r20
    5786:	48 f4       	brcc	.+18     	; 0x579a <__addsf3x+0x9c>
    5788:	87 95       	ror	r24
    578a:	77 95       	ror	r23
    578c:	67 95       	ror	r22
    578e:	b7 95       	ror	r27
    5790:	f7 95       	ror	r31
    5792:	9e 3f       	cpi	r25, 0xFE	; 254
    5794:	08 f0       	brcs	.+2      	; 0x5798 <__addsf3x+0x9a>
    5796:	b1 cf       	rjmp	.-158    	; 0x56fa <__addsf3+0x1e>
    5798:	93 95       	inc	r25
    579a:	88 0f       	add	r24, r24
    579c:	08 f0       	brcs	.+2      	; 0x57a0 <__addsf3x+0xa2>
    579e:	99 27       	eor	r25, r25
    57a0:	ee 0f       	add	r30, r30
    57a2:	97 95       	ror	r25
    57a4:	87 95       	ror	r24
    57a6:	08 95       	ret

000057a8 <__divsf3>:
    57a8:	0d d0       	rcall	.+26     	; 0x57c4 <__divsf3x>
    57aa:	bd c0       	rjmp	.+378    	; 0x5926 <__fp_round>
    57ac:	b5 d0       	rcall	.+362    	; 0x5918 <__fp_pscB>
    57ae:	48 f0       	brcs	.+18     	; 0x57c2 <__divsf3+0x1a>
    57b0:	ac d0       	rcall	.+344    	; 0x590a <__fp_pscA>
    57b2:	38 f0       	brcs	.+14     	; 0x57c2 <__divsf3+0x1a>
    57b4:	21 f4       	brne	.+8      	; 0x57be <__divsf3+0x16>
    57b6:	5f 3f       	cpi	r21, 0xFF	; 255
    57b8:	21 f0       	breq	.+8      	; 0x57c2 <__divsf3+0x1a>
    57ba:	9e c0       	rjmp	.+316    	; 0x58f8 <__fp_inf>
    57bc:	51 11       	cpse	r21, r1
    57be:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__fp_szero>
    57c2:	a0 c0       	rjmp	.+320    	; 0x5904 <__fp_nan>

000057c4 <__divsf3x>:
    57c4:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__fp_split3>
    57c8:	88 f3       	brcs	.-30     	; 0x57ac <__divsf3+0x4>

000057ca <__divsf3_pse>:
    57ca:	99 23       	and	r25, r25
    57cc:	b9 f3       	breq	.-18     	; 0x57bc <__divsf3+0x14>
    57ce:	55 23       	and	r21, r21
    57d0:	a1 f3       	breq	.-24     	; 0x57ba <__divsf3+0x12>
    57d2:	95 1b       	sub	r25, r21
    57d4:	55 0b       	sbc	r21, r21
    57d6:	bb 27       	eor	r27, r27
    57d8:	aa 27       	eor	r26, r26
    57da:	62 17       	cp	r22, r18
    57dc:	73 07       	cpc	r23, r19
    57de:	84 07       	cpc	r24, r20
    57e0:	38 f0       	brcs	.+14     	; 0x57f0 <__divsf3_pse+0x26>
    57e2:	9f 5f       	subi	r25, 0xFF	; 255
    57e4:	5f 4f       	sbci	r21, 0xFF	; 255
    57e6:	22 0f       	add	r18, r18
    57e8:	33 1f       	adc	r19, r19
    57ea:	44 1f       	adc	r20, r20
    57ec:	aa 1f       	adc	r26, r26
    57ee:	a9 f3       	breq	.-22     	; 0x57da <__divsf3_pse+0x10>
    57f0:	34 d0       	rcall	.+104    	; 0x585a <__divsf3_pse+0x90>
    57f2:	0e 2e       	mov	r0, r30
    57f4:	3a f0       	brmi	.+14     	; 0x5804 <__divsf3_pse+0x3a>
    57f6:	e0 e8       	ldi	r30, 0x80	; 128
    57f8:	31 d0       	rcall	.+98     	; 0x585c <__divsf3_pse+0x92>
    57fa:	91 50       	subi	r25, 0x01	; 1
    57fc:	50 40       	sbci	r21, 0x00	; 0
    57fe:	e6 95       	lsr	r30
    5800:	00 1c       	adc	r0, r0
    5802:	ca f7       	brpl	.-14     	; 0x57f6 <__divsf3_pse+0x2c>
    5804:	2a d0       	rcall	.+84     	; 0x585a <__divsf3_pse+0x90>
    5806:	fe 2f       	mov	r31, r30
    5808:	28 d0       	rcall	.+80     	; 0x585a <__divsf3_pse+0x90>
    580a:	66 0f       	add	r22, r22
    580c:	77 1f       	adc	r23, r23
    580e:	88 1f       	adc	r24, r24
    5810:	bb 1f       	adc	r27, r27
    5812:	26 17       	cp	r18, r22
    5814:	37 07       	cpc	r19, r23
    5816:	48 07       	cpc	r20, r24
    5818:	ab 07       	cpc	r26, r27
    581a:	b0 e8       	ldi	r27, 0x80	; 128
    581c:	09 f0       	breq	.+2      	; 0x5820 <__divsf3_pse+0x56>
    581e:	bb 0b       	sbc	r27, r27
    5820:	80 2d       	mov	r24, r0
    5822:	bf 01       	movw	r22, r30
    5824:	ff 27       	eor	r31, r31
    5826:	93 58       	subi	r25, 0x83	; 131
    5828:	5f 4f       	sbci	r21, 0xFF	; 255
    582a:	32 f0       	brmi	.+12     	; 0x5838 <__divsf3_pse+0x6e>
    582c:	9e 3f       	cpi	r25, 0xFE	; 254
    582e:	51 05       	cpc	r21, r1
    5830:	70 f0       	brcs	.+28     	; 0x584e <__divsf3_pse+0x84>
    5832:	62 c0       	rjmp	.+196    	; 0x58f8 <__fp_inf>
    5834:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__fp_szero>
    5838:	5f 3f       	cpi	r21, 0xFF	; 255
    583a:	e4 f3       	brlt	.-8      	; 0x5834 <__divsf3_pse+0x6a>
    583c:	98 3e       	cpi	r25, 0xE8	; 232
    583e:	d4 f3       	brlt	.-12     	; 0x5834 <__divsf3_pse+0x6a>
    5840:	86 95       	lsr	r24
    5842:	77 95       	ror	r23
    5844:	67 95       	ror	r22
    5846:	b7 95       	ror	r27
    5848:	f7 95       	ror	r31
    584a:	9f 5f       	subi	r25, 0xFF	; 255
    584c:	c9 f7       	brne	.-14     	; 0x5840 <__divsf3_pse+0x76>
    584e:	88 0f       	add	r24, r24
    5850:	91 1d       	adc	r25, r1
    5852:	96 95       	lsr	r25
    5854:	87 95       	ror	r24
    5856:	97 f9       	bld	r25, 7
    5858:	08 95       	ret
    585a:	e1 e0       	ldi	r30, 0x01	; 1
    585c:	66 0f       	add	r22, r22
    585e:	77 1f       	adc	r23, r23
    5860:	88 1f       	adc	r24, r24
    5862:	bb 1f       	adc	r27, r27
    5864:	62 17       	cp	r22, r18
    5866:	73 07       	cpc	r23, r19
    5868:	84 07       	cpc	r24, r20
    586a:	ba 07       	cpc	r27, r26
    586c:	20 f0       	brcs	.+8      	; 0x5876 <__divsf3_pse+0xac>
    586e:	62 1b       	sub	r22, r18
    5870:	73 0b       	sbc	r23, r19
    5872:	84 0b       	sbc	r24, r20
    5874:	ba 0b       	sbc	r27, r26
    5876:	ee 1f       	adc	r30, r30
    5878:	88 f7       	brcc	.-30     	; 0x585c <__divsf3_pse+0x92>
    587a:	e0 95       	com	r30
    587c:	08 95       	ret

0000587e <__floatunsisf>:
    587e:	e8 94       	clt
    5880:	09 c0       	rjmp	.+18     	; 0x5894 <__floatsisf+0x12>

00005882 <__floatsisf>:
    5882:	97 fb       	bst	r25, 7
    5884:	3e f4       	brtc	.+14     	; 0x5894 <__floatsisf+0x12>
    5886:	90 95       	com	r25
    5888:	80 95       	com	r24
    588a:	70 95       	com	r23
    588c:	61 95       	neg	r22
    588e:	7f 4f       	sbci	r23, 0xFF	; 255
    5890:	8f 4f       	sbci	r24, 0xFF	; 255
    5892:	9f 4f       	sbci	r25, 0xFF	; 255
    5894:	99 23       	and	r25, r25
    5896:	a9 f0       	breq	.+42     	; 0x58c2 <__floatsisf+0x40>
    5898:	f9 2f       	mov	r31, r25
    589a:	96 e9       	ldi	r25, 0x96	; 150
    589c:	bb 27       	eor	r27, r27
    589e:	93 95       	inc	r25
    58a0:	f6 95       	lsr	r31
    58a2:	87 95       	ror	r24
    58a4:	77 95       	ror	r23
    58a6:	67 95       	ror	r22
    58a8:	b7 95       	ror	r27
    58aa:	f1 11       	cpse	r31, r1
    58ac:	f8 cf       	rjmp	.-16     	; 0x589e <__floatsisf+0x1c>
    58ae:	fa f4       	brpl	.+62     	; 0x58ee <__floatsisf+0x6c>
    58b0:	bb 0f       	add	r27, r27
    58b2:	11 f4       	brne	.+4      	; 0x58b8 <__floatsisf+0x36>
    58b4:	60 ff       	sbrs	r22, 0
    58b6:	1b c0       	rjmp	.+54     	; 0x58ee <__floatsisf+0x6c>
    58b8:	6f 5f       	subi	r22, 0xFF	; 255
    58ba:	7f 4f       	sbci	r23, 0xFF	; 255
    58bc:	8f 4f       	sbci	r24, 0xFF	; 255
    58be:	9f 4f       	sbci	r25, 0xFF	; 255
    58c0:	16 c0       	rjmp	.+44     	; 0x58ee <__floatsisf+0x6c>
    58c2:	88 23       	and	r24, r24
    58c4:	11 f0       	breq	.+4      	; 0x58ca <__floatsisf+0x48>
    58c6:	96 e9       	ldi	r25, 0x96	; 150
    58c8:	11 c0       	rjmp	.+34     	; 0x58ec <__floatsisf+0x6a>
    58ca:	77 23       	and	r23, r23
    58cc:	21 f0       	breq	.+8      	; 0x58d6 <__floatsisf+0x54>
    58ce:	9e e8       	ldi	r25, 0x8E	; 142
    58d0:	87 2f       	mov	r24, r23
    58d2:	76 2f       	mov	r23, r22
    58d4:	05 c0       	rjmp	.+10     	; 0x58e0 <__floatsisf+0x5e>
    58d6:	66 23       	and	r22, r22
    58d8:	71 f0       	breq	.+28     	; 0x58f6 <__floatsisf+0x74>
    58da:	96 e8       	ldi	r25, 0x86	; 134
    58dc:	86 2f       	mov	r24, r22
    58de:	70 e0       	ldi	r23, 0x00	; 0
    58e0:	60 e0       	ldi	r22, 0x00	; 0
    58e2:	2a f0       	brmi	.+10     	; 0x58ee <__floatsisf+0x6c>
    58e4:	9a 95       	dec	r25
    58e6:	66 0f       	add	r22, r22
    58e8:	77 1f       	adc	r23, r23
    58ea:	88 1f       	adc	r24, r24
    58ec:	da f7       	brpl	.-10     	; 0x58e4 <__floatsisf+0x62>
    58ee:	88 0f       	add	r24, r24
    58f0:	96 95       	lsr	r25
    58f2:	87 95       	ror	r24
    58f4:	97 f9       	bld	r25, 7
    58f6:	08 95       	ret

000058f8 <__fp_inf>:
    58f8:	97 f9       	bld	r25, 7
    58fa:	9f 67       	ori	r25, 0x7F	; 127
    58fc:	80 e8       	ldi	r24, 0x80	; 128
    58fe:	70 e0       	ldi	r23, 0x00	; 0
    5900:	60 e0       	ldi	r22, 0x00	; 0
    5902:	08 95       	ret

00005904 <__fp_nan>:
    5904:	9f ef       	ldi	r25, 0xFF	; 255
    5906:	80 ec       	ldi	r24, 0xC0	; 192
    5908:	08 95       	ret

0000590a <__fp_pscA>:
    590a:	00 24       	eor	r0, r0
    590c:	0a 94       	dec	r0
    590e:	16 16       	cp	r1, r22
    5910:	17 06       	cpc	r1, r23
    5912:	18 06       	cpc	r1, r24
    5914:	09 06       	cpc	r0, r25
    5916:	08 95       	ret

00005918 <__fp_pscB>:
    5918:	00 24       	eor	r0, r0
    591a:	0a 94       	dec	r0
    591c:	12 16       	cp	r1, r18
    591e:	13 06       	cpc	r1, r19
    5920:	14 06       	cpc	r1, r20
    5922:	05 06       	cpc	r0, r21
    5924:	08 95       	ret

00005926 <__fp_round>:
    5926:	09 2e       	mov	r0, r25
    5928:	03 94       	inc	r0
    592a:	00 0c       	add	r0, r0
    592c:	11 f4       	brne	.+4      	; 0x5932 <__fp_round+0xc>
    592e:	88 23       	and	r24, r24
    5930:	52 f0       	brmi	.+20     	; 0x5946 <__fp_round+0x20>
    5932:	bb 0f       	add	r27, r27
    5934:	40 f4       	brcc	.+16     	; 0x5946 <__fp_round+0x20>
    5936:	bf 2b       	or	r27, r31
    5938:	11 f4       	brne	.+4      	; 0x593e <__fp_round+0x18>
    593a:	60 ff       	sbrs	r22, 0
    593c:	04 c0       	rjmp	.+8      	; 0x5946 <__fp_round+0x20>
    593e:	6f 5f       	subi	r22, 0xFF	; 255
    5940:	7f 4f       	sbci	r23, 0xFF	; 255
    5942:	8f 4f       	sbci	r24, 0xFF	; 255
    5944:	9f 4f       	sbci	r25, 0xFF	; 255
    5946:	08 95       	ret

00005948 <__mulsf3>:
    5948:	0c d0       	rcall	.+24     	; 0x5962 <__mulsf3x>
    594a:	ed cf       	rjmp	.-38     	; 0x5926 <__fp_round>
    594c:	de df       	rcall	.-68     	; 0x590a <__fp_pscA>
    594e:	28 f0       	brcs	.+10     	; 0x595a <__mulsf3+0x12>
    5950:	e3 df       	rcall	.-58     	; 0x5918 <__fp_pscB>
    5952:	18 f0       	brcs	.+6      	; 0x595a <__mulsf3+0x12>
    5954:	95 23       	and	r25, r21
    5956:	09 f0       	breq	.+2      	; 0x595a <__mulsf3+0x12>
    5958:	cf cf       	rjmp	.-98     	; 0x58f8 <__fp_inf>
    595a:	d4 cf       	rjmp	.-88     	; 0x5904 <__fp_nan>
    595c:	11 24       	eor	r1, r1
    595e:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__fp_szero>

00005962 <__mulsf3x>:
    5962:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__fp_split3>
    5966:	90 f3       	brcs	.-28     	; 0x594c <__mulsf3+0x4>

00005968 <__mulsf3_pse>:
    5968:	95 9f       	mul	r25, r21
    596a:	c1 f3       	breq	.-16     	; 0x595c <__mulsf3+0x14>
    596c:	95 0f       	add	r25, r21
    596e:	50 e0       	ldi	r21, 0x00	; 0
    5970:	55 1f       	adc	r21, r21
    5972:	62 9f       	mul	r22, r18
    5974:	f0 01       	movw	r30, r0
    5976:	72 9f       	mul	r23, r18
    5978:	bb 27       	eor	r27, r27
    597a:	f0 0d       	add	r31, r0
    597c:	b1 1d       	adc	r27, r1
    597e:	63 9f       	mul	r22, r19
    5980:	aa 27       	eor	r26, r26
    5982:	f0 0d       	add	r31, r0
    5984:	b1 1d       	adc	r27, r1
    5986:	aa 1f       	adc	r26, r26
    5988:	64 9f       	mul	r22, r20
    598a:	66 27       	eor	r22, r22
    598c:	b0 0d       	add	r27, r0
    598e:	a1 1d       	adc	r26, r1
    5990:	66 1f       	adc	r22, r22
    5992:	82 9f       	mul	r24, r18
    5994:	22 27       	eor	r18, r18
    5996:	b0 0d       	add	r27, r0
    5998:	a1 1d       	adc	r26, r1
    599a:	62 1f       	adc	r22, r18
    599c:	73 9f       	mul	r23, r19
    599e:	b0 0d       	add	r27, r0
    59a0:	a1 1d       	adc	r26, r1
    59a2:	62 1f       	adc	r22, r18
    59a4:	83 9f       	mul	r24, r19
    59a6:	a0 0d       	add	r26, r0
    59a8:	61 1d       	adc	r22, r1
    59aa:	22 1f       	adc	r18, r18
    59ac:	74 9f       	mul	r23, r20
    59ae:	33 27       	eor	r19, r19
    59b0:	a0 0d       	add	r26, r0
    59b2:	61 1d       	adc	r22, r1
    59b4:	23 1f       	adc	r18, r19
    59b6:	84 9f       	mul	r24, r20
    59b8:	60 0d       	add	r22, r0
    59ba:	21 1d       	adc	r18, r1
    59bc:	82 2f       	mov	r24, r18
    59be:	76 2f       	mov	r23, r22
    59c0:	6a 2f       	mov	r22, r26
    59c2:	11 24       	eor	r1, r1
    59c4:	9f 57       	subi	r25, 0x7F	; 127
    59c6:	50 40       	sbci	r21, 0x00	; 0
    59c8:	92 f0       	brmi	.+36     	; 0x59ee <__mulsf3_pse+0x86>
    59ca:	e9 f0       	breq	.+58     	; 0x5a06 <__mulsf3_pse+0x9e>
    59cc:	88 23       	and	r24, r24
    59ce:	4a f0       	brmi	.+18     	; 0x59e2 <__mulsf3_pse+0x7a>
    59d0:	ee 0f       	add	r30, r30
    59d2:	ff 1f       	adc	r31, r31
    59d4:	bb 1f       	adc	r27, r27
    59d6:	66 1f       	adc	r22, r22
    59d8:	77 1f       	adc	r23, r23
    59da:	88 1f       	adc	r24, r24
    59dc:	91 50       	subi	r25, 0x01	; 1
    59de:	50 40       	sbci	r21, 0x00	; 0
    59e0:	a9 f7       	brne	.-22     	; 0x59cc <__mulsf3_pse+0x64>
    59e2:	9e 3f       	cpi	r25, 0xFE	; 254
    59e4:	51 05       	cpc	r21, r1
    59e6:	78 f0       	brcs	.+30     	; 0x5a06 <__mulsf3_pse+0x9e>
    59e8:	87 cf       	rjmp	.-242    	; 0x58f8 <__fp_inf>
    59ea:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__fp_szero>
    59ee:	5f 3f       	cpi	r21, 0xFF	; 255
    59f0:	e4 f3       	brlt	.-8      	; 0x59ea <__mulsf3_pse+0x82>
    59f2:	98 3e       	cpi	r25, 0xE8	; 232
    59f4:	d4 f3       	brlt	.-12     	; 0x59ea <__mulsf3_pse+0x82>
    59f6:	86 95       	lsr	r24
    59f8:	77 95       	ror	r23
    59fa:	67 95       	ror	r22
    59fc:	b7 95       	ror	r27
    59fe:	f7 95       	ror	r31
    5a00:	e7 95       	ror	r30
    5a02:	9f 5f       	subi	r25, 0xFF	; 255
    5a04:	c1 f7       	brne	.-16     	; 0x59f6 <__mulsf3_pse+0x8e>
    5a06:	fe 2b       	or	r31, r30
    5a08:	88 0f       	add	r24, r24
    5a0a:	91 1d       	adc	r25, r1
    5a0c:	96 95       	lsr	r25
    5a0e:	87 95       	ror	r24
    5a10:	97 f9       	bld	r25, 7
    5a12:	08 95       	ret

00005a14 <__udivmodhi4>:
    5a14:	aa 1b       	sub	r26, r26
    5a16:	bb 1b       	sub	r27, r27
    5a18:	51 e1       	ldi	r21, 0x11	; 17
    5a1a:	07 c0       	rjmp	.+14     	; 0x5a2a <__udivmodhi4_ep>

00005a1c <__udivmodhi4_loop>:
    5a1c:	aa 1f       	adc	r26, r26
    5a1e:	bb 1f       	adc	r27, r27
    5a20:	a6 17       	cp	r26, r22
    5a22:	b7 07       	cpc	r27, r23
    5a24:	10 f0       	brcs	.+4      	; 0x5a2a <__udivmodhi4_ep>
    5a26:	a6 1b       	sub	r26, r22
    5a28:	b7 0b       	sbc	r27, r23

00005a2a <__udivmodhi4_ep>:
    5a2a:	88 1f       	adc	r24, r24
    5a2c:	99 1f       	adc	r25, r25
    5a2e:	5a 95       	dec	r21
    5a30:	a9 f7       	brne	.-22     	; 0x5a1c <__udivmodhi4_loop>
    5a32:	80 95       	com	r24
    5a34:	90 95       	com	r25
    5a36:	bc 01       	movw	r22, r24
    5a38:	cd 01       	movw	r24, r26
    5a3a:	08 95       	ret

00005a3c <__divmodhi4>:
    5a3c:	97 fb       	bst	r25, 7
    5a3e:	07 2e       	mov	r0, r23
    5a40:	16 f4       	brtc	.+4      	; 0x5a46 <__divmodhi4+0xa>
    5a42:	00 94       	com	r0
    5a44:	06 d0       	rcall	.+12     	; 0x5a52 <__divmodhi4_neg1>
    5a46:	77 fd       	sbrc	r23, 7
    5a48:	08 d0       	rcall	.+16     	; 0x5a5a <__divmodhi4_neg2>
    5a4a:	e4 df       	rcall	.-56     	; 0x5a14 <__udivmodhi4>
    5a4c:	07 fc       	sbrc	r0, 7
    5a4e:	05 d0       	rcall	.+10     	; 0x5a5a <__divmodhi4_neg2>
    5a50:	3e f4       	brtc	.+14     	; 0x5a60 <__divmodhi4_exit>

00005a52 <__divmodhi4_neg1>:
    5a52:	90 95       	com	r25
    5a54:	81 95       	neg	r24
    5a56:	9f 4f       	sbci	r25, 0xFF	; 255
    5a58:	08 95       	ret

00005a5a <__divmodhi4_neg2>:
    5a5a:	70 95       	com	r23
    5a5c:	61 95       	neg	r22
    5a5e:	7f 4f       	sbci	r23, 0xFF	; 255

00005a60 <__divmodhi4_exit>:
    5a60:	08 95       	ret

00005a62 <__udivmodsi4>:
    5a62:	a1 e2       	ldi	r26, 0x21	; 33
    5a64:	1a 2e       	mov	r1, r26
    5a66:	aa 1b       	sub	r26, r26
    5a68:	bb 1b       	sub	r27, r27
    5a6a:	fd 01       	movw	r30, r26
    5a6c:	0d c0       	rjmp	.+26     	; 0x5a88 <__udivmodsi4_ep>

00005a6e <__udivmodsi4_loop>:
    5a6e:	aa 1f       	adc	r26, r26
    5a70:	bb 1f       	adc	r27, r27
    5a72:	ee 1f       	adc	r30, r30
    5a74:	ff 1f       	adc	r31, r31
    5a76:	a2 17       	cp	r26, r18
    5a78:	b3 07       	cpc	r27, r19
    5a7a:	e4 07       	cpc	r30, r20
    5a7c:	f5 07       	cpc	r31, r21
    5a7e:	20 f0       	brcs	.+8      	; 0x5a88 <__udivmodsi4_ep>
    5a80:	a2 1b       	sub	r26, r18
    5a82:	b3 0b       	sbc	r27, r19
    5a84:	e4 0b       	sbc	r30, r20
    5a86:	f5 0b       	sbc	r31, r21

00005a88 <__udivmodsi4_ep>:
    5a88:	66 1f       	adc	r22, r22
    5a8a:	77 1f       	adc	r23, r23
    5a8c:	88 1f       	adc	r24, r24
    5a8e:	99 1f       	adc	r25, r25
    5a90:	1a 94       	dec	r1
    5a92:	69 f7       	brne	.-38     	; 0x5a6e <__udivmodsi4_loop>
    5a94:	60 95       	com	r22
    5a96:	70 95       	com	r23
    5a98:	80 95       	com	r24
    5a9a:	90 95       	com	r25
    5a9c:	9b 01       	movw	r18, r22
    5a9e:	ac 01       	movw	r20, r24
    5aa0:	bd 01       	movw	r22, r26
    5aa2:	cf 01       	movw	r24, r30
    5aa4:	08 95       	ret

00005aa6 <__tablejump2__>:
    5aa6:	ee 0f       	add	r30, r30
    5aa8:	ff 1f       	adc	r31, r31
    5aaa:	88 1f       	adc	r24, r24
    5aac:	8b bf       	out	0x3b, r24	; 59
    5aae:	07 90       	elpm	r0, Z+
    5ab0:	f6 91       	elpm	r31, Z
    5ab2:	e0 2d       	mov	r30, r0
    5ab4:	19 94       	eijmp

00005ab6 <calloc>:
    5ab6:	0f 93       	push	r16
    5ab8:	1f 93       	push	r17
    5aba:	cf 93       	push	r28
    5abc:	df 93       	push	r29
    5abe:	86 9f       	mul	r24, r22
    5ac0:	80 01       	movw	r16, r0
    5ac2:	87 9f       	mul	r24, r23
    5ac4:	10 0d       	add	r17, r0
    5ac6:	96 9f       	mul	r25, r22
    5ac8:	10 0d       	add	r17, r0
    5aca:	11 24       	eor	r1, r1
    5acc:	c8 01       	movw	r24, r16
    5ace:	0d d0       	rcall	.+26     	; 0x5aea <malloc>
    5ad0:	ec 01       	movw	r28, r24
    5ad2:	00 97       	sbiw	r24, 0x00	; 0
    5ad4:	21 f0       	breq	.+8      	; 0x5ade <calloc+0x28>
    5ad6:	a8 01       	movw	r20, r16
    5ad8:	60 e0       	ldi	r22, 0x00	; 0
    5ada:	70 e0       	ldi	r23, 0x00	; 0
    5adc:	34 d1       	rcall	.+616    	; 0x5d46 <memset>
    5ade:	ce 01       	movw	r24, r28
    5ae0:	df 91       	pop	r29
    5ae2:	cf 91       	pop	r28
    5ae4:	1f 91       	pop	r17
    5ae6:	0f 91       	pop	r16
    5ae8:	08 95       	ret

00005aea <malloc>:
    5aea:	0f 93       	push	r16
    5aec:	1f 93       	push	r17
    5aee:	cf 93       	push	r28
    5af0:	df 93       	push	r29
    5af2:	82 30       	cpi	r24, 0x02	; 2
    5af4:	91 05       	cpc	r25, r1
    5af6:	10 f4       	brcc	.+4      	; 0x5afc <malloc+0x12>
    5af8:	82 e0       	ldi	r24, 0x02	; 2
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	e0 91 65 15 	lds	r30, 0x1565	; 0x801565 <__flp>
    5b00:	f0 91 66 15 	lds	r31, 0x1566	; 0x801566 <__flp+0x1>
    5b04:	20 e0       	ldi	r18, 0x00	; 0
    5b06:	30 e0       	ldi	r19, 0x00	; 0
    5b08:	a0 e0       	ldi	r26, 0x00	; 0
    5b0a:	b0 e0       	ldi	r27, 0x00	; 0
    5b0c:	30 97       	sbiw	r30, 0x00	; 0
    5b0e:	19 f1       	breq	.+70     	; 0x5b56 <malloc+0x6c>
    5b10:	40 81       	ld	r20, Z
    5b12:	51 81       	ldd	r21, Z+1	; 0x01
    5b14:	02 81       	ldd	r16, Z+2	; 0x02
    5b16:	13 81       	ldd	r17, Z+3	; 0x03
    5b18:	48 17       	cp	r20, r24
    5b1a:	59 07       	cpc	r21, r25
    5b1c:	c8 f0       	brcs	.+50     	; 0x5b50 <malloc+0x66>
    5b1e:	84 17       	cp	r24, r20
    5b20:	95 07       	cpc	r25, r21
    5b22:	69 f4       	brne	.+26     	; 0x5b3e <malloc+0x54>
    5b24:	10 97       	sbiw	r26, 0x00	; 0
    5b26:	31 f0       	breq	.+12     	; 0x5b34 <malloc+0x4a>
    5b28:	12 96       	adiw	r26, 0x02	; 2
    5b2a:	0c 93       	st	X, r16
    5b2c:	12 97       	sbiw	r26, 0x02	; 2
    5b2e:	13 96       	adiw	r26, 0x03	; 3
    5b30:	1c 93       	st	X, r17
    5b32:	27 c0       	rjmp	.+78     	; 0x5b82 <malloc+0x98>
    5b34:	00 93 65 15 	sts	0x1565, r16	; 0x801565 <__flp>
    5b38:	10 93 66 15 	sts	0x1566, r17	; 0x801566 <__flp+0x1>
    5b3c:	22 c0       	rjmp	.+68     	; 0x5b82 <malloc+0x98>
    5b3e:	21 15       	cp	r18, r1
    5b40:	31 05       	cpc	r19, r1
    5b42:	19 f0       	breq	.+6      	; 0x5b4a <malloc+0x60>
    5b44:	42 17       	cp	r20, r18
    5b46:	53 07       	cpc	r21, r19
    5b48:	18 f4       	brcc	.+6      	; 0x5b50 <malloc+0x66>
    5b4a:	9a 01       	movw	r18, r20
    5b4c:	bd 01       	movw	r22, r26
    5b4e:	ef 01       	movw	r28, r30
    5b50:	df 01       	movw	r26, r30
    5b52:	f8 01       	movw	r30, r16
    5b54:	db cf       	rjmp	.-74     	; 0x5b0c <malloc+0x22>
    5b56:	21 15       	cp	r18, r1
    5b58:	31 05       	cpc	r19, r1
    5b5a:	f9 f0       	breq	.+62     	; 0x5b9a <malloc+0xb0>
    5b5c:	28 1b       	sub	r18, r24
    5b5e:	39 0b       	sbc	r19, r25
    5b60:	24 30       	cpi	r18, 0x04	; 4
    5b62:	31 05       	cpc	r19, r1
    5b64:	80 f4       	brcc	.+32     	; 0x5b86 <malloc+0x9c>
    5b66:	8a 81       	ldd	r24, Y+2	; 0x02
    5b68:	9b 81       	ldd	r25, Y+3	; 0x03
    5b6a:	61 15       	cp	r22, r1
    5b6c:	71 05       	cpc	r23, r1
    5b6e:	21 f0       	breq	.+8      	; 0x5b78 <malloc+0x8e>
    5b70:	fb 01       	movw	r30, r22
    5b72:	93 83       	std	Z+3, r25	; 0x03
    5b74:	82 83       	std	Z+2, r24	; 0x02
    5b76:	04 c0       	rjmp	.+8      	; 0x5b80 <malloc+0x96>
    5b78:	90 93 66 15 	sts	0x1566, r25	; 0x801566 <__flp+0x1>
    5b7c:	80 93 65 15 	sts	0x1565, r24	; 0x801565 <__flp>
    5b80:	fe 01       	movw	r30, r28
    5b82:	32 96       	adiw	r30, 0x02	; 2
    5b84:	44 c0       	rjmp	.+136    	; 0x5c0e <malloc+0x124>
    5b86:	fe 01       	movw	r30, r28
    5b88:	e2 0f       	add	r30, r18
    5b8a:	f3 1f       	adc	r31, r19
    5b8c:	81 93       	st	Z+, r24
    5b8e:	91 93       	st	Z+, r25
    5b90:	22 50       	subi	r18, 0x02	; 2
    5b92:	31 09       	sbc	r19, r1
    5b94:	39 83       	std	Y+1, r19	; 0x01
    5b96:	28 83       	st	Y, r18
    5b98:	3a c0       	rjmp	.+116    	; 0x5c0e <malloc+0x124>
    5b9a:	20 91 63 15 	lds	r18, 0x1563	; 0x801563 <__brkval>
    5b9e:	30 91 64 15 	lds	r19, 0x1564	; 0x801564 <__brkval+0x1>
    5ba2:	23 2b       	or	r18, r19
    5ba4:	41 f4       	brne	.+16     	; 0x5bb6 <malloc+0xcc>
    5ba6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5baa:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5bae:	30 93 64 15 	sts	0x1564, r19	; 0x801564 <__brkval+0x1>
    5bb2:	20 93 63 15 	sts	0x1563, r18	; 0x801563 <__brkval>
    5bb6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5bba:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5bbe:	21 15       	cp	r18, r1
    5bc0:	31 05       	cpc	r19, r1
    5bc2:	41 f4       	brne	.+16     	; 0x5bd4 <malloc+0xea>
    5bc4:	2d b7       	in	r18, 0x3d	; 61
    5bc6:	3e b7       	in	r19, 0x3e	; 62
    5bc8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5bcc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5bd0:	24 1b       	sub	r18, r20
    5bd2:	35 0b       	sbc	r19, r21
    5bd4:	e0 91 63 15 	lds	r30, 0x1563	; 0x801563 <__brkval>
    5bd8:	f0 91 64 15 	lds	r31, 0x1564	; 0x801564 <__brkval+0x1>
    5bdc:	e2 17       	cp	r30, r18
    5bde:	f3 07       	cpc	r31, r19
    5be0:	a0 f4       	brcc	.+40     	; 0x5c0a <malloc+0x120>
    5be2:	2e 1b       	sub	r18, r30
    5be4:	3f 0b       	sbc	r19, r31
    5be6:	28 17       	cp	r18, r24
    5be8:	39 07       	cpc	r19, r25
    5bea:	78 f0       	brcs	.+30     	; 0x5c0a <malloc+0x120>
    5bec:	ac 01       	movw	r20, r24
    5bee:	4e 5f       	subi	r20, 0xFE	; 254
    5bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    5bf2:	24 17       	cp	r18, r20
    5bf4:	35 07       	cpc	r19, r21
    5bf6:	48 f0       	brcs	.+18     	; 0x5c0a <malloc+0x120>
    5bf8:	4e 0f       	add	r20, r30
    5bfa:	5f 1f       	adc	r21, r31
    5bfc:	50 93 64 15 	sts	0x1564, r21	; 0x801564 <__brkval+0x1>
    5c00:	40 93 63 15 	sts	0x1563, r20	; 0x801563 <__brkval>
    5c04:	81 93       	st	Z+, r24
    5c06:	91 93       	st	Z+, r25
    5c08:	02 c0       	rjmp	.+4      	; 0x5c0e <malloc+0x124>
    5c0a:	e0 e0       	ldi	r30, 0x00	; 0
    5c0c:	f0 e0       	ldi	r31, 0x00	; 0
    5c0e:	cf 01       	movw	r24, r30
    5c10:	df 91       	pop	r29
    5c12:	cf 91       	pop	r28
    5c14:	1f 91       	pop	r17
    5c16:	0f 91       	pop	r16
    5c18:	08 95       	ret

00005c1a <free>:
    5c1a:	cf 93       	push	r28
    5c1c:	df 93       	push	r29
    5c1e:	00 97       	sbiw	r24, 0x00	; 0
    5c20:	09 f4       	brne	.+2      	; 0x5c24 <free+0xa>
    5c22:	81 c0       	rjmp	.+258    	; 0x5d26 <free+0x10c>
    5c24:	fc 01       	movw	r30, r24
    5c26:	32 97       	sbiw	r30, 0x02	; 2
    5c28:	13 82       	std	Z+3, r1	; 0x03
    5c2a:	12 82       	std	Z+2, r1	; 0x02
    5c2c:	a0 91 65 15 	lds	r26, 0x1565	; 0x801565 <__flp>
    5c30:	b0 91 66 15 	lds	r27, 0x1566	; 0x801566 <__flp+0x1>
    5c34:	10 97       	sbiw	r26, 0x00	; 0
    5c36:	81 f4       	brne	.+32     	; 0x5c58 <free+0x3e>
    5c38:	20 81       	ld	r18, Z
    5c3a:	31 81       	ldd	r19, Z+1	; 0x01
    5c3c:	82 0f       	add	r24, r18
    5c3e:	93 1f       	adc	r25, r19
    5c40:	20 91 63 15 	lds	r18, 0x1563	; 0x801563 <__brkval>
    5c44:	30 91 64 15 	lds	r19, 0x1564	; 0x801564 <__brkval+0x1>
    5c48:	28 17       	cp	r18, r24
    5c4a:	39 07       	cpc	r19, r25
    5c4c:	51 f5       	brne	.+84     	; 0x5ca2 <free+0x88>
    5c4e:	f0 93 64 15 	sts	0x1564, r31	; 0x801564 <__brkval+0x1>
    5c52:	e0 93 63 15 	sts	0x1563, r30	; 0x801563 <__brkval>
    5c56:	67 c0       	rjmp	.+206    	; 0x5d26 <free+0x10c>
    5c58:	ed 01       	movw	r28, r26
    5c5a:	20 e0       	ldi	r18, 0x00	; 0
    5c5c:	30 e0       	ldi	r19, 0x00	; 0
    5c5e:	ce 17       	cp	r28, r30
    5c60:	df 07       	cpc	r29, r31
    5c62:	40 f4       	brcc	.+16     	; 0x5c74 <free+0x5a>
    5c64:	4a 81       	ldd	r20, Y+2	; 0x02
    5c66:	5b 81       	ldd	r21, Y+3	; 0x03
    5c68:	9e 01       	movw	r18, r28
    5c6a:	41 15       	cp	r20, r1
    5c6c:	51 05       	cpc	r21, r1
    5c6e:	f1 f0       	breq	.+60     	; 0x5cac <free+0x92>
    5c70:	ea 01       	movw	r28, r20
    5c72:	f5 cf       	rjmp	.-22     	; 0x5c5e <free+0x44>
    5c74:	d3 83       	std	Z+3, r29	; 0x03
    5c76:	c2 83       	std	Z+2, r28	; 0x02
    5c78:	40 81       	ld	r20, Z
    5c7a:	51 81       	ldd	r21, Z+1	; 0x01
    5c7c:	84 0f       	add	r24, r20
    5c7e:	95 1f       	adc	r25, r21
    5c80:	c8 17       	cp	r28, r24
    5c82:	d9 07       	cpc	r29, r25
    5c84:	59 f4       	brne	.+22     	; 0x5c9c <free+0x82>
    5c86:	88 81       	ld	r24, Y
    5c88:	99 81       	ldd	r25, Y+1	; 0x01
    5c8a:	84 0f       	add	r24, r20
    5c8c:	95 1f       	adc	r25, r21
    5c8e:	02 96       	adiw	r24, 0x02	; 2
    5c90:	91 83       	std	Z+1, r25	; 0x01
    5c92:	80 83       	st	Z, r24
    5c94:	8a 81       	ldd	r24, Y+2	; 0x02
    5c96:	9b 81       	ldd	r25, Y+3	; 0x03
    5c98:	93 83       	std	Z+3, r25	; 0x03
    5c9a:	82 83       	std	Z+2, r24	; 0x02
    5c9c:	21 15       	cp	r18, r1
    5c9e:	31 05       	cpc	r19, r1
    5ca0:	29 f4       	brne	.+10     	; 0x5cac <free+0x92>
    5ca2:	f0 93 66 15 	sts	0x1566, r31	; 0x801566 <__flp+0x1>
    5ca6:	e0 93 65 15 	sts	0x1565, r30	; 0x801565 <__flp>
    5caa:	3d c0       	rjmp	.+122    	; 0x5d26 <free+0x10c>
    5cac:	e9 01       	movw	r28, r18
    5cae:	fb 83       	std	Y+3, r31	; 0x03
    5cb0:	ea 83       	std	Y+2, r30	; 0x02
    5cb2:	49 91       	ld	r20, Y+
    5cb4:	59 91       	ld	r21, Y+
    5cb6:	c4 0f       	add	r28, r20
    5cb8:	d5 1f       	adc	r29, r21
    5cba:	ec 17       	cp	r30, r28
    5cbc:	fd 07       	cpc	r31, r29
    5cbe:	61 f4       	brne	.+24     	; 0x5cd8 <free+0xbe>
    5cc0:	80 81       	ld	r24, Z
    5cc2:	91 81       	ldd	r25, Z+1	; 0x01
    5cc4:	84 0f       	add	r24, r20
    5cc6:	95 1f       	adc	r25, r21
    5cc8:	02 96       	adiw	r24, 0x02	; 2
    5cca:	e9 01       	movw	r28, r18
    5ccc:	99 83       	std	Y+1, r25	; 0x01
    5cce:	88 83       	st	Y, r24
    5cd0:	82 81       	ldd	r24, Z+2	; 0x02
    5cd2:	93 81       	ldd	r25, Z+3	; 0x03
    5cd4:	9b 83       	std	Y+3, r25	; 0x03
    5cd6:	8a 83       	std	Y+2, r24	; 0x02
    5cd8:	e0 e0       	ldi	r30, 0x00	; 0
    5cda:	f0 e0       	ldi	r31, 0x00	; 0
    5cdc:	12 96       	adiw	r26, 0x02	; 2
    5cde:	8d 91       	ld	r24, X+
    5ce0:	9c 91       	ld	r25, X
    5ce2:	13 97       	sbiw	r26, 0x03	; 3
    5ce4:	00 97       	sbiw	r24, 0x00	; 0
    5ce6:	19 f0       	breq	.+6      	; 0x5cee <free+0xd4>
    5ce8:	fd 01       	movw	r30, r26
    5cea:	dc 01       	movw	r26, r24
    5cec:	f7 cf       	rjmp	.-18     	; 0x5cdc <free+0xc2>
    5cee:	8d 91       	ld	r24, X+
    5cf0:	9c 91       	ld	r25, X
    5cf2:	11 97       	sbiw	r26, 0x01	; 1
    5cf4:	9d 01       	movw	r18, r26
    5cf6:	2e 5f       	subi	r18, 0xFE	; 254
    5cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    5cfa:	82 0f       	add	r24, r18
    5cfc:	93 1f       	adc	r25, r19
    5cfe:	20 91 63 15 	lds	r18, 0x1563	; 0x801563 <__brkval>
    5d02:	30 91 64 15 	lds	r19, 0x1564	; 0x801564 <__brkval+0x1>
    5d06:	28 17       	cp	r18, r24
    5d08:	39 07       	cpc	r19, r25
    5d0a:	69 f4       	brne	.+26     	; 0x5d26 <free+0x10c>
    5d0c:	30 97       	sbiw	r30, 0x00	; 0
    5d0e:	29 f4       	brne	.+10     	; 0x5d1a <free+0x100>
    5d10:	10 92 66 15 	sts	0x1566, r1	; 0x801566 <__flp+0x1>
    5d14:	10 92 65 15 	sts	0x1565, r1	; 0x801565 <__flp>
    5d18:	02 c0       	rjmp	.+4      	; 0x5d1e <free+0x104>
    5d1a:	13 82       	std	Z+3, r1	; 0x03
    5d1c:	12 82       	std	Z+2, r1	; 0x02
    5d1e:	b0 93 64 15 	sts	0x1564, r27	; 0x801564 <__brkval+0x1>
    5d22:	a0 93 63 15 	sts	0x1563, r26	; 0x801563 <__brkval>
    5d26:	df 91       	pop	r29
    5d28:	cf 91       	pop	r28
    5d2a:	08 95       	ret

00005d2c <abort>:
    5d2c:	81 e0       	ldi	r24, 0x01	; 1
    5d2e:	90 e0       	ldi	r25, 0x00	; 0
    5d30:	f8 94       	cli
    5d32:	7d c3       	rjmp	.+1786   	; 0x642e <_exit>

00005d34 <memcpy>:
    5d34:	fb 01       	movw	r30, r22
    5d36:	dc 01       	movw	r26, r24
    5d38:	02 c0       	rjmp	.+4      	; 0x5d3e <memcpy+0xa>
    5d3a:	01 90       	ld	r0, Z+
    5d3c:	0d 92       	st	X+, r0
    5d3e:	41 50       	subi	r20, 0x01	; 1
    5d40:	50 40       	sbci	r21, 0x00	; 0
    5d42:	d8 f7       	brcc	.-10     	; 0x5d3a <memcpy+0x6>
    5d44:	08 95       	ret

00005d46 <memset>:
    5d46:	dc 01       	movw	r26, r24
    5d48:	01 c0       	rjmp	.+2      	; 0x5d4c <memset+0x6>
    5d4a:	6d 93       	st	X+, r22
    5d4c:	41 50       	subi	r20, 0x01	; 1
    5d4e:	50 40       	sbci	r21, 0x00	; 0
    5d50:	e0 f7       	brcc	.-8      	; 0x5d4a <memset+0x4>
    5d52:	08 95       	ret

00005d54 <strcasestr>:
    5d54:	fb 01       	movw	r30, r22
    5d56:	51 91       	ld	r21, Z+
    5d58:	55 23       	and	r21, r21
    5d5a:	b1 f0       	breq	.+44     	; 0x5d88 <strcasestr+0x34>
    5d5c:	bf 01       	movw	r22, r30
    5d5e:	dc 01       	movw	r26, r24
    5d60:	05 2e       	mov	r0, r21
    5d62:	4d 91       	ld	r20, X+
    5d64:	44 23       	and	r20, r20
    5d66:	69 f0       	breq	.+26     	; 0x5d82 <strcasestr+0x2e>
    5d68:	10 d0       	rcall	.+32     	; 0x5d8a <strcasestr+0x36>
    5d6a:	d9 f7       	brne	.-10     	; 0x5d62 <strcasestr+0xe>
    5d6c:	cd 01       	movw	r24, r26
    5d6e:	01 90       	ld	r0, Z+
    5d70:	00 20       	and	r0, r0
    5d72:	49 f0       	breq	.+18     	; 0x5d86 <strcasestr+0x32>
    5d74:	4d 91       	ld	r20, X+
    5d76:	41 11       	cpse	r20, r1
    5d78:	08 d0       	rcall	.+16     	; 0x5d8a <strcasestr+0x36>
    5d7a:	c9 f3       	breq	.-14     	; 0x5d6e <strcasestr+0x1a>
    5d7c:	fb 01       	movw	r30, r22
    5d7e:	41 11       	cpse	r20, r1
    5d80:	ee cf       	rjmp	.-36     	; 0x5d5e <strcasestr+0xa>
    5d82:	81 e0       	ldi	r24, 0x01	; 1
    5d84:	90 e0       	ldi	r25, 0x00	; 0
    5d86:	01 97       	sbiw	r24, 0x01	; 1
    5d88:	08 95       	ret
    5d8a:	40 25       	eor	r20, r0
    5d8c:	39 f0       	breq	.+14     	; 0x5d9c <strcasestr+0x48>
    5d8e:	40 32       	cpi	r20, 0x20	; 32
    5d90:	29 f4       	brne	.+10     	; 0x5d9c <strcasestr+0x48>
    5d92:	40 29       	or	r20, r0
    5d94:	4b 57       	subi	r20, 0x7B	; 123
    5d96:	46 5e       	subi	r20, 0xE6	; 230
    5d98:	08 f0       	brcs	.+2      	; 0x5d9c <strcasestr+0x48>
    5d9a:	18 94       	sez
    5d9c:	08 95       	ret

00005d9e <strcat>:
    5d9e:	fb 01       	movw	r30, r22
    5da0:	dc 01       	movw	r26, r24
    5da2:	0d 90       	ld	r0, X+
    5da4:	00 20       	and	r0, r0
    5da6:	e9 f7       	brne	.-6      	; 0x5da2 <strcat+0x4>
    5da8:	11 97       	sbiw	r26, 0x01	; 1
    5daa:	01 90       	ld	r0, Z+
    5dac:	0d 92       	st	X+, r0
    5dae:	00 20       	and	r0, r0
    5db0:	e1 f7       	brne	.-8      	; 0x5daa <strcat+0xc>
    5db2:	08 95       	ret

00005db4 <strcpy>:
    5db4:	fb 01       	movw	r30, r22
    5db6:	dc 01       	movw	r26, r24
    5db8:	01 90       	ld	r0, Z+
    5dba:	0d 92       	st	X+, r0
    5dbc:	00 20       	and	r0, r0
    5dbe:	e1 f7       	brne	.-8      	; 0x5db8 <strcpy+0x4>
    5dc0:	08 95       	ret

00005dc2 <strncasecmp>:
    5dc2:	fb 01       	movw	r30, r22
    5dc4:	dc 01       	movw	r26, r24
    5dc6:	41 50       	subi	r20, 0x01	; 1
    5dc8:	50 40       	sbci	r21, 0x00	; 0
    5dca:	88 f0       	brcs	.+34     	; 0x5dee <strncasecmp+0x2c>
    5dcc:	8d 91       	ld	r24, X+
    5dce:	81 34       	cpi	r24, 0x41	; 65
    5dd0:	1c f0       	brlt	.+6      	; 0x5dd8 <strncasecmp+0x16>
    5dd2:	8b 35       	cpi	r24, 0x5B	; 91
    5dd4:	0c f4       	brge	.+2      	; 0x5dd8 <strncasecmp+0x16>
    5dd6:	80 5e       	subi	r24, 0xE0	; 224
    5dd8:	61 91       	ld	r22, Z+
    5dda:	61 34       	cpi	r22, 0x41	; 65
    5ddc:	1c f0       	brlt	.+6      	; 0x5de4 <strncasecmp+0x22>
    5dde:	6b 35       	cpi	r22, 0x5B	; 91
    5de0:	0c f4       	brge	.+2      	; 0x5de4 <strncasecmp+0x22>
    5de2:	60 5e       	subi	r22, 0xE0	; 224
    5de4:	86 1b       	sub	r24, r22
    5de6:	61 11       	cpse	r22, r1
    5de8:	71 f3       	breq	.-36     	; 0x5dc6 <strncasecmp+0x4>
    5dea:	99 0b       	sbc	r25, r25
    5dec:	08 95       	ret
    5dee:	88 1b       	sub	r24, r24
    5df0:	fc cf       	rjmp	.-8      	; 0x5dea <strncasecmp+0x28>

00005df2 <printf>:
    5df2:	cf 93       	push	r28
    5df4:	df 93       	push	r29
    5df6:	cd b7       	in	r28, 0x3d	; 61
    5df8:	de b7       	in	r29, 0x3e	; 62
    5dfa:	ae 01       	movw	r20, r28
    5dfc:	4a 5f       	subi	r20, 0xFA	; 250
    5dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    5e00:	fa 01       	movw	r30, r20
    5e02:	61 91       	ld	r22, Z+
    5e04:	71 91       	ld	r23, Z+
    5e06:	af 01       	movw	r20, r30
    5e08:	80 91 69 15 	lds	r24, 0x1569	; 0x801569 <__iob+0x2>
    5e0c:	90 91 6a 15 	lds	r25, 0x156A	; 0x80156a <__iob+0x3>
    5e10:	61 d0       	rcall	.+194    	; 0x5ed4 <vfprintf>
    5e12:	df 91       	pop	r29
    5e14:	cf 91       	pop	r28
    5e16:	08 95       	ret

00005e18 <puts>:
    5e18:	0f 93       	push	r16
    5e1a:	1f 93       	push	r17
    5e1c:	cf 93       	push	r28
    5e1e:	df 93       	push	r29
    5e20:	e0 91 69 15 	lds	r30, 0x1569	; 0x801569 <__iob+0x2>
    5e24:	f0 91 6a 15 	lds	r31, 0x156A	; 0x80156a <__iob+0x3>
    5e28:	23 81       	ldd	r18, Z+3	; 0x03
    5e2a:	21 ff       	sbrs	r18, 1
    5e2c:	1b c0       	rjmp	.+54     	; 0x5e64 <puts+0x4c>
    5e2e:	8c 01       	movw	r16, r24
    5e30:	d0 e0       	ldi	r29, 0x00	; 0
    5e32:	c0 e0       	ldi	r28, 0x00	; 0
    5e34:	f8 01       	movw	r30, r16
    5e36:	81 91       	ld	r24, Z+
    5e38:	8f 01       	movw	r16, r30
    5e3a:	60 91 69 15 	lds	r22, 0x1569	; 0x801569 <__iob+0x2>
    5e3e:	70 91 6a 15 	lds	r23, 0x156A	; 0x80156a <__iob+0x3>
    5e42:	db 01       	movw	r26, r22
    5e44:	18 96       	adiw	r26, 0x08	; 8
    5e46:	ed 91       	ld	r30, X+
    5e48:	fc 91       	ld	r31, X
    5e4a:	19 97       	sbiw	r26, 0x09	; 9
    5e4c:	88 23       	and	r24, r24
    5e4e:	31 f0       	breq	.+12     	; 0x5e5c <puts+0x44>
    5e50:	19 95       	eicall
    5e52:	89 2b       	or	r24, r25
    5e54:	79 f3       	breq	.-34     	; 0x5e34 <puts+0x1c>
    5e56:	df ef       	ldi	r29, 0xFF	; 255
    5e58:	cf ef       	ldi	r28, 0xFF	; 255
    5e5a:	ec cf       	rjmp	.-40     	; 0x5e34 <puts+0x1c>
    5e5c:	8a e0       	ldi	r24, 0x0A	; 10
    5e5e:	19 95       	eicall
    5e60:	89 2b       	or	r24, r25
    5e62:	19 f0       	breq	.+6      	; 0x5e6a <puts+0x52>
    5e64:	8f ef       	ldi	r24, 0xFF	; 255
    5e66:	9f ef       	ldi	r25, 0xFF	; 255
    5e68:	02 c0       	rjmp	.+4      	; 0x5e6e <puts+0x56>
    5e6a:	8d 2f       	mov	r24, r29
    5e6c:	9c 2f       	mov	r25, r28
    5e6e:	df 91       	pop	r29
    5e70:	cf 91       	pop	r28
    5e72:	1f 91       	pop	r17
    5e74:	0f 91       	pop	r16
    5e76:	08 95       	ret

00005e78 <sprintf>:
    5e78:	0f 93       	push	r16
    5e7a:	1f 93       	push	r17
    5e7c:	cf 93       	push	r28
    5e7e:	df 93       	push	r29
    5e80:	cd b7       	in	r28, 0x3d	; 61
    5e82:	de b7       	in	r29, 0x3e	; 62
    5e84:	2e 97       	sbiw	r28, 0x0e	; 14
    5e86:	0f b6       	in	r0, 0x3f	; 63
    5e88:	f8 94       	cli
    5e8a:	de bf       	out	0x3e, r29	; 62
    5e8c:	0f be       	out	0x3f, r0	; 63
    5e8e:	cd bf       	out	0x3d, r28	; 61
    5e90:	0e 89       	ldd	r16, Y+22	; 0x16
    5e92:	1f 89       	ldd	r17, Y+23	; 0x17
    5e94:	86 e0       	ldi	r24, 0x06	; 6
    5e96:	8c 83       	std	Y+4, r24	; 0x04
    5e98:	1a 83       	std	Y+2, r17	; 0x02
    5e9a:	09 83       	std	Y+1, r16	; 0x01
    5e9c:	8f ef       	ldi	r24, 0xFF	; 255
    5e9e:	9f e7       	ldi	r25, 0x7F	; 127
    5ea0:	9e 83       	std	Y+6, r25	; 0x06
    5ea2:	8d 83       	std	Y+5, r24	; 0x05
    5ea4:	ae 01       	movw	r20, r28
    5ea6:	46 5e       	subi	r20, 0xE6	; 230
    5ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    5eaa:	68 8d       	ldd	r22, Y+24	; 0x18
    5eac:	79 8d       	ldd	r23, Y+25	; 0x19
    5eae:	ce 01       	movw	r24, r28
    5eb0:	01 96       	adiw	r24, 0x01	; 1
    5eb2:	10 d0       	rcall	.+32     	; 0x5ed4 <vfprintf>
    5eb4:	ef 81       	ldd	r30, Y+7	; 0x07
    5eb6:	f8 85       	ldd	r31, Y+8	; 0x08
    5eb8:	e0 0f       	add	r30, r16
    5eba:	f1 1f       	adc	r31, r17
    5ebc:	10 82       	st	Z, r1
    5ebe:	2e 96       	adiw	r28, 0x0e	; 14
    5ec0:	0f b6       	in	r0, 0x3f	; 63
    5ec2:	f8 94       	cli
    5ec4:	de bf       	out	0x3e, r29	; 62
    5ec6:	0f be       	out	0x3f, r0	; 63
    5ec8:	cd bf       	out	0x3d, r28	; 61
    5eca:	df 91       	pop	r29
    5ecc:	cf 91       	pop	r28
    5ece:	1f 91       	pop	r17
    5ed0:	0f 91       	pop	r16
    5ed2:	08 95       	ret

00005ed4 <vfprintf>:
    5ed4:	2f 92       	push	r2
    5ed6:	3f 92       	push	r3
    5ed8:	4f 92       	push	r4
    5eda:	5f 92       	push	r5
    5edc:	6f 92       	push	r6
    5ede:	7f 92       	push	r7
    5ee0:	8f 92       	push	r8
    5ee2:	9f 92       	push	r9
    5ee4:	af 92       	push	r10
    5ee6:	bf 92       	push	r11
    5ee8:	cf 92       	push	r12
    5eea:	df 92       	push	r13
    5eec:	ef 92       	push	r14
    5eee:	ff 92       	push	r15
    5ef0:	0f 93       	push	r16
    5ef2:	1f 93       	push	r17
    5ef4:	cf 93       	push	r28
    5ef6:	df 93       	push	r29
    5ef8:	cd b7       	in	r28, 0x3d	; 61
    5efa:	de b7       	in	r29, 0x3e	; 62
    5efc:	2b 97       	sbiw	r28, 0x0b	; 11
    5efe:	0f b6       	in	r0, 0x3f	; 63
    5f00:	f8 94       	cli
    5f02:	de bf       	out	0x3e, r29	; 62
    5f04:	0f be       	out	0x3f, r0	; 63
    5f06:	cd bf       	out	0x3d, r28	; 61
    5f08:	6c 01       	movw	r12, r24
    5f0a:	7b 01       	movw	r14, r22
    5f0c:	8a 01       	movw	r16, r20
    5f0e:	fc 01       	movw	r30, r24
    5f10:	17 82       	std	Z+7, r1	; 0x07
    5f12:	16 82       	std	Z+6, r1	; 0x06
    5f14:	83 81       	ldd	r24, Z+3	; 0x03
    5f16:	81 ff       	sbrs	r24, 1
    5f18:	bf c1       	rjmp	.+894    	; 0x6298 <vfprintf+0x3c4>
    5f1a:	ce 01       	movw	r24, r28
    5f1c:	01 96       	adiw	r24, 0x01	; 1
    5f1e:	3c 01       	movw	r6, r24
    5f20:	f6 01       	movw	r30, r12
    5f22:	93 81       	ldd	r25, Z+3	; 0x03
    5f24:	f7 01       	movw	r30, r14
    5f26:	93 fd       	sbrc	r25, 3
    5f28:	85 91       	lpm	r24, Z+
    5f2a:	93 ff       	sbrs	r25, 3
    5f2c:	81 91       	ld	r24, Z+
    5f2e:	7f 01       	movw	r14, r30
    5f30:	88 23       	and	r24, r24
    5f32:	09 f4       	brne	.+2      	; 0x5f36 <vfprintf+0x62>
    5f34:	ad c1       	rjmp	.+858    	; 0x6290 <vfprintf+0x3bc>
    5f36:	85 32       	cpi	r24, 0x25	; 37
    5f38:	39 f4       	brne	.+14     	; 0x5f48 <vfprintf+0x74>
    5f3a:	93 fd       	sbrc	r25, 3
    5f3c:	85 91       	lpm	r24, Z+
    5f3e:	93 ff       	sbrs	r25, 3
    5f40:	81 91       	ld	r24, Z+
    5f42:	7f 01       	movw	r14, r30
    5f44:	85 32       	cpi	r24, 0x25	; 37
    5f46:	21 f4       	brne	.+8      	; 0x5f50 <vfprintf+0x7c>
    5f48:	b6 01       	movw	r22, r12
    5f4a:	90 e0       	ldi	r25, 0x00	; 0
    5f4c:	d6 d1       	rcall	.+940    	; 0x62fa <fputc>
    5f4e:	e8 cf       	rjmp	.-48     	; 0x5f20 <vfprintf+0x4c>
    5f50:	91 2c       	mov	r9, r1
    5f52:	21 2c       	mov	r2, r1
    5f54:	31 2c       	mov	r3, r1
    5f56:	ff e1       	ldi	r31, 0x1F	; 31
    5f58:	f3 15       	cp	r31, r3
    5f5a:	d8 f0       	brcs	.+54     	; 0x5f92 <vfprintf+0xbe>
    5f5c:	8b 32       	cpi	r24, 0x2B	; 43
    5f5e:	79 f0       	breq	.+30     	; 0x5f7e <vfprintf+0xaa>
    5f60:	38 f4       	brcc	.+14     	; 0x5f70 <vfprintf+0x9c>
    5f62:	80 32       	cpi	r24, 0x20	; 32
    5f64:	79 f0       	breq	.+30     	; 0x5f84 <vfprintf+0xb0>
    5f66:	83 32       	cpi	r24, 0x23	; 35
    5f68:	a1 f4       	brne	.+40     	; 0x5f92 <vfprintf+0xbe>
    5f6a:	23 2d       	mov	r18, r3
    5f6c:	20 61       	ori	r18, 0x10	; 16
    5f6e:	1d c0       	rjmp	.+58     	; 0x5faa <vfprintf+0xd6>
    5f70:	8d 32       	cpi	r24, 0x2D	; 45
    5f72:	61 f0       	breq	.+24     	; 0x5f8c <vfprintf+0xb8>
    5f74:	80 33       	cpi	r24, 0x30	; 48
    5f76:	69 f4       	brne	.+26     	; 0x5f92 <vfprintf+0xbe>
    5f78:	23 2d       	mov	r18, r3
    5f7a:	21 60       	ori	r18, 0x01	; 1
    5f7c:	16 c0       	rjmp	.+44     	; 0x5faa <vfprintf+0xd6>
    5f7e:	83 2d       	mov	r24, r3
    5f80:	82 60       	ori	r24, 0x02	; 2
    5f82:	38 2e       	mov	r3, r24
    5f84:	e3 2d       	mov	r30, r3
    5f86:	e4 60       	ori	r30, 0x04	; 4
    5f88:	3e 2e       	mov	r3, r30
    5f8a:	2a c0       	rjmp	.+84     	; 0x5fe0 <vfprintf+0x10c>
    5f8c:	f3 2d       	mov	r31, r3
    5f8e:	f8 60       	ori	r31, 0x08	; 8
    5f90:	1d c0       	rjmp	.+58     	; 0x5fcc <vfprintf+0xf8>
    5f92:	37 fc       	sbrc	r3, 7
    5f94:	2d c0       	rjmp	.+90     	; 0x5ff0 <vfprintf+0x11c>
    5f96:	20 ed       	ldi	r18, 0xD0	; 208
    5f98:	28 0f       	add	r18, r24
    5f9a:	2a 30       	cpi	r18, 0x0A	; 10
    5f9c:	40 f0       	brcs	.+16     	; 0x5fae <vfprintf+0xda>
    5f9e:	8e 32       	cpi	r24, 0x2E	; 46
    5fa0:	b9 f4       	brne	.+46     	; 0x5fd0 <vfprintf+0xfc>
    5fa2:	36 fc       	sbrc	r3, 6
    5fa4:	75 c1       	rjmp	.+746    	; 0x6290 <vfprintf+0x3bc>
    5fa6:	23 2d       	mov	r18, r3
    5fa8:	20 64       	ori	r18, 0x40	; 64
    5faa:	32 2e       	mov	r3, r18
    5fac:	19 c0       	rjmp	.+50     	; 0x5fe0 <vfprintf+0x10c>
    5fae:	36 fe       	sbrs	r3, 6
    5fb0:	06 c0       	rjmp	.+12     	; 0x5fbe <vfprintf+0xea>
    5fb2:	8a e0       	ldi	r24, 0x0A	; 10
    5fb4:	98 9e       	mul	r9, r24
    5fb6:	20 0d       	add	r18, r0
    5fb8:	11 24       	eor	r1, r1
    5fba:	92 2e       	mov	r9, r18
    5fbc:	11 c0       	rjmp	.+34     	; 0x5fe0 <vfprintf+0x10c>
    5fbe:	ea e0       	ldi	r30, 0x0A	; 10
    5fc0:	2e 9e       	mul	r2, r30
    5fc2:	20 0d       	add	r18, r0
    5fc4:	11 24       	eor	r1, r1
    5fc6:	22 2e       	mov	r2, r18
    5fc8:	f3 2d       	mov	r31, r3
    5fca:	f0 62       	ori	r31, 0x20	; 32
    5fcc:	3f 2e       	mov	r3, r31
    5fce:	08 c0       	rjmp	.+16     	; 0x5fe0 <vfprintf+0x10c>
    5fd0:	8c 36       	cpi	r24, 0x6C	; 108
    5fd2:	21 f4       	brne	.+8      	; 0x5fdc <vfprintf+0x108>
    5fd4:	83 2d       	mov	r24, r3
    5fd6:	80 68       	ori	r24, 0x80	; 128
    5fd8:	38 2e       	mov	r3, r24
    5fda:	02 c0       	rjmp	.+4      	; 0x5fe0 <vfprintf+0x10c>
    5fdc:	88 36       	cpi	r24, 0x68	; 104
    5fde:	41 f4       	brne	.+16     	; 0x5ff0 <vfprintf+0x11c>
    5fe0:	f7 01       	movw	r30, r14
    5fe2:	93 fd       	sbrc	r25, 3
    5fe4:	85 91       	lpm	r24, Z+
    5fe6:	93 ff       	sbrs	r25, 3
    5fe8:	81 91       	ld	r24, Z+
    5fea:	7f 01       	movw	r14, r30
    5fec:	81 11       	cpse	r24, r1
    5fee:	b3 cf       	rjmp	.-154    	; 0x5f56 <vfprintf+0x82>
    5ff0:	98 2f       	mov	r25, r24
    5ff2:	9f 7d       	andi	r25, 0xDF	; 223
    5ff4:	95 54       	subi	r25, 0x45	; 69
    5ff6:	93 30       	cpi	r25, 0x03	; 3
    5ff8:	28 f4       	brcc	.+10     	; 0x6004 <vfprintf+0x130>
    5ffa:	0c 5f       	subi	r16, 0xFC	; 252
    5ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ffe:	9f e3       	ldi	r25, 0x3F	; 63
    6000:	99 83       	std	Y+1, r25	; 0x01
    6002:	0d c0       	rjmp	.+26     	; 0x601e <vfprintf+0x14a>
    6004:	83 36       	cpi	r24, 0x63	; 99
    6006:	31 f0       	breq	.+12     	; 0x6014 <vfprintf+0x140>
    6008:	83 37       	cpi	r24, 0x73	; 115
    600a:	71 f0       	breq	.+28     	; 0x6028 <vfprintf+0x154>
    600c:	83 35       	cpi	r24, 0x53	; 83
    600e:	09 f0       	breq	.+2      	; 0x6012 <vfprintf+0x13e>
    6010:	55 c0       	rjmp	.+170    	; 0x60bc <vfprintf+0x1e8>
    6012:	20 c0       	rjmp	.+64     	; 0x6054 <vfprintf+0x180>
    6014:	f8 01       	movw	r30, r16
    6016:	80 81       	ld	r24, Z
    6018:	89 83       	std	Y+1, r24	; 0x01
    601a:	0e 5f       	subi	r16, 0xFE	; 254
    601c:	1f 4f       	sbci	r17, 0xFF	; 255
    601e:	88 24       	eor	r8, r8
    6020:	83 94       	inc	r8
    6022:	91 2c       	mov	r9, r1
    6024:	53 01       	movw	r10, r6
    6026:	12 c0       	rjmp	.+36     	; 0x604c <vfprintf+0x178>
    6028:	28 01       	movw	r4, r16
    602a:	f2 e0       	ldi	r31, 0x02	; 2
    602c:	4f 0e       	add	r4, r31
    602e:	51 1c       	adc	r5, r1
    6030:	f8 01       	movw	r30, r16
    6032:	a0 80       	ld	r10, Z
    6034:	b1 80       	ldd	r11, Z+1	; 0x01
    6036:	36 fe       	sbrs	r3, 6
    6038:	03 c0       	rjmp	.+6      	; 0x6040 <vfprintf+0x16c>
    603a:	69 2d       	mov	r22, r9
    603c:	70 e0       	ldi	r23, 0x00	; 0
    603e:	02 c0       	rjmp	.+4      	; 0x6044 <vfprintf+0x170>
    6040:	6f ef       	ldi	r22, 0xFF	; 255
    6042:	7f ef       	ldi	r23, 0xFF	; 255
    6044:	c5 01       	movw	r24, r10
    6046:	4e d1       	rcall	.+668    	; 0x62e4 <strnlen>
    6048:	4c 01       	movw	r8, r24
    604a:	82 01       	movw	r16, r4
    604c:	f3 2d       	mov	r31, r3
    604e:	ff 77       	andi	r31, 0x7F	; 127
    6050:	3f 2e       	mov	r3, r31
    6052:	15 c0       	rjmp	.+42     	; 0x607e <vfprintf+0x1aa>
    6054:	28 01       	movw	r4, r16
    6056:	22 e0       	ldi	r18, 0x02	; 2
    6058:	42 0e       	add	r4, r18
    605a:	51 1c       	adc	r5, r1
    605c:	f8 01       	movw	r30, r16
    605e:	a0 80       	ld	r10, Z
    6060:	b1 80       	ldd	r11, Z+1	; 0x01
    6062:	36 fe       	sbrs	r3, 6
    6064:	03 c0       	rjmp	.+6      	; 0x606c <vfprintf+0x198>
    6066:	69 2d       	mov	r22, r9
    6068:	70 e0       	ldi	r23, 0x00	; 0
    606a:	02 c0       	rjmp	.+4      	; 0x6070 <vfprintf+0x19c>
    606c:	6f ef       	ldi	r22, 0xFF	; 255
    606e:	7f ef       	ldi	r23, 0xFF	; 255
    6070:	c5 01       	movw	r24, r10
    6072:	2d d1       	rcall	.+602    	; 0x62ce <strnlen_P>
    6074:	4c 01       	movw	r8, r24
    6076:	f3 2d       	mov	r31, r3
    6078:	f0 68       	ori	r31, 0x80	; 128
    607a:	3f 2e       	mov	r3, r31
    607c:	82 01       	movw	r16, r4
    607e:	33 fc       	sbrc	r3, 3
    6080:	19 c0       	rjmp	.+50     	; 0x60b4 <vfprintf+0x1e0>
    6082:	82 2d       	mov	r24, r2
    6084:	90 e0       	ldi	r25, 0x00	; 0
    6086:	88 16       	cp	r8, r24
    6088:	99 06       	cpc	r9, r25
    608a:	a0 f4       	brcc	.+40     	; 0x60b4 <vfprintf+0x1e0>
    608c:	b6 01       	movw	r22, r12
    608e:	80 e2       	ldi	r24, 0x20	; 32
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	33 d1       	rcall	.+614    	; 0x62fa <fputc>
    6094:	2a 94       	dec	r2
    6096:	f5 cf       	rjmp	.-22     	; 0x6082 <vfprintf+0x1ae>
    6098:	f5 01       	movw	r30, r10
    609a:	37 fc       	sbrc	r3, 7
    609c:	85 91       	lpm	r24, Z+
    609e:	37 fe       	sbrs	r3, 7
    60a0:	81 91       	ld	r24, Z+
    60a2:	5f 01       	movw	r10, r30
    60a4:	b6 01       	movw	r22, r12
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	28 d1       	rcall	.+592    	; 0x62fa <fputc>
    60aa:	21 10       	cpse	r2, r1
    60ac:	2a 94       	dec	r2
    60ae:	21 e0       	ldi	r18, 0x01	; 1
    60b0:	82 1a       	sub	r8, r18
    60b2:	91 08       	sbc	r9, r1
    60b4:	81 14       	cp	r8, r1
    60b6:	91 04       	cpc	r9, r1
    60b8:	79 f7       	brne	.-34     	; 0x6098 <vfprintf+0x1c4>
    60ba:	e1 c0       	rjmp	.+450    	; 0x627e <vfprintf+0x3aa>
    60bc:	84 36       	cpi	r24, 0x64	; 100
    60be:	11 f0       	breq	.+4      	; 0x60c4 <vfprintf+0x1f0>
    60c0:	89 36       	cpi	r24, 0x69	; 105
    60c2:	39 f5       	brne	.+78     	; 0x6112 <vfprintf+0x23e>
    60c4:	f8 01       	movw	r30, r16
    60c6:	37 fe       	sbrs	r3, 7
    60c8:	07 c0       	rjmp	.+14     	; 0x60d8 <vfprintf+0x204>
    60ca:	60 81       	ld	r22, Z
    60cc:	71 81       	ldd	r23, Z+1	; 0x01
    60ce:	82 81       	ldd	r24, Z+2	; 0x02
    60d0:	93 81       	ldd	r25, Z+3	; 0x03
    60d2:	0c 5f       	subi	r16, 0xFC	; 252
    60d4:	1f 4f       	sbci	r17, 0xFF	; 255
    60d6:	08 c0       	rjmp	.+16     	; 0x60e8 <vfprintf+0x214>
    60d8:	60 81       	ld	r22, Z
    60da:	71 81       	ldd	r23, Z+1	; 0x01
    60dc:	07 2e       	mov	r0, r23
    60de:	00 0c       	add	r0, r0
    60e0:	88 0b       	sbc	r24, r24
    60e2:	99 0b       	sbc	r25, r25
    60e4:	0e 5f       	subi	r16, 0xFE	; 254
    60e6:	1f 4f       	sbci	r17, 0xFF	; 255
    60e8:	f3 2d       	mov	r31, r3
    60ea:	ff 76       	andi	r31, 0x6F	; 111
    60ec:	3f 2e       	mov	r3, r31
    60ee:	97 ff       	sbrs	r25, 7
    60f0:	09 c0       	rjmp	.+18     	; 0x6104 <vfprintf+0x230>
    60f2:	90 95       	com	r25
    60f4:	80 95       	com	r24
    60f6:	70 95       	com	r23
    60f8:	61 95       	neg	r22
    60fa:	7f 4f       	sbci	r23, 0xFF	; 255
    60fc:	8f 4f       	sbci	r24, 0xFF	; 255
    60fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6100:	f0 68       	ori	r31, 0x80	; 128
    6102:	3f 2e       	mov	r3, r31
    6104:	2a e0       	ldi	r18, 0x0A	; 10
    6106:	30 e0       	ldi	r19, 0x00	; 0
    6108:	a3 01       	movw	r20, r6
    610a:	33 d1       	rcall	.+614    	; 0x6372 <__ultoa_invert>
    610c:	88 2e       	mov	r8, r24
    610e:	86 18       	sub	r8, r6
    6110:	44 c0       	rjmp	.+136    	; 0x619a <vfprintf+0x2c6>
    6112:	85 37       	cpi	r24, 0x75	; 117
    6114:	31 f4       	brne	.+12     	; 0x6122 <vfprintf+0x24e>
    6116:	23 2d       	mov	r18, r3
    6118:	2f 7e       	andi	r18, 0xEF	; 239
    611a:	b2 2e       	mov	r11, r18
    611c:	2a e0       	ldi	r18, 0x0A	; 10
    611e:	30 e0       	ldi	r19, 0x00	; 0
    6120:	25 c0       	rjmp	.+74     	; 0x616c <vfprintf+0x298>
    6122:	93 2d       	mov	r25, r3
    6124:	99 7f       	andi	r25, 0xF9	; 249
    6126:	b9 2e       	mov	r11, r25
    6128:	8f 36       	cpi	r24, 0x6F	; 111
    612a:	c1 f0       	breq	.+48     	; 0x615c <vfprintf+0x288>
    612c:	18 f4       	brcc	.+6      	; 0x6134 <vfprintf+0x260>
    612e:	88 35       	cpi	r24, 0x58	; 88
    6130:	79 f0       	breq	.+30     	; 0x6150 <vfprintf+0x27c>
    6132:	ae c0       	rjmp	.+348    	; 0x6290 <vfprintf+0x3bc>
    6134:	80 37       	cpi	r24, 0x70	; 112
    6136:	19 f0       	breq	.+6      	; 0x613e <vfprintf+0x26a>
    6138:	88 37       	cpi	r24, 0x78	; 120
    613a:	21 f0       	breq	.+8      	; 0x6144 <vfprintf+0x270>
    613c:	a9 c0       	rjmp	.+338    	; 0x6290 <vfprintf+0x3bc>
    613e:	e9 2f       	mov	r30, r25
    6140:	e0 61       	ori	r30, 0x10	; 16
    6142:	be 2e       	mov	r11, r30
    6144:	b4 fe       	sbrs	r11, 4
    6146:	0d c0       	rjmp	.+26     	; 0x6162 <vfprintf+0x28e>
    6148:	fb 2d       	mov	r31, r11
    614a:	f4 60       	ori	r31, 0x04	; 4
    614c:	bf 2e       	mov	r11, r31
    614e:	09 c0       	rjmp	.+18     	; 0x6162 <vfprintf+0x28e>
    6150:	34 fe       	sbrs	r3, 4
    6152:	0a c0       	rjmp	.+20     	; 0x6168 <vfprintf+0x294>
    6154:	29 2f       	mov	r18, r25
    6156:	26 60       	ori	r18, 0x06	; 6
    6158:	b2 2e       	mov	r11, r18
    615a:	06 c0       	rjmp	.+12     	; 0x6168 <vfprintf+0x294>
    615c:	28 e0       	ldi	r18, 0x08	; 8
    615e:	30 e0       	ldi	r19, 0x00	; 0
    6160:	05 c0       	rjmp	.+10     	; 0x616c <vfprintf+0x298>
    6162:	20 e1       	ldi	r18, 0x10	; 16
    6164:	30 e0       	ldi	r19, 0x00	; 0
    6166:	02 c0       	rjmp	.+4      	; 0x616c <vfprintf+0x298>
    6168:	20 e1       	ldi	r18, 0x10	; 16
    616a:	32 e0       	ldi	r19, 0x02	; 2
    616c:	f8 01       	movw	r30, r16
    616e:	b7 fe       	sbrs	r11, 7
    6170:	07 c0       	rjmp	.+14     	; 0x6180 <vfprintf+0x2ac>
    6172:	60 81       	ld	r22, Z
    6174:	71 81       	ldd	r23, Z+1	; 0x01
    6176:	82 81       	ldd	r24, Z+2	; 0x02
    6178:	93 81       	ldd	r25, Z+3	; 0x03
    617a:	0c 5f       	subi	r16, 0xFC	; 252
    617c:	1f 4f       	sbci	r17, 0xFF	; 255
    617e:	06 c0       	rjmp	.+12     	; 0x618c <vfprintf+0x2b8>
    6180:	60 81       	ld	r22, Z
    6182:	71 81       	ldd	r23, Z+1	; 0x01
    6184:	80 e0       	ldi	r24, 0x00	; 0
    6186:	90 e0       	ldi	r25, 0x00	; 0
    6188:	0e 5f       	subi	r16, 0xFE	; 254
    618a:	1f 4f       	sbci	r17, 0xFF	; 255
    618c:	a3 01       	movw	r20, r6
    618e:	f1 d0       	rcall	.+482    	; 0x6372 <__ultoa_invert>
    6190:	88 2e       	mov	r8, r24
    6192:	86 18       	sub	r8, r6
    6194:	fb 2d       	mov	r31, r11
    6196:	ff 77       	andi	r31, 0x7F	; 127
    6198:	3f 2e       	mov	r3, r31
    619a:	36 fe       	sbrs	r3, 6
    619c:	0d c0       	rjmp	.+26     	; 0x61b8 <vfprintf+0x2e4>
    619e:	23 2d       	mov	r18, r3
    61a0:	2e 7f       	andi	r18, 0xFE	; 254
    61a2:	a2 2e       	mov	r10, r18
    61a4:	89 14       	cp	r8, r9
    61a6:	58 f4       	brcc	.+22     	; 0x61be <vfprintf+0x2ea>
    61a8:	34 fe       	sbrs	r3, 4
    61aa:	0b c0       	rjmp	.+22     	; 0x61c2 <vfprintf+0x2ee>
    61ac:	32 fc       	sbrc	r3, 2
    61ae:	09 c0       	rjmp	.+18     	; 0x61c2 <vfprintf+0x2ee>
    61b0:	83 2d       	mov	r24, r3
    61b2:	8e 7e       	andi	r24, 0xEE	; 238
    61b4:	a8 2e       	mov	r10, r24
    61b6:	05 c0       	rjmp	.+10     	; 0x61c2 <vfprintf+0x2ee>
    61b8:	b8 2c       	mov	r11, r8
    61ba:	a3 2c       	mov	r10, r3
    61bc:	03 c0       	rjmp	.+6      	; 0x61c4 <vfprintf+0x2f0>
    61be:	b8 2c       	mov	r11, r8
    61c0:	01 c0       	rjmp	.+2      	; 0x61c4 <vfprintf+0x2f0>
    61c2:	b9 2c       	mov	r11, r9
    61c4:	a4 fe       	sbrs	r10, 4
    61c6:	0f c0       	rjmp	.+30     	; 0x61e6 <vfprintf+0x312>
    61c8:	fe 01       	movw	r30, r28
    61ca:	e8 0d       	add	r30, r8
    61cc:	f1 1d       	adc	r31, r1
    61ce:	80 81       	ld	r24, Z
    61d0:	80 33       	cpi	r24, 0x30	; 48
    61d2:	21 f4       	brne	.+8      	; 0x61dc <vfprintf+0x308>
    61d4:	9a 2d       	mov	r25, r10
    61d6:	99 7e       	andi	r25, 0xE9	; 233
    61d8:	a9 2e       	mov	r10, r25
    61da:	09 c0       	rjmp	.+18     	; 0x61ee <vfprintf+0x31a>
    61dc:	a2 fe       	sbrs	r10, 2
    61de:	06 c0       	rjmp	.+12     	; 0x61ec <vfprintf+0x318>
    61e0:	b3 94       	inc	r11
    61e2:	b3 94       	inc	r11
    61e4:	04 c0       	rjmp	.+8      	; 0x61ee <vfprintf+0x31a>
    61e6:	8a 2d       	mov	r24, r10
    61e8:	86 78       	andi	r24, 0x86	; 134
    61ea:	09 f0       	breq	.+2      	; 0x61ee <vfprintf+0x31a>
    61ec:	b3 94       	inc	r11
    61ee:	a3 fc       	sbrc	r10, 3
    61f0:	10 c0       	rjmp	.+32     	; 0x6212 <vfprintf+0x33e>
    61f2:	a0 fe       	sbrs	r10, 0
    61f4:	06 c0       	rjmp	.+12     	; 0x6202 <vfprintf+0x32e>
    61f6:	b2 14       	cp	r11, r2
    61f8:	80 f4       	brcc	.+32     	; 0x621a <vfprintf+0x346>
    61fa:	28 0c       	add	r2, r8
    61fc:	92 2c       	mov	r9, r2
    61fe:	9b 18       	sub	r9, r11
    6200:	0d c0       	rjmp	.+26     	; 0x621c <vfprintf+0x348>
    6202:	b2 14       	cp	r11, r2
    6204:	58 f4       	brcc	.+22     	; 0x621c <vfprintf+0x348>
    6206:	b6 01       	movw	r22, r12
    6208:	80 e2       	ldi	r24, 0x20	; 32
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	76 d0       	rcall	.+236    	; 0x62fa <fputc>
    620e:	b3 94       	inc	r11
    6210:	f8 cf       	rjmp	.-16     	; 0x6202 <vfprintf+0x32e>
    6212:	b2 14       	cp	r11, r2
    6214:	18 f4       	brcc	.+6      	; 0x621c <vfprintf+0x348>
    6216:	2b 18       	sub	r2, r11
    6218:	02 c0       	rjmp	.+4      	; 0x621e <vfprintf+0x34a>
    621a:	98 2c       	mov	r9, r8
    621c:	21 2c       	mov	r2, r1
    621e:	a4 fe       	sbrs	r10, 4
    6220:	0f c0       	rjmp	.+30     	; 0x6240 <vfprintf+0x36c>
    6222:	b6 01       	movw	r22, r12
    6224:	80 e3       	ldi	r24, 0x30	; 48
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	68 d0       	rcall	.+208    	; 0x62fa <fputc>
    622a:	a2 fe       	sbrs	r10, 2
    622c:	16 c0       	rjmp	.+44     	; 0x625a <vfprintf+0x386>
    622e:	a1 fc       	sbrc	r10, 1
    6230:	03 c0       	rjmp	.+6      	; 0x6238 <vfprintf+0x364>
    6232:	88 e7       	ldi	r24, 0x78	; 120
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	02 c0       	rjmp	.+4      	; 0x623c <vfprintf+0x368>
    6238:	88 e5       	ldi	r24, 0x58	; 88
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	b6 01       	movw	r22, r12
    623e:	0c c0       	rjmp	.+24     	; 0x6258 <vfprintf+0x384>
    6240:	8a 2d       	mov	r24, r10
    6242:	86 78       	andi	r24, 0x86	; 134
    6244:	51 f0       	breq	.+20     	; 0x625a <vfprintf+0x386>
    6246:	a1 fe       	sbrs	r10, 1
    6248:	02 c0       	rjmp	.+4      	; 0x624e <vfprintf+0x37a>
    624a:	8b e2       	ldi	r24, 0x2B	; 43
    624c:	01 c0       	rjmp	.+2      	; 0x6250 <vfprintf+0x37c>
    624e:	80 e2       	ldi	r24, 0x20	; 32
    6250:	a7 fc       	sbrc	r10, 7
    6252:	8d e2       	ldi	r24, 0x2D	; 45
    6254:	b6 01       	movw	r22, r12
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	50 d0       	rcall	.+160    	; 0x62fa <fputc>
    625a:	89 14       	cp	r8, r9
    625c:	30 f4       	brcc	.+12     	; 0x626a <vfprintf+0x396>
    625e:	b6 01       	movw	r22, r12
    6260:	80 e3       	ldi	r24, 0x30	; 48
    6262:	90 e0       	ldi	r25, 0x00	; 0
    6264:	4a d0       	rcall	.+148    	; 0x62fa <fputc>
    6266:	9a 94       	dec	r9
    6268:	f8 cf       	rjmp	.-16     	; 0x625a <vfprintf+0x386>
    626a:	8a 94       	dec	r8
    626c:	f3 01       	movw	r30, r6
    626e:	e8 0d       	add	r30, r8
    6270:	f1 1d       	adc	r31, r1
    6272:	80 81       	ld	r24, Z
    6274:	b6 01       	movw	r22, r12
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	40 d0       	rcall	.+128    	; 0x62fa <fputc>
    627a:	81 10       	cpse	r8, r1
    627c:	f6 cf       	rjmp	.-20     	; 0x626a <vfprintf+0x396>
    627e:	22 20       	and	r2, r2
    6280:	09 f4       	brne	.+2      	; 0x6284 <vfprintf+0x3b0>
    6282:	4e ce       	rjmp	.-868    	; 0x5f20 <vfprintf+0x4c>
    6284:	b6 01       	movw	r22, r12
    6286:	80 e2       	ldi	r24, 0x20	; 32
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	37 d0       	rcall	.+110    	; 0x62fa <fputc>
    628c:	2a 94       	dec	r2
    628e:	f7 cf       	rjmp	.-18     	; 0x627e <vfprintf+0x3aa>
    6290:	f6 01       	movw	r30, r12
    6292:	86 81       	ldd	r24, Z+6	; 0x06
    6294:	97 81       	ldd	r25, Z+7	; 0x07
    6296:	02 c0       	rjmp	.+4      	; 0x629c <vfprintf+0x3c8>
    6298:	8f ef       	ldi	r24, 0xFF	; 255
    629a:	9f ef       	ldi	r25, 0xFF	; 255
    629c:	2b 96       	adiw	r28, 0x0b	; 11
    629e:	0f b6       	in	r0, 0x3f	; 63
    62a0:	f8 94       	cli
    62a2:	de bf       	out	0x3e, r29	; 62
    62a4:	0f be       	out	0x3f, r0	; 63
    62a6:	cd bf       	out	0x3d, r28	; 61
    62a8:	df 91       	pop	r29
    62aa:	cf 91       	pop	r28
    62ac:	1f 91       	pop	r17
    62ae:	0f 91       	pop	r16
    62b0:	ff 90       	pop	r15
    62b2:	ef 90       	pop	r14
    62b4:	df 90       	pop	r13
    62b6:	cf 90       	pop	r12
    62b8:	bf 90       	pop	r11
    62ba:	af 90       	pop	r10
    62bc:	9f 90       	pop	r9
    62be:	8f 90       	pop	r8
    62c0:	7f 90       	pop	r7
    62c2:	6f 90       	pop	r6
    62c4:	5f 90       	pop	r5
    62c6:	4f 90       	pop	r4
    62c8:	3f 90       	pop	r3
    62ca:	2f 90       	pop	r2
    62cc:	08 95       	ret

000062ce <strnlen_P>:
    62ce:	fc 01       	movw	r30, r24
    62d0:	05 90       	lpm	r0, Z+
    62d2:	61 50       	subi	r22, 0x01	; 1
    62d4:	70 40       	sbci	r23, 0x00	; 0
    62d6:	01 10       	cpse	r0, r1
    62d8:	d8 f7       	brcc	.-10     	; 0x62d0 <strnlen_P+0x2>
    62da:	80 95       	com	r24
    62dc:	90 95       	com	r25
    62de:	8e 0f       	add	r24, r30
    62e0:	9f 1f       	adc	r25, r31
    62e2:	08 95       	ret

000062e4 <strnlen>:
    62e4:	fc 01       	movw	r30, r24
    62e6:	61 50       	subi	r22, 0x01	; 1
    62e8:	70 40       	sbci	r23, 0x00	; 0
    62ea:	01 90       	ld	r0, Z+
    62ec:	01 10       	cpse	r0, r1
    62ee:	d8 f7       	brcc	.-10     	; 0x62e6 <strnlen+0x2>
    62f0:	80 95       	com	r24
    62f2:	90 95       	com	r25
    62f4:	8e 0f       	add	r24, r30
    62f6:	9f 1f       	adc	r25, r31
    62f8:	08 95       	ret

000062fa <fputc>:
    62fa:	0f 93       	push	r16
    62fc:	1f 93       	push	r17
    62fe:	cf 93       	push	r28
    6300:	df 93       	push	r29
    6302:	fb 01       	movw	r30, r22
    6304:	23 81       	ldd	r18, Z+3	; 0x03
    6306:	21 fd       	sbrc	r18, 1
    6308:	03 c0       	rjmp	.+6      	; 0x6310 <fputc+0x16>
    630a:	8f ef       	ldi	r24, 0xFF	; 255
    630c:	9f ef       	ldi	r25, 0xFF	; 255
    630e:	2c c0       	rjmp	.+88     	; 0x6368 <fputc+0x6e>
    6310:	22 ff       	sbrs	r18, 2
    6312:	16 c0       	rjmp	.+44     	; 0x6340 <fputc+0x46>
    6314:	46 81       	ldd	r20, Z+6	; 0x06
    6316:	57 81       	ldd	r21, Z+7	; 0x07
    6318:	24 81       	ldd	r18, Z+4	; 0x04
    631a:	35 81       	ldd	r19, Z+5	; 0x05
    631c:	42 17       	cp	r20, r18
    631e:	53 07       	cpc	r21, r19
    6320:	44 f4       	brge	.+16     	; 0x6332 <fputc+0x38>
    6322:	a0 81       	ld	r26, Z
    6324:	b1 81       	ldd	r27, Z+1	; 0x01
    6326:	9d 01       	movw	r18, r26
    6328:	2f 5f       	subi	r18, 0xFF	; 255
    632a:	3f 4f       	sbci	r19, 0xFF	; 255
    632c:	31 83       	std	Z+1, r19	; 0x01
    632e:	20 83       	st	Z, r18
    6330:	8c 93       	st	X, r24
    6332:	26 81       	ldd	r18, Z+6	; 0x06
    6334:	37 81       	ldd	r19, Z+7	; 0x07
    6336:	2f 5f       	subi	r18, 0xFF	; 255
    6338:	3f 4f       	sbci	r19, 0xFF	; 255
    633a:	37 83       	std	Z+7, r19	; 0x07
    633c:	26 83       	std	Z+6, r18	; 0x06
    633e:	14 c0       	rjmp	.+40     	; 0x6368 <fputc+0x6e>
    6340:	8b 01       	movw	r16, r22
    6342:	ec 01       	movw	r28, r24
    6344:	fb 01       	movw	r30, r22
    6346:	00 84       	ldd	r0, Z+8	; 0x08
    6348:	f1 85       	ldd	r31, Z+9	; 0x09
    634a:	e0 2d       	mov	r30, r0
    634c:	19 95       	eicall
    634e:	89 2b       	or	r24, r25
    6350:	e1 f6       	brne	.-72     	; 0x630a <fputc+0x10>
    6352:	d8 01       	movw	r26, r16
    6354:	16 96       	adiw	r26, 0x06	; 6
    6356:	8d 91       	ld	r24, X+
    6358:	9c 91       	ld	r25, X
    635a:	17 97       	sbiw	r26, 0x07	; 7
    635c:	01 96       	adiw	r24, 0x01	; 1
    635e:	17 96       	adiw	r26, 0x07	; 7
    6360:	9c 93       	st	X, r25
    6362:	8e 93       	st	-X, r24
    6364:	16 97       	sbiw	r26, 0x06	; 6
    6366:	ce 01       	movw	r24, r28
    6368:	df 91       	pop	r29
    636a:	cf 91       	pop	r28
    636c:	1f 91       	pop	r17
    636e:	0f 91       	pop	r16
    6370:	08 95       	ret

00006372 <__ultoa_invert>:
    6372:	fa 01       	movw	r30, r20
    6374:	aa 27       	eor	r26, r26
    6376:	28 30       	cpi	r18, 0x08	; 8
    6378:	51 f1       	breq	.+84     	; 0x63ce <__ultoa_invert+0x5c>
    637a:	20 31       	cpi	r18, 0x10	; 16
    637c:	81 f1       	breq	.+96     	; 0x63de <__ultoa_invert+0x6c>
    637e:	e8 94       	clt
    6380:	6f 93       	push	r22
    6382:	6e 7f       	andi	r22, 0xFE	; 254
    6384:	6e 5f       	subi	r22, 0xFE	; 254
    6386:	7f 4f       	sbci	r23, 0xFF	; 255
    6388:	8f 4f       	sbci	r24, 0xFF	; 255
    638a:	9f 4f       	sbci	r25, 0xFF	; 255
    638c:	af 4f       	sbci	r26, 0xFF	; 255
    638e:	b1 e0       	ldi	r27, 0x01	; 1
    6390:	3e d0       	rcall	.+124    	; 0x640e <__ultoa_invert+0x9c>
    6392:	b4 e0       	ldi	r27, 0x04	; 4
    6394:	3c d0       	rcall	.+120    	; 0x640e <__ultoa_invert+0x9c>
    6396:	67 0f       	add	r22, r23
    6398:	78 1f       	adc	r23, r24
    639a:	89 1f       	adc	r24, r25
    639c:	9a 1f       	adc	r25, r26
    639e:	a1 1d       	adc	r26, r1
    63a0:	68 0f       	add	r22, r24
    63a2:	79 1f       	adc	r23, r25
    63a4:	8a 1f       	adc	r24, r26
    63a6:	91 1d       	adc	r25, r1
    63a8:	a1 1d       	adc	r26, r1
    63aa:	6a 0f       	add	r22, r26
    63ac:	71 1d       	adc	r23, r1
    63ae:	81 1d       	adc	r24, r1
    63b0:	91 1d       	adc	r25, r1
    63b2:	a1 1d       	adc	r26, r1
    63b4:	20 d0       	rcall	.+64     	; 0x63f6 <__ultoa_invert+0x84>
    63b6:	09 f4       	brne	.+2      	; 0x63ba <__ultoa_invert+0x48>
    63b8:	68 94       	set
    63ba:	3f 91       	pop	r19
    63bc:	2a e0       	ldi	r18, 0x0A	; 10
    63be:	26 9f       	mul	r18, r22
    63c0:	11 24       	eor	r1, r1
    63c2:	30 19       	sub	r19, r0
    63c4:	30 5d       	subi	r19, 0xD0	; 208
    63c6:	31 93       	st	Z+, r19
    63c8:	de f6       	brtc	.-74     	; 0x6380 <__ultoa_invert+0xe>
    63ca:	cf 01       	movw	r24, r30
    63cc:	08 95       	ret
    63ce:	46 2f       	mov	r20, r22
    63d0:	47 70       	andi	r20, 0x07	; 7
    63d2:	40 5d       	subi	r20, 0xD0	; 208
    63d4:	41 93       	st	Z+, r20
    63d6:	b3 e0       	ldi	r27, 0x03	; 3
    63d8:	0f d0       	rcall	.+30     	; 0x63f8 <__ultoa_invert+0x86>
    63da:	c9 f7       	brne	.-14     	; 0x63ce <__ultoa_invert+0x5c>
    63dc:	f6 cf       	rjmp	.-20     	; 0x63ca <__ultoa_invert+0x58>
    63de:	46 2f       	mov	r20, r22
    63e0:	4f 70       	andi	r20, 0x0F	; 15
    63e2:	40 5d       	subi	r20, 0xD0	; 208
    63e4:	4a 33       	cpi	r20, 0x3A	; 58
    63e6:	18 f0       	brcs	.+6      	; 0x63ee <__ultoa_invert+0x7c>
    63e8:	49 5d       	subi	r20, 0xD9	; 217
    63ea:	31 fd       	sbrc	r19, 1
    63ec:	40 52       	subi	r20, 0x20	; 32
    63ee:	41 93       	st	Z+, r20
    63f0:	02 d0       	rcall	.+4      	; 0x63f6 <__ultoa_invert+0x84>
    63f2:	a9 f7       	brne	.-22     	; 0x63de <__ultoa_invert+0x6c>
    63f4:	ea cf       	rjmp	.-44     	; 0x63ca <__ultoa_invert+0x58>
    63f6:	b4 e0       	ldi	r27, 0x04	; 4
    63f8:	a6 95       	lsr	r26
    63fa:	97 95       	ror	r25
    63fc:	87 95       	ror	r24
    63fe:	77 95       	ror	r23
    6400:	67 95       	ror	r22
    6402:	ba 95       	dec	r27
    6404:	c9 f7       	brne	.-14     	; 0x63f8 <__ultoa_invert+0x86>
    6406:	00 97       	sbiw	r24, 0x00	; 0
    6408:	61 05       	cpc	r22, r1
    640a:	71 05       	cpc	r23, r1
    640c:	08 95       	ret
    640e:	9b 01       	movw	r18, r22
    6410:	ac 01       	movw	r20, r24
    6412:	0a 2e       	mov	r0, r26
    6414:	06 94       	lsr	r0
    6416:	57 95       	ror	r21
    6418:	47 95       	ror	r20
    641a:	37 95       	ror	r19
    641c:	27 95       	ror	r18
    641e:	ba 95       	dec	r27
    6420:	c9 f7       	brne	.-14     	; 0x6414 <__ultoa_invert+0xa2>
    6422:	62 0f       	add	r22, r18
    6424:	73 1f       	adc	r23, r19
    6426:	84 1f       	adc	r24, r20
    6428:	95 1f       	adc	r25, r21
    642a:	a0 1d       	adc	r26, r0
    642c:	08 95       	ret

0000642e <_exit>:
    642e:	f8 94       	cli

00006430 <__stop_program>:
    6430:	ff cf       	rjmp	.-2      	; 0x6430 <__stop_program>
