
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006d8  00800200  0000646a  000064fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000646a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001097  008008d8  008008d8  00006bd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006bd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006c34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab0  00000000  00000000  00006c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d6db  00000000  00000000  00007724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035c9  00000000  00000000  00014dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006cf6  00000000  00000000  000183c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025fc  00000000  00000000  0001f0c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000403f  00000000  00000000  000216bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b9c1  00000000  00000000  000256fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e8  00000000  00000000  000310bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	8e c4       	rjmp	.+2332   	; 0x94e <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 7c 25 	jmp	0x4af8	; 0x4af8 <__vector_25>
      68:	0c 94 ce 25 	jmp	0x4b9c	; 0x4b9c <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 12 26 	jmp	0x4c24	; 0x4c24 <__vector_36>
      94:	0c 94 64 26 	jmp	0x4cc8	; 0x4cc8 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b0 2a 	jmp	0x5560	; 0x5560 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <__vector_51>
      d0:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 3e 27 	jmp	0x4e7c	; 0x4e7c <__vector_54>
      dc:	0c 94 90 27 	jmp	0x4f20	; 0x4f20 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	51 19       	sub	r21, r1
      e6:	51 19       	sub	r21, r1
      e8:	51 19       	sub	r21, r1
      ea:	88 19       	sub	r24, r8
      ec:	90 19       	sub	r25, r0
      ee:	a5 19       	sub	r26, r5
      f0:	51 19       	sub	r21, r1
      f2:	51 19       	sub	r21, r1
      f4:	88 19       	sub	r24, r8
      f6:	90 19       	sub	r25, r0
      f8:	d2 2a       	or	r13, r18
      fa:	42 2b       	or	r20, r18
      fc:	42 2b       	or	r20, r18
      fe:	42 2b       	or	r20, r18
     100:	42 2b       	or	r20, r18
     102:	42 2b       	or	r20, r18
     104:	42 2b       	or	r20, r18
     106:	42 2b       	or	r20, r18
     108:	d2 2a       	or	r13, r18
     10a:	42 2b       	or	r20, r18
     10c:	42 2b       	or	r20, r18
     10e:	42 2b       	or	r20, r18
     110:	42 2b       	or	r20, r18
     112:	42 2b       	or	r20, r18
     114:	42 2b       	or	r20, r18
     116:	42 2b       	or	r20, r18
     118:	d4 2a       	or	r13, r20
     11a:	42 2b       	or	r20, r18
     11c:	42 2b       	or	r20, r18
     11e:	42 2b       	or	r20, r18
     120:	42 2b       	or	r20, r18
     122:	42 2b       	or	r20, r18
     124:	42 2b       	or	r20, r18
     126:	42 2b       	or	r20, r18
     128:	42 2b       	or	r20, r18
     12a:	42 2b       	or	r20, r18
     12c:	42 2b       	or	r20, r18
     12e:	42 2b       	or	r20, r18
     130:	42 2b       	or	r20, r18
     132:	42 2b       	or	r20, r18
     134:	42 2b       	or	r20, r18
     136:	42 2b       	or	r20, r18
     138:	d4 2a       	or	r13, r20
     13a:	42 2b       	or	r20, r18
     13c:	42 2b       	or	r20, r18
     13e:	42 2b       	or	r20, r18
     140:	42 2b       	or	r20, r18
     142:	42 2b       	or	r20, r18
     144:	42 2b       	or	r20, r18
     146:	42 2b       	or	r20, r18
     148:	42 2b       	or	r20, r18
     14a:	42 2b       	or	r20, r18
     14c:	42 2b       	or	r20, r18
     14e:	42 2b       	or	r20, r18
     150:	42 2b       	or	r20, r18
     152:	42 2b       	or	r20, r18
     154:	42 2b       	or	r20, r18
     156:	42 2b       	or	r20, r18
     158:	3e 2b       	or	r19, r30
     15a:	42 2b       	or	r20, r18
     15c:	42 2b       	or	r20, r18
     15e:	42 2b       	or	r20, r18
     160:	42 2b       	or	r20, r18
     162:	42 2b       	or	r20, r18
     164:	42 2b       	or	r20, r18
     166:	42 2b       	or	r20, r18
     168:	09 2b       	or	r16, r25
     16a:	42 2b       	or	r20, r18
     16c:	42 2b       	or	r20, r18
     16e:	42 2b       	or	r20, r18
     170:	42 2b       	or	r20, r18
     172:	42 2b       	or	r20, r18
     174:	42 2b       	or	r20, r18
     176:	42 2b       	or	r20, r18
     178:	42 2b       	or	r20, r18
     17a:	42 2b       	or	r20, r18
     17c:	42 2b       	or	r20, r18
     17e:	42 2b       	or	r20, r18
     180:	42 2b       	or	r20, r18
     182:	42 2b       	or	r20, r18
     184:	42 2b       	or	r20, r18
     186:	42 2b       	or	r20, r18
     188:	fd 2a       	or	r15, r29
     18a:	42 2b       	or	r20, r18
     18c:	42 2b       	or	r20, r18
     18e:	42 2b       	or	r20, r18
     190:	42 2b       	or	r20, r18
     192:	42 2b       	or	r20, r18
     194:	42 2b       	or	r20, r18
     196:	42 2b       	or	r20, r18
     198:	21 2b       	or	r18, r17

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <prvCheckTasksWaitingTermination>
     19e:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	0d d3       	rcall	.+1562   	; 0x7c2 <vPortYield>
     1a8:	0e 94 ce 19 	call	0x339c	; 0x339c <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 c3 18 	call	0x3186	; 0x3186 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 1a 19 	call	0x3234	; 0x3234 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ea e6       	ldi	r30, 0x6A	; 106
     1e4:	f4 e6       	ldi	r31, 0x64	; 100
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a8 3d       	cpi	r26, 0xD8	; 216
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	29 e1       	ldi	r18, 0x19	; 25
     1f8:	a8 ed       	ldi	r26, 0xD8	; 216
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 36       	cpi	r26, 0x6F	; 111
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <main>
     20a:	0c 94 33 32 	jmp	0x6466	; 0x6466 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <initializeSharedDataQueue>:
SharedData receiveSharedData;
SharedData sharedData;

void initializeSharedDataQueue()
{
	xQueueShared = xQueueCreate(5, sizeof(SharedData));
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	66 e0       	ldi	r22, 0x06	; 6
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	ca d4       	rcall	.+2452   	; 0xbac <xQueueGenericCreate>
     218:	90 93 f0 18 	sts	0x18F0, r25	; 0x8018f0 <xQueueShared+0x1>
     21c:	80 93 ef 18 	sts	0x18EF, r24	; 0x8018ef <xQueueShared>
     220:	08 95       	ret

00000222 <enqueueSharedData>:
}

void enqueueSharedData()
{
     222:	af 92       	push	r10
     224:	bf 92       	push	r11
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
	int counter = 0;
	bool flag = false;
	
	uint16_t co2 = 0;
	int16_t temp = 0;
	uint16_t hum = 0;
     236:	e1 2c       	mov	r14, r1
     238:	f1 2c       	mov	r15, r1
	TickType_t xDelay = 25/portTICK_PERIOD_MS;
	int counter = 0;
	bool flag = false;
	
	uint16_t co2 = 0;
	int16_t temp = 0;
     23a:	c1 2c       	mov	r12, r1
     23c:	d1 2c       	mov	r13, r1
{
	TickType_t xDelay = 25/portTICK_PERIOD_MS;
	int counter = 0;
	bool flag = false;
	
	uint16_t co2 = 0;
     23e:	a1 2c       	mov	r10, r1
     240:	b1 2c       	mov	r11, r1

void enqueueSharedData()
{
	TickType_t xDelay = 25/portTICK_PERIOD_MS;
	int counter = 0;
	bool flag = false;
     242:	10 e0       	ldi	r17, 0x00	; 0
}

void enqueueSharedData()
{
	TickType_t xDelay = 25/portTICK_PERIOD_MS;
	int counter = 0;
     244:	c0 e0       	ldi	r28, 0x00	; 0
     246:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t hum = 0;
	
	int co2res = 0;
	int tempres = 0;
	int humres = 0;
	while (counter < 10) {
     248:	2b c0       	rjmp	.+86     	; 0x2a0 <enqueueSharedData+0x7e>
		int dequeuemeasure;
		
		dequeuemeasure = dequeueCO2Measure();
     24a:	0e 94 3f 1a 	call	0x347e	; 0x347e <dequeueCO2Measure>
		if (dequeuemeasure == 0)
     24e:	00 97       	sbiw	r24, 0x00	; 0
     250:	49 f0       	breq	.+18     	; 0x264 <enqueueSharedData+0x42>
		{
			flag = true;
		}
		else {
			co2 += dequeuemeasure;
     252:	a8 0e       	add	r10, r24
     254:	b9 1e       	adc	r11, r25
			vTaskDelay(xDelay);
     256:	61 e0       	ldi	r22, 0x01	; 1
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskDelay>
     262:	01 c0       	rjmp	.+2      	; 0x266 <enqueueSharedData+0x44>
		int dequeuemeasure;
		
		dequeuemeasure = dequeueCO2Measure();
		if (dequeuemeasure == 0)
		{
			flag = true;
     264:	11 e0       	ldi	r17, 0x01	; 1
		else {
			co2 += dequeuemeasure;
			vTaskDelay(xDelay);
		}
		
		dequeuemeasure = dequeueTempMeasure();
     266:	0e 94 45 1b 	call	0x368a	; 0x368a <dequeueTempMeasure>
		if (dequeuemeasure == 0)
     26a:	00 97       	sbiw	r24, 0x00	; 0
     26c:	49 f0       	breq	.+18     	; 0x280 <enqueueSharedData+0x5e>
		{
			flag = true;
		}
		else {
		temp += dequeuemeasure;
     26e:	c8 0e       	add	r12, r24
     270:	d9 1e       	adc	r13, r25
		vTaskDelay(xDelay);
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskDelay>
     27e:	01 c0       	rjmp	.+2      	; 0x282 <enqueueSharedData+0x60>
		}
		
		dequeuemeasure = dequeueTempMeasure();
		if (dequeuemeasure == 0)
		{
			flag = true;
     280:	11 e0       	ldi	r17, 0x01	; 1
		else {
		temp += dequeuemeasure;
		vTaskDelay(xDelay);
		}
		
		dequeuemeasure = dequeueHumidityMeasure();
     282:	0e 94 76 1b 	call	0x36ec	; 0x36ec <dequeueHumidityMeasure>
		if (dequeuemeasure == 0)
     286:	00 97       	sbiw	r24, 0x00	; 0
     288:	49 f0       	breq	.+18     	; 0x29c <enqueueSharedData+0x7a>
		{
			flag = true;
		}
		else {
		hum += dequeuemeasure;
     28a:	e8 0e       	add	r14, r24
     28c:	f9 1e       	adc	r15, r25
		vTaskDelay(xDelay);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskDelay>
     29a:	01 c0       	rjmp	.+2      	; 0x29e <enqueueSharedData+0x7c>
		}
		
		dequeuemeasure = dequeueHumidityMeasure();
		if (dequeuemeasure == 0)
		{
			flag = true;
     29c:	11 e0       	ldi	r17, 0x01	; 1
		}
		else {
		hum += dequeuemeasure;
		vTaskDelay(xDelay);
		}
		counter++;
     29e:	21 96       	adiw	r28, 0x01	; 1
	uint16_t hum = 0;
	
	int co2res = 0;
	int tempres = 0;
	int humres = 0;
	while (counter < 10) {
     2a0:	ca 30       	cpi	r28, 0x0A	; 10
     2a2:	d1 05       	cpc	r29, r1
     2a4:	94 f2       	brlt	.-92     	; 0x24a <enqueueSharedData+0x28>
		counter++;
	}
	
	SharedData_t shared = &sharedData;
		
	if (flag)
     2a6:	11 23       	and	r17, r17
     2a8:	49 f0       	breq	.+18     	; 0x2bc <enqueueSharedData+0x9a>
	{
		shared->co2 = 0;
     2aa:	e9 ee       	ldi	r30, 0xE9	; 233
     2ac:	f8 e1       	ldi	r31, 0x18	; 24
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	10 82       	st	Z, r1
		shared->temperature = 0;
     2b2:	13 82       	std	Z+3, r1	; 0x03
     2b4:	12 82       	std	Z+2, r1	; 0x02
		shared->humidity = 0;
     2b6:	15 82       	std	Z+5, r1	; 0x05
     2b8:	14 82       	std	Z+4, r1	; 0x04
     2ba:	17 c0       	rjmp	.+46     	; 0x2ea <enqueueSharedData+0xc8>
	}
	else {
		// Average calc of co2
		co2res = (co2 / (counter + 1));
     2bc:	21 96       	adiw	r28, 0x01	; 1
     2be:	c5 01       	movw	r24, r10
     2c0:	be 01       	movw	r22, r28
     2c2:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <__udivmodhi4>
     2c6:	5b 01       	movw	r10, r22
		co2 = (uint16_t) co2res;
		
		// Average calc of temperature
		tempres = (temp / (counter + 1));
     2c8:	c6 01       	movw	r24, r12
     2ca:	be 01       	movw	r22, r28
     2cc:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <__divmodhi4>
     2d0:	9b 01       	movw	r18, r22
		temp = (int16_t) tempres;
		
		// Average calc of humidity
		humres = (hum / (counter + 1));
     2d2:	c7 01       	movw	r24, r14
     2d4:	be 01       	movw	r22, r28
     2d6:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <__udivmodhi4>
		hum = (uint16_t) humres;

		shared->co2 = co2;
     2da:	e9 ee       	ldi	r30, 0xE9	; 233
     2dc:	f8 e1       	ldi	r31, 0x18	; 24
     2de:	b1 82       	std	Z+1, r11	; 0x01
     2e0:	a0 82       	st	Z, r10
		shared->temperature = temp;
     2e2:	33 83       	std	Z+3, r19	; 0x03
     2e4:	22 83       	std	Z+2, r18	; 0x02
		shared->humidity = hum;
     2e6:	75 83       	std	Z+5, r23	; 0x05
     2e8:	64 83       	std	Z+4, r22	; 0x04
	}

	printf("ENQUEUE: humidity: %d, co2: %d, Temp: %d \n", shared->humidity, shared->co2, shared->temperature);
     2ea:	e9 ee       	ldi	r30, 0xE9	; 233
     2ec:	f8 e1       	ldi	r31, 0x18	; 24
     2ee:	83 81       	ldd	r24, Z+3	; 0x03
     2f0:	8f 93       	push	r24
     2f2:	82 81       	ldd	r24, Z+2	; 0x02
     2f4:	8f 93       	push	r24
     2f6:	81 81       	ldd	r24, Z+1	; 0x01
     2f8:	8f 93       	push	r24
     2fa:	80 81       	ld	r24, Z
     2fc:	8f 93       	push	r24
     2fe:	85 81       	ldd	r24, Z+5	; 0x05
     300:	8f 93       	push	r24
     302:	84 81       	ldd	r24, Z+4	; 0x04
     304:	8f 93       	push	r24
     306:	8f e6       	ldi	r24, 0x6F	; 111
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	9f 93       	push	r25
     30c:	8f 93       	push	r24
     30e:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>

	xQueueSend(xQueueShared, (void*)&sharedData, portMAX_DELAY);
     312:	00 e0       	ldi	r16, 0x00	; 0
     314:	2f ef       	ldi	r18, 0xFF	; 255
     316:	3f ef       	ldi	r19, 0xFF	; 255
     318:	a9 01       	movw	r20, r18
     31a:	69 ee       	ldi	r22, 0xE9	; 233
     31c:	78 e1       	ldi	r23, 0x18	; 24
     31e:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <xQueueShared>
     322:	90 91 f0 18 	lds	r25, 0x18F0	; 0x8018f0 <xQueueShared+0x1>
     326:	65 d4       	rcall	.+2250   	; 0xbf2 <xQueueGenericSend>

}
     328:	8d b7       	in	r24, 0x3d	; 61
     32a:	9e b7       	in	r25, 0x3e	; 62
     32c:	08 96       	adiw	r24, 0x08	; 8
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	9e bf       	out	0x3e, r25	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	8d bf       	out	0x3d, r24	; 61
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	bf 90       	pop	r11
     34a:	af 90       	pop	r10
     34c:	08 95       	ret

0000034e <dequeueSharedData>:

SharedData_t dequeueSharedData() {
	SharedData_t data = &receiveSharedData;
	xQueueReceive(xQueueShared, &receiveSharedData, (TickType_t) 10);
     34e:	2a e0       	ldi	r18, 0x0A	; 10
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	61 ef       	ldi	r22, 0xF1	; 241
     358:	78 e1       	ldi	r23, 0x18	; 24
     35a:	80 91 ef 18 	lds	r24, 0x18EF	; 0x8018ef <xQueueShared>
     35e:	90 91 f0 18 	lds	r25, 0x18F0	; 0x8018f0 <xQueueShared+0x1>
     362:	14 d5       	rcall	.+2600   	; 0xd8c <xQueueReceive>
	return data;
}
     364:	81 ef       	ldi	r24, 0xF1	; 241
     366:	98 e1       	ldi	r25, 0x18	; 24
     368:	08 95       	ret

0000036a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     36a:	e4 ee       	ldi	r30, 0xE4	; 228
     36c:	f8 e0       	ldi	r31, 0x08	; 8
     36e:	a8 ee       	ldi	r26, 0xE8	; 232
     370:	b8 e0       	ldi	r27, 0x08	; 8
     372:	b1 83       	std	Z+1, r27	; 0x01
     374:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     376:	13 82       	std	Z+3, r1	; 0x03
     378:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     37a:	e0 e9       	ldi	r30, 0x90	; 144
     37c:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     37e:	f0 93 e3 08 	sts	0x08E3, r31	; 0x8008e3 <pxEnd+0x1>
     382:	e0 93 e2 08 	sts	0x08E2, r30	; 0x8008e2 <pxEnd>
    pxEnd->xBlockSize = 0;
     386:	13 82       	std	Z+3, r1	; 0x03
     388:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     38a:	11 82       	std	Z+1, r1	; 0x01
     38c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     38e:	88 ea       	ldi	r24, 0xA8	; 168
     390:	9d e0       	ldi	r25, 0x0D	; 13
     392:	13 96       	adiw	r26, 0x03	; 3
     394:	9c 93       	st	X, r25
     396:	8e 93       	st	-X, r24
     398:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     39a:	ed 93       	st	X+, r30
     39c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     39e:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <xMinimumEverFreeBytesRemaining+0x1>
     3a2:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     3a6:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <xFreeBytesRemaining+0x1>
     3aa:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e8       	ldi	r25, 0x80	; 128
     3b2:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <__data_end+0x1>
     3b6:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <__data_end>
     3ba:	08 95       	ret

000003bc <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     3c2:	a4 ee       	ldi	r26, 0xE4	; 228
     3c4:	b8 e0       	ldi	r27, 0x08	; 8
     3c6:	01 c0       	rjmp	.+2      	; 0x3ca <prvInsertBlockIntoFreeList+0xe>
     3c8:	df 01       	movw	r26, r30
     3ca:	ed 91       	ld	r30, X+
     3cc:	fc 91       	ld	r31, X
     3ce:	11 97       	sbiw	r26, 0x01	; 1
     3d0:	ec 17       	cp	r30, r28
     3d2:	fd 07       	cpc	r31, r29
     3d4:	c8 f3       	brcs	.-14     	; 0x3c8 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     3d6:	12 96       	adiw	r26, 0x02	; 2
     3d8:	8d 91       	ld	r24, X+
     3da:	9c 91       	ld	r25, X
     3dc:	13 97       	sbiw	r26, 0x03	; 3
     3de:	9d 01       	movw	r18, r26
     3e0:	28 0f       	add	r18, r24
     3e2:	39 1f       	adc	r19, r25
     3e4:	c2 17       	cp	r28, r18
     3e6:	d3 07       	cpc	r29, r19
     3e8:	49 f4       	brne	.+18     	; 0x3fc <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     3ea:	2a 81       	ldd	r18, Y+2	; 0x02
     3ec:	3b 81       	ldd	r19, Y+3	; 0x03
     3ee:	82 0f       	add	r24, r18
     3f0:	93 1f       	adc	r25, r19
     3f2:	13 96       	adiw	r26, 0x03	; 3
     3f4:	9c 93       	st	X, r25
     3f6:	8e 93       	st	-X, r24
     3f8:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     3fa:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     3fc:	8a 81       	ldd	r24, Y+2	; 0x02
     3fe:	9b 81       	ldd	r25, Y+3	; 0x03
     400:	9e 01       	movw	r18, r28
     402:	28 0f       	add	r18, r24
     404:	39 1f       	adc	r19, r25
     406:	e2 17       	cp	r30, r18
     408:	f3 07       	cpc	r31, r19
     40a:	c1 f4       	brne	.+48     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     40c:	20 91 e2 08 	lds	r18, 0x08E2	; 0x8008e2 <pxEnd>
     410:	30 91 e3 08 	lds	r19, 0x08E3	; 0x8008e3 <pxEnd+0x1>
     414:	e2 17       	cp	r30, r18
     416:	f3 07       	cpc	r31, r19
     418:	71 f0       	breq	.+28     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     41a:	22 81       	ldd	r18, Z+2	; 0x02
     41c:	33 81       	ldd	r19, Z+3	; 0x03
     41e:	82 0f       	add	r24, r18
     420:	93 1f       	adc	r25, r19
     422:	9b 83       	std	Y+3, r25	; 0x03
     424:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     426:	ed 91       	ld	r30, X+
     428:	fc 91       	ld	r31, X
     42a:	11 97       	sbiw	r26, 0x01	; 1
     42c:	80 81       	ld	r24, Z
     42e:	91 81       	ldd	r25, Z+1	; 0x01
     430:	99 83       	std	Y+1, r25	; 0x01
     432:	88 83       	st	Y, r24
     434:	05 c0       	rjmp	.+10     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     436:	39 83       	std	Y+1, r19	; 0x01
     438:	28 83       	st	Y, r18
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     43c:	f9 83       	std	Y+1, r31	; 0x01
     43e:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     440:	ca 17       	cp	r28, r26
     442:	db 07       	cpc	r29, r27
     444:	11 f0       	breq	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     446:	cd 93       	st	X+, r28
     448:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     45e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     462:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <pxEnd>
     466:	90 91 e3 08 	lds	r25, 0x08E3	; 0x8008e3 <pxEnd+0x1>
     46a:	89 2b       	or	r24, r25
     46c:	09 f4       	brne	.+2      	; 0x470 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     46e:	7d df       	rcall	.-262    	; 0x36a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     470:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <__data_end>
     474:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <__data_end+0x1>
     478:	80 23       	and	r24, r16
     47a:	91 23       	and	r25, r17
     47c:	89 2b       	or	r24, r25
     47e:	09 f0       	breq	.+2      	; 0x482 <pvPortMalloc+0x32>
     480:	76 c0       	rjmp	.+236    	; 0x56e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     482:	01 15       	cp	r16, r1
     484:	11 05       	cpc	r17, r1
     486:	49 f0       	breq	.+18     	; 0x49a <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     488:	c8 01       	movw	r24, r16
     48a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     48c:	08 17       	cp	r16, r24
     48e:	19 07       	cpc	r17, r25
     490:	18 f0       	brcs	.+6      	; 0x498 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     492:	00 e0       	ldi	r16, 0x00	; 0
     494:	10 e0       	ldi	r17, 0x00	; 0
     496:	01 c0       	rjmp	.+2      	; 0x49a <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     498:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     49a:	01 15       	cp	r16, r1
     49c:	11 05       	cpc	r17, r1
     49e:	09 f4       	brne	.+2      	; 0x4a2 <pvPortMalloc+0x52>
     4a0:	69 c0       	rjmp	.+210    	; 0x574 <pvPortMalloc+0x124>
     4a2:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <xFreeBytesRemaining>
     4a6:	90 91 e1 08 	lds	r25, 0x08E1	; 0x8008e1 <xFreeBytesRemaining+0x1>
     4aa:	80 17       	cp	r24, r16
     4ac:	91 07       	cpc	r25, r17
     4ae:	08 f4       	brcc	.+2      	; 0x4b2 <pvPortMalloc+0x62>
     4b0:	64 c0       	rjmp	.+200    	; 0x57a <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     4b2:	c0 91 e4 08 	lds	r28, 0x08E4	; 0x8008e4 <xStart>
     4b6:	d0 91 e5 08 	lds	r29, 0x08E5	; 0x8008e5 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     4ba:	e4 ee       	ldi	r30, 0xE4	; 228
     4bc:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     4c0:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     4c2:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4c4:	8a 81       	ldd	r24, Y+2	; 0x02
     4c6:	9b 81       	ldd	r25, Y+3	; 0x03
     4c8:	80 17       	cp	r24, r16
     4ca:	91 07       	cpc	r25, r17
     4cc:	20 f4       	brcc	.+8      	; 0x4d6 <pvPortMalloc+0x86>
     4ce:	88 81       	ld	r24, Y
     4d0:	99 81       	ldd	r25, Y+1	; 0x01
     4d2:	00 97       	sbiw	r24, 0x00	; 0
     4d4:	a9 f7       	brne	.-22     	; 0x4c0 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     4d6:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <pxEnd>
     4da:	90 91 e3 08 	lds	r25, 0x08E3	; 0x8008e3 <pxEnd+0x1>
     4de:	c8 17       	cp	r28, r24
     4e0:	d9 07       	cpc	r29, r25
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <pvPortMalloc+0x96>
     4e4:	4d c0       	rjmp	.+154    	; 0x580 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     4e6:	e0 80       	ld	r14, Z
     4e8:	f1 80       	ldd	r15, Z+1	; 0x01
     4ea:	84 e0       	ldi	r24, 0x04	; 4
     4ec:	e8 0e       	add	r14, r24
     4ee:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     4f0:	88 81       	ld	r24, Y
     4f2:	99 81       	ldd	r25, Y+1	; 0x01
     4f4:	91 83       	std	Z+1, r25	; 0x01
     4f6:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4f8:	2a 81       	ldd	r18, Y+2	; 0x02
     4fa:	3b 81       	ldd	r19, Y+3	; 0x03
     4fc:	20 1b       	sub	r18, r16
     4fe:	31 0b       	sbc	r19, r17
     500:	29 30       	cpi	r18, 0x09	; 9
     502:	31 05       	cpc	r19, r1
     504:	48 f0       	brcs	.+18     	; 0x518 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     506:	ce 01       	movw	r24, r28
     508:	80 0f       	add	r24, r16
     50a:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     50c:	fc 01       	movw	r30, r24
     50e:	33 83       	std	Z+3, r19	; 0x03
     510:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     512:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     514:	0a 83       	std	Y+2, r16	; 0x02
     516:	52 df       	rcall	.-348    	; 0x3bc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     518:	2a 81       	ldd	r18, Y+2	; 0x02
     51a:	3b 81       	ldd	r19, Y+3	; 0x03
     51c:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <xFreeBytesRemaining>
     520:	90 91 e1 08 	lds	r25, 0x08E1	; 0x8008e1 <xFreeBytesRemaining+0x1>
     524:	82 1b       	sub	r24, r18
     526:	93 0b       	sbc	r25, r19
     528:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <xFreeBytesRemaining+0x1>
     52c:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     530:	40 91 de 08 	lds	r20, 0x08DE	; 0x8008de <xMinimumEverFreeBytesRemaining>
     534:	50 91 df 08 	lds	r21, 0x08DF	; 0x8008df <xMinimumEverFreeBytesRemaining+0x1>
     538:	84 17       	cp	r24, r20
     53a:	95 07       	cpc	r25, r21
     53c:	20 f4       	brcc	.+8      	; 0x546 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     53e:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <xMinimumEverFreeBytesRemaining+0x1>
     542:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     546:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <__data_end>
     54a:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <__data_end+0x1>
     54e:	28 2b       	or	r18, r24
     550:	39 2b       	or	r19, r25
     552:	3b 83       	std	Y+3, r19	; 0x03
     554:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     556:	19 82       	std	Y+1, r1	; 0x01
     558:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     55a:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <xNumberOfSuccessfulAllocations>
     55e:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <xNumberOfSuccessfulAllocations+0x1>
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	90 93 dd 08 	sts	0x08DD, r25	; 0x8008dd <xNumberOfSuccessfulAllocations+0x1>
     568:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <xNumberOfSuccessfulAllocations>
     56c:	0b c0       	rjmp	.+22     	; 0x584 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     56e:	e1 2c       	mov	r14, r1
     570:	f1 2c       	mov	r15, r1
     572:	08 c0       	rjmp	.+16     	; 0x584 <pvPortMalloc+0x134>
     574:	e1 2c       	mov	r14, r1
     576:	f1 2c       	mov	r15, r1
     578:	05 c0       	rjmp	.+10     	; 0x584 <pvPortMalloc+0x134>
     57a:	e1 2c       	mov	r14, r1
     57c:	f1 2c       	mov	r15, r1
     57e:	02 c0       	rjmp	.+4      	; 0x584 <pvPortMalloc+0x134>
     580:	e1 2c       	mov	r14, r1
     582:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     584:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     588:	e1 14       	cp	r14, r1
     58a:	f1 04       	cpc	r15, r1
     58c:	11 f4       	brne	.+4      	; 0x592 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     58e:	0e 94 da 19 	call	0x33b4	; 0x33b4 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     592:	c7 01       	movw	r24, r14
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	08 95       	ret

000005a2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     5aa:	00 97       	sbiw	r24, 0x00	; 0
     5ac:	91 f1       	breq	.+100    	; 0x612 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     5ae:	ec 01       	movw	r28, r24
     5b0:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     5b2:	4a 81       	ldd	r20, Y+2	; 0x02
     5b4:	5b 81       	ldd	r21, Y+3	; 0x03
     5b6:	20 91 d8 08 	lds	r18, 0x08D8	; 0x8008d8 <__data_end>
     5ba:	30 91 d9 08 	lds	r19, 0x08D9	; 0x8008d9 <__data_end+0x1>
     5be:	ba 01       	movw	r22, r20
     5c0:	62 23       	and	r22, r18
     5c2:	73 23       	and	r23, r19
     5c4:	67 2b       	or	r22, r23
     5c6:	29 f1       	breq	.+74     	; 0x612 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     5c8:	68 81       	ld	r22, Y
     5ca:	79 81       	ldd	r23, Y+1	; 0x01
     5cc:	67 2b       	or	r22, r23
     5ce:	09 f5       	brne	.+66     	; 0x612 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     5d0:	20 95       	com	r18
     5d2:	30 95       	com	r19
     5d4:	24 23       	and	r18, r20
     5d6:	35 23       	and	r19, r21
     5d8:	3b 83       	std	Y+3, r19	; 0x03
     5da:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     5dc:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     5e0:	8a 81       	ldd	r24, Y+2	; 0x02
     5e2:	9b 81       	ldd	r25, Y+3	; 0x03
     5e4:	20 91 e0 08 	lds	r18, 0x08E0	; 0x8008e0 <xFreeBytesRemaining>
     5e8:	30 91 e1 08 	lds	r19, 0x08E1	; 0x8008e1 <xFreeBytesRemaining+0x1>
     5ec:	82 0f       	add	r24, r18
     5ee:	93 1f       	adc	r25, r19
     5f0:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <xFreeBytesRemaining+0x1>
     5f4:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5f8:	ce 01       	movw	r24, r28
     5fa:	e0 de       	rcall	.-576    	; 0x3bc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     5fc:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <xNumberOfSuccessfulFrees>
     600:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <xNumberOfSuccessfulFrees+0x1>
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <xNumberOfSuccessfulFrees+0x1>
     60a:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     60e:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	08 95       	ret

0000061c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    return xFreeBytesRemaining;
}
     61c:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <xFreeBytesRemaining>
     620:	90 91 e1 08 	lds	r25, 0x08E1	; 0x8008e1 <xFreeBytesRemaining+0x1>
     624:	08 95       	ret

00000626 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     626:	fc 01       	movw	r30, r24
     628:	03 96       	adiw	r24, 0x03	; 3
     62a:	92 83       	std	Z+2, r25	; 0x02
     62c:	81 83       	std	Z+1, r24	; 0x01
     62e:	4f ef       	ldi	r20, 0xFF	; 255
     630:	5f ef       	ldi	r21, 0xFF	; 255
     632:	ba 01       	movw	r22, r20
     634:	43 83       	std	Z+3, r20	; 0x03
     636:	54 83       	std	Z+4, r21	; 0x04
     638:	65 83       	std	Z+5, r22	; 0x05
     63a:	76 83       	std	Z+6, r23	; 0x06
     63c:	90 87       	std	Z+8, r25	; 0x08
     63e:	87 83       	std	Z+7, r24	; 0x07
     640:	92 87       	std	Z+10, r25	; 0x0a
     642:	81 87       	std	Z+9, r24	; 0x09
     644:	10 82       	st	Z, r1
     646:	08 95       	ret

00000648 <vListInitialiseItem>:
     648:	fc 01       	movw	r30, r24
     64a:	13 86       	std	Z+11, r1	; 0x0b
     64c:	12 86       	std	Z+10, r1	; 0x0a
     64e:	08 95       	ret

00000650 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     65a:	08 81       	ld	r16, Y
     65c:	19 81       	ldd	r17, Y+1	; 0x01
     65e:	2a 81       	ldd	r18, Y+2	; 0x02
     660:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     662:	0f 3f       	cpi	r16, 0xFF	; 255
     664:	4f ef       	ldi	r20, 0xFF	; 255
     666:	14 07       	cpc	r17, r20
     668:	24 07       	cpc	r18, r20
     66a:	34 07       	cpc	r19, r20
     66c:	21 f4       	brne	.+8      	; 0x676 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     66e:	fc 01       	movw	r30, r24
     670:	a1 85       	ldd	r26, Z+9	; 0x09
     672:	b2 85       	ldd	r27, Z+10	; 0x0a
     674:	11 c0       	rjmp	.+34     	; 0x698 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     676:	dc 01       	movw	r26, r24
     678:	13 96       	adiw	r26, 0x03	; 3
     67a:	01 c0       	rjmp	.+2      	; 0x67e <vListInsert+0x2e>
     67c:	df 01       	movw	r26, r30
     67e:	14 96       	adiw	r26, 0x04	; 4
     680:	ed 91       	ld	r30, X+
     682:	fc 91       	ld	r31, X
     684:	15 97       	sbiw	r26, 0x05	; 5
     686:	40 81       	ld	r20, Z
     688:	51 81       	ldd	r21, Z+1	; 0x01
     68a:	62 81       	ldd	r22, Z+2	; 0x02
     68c:	73 81       	ldd	r23, Z+3	; 0x03
     68e:	04 17       	cp	r16, r20
     690:	15 07       	cpc	r17, r21
     692:	26 07       	cpc	r18, r22
     694:	37 07       	cpc	r19, r23
     696:	90 f7       	brcc	.-28     	; 0x67c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     698:	14 96       	adiw	r26, 0x04	; 4
     69a:	ed 91       	ld	r30, X+
     69c:	fc 91       	ld	r31, X
     69e:	15 97       	sbiw	r26, 0x05	; 5
     6a0:	fd 83       	std	Y+5, r31	; 0x05
     6a2:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     6a4:	d7 83       	std	Z+7, r29	; 0x07
     6a6:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     6a8:	bf 83       	std	Y+7, r27	; 0x07
     6aa:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     6ac:	15 96       	adiw	r26, 0x05	; 5
     6ae:	dc 93       	st	X, r29
     6b0:	ce 93       	st	-X, r28
     6b2:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     6b4:	9b 87       	std	Y+11, r25	; 0x0b
     6b6:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 81       	ld	r18, Z
     6bc:	2f 5f       	subi	r18, 0xFF	; 255
     6be:	20 83       	st	Z, r18
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     6d0:	a2 85       	ldd	r26, Z+10	; 0x0a
     6d2:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6d4:	c4 81       	ldd	r28, Z+4	; 0x04
     6d6:	d5 81       	ldd	r29, Z+5	; 0x05
     6d8:	86 81       	ldd	r24, Z+6	; 0x06
     6da:	97 81       	ldd	r25, Z+7	; 0x07
     6dc:	9f 83       	std	Y+7, r25	; 0x07
     6de:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6e0:	c6 81       	ldd	r28, Z+6	; 0x06
     6e2:	d7 81       	ldd	r29, Z+7	; 0x07
     6e4:	84 81       	ldd	r24, Z+4	; 0x04
     6e6:	95 81       	ldd	r25, Z+5	; 0x05
     6e8:	9d 83       	std	Y+5, r25	; 0x05
     6ea:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     6ec:	11 96       	adiw	r26, 0x01	; 1
     6ee:	8d 91       	ld	r24, X+
     6f0:	9c 91       	ld	r25, X
     6f2:	12 97       	sbiw	r26, 0x02	; 2
     6f4:	e8 17       	cp	r30, r24
     6f6:	f9 07       	cpc	r31, r25
     6f8:	31 f4       	brne	.+12     	; 0x706 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6fa:	86 81       	ldd	r24, Z+6	; 0x06
     6fc:	97 81       	ldd	r25, Z+7	; 0x07
     6fe:	12 96       	adiw	r26, 0x02	; 2
     700:	9c 93       	st	X, r25
     702:	8e 93       	st	-X, r24
     704:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     706:	13 86       	std	Z+11, r1	; 0x0b
     708:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     70a:	8c 91       	ld	r24, X
     70c:	81 50       	subi	r24, 0x01	; 1
     70e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     710:	8c 91       	ld	r24, X
}
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	08 95       	ret

00000718 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     718:	a8 95       	wdr
     71a:	90 ec       	ldi	r25, 0xC0	; 192
     71c:	88 e1       	ldi	r24, 0x18	; 24
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	a8 95       	wdr
     724:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     728:	0f be       	out	0x3f, r0	; 63
     72a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     72e:	08 95       	ret

00000730 <pxPortInitialiseStack>:
     730:	fc 01       	movw	r30, r24
     732:	60 83       	st	Z, r22
     734:	31 97       	sbiw	r30, 0x01	; 1
     736:	70 83       	st	Z, r23
     738:	31 97       	sbiw	r30, 0x01	; 1
     73a:	10 82       	st	Z, r1
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	10 82       	st	Z, r1
     740:	31 97       	sbiw	r30, 0x01	; 1
     742:	20 e8       	ldi	r18, 0x80	; 128
     744:	20 83       	st	Z, r18
     746:	31 97       	sbiw	r30, 0x01	; 1
     748:	10 82       	st	Z, r1
     74a:	31 97       	sbiw	r30, 0x01	; 1
     74c:	10 82       	st	Z, r1
     74e:	31 97       	sbiw	r30, 0x01	; 1
     750:	10 82       	st	Z, r1
     752:	77 97       	sbiw	r30, 0x17	; 23
     754:	40 83       	st	Z, r20
     756:	31 97       	sbiw	r30, 0x01	; 1
     758:	50 83       	st	Z, r21
     75a:	86 97       	sbiw	r24, 0x26	; 38
     75c:	08 95       	ret

0000075e <xPortStartScheduler>:
     75e:	dc df       	rcall	.-72     	; 0x718 <prvSetupTimerInterrupt>
     760:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
     764:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
     768:	cd 91       	ld	r28, X+
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	dd 91       	ld	r29, X+
     76e:	de bf       	out	0x3e, r29	; 62
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	bf 91       	pop	r27
     77a:	af 91       	pop	r26
     77c:	9f 91       	pop	r25
     77e:	8f 91       	pop	r24
     780:	7f 91       	pop	r23
     782:	6f 91       	pop	r22
     784:	5f 91       	pop	r21
     786:	4f 91       	pop	r20
     788:	3f 91       	pop	r19
     78a:	2f 91       	pop	r18
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	af 90       	pop	r10
     79c:	9f 90       	pop	r9
     79e:	8f 90       	pop	r8
     7a0:	7f 90       	pop	r7
     7a2:	6f 90       	pop	r6
     7a4:	5f 90       	pop	r5
     7a6:	4f 90       	pop	r4
     7a8:	3f 90       	pop	r3
     7aa:	2f 90       	pop	r2
     7ac:	1f 90       	pop	r1
     7ae:	0f 90       	pop	r0
     7b0:	0c be       	out	0x3c, r0	; 60
     7b2:	0f 90       	pop	r0
     7b4:	0b be       	out	0x3b, r0	; 59
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	0f 90       	pop	r0
     7bc:	08 95       	ret
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	08 95       	ret

000007c2 <vPortYield>:
     7c2:	0f 92       	push	r0
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	0f 92       	push	r0
     7ca:	0b b6       	in	r0, 0x3b	; 59
     7cc:	0f 92       	push	r0
     7ce:	0c b6       	in	r0, 0x3c	; 60
     7d0:	0f 92       	push	r0
     7d2:	1f 92       	push	r1
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 92       	push	r2
     7d8:	3f 92       	push	r3
     7da:	4f 92       	push	r4
     7dc:	5f 92       	push	r5
     7de:	6f 92       	push	r6
     7e0:	7f 92       	push	r7
     7e2:	8f 92       	push	r8
     7e4:	9f 92       	push	r9
     7e6:	af 92       	push	r10
     7e8:	bf 92       	push	r11
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	4f 93       	push	r20
     7fc:	5f 93       	push	r21
     7fe:	6f 93       	push	r22
     800:	7f 93       	push	r23
     802:	8f 93       	push	r24
     804:	9f 93       	push	r25
     806:	af 93       	push	r26
     808:	bf 93       	push	r27
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ef 93       	push	r30
     810:	ff 93       	push	r31
     812:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
     816:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
     81a:	0d b6       	in	r0, 0x3d	; 61
     81c:	0d 92       	st	X+, r0
     81e:	0e b6       	in	r0, 0x3e	; 62
     820:	0d 92       	st	X+, r0
     822:	0e 94 88 10 	call	0x2110	; 0x2110 <vTaskSwitchContext>
     826:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
     82a:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
     82e:	cd 91       	ld	r28, X+
     830:	cd bf       	out	0x3d, r28	; 61
     832:	dd 91       	ld	r29, X+
     834:	de bf       	out	0x3e, r29	; 62
     836:	ff 91       	pop	r31
     838:	ef 91       	pop	r30
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	bf 91       	pop	r27
     840:	af 91       	pop	r26
     842:	9f 91       	pop	r25
     844:	8f 91       	pop	r24
     846:	7f 91       	pop	r23
     848:	6f 91       	pop	r22
     84a:	5f 91       	pop	r21
     84c:	4f 91       	pop	r20
     84e:	3f 91       	pop	r19
     850:	2f 91       	pop	r18
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	bf 90       	pop	r11
     860:	af 90       	pop	r10
     862:	9f 90       	pop	r9
     864:	8f 90       	pop	r8
     866:	7f 90       	pop	r7
     868:	6f 90       	pop	r6
     86a:	5f 90       	pop	r5
     86c:	4f 90       	pop	r4
     86e:	3f 90       	pop	r3
     870:	2f 90       	pop	r2
     872:	1f 90       	pop	r1
     874:	0f 90       	pop	r0
     876:	0c be       	out	0x3c, r0	; 60
     878:	0f 90       	pop	r0
     87a:	0b be       	out	0x3b, r0	; 59
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	08 95       	ret

00000884 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	0f 92       	push	r0
     88c:	0b b6       	in	r0, 0x3b	; 59
     88e:	0f 92       	push	r0
     890:	0c b6       	in	r0, 0x3c	; 60
     892:	0f 92       	push	r0
     894:	1f 92       	push	r1
     896:	11 24       	eor	r1, r1
     898:	2f 92       	push	r2
     89a:	3f 92       	push	r3
     89c:	4f 92       	push	r4
     89e:	5f 92       	push	r5
     8a0:	6f 92       	push	r6
     8a2:	7f 92       	push	r7
     8a4:	8f 92       	push	r8
     8a6:	9f 92       	push	r9
     8a8:	af 92       	push	r10
     8aa:	bf 92       	push	r11
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	2f 93       	push	r18
     8ba:	3f 93       	push	r19
     8bc:	4f 93       	push	r20
     8be:	5f 93       	push	r21
     8c0:	6f 93       	push	r22
     8c2:	7f 93       	push	r23
     8c4:	8f 93       	push	r24
     8c6:	9f 93       	push	r25
     8c8:	af 93       	push	r26
     8ca:	bf 93       	push	r27
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
     8d4:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
     8d8:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
     8dc:	0d b6       	in	r0, 0x3d	; 61
     8de:	0d 92       	st	X+, r0
     8e0:	0e b6       	in	r0, 0x3e	; 62
     8e2:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     8e4:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     8e6:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <xTaskIncrementTick>
     8ea:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     8ec:	0e 94 88 10 	call	0x2110	; 0x2110 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     8f0:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
     8f4:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
     8f8:	cd 91       	ld	r28, X+
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	dd 91       	ld	r29, X+
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	bf 91       	pop	r27
     90a:	af 91       	pop	r26
     90c:	9f 91       	pop	r25
     90e:	8f 91       	pop	r24
     910:	7f 91       	pop	r23
     912:	6f 91       	pop	r22
     914:	5f 91       	pop	r21
     916:	4f 91       	pop	r20
     918:	3f 91       	pop	r19
     91a:	2f 91       	pop	r18
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	9f 90       	pop	r9
     92e:	8f 90       	pop	r8
     930:	7f 90       	pop	r7
     932:	6f 90       	pop	r6
     934:	5f 90       	pop	r5
     936:	4f 90       	pop	r4
     938:	3f 90       	pop	r3
     93a:	2f 90       	pop	r2
     93c:	1f 90       	pop	r1
     93e:	0f 90       	pop	r0
     940:	0c be       	out	0x3c, r0	; 60
     942:	0f 90       	pop	r0
     944:	0b be       	out	0x3b, r0	; 59
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     94c:	08 95       	ret

0000094e <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     94e:	9a df       	rcall	.-204    	; 0x884 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     950:	18 95       	reti

00000952 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     952:	dc 01       	movw	r26, r24
     954:	53 96       	adiw	r26, 0x13	; 19
     956:	2c 91       	ld	r18, X
     958:	53 97       	sbiw	r26, 0x13	; 19
     95a:	22 23       	and	r18, r18
     95c:	41 f0       	breq	.+16     	; 0x96e <prvGetDisinheritPriorityAfterTimeout+0x1c>
     95e:	5a 96       	adiw	r26, 0x1a	; 26
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
     964:	5b 97       	sbiw	r26, 0x1b	; 27
     966:	90 81       	ld	r25, Z
     968:	8a e0       	ldi	r24, 0x0A	; 10
     96a:	89 1b       	sub	r24, r25
     96c:	08 95       	ret
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	08 95       	ret

00000972 <prvIsQueueEmpty>:
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	0f 92       	push	r0
     978:	fc 01       	movw	r30, r24
     97a:	86 8d       	ldd	r24, Z+30	; 0x1e
     97c:	81 11       	cpse	r24, r1
     97e:	02 c0       	rjmp	.+4      	; 0x984 <prvIsQueueEmpty+0x12>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	01 c0       	rjmp	.+2      	; 0x986 <prvIsQueueEmpty+0x14>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	0f 90       	pop	r0
     988:	0f be       	out	0x3f, r0	; 63
     98a:	08 95       	ret

0000098c <prvIsQueueFull>:
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	0f 92       	push	r0
     992:	fc 01       	movw	r30, r24
     994:	26 8d       	ldd	r18, Z+30	; 0x1e
     996:	87 8d       	ldd	r24, Z+31	; 0x1f
     998:	28 13       	cpse	r18, r24
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <prvIsQueueFull+0x14>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <prvIsQueueFull+0x16>
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	0f 90       	pop	r0
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	08 95       	ret

000009a8 <prvCopyDataToQueue>:
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
     9b2:	04 2f       	mov	r16, r20
     9b4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     9b6:	48 a1       	ldd	r20, Y+32	; 0x20
     9b8:	41 11       	cpse	r20, r1
     9ba:	0c c0       	rjmp	.+24     	; 0x9d4 <prvCopyDataToQueue+0x2c>
     9bc:	88 81       	ld	r24, Y
     9be:	99 81       	ldd	r25, Y+1	; 0x01
     9c0:	89 2b       	or	r24, r25
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <prvCopyDataToQueue+0x1e>
     9c4:	42 c0       	rjmp	.+132    	; 0xa4a <prvCopyDataToQueue+0xa2>
     9c6:	8c 81       	ldd	r24, Y+4	; 0x04
     9c8:	9d 81       	ldd	r25, Y+5	; 0x05
     9ca:	0e 94 20 13 	call	0x2640	; 0x2640 <xTaskPriorityDisinherit>
     9ce:	1d 82       	std	Y+5, r1	; 0x05
     9d0:	1c 82       	std	Y+4, r1	; 0x04
     9d2:	42 c0       	rjmp	.+132    	; 0xa58 <prvCopyDataToQueue+0xb0>
     9d4:	01 11       	cpse	r16, r1
     9d6:	17 c0       	rjmp	.+46     	; 0xa06 <prvCopyDataToQueue+0x5e>
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	8a 81       	ldd	r24, Y+2	; 0x02
     9dc:	9b 81       	ldd	r25, Y+3	; 0x03
     9de:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <memcpy>
     9e2:	28 a1       	ldd	r18, Y+32	; 0x20
     9e4:	8a 81       	ldd	r24, Y+2	; 0x02
     9e6:	9b 81       	ldd	r25, Y+3	; 0x03
     9e8:	82 0f       	add	r24, r18
     9ea:	91 1d       	adc	r25, r1
     9ec:	9b 83       	std	Y+3, r25	; 0x03
     9ee:	8a 83       	std	Y+2, r24	; 0x02
     9f0:	2c 81       	ldd	r18, Y+4	; 0x04
     9f2:	3d 81       	ldd	r19, Y+5	; 0x05
     9f4:	82 17       	cp	r24, r18
     9f6:	93 07       	cpc	r25, r19
     9f8:	50 f1       	brcs	.+84     	; 0xa4e <prvCopyDataToQueue+0xa6>
     9fa:	88 81       	ld	r24, Y
     9fc:	99 81       	ldd	r25, Y+1	; 0x01
     9fe:	9b 83       	std	Y+3, r25	; 0x03
     a00:	8a 83       	std	Y+2, r24	; 0x02
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	29 c0       	rjmp	.+82     	; 0xa58 <prvCopyDataToQueue+0xb0>
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	8e 81       	ldd	r24, Y+6	; 0x06
     a0a:	9f 81       	ldd	r25, Y+7	; 0x07
     a0c:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <memcpy>
     a10:	88 a1       	ldd	r24, Y+32	; 0x20
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	91 95       	neg	r25
     a16:	81 95       	neg	r24
     a18:	91 09       	sbc	r25, r1
     a1a:	2e 81       	ldd	r18, Y+6	; 0x06
     a1c:	3f 81       	ldd	r19, Y+7	; 0x07
     a1e:	28 0f       	add	r18, r24
     a20:	39 1f       	adc	r19, r25
     a22:	3f 83       	std	Y+7, r19	; 0x07
     a24:	2e 83       	std	Y+6, r18	; 0x06
     a26:	48 81       	ld	r20, Y
     a28:	59 81       	ldd	r21, Y+1	; 0x01
     a2a:	24 17       	cp	r18, r20
     a2c:	35 07       	cpc	r19, r21
     a2e:	30 f4       	brcc	.+12     	; 0xa3c <prvCopyDataToQueue+0x94>
     a30:	2c 81       	ldd	r18, Y+4	; 0x04
     a32:	3d 81       	ldd	r19, Y+5	; 0x05
     a34:	82 0f       	add	r24, r18
     a36:	93 1f       	adc	r25, r19
     a38:	9f 83       	std	Y+7, r25	; 0x07
     a3a:	8e 83       	std	Y+6, r24	; 0x06
     a3c:	02 30       	cpi	r16, 0x02	; 2
     a3e:	49 f4       	brne	.+18     	; 0xa52 <prvCopyDataToQueue+0xaa>
     a40:	11 23       	and	r17, r17
     a42:	49 f0       	breq	.+18     	; 0xa56 <prvCopyDataToQueue+0xae>
     a44:	11 50       	subi	r17, 0x01	; 1
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	07 c0       	rjmp	.+14     	; 0xa58 <prvCopyDataToQueue+0xb0>
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	05 c0       	rjmp	.+10     	; 0xa58 <prvCopyDataToQueue+0xb0>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	03 c0       	rjmp	.+6      	; 0xa58 <prvCopyDataToQueue+0xb0>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	01 c0       	rjmp	.+2      	; 0xa58 <prvCopyDataToQueue+0xb0>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	1f 5f       	subi	r17, 0xFF	; 255
     a5a:	1e 8f       	std	Y+30, r17	; 0x1e
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	08 95       	ret

00000a66 <prvCopyDataFromQueue>:
     a66:	fc 01       	movw	r30, r24
     a68:	40 a1       	ldd	r20, Z+32	; 0x20
     a6a:	44 23       	and	r20, r20
     a6c:	a9 f0       	breq	.+42     	; 0xa98 <prvCopyDataFromQueue+0x32>
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	26 81       	ldd	r18, Z+6	; 0x06
     a72:	37 81       	ldd	r19, Z+7	; 0x07
     a74:	24 0f       	add	r18, r20
     a76:	35 1f       	adc	r19, r21
     a78:	37 83       	std	Z+7, r19	; 0x07
     a7a:	26 83       	std	Z+6, r18	; 0x06
     a7c:	84 81       	ldd	r24, Z+4	; 0x04
     a7e:	95 81       	ldd	r25, Z+5	; 0x05
     a80:	28 17       	cp	r18, r24
     a82:	39 07       	cpc	r19, r25
     a84:	20 f0       	brcs	.+8      	; 0xa8e <prvCopyDataFromQueue+0x28>
     a86:	80 81       	ld	r24, Z
     a88:	91 81       	ldd	r25, Z+1	; 0x01
     a8a:	97 83       	std	Z+7, r25	; 0x07
     a8c:	86 83       	std	Z+6, r24	; 0x06
     a8e:	cb 01       	movw	r24, r22
     a90:	66 81       	ldd	r22, Z+6	; 0x06
     a92:	77 81       	ldd	r23, Z+7	; 0x07
     a94:	0c 94 b6 2e 	jmp	0x5d6c	; 0x5d6c <memcpy>
     a98:	08 95       	ret

00000a9a <prvUnlockQueue>:
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	0f 92       	push	r0
     aa8:	1a a1       	ldd	r17, Y+34	; 0x22
     aaa:	0b c0       	rjmp	.+22     	; 0xac2 <prvUnlockQueue+0x28>
     aac:	8b 89       	ldd	r24, Y+19	; 0x13
     aae:	88 23       	and	r24, r24
     ab0:	51 f0       	breq	.+20     	; 0xac6 <prvUnlockQueue+0x2c>
     ab2:	ce 01       	movw	r24, r28
     ab4:	43 96       	adiw	r24, 0x13	; 19
     ab6:	0e 94 46 11 	call	0x228c	; 0x228c <xTaskRemoveFromEventList>
     aba:	81 11       	cpse	r24, r1
     abc:	0e 94 82 12 	call	0x2504	; 0x2504 <vTaskMissedYield>
     ac0:	11 50       	subi	r17, 0x01	; 1
     ac2:	11 16       	cp	r1, r17
     ac4:	9c f3       	brlt	.-26     	; 0xaac <prvUnlockQueue+0x12>
     ac6:	8f ef       	ldi	r24, 0xFF	; 255
     ac8:	8a a3       	std	Y+34, r24	; 0x22
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	0f 92       	push	r0
     ad4:	19 a1       	ldd	r17, Y+33	; 0x21
     ad6:	0b c0       	rjmp	.+22     	; 0xaee <prvUnlockQueue+0x54>
     ad8:	88 85       	ldd	r24, Y+8	; 0x08
     ada:	88 23       	and	r24, r24
     adc:	51 f0       	breq	.+20     	; 0xaf2 <prvUnlockQueue+0x58>
     ade:	ce 01       	movw	r24, r28
     ae0:	08 96       	adiw	r24, 0x08	; 8
     ae2:	0e 94 46 11 	call	0x228c	; 0x228c <xTaskRemoveFromEventList>
     ae6:	81 11       	cpse	r24, r1
     ae8:	0e 94 82 12 	call	0x2504	; 0x2504 <vTaskMissedYield>
     aec:	11 50       	subi	r17, 0x01	; 1
     aee:	11 16       	cp	r1, r17
     af0:	9c f3       	brlt	.-26     	; 0xad8 <prvUnlockQueue+0x3e>
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	89 a3       	std	Y+33, r24	; 0x21
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	08 95       	ret

00000b02 <xQueueGenericReset>:
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	ec 01       	movw	r28, r24
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	0f 92       	push	r0
     b0e:	e8 81       	ld	r30, Y
     b10:	f9 81       	ldd	r31, Y+1	; 0x01
     b12:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b14:	28 a1       	ldd	r18, Y+32	; 0x20
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	82 9f       	mul	r24, r18
     b1c:	a0 01       	movw	r20, r0
     b1e:	83 9f       	mul	r24, r19
     b20:	50 0d       	add	r21, r0
     b22:	92 9f       	mul	r25, r18
     b24:	50 0d       	add	r21, r0
     b26:	11 24       	eor	r1, r1
     b28:	4e 0f       	add	r20, r30
     b2a:	5f 1f       	adc	r21, r31
     b2c:	5d 83       	std	Y+5, r21	; 0x05
     b2e:	4c 83       	std	Y+4, r20	; 0x04
     b30:	1e 8e       	std	Y+30, r1	; 0x1e
     b32:	fb 83       	std	Y+3, r31	; 0x03
     b34:	ea 83       	std	Y+2, r30	; 0x02
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	28 9f       	mul	r18, r24
     b3a:	a0 01       	movw	r20, r0
     b3c:	29 9f       	mul	r18, r25
     b3e:	50 0d       	add	r21, r0
     b40:	38 9f       	mul	r19, r24
     b42:	50 0d       	add	r21, r0
     b44:	11 24       	eor	r1, r1
     b46:	cf 01       	movw	r24, r30
     b48:	84 0f       	add	r24, r20
     b4a:	95 1f       	adc	r25, r21
     b4c:	9f 83       	std	Y+7, r25	; 0x07
     b4e:	8e 83       	std	Y+6, r24	; 0x06
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	89 a3       	std	Y+33, r24	; 0x21
     b54:	8a a3       	std	Y+34, r24	; 0x22
     b56:	61 11       	cpse	r22, r1
     b58:	0b c0       	rjmp	.+22     	; 0xb70 <xQueueGenericReset+0x6e>
     b5a:	88 85       	ldd	r24, Y+8	; 0x08
     b5c:	88 23       	and	r24, r24
     b5e:	71 f0       	breq	.+28     	; 0xb7c <xQueueGenericReset+0x7a>
     b60:	ce 01       	movw	r24, r28
     b62:	08 96       	adiw	r24, 0x08	; 8
     b64:	0e 94 46 11 	call	0x228c	; 0x228c <xTaskRemoveFromEventList>
     b68:	88 23       	and	r24, r24
     b6a:	41 f0       	breq	.+16     	; 0xb7c <xQueueGenericReset+0x7a>
     b6c:	2a de       	rcall	.-940    	; 0x7c2 <vPortYield>
     b6e:	06 c0       	rjmp	.+12     	; 0xb7c <xQueueGenericReset+0x7a>
     b70:	ce 01       	movw	r24, r28
     b72:	08 96       	adiw	r24, 0x08	; 8
     b74:	58 dd       	rcall	.-1360   	; 0x626 <vListInitialise>
     b76:	ce 01       	movw	r24, r28
     b78:	43 96       	adiw	r24, 0x13	; 19
     b7a:	55 dd       	rcall	.-1366   	; 0x626 <vListInitialise>
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <prvInitialiseNewQueue>:
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	f8 01       	movw	r30, r16
     b8e:	61 11       	cpse	r22, r1
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <prvInitialiseNewQueue+0x10>
     b92:	11 83       	std	Z+1, r17	; 0x01
     b94:	00 83       	st	Z, r16
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <prvInitialiseNewQueue+0x14>
     b98:	51 83       	std	Z+1, r21	; 0x01
     b9a:	40 83       	st	Z, r20
     b9c:	87 8f       	std	Z+31, r24	; 0x1f
     b9e:	60 a3       	std	Z+32, r22	; 0x20
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	cf 01       	movw	r24, r30
     ba4:	ae df       	rcall	.-164    	; 0xb02 <xQueueGenericReset>
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	08 95       	ret

00000bac <xQueueGenericCreate>:
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	f8 2e       	mov	r15, r24
     bbc:	e6 2e       	mov	r14, r22
     bbe:	d4 2e       	mov	r13, r20
     bc0:	86 9f       	mul	r24, r22
     bc2:	c0 01       	movw	r24, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	83 96       	adiw	r24, 0x23	; 35
     bc8:	43 dc       	rcall	.-1914   	; 0x450 <pvPortMalloc>
     bca:	ec 01       	movw	r28, r24
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	41 f0       	breq	.+16     	; 0xbe0 <xQueueGenericCreate+0x34>
     bd0:	8c 01       	movw	r16, r24
     bd2:	2d 2d       	mov	r18, r13
     bd4:	ac 01       	movw	r20, r24
     bd6:	4d 5d       	subi	r20, 0xDD	; 221
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	6e 2d       	mov	r22, r14
     bdc:	8f 2d       	mov	r24, r15
     bde:	d4 df       	rcall	.-88     	; 0xb88 <prvInitialiseNewQueue>
     be0:	ce 01       	movw	r24, r28
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	df 90       	pop	r13
     bf0:	08 95       	ret

00000bf2 <xQueueGenericSend>:
     bf2:	cf 92       	push	r12
     bf4:	df 92       	push	r13
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	29 97       	sbiw	r28, 0x09	; 9
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	7c 01       	movw	r14, r24
     c14:	6b 01       	movw	r12, r22
     c16:	2e 83       	std	Y+6, r18	; 0x06
     c18:	3f 83       	std	Y+7, r19	; 0x07
     c1a:	48 87       	std	Y+8, r20	; 0x08
     c1c:	59 87       	std	Y+9, r21	; 0x09
     c1e:	10 e0       	ldi	r17, 0x00	; 0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	0f 92       	push	r0
     c26:	f7 01       	movw	r30, r14
     c28:	96 8d       	ldd	r25, Z+30	; 0x1e
     c2a:	87 8d       	ldd	r24, Z+31	; 0x1f
     c2c:	98 17       	cp	r25, r24
     c2e:	10 f0       	brcs	.+4      	; 0xc34 <xQueueGenericSend+0x42>
     c30:	02 30       	cpi	r16, 0x02	; 2
     c32:	b1 f4       	brne	.+44     	; 0xc60 <xQueueGenericSend+0x6e>
     c34:	40 2f       	mov	r20, r16
     c36:	b6 01       	movw	r22, r12
     c38:	c7 01       	movw	r24, r14
     c3a:	b6 de       	rcall	.-660    	; 0x9a8 <prvCopyDataToQueue>
     c3c:	f7 01       	movw	r30, r14
     c3e:	93 89       	ldd	r25, Z+19	; 0x13
     c40:	99 23       	and	r25, r25
     c42:	41 f0       	breq	.+16     	; 0xc54 <xQueueGenericSend+0x62>
     c44:	c7 01       	movw	r24, r14
     c46:	43 96       	adiw	r24, 0x13	; 19
     c48:	0e 94 46 11 	call	0x228c	; 0x228c <xTaskRemoveFromEventList>
     c4c:	88 23       	and	r24, r24
     c4e:	21 f0       	breq	.+8      	; 0xc58 <xQueueGenericSend+0x66>
     c50:	b8 dd       	rcall	.-1168   	; 0x7c2 <vPortYield>
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <xQueueGenericSend+0x66>
     c54:	81 11       	cpse	r24, r1
     c56:	b5 dd       	rcall	.-1174   	; 0x7c2 <vPortYield>
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	4c c0       	rjmp	.+152    	; 0xcf8 <xQueueGenericSend+0x106>
     c60:	8e 81       	ldd	r24, Y+6	; 0x06
     c62:	9f 81       	ldd	r25, Y+7	; 0x07
     c64:	a8 85       	ldd	r26, Y+8	; 0x08
     c66:	b9 85       	ldd	r27, Y+9	; 0x09
     c68:	89 2b       	or	r24, r25
     c6a:	8a 2b       	or	r24, r26
     c6c:	8b 2b       	or	r24, r27
     c6e:	21 f4       	brne	.+8      	; 0xc78 <xQueueGenericSend+0x86>
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	40 c0       	rjmp	.+128    	; 0xcf8 <xQueueGenericSend+0x106>
     c78:	11 11       	cpse	r17, r1
     c7a:	05 c0       	rjmp	.+10     	; 0xc86 <xQueueGenericSend+0x94>
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	0e 94 0b 12 	call	0x2416	; 0x2416 <vTaskInternalSetTimeOutState>
     c84:	11 e0       	ldi	r17, 0x01	; 1
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	a6 d7       	rcall	.+3916   	; 0x1bd8 <vTaskSuspendAll>
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	0f 92       	push	r0
     c92:	f7 01       	movw	r30, r14
     c94:	81 a1       	ldd	r24, Z+33	; 0x21
     c96:	8f 3f       	cpi	r24, 0xFF	; 255
     c98:	09 f4       	brne	.+2      	; 0xc9c <xQueueGenericSend+0xaa>
     c9a:	11 a2       	std	Z+33, r1	; 0x21
     c9c:	f7 01       	movw	r30, r14
     c9e:	82 a1       	ldd	r24, Z+34	; 0x22
     ca0:	8f 3f       	cpi	r24, 0xFF	; 255
     ca2:	09 f4       	brne	.+2      	; 0xca6 <xQueueGenericSend+0xb4>
     ca4:	12 a2       	std	Z+34, r1	; 0x22
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	be 01       	movw	r22, r28
     cac:	6a 5f       	subi	r22, 0xFA	; 250
     cae:	7f 4f       	sbci	r23, 0xFF	; 255
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	0e 94 1c 12 	call	0x2438	; 0x2438 <xTaskCheckForTimeOut>
     cb8:	81 11       	cpse	r24, r1
     cba:	19 c0       	rjmp	.+50     	; 0xcee <xQueueGenericSend+0xfc>
     cbc:	c7 01       	movw	r24, r14
     cbe:	66 de       	rcall	.-820    	; 0x98c <prvIsQueueFull>
     cc0:	88 23       	and	r24, r24
     cc2:	81 f0       	breq	.+32     	; 0xce4 <xQueueGenericSend+0xf2>
     cc4:	4e 81       	ldd	r20, Y+6	; 0x06
     cc6:	5f 81       	ldd	r21, Y+7	; 0x07
     cc8:	68 85       	ldd	r22, Y+8	; 0x08
     cca:	79 85       	ldd	r23, Y+9	; 0x09
     ccc:	c7 01       	movw	r24, r14
     cce:	08 96       	adiw	r24, 0x08	; 8
     cd0:	0e 94 ed 10 	call	0x21da	; 0x21da <vTaskPlaceOnEventList>
     cd4:	c7 01       	movw	r24, r14
     cd6:	e1 de       	rcall	.-574    	; 0xa9a <prvUnlockQueue>
     cd8:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <xTaskResumeAll>
     cdc:	81 11       	cpse	r24, r1
     cde:	a0 cf       	rjmp	.-192    	; 0xc20 <xQueueGenericSend+0x2e>
     ce0:	70 dd       	rcall	.-1312   	; 0x7c2 <vPortYield>
     ce2:	9e cf       	rjmp	.-196    	; 0xc20 <xQueueGenericSend+0x2e>
     ce4:	c7 01       	movw	r24, r14
     ce6:	d9 de       	rcall	.-590    	; 0xa9a <prvUnlockQueue>
     ce8:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <xTaskResumeAll>
     cec:	99 cf       	rjmp	.-206    	; 0xc20 <xQueueGenericSend+0x2e>
     cee:	c7 01       	movw	r24, r14
     cf0:	d4 de       	rcall	.-600    	; 0xa9a <prvUnlockQueue>
     cf2:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <xTaskResumeAll>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	29 96       	adiw	r28, 0x09	; 9
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	08 95       	ret

00000d16 <xQueueGenericSendFromISR>:
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	8a 01       	movw	r16, r20
     d24:	fc 01       	movw	r30, r24
     d26:	56 8d       	ldd	r21, Z+30	; 0x1e
     d28:	37 8d       	ldd	r19, Z+31	; 0x1f
     d2a:	53 17       	cp	r21, r19
     d2c:	10 f0       	brcs	.+4      	; 0xd32 <xQueueGenericSendFromISR+0x1c>
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	f9 f4       	brne	.+62     	; 0xd70 <xQueueGenericSendFromISR+0x5a>
     d32:	42 2f       	mov	r20, r18
     d34:	78 01       	movw	r14, r16
     d36:	ec 01       	movw	r28, r24
     d38:	1a a1       	ldd	r17, Y+34	; 0x22
     d3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d3c:	ce 01       	movw	r24, r28
     d3e:	34 de       	rcall	.-920    	; 0x9a8 <prvCopyDataToQueue>
     d40:	1f 3f       	cpi	r17, 0xFF	; 255
     d42:	81 f4       	brne	.+32     	; 0xd64 <xQueueGenericSendFromISR+0x4e>
     d44:	8b 89       	ldd	r24, Y+19	; 0x13
     d46:	88 23       	and	r24, r24
     d48:	a9 f0       	breq	.+42     	; 0xd74 <xQueueGenericSendFromISR+0x5e>
     d4a:	ce 01       	movw	r24, r28
     d4c:	43 96       	adiw	r24, 0x13	; 19
     d4e:	0e 94 46 11 	call	0x228c	; 0x228c <xTaskRemoveFromEventList>
     d52:	88 23       	and	r24, r24
     d54:	89 f0       	breq	.+34     	; 0xd78 <xQueueGenericSendFromISR+0x62>
     d56:	e1 14       	cp	r14, r1
     d58:	f1 04       	cpc	r15, r1
     d5a:	81 f0       	breq	.+32     	; 0xd7c <xQueueGenericSendFromISR+0x66>
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	f7 01       	movw	r30, r14
     d60:	80 83       	st	Z, r24
     d62:	0d c0       	rjmp	.+26     	; 0xd7e <xQueueGenericSendFromISR+0x68>
     d64:	ff 24       	eor	r15, r15
     d66:	f3 94       	inc	r15
     d68:	f1 0e       	add	r15, r17
     d6a:	fa a2       	std	Y+34, r15	; 0x22
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	07 c0       	rjmp	.+14     	; 0xd7e <xQueueGenericSendFromISR+0x68>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <xQueueGenericSendFromISR+0x68>
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <xQueueGenericSendFromISR+0x68>
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <xQueueGenericSendFromISR+0x68>
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	08 95       	ret

00000d8c <xQueueReceive>:
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	29 97       	sbiw	r28, 0x09	; 9
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	8c 01       	movw	r16, r24
     dae:	6b 01       	movw	r12, r22
     db0:	2e 83       	std	Y+6, r18	; 0x06
     db2:	3f 83       	std	Y+7, r19	; 0x07
     db4:	48 87       	std	Y+8, r20	; 0x08
     db6:	59 87       	std	Y+9, r21	; 0x09
     db8:	e1 2c       	mov	r14, r1
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	0f 92       	push	r0
     dc0:	f8 01       	movw	r30, r16
     dc2:	f6 8c       	ldd	r15, Z+30	; 0x1e
     dc4:	ff 20       	and	r15, r15
     dc6:	99 f0       	breq	.+38     	; 0xdee <xQueueReceive+0x62>
     dc8:	b6 01       	movw	r22, r12
     dca:	c8 01       	movw	r24, r16
     dcc:	4c de       	rcall	.-872    	; 0xa66 <prvCopyDataFromQueue>
     dce:	fa 94       	dec	r15
     dd0:	f8 01       	movw	r30, r16
     dd2:	f6 8e       	std	Z+30, r15	; 0x1e
     dd4:	80 85       	ldd	r24, Z+8	; 0x08
     dd6:	88 23       	and	r24, r24
     dd8:	31 f0       	breq	.+12     	; 0xde6 <xQueueReceive+0x5a>
     dda:	c8 01       	movw	r24, r16
     ddc:	08 96       	adiw	r24, 0x08	; 8
     dde:	0e 94 46 11 	call	0x228c	; 0x228c <xTaskRemoveFromEventList>
     de2:	81 11       	cpse	r24, r1
     de4:	ee dc       	rcall	.-1572   	; 0x7c2 <vPortYield>
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	4f c0       	rjmp	.+158    	; 0xe8c <xQueueReceive+0x100>
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	a8 85       	ldd	r26, Y+8	; 0x08
     df4:	b9 85       	ldd	r27, Y+9	; 0x09
     df6:	89 2b       	or	r24, r25
     df8:	8a 2b       	or	r24, r26
     dfa:	8b 2b       	or	r24, r27
     dfc:	21 f4       	brne	.+8      	; 0xe06 <xQueueReceive+0x7a>
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <xQueueReceive+0x100>
     e06:	e1 10       	cpse	r14, r1
     e08:	06 c0       	rjmp	.+12     	; 0xe16 <xQueueReceive+0x8a>
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	0e 94 0b 12 	call	0x2416	; 0x2416 <vTaskInternalSetTimeOutState>
     e12:	ee 24       	eor	r14, r14
     e14:	e3 94       	inc	r14
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	de d6       	rcall	.+3516   	; 0x1bd8 <vTaskSuspendAll>
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	0f 92       	push	r0
     e22:	f8 01       	movw	r30, r16
     e24:	81 a1       	ldd	r24, Z+33	; 0x21
     e26:	8f 3f       	cpi	r24, 0xFF	; 255
     e28:	09 f4       	brne	.+2      	; 0xe2c <xQueueReceive+0xa0>
     e2a:	11 a2       	std	Z+33, r1	; 0x21
     e2c:	f8 01       	movw	r30, r16
     e2e:	82 a1       	ldd	r24, Z+34	; 0x22
     e30:	8f 3f       	cpi	r24, 0xFF	; 255
     e32:	09 f4       	brne	.+2      	; 0xe36 <xQueueReceive+0xaa>
     e34:	12 a2       	std	Z+34, r1	; 0x22
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	be 01       	movw	r22, r28
     e3c:	6a 5f       	subi	r22, 0xFA	; 250
     e3e:	7f 4f       	sbci	r23, 0xFF	; 255
     e40:	ce 01       	movw	r24, r28
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	0e 94 1c 12 	call	0x2438	; 0x2438 <xTaskCheckForTimeOut>
     e48:	81 11       	cpse	r24, r1
     e4a:	17 c0       	rjmp	.+46     	; 0xe7a <xQueueReceive+0xee>
     e4c:	c8 01       	movw	r24, r16
     e4e:	91 dd       	rcall	.-1246   	; 0x972 <prvIsQueueEmpty>
     e50:	88 23       	and	r24, r24
     e52:	79 f0       	breq	.+30     	; 0xe72 <xQueueReceive+0xe6>
     e54:	4e 81       	ldd	r20, Y+6	; 0x06
     e56:	5f 81       	ldd	r21, Y+7	; 0x07
     e58:	68 85       	ldd	r22, Y+8	; 0x08
     e5a:	79 85       	ldd	r23, Y+9	; 0x09
     e5c:	c8 01       	movw	r24, r16
     e5e:	43 96       	adiw	r24, 0x13	; 19
     e60:	0e 94 ed 10 	call	0x21da	; 0x21da <vTaskPlaceOnEventList>
     e64:	c8 01       	movw	r24, r16
     e66:	19 de       	rcall	.-974    	; 0xa9a <prvUnlockQueue>
     e68:	f7 d7       	rcall	.+4078   	; 0x1e58 <xTaskResumeAll>
     e6a:	81 11       	cpse	r24, r1
     e6c:	a6 cf       	rjmp	.-180    	; 0xdba <xQueueReceive+0x2e>
     e6e:	a9 dc       	rcall	.-1710   	; 0x7c2 <vPortYield>
     e70:	a4 cf       	rjmp	.-184    	; 0xdba <xQueueReceive+0x2e>
     e72:	c8 01       	movw	r24, r16
     e74:	12 de       	rcall	.-988    	; 0xa9a <prvUnlockQueue>
     e76:	f0 d7       	rcall	.+4064   	; 0x1e58 <xTaskResumeAll>
     e78:	a0 cf       	rjmp	.-192    	; 0xdba <xQueueReceive+0x2e>
     e7a:	c8 01       	movw	r24, r16
     e7c:	0e de       	rcall	.-996    	; 0xa9a <prvUnlockQueue>
     e7e:	ec d7       	rcall	.+4056   	; 0x1e58 <xTaskResumeAll>
     e80:	c8 01       	movw	r24, r16
     e82:	77 dd       	rcall	.-1298   	; 0x972 <prvIsQueueEmpty>
     e84:	88 23       	and	r24, r24
     e86:	09 f4       	brne	.+2      	; 0xe8a <xQueueReceive+0xfe>
     e88:	98 cf       	rjmp	.-208    	; 0xdba <xQueueReceive+0x2e>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	29 96       	adiw	r28, 0x09	; 9
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	08 95       	ret

00000eaa <xQueueSemaphoreTake>:
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	29 97       	sbiw	r28, 0x09	; 9
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	8c 01       	movw	r16, r24
     ec8:	4e 83       	std	Y+6, r20	; 0x06
     eca:	5f 83       	std	Y+7, r21	; 0x07
     ecc:	68 87       	std	Y+8, r22	; 0x08
     ece:	79 87       	std	Y+9, r23	; 0x09
     ed0:	e1 2c       	mov	r14, r1
     ed2:	f1 2c       	mov	r15, r1
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	0f 92       	push	r0
     eda:	f8 01       	movw	r30, r16
     edc:	86 8d       	ldd	r24, Z+30	; 0x1e
     ede:	88 23       	and	r24, r24
     ee0:	c9 f0       	breq	.+50     	; 0xf14 <xQueueSemaphoreTake+0x6a>
     ee2:	81 50       	subi	r24, 0x01	; 1
     ee4:	86 8f       	std	Z+30, r24	; 0x1e
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	89 2b       	or	r24, r25
     eec:	29 f4       	brne	.+10     	; 0xef8 <xQueueSemaphoreTake+0x4e>
     eee:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <pvTaskIncrementMutexHeldCount>
     ef2:	f8 01       	movw	r30, r16
     ef4:	95 83       	std	Z+5, r25	; 0x05
     ef6:	84 83       	std	Z+4, r24	; 0x04
     ef8:	f8 01       	movw	r30, r16
     efa:	80 85       	ldd	r24, Z+8	; 0x08
     efc:	88 23       	and	r24, r24
     efe:	31 f0       	breq	.+12     	; 0xf0c <xQueueSemaphoreTake+0x62>
     f00:	c8 01       	movw	r24, r16
     f02:	08 96       	adiw	r24, 0x08	; 8
     f04:	0e 94 46 11 	call	0x228c	; 0x228c <xTaskRemoveFromEventList>
     f08:	81 11       	cpse	r24, r1
     f0a:	5b dc       	rcall	.-1866   	; 0x7c2 <vPortYield>
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	6f c0       	rjmp	.+222    	; 0xff2 <xQueueSemaphoreTake+0x148>
     f14:	8e 81       	ldd	r24, Y+6	; 0x06
     f16:	9f 81       	ldd	r25, Y+7	; 0x07
     f18:	a8 85       	ldd	r26, Y+8	; 0x08
     f1a:	b9 85       	ldd	r27, Y+9	; 0x09
     f1c:	89 2b       	or	r24, r25
     f1e:	8a 2b       	or	r24, r26
     f20:	8b 2b       	or	r24, r27
     f22:	21 f4       	brne	.+8      	; 0xf2c <xQueueSemaphoreTake+0x82>
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	63 c0       	rjmp	.+198    	; 0xff2 <xQueueSemaphoreTake+0x148>
     f2c:	f1 10       	cpse	r15, r1
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <xQueueSemaphoreTake+0x92>
     f30:	ce 01       	movw	r24, r28
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	0e 94 0b 12 	call	0x2416	; 0x2416 <vTaskInternalSetTimeOutState>
     f38:	ff 24       	eor	r15, r15
     f3a:	f3 94       	inc	r15
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	4b d6       	rcall	.+3222   	; 0x1bd8 <vTaskSuspendAll>
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	0f 92       	push	r0
     f48:	f8 01       	movw	r30, r16
     f4a:	81 a1       	ldd	r24, Z+33	; 0x21
     f4c:	8f 3f       	cpi	r24, 0xFF	; 255
     f4e:	09 f4       	brne	.+2      	; 0xf52 <xQueueSemaphoreTake+0xa8>
     f50:	11 a2       	std	Z+33, r1	; 0x21
     f52:	f8 01       	movw	r30, r16
     f54:	82 a1       	ldd	r24, Z+34	; 0x22
     f56:	8f 3f       	cpi	r24, 0xFF	; 255
     f58:	09 f4       	brne	.+2      	; 0xf5c <xQueueSemaphoreTake+0xb2>
     f5a:	12 a2       	std	Z+34, r1	; 0x22
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	be 01       	movw	r22, r28
     f62:	6a 5f       	subi	r22, 0xFA	; 250
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	ce 01       	movw	r24, r28
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	0e 94 1c 12 	call	0x2438	; 0x2438 <xTaskCheckForTimeOut>
     f6e:	81 11       	cpse	r24, r1
     f70:	26 c0       	rjmp	.+76     	; 0xfbe <xQueueSemaphoreTake+0x114>
     f72:	c8 01       	movw	r24, r16
     f74:	fe dc       	rcall	.-1540   	; 0x972 <prvIsQueueEmpty>
     f76:	88 23       	and	r24, r24
     f78:	f1 f0       	breq	.+60     	; 0xfb6 <xQueueSemaphoreTake+0x10c>
     f7a:	f8 01       	movw	r30, r16
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	89 2b       	or	r24, r25
     f82:	51 f4       	brne	.+20     	; 0xf98 <xQueueSemaphoreTake+0xee>
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	0f 92       	push	r0
     f8a:	84 81       	ldd	r24, Z+4	; 0x04
     f8c:	95 81       	ldd	r25, Z+5	; 0x05
     f8e:	0e 94 99 12 	call	0x2532	; 0x2532 <xTaskPriorityInherit>
     f92:	e8 2e       	mov	r14, r24
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	4e 81       	ldd	r20, Y+6	; 0x06
     f9a:	5f 81       	ldd	r21, Y+7	; 0x07
     f9c:	68 85       	ldd	r22, Y+8	; 0x08
     f9e:	79 85       	ldd	r23, Y+9	; 0x09
     fa0:	c8 01       	movw	r24, r16
     fa2:	43 96       	adiw	r24, 0x13	; 19
     fa4:	0e 94 ed 10 	call	0x21da	; 0x21da <vTaskPlaceOnEventList>
     fa8:	c8 01       	movw	r24, r16
     faa:	77 dd       	rcall	.-1298   	; 0xa9a <prvUnlockQueue>
     fac:	55 d7       	rcall	.+3754   	; 0x1e58 <xTaskResumeAll>
     fae:	81 11       	cpse	r24, r1
     fb0:	91 cf       	rjmp	.-222    	; 0xed4 <xQueueSemaphoreTake+0x2a>
     fb2:	07 dc       	rcall	.-2034   	; 0x7c2 <vPortYield>
     fb4:	8f cf       	rjmp	.-226    	; 0xed4 <xQueueSemaphoreTake+0x2a>
     fb6:	c8 01       	movw	r24, r16
     fb8:	70 dd       	rcall	.-1312   	; 0xa9a <prvUnlockQueue>
     fba:	4e d7       	rcall	.+3740   	; 0x1e58 <xTaskResumeAll>
     fbc:	8b cf       	rjmp	.-234    	; 0xed4 <xQueueSemaphoreTake+0x2a>
     fbe:	c8 01       	movw	r24, r16
     fc0:	6c dd       	rcall	.-1320   	; 0xa9a <prvUnlockQueue>
     fc2:	4a d7       	rcall	.+3732   	; 0x1e58 <xTaskResumeAll>
     fc4:	c8 01       	movw	r24, r16
     fc6:	d5 dc       	rcall	.-1622   	; 0x972 <prvIsQueueEmpty>
     fc8:	88 23       	and	r24, r24
     fca:	09 f4       	brne	.+2      	; 0xfce <xQueueSemaphoreTake+0x124>
     fcc:	83 cf       	rjmp	.-250    	; 0xed4 <xQueueSemaphoreTake+0x2a>
     fce:	ee 20       	and	r14, r14
     fd0:	79 f0       	breq	.+30     	; 0xff0 <xQueueSemaphoreTake+0x146>
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	0f 92       	push	r0
     fd8:	c8 01       	movw	r24, r16
     fda:	bb dc       	rcall	.-1674   	; 0x952 <prvGetDisinheritPriorityAfterTimeout>
     fdc:	68 2f       	mov	r22, r24
     fde:	f8 01       	movw	r30, r16
     fe0:	84 81       	ldd	r24, Z+4	; 0x04
     fe2:	95 81       	ldd	r25, Z+5	; 0x05
     fe4:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <vTaskPriorityDisinheritAfterTimeout>
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <xQueueSemaphoreTake+0x148>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	29 96       	adiw	r28, 0x09	; 9
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	08 95       	ret

0000100c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	0f 92       	push	r0
    1018:	89 a1       	ldd	r24, Y+33	; 0x21
    101a:	8f 3f       	cpi	r24, 0xFF	; 255
    101c:	09 f4       	brne	.+2      	; 0x1020 <vQueueWaitForMessageRestricted+0x14>
    101e:	19 a2       	std	Y+33, r1	; 0x21
    1020:	8a a1       	ldd	r24, Y+34	; 0x22
    1022:	8f 3f       	cpi	r24, 0xFF	; 255
    1024:	09 f4       	brne	.+2      	; 0x1028 <vQueueWaitForMessageRestricted+0x1c>
    1026:	1a a2       	std	Y+34, r1	; 0x22
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    102c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    102e:	81 11       	cpse	r24, r1
    1030:	04 c0       	rjmp	.+8      	; 0x103a <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1032:	ce 01       	movw	r24, r28
    1034:	43 96       	adiw	r24, 0x13	; 19
    1036:	0e 94 04 11 	call	0x2208	; 0x2208 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    103a:	ce 01       	movw	r24, r28
    103c:	2e dd       	rcall	.-1444   	; 0xa9a <prvUnlockQueue>
    }
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1044:	fc 01       	movw	r30, r24
    1046:	44 81       	ldd	r20, Z+4	; 0x04
    1048:	55 81       	ldd	r21, Z+5	; 0x05
    104a:	22 81       	ldd	r18, Z+2	; 0x02
    104c:	33 81       	ldd	r19, Z+3	; 0x03
    104e:	24 0f       	add	r18, r20
    1050:	35 1f       	adc	r19, r21
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	b9 01       	movw	r22, r18
    1058:	68 1b       	sub	r22, r24
    105a:	79 0b       	sbc	r23, r25
    105c:	cb 01       	movw	r24, r22
    105e:	64 17       	cp	r22, r20
    1060:	75 07       	cpc	r23, r21
    1062:	10 f0       	brcs	.+4      	; 0x1068 <prvBytesInBuffer+0x24>
    1064:	84 1b       	sub	r24, r20
    1066:	95 0b       	sbc	r25, r21
    1068:	08 95       	ret

0000106a <prvInitialiseNewStreamBuffer>:
    106a:	0f 93       	push	r16
    106c:	fc 01       	movw	r30, r24
    106e:	8f e0       	ldi	r24, 0x0F	; 15
    1070:	df 01       	movw	r26, r30
    1072:	1d 92       	st	X+, r1
    1074:	8a 95       	dec	r24
    1076:	e9 f7       	brne	.-6      	; 0x1072 <prvInitialiseNewStreamBuffer+0x8>
    1078:	75 87       	std	Z+13, r23	; 0x0d
    107a:	64 87       	std	Z+12, r22	; 0x0c
    107c:	55 83       	std	Z+5, r21	; 0x05
    107e:	44 83       	std	Z+4, r20	; 0x04
    1080:	37 83       	std	Z+7, r19	; 0x07
    1082:	26 83       	std	Z+6, r18	; 0x06
    1084:	06 87       	std	Z+14, r16	; 0x0e
    1086:	0f 91       	pop	r16
    1088:	08 95       	ret

0000108a <prvWriteBytesToBuffer>:
    108a:	af 92       	push	r10
    108c:	bf 92       	push	r11
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	6c 01       	movw	r12, r24
    10a0:	5b 01       	movw	r10, r22
    10a2:	7a 01       	movw	r14, r20
    10a4:	fc 01       	movw	r30, r24
    10a6:	c2 81       	ldd	r28, Z+2	; 0x02
    10a8:	d3 81       	ldd	r29, Z+3	; 0x03
    10aa:	04 81       	ldd	r16, Z+4	; 0x04
    10ac:	15 81       	ldd	r17, Z+5	; 0x05
    10ae:	0c 1b       	sub	r16, r28
    10b0:	1d 0b       	sbc	r17, r29
    10b2:	40 17       	cp	r20, r16
    10b4:	51 07       	cpc	r21, r17
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <prvWriteBytesToBuffer+0x30>
    10b8:	8a 01       	movw	r16, r20
    10ba:	f6 01       	movw	r30, r12
    10bc:	84 85       	ldd	r24, Z+12	; 0x0c
    10be:	95 85       	ldd	r25, Z+13	; 0x0d
    10c0:	a8 01       	movw	r20, r16
    10c2:	b5 01       	movw	r22, r10
    10c4:	8c 0f       	add	r24, r28
    10c6:	9d 1f       	adc	r25, r29
    10c8:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <memcpy>
    10cc:	0e 15       	cp	r16, r14
    10ce:	1f 05       	cpc	r17, r15
    10d0:	58 f4       	brcc	.+22     	; 0x10e8 <prvWriteBytesToBuffer+0x5e>
    10d2:	a7 01       	movw	r20, r14
    10d4:	40 1b       	sub	r20, r16
    10d6:	51 0b       	sbc	r21, r17
    10d8:	b5 01       	movw	r22, r10
    10da:	60 0f       	add	r22, r16
    10dc:	71 1f       	adc	r23, r17
    10de:	f6 01       	movw	r30, r12
    10e0:	84 85       	ldd	r24, Z+12	; 0x0c
    10e2:	95 85       	ldd	r25, Z+13	; 0x0d
    10e4:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <memcpy>
    10e8:	ce 01       	movw	r24, r28
    10ea:	8e 0d       	add	r24, r14
    10ec:	9f 1d       	adc	r25, r15
    10ee:	f6 01       	movw	r30, r12
    10f0:	24 81       	ldd	r18, Z+4	; 0x04
    10f2:	35 81       	ldd	r19, Z+5	; 0x05
    10f4:	82 17       	cp	r24, r18
    10f6:	93 07       	cpc	r25, r19
    10f8:	10 f0       	brcs	.+4      	; 0x10fe <prvWriteBytesToBuffer+0x74>
    10fa:	82 1b       	sub	r24, r18
    10fc:	93 0b       	sbc	r25, r19
    10fe:	f6 01       	movw	r30, r12
    1100:	93 83       	std	Z+3, r25	; 0x03
    1102:	82 83       	std	Z+2, r24	; 0x02
    1104:	c7 01       	movw	r24, r14
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	df 90       	pop	r13
    1114:	cf 90       	pop	r12
    1116:	bf 90       	pop	r11
    1118:	af 90       	pop	r10
    111a:	08 95       	ret

0000111c <prvWriteMessageToBuffer>:
    111c:	cf 92       	push	r12
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	1f 92       	push	r1
    112e:	1f 92       	push	r1
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	7c 01       	movw	r14, r24
    1136:	6b 01       	movw	r12, r22
    1138:	5a 83       	std	Y+2, r21	; 0x02
    113a:	49 83       	std	Y+1, r20	; 0x01
    113c:	21 15       	cp	r18, r1
    113e:	31 05       	cpc	r19, r1
    1140:	c1 f0       	breq	.+48     	; 0x1172 <prvWriteMessageToBuffer+0x56>
    1142:	fc 01       	movw	r30, r24
    1144:	86 85       	ldd	r24, Z+14	; 0x0e
    1146:	80 fd       	sbrc	r24, 0
    1148:	08 c0       	rjmp	.+16     	; 0x115a <prvWriteMessageToBuffer+0x3e>
    114a:	42 17       	cp	r20, r18
    114c:	53 07       	cpc	r21, r19
    114e:	08 f4       	brcc	.+2      	; 0x1152 <prvWriteMessageToBuffer+0x36>
    1150:	9a 01       	movw	r18, r20
    1152:	3a 83       	std	Y+2, r19	; 0x02
    1154:	29 83       	std	Y+1, r18	; 0x01
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <prvWriteMessageToBuffer+0x5c>
    115a:	20 17       	cp	r18, r16
    115c:	31 07       	cpc	r19, r17
    115e:	58 f0       	brcs	.+22     	; 0x1176 <prvWriteMessageToBuffer+0x5a>
    1160:	42 e0       	ldi	r20, 0x02	; 2
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	be 01       	movw	r22, r28
    1166:	6f 5f       	subi	r22, 0xFF	; 255
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	c7 01       	movw	r24, r14
    116c:	8e df       	rcall	.-228    	; 0x108a <prvWriteBytesToBuffer>
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <prvWriteMessageToBuffer+0x5c>
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <prvWriteMessageToBuffer+0x5c>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	88 23       	and	r24, r24
    117a:	31 f0       	breq	.+12     	; 0x1188 <prvWriteMessageToBuffer+0x6c>
    117c:	49 81       	ldd	r20, Y+1	; 0x01
    117e:	5a 81       	ldd	r21, Y+2	; 0x02
    1180:	b6 01       	movw	r22, r12
    1182:	c7 01       	movw	r24, r14
    1184:	82 df       	rcall	.-252    	; 0x108a <prvWriteBytesToBuffer>
    1186:	02 c0       	rjmp	.+4      	; 0x118c <prvWriteMessageToBuffer+0x70>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	08 95       	ret

000011a2 <prvReadBytesFromBuffer>:
    11a2:	af 92       	push	r10
    11a4:	bf 92       	push	r11
    11a6:	cf 92       	push	r12
    11a8:	df 92       	push	r13
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	7c 01       	movw	r14, r24
    11b8:	5b 01       	movw	r10, r22
    11ba:	e9 01       	movw	r28, r18
    11bc:	42 17       	cp	r20, r18
    11be:	53 07       	cpc	r21, r19
    11c0:	08 f4       	brcc	.+2      	; 0x11c4 <prvReadBytesFromBuffer+0x22>
    11c2:	ea 01       	movw	r28, r20
    11c4:	20 97       	sbiw	r28, 0x00	; 0
    11c6:	81 f1       	breq	.+96     	; 0x1228 <prvReadBytesFromBuffer+0x86>
    11c8:	f7 01       	movw	r30, r14
    11ca:	00 81       	ld	r16, Z
    11cc:	11 81       	ldd	r17, Z+1	; 0x01
    11ce:	84 81       	ldd	r24, Z+4	; 0x04
    11d0:	95 81       	ldd	r25, Z+5	; 0x05
    11d2:	80 1b       	sub	r24, r16
    11d4:	91 0b       	sbc	r25, r17
    11d6:	6e 01       	movw	r12, r28
    11d8:	8c 17       	cp	r24, r28
    11da:	9d 07       	cpc	r25, r29
    11dc:	08 f4       	brcc	.+2      	; 0x11e0 <prvReadBytesFromBuffer+0x3e>
    11de:	6c 01       	movw	r12, r24
    11e0:	f7 01       	movw	r30, r14
    11e2:	64 85       	ldd	r22, Z+12	; 0x0c
    11e4:	75 85       	ldd	r23, Z+13	; 0x0d
    11e6:	60 0f       	add	r22, r16
    11e8:	71 1f       	adc	r23, r17
    11ea:	a6 01       	movw	r20, r12
    11ec:	c5 01       	movw	r24, r10
    11ee:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <memcpy>
    11f2:	cc 16       	cp	r12, r28
    11f4:	dd 06       	cpc	r13, r29
    11f6:	58 f4       	brcc	.+22     	; 0x120e <prvReadBytesFromBuffer+0x6c>
    11f8:	ae 01       	movw	r20, r28
    11fa:	4c 19       	sub	r20, r12
    11fc:	5d 09       	sbc	r21, r13
    11fe:	f7 01       	movw	r30, r14
    1200:	64 85       	ldd	r22, Z+12	; 0x0c
    1202:	75 85       	ldd	r23, Z+13	; 0x0d
    1204:	c5 01       	movw	r24, r10
    1206:	8c 0d       	add	r24, r12
    1208:	9d 1d       	adc	r25, r13
    120a:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <memcpy>
    120e:	0c 0f       	add	r16, r28
    1210:	1d 1f       	adc	r17, r29
    1212:	f7 01       	movw	r30, r14
    1214:	84 81       	ldd	r24, Z+4	; 0x04
    1216:	95 81       	ldd	r25, Z+5	; 0x05
    1218:	08 17       	cp	r16, r24
    121a:	19 07       	cpc	r17, r25
    121c:	10 f0       	brcs	.+4      	; 0x1222 <prvReadBytesFromBuffer+0x80>
    121e:	08 1b       	sub	r16, r24
    1220:	19 0b       	sbc	r17, r25
    1222:	f7 01       	movw	r30, r14
    1224:	11 83       	std	Z+1, r17	; 0x01
    1226:	00 83       	st	Z, r16
    1228:	ce 01       	movw	r24, r28
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	bf 90       	pop	r11
    123c:	af 90       	pop	r10
    123e:	08 95       	ret

00001240 <prvReadMessageFromBuffer>:
    1240:	6f 92       	push	r6
    1242:	7f 92       	push	r7
    1244:	8f 92       	push	r8
    1246:	9f 92       	push	r9
    1248:	af 92       	push	r10
    124a:	bf 92       	push	r11
    124c:	cf 92       	push	r12
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	1f 92       	push	r1
    125e:	1f 92       	push	r1
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	6c 01       	movw	r12, r24
    1266:	4b 01       	movw	r8, r22
    1268:	5a 01       	movw	r10, r20
    126a:	79 01       	movw	r14, r18
    126c:	01 15       	cp	r16, r1
    126e:	11 05       	cpc	r17, r1
    1270:	b1 f0       	breq	.+44     	; 0x129e <prvReadMessageFromBuffer+0x5e>
    1272:	fc 01       	movw	r30, r24
    1274:	60 80       	ld	r6, Z
    1276:	71 80       	ldd	r7, Z+1	; 0x01
    1278:	a8 01       	movw	r20, r16
    127a:	be 01       	movw	r22, r28
    127c:	6f 5f       	subi	r22, 0xFF	; 255
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	90 df       	rcall	.-224    	; 0x11a2 <prvReadBytesFromBuffer>
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	e0 1a       	sub	r14, r16
    1288:	f1 0a       	sbc	r15, r17
    128a:	a8 16       	cp	r10, r24
    128c:	b9 06       	cpc	r11, r25
    128e:	30 f4       	brcc	.+12     	; 0x129c <prvReadMessageFromBuffer+0x5c>
    1290:	f6 01       	movw	r30, r12
    1292:	71 82       	std	Z+1, r7	; 0x01
    1294:	60 82       	st	Z, r6
    1296:	a1 2c       	mov	r10, r1
    1298:	b1 2c       	mov	r11, r1
    129a:	01 c0       	rjmp	.+2      	; 0x129e <prvReadMessageFromBuffer+0x5e>
    129c:	5c 01       	movw	r10, r24
    129e:	97 01       	movw	r18, r14
    12a0:	a5 01       	movw	r20, r10
    12a2:	b4 01       	movw	r22, r8
    12a4:	c6 01       	movw	r24, r12
    12a6:	7d df       	rcall	.-262    	; 0x11a2 <prvReadBytesFromBuffer>
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	bf 90       	pop	r11
    12be:	af 90       	pop	r10
    12c0:	9f 90       	pop	r9
    12c2:	8f 90       	pop	r8
    12c4:	7f 90       	pop	r7
    12c6:	6f 90       	pop	r6
    12c8:	08 95       	ret

000012ca <xStreamBufferGenericCreate>:
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
    12da:	6b 01       	movw	r12, r22
    12dc:	41 30       	cpi	r20, 0x01	; 1
    12de:	11 f4       	brne	.+4      	; 0x12e4 <xStreamBufferGenericCreate+0x1a>
    12e0:	01 e0       	ldi	r16, 0x01	; 1
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <xStreamBufferGenericCreate+0x1c>
    12e4:	00 e0       	ldi	r16, 0x00	; 0
    12e6:	c1 14       	cp	r12, r1
    12e8:	d1 04       	cpc	r13, r1
    12ea:	19 f4       	brne	.+6      	; 0x12f2 <xStreamBufferGenericCreate+0x28>
    12ec:	cc 24       	eor	r12, r12
    12ee:	c3 94       	inc	r12
    12f0:	d1 2c       	mov	r13, r1
    12f2:	ce 01       	movw	r24, r28
    12f4:	40 96       	adiw	r24, 0x10	; 16
    12f6:	c8 17       	cp	r28, r24
    12f8:	d9 07       	cpc	r29, r25
    12fa:	20 f4       	brcc	.+8      	; 0x1304 <xStreamBufferGenericCreate+0x3a>
    12fc:	21 96       	adiw	r28, 0x01	; 1
    12fe:	a8 d8       	rcall	.-3760   	; 0x450 <pvPortMalloc>
    1300:	7c 01       	movw	r14, r24
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <xStreamBufferGenericCreate+0x3e>
    1304:	e1 2c       	mov	r14, r1
    1306:	f1 2c       	mov	r15, r1
    1308:	e1 14       	cp	r14, r1
    130a:	f1 04       	cpc	r15, r1
    130c:	39 f0       	breq	.+14     	; 0x131c <xStreamBufferGenericCreate+0x52>
    130e:	96 01       	movw	r18, r12
    1310:	ae 01       	movw	r20, r28
    1312:	b7 01       	movw	r22, r14
    1314:	61 5f       	subi	r22, 0xF1	; 241
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	c7 01       	movw	r24, r14
    131a:	a7 de       	rcall	.-690    	; 0x106a <prvInitialiseNewStreamBuffer>
    131c:	c7 01       	movw	r24, r14
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	08 95       	ret

0000132e <xStreamBufferReset>:
    132e:	0f 93       	push	r16
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	0f 92       	push	r0
    1336:	fc 01       	movw	r30, r24
    1338:	20 85       	ldd	r18, Z+8	; 0x08
    133a:	31 85       	ldd	r19, Z+9	; 0x09
    133c:	23 2b       	or	r18, r19
    133e:	71 f4       	brne	.+28     	; 0x135c <xStreamBufferReset+0x2e>
    1340:	22 85       	ldd	r18, Z+10	; 0x0a
    1342:	33 85       	ldd	r19, Z+11	; 0x0b
    1344:	23 2b       	or	r18, r19
    1346:	61 f4       	brne	.+24     	; 0x1360 <xStreamBufferReset+0x32>
    1348:	26 81       	ldd	r18, Z+6	; 0x06
    134a:	37 81       	ldd	r19, Z+7	; 0x07
    134c:	44 81       	ldd	r20, Z+4	; 0x04
    134e:	55 81       	ldd	r21, Z+5	; 0x05
    1350:	64 85       	ldd	r22, Z+12	; 0x0c
    1352:	75 85       	ldd	r23, Z+13	; 0x0d
    1354:	06 85       	ldd	r16, Z+14	; 0x0e
    1356:	89 de       	rcall	.-750    	; 0x106a <prvInitialiseNewStreamBuffer>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <xStreamBufferReset+0x34>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <xStreamBufferReset+0x34>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0f 90       	pop	r0
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	0f 91       	pop	r16
    1368:	08 95       	ret

0000136a <xStreamBufferSpacesAvailable>:
    136a:	fc 01       	movw	r30, r24
    136c:	24 81       	ldd	r18, Z+4	; 0x04
    136e:	35 81       	ldd	r19, Z+5	; 0x05
    1370:	80 81       	ld	r24, Z
    1372:	91 81       	ldd	r25, Z+1	; 0x01
    1374:	82 0f       	add	r24, r18
    1376:	93 1f       	adc	r25, r19
    1378:	42 81       	ldd	r20, Z+2	; 0x02
    137a:	53 81       	ldd	r21, Z+3	; 0x03
    137c:	84 1b       	sub	r24, r20
    137e:	95 0b       	sbc	r25, r21
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	82 17       	cp	r24, r18
    1384:	93 07       	cpc	r25, r19
    1386:	10 f0       	brcs	.+4      	; 0x138c <xStreamBufferSpacesAvailable+0x22>
    1388:	82 1b       	sub	r24, r18
    138a:	93 0b       	sbc	r25, r19
    138c:	08 95       	ret

0000138e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    138e:	2f 92       	push	r2
    1390:	3f 92       	push	r3
    1392:	4f 92       	push	r4
    1394:	5f 92       	push	r5
    1396:	6f 92       	push	r6
    1398:	7f 92       	push	r7
    139a:	8f 92       	push	r8
    139c:	9f 92       	push	r9
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	2b 97       	sbiw	r28, 0x0b	; 11
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	4c 01       	movw	r8, r24
    13c4:	7b 87       	std	Y+11, r23	; 0x0b
    13c6:	6a 87       	std	Y+10, r22	; 0x0a
    13c8:	1a 01       	movw	r2, r20
    13ca:	0e 83       	std	Y+6, r16	; 0x06
    13cc:	1f 83       	std	Y+7, r17	; 0x07
    13ce:	28 87       	std	Y+8, r18	; 0x08
    13d0:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    13d2:	fc 01       	movw	r30, r24
    13d4:	84 81       	ldd	r24, Z+4	; 0x04
    13d6:	95 81       	ldd	r25, Z+5	; 0x05
    13d8:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    13da:	26 85       	ldd	r18, Z+14	; 0x0e
    13dc:	20 ff       	sbrs	r18, 0
    13de:	0c c0       	rjmp	.+24     	; 0x13f8 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    13e0:	2a 01       	movw	r4, r20
    13e2:	f2 e0       	ldi	r31, 0x02	; 2
    13e4:	4f 0e       	add	r4, r31
    13e6:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    13e8:	84 15       	cp	r24, r4
    13ea:	95 05       	cpc	r25, r5
    13ec:	58 f4       	brcc	.+22     	; 0x1404 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    13ee:	1e 82       	std	Y+6, r1	; 0x06
    13f0:	1f 82       	std	Y+7, r1	; 0x07
    13f2:	18 86       	std	Y+8, r1	; 0x08
    13f4:	19 86       	std	Y+9, r1	; 0x09
    13f6:	06 c0       	rjmp	.+12     	; 0x1404 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    13f8:	84 17       	cp	r24, r20
    13fa:	95 07       	cpc	r25, r21
    13fc:	10 f0       	brcs	.+4      	; 0x1402 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    13fe:	2a 01       	movw	r4, r20
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1402:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1404:	8e 81       	ldd	r24, Y+6	; 0x06
    1406:	9f 81       	ldd	r25, Y+7	; 0x07
    1408:	a8 85       	ldd	r26, Y+8	; 0x08
    140a:	b9 85       	ldd	r27, Y+9	; 0x09
    140c:	89 2b       	or	r24, r25
    140e:	8a 2b       	or	r24, r26
    1410:	8b 2b       	or	r24, r27
    1412:	09 f4       	brne	.+2      	; 0x1416 <xStreamBufferSend+0x88>
    1414:	36 c0       	rjmp	.+108    	; 0x1482 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1416:	ce 01       	movw	r24, r28
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	e7 d7       	rcall	.+4046   	; 0x23ea <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1422:	c4 01       	movw	r24, r8
    1424:	a2 df       	rcall	.-188    	; 0x136a <xStreamBufferSpacesAvailable>
    1426:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1428:	84 15       	cp	r24, r4
    142a:	95 05       	cpc	r25, r5
    142c:	38 f5       	brcc	.+78     	; 0x147c <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1438:	0e 94 86 12 	call	0x250c	; 0x250c <xTaskGetCurrentTaskHandle>
    143c:	f4 01       	movw	r30, r8
    143e:	93 87       	std	Z+11, r25	; 0x0b
    1440:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1446:	ae 80       	ldd	r10, Y+6	; 0x06
    1448:	bf 80       	ldd	r11, Y+7	; 0x07
    144a:	c8 84       	ldd	r12, Y+8	; 0x08
    144c:	d9 84       	ldd	r13, Y+9	; 0x09
    144e:	e1 2c       	mov	r14, r1
    1450:	f1 2c       	mov	r15, r1
    1452:	00 e0       	ldi	r16, 0x00	; 0
    1454:	10 e0       	ldi	r17, 0x00	; 0
    1456:	98 01       	movw	r18, r16
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	ba 01       	movw	r22, r20
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1464:	f4 01       	movw	r30, r8
    1466:	13 86       	std	Z+11, r1	; 0x0b
    1468:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    146a:	be 01       	movw	r22, r28
    146c:	6a 5f       	subi	r22, 0xFA	; 250
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	e1 d7       	rcall	.+4034   	; 0x2438 <xTaskCheckForTimeOut>
    1476:	88 23       	and	r24, r24
    1478:	89 f2       	breq	.-94     	; 0x141c <xStreamBufferSend+0x8e>
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63
                    break;
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1482:	61 2c       	mov	r6, r1
    1484:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1486:	61 14       	cp	r6, r1
    1488:	71 04       	cpc	r7, r1
    148a:	19 f4       	brne	.+6      	; 0x1492 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    148c:	c4 01       	movw	r24, r8
    148e:	6d df       	rcall	.-294    	; 0x136a <xStreamBufferSpacesAvailable>
    1490:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1492:	82 01       	movw	r16, r4
    1494:	93 01       	movw	r18, r6
    1496:	a1 01       	movw	r20, r2
    1498:	6a 85       	ldd	r22, Y+10	; 0x0a
    149a:	7b 85       	ldd	r23, Y+11	; 0x0b
    149c:	c4 01       	movw	r24, r8
    149e:	3e de       	rcall	.-900    	; 0x111c <prvWriteMessageToBuffer>
    14a0:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    14a2:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    14a4:	e9 f0       	breq	.+58     	; 0x14e0 <xStreamBufferSend+0x152>
    14a6:	c4 01       	movw	r24, r8
    14a8:	cd dd       	rcall	.-1126   	; 0x1044 <prvBytesInBuffer>
    14aa:	f4 01       	movw	r30, r8
    14ac:	26 81       	ldd	r18, Z+6	; 0x06
    14ae:	37 81       	ldd	r19, Z+7	; 0x07
    14b0:	82 17       	cp	r24, r18
    14b2:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    14b4:	a8 f0       	brcs	.+42     	; 0x14e0 <xStreamBufferSend+0x152>
    14b6:	90 d3       	rcall	.+1824   	; 0x1bd8 <vTaskSuspendAll>
    14b8:	f4 01       	movw	r30, r8
    14ba:	80 85       	ldd	r24, Z+8	; 0x08
    14bc:	91 85       	ldd	r25, Z+9	; 0x09
    14be:	89 2b       	or	r24, r25
    14c0:	71 f0       	breq	.+28     	; 0x14de <xStreamBufferSend+0x150>
    14c2:	80 85       	ldd	r24, Z+8	; 0x08
    14c4:	91 85       	ldd	r25, Z+9	; 0x09
    14c6:	e1 2c       	mov	r14, r1
    14c8:	f1 2c       	mov	r15, r1
    14ca:	00 e0       	ldi	r16, 0x00	; 0
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	a9 01       	movw	r20, r18
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	0e 94 9b 14 	call	0x2936	; 0x2936 <xTaskGenericNotify>
    14d8:	f4 01       	movw	r30, r8
    14da:	11 86       	std	Z+9, r1	; 0x09
    14dc:	10 86       	std	Z+8, r1	; 0x08
    14de:	bc d4       	rcall	.+2424   	; 0x1e58 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    14e0:	c6 01       	movw	r24, r12
    14e2:	2b 96       	adiw	r28, 0x0b	; 11
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	8f 90       	pop	r8
    1506:	7f 90       	pop	r7
    1508:	6f 90       	pop	r6
    150a:	5f 90       	pop	r5
    150c:	4f 90       	pop	r4
    150e:	3f 90       	pop	r3
    1510:	2f 90       	pop	r2
    1512:	08 95       	ret

00001514 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1514:	af 92       	push	r10
    1516:	bf 92       	push	r11
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	ec 01       	movw	r28, r24
    152a:	7b 01       	movw	r14, r22
    152c:	5a 01       	movw	r10, r20
    152e:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1530:	8e 85       	ldd	r24, Y+14	; 0x0e
    1532:	80 ff       	sbrs	r24, 0
    1534:	04 c0       	rjmp	.+8      	; 0x153e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1536:	8a 01       	movw	r16, r20
    1538:	0e 5f       	subi	r16, 0xFE	; 254
    153a:	1f 4f       	sbci	r17, 0xFF	; 255
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    153e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1540:	ce 01       	movw	r24, r28
    1542:	13 df       	rcall	.-474    	; 0x136a <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1544:	9c 01       	movw	r18, r24
    1546:	a5 01       	movw	r20, r10
    1548:	b7 01       	movw	r22, r14
    154a:	ce 01       	movw	r24, r28
    154c:	e7 dd       	rcall	.-1074   	; 0x111c <prvWriteMessageToBuffer>
    154e:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1550:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1552:	c1 f0       	breq	.+48     	; 0x1584 <xStreamBufferSendFromISR+0x70>
    1554:	ce 01       	movw	r24, r28
    1556:	76 dd       	rcall	.-1300   	; 0x1044 <prvBytesInBuffer>
    1558:	2e 81       	ldd	r18, Y+6	; 0x06
    155a:	3f 81       	ldd	r19, Y+7	; 0x07
    155c:	82 17       	cp	r24, r18
    155e:	93 07       	cpc	r25, r19
    1560:	88 f0       	brcs	.+34     	; 0x1584 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1562:	88 85       	ldd	r24, Y+8	; 0x08
    1564:	99 85       	ldd	r25, Y+9	; 0x09
    1566:	89 2b       	or	r24, r25
    1568:	69 f0       	breq	.+26     	; 0x1584 <xStreamBufferSendFromISR+0x70>
    156a:	88 85       	ldd	r24, Y+8	; 0x08
    156c:	99 85       	ldd	r25, Y+9	; 0x09
    156e:	e1 2c       	mov	r14, r1
    1570:	f1 2c       	mov	r15, r1
    1572:	00 e0       	ldi	r16, 0x00	; 0
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	a9 01       	movw	r20, r18
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	0e 94 92 15 	call	0x2b24	; 0x2b24 <xTaskGenericNotifyFromISR>
    1580:	19 86       	std	Y+9, r1	; 0x09
    1582:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1584:	c5 01       	movw	r24, r10
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	bf 90       	pop	r11
    1598:	af 90       	pop	r10
    159a:	08 95       	ret

0000159c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    159c:	4f 92       	push	r4
    159e:	5f 92       	push	r5
    15a0:	6f 92       	push	r6
    15a2:	7f 92       	push	r7
    15a4:	8f 92       	push	r8
    15a6:	9f 92       	push	r9
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	ec 01       	movw	r28, r24
    15be:	2b 01       	movw	r4, r22
    15c0:	3a 01       	movw	r6, r20
    15c2:	58 01       	movw	r10, r16
    15c4:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    15c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c8:	80 ff       	sbrs	r24, 0
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    15cc:	68 94       	set
    15ce:	88 24       	eor	r8, r8
    15d0:	81 f8       	bld	r8, 1
    15d2:	91 2c       	mov	r9, r1
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    15d6:	81 2c       	mov	r8, r1
    15d8:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    15da:	a1 14       	cp	r10, r1
    15dc:	b1 04       	cpc	r11, r1
    15de:	c1 04       	cpc	r12, r1
    15e0:	d1 04       	cpc	r13, r1
    15e2:	39 f1       	breq	.+78     	; 0x1632 <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15ea:	ce 01       	movw	r24, r28
    15ec:	2b dd       	rcall	.-1450   	; 0x1044 <prvBytesInBuffer>
    15ee:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    15f0:	88 16       	cp	r8, r24
    15f2:	99 06       	cpc	r9, r25
    15f4:	40 f0       	brcs	.+16     	; 0x1606 <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1600:	85 d7       	rcall	.+3850   	; 0x250c <xTaskGetCurrentTaskHandle>
    1602:	99 87       	std	Y+9, r25	; 0x09
    1604:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    160a:	8e 14       	cp	r8, r14
    160c:	9f 04       	cpc	r9, r15
    160e:	a0 f0       	brcs	.+40     	; 0x1638 <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1610:	e1 2c       	mov	r14, r1
    1612:	f1 2c       	mov	r15, r1
    1614:	00 e0       	ldi	r16, 0x00	; 0
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	98 01       	movw	r18, r16
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	ba 01       	movw	r22, r20
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1626:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1628:	18 86       	std	Y+8, r1	; 0x08
    162a:	ce 01       	movw	r24, r28
    162c:	0b dd       	rcall	.-1514   	; 0x1044 <prvBytesInBuffer>
    162e:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <xStreamBufferReceive+0x9c>
    1632:	ce 01       	movw	r24, r28
    1634:	07 dd       	rcall	.-1522   	; 0x1044 <prvBytesInBuffer>
    1636:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1638:	8e 14       	cp	r8, r14
    163a:	9f 04       	cpc	r9, r15
    163c:	e8 f4       	brcc	.+58     	; 0x1678 <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    163e:	84 01       	movw	r16, r8
    1640:	97 01       	movw	r18, r14
    1642:	a3 01       	movw	r20, r6
    1644:	b2 01       	movw	r22, r4
    1646:	ce 01       	movw	r24, r28
    1648:	fb dd       	rcall	.-1034   	; 0x1240 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    164a:	6c 01       	movw	r12, r24
    164c:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    164e:	b1 f0       	breq	.+44     	; 0x167c <xStreamBufferReceive+0xe0>
    1650:	c3 d2       	rcall	.+1414   	; 0x1bd8 <vTaskSuspendAll>
    1652:	8a 85       	ldd	r24, Y+10	; 0x0a
    1654:	9b 85       	ldd	r25, Y+11	; 0x0b
    1656:	89 2b       	or	r24, r25
    1658:	69 f0       	breq	.+26     	; 0x1674 <xStreamBufferReceive+0xd8>
    165a:	8a 85       	ldd	r24, Y+10	; 0x0a
    165c:	9b 85       	ldd	r25, Y+11	; 0x0b
    165e:	e1 2c       	mov	r14, r1
    1660:	f1 2c       	mov	r15, r1
    1662:	00 e0       	ldi	r16, 0x00	; 0
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	a9 01       	movw	r20, r18
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	0e 94 9b 14 	call	0x2936	; 0x2936 <xTaskGenericNotify>
    1670:	1b 86       	std	Y+11, r1	; 0x0b
    1672:	1a 86       	std	Y+10, r1	; 0x0a
    1674:	f1 d3       	rcall	.+2018   	; 0x1e58 <xTaskResumeAll>
    1676:	02 c0       	rjmp	.+4      	; 0x167c <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1678:	c1 2c       	mov	r12, r1
    167a:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    167c:	c6 01       	movw	r24, r12
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	9f 90       	pop	r9
    1694:	8f 90       	pop	r8
    1696:	7f 90       	pop	r7
    1698:	6f 90       	pop	r6
    169a:	5f 90       	pop	r5
    169c:	4f 90       	pop	r4
    169e:	08 95       	ret

000016a0 <prvResetNextTaskUnblockTime>:
    16a0:	e0 91 cd 16 	lds	r30, 0x16CD	; 0x8016cd <pxDelayedTaskList>
    16a4:	f0 91 ce 16 	lds	r31, 0x16CE	; 0x8016ce <pxDelayedTaskList+0x1>
    16a8:	80 81       	ld	r24, Z
    16aa:	81 11       	cpse	r24, r1
    16ac:	0c c0       	rjmp	.+24     	; 0x16c6 <prvResetNextTaskUnblockTime+0x26>
    16ae:	8f ef       	ldi	r24, 0xFF	; 255
    16b0:	9f ef       	ldi	r25, 0xFF	; 255
    16b2:	dc 01       	movw	r26, r24
    16b4:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <xNextTaskUnblockTime>
    16b8:	90 93 98 16 	sts	0x1698, r25	; 0x801698 <xNextTaskUnblockTime+0x1>
    16bc:	a0 93 99 16 	sts	0x1699, r26	; 0x801699 <xNextTaskUnblockTime+0x2>
    16c0:	b0 93 9a 16 	sts	0x169A, r27	; 0x80169a <xNextTaskUnblockTime+0x3>
    16c4:	08 95       	ret
    16c6:	e0 91 cd 16 	lds	r30, 0x16CD	; 0x8016cd <pxDelayedTaskList>
    16ca:	f0 91 ce 16 	lds	r31, 0x16CE	; 0x8016ce <pxDelayedTaskList+0x1>
    16ce:	07 80       	ldd	r0, Z+7	; 0x07
    16d0:	f0 85       	ldd	r31, Z+8	; 0x08
    16d2:	e0 2d       	mov	r30, r0
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	a2 81       	ldd	r26, Z+2	; 0x02
    16da:	b3 81       	ldd	r27, Z+3	; 0x03
    16dc:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <xNextTaskUnblockTime>
    16e0:	90 93 98 16 	sts	0x1698, r25	; 0x801698 <xNextTaskUnblockTime+0x1>
    16e4:	a0 93 99 16 	sts	0x1699, r26	; 0x801699 <xNextTaskUnblockTime+0x2>
    16e8:	b0 93 9a 16 	sts	0x169A, r27	; 0x80169a <xNextTaskUnblockTime+0x3>
    16ec:	08 95       	ret

000016ee <prvDeleteTCB>:
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	ec 01       	movw	r28, r24
    16f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <vPortFree>
    16fc:	ce 01       	movw	r24, r28
    16fe:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <vPortFree>
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <prvInitialiseNewTask>:
    1708:	4f 92       	push	r4
    170a:	5f 92       	push	r5
    170c:	6f 92       	push	r6
    170e:	7f 92       	push	r7
    1710:	8f 92       	push	r8
    1712:	9f 92       	push	r9
    1714:	af 92       	push	r10
    1716:	bf 92       	push	r11
    1718:	cf 92       	push	r12
    171a:	df 92       	push	r13
    171c:	ef 92       	push	r14
    171e:	ff 92       	push	r15
    1720:	0f 93       	push	r16
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	2c 01       	movw	r4, r24
    1728:	5b 01       	movw	r10, r22
    172a:	4a 01       	movw	r8, r20
    172c:	39 01       	movw	r6, r18
    172e:	e6 01       	movw	r28, r12
    1730:	65 ea       	ldi	r22, 0xA5	; 165
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1738:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <memset>
    173c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1740:	21 e0       	ldi	r18, 0x01	; 1
    1742:	82 1a       	sub	r8, r18
    1744:	91 08       	sbc	r9, r1
    1746:	88 0e       	add	r8, r24
    1748:	99 1e       	adc	r9, r25
    174a:	a1 14       	cp	r10, r1
    174c:	b1 04       	cpc	r11, r1
    174e:	89 f4       	brne	.+34     	; 0x1772 <prvInitialiseNewTask+0x6a>
    1750:	15 c0       	rjmp	.+42     	; 0x177c <prvInitialiseNewTask+0x74>
    1752:	82 2f       	mov	r24, r18
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	f5 01       	movw	r30, r10
    1758:	e8 0f       	add	r30, r24
    175a:	f9 1f       	adc	r31, r25
    175c:	30 81       	ld	r19, Z
    175e:	de 01       	movw	r26, r28
    1760:	a8 0f       	add	r26, r24
    1762:	b9 1f       	adc	r27, r25
    1764:	5d 96       	adiw	r26, 0x1d	; 29
    1766:	3c 93       	st	X, r19
    1768:	80 81       	ld	r24, Z
    176a:	88 23       	and	r24, r24
    176c:	29 f0       	breq	.+10     	; 0x1778 <prvInitialiseNewTask+0x70>
    176e:	2f 5f       	subi	r18, 0xFF	; 255
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <prvInitialiseNewTask+0x6c>
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	20 31       	cpi	r18, 0x10	; 16
    1776:	68 f3       	brcs	.-38     	; 0x1752 <prvInitialiseNewTask+0x4a>
    1778:	1c a6       	std	Y+44, r1	; 0x2c
    177a:	01 c0       	rjmp	.+2      	; 0x177e <prvInitialiseNewTask+0x76>
    177c:	1d 8e       	std	Y+29, r1	; 0x1d
    177e:	0a 30       	cpi	r16, 0x0A	; 10
    1780:	08 f0       	brcs	.+2      	; 0x1784 <prvInitialiseNewTask+0x7c>
    1782:	09 e0       	ldi	r16, 0x09	; 9
    1784:	0a 8f       	std	Y+26, r16	; 0x1a
    1786:	0d a7       	std	Y+45, r16	; 0x2d
    1788:	1e a6       	std	Y+46, r1	; 0x2e
    178a:	ce 01       	movw	r24, r28
    178c:	02 96       	adiw	r24, 0x02	; 2
    178e:	0e 94 24 03 	call	0x648	; 0x648 <vListInitialiseItem>
    1792:	ce 01       	movw	r24, r28
    1794:	0e 96       	adiw	r24, 0x0e	; 14
    1796:	0e 94 24 03 	call	0x648	; 0x648 <vListInitialiseItem>
    179a:	db 87       	std	Y+11, r29	; 0x0b
    179c:	ca 87       	std	Y+10, r28	; 0x0a
    179e:	8a e0       	ldi	r24, 0x0A	; 10
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a0 e0       	ldi	r26, 0x00	; 0
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	80 1b       	sub	r24, r16
    17a8:	91 09       	sbc	r25, r1
    17aa:	a1 09       	sbc	r26, r1
    17ac:	b1 09       	sbc	r27, r1
    17ae:	8e 87       	std	Y+14, r24	; 0x0e
    17b0:	9f 87       	std	Y+15, r25	; 0x0f
    17b2:	a8 8b       	std	Y+16, r26	; 0x10
    17b4:	b9 8b       	std	Y+17, r27	; 0x11
    17b6:	df 8b       	std	Y+23, r29	; 0x17
    17b8:	ce 8b       	std	Y+22, r28	; 0x16
    17ba:	84 e0       	ldi	r24, 0x04	; 4
    17bc:	fe 01       	movw	r30, r28
    17be:	bf 96       	adiw	r30, 0x2f	; 47
    17c0:	df 01       	movw	r26, r30
    17c2:	1d 92       	st	X+, r1
    17c4:	8a 95       	dec	r24
    17c6:	e9 f7       	brne	.-6      	; 0x17c2 <prvInitialiseNewTask+0xba>
    17c8:	1b aa       	std	Y+51, r1	; 0x33
    17ca:	a3 01       	movw	r20, r6
    17cc:	b2 01       	movw	r22, r4
    17ce:	c4 01       	movw	r24, r8
    17d0:	0e 94 98 03 	call	0x730	; 0x730 <pxPortInitialiseStack>
    17d4:	99 83       	std	Y+1, r25	; 0x01
    17d6:	88 83       	st	Y, r24
    17d8:	e1 14       	cp	r14, r1
    17da:	f1 04       	cpc	r15, r1
    17dc:	19 f0       	breq	.+6      	; 0x17e4 <prvInitialiseNewTask+0xdc>
    17de:	f7 01       	movw	r30, r14
    17e0:	d1 83       	std	Z+1, r29	; 0x01
    17e2:	c0 83       	st	Z, r28
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	0f 91       	pop	r16
    17ea:	ff 90       	pop	r15
    17ec:	ef 90       	pop	r14
    17ee:	df 90       	pop	r13
    17f0:	cf 90       	pop	r12
    17f2:	bf 90       	pop	r11
    17f4:	af 90       	pop	r10
    17f6:	9f 90       	pop	r9
    17f8:	8f 90       	pop	r8
    17fa:	7f 90       	pop	r7
    17fc:	6f 90       	pop	r6
    17fe:	5f 90       	pop	r5
    1800:	4f 90       	pop	r4
    1802:	08 95       	ret

00001804 <prvInitialiseTaskLists>:
    1804:	cf 93       	push	r28
    1806:	c0 e0       	ldi	r28, 0x00	; 0
    1808:	09 c0       	rjmp	.+18     	; 0x181c <prvInitialiseTaskLists+0x18>
    180a:	2b e0       	ldi	r18, 0x0B	; 11
    180c:	c2 9f       	mul	r28, r18
    180e:	c0 01       	movw	r24, r0
    1810:	11 24       	eor	r1, r1
    1812:	8b 51       	subi	r24, 0x1B	; 27
    1814:	99 4e       	sbci	r25, 0xE9	; 233
    1816:	0e 94 13 03 	call	0x626	; 0x626 <vListInitialise>
    181a:	cf 5f       	subi	r28, 0xFF	; 255
    181c:	ca 30       	cpi	r28, 0x0A	; 10
    181e:	a8 f3       	brcs	.-22     	; 0x180a <prvInitialiseTaskLists+0x6>
    1820:	8a ed       	ldi	r24, 0xDA	; 218
    1822:	96 e1       	ldi	r25, 0x16	; 22
    1824:	0e 94 13 03 	call	0x626	; 0x626 <vListInitialise>
    1828:	8f ec       	ldi	r24, 0xCF	; 207
    182a:	96 e1       	ldi	r25, 0x16	; 22
    182c:	0e 94 13 03 	call	0x626	; 0x626 <vListInitialise>
    1830:	80 ec       	ldi	r24, 0xC0	; 192
    1832:	96 e1       	ldi	r25, 0x16	; 22
    1834:	0e 94 13 03 	call	0x626	; 0x626 <vListInitialise>
    1838:	85 eb       	ldi	r24, 0xB5	; 181
    183a:	96 e1       	ldi	r25, 0x16	; 22
    183c:	0e 94 13 03 	call	0x626	; 0x626 <vListInitialise>
    1840:	89 ea       	ldi	r24, 0xA9	; 169
    1842:	96 e1       	ldi	r25, 0x16	; 22
    1844:	0e 94 13 03 	call	0x626	; 0x626 <vListInitialise>
    1848:	8a ed       	ldi	r24, 0xDA	; 218
    184a:	96 e1       	ldi	r25, 0x16	; 22
    184c:	90 93 ce 16 	sts	0x16CE, r25	; 0x8016ce <pxDelayedTaskList+0x1>
    1850:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <pxDelayedTaskList>
    1854:	8f ec       	ldi	r24, 0xCF	; 207
    1856:	96 e1       	ldi	r25, 0x16	; 22
    1858:	90 93 cc 16 	sts	0x16CC, r25	; 0x8016cc <pxOverflowDelayedTaskList+0x1>
    185c:	80 93 cb 16 	sts	0x16CB, r24	; 0x8016cb <pxOverflowDelayedTaskList>
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <prvAddNewTaskToReadyList>:
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	ec 01       	movw	r28, r24
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	0f 92       	push	r0
    1870:	80 91 a8 16 	lds	r24, 0x16A8	; 0x8016a8 <uxCurrentNumberOfTasks>
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	80 93 a8 16 	sts	0x16A8, r24	; 0x8016a8 <uxCurrentNumberOfTasks>
    187a:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <pxCurrentTCB>
    187e:	90 91 54 17 	lds	r25, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1882:	89 2b       	or	r24, r25
    1884:	51 f4       	brne	.+20     	; 0x189a <prvAddNewTaskToReadyList+0x36>
    1886:	d0 93 54 17 	sts	0x1754, r29	; 0x801754 <pxCurrentTCB+0x1>
    188a:	c0 93 53 17 	sts	0x1753, r28	; 0x801753 <pxCurrentTCB>
    188e:	80 91 a8 16 	lds	r24, 0x16A8	; 0x8016a8 <uxCurrentNumberOfTasks>
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	91 f4       	brne	.+36     	; 0x18ba <prvAddNewTaskToReadyList+0x56>
    1896:	b6 df       	rcall	.-148    	; 0x1804 <prvInitialiseTaskLists>
    1898:	10 c0       	rjmp	.+32     	; 0x18ba <prvAddNewTaskToReadyList+0x56>
    189a:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <xSchedulerRunning>
    189e:	81 11       	cpse	r24, r1
    18a0:	0c c0       	rjmp	.+24     	; 0x18ba <prvAddNewTaskToReadyList+0x56>
    18a2:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    18a6:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    18aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    18ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18ae:	89 17       	cp	r24, r25
    18b0:	20 f0       	brcs	.+8      	; 0x18ba <prvAddNewTaskToReadyList+0x56>
    18b2:	d0 93 54 17 	sts	0x1754, r29	; 0x801754 <pxCurrentTCB+0x1>
    18b6:	c0 93 53 17 	sts	0x1753, r28	; 0x801753 <pxCurrentTCB>
    18ba:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <uxTaskNumber>
    18be:	8f 5f       	subi	r24, 0xFF	; 255
    18c0:	80 93 9b 16 	sts	0x169B, r24	; 0x80169b <uxTaskNumber>
    18c4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    18c6:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <uxTopReadyPriority>
    18ca:	8e 17       	cp	r24, r30
    18cc:	10 f4       	brcc	.+4      	; 0x18d2 <prvAddNewTaskToReadyList+0x6e>
    18ce:	e0 93 a3 16 	sts	0x16A3, r30	; 0x8016a3 <uxTopReadyPriority>
    18d2:	8b e0       	ldi	r24, 0x0B	; 11
    18d4:	8e 9f       	mul	r24, r30
    18d6:	f0 01       	movw	r30, r0
    18d8:	11 24       	eor	r1, r1
    18da:	eb 51       	subi	r30, 0x1B	; 27
    18dc:	f9 4e       	sbci	r31, 0xE9	; 233
    18de:	01 80       	ldd	r0, Z+1	; 0x01
    18e0:	f2 81       	ldd	r31, Z+2	; 0x02
    18e2:	e0 2d       	mov	r30, r0
    18e4:	ff 83       	std	Y+7, r31	; 0x07
    18e6:	ee 83       	std	Y+6, r30	; 0x06
    18e8:	26 81       	ldd	r18, Z+6	; 0x06
    18ea:	37 81       	ldd	r19, Z+7	; 0x07
    18ec:	39 87       	std	Y+9, r19	; 0x09
    18ee:	28 87       	std	Y+8, r18	; 0x08
    18f0:	a6 81       	ldd	r26, Z+6	; 0x06
    18f2:	b7 81       	ldd	r27, Z+7	; 0x07
    18f4:	9e 01       	movw	r18, r28
    18f6:	2e 5f       	subi	r18, 0xFE	; 254
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	15 96       	adiw	r26, 0x05	; 5
    18fc:	3c 93       	st	X, r19
    18fe:	2e 93       	st	-X, r18
    1900:	14 97       	sbiw	r26, 0x04	; 4
    1902:	37 83       	std	Z+7, r19	; 0x07
    1904:	26 83       	std	Z+6, r18	; 0x06
    1906:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1908:	8e 9f       	mul	r24, r30
    190a:	f0 01       	movw	r30, r0
    190c:	11 24       	eor	r1, r1
    190e:	eb 51       	subi	r30, 0x1B	; 27
    1910:	f9 4e       	sbci	r31, 0xE9	; 233
    1912:	fd 87       	std	Y+13, r31	; 0x0d
    1914:	ec 87       	std	Y+12, r30	; 0x0c
    1916:	80 81       	ld	r24, Z
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	80 83       	st	Z, r24
    191c:	0f 90       	pop	r0
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <xSchedulerRunning>
    1924:	88 23       	and	r24, r24
    1926:	51 f0       	breq	.+20     	; 0x193c <prvAddNewTaskToReadyList+0xd8>
    1928:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    192c:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1930:	92 8d       	ldd	r25, Z+26	; 0x1a
    1932:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1934:	98 17       	cp	r25, r24
    1936:	10 f4       	brcc	.+4      	; 0x193c <prvAddNewTaskToReadyList+0xd8>
    1938:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vPortYield>
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	08 95       	ret

00001942 <prvCheckTasksWaitingTermination>:
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	1b c0       	rjmp	.+54     	; 0x197e <prvCheckTasksWaitingTermination+0x3c>
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	0f 92       	push	r0
    194e:	e0 91 bc 16 	lds	r30, 0x16BC	; 0x8016bc <xTasksWaitingTermination+0x7>
    1952:	f0 91 bd 16 	lds	r31, 0x16BD	; 0x8016bd <xTasksWaitingTermination+0x8>
    1956:	c0 85       	ldd	r28, Z+8	; 0x08
    1958:	d1 85       	ldd	r29, Z+9	; 0x09
    195a:	ce 01       	movw	r24, r28
    195c:	02 96       	adiw	r24, 0x02	; 2
    195e:	0e 94 65 03 	call	0x6ca	; 0x6ca <uxListRemove>
    1962:	80 91 a8 16 	lds	r24, 0x16A8	; 0x8016a8 <uxCurrentNumberOfTasks>
    1966:	81 50       	subi	r24, 0x01	; 1
    1968:	80 93 a8 16 	sts	0x16A8, r24	; 0x8016a8 <uxCurrentNumberOfTasks>
    196c:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <uxDeletedTasksWaitingCleanUp>
    1970:	81 50       	subi	r24, 0x01	; 1
    1972:	80 93 b4 16 	sts	0x16B4, r24	; 0x8016b4 <uxDeletedTasksWaitingCleanUp>
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	ce 01       	movw	r24, r28
    197c:	b8 de       	rcall	.-656    	; 0x16ee <prvDeleteTCB>
    197e:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <uxDeletedTasksWaitingCleanUp>
    1982:	81 11       	cpse	r24, r1
    1984:	e1 cf       	rjmp	.-62     	; 0x1948 <prvCheckTasksWaitingTermination+0x6>
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <prvAddCurrentTaskToDelayedList>:
    198c:	8f 92       	push	r8
    198e:	9f 92       	push	r9
    1990:	af 92       	push	r10
    1992:	bf 92       	push	r11
    1994:	cf 92       	push	r12
    1996:	df 92       	push	r13
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	6b 01       	movw	r12, r22
    19a2:	7c 01       	movw	r14, r24
    19a4:	c4 2f       	mov	r28, r20
    19a6:	80 90 a4 16 	lds	r8, 0x16A4	; 0x8016a4 <xTickCount>
    19aa:	90 90 a5 16 	lds	r9, 0x16A5	; 0x8016a5 <xTickCount+0x1>
    19ae:	a0 90 a6 16 	lds	r10, 0x16A6	; 0x8016a6 <xTickCount+0x2>
    19b2:	b0 90 a7 16 	lds	r11, 0x16A7	; 0x8016a7 <xTickCount+0x3>
    19b6:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <pxCurrentTCB>
    19ba:	90 91 54 17 	lds	r25, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    19be:	02 96       	adiw	r24, 0x02	; 2
    19c0:	0e 94 65 03 	call	0x6ca	; 0x6ca <uxListRemove>
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	c8 16       	cp	r12, r24
    19c8:	d8 06       	cpc	r13, r24
    19ca:	e8 06       	cpc	r14, r24
    19cc:	f8 06       	cpc	r15, r24
    19ce:	b1 f5       	brne	.+108    	; 0x1a3c <prvAddCurrentTaskToDelayedList+0xb0>
    19d0:	cc 23       	and	r28, r28
    19d2:	a1 f1       	breq	.+104    	; 0x1a3c <prvAddCurrentTaskToDelayedList+0xb0>
    19d4:	e9 ea       	ldi	r30, 0xA9	; 169
    19d6:	f6 e1       	ldi	r31, 0x16	; 22
    19d8:	a1 81       	ldd	r26, Z+1	; 0x01
    19da:	b2 81       	ldd	r27, Z+2	; 0x02
    19dc:	c0 91 53 17 	lds	r28, 0x1753	; 0x801753 <pxCurrentTCB>
    19e0:	d0 91 54 17 	lds	r29, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    19e4:	bf 83       	std	Y+7, r27	; 0x07
    19e6:	ae 83       	std	Y+6, r26	; 0x06
    19e8:	c0 91 53 17 	lds	r28, 0x1753	; 0x801753 <pxCurrentTCB>
    19ec:	d0 91 54 17 	lds	r29, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    19f0:	16 96       	adiw	r26, 0x06	; 6
    19f2:	8d 91       	ld	r24, X+
    19f4:	9c 91       	ld	r25, X
    19f6:	17 97       	sbiw	r26, 0x07	; 7
    19f8:	99 87       	std	Y+9, r25	; 0x09
    19fa:	88 87       	std	Y+8, r24	; 0x08
    19fc:	16 96       	adiw	r26, 0x06	; 6
    19fe:	cd 91       	ld	r28, X+
    1a00:	dc 91       	ld	r29, X
    1a02:	17 97       	sbiw	r26, 0x07	; 7
    1a04:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <pxCurrentTCB>
    1a08:	90 91 54 17 	lds	r25, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1a0c:	02 96       	adiw	r24, 0x02	; 2
    1a0e:	9d 83       	std	Y+5, r25	; 0x05
    1a10:	8c 83       	std	Y+4, r24	; 0x04
    1a12:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <pxCurrentTCB>
    1a16:	90 91 54 17 	lds	r25, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1a1a:	02 96       	adiw	r24, 0x02	; 2
    1a1c:	17 96       	adiw	r26, 0x07	; 7
    1a1e:	9c 93       	st	X, r25
    1a20:	8e 93       	st	-X, r24
    1a22:	16 97       	sbiw	r26, 0x06	; 6
    1a24:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
    1a28:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1a2c:	1d 96       	adiw	r26, 0x0d	; 13
    1a2e:	fc 93       	st	X, r31
    1a30:	ee 93       	st	-X, r30
    1a32:	1c 97       	sbiw	r26, 0x0c	; 12
    1a34:	80 81       	ld	r24, Z
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	80 83       	st	Z, r24
    1a3a:	3f c0       	rjmp	.+126    	; 0x1aba <prvAddCurrentTaskToDelayedList+0x12e>
    1a3c:	c8 0c       	add	r12, r8
    1a3e:	d9 1c       	adc	r13, r9
    1a40:	ea 1c       	adc	r14, r10
    1a42:	fb 1c       	adc	r15, r11
    1a44:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    1a48:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1a4c:	c2 82       	std	Z+2, r12	; 0x02
    1a4e:	d3 82       	std	Z+3, r13	; 0x03
    1a50:	e4 82       	std	Z+4, r14	; 0x04
    1a52:	f5 82       	std	Z+5, r15	; 0x05
    1a54:	c8 14       	cp	r12, r8
    1a56:	d9 04       	cpc	r13, r9
    1a58:	ea 04       	cpc	r14, r10
    1a5a:	fb 04       	cpc	r15, r11
    1a5c:	68 f4       	brcc	.+26     	; 0x1a78 <prvAddCurrentTaskToDelayedList+0xec>
    1a5e:	60 91 53 17 	lds	r22, 0x1753	; 0x801753 <pxCurrentTCB>
    1a62:	70 91 54 17 	lds	r23, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1a66:	80 91 cb 16 	lds	r24, 0x16CB	; 0x8016cb <pxOverflowDelayedTaskList>
    1a6a:	90 91 cc 16 	lds	r25, 0x16CC	; 0x8016cc <pxOverflowDelayedTaskList+0x1>
    1a6e:	6e 5f       	subi	r22, 0xFE	; 254
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	0e 94 28 03 	call	0x650	; 0x650 <vListInsert>
    1a76:	21 c0       	rjmp	.+66     	; 0x1aba <prvAddCurrentTaskToDelayedList+0x12e>
    1a78:	60 91 53 17 	lds	r22, 0x1753	; 0x801753 <pxCurrentTCB>
    1a7c:	70 91 54 17 	lds	r23, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1a80:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <pxDelayedTaskList>
    1a84:	90 91 ce 16 	lds	r25, 0x16CE	; 0x8016ce <pxDelayedTaskList+0x1>
    1a88:	6e 5f       	subi	r22, 0xFE	; 254
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	0e 94 28 03 	call	0x650	; 0x650 <vListInsert>
    1a90:	80 91 97 16 	lds	r24, 0x1697	; 0x801697 <xNextTaskUnblockTime>
    1a94:	90 91 98 16 	lds	r25, 0x1698	; 0x801698 <xNextTaskUnblockTime+0x1>
    1a98:	a0 91 99 16 	lds	r26, 0x1699	; 0x801699 <xNextTaskUnblockTime+0x2>
    1a9c:	b0 91 9a 16 	lds	r27, 0x169A	; 0x80169a <xNextTaskUnblockTime+0x3>
    1aa0:	c8 16       	cp	r12, r24
    1aa2:	d9 06       	cpc	r13, r25
    1aa4:	ea 06       	cpc	r14, r26
    1aa6:	fb 06       	cpc	r15, r27
    1aa8:	40 f4       	brcc	.+16     	; 0x1aba <prvAddCurrentTaskToDelayedList+0x12e>
    1aaa:	c0 92 97 16 	sts	0x1697, r12	; 0x801697 <xNextTaskUnblockTime>
    1aae:	d0 92 98 16 	sts	0x1698, r13	; 0x801698 <xNextTaskUnblockTime+0x1>
    1ab2:	e0 92 99 16 	sts	0x1699, r14	; 0x801699 <xNextTaskUnblockTime+0x2>
    1ab6:	f0 92 9a 16 	sts	0x169A, r15	; 0x80169a <xNextTaskUnblockTime+0x3>
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	bf 90       	pop	r11
    1ac8:	af 90       	pop	r10
    1aca:	9f 90       	pop	r9
    1acc:	8f 90       	pop	r8
    1ace:	08 95       	ret

00001ad0 <xTaskCreate>:
    1ad0:	2f 92       	push	r2
    1ad2:	3f 92       	push	r3
    1ad4:	4f 92       	push	r4
    1ad6:	5f 92       	push	r5
    1ad8:	6f 92       	push	r6
    1ada:	7f 92       	push	r7
    1adc:	8f 92       	push	r8
    1ade:	9f 92       	push	r9
    1ae0:	af 92       	push	r10
    1ae2:	bf 92       	push	r11
    1ae4:	cf 92       	push	r12
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	ff 92       	push	r15
    1aec:	0f 93       	push	r16
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	3c 01       	movw	r6, r24
    1af4:	1b 01       	movw	r2, r22
    1af6:	4a 01       	movw	r8, r20
    1af8:	29 01       	movw	r4, r18
    1afa:	ca 01       	movw	r24, r20
    1afc:	0e 94 28 02 	call	0x450	; 0x450 <pvPortMalloc>
    1b00:	6c 01       	movw	r12, r24
    1b02:	89 2b       	or	r24, r25
    1b04:	71 f0       	breq	.+28     	; 0x1b22 <xTaskCreate+0x52>
    1b06:	84 e3       	ldi	r24, 0x34	; 52
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 28 02 	call	0x450	; 0x450 <pvPortMalloc>
    1b0e:	ec 01       	movw	r28, r24
    1b10:	89 2b       	or	r24, r25
    1b12:	19 f0       	breq	.+6      	; 0x1b1a <xTaskCreate+0x4a>
    1b14:	dc 8e       	std	Y+28, r13	; 0x1c
    1b16:	cb 8e       	std	Y+27, r12	; 0x1b
    1b18:	06 c0       	rjmp	.+12     	; 0x1b26 <xTaskCreate+0x56>
    1b1a:	c6 01       	movw	r24, r12
    1b1c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <vPortFree>
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <xTaskCreate+0x56>
    1b22:	c0 e0       	ldi	r28, 0x00	; 0
    1b24:	d0 e0       	ldi	r29, 0x00	; 0
    1b26:	20 97       	sbiw	r28, 0x00	; 0
    1b28:	61 f0       	breq	.+24     	; 0x1b42 <xTaskCreate+0x72>
    1b2a:	a1 2c       	mov	r10, r1
    1b2c:	b1 2c       	mov	r11, r1
    1b2e:	6e 01       	movw	r12, r28
    1b30:	92 01       	movw	r18, r4
    1b32:	a4 01       	movw	r20, r8
    1b34:	b1 01       	movw	r22, r2
    1b36:	c3 01       	movw	r24, r6
    1b38:	e7 dd       	rcall	.-1074   	; 0x1708 <prvInitialiseNewTask>
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	93 de       	rcall	.-730    	; 0x1864 <prvAddNewTaskToReadyList>
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <xTaskCreate+0x74>
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	0f 91       	pop	r16
    1b4a:	ff 90       	pop	r15
    1b4c:	ef 90       	pop	r14
    1b4e:	df 90       	pop	r13
    1b50:	cf 90       	pop	r12
    1b52:	bf 90       	pop	r11
    1b54:	af 90       	pop	r10
    1b56:	9f 90       	pop	r9
    1b58:	8f 90       	pop	r8
    1b5a:	7f 90       	pop	r7
    1b5c:	6f 90       	pop	r6
    1b5e:	5f 90       	pop	r5
    1b60:	4f 90       	pop	r4
    1b62:	3f 90       	pop	r3
    1b64:	2f 90       	pop	r2
    1b66:	08 95       	ret

00001b68 <vTaskStartScheduler>:
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	0f 2e       	mov	r0, r31
    1b70:	f5 e9       	ldi	r31, 0x95	; 149
    1b72:	ef 2e       	mov	r14, r31
    1b74:	f6 e1       	ldi	r31, 0x16	; 22
    1b76:	ff 2e       	mov	r15, r31
    1b78:	f0 2d       	mov	r31, r0
    1b7a:	00 e0       	ldi	r16, 0x00	; 0
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 ec       	ldi	r20, 0xC0	; 192
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	6a e9       	ldi	r22, 0x9A	; 154
    1b86:	72 e0       	ldi	r23, 0x02	; 2
    1b88:	8d ec       	ldi	r24, 0xCD	; 205
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a1 df       	rcall	.-190    	; 0x1ad0 <xTaskCreate>
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	11 f4       	brne	.+4      	; 0x1b96 <vTaskStartScheduler+0x2e>
    1b92:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <xTimerCreateTimerTask>
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	c9 f4       	brne	.+50     	; 0x1bcc <vTaskStartScheduler+0x64>
    1b9a:	f8 94       	cli
    1b9c:	8f ef       	ldi	r24, 0xFF	; 255
    1b9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <xNextTaskUnblockTime>
    1ba6:	90 93 98 16 	sts	0x1698, r25	; 0x801698 <xNextTaskUnblockTime+0x1>
    1baa:	a0 93 99 16 	sts	0x1699, r26	; 0x801699 <xNextTaskUnblockTime+0x2>
    1bae:	b0 93 9a 16 	sts	0x169A, r27	; 0x80169a <xNextTaskUnblockTime+0x3>
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <xSchedulerRunning>
    1bb8:	10 92 a4 16 	sts	0x16A4, r1	; 0x8016a4 <xTickCount>
    1bbc:	10 92 a5 16 	sts	0x16A5, r1	; 0x8016a5 <xTickCount+0x1>
    1bc0:	10 92 a6 16 	sts	0x16A6, r1	; 0x8016a6 <xTickCount+0x2>
    1bc4:	10 92 a7 16 	sts	0x16A7, r1	; 0x8016a7 <xTickCount+0x3>
    1bc8:	0e 94 af 03 	call	0x75e	; 0x75e <xPortStartScheduler>
    1bcc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1bd0:	0f 91       	pop	r16
    1bd2:	ff 90       	pop	r15
    1bd4:	ef 90       	pop	r14
    1bd6:	08 95       	ret

00001bd8 <vTaskSuspendAll>:
    1bd8:	80 91 94 16 	lds	r24, 0x1694	; 0x801694 <uxSchedulerSuspended>
    1bdc:	8f 5f       	subi	r24, 0xFF	; 255
    1bde:	80 93 94 16 	sts	0x1694, r24	; 0x801694 <uxSchedulerSuspended>
    1be2:	08 95       	ret

00001be4 <xTaskGetTickCount>:
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	0f 92       	push	r0
    1bea:	60 91 a4 16 	lds	r22, 0x16A4	; 0x8016a4 <xTickCount>
    1bee:	70 91 a5 16 	lds	r23, 0x16A5	; 0x8016a5 <xTickCount+0x1>
    1bf2:	80 91 a6 16 	lds	r24, 0x16A6	; 0x8016a6 <xTickCount+0x2>
    1bf6:	90 91 a7 16 	lds	r25, 0x16A7	; 0x8016a7 <xTickCount+0x3>
    1bfa:	0f 90       	pop	r0
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	08 95       	ret

00001c00 <xTaskIncrementTick>:
    1c00:	cf 92       	push	r12
    1c02:	df 92       	push	r13
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	80 91 94 16 	lds	r24, 0x1694	; 0x801694 <uxSchedulerSuspended>
    1c10:	81 11       	cpse	r24, r1
    1c12:	05 c1       	rjmp	.+522    	; 0x1e1e <xTaskIncrementTick+0x21e>
    1c14:	c0 90 a4 16 	lds	r12, 0x16A4	; 0x8016a4 <xTickCount>
    1c18:	d0 90 a5 16 	lds	r13, 0x16A5	; 0x8016a5 <xTickCount+0x1>
    1c1c:	e0 90 a6 16 	lds	r14, 0x16A6	; 0x8016a6 <xTickCount+0x2>
    1c20:	f0 90 a7 16 	lds	r15, 0x16A7	; 0x8016a7 <xTickCount+0x3>
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	c8 1a       	sub	r12, r24
    1c28:	d8 0a       	sbc	r13, r24
    1c2a:	e8 0a       	sbc	r14, r24
    1c2c:	f8 0a       	sbc	r15, r24
    1c2e:	c0 92 a4 16 	sts	0x16A4, r12	; 0x8016a4 <xTickCount>
    1c32:	d0 92 a5 16 	sts	0x16A5, r13	; 0x8016a5 <xTickCount+0x1>
    1c36:	e0 92 a6 16 	sts	0x16A6, r14	; 0x8016a6 <xTickCount+0x2>
    1c3a:	f0 92 a7 16 	sts	0x16A7, r15	; 0x8016a7 <xTickCount+0x3>
    1c3e:	c1 14       	cp	r12, r1
    1c40:	d1 04       	cpc	r13, r1
    1c42:	e1 04       	cpc	r14, r1
    1c44:	f1 04       	cpc	r15, r1
    1c46:	b1 f4       	brne	.+44     	; 0x1c74 <xTaskIncrementTick+0x74>
    1c48:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <pxDelayedTaskList>
    1c4c:	90 91 ce 16 	lds	r25, 0x16CE	; 0x8016ce <pxDelayedTaskList+0x1>
    1c50:	20 91 cb 16 	lds	r18, 0x16CB	; 0x8016cb <pxOverflowDelayedTaskList>
    1c54:	30 91 cc 16 	lds	r19, 0x16CC	; 0x8016cc <pxOverflowDelayedTaskList+0x1>
    1c58:	30 93 ce 16 	sts	0x16CE, r19	; 0x8016ce <pxDelayedTaskList+0x1>
    1c5c:	20 93 cd 16 	sts	0x16CD, r18	; 0x8016cd <pxDelayedTaskList>
    1c60:	90 93 cc 16 	sts	0x16CC, r25	; 0x8016cc <pxOverflowDelayedTaskList+0x1>
    1c64:	80 93 cb 16 	sts	0x16CB, r24	; 0x8016cb <pxOverflowDelayedTaskList>
    1c68:	80 91 9c 16 	lds	r24, 0x169C	; 0x80169c <xNumOfOverflows>
    1c6c:	8f 5f       	subi	r24, 0xFF	; 255
    1c6e:	80 93 9c 16 	sts	0x169C, r24	; 0x80169c <xNumOfOverflows>
    1c72:	16 dd       	rcall	.-1492   	; 0x16a0 <prvResetNextTaskUnblockTime>
    1c74:	80 91 97 16 	lds	r24, 0x1697	; 0x801697 <xNextTaskUnblockTime>
    1c78:	90 91 98 16 	lds	r25, 0x1698	; 0x801698 <xNextTaskUnblockTime+0x1>
    1c7c:	a0 91 99 16 	lds	r26, 0x1699	; 0x801699 <xNextTaskUnblockTime+0x2>
    1c80:	b0 91 9a 16 	lds	r27, 0x169A	; 0x80169a <xNextTaskUnblockTime+0x3>
    1c84:	c8 16       	cp	r12, r24
    1c86:	d9 06       	cpc	r13, r25
    1c88:	ea 06       	cpc	r14, r26
    1c8a:	fb 06       	cpc	r15, r27
    1c8c:	20 f4       	brcc	.+8      	; 0x1c96 <xTaskIncrementTick+0x96>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	b2 c0       	rjmp	.+356    	; 0x1df6 <xTaskIncrementTick+0x1f6>
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	01 c0       	rjmp	.+2      	; 0x1c98 <xTaskIncrementTick+0x98>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	e0 91 cd 16 	lds	r30, 0x16CD	; 0x8016cd <pxDelayedTaskList>
    1c9c:	f0 91 ce 16 	lds	r31, 0x16CE	; 0x8016ce <pxDelayedTaskList+0x1>
    1ca0:	90 81       	ld	r25, Z
    1ca2:	91 11       	cpse	r25, r1
    1ca4:	0c c0       	rjmp	.+24     	; 0x1cbe <xTaskIncrementTick+0xbe>
    1ca6:	4f ef       	ldi	r20, 0xFF	; 255
    1ca8:	5f ef       	ldi	r21, 0xFF	; 255
    1caa:	ba 01       	movw	r22, r20
    1cac:	40 93 97 16 	sts	0x1697, r20	; 0x801697 <xNextTaskUnblockTime>
    1cb0:	50 93 98 16 	sts	0x1698, r21	; 0x801698 <xNextTaskUnblockTime+0x1>
    1cb4:	60 93 99 16 	sts	0x1699, r22	; 0x801699 <xNextTaskUnblockTime+0x2>
    1cb8:	70 93 9a 16 	sts	0x169A, r23	; 0x80169a <xNextTaskUnblockTime+0x3>
    1cbc:	9c c0       	rjmp	.+312    	; 0x1df6 <xTaskIncrementTick+0x1f6>
    1cbe:	e0 91 cd 16 	lds	r30, 0x16CD	; 0x8016cd <pxDelayedTaskList>
    1cc2:	f0 91 ce 16 	lds	r31, 0x16CE	; 0x8016ce <pxDelayedTaskList+0x1>
    1cc6:	07 80       	ldd	r0, Z+7	; 0x07
    1cc8:	f0 85       	ldd	r31, Z+8	; 0x08
    1cca:	e0 2d       	mov	r30, r0
    1ccc:	00 84       	ldd	r0, Z+8	; 0x08
    1cce:	f1 85       	ldd	r31, Z+9	; 0x09
    1cd0:	e0 2d       	mov	r30, r0
    1cd2:	42 81       	ldd	r20, Z+2	; 0x02
    1cd4:	53 81       	ldd	r21, Z+3	; 0x03
    1cd6:	64 81       	ldd	r22, Z+4	; 0x04
    1cd8:	75 81       	ldd	r23, Z+5	; 0x05
    1cda:	c4 16       	cp	r12, r20
    1cdc:	d5 06       	cpc	r13, r21
    1cde:	e6 06       	cpc	r14, r22
    1ce0:	f7 06       	cpc	r15, r23
    1ce2:	48 f4       	brcc	.+18     	; 0x1cf6 <xTaskIncrementTick+0xf6>
    1ce4:	40 93 97 16 	sts	0x1697, r20	; 0x801697 <xNextTaskUnblockTime>
    1ce8:	50 93 98 16 	sts	0x1698, r21	; 0x801698 <xNextTaskUnblockTime+0x1>
    1cec:	60 93 99 16 	sts	0x1699, r22	; 0x801699 <xNextTaskUnblockTime+0x2>
    1cf0:	70 93 9a 16 	sts	0x169A, r23	; 0x80169a <xNextTaskUnblockTime+0x3>
    1cf4:	80 c0       	rjmp	.+256    	; 0x1df6 <xTaskIncrementTick+0x1f6>
    1cf6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cf8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cfa:	c6 81       	ldd	r28, Z+6	; 0x06
    1cfc:	d7 81       	ldd	r29, Z+7	; 0x07
    1cfe:	20 85       	ldd	r18, Z+8	; 0x08
    1d00:	31 85       	ldd	r19, Z+9	; 0x09
    1d02:	3f 83       	std	Y+7, r19	; 0x07
    1d04:	2e 83       	std	Y+6, r18	; 0x06
    1d06:	c0 85       	ldd	r28, Z+8	; 0x08
    1d08:	d1 85       	ldd	r29, Z+9	; 0x09
    1d0a:	26 81       	ldd	r18, Z+6	; 0x06
    1d0c:	37 81       	ldd	r19, Z+7	; 0x07
    1d0e:	3d 83       	std	Y+5, r19	; 0x05
    1d10:	2c 83       	std	Y+4, r18	; 0x04
    1d12:	11 96       	adiw	r26, 0x01	; 1
    1d14:	4d 91       	ld	r20, X+
    1d16:	5c 91       	ld	r21, X
    1d18:	12 97       	sbiw	r26, 0x02	; 2
    1d1a:	9f 01       	movw	r18, r30
    1d1c:	2e 5f       	subi	r18, 0xFE	; 254
    1d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d20:	42 17       	cp	r20, r18
    1d22:	53 07       	cpc	r21, r19
    1d24:	31 f4       	brne	.+12     	; 0x1d32 <xTaskIncrementTick+0x132>
    1d26:	40 85       	ldd	r20, Z+8	; 0x08
    1d28:	51 85       	ldd	r21, Z+9	; 0x09
    1d2a:	12 96       	adiw	r26, 0x02	; 2
    1d2c:	5c 93       	st	X, r21
    1d2e:	4e 93       	st	-X, r20
    1d30:	11 97       	sbiw	r26, 0x01	; 1
    1d32:	15 86       	std	Z+13, r1	; 0x0d
    1d34:	14 86       	std	Z+12, r1	; 0x0c
    1d36:	9c 91       	ld	r25, X
    1d38:	91 50       	subi	r25, 0x01	; 1
    1d3a:	9c 93       	st	X, r25
    1d3c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d3e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d40:	10 97       	sbiw	r26, 0x00	; 0
    1d42:	09 f1       	breq	.+66     	; 0x1d86 <xTaskIncrementTick+0x186>
    1d44:	c2 89       	ldd	r28, Z+18	; 0x12
    1d46:	d3 89       	ldd	r29, Z+19	; 0x13
    1d48:	44 89       	ldd	r20, Z+20	; 0x14
    1d4a:	55 89       	ldd	r21, Z+21	; 0x15
    1d4c:	5f 83       	std	Y+7, r21	; 0x07
    1d4e:	4e 83       	std	Y+6, r20	; 0x06
    1d50:	c4 89       	ldd	r28, Z+20	; 0x14
    1d52:	d5 89       	ldd	r29, Z+21	; 0x15
    1d54:	42 89       	ldd	r20, Z+18	; 0x12
    1d56:	53 89       	ldd	r21, Z+19	; 0x13
    1d58:	5d 83       	std	Y+5, r21	; 0x05
    1d5a:	4c 83       	std	Y+4, r20	; 0x04
    1d5c:	11 96       	adiw	r26, 0x01	; 1
    1d5e:	6d 91       	ld	r22, X+
    1d60:	7c 91       	ld	r23, X
    1d62:	12 97       	sbiw	r26, 0x02	; 2
    1d64:	af 01       	movw	r20, r30
    1d66:	42 5f       	subi	r20, 0xF2	; 242
    1d68:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6a:	64 17       	cp	r22, r20
    1d6c:	75 07       	cpc	r23, r21
    1d6e:	31 f4       	brne	.+12     	; 0x1d7c <xTaskIncrementTick+0x17c>
    1d70:	44 89       	ldd	r20, Z+20	; 0x14
    1d72:	55 89       	ldd	r21, Z+21	; 0x15
    1d74:	12 96       	adiw	r26, 0x02	; 2
    1d76:	5c 93       	st	X, r21
    1d78:	4e 93       	st	-X, r20
    1d7a:	11 97       	sbiw	r26, 0x01	; 1
    1d7c:	11 8e       	std	Z+25, r1	; 0x19
    1d7e:	10 8e       	std	Z+24, r1	; 0x18
    1d80:	9c 91       	ld	r25, X
    1d82:	91 50       	subi	r25, 0x01	; 1
    1d84:	9c 93       	st	X, r25
    1d86:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d88:	90 91 a3 16 	lds	r25, 0x16A3	; 0x8016a3 <uxTopReadyPriority>
    1d8c:	9a 17       	cp	r25, r26
    1d8e:	10 f4       	brcc	.+4      	; 0x1d94 <xTaskIncrementTick+0x194>
    1d90:	a0 93 a3 16 	sts	0x16A3, r26	; 0x8016a3 <uxTopReadyPriority>
    1d94:	9b e0       	ldi	r25, 0x0B	; 11
    1d96:	9a 9f       	mul	r25, r26
    1d98:	d0 01       	movw	r26, r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	ab 51       	subi	r26, 0x1B	; 27
    1d9e:	b9 4e       	sbci	r27, 0xE9	; 233
    1da0:	11 96       	adiw	r26, 0x01	; 1
    1da2:	0d 90       	ld	r0, X+
    1da4:	bc 91       	ld	r27, X
    1da6:	a0 2d       	mov	r26, r0
    1da8:	b7 83       	std	Z+7, r27	; 0x07
    1daa:	a6 83       	std	Z+6, r26	; 0x06
    1dac:	16 96       	adiw	r26, 0x06	; 6
    1dae:	4d 91       	ld	r20, X+
    1db0:	5c 91       	ld	r21, X
    1db2:	17 97       	sbiw	r26, 0x07	; 7
    1db4:	51 87       	std	Z+9, r21	; 0x09
    1db6:	40 87       	std	Z+8, r20	; 0x08
    1db8:	16 96       	adiw	r26, 0x06	; 6
    1dba:	cd 91       	ld	r28, X+
    1dbc:	dc 91       	ld	r29, X
    1dbe:	17 97       	sbiw	r26, 0x07	; 7
    1dc0:	3d 83       	std	Y+5, r19	; 0x05
    1dc2:	2c 83       	std	Y+4, r18	; 0x04
    1dc4:	17 96       	adiw	r26, 0x07	; 7
    1dc6:	3c 93       	st	X, r19
    1dc8:	2e 93       	st	-X, r18
    1dca:	16 97       	sbiw	r26, 0x06	; 6
    1dcc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1dce:	9a 9f       	mul	r25, r26
    1dd0:	d0 01       	movw	r26, r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	ab 51       	subi	r26, 0x1B	; 27
    1dd6:	b9 4e       	sbci	r27, 0xE9	; 233
    1dd8:	b5 87       	std	Z+13, r27	; 0x0d
    1dda:	a4 87       	std	Z+12, r26	; 0x0c
    1ddc:	9c 91       	ld	r25, X
    1dde:	9f 5f       	subi	r25, 0xFF	; 255
    1de0:	9c 93       	st	X, r25
    1de2:	22 8d       	ldd	r18, Z+26	; 0x1a
    1de4:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    1de8:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1dec:	92 8d       	ldd	r25, Z+26	; 0x1a
    1dee:	29 17       	cp	r18, r25
    1df0:	08 f0       	brcs	.+2      	; 0x1df4 <xTaskIncrementTick+0x1f4>
    1df2:	4f cf       	rjmp	.-354    	; 0x1c92 <xTaskIncrementTick+0x92>
    1df4:	51 cf       	rjmp	.-350    	; 0x1c98 <xTaskIncrementTick+0x98>
    1df6:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    1dfa:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1dfe:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1e00:	9b e0       	ldi	r25, 0x0B	; 11
    1e02:	e9 9f       	mul	r30, r25
    1e04:	f0 01       	movw	r30, r0
    1e06:	11 24       	eor	r1, r1
    1e08:	eb 51       	subi	r30, 0x1B	; 27
    1e0a:	f9 4e       	sbci	r31, 0xE9	; 233
    1e0c:	90 81       	ld	r25, Z
    1e0e:	92 30       	cpi	r25, 0x02	; 2
    1e10:	08 f0       	brcs	.+2      	; 0x1e14 <xTaskIncrementTick+0x214>
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 91 9d 16 	lds	r25, 0x169D	; 0x80169d <xYieldPending>
    1e18:	91 11       	cpse	r25, r1
    1e1a:	16 c0       	rjmp	.+44     	; 0x1e48 <xTaskIncrementTick+0x248>
    1e1c:	16 c0       	rjmp	.+44     	; 0x1e4a <xTaskIncrementTick+0x24a>
    1e1e:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <xPendedTicks>
    1e22:	90 91 9f 16 	lds	r25, 0x169F	; 0x80169f <xPendedTicks+0x1>
    1e26:	a0 91 a0 16 	lds	r26, 0x16A0	; 0x8016a0 <xPendedTicks+0x2>
    1e2a:	b0 91 a1 16 	lds	r27, 0x16A1	; 0x8016a1 <xPendedTicks+0x3>
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	a1 1d       	adc	r26, r1
    1e32:	b1 1d       	adc	r27, r1
    1e34:	80 93 9e 16 	sts	0x169E, r24	; 0x80169e <xPendedTicks>
    1e38:	90 93 9f 16 	sts	0x169F, r25	; 0x80169f <xPendedTicks+0x1>
    1e3c:	a0 93 a0 16 	sts	0x16A0, r26	; 0x8016a0 <xPendedTicks+0x2>
    1e40:	b0 93 a1 16 	sts	0x16A1, r27	; 0x8016a1 <xPendedTicks+0x3>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <xTaskIncrementTick+0x24a>
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	08 95       	ret

00001e58 <xTaskResumeAll>:
    1e58:	cf 92       	push	r12
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	0f 92       	push	r0
    1e6a:	80 91 94 16 	lds	r24, 0x1694	; 0x801694 <uxSchedulerSuspended>
    1e6e:	81 50       	subi	r24, 0x01	; 1
    1e70:	80 93 94 16 	sts	0x1694, r24	; 0x801694 <uxSchedulerSuspended>
    1e74:	80 91 94 16 	lds	r24, 0x1694	; 0x801694 <uxSchedulerSuspended>
    1e78:	81 11       	cpse	r24, r1
    1e7a:	be c0       	rjmp	.+380    	; 0x1ff8 <xTaskResumeAll+0x1a0>
    1e7c:	80 91 a8 16 	lds	r24, 0x16A8	; 0x8016a8 <uxCurrentNumberOfTasks>
    1e80:	81 11       	cpse	r24, r1
    1e82:	88 c0       	rjmp	.+272    	; 0x1f94 <xTaskResumeAll+0x13c>
    1e84:	bc c0       	rjmp	.+376    	; 0x1ffe <xTaskResumeAll+0x1a6>
    1e86:	e0 91 c7 16 	lds	r30, 0x16C7	; 0x8016c7 <xPendingReadyList+0x7>
    1e8a:	f0 91 c8 16 	lds	r31, 0x16C8	; 0x8016c8 <xPendingReadyList+0x8>
    1e8e:	00 84       	ldd	r0, Z+8	; 0x08
    1e90:	f1 85       	ldd	r31, Z+9	; 0x09
    1e92:	e0 2d       	mov	r30, r0
    1e94:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e96:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e98:	c2 89       	ldd	r28, Z+18	; 0x12
    1e9a:	d3 89       	ldd	r29, Z+19	; 0x13
    1e9c:	84 89       	ldd	r24, Z+20	; 0x14
    1e9e:	95 89       	ldd	r25, Z+21	; 0x15
    1ea0:	9f 83       	std	Y+7, r25	; 0x07
    1ea2:	8e 83       	std	Y+6, r24	; 0x06
    1ea4:	c4 89       	ldd	r28, Z+20	; 0x14
    1ea6:	d5 89       	ldd	r29, Z+21	; 0x15
    1ea8:	82 89       	ldd	r24, Z+18	; 0x12
    1eaa:	93 89       	ldd	r25, Z+19	; 0x13
    1eac:	9d 83       	std	Y+5, r25	; 0x05
    1eae:	8c 83       	std	Y+4, r24	; 0x04
    1eb0:	11 96       	adiw	r26, 0x01	; 1
    1eb2:	2d 91       	ld	r18, X+
    1eb4:	3c 91       	ld	r19, X
    1eb6:	12 97       	sbiw	r26, 0x02	; 2
    1eb8:	cf 01       	movw	r24, r30
    1eba:	0e 96       	adiw	r24, 0x0e	; 14
    1ebc:	28 17       	cp	r18, r24
    1ebe:	39 07       	cpc	r19, r25
    1ec0:	31 f4       	brne	.+12     	; 0x1ece <xTaskResumeAll+0x76>
    1ec2:	84 89       	ldd	r24, Z+20	; 0x14
    1ec4:	95 89       	ldd	r25, Z+21	; 0x15
    1ec6:	12 96       	adiw	r26, 0x02	; 2
    1ec8:	9c 93       	st	X, r25
    1eca:	8e 93       	st	-X, r24
    1ecc:	11 97       	sbiw	r26, 0x01	; 1
    1ece:	11 8e       	std	Z+25, r1	; 0x19
    1ed0:	10 8e       	std	Z+24, r1	; 0x18
    1ed2:	8c 91       	ld	r24, X
    1ed4:	81 50       	subi	r24, 0x01	; 1
    1ed6:	8c 93       	st	X, r24
    1ed8:	a4 85       	ldd	r26, Z+12	; 0x0c
    1eda:	b5 85       	ldd	r27, Z+13	; 0x0d
    1edc:	c6 81       	ldd	r28, Z+6	; 0x06
    1ede:	d7 81       	ldd	r29, Z+7	; 0x07
    1ee0:	80 85       	ldd	r24, Z+8	; 0x08
    1ee2:	91 85       	ldd	r25, Z+9	; 0x09
    1ee4:	9f 83       	std	Y+7, r25	; 0x07
    1ee6:	8e 83       	std	Y+6, r24	; 0x06
    1ee8:	c0 85       	ldd	r28, Z+8	; 0x08
    1eea:	d1 85       	ldd	r29, Z+9	; 0x09
    1eec:	86 81       	ldd	r24, Z+6	; 0x06
    1eee:	97 81       	ldd	r25, Z+7	; 0x07
    1ef0:	9d 83       	std	Y+5, r25	; 0x05
    1ef2:	8c 83       	std	Y+4, r24	; 0x04
    1ef4:	11 96       	adiw	r26, 0x01	; 1
    1ef6:	8d 91       	ld	r24, X+
    1ef8:	9c 91       	ld	r25, X
    1efa:	12 97       	sbiw	r26, 0x02	; 2
    1efc:	9f 01       	movw	r18, r30
    1efe:	2e 5f       	subi	r18, 0xFE	; 254
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	82 17       	cp	r24, r18
    1f04:	93 07       	cpc	r25, r19
    1f06:	31 f4       	brne	.+12     	; 0x1f14 <xTaskResumeAll+0xbc>
    1f08:	80 85       	ldd	r24, Z+8	; 0x08
    1f0a:	91 85       	ldd	r25, Z+9	; 0x09
    1f0c:	12 96       	adiw	r26, 0x02	; 2
    1f0e:	9c 93       	st	X, r25
    1f10:	8e 93       	st	-X, r24
    1f12:	11 97       	sbiw	r26, 0x01	; 1
    1f14:	15 86       	std	Z+13, r1	; 0x0d
    1f16:	14 86       	std	Z+12, r1	; 0x0c
    1f18:	8c 91       	ld	r24, X
    1f1a:	81 50       	subi	r24, 0x01	; 1
    1f1c:	8c 93       	st	X, r24
    1f1e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f20:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <uxTopReadyPriority>
    1f24:	8a 17       	cp	r24, r26
    1f26:	10 f4       	brcc	.+4      	; 0x1f2c <xTaskResumeAll+0xd4>
    1f28:	a0 93 a3 16 	sts	0x16A3, r26	; 0x8016a3 <uxTopReadyPriority>
    1f2c:	8b e0       	ldi	r24, 0x0B	; 11
    1f2e:	8a 9f       	mul	r24, r26
    1f30:	d0 01       	movw	r26, r0
    1f32:	11 24       	eor	r1, r1
    1f34:	ab 51       	subi	r26, 0x1B	; 27
    1f36:	b9 4e       	sbci	r27, 0xE9	; 233
    1f38:	11 96       	adiw	r26, 0x01	; 1
    1f3a:	0d 90       	ld	r0, X+
    1f3c:	bc 91       	ld	r27, X
    1f3e:	a0 2d       	mov	r26, r0
    1f40:	b7 83       	std	Z+7, r27	; 0x07
    1f42:	a6 83       	std	Z+6, r26	; 0x06
    1f44:	16 96       	adiw	r26, 0x06	; 6
    1f46:	4d 91       	ld	r20, X+
    1f48:	5c 91       	ld	r21, X
    1f4a:	17 97       	sbiw	r26, 0x07	; 7
    1f4c:	51 87       	std	Z+9, r21	; 0x09
    1f4e:	40 87       	std	Z+8, r20	; 0x08
    1f50:	16 96       	adiw	r26, 0x06	; 6
    1f52:	cd 91       	ld	r28, X+
    1f54:	dc 91       	ld	r29, X
    1f56:	17 97       	sbiw	r26, 0x07	; 7
    1f58:	3d 83       	std	Y+5, r19	; 0x05
    1f5a:	2c 83       	std	Y+4, r18	; 0x04
    1f5c:	17 96       	adiw	r26, 0x07	; 7
    1f5e:	3c 93       	st	X, r19
    1f60:	2e 93       	st	-X, r18
    1f62:	16 97       	sbiw	r26, 0x06	; 6
    1f64:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f66:	8a 9f       	mul	r24, r26
    1f68:	d0 01       	movw	r26, r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	ab 51       	subi	r26, 0x1B	; 27
    1f6e:	b9 4e       	sbci	r27, 0xE9	; 233
    1f70:	b5 87       	std	Z+13, r27	; 0x0d
    1f72:	a4 87       	std	Z+12, r26	; 0x0c
    1f74:	8c 91       	ld	r24, X
    1f76:	8f 5f       	subi	r24, 0xFF	; 255
    1f78:	8c 93       	st	X, r24
    1f7a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f7c:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
    1f80:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    1f84:	5a 96       	adiw	r26, 0x1a	; 26
    1f86:	8c 91       	ld	r24, X
    1f88:	98 17       	cp	r25, r24
    1f8a:	30 f0       	brcs	.+12     	; 0x1f98 <xTaskResumeAll+0x140>
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	80 93 9d 16 	sts	0x169D, r24	; 0x80169d <xYieldPending>
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <xTaskResumeAll+0x140>
    1f94:	e0 e0       	ldi	r30, 0x00	; 0
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 91 c0 16 	lds	r24, 0x16C0	; 0x8016c0 <xPendingReadyList>
    1f9c:	81 11       	cpse	r24, r1
    1f9e:	73 cf       	rjmp	.-282    	; 0x1e86 <xTaskResumeAll+0x2e>
    1fa0:	ef 2b       	or	r30, r31
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <xTaskResumeAll+0x14e>
    1fa4:	7d db       	rcall	.-2310   	; 0x16a0 <prvResetNextTaskUnblockTime>
    1fa6:	c0 90 9e 16 	lds	r12, 0x169E	; 0x80169e <xPendedTicks>
    1faa:	d0 90 9f 16 	lds	r13, 0x169F	; 0x80169f <xPendedTicks+0x1>
    1fae:	e0 90 a0 16 	lds	r14, 0x16A0	; 0x8016a0 <xPendedTicks+0x2>
    1fb2:	f0 90 a1 16 	lds	r15, 0x16A1	; 0x8016a1 <xPendedTicks+0x3>
    1fb6:	c1 14       	cp	r12, r1
    1fb8:	d1 04       	cpc	r13, r1
    1fba:	e1 04       	cpc	r14, r1
    1fbc:	f1 04       	cpc	r15, r1
    1fbe:	a1 f0       	breq	.+40     	; 0x1fe8 <xTaskResumeAll+0x190>
    1fc0:	1f de       	rcall	.-962    	; 0x1c00 <xTaskIncrementTick>
    1fc2:	88 23       	and	r24, r24
    1fc4:	19 f0       	breq	.+6      	; 0x1fcc <xTaskResumeAll+0x174>
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	80 93 9d 16 	sts	0x169D, r24	; 0x80169d <xYieldPending>
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	c8 1a       	sub	r12, r24
    1fd0:	d1 08       	sbc	r13, r1
    1fd2:	e1 08       	sbc	r14, r1
    1fd4:	f1 08       	sbc	r15, r1
    1fd6:	a1 f7       	brne	.-24     	; 0x1fc0 <xTaskResumeAll+0x168>
    1fd8:	10 92 9e 16 	sts	0x169E, r1	; 0x80169e <xPendedTicks>
    1fdc:	10 92 9f 16 	sts	0x169F, r1	; 0x80169f <xPendedTicks+0x1>
    1fe0:	10 92 a0 16 	sts	0x16A0, r1	; 0x8016a0 <xPendedTicks+0x2>
    1fe4:	10 92 a1 16 	sts	0x16A1, r1	; 0x8016a1 <xPendedTicks+0x3>
    1fe8:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <xYieldPending>
    1fec:	88 23       	and	r24, r24
    1fee:	31 f0       	breq	.+12     	; 0x1ffc <xTaskResumeAll+0x1a4>
    1ff0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vPortYield>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	03 c0       	rjmp	.+6      	; 0x1ffe <xTaskResumeAll+0x1a6>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <xTaskResumeAll+0x1a6>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	df 90       	pop	r13
    200c:	cf 90       	pop	r12
    200e:	08 95       	ret

00002010 <xTaskDelayUntil>:
    2010:	8f 92       	push	r8
    2012:	9f 92       	push	r9
    2014:	af 92       	push	r10
    2016:	bf 92       	push	r11
    2018:	cf 92       	push	r12
    201a:	df 92       	push	r13
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	ec 01       	movw	r28, r24
    2028:	6a 01       	movw	r12, r20
    202a:	7b 01       	movw	r14, r22
    202c:	d5 dd       	rcall	.-1110   	; 0x1bd8 <vTaskSuspendAll>
    202e:	80 90 a4 16 	lds	r8, 0x16A4	; 0x8016a4 <xTickCount>
    2032:	90 90 a5 16 	lds	r9, 0x16A5	; 0x8016a5 <xTickCount+0x1>
    2036:	a0 90 a6 16 	lds	r10, 0x16A6	; 0x8016a6 <xTickCount+0x2>
    203a:	b0 90 a7 16 	lds	r11, 0x16A7	; 0x8016a7 <xTickCount+0x3>
    203e:	88 81       	ld	r24, Y
    2040:	99 81       	ldd	r25, Y+1	; 0x01
    2042:	aa 81       	ldd	r26, Y+2	; 0x02
    2044:	bb 81       	ldd	r27, Y+3	; 0x03
    2046:	ac 01       	movw	r20, r24
    2048:	bd 01       	movw	r22, r26
    204a:	4c 0d       	add	r20, r12
    204c:	5d 1d       	adc	r21, r13
    204e:	6e 1d       	adc	r22, r14
    2050:	7f 1d       	adc	r23, r15
    2052:	88 16       	cp	r8, r24
    2054:	99 06       	cpc	r9, r25
    2056:	aa 06       	cpc	r10, r26
    2058:	bb 06       	cpc	r11, r27
    205a:	60 f4       	brcc	.+24     	; 0x2074 <xTaskDelayUntil+0x64>
    205c:	48 17       	cp	r20, r24
    205e:	59 07       	cpc	r21, r25
    2060:	6a 07       	cpc	r22, r26
    2062:	7b 07       	cpc	r23, r27
    2064:	98 f4       	brcc	.+38     	; 0x208c <xTaskDelayUntil+0x7c>
    2066:	84 16       	cp	r8, r20
    2068:	95 06       	cpc	r9, r21
    206a:	a6 06       	cpc	r10, r22
    206c:	b7 06       	cpc	r11, r23
    206e:	80 f0       	brcs	.+32     	; 0x2090 <xTaskDelayUntil+0x80>
    2070:	10 e0       	ldi	r17, 0x00	; 0
    2072:	13 c0       	rjmp	.+38     	; 0x209a <xTaskDelayUntil+0x8a>
    2074:	48 17       	cp	r20, r24
    2076:	59 07       	cpc	r21, r25
    2078:	6a 07       	cpc	r22, r26
    207a:	7b 07       	cpc	r23, r27
    207c:	58 f0       	brcs	.+22     	; 0x2094 <xTaskDelayUntil+0x84>
    207e:	84 16       	cp	r8, r20
    2080:	95 06       	cpc	r9, r21
    2082:	a6 06       	cpc	r10, r22
    2084:	b7 06       	cpc	r11, r23
    2086:	40 f0       	brcs	.+16     	; 0x2098 <xTaskDelayUntil+0x88>
    2088:	10 e0       	ldi	r17, 0x00	; 0
    208a:	07 c0       	rjmp	.+14     	; 0x209a <xTaskDelayUntil+0x8a>
    208c:	10 e0       	ldi	r17, 0x00	; 0
    208e:	05 c0       	rjmp	.+10     	; 0x209a <xTaskDelayUntil+0x8a>
    2090:	11 e0       	ldi	r17, 0x01	; 1
    2092:	03 c0       	rjmp	.+6      	; 0x209a <xTaskDelayUntil+0x8a>
    2094:	11 e0       	ldi	r17, 0x01	; 1
    2096:	01 c0       	rjmp	.+2      	; 0x209a <xTaskDelayUntil+0x8a>
    2098:	11 e0       	ldi	r17, 0x01	; 1
    209a:	48 83       	st	Y, r20
    209c:	59 83       	std	Y+1, r21	; 0x01
    209e:	6a 83       	std	Y+2, r22	; 0x02
    20a0:	7b 83       	std	Y+3, r23	; 0x03
    20a2:	11 23       	and	r17, r17
    20a4:	41 f0       	breq	.+16     	; 0x20b6 <xTaskDelayUntil+0xa6>
    20a6:	cb 01       	movw	r24, r22
    20a8:	ba 01       	movw	r22, r20
    20aa:	68 19       	sub	r22, r8
    20ac:	79 09       	sbc	r23, r9
    20ae:	8a 09       	sbc	r24, r10
    20b0:	9b 09       	sbc	r25, r11
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	6b dc       	rcall	.-1834   	; 0x198c <prvAddCurrentTaskToDelayedList>
    20b6:	d0 de       	rcall	.-608    	; 0x1e58 <xTaskResumeAll>
    20b8:	81 11       	cpse	r24, r1
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <xTaskDelayUntil+0xb0>
    20bc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vPortYield>
    20c0:	81 2f       	mov	r24, r17
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	ff 90       	pop	r15
    20ca:	ef 90       	pop	r14
    20cc:	df 90       	pop	r13
    20ce:	cf 90       	pop	r12
    20d0:	bf 90       	pop	r11
    20d2:	af 90       	pop	r10
    20d4:	9f 90       	pop	r9
    20d6:	8f 90       	pop	r8
    20d8:	08 95       	ret

000020da <vTaskDelay>:
    20da:	cf 92       	push	r12
    20dc:	df 92       	push	r13
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	6b 01       	movw	r12, r22
    20e4:	7c 01       	movw	r14, r24
    20e6:	67 2b       	or	r22, r23
    20e8:	68 2b       	or	r22, r24
    20ea:	69 2b       	or	r22, r25
    20ec:	39 f0       	breq	.+14     	; 0x20fc <vTaskDelay+0x22>
    20ee:	74 dd       	rcall	.-1304   	; 0x1bd8 <vTaskSuspendAll>
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	c7 01       	movw	r24, r14
    20f4:	b6 01       	movw	r22, r12
    20f6:	4a dc       	rcall	.-1900   	; 0x198c <prvAddCurrentTaskToDelayedList>
    20f8:	af de       	rcall	.-674    	; 0x1e58 <xTaskResumeAll>
    20fa:	01 c0       	rjmp	.+2      	; 0x20fe <vTaskDelay+0x24>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	81 11       	cpse	r24, r1
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <vTaskDelay+0x2c>
    2102:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vPortYield>
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	cf 90       	pop	r12
    210e:	08 95       	ret

00002110 <vTaskSwitchContext>:
    2110:	80 91 94 16 	lds	r24, 0x1694	; 0x801694 <uxSchedulerSuspended>
    2114:	88 23       	and	r24, r24
    2116:	21 f0       	breq	.+8      	; 0x2120 <vTaskSwitchContext+0x10>
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	80 93 9d 16 	sts	0x169D, r24	; 0x80169d <xYieldPending>
    211e:	08 95       	ret
    2120:	10 92 9d 16 	sts	0x169D, r1	; 0x80169d <xYieldPending>
    2124:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    2128:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    212c:	20 81       	ld	r18, Z
    212e:	31 81       	ldd	r19, Z+1	; 0x01
    2130:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    2134:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2138:	83 8d       	ldd	r24, Z+27	; 0x1b
    213a:	94 8d       	ldd	r25, Z+28	; 0x1c
    213c:	82 17       	cp	r24, r18
    213e:	93 07       	cpc	r25, r19
    2140:	60 f0       	brcs	.+24     	; 0x215a <vTaskSwitchContext+0x4a>
    2142:	60 91 53 17 	lds	r22, 0x1753	; 0x801753 <pxCurrentTCB>
    2146:	70 91 54 17 	lds	r23, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    214a:	63 5e       	subi	r22, 0xE3	; 227
    214c:	7f 4f       	sbci	r23, 0xFF	; 255
    214e:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <pxCurrentTCB>
    2152:	90 91 54 17 	lds	r25, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2156:	0e 94 e6 19 	call	0x33cc	; 0x33cc <vApplicationStackOverflowHook>
    215a:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <uxTopReadyPriority>
    215e:	01 c0       	rjmp	.+2      	; 0x2162 <vTaskSwitchContext+0x52>
    2160:	81 50       	subi	r24, 0x01	; 1
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	9b e0       	ldi	r25, 0x0B	; 11
    2168:	92 9f       	mul	r25, r18
    216a:	f0 01       	movw	r30, r0
    216c:	93 9f       	mul	r25, r19
    216e:	f0 0d       	add	r31, r0
    2170:	11 24       	eor	r1, r1
    2172:	eb 51       	subi	r30, 0x1B	; 27
    2174:	f9 4e       	sbci	r31, 0xE9	; 233
    2176:	90 81       	ld	r25, Z
    2178:	99 23       	and	r25, r25
    217a:	91 f3       	breq	.-28     	; 0x2160 <vTaskSwitchContext+0x50>
    217c:	9b e0       	ldi	r25, 0x0B	; 11
    217e:	92 9f       	mul	r25, r18
    2180:	a0 01       	movw	r20, r0
    2182:	93 9f       	mul	r25, r19
    2184:	50 0d       	add	r21, r0
    2186:	11 24       	eor	r1, r1
    2188:	df 01       	movw	r26, r30
    218a:	01 80       	ldd	r0, Z+1	; 0x01
    218c:	f2 81       	ldd	r31, Z+2	; 0x02
    218e:	e0 2d       	mov	r30, r0
    2190:	04 80       	ldd	r0, Z+4	; 0x04
    2192:	f5 81       	ldd	r31, Z+5	; 0x05
    2194:	e0 2d       	mov	r30, r0
    2196:	12 96       	adiw	r26, 0x02	; 2
    2198:	fc 93       	st	X, r31
    219a:	ee 93       	st	-X, r30
    219c:	11 97       	sbiw	r26, 0x01	; 1
    219e:	48 51       	subi	r20, 0x18	; 24
    21a0:	59 4e       	sbci	r21, 0xE9	; 233
    21a2:	e4 17       	cp	r30, r20
    21a4:	f5 07       	cpc	r31, r21
    21a6:	29 f4       	brne	.+10     	; 0x21b2 <vTaskSwitchContext+0xa2>
    21a8:	44 81       	ldd	r20, Z+4	; 0x04
    21aa:	55 81       	ldd	r21, Z+5	; 0x05
    21ac:	fd 01       	movw	r30, r26
    21ae:	52 83       	std	Z+2, r21	; 0x02
    21b0:	41 83       	std	Z+1, r20	; 0x01
    21b2:	9b e0       	ldi	r25, 0x0B	; 11
    21b4:	92 9f       	mul	r25, r18
    21b6:	f0 01       	movw	r30, r0
    21b8:	93 9f       	mul	r25, r19
    21ba:	f0 0d       	add	r31, r0
    21bc:	11 24       	eor	r1, r1
    21be:	eb 51       	subi	r30, 0x1B	; 27
    21c0:	f9 4e       	sbci	r31, 0xE9	; 233
    21c2:	01 80       	ldd	r0, Z+1	; 0x01
    21c4:	f2 81       	ldd	r31, Z+2	; 0x02
    21c6:	e0 2d       	mov	r30, r0
    21c8:	20 85       	ldd	r18, Z+8	; 0x08
    21ca:	31 85       	ldd	r19, Z+9	; 0x09
    21cc:	30 93 54 17 	sts	0x1754, r19	; 0x801754 <pxCurrentTCB+0x1>
    21d0:	20 93 53 17 	sts	0x1753, r18	; 0x801753 <pxCurrentTCB>
    21d4:	80 93 a3 16 	sts	0x16A3, r24	; 0x8016a3 <uxTopReadyPriority>
    21d8:	08 95       	ret

000021da <vTaskPlaceOnEventList>:
    21da:	cf 92       	push	r12
    21dc:	df 92       	push	r13
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	6a 01       	movw	r12, r20
    21e4:	7b 01       	movw	r14, r22
    21e6:	60 91 53 17 	lds	r22, 0x1753	; 0x801753 <pxCurrentTCB>
    21ea:	70 91 54 17 	lds	r23, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    21ee:	62 5f       	subi	r22, 0xF2	; 242
    21f0:	7f 4f       	sbci	r23, 0xFF	; 255
    21f2:	0e 94 28 03 	call	0x650	; 0x650 <vListInsert>
    21f6:	41 e0       	ldi	r20, 0x01	; 1
    21f8:	c7 01       	movw	r24, r14
    21fa:	b6 01       	movw	r22, r12
    21fc:	c7 db       	rcall	.-2162   	; 0x198c <prvAddCurrentTaskToDelayedList>
    21fe:	ff 90       	pop	r15
    2200:	ef 90       	pop	r14
    2202:	df 90       	pop	r13
    2204:	cf 90       	pop	r12
    2206:	08 95       	ret

00002208 <vTaskPlaceOnEventListRestricted>:
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	fc 01       	movw	r30, r24
    220e:	cb 01       	movw	r24, r22
    2210:	ba 01       	movw	r22, r20
    2212:	a1 81       	ldd	r26, Z+1	; 0x01
    2214:	b2 81       	ldd	r27, Z+2	; 0x02
    2216:	c0 91 53 17 	lds	r28, 0x1753	; 0x801753 <pxCurrentTCB>
    221a:	d0 91 54 17 	lds	r29, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    221e:	bb 8b       	std	Y+19, r27	; 0x13
    2220:	aa 8b       	std	Y+18, r26	; 0x12
    2222:	c0 91 53 17 	lds	r28, 0x1753	; 0x801753 <pxCurrentTCB>
    2226:	d0 91 54 17 	lds	r29, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    222a:	16 96       	adiw	r26, 0x06	; 6
    222c:	4d 91       	ld	r20, X+
    222e:	5c 91       	ld	r21, X
    2230:	17 97       	sbiw	r26, 0x07	; 7
    2232:	5d 8b       	std	Y+21, r21	; 0x15
    2234:	4c 8b       	std	Y+20, r20	; 0x14
    2236:	16 96       	adiw	r26, 0x06	; 6
    2238:	cd 91       	ld	r28, X+
    223a:	dc 91       	ld	r29, X
    223c:	17 97       	sbiw	r26, 0x07	; 7
    223e:	40 91 53 17 	lds	r20, 0x1753	; 0x801753 <pxCurrentTCB>
    2242:	50 91 54 17 	lds	r21, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2246:	42 5f       	subi	r20, 0xF2	; 242
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	5d 83       	std	Y+5, r21	; 0x05
    224c:	4c 83       	std	Y+4, r20	; 0x04
    224e:	40 91 53 17 	lds	r20, 0x1753	; 0x801753 <pxCurrentTCB>
    2252:	50 91 54 17 	lds	r21, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2256:	42 5f       	subi	r20, 0xF2	; 242
    2258:	5f 4f       	sbci	r21, 0xFF	; 255
    225a:	17 96       	adiw	r26, 0x07	; 7
    225c:	5c 93       	st	X, r21
    225e:	4e 93       	st	-X, r20
    2260:	16 97       	sbiw	r26, 0x06	; 6
    2262:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
    2266:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    226a:	59 96       	adiw	r26, 0x19	; 25
    226c:	fc 93       	st	X, r31
    226e:	ee 93       	st	-X, r30
    2270:	58 97       	sbiw	r26, 0x18	; 24
    2272:	30 81       	ld	r19, Z
    2274:	3f 5f       	subi	r19, 0xFF	; 255
    2276:	30 83       	st	Z, r19
    2278:	22 23       	and	r18, r18
    227a:	19 f0       	breq	.+6      	; 0x2282 <vTaskPlaceOnEventListRestricted+0x7a>
    227c:	6f ef       	ldi	r22, 0xFF	; 255
    227e:	7f ef       	ldi	r23, 0xFF	; 255
    2280:	cb 01       	movw	r24, r22
    2282:	42 2f       	mov	r20, r18
    2284:	83 db       	rcall	.-2298   	; 0x198c <prvAddCurrentTaskToDelayedList>
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <xTaskRemoveFromEventList>:
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	dc 01       	movw	r26, r24
    2292:	17 96       	adiw	r26, 0x07	; 7
    2294:	ed 91       	ld	r30, X+
    2296:	fc 91       	ld	r31, X
    2298:	18 97       	sbiw	r26, 0x08	; 8
    229a:	00 84       	ldd	r0, Z+8	; 0x08
    229c:	f1 85       	ldd	r31, Z+9	; 0x09
    229e:	e0 2d       	mov	r30, r0
    22a0:	a0 8d       	ldd	r26, Z+24	; 0x18
    22a2:	b1 8d       	ldd	r27, Z+25	; 0x19
    22a4:	c2 89       	ldd	r28, Z+18	; 0x12
    22a6:	d3 89       	ldd	r29, Z+19	; 0x13
    22a8:	84 89       	ldd	r24, Z+20	; 0x14
    22aa:	95 89       	ldd	r25, Z+21	; 0x15
    22ac:	9f 83       	std	Y+7, r25	; 0x07
    22ae:	8e 83       	std	Y+6, r24	; 0x06
    22b0:	c4 89       	ldd	r28, Z+20	; 0x14
    22b2:	d5 89       	ldd	r29, Z+21	; 0x15
    22b4:	82 89       	ldd	r24, Z+18	; 0x12
    22b6:	93 89       	ldd	r25, Z+19	; 0x13
    22b8:	9d 83       	std	Y+5, r25	; 0x05
    22ba:	8c 83       	std	Y+4, r24	; 0x04
    22bc:	11 96       	adiw	r26, 0x01	; 1
    22be:	8d 91       	ld	r24, X+
    22c0:	9c 91       	ld	r25, X
    22c2:	12 97       	sbiw	r26, 0x02	; 2
    22c4:	9f 01       	movw	r18, r30
    22c6:	22 5f       	subi	r18, 0xF2	; 242
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	82 17       	cp	r24, r18
    22cc:	93 07       	cpc	r25, r19
    22ce:	31 f4       	brne	.+12     	; 0x22dc <xTaskRemoveFromEventList+0x50>
    22d0:	84 89       	ldd	r24, Z+20	; 0x14
    22d2:	95 89       	ldd	r25, Z+21	; 0x15
    22d4:	12 96       	adiw	r26, 0x02	; 2
    22d6:	9c 93       	st	X, r25
    22d8:	8e 93       	st	-X, r24
    22da:	11 97       	sbiw	r26, 0x01	; 1
    22dc:	11 8e       	std	Z+25, r1	; 0x19
    22de:	10 8e       	std	Z+24, r1	; 0x18
    22e0:	8c 91       	ld	r24, X
    22e2:	81 50       	subi	r24, 0x01	; 1
    22e4:	8c 93       	st	X, r24
    22e6:	80 91 94 16 	lds	r24, 0x1694	; 0x801694 <uxSchedulerSuspended>
    22ea:	81 11       	cpse	r24, r1
    22ec:	52 c0       	rjmp	.+164    	; 0x2392 <xTaskRemoveFromEventList+0x106>
    22ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    22f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    22f2:	c6 81       	ldd	r28, Z+6	; 0x06
    22f4:	d7 81       	ldd	r29, Z+7	; 0x07
    22f6:	80 85       	ldd	r24, Z+8	; 0x08
    22f8:	91 85       	ldd	r25, Z+9	; 0x09
    22fa:	9f 83       	std	Y+7, r25	; 0x07
    22fc:	8e 83       	std	Y+6, r24	; 0x06
    22fe:	c0 85       	ldd	r28, Z+8	; 0x08
    2300:	d1 85       	ldd	r29, Z+9	; 0x09
    2302:	86 81       	ldd	r24, Z+6	; 0x06
    2304:	97 81       	ldd	r25, Z+7	; 0x07
    2306:	9d 83       	std	Y+5, r25	; 0x05
    2308:	8c 83       	std	Y+4, r24	; 0x04
    230a:	11 96       	adiw	r26, 0x01	; 1
    230c:	8d 91       	ld	r24, X+
    230e:	9c 91       	ld	r25, X
    2310:	12 97       	sbiw	r26, 0x02	; 2
    2312:	9f 01       	movw	r18, r30
    2314:	2e 5f       	subi	r18, 0xFE	; 254
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	82 17       	cp	r24, r18
    231a:	93 07       	cpc	r25, r19
    231c:	31 f4       	brne	.+12     	; 0x232a <xTaskRemoveFromEventList+0x9e>
    231e:	80 85       	ldd	r24, Z+8	; 0x08
    2320:	91 85       	ldd	r25, Z+9	; 0x09
    2322:	12 96       	adiw	r26, 0x02	; 2
    2324:	9c 93       	st	X, r25
    2326:	8e 93       	st	-X, r24
    2328:	11 97       	sbiw	r26, 0x01	; 1
    232a:	15 86       	std	Z+13, r1	; 0x0d
    232c:	14 86       	std	Z+12, r1	; 0x0c
    232e:	8c 91       	ld	r24, X
    2330:	81 50       	subi	r24, 0x01	; 1
    2332:	8c 93       	st	X, r24
    2334:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2336:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <uxTopReadyPriority>
    233a:	8a 17       	cp	r24, r26
    233c:	10 f4       	brcc	.+4      	; 0x2342 <xTaskRemoveFromEventList+0xb6>
    233e:	a0 93 a3 16 	sts	0x16A3, r26	; 0x8016a3 <uxTopReadyPriority>
    2342:	8b e0       	ldi	r24, 0x0B	; 11
    2344:	8a 9f       	mul	r24, r26
    2346:	d0 01       	movw	r26, r0
    2348:	11 24       	eor	r1, r1
    234a:	ab 51       	subi	r26, 0x1B	; 27
    234c:	b9 4e       	sbci	r27, 0xE9	; 233
    234e:	11 96       	adiw	r26, 0x01	; 1
    2350:	0d 90       	ld	r0, X+
    2352:	bc 91       	ld	r27, X
    2354:	a0 2d       	mov	r26, r0
    2356:	b7 83       	std	Z+7, r27	; 0x07
    2358:	a6 83       	std	Z+6, r26	; 0x06
    235a:	16 96       	adiw	r26, 0x06	; 6
    235c:	4d 91       	ld	r20, X+
    235e:	5c 91       	ld	r21, X
    2360:	17 97       	sbiw	r26, 0x07	; 7
    2362:	51 87       	std	Z+9, r21	; 0x09
    2364:	40 87       	std	Z+8, r20	; 0x08
    2366:	16 96       	adiw	r26, 0x06	; 6
    2368:	cd 91       	ld	r28, X+
    236a:	dc 91       	ld	r29, X
    236c:	17 97       	sbiw	r26, 0x07	; 7
    236e:	3d 83       	std	Y+5, r19	; 0x05
    2370:	2c 83       	std	Y+4, r18	; 0x04
    2372:	17 96       	adiw	r26, 0x07	; 7
    2374:	3c 93       	st	X, r19
    2376:	2e 93       	st	-X, r18
    2378:	16 97       	sbiw	r26, 0x06	; 6
    237a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    237c:	8a 9f       	mul	r24, r26
    237e:	d0 01       	movw	r26, r0
    2380:	11 24       	eor	r1, r1
    2382:	ab 51       	subi	r26, 0x1B	; 27
    2384:	b9 4e       	sbci	r27, 0xE9	; 233
    2386:	b5 87       	std	Z+13, r27	; 0x0d
    2388:	a4 87       	std	Z+12, r26	; 0x0c
    238a:	8c 91       	ld	r24, X
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	8c 93       	st	X, r24
    2390:	1c c0       	rjmp	.+56     	; 0x23ca <xTaskRemoveFromEventList+0x13e>
    2392:	40 ec       	ldi	r20, 0xC0	; 192
    2394:	56 e1       	ldi	r21, 0x16	; 22
    2396:	da 01       	movw	r26, r20
    2398:	11 96       	adiw	r26, 0x01	; 1
    239a:	cd 91       	ld	r28, X+
    239c:	dc 91       	ld	r29, X
    239e:	12 97       	sbiw	r26, 0x02	; 2
    23a0:	d3 8b       	std	Z+19, r29	; 0x13
    23a2:	c2 8b       	std	Z+18, r28	; 0x12
    23a4:	8e 81       	ldd	r24, Y+6	; 0x06
    23a6:	9f 81       	ldd	r25, Y+7	; 0x07
    23a8:	95 8b       	std	Z+21, r25	; 0x15
    23aa:	84 8b       	std	Z+20, r24	; 0x14
    23ac:	8e 81       	ldd	r24, Y+6	; 0x06
    23ae:	9f 81       	ldd	r25, Y+7	; 0x07
    23b0:	dc 01       	movw	r26, r24
    23b2:	15 96       	adiw	r26, 0x05	; 5
    23b4:	3c 93       	st	X, r19
    23b6:	2e 93       	st	-X, r18
    23b8:	14 97       	sbiw	r26, 0x04	; 4
    23ba:	3f 83       	std	Y+7, r19	; 0x07
    23bc:	2e 83       	std	Y+6, r18	; 0x06
    23be:	51 8f       	std	Z+25, r21	; 0x19
    23c0:	40 8f       	std	Z+24, r20	; 0x18
    23c2:	da 01       	movw	r26, r20
    23c4:	8c 91       	ld	r24, X
    23c6:	8f 5f       	subi	r24, 0xFF	; 255
    23c8:	8c 93       	st	X, r24
    23ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    23cc:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    23d0:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    23d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    23d6:	89 17       	cp	r24, r25
    23d8:	20 f4       	brcc	.+8      	; 0x23e2 <xTaskRemoveFromEventList+0x156>
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	80 93 9d 16 	sts	0x169D, r24	; 0x80169d <xYieldPending>
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <xTaskRemoveFromEventList+0x158>
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	08 95       	ret

000023ea <vTaskSetTimeOutState>:
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	0f 92       	push	r0
    23f0:	20 91 9c 16 	lds	r18, 0x169C	; 0x80169c <xNumOfOverflows>
    23f4:	fc 01       	movw	r30, r24
    23f6:	20 83       	st	Z, r18
    23f8:	40 91 a4 16 	lds	r20, 0x16A4	; 0x8016a4 <xTickCount>
    23fc:	50 91 a5 16 	lds	r21, 0x16A5	; 0x8016a5 <xTickCount+0x1>
    2400:	60 91 a6 16 	lds	r22, 0x16A6	; 0x8016a6 <xTickCount+0x2>
    2404:	70 91 a7 16 	lds	r23, 0x16A7	; 0x8016a7 <xTickCount+0x3>
    2408:	41 83       	std	Z+1, r20	; 0x01
    240a:	52 83       	std	Z+2, r21	; 0x02
    240c:	63 83       	std	Z+3, r22	; 0x03
    240e:	74 83       	std	Z+4, r23	; 0x04
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	08 95       	ret

00002416 <vTaskInternalSetTimeOutState>:
    2416:	20 91 9c 16 	lds	r18, 0x169C	; 0x80169c <xNumOfOverflows>
    241a:	fc 01       	movw	r30, r24
    241c:	20 83       	st	Z, r18
    241e:	40 91 a4 16 	lds	r20, 0x16A4	; 0x8016a4 <xTickCount>
    2422:	50 91 a5 16 	lds	r21, 0x16A5	; 0x8016a5 <xTickCount+0x1>
    2426:	60 91 a6 16 	lds	r22, 0x16A6	; 0x8016a6 <xTickCount+0x2>
    242a:	70 91 a7 16 	lds	r23, 0x16A7	; 0x8016a7 <xTickCount+0x3>
    242e:	41 83       	std	Z+1, r20	; 0x01
    2430:	52 83       	std	Z+2, r21	; 0x02
    2432:	63 83       	std	Z+3, r22	; 0x03
    2434:	74 83       	std	Z+4, r23	; 0x04
    2436:	08 95       	ret

00002438 <xTaskCheckForTimeOut>:
    2438:	8f 92       	push	r8
    243a:	9f 92       	push	r9
    243c:	af 92       	push	r10
    243e:	bf 92       	push	r11
    2440:	cf 92       	push	r12
    2442:	df 92       	push	r13
    2444:	ef 92       	push	r14
    2446:	ff 92       	push	r15
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	fb 01       	movw	r30, r22
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	0f 92       	push	r0
    2458:	c0 90 a4 16 	lds	r12, 0x16A4	; 0x8016a4 <xTickCount>
    245c:	d0 90 a5 16 	lds	r13, 0x16A5	; 0x8016a5 <xTickCount+0x1>
    2460:	e0 90 a6 16 	lds	r14, 0x16A6	; 0x8016a6 <xTickCount+0x2>
    2464:	f0 90 a7 16 	lds	r15, 0x16A7	; 0x8016a7 <xTickCount+0x3>
    2468:	dc 01       	movw	r26, r24
    246a:	11 96       	adiw	r26, 0x01	; 1
    246c:	0d 91       	ld	r16, X+
    246e:	1d 91       	ld	r17, X+
    2470:	2d 91       	ld	r18, X+
    2472:	3c 91       	ld	r19, X
    2474:	14 97       	sbiw	r26, 0x04	; 4
    2476:	46 01       	movw	r8, r12
    2478:	57 01       	movw	r10, r14
    247a:	80 1a       	sub	r8, r16
    247c:	91 0a       	sbc	r9, r17
    247e:	a2 0a       	sbc	r10, r18
    2480:	b3 0a       	sbc	r11, r19
    2482:	40 81       	ld	r20, Z
    2484:	51 81       	ldd	r21, Z+1	; 0x01
    2486:	62 81       	ldd	r22, Z+2	; 0x02
    2488:	73 81       	ldd	r23, Z+3	; 0x03
    248a:	4f 3f       	cpi	r20, 0xFF	; 255
    248c:	bf ef       	ldi	r27, 0xFF	; 255
    248e:	5b 07       	cpc	r21, r27
    2490:	6b 07       	cpc	r22, r27
    2492:	7b 07       	cpc	r23, r27
    2494:	39 f1       	breq	.+78     	; 0x24e4 <xTaskCheckForTimeOut+0xac>
    2496:	ec 01       	movw	r28, r24
    2498:	b8 81       	ld	r27, Y
    249a:	a0 91 9c 16 	lds	r26, 0x169C	; 0x80169c <xNumOfOverflows>
    249e:	ba 17       	cp	r27, r26
    24a0:	59 f0       	breq	.+22     	; 0x24b8 <xTaskCheckForTimeOut+0x80>
    24a2:	c0 16       	cp	r12, r16
    24a4:	d1 06       	cpc	r13, r17
    24a6:	e2 06       	cpc	r14, r18
    24a8:	f3 06       	cpc	r15, r19
    24aa:	30 f0       	brcs	.+12     	; 0x24b8 <xTaskCheckForTimeOut+0x80>
    24ac:	10 82       	st	Z, r1
    24ae:	11 82       	std	Z+1, r1	; 0x01
    24b0:	12 82       	std	Z+2, r1	; 0x02
    24b2:	13 82       	std	Z+3, r1	; 0x03
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	17 c0       	rjmp	.+46     	; 0x24e6 <xTaskCheckForTimeOut+0xae>
    24b8:	84 16       	cp	r8, r20
    24ba:	95 06       	cpc	r9, r21
    24bc:	a6 06       	cpc	r10, r22
    24be:	b7 06       	cpc	r11, r23
    24c0:	58 f4       	brcc	.+22     	; 0x24d8 <xTaskCheckForTimeOut+0xa0>
    24c2:	48 19       	sub	r20, r8
    24c4:	59 09       	sbc	r21, r9
    24c6:	6a 09       	sbc	r22, r10
    24c8:	7b 09       	sbc	r23, r11
    24ca:	40 83       	st	Z, r20
    24cc:	51 83       	std	Z+1, r21	; 0x01
    24ce:	62 83       	std	Z+2, r22	; 0x02
    24d0:	73 83       	std	Z+3, r23	; 0x03
    24d2:	a1 df       	rcall	.-190    	; 0x2416 <vTaskInternalSetTimeOutState>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	07 c0       	rjmp	.+14     	; 0x24e6 <xTaskCheckForTimeOut+0xae>
    24d8:	10 82       	st	Z, r1
    24da:	11 82       	std	Z+1, r1	; 0x01
    24dc:	12 82       	std	Z+2, r1	; 0x02
    24de:	13 82       	std	Z+3, r1	; 0x03
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	01 c0       	rjmp	.+2      	; 0x24e6 <xTaskCheckForTimeOut+0xae>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	0f 90       	pop	r0
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	ff 90       	pop	r15
    24f4:	ef 90       	pop	r14
    24f6:	df 90       	pop	r13
    24f8:	cf 90       	pop	r12
    24fa:	bf 90       	pop	r11
    24fc:	af 90       	pop	r10
    24fe:	9f 90       	pop	r9
    2500:	8f 90       	pop	r8
    2502:	08 95       	ret

00002504 <vTaskMissedYield>:
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	80 93 9d 16 	sts	0x169D, r24	; 0x80169d <xYieldPending>
    250a:	08 95       	ret

0000250c <xTaskGetCurrentTaskHandle>:
    250c:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <pxCurrentTCB>
    2510:	90 91 54 17 	lds	r25, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2514:	08 95       	ret

00002516 <xTaskGetSchedulerState>:
    2516:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <xSchedulerRunning>
    251a:	88 23       	and	r24, r24
    251c:	31 f0       	breq	.+12     	; 0x252a <xTaskGetSchedulerState+0x14>
    251e:	80 91 94 16 	lds	r24, 0x1694	; 0x801694 <uxSchedulerSuspended>
    2522:	81 11       	cpse	r24, r1
    2524:	04 c0       	rjmp	.+8      	; 0x252e <xTaskGetSchedulerState+0x18>
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	08 95       	ret
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	08 95       	ret
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	08 95       	ret

00002532 <xTaskPriorityInherit>:
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	fc 01       	movw	r30, r24
    253c:	89 2b       	or	r24, r25
    253e:	09 f4       	brne	.+2      	; 0x2542 <xTaskPriorityInherit+0x10>
    2540:	77 c0       	rjmp	.+238    	; 0x2630 <xTaskPriorityInherit+0xfe>
    2542:	82 8d       	ldd	r24, Z+26	; 0x1a
    2544:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
    2548:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    254c:	5a 96       	adiw	r26, 0x1a	; 26
    254e:	9c 91       	ld	r25, X
    2550:	89 17       	cp	r24, r25
    2552:	08 f0       	brcs	.+2      	; 0x2556 <xTaskPriorityInherit+0x24>
    2554:	63 c0       	rjmp	.+198    	; 0x261c <xTaskPriorityInherit+0xea>
    2556:	46 85       	ldd	r20, Z+14	; 0x0e
    2558:	57 85       	ldd	r21, Z+15	; 0x0f
    255a:	60 89       	ldd	r22, Z+16	; 0x10
    255c:	71 89       	ldd	r23, Z+17	; 0x11
    255e:	77 23       	and	r23, r23
    2560:	94 f0       	brlt	.+36     	; 0x2586 <xTaskPriorityInherit+0x54>
    2562:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
    2566:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    256a:	5a 96       	adiw	r26, 0x1a	; 26
    256c:	9c 91       	ld	r25, X
    256e:	4a e0       	ldi	r20, 0x0A	; 10
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	60 e0       	ldi	r22, 0x00	; 0
    2574:	70 e0       	ldi	r23, 0x00	; 0
    2576:	49 1b       	sub	r20, r25
    2578:	51 09       	sbc	r21, r1
    257a:	61 09       	sbc	r22, r1
    257c:	71 09       	sbc	r23, r1
    257e:	46 87       	std	Z+14, r20	; 0x0e
    2580:	57 87       	std	Z+15, r21	; 0x0f
    2582:	60 8b       	std	Z+16, r22	; 0x10
    2584:	71 8b       	std	Z+17, r23	; 0x11
    2586:	24 85       	ldd	r18, Z+12	; 0x0c
    2588:	35 85       	ldd	r19, Z+13	; 0x0d
    258a:	4b e0       	ldi	r20, 0x0B	; 11
    258c:	84 9f       	mul	r24, r20
    258e:	c0 01       	movw	r24, r0
    2590:	11 24       	eor	r1, r1
    2592:	8b 51       	subi	r24, 0x1B	; 27
    2594:	99 4e       	sbci	r25, 0xE9	; 233
    2596:	28 17       	cp	r18, r24
    2598:	39 07       	cpc	r19, r25
    259a:	b9 f5       	brne	.+110    	; 0x260a <xTaskPriorityInherit+0xd8>
    259c:	ef 01       	movw	r28, r30
    259e:	8f 01       	movw	r16, r30
    25a0:	0e 5f       	subi	r16, 0xFE	; 254
    25a2:	1f 4f       	sbci	r17, 0xFF	; 255
    25a4:	c8 01       	movw	r24, r16
    25a6:	0e 94 65 03 	call	0x6ca	; 0x6ca <uxListRemove>
    25aa:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    25ae:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    25b2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    25b4:	ea 8f       	std	Y+26, r30	; 0x1a
    25b6:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <uxTopReadyPriority>
    25ba:	8e 17       	cp	r24, r30
    25bc:	10 f4       	brcc	.+4      	; 0x25c2 <xTaskPriorityInherit+0x90>
    25be:	e0 93 a3 16 	sts	0x16A3, r30	; 0x8016a3 <uxTopReadyPriority>
    25c2:	8b e0       	ldi	r24, 0x0B	; 11
    25c4:	8e 9f       	mul	r24, r30
    25c6:	f0 01       	movw	r30, r0
    25c8:	11 24       	eor	r1, r1
    25ca:	eb 51       	subi	r30, 0x1B	; 27
    25cc:	f9 4e       	sbci	r31, 0xE9	; 233
    25ce:	01 80       	ldd	r0, Z+1	; 0x01
    25d0:	f2 81       	ldd	r31, Z+2	; 0x02
    25d2:	e0 2d       	mov	r30, r0
    25d4:	ff 83       	std	Y+7, r31	; 0x07
    25d6:	ee 83       	std	Y+6, r30	; 0x06
    25d8:	26 81       	ldd	r18, Z+6	; 0x06
    25da:	37 81       	ldd	r19, Z+7	; 0x07
    25dc:	39 87       	std	Y+9, r19	; 0x09
    25de:	28 87       	std	Y+8, r18	; 0x08
    25e0:	a6 81       	ldd	r26, Z+6	; 0x06
    25e2:	b7 81       	ldd	r27, Z+7	; 0x07
    25e4:	15 96       	adiw	r26, 0x05	; 5
    25e6:	1c 93       	st	X, r17
    25e8:	0e 93       	st	-X, r16
    25ea:	14 97       	sbiw	r26, 0x04	; 4
    25ec:	17 83       	std	Z+7, r17	; 0x07
    25ee:	06 83       	std	Z+6, r16	; 0x06
    25f0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25f2:	8e 9f       	mul	r24, r30
    25f4:	f0 01       	movw	r30, r0
    25f6:	11 24       	eor	r1, r1
    25f8:	eb 51       	subi	r30, 0x1B	; 27
    25fa:	f9 4e       	sbci	r31, 0xE9	; 233
    25fc:	fd 87       	std	Y+13, r31	; 0x0d
    25fe:	ec 87       	std	Y+12, r30	; 0x0c
    2600:	80 81       	ld	r24, Z
    2602:	8f 5f       	subi	r24, 0xFF	; 255
    2604:	80 83       	st	Z, r24
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	16 c0       	rjmp	.+44     	; 0x2636 <xTaskPriorityInherit+0x104>
    260a:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <pxCurrentTCB>
    260e:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2612:	5a 96       	adiw	r26, 0x1a	; 26
    2614:	8c 91       	ld	r24, X
    2616:	82 8f       	std	Z+26, r24	; 0x1a
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	0d c0       	rjmp	.+26     	; 0x2636 <xTaskPriorityInherit+0x104>
    261c:	95 a5       	ldd	r25, Z+45	; 0x2d
    261e:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    2622:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2626:	82 8d       	ldd	r24, Z+26	; 0x1a
    2628:	98 17       	cp	r25, r24
    262a:	20 f0       	brcs	.+8      	; 0x2634 <xTaskPriorityInherit+0x102>
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	03 c0       	rjmp	.+6      	; 0x2636 <xTaskPriorityInherit+0x104>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	01 c0       	rjmp	.+2      	; 0x2636 <xTaskPriorityInherit+0x104>
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	08 95       	ret

00002640 <xTaskPriorityDisinherit>:
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	fc 01       	movw	r30, r24
    264a:	89 2b       	or	r24, r25
    264c:	09 f4       	brne	.+2      	; 0x2650 <xTaskPriorityDisinherit+0x10>
    264e:	49 c0       	rjmp	.+146    	; 0x26e2 <xTaskPriorityDisinherit+0xa2>
    2650:	86 a5       	ldd	r24, Z+46	; 0x2e
    2652:	81 50       	subi	r24, 0x01	; 1
    2654:	86 a7       	std	Z+46, r24	; 0x2e
    2656:	22 8d       	ldd	r18, Z+26	; 0x1a
    2658:	95 a5       	ldd	r25, Z+45	; 0x2d
    265a:	29 17       	cp	r18, r25
    265c:	09 f4       	brne	.+2      	; 0x2660 <xTaskPriorityDisinherit+0x20>
    265e:	43 c0       	rjmp	.+134    	; 0x26e6 <xTaskPriorityDisinherit+0xa6>
    2660:	81 11       	cpse	r24, r1
    2662:	43 c0       	rjmp	.+134    	; 0x26ea <xTaskPriorityDisinherit+0xaa>
    2664:	ef 01       	movw	r28, r30
    2666:	8f 01       	movw	r16, r30
    2668:	0e 5f       	subi	r16, 0xFE	; 254
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	c8 01       	movw	r24, r16
    266e:	0e 94 65 03 	call	0x6ca	; 0x6ca <uxListRemove>
    2672:	ed a5       	ldd	r30, Y+45	; 0x2d
    2674:	ea 8f       	std	Y+26, r30	; 0x1a
    2676:	8a e0       	ldi	r24, 0x0A	; 10
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	a0 e0       	ldi	r26, 0x00	; 0
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	8e 1b       	sub	r24, r30
    2680:	91 09       	sbc	r25, r1
    2682:	a1 09       	sbc	r26, r1
    2684:	b1 09       	sbc	r27, r1
    2686:	8e 87       	std	Y+14, r24	; 0x0e
    2688:	9f 87       	std	Y+15, r25	; 0x0f
    268a:	a8 8b       	std	Y+16, r26	; 0x10
    268c:	b9 8b       	std	Y+17, r27	; 0x11
    268e:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <uxTopReadyPriority>
    2692:	8e 17       	cp	r24, r30
    2694:	10 f4       	brcc	.+4      	; 0x269a <xTaskPriorityDisinherit+0x5a>
    2696:	e0 93 a3 16 	sts	0x16A3, r30	; 0x8016a3 <uxTopReadyPriority>
    269a:	8b e0       	ldi	r24, 0x0B	; 11
    269c:	8e 9f       	mul	r24, r30
    269e:	f0 01       	movw	r30, r0
    26a0:	11 24       	eor	r1, r1
    26a2:	eb 51       	subi	r30, 0x1B	; 27
    26a4:	f9 4e       	sbci	r31, 0xE9	; 233
    26a6:	01 80       	ldd	r0, Z+1	; 0x01
    26a8:	f2 81       	ldd	r31, Z+2	; 0x02
    26aa:	e0 2d       	mov	r30, r0
    26ac:	ff 83       	std	Y+7, r31	; 0x07
    26ae:	ee 83       	std	Y+6, r30	; 0x06
    26b0:	26 81       	ldd	r18, Z+6	; 0x06
    26b2:	37 81       	ldd	r19, Z+7	; 0x07
    26b4:	39 87       	std	Y+9, r19	; 0x09
    26b6:	28 87       	std	Y+8, r18	; 0x08
    26b8:	a6 81       	ldd	r26, Z+6	; 0x06
    26ba:	b7 81       	ldd	r27, Z+7	; 0x07
    26bc:	15 96       	adiw	r26, 0x05	; 5
    26be:	1c 93       	st	X, r17
    26c0:	0e 93       	st	-X, r16
    26c2:	14 97       	sbiw	r26, 0x04	; 4
    26c4:	17 83       	std	Z+7, r17	; 0x07
    26c6:	06 83       	std	Z+6, r16	; 0x06
    26c8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26ca:	8e 9f       	mul	r24, r30
    26cc:	f0 01       	movw	r30, r0
    26ce:	11 24       	eor	r1, r1
    26d0:	eb 51       	subi	r30, 0x1B	; 27
    26d2:	f9 4e       	sbci	r31, 0xE9	; 233
    26d4:	fd 87       	std	Y+13, r31	; 0x0d
    26d6:	ec 87       	std	Y+12, r30	; 0x0c
    26d8:	80 81       	ld	r24, Z
    26da:	8f 5f       	subi	r24, 0xFF	; 255
    26dc:	80 83       	st	Z, r24
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	05 c0       	rjmp	.+10     	; 0x26ec <xTaskPriorityDisinherit+0xac>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	03 c0       	rjmp	.+6      	; 0x26ec <xTaskPriorityDisinherit+0xac>
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	01 c0       	rjmp	.+2      	; 0x26ec <xTaskPriorityDisinherit+0xac>
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	08 95       	ret

000026f6 <vTaskPriorityDisinheritAfterTimeout>:
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	fc 01       	movw	r30, r24
    2700:	89 2b       	or	r24, r25
    2702:	09 f4       	brne	.+2      	; 0x2706 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2704:	5a c0       	rjmp	.+180    	; 0x27ba <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2706:	85 a5       	ldd	r24, Z+45	; 0x2d
    2708:	86 17       	cp	r24, r22
    270a:	08 f4       	brcc	.+2      	; 0x270e <vTaskPriorityDisinheritAfterTimeout+0x18>
    270c:	86 2f       	mov	r24, r22
    270e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2710:	89 17       	cp	r24, r25
    2712:	09 f4       	brne	.+2      	; 0x2716 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2714:	52 c0       	rjmp	.+164    	; 0x27ba <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2716:	26 a5       	ldd	r18, Z+46	; 0x2e
    2718:	21 30       	cpi	r18, 0x01	; 1
    271a:	09 f0       	breq	.+2      	; 0x271e <vTaskPriorityDisinheritAfterTimeout+0x28>
    271c:	4e c0       	rjmp	.+156    	; 0x27ba <vTaskPriorityDisinheritAfterTimeout+0xc4>
    271e:	82 8f       	std	Z+26, r24	; 0x1a
    2720:	46 85       	ldd	r20, Z+14	; 0x0e
    2722:	57 85       	ldd	r21, Z+15	; 0x0f
    2724:	60 89       	ldd	r22, Z+16	; 0x10
    2726:	71 89       	ldd	r23, Z+17	; 0x11
    2728:	77 23       	and	r23, r23
    272a:	64 f0       	brlt	.+24     	; 0x2744 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    272c:	4a e0       	ldi	r20, 0x0A	; 10
    272e:	50 e0       	ldi	r21, 0x00	; 0
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	70 e0       	ldi	r23, 0x00	; 0
    2734:	48 1b       	sub	r20, r24
    2736:	51 09       	sbc	r21, r1
    2738:	61 09       	sbc	r22, r1
    273a:	71 09       	sbc	r23, r1
    273c:	46 87       	std	Z+14, r20	; 0x0e
    273e:	57 87       	std	Z+15, r21	; 0x0f
    2740:	60 8b       	std	Z+16, r22	; 0x10
    2742:	71 8b       	std	Z+17, r23	; 0x11
    2744:	24 85       	ldd	r18, Z+12	; 0x0c
    2746:	35 85       	ldd	r19, Z+13	; 0x0d
    2748:	4b e0       	ldi	r20, 0x0B	; 11
    274a:	94 9f       	mul	r25, r20
    274c:	c0 01       	movw	r24, r0
    274e:	11 24       	eor	r1, r1
    2750:	8b 51       	subi	r24, 0x1B	; 27
    2752:	99 4e       	sbci	r25, 0xE9	; 233
    2754:	28 17       	cp	r18, r24
    2756:	39 07       	cpc	r19, r25
    2758:	81 f5       	brne	.+96     	; 0x27ba <vTaskPriorityDisinheritAfterTimeout+0xc4>
    275a:	ef 01       	movw	r28, r30
    275c:	8f 01       	movw	r16, r30
    275e:	0e 5f       	subi	r16, 0xFE	; 254
    2760:	1f 4f       	sbci	r17, 0xFF	; 255
    2762:	c8 01       	movw	r24, r16
    2764:	0e 94 65 03 	call	0x6ca	; 0x6ca <uxListRemove>
    2768:	ea 8d       	ldd	r30, Y+26	; 0x1a
    276a:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <uxTopReadyPriority>
    276e:	8e 17       	cp	r24, r30
    2770:	10 f4       	brcc	.+4      	; 0x2776 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2772:	e0 93 a3 16 	sts	0x16A3, r30	; 0x8016a3 <uxTopReadyPriority>
    2776:	8b e0       	ldi	r24, 0x0B	; 11
    2778:	8e 9f       	mul	r24, r30
    277a:	f0 01       	movw	r30, r0
    277c:	11 24       	eor	r1, r1
    277e:	eb 51       	subi	r30, 0x1B	; 27
    2780:	f9 4e       	sbci	r31, 0xE9	; 233
    2782:	01 80       	ldd	r0, Z+1	; 0x01
    2784:	f2 81       	ldd	r31, Z+2	; 0x02
    2786:	e0 2d       	mov	r30, r0
    2788:	ff 83       	std	Y+7, r31	; 0x07
    278a:	ee 83       	std	Y+6, r30	; 0x06
    278c:	26 81       	ldd	r18, Z+6	; 0x06
    278e:	37 81       	ldd	r19, Z+7	; 0x07
    2790:	39 87       	std	Y+9, r19	; 0x09
    2792:	28 87       	std	Y+8, r18	; 0x08
    2794:	a6 81       	ldd	r26, Z+6	; 0x06
    2796:	b7 81       	ldd	r27, Z+7	; 0x07
    2798:	15 96       	adiw	r26, 0x05	; 5
    279a:	1c 93       	st	X, r17
    279c:	0e 93       	st	-X, r16
    279e:	14 97       	sbiw	r26, 0x04	; 4
    27a0:	17 83       	std	Z+7, r17	; 0x07
    27a2:	06 83       	std	Z+6, r16	; 0x06
    27a4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    27a6:	8e 9f       	mul	r24, r30
    27a8:	f0 01       	movw	r30, r0
    27aa:	11 24       	eor	r1, r1
    27ac:	eb 51       	subi	r30, 0x1B	; 27
    27ae:	f9 4e       	sbci	r31, 0xE9	; 233
    27b0:	fd 87       	std	Y+13, r31	; 0x0d
    27b2:	ec 87       	std	Y+12, r30	; 0x0c
    27b4:	80 81       	ld	r24, Z
    27b6:	8f 5f       	subi	r24, 0xFF	; 255
    27b8:	80 83       	st	Z, r24
    27ba:	df 91       	pop	r29
    27bc:	cf 91       	pop	r28
    27be:	1f 91       	pop	r17
    27c0:	0f 91       	pop	r16
    27c2:	08 95       	ret

000027c4 <pvTaskIncrementMutexHeldCount>:
    27c4:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <pxCurrentTCB>
    27c8:	90 91 54 17 	lds	r25, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    27cc:	89 2b       	or	r24, r25
    27ce:	39 f0       	breq	.+14     	; 0x27de <pvTaskIncrementMutexHeldCount+0x1a>
    27d0:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    27d4:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    27d8:	86 a5       	ldd	r24, Z+46	; 0x2e
    27da:	8f 5f       	subi	r24, 0xFF	; 255
    27dc:	86 a7       	std	Z+46, r24	; 0x2e
    27de:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <pxCurrentTCB>
    27e2:	90 91 54 17 	lds	r25, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    27e6:	08 95       	ret

000027e8 <xTaskGenericNotifyWait>:
    27e8:	4f 92       	push	r4
    27ea:	5f 92       	push	r5
    27ec:	6f 92       	push	r6
    27ee:	7f 92       	push	r7
    27f0:	af 92       	push	r10
    27f2:	bf 92       	push	r11
    27f4:	cf 92       	push	r12
    27f6:	df 92       	push	r13
    27f8:	ef 92       	push	r14
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	28 01       	movw	r4, r16
    2806:	39 01       	movw	r6, r18
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	0f 92       	push	r0
    280e:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    2812:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2816:	c8 2f       	mov	r28, r24
    2818:	d0 e0       	ldi	r29, 0x00	; 0
    281a:	ec 0f       	add	r30, r28
    281c:	fd 1f       	adc	r31, r29
    281e:	83 a9       	ldd	r24, Z+51	; 0x33
    2820:	82 30       	cpi	r24, 0x02	; 2
    2822:	71 f1       	breq	.+92     	; 0x2880 <xTaskGenericNotifyWait+0x98>
    2824:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    2828:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    282c:	ce 01       	movw	r24, r28
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	e8 0f       	add	r30, r24
    2838:	f9 1f       	adc	r31, r25
    283a:	87 a5       	ldd	r24, Z+47	; 0x2f
    283c:	90 a9       	ldd	r25, Z+48	; 0x30
    283e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2840:	b2 a9       	ldd	r27, Z+50	; 0x32
    2842:	40 95       	com	r20
    2844:	50 95       	com	r21
    2846:	60 95       	com	r22
    2848:	70 95       	com	r23
    284a:	48 23       	and	r20, r24
    284c:	59 23       	and	r21, r25
    284e:	6a 23       	and	r22, r26
    2850:	7b 23       	and	r23, r27
    2852:	47 a7       	std	Z+47, r20	; 0x2f
    2854:	50 ab       	std	Z+48, r21	; 0x30
    2856:	61 ab       	std	Z+49, r22	; 0x31
    2858:	72 ab       	std	Z+50, r23	; 0x32
    285a:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    285e:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2862:	ec 0f       	add	r30, r28
    2864:	fd 1f       	adc	r31, r29
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	83 ab       	std	Z+51, r24	; 0x33
    286a:	a1 14       	cp	r10, r1
    286c:	b1 04       	cpc	r11, r1
    286e:	c1 04       	cpc	r12, r1
    2870:	d1 04       	cpc	r13, r1
    2872:	31 f0       	breq	.+12     	; 0x2880 <xTaskGenericNotifyWait+0x98>
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	c6 01       	movw	r24, r12
    2878:	b5 01       	movw	r22, r10
    287a:	88 d8       	rcall	.-3824   	; 0x198c <prvAddCurrentTaskToDelayedList>
    287c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vPortYield>
    2880:	0f 90       	pop	r0
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	0f 92       	push	r0
    288a:	e1 14       	cp	r14, r1
    288c:	f1 04       	cpc	r15, r1
    288e:	a1 f0       	breq	.+40     	; 0x28b8 <xTaskGenericNotifyWait+0xd0>
    2890:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    2894:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2898:	ce 01       	movw	r24, r28
    289a:	88 0f       	add	r24, r24
    289c:	99 1f       	adc	r25, r25
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	e8 0f       	add	r30, r24
    28a4:	f9 1f       	adc	r31, r25
    28a6:	87 a5       	ldd	r24, Z+47	; 0x2f
    28a8:	90 a9       	ldd	r25, Z+48	; 0x30
    28aa:	a1 a9       	ldd	r26, Z+49	; 0x31
    28ac:	b2 a9       	ldd	r27, Z+50	; 0x32
    28ae:	f7 01       	movw	r30, r14
    28b0:	80 83       	st	Z, r24
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	a2 83       	std	Z+2, r26	; 0x02
    28b6:	b3 83       	std	Z+3, r27	; 0x03
    28b8:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    28bc:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    28c0:	ec 0f       	add	r30, r28
    28c2:	fd 1f       	adc	r31, r29
    28c4:	83 a9       	ldd	r24, Z+51	; 0x33
    28c6:	82 30       	cpi	r24, 0x02	; 2
    28c8:	e9 f4       	brne	.+58     	; 0x2904 <xTaskGenericNotifyWait+0x11c>
    28ca:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    28ce:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    28d2:	ce 01       	movw	r24, r28
    28d4:	88 0f       	add	r24, r24
    28d6:	99 1f       	adc	r25, r25
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	e8 0f       	add	r30, r24
    28de:	f9 1f       	adc	r31, r25
    28e0:	87 a5       	ldd	r24, Z+47	; 0x2f
    28e2:	90 a9       	ldd	r25, Z+48	; 0x30
    28e4:	a1 a9       	ldd	r26, Z+49	; 0x31
    28e6:	b2 a9       	ldd	r27, Z+50	; 0x32
    28e8:	40 94       	com	r4
    28ea:	50 94       	com	r5
    28ec:	60 94       	com	r6
    28ee:	70 94       	com	r7
    28f0:	48 22       	and	r4, r24
    28f2:	59 22       	and	r5, r25
    28f4:	6a 22       	and	r6, r26
    28f6:	7b 22       	and	r7, r27
    28f8:	47 a6       	std	Z+47, r4	; 0x2f
    28fa:	50 aa       	std	Z+48, r5	; 0x30
    28fc:	61 aa       	std	Z+49, r6	; 0x31
    28fe:	72 aa       	std	Z+50, r7	; 0x32
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <xTaskGenericNotifyWait+0x11e>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	20 91 53 17 	lds	r18, 0x1753	; 0x801753 <pxCurrentTCB>
    290a:	30 91 54 17 	lds	r19, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    290e:	c2 0f       	add	r28, r18
    2910:	d3 1f       	adc	r29, r19
    2912:	1b aa       	std	Y+51, r1	; 0x33
    2914:	0f 90       	pop	r0
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	df 90       	pop	r13
    2926:	cf 90       	pop	r12
    2928:	bf 90       	pop	r11
    292a:	af 90       	pop	r10
    292c:	7f 90       	pop	r7
    292e:	6f 90       	pop	r6
    2930:	5f 90       	pop	r5
    2932:	4f 90       	pop	r4
    2934:	08 95       	ret

00002936 <xTaskGenericNotify>:
    2936:	8f 92       	push	r8
    2938:	9f 92       	push	r9
    293a:	af 92       	push	r10
    293c:	bf 92       	push	r11
    293e:	ef 92       	push	r14
    2940:	ff 92       	push	r15
    2942:	0f 93       	push	r16
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
    2948:	dc 01       	movw	r26, r24
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	0f 92       	push	r0
    2950:	e1 14       	cp	r14, r1
    2952:	f1 04       	cpc	r15, r1
    2954:	89 f0       	breq	.+34     	; 0x2978 <xTaskGenericNotify+0x42>
    2956:	e6 2f       	mov	r30, r22
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	e8 0f       	add	r30, r24
    2964:	f9 1f       	adc	r31, r25
    2966:	87 a4       	ldd	r8, Z+47	; 0x2f
    2968:	90 a8       	ldd	r9, Z+48	; 0x30
    296a:	a1 a8       	ldd	r10, Z+49	; 0x31
    296c:	b2 a8       	ldd	r11, Z+50	; 0x32
    296e:	f7 01       	movw	r30, r14
    2970:	80 82       	st	Z, r8
    2972:	91 82       	std	Z+1, r9	; 0x01
    2974:	a2 82       	std	Z+2, r10	; 0x02
    2976:	b3 82       	std	Z+3, r11	; 0x03
    2978:	70 e0       	ldi	r23, 0x00	; 0
    297a:	fd 01       	movw	r30, r26
    297c:	e6 0f       	add	r30, r22
    297e:	f7 1f       	adc	r31, r23
    2980:	83 a9       	ldd	r24, Z+51	; 0x33
    2982:	92 e0       	ldi	r25, 0x02	; 2
    2984:	93 ab       	std	Z+51, r25	; 0x33
    2986:	02 30       	cpi	r16, 0x02	; 2
    2988:	01 f1       	breq	.+64     	; 0x29ca <xTaskGenericNotify+0x94>
    298a:	18 f4       	brcc	.+6      	; 0x2992 <xTaskGenericNotify+0x5c>
    298c:	01 30       	cpi	r16, 0x01	; 1
    298e:	31 f0       	breq	.+12     	; 0x299c <xTaskGenericNotify+0x66>
    2990:	4d c0       	rjmp	.+154    	; 0x2a2c <xTaskGenericNotify+0xf6>
    2992:	03 30       	cpi	r16, 0x03	; 3
    2994:	79 f1       	breq	.+94     	; 0x29f4 <xTaskGenericNotify+0xbe>
    2996:	04 30       	cpi	r16, 0x04	; 4
    2998:	d1 f1       	breq	.+116    	; 0x2a0e <xTaskGenericNotify+0xd8>
    299a:	48 c0       	rjmp	.+144    	; 0x2a2c <xTaskGenericNotify+0xf6>
    299c:	66 0f       	add	r22, r22
    299e:	77 1f       	adc	r23, r23
    29a0:	66 0f       	add	r22, r22
    29a2:	77 1f       	adc	r23, r23
    29a4:	fd 01       	movw	r30, r26
    29a6:	e6 0f       	add	r30, r22
    29a8:	f7 1f       	adc	r31, r23
    29aa:	87 a4       	ldd	r8, Z+47	; 0x2f
    29ac:	90 a8       	ldd	r9, Z+48	; 0x30
    29ae:	a1 a8       	ldd	r10, Z+49	; 0x31
    29b0:	b2 a8       	ldd	r11, Z+50	; 0x32
    29b2:	ba 01       	movw	r22, r20
    29b4:	a9 01       	movw	r20, r18
    29b6:	48 29       	or	r20, r8
    29b8:	59 29       	or	r21, r9
    29ba:	6a 29       	or	r22, r10
    29bc:	7b 29       	or	r23, r11
    29be:	47 a7       	std	Z+47, r20	; 0x2f
    29c0:	50 ab       	std	Z+48, r21	; 0x30
    29c2:	61 ab       	std	Z+49, r22	; 0x31
    29c4:	72 ab       	std	Z+50, r23	; 0x32
    29c6:	01 e0       	ldi	r16, 0x01	; 1
    29c8:	34 c0       	rjmp	.+104    	; 0x2a32 <xTaskGenericNotify+0xfc>
    29ca:	66 0f       	add	r22, r22
    29cc:	77 1f       	adc	r23, r23
    29ce:	66 0f       	add	r22, r22
    29d0:	77 1f       	adc	r23, r23
    29d2:	fd 01       	movw	r30, r26
    29d4:	e6 0f       	add	r30, r22
    29d6:	f7 1f       	adc	r31, r23
    29d8:	47 a5       	ldd	r20, Z+47	; 0x2f
    29da:	50 a9       	ldd	r21, Z+48	; 0x30
    29dc:	61 a9       	ldd	r22, Z+49	; 0x31
    29de:	72 a9       	ldd	r23, Z+50	; 0x32
    29e0:	4f 5f       	subi	r20, 0xFF	; 255
    29e2:	5f 4f       	sbci	r21, 0xFF	; 255
    29e4:	6f 4f       	sbci	r22, 0xFF	; 255
    29e6:	7f 4f       	sbci	r23, 0xFF	; 255
    29e8:	47 a7       	std	Z+47, r20	; 0x2f
    29ea:	50 ab       	std	Z+48, r21	; 0x30
    29ec:	61 ab       	std	Z+49, r22	; 0x31
    29ee:	72 ab       	std	Z+50, r23	; 0x32
    29f0:	01 e0       	ldi	r16, 0x01	; 1
    29f2:	1f c0       	rjmp	.+62     	; 0x2a32 <xTaskGenericNotify+0xfc>
    29f4:	66 0f       	add	r22, r22
    29f6:	77 1f       	adc	r23, r23
    29f8:	66 0f       	add	r22, r22
    29fa:	77 1f       	adc	r23, r23
    29fc:	fd 01       	movw	r30, r26
    29fe:	e6 0f       	add	r30, r22
    2a00:	f7 1f       	adc	r31, r23
    2a02:	27 a7       	std	Z+47, r18	; 0x2f
    2a04:	30 ab       	std	Z+48, r19	; 0x30
    2a06:	41 ab       	std	Z+49, r20	; 0x31
    2a08:	52 ab       	std	Z+50, r21	; 0x32
    2a0a:	01 e0       	ldi	r16, 0x01	; 1
    2a0c:	12 c0       	rjmp	.+36     	; 0x2a32 <xTaskGenericNotify+0xfc>
    2a0e:	82 30       	cpi	r24, 0x02	; 2
    2a10:	79 f0       	breq	.+30     	; 0x2a30 <xTaskGenericNotify+0xfa>
    2a12:	66 0f       	add	r22, r22
    2a14:	77 1f       	adc	r23, r23
    2a16:	66 0f       	add	r22, r22
    2a18:	77 1f       	adc	r23, r23
    2a1a:	fd 01       	movw	r30, r26
    2a1c:	e6 0f       	add	r30, r22
    2a1e:	f7 1f       	adc	r31, r23
    2a20:	27 a7       	std	Z+47, r18	; 0x2f
    2a22:	30 ab       	std	Z+48, r19	; 0x30
    2a24:	41 ab       	std	Z+49, r20	; 0x31
    2a26:	52 ab       	std	Z+50, r21	; 0x32
    2a28:	01 e0       	ldi	r16, 0x01	; 1
    2a2a:	03 c0       	rjmp	.+6      	; 0x2a32 <xTaskGenericNotify+0xfc>
    2a2c:	01 e0       	ldi	r16, 0x01	; 1
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <xTaskGenericNotify+0xfc>
    2a30:	00 e0       	ldi	r16, 0x00	; 0
    2a32:	81 30       	cpi	r24, 0x01	; 1
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <xTaskGenericNotify+0x102>
    2a36:	69 c0       	rjmp	.+210    	; 0x2b0a <xTaskGenericNotify+0x1d4>
    2a38:	1c 96       	adiw	r26, 0x0c	; 12
    2a3a:	ed 91       	ld	r30, X+
    2a3c:	fc 91       	ld	r31, X
    2a3e:	1d 97       	sbiw	r26, 0x0d	; 13
    2a40:	16 96       	adiw	r26, 0x06	; 6
    2a42:	cd 91       	ld	r28, X+
    2a44:	dc 91       	ld	r29, X
    2a46:	17 97       	sbiw	r26, 0x07	; 7
    2a48:	18 96       	adiw	r26, 0x08	; 8
    2a4a:	8d 91       	ld	r24, X+
    2a4c:	9c 91       	ld	r25, X
    2a4e:	19 97       	sbiw	r26, 0x09	; 9
    2a50:	9f 83       	std	Y+7, r25	; 0x07
    2a52:	8e 83       	std	Y+6, r24	; 0x06
    2a54:	18 96       	adiw	r26, 0x08	; 8
    2a56:	cd 91       	ld	r28, X+
    2a58:	dc 91       	ld	r29, X
    2a5a:	19 97       	sbiw	r26, 0x09	; 9
    2a5c:	16 96       	adiw	r26, 0x06	; 6
    2a5e:	8d 91       	ld	r24, X+
    2a60:	9c 91       	ld	r25, X
    2a62:	17 97       	sbiw	r26, 0x07	; 7
    2a64:	9d 83       	std	Y+5, r25	; 0x05
    2a66:	8c 83       	std	Y+4, r24	; 0x04
    2a68:	81 81       	ldd	r24, Z+1	; 0x01
    2a6a:	92 81       	ldd	r25, Z+2	; 0x02
    2a6c:	9d 01       	movw	r18, r26
    2a6e:	2e 5f       	subi	r18, 0xFE	; 254
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	82 17       	cp	r24, r18
    2a74:	93 07       	cpc	r25, r19
    2a76:	31 f4       	brne	.+12     	; 0x2a84 <xTaskGenericNotify+0x14e>
    2a78:	18 96       	adiw	r26, 0x08	; 8
    2a7a:	8d 91       	ld	r24, X+
    2a7c:	9c 91       	ld	r25, X
    2a7e:	19 97       	sbiw	r26, 0x09	; 9
    2a80:	92 83       	std	Z+2, r25	; 0x02
    2a82:	81 83       	std	Z+1, r24	; 0x01
    2a84:	1d 96       	adiw	r26, 0x0d	; 13
    2a86:	1c 92       	st	X, r1
    2a88:	1e 92       	st	-X, r1
    2a8a:	1c 97       	sbiw	r26, 0x0c	; 12
    2a8c:	80 81       	ld	r24, Z
    2a8e:	81 50       	subi	r24, 0x01	; 1
    2a90:	80 83       	st	Z, r24
    2a92:	5a 96       	adiw	r26, 0x1a	; 26
    2a94:	ec 91       	ld	r30, X
    2a96:	5a 97       	sbiw	r26, 0x1a	; 26
    2a98:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <uxTopReadyPriority>
    2a9c:	8e 17       	cp	r24, r30
    2a9e:	10 f4       	brcc	.+4      	; 0x2aa4 <xTaskGenericNotify+0x16e>
    2aa0:	e0 93 a3 16 	sts	0x16A3, r30	; 0x8016a3 <uxTopReadyPriority>
    2aa4:	8b e0       	ldi	r24, 0x0B	; 11
    2aa6:	8e 9f       	mul	r24, r30
    2aa8:	f0 01       	movw	r30, r0
    2aaa:	11 24       	eor	r1, r1
    2aac:	eb 51       	subi	r30, 0x1B	; 27
    2aae:	f9 4e       	sbci	r31, 0xE9	; 233
    2ab0:	01 80       	ldd	r0, Z+1	; 0x01
    2ab2:	f2 81       	ldd	r31, Z+2	; 0x02
    2ab4:	e0 2d       	mov	r30, r0
    2ab6:	17 96       	adiw	r26, 0x07	; 7
    2ab8:	fc 93       	st	X, r31
    2aba:	ee 93       	st	-X, r30
    2abc:	16 97       	sbiw	r26, 0x06	; 6
    2abe:	46 81       	ldd	r20, Z+6	; 0x06
    2ac0:	57 81       	ldd	r21, Z+7	; 0x07
    2ac2:	19 96       	adiw	r26, 0x09	; 9
    2ac4:	5c 93       	st	X, r21
    2ac6:	4e 93       	st	-X, r20
    2ac8:	18 97       	sbiw	r26, 0x08	; 8
    2aca:	c6 81       	ldd	r28, Z+6	; 0x06
    2acc:	d7 81       	ldd	r29, Z+7	; 0x07
    2ace:	3d 83       	std	Y+5, r19	; 0x05
    2ad0:	2c 83       	std	Y+4, r18	; 0x04
    2ad2:	37 83       	std	Z+7, r19	; 0x07
    2ad4:	26 83       	std	Z+6, r18	; 0x06
    2ad6:	5a 96       	adiw	r26, 0x1a	; 26
    2ad8:	ec 91       	ld	r30, X
    2ada:	5a 97       	sbiw	r26, 0x1a	; 26
    2adc:	8e 9f       	mul	r24, r30
    2ade:	f0 01       	movw	r30, r0
    2ae0:	11 24       	eor	r1, r1
    2ae2:	eb 51       	subi	r30, 0x1B	; 27
    2ae4:	f9 4e       	sbci	r31, 0xE9	; 233
    2ae6:	1d 96       	adiw	r26, 0x0d	; 13
    2ae8:	fc 93       	st	X, r31
    2aea:	ee 93       	st	-X, r30
    2aec:	1c 97       	sbiw	r26, 0x0c	; 12
    2aee:	80 81       	ld	r24, Z
    2af0:	8f 5f       	subi	r24, 0xFF	; 255
    2af2:	80 83       	st	Z, r24
    2af4:	5a 96       	adiw	r26, 0x1a	; 26
    2af6:	9c 91       	ld	r25, X
    2af8:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    2afc:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2b00:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b02:	89 17       	cp	r24, r25
    2b04:	10 f4       	brcc	.+4      	; 0x2b0a <xTaskGenericNotify+0x1d4>
    2b06:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vPortYield>
    2b0a:	0f 90       	pop	r0
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	80 2f       	mov	r24, r16
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	0f 91       	pop	r16
    2b16:	ff 90       	pop	r15
    2b18:	ef 90       	pop	r14
    2b1a:	bf 90       	pop	r11
    2b1c:	af 90       	pop	r10
    2b1e:	9f 90       	pop	r9
    2b20:	8f 90       	pop	r8
    2b22:	08 95       	ret

00002b24 <xTaskGenericNotifyFromISR>:
    2b24:	8f 92       	push	r8
    2b26:	9f 92       	push	r9
    2b28:	af 92       	push	r10
    2b2a:	bf 92       	push	r11
    2b2c:	cf 92       	push	r12
    2b2e:	df 92       	push	r13
    2b30:	ef 92       	push	r14
    2b32:	ff 92       	push	r15
    2b34:	0f 93       	push	r16
    2b36:	cf 93       	push	r28
    2b38:	df 93       	push	r29
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	e1 14       	cp	r14, r1
    2b3e:	f1 04       	cpc	r15, r1
    2b40:	89 f0       	breq	.+34     	; 0x2b64 <xTaskGenericNotifyFromISR+0x40>
    2b42:	e6 2f       	mov	r30, r22
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	ee 0f       	add	r30, r30
    2b48:	ff 1f       	adc	r31, r31
    2b4a:	ee 0f       	add	r30, r30
    2b4c:	ff 1f       	adc	r31, r31
    2b4e:	e8 0f       	add	r30, r24
    2b50:	f9 1f       	adc	r31, r25
    2b52:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b54:	90 a8       	ldd	r9, Z+48	; 0x30
    2b56:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b58:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b5a:	f7 01       	movw	r30, r14
    2b5c:	80 82       	st	Z, r8
    2b5e:	91 82       	std	Z+1, r9	; 0x01
    2b60:	a2 82       	std	Z+2, r10	; 0x02
    2b62:	b3 82       	std	Z+3, r11	; 0x03
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	fd 01       	movw	r30, r26
    2b68:	e6 0f       	add	r30, r22
    2b6a:	f7 1f       	adc	r31, r23
    2b6c:	93 a9       	ldd	r25, Z+51	; 0x33
    2b6e:	82 e0       	ldi	r24, 0x02	; 2
    2b70:	83 ab       	std	Z+51, r24	; 0x33
    2b72:	02 30       	cpi	r16, 0x02	; 2
    2b74:	01 f1       	breq	.+64     	; 0x2bb6 <xTaskGenericNotifyFromISR+0x92>
    2b76:	18 f4       	brcc	.+6      	; 0x2b7e <xTaskGenericNotifyFromISR+0x5a>
    2b78:	01 30       	cpi	r16, 0x01	; 1
    2b7a:	31 f0       	breq	.+12     	; 0x2b88 <xTaskGenericNotifyFromISR+0x64>
    2b7c:	4d c0       	rjmp	.+154    	; 0x2c18 <xTaskGenericNotifyFromISR+0xf4>
    2b7e:	03 30       	cpi	r16, 0x03	; 3
    2b80:	79 f1       	breq	.+94     	; 0x2be0 <xTaskGenericNotifyFromISR+0xbc>
    2b82:	04 30       	cpi	r16, 0x04	; 4
    2b84:	d1 f1       	breq	.+116    	; 0x2bfa <xTaskGenericNotifyFromISR+0xd6>
    2b86:	48 c0       	rjmp	.+144    	; 0x2c18 <xTaskGenericNotifyFromISR+0xf4>
    2b88:	66 0f       	add	r22, r22
    2b8a:	77 1f       	adc	r23, r23
    2b8c:	66 0f       	add	r22, r22
    2b8e:	77 1f       	adc	r23, r23
    2b90:	fd 01       	movw	r30, r26
    2b92:	e6 0f       	add	r30, r22
    2b94:	f7 1f       	adc	r31, r23
    2b96:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b98:	90 a8       	ldd	r9, Z+48	; 0x30
    2b9a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b9c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b9e:	ba 01       	movw	r22, r20
    2ba0:	a9 01       	movw	r20, r18
    2ba2:	48 29       	or	r20, r8
    2ba4:	59 29       	or	r21, r9
    2ba6:	6a 29       	or	r22, r10
    2ba8:	7b 29       	or	r23, r11
    2baa:	47 a7       	std	Z+47, r20	; 0x2f
    2bac:	50 ab       	std	Z+48, r21	; 0x30
    2bae:	61 ab       	std	Z+49, r22	; 0x31
    2bb0:	72 ab       	std	Z+50, r23	; 0x32
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	34 c0       	rjmp	.+104    	; 0x2c1e <xTaskGenericNotifyFromISR+0xfa>
    2bb6:	66 0f       	add	r22, r22
    2bb8:	77 1f       	adc	r23, r23
    2bba:	66 0f       	add	r22, r22
    2bbc:	77 1f       	adc	r23, r23
    2bbe:	fd 01       	movw	r30, r26
    2bc0:	e6 0f       	add	r30, r22
    2bc2:	f7 1f       	adc	r31, r23
    2bc4:	47 a5       	ldd	r20, Z+47	; 0x2f
    2bc6:	50 a9       	ldd	r21, Z+48	; 0x30
    2bc8:	61 a9       	ldd	r22, Z+49	; 0x31
    2bca:	72 a9       	ldd	r23, Z+50	; 0x32
    2bcc:	4f 5f       	subi	r20, 0xFF	; 255
    2bce:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd0:	6f 4f       	sbci	r22, 0xFF	; 255
    2bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd4:	47 a7       	std	Z+47, r20	; 0x2f
    2bd6:	50 ab       	std	Z+48, r21	; 0x30
    2bd8:	61 ab       	std	Z+49, r22	; 0x31
    2bda:	72 ab       	std	Z+50, r23	; 0x32
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	1f c0       	rjmp	.+62     	; 0x2c1e <xTaskGenericNotifyFromISR+0xfa>
    2be0:	66 0f       	add	r22, r22
    2be2:	77 1f       	adc	r23, r23
    2be4:	66 0f       	add	r22, r22
    2be6:	77 1f       	adc	r23, r23
    2be8:	fd 01       	movw	r30, r26
    2bea:	e6 0f       	add	r30, r22
    2bec:	f7 1f       	adc	r31, r23
    2bee:	27 a7       	std	Z+47, r18	; 0x2f
    2bf0:	30 ab       	std	Z+48, r19	; 0x30
    2bf2:	41 ab       	std	Z+49, r20	; 0x31
    2bf4:	52 ab       	std	Z+50, r21	; 0x32
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	12 c0       	rjmp	.+36     	; 0x2c1e <xTaskGenericNotifyFromISR+0xfa>
    2bfa:	92 30       	cpi	r25, 0x02	; 2
    2bfc:	79 f0       	breq	.+30     	; 0x2c1c <xTaskGenericNotifyFromISR+0xf8>
    2bfe:	66 0f       	add	r22, r22
    2c00:	77 1f       	adc	r23, r23
    2c02:	66 0f       	add	r22, r22
    2c04:	77 1f       	adc	r23, r23
    2c06:	fd 01       	movw	r30, r26
    2c08:	e6 0f       	add	r30, r22
    2c0a:	f7 1f       	adc	r31, r23
    2c0c:	27 a7       	std	Z+47, r18	; 0x2f
    2c0e:	30 ab       	std	Z+48, r19	; 0x30
    2c10:	41 ab       	std	Z+49, r20	; 0x31
    2c12:	52 ab       	std	Z+50, r21	; 0x32
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	03 c0       	rjmp	.+6      	; 0x2c1e <xTaskGenericNotifyFromISR+0xfa>
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	01 c0       	rjmp	.+2      	; 0x2c1e <xTaskGenericNotifyFromISR+0xfa>
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	91 30       	cpi	r25, 0x01	; 1
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <xTaskGenericNotifyFromISR+0x100>
    2c22:	96 c0       	rjmp	.+300    	; 0x2d50 <xTaskGenericNotifyFromISR+0x22c>
    2c24:	90 91 94 16 	lds	r25, 0x1694	; 0x801694 <uxSchedulerSuspended>
    2c28:	91 11       	cpse	r25, r1
    2c2a:	5f c0       	rjmp	.+190    	; 0x2cea <xTaskGenericNotifyFromISR+0x1c6>
    2c2c:	1c 96       	adiw	r26, 0x0c	; 12
    2c2e:	ed 91       	ld	r30, X+
    2c30:	fc 91       	ld	r31, X
    2c32:	1d 97       	sbiw	r26, 0x0d	; 13
    2c34:	16 96       	adiw	r26, 0x06	; 6
    2c36:	cd 91       	ld	r28, X+
    2c38:	dc 91       	ld	r29, X
    2c3a:	17 97       	sbiw	r26, 0x07	; 7
    2c3c:	18 96       	adiw	r26, 0x08	; 8
    2c3e:	2d 91       	ld	r18, X+
    2c40:	3c 91       	ld	r19, X
    2c42:	19 97       	sbiw	r26, 0x09	; 9
    2c44:	3f 83       	std	Y+7, r19	; 0x07
    2c46:	2e 83       	std	Y+6, r18	; 0x06
    2c48:	18 96       	adiw	r26, 0x08	; 8
    2c4a:	cd 91       	ld	r28, X+
    2c4c:	dc 91       	ld	r29, X
    2c4e:	19 97       	sbiw	r26, 0x09	; 9
    2c50:	16 96       	adiw	r26, 0x06	; 6
    2c52:	2d 91       	ld	r18, X+
    2c54:	3c 91       	ld	r19, X
    2c56:	17 97       	sbiw	r26, 0x07	; 7
    2c58:	3d 83       	std	Y+5, r19	; 0x05
    2c5a:	2c 83       	std	Y+4, r18	; 0x04
    2c5c:	41 81       	ldd	r20, Z+1	; 0x01
    2c5e:	52 81       	ldd	r21, Z+2	; 0x02
    2c60:	9d 01       	movw	r18, r26
    2c62:	2e 5f       	subi	r18, 0xFE	; 254
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	42 17       	cp	r20, r18
    2c68:	53 07       	cpc	r21, r19
    2c6a:	31 f4       	brne	.+12     	; 0x2c78 <xTaskGenericNotifyFromISR+0x154>
    2c6c:	18 96       	adiw	r26, 0x08	; 8
    2c6e:	4d 91       	ld	r20, X+
    2c70:	5c 91       	ld	r21, X
    2c72:	19 97       	sbiw	r26, 0x09	; 9
    2c74:	52 83       	std	Z+2, r21	; 0x02
    2c76:	41 83       	std	Z+1, r20	; 0x01
    2c78:	1d 96       	adiw	r26, 0x0d	; 13
    2c7a:	1c 92       	st	X, r1
    2c7c:	1e 92       	st	-X, r1
    2c7e:	1c 97       	sbiw	r26, 0x0c	; 12
    2c80:	90 81       	ld	r25, Z
    2c82:	91 50       	subi	r25, 0x01	; 1
    2c84:	90 83       	st	Z, r25
    2c86:	5a 96       	adiw	r26, 0x1a	; 26
    2c88:	ec 91       	ld	r30, X
    2c8a:	5a 97       	sbiw	r26, 0x1a	; 26
    2c8c:	90 91 a3 16 	lds	r25, 0x16A3	; 0x8016a3 <uxTopReadyPriority>
    2c90:	9e 17       	cp	r25, r30
    2c92:	10 f4       	brcc	.+4      	; 0x2c98 <xTaskGenericNotifyFromISR+0x174>
    2c94:	e0 93 a3 16 	sts	0x16A3, r30	; 0x8016a3 <uxTopReadyPriority>
    2c98:	9b e0       	ldi	r25, 0x0B	; 11
    2c9a:	9e 9f       	mul	r25, r30
    2c9c:	f0 01       	movw	r30, r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	eb 51       	subi	r30, 0x1B	; 27
    2ca2:	f9 4e       	sbci	r31, 0xE9	; 233
    2ca4:	01 80       	ldd	r0, Z+1	; 0x01
    2ca6:	f2 81       	ldd	r31, Z+2	; 0x02
    2ca8:	e0 2d       	mov	r30, r0
    2caa:	17 96       	adiw	r26, 0x07	; 7
    2cac:	fc 93       	st	X, r31
    2cae:	ee 93       	st	-X, r30
    2cb0:	16 97       	sbiw	r26, 0x06	; 6
    2cb2:	46 81       	ldd	r20, Z+6	; 0x06
    2cb4:	57 81       	ldd	r21, Z+7	; 0x07
    2cb6:	19 96       	adiw	r26, 0x09	; 9
    2cb8:	5c 93       	st	X, r21
    2cba:	4e 93       	st	-X, r20
    2cbc:	18 97       	sbiw	r26, 0x08	; 8
    2cbe:	c6 81       	ldd	r28, Z+6	; 0x06
    2cc0:	d7 81       	ldd	r29, Z+7	; 0x07
    2cc2:	3d 83       	std	Y+5, r19	; 0x05
    2cc4:	2c 83       	std	Y+4, r18	; 0x04
    2cc6:	37 83       	std	Z+7, r19	; 0x07
    2cc8:	26 83       	std	Z+6, r18	; 0x06
    2cca:	5a 96       	adiw	r26, 0x1a	; 26
    2ccc:	ec 91       	ld	r30, X
    2cce:	5a 97       	sbiw	r26, 0x1a	; 26
    2cd0:	9e 9f       	mul	r25, r30
    2cd2:	f0 01       	movw	r30, r0
    2cd4:	11 24       	eor	r1, r1
    2cd6:	eb 51       	subi	r30, 0x1B	; 27
    2cd8:	f9 4e       	sbci	r31, 0xE9	; 233
    2cda:	1d 96       	adiw	r26, 0x0d	; 13
    2cdc:	fc 93       	st	X, r31
    2cde:	ee 93       	st	-X, r30
    2ce0:	1c 97       	sbiw	r26, 0x0c	; 12
    2ce2:	90 81       	ld	r25, Z
    2ce4:	9f 5f       	subi	r25, 0xFF	; 255
    2ce6:	90 83       	st	Z, r25
    2ce8:	21 c0       	rjmp	.+66     	; 0x2d2c <xTaskGenericNotifyFromISR+0x208>
    2cea:	60 ec       	ldi	r22, 0xC0	; 192
    2cec:	76 e1       	ldi	r23, 0x16	; 22
    2cee:	fb 01       	movw	r30, r22
    2cf0:	c1 81       	ldd	r28, Z+1	; 0x01
    2cf2:	d2 81       	ldd	r29, Z+2	; 0x02
    2cf4:	53 96       	adiw	r26, 0x13	; 19
    2cf6:	dc 93       	st	X, r29
    2cf8:	ce 93       	st	-X, r28
    2cfa:	52 97       	sbiw	r26, 0x12	; 18
    2cfc:	2e 81       	ldd	r18, Y+6	; 0x06
    2cfe:	3f 81       	ldd	r19, Y+7	; 0x07
    2d00:	55 96       	adiw	r26, 0x15	; 21
    2d02:	3c 93       	st	X, r19
    2d04:	2e 93       	st	-X, r18
    2d06:	54 97       	sbiw	r26, 0x14	; 20
    2d08:	4e 81       	ldd	r20, Y+6	; 0x06
    2d0a:	5f 81       	ldd	r21, Y+7	; 0x07
    2d0c:	9d 01       	movw	r18, r26
    2d0e:	22 5f       	subi	r18, 0xF2	; 242
    2d10:	3f 4f       	sbci	r19, 0xFF	; 255
    2d12:	fa 01       	movw	r30, r20
    2d14:	35 83       	std	Z+5, r19	; 0x05
    2d16:	24 83       	std	Z+4, r18	; 0x04
    2d18:	3f 83       	std	Y+7, r19	; 0x07
    2d1a:	2e 83       	std	Y+6, r18	; 0x06
    2d1c:	59 96       	adiw	r26, 0x19	; 25
    2d1e:	7c 93       	st	X, r23
    2d20:	6e 93       	st	-X, r22
    2d22:	58 97       	sbiw	r26, 0x18	; 24
    2d24:	fb 01       	movw	r30, r22
    2d26:	90 81       	ld	r25, Z
    2d28:	9f 5f       	subi	r25, 0xFF	; 255
    2d2a:	90 83       	st	Z, r25
    2d2c:	5a 96       	adiw	r26, 0x1a	; 26
    2d2e:	2c 91       	ld	r18, X
    2d30:	e0 91 53 17 	lds	r30, 0x1753	; 0x801753 <pxCurrentTCB>
    2d34:	f0 91 54 17 	lds	r31, 0x1754	; 0x801754 <pxCurrentTCB+0x1>
    2d38:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d3a:	92 17       	cp	r25, r18
    2d3c:	48 f4       	brcc	.+18     	; 0x2d50 <xTaskGenericNotifyFromISR+0x22c>
    2d3e:	c1 14       	cp	r12, r1
    2d40:	d1 04       	cpc	r13, r1
    2d42:	19 f0       	breq	.+6      	; 0x2d4a <xTaskGenericNotifyFromISR+0x226>
    2d44:	91 e0       	ldi	r25, 0x01	; 1
    2d46:	f6 01       	movw	r30, r12
    2d48:	90 83       	st	Z, r25
    2d4a:	91 e0       	ldi	r25, 0x01	; 1
    2d4c:	90 93 9d 16 	sts	0x169D, r25	; 0x80169d <xYieldPending>
    2d50:	df 91       	pop	r29
    2d52:	cf 91       	pop	r28
    2d54:	0f 91       	pop	r16
    2d56:	ff 90       	pop	r15
    2d58:	ef 90       	pop	r14
    2d5a:	df 90       	pop	r13
    2d5c:	cf 90       	pop	r12
    2d5e:	bf 90       	pop	r11
    2d60:	af 90       	pop	r10
    2d62:	9f 90       	pop	r9
    2d64:	8f 90       	pop	r8
    2d66:	08 95       	ret

00002d68 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	21 f4       	brne	.+8      	; 0x2d74 <xTaskGenericNotifyStateClear+0xc>
    2d6c:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <pxCurrentTCB>
    2d70:	90 91 54 17 	lds	r25, 0x1754	; 0x801754 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	e6 0f       	add	r30, r22
    2d80:	f7 1f       	adc	r31, r23
    2d82:	23 a9       	ldd	r18, Z+51	; 0x33
    2d84:	22 30       	cpi	r18, 0x02	; 2
    2d86:	31 f4       	brne	.+12     	; 0x2d94 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2d88:	fc 01       	movw	r30, r24
    2d8a:	e6 0f       	add	r30, r22
    2d8c:	f7 1f       	adc	r31, r23
    2d8e:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	01 c0       	rjmp	.+2      	; 0x2d96 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2d94:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2d96:	0f 90       	pop	r0
    2d98:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2d9a:	08 95       	ret

00002d9c <prvGetNextExpireTime>:
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	e0 91 5f 17 	lds	r30, 0x175F	; 0x80175f <pxCurrentTimerList>
    2da2:	f0 91 60 17 	lds	r31, 0x1760	; 0x801760 <pxCurrentTimerList+0x1>
    2da6:	80 81       	ld	r24, Z
    2da8:	91 e0       	ldi	r25, 0x01	; 1
    2daa:	81 11       	cpse	r24, r1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	9c 93       	st	X, r25
    2db0:	91 11       	cpse	r25, r1
    2db2:	08 c0       	rjmp	.+16     	; 0x2dc4 <prvGetNextExpireTime+0x28>
    2db4:	07 80       	ldd	r0, Z+7	; 0x07
    2db6:	f0 85       	ldd	r31, Z+8	; 0x08
    2db8:	e0 2d       	mov	r30, r0
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	08 95       	ret
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	70 e0       	ldi	r23, 0x00	; 0
    2dc8:	cb 01       	movw	r24, r22
    2dca:	08 95       	ret

00002dcc <prvInsertTimerInActiveList>:
    2dcc:	cf 92       	push	r12
    2dce:	df 92       	push	r13
    2dd0:	ef 92       	push	r14
    2dd2:	ff 92       	push	r15
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    2dd8:	fc 01       	movw	r30, r24
    2dda:	42 83       	std	Z+2, r20	; 0x02
    2ddc:	53 83       	std	Z+3, r21	; 0x03
    2dde:	64 83       	std	Z+4, r22	; 0x04
    2de0:	75 83       	std	Z+5, r23	; 0x05
    2de2:	93 87       	std	Z+11, r25	; 0x0b
    2de4:	82 87       	std	Z+10, r24	; 0x0a
    2de6:	04 17       	cp	r16, r20
    2de8:	15 07       	cpc	r17, r21
    2dea:	26 07       	cpc	r18, r22
    2dec:	37 07       	cpc	r19, r23
    2dee:	c0 f0       	brcs	.+48     	; 0x2e20 <prvInsertTimerInActiveList+0x54>
    2df0:	0c 19       	sub	r16, r12
    2df2:	1d 09       	sbc	r17, r13
    2df4:	2e 09       	sbc	r18, r14
    2df6:	3f 09       	sbc	r19, r15
    2df8:	86 85       	ldd	r24, Z+14	; 0x0e
    2dfa:	97 85       	ldd	r25, Z+15	; 0x0f
    2dfc:	a0 89       	ldd	r26, Z+16	; 0x10
    2dfe:	b1 89       	ldd	r27, Z+17	; 0x11
    2e00:	08 17       	cp	r16, r24
    2e02:	19 07       	cpc	r17, r25
    2e04:	2a 07       	cpc	r18, r26
    2e06:	3b 07       	cpc	r19, r27
    2e08:	00 f5       	brcc	.+64     	; 0x2e4a <prvInsertTimerInActiveList+0x7e>
    2e0a:	bf 01       	movw	r22, r30
    2e0c:	6e 5f       	subi	r22, 0xFE	; 254
    2e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e10:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <pxOverflowTimerList>
    2e14:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <pxOverflowTimerList+0x1>
    2e18:	0e 94 28 03 	call	0x650	; 0x650 <vListInsert>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	18 c0       	rjmp	.+48     	; 0x2e50 <prvInsertTimerInActiveList+0x84>
    2e20:	0c 15       	cp	r16, r12
    2e22:	1d 05       	cpc	r17, r13
    2e24:	2e 05       	cpc	r18, r14
    2e26:	3f 05       	cpc	r19, r15
    2e28:	28 f4       	brcc	.+10     	; 0x2e34 <prvInsertTimerInActiveList+0x68>
    2e2a:	4c 15       	cp	r20, r12
    2e2c:	5d 05       	cpc	r21, r13
    2e2e:	6e 05       	cpc	r22, r14
    2e30:	7f 05       	cpc	r23, r15
    2e32:	68 f4       	brcc	.+26     	; 0x2e4e <prvInsertTimerInActiveList+0x82>
    2e34:	bf 01       	movw	r22, r30
    2e36:	6e 5f       	subi	r22, 0xFE	; 254
    2e38:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3a:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <pxCurrentTimerList>
    2e3e:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <pxCurrentTimerList+0x1>
    2e42:	0e 94 28 03 	call	0x650	; 0x650 <vListInsert>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	03 c0       	rjmp	.+6      	; 0x2e50 <prvInsertTimerInActiveList+0x84>
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	01 c0       	rjmp	.+2      	; 0x2e50 <prvInsertTimerInActiveList+0x84>
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	df 90       	pop	r13
    2e5a:	cf 90       	pop	r12
    2e5c:	08 95       	ret

00002e5e <prvCheckForValidListAndQueue>:
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	0f 92       	push	r0
    2e64:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <xTimerQueue>
    2e68:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <xTimerQueue+0x1>
    2e6c:	89 2b       	or	r24, r25
    2e6e:	e9 f4       	brne	.+58     	; 0x2eaa <prvCheckForValidListAndQueue+0x4c>
    2e70:	8c e6       	ldi	r24, 0x6C	; 108
    2e72:	97 e1       	ldi	r25, 0x17	; 23
    2e74:	0e 94 13 03 	call	0x626	; 0x626 <vListInitialise>
    2e78:	81 e6       	ldi	r24, 0x61	; 97
    2e7a:	97 e1       	ldi	r25, 0x17	; 23
    2e7c:	0e 94 13 03 	call	0x626	; 0x626 <vListInitialise>
    2e80:	8c e6       	ldi	r24, 0x6C	; 108
    2e82:	97 e1       	ldi	r25, 0x17	; 23
    2e84:	90 93 60 17 	sts	0x1760, r25	; 0x801760 <pxCurrentTimerList+0x1>
    2e88:	80 93 5f 17 	sts	0x175F, r24	; 0x80175f <pxCurrentTimerList>
    2e8c:	81 e6       	ldi	r24, 0x61	; 97
    2e8e:	97 e1       	ldi	r25, 0x17	; 23
    2e90:	90 93 5e 17 	sts	0x175E, r25	; 0x80175e <pxOverflowTimerList+0x1>
    2e94:	80 93 5d 17 	sts	0x175D, r24	; 0x80175d <pxOverflowTimerList>
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	67 e0       	ldi	r22, 0x07	; 7
    2e9c:	8a e0       	ldi	r24, 0x0A	; 10
    2e9e:	0e 94 d6 05 	call	0xbac	; 0xbac <xQueueGenericCreate>
    2ea2:	90 93 5c 17 	sts	0x175C, r25	; 0x80175c <xTimerQueue+0x1>
    2ea6:	80 93 5b 17 	sts	0x175B, r24	; 0x80175b <xTimerQueue>
    2eaa:	0f 90       	pop	r0
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	08 95       	ret

00002eb0 <xTimerCreateTimerTask>:
    2eb0:	ef 92       	push	r14
    2eb2:	ff 92       	push	r15
    2eb4:	0f 93       	push	r16
    2eb6:	d3 df       	rcall	.-90     	; 0x2e5e <prvCheckForValidListAndQueue>
    2eb8:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <xTimerQueue>
    2ebc:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <xTimerQueue+0x1>
    2ec0:	89 2b       	or	r24, r25
    2ec2:	91 f0       	breq	.+36     	; 0x2ee8 <xTimerCreateTimerTask+0x38>
    2ec4:	0f 2e       	mov	r0, r31
    2ec6:	f9 e5       	ldi	r31, 0x59	; 89
    2ec8:	ef 2e       	mov	r14, r31
    2eca:	f7 e1       	ldi	r31, 0x17	; 23
    2ecc:	ff 2e       	mov	r15, r31
    2ece:	f0 2d       	mov	r31, r0
    2ed0:	03 e0       	ldi	r16, 0x03	; 3
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 ec       	ldi	r20, 0xC0	; 192
    2ed8:	50 e0       	ldi	r21, 0x00	; 0
    2eda:	6f e9       	ldi	r22, 0x9F	; 159
    2edc:	72 e0       	ldi	r23, 0x02	; 2
    2ede:	87 ed       	ldi	r24, 0xD7	; 215
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xTaskCreate>
    2ee6:	01 c0       	rjmp	.+2      	; 0x2eea <xTimerCreateTimerTask+0x3a>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	0f 91       	pop	r16
    2eec:	ff 90       	pop	r15
    2eee:	ef 90       	pop	r14
    2ef0:	08 95       	ret

00002ef2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2ef2:	8f 92       	push	r8
    2ef4:	9f 92       	push	r9
    2ef6:	af 92       	push	r10
    2ef8:	bf 92       	push	r11
    2efa:	cf 92       	push	r12
    2efc:	df 92       	push	r13
    2efe:	ef 92       	push	r14
    2f00:	ff 92       	push	r15
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	27 97       	sbiw	r28, 0x07	; 7
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2f1a:	e0 91 5b 17 	lds	r30, 0x175B	; 0x80175b <xTimerQueue>
    2f1e:	f0 91 5c 17 	lds	r31, 0x175C	; 0x80175c <xTimerQueue+0x1>
    2f22:	30 97       	sbiw	r30, 0x00	; 0
    2f24:	81 f1       	breq	.+96     	; 0x2f86 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2f26:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2f28:	2a 83       	std	Y+2, r18	; 0x02
    2f2a:	3b 83       	std	Y+3, r19	; 0x03
    2f2c:	4c 83       	std	Y+4, r20	; 0x04
    2f2e:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2f30:	9f 83       	std	Y+7, r25	; 0x07
    2f32:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2f34:	66 30       	cpi	r22, 0x06	; 6
    2f36:	f4 f4       	brge	.+60     	; 0x2f74 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2f38:	ee da       	rcall	.-2596   	; 0x2516 <xTaskGetSchedulerState>
    2f3a:	82 30       	cpi	r24, 0x02	; 2
    2f3c:	69 f4       	brne	.+26     	; 0x2f58 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2f3e:	00 e0       	ldi	r16, 0x00	; 0
    2f40:	a7 01       	movw	r20, r14
    2f42:	96 01       	movw	r18, r12
    2f44:	be 01       	movw	r22, r28
    2f46:	6f 5f       	subi	r22, 0xFF	; 255
    2f48:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4a:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <xTimerQueue>
    2f4e:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <xTimerQueue+0x1>
    2f52:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <xQueueGenericSend>
    2f56:	18 c0       	rjmp	.+48     	; 0x2f88 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2f58:	00 e0       	ldi	r16, 0x00	; 0
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	a9 01       	movw	r20, r18
    2f60:	be 01       	movw	r22, r28
    2f62:	6f 5f       	subi	r22, 0xFF	; 255
    2f64:	7f 4f       	sbci	r23, 0xFF	; 255
    2f66:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <xTimerQueue>
    2f6a:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <xTimerQueue+0x1>
    2f6e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <xQueueGenericSend>
    2f72:	0a c0       	rjmp	.+20     	; 0x2f88 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	a8 01       	movw	r20, r16
    2f78:	be 01       	movw	r22, r28
    2f7a:	6f 5f       	subi	r22, 0xFF	; 255
    2f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7e:	cf 01       	movw	r24, r30
    2f80:	0e 94 8b 06 	call	0xd16	; 0xd16 <xQueueGenericSendFromISR>
    2f84:	01 c0       	rjmp	.+2      	; 0x2f88 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2f86:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2f88:	27 96       	adiw	r28, 0x07	; 7
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	ff 90       	pop	r15
    2f9e:	ef 90       	pop	r14
    2fa0:	df 90       	pop	r13
    2fa2:	cf 90       	pop	r12
    2fa4:	bf 90       	pop	r11
    2fa6:	af 90       	pop	r10
    2fa8:	9f 90       	pop	r9
    2faa:	8f 90       	pop	r8
    2fac:	08 95       	ret

00002fae <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2fae:	8f 92       	push	r8
    2fb0:	9f 92       	push	r9
    2fb2:	af 92       	push	r10
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2fc6:	3b c0       	rjmp	.+118    	; 0x303e <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2fc8:	07 80       	ldd	r0, Z+7	; 0x07
    2fca:	f0 85       	ldd	r31, Z+8	; 0x08
    2fcc:	e0 2d       	mov	r30, r0
    2fce:	80 80       	ld	r8, Z
    2fd0:	91 80       	ldd	r9, Z+1	; 0x01
    2fd2:	a2 80       	ldd	r10, Z+2	; 0x02
    2fd4:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2fd6:	c0 85       	ldd	r28, Z+8	; 0x08
    2fd8:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2fda:	8e 01       	movw	r16, r28
    2fdc:	0e 5f       	subi	r16, 0xFE	; 254
    2fde:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe0:	c8 01       	movw	r24, r16
    2fe2:	0e 94 65 03 	call	0x6ca	; 0x6ca <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2fe6:	ec 89       	ldd	r30, Y+20	; 0x14
    2fe8:	fd 89       	ldd	r31, Y+21	; 0x15
    2fea:	ce 01       	movw	r24, r28
    2fec:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2fee:	8e 89       	ldd	r24, Y+22	; 0x16
    2ff0:	82 ff       	sbrs	r24, 2
    2ff2:	25 c0       	rjmp	.+74     	; 0x303e <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2ff4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ff6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ff8:	a8 89       	ldd	r26, Y+16	; 0x10
    2ffa:	b9 89       	ldd	r27, Y+17	; 0x11
    2ffc:	88 0d       	add	r24, r8
    2ffe:	99 1d       	adc	r25, r9
    3000:	aa 1d       	adc	r26, r10
    3002:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3004:	88 16       	cp	r8, r24
    3006:	99 06       	cpc	r9, r25
    3008:	aa 06       	cpc	r10, r26
    300a:	bb 06       	cpc	r11, r27
    300c:	70 f4       	brcc	.+28     	; 0x302a <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    300e:	8a 83       	std	Y+2, r24	; 0x02
    3010:	9b 83       	std	Y+3, r25	; 0x03
    3012:	ac 83       	std	Y+4, r26	; 0x04
    3014:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3016:	db 87       	std	Y+11, r29	; 0x0b
    3018:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    301a:	b8 01       	movw	r22, r16
    301c:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <pxCurrentTimerList>
    3020:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <pxCurrentTimerList+0x1>
    3024:	0e 94 28 03 	call	0x650	; 0x650 <vListInsert>
    3028:	0a c0       	rjmp	.+20     	; 0x303e <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    302a:	c1 2c       	mov	r12, r1
    302c:	d1 2c       	mov	r13, r1
    302e:	76 01       	movw	r14, r12
    3030:	00 e0       	ldi	r16, 0x00	; 0
    3032:	10 e0       	ldi	r17, 0x00	; 0
    3034:	a5 01       	movw	r20, r10
    3036:	94 01       	movw	r18, r8
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	ce 01       	movw	r24, r28
    303c:	5a df       	rcall	.-332    	; 0x2ef2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    303e:	e0 91 5f 17 	lds	r30, 0x175F	; 0x80175f <pxCurrentTimerList>
    3042:	f0 91 60 17 	lds	r31, 0x1760	; 0x801760 <pxCurrentTimerList+0x1>
    3046:	80 81       	ld	r24, Z
    3048:	81 11       	cpse	r24, r1
    304a:	be cf       	rjmp	.-132    	; 0x2fc8 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    304c:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <pxOverflowTimerList>
    3050:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <pxOverflowTimerList+0x1>
    3054:	90 93 60 17 	sts	0x1760, r25	; 0x801760 <pxCurrentTimerList+0x1>
    3058:	80 93 5f 17 	sts	0x175F, r24	; 0x80175f <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    305c:	f0 93 5e 17 	sts	0x175E, r31	; 0x80175e <pxOverflowTimerList+0x1>
    3060:	e0 93 5d 17 	sts	0x175D, r30	; 0x80175d <pxOverflowTimerList>
    }
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	1f 91       	pop	r17
    306a:	0f 91       	pop	r16
    306c:	ff 90       	pop	r15
    306e:	ef 90       	pop	r14
    3070:	df 90       	pop	r13
    3072:	cf 90       	pop	r12
    3074:	bf 90       	pop	r11
    3076:	af 90       	pop	r10
    3078:	9f 90       	pop	r9
    307a:	8f 90       	pop	r8
    307c:	08 95       	ret

0000307e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    307e:	cf 92       	push	r12
    3080:	df 92       	push	r13
    3082:	ef 92       	push	r14
    3084:	ff 92       	push	r15
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    308c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xTaskGetTickCount>
    3090:	6b 01       	movw	r12, r22
    3092:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3094:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <xLastTime.2436>
    3098:	90 91 56 17 	lds	r25, 0x1756	; 0x801756 <xLastTime.2436+0x1>
    309c:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <xLastTime.2436+0x2>
    30a0:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <xLastTime.2436+0x3>
    30a4:	c8 16       	cp	r12, r24
    30a6:	d9 06       	cpc	r13, r25
    30a8:	ea 06       	cpc	r14, r26
    30aa:	fb 06       	cpc	r15, r27
    30ac:	20 f4       	brcc	.+8      	; 0x30b6 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    30ae:	7f df       	rcall	.-258    	; 0x2fae <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	88 83       	st	Y, r24
    30b4:	01 c0       	rjmp	.+2      	; 0x30b8 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    30b6:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    30b8:	c0 92 55 17 	sts	0x1755, r12	; 0x801755 <xLastTime.2436>
    30bc:	d0 92 56 17 	sts	0x1756, r13	; 0x801756 <xLastTime.2436+0x1>
    30c0:	e0 92 57 17 	sts	0x1757, r14	; 0x801757 <xLastTime.2436+0x2>
    30c4:	f0 92 58 17 	sts	0x1758, r15	; 0x801758 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    30c8:	c7 01       	movw	r24, r14
    30ca:	b6 01       	movw	r22, r12
    30cc:	df 91       	pop	r29
    30ce:	cf 91       	pop	r28
    30d0:	ff 90       	pop	r15
    30d2:	ef 90       	pop	r14
    30d4:	df 90       	pop	r13
    30d6:	cf 90       	pop	r12
    30d8:	08 95       	ret

000030da <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    30da:	4f 92       	push	r4
    30dc:	5f 92       	push	r5
    30de:	6f 92       	push	r6
    30e0:	7f 92       	push	r7
    30e2:	8f 92       	push	r8
    30e4:	9f 92       	push	r9
    30e6:	af 92       	push	r10
    30e8:	bf 92       	push	r11
    30ea:	cf 92       	push	r12
    30ec:	df 92       	push	r13
    30ee:	ef 92       	push	r14
    30f0:	ff 92       	push	r15
    30f2:	0f 93       	push	r16
    30f4:	1f 93       	push	r17
    30f6:	cf 93       	push	r28
    30f8:	df 93       	push	r29
    30fa:	4b 01       	movw	r8, r22
    30fc:	5c 01       	movw	r10, r24
    30fe:	29 01       	movw	r4, r18
    3100:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3102:	e0 91 5f 17 	lds	r30, 0x175F	; 0x80175f <pxCurrentTimerList>
    3106:	f0 91 60 17 	lds	r31, 0x1760	; 0x801760 <pxCurrentTimerList+0x1>
    310a:	07 80       	ldd	r0, Z+7	; 0x07
    310c:	f0 85       	ldd	r31, Z+8	; 0x08
    310e:	e0 2d       	mov	r30, r0
    3110:	c0 85       	ldd	r28, Z+8	; 0x08
    3112:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3114:	ce 01       	movw	r24, r28
    3116:	02 96       	adiw	r24, 0x02	; 2
    3118:	0e 94 65 03 	call	0x6ca	; 0x6ca <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    311c:	8e 89       	ldd	r24, Y+22	; 0x16
    311e:	82 ff       	sbrs	r24, 2
    3120:	1b c0       	rjmp	.+54     	; 0x3158 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3122:	4e 85       	ldd	r20, Y+14	; 0x0e
    3124:	5f 85       	ldd	r21, Y+15	; 0x0f
    3126:	68 89       	ldd	r22, Y+16	; 0x10
    3128:	79 89       	ldd	r23, Y+17	; 0x11
    312a:	48 0d       	add	r20, r8
    312c:	59 1d       	adc	r21, r9
    312e:	6a 1d       	adc	r22, r10
    3130:	7b 1d       	adc	r23, r11
    3132:	75 01       	movw	r14, r10
    3134:	64 01       	movw	r12, r8
    3136:	93 01       	movw	r18, r6
    3138:	82 01       	movw	r16, r4
    313a:	ce 01       	movw	r24, r28
    313c:	47 de       	rcall	.-882    	; 0x2dcc <prvInsertTimerInActiveList>
    313e:	88 23       	and	r24, r24
    3140:	69 f0       	breq	.+26     	; 0x315c <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3142:	c1 2c       	mov	r12, r1
    3144:	d1 2c       	mov	r13, r1
    3146:	76 01       	movw	r14, r12
    3148:	00 e0       	ldi	r16, 0x00	; 0
    314a:	10 e0       	ldi	r17, 0x00	; 0
    314c:	a5 01       	movw	r20, r10
    314e:	94 01       	movw	r18, r8
    3150:	60 e0       	ldi	r22, 0x00	; 0
    3152:	ce 01       	movw	r24, r28
    3154:	ce de       	rcall	.-612    	; 0x2ef2 <xTimerGenericCommand>
    3156:	02 c0       	rjmp	.+4      	; 0x315c <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3158:	8e 7f       	andi	r24, 0xFE	; 254
    315a:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    315c:	ec 89       	ldd	r30, Y+20	; 0x14
    315e:	fd 89       	ldd	r31, Y+21	; 0x15
    3160:	ce 01       	movw	r24, r28
    3162:	19 95       	eicall
    }
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	1f 91       	pop	r17
    316a:	0f 91       	pop	r16
    316c:	ff 90       	pop	r15
    316e:	ef 90       	pop	r14
    3170:	df 90       	pop	r13
    3172:	cf 90       	pop	r12
    3174:	bf 90       	pop	r11
    3176:	af 90       	pop	r10
    3178:	9f 90       	pop	r9
    317a:	8f 90       	pop	r8
    317c:	7f 90       	pop	r7
    317e:	6f 90       	pop	r6
    3180:	5f 90       	pop	r5
    3182:	4f 90       	pop	r4
    3184:	08 95       	ret

00003186 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3186:	8f 92       	push	r8
    3188:	9f 92       	push	r9
    318a:	af 92       	push	r10
    318c:	bf 92       	push	r11
    318e:	cf 92       	push	r12
    3190:	df 92       	push	r13
    3192:	ef 92       	push	r14
    3194:	ff 92       	push	r15
    3196:	1f 93       	push	r17
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	1f 92       	push	r1
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	6b 01       	movw	r12, r22
    31a4:	7c 01       	movw	r14, r24
    31a6:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    31a8:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    31ac:	ce 01       	movw	r24, r28
    31ae:	01 96       	adiw	r24, 0x01	; 1
    31b0:	66 df       	rcall	.-308    	; 0x307e <prvSampleTimeNow>
    31b2:	4b 01       	movw	r8, r22
    31b4:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	81 11       	cpse	r24, r1
    31ba:	2d c0       	rjmp	.+90     	; 0x3216 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    31bc:	11 11       	cpse	r17, r1
    31be:	0d c0       	rjmp	.+26     	; 0x31da <prvProcessTimerOrBlockTask+0x54>
    31c0:	8c 14       	cp	r8, r12
    31c2:	9d 04       	cpc	r9, r13
    31c4:	ae 04       	cpc	r10, r14
    31c6:	bf 04       	cpc	r11, r15
    31c8:	40 f0       	brcs	.+16     	; 0x31da <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    31ca:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    31ce:	a5 01       	movw	r20, r10
    31d0:	94 01       	movw	r18, r8
    31d2:	c7 01       	movw	r24, r14
    31d4:	b6 01       	movw	r22, r12
    31d6:	81 df       	rcall	.-254    	; 0x30da <prvProcessExpiredTimer>
    31d8:	20 c0       	rjmp	.+64     	; 0x321a <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    31da:	11 23       	and	r17, r17
    31dc:	41 f0       	breq	.+16     	; 0x31ee <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    31de:	e0 91 5d 17 	lds	r30, 0x175D	; 0x80175d <pxOverflowTimerList>
    31e2:	f0 91 5e 17 	lds	r31, 0x175E	; 0x80175e <pxOverflowTimerList+0x1>
    31e6:	80 81       	ld	r24, Z
    31e8:	11 e0       	ldi	r17, 0x01	; 1
    31ea:	81 11       	cpse	r24, r1
    31ec:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    31ee:	b7 01       	movw	r22, r14
    31f0:	a6 01       	movw	r20, r12
    31f2:	48 19       	sub	r20, r8
    31f4:	59 09       	sbc	r21, r9
    31f6:	6a 09       	sbc	r22, r10
    31f8:	7b 09       	sbc	r23, r11
    31fa:	21 2f       	mov	r18, r17
    31fc:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <xTimerQueue>
    3200:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <xTimerQueue+0x1>
    3204:	0e 94 06 08 	call	0x100c	; 0x100c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3208:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <xTaskResumeAll>
    320c:	81 11       	cpse	r24, r1
    320e:	05 c0       	rjmp	.+10     	; 0x321a <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3210:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vPortYield>
    3214:	02 c0       	rjmp	.+4      	; 0x321a <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3216:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <xTaskResumeAll>
            }
        }
    }
    321a:	0f 90       	pop	r0
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	1f 91       	pop	r17
    3222:	ff 90       	pop	r15
    3224:	ef 90       	pop	r14
    3226:	df 90       	pop	r13
    3228:	cf 90       	pop	r12
    322a:	bf 90       	pop	r11
    322c:	af 90       	pop	r10
    322e:	9f 90       	pop	r9
    3230:	8f 90       	pop	r8
    3232:	08 95       	ret

00003234 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3234:	af 92       	push	r10
    3236:	bf 92       	push	r11
    3238:	cf 92       	push	r12
    323a:	df 92       	push	r13
    323c:	ef 92       	push	r14
    323e:	ff 92       	push	r15
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	28 97       	sbiw	r28, 0x08	; 8
    324e:	0f b6       	in	r0, 0x3f	; 63
    3250:	f8 94       	cli
    3252:	de bf       	out	0x3e, r29	; 62
    3254:	0f be       	out	0x3f, r0	; 63
    3256:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3258:	82 c0       	rjmp	.+260    	; 0x335e <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	88 23       	and	r24, r24
    325e:	0c f4       	brge	.+2      	; 0x3262 <prvProcessReceivedCommands+0x2e>
    3260:	7e c0       	rjmp	.+252    	; 0x335e <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3262:	ae 80       	ldd	r10, Y+6	; 0x06
    3264:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3266:	d5 01       	movw	r26, r10
    3268:	1c 96       	adiw	r26, 0x0c	; 12
    326a:	8d 91       	ld	r24, X+
    326c:	9c 91       	ld	r25, X
    326e:	1d 97       	sbiw	r26, 0x0d	; 13
    3270:	89 2b       	or	r24, r25
    3272:	21 f0       	breq	.+8      	; 0x327c <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3274:	c5 01       	movw	r24, r10
    3276:	02 96       	adiw	r24, 0x02	; 2
    3278:	0e 94 65 03 	call	0x6ca	; 0x6ca <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    327c:	ce 01       	movw	r24, r28
    327e:	08 96       	adiw	r24, 0x08	; 8
    3280:	fe de       	rcall	.-516    	; 0x307e <prvSampleTimeNow>
    3282:	8b 01       	movw	r16, r22
    3284:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3286:	e9 81       	ldd	r30, Y+1	; 0x01
    3288:	0e 2e       	mov	r0, r30
    328a:	00 0c       	add	r0, r0
    328c:	ff 0b       	sbc	r31, r31
    328e:	ea 30       	cpi	r30, 0x0A	; 10
    3290:	f1 05       	cpc	r31, r1
    3292:	08 f0       	brcs	.+2      	; 0x3296 <prvProcessReceivedCommands+0x62>
    3294:	64 c0       	rjmp	.+200    	; 0x335e <prvProcessReceivedCommands+0x12a>
    3296:	88 27       	eor	r24, r24
    3298:	ee 58       	subi	r30, 0x8E	; 142
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	8f 4f       	sbci	r24, 0xFF	; 255
    329e:	0c 94 6f 2d 	jmp	0x5ade	; 0x5ade <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    32a2:	f5 01       	movw	r30, r10
    32a4:	86 89       	ldd	r24, Z+22	; 0x16
    32a6:	81 60       	ori	r24, 0x01	; 1
    32a8:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    32aa:	ca 80       	ldd	r12, Y+2	; 0x02
    32ac:	db 80       	ldd	r13, Y+3	; 0x03
    32ae:	ec 80       	ldd	r14, Y+4	; 0x04
    32b0:	fd 80       	ldd	r15, Y+5	; 0x05
    32b2:	46 85       	ldd	r20, Z+14	; 0x0e
    32b4:	57 85       	ldd	r21, Z+15	; 0x0f
    32b6:	60 89       	ldd	r22, Z+16	; 0x10
    32b8:	71 89       	ldd	r23, Z+17	; 0x11
    32ba:	4c 0d       	add	r20, r12
    32bc:	5d 1d       	adc	r21, r13
    32be:	6e 1d       	adc	r22, r14
    32c0:	7f 1d       	adc	r23, r15
    32c2:	c5 01       	movw	r24, r10
    32c4:	83 dd       	rcall	.-1274   	; 0x2dcc <prvInsertTimerInActiveList>
    32c6:	88 23       	and	r24, r24
    32c8:	09 f4       	brne	.+2      	; 0x32cc <prvProcessReceivedCommands+0x98>
    32ca:	49 c0       	rjmp	.+146    	; 0x335e <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    32cc:	d5 01       	movw	r26, r10
    32ce:	54 96       	adiw	r26, 0x14	; 20
    32d0:	ed 91       	ld	r30, X+
    32d2:	fc 91       	ld	r31, X
    32d4:	55 97       	sbiw	r26, 0x15	; 21
    32d6:	c5 01       	movw	r24, r10
    32d8:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    32da:	f5 01       	movw	r30, r10
    32dc:	86 89       	ldd	r24, Z+22	; 0x16
    32de:	82 ff       	sbrs	r24, 2
    32e0:	3e c0       	rjmp	.+124    	; 0x335e <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    32e2:	4a 81       	ldd	r20, Y+2	; 0x02
    32e4:	5b 81       	ldd	r21, Y+3	; 0x03
    32e6:	6c 81       	ldd	r22, Y+4	; 0x04
    32e8:	7d 81       	ldd	r23, Y+5	; 0x05
    32ea:	86 85       	ldd	r24, Z+14	; 0x0e
    32ec:	97 85       	ldd	r25, Z+15	; 0x0f
    32ee:	a0 89       	ldd	r26, Z+16	; 0x10
    32f0:	b1 89       	ldd	r27, Z+17	; 0x11
    32f2:	9a 01       	movw	r18, r20
    32f4:	ab 01       	movw	r20, r22
    32f6:	28 0f       	add	r18, r24
    32f8:	39 1f       	adc	r19, r25
    32fa:	4a 1f       	adc	r20, r26
    32fc:	5b 1f       	adc	r21, r27
    32fe:	c1 2c       	mov	r12, r1
    3300:	d1 2c       	mov	r13, r1
    3302:	76 01       	movw	r14, r12
    3304:	00 e0       	ldi	r16, 0x00	; 0
    3306:	10 e0       	ldi	r17, 0x00	; 0
    3308:	60 e0       	ldi	r22, 0x00	; 0
    330a:	c5 01       	movw	r24, r10
    330c:	f2 dd       	rcall	.-1052   	; 0x2ef2 <xTimerGenericCommand>
    330e:	27 c0       	rjmp	.+78     	; 0x335e <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3310:	d5 01       	movw	r26, r10
    3312:	56 96       	adiw	r26, 0x16	; 22
    3314:	8c 91       	ld	r24, X
    3316:	56 97       	sbiw	r26, 0x16	; 22
    3318:	8e 7f       	andi	r24, 0xFE	; 254
    331a:	56 96       	adiw	r26, 0x16	; 22
    331c:	8c 93       	st	X, r24
                        break;
    331e:	1f c0       	rjmp	.+62     	; 0x335e <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3320:	f5 01       	movw	r30, r10
    3322:	86 89       	ldd	r24, Z+22	; 0x16
    3324:	81 60       	ori	r24, 0x01	; 1
    3326:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3328:	4a 81       	ldd	r20, Y+2	; 0x02
    332a:	5b 81       	ldd	r21, Y+3	; 0x03
    332c:	6c 81       	ldd	r22, Y+4	; 0x04
    332e:	7d 81       	ldd	r23, Y+5	; 0x05
    3330:	46 87       	std	Z+14, r20	; 0x0e
    3332:	57 87       	std	Z+15, r21	; 0x0f
    3334:	60 8b       	std	Z+16, r22	; 0x10
    3336:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3338:	40 0f       	add	r20, r16
    333a:	51 1f       	adc	r21, r17
    333c:	62 1f       	adc	r22, r18
    333e:	73 1f       	adc	r23, r19
    3340:	68 01       	movw	r12, r16
    3342:	79 01       	movw	r14, r18
    3344:	c5 01       	movw	r24, r10
    3346:	42 dd       	rcall	.-1404   	; 0x2dcc <prvInsertTimerInActiveList>
                        break;
    3348:	0a c0       	rjmp	.+20     	; 0x335e <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    334a:	f5 01       	movw	r30, r10
    334c:	86 89       	ldd	r24, Z+22	; 0x16
    334e:	81 fd       	sbrc	r24, 1
    3350:	04 c0       	rjmp	.+8      	; 0x335a <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3352:	c5 01       	movw	r24, r10
    3354:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <vPortFree>
    3358:	02 c0       	rjmp	.+4      	; 0x335e <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    335a:	8e 7f       	andi	r24, 0xFE	; 254
    335c:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	a9 01       	movw	r20, r18
    3364:	be 01       	movw	r22, r28
    3366:	6f 5f       	subi	r22, 0xFF	; 255
    3368:	7f 4f       	sbci	r23, 0xFF	; 255
    336a:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <xTimerQueue>
    336e:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <xTimerQueue+0x1>
    3372:	0e 94 c6 06 	call	0xd8c	; 0xd8c <xQueueReceive>
    3376:	81 11       	cpse	r24, r1
    3378:	70 cf       	rjmp	.-288    	; 0x325a <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    337a:	28 96       	adiw	r28, 0x08	; 8
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	cd bf       	out	0x3d, r28	; 61
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	ff 90       	pop	r15
    3390:	ef 90       	pop	r14
    3392:	df 90       	pop	r13
    3394:	cf 90       	pop	r12
    3396:	bf 90       	pop	r11
    3398:	af 90       	pop	r10
    339a:	08 95       	ret

0000339c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    339c:	08 95       	ret

0000339e <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    339e:	84 b1       	in	r24, 0x04	; 4
    33a0:	80 68       	ori	r24, 0x80	; 128
    33a2:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    33a4:	85 b1       	in	r24, 0x05	; 5
    33a6:	80 68       	ori	r24, 0x80	; 128
    33a8:	85 b9       	out	0x05, r24	; 5
    33aa:	08 95       	ret

000033ac <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    33ac:	83 b1       	in	r24, 0x03	; 3
    33ae:	80 68       	ori	r24, 0x80	; 128
    33b0:	83 b9       	out	0x03, r24	; 3
    33b2:	08 95       	ret

000033b4 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    33b4:	f4 df       	rcall	.-24     	; 0x339e <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33b6:	2f ef       	ldi	r18, 0xFF	; 255
    33b8:	80 e7       	ldi	r24, 0x70	; 112
    33ba:	92 e0       	ldi	r25, 0x02	; 2
    33bc:	21 50       	subi	r18, 0x01	; 1
    33be:	80 40       	sbci	r24, 0x00	; 0
    33c0:	90 40       	sbci	r25, 0x00	; 0
    33c2:	e1 f7       	brne	.-8      	; 0x33bc <vApplicationMallocFailedHook+0x8>
    33c4:	00 c0       	rjmp	.+0      	; 0x33c6 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    33c6:	00 00       	nop
    33c8:	f1 df       	rcall	.-30     	; 0x33ac <prvBlinkMainLed>
    33ca:	f5 cf       	rjmp	.-22     	; 0x33b6 <vApplicationMallocFailedHook+0x2>

000033cc <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    33cc:	e8 df       	rcall	.-48     	; 0x339e <prvSetMainLedOn>
    33ce:	2f ef       	ldi	r18, 0xFF	; 255
    33d0:	87 ea       	ldi	r24, 0xA7	; 167
    33d2:	91 e6       	ldi	r25, 0x61	; 97
    33d4:	21 50       	subi	r18, 0x01	; 1
    33d6:	80 40       	sbci	r24, 0x00	; 0
    33d8:	90 40       	sbci	r25, 0x00	; 0
    33da:	e1 f7       	brne	.-8      	; 0x33d4 <vApplicationStackOverflowHook+0x8>
    33dc:	00 c0       	rjmp	.+0      	; 0x33de <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    33de:	00 00       	nop
    33e0:	e5 df       	rcall	.-54     	; 0x33ac <prvBlinkMainLed>
    33e2:	f5 cf       	rjmp	.-22     	; 0x33ce <vApplicationStackOverflowHook+0x2>

000033e4 <initializeCO2Queue>:
#include "../semaphore/header/testOutprint.h"

QueueHandle_t xQueueCO2;

void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
    33e4:	40 e0       	ldi	r20, 0x00	; 0
    33e6:	62 e0       	ldi	r22, 0x02	; 2
    33e8:	8a e0       	ldi	r24, 0x0A	; 10
    33ea:	0e 94 d6 05 	call	0xbac	; 0xbac <xQueueGenericCreate>
    33ee:	90 93 5e 19 	sts	0x195E, r25	; 0x80195e <xQueueCO2+0x1>
    33f2:	80 93 5d 19 	sts	0x195D, r24	; 0x80195d <xQueueCO2>
    33f6:	08 95       	ret

000033f8 <enqueueCO2Measure>:
}


void enqueueCO2Measure(uint16_t ppm){
    33f8:	0f 93       	push	r16
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	1f 92       	push	r1
    3400:	1f 92       	push	r1
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
    3406:	9a 83       	std	Y+2, r25	; 0x02
    3408:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting CO2: %d in the queue \n", ppm);
    340a:	8a 81       	ldd	r24, Y+2	; 0x02
    340c:	8f 93       	push	r24
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	8f 93       	push	r24
    3412:	87 ea       	ldi	r24, 0xA7	; 167
    3414:	92 e0       	ldi	r25, 0x02	; 2
    3416:	9f 93       	push	r25
    3418:	8f 93       	push	r24
    341a:	89 ef       	ldi	r24, 0xF9	; 249
    341c:	98 e1       	ldi	r25, 0x18	; 24
    341e:	9f 93       	push	r25
    3420:	8f 93       	push	r24
    3422:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
	test_outprint(printstring);
    3426:	89 ef       	ldi	r24, 0xF9	; 249
    3428:	98 e1       	ldi	r25, 0x18	; 24
    342a:	47 d3       	rcall	.+1678   	; 0x3aba <test_outprint>
	
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    342c:	00 e0       	ldi	r16, 0x00	; 0
    342e:	2f ef       	ldi	r18, 0xFF	; 255
    3430:	3f ef       	ldi	r19, 0xFF	; 255
    3432:	a9 01       	movw	r20, r18
    3434:	be 01       	movw	r22, r28
    3436:	6f 5f       	subi	r22, 0xFF	; 255
    3438:	7f 4f       	sbci	r23, 0xFF	; 255
    343a:	80 91 5d 19 	lds	r24, 0x195D	; 0x80195d <xQueueCO2>
    343e:	90 91 5e 19 	lds	r25, 0x195E	; 0x80195e <xQueueCO2+0x1>
    3442:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <xQueueGenericSend>
}
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	0f 91       	pop	r16
    345c:	08 95       	ret

0000345e <co2Measure>:

void co2Measure() {
	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
    345e:	0e 94 0b 24 	call	0x4816	; 0x4816 <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
    3462:	81 11       	cpse	r24, r1
    3464:	04 c0       	rjmp	.+8      	; 0x346e <co2Measure+0x10>
	{
		enqueueCO2Measure(0);
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	c6 cf       	rjmp	.-116    	; 0x33f8 <enqueueCO2Measure>
    346c:	08 95       	ret
		//mh_z19_injectCallBack(enqueueCO2Measure);
	}
	else
	{
		puts("Det gik galt");
    346e:	86 ec       	ldi	r24, 0xC6	; 198
    3470:	92 e0       	ldi	r25, 0x02	; 2
    3472:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <puts>
		enqueueCO2Measure(0);
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	be cf       	rjmp	.-132    	; 0x33f8 <enqueueCO2Measure>
    347c:	08 95       	ret

0000347e <dequeueCO2Measure>:
	}
}


uint16_t dequeueCO2Measure(){
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	1f 92       	push	r1
    3484:	1f 92       	push	r1
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	
	xQueueReceive(xQueueCO2, &ppm, 1500);
    348a:	2c ed       	ldi	r18, 0xDC	; 220
    348c:	35 e0       	ldi	r19, 0x05	; 5
    348e:	40 e0       	ldi	r20, 0x00	; 0
    3490:	50 e0       	ldi	r21, 0x00	; 0
    3492:	be 01       	movw	r22, r28
    3494:	6f 5f       	subi	r22, 0xFF	; 255
    3496:	7f 4f       	sbci	r23, 0xFF	; 255
    3498:	80 91 5d 19 	lds	r24, 0x195D	; 0x80195d <xQueueCO2>
    349c:	90 91 5e 19 	lds	r25, 0x195E	; 0x80195e <xQueueCO2+0x1>
    34a0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <xQueueReceive>
	
	sprintf(printstring, "Removing CO2: %d from the queue \n", ppm);
    34a4:	8a 81       	ldd	r24, Y+2	; 0x02
    34a6:	8f 93       	push	r24
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	8f 93       	push	r24
    34ac:	83 ed       	ldi	r24, 0xD3	; 211
    34ae:	92 e0       	ldi	r25, 0x02	; 2
    34b0:	9f 93       	push	r25
    34b2:	8f 93       	push	r24
    34b4:	89 ef       	ldi	r24, 0xF9	; 249
    34b6:	98 e1       	ldi	r25, 0x18	; 24
    34b8:	9f 93       	push	r25
    34ba:	8f 93       	push	r24
    34bc:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
	test_outprint(printstring);
    34c0:	89 ef       	ldi	r24, 0xF9	; 249
    34c2:	98 e1       	ldi	r25, 0x18	; 24
    34c4:	fa d2       	rcall	.+1524   	; 0x3aba <test_outprint>

	return ppm;
    34c6:	0f 90       	pop	r0
    34c8:	0f 90       	pop	r0
    34ca:	0f 90       	pop	r0
    34cc:	0f 90       	pop	r0
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	9a 81       	ldd	r25, Y+2	; 0x02
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	df 91       	pop	r29
    34dc:	cf 91       	pop	r28
    34de:	08 95       	ret

000034e0 <initializeTempHumQueues>:
QueueHandle_t xQueueHum;


void initializeTempHumQueues()
{
	xQueueTemp = xQueueCreate(10, sizeof(int16_t));
    34e0:	40 e0       	ldi	r20, 0x00	; 0
    34e2:	62 e0       	ldi	r22, 0x02	; 2
    34e4:	8a e0       	ldi	r24, 0x0A	; 10
    34e6:	0e 94 d6 05 	call	0xbac	; 0xbac <xQueueGenericCreate>
    34ea:	90 93 62 19 	sts	0x1962, r25	; 0x801962 <xQueueTemp+0x1>
    34ee:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <xQueueTemp>
	xQueueHum = xQueueCreate(10, sizeof(uint16_t));
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	62 e0       	ldi	r22, 0x02	; 2
    34f6:	8a e0       	ldi	r24, 0x0A	; 10
    34f8:	0e 94 d6 05 	call	0xbac	; 0xbac <xQueueGenericCreate>
    34fc:	90 93 60 19 	sts	0x1960, r25	; 0x801960 <xQueueHum+0x1>
    3500:	80 93 5f 19 	sts	0x195F, r24	; 0x80195f <xQueueHum>
    3504:	08 95       	ret

00003506 <enqueueTemperature>:
}

void enqueueTemperature(int16_t temp){
    3506:	0f 93       	push	r16
    3508:	cf 93       	push	r28
    350a:	df 93       	push	r29
    350c:	1f 92       	push	r1
    350e:	1f 92       	push	r1
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	9a 83       	std	Y+2, r25	; 0x02
    3516:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting temperature: %d in the queue \n", temp);
    3518:	8a 81       	ldd	r24, Y+2	; 0x02
    351a:	8f 93       	push	r24
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	8f 93       	push	r24
    3520:	85 ef       	ldi	r24, 0xF5	; 245
    3522:	92 e0       	ldi	r25, 0x02	; 2
    3524:	9f 93       	push	r25
    3526:	8f 93       	push	r24
    3528:	89 ef       	ldi	r24, 0xF9	; 249
    352a:	98 e1       	ldi	r25, 0x18	; 24
    352c:	9f 93       	push	r25
    352e:	8f 93       	push	r24
    3530:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
	test_outprint(printstring);
    3534:	89 ef       	ldi	r24, 0xF9	; 249
    3536:	98 e1       	ldi	r25, 0x18	; 24
    3538:	c0 d2       	rcall	.+1408   	; 0x3aba <test_outprint>
	
	xQueueSend(xQueueTemp, (void*)&temp, portMAX_DELAY);
    353a:	00 e0       	ldi	r16, 0x00	; 0
    353c:	2f ef       	ldi	r18, 0xFF	; 255
    353e:	3f ef       	ldi	r19, 0xFF	; 255
    3540:	a9 01       	movw	r20, r18
    3542:	be 01       	movw	r22, r28
    3544:	6f 5f       	subi	r22, 0xFF	; 255
    3546:	7f 4f       	sbci	r23, 0xFF	; 255
    3548:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <xQueueTemp>
    354c:	90 91 62 19 	lds	r25, 0x1962	; 0x801962 <xQueueTemp+0x1>
    3550:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <xQueueGenericSend>
}
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <enqueueHumidity>:

void enqueueHumidity(uint16_t hum){
    356c:	0f 93       	push	r16
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	1f 92       	push	r1
    3574:	1f 92       	push	r1
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
    357a:	9a 83       	std	Y+2, r25	; 0x02
    357c:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting humidity: %d in the queue \n", hum);
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	8f 93       	push	r24
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	8f 93       	push	r24
    3586:	8c e1       	ldi	r24, 0x1C	; 28
    3588:	93 e0       	ldi	r25, 0x03	; 3
    358a:	9f 93       	push	r25
    358c:	8f 93       	push	r24
    358e:	89 ef       	ldi	r24, 0xF9	; 249
    3590:	98 e1       	ldi	r25, 0x18	; 24
    3592:	9f 93       	push	r25
    3594:	8f 93       	push	r24
    3596:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
	test_outprint(printstring);
    359a:	89 ef       	ldi	r24, 0xF9	; 249
    359c:	98 e1       	ldi	r25, 0x18	; 24
    359e:	8d d2       	rcall	.+1306   	; 0x3aba <test_outprint>
	
	xQueueSend(xQueueHum, (void*)&hum, portMAX_DELAY);	
    35a0:	00 e0       	ldi	r16, 0x00	; 0
    35a2:	2f ef       	ldi	r18, 0xFF	; 255
    35a4:	3f ef       	ldi	r19, 0xFF	; 255
    35a6:	a9 01       	movw	r20, r18
    35a8:	be 01       	movw	r22, r28
    35aa:	6f 5f       	subi	r22, 0xFF	; 255
    35ac:	7f 4f       	sbci	r23, 0xFF	; 255
    35ae:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <xQueueHum>
    35b2:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <xQueueHum+0x1>
    35b6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <xQueueGenericSend>
}
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	df 91       	pop	r29
    35cc:	cf 91       	pop	r28
    35ce:	0f 91       	pop	r16
    35d0:	08 95       	ret

000035d2 <tempHumMeasure>:


void tempHumMeasure()
{
    35d2:	ef 92       	push	r14
    35d4:	ff 92       	push	r15
    35d6:	0f 93       	push	r16
    35d8:	1f 93       	push	r17
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
    35de:	00 d0       	rcall	.+0      	; 0x35e0 <tempHumMeasure+0xe>
    35e0:	1f 92       	push	r1
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5/portTICK_PERIOD_MS; 
	const TickType_t xFrequency2 = 50/portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    35e6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xTaskGetTickCount>
    35ea:	69 83       	std	Y+1, r22	; 0x01
    35ec:	7a 83       	std	Y+2, r23	; 0x02
    35ee:	8b 83       	std	Y+3, r24	; 0x03
    35f0:	9c 83       	std	Y+4, r25	; 0x04

	if(HIH8120_OK != hih8120_wakeup())
    35f2:	d0 d3       	rcall	.+1952   	; 0x3d94 <hih8120_wakeup>
    35f4:	88 23       	and	r24, r24
    35f6:	21 f0       	breq	.+8      	; 0x3600 <tempHumMeasure+0x2e>
	{
		puts("Wakeup gik galt");
    35f8:	80 e4       	ldi	r24, 0x40	; 64
    35fa:	93 e0       	ldi	r25, 0x03	; 3
    35fc:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <puts>
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency2 );
    3600:	43 e0       	ldi	r20, 0x03	; 3
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	60 e0       	ldi	r22, 0x00	; 0
    3606:	70 e0       	ldi	r23, 0x00	; 0
    3608:	ce 01       	movw	r24, r28
    360a:	01 96       	adiw	r24, 0x01	; 1
    360c:	0e 94 08 10 	call	0x2010	; 0x2010 <xTaskDelayUntil>
	if(HIH8120_OK != hih8120_measure())
    3610:	d6 d3       	rcall	.+1964   	; 0x3dbe <hih8120_measure>
    3612:	88 23       	and	r24, r24
    3614:	51 f0       	breq	.+20     	; 0x362a <tempHumMeasure+0x58>
	{
		puts("Humidity & temperature measure went wrong");
    3616:	80 e5       	ldi	r24, 0x50	; 80
    3618:	93 e0       	ldi	r25, 0x03	; 3
    361a:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <puts>
		enqueueHumidity(0);
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	a4 df       	rcall	.-184    	; 0x356c <enqueueHumidity>
		enqueueTemperature(0);
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	6e df       	rcall	.-292    	; 0x3506 <enqueueTemperature>
    362a:	40 e0       	ldi	r20, 0x00	; 0
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    362c:	50 e0       	ldi	r21, 0x00	; 0
    362e:	ba 01       	movw	r22, r20
    3630:	ce 01       	movw	r24, r28
    3632:	01 96       	adiw	r24, 0x01	; 1
    3634:	0e 94 08 10 	call	0x2010	; 0x2010 <xTaskDelayUntil>
	
	uint16_t humidity = hih8120_getHumidity();
    3638:	d3 d3       	rcall	.+1958   	; 0x3de0 <hih8120_getHumidity>
    363a:	12 d3       	rcall	.+1572   	; 0x3c60 <__fixunssfsi>
    363c:	8b 01       	movw	r16, r22
	int16_t temp = hih8120_getTemperature();
    363e:	e5 d3       	rcall	.+1994   	; 0x3e0a <hih8120_getTemperature>
    3640:	0a d3       	rcall	.+1556   	; 0x3c56 <__fixsfsi>
    3642:	7b 01       	movw	r14, r22
    3644:	00 36       	cpi	r16, 0x60	; 96
    3646:	11 05       	cpc	r17, r1
	
	if (humidity > 95 && temp > 100) {
    3648:	88 f0       	brcs	.+34     	; 0x366c <tempHumMeasure+0x9a>
    364a:	85 e6       	ldi	r24, 0x65	; 101
    364c:	e8 16       	cp	r14, r24
    364e:	f1 04       	cpc	r15, r1
    3650:	6c f0       	brlt	.+26     	; 0x366c <tempHumMeasure+0x9a>
    3652:	40 e0       	ldi	r20, 0x00	; 0
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3654:	50 e0       	ldi	r21, 0x00	; 0
    3656:	ba 01       	movw	r22, r20
    3658:	ce 01       	movw	r24, r28
    365a:	01 96       	adiw	r24, 0x01	; 1
			
		humidity = hih8120_getHumidity();
    365c:	0e 94 08 10 	call	0x2010	; 0x2010 <xTaskDelayUntil>
    3660:	bf d3       	rcall	.+1918   	; 0x3de0 <hih8120_getHumidity>
    3662:	fe d2       	rcall	.+1532   	; 0x3c60 <__fixunssfsi>
		temp = hih8120_getTemperature();
    3664:	8b 01       	movw	r16, r22
    3666:	d1 d3       	rcall	.+1954   	; 0x3e0a <hih8120_getTemperature>
    3668:	f6 d2       	rcall	.+1516   	; 0x3c56 <__fixsfsi>
    366a:	7b 01       	movw	r14, r22
    366c:	c8 01       	movw	r24, r16
	}
	
	enqueueHumidity(humidity);
    366e:	7e df       	rcall	.-260    	; 0x356c <enqueueHumidity>
    3670:	c7 01       	movw	r24, r14
    3672:	49 df       	rcall	.-366    	; 0x3506 <enqueueTemperature>
	enqueueTemperature(temp);
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	0f 90       	pop	r0
}
    367a:	0f 90       	pop	r0
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	1f 91       	pop	r17
    3682:	0f 91       	pop	r16
    3684:	ff 90       	pop	r15
    3686:	ef 90       	pop	r14
    3688:	08 95       	ret

0000368a <dequeueTempMeasure>:
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29
    368e:	1f 92       	push	r1


int16_t dequeueTempMeasure(){
    3690:	1f 92       	push	r1
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	
	xQueueReceive(xQueueTemp, &temp, 1500);
    3696:	2c ed       	ldi	r18, 0xDC	; 220
    3698:	35 e0       	ldi	r19, 0x05	; 5
    369a:	40 e0       	ldi	r20, 0x00	; 0
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	be 01       	movw	r22, r28
    36a0:	6f 5f       	subi	r22, 0xFF	; 255
    36a2:	7f 4f       	sbci	r23, 0xFF	; 255
    36a4:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <xQueueTemp>
    36a8:	90 91 62 19 	lds	r25, 0x1962	; 0x801962 <xQueueTemp+0x1>
    36ac:	0e 94 c6 06 	call	0xd8c	; 0xd8c <xQueueReceive>
	
	sprintf(printstring, "Removing temperature: %d from the queue \n", temp);
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	8f 93       	push	r24
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	8f 93       	push	r24
    36b8:	8a e7       	ldi	r24, 0x7A	; 122
    36ba:	93 e0       	ldi	r25, 0x03	; 3
    36bc:	9f 93       	push	r25
    36be:	8f 93       	push	r24
    36c0:	89 ef       	ldi	r24, 0xF9	; 249
    36c2:	98 e1       	ldi	r25, 0x18	; 24
    36c4:	9f 93       	push	r25
    36c6:	8f 93       	push	r24
    36c8:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
	test_outprint(printstring);
    36cc:	89 ef       	ldi	r24, 0xF9	; 249
    36ce:	98 e1       	ldi	r25, 0x18	; 24
    36d0:	f4 d1       	rcall	.+1000   	; 0x3aba <test_outprint>
	
	return temp;
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
}
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	08 95       	ret

000036ec <dequeueHumidityMeasure>:

uint16_t dequeueHumidityMeasure(){
    36ec:	cf 93       	push	r28
    36ee:	df 93       	push	r29
    36f0:	1f 92       	push	r1
    36f2:	1f 92       	push	r1
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
	uint16_t hum;
	
	xQueueReceive(xQueueHum, &hum, 1500);
    36f8:	2c ed       	ldi	r18, 0xDC	; 220
    36fa:	35 e0       	ldi	r19, 0x05	; 5
    36fc:	40 e0       	ldi	r20, 0x00	; 0
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	be 01       	movw	r22, r28
    3702:	6f 5f       	subi	r22, 0xFF	; 255
    3704:	7f 4f       	sbci	r23, 0xFF	; 255
    3706:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <xQueueHum>
    370a:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <xQueueHum+0x1>
    370e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <xQueueReceive>
	
	sprintf(printstring, "Removing humidity: %d from the queue \n", hum);
    3712:	8a 81       	ldd	r24, Y+2	; 0x02
    3714:	8f 93       	push	r24
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	8f 93       	push	r24
    371a:	84 ea       	ldi	r24, 0xA4	; 164
    371c:	93 e0       	ldi	r25, 0x03	; 3
    371e:	9f 93       	push	r25
    3720:	8f 93       	push	r24
    3722:	89 ef       	ldi	r24, 0xF9	; 249
    3724:	98 e1       	ldi	r25, 0x18	; 24
    3726:	9f 93       	push	r25
    3728:	8f 93       	push	r24
    372a:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
	test_outprint(printstring);
    372e:	89 ef       	ldi	r24, 0xF9	; 249
    3730:	98 e1       	ldi	r25, 0x18	; 24
    3732:	c3 d1       	rcall	.+902    	; 0x3aba <test_outprint>
		
	return hum;
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	9a 81       	ldd	r25, Y+2	; 0x02
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	df 91       	pop	r29
    374a:	cf 91       	pop	r28
    374c:	08 95       	ret

0000374e <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    374e:	0f 93       	push	r16
    3750:	1f 93       	push	r17
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	64 97       	sbiw	r28, 0x14	; 20
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61

	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	0e 94 47 29 	call	0x528e	; 0x528e <status_leds_slowBlink>

	// Factory reset the transceiver
	//sprintf(printstring, "FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
	//test_outprint(printstring);
	
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    376c:	d6 d4       	rcall	.+2476   	; 0x411a <lora_driver_rn2483FactoryReset>
    376e:	52 d7       	rcall	.+3748   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3770:	9f 93       	push	r25
    3772:	8f 93       	push	r24
    3774:	8b ec       	ldi	r24, 0xCB	; 203
    3776:	93 e0       	ldi	r25, 0x03	; 3
    3778:	9f 93       	push	r25
    377a:	8f 93       	push	r24
    377c:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>
	
	// Configure to EU868 LoRaWAN standards
	//sprintf(printstring, "Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
	//test_outprint(printstring);
	
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3780:	4a d6       	rcall	.+3220   	; 0x4416 <lora_driver_configureToEu868>
    3782:	48 d7       	rcall	.+3728   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3784:	9f 93       	push	r25
    3786:	8f 93       	push	r24
    3788:	8e ed       	ldi	r24, 0xDE	; 222
    378a:	93 e0       	ldi	r25, 0x03	; 3
    378c:	9f 93       	push	r25
    378e:	8f 93       	push	r24
    3790:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>
    3794:	8e 01       	movw	r16, r28
    3796:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI	
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3798:	1f 4f       	sbci	r17, 0xFF	; 255
    379a:	c8 01       	movw	r24, r16
    379c:	d0 d4       	rcall	.+2464   	; 0x413e <lora_driver_getRn2483Hweui>
    379e:	3a d7       	rcall	.+3700   	; 0x4614 <lora_driver_mapReturnCodeToText>
	
	//sprintf(printstring, "Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
	//test_outprint(printstring);

	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    37a0:	1f 93       	push	r17
    37a2:	0f 93       	push	r16
    37a4:	9f 93       	push	r25
    37a6:	8f 93       	push	r24
    37a8:	87 ef       	ldi	r24, 0xF7	; 247
    37aa:	93 e0       	ldi	r25, 0x03	; 3
    37ac:	9f 93       	push	r25
    37ae:	8f 93       	push	r24
    37b0:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	//sprintf(printstring, "Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
	//test_outprint(printstring);
	
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    37b4:	c8 01       	movw	r24, r16
    37b6:	df d4       	rcall	.+2494   	; 0x4176 <lora_driver_setDeviceIdentifier>
    37b8:	2d d7       	rcall	.+3674   	; 0x4614 <lora_driver_mapReturnCodeToText>
    37ba:	9f 93       	push	r25
    37bc:	8f 93       	push	r24
    37be:	1f 93       	push	r17
    37c0:	0f 93       	push	r16
    37c2:	8b e0       	ldi	r24, 0x0B	; 11
    37c4:	94 e0       	ldi	r25, 0x04	; 4
    37c6:	9f 93       	push	r25
    37c8:	8f 93       	push	r24
    37ca:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	//sprintf(printstring, "Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
	//test_outprint(printstring);
	
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    37ce:	a8 01       	movw	r20, r16
    37d0:	60 e2       	ldi	r22, 0x20	; 32
    37d2:	74 e0       	ldi	r23, 0x04	; 4
    37d4:	81 e4       	ldi	r24, 0x41	; 65
    37d6:	94 e0       	ldi	r25, 0x04	; 4
    37d8:	fc d6       	rcall	.+3576   	; 0x45d2 <lora_driver_setOtaaIdentity>
    37da:	1c d7       	rcall	.+3640   	; 0x4614 <lora_driver_mapReturnCodeToText>
    37dc:	9f 93       	push	r25
    37de:	8f 93       	push	r24
    37e0:	1f 93       	push	r17
    37e2:	0f 93       	push	r16
    37e4:	80 e2       	ldi	r24, 0x20	; 32
    37e6:	94 e0       	ldi	r25, 0x04	; 4
    37e8:	9f 93       	push	r25
    37ea:	8f 93       	push	r24
    37ec:	81 e4       	ldi	r24, 0x41	; 65
    37ee:	94 e0       	ldi	r25, 0x04	; 4
    37f0:	9f 93       	push	r25
    37f2:	8f 93       	push	r24
    37f4:	82 e5       	ldi	r24, 0x52	; 82
    37f6:	94 e0       	ldi	r25, 0x04	; 4
    37f8:	9f 93       	push	r25
    37fa:	8f 93       	push	r24
    37fc:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>

	// Save all the MAC settings in the transceiver
	//sprintf(printstring, "Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
	//test_outprint(printstring);
	
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3800:	ed d4       	rcall	.+2522   	; 0x41dc <lora_driver_saveMac>
    3802:	08 d7       	rcall	.+3600   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3804:	9f 93       	push	r25
    3806:	8f 93       	push	r24
    3808:	88 e8       	ldi	r24, 0x88	; 136
    380a:	94 e0       	ldi	r25, 0x04	; 4
    380c:	9f 93       	push	r25
    380e:	8f 93       	push	r24
    3810:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>

	// Enable Adaptive Data Rate
	//sprintf(printstring, "Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
	//test_outprint(printstring);
	
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	d7 d5       	rcall	.+2990   	; 0x43d0 <lora_driver_setAdaptiveDataRate>
    3822:	f8 d6       	rcall	.+3568   	; 0x4614 <lora_driver_mapReturnCodeToText>
    3824:	9f 93       	push	r25
    3826:	8f 93       	push	r24
    3828:	87 e9       	ldi	r24, 0x97	; 151
    382a:	94 e0       	ldi	r25, 0x04	; 4
    382c:	9f 93       	push	r25
    382e:	8f 93       	push	r24
    3830:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	//sprintf(printstring, "Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
	//test_outprint(printstring);
	
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3834:	84 ef       	ldi	r24, 0xF4	; 244
    3836:	91 e0       	ldi	r25, 0x01	; 1
    3838:	d6 d5       	rcall	.+2988   	; 0x43e6 <lora_driver_setReceiveDelay>
    383a:	ec d6       	rcall	.+3544   	; 0x4614 <lora_driver_mapReturnCodeToText>
    383c:	9f 93       	push	r25
    383e:	8f 93       	push	r24
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	8f 93       	push	r24
    3844:	84 ef       	ldi	r24, 0xF4	; 244
    3846:	8f 93       	push	r24
    3848:	88 eb       	ldi	r24, 0xB8	; 184
    384a:	94 e0       	ldi	r25, 0x04	; 4
    384c:	9f 93       	push	r25
    384e:	8f 93       	push	r24
    3850:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	f8 94       	cli
    3858:	de bf       	out	0x3e, r29	; 62
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    385e:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	c2 d4       	rcall	.+2436   	; 0x41e8 <lora_driver_join>
    3864:	08 2f       	mov	r16, r24
    3866:	d6 d6       	rcall	.+3500   	; 0x4614 <lora_driver_mapReturnCodeToText>
		
		//sprintf(printstring, "Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
		//test_outprint(printstring);
		
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3868:	9f 93       	push	r25
    386a:	8f 93       	push	r24
    386c:	1f 92       	push	r1
    386e:	1f 93       	push	r17
    3870:	88 ed       	ldi	r24, 0xD8	; 216
    3872:	94 e0       	ldi	r25, 0x04	; 4
    3874:	9f 93       	push	r25
    3876:	8f 93       	push	r24
    3878:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	08 30       	cpi	r16, 0x08	; 8
    388a:	59 f0       	breq	.+22     	; 0x38a2 <_lora_setup+0x154>
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	0e 94 ab 29 	call	0x5356	; 0x5356 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3892:	66 e3       	ldi	r22, 0x36	; 54
    3894:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskDelay>
    389e:	11 50       	subi	r17, 0x01	; 1
    38a0:	f9 f6       	brne	.-66     	; 0x3860 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    38a2:	08 30       	cpi	r16, 0x08	; 8
    38a4:	41 f4       	brne	.+16     	; 0x38b6 <_lora_setup+0x168>

	if (rc == LORA_ACCEPTED)
    38a6:	88 ef       	ldi	r24, 0xF8	; 248
    38a8:	94 e0       	ldi	r25, 0x04	; 4
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		printf("\t We have been accepted \n");
    38aa:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <puts>
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	0e 94 8d 29 	call	0x531a	; 0x531a <status_leds_ledOn>
		status_leds_ledOn(led_ST2); // OPTIONAL
    38b4:	09 c0       	rjmp	.+18     	; 0x38c8 <_lora_setup+0x17a>
    38b6:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    38b8:	0e 94 9c 29 	call	0x5338	; 0x5338 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    38c2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    38c6:	fd cf       	rjmp	.-6      	; 0x38c2 <_lora_setup+0x174>
    38c8:	64 96       	adiw	r28, 0x14	; 20
    38ca:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    38cc:	f8 94       	cli
    38ce:	de bf       	out	0x3e, r29	; 62
    38d0:	0f be       	out	0x3f, r0	; 63
    38d2:	cd bf       	out	0x3d, r28	; 61
    38d4:	df 91       	pop	r29
    38d6:	cf 91       	pop	r28
    38d8:	1f 91       	pop	r17
    38da:	0f 91       	pop	r16
    38dc:	08 95       	ret

000038de <lora_handler_task>:
    38de:	cf 93       	push	r28
    38e0:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    38e2:	00 d0       	rcall	.+0      	; 0x38e4 <lora_handler_task+0x6>
    38e4:	1f 92       	push	r1
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	08 d4       	rcall	.+2064   	; 0x40fe <lora_driver_resetRn2483>
	vTaskDelay(2);
    38ee:	62 e0       	ldi	r22, 0x02	; 2
    38f0:	70 e0       	ldi	r23, 0x00	; 0
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskDelay>
	lora_driver_resetRn2483(0);
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	00 d4       	rcall	.+2048   	; 0x40fe <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    38fe:	66 e9       	ldi	r22, 0x96	; 150
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    390a:	b2 d3       	rcall	.+1892   	; 0x4070 <lora_driver_flushBuffers>

	_lora_setup();
    390c:	20 df       	rcall	.-448    	; 0x374e <_lora_setup>
    390e:	e7 e7       	ldi	r30, 0x77	; 119

	// DEFINING SIZE OF PAYLOAD
	_uplink_payload.len = 8;
    3910:	f7 e1       	ldi	r31, 0x17	; 23
    3912:	88 e0       	ldi	r24, 0x08	; 8
    3914:	81 83       	std	Z+1, r24	; 0x01
    3916:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    3918:	80 83       	st	Z, r24
    391a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // UNDER TESTING 30000 (30 sec) Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    391e:	69 83       	std	Y+1, r22	; 0x01
    3920:	7a 83       	std	Y+2, r23	; 0x02
    3922:	8b 83       	std	Y+3, r24	; 0x03
    3924:	9c 83       	std	Y+4, r25	; 0x04
    3926:	81 e1       	ldi	r24, 0x11	; 17

	for(;;)
	{
		uint16_t growbroId = 1;
			
		puts("\t going into delay");
    3928:	95 e0       	ldi	r25, 0x05	; 5
    392a:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <puts>
    392e:	48 ea       	ldi	r20, 0xA8	; 168
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3930:	58 e4       	ldi	r21, 0x48	; 72
    3932:	60 e0       	ldi	r22, 0x00	; 0
    3934:	70 e0       	ldi	r23, 0x00	; 0
    3936:	ce 01       	movw	r24, r28
    3938:	01 96       	adiw	r24, 0x01	; 1
    393a:	0e 94 08 10 	call	0x2010	; 0x2010 <xTaskDelayUntil>
    393e:	0e 94 a7 01 	call	0x34e	; 0x34e <dequeueSharedData>
		
		// Creating struct and dequeueing data
		SharedData_t sharedData;
		sharedData = dequeueSharedData();
    3942:	8c 01       	movw	r16, r24
    3944:	dc 01       	movw	r26, r24
		
		sprintf(printstring, "DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
    3946:	13 96       	adiw	r26, 0x03	; 3
    3948:	8c 91       	ld	r24, X
    394a:	13 97       	sbiw	r26, 0x03	; 3
    394c:	8f 93       	push	r24
    394e:	12 96       	adiw	r26, 0x02	; 2
    3950:	8c 91       	ld	r24, X
    3952:	12 97       	sbiw	r26, 0x02	; 2
    3954:	8f 93       	push	r24
    3956:	11 96       	adiw	r26, 0x01	; 1
    3958:	8c 91       	ld	r24, X
    395a:	11 97       	sbiw	r26, 0x01	; 1
    395c:	8f 93       	push	r24
    395e:	8c 91       	ld	r24, X
    3960:	8f 93       	push	r24
    3962:	15 96       	adiw	r26, 0x05	; 5
    3964:	8c 91       	ld	r24, X
    3966:	15 97       	sbiw	r26, 0x05	; 5
    3968:	8f 93       	push	r24
    396a:	14 96       	adiw	r26, 0x04	; 4
    396c:	8c 91       	ld	r24, X
    396e:	8f 93       	push	r24
    3970:	84 e2       	ldi	r24, 0x24	; 36
    3972:	95 e0       	ldi	r25, 0x05	; 5
    3974:	9f 93       	push	r25
    3976:	8f 93       	push	r24
    3978:	0f 2e       	mov	r0, r31
    397a:	f9 ef       	ldi	r31, 0xF9	; 249
    397c:	ef 2e       	mov	r14, r31
    397e:	f8 e1       	ldi	r31, 0x18	; 24
    3980:	ff 2e       	mov	r15, r31
    3982:	f0 2d       	mov	r31, r0
    3984:	ff 92       	push	r15
    3986:	ef 92       	push	r14
    3988:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
		test_outprint(printstring);
    398c:	c7 01       	movw	r24, r14
    398e:	95 d0       	rcall	.+298    	; 0x3aba <test_outprint>
    3990:	e7 e7       	ldi	r30, 0x77	; 119
		
		//printf("DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
		
		// CREATING OUR OWN PAYLOAD
		_uplink_payload.bytes[0] = growbroId >> 8;
    3992:	f7 e1       	ldi	r31, 0x17	; 23
    3994:	12 82       	std	Z+2, r1	; 0x02
    3996:	81 e0       	ldi	r24, 0x01	; 1
		_uplink_payload.bytes[1] = growbroId & 0xFF;
    3998:	83 83       	std	Z+3, r24	; 0x03
    399a:	d8 01       	movw	r26, r16
		_uplink_payload.bytes[2] = sharedData->co2 >> 8;
    399c:	11 96       	adiw	r26, 0x01	; 1
    399e:	8c 91       	ld	r24, X
    39a0:	11 97       	sbiw	r26, 0x01	; 1
    39a2:	84 83       	std	Z+4, r24	; 0x04
    39a4:	8c 91       	ld	r24, X
		_uplink_payload.bytes[3] = sharedData->co2 & 0xFF;
    39a6:	85 83       	std	Z+5, r24	; 0x05
    39a8:	15 96       	adiw	r26, 0x05	; 5
		_uplink_payload.bytes[4] = sharedData->humidity >> 8;
    39aa:	8c 91       	ld	r24, X
    39ac:	15 97       	sbiw	r26, 0x05	; 5
    39ae:	86 83       	std	Z+6, r24	; 0x06
    39b0:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[5] = sharedData->humidity & 0xFF;
    39b2:	8c 91       	ld	r24, X
    39b4:	14 97       	sbiw	r26, 0x04	; 4
    39b6:	87 83       	std	Z+7, r24	; 0x07
    39b8:	13 96       	adiw	r26, 0x03	; 3
		_uplink_payload.bytes[6] = sharedData->temperature >> 8;
    39ba:	8c 91       	ld	r24, X
    39bc:	13 97       	sbiw	r26, 0x03	; 3
    39be:	80 87       	std	Z+8, r24	; 0x08
    39c0:	12 96       	adiw	r26, 0x02	; 2
		_uplink_payload.bytes[7] = sharedData->temperature & 0xFF;
    39c2:	8c 91       	ld	r24, X
    39c4:	81 87       	std	Z+9, r24	; 0x09
    39c6:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    39c8:	0e 94 bd 29 	call	0x537a	; 0x537a <status_leds_shortPuls>
		
		// SENDING PAYLOAD
		//printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
		
		sprintf(printstring, "Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    39cc:	67 e7       	ldi	r22, 0x77	; 119
    39ce:	77 e1       	ldi	r23, 0x17	; 23
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	33 d4       	rcall	.+2150   	; 0x423a <lora_driver_sendUploadMessage>
    39d4:	1f d6       	rcall	.+3134   	; 0x4614 <lora_driver_mapReturnCodeToText>
    39d6:	9f 93       	push	r25
    39d8:	8f 93       	push	r24
    39da:	8f e4       	ldi	r24, 0x4F	; 79
    39dc:	95 e0       	ldi	r25, 0x05	; 5
    39de:	9f 93       	push	r25
    39e0:	8f 93       	push	r24
    39e2:	ff 92       	push	r15
    39e4:	ef 92       	push	r14
    39e6:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
    39ea:	c7 01       	movw	r24, r14
		test_outprint(printstring);
    39ec:	66 d0       	rcall	.+204    	; 0x3aba <test_outprint>
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	cd bf       	out	0x3d, r28	; 61
    39f8:	96 cf       	rjmp	.-212    	; 0x3926 <lora_handler_task+0x48>

000039fa <task_download>:
    39fa:	cf 93       	push	r28
    39fc:	df 93       	push	r29
	}

}

void task_download( void *pvParameters )
{
    39fe:	cd b7       	in	r28, 0x3d	; 61
    3a00:	de b7       	in	r29, 0x3e	; 62
    3a02:	66 97       	sbiw	r28, 0x16	; 22
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	de bf       	out	0x3e, r29	; 62
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	cd bf       	out	0x3d, r28	; 61

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	76 d3       	rcall	.+1772   	; 0x40fe <lora_driver_resetRn2483>
	vTaskDelay(2);
    3a12:	62 e0       	ldi	r22, 0x02	; 2
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskDelay>
	lora_driver_resetRn2483(0);
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	6e d3       	rcall	.+1756   	; 0x40fe <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3a22:	66 e9       	ldi	r22, 0x96	; 150
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3a2e:	20 d3       	rcall	.+1600   	; 0x4070 <lora_driver_flushBuffers>
	//int8_t percent = 100;
	//rc_servo_setPosition(servoNo, percent);
	
	
	lora_driver_payload_t downlinkPayload;
	downlinkPayload.portNo = 2;
    3a30:	82 e0       	ldi	r24, 0x02	; 2
    3a32:	89 83       	std	Y+1, r24	; 0x01
	downlinkPayload.len = 4;
    3a34:	84 e0       	ldi	r24, 0x04	; 4
    3a36:	8a 83       	std	Y+2, r24	; 0x02
	uint16_t recieve;
	for(;;)
	{	
		xMessageBufferReceive(downlinkMessageBufferHandle, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    3a38:	0f ef       	ldi	r16, 0xFF	; 255
    3a3a:	1f ef       	ldi	r17, 0xFF	; 255
    3a3c:	98 01       	movw	r18, r16
    3a3e:	46 e1       	ldi	r20, 0x16	; 22
    3a40:	50 e0       	ldi	r21, 0x00	; 0
    3a42:	be 01       	movw	r22, r28
    3a44:	6f 5f       	subi	r22, 0xFF	; 255
    3a46:	7f 4f       	sbci	r23, 0xFF	; 255
    3a48:	80 91 63 19 	lds	r24, 0x1963	; 0x801963 <downlinkMessageBufferHandle>
    3a4c:	90 91 64 19 	lds	r25, 0x1964	; 0x801964 <downlinkMessageBufferHandle+0x1>
    3a50:	0e 94 ce 0a 	call	0x159c	; 0x159c <xStreamBufferReceive>
		printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len); // Just for Debug
    3a54:	9a 81       	ldd	r25, Y+2	; 0x02
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	1f 92       	push	r1
    3a5a:	9f 93       	push	r25
    3a5c:	1f 92       	push	r1
    3a5e:	8f 93       	push	r24
    3a60:	84 e6       	ldi	r24, 0x64	; 100
    3a62:	95 e0       	ldi	r25, 0x05	; 5
    3a64:	9f 93       	push	r25
    3a66:	8f 93       	push	r24
    3a68:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	0f 90       	pop	r0
    3a76:	0f 90       	pop	r0
    3a78:	df cf       	rjmp	.-66     	; 0x3a38 <task_download+0x3e>

00003a7a <lora_handler_initialise>:
void task_download( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3a7a:	ef 92       	push	r14
    3a7c:	ff 92       	push	r15
    3a7e:	0f 93       	push	r16
    3a80:	cf 93       	push	r28
	xTaskCreate(
    3a82:	e1 2c       	mov	r14, r1
    3a84:	f1 2c       	mov	r15, r1
    3a86:	08 2f       	mov	r16, r24
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	48 e8       	ldi	r20, 0x88	; 136
    3a8e:	51 e0       	ldi	r21, 0x01	; 1
    3a90:	65 e9       	ldi	r22, 0x95	; 149
    3a92:	75 e0       	ldi	r23, 0x05	; 5
    3a94:	8f e6       	ldi	r24, 0x6F	; 111
    3a96:	9c e1       	ldi	r25, 0x1C	; 28
    3a98:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
		xTaskCreate(
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	48 e8       	ldi	r20, 0x88	; 136
    3aa2:	51 e0       	ldi	r21, 0x01	; 1
    3aa4:	6c e9       	ldi	r22, 0x9C	; 156
    3aa6:	75 e0       	ldi	r23, 0x05	; 5
    3aa8:	8d ef       	ldi	r24, 0xFD	; 253
    3aaa:	9c e1       	ldi	r25, 0x1C	; 28
    3aac:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xTaskCreate>
	,  "LRHanddown"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3ab0:	cf 91       	pop	r28
    3ab2:	0f 91       	pop	r16
    3ab4:	ff 90       	pop	r15
    3ab6:	ef 90       	pop	r14
    3ab8:	08 95       	ret

00003aba <test_outprint>:
 */ 

#include "../semaphore/header/testOutprint.h"


void test_outprint(char* outprint) {
    3aba:	0f 93       	push	r16
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	c8 2f       	mov	r28, r24
    3ac2:	d9 2f       	mov	r29, r25
	if( xSemaphoreTake( xSemaphore, ( TickType_t ) 100 ) == pdTRUE )
    3ac4:	44 e6       	ldi	r20, 0x64	; 100
    3ac6:	50 e0       	ldi	r21, 0x00	; 0
    3ac8:	60 e0       	ldi	r22, 0x00	; 0
    3aca:	70 e0       	ldi	r23, 0x00	; 0
    3acc:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <xSemaphore>
    3ad0:	90 91 f8 18 	lds	r25, 0x18F8	; 0x8018f8 <xSemaphore+0x1>
    3ad4:	0e 94 55 07 	call	0xeaa	; 0xeaa <xQueueSemaphoreTake>
    3ad8:	81 30       	cpi	r24, 0x01	; 1
    3ada:	99 f4       	brne	.+38     	; 0x3b02 <test_outprint+0x48>
	{
		printf(outprint);
    3adc:	df 93       	push	r29
    3ade:	cf 93       	push	r28
    3ae0:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <printf>
		//TickType_t xDelay = 100 / portTICK_PERIOD_MS;
		//vTaskDelay(xDelay);
		
		xSemaphoreGive( xSemaphore );
    3ae4:	00 e0       	ldi	r16, 0x00	; 0
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	a9 01       	movw	r20, r18
    3aec:	60 e0       	ldi	r22, 0x00	; 0
    3aee:	70 e0       	ldi	r23, 0x00	; 0
    3af0:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <xSemaphore>
    3af4:	90 91 f8 18 	lds	r25, 0x18F8	; 0x8018f8 <xSemaphore+0x1>
    3af8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <xQueueGenericSend>
    3afc:	0f 90       	pop	r0
    3afe:	0f 90       	pop	r0
    3b00:	04 c0       	rjmp	.+8      	; 0x3b0a <test_outprint+0x50>
	}
	else
	{ 
		puts("The semaphore was already taken");
    3b02:	87 ea       	ldi	r24, 0xA7	; 167
    3b04:	95 e0       	ldi	r25, 0x05	; 5
    3b06:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <puts>
	}
	

	
}
    3b0a:	df 91       	pop	r29
    3b0c:	cf 91       	pop	r28
    3b0e:	0f 91       	pop	r16
    3b10:	08 95       	ret

00003b12 <initializeSemaphore>:

void initializeSemaphore(){
    3b12:	0f 93       	push	r16
	xSemaphore = xSemaphoreCreateBinary();
    3b14:	43 e0       	ldi	r20, 0x03	; 3
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	0e 94 d6 05 	call	0xbac	; 0xbac <xQueueGenericCreate>
    3b1e:	90 93 f8 18 	sts	0x18F8, r25	; 0x8018f8 <xSemaphore+0x1>
    3b22:	80 93 f7 18 	sts	0x18F7, r24	; 0x8018f7 <xSemaphore>
	xSemaphoreGive(xSemaphore);
    3b26:	00 e0       	ldi	r16, 0x00	; 0
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	a9 01       	movw	r20, r18
    3b2e:	60 e0       	ldi	r22, 0x00	; 0
    3b30:	70 e0       	ldi	r23, 0x00	; 0
    3b32:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <xQueueGenericSend>
    3b36:	0f 91       	pop	r16
    3b38:	08 95       	ret

00003b3a <takeMeasure>:
	
}


void takeMeasure(void *pvParameters)
{
    3b3a:	cf 93       	push	r28
    3b3c:	df 93       	push	r29
    3b3e:	00 d0       	rcall	.+0      	; 0x3b40 <takeMeasure+0x6>
    3b40:	1f 92       	push	r1
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 3000/portTICK_PERIOD_MS; // 60 s

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3b46:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xTaskGetTickCount>
    3b4a:	69 83       	std	Y+1, r22	; 0x01
    3b4c:	7a 83       	std	Y+2, r23	; 0x02
    3b4e:	8b 83       	std	Y+3, r24	; 0x03
    3b50:	9c 83       	std	Y+4, r25	; 0x04
		
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3b52:	4b eb       	ldi	r20, 0xBB	; 187
    3b54:	50 e0       	ldi	r21, 0x00	; 0
    3b56:	60 e0       	ldi	r22, 0x00	; 0
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	01 96       	adiw	r24, 0x01	; 1
    3b5e:	0e 94 08 10 	call	0x2010	; 0x2010 <xTaskDelayUntil>
		tempHumMeasure();	
    3b62:	37 dd       	rcall	.-1426   	; 0x35d2 <tempHumMeasure>
		co2Measure(); // Call CO2HandlerImpl to take measure
    3b64:	7c dc       	rcall	.-1800   	; 0x345e <co2Measure>
    3b66:	f5 cf       	rjmp	.-22     	; 0x3b52 <takeMeasure+0x18>

00003b68 <enqueueMeasures>:
    3b68:	cf 93       	push	r28
	}
}

void enqueueMeasures(void *pvParameters)
{
    3b6a:	df 93       	push	r29
    3b6c:	00 d0       	rcall	.+0      	; 0x3b6e <enqueueMeasures+0x6>
    3b6e:	1f 92       	push	r1
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 30000/portTICK_PERIOD_MS; // 65 s

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3b74:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xTaskGetTickCount>
    3b78:	69 83       	std	Y+1, r22	; 0x01
    3b7a:	7a 83       	std	Y+2, r23	; 0x02
    3b7c:	8b 83       	std	Y+3, r24	; 0x03
    3b7e:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3b80:	43 e5       	ldi	r20, 0x53	; 83
    3b82:	57 e0       	ldi	r21, 0x07	; 7
    3b84:	60 e0       	ldi	r22, 0x00	; 0
    3b86:	70 e0       	ldi	r23, 0x00	; 0
    3b88:	ce 01       	movw	r24, r28
    3b8a:	01 96       	adiw	r24, 0x01	; 1
    3b8c:	0e 94 08 10 	call	0x2010	; 0x2010 <xTaskDelayUntil>
		enqueueSharedData(); // Call SharedDataQueueImpl to enqueue the measures
    3b90:	0e 94 11 01 	call	0x222	; 0x222 <enqueueSharedData>
    3b94:	f5 cf       	rjmp	.-22     	; 0x3b80 <enqueueMeasures+0x18>

00003b96 <setupTasks>:
void takeMeasure( void *pvParameters );
void enqueueMeasures( void *pvParameters );


void setupTasks(void) // Can only setup 2 tasks, memory problems?
{
    3b96:	ef 92       	push	r14
    3b98:	ff 92       	push	r15
    3b9a:	0f 93       	push	r16
	
	xTaskCreate(
    3b9c:	e1 2c       	mov	r14, r1
    3b9e:	f1 2c       	mov	r15, r1
    3ba0:	00 e0       	ldi	r16, 0x00	; 0
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	40 ec       	ldi	r20, 0xC0	; 192
    3ba8:	50 e0       	ldi	r21, 0x00	; 0
    3baa:	67 ec       	ldi	r22, 0xC7	; 199
    3bac:	75 e0       	ldi	r23, 0x05	; 5
    3bae:	8d e9       	ldi	r24, 0x9D	; 157
    3bb0:	9d e1       	ldi	r25, 0x1D	; 29
    3bb2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	40 ec       	ldi	r20, 0xC0	; 192
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	63 ed       	ldi	r22, 0xD3	; 211
    3bc0:	75 e0       	ldi	r23, 0x05	; 5
    3bc2:	84 eb       	ldi	r24, 0xB4	; 180
    3bc4:	9d e1       	ldi	r25, 0x1D	; 29
    3bc6:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );	
	
}
    3bca:	0f 91       	pop	r16
    3bcc:	ff 90       	pop	r15
    3bce:	ef 90       	pop	r14
    3bd0:	08 95       	ret

00003bd2 <startTasks>:
}


void startTasks()
{
	setupTasks();
    3bd2:	e1 df       	rcall	.-62     	; 0x3b96 <setupTasks>
	
	sprintf(printstring, "Heapsize: %d \n", xPortGetFreeHeapSize());
    3bd4:	0e 94 0e 03 	call	0x61c	; 0x61c <xPortGetFreeHeapSize>
    3bd8:	9f 93       	push	r25
    3bda:	8f 93       	push	r24
    3bdc:	83 ee       	ldi	r24, 0xE3	; 227
    3bde:	95 e0       	ldi	r25, 0x05	; 5
    3be0:	9f 93       	push	r25
    3be2:	8f 93       	push	r24
    3be4:	89 ef       	ldi	r24, 0xF9	; 249
    3be6:	98 e1       	ldi	r25, 0x18	; 24
    3be8:	9f 93       	push	r25
    3bea:	8f 93       	push	r24
    3bec:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
	//test_outprint(printstring);
	
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3bf0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <vTaskStartScheduler>
}
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	08 95       	ret

00003c02 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3c02:	81 b1       	in	r24, 0x01	; 1
    3c04:	81 68       	ori	r24, 0x81	; 129
    3c06:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <stdio_initialise>
	
	// Initialize queues
	initializeCO2Queue();
    3c10:	e9 db       	rcall	.-2094   	; 0x33e4 <initializeCO2Queue>
	initializeTempHumQueues();
    3c12:	66 dc       	rcall	.-1844   	; 0x34e0 <initializeTempHumQueues>
    3c14:	0e 94 08 01 	call	0x210	; 0x210 <initializeSharedDataQueue>
	initializeSharedDataQueue();

	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    3c18:	83 e0       	ldi	r24, 0x03	; 3
    3c1a:	d8 d5       	rcall	.+2992   	; 0x47cc <mh_z19_initialise>
	hih8120_initialise();
    3c1c:	a3 d0       	rcall	.+326    	; 0x3d64 <hih8120_initialise>
    3c1e:	85 e0       	ldi	r24, 0x05	; 5



	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3c20:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <status_leds_initialise>
    3c24:	41 e0       	ldi	r20, 0x01	; 1
	// Initialise the LoRaWAN driver without down-link buffer
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3c26:	60 e0       	ldi	r22, 0x00	; 0
    3c28:	70 e0       	ldi	r23, 0x00	; 0
    3c2a:	8c e2       	ldi	r24, 0x2C	; 44
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	0e 94 65 09 	call	0x12ca	; 0x12ca <xStreamBufferGenericCreate>
    3c32:	90 93 64 19 	sts	0x1964, r25	; 0x801964 <downlinkMessageBufferHandle+0x1>
    3c36:	80 93 63 19 	sts	0x1963, r24	; 0x801963 <downlinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    3c3a:	bc 01       	movw	r22, r24
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	1f d2       	rcall	.+1086   	; 0x407e <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3c40:	83 e0       	ldi	r24, 0x03	; 3
    3c42:	1b cf       	rjmp	.-458    	; 0x3a7a <lora_handler_initialise>
    3c44:	08 95       	ret

00003c46 <main>:
    3c46:	dd df       	rcall	.-70     	; 0x3c02 <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	
	initializeSemaphore();
    3c48:	64 df       	rcall	.-312    	; 0x3b12 <initializeSemaphore>
    3c4a:	82 ef       	ldi	r24, 0xF2	; 242
	
	puts("Program started!");
    3c4c:	95 e0       	ldi	r25, 0x05	; 5
    3c4e:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <puts>
	
	startTasks();
    3c52:	bf df       	rcall	.-130    	; 0x3bd2 <startTasks>
    3c54:	ff cf       	rjmp	.-2      	; 0x3c54 <main+0xe>

00003c56 <__fixsfsi>:
    3c56:	04 d0       	rcall	.+8      	; 0x3c60 <__fixunssfsi>
    3c58:	68 94       	set
    3c5a:	b1 11       	cpse	r27, r1
    3c5c:	50 c0       	rjmp	.+160    	; 0x3cfe <__fp_szero>
    3c5e:	08 95       	ret

00003c60 <__fixunssfsi>:
    3c60:	33 d0       	rcall	.+102    	; 0x3cc8 <__fp_splitA>
    3c62:	88 f0       	brcs	.+34     	; 0x3c86 <__fixunssfsi+0x26>
    3c64:	9f 57       	subi	r25, 0x7F	; 127
    3c66:	90 f0       	brcs	.+36     	; 0x3c8c <__fixunssfsi+0x2c>
    3c68:	b9 2f       	mov	r27, r25
    3c6a:	99 27       	eor	r25, r25
    3c6c:	b7 51       	subi	r27, 0x17	; 23
    3c6e:	a0 f0       	brcs	.+40     	; 0x3c98 <__fixunssfsi+0x38>
    3c70:	d1 f0       	breq	.+52     	; 0x3ca6 <__fixunssfsi+0x46>
    3c72:	66 0f       	add	r22, r22
    3c74:	77 1f       	adc	r23, r23
    3c76:	88 1f       	adc	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	1a f0       	brmi	.+6      	; 0x3c82 <__fixunssfsi+0x22>
    3c7c:	ba 95       	dec	r27
    3c7e:	c9 f7       	brne	.-14     	; 0x3c72 <__fixunssfsi+0x12>
    3c80:	12 c0       	rjmp	.+36     	; 0x3ca6 <__fixunssfsi+0x46>
    3c82:	b1 30       	cpi	r27, 0x01	; 1
    3c84:	81 f0       	breq	.+32     	; 0x3ca6 <__fixunssfsi+0x46>
    3c86:	3a d0       	rcall	.+116    	; 0x3cfc <__fp_zero>
    3c88:	b1 e0       	ldi	r27, 0x01	; 1
    3c8a:	08 95       	ret
    3c8c:	37 c0       	rjmp	.+110    	; 0x3cfc <__fp_zero>
    3c8e:	67 2f       	mov	r22, r23
    3c90:	78 2f       	mov	r23, r24
    3c92:	88 27       	eor	r24, r24
    3c94:	b8 5f       	subi	r27, 0xF8	; 248
    3c96:	39 f0       	breq	.+14     	; 0x3ca6 <__fixunssfsi+0x46>
    3c98:	b9 3f       	cpi	r27, 0xF9	; 249
    3c9a:	cc f3       	brlt	.-14     	; 0x3c8e <__fixunssfsi+0x2e>
    3c9c:	86 95       	lsr	r24
    3c9e:	77 95       	ror	r23
    3ca0:	67 95       	ror	r22
    3ca2:	b3 95       	inc	r27
    3ca4:	d9 f7       	brne	.-10     	; 0x3c9c <__fixunssfsi+0x3c>
    3ca6:	3e f4       	brtc	.+14     	; 0x3cb6 <__fixunssfsi+0x56>
    3ca8:	90 95       	com	r25
    3caa:	80 95       	com	r24
    3cac:	70 95       	com	r23
    3cae:	61 95       	neg	r22
    3cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    3cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb6:	08 95       	ret

00003cb8 <__fp_split3>:
    3cb8:	57 fd       	sbrc	r21, 7
    3cba:	90 58       	subi	r25, 0x80	; 128
    3cbc:	44 0f       	add	r20, r20
    3cbe:	55 1f       	adc	r21, r21
    3cc0:	59 f0       	breq	.+22     	; 0x3cd8 <__fp_splitA+0x10>
    3cc2:	5f 3f       	cpi	r21, 0xFF	; 255
    3cc4:	71 f0       	breq	.+28     	; 0x3ce2 <__fp_splitA+0x1a>
    3cc6:	47 95       	ror	r20

00003cc8 <__fp_splitA>:
    3cc8:	88 0f       	add	r24, r24
    3cca:	97 fb       	bst	r25, 7
    3ccc:	99 1f       	adc	r25, r25
    3cce:	61 f0       	breq	.+24     	; 0x3ce8 <__fp_splitA+0x20>
    3cd0:	9f 3f       	cpi	r25, 0xFF	; 255
    3cd2:	79 f0       	breq	.+30     	; 0x3cf2 <__fp_splitA+0x2a>
    3cd4:	87 95       	ror	r24
    3cd6:	08 95       	ret
    3cd8:	12 16       	cp	r1, r18
    3cda:	13 06       	cpc	r1, r19
    3cdc:	14 06       	cpc	r1, r20
    3cde:	55 1f       	adc	r21, r21
    3ce0:	f2 cf       	rjmp	.-28     	; 0x3cc6 <__fp_split3+0xe>
    3ce2:	46 95       	lsr	r20
    3ce4:	f1 df       	rcall	.-30     	; 0x3cc8 <__fp_splitA>
    3ce6:	08 c0       	rjmp	.+16     	; 0x3cf8 <__fp_splitA+0x30>
    3ce8:	16 16       	cp	r1, r22
    3cea:	17 06       	cpc	r1, r23
    3cec:	18 06       	cpc	r1, r24
    3cee:	99 1f       	adc	r25, r25
    3cf0:	f1 cf       	rjmp	.-30     	; 0x3cd4 <__fp_splitA+0xc>
    3cf2:	86 95       	lsr	r24
    3cf4:	71 05       	cpc	r23, r1
    3cf6:	61 05       	cpc	r22, r1
    3cf8:	08 94       	sec
    3cfa:	08 95       	ret

00003cfc <__fp_zero>:
    3cfc:	e8 94       	clt

00003cfe <__fp_szero>:
    3cfe:	bb 27       	eor	r27, r27
    3d00:	66 27       	eor	r22, r22
    3d02:	77 27       	eor	r23, r23
    3d04:	cb 01       	movw	r24, r22
    3d06:	97 f9       	bld	r25, 7
    3d08:	08 95       	ret

00003d0a <_hihTwiCallback>:
    3d0a:	65 30       	cpi	r22, 0x05	; 5
    3d0c:	f1 f4       	brne	.+60     	; 0x3d4a <_hihTwiCallback+0x40>
    3d0e:	fa 01       	movw	r30, r20
    3d10:	80 81       	ld	r24, Z
    3d12:	8f 73       	andi	r24, 0x3F	; 63
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	98 2f       	mov	r25, r24
    3d18:	88 27       	eor	r24, r24
    3d1a:	21 81       	ldd	r18, Z+1	; 0x01
    3d1c:	82 2b       	or	r24, r18
    3d1e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3d22:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d26:	82 81       	ldd	r24, Z+2	; 0x02
    3d28:	f0 e4       	ldi	r31, 0x40	; 64
    3d2a:	8f 9f       	mul	r24, r31
    3d2c:	c0 01       	movw	r24, r0
    3d2e:	11 24       	eor	r1, r1
    3d30:	fa 01       	movw	r30, r20
    3d32:	23 81       	ldd	r18, Z+3	; 0x03
    3d34:	26 95       	lsr	r18
    3d36:	26 95       	lsr	r18
    3d38:	82 2b       	or	r24, r18
    3d3a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d3e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	80 93 8d 17 	sts	0x178D, r24	; 0x80178d <_measuringIsReady>
    3d48:	08 95       	ret
    3d4a:	64 30       	cpi	r22, 0x04	; 4
    3d4c:	51 f0       	breq	.+20     	; 0x3d62 <_hihTwiCallback+0x58>
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	90 e4       	ldi	r25, 0x40	; 64
    3d52:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d56:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d5a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3d5e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d62:	08 95       	ret

00003d64 <hih8120_initialise>:
    3d64:	0f 93       	push	r16
    3d66:	1f 93       	push	r17
    3d68:	05 e8       	ldi	r16, 0x85	; 133
    3d6a:	1e e1       	ldi	r17, 0x1E	; 30
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	34 e2       	ldi	r19, 0x24	; 36
    3d70:	44 ef       	ldi	r20, 0xF4	; 244
    3d72:	50 e0       	ldi	r21, 0x00	; 0
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	87 e2       	ldi	r24, 0x27	; 39
    3d78:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <twiCreate>
    3d7c:	90 93 8f 17 	sts	0x178F, r25	; 0x80178f <_hih8120Handler+0x1>
    3d80:	80 93 8e 17 	sts	0x178E, r24	; 0x80178e <_hih8120Handler>
    3d84:	21 e0       	ldi	r18, 0x01	; 1
    3d86:	89 2b       	or	r24, r25
    3d88:	09 f0       	breq	.+2      	; 0x3d8c <hih8120_initialise+0x28>
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	82 2f       	mov	r24, r18
    3d8e:	1f 91       	pop	r17
    3d90:	0f 91       	pop	r16
    3d92:	08 95       	ret

00003d94 <hih8120_wakeup>:
    3d94:	80 91 8e 17 	lds	r24, 0x178E	; 0x80178e <_hih8120Handler>
    3d98:	90 91 8f 17 	lds	r25, 0x178F	; 0x80178f <_hih8120Handler+0x1>
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	59 f0       	breq	.+22     	; 0x3db6 <hih8120_wakeup+0x22>
    3da0:	40 e0       	ldi	r20, 0x00	; 0
    3da2:	60 e0       	ldi	r22, 0x00	; 0
    3da4:	70 e0       	ldi	r23, 0x00	; 0
    3da6:	0e 94 31 2a 	call	0x5462	; 0x5462 <twiTransmit>
    3daa:	84 30       	cpi	r24, 0x04	; 4
    3dac:	31 f4       	brne	.+12     	; 0x3dba <hih8120_wakeup+0x26>
    3dae:	10 92 8d 17 	sts	0x178D, r1	; 0x80178d <_measuringIsReady>
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	08 95       	ret
    3db6:	82 e0       	ldi	r24, 0x02	; 2
    3db8:	08 95       	ret
    3dba:	83 e0       	ldi	r24, 0x03	; 3
    3dbc:	08 95       	ret

00003dbe <hih8120_measure>:
    3dbe:	80 91 8e 17 	lds	r24, 0x178E	; 0x80178e <_hih8120Handler>
    3dc2:	90 91 8f 17 	lds	r25, 0x178F	; 0x80178f <_hih8120Handler+0x1>
    3dc6:	00 97       	sbiw	r24, 0x00	; 0
    3dc8:	39 f0       	breq	.+14     	; 0x3dd8 <hih8120_measure+0x1a>
    3dca:	64 e0       	ldi	r22, 0x04	; 4
    3dcc:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <twiReceive>
    3dd0:	85 30       	cpi	r24, 0x05	; 5
    3dd2:	21 f0       	breq	.+8      	; 0x3ddc <hih8120_measure+0x1e>
    3dd4:	83 e0       	ldi	r24, 0x03	; 3
    3dd6:	08 95       	ret
    3dd8:	82 e0       	ldi	r24, 0x02	; 2
    3dda:	08 95       	ret
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
    3dde:	08 95       	ret

00003de0 <hih8120_getHumidity>:
    3de0:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3de4:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__floatunsisf>
    3df0:	20 e0       	ldi	r18, 0x00	; 0
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	48 ec       	ldi	r20, 0xC8	; 200
    3df6:	52 e4       	ldi	r21, 0x42	; 66
    3df8:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__mulsf3>
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	38 ef       	ldi	r19, 0xF8	; 248
    3e00:	4f e7       	ldi	r20, 0x7F	; 127
    3e02:	56 e4       	ldi	r21, 0x46	; 70
    3e04:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__divsf3>
    3e08:	08 95       	ret

00003e0a <hih8120_getTemperature>:
    3e0a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3e0e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <__floatunsisf>
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	45 e2       	ldi	r20, 0x25	; 37
    3e20:	53 e4       	ldi	r21, 0x43	; 67
    3e22:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__mulsf3>
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	38 ef       	ldi	r19, 0xF8	; 248
    3e2a:	4f e7       	ldi	r20, 0x7F	; 127
    3e2c:	56 e4       	ldi	r21, 0x46	; 70
    3e2e:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__divsf3>
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	40 e2       	ldi	r20, 0x20	; 32
    3e38:	52 e4       	ldi	r21, 0x42	; 66
    3e3a:	0c 94 89 2b 	jmp	0x5712	; 0x5712 <__subsf3>
    3e3e:	08 95       	ret

00003e40 <_serialCallBack>:
    3e40:	0f 93       	push	r16
    3e42:	1f 93       	push	r17
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	1f 92       	push	r1
    3e4a:	1f 92       	push	r1
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	8c 01       	movw	r16, r24
    3e52:	19 82       	std	Y+1, r1	; 0x01
    3e54:	2d c0       	rjmp	.+90     	; 0x3eb0 <_serialCallBack+0x70>
    3e56:	e0 91 f4 17 	lds	r30, 0x17F4	; 0x8017f4 <rec_buf_inp.2878>
    3e5a:	ec 32       	cpi	r30, 0x2C	; 44
    3e5c:	50 f4       	brcc	.+20     	; 0x3e72 <_serialCallBack+0x32>
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	8e 0f       	add	r24, r30
    3e62:	80 93 f4 17 	sts	0x17F4, r24	; 0x8017f4 <rec_buf_inp.2878>
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	ea 5d       	subi	r30, 0xDA	; 218
    3e6a:	f7 4e       	sbci	r31, 0xE7	; 231
    3e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6e:	80 83       	st	Z, r24
    3e70:	02 c0       	rjmp	.+4      	; 0x3e76 <_serialCallBack+0x36>
    3e72:	10 92 f4 17 	sts	0x17F4, r1	; 0x8017f4 <rec_buf_inp.2878>
    3e76:	8a 81       	ldd	r24, Y+2	; 0x02
    3e78:	8a 30       	cpi	r24, 0x0A	; 10
    3e7a:	d1 f4       	brne	.+52     	; 0x3eb0 <_serialCallBack+0x70>
    3e7c:	40 91 f4 17 	lds	r20, 0x17F4	; 0x8017f4 <rec_buf_inp.2878>
    3e80:	50 e0       	ldi	r21, 0x00	; 0
    3e82:	fa 01       	movw	r30, r20
    3e84:	ec 5d       	subi	r30, 0xDC	; 220
    3e86:	f7 4e       	sbci	r31, 0xE7	; 231
    3e88:	10 82       	st	Z, r1
    3e8a:	41 50       	subi	r20, 0x01	; 1
    3e8c:	51 09       	sbc	r21, r1
    3e8e:	9e 01       	movw	r18, r28
    3e90:	2f 5f       	subi	r18, 0xFF	; 255
    3e92:	3f 4f       	sbci	r19, 0xFF	; 255
    3e94:	66 e2       	ldi	r22, 0x26	; 38
    3e96:	78 e1       	ldi	r23, 0x18	; 24
    3e98:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <_serialReplyBufferHandle>
    3e9c:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <_serialReplyBufferHandle+0x1>
    3ea0:	0e 94 8a 0a 	call	0x1514	; 0x1514 <xStreamBufferSendFromISR>
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	81 11       	cpse	r24, r1
    3ea8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vPortYield>
    3eac:	10 92 f4 17 	sts	0x17F4, r1	; 0x8017f4 <rec_buf_inp.2878>
    3eb0:	be 01       	movw	r22, r28
    3eb2:	6e 5f       	subi	r22, 0xFE	; 254
    3eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb6:	c8 01       	movw	r24, r16
    3eb8:	ff d5       	rcall	.+3070   	; 0x4ab8 <serial_getByte>
    3eba:	88 23       	and	r24, r24
    3ebc:	61 f2       	breq	.-104    	; 0x3e56 <_serialCallBack+0x16>
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	08 95       	ret

00003ecc <_uploadMessage>:
    3ecc:	0f 93       	push	r16
    3ece:	1f 93       	push	r17
    3ed0:	cf 93       	push	r28
    3ed2:	df 93       	push	r29
    3ed4:	8c 01       	movw	r16, r24
    3ed6:	eb 01       	movw	r28, r22
    3ed8:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <_serialReplyBufferHandle>
    3edc:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <_serialReplyBufferHandle+0x1>
    3ee0:	0e 94 97 09 	call	0x132e	; 0x132e <xStreamBufferReset>
    3ee4:	b8 01       	movw	r22, r16
    3ee6:	80 e9       	ldi	r24, 0x90	; 144
    3ee8:	97 e1       	ldi	r25, 0x17	; 23
    3eea:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <strcpy>
    3eee:	20 97       	sbiw	r28, 0x00	; 0
    3ef0:	79 f0       	breq	.+30     	; 0x3f10 <_uploadMessage+0x44>
    3ef2:	e0 e9       	ldi	r30, 0x90	; 144
    3ef4:	f7 e1       	ldi	r31, 0x17	; 23
    3ef6:	01 90       	ld	r0, Z+
    3ef8:	00 20       	and	r0, r0
    3efa:	e9 f7       	brne	.-6      	; 0x3ef6 <_uploadMessage+0x2a>
    3efc:	31 97       	sbiw	r30, 0x01	; 1
    3efe:	80 e2       	ldi	r24, 0x20	; 32
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	80 83       	st	Z, r24
    3f06:	be 01       	movw	r22, r28
    3f08:	80 e9       	ldi	r24, 0x90	; 144
    3f0a:	97 e1       	ldi	r25, 0x17	; 23
    3f0c:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <strcat>
    3f10:	e0 e9       	ldi	r30, 0x90	; 144
    3f12:	f7 e1       	ldi	r31, 0x17	; 23
    3f14:	df 01       	movw	r26, r30
    3f16:	0d 90       	ld	r0, X+
    3f18:	00 20       	and	r0, r0
    3f1a:	e9 f7       	brne	.-6      	; 0x3f16 <_uploadMessage+0x4a>
    3f1c:	11 97       	sbiw	r26, 0x01	; 1
    3f1e:	8d e0       	ldi	r24, 0x0D	; 13
    3f20:	9a e0       	ldi	r25, 0x0A	; 10
    3f22:	11 96       	adiw	r26, 0x01	; 1
    3f24:	9c 93       	st	X, r25
    3f26:	8e 93       	st	-X, r24
    3f28:	12 96       	adiw	r26, 0x02	; 2
    3f2a:	1c 92       	st	X, r1
    3f2c:	01 90       	ld	r0, Z+
    3f2e:	00 20       	and	r0, r0
    3f30:	e9 f7       	brne	.-6      	; 0x3f2c <_uploadMessage+0x60>
    3f32:	31 97       	sbiw	r30, 0x01	; 1
    3f34:	e0 59       	subi	r30, 0x90	; 144
    3f36:	f7 41       	sbci	r31, 0x17	; 23
    3f38:	ae 2f       	mov	r26, r30
    3f3a:	80 e9       	ldi	r24, 0x90	; 144
    3f3c:	97 e1       	ldi	r25, 0x17	; 23
    3f3e:	ac 01       	movw	r20, r24
    3f40:	6a 2f       	mov	r22, r26
    3f42:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <_rn2483_serial>
    3f46:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <_rn2483_serial+0x1>
    3f4a:	61 d5       	rcall	.+2754   	; 0x4a0e <serial_sendBytes>
    3f4c:	81 11       	cpse	r24, r1
    3f4e:	11 c0       	rjmp	.+34     	; 0x3f72 <_uploadMessage+0xa6>
    3f50:	08 e2       	ldi	r16, 0x28	; 40
    3f52:	15 e0       	ldi	r17, 0x05	; 5
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	4d e2       	ldi	r20, 0x2D	; 45
    3f5a:	50 e0       	ldi	r21, 0x00	; 0
    3f5c:	60 e8       	ldi	r22, 0x80	; 128
    3f5e:	78 e1       	ldi	r23, 0x18	; 24
    3f60:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <_serialReplyBufferHandle>
    3f64:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <_serialReplyBufferHandle+0x1>
    3f68:	0e 94 ce 0a 	call	0x159c	; 0x159c <xStreamBufferReceive>
    3f6c:	80 e8       	ldi	r24, 0x80	; 128
    3f6e:	98 e1       	ldi	r25, 0x18	; 24
    3f70:	02 c0       	rjmp	.+4      	; 0x3f76 <_uploadMessage+0xaa>
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	df 91       	pop	r29
    3f78:	cf 91       	pop	r28
    3f7a:	1f 91       	pop	r17
    3f7c:	0f 91       	pop	r16
    3f7e:	08 95       	ret

00003f80 <_reply2ReturnCode>:
    3f80:	2f 92       	push	r2
    3f82:	3f 92       	push	r3
    3f84:	4f 92       	push	r4
    3f86:	5f 92       	push	r5
    3f88:	6f 92       	push	r6
    3f8a:	7f 92       	push	r7
    3f8c:	8f 92       	push	r8
    3f8e:	9f 92       	push	r9
    3f90:	af 92       	push	r10
    3f92:	bf 92       	push	r11
    3f94:	cf 92       	push	r12
    3f96:	df 92       	push	r13
    3f98:	ef 92       	push	r14
    3f9a:	ff 92       	push	r15
    3f9c:	0f 93       	push	r16
    3f9e:	1f 93       	push	r17
    3fa0:	cf 93       	push	r28
    3fa2:	df 93       	push	r29
    3fa4:	5c 01       	movw	r10, r24
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	01 90       	ld	r0, Z+
    3faa:	00 20       	and	r0, r0
    3fac:	e9 f7       	brne	.-6      	; 0x3fa8 <_reply2ReturnCode+0x28>
    3fae:	31 97       	sbiw	r30, 0x01	; 1
    3fb0:	6f 01       	movw	r12, r30
    3fb2:	c8 1a       	sub	r12, r24
    3fb4:	d9 0a       	sbc	r13, r25
    3fb6:	5c 2c       	mov	r5, r12
    3fb8:	0f 2e       	mov	r0, r31
    3fba:	fc e9       	ldi	r31, 0x9C	; 156
    3fbc:	8f 2e       	mov	r8, r31
    3fbe:	f8 e0       	ldi	r31, 0x08	; 8
    3fc0:	9f 2e       	mov	r9, r31
    3fc2:	f0 2d       	mov	r31, r0
    3fc4:	e1 2c       	mov	r14, r1
    3fc6:	f1 2c       	mov	r15, r1
    3fc8:	4c 2c       	mov	r4, r12
    3fca:	37 01       	movw	r6, r14
    3fcc:	f4 01       	movw	r30, r8
    3fce:	01 81       	ldd	r16, Z+1	; 0x01
    3fd0:	12 81       	ldd	r17, Z+2	; 0x02
    3fd2:	e8 01       	movw	r28, r16
    3fd4:	09 90       	ld	r0, Y+
    3fd6:	00 20       	and	r0, r0
    3fd8:	e9 f7       	brne	.-6      	; 0x3fd4 <_reply2ReturnCode+0x54>
    3fda:	21 97       	sbiw	r28, 0x01	; 1
    3fdc:	c0 1b       	sub	r28, r16
    3fde:	d1 0b       	sbc	r29, r17
    3fe0:	3c 2e       	mov	r3, r28
    3fe2:	f9 e0       	ldi	r31, 0x09	; 9
    3fe4:	cf 16       	cp	r12, r31
    3fe6:	d1 04       	cpc	r13, r1
    3fe8:	58 f0       	brcs	.+22     	; 0x4000 <_reply2ReturnCode+0x80>
    3fea:	f4 01       	movw	r30, r8
    3fec:	20 80       	ld	r2, Z
    3fee:	fe e0       	ldi	r31, 0x0E	; 14
    3ff0:	2f 12       	cpse	r2, r31
    3ff2:	06 c0       	rjmp	.+12     	; 0x4000 <_reply2ReturnCode+0x80>
    3ff4:	b8 01       	movw	r22, r16
    3ff6:	c5 01       	movw	r24, r10
    3ff8:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <strcasestr>
    3ffc:	89 2b       	or	r24, r25
    3ffe:	09 f5       	brne	.+66     	; 0x4042 <_reply2ReturnCode+0xc2>
    4000:	44 2d       	mov	r20, r4
    4002:	35 14       	cp	r3, r5
    4004:	08 f4       	brcc	.+2      	; 0x4008 <_reply2ReturnCode+0x88>
    4006:	4c 2f       	mov	r20, r28
    4008:	50 e0       	ldi	r21, 0x00	; 0
    400a:	b8 01       	movw	r22, r16
    400c:	c5 01       	movw	r24, r10
    400e:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <strncasecmp>
    4012:	89 2b       	or	r24, r25
    4014:	49 f4       	brne	.+18     	; 0x4028 <_reply2ReturnCode+0xa8>
    4016:	f3 01       	movw	r30, r6
    4018:	ee 0f       	add	r30, r30
    401a:	ff 1f       	adc	r31, r31
    401c:	e6 0d       	add	r30, r6
    401e:	f7 1d       	adc	r31, r7
    4020:	e4 56       	subi	r30, 0x64	; 100
    4022:	f7 4f       	sbci	r31, 0xF7	; 247
    4024:	20 80       	ld	r2, Z
    4026:	0d c0       	rjmp	.+26     	; 0x4042 <_reply2ReturnCode+0xc2>
    4028:	8f ef       	ldi	r24, 0xFF	; 255
    402a:	e8 1a       	sub	r14, r24
    402c:	f8 0a       	sbc	r15, r24
    402e:	e3 e0       	ldi	r30, 0x03	; 3
    4030:	8e 0e       	add	r8, r30
    4032:	91 1c       	adc	r9, r1
    4034:	f1 e1       	ldi	r31, 0x11	; 17
    4036:	ef 16       	cp	r14, r31
    4038:	f1 04       	cpc	r15, r1
    403a:	39 f6       	brne	.-114    	; 0x3fca <_reply2ReturnCode+0x4a>
    403c:	68 94       	set
    403e:	22 24       	eor	r2, r2
    4040:	24 f8       	bld	r2, 4
    4042:	82 2d       	mov	r24, r2
    4044:	df 91       	pop	r29
    4046:	cf 91       	pop	r28
    4048:	1f 91       	pop	r17
    404a:	0f 91       	pop	r16
    404c:	ff 90       	pop	r15
    404e:	ef 90       	pop	r14
    4050:	df 90       	pop	r13
    4052:	cf 90       	pop	r12
    4054:	bf 90       	pop	r11
    4056:	af 90       	pop	r10
    4058:	9f 90       	pop	r9
    405a:	8f 90       	pop	r8
    405c:	7f 90       	pop	r7
    405e:	6f 90       	pop	r6
    4060:	5f 90       	pop	r5
    4062:	4f 90       	pop	r4
    4064:	3f 90       	pop	r3
    4066:	2f 90       	pop	r2
    4068:	08 95       	ret

0000406a <_uploadMessageRc>:
    406a:	30 df       	rcall	.-416    	; 0x3ecc <_uploadMessage>
    406c:	89 cf       	rjmp	.-238    	; 0x3f80 <_reply2ReturnCode>
    406e:	08 95       	ret

00004070 <lora_driver_flushBuffers>:
    4070:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <_serialReplyBufferHandle>
    4074:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <_serialReplyBufferHandle+0x1>
    4078:	0c 94 97 09 	jmp	0x132e	; 0x132e <xStreamBufferReset>
    407c:	08 95       	ret

0000407e <lora_driver_initialise>:
    407e:	8f 92       	push	r8
    4080:	9f 92       	push	r9
    4082:	af 92       	push	r10
    4084:	cf 92       	push	r12
    4086:	ef 92       	push	r14
    4088:	0f 93       	push	r16
    408a:	1f 93       	push	r17
    408c:	cf 93       	push	r28
    408e:	c8 2f       	mov	r28, r24
    4090:	8b 01       	movw	r16, r22
    4092:	41 e0       	ldi	r20, 0x01	; 1
    4094:	60 e0       	ldi	r22, 0x00	; 0
    4096:	70 e0       	ldi	r23, 0x00	; 0
    4098:	88 ec       	ldi	r24, 0xC8	; 200
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	0e 94 65 09 	call	0x12ca	; 0x12ca <xStreamBufferGenericCreate>
    40a0:	90 93 f8 17 	sts	0x17F8, r25	; 0x8017f8 <_serialReplyBufferHandle+0x1>
    40a4:	80 93 f7 17 	sts	0x17F7, r24	; 0x8017f7 <_serialReplyBufferHandle>
    40a8:	10 93 f6 17 	sts	0x17F6, r17	; 0x8017f6 <_downlinkMessageBuffer+0x1>
    40ac:	00 93 f5 17 	sts	0x17F5, r16	; 0x8017f5 <_downlinkMessageBuffer>
    40b0:	0f 2e       	mov	r0, r31
    40b2:	f0 e2       	ldi	r31, 0x20	; 32
    40b4:	8f 2e       	mov	r8, r31
    40b6:	ff e1       	ldi	r31, 0x1F	; 31
    40b8:	9f 2e       	mov	r9, r31
    40ba:	f0 2d       	mov	r31, r0
    40bc:	68 94       	set
    40be:	aa 24       	eor	r10, r10
    40c0:	a6 f8       	bld	r10, 6
    40c2:	68 94       	set
    40c4:	cc 24       	eor	r12, r12
    40c6:	c6 f8       	bld	r12, 6
    40c8:	e1 2c       	mov	r14, r1
    40ca:	00 e0       	ldi	r16, 0x00	; 0
    40cc:	23 e0       	ldi	r18, 0x03	; 3
    40ce:	40 e0       	ldi	r20, 0x00	; 0
    40d0:	51 ee       	ldi	r21, 0xE1	; 225
    40d2:	60 e0       	ldi	r22, 0x00	; 0
    40d4:	70 e0       	ldi	r23, 0x00	; 0
    40d6:	8c 2f       	mov	r24, r28
    40d8:	cd d3       	rcall	.+1946   	; 0x4874 <serial_create>
    40da:	90 93 fa 17 	sts	0x17FA, r25	; 0x8017fa <_rn2483_serial+0x1>
    40de:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <_rn2483_serial>
    40e2:	e7 e0       	ldi	r30, 0x07	; 7
    40e4:	f1 e0       	ldi	r31, 0x01	; 1
    40e6:	80 81       	ld	r24, Z
    40e8:	80 61       	ori	r24, 0x10	; 16
    40ea:	80 83       	st	Z, r24
    40ec:	cf 91       	pop	r28
    40ee:	1f 91       	pop	r17
    40f0:	0f 91       	pop	r16
    40f2:	ef 90       	pop	r14
    40f4:	cf 90       	pop	r12
    40f6:	af 90       	pop	r10
    40f8:	9f 90       	pop	r9
    40fa:	8f 90       	pop	r8
    40fc:	08 95       	ret

000040fe <lora_driver_resetRn2483>:
    40fe:	88 23       	and	r24, r24
    4100:	31 f0       	breq	.+12     	; 0x410e <lora_driver_resetRn2483+0x10>
    4102:	e8 e0       	ldi	r30, 0x08	; 8
    4104:	f1 e0       	ldi	r31, 0x01	; 1
    4106:	80 81       	ld	r24, Z
    4108:	8f 7e       	andi	r24, 0xEF	; 239
    410a:	80 83       	st	Z, r24
    410c:	08 95       	ret
    410e:	e8 e0       	ldi	r30, 0x08	; 8
    4110:	f1 e0       	ldi	r31, 0x01	; 1
    4112:	80 81       	ld	r24, Z
    4114:	80 61       	ori	r24, 0x10	; 16
    4116:	80 83       	st	Z, r24
    4118:	08 95       	ret

0000411a <lora_driver_rn2483FactoryReset>:
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	82 e2       	ldi	r24, 0x22	; 34
    4120:	96 e0       	ldi	r25, 0x06	; 6
    4122:	d4 de       	rcall	.-600    	; 0x3ecc <_uploadMessage>
    4124:	e0 e8       	ldi	r30, 0x80	; 128
    4126:	f8 e1       	ldi	r31, 0x18	; 24
    4128:	01 90       	ld	r0, Z+
    412a:	00 20       	and	r0, r0
    412c:	e9 f7       	brne	.-6      	; 0x4128 <lora_driver_rn2483FactoryReset+0xe>
    412e:	31 97       	sbiw	r30, 0x01	; 1
    4130:	e0 58       	subi	r30, 0x80	; 128
    4132:	f8 41       	sbci	r31, 0x18	; 24
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	75 97       	sbiw	r30, 0x15	; 21
    4138:	08 f0       	brcs	.+2      	; 0x413c <lora_driver_rn2483FactoryReset+0x22>
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	08 95       	ret

0000413e <lora_driver_getRn2483Hweui>:
    413e:	cf 93       	push	r28
    4140:	df 93       	push	r29
    4142:	ec 01       	movw	r28, r24
    4144:	60 e0       	ldi	r22, 0x00	; 0
    4146:	70 e0       	ldi	r23, 0x00	; 0
    4148:	83 e3       	ldi	r24, 0x33	; 51
    414a:	96 e0       	ldi	r25, 0x06	; 6
    414c:	bf de       	rcall	.-642    	; 0x3ecc <_uploadMessage>
    414e:	e0 e8       	ldi	r30, 0x80	; 128
    4150:	f8 e1       	ldi	r31, 0x18	; 24
    4152:	01 90       	ld	r0, Z+
    4154:	00 20       	and	r0, r0
    4156:	e9 f7       	brne	.-6      	; 0x4152 <lora_driver_getRn2483Hweui+0x14>
    4158:	e1 59       	subi	r30, 0x91	; 145
    415a:	f8 41       	sbci	r31, 0x18	; 24
    415c:	39 f4       	brne	.+14     	; 0x416c <lora_driver_getRn2483Hweui+0x2e>
    415e:	60 e8       	ldi	r22, 0x80	; 128
    4160:	78 e1       	ldi	r23, 0x18	; 24
    4162:	ce 01       	movw	r24, r28
    4164:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <strcpy>
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	02 c0       	rjmp	.+4      	; 0x4170 <lora_driver_getRn2483Hweui+0x32>
    416c:	18 82       	st	Y, r1
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	df 91       	pop	r29
    4172:	cf 91       	pop	r28
    4174:	08 95       	ret

00004176 <lora_driver_setDeviceIdentifier>:
    4176:	fc 01       	movw	r30, r24
    4178:	01 90       	ld	r0, Z+
    417a:	00 20       	and	r0, r0
    417c:	e9 f7       	brne	.-6      	; 0x4178 <lora_driver_setDeviceIdentifier+0x2>
    417e:	9f 01       	movw	r18, r30
    4180:	21 51       	subi	r18, 0x11	; 17
    4182:	31 09       	sbc	r19, r1
    4184:	28 17       	cp	r18, r24
    4186:	39 07       	cpc	r19, r25
    4188:	29 f4       	brne	.+10     	; 0x4194 <lora_driver_setDeviceIdentifier+0x1e>
    418a:	bc 01       	movw	r22, r24
    418c:	81 e6       	ldi	r24, 0x61	; 97
    418e:	96 e0       	ldi	r25, 0x06	; 6
    4190:	6c cf       	rjmp	.-296    	; 0x406a <_uploadMessageRc>
    4192:	08 95       	ret
    4194:	89 e0       	ldi	r24, 0x09	; 9
    4196:	08 95       	ret

00004198 <lora_driver_setApplicationIdentifier>:
    4198:	fc 01       	movw	r30, r24
    419a:	01 90       	ld	r0, Z+
    419c:	00 20       	and	r0, r0
    419e:	e9 f7       	brne	.-6      	; 0x419a <lora_driver_setApplicationIdentifier+0x2>
    41a0:	9f 01       	movw	r18, r30
    41a2:	21 51       	subi	r18, 0x11	; 17
    41a4:	31 09       	sbc	r19, r1
    41a6:	28 17       	cp	r18, r24
    41a8:	39 07       	cpc	r19, r25
    41aa:	29 f4       	brne	.+10     	; 0x41b6 <lora_driver_setApplicationIdentifier+0x1e>
    41ac:	bc 01       	movw	r22, r24
    41ae:	80 e7       	ldi	r24, 0x70	; 112
    41b0:	96 e0       	ldi	r25, 0x06	; 6
    41b2:	5b cf       	rjmp	.-330    	; 0x406a <_uploadMessageRc>
    41b4:	08 95       	ret
    41b6:	89 e0       	ldi	r24, 0x09	; 9
    41b8:	08 95       	ret

000041ba <lora_driver_setApplicationKey>:
    41ba:	fc 01       	movw	r30, r24
    41bc:	01 90       	ld	r0, Z+
    41be:	00 20       	and	r0, r0
    41c0:	e9 f7       	brne	.-6      	; 0x41bc <lora_driver_setApplicationKey+0x2>
    41c2:	9f 01       	movw	r18, r30
    41c4:	21 52       	subi	r18, 0x21	; 33
    41c6:	31 09       	sbc	r19, r1
    41c8:	28 17       	cp	r18, r24
    41ca:	39 07       	cpc	r19, r25
    41cc:	29 f4       	brne	.+10     	; 0x41d8 <lora_driver_setApplicationKey+0x1e>
    41ce:	bc 01       	movw	r22, r24
    41d0:	8f e7       	ldi	r24, 0x7F	; 127
    41d2:	96 e0       	ldi	r25, 0x06	; 6
    41d4:	4a cf       	rjmp	.-364    	; 0x406a <_uploadMessageRc>
    41d6:	08 95       	ret
    41d8:	89 e0       	ldi	r24, 0x09	; 9
    41da:	08 95       	ret

000041dc <lora_driver_saveMac>:
    41dc:	60 e0       	ldi	r22, 0x00	; 0
    41de:	70 e0       	ldi	r23, 0x00	; 0
    41e0:	8e eb       	ldi	r24, 0xBE	; 190
    41e2:	96 e0       	ldi	r25, 0x06	; 6
    41e4:	42 cf       	rjmp	.-380    	; 0x406a <_uploadMessageRc>
    41e6:	08 95       	ret

000041e8 <lora_driver_join>:
    41e8:	0f 93       	push	r16
    41ea:	1f 93       	push	r17
    41ec:	e8 2f       	mov	r30, r24
    41ee:	f0 e0       	ldi	r31, 0x00	; 0
    41f0:	ee 0f       	add	r30, r30
    41f2:	ff 1f       	adc	r31, r31
    41f4:	e8 56       	subi	r30, 0x68	; 104
    41f6:	f7 4f       	sbci	r31, 0xF7	; 247
    41f8:	60 81       	ld	r22, Z
    41fa:	71 81       	ldd	r23, Z+1	; 0x01
    41fc:	87 ec       	ldi	r24, 0xC7	; 199
    41fe:	96 e0       	ldi	r25, 0x06	; 6
    4200:	34 df       	rcall	.-408    	; 0x406a <_uploadMessageRc>
    4202:	81 11       	cpse	r24, r1
    4204:	14 c0       	rjmp	.+40     	; 0x422e <lora_driver_join+0x46>
    4206:	08 e2       	ldi	r16, 0x28	; 40
    4208:	15 e0       	ldi	r17, 0x05	; 5
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	4d e2       	ldi	r20, 0x2D	; 45
    4210:	50 e0       	ldi	r21, 0x00	; 0
    4212:	60 e8       	ldi	r22, 0x80	; 128
    4214:	78 e1       	ldi	r23, 0x18	; 24
    4216:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <_serialReplyBufferHandle>
    421a:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <_serialReplyBufferHandle+0x1>
    421e:	0e 94 ce 0a 	call	0x159c	; 0x159c <xStreamBufferReceive>
    4222:	88 23       	and	r24, r24
    4224:	21 f0       	breq	.+8      	; 0x422e <lora_driver_join+0x46>
    4226:	80 e8       	ldi	r24, 0x80	; 128
    4228:	98 e1       	ldi	r25, 0x18	; 24
    422a:	aa de       	rcall	.-684    	; 0x3f80 <_reply2ReturnCode>
    422c:	03 c0       	rjmp	.+6      	; 0x4234 <lora_driver_join+0x4c>
    422e:	80 e8       	ldi	r24, 0x80	; 128
    4230:	98 e1       	ldi	r25, 0x18	; 24
    4232:	a6 de       	rcall	.-692    	; 0x3f80 <_reply2ReturnCode>
    4234:	1f 91       	pop	r17
    4236:	0f 91       	pop	r16
    4238:	08 95       	ret

0000423a <lora_driver_sendUploadMessage>:
    423a:	0f 93       	push	r16
    423c:	1f 93       	push	r17
    423e:	cf 93       	push	r28
    4240:	df 93       	push	r29
    4242:	1f 92       	push	r1
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
    4248:	db 01       	movw	r26, r22
    424a:	11 96       	adiw	r26, 0x01	; 1
    424c:	9c 91       	ld	r25, X
    424e:	11 97       	sbiw	r26, 0x01	; 1
    4250:	95 31       	cpi	r25, 0x15	; 21
    4252:	08 f0       	brcs	.+2      	; 0x4256 <lora_driver_sendUploadMessage+0x1c>
    4254:	b4 c0       	rjmp	.+360    	; 0x43be <lora_driver_sendUploadMessage+0x184>
    4256:	99 23       	and	r25, r25
    4258:	81 f1       	breq	.+96     	; 0x42ba <lora_driver_sendUploadMessage+0x80>
    425a:	60 e0       	ldi	r22, 0x00	; 0
    425c:	70 e0       	ldi	r23, 0x00	; 0
    425e:	27 2f       	mov	r18, r23
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	46 2f       	mov	r20, r22
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	fd 01       	movw	r30, r26
    4268:	e4 0f       	add	r30, r20
    426a:	f5 1f       	adc	r31, r21
    426c:	92 81       	ldd	r25, Z+2	; 0x02
    426e:	92 95       	swap	r25
    4270:	9f 70       	andi	r25, 0x0F	; 15
    4272:	9a 30       	cpi	r25, 0x0A	; 10
    4274:	10 f0       	brcs	.+4      	; 0x427a <lora_driver_sendUploadMessage+0x40>
    4276:	99 5c       	subi	r25, 0xC9	; 201
    4278:	01 c0       	rjmp	.+2      	; 0x427c <lora_driver_sendUploadMessage+0x42>
    427a:	90 5d       	subi	r25, 0xD0	; 208
    427c:	f9 01       	movw	r30, r18
    427e:	ef 5e       	subi	r30, 0xEF	; 239
    4280:	f7 4e       	sbci	r31, 0xE7	; 231
    4282:	90 83       	st	Z, r25
    4284:	2f 5f       	subi	r18, 0xFF	; 255
    4286:	3f 4f       	sbci	r19, 0xFF	; 255
    4288:	fd 01       	movw	r30, r26
    428a:	e4 0f       	add	r30, r20
    428c:	f5 1f       	adc	r31, r21
    428e:	92 81       	ldd	r25, Z+2	; 0x02
    4290:	9f 70       	andi	r25, 0x0F	; 15
    4292:	49 2f       	mov	r20, r25
    4294:	50 e0       	ldi	r21, 0x00	; 0
    4296:	4a 30       	cpi	r20, 0x0A	; 10
    4298:	51 05       	cpc	r21, r1
    429a:	14 f0       	brlt	.+4      	; 0x42a0 <lora_driver_sendUploadMessage+0x66>
    429c:	99 5c       	subi	r25, 0xC9	; 201
    429e:	01 c0       	rjmp	.+2      	; 0x42a2 <lora_driver_sendUploadMessage+0x68>
    42a0:	90 5d       	subi	r25, 0xD0	; 208
    42a2:	f9 01       	movw	r30, r18
    42a4:	ef 5e       	subi	r30, 0xEF	; 239
    42a6:	f7 4e       	sbci	r31, 0xE7	; 231
    42a8:	90 83       	st	Z, r25
    42aa:	7e 5f       	subi	r23, 0xFE	; 254
    42ac:	6f 5f       	subi	r22, 0xFF	; 255
    42ae:	11 96       	adiw	r26, 0x01	; 1
    42b0:	9c 91       	ld	r25, X
    42b2:	11 97       	sbiw	r26, 0x01	; 1
    42b4:	69 17       	cp	r22, r25
    42b6:	98 f2       	brcs	.-90     	; 0x425e <lora_driver_sendUploadMessage+0x24>
    42b8:	01 c0       	rjmp	.+2      	; 0x42bc <lora_driver_sendUploadMessage+0x82>
    42ba:	70 e0       	ldi	r23, 0x00	; 0
    42bc:	e7 2f       	mov	r30, r23
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	ef 5e       	subi	r30, 0xEF	; 239
    42c2:	f7 4e       	sbci	r31, 0xE7	; 231
    42c4:	10 82       	st	Z, r1
    42c6:	4c 91       	ld	r20, X
    42c8:	81 11       	cpse	r24, r1
    42ca:	03 c0       	rjmp	.+6      	; 0x42d2 <lora_driver_sendUploadMessage+0x98>
    42cc:	80 ed       	ldi	r24, 0xD0	; 208
    42ce:	96 e0       	ldi	r25, 0x06	; 6
    42d0:	02 c0       	rjmp	.+4      	; 0x42d6 <lora_driver_sendUploadMessage+0x9c>
    42d2:	82 ed       	ldi	r24, 0xD2	; 210
    42d4:	96 e0       	ldi	r25, 0x06	; 6
    42d6:	21 e1       	ldi	r18, 0x11	; 17
    42d8:	38 e1       	ldi	r19, 0x18	; 24
    42da:	3f 93       	push	r19
    42dc:	2f 93       	push	r18
    42de:	1f 92       	push	r1
    42e0:	4f 93       	push	r20
    42e2:	9f 93       	push	r25
    42e4:	8f 93       	push	r24
    42e6:	86 ed       	ldi	r24, 0xD6	; 214
    42e8:	96 e0       	ldi	r25, 0x06	; 6
    42ea:	9f 93       	push	r25
    42ec:	8f 93       	push	r24
    42ee:	83 e5       	ldi	r24, 0x53	; 83
    42f0:	98 e1       	ldi	r25, 0x18	; 24
    42f2:	9f 93       	push	r25
    42f4:	8f 93       	push	r24
    42f6:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
    42fa:	60 e0       	ldi	r22, 0x00	; 0
    42fc:	70 e0       	ldi	r23, 0x00	; 0
    42fe:	83 e5       	ldi	r24, 0x53	; 83
    4300:	98 e1       	ldi	r25, 0x18	; 24
    4302:	b3 de       	rcall	.-666    	; 0x406a <_uploadMessageRc>
    4304:	0f b6       	in	r0, 0x3f	; 63
    4306:	f8 94       	cli
    4308:	de bf       	out	0x3e, r29	; 62
    430a:	0f be       	out	0x3f, r0	; 63
    430c:	cd bf       	out	0x3d, r28	; 61
    430e:	81 11       	cpse	r24, r1
    4310:	59 c0       	rjmp	.+178    	; 0x43c4 <lora_driver_sendUploadMessage+0x18a>
    4312:	08 e2       	ldi	r16, 0x28	; 40
    4314:	15 e0       	ldi	r17, 0x05	; 5
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	4d e2       	ldi	r20, 0x2D	; 45
    431c:	50 e0       	ldi	r21, 0x00	; 0
    431e:	60 e8       	ldi	r22, 0x80	; 128
    4320:	78 e1       	ldi	r23, 0x18	; 24
    4322:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <_serialReplyBufferHandle>
    4326:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <_serialReplyBufferHandle+0x1>
    432a:	0e 94 ce 0a 	call	0x159c	; 0x159c <xStreamBufferReceive>
    432e:	88 23       	and	r24, r24
    4330:	09 f4       	brne	.+2      	; 0x4334 <lora_driver_sendUploadMessage+0xfa>
    4332:	47 c0       	rjmp	.+142    	; 0x43c2 <lora_driver_sendUploadMessage+0x188>
    4334:	80 e8       	ldi	r24, 0x80	; 128
    4336:	98 e1       	ldi	r25, 0x18	; 24
    4338:	23 de       	rcall	.-954    	; 0x3f80 <_reply2ReturnCode>
    433a:	8e 30       	cpi	r24, 0x0E	; 14
    433c:	09 f0       	breq	.+2      	; 0x4340 <lora_driver_sendUploadMessage+0x106>
    433e:	42 c0       	rjmp	.+132    	; 0x43c4 <lora_driver_sendUploadMessage+0x18a>
    4340:	87 e0       	ldi	r24, 0x07	; 7
    4342:	89 83       	std	Y+1, r24	; 0x01
    4344:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <_downlinkMessageBuffer>
    4348:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <_downlinkMessageBuffer+0x1>
    434c:	89 2b       	or	r24, r25
    434e:	a9 f1       	breq	.+106    	; 0x43ba <lora_driver_sendUploadMessage+0x180>
    4350:	be 01       	movw	r22, r28
    4352:	6f 5f       	subi	r22, 0xFF	; 255
    4354:	7f 4f       	sbci	r23, 0xFF	; 255
    4356:	80 e8       	ldi	r24, 0x80	; 128
    4358:	98 e1       	ldi	r25, 0x18	; 24
    435a:	68 d1       	rcall	.+720    	; 0x462c <decode_port_no>
    435c:	80 93 fb 17 	sts	0x17FB, r24	; 0x8017fb <_downlinkPayload>
    4360:	e9 81       	ldd	r30, Y+1	; 0x01
    4362:	f0 e0       	ldi	r31, 0x00	; 0
    4364:	e0 58       	subi	r30, 0x80	; 128
    4366:	f7 4e       	sbci	r31, 0xE7	; 231
    4368:	df 01       	movw	r26, r30
    436a:	0d 90       	ld	r0, X+
    436c:	00 20       	and	r0, r0
    436e:	e9 f7       	brne	.-6      	; 0x436a <lora_driver_sendUploadMessage+0x130>
    4370:	11 97       	sbiw	r26, 0x01	; 1
    4372:	ae 1b       	sub	r26, r30
    4374:	bf 0b       	sbc	r27, r31
    4376:	aa 23       	and	r26, r26
    4378:	91 f0       	breq	.+36     	; 0x439e <lora_driver_sendUploadMessage+0x164>
    437a:	bb 27       	eor	r27, r27
    437c:	cd 01       	movw	r24, r26
    437e:	01 97       	sbiw	r24, 0x01	; 1
    4380:	9c 01       	movw	r18, r24
    4382:	12 f4       	brpl	.+4      	; 0x4388 <lora_driver_sendUploadMessage+0x14e>
    4384:	2f 5f       	subi	r18, 0xFF	; 255
    4386:	3f 4f       	sbci	r19, 0xFF	; 255
    4388:	35 95       	asr	r19
    438a:	27 95       	ror	r18
    438c:	20 93 fc 17 	sts	0x17FC, r18	; 0x8017fc <_downlinkPayload+0x1>
    4390:	af 01       	movw	r20, r30
    4392:	4f 5f       	subi	r20, 0xFF	; 255
    4394:	5f 4f       	sbci	r21, 0xFF	; 255
    4396:	64 e1       	ldi	r22, 0x14	; 20
    4398:	8d ef       	ldi	r24, 0xFD	; 253
    439a:	97 e1       	ldi	r25, 0x17	; 23
    439c:	73 d1       	rcall	.+742    	; 0x4684 <decode_hexadecimal_string_bytes>
    439e:	01 e0       	ldi	r16, 0x01	; 1
    43a0:	10 e0       	ldi	r17, 0x00	; 0
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	46 e1       	ldi	r20, 0x16	; 22
    43a8:	50 e0       	ldi	r21, 0x00	; 0
    43aa:	6b ef       	ldi	r22, 0xFB	; 251
    43ac:	77 e1       	ldi	r23, 0x17	; 23
    43ae:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <_downlinkMessageBuffer>
    43b2:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <_downlinkMessageBuffer+0x1>
    43b6:	0e 94 c7 09 	call	0x138e	; 0x138e <xStreamBufferSend>
    43ba:	8e e0       	ldi	r24, 0x0E	; 14
    43bc:	03 c0       	rjmp	.+6      	; 0x43c4 <lora_driver_sendUploadMessage+0x18a>
    43be:	84 e1       	ldi	r24, 0x14	; 20
    43c0:	01 c0       	rjmp	.+2      	; 0x43c4 <lora_driver_sendUploadMessage+0x18a>
    43c2:	80 e0       	ldi	r24, 0x00	; 0
    43c4:	0f 90       	pop	r0
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	1f 91       	pop	r17
    43cc:	0f 91       	pop	r16
    43ce:	08 95       	ret

000043d0 <lora_driver_setAdaptiveDataRate>:
    43d0:	81 30       	cpi	r24, 0x01	; 1
    43d2:	19 f0       	breq	.+6      	; 0x43da <lora_driver_setAdaptiveDataRate+0xa>
    43d4:	66 ee       	ldi	r22, 0xE6	; 230
    43d6:	76 e0       	ldi	r23, 0x06	; 6
    43d8:	02 c0       	rjmp	.+4      	; 0x43de <lora_driver_setAdaptiveDataRate+0xe>
    43da:	6f eb       	ldi	r22, 0xBF	; 191
    43dc:	77 e0       	ldi	r23, 0x07	; 7
    43de:	8a ee       	ldi	r24, 0xEA	; 234
    43e0:	96 e0       	ldi	r25, 0x06	; 6
    43e2:	43 ce       	rjmp	.-890    	; 0x406a <_uploadMessageRc>
    43e4:	08 95       	ret

000043e6 <lora_driver_setReceiveDelay>:
    43e6:	9f 93       	push	r25
    43e8:	8f 93       	push	r24
    43ea:	8b e1       	ldi	r24, 0x1B	; 27
    43ec:	97 e0       	ldi	r25, 0x07	; 7
    43ee:	9f 93       	push	r25
    43f0:	8f 93       	push	r24
    43f2:	83 e5       	ldi	r24, 0x53	; 83
    43f4:	98 e1       	ldi	r25, 0x18	; 24
    43f6:	9f 93       	push	r25
    43f8:	8f 93       	push	r24
    43fa:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
    43fe:	60 e0       	ldi	r22, 0x00	; 0
    4400:	70 e0       	ldi	r23, 0x00	; 0
    4402:	83 e5       	ldi	r24, 0x53	; 83
    4404:	98 e1       	ldi	r25, 0x18	; 24
    4406:	31 de       	rcall	.-926    	; 0x406a <_uploadMessageRc>
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	08 95       	ret

00004416 <lora_driver_configureToEu868>:
    4416:	2f 92       	push	r2
    4418:	3f 92       	push	r3
    441a:	4f 92       	push	r4
    441c:	5f 92       	push	r5
    441e:	6f 92       	push	r6
    4420:	7f 92       	push	r7
    4422:	8f 92       	push	r8
    4424:	9f 92       	push	r9
    4426:	af 92       	push	r10
    4428:	bf 92       	push	r11
    442a:	cf 92       	push	r12
    442c:	df 92       	push	r13
    442e:	ef 92       	push	r14
    4430:	ff 92       	push	r15
    4432:	0f 93       	push	r16
    4434:	1f 93       	push	r17
    4436:	cf 93       	push	r28
    4438:	df 93       	push	r29
    443a:	cd b7       	in	r28, 0x3d	; 61
    443c:	de b7       	in	r29, 0x3e	; 62
    443e:	a0 97       	sbiw	r28, 0x20	; 32
    4440:	0f b6       	in	r0, 0x3f	; 63
    4442:	f8 94       	cli
    4444:	de bf       	out	0x3e, r29	; 62
    4446:	0f be       	out	0x3f, r0	; 63
    4448:	cd bf       	out	0x3d, r28	; 61
    444a:	68 e4       	ldi	r22, 0x48	; 72
    444c:	77 e0       	ldi	r23, 0x07	; 7
    444e:	84 e5       	ldi	r24, 0x54	; 84
    4450:	97 e0       	ldi	r25, 0x07	; 7
    4452:	3c dd       	rcall	.-1416   	; 0x3ecc <_uploadMessage>
    4454:	95 dd       	rcall	.-1238   	; 0x3f80 <_reply2ReturnCode>
    4456:	81 11       	cpse	r24, r1
    4458:	a3 c0       	rjmp	.+326    	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    445a:	80 e2       	ldi	r24, 0x20	; 32
    445c:	e2 e2       	ldi	r30, 0x22	; 34
    445e:	f2 e0       	ldi	r31, 0x02	; 2
    4460:	de 01       	movw	r26, r28
    4462:	11 96       	adiw	r26, 0x01	; 1
    4464:	01 90       	ld	r0, Z+
    4466:	0d 92       	st	X+, r0
    4468:	8a 95       	dec	r24
    446a:	e1 f7       	brne	.-8      	; 0x4464 <lora_driver_configureToEu868+0x4e>
    446c:	9e 01       	movw	r18, r28
    446e:	2f 5f       	subi	r18, 0xFF	; 255
    4470:	3f 4f       	sbci	r19, 0xFF	; 255
    4472:	69 01       	movw	r12, r18
    4474:	e1 2c       	mov	r14, r1
    4476:	f1 2c       	mov	r15, r1
    4478:	0f 2e       	mov	r0, r31
    447a:	f0 e6       	ldi	r31, 0x60	; 96
    447c:	af 2e       	mov	r10, r31
    447e:	f7 e0       	ldi	r31, 0x07	; 7
    4480:	bf 2e       	mov	r11, r31
    4482:	f0 2d       	mov	r31, r0
    4484:	03 e5       	ldi	r16, 0x53	; 83
    4486:	18 e1       	ldi	r17, 0x18	; 24
    4488:	0f 2e       	mov	r0, r31
    448a:	f9 e7       	ldi	r31, 0x79	; 121
    448c:	4f 2e       	mov	r4, r31
    448e:	f7 e0       	ldi	r31, 0x07	; 7
    4490:	5f 2e       	mov	r5, r31
    4492:	f0 2d       	mov	r31, r0
    4494:	0f 2e       	mov	r0, r31
    4496:	f0 e9       	ldi	r31, 0x90	; 144
    4498:	8f 2e       	mov	r8, r31
    449a:	f7 e0       	ldi	r31, 0x07	; 7
    449c:	9f 2e       	mov	r9, r31
    449e:	f0 2d       	mov	r31, r0
    44a0:	0f 2e       	mov	r0, r31
    44a2:	fa ea       	ldi	r31, 0xAA	; 170
    44a4:	6f 2e       	mov	r6, r31
    44a6:	f7 e0       	ldi	r31, 0x07	; 7
    44a8:	7f 2e       	mov	r7, r31
    44aa:	f0 2d       	mov	r31, r0
    44ac:	3e 2c       	mov	r3, r14
    44ae:	2f 2c       	mov	r2, r15
    44b0:	ff 92       	push	r15
    44b2:	ef 92       	push	r14
    44b4:	bf 92       	push	r11
    44b6:	af 92       	push	r10
    44b8:	1f 93       	push	r17
    44ba:	0f 93       	push	r16
    44bc:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
    44c0:	60 e0       	ldi	r22, 0x00	; 0
    44c2:	70 e0       	ldi	r23, 0x00	; 0
    44c4:	c8 01       	movw	r24, r16
    44c6:	02 dd       	rcall	.-1532   	; 0x3ecc <_uploadMessage>
    44c8:	5b dd       	rcall	.-1354   	; 0x3f80 <_reply2ReturnCode>
    44ca:	0f 90       	pop	r0
    44cc:	0f 90       	pop	r0
    44ce:	0f 90       	pop	r0
    44d0:	0f 90       	pop	r0
    44d2:	0f 90       	pop	r0
    44d4:	0f 90       	pop	r0
    44d6:	81 11       	cpse	r24, r1
    44d8:	63 c0       	rjmp	.+198    	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    44da:	32 e0       	ldi	r19, 0x02	; 2
    44dc:	3e 15       	cp	r19, r14
    44de:	e8 f4       	brcc	.+58     	; 0x451a <lora_driver_configureToEu868+0x104>
    44e0:	f6 01       	movw	r30, r12
    44e2:	83 81       	ldd	r24, Z+3	; 0x03
    44e4:	8f 93       	push	r24
    44e6:	82 81       	ldd	r24, Z+2	; 0x02
    44e8:	8f 93       	push	r24
    44ea:	81 81       	ldd	r24, Z+1	; 0x01
    44ec:	8f 93       	push	r24
    44ee:	80 81       	ld	r24, Z
    44f0:	8f 93       	push	r24
    44f2:	ff 92       	push	r15
    44f4:	ef 92       	push	r14
    44f6:	5f 92       	push	r5
    44f8:	4f 92       	push	r4
    44fa:	1f 93       	push	r17
    44fc:	0f 93       	push	r16
    44fe:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	c8 01       	movw	r24, r16
    4508:	e1 dc       	rcall	.-1598   	; 0x3ecc <_uploadMessage>
    450a:	3a dd       	rcall	.-1420   	; 0x3f80 <_reply2ReturnCode>
    450c:	0f b6       	in	r0, 0x3f	; 63
    450e:	f8 94       	cli
    4510:	de bf       	out	0x3e, r29	; 62
    4512:	0f be       	out	0x3f, r0	; 63
    4514:	cd bf       	out	0x3d, r28	; 61
    4516:	81 11       	cpse	r24, r1
    4518:	43 c0       	rjmp	.+134    	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    451a:	2f 92       	push	r2
    451c:	3f 92       	push	r3
    451e:	9f 92       	push	r9
    4520:	8f 92       	push	r8
    4522:	1f 93       	push	r17
    4524:	0f 93       	push	r16
    4526:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	70 e0       	ldi	r23, 0x00	; 0
    452e:	c8 01       	movw	r24, r16
    4530:	cd dc       	rcall	.-1638   	; 0x3ecc <_uploadMessage>
    4532:	26 dd       	rcall	.-1460   	; 0x3f80 <_reply2ReturnCode>
    4534:	0f 90       	pop	r0
    4536:	0f 90       	pop	r0
    4538:	0f 90       	pop	r0
    453a:	0f 90       	pop	r0
    453c:	0f 90       	pop	r0
    453e:	0f 90       	pop	r0
    4540:	81 11       	cpse	r24, r1
    4542:	2e c0       	rjmp	.+92     	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    4544:	2f 92       	push	r2
    4546:	3f 92       	push	r3
    4548:	7f 92       	push	r7
    454a:	6f 92       	push	r6
    454c:	1f 93       	push	r17
    454e:	0f 93       	push	r16
    4550:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <sprintf>
    4554:	60 e0       	ldi	r22, 0x00	; 0
    4556:	70 e0       	ldi	r23, 0x00	; 0
    4558:	c8 01       	movw	r24, r16
    455a:	b8 dc       	rcall	.-1680   	; 0x3ecc <_uploadMessage>
    455c:	11 dd       	rcall	.-1502   	; 0x3f80 <_reply2ReturnCode>
    455e:	0f 90       	pop	r0
    4560:	0f 90       	pop	r0
    4562:	0f 90       	pop	r0
    4564:	0f 90       	pop	r0
    4566:	0f 90       	pop	r0
    4568:	0f 90       	pop	r0
    456a:	81 11       	cpse	r24, r1
    456c:	19 c0       	rjmp	.+50     	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    456e:	3f ef       	ldi	r19, 0xFF	; 255
    4570:	e3 1a       	sub	r14, r19
    4572:	f3 0a       	sbc	r15, r19
    4574:	84 e0       	ldi	r24, 0x04	; 4
    4576:	c8 0e       	add	r12, r24
    4578:	d1 1c       	adc	r13, r1
    457a:	98 e0       	ldi	r25, 0x08	; 8
    457c:	e9 16       	cp	r14, r25
    457e:	f1 04       	cpc	r15, r1
    4580:	09 f0       	breq	.+2      	; 0x4584 <lora_driver_configureToEu868+0x16e>
    4582:	94 cf       	rjmp	.-216    	; 0x44ac <lora_driver_configureToEu868+0x96>
    4584:	60 e0       	ldi	r22, 0x00	; 0
    4586:	70 e0       	ldi	r23, 0x00	; 0
    4588:	82 ec       	ldi	r24, 0xC2	; 194
    458a:	97 e0       	ldi	r25, 0x07	; 7
    458c:	9f dc       	rcall	.-1730   	; 0x3ecc <_uploadMessage>
    458e:	f8 dc       	rcall	.-1552   	; 0x3f80 <_reply2ReturnCode>
    4590:	81 11       	cpse	r24, r1
    4592:	06 c0       	rjmp	.+12     	; 0x45a0 <lora_driver_configureToEu868+0x18a>
    4594:	60 e0       	ldi	r22, 0x00	; 0
    4596:	70 e0       	ldi	r23, 0x00	; 0
    4598:	83 ed       	ldi	r24, 0xD3	; 211
    459a:	97 e0       	ldi	r25, 0x07	; 7
    459c:	97 dc       	rcall	.-1746   	; 0x3ecc <_uploadMessage>
    459e:	f0 dc       	rcall	.-1568   	; 0x3f80 <_reply2ReturnCode>
    45a0:	a0 96       	adiw	r28, 0x20	; 32
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	cd bf       	out	0x3d, r28	; 61
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	ff 90       	pop	r15
    45b6:	ef 90       	pop	r14
    45b8:	df 90       	pop	r13
    45ba:	cf 90       	pop	r12
    45bc:	bf 90       	pop	r11
    45be:	af 90       	pop	r10
    45c0:	9f 90       	pop	r9
    45c2:	8f 90       	pop	r8
    45c4:	7f 90       	pop	r7
    45c6:	6f 90       	pop	r6
    45c8:	5f 90       	pop	r5
    45ca:	4f 90       	pop	r4
    45cc:	3f 90       	pop	r3
    45ce:	2f 90       	pop	r2
    45d0:	08 95       	ret

000045d2 <lora_driver_setOtaaIdentity>:
    45d2:	ef 92       	push	r14
    45d4:	ff 92       	push	r15
    45d6:	0f 93       	push	r16
    45d8:	1f 93       	push	r17
    45da:	cf 93       	push	r28
    45dc:	df 93       	push	r29
    45de:	ec 01       	movw	r28, r24
    45e0:	8b 01       	movw	r16, r22
    45e2:	7a 01       	movw	r14, r20
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	f4 de       	rcall	.-536    	; 0x43d0 <lora_driver_setAdaptiveDataRate>
    45e8:	81 11       	cpse	r24, r1
    45ea:	0d c0       	rjmp	.+26     	; 0x4606 <lora_driver_setOtaaIdentity+0x34>
    45ec:	ce 01       	movw	r24, r28
    45ee:	d4 dd       	rcall	.-1112   	; 0x4198 <lora_driver_setApplicationIdentifier>
    45f0:	81 11       	cpse	r24, r1
    45f2:	09 c0       	rjmp	.+18     	; 0x4606 <lora_driver_setOtaaIdentity+0x34>
    45f4:	c8 01       	movw	r24, r16
    45f6:	e1 dd       	rcall	.-1086   	; 0x41ba <lora_driver_setApplicationKey>
    45f8:	81 11       	cpse	r24, r1
    45fa:	05 c0       	rjmp	.+10     	; 0x4606 <lora_driver_setOtaaIdentity+0x34>
    45fc:	c7 01       	movw	r24, r14
    45fe:	bb dd       	rcall	.-1162   	; 0x4176 <lora_driver_setDeviceIdentifier>
    4600:	81 11       	cpse	r24, r1
    4602:	01 c0       	rjmp	.+2      	; 0x4606 <lora_driver_setOtaaIdentity+0x34>
    4604:	eb dd       	rcall	.-1066   	; 0x41dc <lora_driver_saveMac>
    4606:	df 91       	pop	r29
    4608:	cf 91       	pop	r28
    460a:	1f 91       	pop	r17
    460c:	0f 91       	pop	r16
    460e:	ff 90       	pop	r15
    4610:	ef 90       	pop	r14
    4612:	08 95       	ret

00004614 <lora_driver_mapReturnCodeToText>:
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	fc 01       	movw	r30, r24
    4618:	ee 0f       	add	r30, r30
    461a:	ff 1f       	adc	r31, r31
    461c:	8e 0f       	add	r24, r30
    461e:	9f 1f       	adc	r25, r31
    4620:	fc 01       	movw	r30, r24
    4622:	e4 56       	subi	r30, 0x64	; 100
    4624:	f7 4f       	sbci	r31, 0xF7	; 247
    4626:	81 81       	ldd	r24, Z+1	; 0x01
    4628:	92 81       	ldd	r25, Z+2	; 0x02
    462a:	08 95       	ret

0000462c <decode_port_no>:
    462c:	dc 01       	movw	r26, r24
    462e:	00 97       	sbiw	r24, 0x00	; 0
    4630:	29 f1       	breq	.+74     	; 0x467c <decode_port_no+0x50>
    4632:	fb 01       	movw	r30, r22
    4634:	20 81       	ld	r18, Z
    4636:	fc 01       	movw	r30, r24
    4638:	01 90       	ld	r0, Z+
    463a:	00 20       	and	r0, r0
    463c:	e9 f7       	brne	.-6      	; 0x4638 <decode_port_no+0xc>
    463e:	31 97       	sbiw	r30, 0x01	; 1
    4640:	e8 1b       	sub	r30, r24
    4642:	f9 0b       	sbc	r31, r25
    4644:	82 2f       	mov	r24, r18
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	e8 17       	cp	r30, r24
    464a:	f9 07       	cpc	r31, r25
    464c:	c8 f0       	brcs	.+50     	; 0x4680 <decode_port_no+0x54>
    464e:	80 e0       	ldi	r24, 0x00	; 0
    4650:	08 c0       	rjmp	.+16     	; 0x4662 <decode_port_no+0x36>
    4652:	88 0f       	add	r24, r24
    4654:	38 2f       	mov	r19, r24
    4656:	33 0f       	add	r19, r19
    4658:	33 0f       	add	r19, r19
    465a:	83 0f       	add	r24, r19
    465c:	80 53       	subi	r24, 0x30	; 48
    465e:	89 0f       	add	r24, r25
    4660:	2f 5f       	subi	r18, 0xFF	; 255
    4662:	fd 01       	movw	r30, r26
    4664:	e2 0f       	add	r30, r18
    4666:	f1 1d       	adc	r31, r1
    4668:	90 81       	ld	r25, Z
    466a:	30 ed       	ldi	r19, 0xD0	; 208
    466c:	39 0f       	add	r19, r25
    466e:	3a 30       	cpi	r19, 0x0A	; 10
    4670:	10 f4       	brcc	.+4      	; 0x4676 <decode_port_no+0x4a>
    4672:	91 11       	cpse	r25, r1
    4674:	ee cf       	rjmp	.-36     	; 0x4652 <decode_port_no+0x26>
    4676:	fb 01       	movw	r30, r22
    4678:	20 83       	st	Z, r18
    467a:	08 95       	ret
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	08 95       	ret
    4680:	80 e0       	ldi	r24, 0x00	; 0
    4682:	08 95       	ret

00004684 <decode_hexadecimal_string_bytes>:
    4684:	0f 93       	push	r16
    4686:	1f 93       	push	r17
    4688:	cf 93       	push	r28
    468a:	df 93       	push	r29
    468c:	dc 01       	movw	r26, r24
    468e:	ea 01       	movw	r28, r20
    4690:	20 97       	sbiw	r28, 0x00	; 0
    4692:	e1 f1       	breq	.+120    	; 0x470c <decode_hexadecimal_string_bytes+0x88>
    4694:	fa 01       	movw	r30, r20
    4696:	01 90       	ld	r0, Z+
    4698:	00 20       	and	r0, r0
    469a:	e9 f7       	brne	.-6      	; 0x4696 <decode_hexadecimal_string_bytes+0x12>
    469c:	31 97       	sbiw	r30, 0x01	; 1
    469e:	e4 1b       	sub	r30, r20
    46a0:	f5 0b       	sbc	r31, r21
    46a2:	32 97       	sbiw	r30, 0x02	; 2
    46a4:	10 f5       	brcc	.+68     	; 0x46ea <decode_hexadecimal_string_bytes+0x66>
    46a6:	32 c0       	rjmp	.+100    	; 0x470c <decode_hexadecimal_string_bytes+0x88>
    46a8:	8d 01       	movw	r16, r26
    46aa:	04 0f       	add	r16, r20
    46ac:	15 1f       	adc	r17, r21
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	ae 01       	movw	r20, r28
    46b2:	42 0f       	add	r20, r18
    46b4:	53 1f       	adc	r21, r19
    46b6:	fa 01       	movw	r30, r20
    46b8:	90 81       	ld	r25, Z
    46ba:	91 34       	cpi	r25, 0x41	; 65
    46bc:	28 f0       	brcs	.+10     	; 0x46c8 <decode_hexadecimal_string_bytes+0x44>
    46be:	97 53       	subi	r25, 0x37	; 55
    46c0:	59 2f       	mov	r21, r25
    46c2:	52 95       	swap	r21
    46c4:	50 7f       	andi	r21, 0xF0	; 240
    46c6:	03 c0       	rjmp	.+6      	; 0x46ce <decode_hexadecimal_string_bytes+0x4a>
    46c8:	59 2f       	mov	r21, r25
    46ca:	52 95       	swap	r21
    46cc:	50 7f       	andi	r21, 0xF0	; 240
    46ce:	2c 0f       	add	r18, r28
    46d0:	3d 1f       	adc	r19, r29
    46d2:	f9 01       	movw	r30, r18
    46d4:	91 81       	ldd	r25, Z+1	; 0x01
    46d6:	91 34       	cpi	r25, 0x41	; 65
    46d8:	10 f0       	brcs	.+4      	; 0x46de <decode_hexadecimal_string_bytes+0x5a>
    46da:	97 53       	subi	r25, 0x37	; 55
    46dc:	01 c0       	rjmp	.+2      	; 0x46e0 <decode_hexadecimal_string_bytes+0x5c>
    46de:	90 53       	subi	r25, 0x30	; 48
    46e0:	95 0f       	add	r25, r21
    46e2:	f8 01       	movw	r30, r16
    46e4:	90 83       	st	Z, r25
    46e6:	8f 5f       	subi	r24, 0xFF	; 255
    46e8:	01 c0       	rjmp	.+2      	; 0x46ec <decode_hexadecimal_string_bytes+0x68>
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	28 2f       	mov	r18, r24
    46ee:	22 0f       	add	r18, r18
    46f0:	48 2f       	mov	r20, r24
    46f2:	50 e0       	ldi	r21, 0x00	; 0
    46f4:	fe 01       	movw	r30, r28
    46f6:	01 90       	ld	r0, Z+
    46f8:	00 20       	and	r0, r0
    46fa:	e9 f7       	brne	.-6      	; 0x46f6 <decode_hexadecimal_string_bytes+0x72>
    46fc:	31 97       	sbiw	r30, 0x01	; 1
    46fe:	ec 1b       	sub	r30, r28
    4700:	fd 0b       	sbc	r31, r29
    4702:	4e 17       	cp	r20, r30
    4704:	5f 07       	cpc	r21, r31
    4706:	10 f4       	brcc	.+4      	; 0x470c <decode_hexadecimal_string_bytes+0x88>
    4708:	86 13       	cpse	r24, r22
    470a:	ce cf       	rjmp	.-100    	; 0x46a8 <decode_hexadecimal_string_bytes+0x24>
    470c:	df 91       	pop	r29
    470e:	cf 91       	pop	r28
    4710:	1f 91       	pop	r17
    4712:	0f 91       	pop	r16
    4714:	08 95       	ret

00004716 <_serialCallBack>:
    4716:	80 91 b0 18 	lds	r24, 0x18B0	; 0x8018b0 <crc_sum.1945>
    471a:	86 0f       	add	r24, r22
    471c:	80 93 b0 18 	sts	0x18B0, r24	; 0x8018b0 <crc_sum.1945>
    4720:	90 91 b3 18 	lds	r25, 0x18B3	; 0x8018b3 <_mh_state>
    4724:	91 30       	cpi	r25, 0x01	; 1
    4726:	79 f0       	breq	.+30     	; 0x4746 <_serialCallBack+0x30>
    4728:	28 f0       	brcs	.+10     	; 0x4734 <_serialCallBack+0x1e>
    472a:	92 30       	cpi	r25, 0x02	; 2
    472c:	a9 f0       	breq	.+42     	; 0x4758 <_serialCallBack+0x42>
    472e:	93 30       	cpi	r25, 0x03	; 3
    4730:	19 f1       	breq	.+70     	; 0x4778 <_serialCallBack+0x62>
    4732:	08 95       	ret
    4734:	6f 3f       	cpi	r22, 0xFF	; 255
    4736:	09 f0       	breq	.+2      	; 0x473a <_serialCallBack+0x24>
    4738:	48 c0       	rjmp	.+144    	; 0x47ca <_serialCallBack+0xb4>
    473a:	10 92 b0 18 	sts	0x18B0, r1	; 0x8018b0 <crc_sum.1945>
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	80 93 b3 18 	sts	0x18B3, r24	; 0x8018b3 <_mh_state>
    4744:	08 95       	ret
    4746:	66 38       	cpi	r22, 0x86	; 134
    4748:	09 f0       	breq	.+2      	; 0x474c <_serialCallBack+0x36>
    474a:	3f c0       	rjmp	.+126    	; 0x47ca <_serialCallBack+0xb4>
    474c:	10 92 af 18 	sts	0x18AF, r1	; 0x8018af <inDex.1943>
    4750:	82 e0       	ldi	r24, 0x02	; 2
    4752:	80 93 b3 18 	sts	0x18B3, r24	; 0x8018b3 <_mh_state>
    4756:	08 95       	ret
    4758:	e0 91 af 18 	lds	r30, 0x18AF	; 0x8018af <inDex.1943>
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	8e 0f       	add	r24, r30
    4760:	80 93 af 18 	sts	0x18AF, r24	; 0x8018af <inDex.1943>
    4764:	f0 e0       	ldi	r31, 0x00	; 0
    4766:	e3 55       	subi	r30, 0x53	; 83
    4768:	f7 4e       	sbci	r31, 0xE7	; 231
    476a:	60 83       	st	Z, r22
    476c:	82 30       	cpi	r24, 0x02	; 2
    476e:	69 f5       	brne	.+90     	; 0x47ca <_serialCallBack+0xb4>
    4770:	83 e0       	ldi	r24, 0x03	; 3
    4772:	80 93 b3 18 	sts	0x18B3, r24	; 0x8018b3 <_mh_state>
    4776:	08 95       	ret
    4778:	90 91 af 18 	lds	r25, 0x18AF	; 0x8018af <inDex.1943>
    477c:	21 e0       	ldi	r18, 0x01	; 1
    477e:	29 0f       	add	r18, r25
    4780:	20 93 af 18 	sts	0x18AF, r18	; 0x8018af <inDex.1943>
    4784:	96 30       	cpi	r25, 0x06	; 6
    4786:	09 f5       	brne	.+66     	; 0x47ca <_serialCallBack+0xb4>
    4788:	81 11       	cpse	r24, r1
    478a:	0e c0       	rjmp	.+28     	; 0x47a8 <_serialCallBack+0x92>
    478c:	ed ea       	ldi	r30, 0xAD	; 173
    478e:	f8 e1       	ldi	r31, 0x18	; 24
    4790:	80 81       	ld	r24, Z
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	98 2f       	mov	r25, r24
    4796:	88 27       	eor	r24, r24
    4798:	21 81       	ldd	r18, Z+1	; 0x01
    479a:	82 0f       	add	r24, r18
    479c:	91 1d       	adc	r25, r1
    479e:	90 93 b5 18 	sts	0x18B5, r25	; 0x8018b5 <_ppm+0x1>
    47a2:	80 93 b4 18 	sts	0x18B4, r24	; 0x8018b4 <_ppm>
    47a6:	04 c0       	rjmp	.+8      	; 0x47b0 <_serialCallBack+0x9a>
    47a8:	10 92 b5 18 	sts	0x18B5, r1	; 0x8018b5 <_ppm+0x1>
    47ac:	10 92 b4 18 	sts	0x18B4, r1	; 0x8018b4 <_ppm>
    47b0:	10 92 b3 18 	sts	0x18B3, r1	; 0x8018b3 <_mh_state>
    47b4:	e0 91 b1 18 	lds	r30, 0x18B1	; 0x8018b1 <_appCallBack>
    47b8:	f0 91 b2 18 	lds	r31, 0x18B2	; 0x8018b2 <_appCallBack+0x1>
    47bc:	30 97       	sbiw	r30, 0x00	; 0
    47be:	29 f0       	breq	.+10     	; 0x47ca <_serialCallBack+0xb4>
    47c0:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <_ppm>
    47c4:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <_ppm+0x1>
    47c8:	19 95       	eicall
    47ca:	08 95       	ret

000047cc <mh_z19_initialise>:
    47cc:	8f 92       	push	r8
    47ce:	9f 92       	push	r9
    47d0:	af 92       	push	r10
    47d2:	cf 92       	push	r12
    47d4:	ef 92       	push	r14
    47d6:	0f 93       	push	r16
    47d8:	0f 2e       	mov	r0, r31
    47da:	fb e8       	ldi	r31, 0x8B	; 139
    47dc:	8f 2e       	mov	r8, r31
    47de:	f3 e2       	ldi	r31, 0x23	; 35
    47e0:	9f 2e       	mov	r9, r31
    47e2:	f0 2d       	mov	r31, r0
    47e4:	68 94       	set
    47e6:	aa 24       	eor	r10, r10
    47e8:	a4 f8       	bld	r10, 4
    47ea:	68 94       	set
    47ec:	cc 24       	eor	r12, r12
    47ee:	c4 f8       	bld	r12, 4
    47f0:	e1 2c       	mov	r14, r1
    47f2:	00 e0       	ldi	r16, 0x00	; 0
    47f4:	23 e0       	ldi	r18, 0x03	; 3
    47f6:	40 e8       	ldi	r20, 0x80	; 128
    47f8:	55 e2       	ldi	r21, 0x25	; 37
    47fa:	60 e0       	ldi	r22, 0x00	; 0
    47fc:	70 e0       	ldi	r23, 0x00	; 0
    47fe:	3a d0       	rcall	.+116    	; 0x4874 <serial_create>
    4800:	90 93 b7 18 	sts	0x18B7, r25	; 0x8018b7 <_serial+0x1>
    4804:	80 93 b6 18 	sts	0x18B6, r24	; 0x8018b6 <_serial>
    4808:	0f 91       	pop	r16
    480a:	ef 90       	pop	r14
    480c:	cf 90       	pop	r12
    480e:	af 90       	pop	r10
    4810:	9f 90       	pop	r9
    4812:	8f 90       	pop	r8
    4814:	08 95       	ret

00004816 <mh_z19_takeMeassuring>:
    4816:	cf 93       	push	r28
    4818:	df 93       	push	r29
    481a:	cd b7       	in	r28, 0x3d	; 61
    481c:	de b7       	in	r29, 0x3e	; 62
    481e:	29 97       	sbiw	r28, 0x09	; 9
    4820:	0f b6       	in	r0, 0x3f	; 63
    4822:	f8 94       	cli
    4824:	de bf       	out	0x3e, r29	; 62
    4826:	0f be       	out	0x3f, r0	; 63
    4828:	cd bf       	out	0x3d, r28	; 61
    482a:	89 e0       	ldi	r24, 0x09	; 9
    482c:	e2 e4       	ldi	r30, 0x42	; 66
    482e:	f2 e0       	ldi	r31, 0x02	; 2
    4830:	9e 01       	movw	r18, r28
    4832:	2f 5f       	subi	r18, 0xFF	; 255
    4834:	3f 4f       	sbci	r19, 0xFF	; 255
    4836:	d9 01       	movw	r26, r18
    4838:	01 90       	ld	r0, Z+
    483a:	0d 92       	st	X+, r0
    483c:	8a 95       	dec	r24
    483e:	e1 f7       	brne	.-8      	; 0x4838 <mh_z19_takeMeassuring+0x22>
    4840:	10 92 b5 18 	sts	0x18B5, r1	; 0x8018b5 <_ppm+0x1>
    4844:	10 92 b4 18 	sts	0x18B4, r1	; 0x8018b4 <_ppm>
    4848:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <_serial>
    484c:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <_serial+0x1>
    4850:	00 97       	sbiw	r24, 0x00	; 0
    4852:	31 f0       	breq	.+12     	; 0x4860 <mh_z19_takeMeassuring+0x4a>
    4854:	42 2f       	mov	r20, r18
    4856:	53 2f       	mov	r21, r19
    4858:	69 e0       	ldi	r22, 0x09	; 9
    485a:	d9 d0       	rcall	.+434    	; 0x4a0e <serial_sendBytes>
    485c:	80 e0       	ldi	r24, 0x00	; 0
    485e:	01 c0       	rjmp	.+2      	; 0x4862 <mh_z19_takeMeassuring+0x4c>
    4860:	82 e0       	ldi	r24, 0x02	; 2
    4862:	29 96       	adiw	r28, 0x09	; 9
    4864:	0f b6       	in	r0, 0x3f	; 63
    4866:	f8 94       	cli
    4868:	de bf       	out	0x3e, r29	; 62
    486a:	0f be       	out	0x3f, r0	; 63
    486c:	cd bf       	out	0x3d, r28	; 61
    486e:	df 91       	pop	r29
    4870:	cf 91       	pop	r28
    4872:	08 95       	ret

00004874 <serial_create>:
    4874:	2f 92       	push	r2
    4876:	3f 92       	push	r3
    4878:	4f 92       	push	r4
    487a:	5f 92       	push	r5
    487c:	6f 92       	push	r6
    487e:	7f 92       	push	r7
    4880:	8f 92       	push	r8
    4882:	9f 92       	push	r9
    4884:	af 92       	push	r10
    4886:	cf 92       	push	r12
    4888:	ef 92       	push	r14
    488a:	ff 92       	push	r15
    488c:	0f 93       	push	r16
    488e:	1f 93       	push	r17
    4890:	cf 93       	push	r28
    4892:	df 93       	push	r29
    4894:	cd b7       	in	r28, 0x3d	; 61
    4896:	de b7       	in	r29, 0x3e	; 62
    4898:	f8 2e       	mov	r15, r24
    489a:	2a 01       	movw	r4, r20
    489c:	3b 01       	movw	r6, r22
    489e:	88 e0       	ldi	r24, 0x08	; 8
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <malloc>
    48a6:	8c 01       	movw	r16, r24
    48a8:	8f 2d       	mov	r24, r15
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	fc 01       	movw	r30, r24
    48ae:	ee 0f       	add	r30, r30
    48b0:	ff 1f       	adc	r31, r31
    48b2:	e8 54       	subi	r30, 0x48	; 72
    48b4:	f7 4e       	sbci	r31, 0xE7	; 231
    48b6:	11 83       	std	Z+1, r17	; 0x01
    48b8:	00 83       	st	Z, r16
    48ba:	01 15       	cp	r16, r1
    48bc:	11 05       	cpc	r17, r1
    48be:	09 f4       	brne	.+2      	; 0x48c2 <serial_create+0x4e>
    48c0:	69 c0       	rjmp	.+210    	; 0x4994 <serial_create+0x120>
    48c2:	88 0f       	add	r24, r24
    48c4:	99 1f       	adc	r25, r25
    48c6:	fc 01       	movw	r30, r24
    48c8:	e5 5f       	subi	r30, 0xF5	; 245
    48ca:	fd 4f       	sbci	r31, 0xFD	; 253
    48cc:	80 81       	ld	r24, Z
    48ce:	91 81       	ldd	r25, Z+1	; 0x01
    48d0:	d8 01       	movw	r26, r16
    48d2:	8d 93       	st	X+, r24
    48d4:	9c 93       	st	X, r25
    48d6:	6c 2d       	mov	r22, r12
    48d8:	70 e0       	ldi	r23, 0x00	; 0
    48da:	84 e0       	ldi	r24, 0x04	; 4
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	0e 94 77 2d 	call	0x5aee	; 0x5aee <calloc>
    48e2:	1c 01       	movw	r2, r24
    48e4:	61 e0       	ldi	r22, 0x01	; 1
    48e6:	70 e0       	ldi	r23, 0x00	; 0
    48e8:	86 e0       	ldi	r24, 0x06	; 6
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	0e 94 77 2d 	call	0x5aee	; 0x5aee <calloc>
    48f0:	7c 01       	movw	r14, r24
    48f2:	4c 2d       	mov	r20, r12
    48f4:	b1 01       	movw	r22, r2
    48f6:	f1 d6       	rcall	.+3554   	; 0x56da <fifo_init>
    48f8:	f8 01       	movw	r30, r16
    48fa:	f5 82       	std	Z+5, r15	; 0x05
    48fc:	e4 82       	std	Z+4, r14	; 0x04
    48fe:	6a 2d       	mov	r22, r10
    4900:	70 e0       	ldi	r23, 0x00	; 0
    4902:	84 e0       	ldi	r24, 0x04	; 4
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	0e 94 77 2d 	call	0x5aee	; 0x5aee <calloc>
    490a:	1c 01       	movw	r2, r24
    490c:	61 e0       	ldi	r22, 0x01	; 1
    490e:	70 e0       	ldi	r23, 0x00	; 0
    4910:	86 e0       	ldi	r24, 0x06	; 6
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	0e 94 77 2d 	call	0x5aee	; 0x5aee <calloc>
    4918:	7c 01       	movw	r14, r24
    491a:	4a 2d       	mov	r20, r10
    491c:	b1 01       	movw	r22, r2
    491e:	dd d6       	rcall	.+3514   	; 0x56da <fifo_init>
    4920:	d8 01       	movw	r26, r16
    4922:	13 96       	adiw	r26, 0x03	; 3
    4924:	fc 92       	st	X, r15
    4926:	ee 92       	st	-X, r14
    4928:	12 97       	sbiw	r26, 0x02	; 2
    492a:	17 96       	adiw	r26, 0x07	; 7
    492c:	9c 92       	st	X, r9
    492e:	8e 92       	st	-X, r8
    4930:	16 97       	sbiw	r26, 0x06	; 6
    4932:	ff b6       	in	r15, 0x3f	; 63
    4934:	f8 94       	cli
    4936:	ed 91       	ld	r30, X+
    4938:	fc 91       	ld	r31, X
    493a:	11 97       	sbiw	r26, 0x01	; 1
    493c:	36 97       	sbiw	r30, 0x06	; 6
    493e:	80 81       	ld	r24, Z
    4940:	82 60       	ori	r24, 0x02	; 2
    4942:	80 83       	st	Z, r24
    4944:	8d 90       	ld	r8, X+
    4946:	9c 90       	ld	r9, X
    4948:	c3 01       	movw	r24, r6
    494a:	b2 01       	movw	r22, r4
    494c:	b4 d7       	rcall	.+3944   	; 0x58b6 <__floatunsisf>
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	40 e0       	ldi	r20, 0x00	; 0
    4954:	51 e4       	ldi	r21, 0x41	; 65
    4956:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__mulsf3>
    495a:	9b 01       	movw	r18, r22
    495c:	ac 01       	movw	r20, r24
    495e:	60 e0       	ldi	r22, 0x00	; 0
    4960:	74 e2       	ldi	r23, 0x24	; 36
    4962:	84 e7       	ldi	r24, 0x74	; 116
    4964:	9b e4       	ldi	r25, 0x4B	; 75
    4966:	3c d7       	rcall	.+3704   	; 0x57e0 <__divsf3>
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	40 e8       	ldi	r20, 0x80	; 128
    496e:	5f e3       	ldi	r21, 0x3F	; 63
    4970:	d0 d6       	rcall	.+3488   	; 0x5712 <__subsf3>
    4972:	76 d9       	rcall	.-3348   	; 0x3c60 <__fixunssfsi>
    4974:	f4 01       	movw	r30, r8
    4976:	32 97       	sbiw	r30, 0x02	; 2
    4978:	60 83       	st	Z, r22
    497a:	d8 01       	movw	r26, r16
    497c:	ed 91       	ld	r30, X+
    497e:	fc 91       	ld	r31, X
    4980:	11 97       	sbiw	r26, 0x01	; 1
    4982:	35 97       	sbiw	r30, 0x05	; 5
    4984:	88 e9       	ldi	r24, 0x98	; 152
    4986:	80 83       	st	Z, r24
    4988:	ed 91       	ld	r30, X+
    498a:	fc 91       	ld	r31, X
    498c:	34 97       	sbiw	r30, 0x04	; 4
    498e:	86 e0       	ldi	r24, 0x06	; 6
    4990:	80 83       	st	Z, r24
    4992:	ff be       	out	0x3f, r15	; 63
    4994:	c8 01       	movw	r24, r16
    4996:	df 91       	pop	r29
    4998:	cf 91       	pop	r28
    499a:	1f 91       	pop	r17
    499c:	0f 91       	pop	r16
    499e:	ff 90       	pop	r15
    49a0:	ef 90       	pop	r14
    49a2:	cf 90       	pop	r12
    49a4:	af 90       	pop	r10
    49a6:	9f 90       	pop	r9
    49a8:	8f 90       	pop	r8
    49aa:	7f 90       	pop	r7
    49ac:	6f 90       	pop	r6
    49ae:	5f 90       	pop	r5
    49b0:	4f 90       	pop	r4
    49b2:	3f 90       	pop	r3
    49b4:	2f 90       	pop	r2
    49b6:	08 95       	ret

000049b8 <serial_sendByte>:
    49b8:	cf 93       	push	r28
    49ba:	df 93       	push	r29
    49bc:	dc 01       	movw	r26, r24
    49be:	89 2b       	or	r24, r25
    49c0:	01 f1       	breq	.+64     	; 0x4a02 <serial_sendByte+0x4a>
    49c2:	12 96       	adiw	r26, 0x02	; 2
    49c4:	ed 91       	ld	r30, X+
    49c6:	fc 91       	ld	r31, X
    49c8:	13 97       	sbiw	r26, 0x03	; 3
    49ca:	93 81       	ldd	r25, Z+3	; 0x03
    49cc:	82 81       	ldd	r24, Z+2	; 0x02
    49ce:	25 81       	ldd	r18, Z+5	; 0x05
    49d0:	98 1b       	sub	r25, r24
    49d2:	92 23       	and	r25, r18
    49d4:	84 81       	ldd	r24, Z+4	; 0x04
    49d6:	98 17       	cp	r25, r24
    49d8:	b1 f0       	breq	.+44     	; 0x4a06 <serial_sendByte+0x4e>
    49da:	83 81       	ldd	r24, Z+3	; 0x03
    49dc:	26 95       	lsr	r18
    49de:	28 23       	and	r18, r24
    49e0:	c0 81       	ld	r28, Z
    49e2:	d1 81       	ldd	r29, Z+1	; 0x01
    49e4:	c2 0f       	add	r28, r18
    49e6:	d1 1d       	adc	r29, r1
    49e8:	68 83       	st	Y, r22
    49ea:	8f 5f       	subi	r24, 0xFF	; 255
    49ec:	95 81       	ldd	r25, Z+5	; 0x05
    49ee:	89 23       	and	r24, r25
    49f0:	83 83       	std	Z+3, r24	; 0x03
    49f2:	ed 91       	ld	r30, X+
    49f4:	fc 91       	ld	r31, X
    49f6:	35 97       	sbiw	r30, 0x05	; 5
    49f8:	80 81       	ld	r24, Z
    49fa:	80 62       	ori	r24, 0x20	; 32
    49fc:	80 83       	st	Z, r24
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	03 c0       	rjmp	.+6      	; 0x4a08 <serial_sendByte+0x50>
    4a02:	81 e0       	ldi	r24, 0x01	; 1
    4a04:	01 c0       	rjmp	.+2      	; 0x4a08 <serial_sendByte+0x50>
    4a06:	82 e0       	ldi	r24, 0x02	; 2
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	08 95       	ret

00004a0e <serial_sendBytes>:
    4a0e:	ef 92       	push	r14
    4a10:	ff 92       	push	r15
    4a12:	0f 93       	push	r16
    4a14:	1f 93       	push	r17
    4a16:	cf 93       	push	r28
    4a18:	df 93       	push	r29
    4a1a:	7c 01       	movw	r14, r24
    4a1c:	00 97       	sbiw	r24, 0x00	; 0
    4a1e:	09 f4       	brne	.+2      	; 0x4a22 <serial_sendBytes+0x14>
    4a20:	41 c0       	rjmp	.+130    	; 0x4aa4 <serial_sendBytes+0x96>
    4a22:	dc 01       	movw	r26, r24
    4a24:	12 96       	adiw	r26, 0x02	; 2
    4a26:	ed 91       	ld	r30, X+
    4a28:	fc 91       	ld	r31, X
    4a2a:	13 97       	sbiw	r26, 0x03	; 3
    4a2c:	93 81       	ldd	r25, Z+3	; 0x03
    4a2e:	82 81       	ldd	r24, Z+2	; 0x02
    4a30:	98 1b       	sub	r25, r24
    4a32:	85 81       	ldd	r24, Z+5	; 0x05
    4a34:	98 23       	and	r25, r24
    4a36:	84 81       	ldd	r24, Z+4	; 0x04
    4a38:	89 1b       	sub	r24, r25
    4a3a:	86 17       	cp	r24, r22
    4a3c:	a8 f1       	brcs	.+106    	; 0x4aa8 <serial_sendBytes+0x9a>
    4a3e:	66 23       	and	r22, r22
    4a40:	41 f1       	breq	.+80     	; 0x4a92 <serial_sendBytes+0x84>
    4a42:	84 2f       	mov	r24, r20
    4a44:	95 2f       	mov	r25, r21
    4a46:	dc 01       	movw	r26, r24
    4a48:	61 50       	subi	r22, 0x01	; 1
    4a4a:	46 2f       	mov	r20, r22
    4a4c:	50 e0       	ldi	r21, 0x00	; 0
    4a4e:	4f 5f       	subi	r20, 0xFF	; 255
    4a50:	5f 4f       	sbci	r21, 0xFF	; 255
    4a52:	48 0f       	add	r20, r24
    4a54:	59 1f       	adc	r21, r25
    4a56:	e7 01       	movw	r28, r14
    4a58:	ea 81       	ldd	r30, Y+2	; 0x02
    4a5a:	fb 81       	ldd	r31, Y+3	; 0x03
    4a5c:	93 81       	ldd	r25, Z+3	; 0x03
    4a5e:	82 81       	ldd	r24, Z+2	; 0x02
    4a60:	25 81       	ldd	r18, Z+5	; 0x05
    4a62:	98 1b       	sub	r25, r24
    4a64:	92 23       	and	r25, r18
    4a66:	84 81       	ldd	r24, Z+4	; 0x04
    4a68:	98 17       	cp	r25, r24
    4a6a:	79 f0       	breq	.+30     	; 0x4a8a <serial_sendBytes+0x7c>
    4a6c:	8c 91       	ld	r24, X
    4a6e:	93 81       	ldd	r25, Z+3	; 0x03
    4a70:	26 95       	lsr	r18
    4a72:	29 23       	and	r18, r25
    4a74:	60 81       	ld	r22, Z
    4a76:	71 81       	ldd	r23, Z+1	; 0x01
    4a78:	8b 01       	movw	r16, r22
    4a7a:	02 0f       	add	r16, r18
    4a7c:	11 1d       	adc	r17, r1
    4a7e:	e8 01       	movw	r28, r16
    4a80:	88 83       	st	Y, r24
    4a82:	9f 5f       	subi	r25, 0xFF	; 255
    4a84:	85 81       	ldd	r24, Z+5	; 0x05
    4a86:	98 23       	and	r25, r24
    4a88:	93 83       	std	Z+3, r25	; 0x03
    4a8a:	11 96       	adiw	r26, 0x01	; 1
    4a8c:	a4 17       	cp	r26, r20
    4a8e:	b5 07       	cpc	r27, r21
    4a90:	11 f7       	brne	.-60     	; 0x4a56 <serial_sendBytes+0x48>
    4a92:	d7 01       	movw	r26, r14
    4a94:	ed 91       	ld	r30, X+
    4a96:	fc 91       	ld	r31, X
    4a98:	35 97       	sbiw	r30, 0x05	; 5
    4a9a:	80 81       	ld	r24, Z
    4a9c:	80 62       	ori	r24, 0x20	; 32
    4a9e:	80 83       	st	Z, r24
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	03 c0       	rjmp	.+6      	; 0x4aaa <serial_sendBytes+0x9c>
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	01 c0       	rjmp	.+2      	; 0x4aaa <serial_sendBytes+0x9c>
    4aa8:	82 e0       	ldi	r24, 0x02	; 2
    4aaa:	df 91       	pop	r29
    4aac:	cf 91       	pop	r28
    4aae:	1f 91       	pop	r17
    4ab0:	0f 91       	pop	r16
    4ab2:	ff 90       	pop	r15
    4ab4:	ef 90       	pop	r14
    4ab6:	08 95       	ret

00004ab8 <serial_getByte>:
    4ab8:	00 97       	sbiw	r24, 0x00	; 0
    4aba:	d1 f0       	breq	.+52     	; 0x4af0 <serial_getByte+0x38>
    4abc:	dc 01       	movw	r26, r24
    4abe:	14 96       	adiw	r26, 0x04	; 4
    4ac0:	ed 91       	ld	r30, X+
    4ac2:	fc 91       	ld	r31, X
    4ac4:	15 97       	sbiw	r26, 0x05	; 5
    4ac6:	93 81       	ldd	r25, Z+3	; 0x03
    4ac8:	82 81       	ldd	r24, Z+2	; 0x02
    4aca:	98 17       	cp	r25, r24
    4acc:	99 f0       	breq	.+38     	; 0x4af4 <serial_getByte+0x3c>
    4ace:	92 81       	ldd	r25, Z+2	; 0x02
    4ad0:	85 81       	ldd	r24, Z+5	; 0x05
    4ad2:	86 95       	lsr	r24
    4ad4:	89 23       	and	r24, r25
    4ad6:	a0 81       	ld	r26, Z
    4ad8:	b1 81       	ldd	r27, Z+1	; 0x01
    4ada:	a8 0f       	add	r26, r24
    4adc:	b1 1d       	adc	r27, r1
    4ade:	8c 91       	ld	r24, X
    4ae0:	db 01       	movw	r26, r22
    4ae2:	8c 93       	st	X, r24
    4ae4:	9f 5f       	subi	r25, 0xFF	; 255
    4ae6:	85 81       	ldd	r24, Z+5	; 0x05
    4ae8:	98 23       	and	r25, r24
    4aea:	92 83       	std	Z+2, r25	; 0x02
    4aec:	80 e0       	ldi	r24, 0x00	; 0
    4aee:	08 95       	ret
    4af0:	81 e0       	ldi	r24, 0x01	; 1
    4af2:	08 95       	ret
    4af4:	83 e0       	ldi	r24, 0x03	; 3
    4af6:	08 95       	ret

00004af8 <__vector_25>:
    4af8:	1f 92       	push	r1
    4afa:	0f 92       	push	r0
    4afc:	0f b6       	in	r0, 0x3f	; 63
    4afe:	0f 92       	push	r0
    4b00:	11 24       	eor	r1, r1
    4b02:	0b b6       	in	r0, 0x3b	; 59
    4b04:	0f 92       	push	r0
    4b06:	2f 93       	push	r18
    4b08:	3f 93       	push	r19
    4b0a:	4f 93       	push	r20
    4b0c:	5f 93       	push	r21
    4b0e:	6f 93       	push	r22
    4b10:	7f 93       	push	r23
    4b12:	8f 93       	push	r24
    4b14:	9f 93       	push	r25
    4b16:	af 93       	push	r26
    4b18:	bf 93       	push	r27
    4b1a:	cf 93       	push	r28
    4b1c:	df 93       	push	r29
    4b1e:	ef 93       	push	r30
    4b20:	ff 93       	push	r31
    4b22:	a0 91 b8 18 	lds	r26, 0x18B8	; 0x8018b8 <_ser_handle>
    4b26:	b0 91 b9 18 	lds	r27, 0x18B9	; 0x8018b9 <_ser_handle+0x1>
    4b2a:	10 97       	sbiw	r26, 0x00	; 0
    4b2c:	11 f1       	breq	.+68     	; 0x4b72 <__vector_25+0x7a>
    4b2e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4b32:	14 96       	adiw	r26, 0x04	; 4
    4b34:	ed 91       	ld	r30, X+
    4b36:	fc 91       	ld	r31, X
    4b38:	15 97       	sbiw	r26, 0x05	; 5
    4b3a:	93 81       	ldd	r25, Z+3	; 0x03
    4b3c:	82 81       	ldd	r24, Z+2	; 0x02
    4b3e:	25 81       	ldd	r18, Z+5	; 0x05
    4b40:	98 1b       	sub	r25, r24
    4b42:	92 23       	and	r25, r18
    4b44:	84 81       	ldd	r24, Z+4	; 0x04
    4b46:	98 17       	cp	r25, r24
    4b48:	61 f0       	breq	.+24     	; 0x4b62 <__vector_25+0x6a>
    4b4a:	83 81       	ldd	r24, Z+3	; 0x03
    4b4c:	26 95       	lsr	r18
    4b4e:	28 23       	and	r18, r24
    4b50:	c0 81       	ld	r28, Z
    4b52:	d1 81       	ldd	r29, Z+1	; 0x01
    4b54:	c2 0f       	add	r28, r18
    4b56:	d1 1d       	adc	r29, r1
    4b58:	68 83       	st	Y, r22
    4b5a:	8f 5f       	subi	r24, 0xFF	; 255
    4b5c:	95 81       	ldd	r25, Z+5	; 0x05
    4b5e:	89 23       	and	r24, r25
    4b60:	83 83       	std	Z+3, r24	; 0x03
    4b62:	16 96       	adiw	r26, 0x06	; 6
    4b64:	ed 91       	ld	r30, X+
    4b66:	fc 91       	ld	r31, X
    4b68:	17 97       	sbiw	r26, 0x07	; 7
    4b6a:	30 97       	sbiw	r30, 0x00	; 0
    4b6c:	11 f0       	breq	.+4      	; 0x4b72 <__vector_25+0x7a>
    4b6e:	cd 01       	movw	r24, r26
    4b70:	19 95       	eicall
    4b72:	ff 91       	pop	r31
    4b74:	ef 91       	pop	r30
    4b76:	df 91       	pop	r29
    4b78:	cf 91       	pop	r28
    4b7a:	bf 91       	pop	r27
    4b7c:	af 91       	pop	r26
    4b7e:	9f 91       	pop	r25
    4b80:	8f 91       	pop	r24
    4b82:	7f 91       	pop	r23
    4b84:	6f 91       	pop	r22
    4b86:	5f 91       	pop	r21
    4b88:	4f 91       	pop	r20
    4b8a:	3f 91       	pop	r19
    4b8c:	2f 91       	pop	r18
    4b8e:	0f 90       	pop	r0
    4b90:	0b be       	out	0x3b, r0	; 59
    4b92:	0f 90       	pop	r0
    4b94:	0f be       	out	0x3f, r0	; 63
    4b96:	0f 90       	pop	r0
    4b98:	1f 90       	pop	r1
    4b9a:	18 95       	reti

00004b9c <__vector_26>:
    4b9c:	1f 92       	push	r1
    4b9e:	0f 92       	push	r0
    4ba0:	0f b6       	in	r0, 0x3f	; 63
    4ba2:	0f 92       	push	r0
    4ba4:	11 24       	eor	r1, r1
    4ba6:	0b b6       	in	r0, 0x3b	; 59
    4ba8:	0f 92       	push	r0
    4baa:	2f 93       	push	r18
    4bac:	8f 93       	push	r24
    4bae:	9f 93       	push	r25
    4bb0:	af 93       	push	r26
    4bb2:	bf 93       	push	r27
    4bb4:	ef 93       	push	r30
    4bb6:	ff 93       	push	r31
    4bb8:	e0 91 b8 18 	lds	r30, 0x18B8	; 0x8018b8 <_ser_handle>
    4bbc:	f0 91 b9 18 	lds	r31, 0x18B9	; 0x8018b9 <_ser_handle+0x1>
    4bc0:	30 97       	sbiw	r30, 0x00	; 0
    4bc2:	b9 f0       	breq	.+46     	; 0x4bf2 <__vector_26+0x56>
    4bc4:	02 80       	ldd	r0, Z+2	; 0x02
    4bc6:	f3 81       	ldd	r31, Z+3	; 0x03
    4bc8:	e0 2d       	mov	r30, r0
    4bca:	93 81       	ldd	r25, Z+3	; 0x03
    4bcc:	82 81       	ldd	r24, Z+2	; 0x02
    4bce:	98 17       	cp	r25, r24
    4bd0:	b1 f0       	breq	.+44     	; 0x4bfe <__vector_26+0x62>
    4bd2:	92 81       	ldd	r25, Z+2	; 0x02
    4bd4:	85 81       	ldd	r24, Z+5	; 0x05
    4bd6:	28 2f       	mov	r18, r24
    4bd8:	26 95       	lsr	r18
    4bda:	29 23       	and	r18, r25
    4bdc:	a0 81       	ld	r26, Z
    4bde:	b1 81       	ldd	r27, Z+1	; 0x01
    4be0:	a2 0f       	add	r26, r18
    4be2:	b1 1d       	adc	r27, r1
    4be4:	2c 91       	ld	r18, X
    4be6:	9f 5f       	subi	r25, 0xFF	; 255
    4be8:	89 23       	and	r24, r25
    4bea:	82 83       	std	Z+2, r24	; 0x02
    4bec:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4bf0:	0b c0       	rjmp	.+22     	; 0x4c08 <__vector_26+0x6c>
    4bf2:	e1 ec       	ldi	r30, 0xC1	; 193
    4bf4:	f0 e0       	ldi	r31, 0x00	; 0
    4bf6:	80 81       	ld	r24, Z
    4bf8:	8f 7d       	andi	r24, 0xDF	; 223
    4bfa:	80 83       	st	Z, r24
    4bfc:	05 c0       	rjmp	.+10     	; 0x4c08 <__vector_26+0x6c>
    4bfe:	e1 ec       	ldi	r30, 0xC1	; 193
    4c00:	f0 e0       	ldi	r31, 0x00	; 0
    4c02:	80 81       	ld	r24, Z
    4c04:	8f 7d       	andi	r24, 0xDF	; 223
    4c06:	80 83       	st	Z, r24
    4c08:	ff 91       	pop	r31
    4c0a:	ef 91       	pop	r30
    4c0c:	bf 91       	pop	r27
    4c0e:	af 91       	pop	r26
    4c10:	9f 91       	pop	r25
    4c12:	8f 91       	pop	r24
    4c14:	2f 91       	pop	r18
    4c16:	0f 90       	pop	r0
    4c18:	0b be       	out	0x3b, r0	; 59
    4c1a:	0f 90       	pop	r0
    4c1c:	0f be       	out	0x3f, r0	; 63
    4c1e:	0f 90       	pop	r0
    4c20:	1f 90       	pop	r1
    4c22:	18 95       	reti

00004c24 <__vector_36>:
    4c24:	1f 92       	push	r1
    4c26:	0f 92       	push	r0
    4c28:	0f b6       	in	r0, 0x3f	; 63
    4c2a:	0f 92       	push	r0
    4c2c:	11 24       	eor	r1, r1
    4c2e:	0b b6       	in	r0, 0x3b	; 59
    4c30:	0f 92       	push	r0
    4c32:	2f 93       	push	r18
    4c34:	3f 93       	push	r19
    4c36:	4f 93       	push	r20
    4c38:	5f 93       	push	r21
    4c3a:	6f 93       	push	r22
    4c3c:	7f 93       	push	r23
    4c3e:	8f 93       	push	r24
    4c40:	9f 93       	push	r25
    4c42:	af 93       	push	r26
    4c44:	bf 93       	push	r27
    4c46:	cf 93       	push	r28
    4c48:	df 93       	push	r29
    4c4a:	ef 93       	push	r30
    4c4c:	ff 93       	push	r31
    4c4e:	a0 91 ba 18 	lds	r26, 0x18BA	; 0x8018ba <_ser_handle+0x2>
    4c52:	b0 91 bb 18 	lds	r27, 0x18BB	; 0x8018bb <_ser_handle+0x3>
    4c56:	10 97       	sbiw	r26, 0x00	; 0
    4c58:	11 f1       	breq	.+68     	; 0x4c9e <__vector_36+0x7a>
    4c5a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4c5e:	14 96       	adiw	r26, 0x04	; 4
    4c60:	ed 91       	ld	r30, X+
    4c62:	fc 91       	ld	r31, X
    4c64:	15 97       	sbiw	r26, 0x05	; 5
    4c66:	93 81       	ldd	r25, Z+3	; 0x03
    4c68:	82 81       	ldd	r24, Z+2	; 0x02
    4c6a:	25 81       	ldd	r18, Z+5	; 0x05
    4c6c:	98 1b       	sub	r25, r24
    4c6e:	92 23       	and	r25, r18
    4c70:	84 81       	ldd	r24, Z+4	; 0x04
    4c72:	98 17       	cp	r25, r24
    4c74:	61 f0       	breq	.+24     	; 0x4c8e <__vector_36+0x6a>
    4c76:	83 81       	ldd	r24, Z+3	; 0x03
    4c78:	26 95       	lsr	r18
    4c7a:	28 23       	and	r18, r24
    4c7c:	c0 81       	ld	r28, Z
    4c7e:	d1 81       	ldd	r29, Z+1	; 0x01
    4c80:	c2 0f       	add	r28, r18
    4c82:	d1 1d       	adc	r29, r1
    4c84:	68 83       	st	Y, r22
    4c86:	8f 5f       	subi	r24, 0xFF	; 255
    4c88:	95 81       	ldd	r25, Z+5	; 0x05
    4c8a:	89 23       	and	r24, r25
    4c8c:	83 83       	std	Z+3, r24	; 0x03
    4c8e:	16 96       	adiw	r26, 0x06	; 6
    4c90:	ed 91       	ld	r30, X+
    4c92:	fc 91       	ld	r31, X
    4c94:	17 97       	sbiw	r26, 0x07	; 7
    4c96:	30 97       	sbiw	r30, 0x00	; 0
    4c98:	11 f0       	breq	.+4      	; 0x4c9e <__vector_36+0x7a>
    4c9a:	cd 01       	movw	r24, r26
    4c9c:	19 95       	eicall
    4c9e:	ff 91       	pop	r31
    4ca0:	ef 91       	pop	r30
    4ca2:	df 91       	pop	r29
    4ca4:	cf 91       	pop	r28
    4ca6:	bf 91       	pop	r27
    4ca8:	af 91       	pop	r26
    4caa:	9f 91       	pop	r25
    4cac:	8f 91       	pop	r24
    4cae:	7f 91       	pop	r23
    4cb0:	6f 91       	pop	r22
    4cb2:	5f 91       	pop	r21
    4cb4:	4f 91       	pop	r20
    4cb6:	3f 91       	pop	r19
    4cb8:	2f 91       	pop	r18
    4cba:	0f 90       	pop	r0
    4cbc:	0b be       	out	0x3b, r0	; 59
    4cbe:	0f 90       	pop	r0
    4cc0:	0f be       	out	0x3f, r0	; 63
    4cc2:	0f 90       	pop	r0
    4cc4:	1f 90       	pop	r1
    4cc6:	18 95       	reti

00004cc8 <__vector_37>:
    4cc8:	1f 92       	push	r1
    4cca:	0f 92       	push	r0
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	0f 92       	push	r0
    4cd0:	11 24       	eor	r1, r1
    4cd2:	0b b6       	in	r0, 0x3b	; 59
    4cd4:	0f 92       	push	r0
    4cd6:	2f 93       	push	r18
    4cd8:	8f 93       	push	r24
    4cda:	9f 93       	push	r25
    4cdc:	af 93       	push	r26
    4cde:	bf 93       	push	r27
    4ce0:	ef 93       	push	r30
    4ce2:	ff 93       	push	r31
    4ce4:	e0 91 ba 18 	lds	r30, 0x18BA	; 0x8018ba <_ser_handle+0x2>
    4ce8:	f0 91 bb 18 	lds	r31, 0x18BB	; 0x8018bb <_ser_handle+0x3>
    4cec:	30 97       	sbiw	r30, 0x00	; 0
    4cee:	b9 f0       	breq	.+46     	; 0x4d1e <__vector_37+0x56>
    4cf0:	02 80       	ldd	r0, Z+2	; 0x02
    4cf2:	f3 81       	ldd	r31, Z+3	; 0x03
    4cf4:	e0 2d       	mov	r30, r0
    4cf6:	93 81       	ldd	r25, Z+3	; 0x03
    4cf8:	82 81       	ldd	r24, Z+2	; 0x02
    4cfa:	98 17       	cp	r25, r24
    4cfc:	b1 f0       	breq	.+44     	; 0x4d2a <__vector_37+0x62>
    4cfe:	92 81       	ldd	r25, Z+2	; 0x02
    4d00:	85 81       	ldd	r24, Z+5	; 0x05
    4d02:	28 2f       	mov	r18, r24
    4d04:	26 95       	lsr	r18
    4d06:	29 23       	and	r18, r25
    4d08:	a0 81       	ld	r26, Z
    4d0a:	b1 81       	ldd	r27, Z+1	; 0x01
    4d0c:	a2 0f       	add	r26, r18
    4d0e:	b1 1d       	adc	r27, r1
    4d10:	2c 91       	ld	r18, X
    4d12:	9f 5f       	subi	r25, 0xFF	; 255
    4d14:	89 23       	and	r24, r25
    4d16:	82 83       	std	Z+2, r24	; 0x02
    4d18:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4d1c:	0b c0       	rjmp	.+22     	; 0x4d34 <__vector_37+0x6c>
    4d1e:	e9 ec       	ldi	r30, 0xC9	; 201
    4d20:	f0 e0       	ldi	r31, 0x00	; 0
    4d22:	80 81       	ld	r24, Z
    4d24:	8f 7d       	andi	r24, 0xDF	; 223
    4d26:	80 83       	st	Z, r24
    4d28:	05 c0       	rjmp	.+10     	; 0x4d34 <__vector_37+0x6c>
    4d2a:	e9 ec       	ldi	r30, 0xC9	; 201
    4d2c:	f0 e0       	ldi	r31, 0x00	; 0
    4d2e:	80 81       	ld	r24, Z
    4d30:	8f 7d       	andi	r24, 0xDF	; 223
    4d32:	80 83       	st	Z, r24
    4d34:	ff 91       	pop	r31
    4d36:	ef 91       	pop	r30
    4d38:	bf 91       	pop	r27
    4d3a:	af 91       	pop	r26
    4d3c:	9f 91       	pop	r25
    4d3e:	8f 91       	pop	r24
    4d40:	2f 91       	pop	r18
    4d42:	0f 90       	pop	r0
    4d44:	0b be       	out	0x3b, r0	; 59
    4d46:	0f 90       	pop	r0
    4d48:	0f be       	out	0x3f, r0	; 63
    4d4a:	0f 90       	pop	r0
    4d4c:	1f 90       	pop	r1
    4d4e:	18 95       	reti

00004d50 <__vector_51>:
    4d50:	1f 92       	push	r1
    4d52:	0f 92       	push	r0
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	0f 92       	push	r0
    4d58:	11 24       	eor	r1, r1
    4d5a:	0b b6       	in	r0, 0x3b	; 59
    4d5c:	0f 92       	push	r0
    4d5e:	2f 93       	push	r18
    4d60:	3f 93       	push	r19
    4d62:	4f 93       	push	r20
    4d64:	5f 93       	push	r21
    4d66:	6f 93       	push	r22
    4d68:	7f 93       	push	r23
    4d6a:	8f 93       	push	r24
    4d6c:	9f 93       	push	r25
    4d6e:	af 93       	push	r26
    4d70:	bf 93       	push	r27
    4d72:	cf 93       	push	r28
    4d74:	df 93       	push	r29
    4d76:	ef 93       	push	r30
    4d78:	ff 93       	push	r31
    4d7a:	a0 91 bc 18 	lds	r26, 0x18BC	; 0x8018bc <_ser_handle+0x4>
    4d7e:	b0 91 bd 18 	lds	r27, 0x18BD	; 0x8018bd <_ser_handle+0x5>
    4d82:	10 97       	sbiw	r26, 0x00	; 0
    4d84:	11 f1       	breq	.+68     	; 0x4dca <__vector_51+0x7a>
    4d86:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4d8a:	14 96       	adiw	r26, 0x04	; 4
    4d8c:	ed 91       	ld	r30, X+
    4d8e:	fc 91       	ld	r31, X
    4d90:	15 97       	sbiw	r26, 0x05	; 5
    4d92:	93 81       	ldd	r25, Z+3	; 0x03
    4d94:	82 81       	ldd	r24, Z+2	; 0x02
    4d96:	25 81       	ldd	r18, Z+5	; 0x05
    4d98:	98 1b       	sub	r25, r24
    4d9a:	92 23       	and	r25, r18
    4d9c:	84 81       	ldd	r24, Z+4	; 0x04
    4d9e:	98 17       	cp	r25, r24
    4da0:	61 f0       	breq	.+24     	; 0x4dba <__vector_51+0x6a>
    4da2:	83 81       	ldd	r24, Z+3	; 0x03
    4da4:	26 95       	lsr	r18
    4da6:	28 23       	and	r18, r24
    4da8:	c0 81       	ld	r28, Z
    4daa:	d1 81       	ldd	r29, Z+1	; 0x01
    4dac:	c2 0f       	add	r28, r18
    4dae:	d1 1d       	adc	r29, r1
    4db0:	68 83       	st	Y, r22
    4db2:	8f 5f       	subi	r24, 0xFF	; 255
    4db4:	95 81       	ldd	r25, Z+5	; 0x05
    4db6:	89 23       	and	r24, r25
    4db8:	83 83       	std	Z+3, r24	; 0x03
    4dba:	16 96       	adiw	r26, 0x06	; 6
    4dbc:	ed 91       	ld	r30, X+
    4dbe:	fc 91       	ld	r31, X
    4dc0:	17 97       	sbiw	r26, 0x07	; 7
    4dc2:	30 97       	sbiw	r30, 0x00	; 0
    4dc4:	11 f0       	breq	.+4      	; 0x4dca <__vector_51+0x7a>
    4dc6:	cd 01       	movw	r24, r26
    4dc8:	19 95       	eicall
    4dca:	ff 91       	pop	r31
    4dcc:	ef 91       	pop	r30
    4dce:	df 91       	pop	r29
    4dd0:	cf 91       	pop	r28
    4dd2:	bf 91       	pop	r27
    4dd4:	af 91       	pop	r26
    4dd6:	9f 91       	pop	r25
    4dd8:	8f 91       	pop	r24
    4dda:	7f 91       	pop	r23
    4ddc:	6f 91       	pop	r22
    4dde:	5f 91       	pop	r21
    4de0:	4f 91       	pop	r20
    4de2:	3f 91       	pop	r19
    4de4:	2f 91       	pop	r18
    4de6:	0f 90       	pop	r0
    4de8:	0b be       	out	0x3b, r0	; 59
    4dea:	0f 90       	pop	r0
    4dec:	0f be       	out	0x3f, r0	; 63
    4dee:	0f 90       	pop	r0
    4df0:	1f 90       	pop	r1
    4df2:	18 95       	reti

00004df4 <__vector_52>:
    4df4:	1f 92       	push	r1
    4df6:	0f 92       	push	r0
    4df8:	0f b6       	in	r0, 0x3f	; 63
    4dfa:	0f 92       	push	r0
    4dfc:	11 24       	eor	r1, r1
    4dfe:	0b b6       	in	r0, 0x3b	; 59
    4e00:	0f 92       	push	r0
    4e02:	2f 93       	push	r18
    4e04:	8f 93       	push	r24
    4e06:	9f 93       	push	r25
    4e08:	af 93       	push	r26
    4e0a:	bf 93       	push	r27
    4e0c:	ef 93       	push	r30
    4e0e:	ff 93       	push	r31
    4e10:	e0 91 bc 18 	lds	r30, 0x18BC	; 0x8018bc <_ser_handle+0x4>
    4e14:	f0 91 bd 18 	lds	r31, 0x18BD	; 0x8018bd <_ser_handle+0x5>
    4e18:	30 97       	sbiw	r30, 0x00	; 0
    4e1a:	b9 f0       	breq	.+46     	; 0x4e4a <__vector_52+0x56>
    4e1c:	02 80       	ldd	r0, Z+2	; 0x02
    4e1e:	f3 81       	ldd	r31, Z+3	; 0x03
    4e20:	e0 2d       	mov	r30, r0
    4e22:	93 81       	ldd	r25, Z+3	; 0x03
    4e24:	82 81       	ldd	r24, Z+2	; 0x02
    4e26:	98 17       	cp	r25, r24
    4e28:	b1 f0       	breq	.+44     	; 0x4e56 <__vector_52+0x62>
    4e2a:	92 81       	ldd	r25, Z+2	; 0x02
    4e2c:	85 81       	ldd	r24, Z+5	; 0x05
    4e2e:	28 2f       	mov	r18, r24
    4e30:	26 95       	lsr	r18
    4e32:	29 23       	and	r18, r25
    4e34:	a0 81       	ld	r26, Z
    4e36:	b1 81       	ldd	r27, Z+1	; 0x01
    4e38:	a2 0f       	add	r26, r18
    4e3a:	b1 1d       	adc	r27, r1
    4e3c:	2c 91       	ld	r18, X
    4e3e:	9f 5f       	subi	r25, 0xFF	; 255
    4e40:	89 23       	and	r24, r25
    4e42:	82 83       	std	Z+2, r24	; 0x02
    4e44:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4e48:	0b c0       	rjmp	.+22     	; 0x4e60 <__vector_52+0x6c>
    4e4a:	e1 ed       	ldi	r30, 0xD1	; 209
    4e4c:	f0 e0       	ldi	r31, 0x00	; 0
    4e4e:	80 81       	ld	r24, Z
    4e50:	8f 7d       	andi	r24, 0xDF	; 223
    4e52:	80 83       	st	Z, r24
    4e54:	05 c0       	rjmp	.+10     	; 0x4e60 <__vector_52+0x6c>
    4e56:	e1 ed       	ldi	r30, 0xD1	; 209
    4e58:	f0 e0       	ldi	r31, 0x00	; 0
    4e5a:	80 81       	ld	r24, Z
    4e5c:	8f 7d       	andi	r24, 0xDF	; 223
    4e5e:	80 83       	st	Z, r24
    4e60:	ff 91       	pop	r31
    4e62:	ef 91       	pop	r30
    4e64:	bf 91       	pop	r27
    4e66:	af 91       	pop	r26
    4e68:	9f 91       	pop	r25
    4e6a:	8f 91       	pop	r24
    4e6c:	2f 91       	pop	r18
    4e6e:	0f 90       	pop	r0
    4e70:	0b be       	out	0x3b, r0	; 59
    4e72:	0f 90       	pop	r0
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	0f 90       	pop	r0
    4e78:	1f 90       	pop	r1
    4e7a:	18 95       	reti

00004e7c <__vector_54>:
    4e7c:	1f 92       	push	r1
    4e7e:	0f 92       	push	r0
    4e80:	0f b6       	in	r0, 0x3f	; 63
    4e82:	0f 92       	push	r0
    4e84:	11 24       	eor	r1, r1
    4e86:	0b b6       	in	r0, 0x3b	; 59
    4e88:	0f 92       	push	r0
    4e8a:	2f 93       	push	r18
    4e8c:	3f 93       	push	r19
    4e8e:	4f 93       	push	r20
    4e90:	5f 93       	push	r21
    4e92:	6f 93       	push	r22
    4e94:	7f 93       	push	r23
    4e96:	8f 93       	push	r24
    4e98:	9f 93       	push	r25
    4e9a:	af 93       	push	r26
    4e9c:	bf 93       	push	r27
    4e9e:	cf 93       	push	r28
    4ea0:	df 93       	push	r29
    4ea2:	ef 93       	push	r30
    4ea4:	ff 93       	push	r31
    4ea6:	a0 91 be 18 	lds	r26, 0x18BE	; 0x8018be <_ser_handle+0x6>
    4eaa:	b0 91 bf 18 	lds	r27, 0x18BF	; 0x8018bf <_ser_handle+0x7>
    4eae:	10 97       	sbiw	r26, 0x00	; 0
    4eb0:	11 f1       	breq	.+68     	; 0x4ef6 <__vector_54+0x7a>
    4eb2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4eb6:	14 96       	adiw	r26, 0x04	; 4
    4eb8:	ed 91       	ld	r30, X+
    4eba:	fc 91       	ld	r31, X
    4ebc:	15 97       	sbiw	r26, 0x05	; 5
    4ebe:	93 81       	ldd	r25, Z+3	; 0x03
    4ec0:	82 81       	ldd	r24, Z+2	; 0x02
    4ec2:	25 81       	ldd	r18, Z+5	; 0x05
    4ec4:	98 1b       	sub	r25, r24
    4ec6:	92 23       	and	r25, r18
    4ec8:	84 81       	ldd	r24, Z+4	; 0x04
    4eca:	98 17       	cp	r25, r24
    4ecc:	61 f0       	breq	.+24     	; 0x4ee6 <__vector_54+0x6a>
    4ece:	83 81       	ldd	r24, Z+3	; 0x03
    4ed0:	26 95       	lsr	r18
    4ed2:	28 23       	and	r18, r24
    4ed4:	c0 81       	ld	r28, Z
    4ed6:	d1 81       	ldd	r29, Z+1	; 0x01
    4ed8:	c2 0f       	add	r28, r18
    4eda:	d1 1d       	adc	r29, r1
    4edc:	68 83       	st	Y, r22
    4ede:	8f 5f       	subi	r24, 0xFF	; 255
    4ee0:	95 81       	ldd	r25, Z+5	; 0x05
    4ee2:	89 23       	and	r24, r25
    4ee4:	83 83       	std	Z+3, r24	; 0x03
    4ee6:	16 96       	adiw	r26, 0x06	; 6
    4ee8:	ed 91       	ld	r30, X+
    4eea:	fc 91       	ld	r31, X
    4eec:	17 97       	sbiw	r26, 0x07	; 7
    4eee:	30 97       	sbiw	r30, 0x00	; 0
    4ef0:	11 f0       	breq	.+4      	; 0x4ef6 <__vector_54+0x7a>
    4ef2:	cd 01       	movw	r24, r26
    4ef4:	19 95       	eicall
    4ef6:	ff 91       	pop	r31
    4ef8:	ef 91       	pop	r30
    4efa:	df 91       	pop	r29
    4efc:	cf 91       	pop	r28
    4efe:	bf 91       	pop	r27
    4f00:	af 91       	pop	r26
    4f02:	9f 91       	pop	r25
    4f04:	8f 91       	pop	r24
    4f06:	7f 91       	pop	r23
    4f08:	6f 91       	pop	r22
    4f0a:	5f 91       	pop	r21
    4f0c:	4f 91       	pop	r20
    4f0e:	3f 91       	pop	r19
    4f10:	2f 91       	pop	r18
    4f12:	0f 90       	pop	r0
    4f14:	0b be       	out	0x3b, r0	; 59
    4f16:	0f 90       	pop	r0
    4f18:	0f be       	out	0x3f, r0	; 63
    4f1a:	0f 90       	pop	r0
    4f1c:	1f 90       	pop	r1
    4f1e:	18 95       	reti

00004f20 <__vector_55>:
    4f20:	1f 92       	push	r1
    4f22:	0f 92       	push	r0
    4f24:	0f b6       	in	r0, 0x3f	; 63
    4f26:	0f 92       	push	r0
    4f28:	11 24       	eor	r1, r1
    4f2a:	0b b6       	in	r0, 0x3b	; 59
    4f2c:	0f 92       	push	r0
    4f2e:	2f 93       	push	r18
    4f30:	8f 93       	push	r24
    4f32:	9f 93       	push	r25
    4f34:	af 93       	push	r26
    4f36:	bf 93       	push	r27
    4f38:	ef 93       	push	r30
    4f3a:	ff 93       	push	r31
    4f3c:	e0 91 be 18 	lds	r30, 0x18BE	; 0x8018be <_ser_handle+0x6>
    4f40:	f0 91 bf 18 	lds	r31, 0x18BF	; 0x8018bf <_ser_handle+0x7>
    4f44:	30 97       	sbiw	r30, 0x00	; 0
    4f46:	b9 f0       	breq	.+46     	; 0x4f76 <__vector_55+0x56>
    4f48:	02 80       	ldd	r0, Z+2	; 0x02
    4f4a:	f3 81       	ldd	r31, Z+3	; 0x03
    4f4c:	e0 2d       	mov	r30, r0
    4f4e:	93 81       	ldd	r25, Z+3	; 0x03
    4f50:	82 81       	ldd	r24, Z+2	; 0x02
    4f52:	98 17       	cp	r25, r24
    4f54:	b1 f0       	breq	.+44     	; 0x4f82 <__vector_55+0x62>
    4f56:	92 81       	ldd	r25, Z+2	; 0x02
    4f58:	85 81       	ldd	r24, Z+5	; 0x05
    4f5a:	28 2f       	mov	r18, r24
    4f5c:	26 95       	lsr	r18
    4f5e:	29 23       	and	r18, r25
    4f60:	a0 81       	ld	r26, Z
    4f62:	b1 81       	ldd	r27, Z+1	; 0x01
    4f64:	a2 0f       	add	r26, r18
    4f66:	b1 1d       	adc	r27, r1
    4f68:	2c 91       	ld	r18, X
    4f6a:	9f 5f       	subi	r25, 0xFF	; 255
    4f6c:	89 23       	and	r24, r25
    4f6e:	82 83       	std	Z+2, r24	; 0x02
    4f70:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4f74:	0b c0       	rjmp	.+22     	; 0x4f8c <__vector_55+0x6c>
    4f76:	e1 e3       	ldi	r30, 0x31	; 49
    4f78:	f1 e0       	ldi	r31, 0x01	; 1
    4f7a:	80 81       	ld	r24, Z
    4f7c:	8f 7d       	andi	r24, 0xDF	; 223
    4f7e:	80 83       	st	Z, r24
    4f80:	05 c0       	rjmp	.+10     	; 0x4f8c <__vector_55+0x6c>
    4f82:	e1 e3       	ldi	r30, 0x31	; 49
    4f84:	f1 e0       	ldi	r31, 0x01	; 1
    4f86:	80 81       	ld	r24, Z
    4f88:	8f 7d       	andi	r24, 0xDF	; 223
    4f8a:	80 83       	st	Z, r24
    4f8c:	ff 91       	pop	r31
    4f8e:	ef 91       	pop	r30
    4f90:	bf 91       	pop	r27
    4f92:	af 91       	pop	r26
    4f94:	9f 91       	pop	r25
    4f96:	8f 91       	pop	r24
    4f98:	2f 91       	pop	r18
    4f9a:	0f 90       	pop	r0
    4f9c:	0b be       	out	0x3b, r0	; 59
    4f9e:	0f 90       	pop	r0
    4fa0:	0f be       	out	0x3f, r0	; 63
    4fa2:	0f 90       	pop	r0
    4fa4:	1f 90       	pop	r1
    4fa6:	18 95       	reti

00004fa8 <usart_getchar>:
    4fa8:	cf 93       	push	r28
    4faa:	df 93       	push	r29
    4fac:	1f 92       	push	r1
    4fae:	cd b7       	in	r28, 0x3d	; 61
    4fb0:	de b7       	in	r29, 0x3e	; 62
    4fb2:	be 01       	movw	r22, r28
    4fb4:	6f 5f       	subi	r22, 0xFF	; 255
    4fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    4fb8:	80 91 c0 18 	lds	r24, 0x18C0	; 0x8018c0 <_com_serial_instance>
    4fbc:	90 91 c1 18 	lds	r25, 0x18C1	; 0x8018c1 <_com_serial_instance+0x1>
    4fc0:	7b dd       	rcall	.-1290   	; 0x4ab8 <serial_getByte>
    4fc2:	81 11       	cpse	r24, r1
    4fc4:	f6 cf       	rjmp	.-20     	; 0x4fb2 <usart_getchar+0xa>
    4fc6:	89 81       	ldd	r24, Y+1	; 0x01
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	0f 90       	pop	r0
    4fcc:	df 91       	pop	r29
    4fce:	cf 91       	pop	r28
    4fd0:	08 95       	ret

00004fd2 <usart_putchar>:
    4fd2:	68 2f       	mov	r22, r24
    4fd4:	80 91 c0 18 	lds	r24, 0x18C0	; 0x8018c0 <_com_serial_instance>
    4fd8:	90 91 c1 18 	lds	r25, 0x18C1	; 0x8018c1 <_com_serial_instance+0x1>
    4fdc:	ed dc       	rcall	.-1574   	; 0x49b8 <serial_sendByte>
    4fde:	80 e0       	ldi	r24, 0x00	; 0
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	08 95       	ret

00004fe4 <stdio_initialise>:
    4fe4:	8f 92       	push	r8
    4fe6:	9f 92       	push	r9
    4fe8:	af 92       	push	r10
    4fea:	cf 92       	push	r12
    4fec:	ef 92       	push	r14
    4fee:	0f 93       	push	r16
    4ff0:	81 2c       	mov	r8, r1
    4ff2:	91 2c       	mov	r9, r1
    4ff4:	68 94       	set
    4ff6:	aa 24       	eor	r10, r10
    4ff8:	a7 f8       	bld	r10, 7
    4ffa:	68 94       	set
    4ffc:	cc 24       	eor	r12, r12
    4ffe:	c7 f8       	bld	r12, 7
    5000:	e1 2c       	mov	r14, r1
    5002:	00 e0       	ldi	r16, 0x00	; 0
    5004:	23 e0       	ldi	r18, 0x03	; 3
    5006:	40 e0       	ldi	r20, 0x00	; 0
    5008:	51 ee       	ldi	r21, 0xE1	; 225
    500a:	60 e0       	ldi	r22, 0x00	; 0
    500c:	70 e0       	ldi	r23, 0x00	; 0
    500e:	32 dc       	rcall	.-1948   	; 0x4874 <serial_create>
    5010:	90 93 c1 18 	sts	0x18C1, r25	; 0x8018c1 <_com_serial_instance+0x1>
    5014:	80 93 c0 18 	sts	0x18C0, r24	; 0x8018c0 <_com_serial_instance>
    5018:	e9 e6       	ldi	r30, 0x69	; 105
    501a:	f9 e1       	ldi	r31, 0x19	; 25
    501c:	83 e1       	ldi	r24, 0x13	; 19
    501e:	92 e0       	ldi	r25, 0x02	; 2
    5020:	91 83       	std	Z+1, r25	; 0x01
    5022:	80 83       	st	Z, r24
    5024:	93 83       	std	Z+3, r25	; 0x03
    5026:	82 83       	std	Z+2, r24	; 0x02
    5028:	0f 91       	pop	r16
    502a:	ef 90       	pop	r14
    502c:	cf 90       	pop	r12
    502e:	af 90       	pop	r10
    5030:	9f 90       	pop	r9
    5032:	8f 90       	pop	r8
    5034:	08 95       	ret

00005036 <_turn_off>:
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	fc 01       	movw	r30, r24
    503a:	ee 0f       	add	r30, r30
    503c:	ff 1f       	adc	r31, r31
    503e:	e8 0f       	add	r30, r24
    5040:	f9 1f       	adc	r31, r25
    5042:	ee 0f       	add	r30, r30
    5044:	ff 1f       	adc	r31, r31
    5046:	ee 53       	subi	r30, 0x3E	; 62
    5048:	f7 4e       	sbci	r31, 0xE7	; 231
    504a:	23 81       	ldd	r18, Z+3	; 0x03
    504c:	21 11       	cpse	r18, r1
    504e:	1f c0       	rjmp	.+62     	; 0x508e <_turn_off+0x58>
    5050:	9c 01       	movw	r18, r24
    5052:	22 0f       	add	r18, r18
    5054:	33 1f       	adc	r19, r19
    5056:	f9 01       	movw	r30, r18
    5058:	e8 0f       	add	r30, r24
    505a:	f9 1f       	adc	r31, r25
    505c:	ee 0f       	add	r30, r30
    505e:	ff 1f       	adc	r31, r31
    5060:	ee 53       	subi	r30, 0x3E	; 62
    5062:	f7 4e       	sbci	r31, 0xE7	; 231
    5064:	a0 81       	ld	r26, Z
    5066:	b1 81       	ldd	r27, Z+1	; 0x01
    5068:	4c 91       	ld	r20, X
    506a:	f9 01       	movw	r30, r18
    506c:	e8 0f       	add	r30, r24
    506e:	f9 1f       	adc	r31, r25
    5070:	ee 0f       	add	r30, r30
    5072:	ff 1f       	adc	r31, r31
    5074:	ee 53       	subi	r30, 0x3E	; 62
    5076:	f7 4e       	sbci	r31, 0xE7	; 231
    5078:	81 e0       	ldi	r24, 0x01	; 1
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	02 80       	ldd	r0, Z+2	; 0x02
    507e:	02 c0       	rjmp	.+4      	; 0x5084 <_turn_off+0x4e>
    5080:	88 0f       	add	r24, r24
    5082:	99 1f       	adc	r25, r25
    5084:	0a 94       	dec	r0
    5086:	e2 f7       	brpl	.-8      	; 0x5080 <_turn_off+0x4a>
    5088:	84 2b       	or	r24, r20
    508a:	8c 93       	st	X, r24
    508c:	08 95       	ret
    508e:	fc 01       	movw	r30, r24
    5090:	ee 0f       	add	r30, r30
    5092:	ff 1f       	adc	r31, r31
    5094:	df 01       	movw	r26, r30
    5096:	a8 0f       	add	r26, r24
    5098:	b9 1f       	adc	r27, r25
    509a:	aa 0f       	add	r26, r26
    509c:	bb 1f       	adc	r27, r27
    509e:	ae 53       	subi	r26, 0x3E	; 62
    50a0:	b7 4e       	sbci	r27, 0xE7	; 231
    50a2:	0d 90       	ld	r0, X+
    50a4:	bc 91       	ld	r27, X
    50a6:	a0 2d       	mov	r26, r0
    50a8:	2c 91       	ld	r18, X
    50aa:	e8 0f       	add	r30, r24
    50ac:	f9 1f       	adc	r31, r25
    50ae:	ee 0f       	add	r30, r30
    50b0:	ff 1f       	adc	r31, r31
    50b2:	ee 53       	subi	r30, 0x3E	; 62
    50b4:	f7 4e       	sbci	r31, 0xE7	; 231
    50b6:	81 e0       	ldi	r24, 0x01	; 1
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	02 80       	ldd	r0, Z+2	; 0x02
    50bc:	02 c0       	rjmp	.+4      	; 0x50c2 <_turn_off+0x8c>
    50be:	88 0f       	add	r24, r24
    50c0:	99 1f       	adc	r25, r25
    50c2:	0a 94       	dec	r0
    50c4:	e2 f7       	brpl	.-8      	; 0x50be <_turn_off+0x88>
    50c6:	80 95       	com	r24
    50c8:	82 23       	and	r24, r18
    50ca:	8c 93       	st	X, r24
    50cc:	08 95       	ret

000050ce <_turn_on>:
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	fc 01       	movw	r30, r24
    50d2:	ee 0f       	add	r30, r30
    50d4:	ff 1f       	adc	r31, r31
    50d6:	e8 0f       	add	r30, r24
    50d8:	f9 1f       	adc	r31, r25
    50da:	ee 0f       	add	r30, r30
    50dc:	ff 1f       	adc	r31, r31
    50de:	ee 53       	subi	r30, 0x3E	; 62
    50e0:	f7 4e       	sbci	r31, 0xE7	; 231
    50e2:	23 81       	ldd	r18, Z+3	; 0x03
    50e4:	21 11       	cpse	r18, r1
    50e6:	20 c0       	rjmp	.+64     	; 0x5128 <_turn_on+0x5a>
    50e8:	9c 01       	movw	r18, r24
    50ea:	22 0f       	add	r18, r18
    50ec:	33 1f       	adc	r19, r19
    50ee:	f9 01       	movw	r30, r18
    50f0:	e8 0f       	add	r30, r24
    50f2:	f9 1f       	adc	r31, r25
    50f4:	ee 0f       	add	r30, r30
    50f6:	ff 1f       	adc	r31, r31
    50f8:	ee 53       	subi	r30, 0x3E	; 62
    50fa:	f7 4e       	sbci	r31, 0xE7	; 231
    50fc:	a0 81       	ld	r26, Z
    50fe:	b1 81       	ldd	r27, Z+1	; 0x01
    5100:	4c 91       	ld	r20, X
    5102:	f9 01       	movw	r30, r18
    5104:	e8 0f       	add	r30, r24
    5106:	f9 1f       	adc	r31, r25
    5108:	ee 0f       	add	r30, r30
    510a:	ff 1f       	adc	r31, r31
    510c:	ee 53       	subi	r30, 0x3E	; 62
    510e:	f7 4e       	sbci	r31, 0xE7	; 231
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	02 80       	ldd	r0, Z+2	; 0x02
    5116:	02 c0       	rjmp	.+4      	; 0x511c <_turn_on+0x4e>
    5118:	88 0f       	add	r24, r24
    511a:	99 1f       	adc	r25, r25
    511c:	0a 94       	dec	r0
    511e:	e2 f7       	brpl	.-8      	; 0x5118 <_turn_on+0x4a>
    5120:	80 95       	com	r24
    5122:	84 23       	and	r24, r20
    5124:	8c 93       	st	X, r24
    5126:	08 95       	ret
    5128:	fc 01       	movw	r30, r24
    512a:	ee 0f       	add	r30, r30
    512c:	ff 1f       	adc	r31, r31
    512e:	df 01       	movw	r26, r30
    5130:	a8 0f       	add	r26, r24
    5132:	b9 1f       	adc	r27, r25
    5134:	aa 0f       	add	r26, r26
    5136:	bb 1f       	adc	r27, r27
    5138:	ae 53       	subi	r26, 0x3E	; 62
    513a:	b7 4e       	sbci	r27, 0xE7	; 231
    513c:	0d 90       	ld	r0, X+
    513e:	bc 91       	ld	r27, X
    5140:	a0 2d       	mov	r26, r0
    5142:	2c 91       	ld	r18, X
    5144:	e8 0f       	add	r30, r24
    5146:	f9 1f       	adc	r31, r25
    5148:	ee 0f       	add	r30, r30
    514a:	ff 1f       	adc	r31, r31
    514c:	ee 53       	subi	r30, 0x3E	; 62
    514e:	f7 4e       	sbci	r31, 0xE7	; 231
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	02 80       	ldd	r0, Z+2	; 0x02
    5156:	02 c0       	rjmp	.+4      	; 0x515c <_turn_on+0x8e>
    5158:	88 0f       	add	r24, r24
    515a:	99 1f       	adc	r25, r25
    515c:	0a 94       	dec	r0
    515e:	e2 f7       	brpl	.-8      	; 0x5158 <_turn_on+0x8a>
    5160:	82 2b       	or	r24, r18
    5162:	8c 93       	st	X, r24
    5164:	08 95       	ret

00005166 <_hal_led_task>:
    5166:	cc 24       	eor	r12, r12
    5168:	c3 94       	inc	r12
    516a:	d1 2c       	mov	r13, r1
    516c:	68 94       	set
    516e:	bb 24       	eor	r11, r11
    5170:	b2 f8       	bld	r11, 2
    5172:	c2 ec       	ldi	r28, 0xC2	; 194
    5174:	d8 e1       	ldi	r29, 0x18	; 24
    5176:	10 e0       	ldi	r17, 0x00	; 0
    5178:	8c 81       	ldd	r24, Y+4	; 0x04
    517a:	81 30       	cpi	r24, 0x01	; 1
    517c:	81 f0       	breq	.+32     	; 0x519e <_hal_led_task+0x38>
    517e:	18 f1       	brcs	.+70     	; 0x51c6 <_hal_led_task+0x60>
    5180:	82 30       	cpi	r24, 0x02	; 2
    5182:	61 f5       	brne	.+88     	; 0x51dc <_hal_led_task+0x76>
    5184:	e8 81       	ld	r30, Y
    5186:	f9 81       	ldd	r31, Y+1	; 0x01
    5188:	20 81       	ld	r18, Z
    518a:	c6 01       	movw	r24, r12
    518c:	0a 80       	ldd	r0, Y+2	; 0x02
    518e:	02 c0       	rjmp	.+4      	; 0x5194 <_hal_led_task+0x2e>
    5190:	88 0f       	add	r24, r24
    5192:	99 1f       	adc	r25, r25
    5194:	0a 94       	dec	r0
    5196:	e2 f7       	brpl	.-8      	; 0x5190 <_hal_led_task+0x2a>
    5198:	82 27       	eor	r24, r18
    519a:	80 83       	st	Z, r24
    519c:	1f c0       	rjmp	.+62     	; 0x51dc <_hal_led_task+0x76>
    519e:	8d 81       	ldd	r24, Y+5	; 0x05
    51a0:	8f 5f       	subi	r24, 0xFF	; 255
    51a2:	8a 30       	cpi	r24, 0x0A	; 10
    51a4:	10 f4       	brcc	.+4      	; 0x51aa <_hal_led_task+0x44>
    51a6:	8d 83       	std	Y+5, r24	; 0x05
    51a8:	19 c0       	rjmp	.+50     	; 0x51dc <_hal_led_task+0x76>
    51aa:	1d 82       	std	Y+5, r1	; 0x05
    51ac:	e8 81       	ld	r30, Y
    51ae:	f9 81       	ldd	r31, Y+1	; 0x01
    51b0:	20 81       	ld	r18, Z
    51b2:	c6 01       	movw	r24, r12
    51b4:	0a 80       	ldd	r0, Y+2	; 0x02
    51b6:	02 c0       	rjmp	.+4      	; 0x51bc <_hal_led_task+0x56>
    51b8:	88 0f       	add	r24, r24
    51ba:	99 1f       	adc	r25, r25
    51bc:	0a 94       	dec	r0
    51be:	e2 f7       	brpl	.-8      	; 0x51b8 <_hal_led_task+0x52>
    51c0:	82 27       	eor	r24, r18
    51c2:	80 83       	st	Z, r24
    51c4:	0b c0       	rjmp	.+22     	; 0x51dc <_hal_led_task+0x76>
    51c6:	0d 81       	ldd	r16, Y+5	; 0x05
    51c8:	00 23       	and	r16, r16
    51ca:	29 f0       	breq	.+10     	; 0x51d6 <_hal_led_task+0x70>
    51cc:	81 2f       	mov	r24, r17
    51ce:	7f df       	rcall	.-258    	; 0x50ce <_turn_on>
    51d0:	01 50       	subi	r16, 0x01	; 1
    51d2:	0d 83       	std	Y+5, r16	; 0x05
    51d4:	03 c0       	rjmp	.+6      	; 0x51dc <_hal_led_task+0x76>
    51d6:	bc 82       	std	Y+4, r11	; 0x04
    51d8:	81 2f       	mov	r24, r17
    51da:	2d df       	rcall	.-422    	; 0x5036 <_turn_off>
    51dc:	1f 5f       	subi	r17, 0xFF	; 255
    51de:	26 96       	adiw	r28, 0x06	; 6
    51e0:	14 30       	cpi	r17, 0x04	; 4
    51e2:	51 f6       	brne	.-108    	; 0x5178 <_hal_led_task+0x12>
    51e4:	65 e0       	ldi	r22, 0x05	; 5
    51e6:	70 e0       	ldi	r23, 0x00	; 0
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	0e 94 6d 10 	call	0x20da	; 0x20da <vTaskDelay>
    51f0:	c0 cf       	rjmp	.-128    	; 0x5172 <_hal_led_task+0xc>

000051f2 <status_leds_initialise>:
    51f2:	ef 92       	push	r14
    51f4:	ff 92       	push	r15
    51f6:	0f 93       	push	r16
    51f8:	1f 93       	push	r17
    51fa:	cf 93       	push	r28
    51fc:	df 93       	push	r29
    51fe:	08 2f       	mov	r16, r24
    5200:	80 e4       	ldi	r24, 0x40	; 64
    5202:	87 b9       	out	0x07, r24	; 7
    5204:	c2 ec       	ldi	r28, 0xC2	; 194
    5206:	d8 e1       	ldi	r29, 0x18	; 24
    5208:	0f 2e       	mov	r0, r31
    520a:	f8 e2       	ldi	r31, 0x28	; 40
    520c:	ef 2e       	mov	r14, r31
    520e:	f1 2c       	mov	r15, r1
    5210:	f0 2d       	mov	r31, r0
    5212:	f9 82       	std	Y+1, r15	; 0x01
    5214:	e8 82       	st	Y, r14
    5216:	86 e0       	ldi	r24, 0x06	; 6
    5218:	8a 83       	std	Y+2, r24	; 0x02
    521a:	1b 82       	std	Y+3, r1	; 0x03
    521c:	14 e0       	ldi	r17, 0x04	; 4
    521e:	1c 83       	std	Y+4, r17	; 0x04
    5220:	80 e0       	ldi	r24, 0x00	; 0
    5222:	09 df       	rcall	.-494    	; 0x5036 <_turn_off>
    5224:	80 e8       	ldi	r24, 0x80	; 128
    5226:	87 b9       	out	0x07, r24	; 7
    5228:	ff 82       	std	Y+7, r15	; 0x07
    522a:	ee 82       	std	Y+6, r14	; 0x06
    522c:	87 e0       	ldi	r24, 0x07	; 7
    522e:	88 87       	std	Y+8, r24	; 0x08
    5230:	19 86       	std	Y+9, r1	; 0x09
    5232:	1a 87       	std	Y+10, r17	; 0x0a
    5234:	81 e0       	ldi	r24, 0x01	; 1
    5236:	ff de       	rcall	.-514    	; 0x5036 <_turn_off>
    5238:	80 e2       	ldi	r24, 0x20	; 32
    523a:	83 bb       	out	0x13, r24	; 19
    523c:	84 e3       	ldi	r24, 0x34	; 52
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	9d 87       	std	Y+13, r25	; 0x0d
    5242:	8c 87       	std	Y+12, r24	; 0x0c
    5244:	85 e0       	ldi	r24, 0x05	; 5
    5246:	8e 87       	std	Y+14, r24	; 0x0e
    5248:	1f 86       	std	Y+15, r1	; 0x0f
    524a:	18 8b       	std	Y+16, r17	; 0x10
    524c:	82 e0       	ldi	r24, 0x02	; 2
    524e:	f3 de       	rcall	.-538    	; 0x5036 <_turn_off>
    5250:	80 e1       	ldi	r24, 0x10	; 16
    5252:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5256:	82 e0       	ldi	r24, 0x02	; 2
    5258:	91 e0       	ldi	r25, 0x01	; 1
    525a:	9b 8b       	std	Y+19, r25	; 0x13
    525c:	8a 8b       	std	Y+18, r24	; 0x12
    525e:	1c 8b       	std	Y+20, r17	; 0x14
    5260:	1d 8a       	std	Y+21, r1	; 0x15
    5262:	1e 8b       	std	Y+22, r17	; 0x16
    5264:	83 e0       	ldi	r24, 0x03	; 3
    5266:	e7 de       	rcall	.-562    	; 0x5036 <_turn_off>
    5268:	e1 2c       	mov	r14, r1
    526a:	f1 2c       	mov	r15, r1
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	40 ec       	ldi	r20, 0xC0	; 192
    5272:	50 e0       	ldi	r21, 0x00	; 0
    5274:	6f ec       	ldi	r22, 0xCF	; 207
    5276:	78 e0       	ldi	r23, 0x08	; 8
    5278:	83 eb       	ldi	r24, 0xB3	; 179
    527a:	98 e2       	ldi	r25, 0x28	; 40
    527c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xTaskCreate>
    5280:	df 91       	pop	r29
    5282:	cf 91       	pop	r28
    5284:	1f 91       	pop	r17
    5286:	0f 91       	pop	r16
    5288:	ff 90       	pop	r15
    528a:	ef 90       	pop	r14
    528c:	08 95       	ret

0000528e <status_leds_slowBlink>:
    528e:	cf 93       	push	r28
    5290:	df 93       	push	r29
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	fc 01       	movw	r30, r24
    5296:	ee 0f       	add	r30, r30
    5298:	ff 1f       	adc	r31, r31
    529a:	df 01       	movw	r26, r30
    529c:	a8 0f       	add	r26, r24
    529e:	b9 1f       	adc	r27, r25
    52a0:	aa 0f       	add	r26, r26
    52a2:	bb 1f       	adc	r27, r27
    52a4:	ae 53       	subi	r26, 0x3E	; 62
    52a6:	b7 4e       	sbci	r27, 0xE7	; 231
    52a8:	cd 91       	ld	r28, X+
    52aa:	dc 91       	ld	r29, X
    52ac:	11 97       	sbiw	r26, 0x01	; 1
    52ae:	48 81       	ld	r20, Y
    52b0:	21 e0       	ldi	r18, 0x01	; 1
    52b2:	30 e0       	ldi	r19, 0x00	; 0
    52b4:	12 96       	adiw	r26, 0x02	; 2
    52b6:	0c 90       	ld	r0, X
    52b8:	12 97       	sbiw	r26, 0x02	; 2
    52ba:	02 c0       	rjmp	.+4      	; 0x52c0 <status_leds_slowBlink+0x32>
    52bc:	22 0f       	add	r18, r18
    52be:	33 1f       	adc	r19, r19
    52c0:	0a 94       	dec	r0
    52c2:	e2 f7       	brpl	.-8      	; 0x52bc <status_leds_slowBlink+0x2e>
    52c4:	24 27       	eor	r18, r20
    52c6:	28 83       	st	Y, r18
    52c8:	fd 01       	movw	r30, r26
    52ca:	81 e0       	ldi	r24, 0x01	; 1
    52cc:	84 83       	std	Z+4, r24	; 0x04
    52ce:	df 91       	pop	r29
    52d0:	cf 91       	pop	r28
    52d2:	08 95       	ret

000052d4 <status_leds_fastBlink>:
    52d4:	cf 93       	push	r28
    52d6:	df 93       	push	r29
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	fc 01       	movw	r30, r24
    52dc:	ee 0f       	add	r30, r30
    52de:	ff 1f       	adc	r31, r31
    52e0:	df 01       	movw	r26, r30
    52e2:	a8 0f       	add	r26, r24
    52e4:	b9 1f       	adc	r27, r25
    52e6:	aa 0f       	add	r26, r26
    52e8:	bb 1f       	adc	r27, r27
    52ea:	ae 53       	subi	r26, 0x3E	; 62
    52ec:	b7 4e       	sbci	r27, 0xE7	; 231
    52ee:	cd 91       	ld	r28, X+
    52f0:	dc 91       	ld	r29, X
    52f2:	11 97       	sbiw	r26, 0x01	; 1
    52f4:	48 81       	ld	r20, Y
    52f6:	21 e0       	ldi	r18, 0x01	; 1
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	12 96       	adiw	r26, 0x02	; 2
    52fc:	0c 90       	ld	r0, X
    52fe:	12 97       	sbiw	r26, 0x02	; 2
    5300:	02 c0       	rjmp	.+4      	; 0x5306 <status_leds_fastBlink+0x32>
    5302:	22 0f       	add	r18, r18
    5304:	33 1f       	adc	r19, r19
    5306:	0a 94       	dec	r0
    5308:	e2 f7       	brpl	.-8      	; 0x5302 <status_leds_fastBlink+0x2e>
    530a:	24 27       	eor	r18, r20
    530c:	28 83       	st	Y, r18
    530e:	fd 01       	movw	r30, r26
    5310:	82 e0       	ldi	r24, 0x02	; 2
    5312:	84 83       	std	Z+4, r24	; 0x04
    5314:	df 91       	pop	r29
    5316:	cf 91       	pop	r28
    5318:	08 95       	ret

0000531a <status_leds_ledOn>:
    531a:	28 2f       	mov	r18, r24
    531c:	30 e0       	ldi	r19, 0x00	; 0
    531e:	f9 01       	movw	r30, r18
    5320:	ee 0f       	add	r30, r30
    5322:	ff 1f       	adc	r31, r31
    5324:	e2 0f       	add	r30, r18
    5326:	f3 1f       	adc	r31, r19
    5328:	ee 0f       	add	r30, r30
    532a:	ff 1f       	adc	r31, r31
    532c:	ee 53       	subi	r30, 0x3E	; 62
    532e:	f7 4e       	sbci	r31, 0xE7	; 231
    5330:	93 e0       	ldi	r25, 0x03	; 3
    5332:	94 83       	std	Z+4, r25	; 0x04
    5334:	cc ce       	rjmp	.-616    	; 0x50ce <_turn_on>
    5336:	08 95       	ret

00005338 <status_leds_ledOff>:
    5338:	28 2f       	mov	r18, r24
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	f9 01       	movw	r30, r18
    533e:	ee 0f       	add	r30, r30
    5340:	ff 1f       	adc	r31, r31
    5342:	e2 0f       	add	r30, r18
    5344:	f3 1f       	adc	r31, r19
    5346:	ee 0f       	add	r30, r30
    5348:	ff 1f       	adc	r31, r31
    534a:	ee 53       	subi	r30, 0x3E	; 62
    534c:	f7 4e       	sbci	r31, 0xE7	; 231
    534e:	94 e0       	ldi	r25, 0x04	; 4
    5350:	94 83       	std	Z+4, r25	; 0x04
    5352:	71 ce       	rjmp	.-798    	; 0x5036 <_turn_off>
    5354:	08 95       	ret

00005356 <status_leds_longPuls>:
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	fc 01       	movw	r30, r24
    535a:	ee 0f       	add	r30, r30
    535c:	ff 1f       	adc	r31, r31
    535e:	df 01       	movw	r26, r30
    5360:	a8 0f       	add	r26, r24
    5362:	b9 1f       	adc	r27, r25
    5364:	aa 0f       	add	r26, r26
    5366:	bb 1f       	adc	r27, r27
    5368:	ae 53       	subi	r26, 0x3E	; 62
    536a:	b7 4e       	sbci	r27, 0xE7	; 231
    536c:	24 e0       	ldi	r18, 0x04	; 4
    536e:	15 96       	adiw	r26, 0x05	; 5
    5370:	2c 93       	st	X, r18
    5372:	15 97       	sbiw	r26, 0x05	; 5
    5374:	fd 01       	movw	r30, r26
    5376:	14 82       	std	Z+4, r1	; 0x04
    5378:	08 95       	ret

0000537a <status_leds_shortPuls>:
    537a:	90 e0       	ldi	r25, 0x00	; 0
    537c:	fc 01       	movw	r30, r24
    537e:	ee 0f       	add	r30, r30
    5380:	ff 1f       	adc	r31, r31
    5382:	df 01       	movw	r26, r30
    5384:	a8 0f       	add	r26, r24
    5386:	b9 1f       	adc	r27, r25
    5388:	aa 0f       	add	r26, r26
    538a:	bb 1f       	adc	r27, r27
    538c:	ae 53       	subi	r26, 0x3E	; 62
    538e:	b7 4e       	sbci	r27, 0xE7	; 231
    5390:	21 e0       	ldi	r18, 0x01	; 1
    5392:	15 96       	adiw	r26, 0x05	; 5
    5394:	2c 93       	st	X, r18
    5396:	15 97       	sbiw	r26, 0x05	; 5
    5398:	fd 01       	movw	r30, r26
    539a:	14 82       	std	Z+4, r1	; 0x04
    539c:	08 95       	ret

0000539e <_initTwiInterface>:
    539e:	80 91 e8 18 	lds	r24, 0x18E8	; 0x8018e8 <_twiIsInitiated>
    53a2:	81 11       	cpse	r24, r1
    53a4:	0c c0       	rjmp	.+24     	; 0x53be <_initTwiInterface+0x20>
    53a6:	8c e0       	ldi	r24, 0x0C	; 12
    53a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    53ac:	8f ef       	ldi	r24, 0xFF	; 255
    53ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    53b2:	84 e0       	ldi	r24, 0x04	; 4
    53b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53b8:	81 e0       	ldi	r24, 0x01	; 1
    53ba:	80 93 e8 18 	sts	0x18E8, r24	; 0x8018e8 <_twiIsInitiated>
    53be:	08 95       	ret

000053c0 <twiCreate>:
    53c0:	af 92       	push	r10
    53c2:	bf 92       	push	r11
    53c4:	cf 92       	push	r12
    53c6:	df 92       	push	r13
    53c8:	ef 92       	push	r14
    53ca:	ff 92       	push	r15
    53cc:	0f 93       	push	r16
    53ce:	1f 93       	push	r17
    53d0:	cf 93       	push	r28
    53d2:	df 93       	push	r29
    53d4:	a8 2e       	mov	r10, r24
    53d6:	b6 2e       	mov	r11, r22
    53d8:	69 01       	movw	r12, r18
    53da:	7a 01       	movw	r14, r20
    53dc:	84 e0       	ldi	r24, 0x04	; 4
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	a0 d3       	rcall	.+1856   	; 0x5b22 <malloc>
    53e2:	ec 01       	movw	r28, r24
    53e4:	89 2b       	or	r24, r25
    53e6:	61 f1       	breq	.+88     	; 0x5440 <twiCreate+0x80>
    53e8:	a8 82       	st	Y, r10
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	b8 12       	cpse	r11, r24
    53ee:	12 c0       	rjmp	.+36     	; 0x5414 <twiCreate+0x54>
    53f0:	c7 01       	movw	r24, r14
    53f2:	b6 01       	movw	r22, r12
    53f4:	20 ea       	ldi	r18, 0xA0	; 160
    53f6:	36 e8       	ldi	r19, 0x86	; 134
    53f8:	41 e0       	ldi	r20, 0x01	; 1
    53fa:	50 e0       	ldi	r21, 0x00	; 0
    53fc:	4e d3       	rcall	.+1692   	; 0x5a9a <__udivmodsi4>
    53fe:	da 01       	movw	r26, r20
    5400:	c9 01       	movw	r24, r18
    5402:	40 97       	sbiw	r24, 0x10	; 16
    5404:	a1 09       	sbc	r26, r1
    5406:	b1 09       	sbc	r27, r1
    5408:	b6 95       	lsr	r27
    540a:	a7 95       	ror	r26
    540c:	97 95       	ror	r25
    540e:	87 95       	ror	r24
    5410:	89 83       	std	Y+1, r24	; 0x01
    5412:	11 c0       	rjmp	.+34     	; 0x5436 <twiCreate+0x76>
    5414:	c7 01       	movw	r24, r14
    5416:	b6 01       	movw	r22, r12
    5418:	20 e8       	ldi	r18, 0x80	; 128
    541a:	3a e1       	ldi	r19, 0x1A	; 26
    541c:	46 e0       	ldi	r20, 0x06	; 6
    541e:	50 e0       	ldi	r21, 0x00	; 0
    5420:	3c d3       	rcall	.+1656   	; 0x5a9a <__udivmodsi4>
    5422:	da 01       	movw	r26, r20
    5424:	c9 01       	movw	r24, r18
    5426:	40 97       	sbiw	r24, 0x10	; 16
    5428:	a1 09       	sbc	r26, r1
    542a:	b1 09       	sbc	r27, r1
    542c:	b6 95       	lsr	r27
    542e:	a7 95       	ror	r26
    5430:	97 95       	ror	r25
    5432:	87 95       	ror	r24
    5434:	89 83       	std	Y+1, r24	; 0x01
    5436:	1b 83       	std	Y+3, r17	; 0x03
    5438:	0a 83       	std	Y+2, r16	; 0x02
    543a:	8c 2f       	mov	r24, r28
    543c:	9d 2f       	mov	r25, r29
    543e:	02 c0       	rjmp	.+4      	; 0x5444 <twiCreate+0x84>
    5440:	80 e0       	ldi	r24, 0x00	; 0
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	df 91       	pop	r29
    5446:	cf 91       	pop	r28
    5448:	1f 91       	pop	r17
    544a:	0f 91       	pop	r16
    544c:	ff 90       	pop	r15
    544e:	ef 90       	pop	r14
    5450:	df 90       	pop	r13
    5452:	cf 90       	pop	r12
    5454:	bf 90       	pop	r11
    5456:	af 90       	pop	r10
    5458:	08 95       	ret

0000545a <twiIsBusy>:
    545a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    545e:	81 70       	andi	r24, 0x01	; 1
    5460:	08 95       	ret

00005462 <twiTransmit>:
    5462:	ff 92       	push	r15
    5464:	0f 93       	push	r16
    5466:	1f 93       	push	r17
    5468:	cf 93       	push	r28
    546a:	df 93       	push	r29
    546c:	00 97       	sbiw	r24, 0x00	; 0
    546e:	d1 f1       	breq	.+116    	; 0x54e4 <twiTransmit+0x82>
    5470:	4a 30       	cpi	r20, 0x0A	; 10
    5472:	d0 f5       	brcc	.+116    	; 0x54e8 <twiTransmit+0x86>
    5474:	f4 2e       	mov	r15, r20
    5476:	8b 01       	movw	r16, r22
    5478:	ec 01       	movw	r28, r24
    547a:	ef df       	rcall	.-34     	; 0x545a <twiIsBusy>
    547c:	81 11       	cpse	r24, r1
    547e:	36 c0       	rjmp	.+108    	; 0x54ec <twiTransmit+0x8a>
    5480:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <_twiCurrentHandler>
    5484:	90 91 dc 18 	lds	r25, 0x18DC	; 0x8018dc <_twiCurrentHandler+0x1>
    5488:	c8 17       	cp	r28, r24
    548a:	d9 07       	cpc	r29, r25
    548c:	41 f0       	breq	.+16     	; 0x549e <twiTransmit+0x3c>
    548e:	87 df       	rcall	.-242    	; 0x539e <_initTwiInterface>
    5490:	89 81       	ldd	r24, Y+1	; 0x01
    5492:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5496:	d0 93 dc 18 	sts	0x18DC, r29	; 0x8018dc <_twiCurrentHandler+0x1>
    549a:	c0 93 db 18 	sts	0x18DB, r28	; 0x8018db <_twiCurrentHandler>
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	8f 0d       	add	r24, r15
    54a2:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <_twiMessageLen>
    54a6:	88 81       	ld	r24, Y
    54a8:	88 0f       	add	r24, r24
    54aa:	80 93 de 18 	sts	0x18DE, r24	; 0x8018de <_twiMessageBuffer>
    54ae:	ff 20       	and	r15, r15
    54b0:	89 f0       	breq	.+34     	; 0x54d4 <twiTransmit+0x72>
    54b2:	f8 01       	movw	r30, r16
    54b4:	af ed       	ldi	r26, 0xDF	; 223
    54b6:	b8 e1       	ldi	r27, 0x18	; 24
    54b8:	4f ef       	ldi	r20, 0xFF	; 255
    54ba:	4f 0d       	add	r20, r15
    54bc:	64 2f       	mov	r22, r20
    54be:	70 e0       	ldi	r23, 0x00	; 0
    54c0:	cb 01       	movw	r24, r22
    54c2:	01 96       	adiw	r24, 0x01	; 1
    54c4:	b8 01       	movw	r22, r16
    54c6:	68 0f       	add	r22, r24
    54c8:	79 1f       	adc	r23, r25
    54ca:	81 91       	ld	r24, Z+
    54cc:	8d 93       	st	X+, r24
    54ce:	e6 17       	cp	r30, r22
    54d0:	f7 07       	cpc	r31, r23
    54d2:	d9 f7       	brne	.-10     	; 0x54ca <twiTransmit+0x68>
    54d4:	88 ef       	ldi	r24, 0xF8	; 248
    54d6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    54da:	85 ea       	ldi	r24, 0xA5	; 165
    54dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54e0:	84 e0       	ldi	r24, 0x04	; 4
    54e2:	05 c0       	rjmp	.+10     	; 0x54ee <twiTransmit+0x8c>
    54e4:	86 e0       	ldi	r24, 0x06	; 6
    54e6:	03 c0       	rjmp	.+6      	; 0x54ee <twiTransmit+0x8c>
    54e8:	87 e0       	ldi	r24, 0x07	; 7
    54ea:	01 c0       	rjmp	.+2      	; 0x54ee <twiTransmit+0x8c>
    54ec:	82 e0       	ldi	r24, 0x02	; 2
    54ee:	df 91       	pop	r29
    54f0:	cf 91       	pop	r28
    54f2:	1f 91       	pop	r17
    54f4:	0f 91       	pop	r16
    54f6:	ff 90       	pop	r15
    54f8:	08 95       	ret

000054fa <twiReceive>:
    54fa:	1f 93       	push	r17
    54fc:	cf 93       	push	r28
    54fe:	df 93       	push	r29
    5500:	00 97       	sbiw	r24, 0x00	; 0
    5502:	29 f1       	breq	.+74     	; 0x554e <twiReceive+0x54>
    5504:	6b 30       	cpi	r22, 0x0B	; 11
    5506:	28 f5       	brcc	.+74     	; 0x5552 <twiReceive+0x58>
    5508:	16 2f       	mov	r17, r22
    550a:	ec 01       	movw	r28, r24
    550c:	a6 df       	rcall	.-180    	; 0x545a <twiIsBusy>
    550e:	81 11       	cpse	r24, r1
    5510:	22 c0       	rjmp	.+68     	; 0x5556 <twiReceive+0x5c>
    5512:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <_twiCurrentHandler>
    5516:	90 91 dc 18 	lds	r25, 0x18DC	; 0x8018dc <_twiCurrentHandler+0x1>
    551a:	c8 17       	cp	r28, r24
    551c:	d9 07       	cpc	r29, r25
    551e:	41 f0       	breq	.+16     	; 0x5530 <twiReceive+0x36>
    5520:	3e df       	rcall	.-388    	; 0x539e <_initTwiInterface>
    5522:	89 81       	ldd	r24, Y+1	; 0x01
    5524:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5528:	d0 93 dc 18 	sts	0x18DC, r29	; 0x8018dc <_twiCurrentHandler+0x1>
    552c:	c0 93 db 18 	sts	0x18DB, r28	; 0x8018db <_twiCurrentHandler>
    5530:	10 93 dd 18 	sts	0x18DD, r17	; 0x8018dd <_twiMessageLen>
    5534:	88 81       	ld	r24, Y
    5536:	88 0f       	add	r24, r24
    5538:	81 60       	ori	r24, 0x01	; 1
    553a:	80 93 de 18 	sts	0x18DE, r24	; 0x8018de <_twiMessageBuffer>
    553e:	88 ef       	ldi	r24, 0xF8	; 248
    5540:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5544:	85 ea       	ldi	r24, 0xA5	; 165
    5546:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    554a:	85 e0       	ldi	r24, 0x05	; 5
    554c:	05 c0       	rjmp	.+10     	; 0x5558 <twiReceive+0x5e>
    554e:	86 e0       	ldi	r24, 0x06	; 6
    5550:	03 c0       	rjmp	.+6      	; 0x5558 <twiReceive+0x5e>
    5552:	87 e0       	ldi	r24, 0x07	; 7
    5554:	01 c0       	rjmp	.+2      	; 0x5558 <twiReceive+0x5e>
    5556:	82 e0       	ldi	r24, 0x02	; 2
    5558:	df 91       	pop	r29
    555a:	cf 91       	pop	r28
    555c:	1f 91       	pop	r17
    555e:	08 95       	ret

00005560 <__vector_39>:
    5560:	1f 92       	push	r1
    5562:	0f 92       	push	r0
    5564:	0f b6       	in	r0, 0x3f	; 63
    5566:	0f 92       	push	r0
    5568:	11 24       	eor	r1, r1
    556a:	0b b6       	in	r0, 0x3b	; 59
    556c:	0f 92       	push	r0
    556e:	2f 93       	push	r18
    5570:	3f 93       	push	r19
    5572:	4f 93       	push	r20
    5574:	5f 93       	push	r21
    5576:	6f 93       	push	r22
    5578:	7f 93       	push	r23
    557a:	8f 93       	push	r24
    557c:	9f 93       	push	r25
    557e:	af 93       	push	r26
    5580:	bf 93       	push	r27
    5582:	ef 93       	push	r30
    5584:	ff 93       	push	r31
    5586:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    558a:	8e 2f       	mov	r24, r30
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	fc 01       	movw	r30, r24
    5590:	38 97       	sbiw	r30, 0x08	; 8
    5592:	e1 35       	cpi	r30, 0x51	; 81
    5594:	f1 05       	cpc	r31, r1
    5596:	08 f0       	brcs	.+2      	; 0x559a <__vector_39+0x3a>
    5598:	75 c0       	rjmp	.+234    	; 0x5684 <__vector_39+0x124>
    559a:	88 27       	eor	r24, r24
    559c:	e4 58       	subi	r30, 0x84	; 132
    559e:	ff 4f       	sbci	r31, 0xFF	; 255
    55a0:	8f 4f       	sbci	r24, 0xFF	; 255
    55a2:	9d c2       	rjmp	.+1338   	; 0x5ade <__tablejump2__>
    55a4:	10 92 da 18 	sts	0x18DA, r1	; 0x8018da <_index.1885>
    55a8:	e0 91 da 18 	lds	r30, 0x18DA	; 0x8018da <_index.1885>
    55ac:	80 91 dd 18 	lds	r24, 0x18DD	; 0x8018dd <_twiMessageLen>
    55b0:	e8 17       	cp	r30, r24
    55b2:	70 f4       	brcc	.+28     	; 0x55d0 <__vector_39+0x70>
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	8e 0f       	add	r24, r30
    55b8:	80 93 da 18 	sts	0x18DA, r24	; 0x8018da <_index.1885>
    55bc:	f0 e0       	ldi	r31, 0x00	; 0
    55be:	e2 52       	subi	r30, 0x22	; 34
    55c0:	f7 4e       	sbci	r31, 0xE7	; 231
    55c2:	80 81       	ld	r24, Z
    55c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55c8:	85 e8       	ldi	r24, 0x85	; 133
    55ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55ce:	72 c0       	rjmp	.+228    	; 0x56b4 <__vector_39+0x154>
    55d0:	84 e9       	ldi	r24, 0x94	; 148
    55d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55d6:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <_twiCurrentHandler>
    55da:	90 91 dc 18 	lds	r25, 0x18DC	; 0x8018dc <_twiCurrentHandler+0x1>
    55de:	dc 01       	movw	r26, r24
    55e0:	12 96       	adiw	r26, 0x02	; 2
    55e2:	ed 91       	ld	r30, X+
    55e4:	fc 91       	ld	r31, X
    55e6:	13 97       	sbiw	r26, 0x03	; 3
    55e8:	30 97       	sbiw	r30, 0x00	; 0
    55ea:	09 f4       	brne	.+2      	; 0x55ee <__vector_39+0x8e>
    55ec:	63 c0       	rjmp	.+198    	; 0x56b4 <__vector_39+0x154>
    55ee:	20 e0       	ldi	r18, 0x00	; 0
    55f0:	40 e0       	ldi	r20, 0x00	; 0
    55f2:	50 e0       	ldi	r21, 0x00	; 0
    55f4:	64 e0       	ldi	r22, 0x04	; 4
    55f6:	19 95       	eicall
    55f8:	5d c0       	rjmp	.+186    	; 0x56b4 <__vector_39+0x154>
    55fa:	e0 91 da 18 	lds	r30, 0x18DA	; 0x8018da <_index.1885>
    55fe:	81 e0       	ldi	r24, 0x01	; 1
    5600:	8e 0f       	add	r24, r30
    5602:	80 93 da 18 	sts	0x18DA, r24	; 0x8018da <_index.1885>
    5606:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    560a:	f0 e0       	ldi	r31, 0x00	; 0
    560c:	e2 52       	subi	r30, 0x22	; 34
    560e:	f7 4e       	sbci	r31, 0xE7	; 231
    5610:	80 83       	st	Z, r24
    5612:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5616:	80 34       	cpi	r24, 0x40	; 64
    5618:	11 f4       	brne	.+4      	; 0x561e <__vector_39+0xbe>
    561a:	10 92 da 18 	sts	0x18DA, r1	; 0x8018da <_index.1885>
    561e:	20 91 da 18 	lds	r18, 0x18DA	; 0x8018da <_index.1885>
    5622:	30 e0       	ldi	r19, 0x00	; 0
    5624:	80 91 dd 18 	lds	r24, 0x18DD	; 0x8018dd <_twiMessageLen>
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	01 97       	sbiw	r24, 0x01	; 1
    562c:	28 17       	cp	r18, r24
    562e:	39 07       	cpc	r19, r25
    5630:	24 f4       	brge	.+8      	; 0x563a <__vector_39+0xda>
    5632:	85 ec       	ldi	r24, 0xC5	; 197
    5634:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5638:	3d c0       	rjmp	.+122    	; 0x56b4 <__vector_39+0x154>
    563a:	85 e8       	ldi	r24, 0x85	; 133
    563c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5640:	39 c0       	rjmp	.+114    	; 0x56b4 <__vector_39+0x154>
    5642:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5646:	e0 91 da 18 	lds	r30, 0x18DA	; 0x8018da <_index.1885>
    564a:	f0 e0       	ldi	r31, 0x00	; 0
    564c:	e2 52       	subi	r30, 0x22	; 34
    564e:	f7 4e       	sbci	r31, 0xE7	; 231
    5650:	80 83       	st	Z, r24
    5652:	84 e9       	ldi	r24, 0x94	; 148
    5654:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5658:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <_twiCurrentHandler>
    565c:	90 91 dc 18 	lds	r25, 0x18DC	; 0x8018dc <_twiCurrentHandler+0x1>
    5660:	dc 01       	movw	r26, r24
    5662:	12 96       	adiw	r26, 0x02	; 2
    5664:	ed 91       	ld	r30, X+
    5666:	fc 91       	ld	r31, X
    5668:	13 97       	sbiw	r26, 0x03	; 3
    566a:	30 97       	sbiw	r30, 0x00	; 0
    566c:	19 f1       	breq	.+70     	; 0x56b4 <__vector_39+0x154>
    566e:	20 91 dd 18 	lds	r18, 0x18DD	; 0x8018dd <_twiMessageLen>
    5672:	4e ed       	ldi	r20, 0xDE	; 222
    5674:	58 e1       	ldi	r21, 0x18	; 24
    5676:	65 e0       	ldi	r22, 0x05	; 5
    5678:	19 95       	eicall
    567a:	1c c0       	rjmp	.+56     	; 0x56b4 <__vector_39+0x154>
    567c:	85 ea       	ldi	r24, 0xA5	; 165
    567e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5682:	18 c0       	rjmp	.+48     	; 0x56b4 <__vector_39+0x154>
    5684:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5688:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    568c:	84 e0       	ldi	r24, 0x04	; 4
    568e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5692:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <_twiCurrentHandler>
    5696:	90 91 dc 18 	lds	r25, 0x18DC	; 0x8018dc <_twiCurrentHandler+0x1>
    569a:	dc 01       	movw	r26, r24
    569c:	12 96       	adiw	r26, 0x02	; 2
    569e:	ed 91       	ld	r30, X+
    56a0:	fc 91       	ld	r31, X
    56a2:	13 97       	sbiw	r26, 0x03	; 3
    56a4:	30 97       	sbiw	r30, 0x00	; 0
    56a6:	31 f0       	breq	.+12     	; 0x56b4 <__vector_39+0x154>
    56a8:	20 e0       	ldi	r18, 0x00	; 0
    56aa:	40 e0       	ldi	r20, 0x00	; 0
    56ac:	50 e0       	ldi	r21, 0x00	; 0
    56ae:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    56b2:	19 95       	eicall
    56b4:	ff 91       	pop	r31
    56b6:	ef 91       	pop	r30
    56b8:	bf 91       	pop	r27
    56ba:	af 91       	pop	r26
    56bc:	9f 91       	pop	r25
    56be:	8f 91       	pop	r24
    56c0:	7f 91       	pop	r23
    56c2:	6f 91       	pop	r22
    56c4:	5f 91       	pop	r21
    56c6:	4f 91       	pop	r20
    56c8:	3f 91       	pop	r19
    56ca:	2f 91       	pop	r18
    56cc:	0f 90       	pop	r0
    56ce:	0b be       	out	0x3b, r0	; 59
    56d0:	0f 90       	pop	r0
    56d2:	0f be       	out	0x3f, r0	; 63
    56d4:	0f 90       	pop	r0
    56d6:	1f 90       	pop	r1
    56d8:	18 95       	reti

000056da <fifo_init>:
    56da:	fc 01       	movw	r30, r24
    56dc:	41 11       	cpse	r20, r1
    56de:	01 c0       	rjmp	.+2      	; 0x56e2 <fifo_init+0x8>
    56e0:	41 d3       	rcall	.+1666   	; 0x5d64 <abort>
    56e2:	84 2f       	mov	r24, r20
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	9c 01       	movw	r18, r24
    56e8:	21 50       	subi	r18, 0x01	; 1
    56ea:	31 09       	sbc	r19, r1
    56ec:	82 23       	and	r24, r18
    56ee:	93 23       	and	r25, r19
    56f0:	89 2b       	or	r24, r25
    56f2:	09 f0       	breq	.+2      	; 0x56f6 <fifo_init+0x1c>
    56f4:	37 d3       	rcall	.+1646   	; 0x5d64 <abort>
    56f6:	41 38       	cpi	r20, 0x81	; 129
    56f8:	08 f0       	brcs	.+2      	; 0x56fc <fifo_init+0x22>
    56fa:	34 d3       	rcall	.+1640   	; 0x5d64 <abort>
    56fc:	12 82       	std	Z+2, r1	; 0x02
    56fe:	13 82       	std	Z+3, r1	; 0x03
    5700:	44 83       	std	Z+4, r20	; 0x04
    5702:	44 0f       	add	r20, r20
    5704:	41 50       	subi	r20, 0x01	; 1
    5706:	45 83       	std	Z+5, r20	; 0x05
    5708:	71 83       	std	Z+1, r23	; 0x01
    570a:	60 83       	st	Z, r22
    570c:	80 e0       	ldi	r24, 0x00	; 0
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	08 95       	ret

00005712 <__subsf3>:
    5712:	50 58       	subi	r21, 0x80	; 128

00005714 <__addsf3>:
    5714:	bb 27       	eor	r27, r27
    5716:	aa 27       	eor	r26, r26
    5718:	0e d0       	rcall	.+28     	; 0x5736 <__addsf3x>
    571a:	21 c1       	rjmp	.+578    	; 0x595e <__fp_round>
    571c:	12 d1       	rcall	.+548    	; 0x5942 <__fp_pscA>
    571e:	30 f0       	brcs	.+12     	; 0x572c <__addsf3+0x18>
    5720:	17 d1       	rcall	.+558    	; 0x5950 <__fp_pscB>
    5722:	20 f0       	brcs	.+8      	; 0x572c <__addsf3+0x18>
    5724:	31 f4       	brne	.+12     	; 0x5732 <__addsf3+0x1e>
    5726:	9f 3f       	cpi	r25, 0xFF	; 255
    5728:	11 f4       	brne	.+4      	; 0x572e <__addsf3+0x1a>
    572a:	1e f4       	brtc	.+6      	; 0x5732 <__addsf3+0x1e>
    572c:	07 c1       	rjmp	.+526    	; 0x593c <__fp_nan>
    572e:	0e f4       	brtc	.+2      	; 0x5732 <__addsf3+0x1e>
    5730:	e0 95       	com	r30
    5732:	e7 fb       	bst	r30, 7
    5734:	fd c0       	rjmp	.+506    	; 0x5930 <__fp_inf>

00005736 <__addsf3x>:
    5736:	e9 2f       	mov	r30, r25
    5738:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__fp_split3>
    573c:	78 f3       	brcs	.-34     	; 0x571c <__addsf3+0x8>
    573e:	ba 17       	cp	r27, r26
    5740:	62 07       	cpc	r22, r18
    5742:	73 07       	cpc	r23, r19
    5744:	84 07       	cpc	r24, r20
    5746:	95 07       	cpc	r25, r21
    5748:	20 f0       	brcs	.+8      	; 0x5752 <__addsf3x+0x1c>
    574a:	79 f4       	brne	.+30     	; 0x576a <__addsf3x+0x34>
    574c:	a6 f5       	brtc	.+104    	; 0x57b6 <__addsf3x+0x80>
    574e:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__fp_zero>
    5752:	0e f4       	brtc	.+2      	; 0x5756 <__addsf3x+0x20>
    5754:	e0 95       	com	r30
    5756:	0b 2e       	mov	r0, r27
    5758:	ba 2f       	mov	r27, r26
    575a:	a0 2d       	mov	r26, r0
    575c:	0b 01       	movw	r0, r22
    575e:	b9 01       	movw	r22, r18
    5760:	90 01       	movw	r18, r0
    5762:	0c 01       	movw	r0, r24
    5764:	ca 01       	movw	r24, r20
    5766:	a0 01       	movw	r20, r0
    5768:	11 24       	eor	r1, r1
    576a:	ff 27       	eor	r31, r31
    576c:	59 1b       	sub	r21, r25
    576e:	99 f0       	breq	.+38     	; 0x5796 <__addsf3x+0x60>
    5770:	59 3f       	cpi	r21, 0xF9	; 249
    5772:	50 f4       	brcc	.+20     	; 0x5788 <__addsf3x+0x52>
    5774:	50 3e       	cpi	r21, 0xE0	; 224
    5776:	68 f1       	brcs	.+90     	; 0x57d2 <__addsf3x+0x9c>
    5778:	1a 16       	cp	r1, r26
    577a:	f0 40       	sbci	r31, 0x00	; 0
    577c:	a2 2f       	mov	r26, r18
    577e:	23 2f       	mov	r18, r19
    5780:	34 2f       	mov	r19, r20
    5782:	44 27       	eor	r20, r20
    5784:	58 5f       	subi	r21, 0xF8	; 248
    5786:	f3 cf       	rjmp	.-26     	; 0x576e <__addsf3x+0x38>
    5788:	46 95       	lsr	r20
    578a:	37 95       	ror	r19
    578c:	27 95       	ror	r18
    578e:	a7 95       	ror	r26
    5790:	f0 40       	sbci	r31, 0x00	; 0
    5792:	53 95       	inc	r21
    5794:	c9 f7       	brne	.-14     	; 0x5788 <__addsf3x+0x52>
    5796:	7e f4       	brtc	.+30     	; 0x57b6 <__addsf3x+0x80>
    5798:	1f 16       	cp	r1, r31
    579a:	ba 0b       	sbc	r27, r26
    579c:	62 0b       	sbc	r22, r18
    579e:	73 0b       	sbc	r23, r19
    57a0:	84 0b       	sbc	r24, r20
    57a2:	ba f0       	brmi	.+46     	; 0x57d2 <__addsf3x+0x9c>
    57a4:	91 50       	subi	r25, 0x01	; 1
    57a6:	a1 f0       	breq	.+40     	; 0x57d0 <__addsf3x+0x9a>
    57a8:	ff 0f       	add	r31, r31
    57aa:	bb 1f       	adc	r27, r27
    57ac:	66 1f       	adc	r22, r22
    57ae:	77 1f       	adc	r23, r23
    57b0:	88 1f       	adc	r24, r24
    57b2:	c2 f7       	brpl	.-16     	; 0x57a4 <__addsf3x+0x6e>
    57b4:	0e c0       	rjmp	.+28     	; 0x57d2 <__addsf3x+0x9c>
    57b6:	ba 0f       	add	r27, r26
    57b8:	62 1f       	adc	r22, r18
    57ba:	73 1f       	adc	r23, r19
    57bc:	84 1f       	adc	r24, r20
    57be:	48 f4       	brcc	.+18     	; 0x57d2 <__addsf3x+0x9c>
    57c0:	87 95       	ror	r24
    57c2:	77 95       	ror	r23
    57c4:	67 95       	ror	r22
    57c6:	b7 95       	ror	r27
    57c8:	f7 95       	ror	r31
    57ca:	9e 3f       	cpi	r25, 0xFE	; 254
    57cc:	08 f0       	brcs	.+2      	; 0x57d0 <__addsf3x+0x9a>
    57ce:	b1 cf       	rjmp	.-158    	; 0x5732 <__addsf3+0x1e>
    57d0:	93 95       	inc	r25
    57d2:	88 0f       	add	r24, r24
    57d4:	08 f0       	brcs	.+2      	; 0x57d8 <__addsf3x+0xa2>
    57d6:	99 27       	eor	r25, r25
    57d8:	ee 0f       	add	r30, r30
    57da:	97 95       	ror	r25
    57dc:	87 95       	ror	r24
    57de:	08 95       	ret

000057e0 <__divsf3>:
    57e0:	0d d0       	rcall	.+26     	; 0x57fc <__divsf3x>
    57e2:	bd c0       	rjmp	.+378    	; 0x595e <__fp_round>
    57e4:	b5 d0       	rcall	.+362    	; 0x5950 <__fp_pscB>
    57e6:	48 f0       	brcs	.+18     	; 0x57fa <__divsf3+0x1a>
    57e8:	ac d0       	rcall	.+344    	; 0x5942 <__fp_pscA>
    57ea:	38 f0       	brcs	.+14     	; 0x57fa <__divsf3+0x1a>
    57ec:	21 f4       	brne	.+8      	; 0x57f6 <__divsf3+0x16>
    57ee:	5f 3f       	cpi	r21, 0xFF	; 255
    57f0:	21 f0       	breq	.+8      	; 0x57fa <__divsf3+0x1a>
    57f2:	9e c0       	rjmp	.+316    	; 0x5930 <__fp_inf>
    57f4:	51 11       	cpse	r21, r1
    57f6:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_szero>
    57fa:	a0 c0       	rjmp	.+320    	; 0x593c <__fp_nan>

000057fc <__divsf3x>:
    57fc:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__fp_split3>
    5800:	88 f3       	brcs	.-30     	; 0x57e4 <__divsf3+0x4>

00005802 <__divsf3_pse>:
    5802:	99 23       	and	r25, r25
    5804:	b9 f3       	breq	.-18     	; 0x57f4 <__divsf3+0x14>
    5806:	55 23       	and	r21, r21
    5808:	a1 f3       	breq	.-24     	; 0x57f2 <__divsf3+0x12>
    580a:	95 1b       	sub	r25, r21
    580c:	55 0b       	sbc	r21, r21
    580e:	bb 27       	eor	r27, r27
    5810:	aa 27       	eor	r26, r26
    5812:	62 17       	cp	r22, r18
    5814:	73 07       	cpc	r23, r19
    5816:	84 07       	cpc	r24, r20
    5818:	38 f0       	brcs	.+14     	; 0x5828 <__divsf3_pse+0x26>
    581a:	9f 5f       	subi	r25, 0xFF	; 255
    581c:	5f 4f       	sbci	r21, 0xFF	; 255
    581e:	22 0f       	add	r18, r18
    5820:	33 1f       	adc	r19, r19
    5822:	44 1f       	adc	r20, r20
    5824:	aa 1f       	adc	r26, r26
    5826:	a9 f3       	breq	.-22     	; 0x5812 <__divsf3_pse+0x10>
    5828:	34 d0       	rcall	.+104    	; 0x5892 <__divsf3_pse+0x90>
    582a:	0e 2e       	mov	r0, r30
    582c:	3a f0       	brmi	.+14     	; 0x583c <__divsf3_pse+0x3a>
    582e:	e0 e8       	ldi	r30, 0x80	; 128
    5830:	31 d0       	rcall	.+98     	; 0x5894 <__divsf3_pse+0x92>
    5832:	91 50       	subi	r25, 0x01	; 1
    5834:	50 40       	sbci	r21, 0x00	; 0
    5836:	e6 95       	lsr	r30
    5838:	00 1c       	adc	r0, r0
    583a:	ca f7       	brpl	.-14     	; 0x582e <__divsf3_pse+0x2c>
    583c:	2a d0       	rcall	.+84     	; 0x5892 <__divsf3_pse+0x90>
    583e:	fe 2f       	mov	r31, r30
    5840:	28 d0       	rcall	.+80     	; 0x5892 <__divsf3_pse+0x90>
    5842:	66 0f       	add	r22, r22
    5844:	77 1f       	adc	r23, r23
    5846:	88 1f       	adc	r24, r24
    5848:	bb 1f       	adc	r27, r27
    584a:	26 17       	cp	r18, r22
    584c:	37 07       	cpc	r19, r23
    584e:	48 07       	cpc	r20, r24
    5850:	ab 07       	cpc	r26, r27
    5852:	b0 e8       	ldi	r27, 0x80	; 128
    5854:	09 f0       	breq	.+2      	; 0x5858 <__divsf3_pse+0x56>
    5856:	bb 0b       	sbc	r27, r27
    5858:	80 2d       	mov	r24, r0
    585a:	bf 01       	movw	r22, r30
    585c:	ff 27       	eor	r31, r31
    585e:	93 58       	subi	r25, 0x83	; 131
    5860:	5f 4f       	sbci	r21, 0xFF	; 255
    5862:	32 f0       	brmi	.+12     	; 0x5870 <__divsf3_pse+0x6e>
    5864:	9e 3f       	cpi	r25, 0xFE	; 254
    5866:	51 05       	cpc	r21, r1
    5868:	70 f0       	brcs	.+28     	; 0x5886 <__divsf3_pse+0x84>
    586a:	62 c0       	rjmp	.+196    	; 0x5930 <__fp_inf>
    586c:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_szero>
    5870:	5f 3f       	cpi	r21, 0xFF	; 255
    5872:	e4 f3       	brlt	.-8      	; 0x586c <__divsf3_pse+0x6a>
    5874:	98 3e       	cpi	r25, 0xE8	; 232
    5876:	d4 f3       	brlt	.-12     	; 0x586c <__divsf3_pse+0x6a>
    5878:	86 95       	lsr	r24
    587a:	77 95       	ror	r23
    587c:	67 95       	ror	r22
    587e:	b7 95       	ror	r27
    5880:	f7 95       	ror	r31
    5882:	9f 5f       	subi	r25, 0xFF	; 255
    5884:	c9 f7       	brne	.-14     	; 0x5878 <__divsf3_pse+0x76>
    5886:	88 0f       	add	r24, r24
    5888:	91 1d       	adc	r25, r1
    588a:	96 95       	lsr	r25
    588c:	87 95       	ror	r24
    588e:	97 f9       	bld	r25, 7
    5890:	08 95       	ret
    5892:	e1 e0       	ldi	r30, 0x01	; 1
    5894:	66 0f       	add	r22, r22
    5896:	77 1f       	adc	r23, r23
    5898:	88 1f       	adc	r24, r24
    589a:	bb 1f       	adc	r27, r27
    589c:	62 17       	cp	r22, r18
    589e:	73 07       	cpc	r23, r19
    58a0:	84 07       	cpc	r24, r20
    58a2:	ba 07       	cpc	r27, r26
    58a4:	20 f0       	brcs	.+8      	; 0x58ae <__divsf3_pse+0xac>
    58a6:	62 1b       	sub	r22, r18
    58a8:	73 0b       	sbc	r23, r19
    58aa:	84 0b       	sbc	r24, r20
    58ac:	ba 0b       	sbc	r27, r26
    58ae:	ee 1f       	adc	r30, r30
    58b0:	88 f7       	brcc	.-30     	; 0x5894 <__divsf3_pse+0x92>
    58b2:	e0 95       	com	r30
    58b4:	08 95       	ret

000058b6 <__floatunsisf>:
    58b6:	e8 94       	clt
    58b8:	09 c0       	rjmp	.+18     	; 0x58cc <__floatsisf+0x12>

000058ba <__floatsisf>:
    58ba:	97 fb       	bst	r25, 7
    58bc:	3e f4       	brtc	.+14     	; 0x58cc <__floatsisf+0x12>
    58be:	90 95       	com	r25
    58c0:	80 95       	com	r24
    58c2:	70 95       	com	r23
    58c4:	61 95       	neg	r22
    58c6:	7f 4f       	sbci	r23, 0xFF	; 255
    58c8:	8f 4f       	sbci	r24, 0xFF	; 255
    58ca:	9f 4f       	sbci	r25, 0xFF	; 255
    58cc:	99 23       	and	r25, r25
    58ce:	a9 f0       	breq	.+42     	; 0x58fa <__floatsisf+0x40>
    58d0:	f9 2f       	mov	r31, r25
    58d2:	96 e9       	ldi	r25, 0x96	; 150
    58d4:	bb 27       	eor	r27, r27
    58d6:	93 95       	inc	r25
    58d8:	f6 95       	lsr	r31
    58da:	87 95       	ror	r24
    58dc:	77 95       	ror	r23
    58de:	67 95       	ror	r22
    58e0:	b7 95       	ror	r27
    58e2:	f1 11       	cpse	r31, r1
    58e4:	f8 cf       	rjmp	.-16     	; 0x58d6 <__floatsisf+0x1c>
    58e6:	fa f4       	brpl	.+62     	; 0x5926 <__floatsisf+0x6c>
    58e8:	bb 0f       	add	r27, r27
    58ea:	11 f4       	brne	.+4      	; 0x58f0 <__floatsisf+0x36>
    58ec:	60 ff       	sbrs	r22, 0
    58ee:	1b c0       	rjmp	.+54     	; 0x5926 <__floatsisf+0x6c>
    58f0:	6f 5f       	subi	r22, 0xFF	; 255
    58f2:	7f 4f       	sbci	r23, 0xFF	; 255
    58f4:	8f 4f       	sbci	r24, 0xFF	; 255
    58f6:	9f 4f       	sbci	r25, 0xFF	; 255
    58f8:	16 c0       	rjmp	.+44     	; 0x5926 <__floatsisf+0x6c>
    58fa:	88 23       	and	r24, r24
    58fc:	11 f0       	breq	.+4      	; 0x5902 <__floatsisf+0x48>
    58fe:	96 e9       	ldi	r25, 0x96	; 150
    5900:	11 c0       	rjmp	.+34     	; 0x5924 <__floatsisf+0x6a>
    5902:	77 23       	and	r23, r23
    5904:	21 f0       	breq	.+8      	; 0x590e <__floatsisf+0x54>
    5906:	9e e8       	ldi	r25, 0x8E	; 142
    5908:	87 2f       	mov	r24, r23
    590a:	76 2f       	mov	r23, r22
    590c:	05 c0       	rjmp	.+10     	; 0x5918 <__floatsisf+0x5e>
    590e:	66 23       	and	r22, r22
    5910:	71 f0       	breq	.+28     	; 0x592e <__floatsisf+0x74>
    5912:	96 e8       	ldi	r25, 0x86	; 134
    5914:	86 2f       	mov	r24, r22
    5916:	70 e0       	ldi	r23, 0x00	; 0
    5918:	60 e0       	ldi	r22, 0x00	; 0
    591a:	2a f0       	brmi	.+10     	; 0x5926 <__floatsisf+0x6c>
    591c:	9a 95       	dec	r25
    591e:	66 0f       	add	r22, r22
    5920:	77 1f       	adc	r23, r23
    5922:	88 1f       	adc	r24, r24
    5924:	da f7       	brpl	.-10     	; 0x591c <__floatsisf+0x62>
    5926:	88 0f       	add	r24, r24
    5928:	96 95       	lsr	r25
    592a:	87 95       	ror	r24
    592c:	97 f9       	bld	r25, 7
    592e:	08 95       	ret

00005930 <__fp_inf>:
    5930:	97 f9       	bld	r25, 7
    5932:	9f 67       	ori	r25, 0x7F	; 127
    5934:	80 e8       	ldi	r24, 0x80	; 128
    5936:	70 e0       	ldi	r23, 0x00	; 0
    5938:	60 e0       	ldi	r22, 0x00	; 0
    593a:	08 95       	ret

0000593c <__fp_nan>:
    593c:	9f ef       	ldi	r25, 0xFF	; 255
    593e:	80 ec       	ldi	r24, 0xC0	; 192
    5940:	08 95       	ret

00005942 <__fp_pscA>:
    5942:	00 24       	eor	r0, r0
    5944:	0a 94       	dec	r0
    5946:	16 16       	cp	r1, r22
    5948:	17 06       	cpc	r1, r23
    594a:	18 06       	cpc	r1, r24
    594c:	09 06       	cpc	r0, r25
    594e:	08 95       	ret

00005950 <__fp_pscB>:
    5950:	00 24       	eor	r0, r0
    5952:	0a 94       	dec	r0
    5954:	12 16       	cp	r1, r18
    5956:	13 06       	cpc	r1, r19
    5958:	14 06       	cpc	r1, r20
    595a:	05 06       	cpc	r0, r21
    595c:	08 95       	ret

0000595e <__fp_round>:
    595e:	09 2e       	mov	r0, r25
    5960:	03 94       	inc	r0
    5962:	00 0c       	add	r0, r0
    5964:	11 f4       	brne	.+4      	; 0x596a <__fp_round+0xc>
    5966:	88 23       	and	r24, r24
    5968:	52 f0       	brmi	.+20     	; 0x597e <__fp_round+0x20>
    596a:	bb 0f       	add	r27, r27
    596c:	40 f4       	brcc	.+16     	; 0x597e <__fp_round+0x20>
    596e:	bf 2b       	or	r27, r31
    5970:	11 f4       	brne	.+4      	; 0x5976 <__fp_round+0x18>
    5972:	60 ff       	sbrs	r22, 0
    5974:	04 c0       	rjmp	.+8      	; 0x597e <__fp_round+0x20>
    5976:	6f 5f       	subi	r22, 0xFF	; 255
    5978:	7f 4f       	sbci	r23, 0xFF	; 255
    597a:	8f 4f       	sbci	r24, 0xFF	; 255
    597c:	9f 4f       	sbci	r25, 0xFF	; 255
    597e:	08 95       	ret

00005980 <__mulsf3>:
    5980:	0c d0       	rcall	.+24     	; 0x599a <__mulsf3x>
    5982:	ed cf       	rjmp	.-38     	; 0x595e <__fp_round>
    5984:	de df       	rcall	.-68     	; 0x5942 <__fp_pscA>
    5986:	28 f0       	brcs	.+10     	; 0x5992 <__mulsf3+0x12>
    5988:	e3 df       	rcall	.-58     	; 0x5950 <__fp_pscB>
    598a:	18 f0       	brcs	.+6      	; 0x5992 <__mulsf3+0x12>
    598c:	95 23       	and	r25, r21
    598e:	09 f0       	breq	.+2      	; 0x5992 <__mulsf3+0x12>
    5990:	cf cf       	rjmp	.-98     	; 0x5930 <__fp_inf>
    5992:	d4 cf       	rjmp	.-88     	; 0x593c <__fp_nan>
    5994:	11 24       	eor	r1, r1
    5996:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_szero>

0000599a <__mulsf3x>:
    599a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__fp_split3>
    599e:	90 f3       	brcs	.-28     	; 0x5984 <__mulsf3+0x4>

000059a0 <__mulsf3_pse>:
    59a0:	95 9f       	mul	r25, r21
    59a2:	c1 f3       	breq	.-16     	; 0x5994 <__mulsf3+0x14>
    59a4:	95 0f       	add	r25, r21
    59a6:	50 e0       	ldi	r21, 0x00	; 0
    59a8:	55 1f       	adc	r21, r21
    59aa:	62 9f       	mul	r22, r18
    59ac:	f0 01       	movw	r30, r0
    59ae:	72 9f       	mul	r23, r18
    59b0:	bb 27       	eor	r27, r27
    59b2:	f0 0d       	add	r31, r0
    59b4:	b1 1d       	adc	r27, r1
    59b6:	63 9f       	mul	r22, r19
    59b8:	aa 27       	eor	r26, r26
    59ba:	f0 0d       	add	r31, r0
    59bc:	b1 1d       	adc	r27, r1
    59be:	aa 1f       	adc	r26, r26
    59c0:	64 9f       	mul	r22, r20
    59c2:	66 27       	eor	r22, r22
    59c4:	b0 0d       	add	r27, r0
    59c6:	a1 1d       	adc	r26, r1
    59c8:	66 1f       	adc	r22, r22
    59ca:	82 9f       	mul	r24, r18
    59cc:	22 27       	eor	r18, r18
    59ce:	b0 0d       	add	r27, r0
    59d0:	a1 1d       	adc	r26, r1
    59d2:	62 1f       	adc	r22, r18
    59d4:	73 9f       	mul	r23, r19
    59d6:	b0 0d       	add	r27, r0
    59d8:	a1 1d       	adc	r26, r1
    59da:	62 1f       	adc	r22, r18
    59dc:	83 9f       	mul	r24, r19
    59de:	a0 0d       	add	r26, r0
    59e0:	61 1d       	adc	r22, r1
    59e2:	22 1f       	adc	r18, r18
    59e4:	74 9f       	mul	r23, r20
    59e6:	33 27       	eor	r19, r19
    59e8:	a0 0d       	add	r26, r0
    59ea:	61 1d       	adc	r22, r1
    59ec:	23 1f       	adc	r18, r19
    59ee:	84 9f       	mul	r24, r20
    59f0:	60 0d       	add	r22, r0
    59f2:	21 1d       	adc	r18, r1
    59f4:	82 2f       	mov	r24, r18
    59f6:	76 2f       	mov	r23, r22
    59f8:	6a 2f       	mov	r22, r26
    59fa:	11 24       	eor	r1, r1
    59fc:	9f 57       	subi	r25, 0x7F	; 127
    59fe:	50 40       	sbci	r21, 0x00	; 0
    5a00:	92 f0       	brmi	.+36     	; 0x5a26 <__mulsf3_pse+0x86>
    5a02:	e9 f0       	breq	.+58     	; 0x5a3e <__mulsf3_pse+0x9e>
    5a04:	88 23       	and	r24, r24
    5a06:	4a f0       	brmi	.+18     	; 0x5a1a <__mulsf3_pse+0x7a>
    5a08:	ee 0f       	add	r30, r30
    5a0a:	ff 1f       	adc	r31, r31
    5a0c:	bb 1f       	adc	r27, r27
    5a0e:	66 1f       	adc	r22, r22
    5a10:	77 1f       	adc	r23, r23
    5a12:	88 1f       	adc	r24, r24
    5a14:	91 50       	subi	r25, 0x01	; 1
    5a16:	50 40       	sbci	r21, 0x00	; 0
    5a18:	a9 f7       	brne	.-22     	; 0x5a04 <__mulsf3_pse+0x64>
    5a1a:	9e 3f       	cpi	r25, 0xFE	; 254
    5a1c:	51 05       	cpc	r21, r1
    5a1e:	78 f0       	brcs	.+30     	; 0x5a3e <__mulsf3_pse+0x9e>
    5a20:	87 cf       	rjmp	.-242    	; 0x5930 <__fp_inf>
    5a22:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_szero>
    5a26:	5f 3f       	cpi	r21, 0xFF	; 255
    5a28:	e4 f3       	brlt	.-8      	; 0x5a22 <__mulsf3_pse+0x82>
    5a2a:	98 3e       	cpi	r25, 0xE8	; 232
    5a2c:	d4 f3       	brlt	.-12     	; 0x5a22 <__mulsf3_pse+0x82>
    5a2e:	86 95       	lsr	r24
    5a30:	77 95       	ror	r23
    5a32:	67 95       	ror	r22
    5a34:	b7 95       	ror	r27
    5a36:	f7 95       	ror	r31
    5a38:	e7 95       	ror	r30
    5a3a:	9f 5f       	subi	r25, 0xFF	; 255
    5a3c:	c1 f7       	brne	.-16     	; 0x5a2e <__mulsf3_pse+0x8e>
    5a3e:	fe 2b       	or	r31, r30
    5a40:	88 0f       	add	r24, r24
    5a42:	91 1d       	adc	r25, r1
    5a44:	96 95       	lsr	r25
    5a46:	87 95       	ror	r24
    5a48:	97 f9       	bld	r25, 7
    5a4a:	08 95       	ret

00005a4c <__udivmodhi4>:
    5a4c:	aa 1b       	sub	r26, r26
    5a4e:	bb 1b       	sub	r27, r27
    5a50:	51 e1       	ldi	r21, 0x11	; 17
    5a52:	07 c0       	rjmp	.+14     	; 0x5a62 <__udivmodhi4_ep>

00005a54 <__udivmodhi4_loop>:
    5a54:	aa 1f       	adc	r26, r26
    5a56:	bb 1f       	adc	r27, r27
    5a58:	a6 17       	cp	r26, r22
    5a5a:	b7 07       	cpc	r27, r23
    5a5c:	10 f0       	brcs	.+4      	; 0x5a62 <__udivmodhi4_ep>
    5a5e:	a6 1b       	sub	r26, r22
    5a60:	b7 0b       	sbc	r27, r23

00005a62 <__udivmodhi4_ep>:
    5a62:	88 1f       	adc	r24, r24
    5a64:	99 1f       	adc	r25, r25
    5a66:	5a 95       	dec	r21
    5a68:	a9 f7       	brne	.-22     	; 0x5a54 <__udivmodhi4_loop>
    5a6a:	80 95       	com	r24
    5a6c:	90 95       	com	r25
    5a6e:	bc 01       	movw	r22, r24
    5a70:	cd 01       	movw	r24, r26
    5a72:	08 95       	ret

00005a74 <__divmodhi4>:
    5a74:	97 fb       	bst	r25, 7
    5a76:	07 2e       	mov	r0, r23
    5a78:	16 f4       	brtc	.+4      	; 0x5a7e <__divmodhi4+0xa>
    5a7a:	00 94       	com	r0
    5a7c:	06 d0       	rcall	.+12     	; 0x5a8a <__divmodhi4_neg1>
    5a7e:	77 fd       	sbrc	r23, 7
    5a80:	08 d0       	rcall	.+16     	; 0x5a92 <__divmodhi4_neg2>
    5a82:	e4 df       	rcall	.-56     	; 0x5a4c <__udivmodhi4>
    5a84:	07 fc       	sbrc	r0, 7
    5a86:	05 d0       	rcall	.+10     	; 0x5a92 <__divmodhi4_neg2>
    5a88:	3e f4       	brtc	.+14     	; 0x5a98 <__divmodhi4_exit>

00005a8a <__divmodhi4_neg1>:
    5a8a:	90 95       	com	r25
    5a8c:	81 95       	neg	r24
    5a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a90:	08 95       	ret

00005a92 <__divmodhi4_neg2>:
    5a92:	70 95       	com	r23
    5a94:	61 95       	neg	r22
    5a96:	7f 4f       	sbci	r23, 0xFF	; 255

00005a98 <__divmodhi4_exit>:
    5a98:	08 95       	ret

00005a9a <__udivmodsi4>:
    5a9a:	a1 e2       	ldi	r26, 0x21	; 33
    5a9c:	1a 2e       	mov	r1, r26
    5a9e:	aa 1b       	sub	r26, r26
    5aa0:	bb 1b       	sub	r27, r27
    5aa2:	fd 01       	movw	r30, r26
    5aa4:	0d c0       	rjmp	.+26     	; 0x5ac0 <__udivmodsi4_ep>

00005aa6 <__udivmodsi4_loop>:
    5aa6:	aa 1f       	adc	r26, r26
    5aa8:	bb 1f       	adc	r27, r27
    5aaa:	ee 1f       	adc	r30, r30
    5aac:	ff 1f       	adc	r31, r31
    5aae:	a2 17       	cp	r26, r18
    5ab0:	b3 07       	cpc	r27, r19
    5ab2:	e4 07       	cpc	r30, r20
    5ab4:	f5 07       	cpc	r31, r21
    5ab6:	20 f0       	brcs	.+8      	; 0x5ac0 <__udivmodsi4_ep>
    5ab8:	a2 1b       	sub	r26, r18
    5aba:	b3 0b       	sbc	r27, r19
    5abc:	e4 0b       	sbc	r30, r20
    5abe:	f5 0b       	sbc	r31, r21

00005ac0 <__udivmodsi4_ep>:
    5ac0:	66 1f       	adc	r22, r22
    5ac2:	77 1f       	adc	r23, r23
    5ac4:	88 1f       	adc	r24, r24
    5ac6:	99 1f       	adc	r25, r25
    5ac8:	1a 94       	dec	r1
    5aca:	69 f7       	brne	.-38     	; 0x5aa6 <__udivmodsi4_loop>
    5acc:	60 95       	com	r22
    5ace:	70 95       	com	r23
    5ad0:	80 95       	com	r24
    5ad2:	90 95       	com	r25
    5ad4:	9b 01       	movw	r18, r22
    5ad6:	ac 01       	movw	r20, r24
    5ad8:	bd 01       	movw	r22, r26
    5ada:	cf 01       	movw	r24, r30
    5adc:	08 95       	ret

00005ade <__tablejump2__>:
    5ade:	ee 0f       	add	r30, r30
    5ae0:	ff 1f       	adc	r31, r31
    5ae2:	88 1f       	adc	r24, r24
    5ae4:	8b bf       	out	0x3b, r24	; 59
    5ae6:	07 90       	elpm	r0, Z+
    5ae8:	f6 91       	elpm	r31, Z
    5aea:	e0 2d       	mov	r30, r0
    5aec:	19 94       	eijmp

00005aee <calloc>:
    5aee:	0f 93       	push	r16
    5af0:	1f 93       	push	r17
    5af2:	cf 93       	push	r28
    5af4:	df 93       	push	r29
    5af6:	86 9f       	mul	r24, r22
    5af8:	80 01       	movw	r16, r0
    5afa:	87 9f       	mul	r24, r23
    5afc:	10 0d       	add	r17, r0
    5afe:	96 9f       	mul	r25, r22
    5b00:	10 0d       	add	r17, r0
    5b02:	11 24       	eor	r1, r1
    5b04:	c8 01       	movw	r24, r16
    5b06:	0d d0       	rcall	.+26     	; 0x5b22 <malloc>
    5b08:	ec 01       	movw	r28, r24
    5b0a:	00 97       	sbiw	r24, 0x00	; 0
    5b0c:	21 f0       	breq	.+8      	; 0x5b16 <calloc+0x28>
    5b0e:	a8 01       	movw	r20, r16
    5b10:	60 e0       	ldi	r22, 0x00	; 0
    5b12:	70 e0       	ldi	r23, 0x00	; 0
    5b14:	34 d1       	rcall	.+616    	; 0x5d7e <memset>
    5b16:	ce 01       	movw	r24, r28
    5b18:	df 91       	pop	r29
    5b1a:	cf 91       	pop	r28
    5b1c:	1f 91       	pop	r17
    5b1e:	0f 91       	pop	r16
    5b20:	08 95       	ret

00005b22 <malloc>:
    5b22:	0f 93       	push	r16
    5b24:	1f 93       	push	r17
    5b26:	cf 93       	push	r28
    5b28:	df 93       	push	r29
    5b2a:	82 30       	cpi	r24, 0x02	; 2
    5b2c:	91 05       	cpc	r25, r1
    5b2e:	10 f4       	brcc	.+4      	; 0x5b34 <malloc+0x12>
    5b30:	82 e0       	ldi	r24, 0x02	; 2
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <__flp>
    5b38:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <__flp+0x1>
    5b3c:	20 e0       	ldi	r18, 0x00	; 0
    5b3e:	30 e0       	ldi	r19, 0x00	; 0
    5b40:	a0 e0       	ldi	r26, 0x00	; 0
    5b42:	b0 e0       	ldi	r27, 0x00	; 0
    5b44:	30 97       	sbiw	r30, 0x00	; 0
    5b46:	19 f1       	breq	.+70     	; 0x5b8e <malloc+0x6c>
    5b48:	40 81       	ld	r20, Z
    5b4a:	51 81       	ldd	r21, Z+1	; 0x01
    5b4c:	02 81       	ldd	r16, Z+2	; 0x02
    5b4e:	13 81       	ldd	r17, Z+3	; 0x03
    5b50:	48 17       	cp	r20, r24
    5b52:	59 07       	cpc	r21, r25
    5b54:	c8 f0       	brcs	.+50     	; 0x5b88 <malloc+0x66>
    5b56:	84 17       	cp	r24, r20
    5b58:	95 07       	cpc	r25, r21
    5b5a:	69 f4       	brne	.+26     	; 0x5b76 <malloc+0x54>
    5b5c:	10 97       	sbiw	r26, 0x00	; 0
    5b5e:	31 f0       	breq	.+12     	; 0x5b6c <malloc+0x4a>
    5b60:	12 96       	adiw	r26, 0x02	; 2
    5b62:	0c 93       	st	X, r16
    5b64:	12 97       	sbiw	r26, 0x02	; 2
    5b66:	13 96       	adiw	r26, 0x03	; 3
    5b68:	1c 93       	st	X, r17
    5b6a:	27 c0       	rjmp	.+78     	; 0x5bba <malloc+0x98>
    5b6c:	00 93 67 19 	sts	0x1967, r16	; 0x801967 <__flp>
    5b70:	10 93 68 19 	sts	0x1968, r17	; 0x801968 <__flp+0x1>
    5b74:	22 c0       	rjmp	.+68     	; 0x5bba <malloc+0x98>
    5b76:	21 15       	cp	r18, r1
    5b78:	31 05       	cpc	r19, r1
    5b7a:	19 f0       	breq	.+6      	; 0x5b82 <malloc+0x60>
    5b7c:	42 17       	cp	r20, r18
    5b7e:	53 07       	cpc	r21, r19
    5b80:	18 f4       	brcc	.+6      	; 0x5b88 <malloc+0x66>
    5b82:	9a 01       	movw	r18, r20
    5b84:	bd 01       	movw	r22, r26
    5b86:	ef 01       	movw	r28, r30
    5b88:	df 01       	movw	r26, r30
    5b8a:	f8 01       	movw	r30, r16
    5b8c:	db cf       	rjmp	.-74     	; 0x5b44 <malloc+0x22>
    5b8e:	21 15       	cp	r18, r1
    5b90:	31 05       	cpc	r19, r1
    5b92:	f9 f0       	breq	.+62     	; 0x5bd2 <malloc+0xb0>
    5b94:	28 1b       	sub	r18, r24
    5b96:	39 0b       	sbc	r19, r25
    5b98:	24 30       	cpi	r18, 0x04	; 4
    5b9a:	31 05       	cpc	r19, r1
    5b9c:	80 f4       	brcc	.+32     	; 0x5bbe <malloc+0x9c>
    5b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    5ba2:	61 15       	cp	r22, r1
    5ba4:	71 05       	cpc	r23, r1
    5ba6:	21 f0       	breq	.+8      	; 0x5bb0 <malloc+0x8e>
    5ba8:	fb 01       	movw	r30, r22
    5baa:	93 83       	std	Z+3, r25	; 0x03
    5bac:	82 83       	std	Z+2, r24	; 0x02
    5bae:	04 c0       	rjmp	.+8      	; 0x5bb8 <malloc+0x96>
    5bb0:	90 93 68 19 	sts	0x1968, r25	; 0x801968 <__flp+0x1>
    5bb4:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <__flp>
    5bb8:	fe 01       	movw	r30, r28
    5bba:	32 96       	adiw	r30, 0x02	; 2
    5bbc:	44 c0       	rjmp	.+136    	; 0x5c46 <malloc+0x124>
    5bbe:	fe 01       	movw	r30, r28
    5bc0:	e2 0f       	add	r30, r18
    5bc2:	f3 1f       	adc	r31, r19
    5bc4:	81 93       	st	Z+, r24
    5bc6:	91 93       	st	Z+, r25
    5bc8:	22 50       	subi	r18, 0x02	; 2
    5bca:	31 09       	sbc	r19, r1
    5bcc:	39 83       	std	Y+1, r19	; 0x01
    5bce:	28 83       	st	Y, r18
    5bd0:	3a c0       	rjmp	.+116    	; 0x5c46 <malloc+0x124>
    5bd2:	20 91 65 19 	lds	r18, 0x1965	; 0x801965 <__brkval>
    5bd6:	30 91 66 19 	lds	r19, 0x1966	; 0x801966 <__brkval+0x1>
    5bda:	23 2b       	or	r18, r19
    5bdc:	41 f4       	brne	.+16     	; 0x5bee <malloc+0xcc>
    5bde:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5be2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5be6:	30 93 66 19 	sts	0x1966, r19	; 0x801966 <__brkval+0x1>
    5bea:	20 93 65 19 	sts	0x1965, r18	; 0x801965 <__brkval>
    5bee:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5bf2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5bf6:	21 15       	cp	r18, r1
    5bf8:	31 05       	cpc	r19, r1
    5bfa:	41 f4       	brne	.+16     	; 0x5c0c <malloc+0xea>
    5bfc:	2d b7       	in	r18, 0x3d	; 61
    5bfe:	3e b7       	in	r19, 0x3e	; 62
    5c00:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5c04:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5c08:	24 1b       	sub	r18, r20
    5c0a:	35 0b       	sbc	r19, r21
    5c0c:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <__brkval>
    5c10:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <__brkval+0x1>
    5c14:	e2 17       	cp	r30, r18
    5c16:	f3 07       	cpc	r31, r19
    5c18:	a0 f4       	brcc	.+40     	; 0x5c42 <malloc+0x120>
    5c1a:	2e 1b       	sub	r18, r30
    5c1c:	3f 0b       	sbc	r19, r31
    5c1e:	28 17       	cp	r18, r24
    5c20:	39 07       	cpc	r19, r25
    5c22:	78 f0       	brcs	.+30     	; 0x5c42 <malloc+0x120>
    5c24:	ac 01       	movw	r20, r24
    5c26:	4e 5f       	subi	r20, 0xFE	; 254
    5c28:	5f 4f       	sbci	r21, 0xFF	; 255
    5c2a:	24 17       	cp	r18, r20
    5c2c:	35 07       	cpc	r19, r21
    5c2e:	48 f0       	brcs	.+18     	; 0x5c42 <malloc+0x120>
    5c30:	4e 0f       	add	r20, r30
    5c32:	5f 1f       	adc	r21, r31
    5c34:	50 93 66 19 	sts	0x1966, r21	; 0x801966 <__brkval+0x1>
    5c38:	40 93 65 19 	sts	0x1965, r20	; 0x801965 <__brkval>
    5c3c:	81 93       	st	Z+, r24
    5c3e:	91 93       	st	Z+, r25
    5c40:	02 c0       	rjmp	.+4      	; 0x5c46 <malloc+0x124>
    5c42:	e0 e0       	ldi	r30, 0x00	; 0
    5c44:	f0 e0       	ldi	r31, 0x00	; 0
    5c46:	cf 01       	movw	r24, r30
    5c48:	df 91       	pop	r29
    5c4a:	cf 91       	pop	r28
    5c4c:	1f 91       	pop	r17
    5c4e:	0f 91       	pop	r16
    5c50:	08 95       	ret

00005c52 <free>:
    5c52:	cf 93       	push	r28
    5c54:	df 93       	push	r29
    5c56:	00 97       	sbiw	r24, 0x00	; 0
    5c58:	09 f4       	brne	.+2      	; 0x5c5c <free+0xa>
    5c5a:	81 c0       	rjmp	.+258    	; 0x5d5e <free+0x10c>
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	32 97       	sbiw	r30, 0x02	; 2
    5c60:	13 82       	std	Z+3, r1	; 0x03
    5c62:	12 82       	std	Z+2, r1	; 0x02
    5c64:	a0 91 67 19 	lds	r26, 0x1967	; 0x801967 <__flp>
    5c68:	b0 91 68 19 	lds	r27, 0x1968	; 0x801968 <__flp+0x1>
    5c6c:	10 97       	sbiw	r26, 0x00	; 0
    5c6e:	81 f4       	brne	.+32     	; 0x5c90 <free+0x3e>
    5c70:	20 81       	ld	r18, Z
    5c72:	31 81       	ldd	r19, Z+1	; 0x01
    5c74:	82 0f       	add	r24, r18
    5c76:	93 1f       	adc	r25, r19
    5c78:	20 91 65 19 	lds	r18, 0x1965	; 0x801965 <__brkval>
    5c7c:	30 91 66 19 	lds	r19, 0x1966	; 0x801966 <__brkval+0x1>
    5c80:	28 17       	cp	r18, r24
    5c82:	39 07       	cpc	r19, r25
    5c84:	51 f5       	brne	.+84     	; 0x5cda <free+0x88>
    5c86:	f0 93 66 19 	sts	0x1966, r31	; 0x801966 <__brkval+0x1>
    5c8a:	e0 93 65 19 	sts	0x1965, r30	; 0x801965 <__brkval>
    5c8e:	67 c0       	rjmp	.+206    	; 0x5d5e <free+0x10c>
    5c90:	ed 01       	movw	r28, r26
    5c92:	20 e0       	ldi	r18, 0x00	; 0
    5c94:	30 e0       	ldi	r19, 0x00	; 0
    5c96:	ce 17       	cp	r28, r30
    5c98:	df 07       	cpc	r29, r31
    5c9a:	40 f4       	brcc	.+16     	; 0x5cac <free+0x5a>
    5c9c:	4a 81       	ldd	r20, Y+2	; 0x02
    5c9e:	5b 81       	ldd	r21, Y+3	; 0x03
    5ca0:	9e 01       	movw	r18, r28
    5ca2:	41 15       	cp	r20, r1
    5ca4:	51 05       	cpc	r21, r1
    5ca6:	f1 f0       	breq	.+60     	; 0x5ce4 <free+0x92>
    5ca8:	ea 01       	movw	r28, r20
    5caa:	f5 cf       	rjmp	.-22     	; 0x5c96 <free+0x44>
    5cac:	d3 83       	std	Z+3, r29	; 0x03
    5cae:	c2 83       	std	Z+2, r28	; 0x02
    5cb0:	40 81       	ld	r20, Z
    5cb2:	51 81       	ldd	r21, Z+1	; 0x01
    5cb4:	84 0f       	add	r24, r20
    5cb6:	95 1f       	adc	r25, r21
    5cb8:	c8 17       	cp	r28, r24
    5cba:	d9 07       	cpc	r29, r25
    5cbc:	59 f4       	brne	.+22     	; 0x5cd4 <free+0x82>
    5cbe:	88 81       	ld	r24, Y
    5cc0:	99 81       	ldd	r25, Y+1	; 0x01
    5cc2:	84 0f       	add	r24, r20
    5cc4:	95 1f       	adc	r25, r21
    5cc6:	02 96       	adiw	r24, 0x02	; 2
    5cc8:	91 83       	std	Z+1, r25	; 0x01
    5cca:	80 83       	st	Z, r24
    5ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    5cce:	9b 81       	ldd	r25, Y+3	; 0x03
    5cd0:	93 83       	std	Z+3, r25	; 0x03
    5cd2:	82 83       	std	Z+2, r24	; 0x02
    5cd4:	21 15       	cp	r18, r1
    5cd6:	31 05       	cpc	r19, r1
    5cd8:	29 f4       	brne	.+10     	; 0x5ce4 <free+0x92>
    5cda:	f0 93 68 19 	sts	0x1968, r31	; 0x801968 <__flp+0x1>
    5cde:	e0 93 67 19 	sts	0x1967, r30	; 0x801967 <__flp>
    5ce2:	3d c0       	rjmp	.+122    	; 0x5d5e <free+0x10c>
    5ce4:	e9 01       	movw	r28, r18
    5ce6:	fb 83       	std	Y+3, r31	; 0x03
    5ce8:	ea 83       	std	Y+2, r30	; 0x02
    5cea:	49 91       	ld	r20, Y+
    5cec:	59 91       	ld	r21, Y+
    5cee:	c4 0f       	add	r28, r20
    5cf0:	d5 1f       	adc	r29, r21
    5cf2:	ec 17       	cp	r30, r28
    5cf4:	fd 07       	cpc	r31, r29
    5cf6:	61 f4       	brne	.+24     	; 0x5d10 <free+0xbe>
    5cf8:	80 81       	ld	r24, Z
    5cfa:	91 81       	ldd	r25, Z+1	; 0x01
    5cfc:	84 0f       	add	r24, r20
    5cfe:	95 1f       	adc	r25, r21
    5d00:	02 96       	adiw	r24, 0x02	; 2
    5d02:	e9 01       	movw	r28, r18
    5d04:	99 83       	std	Y+1, r25	; 0x01
    5d06:	88 83       	st	Y, r24
    5d08:	82 81       	ldd	r24, Z+2	; 0x02
    5d0a:	93 81       	ldd	r25, Z+3	; 0x03
    5d0c:	9b 83       	std	Y+3, r25	; 0x03
    5d0e:	8a 83       	std	Y+2, r24	; 0x02
    5d10:	e0 e0       	ldi	r30, 0x00	; 0
    5d12:	f0 e0       	ldi	r31, 0x00	; 0
    5d14:	12 96       	adiw	r26, 0x02	; 2
    5d16:	8d 91       	ld	r24, X+
    5d18:	9c 91       	ld	r25, X
    5d1a:	13 97       	sbiw	r26, 0x03	; 3
    5d1c:	00 97       	sbiw	r24, 0x00	; 0
    5d1e:	19 f0       	breq	.+6      	; 0x5d26 <free+0xd4>
    5d20:	fd 01       	movw	r30, r26
    5d22:	dc 01       	movw	r26, r24
    5d24:	f7 cf       	rjmp	.-18     	; 0x5d14 <free+0xc2>
    5d26:	8d 91       	ld	r24, X+
    5d28:	9c 91       	ld	r25, X
    5d2a:	11 97       	sbiw	r26, 0x01	; 1
    5d2c:	9d 01       	movw	r18, r26
    5d2e:	2e 5f       	subi	r18, 0xFE	; 254
    5d30:	3f 4f       	sbci	r19, 0xFF	; 255
    5d32:	82 0f       	add	r24, r18
    5d34:	93 1f       	adc	r25, r19
    5d36:	20 91 65 19 	lds	r18, 0x1965	; 0x801965 <__brkval>
    5d3a:	30 91 66 19 	lds	r19, 0x1966	; 0x801966 <__brkval+0x1>
    5d3e:	28 17       	cp	r18, r24
    5d40:	39 07       	cpc	r19, r25
    5d42:	69 f4       	brne	.+26     	; 0x5d5e <free+0x10c>
    5d44:	30 97       	sbiw	r30, 0x00	; 0
    5d46:	29 f4       	brne	.+10     	; 0x5d52 <free+0x100>
    5d48:	10 92 68 19 	sts	0x1968, r1	; 0x801968 <__flp+0x1>
    5d4c:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <__flp>
    5d50:	02 c0       	rjmp	.+4      	; 0x5d56 <free+0x104>
    5d52:	13 82       	std	Z+3, r1	; 0x03
    5d54:	12 82       	std	Z+2, r1	; 0x02
    5d56:	b0 93 66 19 	sts	0x1966, r27	; 0x801966 <__brkval+0x1>
    5d5a:	a0 93 65 19 	sts	0x1965, r26	; 0x801965 <__brkval>
    5d5e:	df 91       	pop	r29
    5d60:	cf 91       	pop	r28
    5d62:	08 95       	ret

00005d64 <abort>:
    5d64:	81 e0       	ldi	r24, 0x01	; 1
    5d66:	90 e0       	ldi	r25, 0x00	; 0
    5d68:	f8 94       	cli
    5d6a:	7d c3       	rjmp	.+1786   	; 0x6466 <_exit>

00005d6c <memcpy>:
    5d6c:	fb 01       	movw	r30, r22
    5d6e:	dc 01       	movw	r26, r24
    5d70:	02 c0       	rjmp	.+4      	; 0x5d76 <memcpy+0xa>
    5d72:	01 90       	ld	r0, Z+
    5d74:	0d 92       	st	X+, r0
    5d76:	41 50       	subi	r20, 0x01	; 1
    5d78:	50 40       	sbci	r21, 0x00	; 0
    5d7a:	d8 f7       	brcc	.-10     	; 0x5d72 <memcpy+0x6>
    5d7c:	08 95       	ret

00005d7e <memset>:
    5d7e:	dc 01       	movw	r26, r24
    5d80:	01 c0       	rjmp	.+2      	; 0x5d84 <memset+0x6>
    5d82:	6d 93       	st	X+, r22
    5d84:	41 50       	subi	r20, 0x01	; 1
    5d86:	50 40       	sbci	r21, 0x00	; 0
    5d88:	e0 f7       	brcc	.-8      	; 0x5d82 <memset+0x4>
    5d8a:	08 95       	ret

00005d8c <strcasestr>:
    5d8c:	fb 01       	movw	r30, r22
    5d8e:	51 91       	ld	r21, Z+
    5d90:	55 23       	and	r21, r21
    5d92:	b1 f0       	breq	.+44     	; 0x5dc0 <strcasestr+0x34>
    5d94:	bf 01       	movw	r22, r30
    5d96:	dc 01       	movw	r26, r24
    5d98:	05 2e       	mov	r0, r21
    5d9a:	4d 91       	ld	r20, X+
    5d9c:	44 23       	and	r20, r20
    5d9e:	69 f0       	breq	.+26     	; 0x5dba <strcasestr+0x2e>
    5da0:	10 d0       	rcall	.+32     	; 0x5dc2 <strcasestr+0x36>
    5da2:	d9 f7       	brne	.-10     	; 0x5d9a <strcasestr+0xe>
    5da4:	cd 01       	movw	r24, r26
    5da6:	01 90       	ld	r0, Z+
    5da8:	00 20       	and	r0, r0
    5daa:	49 f0       	breq	.+18     	; 0x5dbe <strcasestr+0x32>
    5dac:	4d 91       	ld	r20, X+
    5dae:	41 11       	cpse	r20, r1
    5db0:	08 d0       	rcall	.+16     	; 0x5dc2 <strcasestr+0x36>
    5db2:	c9 f3       	breq	.-14     	; 0x5da6 <strcasestr+0x1a>
    5db4:	fb 01       	movw	r30, r22
    5db6:	41 11       	cpse	r20, r1
    5db8:	ee cf       	rjmp	.-36     	; 0x5d96 <strcasestr+0xa>
    5dba:	81 e0       	ldi	r24, 0x01	; 1
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	01 97       	sbiw	r24, 0x01	; 1
    5dc0:	08 95       	ret
    5dc2:	40 25       	eor	r20, r0
    5dc4:	39 f0       	breq	.+14     	; 0x5dd4 <strcasestr+0x48>
    5dc6:	40 32       	cpi	r20, 0x20	; 32
    5dc8:	29 f4       	brne	.+10     	; 0x5dd4 <strcasestr+0x48>
    5dca:	40 29       	or	r20, r0
    5dcc:	4b 57       	subi	r20, 0x7B	; 123
    5dce:	46 5e       	subi	r20, 0xE6	; 230
    5dd0:	08 f0       	brcs	.+2      	; 0x5dd4 <strcasestr+0x48>
    5dd2:	18 94       	sez
    5dd4:	08 95       	ret

00005dd6 <strcat>:
    5dd6:	fb 01       	movw	r30, r22
    5dd8:	dc 01       	movw	r26, r24
    5dda:	0d 90       	ld	r0, X+
    5ddc:	00 20       	and	r0, r0
    5dde:	e9 f7       	brne	.-6      	; 0x5dda <strcat+0x4>
    5de0:	11 97       	sbiw	r26, 0x01	; 1
    5de2:	01 90       	ld	r0, Z+
    5de4:	0d 92       	st	X+, r0
    5de6:	00 20       	and	r0, r0
    5de8:	e1 f7       	brne	.-8      	; 0x5de2 <strcat+0xc>
    5dea:	08 95       	ret

00005dec <strcpy>:
    5dec:	fb 01       	movw	r30, r22
    5dee:	dc 01       	movw	r26, r24
    5df0:	01 90       	ld	r0, Z+
    5df2:	0d 92       	st	X+, r0
    5df4:	00 20       	and	r0, r0
    5df6:	e1 f7       	brne	.-8      	; 0x5df0 <strcpy+0x4>
    5df8:	08 95       	ret

00005dfa <strncasecmp>:
    5dfa:	fb 01       	movw	r30, r22
    5dfc:	dc 01       	movw	r26, r24
    5dfe:	41 50       	subi	r20, 0x01	; 1
    5e00:	50 40       	sbci	r21, 0x00	; 0
    5e02:	88 f0       	brcs	.+34     	; 0x5e26 <strncasecmp+0x2c>
    5e04:	8d 91       	ld	r24, X+
    5e06:	81 34       	cpi	r24, 0x41	; 65
    5e08:	1c f0       	brlt	.+6      	; 0x5e10 <strncasecmp+0x16>
    5e0a:	8b 35       	cpi	r24, 0x5B	; 91
    5e0c:	0c f4       	brge	.+2      	; 0x5e10 <strncasecmp+0x16>
    5e0e:	80 5e       	subi	r24, 0xE0	; 224
    5e10:	61 91       	ld	r22, Z+
    5e12:	61 34       	cpi	r22, 0x41	; 65
    5e14:	1c f0       	brlt	.+6      	; 0x5e1c <strncasecmp+0x22>
    5e16:	6b 35       	cpi	r22, 0x5B	; 91
    5e18:	0c f4       	brge	.+2      	; 0x5e1c <strncasecmp+0x22>
    5e1a:	60 5e       	subi	r22, 0xE0	; 224
    5e1c:	86 1b       	sub	r24, r22
    5e1e:	61 11       	cpse	r22, r1
    5e20:	71 f3       	breq	.-36     	; 0x5dfe <strncasecmp+0x4>
    5e22:	99 0b       	sbc	r25, r25
    5e24:	08 95       	ret
    5e26:	88 1b       	sub	r24, r24
    5e28:	fc cf       	rjmp	.-8      	; 0x5e22 <strncasecmp+0x28>

00005e2a <printf>:
    5e2a:	cf 93       	push	r28
    5e2c:	df 93       	push	r29
    5e2e:	cd b7       	in	r28, 0x3d	; 61
    5e30:	de b7       	in	r29, 0x3e	; 62
    5e32:	ae 01       	movw	r20, r28
    5e34:	4a 5f       	subi	r20, 0xFA	; 250
    5e36:	5f 4f       	sbci	r21, 0xFF	; 255
    5e38:	fa 01       	movw	r30, r20
    5e3a:	61 91       	ld	r22, Z+
    5e3c:	71 91       	ld	r23, Z+
    5e3e:	af 01       	movw	r20, r30
    5e40:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <__iob+0x2>
    5e44:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <__iob+0x3>
    5e48:	61 d0       	rcall	.+194    	; 0x5f0c <vfprintf>
    5e4a:	df 91       	pop	r29
    5e4c:	cf 91       	pop	r28
    5e4e:	08 95       	ret

00005e50 <puts>:
    5e50:	0f 93       	push	r16
    5e52:	1f 93       	push	r17
    5e54:	cf 93       	push	r28
    5e56:	df 93       	push	r29
    5e58:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <__iob+0x2>
    5e5c:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <__iob+0x3>
    5e60:	23 81       	ldd	r18, Z+3	; 0x03
    5e62:	21 ff       	sbrs	r18, 1
    5e64:	1b c0       	rjmp	.+54     	; 0x5e9c <puts+0x4c>
    5e66:	8c 01       	movw	r16, r24
    5e68:	d0 e0       	ldi	r29, 0x00	; 0
    5e6a:	c0 e0       	ldi	r28, 0x00	; 0
    5e6c:	f8 01       	movw	r30, r16
    5e6e:	81 91       	ld	r24, Z+
    5e70:	8f 01       	movw	r16, r30
    5e72:	60 91 6b 19 	lds	r22, 0x196B	; 0x80196b <__iob+0x2>
    5e76:	70 91 6c 19 	lds	r23, 0x196C	; 0x80196c <__iob+0x3>
    5e7a:	db 01       	movw	r26, r22
    5e7c:	18 96       	adiw	r26, 0x08	; 8
    5e7e:	ed 91       	ld	r30, X+
    5e80:	fc 91       	ld	r31, X
    5e82:	19 97       	sbiw	r26, 0x09	; 9
    5e84:	88 23       	and	r24, r24
    5e86:	31 f0       	breq	.+12     	; 0x5e94 <puts+0x44>
    5e88:	19 95       	eicall
    5e8a:	89 2b       	or	r24, r25
    5e8c:	79 f3       	breq	.-34     	; 0x5e6c <puts+0x1c>
    5e8e:	df ef       	ldi	r29, 0xFF	; 255
    5e90:	cf ef       	ldi	r28, 0xFF	; 255
    5e92:	ec cf       	rjmp	.-40     	; 0x5e6c <puts+0x1c>
    5e94:	8a e0       	ldi	r24, 0x0A	; 10
    5e96:	19 95       	eicall
    5e98:	89 2b       	or	r24, r25
    5e9a:	19 f0       	breq	.+6      	; 0x5ea2 <puts+0x52>
    5e9c:	8f ef       	ldi	r24, 0xFF	; 255
    5e9e:	9f ef       	ldi	r25, 0xFF	; 255
    5ea0:	02 c0       	rjmp	.+4      	; 0x5ea6 <puts+0x56>
    5ea2:	8d 2f       	mov	r24, r29
    5ea4:	9c 2f       	mov	r25, r28
    5ea6:	df 91       	pop	r29
    5ea8:	cf 91       	pop	r28
    5eaa:	1f 91       	pop	r17
    5eac:	0f 91       	pop	r16
    5eae:	08 95       	ret

00005eb0 <sprintf>:
    5eb0:	0f 93       	push	r16
    5eb2:	1f 93       	push	r17
    5eb4:	cf 93       	push	r28
    5eb6:	df 93       	push	r29
    5eb8:	cd b7       	in	r28, 0x3d	; 61
    5eba:	de b7       	in	r29, 0x3e	; 62
    5ebc:	2e 97       	sbiw	r28, 0x0e	; 14
    5ebe:	0f b6       	in	r0, 0x3f	; 63
    5ec0:	f8 94       	cli
    5ec2:	de bf       	out	0x3e, r29	; 62
    5ec4:	0f be       	out	0x3f, r0	; 63
    5ec6:	cd bf       	out	0x3d, r28	; 61
    5ec8:	0e 89       	ldd	r16, Y+22	; 0x16
    5eca:	1f 89       	ldd	r17, Y+23	; 0x17
    5ecc:	86 e0       	ldi	r24, 0x06	; 6
    5ece:	8c 83       	std	Y+4, r24	; 0x04
    5ed0:	1a 83       	std	Y+2, r17	; 0x02
    5ed2:	09 83       	std	Y+1, r16	; 0x01
    5ed4:	8f ef       	ldi	r24, 0xFF	; 255
    5ed6:	9f e7       	ldi	r25, 0x7F	; 127
    5ed8:	9e 83       	std	Y+6, r25	; 0x06
    5eda:	8d 83       	std	Y+5, r24	; 0x05
    5edc:	ae 01       	movw	r20, r28
    5ede:	46 5e       	subi	r20, 0xE6	; 230
    5ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ee2:	68 8d       	ldd	r22, Y+24	; 0x18
    5ee4:	79 8d       	ldd	r23, Y+25	; 0x19
    5ee6:	ce 01       	movw	r24, r28
    5ee8:	01 96       	adiw	r24, 0x01	; 1
    5eea:	10 d0       	rcall	.+32     	; 0x5f0c <vfprintf>
    5eec:	ef 81       	ldd	r30, Y+7	; 0x07
    5eee:	f8 85       	ldd	r31, Y+8	; 0x08
    5ef0:	e0 0f       	add	r30, r16
    5ef2:	f1 1f       	adc	r31, r17
    5ef4:	10 82       	st	Z, r1
    5ef6:	2e 96       	adiw	r28, 0x0e	; 14
    5ef8:	0f b6       	in	r0, 0x3f	; 63
    5efa:	f8 94       	cli
    5efc:	de bf       	out	0x3e, r29	; 62
    5efe:	0f be       	out	0x3f, r0	; 63
    5f00:	cd bf       	out	0x3d, r28	; 61
    5f02:	df 91       	pop	r29
    5f04:	cf 91       	pop	r28
    5f06:	1f 91       	pop	r17
    5f08:	0f 91       	pop	r16
    5f0a:	08 95       	ret

00005f0c <vfprintf>:
    5f0c:	2f 92       	push	r2
    5f0e:	3f 92       	push	r3
    5f10:	4f 92       	push	r4
    5f12:	5f 92       	push	r5
    5f14:	6f 92       	push	r6
    5f16:	7f 92       	push	r7
    5f18:	8f 92       	push	r8
    5f1a:	9f 92       	push	r9
    5f1c:	af 92       	push	r10
    5f1e:	bf 92       	push	r11
    5f20:	cf 92       	push	r12
    5f22:	df 92       	push	r13
    5f24:	ef 92       	push	r14
    5f26:	ff 92       	push	r15
    5f28:	0f 93       	push	r16
    5f2a:	1f 93       	push	r17
    5f2c:	cf 93       	push	r28
    5f2e:	df 93       	push	r29
    5f30:	cd b7       	in	r28, 0x3d	; 61
    5f32:	de b7       	in	r29, 0x3e	; 62
    5f34:	2b 97       	sbiw	r28, 0x0b	; 11
    5f36:	0f b6       	in	r0, 0x3f	; 63
    5f38:	f8 94       	cli
    5f3a:	de bf       	out	0x3e, r29	; 62
    5f3c:	0f be       	out	0x3f, r0	; 63
    5f3e:	cd bf       	out	0x3d, r28	; 61
    5f40:	6c 01       	movw	r12, r24
    5f42:	7b 01       	movw	r14, r22
    5f44:	8a 01       	movw	r16, r20
    5f46:	fc 01       	movw	r30, r24
    5f48:	17 82       	std	Z+7, r1	; 0x07
    5f4a:	16 82       	std	Z+6, r1	; 0x06
    5f4c:	83 81       	ldd	r24, Z+3	; 0x03
    5f4e:	81 ff       	sbrs	r24, 1
    5f50:	bf c1       	rjmp	.+894    	; 0x62d0 <vfprintf+0x3c4>
    5f52:	ce 01       	movw	r24, r28
    5f54:	01 96       	adiw	r24, 0x01	; 1
    5f56:	3c 01       	movw	r6, r24
    5f58:	f6 01       	movw	r30, r12
    5f5a:	93 81       	ldd	r25, Z+3	; 0x03
    5f5c:	f7 01       	movw	r30, r14
    5f5e:	93 fd       	sbrc	r25, 3
    5f60:	85 91       	lpm	r24, Z+
    5f62:	93 ff       	sbrs	r25, 3
    5f64:	81 91       	ld	r24, Z+
    5f66:	7f 01       	movw	r14, r30
    5f68:	88 23       	and	r24, r24
    5f6a:	09 f4       	brne	.+2      	; 0x5f6e <vfprintf+0x62>
    5f6c:	ad c1       	rjmp	.+858    	; 0x62c8 <vfprintf+0x3bc>
    5f6e:	85 32       	cpi	r24, 0x25	; 37
    5f70:	39 f4       	brne	.+14     	; 0x5f80 <vfprintf+0x74>
    5f72:	93 fd       	sbrc	r25, 3
    5f74:	85 91       	lpm	r24, Z+
    5f76:	93 ff       	sbrs	r25, 3
    5f78:	81 91       	ld	r24, Z+
    5f7a:	7f 01       	movw	r14, r30
    5f7c:	85 32       	cpi	r24, 0x25	; 37
    5f7e:	21 f4       	brne	.+8      	; 0x5f88 <vfprintf+0x7c>
    5f80:	b6 01       	movw	r22, r12
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	d6 d1       	rcall	.+940    	; 0x6332 <fputc>
    5f86:	e8 cf       	rjmp	.-48     	; 0x5f58 <vfprintf+0x4c>
    5f88:	91 2c       	mov	r9, r1
    5f8a:	21 2c       	mov	r2, r1
    5f8c:	31 2c       	mov	r3, r1
    5f8e:	ff e1       	ldi	r31, 0x1F	; 31
    5f90:	f3 15       	cp	r31, r3
    5f92:	d8 f0       	brcs	.+54     	; 0x5fca <vfprintf+0xbe>
    5f94:	8b 32       	cpi	r24, 0x2B	; 43
    5f96:	79 f0       	breq	.+30     	; 0x5fb6 <vfprintf+0xaa>
    5f98:	38 f4       	brcc	.+14     	; 0x5fa8 <vfprintf+0x9c>
    5f9a:	80 32       	cpi	r24, 0x20	; 32
    5f9c:	79 f0       	breq	.+30     	; 0x5fbc <vfprintf+0xb0>
    5f9e:	83 32       	cpi	r24, 0x23	; 35
    5fa0:	a1 f4       	brne	.+40     	; 0x5fca <vfprintf+0xbe>
    5fa2:	23 2d       	mov	r18, r3
    5fa4:	20 61       	ori	r18, 0x10	; 16
    5fa6:	1d c0       	rjmp	.+58     	; 0x5fe2 <vfprintf+0xd6>
    5fa8:	8d 32       	cpi	r24, 0x2D	; 45
    5faa:	61 f0       	breq	.+24     	; 0x5fc4 <vfprintf+0xb8>
    5fac:	80 33       	cpi	r24, 0x30	; 48
    5fae:	69 f4       	brne	.+26     	; 0x5fca <vfprintf+0xbe>
    5fb0:	23 2d       	mov	r18, r3
    5fb2:	21 60       	ori	r18, 0x01	; 1
    5fb4:	16 c0       	rjmp	.+44     	; 0x5fe2 <vfprintf+0xd6>
    5fb6:	83 2d       	mov	r24, r3
    5fb8:	82 60       	ori	r24, 0x02	; 2
    5fba:	38 2e       	mov	r3, r24
    5fbc:	e3 2d       	mov	r30, r3
    5fbe:	e4 60       	ori	r30, 0x04	; 4
    5fc0:	3e 2e       	mov	r3, r30
    5fc2:	2a c0       	rjmp	.+84     	; 0x6018 <vfprintf+0x10c>
    5fc4:	f3 2d       	mov	r31, r3
    5fc6:	f8 60       	ori	r31, 0x08	; 8
    5fc8:	1d c0       	rjmp	.+58     	; 0x6004 <vfprintf+0xf8>
    5fca:	37 fc       	sbrc	r3, 7
    5fcc:	2d c0       	rjmp	.+90     	; 0x6028 <vfprintf+0x11c>
    5fce:	20 ed       	ldi	r18, 0xD0	; 208
    5fd0:	28 0f       	add	r18, r24
    5fd2:	2a 30       	cpi	r18, 0x0A	; 10
    5fd4:	40 f0       	brcs	.+16     	; 0x5fe6 <vfprintf+0xda>
    5fd6:	8e 32       	cpi	r24, 0x2E	; 46
    5fd8:	b9 f4       	brne	.+46     	; 0x6008 <vfprintf+0xfc>
    5fda:	36 fc       	sbrc	r3, 6
    5fdc:	75 c1       	rjmp	.+746    	; 0x62c8 <vfprintf+0x3bc>
    5fde:	23 2d       	mov	r18, r3
    5fe0:	20 64       	ori	r18, 0x40	; 64
    5fe2:	32 2e       	mov	r3, r18
    5fe4:	19 c0       	rjmp	.+50     	; 0x6018 <vfprintf+0x10c>
    5fe6:	36 fe       	sbrs	r3, 6
    5fe8:	06 c0       	rjmp	.+12     	; 0x5ff6 <vfprintf+0xea>
    5fea:	8a e0       	ldi	r24, 0x0A	; 10
    5fec:	98 9e       	mul	r9, r24
    5fee:	20 0d       	add	r18, r0
    5ff0:	11 24       	eor	r1, r1
    5ff2:	92 2e       	mov	r9, r18
    5ff4:	11 c0       	rjmp	.+34     	; 0x6018 <vfprintf+0x10c>
    5ff6:	ea e0       	ldi	r30, 0x0A	; 10
    5ff8:	2e 9e       	mul	r2, r30
    5ffa:	20 0d       	add	r18, r0
    5ffc:	11 24       	eor	r1, r1
    5ffe:	22 2e       	mov	r2, r18
    6000:	f3 2d       	mov	r31, r3
    6002:	f0 62       	ori	r31, 0x20	; 32
    6004:	3f 2e       	mov	r3, r31
    6006:	08 c0       	rjmp	.+16     	; 0x6018 <vfprintf+0x10c>
    6008:	8c 36       	cpi	r24, 0x6C	; 108
    600a:	21 f4       	brne	.+8      	; 0x6014 <vfprintf+0x108>
    600c:	83 2d       	mov	r24, r3
    600e:	80 68       	ori	r24, 0x80	; 128
    6010:	38 2e       	mov	r3, r24
    6012:	02 c0       	rjmp	.+4      	; 0x6018 <vfprintf+0x10c>
    6014:	88 36       	cpi	r24, 0x68	; 104
    6016:	41 f4       	brne	.+16     	; 0x6028 <vfprintf+0x11c>
    6018:	f7 01       	movw	r30, r14
    601a:	93 fd       	sbrc	r25, 3
    601c:	85 91       	lpm	r24, Z+
    601e:	93 ff       	sbrs	r25, 3
    6020:	81 91       	ld	r24, Z+
    6022:	7f 01       	movw	r14, r30
    6024:	81 11       	cpse	r24, r1
    6026:	b3 cf       	rjmp	.-154    	; 0x5f8e <vfprintf+0x82>
    6028:	98 2f       	mov	r25, r24
    602a:	9f 7d       	andi	r25, 0xDF	; 223
    602c:	95 54       	subi	r25, 0x45	; 69
    602e:	93 30       	cpi	r25, 0x03	; 3
    6030:	28 f4       	brcc	.+10     	; 0x603c <vfprintf+0x130>
    6032:	0c 5f       	subi	r16, 0xFC	; 252
    6034:	1f 4f       	sbci	r17, 0xFF	; 255
    6036:	9f e3       	ldi	r25, 0x3F	; 63
    6038:	99 83       	std	Y+1, r25	; 0x01
    603a:	0d c0       	rjmp	.+26     	; 0x6056 <vfprintf+0x14a>
    603c:	83 36       	cpi	r24, 0x63	; 99
    603e:	31 f0       	breq	.+12     	; 0x604c <vfprintf+0x140>
    6040:	83 37       	cpi	r24, 0x73	; 115
    6042:	71 f0       	breq	.+28     	; 0x6060 <vfprintf+0x154>
    6044:	83 35       	cpi	r24, 0x53	; 83
    6046:	09 f0       	breq	.+2      	; 0x604a <vfprintf+0x13e>
    6048:	55 c0       	rjmp	.+170    	; 0x60f4 <vfprintf+0x1e8>
    604a:	20 c0       	rjmp	.+64     	; 0x608c <vfprintf+0x180>
    604c:	f8 01       	movw	r30, r16
    604e:	80 81       	ld	r24, Z
    6050:	89 83       	std	Y+1, r24	; 0x01
    6052:	0e 5f       	subi	r16, 0xFE	; 254
    6054:	1f 4f       	sbci	r17, 0xFF	; 255
    6056:	88 24       	eor	r8, r8
    6058:	83 94       	inc	r8
    605a:	91 2c       	mov	r9, r1
    605c:	53 01       	movw	r10, r6
    605e:	12 c0       	rjmp	.+36     	; 0x6084 <vfprintf+0x178>
    6060:	28 01       	movw	r4, r16
    6062:	f2 e0       	ldi	r31, 0x02	; 2
    6064:	4f 0e       	add	r4, r31
    6066:	51 1c       	adc	r5, r1
    6068:	f8 01       	movw	r30, r16
    606a:	a0 80       	ld	r10, Z
    606c:	b1 80       	ldd	r11, Z+1	; 0x01
    606e:	36 fe       	sbrs	r3, 6
    6070:	03 c0       	rjmp	.+6      	; 0x6078 <vfprintf+0x16c>
    6072:	69 2d       	mov	r22, r9
    6074:	70 e0       	ldi	r23, 0x00	; 0
    6076:	02 c0       	rjmp	.+4      	; 0x607c <vfprintf+0x170>
    6078:	6f ef       	ldi	r22, 0xFF	; 255
    607a:	7f ef       	ldi	r23, 0xFF	; 255
    607c:	c5 01       	movw	r24, r10
    607e:	4e d1       	rcall	.+668    	; 0x631c <strnlen>
    6080:	4c 01       	movw	r8, r24
    6082:	82 01       	movw	r16, r4
    6084:	f3 2d       	mov	r31, r3
    6086:	ff 77       	andi	r31, 0x7F	; 127
    6088:	3f 2e       	mov	r3, r31
    608a:	15 c0       	rjmp	.+42     	; 0x60b6 <vfprintf+0x1aa>
    608c:	28 01       	movw	r4, r16
    608e:	22 e0       	ldi	r18, 0x02	; 2
    6090:	42 0e       	add	r4, r18
    6092:	51 1c       	adc	r5, r1
    6094:	f8 01       	movw	r30, r16
    6096:	a0 80       	ld	r10, Z
    6098:	b1 80       	ldd	r11, Z+1	; 0x01
    609a:	36 fe       	sbrs	r3, 6
    609c:	03 c0       	rjmp	.+6      	; 0x60a4 <vfprintf+0x198>
    609e:	69 2d       	mov	r22, r9
    60a0:	70 e0       	ldi	r23, 0x00	; 0
    60a2:	02 c0       	rjmp	.+4      	; 0x60a8 <vfprintf+0x19c>
    60a4:	6f ef       	ldi	r22, 0xFF	; 255
    60a6:	7f ef       	ldi	r23, 0xFF	; 255
    60a8:	c5 01       	movw	r24, r10
    60aa:	2d d1       	rcall	.+602    	; 0x6306 <strnlen_P>
    60ac:	4c 01       	movw	r8, r24
    60ae:	f3 2d       	mov	r31, r3
    60b0:	f0 68       	ori	r31, 0x80	; 128
    60b2:	3f 2e       	mov	r3, r31
    60b4:	82 01       	movw	r16, r4
    60b6:	33 fc       	sbrc	r3, 3
    60b8:	19 c0       	rjmp	.+50     	; 0x60ec <vfprintf+0x1e0>
    60ba:	82 2d       	mov	r24, r2
    60bc:	90 e0       	ldi	r25, 0x00	; 0
    60be:	88 16       	cp	r8, r24
    60c0:	99 06       	cpc	r9, r25
    60c2:	a0 f4       	brcc	.+40     	; 0x60ec <vfprintf+0x1e0>
    60c4:	b6 01       	movw	r22, r12
    60c6:	80 e2       	ldi	r24, 0x20	; 32
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	33 d1       	rcall	.+614    	; 0x6332 <fputc>
    60cc:	2a 94       	dec	r2
    60ce:	f5 cf       	rjmp	.-22     	; 0x60ba <vfprintf+0x1ae>
    60d0:	f5 01       	movw	r30, r10
    60d2:	37 fc       	sbrc	r3, 7
    60d4:	85 91       	lpm	r24, Z+
    60d6:	37 fe       	sbrs	r3, 7
    60d8:	81 91       	ld	r24, Z+
    60da:	5f 01       	movw	r10, r30
    60dc:	b6 01       	movw	r22, r12
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	28 d1       	rcall	.+592    	; 0x6332 <fputc>
    60e2:	21 10       	cpse	r2, r1
    60e4:	2a 94       	dec	r2
    60e6:	21 e0       	ldi	r18, 0x01	; 1
    60e8:	82 1a       	sub	r8, r18
    60ea:	91 08       	sbc	r9, r1
    60ec:	81 14       	cp	r8, r1
    60ee:	91 04       	cpc	r9, r1
    60f0:	79 f7       	brne	.-34     	; 0x60d0 <vfprintf+0x1c4>
    60f2:	e1 c0       	rjmp	.+450    	; 0x62b6 <vfprintf+0x3aa>
    60f4:	84 36       	cpi	r24, 0x64	; 100
    60f6:	11 f0       	breq	.+4      	; 0x60fc <vfprintf+0x1f0>
    60f8:	89 36       	cpi	r24, 0x69	; 105
    60fa:	39 f5       	brne	.+78     	; 0x614a <vfprintf+0x23e>
    60fc:	f8 01       	movw	r30, r16
    60fe:	37 fe       	sbrs	r3, 7
    6100:	07 c0       	rjmp	.+14     	; 0x6110 <vfprintf+0x204>
    6102:	60 81       	ld	r22, Z
    6104:	71 81       	ldd	r23, Z+1	; 0x01
    6106:	82 81       	ldd	r24, Z+2	; 0x02
    6108:	93 81       	ldd	r25, Z+3	; 0x03
    610a:	0c 5f       	subi	r16, 0xFC	; 252
    610c:	1f 4f       	sbci	r17, 0xFF	; 255
    610e:	08 c0       	rjmp	.+16     	; 0x6120 <vfprintf+0x214>
    6110:	60 81       	ld	r22, Z
    6112:	71 81       	ldd	r23, Z+1	; 0x01
    6114:	07 2e       	mov	r0, r23
    6116:	00 0c       	add	r0, r0
    6118:	88 0b       	sbc	r24, r24
    611a:	99 0b       	sbc	r25, r25
    611c:	0e 5f       	subi	r16, 0xFE	; 254
    611e:	1f 4f       	sbci	r17, 0xFF	; 255
    6120:	f3 2d       	mov	r31, r3
    6122:	ff 76       	andi	r31, 0x6F	; 111
    6124:	3f 2e       	mov	r3, r31
    6126:	97 ff       	sbrs	r25, 7
    6128:	09 c0       	rjmp	.+18     	; 0x613c <vfprintf+0x230>
    612a:	90 95       	com	r25
    612c:	80 95       	com	r24
    612e:	70 95       	com	r23
    6130:	61 95       	neg	r22
    6132:	7f 4f       	sbci	r23, 0xFF	; 255
    6134:	8f 4f       	sbci	r24, 0xFF	; 255
    6136:	9f 4f       	sbci	r25, 0xFF	; 255
    6138:	f0 68       	ori	r31, 0x80	; 128
    613a:	3f 2e       	mov	r3, r31
    613c:	2a e0       	ldi	r18, 0x0A	; 10
    613e:	30 e0       	ldi	r19, 0x00	; 0
    6140:	a3 01       	movw	r20, r6
    6142:	33 d1       	rcall	.+614    	; 0x63aa <__ultoa_invert>
    6144:	88 2e       	mov	r8, r24
    6146:	86 18       	sub	r8, r6
    6148:	44 c0       	rjmp	.+136    	; 0x61d2 <vfprintf+0x2c6>
    614a:	85 37       	cpi	r24, 0x75	; 117
    614c:	31 f4       	brne	.+12     	; 0x615a <vfprintf+0x24e>
    614e:	23 2d       	mov	r18, r3
    6150:	2f 7e       	andi	r18, 0xEF	; 239
    6152:	b2 2e       	mov	r11, r18
    6154:	2a e0       	ldi	r18, 0x0A	; 10
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	25 c0       	rjmp	.+74     	; 0x61a4 <vfprintf+0x298>
    615a:	93 2d       	mov	r25, r3
    615c:	99 7f       	andi	r25, 0xF9	; 249
    615e:	b9 2e       	mov	r11, r25
    6160:	8f 36       	cpi	r24, 0x6F	; 111
    6162:	c1 f0       	breq	.+48     	; 0x6194 <vfprintf+0x288>
    6164:	18 f4       	brcc	.+6      	; 0x616c <vfprintf+0x260>
    6166:	88 35       	cpi	r24, 0x58	; 88
    6168:	79 f0       	breq	.+30     	; 0x6188 <vfprintf+0x27c>
    616a:	ae c0       	rjmp	.+348    	; 0x62c8 <vfprintf+0x3bc>
    616c:	80 37       	cpi	r24, 0x70	; 112
    616e:	19 f0       	breq	.+6      	; 0x6176 <vfprintf+0x26a>
    6170:	88 37       	cpi	r24, 0x78	; 120
    6172:	21 f0       	breq	.+8      	; 0x617c <vfprintf+0x270>
    6174:	a9 c0       	rjmp	.+338    	; 0x62c8 <vfprintf+0x3bc>
    6176:	e9 2f       	mov	r30, r25
    6178:	e0 61       	ori	r30, 0x10	; 16
    617a:	be 2e       	mov	r11, r30
    617c:	b4 fe       	sbrs	r11, 4
    617e:	0d c0       	rjmp	.+26     	; 0x619a <vfprintf+0x28e>
    6180:	fb 2d       	mov	r31, r11
    6182:	f4 60       	ori	r31, 0x04	; 4
    6184:	bf 2e       	mov	r11, r31
    6186:	09 c0       	rjmp	.+18     	; 0x619a <vfprintf+0x28e>
    6188:	34 fe       	sbrs	r3, 4
    618a:	0a c0       	rjmp	.+20     	; 0x61a0 <vfprintf+0x294>
    618c:	29 2f       	mov	r18, r25
    618e:	26 60       	ori	r18, 0x06	; 6
    6190:	b2 2e       	mov	r11, r18
    6192:	06 c0       	rjmp	.+12     	; 0x61a0 <vfprintf+0x294>
    6194:	28 e0       	ldi	r18, 0x08	; 8
    6196:	30 e0       	ldi	r19, 0x00	; 0
    6198:	05 c0       	rjmp	.+10     	; 0x61a4 <vfprintf+0x298>
    619a:	20 e1       	ldi	r18, 0x10	; 16
    619c:	30 e0       	ldi	r19, 0x00	; 0
    619e:	02 c0       	rjmp	.+4      	; 0x61a4 <vfprintf+0x298>
    61a0:	20 e1       	ldi	r18, 0x10	; 16
    61a2:	32 e0       	ldi	r19, 0x02	; 2
    61a4:	f8 01       	movw	r30, r16
    61a6:	b7 fe       	sbrs	r11, 7
    61a8:	07 c0       	rjmp	.+14     	; 0x61b8 <vfprintf+0x2ac>
    61aa:	60 81       	ld	r22, Z
    61ac:	71 81       	ldd	r23, Z+1	; 0x01
    61ae:	82 81       	ldd	r24, Z+2	; 0x02
    61b0:	93 81       	ldd	r25, Z+3	; 0x03
    61b2:	0c 5f       	subi	r16, 0xFC	; 252
    61b4:	1f 4f       	sbci	r17, 0xFF	; 255
    61b6:	06 c0       	rjmp	.+12     	; 0x61c4 <vfprintf+0x2b8>
    61b8:	60 81       	ld	r22, Z
    61ba:	71 81       	ldd	r23, Z+1	; 0x01
    61bc:	80 e0       	ldi	r24, 0x00	; 0
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	0e 5f       	subi	r16, 0xFE	; 254
    61c2:	1f 4f       	sbci	r17, 0xFF	; 255
    61c4:	a3 01       	movw	r20, r6
    61c6:	f1 d0       	rcall	.+482    	; 0x63aa <__ultoa_invert>
    61c8:	88 2e       	mov	r8, r24
    61ca:	86 18       	sub	r8, r6
    61cc:	fb 2d       	mov	r31, r11
    61ce:	ff 77       	andi	r31, 0x7F	; 127
    61d0:	3f 2e       	mov	r3, r31
    61d2:	36 fe       	sbrs	r3, 6
    61d4:	0d c0       	rjmp	.+26     	; 0x61f0 <vfprintf+0x2e4>
    61d6:	23 2d       	mov	r18, r3
    61d8:	2e 7f       	andi	r18, 0xFE	; 254
    61da:	a2 2e       	mov	r10, r18
    61dc:	89 14       	cp	r8, r9
    61de:	58 f4       	brcc	.+22     	; 0x61f6 <vfprintf+0x2ea>
    61e0:	34 fe       	sbrs	r3, 4
    61e2:	0b c0       	rjmp	.+22     	; 0x61fa <vfprintf+0x2ee>
    61e4:	32 fc       	sbrc	r3, 2
    61e6:	09 c0       	rjmp	.+18     	; 0x61fa <vfprintf+0x2ee>
    61e8:	83 2d       	mov	r24, r3
    61ea:	8e 7e       	andi	r24, 0xEE	; 238
    61ec:	a8 2e       	mov	r10, r24
    61ee:	05 c0       	rjmp	.+10     	; 0x61fa <vfprintf+0x2ee>
    61f0:	b8 2c       	mov	r11, r8
    61f2:	a3 2c       	mov	r10, r3
    61f4:	03 c0       	rjmp	.+6      	; 0x61fc <vfprintf+0x2f0>
    61f6:	b8 2c       	mov	r11, r8
    61f8:	01 c0       	rjmp	.+2      	; 0x61fc <vfprintf+0x2f0>
    61fa:	b9 2c       	mov	r11, r9
    61fc:	a4 fe       	sbrs	r10, 4
    61fe:	0f c0       	rjmp	.+30     	; 0x621e <vfprintf+0x312>
    6200:	fe 01       	movw	r30, r28
    6202:	e8 0d       	add	r30, r8
    6204:	f1 1d       	adc	r31, r1
    6206:	80 81       	ld	r24, Z
    6208:	80 33       	cpi	r24, 0x30	; 48
    620a:	21 f4       	brne	.+8      	; 0x6214 <vfprintf+0x308>
    620c:	9a 2d       	mov	r25, r10
    620e:	99 7e       	andi	r25, 0xE9	; 233
    6210:	a9 2e       	mov	r10, r25
    6212:	09 c0       	rjmp	.+18     	; 0x6226 <vfprintf+0x31a>
    6214:	a2 fe       	sbrs	r10, 2
    6216:	06 c0       	rjmp	.+12     	; 0x6224 <vfprintf+0x318>
    6218:	b3 94       	inc	r11
    621a:	b3 94       	inc	r11
    621c:	04 c0       	rjmp	.+8      	; 0x6226 <vfprintf+0x31a>
    621e:	8a 2d       	mov	r24, r10
    6220:	86 78       	andi	r24, 0x86	; 134
    6222:	09 f0       	breq	.+2      	; 0x6226 <vfprintf+0x31a>
    6224:	b3 94       	inc	r11
    6226:	a3 fc       	sbrc	r10, 3
    6228:	10 c0       	rjmp	.+32     	; 0x624a <vfprintf+0x33e>
    622a:	a0 fe       	sbrs	r10, 0
    622c:	06 c0       	rjmp	.+12     	; 0x623a <vfprintf+0x32e>
    622e:	b2 14       	cp	r11, r2
    6230:	80 f4       	brcc	.+32     	; 0x6252 <vfprintf+0x346>
    6232:	28 0c       	add	r2, r8
    6234:	92 2c       	mov	r9, r2
    6236:	9b 18       	sub	r9, r11
    6238:	0d c0       	rjmp	.+26     	; 0x6254 <vfprintf+0x348>
    623a:	b2 14       	cp	r11, r2
    623c:	58 f4       	brcc	.+22     	; 0x6254 <vfprintf+0x348>
    623e:	b6 01       	movw	r22, r12
    6240:	80 e2       	ldi	r24, 0x20	; 32
    6242:	90 e0       	ldi	r25, 0x00	; 0
    6244:	76 d0       	rcall	.+236    	; 0x6332 <fputc>
    6246:	b3 94       	inc	r11
    6248:	f8 cf       	rjmp	.-16     	; 0x623a <vfprintf+0x32e>
    624a:	b2 14       	cp	r11, r2
    624c:	18 f4       	brcc	.+6      	; 0x6254 <vfprintf+0x348>
    624e:	2b 18       	sub	r2, r11
    6250:	02 c0       	rjmp	.+4      	; 0x6256 <vfprintf+0x34a>
    6252:	98 2c       	mov	r9, r8
    6254:	21 2c       	mov	r2, r1
    6256:	a4 fe       	sbrs	r10, 4
    6258:	0f c0       	rjmp	.+30     	; 0x6278 <vfprintf+0x36c>
    625a:	b6 01       	movw	r22, r12
    625c:	80 e3       	ldi	r24, 0x30	; 48
    625e:	90 e0       	ldi	r25, 0x00	; 0
    6260:	68 d0       	rcall	.+208    	; 0x6332 <fputc>
    6262:	a2 fe       	sbrs	r10, 2
    6264:	16 c0       	rjmp	.+44     	; 0x6292 <vfprintf+0x386>
    6266:	a1 fc       	sbrc	r10, 1
    6268:	03 c0       	rjmp	.+6      	; 0x6270 <vfprintf+0x364>
    626a:	88 e7       	ldi	r24, 0x78	; 120
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	02 c0       	rjmp	.+4      	; 0x6274 <vfprintf+0x368>
    6270:	88 e5       	ldi	r24, 0x58	; 88
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	b6 01       	movw	r22, r12
    6276:	0c c0       	rjmp	.+24     	; 0x6290 <vfprintf+0x384>
    6278:	8a 2d       	mov	r24, r10
    627a:	86 78       	andi	r24, 0x86	; 134
    627c:	51 f0       	breq	.+20     	; 0x6292 <vfprintf+0x386>
    627e:	a1 fe       	sbrs	r10, 1
    6280:	02 c0       	rjmp	.+4      	; 0x6286 <vfprintf+0x37a>
    6282:	8b e2       	ldi	r24, 0x2B	; 43
    6284:	01 c0       	rjmp	.+2      	; 0x6288 <vfprintf+0x37c>
    6286:	80 e2       	ldi	r24, 0x20	; 32
    6288:	a7 fc       	sbrc	r10, 7
    628a:	8d e2       	ldi	r24, 0x2D	; 45
    628c:	b6 01       	movw	r22, r12
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	50 d0       	rcall	.+160    	; 0x6332 <fputc>
    6292:	89 14       	cp	r8, r9
    6294:	30 f4       	brcc	.+12     	; 0x62a2 <vfprintf+0x396>
    6296:	b6 01       	movw	r22, r12
    6298:	80 e3       	ldi	r24, 0x30	; 48
    629a:	90 e0       	ldi	r25, 0x00	; 0
    629c:	4a d0       	rcall	.+148    	; 0x6332 <fputc>
    629e:	9a 94       	dec	r9
    62a0:	f8 cf       	rjmp	.-16     	; 0x6292 <vfprintf+0x386>
    62a2:	8a 94       	dec	r8
    62a4:	f3 01       	movw	r30, r6
    62a6:	e8 0d       	add	r30, r8
    62a8:	f1 1d       	adc	r31, r1
    62aa:	80 81       	ld	r24, Z
    62ac:	b6 01       	movw	r22, r12
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	40 d0       	rcall	.+128    	; 0x6332 <fputc>
    62b2:	81 10       	cpse	r8, r1
    62b4:	f6 cf       	rjmp	.-20     	; 0x62a2 <vfprintf+0x396>
    62b6:	22 20       	and	r2, r2
    62b8:	09 f4       	brne	.+2      	; 0x62bc <vfprintf+0x3b0>
    62ba:	4e ce       	rjmp	.-868    	; 0x5f58 <vfprintf+0x4c>
    62bc:	b6 01       	movw	r22, r12
    62be:	80 e2       	ldi	r24, 0x20	; 32
    62c0:	90 e0       	ldi	r25, 0x00	; 0
    62c2:	37 d0       	rcall	.+110    	; 0x6332 <fputc>
    62c4:	2a 94       	dec	r2
    62c6:	f7 cf       	rjmp	.-18     	; 0x62b6 <vfprintf+0x3aa>
    62c8:	f6 01       	movw	r30, r12
    62ca:	86 81       	ldd	r24, Z+6	; 0x06
    62cc:	97 81       	ldd	r25, Z+7	; 0x07
    62ce:	02 c0       	rjmp	.+4      	; 0x62d4 <vfprintf+0x3c8>
    62d0:	8f ef       	ldi	r24, 0xFF	; 255
    62d2:	9f ef       	ldi	r25, 0xFF	; 255
    62d4:	2b 96       	adiw	r28, 0x0b	; 11
    62d6:	0f b6       	in	r0, 0x3f	; 63
    62d8:	f8 94       	cli
    62da:	de bf       	out	0x3e, r29	; 62
    62dc:	0f be       	out	0x3f, r0	; 63
    62de:	cd bf       	out	0x3d, r28	; 61
    62e0:	df 91       	pop	r29
    62e2:	cf 91       	pop	r28
    62e4:	1f 91       	pop	r17
    62e6:	0f 91       	pop	r16
    62e8:	ff 90       	pop	r15
    62ea:	ef 90       	pop	r14
    62ec:	df 90       	pop	r13
    62ee:	cf 90       	pop	r12
    62f0:	bf 90       	pop	r11
    62f2:	af 90       	pop	r10
    62f4:	9f 90       	pop	r9
    62f6:	8f 90       	pop	r8
    62f8:	7f 90       	pop	r7
    62fa:	6f 90       	pop	r6
    62fc:	5f 90       	pop	r5
    62fe:	4f 90       	pop	r4
    6300:	3f 90       	pop	r3
    6302:	2f 90       	pop	r2
    6304:	08 95       	ret

00006306 <strnlen_P>:
    6306:	fc 01       	movw	r30, r24
    6308:	05 90       	lpm	r0, Z+
    630a:	61 50       	subi	r22, 0x01	; 1
    630c:	70 40       	sbci	r23, 0x00	; 0
    630e:	01 10       	cpse	r0, r1
    6310:	d8 f7       	brcc	.-10     	; 0x6308 <strnlen_P+0x2>
    6312:	80 95       	com	r24
    6314:	90 95       	com	r25
    6316:	8e 0f       	add	r24, r30
    6318:	9f 1f       	adc	r25, r31
    631a:	08 95       	ret

0000631c <strnlen>:
    631c:	fc 01       	movw	r30, r24
    631e:	61 50       	subi	r22, 0x01	; 1
    6320:	70 40       	sbci	r23, 0x00	; 0
    6322:	01 90       	ld	r0, Z+
    6324:	01 10       	cpse	r0, r1
    6326:	d8 f7       	brcc	.-10     	; 0x631e <strnlen+0x2>
    6328:	80 95       	com	r24
    632a:	90 95       	com	r25
    632c:	8e 0f       	add	r24, r30
    632e:	9f 1f       	adc	r25, r31
    6330:	08 95       	ret

00006332 <fputc>:
    6332:	0f 93       	push	r16
    6334:	1f 93       	push	r17
    6336:	cf 93       	push	r28
    6338:	df 93       	push	r29
    633a:	fb 01       	movw	r30, r22
    633c:	23 81       	ldd	r18, Z+3	; 0x03
    633e:	21 fd       	sbrc	r18, 1
    6340:	03 c0       	rjmp	.+6      	; 0x6348 <fputc+0x16>
    6342:	8f ef       	ldi	r24, 0xFF	; 255
    6344:	9f ef       	ldi	r25, 0xFF	; 255
    6346:	2c c0       	rjmp	.+88     	; 0x63a0 <fputc+0x6e>
    6348:	22 ff       	sbrs	r18, 2
    634a:	16 c0       	rjmp	.+44     	; 0x6378 <fputc+0x46>
    634c:	46 81       	ldd	r20, Z+6	; 0x06
    634e:	57 81       	ldd	r21, Z+7	; 0x07
    6350:	24 81       	ldd	r18, Z+4	; 0x04
    6352:	35 81       	ldd	r19, Z+5	; 0x05
    6354:	42 17       	cp	r20, r18
    6356:	53 07       	cpc	r21, r19
    6358:	44 f4       	brge	.+16     	; 0x636a <fputc+0x38>
    635a:	a0 81       	ld	r26, Z
    635c:	b1 81       	ldd	r27, Z+1	; 0x01
    635e:	9d 01       	movw	r18, r26
    6360:	2f 5f       	subi	r18, 0xFF	; 255
    6362:	3f 4f       	sbci	r19, 0xFF	; 255
    6364:	31 83       	std	Z+1, r19	; 0x01
    6366:	20 83       	st	Z, r18
    6368:	8c 93       	st	X, r24
    636a:	26 81       	ldd	r18, Z+6	; 0x06
    636c:	37 81       	ldd	r19, Z+7	; 0x07
    636e:	2f 5f       	subi	r18, 0xFF	; 255
    6370:	3f 4f       	sbci	r19, 0xFF	; 255
    6372:	37 83       	std	Z+7, r19	; 0x07
    6374:	26 83       	std	Z+6, r18	; 0x06
    6376:	14 c0       	rjmp	.+40     	; 0x63a0 <fputc+0x6e>
    6378:	8b 01       	movw	r16, r22
    637a:	ec 01       	movw	r28, r24
    637c:	fb 01       	movw	r30, r22
    637e:	00 84       	ldd	r0, Z+8	; 0x08
    6380:	f1 85       	ldd	r31, Z+9	; 0x09
    6382:	e0 2d       	mov	r30, r0
    6384:	19 95       	eicall
    6386:	89 2b       	or	r24, r25
    6388:	e1 f6       	brne	.-72     	; 0x6342 <fputc+0x10>
    638a:	d8 01       	movw	r26, r16
    638c:	16 96       	adiw	r26, 0x06	; 6
    638e:	8d 91       	ld	r24, X+
    6390:	9c 91       	ld	r25, X
    6392:	17 97       	sbiw	r26, 0x07	; 7
    6394:	01 96       	adiw	r24, 0x01	; 1
    6396:	17 96       	adiw	r26, 0x07	; 7
    6398:	9c 93       	st	X, r25
    639a:	8e 93       	st	-X, r24
    639c:	16 97       	sbiw	r26, 0x06	; 6
    639e:	ce 01       	movw	r24, r28
    63a0:	df 91       	pop	r29
    63a2:	cf 91       	pop	r28
    63a4:	1f 91       	pop	r17
    63a6:	0f 91       	pop	r16
    63a8:	08 95       	ret

000063aa <__ultoa_invert>:
    63aa:	fa 01       	movw	r30, r20
    63ac:	aa 27       	eor	r26, r26
    63ae:	28 30       	cpi	r18, 0x08	; 8
    63b0:	51 f1       	breq	.+84     	; 0x6406 <__ultoa_invert+0x5c>
    63b2:	20 31       	cpi	r18, 0x10	; 16
    63b4:	81 f1       	breq	.+96     	; 0x6416 <__ultoa_invert+0x6c>
    63b6:	e8 94       	clt
    63b8:	6f 93       	push	r22
    63ba:	6e 7f       	andi	r22, 0xFE	; 254
    63bc:	6e 5f       	subi	r22, 0xFE	; 254
    63be:	7f 4f       	sbci	r23, 0xFF	; 255
    63c0:	8f 4f       	sbci	r24, 0xFF	; 255
    63c2:	9f 4f       	sbci	r25, 0xFF	; 255
    63c4:	af 4f       	sbci	r26, 0xFF	; 255
    63c6:	b1 e0       	ldi	r27, 0x01	; 1
    63c8:	3e d0       	rcall	.+124    	; 0x6446 <__ultoa_invert+0x9c>
    63ca:	b4 e0       	ldi	r27, 0x04	; 4
    63cc:	3c d0       	rcall	.+120    	; 0x6446 <__ultoa_invert+0x9c>
    63ce:	67 0f       	add	r22, r23
    63d0:	78 1f       	adc	r23, r24
    63d2:	89 1f       	adc	r24, r25
    63d4:	9a 1f       	adc	r25, r26
    63d6:	a1 1d       	adc	r26, r1
    63d8:	68 0f       	add	r22, r24
    63da:	79 1f       	adc	r23, r25
    63dc:	8a 1f       	adc	r24, r26
    63de:	91 1d       	adc	r25, r1
    63e0:	a1 1d       	adc	r26, r1
    63e2:	6a 0f       	add	r22, r26
    63e4:	71 1d       	adc	r23, r1
    63e6:	81 1d       	adc	r24, r1
    63e8:	91 1d       	adc	r25, r1
    63ea:	a1 1d       	adc	r26, r1
    63ec:	20 d0       	rcall	.+64     	; 0x642e <__ultoa_invert+0x84>
    63ee:	09 f4       	brne	.+2      	; 0x63f2 <__ultoa_invert+0x48>
    63f0:	68 94       	set
    63f2:	3f 91       	pop	r19
    63f4:	2a e0       	ldi	r18, 0x0A	; 10
    63f6:	26 9f       	mul	r18, r22
    63f8:	11 24       	eor	r1, r1
    63fa:	30 19       	sub	r19, r0
    63fc:	30 5d       	subi	r19, 0xD0	; 208
    63fe:	31 93       	st	Z+, r19
    6400:	de f6       	brtc	.-74     	; 0x63b8 <__ultoa_invert+0xe>
    6402:	cf 01       	movw	r24, r30
    6404:	08 95       	ret
    6406:	46 2f       	mov	r20, r22
    6408:	47 70       	andi	r20, 0x07	; 7
    640a:	40 5d       	subi	r20, 0xD0	; 208
    640c:	41 93       	st	Z+, r20
    640e:	b3 e0       	ldi	r27, 0x03	; 3
    6410:	0f d0       	rcall	.+30     	; 0x6430 <__ultoa_invert+0x86>
    6412:	c9 f7       	brne	.-14     	; 0x6406 <__ultoa_invert+0x5c>
    6414:	f6 cf       	rjmp	.-20     	; 0x6402 <__ultoa_invert+0x58>
    6416:	46 2f       	mov	r20, r22
    6418:	4f 70       	andi	r20, 0x0F	; 15
    641a:	40 5d       	subi	r20, 0xD0	; 208
    641c:	4a 33       	cpi	r20, 0x3A	; 58
    641e:	18 f0       	brcs	.+6      	; 0x6426 <__ultoa_invert+0x7c>
    6420:	49 5d       	subi	r20, 0xD9	; 217
    6422:	31 fd       	sbrc	r19, 1
    6424:	40 52       	subi	r20, 0x20	; 32
    6426:	41 93       	st	Z+, r20
    6428:	02 d0       	rcall	.+4      	; 0x642e <__ultoa_invert+0x84>
    642a:	a9 f7       	brne	.-22     	; 0x6416 <__ultoa_invert+0x6c>
    642c:	ea cf       	rjmp	.-44     	; 0x6402 <__ultoa_invert+0x58>
    642e:	b4 e0       	ldi	r27, 0x04	; 4
    6430:	a6 95       	lsr	r26
    6432:	97 95       	ror	r25
    6434:	87 95       	ror	r24
    6436:	77 95       	ror	r23
    6438:	67 95       	ror	r22
    643a:	ba 95       	dec	r27
    643c:	c9 f7       	brne	.-14     	; 0x6430 <__ultoa_invert+0x86>
    643e:	00 97       	sbiw	r24, 0x00	; 0
    6440:	61 05       	cpc	r22, r1
    6442:	71 05       	cpc	r23, r1
    6444:	08 95       	ret
    6446:	9b 01       	movw	r18, r22
    6448:	ac 01       	movw	r20, r24
    644a:	0a 2e       	mov	r0, r26
    644c:	06 94       	lsr	r0
    644e:	57 95       	ror	r21
    6450:	47 95       	ror	r20
    6452:	37 95       	ror	r19
    6454:	27 95       	ror	r18
    6456:	ba 95       	dec	r27
    6458:	c9 f7       	brne	.-14     	; 0x644c <__ultoa_invert+0xa2>
    645a:	62 0f       	add	r22, r18
    645c:	73 1f       	adc	r23, r19
    645e:	84 1f       	adc	r24, r20
    6460:	95 1f       	adc	r25, r21
    6462:	a0 1d       	adc	r26, r0
    6464:	08 95       	ret

00006466 <_exit>:
    6466:	f8 94       	cli

00006468 <__stop_program>:
    6468:	ff cf       	rjmp	.-2      	; 0x6468 <__stop_program>
