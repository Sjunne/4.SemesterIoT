
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000578  00800200  00005d8c  00005e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005d8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c4a  00800778  00800778  00006398  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000063f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a80  00000000  00000000  00006434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cf12  00000000  00000000  00006eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003433  00000000  00000000  00013dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000067e5  00000000  00000000  000171f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002560  00000000  00000000  0001d9e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003feb  00000000  00000000  0001ff40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b6ac  00000000  00000000  00023f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c8  00000000  00000000  0002f5d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c4       	rjmp	.+2202   	; 0x8cc <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 34 22 	jmp	0x4468	; 0x4468 <__vector_25>
      68:	0c 94 86 22 	jmp	0x450c	; 0x450c <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ca 22 	jmp	0x4594	; 0x4594 <__vector_36>
      94:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 68 27 	jmp	0x4ed0	; 0x4ed0 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__vector_51>
      d0:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__vector_54>
      dc:	0c 94 48 24 	jmp	0x4890	; 0x4890 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	46 17       	cp	r20, r22
      e6:	46 17       	cp	r20, r22
      e8:	46 17       	cp	r20, r22
      ea:	7d 17       	cp	r23, r29
      ec:	85 17       	cp	r24, r21
      ee:	9a 17       	cp	r25, r26
      f0:	46 17       	cp	r20, r22
      f2:	46 17       	cp	r20, r22
      f4:	7d 17       	cp	r23, r29
      f6:	85 17       	cp	r24, r21
      f8:	8a 27       	eor	r24, r26
      fa:	fa 27       	eor	r31, r26
      fc:	fa 27       	eor	r31, r26
      fe:	fa 27       	eor	r31, r26
     100:	fa 27       	eor	r31, r26
     102:	fa 27       	eor	r31, r26
     104:	fa 27       	eor	r31, r26
     106:	fa 27       	eor	r31, r26
     108:	8a 27       	eor	r24, r26
     10a:	fa 27       	eor	r31, r26
     10c:	fa 27       	eor	r31, r26
     10e:	fa 27       	eor	r31, r26
     110:	fa 27       	eor	r31, r26
     112:	fa 27       	eor	r31, r26
     114:	fa 27       	eor	r31, r26
     116:	fa 27       	eor	r31, r26
     118:	8c 27       	eor	r24, r28
     11a:	fa 27       	eor	r31, r26
     11c:	fa 27       	eor	r31, r26
     11e:	fa 27       	eor	r31, r26
     120:	fa 27       	eor	r31, r26
     122:	fa 27       	eor	r31, r26
     124:	fa 27       	eor	r31, r26
     126:	fa 27       	eor	r31, r26
     128:	fa 27       	eor	r31, r26
     12a:	fa 27       	eor	r31, r26
     12c:	fa 27       	eor	r31, r26
     12e:	fa 27       	eor	r31, r26
     130:	fa 27       	eor	r31, r26
     132:	fa 27       	eor	r31, r26
     134:	fa 27       	eor	r31, r26
     136:	fa 27       	eor	r31, r26
     138:	8c 27       	eor	r24, r28
     13a:	fa 27       	eor	r31, r26
     13c:	fa 27       	eor	r31, r26
     13e:	fa 27       	eor	r31, r26
     140:	fa 27       	eor	r31, r26
     142:	fa 27       	eor	r31, r26
     144:	fa 27       	eor	r31, r26
     146:	fa 27       	eor	r31, r26
     148:	fa 27       	eor	r31, r26
     14a:	fa 27       	eor	r31, r26
     14c:	fa 27       	eor	r31, r26
     14e:	fa 27       	eor	r31, r26
     150:	fa 27       	eor	r31, r26
     152:	fa 27       	eor	r31, r26
     154:	fa 27       	eor	r31, r26
     156:	fa 27       	eor	r31, r26
     158:	f6 27       	eor	r31, r22
     15a:	fa 27       	eor	r31, r26
     15c:	fa 27       	eor	r31, r26
     15e:	fa 27       	eor	r31, r26
     160:	fa 27       	eor	r31, r26
     162:	fa 27       	eor	r31, r26
     164:	fa 27       	eor	r31, r26
     166:	fa 27       	eor	r31, r26
     168:	c1 27       	eor	r28, r17
     16a:	fa 27       	eor	r31, r26
     16c:	fa 27       	eor	r31, r26
     16e:	fa 27       	eor	r31, r26
     170:	fa 27       	eor	r31, r26
     172:	fa 27       	eor	r31, r26
     174:	fa 27       	eor	r31, r26
     176:	fa 27       	eor	r31, r26
     178:	fa 27       	eor	r31, r26
     17a:	fa 27       	eor	r31, r26
     17c:	fa 27       	eor	r31, r26
     17e:	fa 27       	eor	r31, r26
     180:	fa 27       	eor	r31, r26
     182:	fa 27       	eor	r31, r26
     184:	fa 27       	eor	r31, r26
     186:	fa 27       	eor	r31, r26
     188:	b5 27       	eor	r27, r21
     18a:	fa 27       	eor	r31, r26
     18c:	fa 27       	eor	r31, r26
     18e:	fa 27       	eor	r31, r26
     190:	fa 27       	eor	r31, r26
     192:	fa 27       	eor	r31, r26
     194:	fa 27       	eor	r31, r26
     196:	fa 27       	eor	r31, r26
     198:	d9 27       	eor	r29, r25

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 96 0b 	call	0x172c	; 0x172c <prvCheckTasksWaitingTermination>
     19e:	80 91 9d 11 	lds	r24, 0x119D	; 0x80119d <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	cc d2       	rcall	.+1432   	; 0x740 <vPortYield>
     1a8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 c3 14 	call	0x2986	; 0x2986 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ec e8       	ldi	r30, 0x8C	; 140
     1e4:	fd e5       	ldi	r31, 0x5D	; 93
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a8 37       	cpi	r26, 0x78	; 120
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	23 e1       	ldi	r18, 0x13	; 19
     1f8:	a8 e7       	ldi	r26, 0x78	; 120
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a2 3c       	cpi	r26, 0xC2	; 194
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <main>
     20a:	0c 94 c4 2e 	jmp	0x5d88	; 0x5d88 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <initializeSharedDataQueue>:
BaseType_t xStatus;
SharedData enqueueSharedData2;

void initializeSharedDataQueue()
{
	xQueueShared = xQueueCreate(5, sizeof(SharedData));
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	66 e0       	ldi	r22, 0x06	; 6
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	79 d4       	rcall	.+2290   	; 0xb0a <xQueueGenericCreate>
     218:	90 93 a9 13 	sts	0x13A9, r25	; 0x8013a9 <xQueueShared+0x1>
     21c:	80 93 a8 13 	sts	0x13A8, r24	; 0x8013a8 <xQueueShared>
     220:	08 95       	ret

00000222 <enqueueSharedData>:
}

void enqueueSharedData()
{
     222:	cf 92       	push	r12
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	00 d0       	rcall	.+0      	; 0x234 <enqueueSharedData+0x12>
     234:	1f 92       	push	r1
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
	uint16_t co2 = dequeueCO2Measure();
     23a:	0e 94 1b 18 	call	0x3036	; 0x3036 <dequeueCO2Measure>
     23e:	6c 01       	movw	r12, r24
	int16_t temp = dequeueTempMeasure();
     240:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <dequeueTempMeasure>
     244:	7c 01       	movw	r14, r24
	uint16_t hum = dequeueHumidityMeasure();
     246:	0e 94 ee 18 	call	0x31dc	; 0x31dc <dequeueHumidityMeasure>

	SharedData_t shared = &enqueueSharedData2;
	shared->co2 = co2;
     24a:	02 ea       	ldi	r16, 0xA2	; 162
     24c:	13 e1       	ldi	r17, 0x13	; 19
     24e:	f8 01       	movw	r30, r16
     250:	d1 82       	std	Z+1, r13	; 0x01
     252:	c0 82       	st	Z, r12
	shared->temperature = temp;
     254:	f3 82       	std	Z+3, r15	; 0x03
     256:	e2 82       	std	Z+2, r14	; 0x02
	shared->humidity = hum;
     258:	95 83       	std	Z+5, r25	; 0x05
     25a:	84 83       	std	Z+4, r24	; 0x04
		
	TickType_t xLastWakeTime2;
	const TickType_t xFrequency2 = 5/portTICK_PERIOD_MS;
	xLastWakeTime2 = xTaskGetTickCount();
     25c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <xTaskGetTickCount>
     260:	69 83       	std	Y+1, r22	; 0x01
     262:	7a 83       	std	Y+2, r23	; 0x02
     264:	8b 83       	std	Y+3, r24	; 0x03
     266:	9c 83       	std	Y+4, r25	; 0x04


	xTaskDelayUntil( &xLastWakeTime2, xFrequency2 );
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	ba 01       	movw	r22, r20
     26e:	ce 01       	movw	r24, r28
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskDelayUntil>
	printf("ENQUEUE: humidity: %d, co2: %d, Temp: %d \n", shared->humidity, shared->co2, shared->temperature);
     276:	f8 01       	movw	r30, r16
     278:	83 81       	ldd	r24, Z+3	; 0x03
     27a:	8f 93       	push	r24
     27c:	82 81       	ldd	r24, Z+2	; 0x02
     27e:	8f 93       	push	r24
     280:	81 81       	ldd	r24, Z+1	; 0x01
     282:	8f 93       	push	r24
     284:	80 81       	ld	r24, Z
     286:	8f 93       	push	r24
     288:	85 81       	ldd	r24, Z+5	; 0x05
     28a:	8f 93       	push	r24
     28c:	84 81       	ldd	r24, Z+4	; 0x04
     28e:	8f 93       	push	r24
     290:	8f e6       	ldi	r24, 0x6F	; 111
     292:	92 e0       	ldi	r25, 0x02	; 2
     294:	9f 93       	push	r25
     296:	8f 93       	push	r24
     298:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>

	xQueueSend(xQueueShared, (void*)&enqueueSharedData2, portMAX_DELAY);
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	2f ef       	ldi	r18, 0xFF	; 255
     2a0:	3f ef       	ldi	r19, 0xFF	; 255
     2a2:	a9 01       	movw	r20, r18
     2a4:	62 ea       	ldi	r22, 0xA2	; 162
     2a6:	73 e1       	ldi	r23, 0x13	; 19
     2a8:	80 91 a8 13 	lds	r24, 0x13A8	; 0x8013a8 <xQueueShared>
     2ac:	90 91 a9 13 	lds	r25, 0x13A9	; 0x8013a9 <xQueueShared+0x1>
     2b0:	4f d4       	rcall	.+2206   	; 0xb50 <xQueueGenericSend>

}
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	08 95       	ret

000002d6 <dequeueSharedData>:

SharedData_t dequeueSharedData() {
	SharedData_t data = &receiveSharedData;
	xQueueReceive(xQueueShared, &receiveSharedData, (TickType_t) 10);
     2d6:	2a e0       	ldi	r18, 0x0A	; 10
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	6a ea       	ldi	r22, 0xAA	; 170
     2e0:	73 e1       	ldi	r23, 0x13	; 19
     2e2:	80 91 a8 13 	lds	r24, 0x13A8	; 0x8013a8 <xQueueShared>
     2e6:	90 91 a9 13 	lds	r25, 0x13A9	; 0x8013a9 <xQueueShared+0x1>
     2ea:	fd d4       	rcall	.+2554   	; 0xce6 <xQueueReceive>
	return data;
}
     2ec:	8a ea       	ldi	r24, 0xAA	; 170
     2ee:	93 e1       	ldi	r25, 0x13	; 19
     2f0:	08 95       	ret

000002f2 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     2f2:	e4 e8       	ldi	r30, 0x84	; 132
     2f4:	f7 e0       	ldi	r31, 0x07	; 7
     2f6:	a8 e8       	ldi	r26, 0x88	; 136
     2f8:	b7 e0       	ldi	r27, 0x07	; 7
     2fa:	b1 83       	std	Z+1, r27	; 0x01
     2fc:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     2fe:	13 82       	std	Z+3, r1	; 0x03
     300:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     302:	e8 e4       	ldi	r30, 0x48	; 72
     304:	f1 e1       	ldi	r31, 0x11	; 17
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     306:	f0 93 83 07 	sts	0x0783, r31	; 0x800783 <pxEnd+0x1>
     30a:	e0 93 82 07 	sts	0x0782, r30	; 0x800782 <pxEnd>
    pxEnd->xBlockSize = 0;
     30e:	13 82       	std	Z+3, r1	; 0x03
     310:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     312:	11 82       	std	Z+1, r1	; 0x01
     314:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     316:	80 ec       	ldi	r24, 0xC0	; 192
     318:	99 e0       	ldi	r25, 0x09	; 9
     31a:	13 96       	adiw	r26, 0x03	; 3
     31c:	9c 93       	st	X, r25
     31e:	8e 93       	st	-X, r24
     320:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     322:	ed 93       	st	X+, r30
     324:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     326:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <xMinimumEverFreeBytesRemaining+0x1>
     32a:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     32e:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <xFreeBytesRemaining+0x1>
     332:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e8       	ldi	r25, 0x80	; 128
     33a:	90 93 79 07 	sts	0x0779, r25	; 0x800779 <__data_end+0x1>
     33e:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <__data_end>
     342:	08 95       	ret

00000344 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     34a:	a4 e8       	ldi	r26, 0x84	; 132
     34c:	b7 e0       	ldi	r27, 0x07	; 7
     34e:	01 c0       	rjmp	.+2      	; 0x352 <prvInsertBlockIntoFreeList+0xe>
     350:	df 01       	movw	r26, r30
     352:	ed 91       	ld	r30, X+
     354:	fc 91       	ld	r31, X
     356:	11 97       	sbiw	r26, 0x01	; 1
     358:	ec 17       	cp	r30, r28
     35a:	fd 07       	cpc	r31, r29
     35c:	c8 f3       	brcs	.-14     	; 0x350 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     35e:	12 96       	adiw	r26, 0x02	; 2
     360:	8d 91       	ld	r24, X+
     362:	9c 91       	ld	r25, X
     364:	13 97       	sbiw	r26, 0x03	; 3
     366:	9d 01       	movw	r18, r26
     368:	28 0f       	add	r18, r24
     36a:	39 1f       	adc	r19, r25
     36c:	c2 17       	cp	r28, r18
     36e:	d3 07       	cpc	r29, r19
     370:	49 f4       	brne	.+18     	; 0x384 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     372:	2a 81       	ldd	r18, Y+2	; 0x02
     374:	3b 81       	ldd	r19, Y+3	; 0x03
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
     37a:	13 96       	adiw	r26, 0x03	; 3
     37c:	9c 93       	st	X, r25
     37e:	8e 93       	st	-X, r24
     380:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     382:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	9b 81       	ldd	r25, Y+3	; 0x03
     388:	9e 01       	movw	r18, r28
     38a:	28 0f       	add	r18, r24
     38c:	39 1f       	adc	r19, r25
     38e:	e2 17       	cp	r30, r18
     390:	f3 07       	cpc	r31, r19
     392:	c1 f4       	brne	.+48     	; 0x3c4 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     394:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <pxEnd>
     398:	30 91 83 07 	lds	r19, 0x0783	; 0x800783 <pxEnd+0x1>
     39c:	e2 17       	cp	r30, r18
     39e:	f3 07       	cpc	r31, r19
     3a0:	71 f0       	breq	.+28     	; 0x3be <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     3a2:	22 81       	ldd	r18, Z+2	; 0x02
     3a4:	33 81       	ldd	r19, Z+3	; 0x03
     3a6:	82 0f       	add	r24, r18
     3a8:	93 1f       	adc	r25, r19
     3aa:	9b 83       	std	Y+3, r25	; 0x03
     3ac:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     3ae:	ed 91       	ld	r30, X+
     3b0:	fc 91       	ld	r31, X
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	80 81       	ld	r24, Z
     3b6:	91 81       	ldd	r25, Z+1	; 0x01
     3b8:	99 83       	std	Y+1, r25	; 0x01
     3ba:	88 83       	st	Y, r24
     3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     3be:	39 83       	std	Y+1, r19	; 0x01
     3c0:	28 83       	st	Y, r18
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     3c4:	f9 83       	std	Y+1, r31	; 0x01
     3c6:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     3c8:	ca 17       	cp	r28, r26
     3ca:	db 07       	cpc	r29, r27
     3cc:	11 f0       	breq	.+4      	; 0x3d2 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     3ce:	cd 93       	st	X+, r28
     3d0:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     3e6:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     3ea:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <pxEnd>
     3ee:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <pxEnd+0x1>
     3f2:	89 2b       	or	r24, r25
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     3f6:	7d df       	rcall	.-262    	; 0x2f2 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     3f8:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <__data_end>
     3fc:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <__data_end+0x1>
     400:	80 23       	and	r24, r16
     402:	91 23       	and	r25, r17
     404:	89 2b       	or	r24, r25
     406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	76 c0       	rjmp	.+236    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     40a:	01 15       	cp	r16, r1
     40c:	11 05       	cpc	r17, r1
     40e:	49 f0       	breq	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     410:	c8 01       	movw	r24, r16
     412:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     414:	08 17       	cp	r16, r24
     416:	19 07       	cpc	r17, r25
     418:	18 f0       	brcs	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	10 e0       	ldi	r17, 0x00	; 0
     41e:	01 c0       	rjmp	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     420:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     422:	01 15       	cp	r16, r1
     424:	11 05       	cpc	r17, r1
     426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	69 c0       	rjmp	.+210    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     42a:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <xFreeBytesRemaining>
     42e:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <xFreeBytesRemaining+0x1>
     432:	80 17       	cp	r24, r16
     434:	91 07       	cpc	r25, r17
     436:	08 f4       	brcc	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	64 c0       	rjmp	.+200    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     43a:	c0 91 84 07 	lds	r28, 0x0784	; 0x800784 <xStart>
     43e:	d0 91 85 07 	lds	r29, 0x0785	; 0x800785 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     442:	e4 e8       	ldi	r30, 0x84	; 132
     444:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
                {
                    pxPreviousBlock = pxBlock;
     448:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     44a:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     44c:	8a 81       	ldd	r24, Y+2	; 0x02
     44e:	9b 81       	ldd	r25, Y+3	; 0x03
     450:	80 17       	cp	r24, r16
     452:	91 07       	cpc	r25, r17
     454:	20 f4       	brcc	.+8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     456:	88 81       	ld	r24, Y
     458:	99 81       	ldd	r25, Y+1	; 0x01
     45a:	00 97       	sbiw	r24, 0x00	; 0
     45c:	a9 f7       	brne	.-22     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     45e:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <pxEnd>
     462:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <pxEnd+0x1>
     466:	c8 17       	cp	r28, r24
     468:	d9 07       	cpc	r29, r25
     46a:	09 f4       	brne	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46c:	4d c0       	rjmp	.+154    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     46e:	e0 80       	ld	r14, Z
     470:	f1 80       	ldd	r15, Z+1	; 0x01
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	e8 0e       	add	r14, r24
     476:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     478:	88 81       	ld	r24, Y
     47a:	99 81       	ldd	r25, Y+1	; 0x01
     47c:	91 83       	std	Z+1, r25	; 0x01
     47e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     480:	2a 81       	ldd	r18, Y+2	; 0x02
     482:	3b 81       	ldd	r19, Y+3	; 0x03
     484:	20 1b       	sub	r18, r16
     486:	31 0b       	sbc	r19, r17
     488:	29 30       	cpi	r18, 0x09	; 9
     48a:	31 05       	cpc	r19, r1
     48c:	48 f0       	brcs	.+18     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     48e:	ce 01       	movw	r24, r28
     490:	80 0f       	add	r24, r16
     492:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     494:	fc 01       	movw	r30, r24
     496:	33 83       	std	Z+3, r19	; 0x03
     498:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     49a:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     49c:	0a 83       	std	Y+2, r16	; 0x02
     49e:	52 df       	rcall	.-348    	; 0x344 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     4a0:	2a 81       	ldd	r18, Y+2	; 0x02
     4a2:	3b 81       	ldd	r19, Y+3	; 0x03
     4a4:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <xFreeBytesRemaining>
     4a8:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <xFreeBytesRemaining+0x1>
     4ac:	82 1b       	sub	r24, r18
     4ae:	93 0b       	sbc	r25, r19
     4b0:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <xFreeBytesRemaining+0x1>
     4b4:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     4b8:	40 91 7e 07 	lds	r20, 0x077E	; 0x80077e <xMinimumEverFreeBytesRemaining>
     4bc:	50 91 7f 07 	lds	r21, 0x077F	; 0x80077f <xMinimumEverFreeBytesRemaining+0x1>
     4c0:	84 17       	cp	r24, r20
     4c2:	95 07       	cpc	r25, r21
     4c4:	20 f4       	brcc	.+8      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     4c6:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <xMinimumEverFreeBytesRemaining+0x1>
     4ca:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     4ce:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <__data_end>
     4d2:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <__data_end+0x1>
     4d6:	28 2b       	or	r18, r24
     4d8:	39 2b       	or	r19, r25
     4da:	3b 83       	std	Y+3, r19	; 0x03
     4dc:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     4de:	19 82       	std	Y+1, r1	; 0x01
     4e0:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     4e2:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <xNumberOfSuccessfulAllocations>
     4e6:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <xNumberOfSuccessfulAllocations+0x1>
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <xNumberOfSuccessfulAllocations+0x1>
     4f0:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <xNumberOfSuccessfulAllocations>
     4f4:	0b c0       	rjmp	.+22     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     4f6:	e1 2c       	mov	r14, r1
     4f8:	f1 2c       	mov	r15, r1
     4fa:	08 c0       	rjmp	.+16     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4fc:	e1 2c       	mov	r14, r1
     4fe:	f1 2c       	mov	r15, r1
     500:	05 c0       	rjmp	.+10     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     502:	e1 2c       	mov	r14, r1
     504:	f1 2c       	mov	r15, r1
     506:	02 c0       	rjmp	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     508:	e1 2c       	mov	r14, r1
     50a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     50c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     510:	e1 14       	cp	r14, r1
     512:	f1 04       	cpc	r15, r1
     514:	11 f4       	brne	.+4      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     516:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     51a:	c7 01       	movw	r24, r14
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	08 95       	ret

0000052a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     532:	00 97       	sbiw	r24, 0x00	; 0
     534:	91 f1       	breq	.+100    	; 0x59a <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     536:	ec 01       	movw	r28, r24
     538:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     53a:	4a 81       	ldd	r20, Y+2	; 0x02
     53c:	5b 81       	ldd	r21, Y+3	; 0x03
     53e:	20 91 78 07 	lds	r18, 0x0778	; 0x800778 <__data_end>
     542:	30 91 79 07 	lds	r19, 0x0779	; 0x800779 <__data_end+0x1>
     546:	ba 01       	movw	r22, r20
     548:	62 23       	and	r22, r18
     54a:	73 23       	and	r23, r19
     54c:	67 2b       	or	r22, r23
     54e:	29 f1       	breq	.+74     	; 0x59a <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     550:	68 81       	ld	r22, Y
     552:	79 81       	ldd	r23, Y+1	; 0x01
     554:	67 2b       	or	r22, r23
     556:	09 f5       	brne	.+66     	; 0x59a <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     558:	20 95       	com	r18
     55a:	30 95       	com	r19
     55c:	24 23       	and	r18, r20
     55e:	35 23       	and	r19, r21
     560:	3b 83       	std	Y+3, r19	; 0x03
     562:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     564:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     568:	8a 81       	ldd	r24, Y+2	; 0x02
     56a:	9b 81       	ldd	r25, Y+3	; 0x03
     56c:	20 91 80 07 	lds	r18, 0x0780	; 0x800780 <xFreeBytesRemaining>
     570:	30 91 81 07 	lds	r19, 0x0781	; 0x800781 <xFreeBytesRemaining+0x1>
     574:	82 0f       	add	r24, r18
     576:	93 1f       	adc	r25, r19
     578:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <xFreeBytesRemaining+0x1>
     57c:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     580:	ce 01       	movw	r24, r28
     582:	e0 de       	rcall	.-576    	; 0x344 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     584:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <xNumberOfSuccessfulFrees>
     588:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <xNumberOfSuccessfulFrees+0x1>
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	90 93 7b 07 	sts	0x077B, r25	; 0x80077b <xNumberOfSuccessfulFrees+0x1>
     592:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     596:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	08 95       	ret

000005a4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     5a4:	fc 01       	movw	r30, r24
     5a6:	03 96       	adiw	r24, 0x03	; 3
     5a8:	92 83       	std	Z+2, r25	; 0x02
     5aa:	81 83       	std	Z+1, r24	; 0x01
     5ac:	4f ef       	ldi	r20, 0xFF	; 255
     5ae:	5f ef       	ldi	r21, 0xFF	; 255
     5b0:	ba 01       	movw	r22, r20
     5b2:	43 83       	std	Z+3, r20	; 0x03
     5b4:	54 83       	std	Z+4, r21	; 0x04
     5b6:	65 83       	std	Z+5, r22	; 0x05
     5b8:	76 83       	std	Z+6, r23	; 0x06
     5ba:	90 87       	std	Z+8, r25	; 0x08
     5bc:	87 83       	std	Z+7, r24	; 0x07
     5be:	92 87       	std	Z+10, r25	; 0x0a
     5c0:	81 87       	std	Z+9, r24	; 0x09
     5c2:	10 82       	st	Z, r1
     5c4:	08 95       	ret

000005c6 <vListInitialiseItem>:
     5c6:	fc 01       	movw	r30, r24
     5c8:	13 86       	std	Z+11, r1	; 0x0b
     5ca:	12 86       	std	Z+10, r1	; 0x0a
     5cc:	08 95       	ret

000005ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     5d8:	08 81       	ld	r16, Y
     5da:	19 81       	ldd	r17, Y+1	; 0x01
     5dc:	2a 81       	ldd	r18, Y+2	; 0x02
     5de:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     5e0:	0f 3f       	cpi	r16, 0xFF	; 255
     5e2:	4f ef       	ldi	r20, 0xFF	; 255
     5e4:	14 07       	cpc	r17, r20
     5e6:	24 07       	cpc	r18, r20
     5e8:	34 07       	cpc	r19, r20
     5ea:	21 f4       	brne	.+8      	; 0x5f4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     5ec:	fc 01       	movw	r30, r24
     5ee:	a1 85       	ldd	r26, Z+9	; 0x09
     5f0:	b2 85       	ldd	r27, Z+10	; 0x0a
     5f2:	11 c0       	rjmp	.+34     	; 0x616 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     5f4:	dc 01       	movw	r26, r24
     5f6:	13 96       	adiw	r26, 0x03	; 3
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <vListInsert+0x2e>
     5fa:	df 01       	movw	r26, r30
     5fc:	14 96       	adiw	r26, 0x04	; 4
     5fe:	ed 91       	ld	r30, X+
     600:	fc 91       	ld	r31, X
     602:	15 97       	sbiw	r26, 0x05	; 5
     604:	40 81       	ld	r20, Z
     606:	51 81       	ldd	r21, Z+1	; 0x01
     608:	62 81       	ldd	r22, Z+2	; 0x02
     60a:	73 81       	ldd	r23, Z+3	; 0x03
     60c:	04 17       	cp	r16, r20
     60e:	15 07       	cpc	r17, r21
     610:	26 07       	cpc	r18, r22
     612:	37 07       	cpc	r19, r23
     614:	90 f7       	brcc	.-28     	; 0x5fa <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     616:	14 96       	adiw	r26, 0x04	; 4
     618:	ed 91       	ld	r30, X+
     61a:	fc 91       	ld	r31, X
     61c:	15 97       	sbiw	r26, 0x05	; 5
     61e:	fd 83       	std	Y+5, r31	; 0x05
     620:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     622:	d7 83       	std	Z+7, r29	; 0x07
     624:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     626:	bf 83       	std	Y+7, r27	; 0x07
     628:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     62a:	15 96       	adiw	r26, 0x05	; 5
     62c:	dc 93       	st	X, r29
     62e:	ce 93       	st	-X, r28
     630:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     632:	9b 87       	std	Y+11, r25	; 0x0b
     634:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     636:	fc 01       	movw	r30, r24
     638:	20 81       	ld	r18, Z
     63a:	2f 5f       	subi	r18, 0xFF	; 255
     63c:	20 83       	st	Z, r18
}
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	08 95       	ret

00000648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     64e:	a2 85       	ldd	r26, Z+10	; 0x0a
     650:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     652:	c4 81       	ldd	r28, Z+4	; 0x04
     654:	d5 81       	ldd	r29, Z+5	; 0x05
     656:	86 81       	ldd	r24, Z+6	; 0x06
     658:	97 81       	ldd	r25, Z+7	; 0x07
     65a:	9f 83       	std	Y+7, r25	; 0x07
     65c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     65e:	c6 81       	ldd	r28, Z+6	; 0x06
     660:	d7 81       	ldd	r29, Z+7	; 0x07
     662:	84 81       	ldd	r24, Z+4	; 0x04
     664:	95 81       	ldd	r25, Z+5	; 0x05
     666:	9d 83       	std	Y+5, r25	; 0x05
     668:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     66a:	11 96       	adiw	r26, 0x01	; 1
     66c:	8d 91       	ld	r24, X+
     66e:	9c 91       	ld	r25, X
     670:	12 97       	sbiw	r26, 0x02	; 2
     672:	e8 17       	cp	r30, r24
     674:	f9 07       	cpc	r31, r25
     676:	31 f4       	brne	.+12     	; 0x684 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     678:	86 81       	ldd	r24, Z+6	; 0x06
     67a:	97 81       	ldd	r25, Z+7	; 0x07
     67c:	12 96       	adiw	r26, 0x02	; 2
     67e:	9c 93       	st	X, r25
     680:	8e 93       	st	-X, r24
     682:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     684:	13 86       	std	Z+11, r1	; 0x0b
     686:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     688:	8c 91       	ld	r24, X
     68a:	81 50       	subi	r24, 0x01	; 1
     68c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     68e:	8c 91       	ld	r24, X
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     696:	a8 95       	wdr
     698:	90 ec       	ldi	r25, 0xC0	; 192
     69a:	88 e1       	ldi	r24, 0x18	; 24
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	a8 95       	wdr
     6a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6ac:	08 95       	ret

000006ae <pxPortInitialiseStack>:
     6ae:	fc 01       	movw	r30, r24
     6b0:	60 83       	st	Z, r22
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	70 83       	st	Z, r23
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	10 82       	st	Z, r1
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	10 82       	st	Z, r1
     6be:	31 97       	sbiw	r30, 0x01	; 1
     6c0:	20 e8       	ldi	r18, 0x80	; 128
     6c2:	20 83       	st	Z, r18
     6c4:	31 97       	sbiw	r30, 0x01	; 1
     6c6:	10 82       	st	Z, r1
     6c8:	31 97       	sbiw	r30, 0x01	; 1
     6ca:	10 82       	st	Z, r1
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	10 82       	st	Z, r1
     6d0:	77 97       	sbiw	r30, 0x17	; 23
     6d2:	40 83       	st	Z, r20
     6d4:	31 97       	sbiw	r30, 0x01	; 1
     6d6:	50 83       	st	Z, r21
     6d8:	86 97       	sbiw	r24, 0x26	; 38
     6da:	08 95       	ret

000006dc <xPortStartScheduler>:
     6dc:	dc df       	rcall	.-72     	; 0x696 <prvSetupTimerInterrupt>
     6de:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
     6e2:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
     6e6:	cd 91       	ld	r28, X+
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	dd 91       	ld	r29, X+
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	ff 91       	pop	r31
     6f0:	ef 91       	pop	r30
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	bf 91       	pop	r27
     6f8:	af 91       	pop	r26
     6fa:	9f 91       	pop	r25
     6fc:	8f 91       	pop	r24
     6fe:	7f 91       	pop	r23
     700:	6f 91       	pop	r22
     702:	5f 91       	pop	r21
     704:	4f 91       	pop	r20
     706:	3f 91       	pop	r19
     708:	2f 91       	pop	r18
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	9f 90       	pop	r9
     71c:	8f 90       	pop	r8
     71e:	7f 90       	pop	r7
     720:	6f 90       	pop	r6
     722:	5f 90       	pop	r5
     724:	4f 90       	pop	r4
     726:	3f 90       	pop	r3
     728:	2f 90       	pop	r2
     72a:	1f 90       	pop	r1
     72c:	0f 90       	pop	r0
     72e:	0c be       	out	0x3c, r0	; 60
     730:	0f 90       	pop	r0
     732:	0b be       	out	0x3b, r0	; 59
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	08 95       	ret
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	08 95       	ret

00000740 <vPortYield>:
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	0f 92       	push	r0
     748:	0b b6       	in	r0, 0x3b	; 59
     74a:	0f 92       	push	r0
     74c:	0c b6       	in	r0, 0x3c	; 60
     74e:	0f 92       	push	r0
     750:	1f 92       	push	r1
     752:	11 24       	eor	r1, r1
     754:	2f 92       	push	r2
     756:	3f 92       	push	r3
     758:	4f 92       	push	r4
     75a:	5f 92       	push	r5
     75c:	6f 92       	push	r6
     75e:	7f 92       	push	r7
     760:	8f 92       	push	r8
     762:	9f 92       	push	r9
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	2f 93       	push	r18
     776:	3f 93       	push	r19
     778:	4f 93       	push	r20
     77a:	5f 93       	push	r21
     77c:	6f 93       	push	r22
     77e:	7f 93       	push	r23
     780:	8f 93       	push	r24
     782:	9f 93       	push	r25
     784:	af 93       	push	r26
     786:	bf 93       	push	r27
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
     790:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
     794:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
     798:	0d b6       	in	r0, 0x3d	; 61
     79a:	0d 92       	st	X+, r0
     79c:	0e b6       	in	r0, 0x3e	; 62
     79e:	0d 92       	st	X+, r0
     7a0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <vTaskSwitchContext>
     7a4:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
     7a8:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
     7ac:	cd 91       	ld	r28, X+
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	dd 91       	ld	r29, X+
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	ff 91       	pop	r31
     7b6:	ef 91       	pop	r30
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	bf 91       	pop	r27
     7be:	af 91       	pop	r26
     7c0:	9f 91       	pop	r25
     7c2:	8f 91       	pop	r24
     7c4:	7f 91       	pop	r23
     7c6:	6f 91       	pop	r22
     7c8:	5f 91       	pop	r21
     7ca:	4f 91       	pop	r20
     7cc:	3f 91       	pop	r19
     7ce:	2f 91       	pop	r18
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	bf 90       	pop	r11
     7de:	af 90       	pop	r10
     7e0:	9f 90       	pop	r9
     7e2:	8f 90       	pop	r8
     7e4:	7f 90       	pop	r7
     7e6:	6f 90       	pop	r6
     7e8:	5f 90       	pop	r5
     7ea:	4f 90       	pop	r4
     7ec:	3f 90       	pop	r3
     7ee:	2f 90       	pop	r2
     7f0:	1f 90       	pop	r1
     7f2:	0f 90       	pop	r0
     7f4:	0c be       	out	0x3c, r0	; 60
     7f6:	0f 90       	pop	r0
     7f8:	0b be       	out	0x3b, r0	; 59
     7fa:	0f 90       	pop	r0
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	0f 90       	pop	r0
     800:	08 95       	ret

00000802 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     802:	0f 92       	push	r0
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	0f 92       	push	r0
     80a:	0b b6       	in	r0, 0x3b	; 59
     80c:	0f 92       	push	r0
     80e:	0c b6       	in	r0, 0x3c	; 60
     810:	0f 92       	push	r0
     812:	1f 92       	push	r1
     814:	11 24       	eor	r1, r1
     816:	2f 92       	push	r2
     818:	3f 92       	push	r3
     81a:	4f 92       	push	r4
     81c:	5f 92       	push	r5
     81e:	6f 92       	push	r6
     820:	7f 92       	push	r7
     822:	8f 92       	push	r8
     824:	9f 92       	push	r9
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	2f 93       	push	r18
     838:	3f 93       	push	r19
     83a:	4f 93       	push	r20
     83c:	5f 93       	push	r21
     83e:	6f 93       	push	r22
     840:	7f 93       	push	r23
     842:	8f 93       	push	r24
     844:	9f 93       	push	r25
     846:	af 93       	push	r26
     848:	bf 93       	push	r27
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
     852:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
     856:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
     85a:	0d b6       	in	r0, 0x3d	; 61
     85c:	0d 92       	st	X+, r0
     85e:	0e b6       	in	r0, 0x3e	; 62
     860:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     862:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     864:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <xTaskIncrementTick>
     868:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     86a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     86e:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
     872:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
     876:	cd 91       	ld	r28, X+
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	dd 91       	ld	r29, X+
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	7f 91       	pop	r23
     890:	6f 91       	pop	r22
     892:	5f 91       	pop	r21
     894:	4f 91       	pop	r20
     896:	3f 91       	pop	r19
     898:	2f 91       	pop	r18
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	df 90       	pop	r13
     8a4:	cf 90       	pop	r12
     8a6:	bf 90       	pop	r11
     8a8:	af 90       	pop	r10
     8aa:	9f 90       	pop	r9
     8ac:	8f 90       	pop	r8
     8ae:	7f 90       	pop	r7
     8b0:	6f 90       	pop	r6
     8b2:	5f 90       	pop	r5
     8b4:	4f 90       	pop	r4
     8b6:	3f 90       	pop	r3
     8b8:	2f 90       	pop	r2
     8ba:	1f 90       	pop	r1
     8bc:	0f 90       	pop	r0
     8be:	0c be       	out	0x3c, r0	; 60
     8c0:	0f 90       	pop	r0
     8c2:	0b be       	out	0x3b, r0	; 59
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     8ca:	08 95       	ret

000008cc <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     8cc:	9a df       	rcall	.-204    	; 0x802 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     8ce:	18 95       	reti

000008d0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	0f 92       	push	r0
     8d6:	fc 01       	movw	r30, r24
     8d8:	86 8d       	ldd	r24, Z+30	; 0x1e
     8da:	81 11       	cpse	r24, r1
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <prvIsQueueEmpty+0x12>
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <prvIsQueueEmpty+0x14>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	08 95       	ret

000008ea <prvIsQueueFull>:
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	0f 92       	push	r0
     8f0:	fc 01       	movw	r30, r24
     8f2:	26 8d       	ldd	r18, Z+30	; 0x1e
     8f4:	87 8d       	ldd	r24, Z+31	; 0x1f
     8f6:	28 13       	cpse	r18, r24
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <prvIsQueueFull+0x14>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <prvIsQueueFull+0x16>
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	08 95       	ret

00000906 <prvCopyDataToQueue>:
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	ec 01       	movw	r28, r24
     910:	04 2f       	mov	r16, r20
     912:	1e 8d       	ldd	r17, Y+30	; 0x1e
     914:	48 a1       	ldd	r20, Y+32	; 0x20
     916:	41 11       	cpse	r20, r1
     918:	0c c0       	rjmp	.+24     	; 0x932 <prvCopyDataToQueue+0x2c>
     91a:	88 81       	ld	r24, Y
     91c:	99 81       	ldd	r25, Y+1	; 0x01
     91e:	89 2b       	or	r24, r25
     920:	09 f0       	breq	.+2      	; 0x924 <prvCopyDataToQueue+0x1e>
     922:	42 c0       	rjmp	.+132    	; 0x9a8 <prvCopyDataToQueue+0xa2>
     924:	8c 81       	ldd	r24, Y+4	; 0x04
     926:	9d 81       	ldd	r25, Y+5	; 0x05
     928:	0e 94 8e 11 	call	0x231c	; 0x231c <xTaskPriorityDisinherit>
     92c:	1d 82       	std	Y+5, r1	; 0x05
     92e:	1c 82       	std	Y+4, r1	; 0x04
     930:	42 c0       	rjmp	.+132    	; 0x9b6 <prvCopyDataToQueue+0xb0>
     932:	01 11       	cpse	r16, r1
     934:	17 c0       	rjmp	.+46     	; 0x964 <prvCopyDataToQueue+0x5e>
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	8a 81       	ldd	r24, Y+2	; 0x02
     93a:	9b 81       	ldd	r25, Y+3	; 0x03
     93c:	0e 94 47 2b 	call	0x568e	; 0x568e <memcpy>
     940:	28 a1       	ldd	r18, Y+32	; 0x20
     942:	8a 81       	ldd	r24, Y+2	; 0x02
     944:	9b 81       	ldd	r25, Y+3	; 0x03
     946:	82 0f       	add	r24, r18
     948:	91 1d       	adc	r25, r1
     94a:	9b 83       	std	Y+3, r25	; 0x03
     94c:	8a 83       	std	Y+2, r24	; 0x02
     94e:	2c 81       	ldd	r18, Y+4	; 0x04
     950:	3d 81       	ldd	r19, Y+5	; 0x05
     952:	82 17       	cp	r24, r18
     954:	93 07       	cpc	r25, r19
     956:	50 f1       	brcs	.+84     	; 0x9ac <prvCopyDataToQueue+0xa6>
     958:	88 81       	ld	r24, Y
     95a:	99 81       	ldd	r25, Y+1	; 0x01
     95c:	9b 83       	std	Y+3, r25	; 0x03
     95e:	8a 83       	std	Y+2, r24	; 0x02
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	29 c0       	rjmp	.+82     	; 0x9b6 <prvCopyDataToQueue+0xb0>
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	8e 81       	ldd	r24, Y+6	; 0x06
     968:	9f 81       	ldd	r25, Y+7	; 0x07
     96a:	0e 94 47 2b 	call	0x568e	; 0x568e <memcpy>
     96e:	88 a1       	ldd	r24, Y+32	; 0x20
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	91 95       	neg	r25
     974:	81 95       	neg	r24
     976:	91 09       	sbc	r25, r1
     978:	2e 81       	ldd	r18, Y+6	; 0x06
     97a:	3f 81       	ldd	r19, Y+7	; 0x07
     97c:	28 0f       	add	r18, r24
     97e:	39 1f       	adc	r19, r25
     980:	3f 83       	std	Y+7, r19	; 0x07
     982:	2e 83       	std	Y+6, r18	; 0x06
     984:	48 81       	ld	r20, Y
     986:	59 81       	ldd	r21, Y+1	; 0x01
     988:	24 17       	cp	r18, r20
     98a:	35 07       	cpc	r19, r21
     98c:	30 f4       	brcc	.+12     	; 0x99a <prvCopyDataToQueue+0x94>
     98e:	2c 81       	ldd	r18, Y+4	; 0x04
     990:	3d 81       	ldd	r19, Y+5	; 0x05
     992:	82 0f       	add	r24, r18
     994:	93 1f       	adc	r25, r19
     996:	9f 83       	std	Y+7, r25	; 0x07
     998:	8e 83       	std	Y+6, r24	; 0x06
     99a:	02 30       	cpi	r16, 0x02	; 2
     99c:	49 f4       	brne	.+18     	; 0x9b0 <prvCopyDataToQueue+0xaa>
     99e:	11 23       	and	r17, r17
     9a0:	49 f0       	breq	.+18     	; 0x9b4 <prvCopyDataToQueue+0xae>
     9a2:	11 50       	subi	r17, 0x01	; 1
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <prvCopyDataToQueue+0xb0>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <prvCopyDataToQueue+0xb0>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <prvCopyDataToQueue+0xb0>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <prvCopyDataToQueue+0xb0>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	1f 5f       	subi	r17, 0xFF	; 255
     9b8:	1e 8f       	std	Y+30, r17	; 0x1e
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	08 95       	ret

000009c4 <prvCopyDataFromQueue>:
     9c4:	fc 01       	movw	r30, r24
     9c6:	40 a1       	ldd	r20, Z+32	; 0x20
     9c8:	44 23       	and	r20, r20
     9ca:	a9 f0       	breq	.+42     	; 0x9f6 <prvCopyDataFromQueue+0x32>
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	26 81       	ldd	r18, Z+6	; 0x06
     9d0:	37 81       	ldd	r19, Z+7	; 0x07
     9d2:	24 0f       	add	r18, r20
     9d4:	35 1f       	adc	r19, r21
     9d6:	37 83       	std	Z+7, r19	; 0x07
     9d8:	26 83       	std	Z+6, r18	; 0x06
     9da:	84 81       	ldd	r24, Z+4	; 0x04
     9dc:	95 81       	ldd	r25, Z+5	; 0x05
     9de:	28 17       	cp	r18, r24
     9e0:	39 07       	cpc	r19, r25
     9e2:	20 f0       	brcs	.+8      	; 0x9ec <prvCopyDataFromQueue+0x28>
     9e4:	80 81       	ld	r24, Z
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	97 83       	std	Z+7, r25	; 0x07
     9ea:	86 83       	std	Z+6, r24	; 0x06
     9ec:	cb 01       	movw	r24, r22
     9ee:	66 81       	ldd	r22, Z+6	; 0x06
     9f0:	77 81       	ldd	r23, Z+7	; 0x07
     9f2:	0c 94 47 2b 	jmp	0x568e	; 0x568e <memcpy>
     9f6:	08 95       	ret

000009f8 <prvUnlockQueue>:
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	0f 92       	push	r0
     a06:	1a a1       	ldd	r17, Y+34	; 0x22
     a08:	0b c0       	rjmp	.+22     	; 0xa20 <prvUnlockQueue+0x28>
     a0a:	8b 89       	ldd	r24, Y+19	; 0x13
     a0c:	88 23       	and	r24, r24
     a0e:	51 f0       	breq	.+20     	; 0xa24 <prvUnlockQueue+0x2c>
     a10:	ce 01       	movw	r24, r28
     a12:	43 96       	adiw	r24, 0x13	; 19
     a14:	0e 94 3b 10 	call	0x2076	; 0x2076 <xTaskRemoveFromEventList>
     a18:	81 11       	cpse	r24, r1
     a1a:	0e 94 77 11 	call	0x22ee	; 0x22ee <vTaskMissedYield>
     a1e:	11 50       	subi	r17, 0x01	; 1
     a20:	11 16       	cp	r1, r17
     a22:	9c f3       	brlt	.-26     	; 0xa0a <prvUnlockQueue+0x12>
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	8a a3       	std	Y+34, r24	; 0x22
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	0f 92       	push	r0
     a32:	19 a1       	ldd	r17, Y+33	; 0x21
     a34:	0b c0       	rjmp	.+22     	; 0xa4c <prvUnlockQueue+0x54>
     a36:	88 85       	ldd	r24, Y+8	; 0x08
     a38:	88 23       	and	r24, r24
     a3a:	51 f0       	breq	.+20     	; 0xa50 <prvUnlockQueue+0x58>
     a3c:	ce 01       	movw	r24, r28
     a3e:	08 96       	adiw	r24, 0x08	; 8
     a40:	0e 94 3b 10 	call	0x2076	; 0x2076 <xTaskRemoveFromEventList>
     a44:	81 11       	cpse	r24, r1
     a46:	0e 94 77 11 	call	0x22ee	; 0x22ee <vTaskMissedYield>
     a4a:	11 50       	subi	r17, 0x01	; 1
     a4c:	11 16       	cp	r1, r17
     a4e:	9c f3       	brlt	.-26     	; 0xa36 <prvUnlockQueue+0x3e>
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	89 a3       	std	Y+33, r24	; 0x21
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	08 95       	ret

00000a60 <xQueueGenericReset>:
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	0f 92       	push	r0
     a6c:	e8 81       	ld	r30, Y
     a6e:	f9 81       	ldd	r31, Y+1	; 0x01
     a70:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a72:	28 a1       	ldd	r18, Y+32	; 0x20
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	82 9f       	mul	r24, r18
     a7a:	a0 01       	movw	r20, r0
     a7c:	83 9f       	mul	r24, r19
     a7e:	50 0d       	add	r21, r0
     a80:	92 9f       	mul	r25, r18
     a82:	50 0d       	add	r21, r0
     a84:	11 24       	eor	r1, r1
     a86:	4e 0f       	add	r20, r30
     a88:	5f 1f       	adc	r21, r31
     a8a:	5d 83       	std	Y+5, r21	; 0x05
     a8c:	4c 83       	std	Y+4, r20	; 0x04
     a8e:	1e 8e       	std	Y+30, r1	; 0x1e
     a90:	fb 83       	std	Y+3, r31	; 0x03
     a92:	ea 83       	std	Y+2, r30	; 0x02
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	28 9f       	mul	r18, r24
     a98:	a0 01       	movw	r20, r0
     a9a:	29 9f       	mul	r18, r25
     a9c:	50 0d       	add	r21, r0
     a9e:	38 9f       	mul	r19, r24
     aa0:	50 0d       	add	r21, r0
     aa2:	11 24       	eor	r1, r1
     aa4:	cf 01       	movw	r24, r30
     aa6:	84 0f       	add	r24, r20
     aa8:	95 1f       	adc	r25, r21
     aaa:	9f 83       	std	Y+7, r25	; 0x07
     aac:	8e 83       	std	Y+6, r24	; 0x06
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	89 a3       	std	Y+33, r24	; 0x21
     ab2:	8a a3       	std	Y+34, r24	; 0x22
     ab4:	61 11       	cpse	r22, r1
     ab6:	0b c0       	rjmp	.+22     	; 0xace <xQueueGenericReset+0x6e>
     ab8:	88 85       	ldd	r24, Y+8	; 0x08
     aba:	88 23       	and	r24, r24
     abc:	71 f0       	breq	.+28     	; 0xada <xQueueGenericReset+0x7a>
     abe:	ce 01       	movw	r24, r28
     ac0:	08 96       	adiw	r24, 0x08	; 8
     ac2:	0e 94 3b 10 	call	0x2076	; 0x2076 <xTaskRemoveFromEventList>
     ac6:	88 23       	and	r24, r24
     ac8:	41 f0       	breq	.+16     	; 0xada <xQueueGenericReset+0x7a>
     aca:	3a de       	rcall	.-908    	; 0x740 <vPortYield>
     acc:	06 c0       	rjmp	.+12     	; 0xada <xQueueGenericReset+0x7a>
     ace:	ce 01       	movw	r24, r28
     ad0:	08 96       	adiw	r24, 0x08	; 8
     ad2:	68 dd       	rcall	.-1328   	; 0x5a4 <vListInitialise>
     ad4:	ce 01       	movw	r24, r28
     ad6:	43 96       	adiw	r24, 0x13	; 19
     ad8:	65 dd       	rcall	.-1334   	; 0x5a4 <vListInitialise>
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <prvInitialiseNewQueue>:
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	f8 01       	movw	r30, r16
     aec:	61 11       	cpse	r22, r1
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <prvInitialiseNewQueue+0x10>
     af0:	11 83       	std	Z+1, r17	; 0x01
     af2:	00 83       	st	Z, r16
     af4:	02 c0       	rjmp	.+4      	; 0xafa <prvInitialiseNewQueue+0x14>
     af6:	51 83       	std	Z+1, r21	; 0x01
     af8:	40 83       	st	Z, r20
     afa:	87 8f       	std	Z+31, r24	; 0x1f
     afc:	60 a3       	std	Z+32, r22	; 0x20
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	cf 01       	movw	r24, r30
     b02:	ae df       	rcall	.-164    	; 0xa60 <xQueueGenericReset>
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	08 95       	ret

00000b0a <xQueueGenericCreate>:
     b0a:	df 92       	push	r13
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	f8 2e       	mov	r15, r24
     b1a:	e6 2e       	mov	r14, r22
     b1c:	d4 2e       	mov	r13, r20
     b1e:	86 9f       	mul	r24, r22
     b20:	c0 01       	movw	r24, r0
     b22:	11 24       	eor	r1, r1
     b24:	83 96       	adiw	r24, 0x23	; 35
     b26:	58 dc       	rcall	.-1872   	; 0x3d8 <pvPortMalloc>
     b28:	ec 01       	movw	r28, r24
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	41 f0       	breq	.+16     	; 0xb3e <xQueueGenericCreate+0x34>
     b2e:	8c 01       	movw	r16, r24
     b30:	2d 2d       	mov	r18, r13
     b32:	ac 01       	movw	r20, r24
     b34:	4d 5d       	subi	r20, 0xDD	; 221
     b36:	5f 4f       	sbci	r21, 0xFF	; 255
     b38:	6e 2d       	mov	r22, r14
     b3a:	8f 2d       	mov	r24, r15
     b3c:	d4 df       	rcall	.-88     	; 0xae6 <prvInitialiseNewQueue>
     b3e:	ce 01       	movw	r24, r28
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	08 95       	ret

00000b50 <xQueueGenericSend>:
     b50:	cf 92       	push	r12
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	29 97       	sbiw	r28, 0x09	; 9
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	7c 01       	movw	r14, r24
     b72:	6b 01       	movw	r12, r22
     b74:	2e 83       	std	Y+6, r18	; 0x06
     b76:	3f 83       	std	Y+7, r19	; 0x07
     b78:	48 87       	std	Y+8, r20	; 0x08
     b7a:	59 87       	std	Y+9, r21	; 0x09
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	0f 92       	push	r0
     b84:	f7 01       	movw	r30, r14
     b86:	96 8d       	ldd	r25, Z+30	; 0x1e
     b88:	87 8d       	ldd	r24, Z+31	; 0x1f
     b8a:	98 17       	cp	r25, r24
     b8c:	10 f0       	brcs	.+4      	; 0xb92 <xQueueGenericSend+0x42>
     b8e:	02 30       	cpi	r16, 0x02	; 2
     b90:	b1 f4       	brne	.+44     	; 0xbbe <xQueueGenericSend+0x6e>
     b92:	40 2f       	mov	r20, r16
     b94:	b6 01       	movw	r22, r12
     b96:	c7 01       	movw	r24, r14
     b98:	b6 de       	rcall	.-660    	; 0x906 <prvCopyDataToQueue>
     b9a:	f7 01       	movw	r30, r14
     b9c:	93 89       	ldd	r25, Z+19	; 0x13
     b9e:	99 23       	and	r25, r25
     ba0:	41 f0       	breq	.+16     	; 0xbb2 <xQueueGenericSend+0x62>
     ba2:	c7 01       	movw	r24, r14
     ba4:	43 96       	adiw	r24, 0x13	; 19
     ba6:	0e 94 3b 10 	call	0x2076	; 0x2076 <xTaskRemoveFromEventList>
     baa:	88 23       	and	r24, r24
     bac:	21 f0       	breq	.+8      	; 0xbb6 <xQueueGenericSend+0x66>
     bae:	c8 dd       	rcall	.-1136   	; 0x740 <vPortYield>
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <xQueueGenericSend+0x66>
     bb2:	81 11       	cpse	r24, r1
     bb4:	c5 dd       	rcall	.-1142   	; 0x740 <vPortYield>
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	4a c0       	rjmp	.+148    	; 0xc52 <xQueueGenericSend+0x102>
     bbe:	8e 81       	ldd	r24, Y+6	; 0x06
     bc0:	9f 81       	ldd	r25, Y+7	; 0x07
     bc2:	a8 85       	ldd	r26, Y+8	; 0x08
     bc4:	b9 85       	ldd	r27, Y+9	; 0x09
     bc6:	89 2b       	or	r24, r25
     bc8:	8a 2b       	or	r24, r26
     bca:	8b 2b       	or	r24, r27
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <xQueueGenericSend+0x86>
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	3e c0       	rjmp	.+124    	; 0xc52 <xQueueGenericSend+0x102>
     bd6:	11 11       	cpse	r17, r1
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <xQueueGenericSend+0x94>
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	0e 94 00 11 	call	0x2200	; 0x2200 <vTaskInternalSetTimeOutState>
     be2:	11 e0       	ldi	r17, 0x01	; 1
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	ec d6       	rcall	.+3544   	; 0x19c2 <vTaskSuspendAll>
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	0f 92       	push	r0
     bf0:	f7 01       	movw	r30, r14
     bf2:	81 a1       	ldd	r24, Z+33	; 0x21
     bf4:	8f 3f       	cpi	r24, 0xFF	; 255
     bf6:	09 f4       	brne	.+2      	; 0xbfa <xQueueGenericSend+0xaa>
     bf8:	11 a2       	std	Z+33, r1	; 0x21
     bfa:	f7 01       	movw	r30, r14
     bfc:	82 a1       	ldd	r24, Z+34	; 0x22
     bfe:	8f 3f       	cpi	r24, 0xFF	; 255
     c00:	09 f4       	brne	.+2      	; 0xc04 <xQueueGenericSend+0xb4>
     c02:	12 a2       	std	Z+34, r1	; 0x22
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	be 01       	movw	r22, r28
     c0a:	6a 5f       	subi	r22, 0xFA	; 250
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	ce 01       	movw	r24, r28
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	0e 94 11 11 	call	0x2222	; 0x2222 <xTaskCheckForTimeOut>
     c16:	81 11       	cpse	r24, r1
     c18:	18 c0       	rjmp	.+48     	; 0xc4a <xQueueGenericSend+0xfa>
     c1a:	c7 01       	movw	r24, r14
     c1c:	66 de       	rcall	.-820    	; 0x8ea <prvIsQueueFull>
     c1e:	88 23       	and	r24, r24
     c20:	81 f0       	breq	.+32     	; 0xc42 <xQueueGenericSend+0xf2>
     c22:	4e 81       	ldd	r20, Y+6	; 0x06
     c24:	5f 81       	ldd	r21, Y+7	; 0x07
     c26:	68 85       	ldd	r22, Y+8	; 0x08
     c28:	79 85       	ldd	r23, Y+9	; 0x09
     c2a:	c7 01       	movw	r24, r14
     c2c:	08 96       	adiw	r24, 0x08	; 8
     c2e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <vTaskPlaceOnEventList>
     c32:	c7 01       	movw	r24, r14
     c34:	e1 de       	rcall	.-574    	; 0x9f8 <prvUnlockQueue>
     c36:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <xTaskResumeAll>
     c3a:	81 11       	cpse	r24, r1
     c3c:	a0 cf       	rjmp	.-192    	; 0xb7e <xQueueGenericSend+0x2e>
     c3e:	80 dd       	rcall	.-1280   	; 0x740 <vPortYield>
     c40:	9e cf       	rjmp	.-196    	; 0xb7e <xQueueGenericSend+0x2e>
     c42:	c7 01       	movw	r24, r14
     c44:	d9 de       	rcall	.-590    	; 0x9f8 <prvUnlockQueue>
     c46:	fd d7       	rcall	.+4090   	; 0x1c42 <xTaskResumeAll>
     c48:	9a cf       	rjmp	.-204    	; 0xb7e <xQueueGenericSend+0x2e>
     c4a:	c7 01       	movw	r24, r14
     c4c:	d5 de       	rcall	.-598    	; 0x9f8 <prvUnlockQueue>
     c4e:	f9 d7       	rcall	.+4082   	; 0x1c42 <xTaskResumeAll>
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	29 96       	adiw	r28, 0x09	; 9
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	08 95       	ret

00000c70 <xQueueGenericSendFromISR>:
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	8a 01       	movw	r16, r20
     c7e:	fc 01       	movw	r30, r24
     c80:	56 8d       	ldd	r21, Z+30	; 0x1e
     c82:	37 8d       	ldd	r19, Z+31	; 0x1f
     c84:	53 17       	cp	r21, r19
     c86:	10 f0       	brcs	.+4      	; 0xc8c <xQueueGenericSendFromISR+0x1c>
     c88:	22 30       	cpi	r18, 0x02	; 2
     c8a:	f9 f4       	brne	.+62     	; 0xcca <xQueueGenericSendFromISR+0x5a>
     c8c:	42 2f       	mov	r20, r18
     c8e:	78 01       	movw	r14, r16
     c90:	ec 01       	movw	r28, r24
     c92:	1a a1       	ldd	r17, Y+34	; 0x22
     c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c96:	ce 01       	movw	r24, r28
     c98:	36 de       	rcall	.-916    	; 0x906 <prvCopyDataToQueue>
     c9a:	1f 3f       	cpi	r17, 0xFF	; 255
     c9c:	81 f4       	brne	.+32     	; 0xcbe <xQueueGenericSendFromISR+0x4e>
     c9e:	8b 89       	ldd	r24, Y+19	; 0x13
     ca0:	88 23       	and	r24, r24
     ca2:	a9 f0       	breq	.+42     	; 0xcce <xQueueGenericSendFromISR+0x5e>
     ca4:	ce 01       	movw	r24, r28
     ca6:	43 96       	adiw	r24, 0x13	; 19
     ca8:	0e 94 3b 10 	call	0x2076	; 0x2076 <xTaskRemoveFromEventList>
     cac:	88 23       	and	r24, r24
     cae:	89 f0       	breq	.+34     	; 0xcd2 <xQueueGenericSendFromISR+0x62>
     cb0:	e1 14       	cp	r14, r1
     cb2:	f1 04       	cpc	r15, r1
     cb4:	81 f0       	breq	.+32     	; 0xcd6 <xQueueGenericSendFromISR+0x66>
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	f7 01       	movw	r30, r14
     cba:	80 83       	st	Z, r24
     cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <xQueueGenericSendFromISR+0x68>
     cbe:	ff 24       	eor	r15, r15
     cc0:	f3 94       	inc	r15
     cc2:	f1 0e       	add	r15, r17
     cc4:	fa a2       	std	Y+34, r15	; 0x22
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	07 c0       	rjmp	.+14     	; 0xcd8 <xQueueGenericSendFromISR+0x68>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <xQueueGenericSendFromISR+0x68>
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <xQueueGenericSendFromISR+0x68>
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <xQueueGenericSendFromISR+0x68>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	08 95       	ret

00000ce6 <xQueueReceive>:
     ce6:	cf 92       	push	r12
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	29 97       	sbiw	r28, 0x09	; 9
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	8c 01       	movw	r16, r24
     d08:	6b 01       	movw	r12, r22
     d0a:	2e 83       	std	Y+6, r18	; 0x06
     d0c:	3f 83       	std	Y+7, r19	; 0x07
     d0e:	48 87       	std	Y+8, r20	; 0x08
     d10:	59 87       	std	Y+9, r21	; 0x09
     d12:	e1 2c       	mov	r14, r1
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	0f 92       	push	r0
     d1a:	f8 01       	movw	r30, r16
     d1c:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d1e:	ff 20       	and	r15, r15
     d20:	99 f0       	breq	.+38     	; 0xd48 <xQueueReceive+0x62>
     d22:	b6 01       	movw	r22, r12
     d24:	c8 01       	movw	r24, r16
     d26:	4e de       	rcall	.-868    	; 0x9c4 <prvCopyDataFromQueue>
     d28:	fa 94       	dec	r15
     d2a:	f8 01       	movw	r30, r16
     d2c:	f6 8e       	std	Z+30, r15	; 0x1e
     d2e:	80 85       	ldd	r24, Z+8	; 0x08
     d30:	88 23       	and	r24, r24
     d32:	31 f0       	breq	.+12     	; 0xd40 <xQueueReceive+0x5a>
     d34:	c8 01       	movw	r24, r16
     d36:	08 96       	adiw	r24, 0x08	; 8
     d38:	0e 94 3b 10 	call	0x2076	; 0x2076 <xTaskRemoveFromEventList>
     d3c:	81 11       	cpse	r24, r1
     d3e:	00 dd       	rcall	.-1536   	; 0x740 <vPortYield>
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	4f c0       	rjmp	.+158    	; 0xde6 <xQueueReceive+0x100>
     d48:	8e 81       	ldd	r24, Y+6	; 0x06
     d4a:	9f 81       	ldd	r25, Y+7	; 0x07
     d4c:	a8 85       	ldd	r26, Y+8	; 0x08
     d4e:	b9 85       	ldd	r27, Y+9	; 0x09
     d50:	89 2b       	or	r24, r25
     d52:	8a 2b       	or	r24, r26
     d54:	8b 2b       	or	r24, r27
     d56:	21 f4       	brne	.+8      	; 0xd60 <xQueueReceive+0x7a>
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	43 c0       	rjmp	.+134    	; 0xde6 <xQueueReceive+0x100>
     d60:	e1 10       	cpse	r14, r1
     d62:	06 c0       	rjmp	.+12     	; 0xd70 <xQueueReceive+0x8a>
     d64:	ce 01       	movw	r24, r28
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	0e 94 00 11 	call	0x2200	; 0x2200 <vTaskInternalSetTimeOutState>
     d6c:	ee 24       	eor	r14, r14
     d6e:	e3 94       	inc	r14
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	26 d6       	rcall	.+3148   	; 0x19c2 <vTaskSuspendAll>
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	0f 92       	push	r0
     d7c:	f8 01       	movw	r30, r16
     d7e:	81 a1       	ldd	r24, Z+33	; 0x21
     d80:	8f 3f       	cpi	r24, 0xFF	; 255
     d82:	09 f4       	brne	.+2      	; 0xd86 <xQueueReceive+0xa0>
     d84:	11 a2       	std	Z+33, r1	; 0x21
     d86:	f8 01       	movw	r30, r16
     d88:	82 a1       	ldd	r24, Z+34	; 0x22
     d8a:	8f 3f       	cpi	r24, 0xFF	; 255
     d8c:	09 f4       	brne	.+2      	; 0xd90 <xQueueReceive+0xaa>
     d8e:	12 a2       	std	Z+34, r1	; 0x22
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	be 01       	movw	r22, r28
     d96:	6a 5f       	subi	r22, 0xFA	; 250
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	ce 01       	movw	r24, r28
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	0e 94 11 11 	call	0x2222	; 0x2222 <xTaskCheckForTimeOut>
     da2:	81 11       	cpse	r24, r1
     da4:	17 c0       	rjmp	.+46     	; 0xdd4 <xQueueReceive+0xee>
     da6:	c8 01       	movw	r24, r16
     da8:	93 dd       	rcall	.-1242   	; 0x8d0 <prvIsQueueEmpty>
     daa:	88 23       	and	r24, r24
     dac:	79 f0       	breq	.+30     	; 0xdcc <xQueueReceive+0xe6>
     dae:	4e 81       	ldd	r20, Y+6	; 0x06
     db0:	5f 81       	ldd	r21, Y+7	; 0x07
     db2:	68 85       	ldd	r22, Y+8	; 0x08
     db4:	79 85       	ldd	r23, Y+9	; 0x09
     db6:	c8 01       	movw	r24, r16
     db8:	43 96       	adiw	r24, 0x13	; 19
     dba:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <vTaskPlaceOnEventList>
     dbe:	c8 01       	movw	r24, r16
     dc0:	1b de       	rcall	.-970    	; 0x9f8 <prvUnlockQueue>
     dc2:	3f d7       	rcall	.+3710   	; 0x1c42 <xTaskResumeAll>
     dc4:	81 11       	cpse	r24, r1
     dc6:	a6 cf       	rjmp	.-180    	; 0xd14 <xQueueReceive+0x2e>
     dc8:	bb dc       	rcall	.-1674   	; 0x740 <vPortYield>
     dca:	a4 cf       	rjmp	.-184    	; 0xd14 <xQueueReceive+0x2e>
     dcc:	c8 01       	movw	r24, r16
     dce:	14 de       	rcall	.-984    	; 0x9f8 <prvUnlockQueue>
     dd0:	38 d7       	rcall	.+3696   	; 0x1c42 <xTaskResumeAll>
     dd2:	a0 cf       	rjmp	.-192    	; 0xd14 <xQueueReceive+0x2e>
     dd4:	c8 01       	movw	r24, r16
     dd6:	10 de       	rcall	.-992    	; 0x9f8 <prvUnlockQueue>
     dd8:	34 d7       	rcall	.+3688   	; 0x1c42 <xTaskResumeAll>
     dda:	c8 01       	movw	r24, r16
     ddc:	79 dd       	rcall	.-1294   	; 0x8d0 <prvIsQueueEmpty>
     dde:	88 23       	and	r24, r24
     de0:	09 f4       	brne	.+2      	; 0xde4 <xQueueReceive+0xfe>
     de2:	98 cf       	rjmp	.-208    	; 0xd14 <xQueueReceive+0x2e>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	29 96       	adiw	r28, 0x09	; 9
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	df 90       	pop	r13
     e00:	cf 90       	pop	r12
     e02:	08 95       	ret

00000e04 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	0f 92       	push	r0
     e10:	89 a1       	ldd	r24, Y+33	; 0x21
     e12:	8f 3f       	cpi	r24, 0xFF	; 255
     e14:	09 f4       	brne	.+2      	; 0xe18 <vQueueWaitForMessageRestricted+0x14>
     e16:	19 a2       	std	Y+33, r1	; 0x21
     e18:	8a a1       	ldd	r24, Y+34	; 0x22
     e1a:	8f 3f       	cpi	r24, 0xFF	; 255
     e1c:	09 f4       	brne	.+2      	; 0xe20 <vQueueWaitForMessageRestricted+0x1c>
     e1e:	1a a2       	std	Y+34, r1	; 0x22
     e20:	0f 90       	pop	r0
     e22:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     e24:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e26:	81 11       	cpse	r24, r1
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     e2a:	ce 01       	movw	r24, r28
     e2c:	43 96       	adiw	r24, 0x13	; 19
     e2e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     e32:	ce 01       	movw	r24, r28
     e34:	e1 dd       	rcall	.-1086   	; 0x9f8 <prvUnlockQueue>
    }
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     e3c:	fc 01       	movw	r30, r24
     e3e:	44 81       	ldd	r20, Z+4	; 0x04
     e40:	55 81       	ldd	r21, Z+5	; 0x05
     e42:	22 81       	ldd	r18, Z+2	; 0x02
     e44:	33 81       	ldd	r19, Z+3	; 0x03
     e46:	24 0f       	add	r18, r20
     e48:	35 1f       	adc	r19, r21
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	b9 01       	movw	r22, r18
     e50:	68 1b       	sub	r22, r24
     e52:	79 0b       	sbc	r23, r25
     e54:	cb 01       	movw	r24, r22
     e56:	64 17       	cp	r22, r20
     e58:	75 07       	cpc	r23, r21
     e5a:	10 f0       	brcs	.+4      	; 0xe60 <prvBytesInBuffer+0x24>
     e5c:	84 1b       	sub	r24, r20
     e5e:	95 0b       	sbc	r25, r21
     e60:	08 95       	ret

00000e62 <prvInitialiseNewStreamBuffer>:
     e62:	0f 93       	push	r16
     e64:	fc 01       	movw	r30, r24
     e66:	8f e0       	ldi	r24, 0x0F	; 15
     e68:	df 01       	movw	r26, r30
     e6a:	1d 92       	st	X+, r1
     e6c:	8a 95       	dec	r24
     e6e:	e9 f7       	brne	.-6      	; 0xe6a <prvInitialiseNewStreamBuffer+0x8>
     e70:	75 87       	std	Z+13, r23	; 0x0d
     e72:	64 87       	std	Z+12, r22	; 0x0c
     e74:	55 83       	std	Z+5, r21	; 0x05
     e76:	44 83       	std	Z+4, r20	; 0x04
     e78:	37 83       	std	Z+7, r19	; 0x07
     e7a:	26 83       	std	Z+6, r18	; 0x06
     e7c:	06 87       	std	Z+14, r16	; 0x0e
     e7e:	0f 91       	pop	r16
     e80:	08 95       	ret

00000e82 <prvWriteBytesToBuffer>:
     e82:	af 92       	push	r10
     e84:	bf 92       	push	r11
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	6c 01       	movw	r12, r24
     e98:	5b 01       	movw	r10, r22
     e9a:	7a 01       	movw	r14, r20
     e9c:	fc 01       	movw	r30, r24
     e9e:	c2 81       	ldd	r28, Z+2	; 0x02
     ea0:	d3 81       	ldd	r29, Z+3	; 0x03
     ea2:	04 81       	ldd	r16, Z+4	; 0x04
     ea4:	15 81       	ldd	r17, Z+5	; 0x05
     ea6:	0c 1b       	sub	r16, r28
     ea8:	1d 0b       	sbc	r17, r29
     eaa:	40 17       	cp	r20, r16
     eac:	51 07       	cpc	r21, r17
     eae:	08 f4       	brcc	.+2      	; 0xeb2 <prvWriteBytesToBuffer+0x30>
     eb0:	8a 01       	movw	r16, r20
     eb2:	f6 01       	movw	r30, r12
     eb4:	84 85       	ldd	r24, Z+12	; 0x0c
     eb6:	95 85       	ldd	r25, Z+13	; 0x0d
     eb8:	a8 01       	movw	r20, r16
     eba:	b5 01       	movw	r22, r10
     ebc:	8c 0f       	add	r24, r28
     ebe:	9d 1f       	adc	r25, r29
     ec0:	0e 94 47 2b 	call	0x568e	; 0x568e <memcpy>
     ec4:	0e 15       	cp	r16, r14
     ec6:	1f 05       	cpc	r17, r15
     ec8:	58 f4       	brcc	.+22     	; 0xee0 <prvWriteBytesToBuffer+0x5e>
     eca:	a7 01       	movw	r20, r14
     ecc:	40 1b       	sub	r20, r16
     ece:	51 0b       	sbc	r21, r17
     ed0:	b5 01       	movw	r22, r10
     ed2:	60 0f       	add	r22, r16
     ed4:	71 1f       	adc	r23, r17
     ed6:	f6 01       	movw	r30, r12
     ed8:	84 85       	ldd	r24, Z+12	; 0x0c
     eda:	95 85       	ldd	r25, Z+13	; 0x0d
     edc:	0e 94 47 2b 	call	0x568e	; 0x568e <memcpy>
     ee0:	ce 01       	movw	r24, r28
     ee2:	8e 0d       	add	r24, r14
     ee4:	9f 1d       	adc	r25, r15
     ee6:	f6 01       	movw	r30, r12
     ee8:	24 81       	ldd	r18, Z+4	; 0x04
     eea:	35 81       	ldd	r19, Z+5	; 0x05
     eec:	82 17       	cp	r24, r18
     eee:	93 07       	cpc	r25, r19
     ef0:	10 f0       	brcs	.+4      	; 0xef6 <prvWriteBytesToBuffer+0x74>
     ef2:	82 1b       	sub	r24, r18
     ef4:	93 0b       	sbc	r25, r19
     ef6:	f6 01       	movw	r30, r12
     ef8:	93 83       	std	Z+3, r25	; 0x03
     efa:	82 83       	std	Z+2, r24	; 0x02
     efc:	c7 01       	movw	r24, r14
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	08 95       	ret

00000f14 <prvWriteMessageToBuffer>:
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	1f 92       	push	r1
     f26:	1f 92       	push	r1
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	7c 01       	movw	r14, r24
     f2e:	6b 01       	movw	r12, r22
     f30:	5a 83       	std	Y+2, r21	; 0x02
     f32:	49 83       	std	Y+1, r20	; 0x01
     f34:	21 15       	cp	r18, r1
     f36:	31 05       	cpc	r19, r1
     f38:	c1 f0       	breq	.+48     	; 0xf6a <prvWriteMessageToBuffer+0x56>
     f3a:	fc 01       	movw	r30, r24
     f3c:	86 85       	ldd	r24, Z+14	; 0x0e
     f3e:	80 fd       	sbrc	r24, 0
     f40:	08 c0       	rjmp	.+16     	; 0xf52 <prvWriteMessageToBuffer+0x3e>
     f42:	42 17       	cp	r20, r18
     f44:	53 07       	cpc	r21, r19
     f46:	08 f4       	brcc	.+2      	; 0xf4a <prvWriteMessageToBuffer+0x36>
     f48:	9a 01       	movw	r18, r20
     f4a:	3a 83       	std	Y+2, r19	; 0x02
     f4c:	29 83       	std	Y+1, r18	; 0x01
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <prvWriteMessageToBuffer+0x5c>
     f52:	20 17       	cp	r18, r16
     f54:	31 07       	cpc	r19, r17
     f56:	58 f0       	brcs	.+22     	; 0xf6e <prvWriteMessageToBuffer+0x5a>
     f58:	42 e0       	ldi	r20, 0x02	; 2
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	be 01       	movw	r22, r28
     f5e:	6f 5f       	subi	r22, 0xFF	; 255
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	c7 01       	movw	r24, r14
     f64:	8e df       	rcall	.-228    	; 0xe82 <prvWriteBytesToBuffer>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <prvWriteMessageToBuffer+0x5c>
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <prvWriteMessageToBuffer+0x5c>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	88 23       	and	r24, r24
     f72:	31 f0       	breq	.+12     	; 0xf80 <prvWriteMessageToBuffer+0x6c>
     f74:	49 81       	ldd	r20, Y+1	; 0x01
     f76:	5a 81       	ldd	r21, Y+2	; 0x02
     f78:	b6 01       	movw	r22, r12
     f7a:	c7 01       	movw	r24, r14
     f7c:	82 df       	rcall	.-252    	; 0xe82 <prvWriteBytesToBuffer>
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <prvWriteMessageToBuffer+0x70>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	df 90       	pop	r13
     f96:	cf 90       	pop	r12
     f98:	08 95       	ret

00000f9a <prvReadBytesFromBuffer>:
     f9a:	af 92       	push	r10
     f9c:	bf 92       	push	r11
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	7c 01       	movw	r14, r24
     fb0:	5b 01       	movw	r10, r22
     fb2:	e9 01       	movw	r28, r18
     fb4:	42 17       	cp	r20, r18
     fb6:	53 07       	cpc	r21, r19
     fb8:	08 f4       	brcc	.+2      	; 0xfbc <prvReadBytesFromBuffer+0x22>
     fba:	ea 01       	movw	r28, r20
     fbc:	20 97       	sbiw	r28, 0x00	; 0
     fbe:	81 f1       	breq	.+96     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
     fc0:	f7 01       	movw	r30, r14
     fc2:	00 81       	ld	r16, Z
     fc4:	11 81       	ldd	r17, Z+1	; 0x01
     fc6:	84 81       	ldd	r24, Z+4	; 0x04
     fc8:	95 81       	ldd	r25, Z+5	; 0x05
     fca:	80 1b       	sub	r24, r16
     fcc:	91 0b       	sbc	r25, r17
     fce:	6e 01       	movw	r12, r28
     fd0:	8c 17       	cp	r24, r28
     fd2:	9d 07       	cpc	r25, r29
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <prvReadBytesFromBuffer+0x3e>
     fd6:	6c 01       	movw	r12, r24
     fd8:	f7 01       	movw	r30, r14
     fda:	64 85       	ldd	r22, Z+12	; 0x0c
     fdc:	75 85       	ldd	r23, Z+13	; 0x0d
     fde:	60 0f       	add	r22, r16
     fe0:	71 1f       	adc	r23, r17
     fe2:	a6 01       	movw	r20, r12
     fe4:	c5 01       	movw	r24, r10
     fe6:	0e 94 47 2b 	call	0x568e	; 0x568e <memcpy>
     fea:	cc 16       	cp	r12, r28
     fec:	dd 06       	cpc	r13, r29
     fee:	58 f4       	brcc	.+22     	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
     ff0:	ae 01       	movw	r20, r28
     ff2:	4c 19       	sub	r20, r12
     ff4:	5d 09       	sbc	r21, r13
     ff6:	f7 01       	movw	r30, r14
     ff8:	64 85       	ldd	r22, Z+12	; 0x0c
     ffa:	75 85       	ldd	r23, Z+13	; 0x0d
     ffc:	c5 01       	movw	r24, r10
     ffe:	8c 0d       	add	r24, r12
    1000:	9d 1d       	adc	r25, r13
    1002:	0e 94 47 2b 	call	0x568e	; 0x568e <memcpy>
    1006:	0c 0f       	add	r16, r28
    1008:	1d 1f       	adc	r17, r29
    100a:	f7 01       	movw	r30, r14
    100c:	84 81       	ldd	r24, Z+4	; 0x04
    100e:	95 81       	ldd	r25, Z+5	; 0x05
    1010:	08 17       	cp	r16, r24
    1012:	19 07       	cpc	r17, r25
    1014:	10 f0       	brcs	.+4      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1016:	08 1b       	sub	r16, r24
    1018:	19 0b       	sbc	r17, r25
    101a:	f7 01       	movw	r30, r14
    101c:	11 83       	std	Z+1, r17	; 0x01
    101e:	00 83       	st	Z, r16
    1020:	ce 01       	movw	r24, r28
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	08 95       	ret

00001038 <prvReadMessageFromBuffer>:
    1038:	6f 92       	push	r6
    103a:	7f 92       	push	r7
    103c:	8f 92       	push	r8
    103e:	9f 92       	push	r9
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	1f 92       	push	r1
    1056:	1f 92       	push	r1
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	6c 01       	movw	r12, r24
    105e:	4b 01       	movw	r8, r22
    1060:	5a 01       	movw	r10, r20
    1062:	79 01       	movw	r14, r18
    1064:	01 15       	cp	r16, r1
    1066:	11 05       	cpc	r17, r1
    1068:	b1 f0       	breq	.+44     	; 0x1096 <prvReadMessageFromBuffer+0x5e>
    106a:	fc 01       	movw	r30, r24
    106c:	60 80       	ld	r6, Z
    106e:	71 80       	ldd	r7, Z+1	; 0x01
    1070:	a8 01       	movw	r20, r16
    1072:	be 01       	movw	r22, r28
    1074:	6f 5f       	subi	r22, 0xFF	; 255
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	90 df       	rcall	.-224    	; 0xf9a <prvReadBytesFromBuffer>
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	e0 1a       	sub	r14, r16
    1080:	f1 0a       	sbc	r15, r17
    1082:	a8 16       	cp	r10, r24
    1084:	b9 06       	cpc	r11, r25
    1086:	30 f4       	brcc	.+12     	; 0x1094 <prvReadMessageFromBuffer+0x5c>
    1088:	f6 01       	movw	r30, r12
    108a:	71 82       	std	Z+1, r7	; 0x01
    108c:	60 82       	st	Z, r6
    108e:	a1 2c       	mov	r10, r1
    1090:	b1 2c       	mov	r11, r1
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <prvReadMessageFromBuffer+0x5e>
    1094:	5c 01       	movw	r10, r24
    1096:	97 01       	movw	r18, r14
    1098:	a5 01       	movw	r20, r10
    109a:	b4 01       	movw	r22, r8
    109c:	c6 01       	movw	r24, r12
    109e:	7d df       	rcall	.-262    	; 0xf9a <prvReadBytesFromBuffer>
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	bf 90       	pop	r11
    10b6:	af 90       	pop	r10
    10b8:	9f 90       	pop	r9
    10ba:	8f 90       	pop	r8
    10bc:	7f 90       	pop	r7
    10be:	6f 90       	pop	r6
    10c0:	08 95       	ret

000010c2 <xStreamBufferGenericCreate>:
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
    10d2:	6b 01       	movw	r12, r22
    10d4:	41 30       	cpi	r20, 0x01	; 1
    10d6:	11 f4       	brne	.+4      	; 0x10dc <xStreamBufferGenericCreate+0x1a>
    10d8:	01 e0       	ldi	r16, 0x01	; 1
    10da:	01 c0       	rjmp	.+2      	; 0x10de <xStreamBufferGenericCreate+0x1c>
    10dc:	00 e0       	ldi	r16, 0x00	; 0
    10de:	c1 14       	cp	r12, r1
    10e0:	d1 04       	cpc	r13, r1
    10e2:	19 f4       	brne	.+6      	; 0x10ea <xStreamBufferGenericCreate+0x28>
    10e4:	cc 24       	eor	r12, r12
    10e6:	c3 94       	inc	r12
    10e8:	d1 2c       	mov	r13, r1
    10ea:	ce 01       	movw	r24, r28
    10ec:	40 96       	adiw	r24, 0x10	; 16
    10ee:	c8 17       	cp	r28, r24
    10f0:	d9 07       	cpc	r29, r25
    10f2:	20 f4       	brcc	.+8      	; 0x10fc <xStreamBufferGenericCreate+0x3a>
    10f4:	21 96       	adiw	r28, 0x01	; 1
    10f6:	70 d9       	rcall	.-3360   	; 0x3d8 <pvPortMalloc>
    10f8:	7c 01       	movw	r14, r24
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <xStreamBufferGenericCreate+0x3e>
    10fc:	e1 2c       	mov	r14, r1
    10fe:	f1 2c       	mov	r15, r1
    1100:	e1 14       	cp	r14, r1
    1102:	f1 04       	cpc	r15, r1
    1104:	39 f0       	breq	.+14     	; 0x1114 <xStreamBufferGenericCreate+0x52>
    1106:	96 01       	movw	r18, r12
    1108:	ae 01       	movw	r20, r28
    110a:	b7 01       	movw	r22, r14
    110c:	61 5f       	subi	r22, 0xF1	; 241
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	c7 01       	movw	r24, r14
    1112:	a7 de       	rcall	.-690    	; 0xe62 <prvInitialiseNewStreamBuffer>
    1114:	c7 01       	movw	r24, r14
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	08 95       	ret

00001126 <xStreamBufferReset>:
    1126:	0f 93       	push	r16
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	0f 92       	push	r0
    112e:	fc 01       	movw	r30, r24
    1130:	20 85       	ldd	r18, Z+8	; 0x08
    1132:	31 85       	ldd	r19, Z+9	; 0x09
    1134:	23 2b       	or	r18, r19
    1136:	71 f4       	brne	.+28     	; 0x1154 <xStreamBufferReset+0x2e>
    1138:	22 85       	ldd	r18, Z+10	; 0x0a
    113a:	33 85       	ldd	r19, Z+11	; 0x0b
    113c:	23 2b       	or	r18, r19
    113e:	61 f4       	brne	.+24     	; 0x1158 <xStreamBufferReset+0x32>
    1140:	26 81       	ldd	r18, Z+6	; 0x06
    1142:	37 81       	ldd	r19, Z+7	; 0x07
    1144:	44 81       	ldd	r20, Z+4	; 0x04
    1146:	55 81       	ldd	r21, Z+5	; 0x05
    1148:	64 85       	ldd	r22, Z+12	; 0x0c
    114a:	75 85       	ldd	r23, Z+13	; 0x0d
    114c:	06 85       	ldd	r16, Z+14	; 0x0e
    114e:	89 de       	rcall	.-750    	; 0xe62 <prvInitialiseNewStreamBuffer>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	03 c0       	rjmp	.+6      	; 0x115a <xStreamBufferReset+0x34>
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	01 c0       	rjmp	.+2      	; 0x115a <xStreamBufferReset+0x34>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 91       	pop	r16
    1160:	08 95       	ret

00001162 <xStreamBufferSpacesAvailable>:
    1162:	fc 01       	movw	r30, r24
    1164:	24 81       	ldd	r18, Z+4	; 0x04
    1166:	35 81       	ldd	r19, Z+5	; 0x05
    1168:	80 81       	ld	r24, Z
    116a:	91 81       	ldd	r25, Z+1	; 0x01
    116c:	82 0f       	add	r24, r18
    116e:	93 1f       	adc	r25, r19
    1170:	42 81       	ldd	r20, Z+2	; 0x02
    1172:	53 81       	ldd	r21, Z+3	; 0x03
    1174:	84 1b       	sub	r24, r20
    1176:	95 0b       	sbc	r25, r21
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	82 17       	cp	r24, r18
    117c:	93 07       	cpc	r25, r19
    117e:	10 f0       	brcs	.+4      	; 0x1184 <xStreamBufferSpacesAvailable+0x22>
    1180:	82 1b       	sub	r24, r18
    1182:	93 0b       	sbc	r25, r19
    1184:	08 95       	ret

00001186 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1186:	2f 92       	push	r2
    1188:	3f 92       	push	r3
    118a:	4f 92       	push	r4
    118c:	5f 92       	push	r5
    118e:	6f 92       	push	r6
    1190:	7f 92       	push	r7
    1192:	8f 92       	push	r8
    1194:	9f 92       	push	r9
    1196:	af 92       	push	r10
    1198:	bf 92       	push	r11
    119a:	cf 92       	push	r12
    119c:	df 92       	push	r13
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	2b 97       	sbiw	r28, 0x0b	; 11
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	4c 01       	movw	r8, r24
    11bc:	7b 87       	std	Y+11, r23	; 0x0b
    11be:	6a 87       	std	Y+10, r22	; 0x0a
    11c0:	1a 01       	movw	r2, r20
    11c2:	0e 83       	std	Y+6, r16	; 0x06
    11c4:	1f 83       	std	Y+7, r17	; 0x07
    11c6:	28 87       	std	Y+8, r18	; 0x08
    11c8:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    11ca:	fc 01       	movw	r30, r24
    11cc:	84 81       	ldd	r24, Z+4	; 0x04
    11ce:	95 81       	ldd	r25, Z+5	; 0x05
    11d0:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    11d2:	26 85       	ldd	r18, Z+14	; 0x0e
    11d4:	20 ff       	sbrs	r18, 0
    11d6:	0c c0       	rjmp	.+24     	; 0x11f0 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    11d8:	2a 01       	movw	r4, r20
    11da:	f2 e0       	ldi	r31, 0x02	; 2
    11dc:	4f 0e       	add	r4, r31
    11de:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    11e0:	84 15       	cp	r24, r4
    11e2:	95 05       	cpc	r25, r5
    11e4:	58 f4       	brcc	.+22     	; 0x11fc <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    11e6:	1e 82       	std	Y+6, r1	; 0x06
    11e8:	1f 82       	std	Y+7, r1	; 0x07
    11ea:	18 86       	std	Y+8, r1	; 0x08
    11ec:	19 86       	std	Y+9, r1	; 0x09
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    11f0:	84 17       	cp	r24, r20
    11f2:	95 07       	cpc	r25, r21
    11f4:	10 f0       	brcs	.+4      	; 0x11fa <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    11f6:	2a 01       	movw	r4, r20
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    11fa:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    11fc:	8e 81       	ldd	r24, Y+6	; 0x06
    11fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1200:	a8 85       	ldd	r26, Y+8	; 0x08
    1202:	b9 85       	ldd	r27, Y+9	; 0x09
    1204:	89 2b       	or	r24, r25
    1206:	8a 2b       	or	r24, r26
    1208:	8b 2b       	or	r24, r27
    120a:	09 f4       	brne	.+2      	; 0x120e <xStreamBufferSend+0x88>
    120c:	36 c0       	rjmp	.+108    	; 0x127a <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    120e:	ce 01       	movw	r24, r28
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	e0 d7       	rcall	.+4032   	; 0x21d4 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    121a:	c4 01       	movw	r24, r8
    121c:	a2 df       	rcall	.-188    	; 0x1162 <xStreamBufferSpacesAvailable>
    121e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1220:	84 15       	cp	r24, r4
    1222:	95 05       	cpc	r25, r5
    1224:	38 f5       	brcc	.+78     	; 0x1274 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1230:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskGetCurrentTaskHandle>
    1234:	f4 01       	movw	r30, r8
    1236:	93 87       	std	Z+11, r25	; 0x0b
    1238:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    123e:	ae 80       	ldd	r10, Y+6	; 0x06
    1240:	bf 80       	ldd	r11, Y+7	; 0x07
    1242:	c8 84       	ldd	r12, Y+8	; 0x08
    1244:	d9 84       	ldd	r13, Y+9	; 0x09
    1246:	e1 2c       	mov	r14, r1
    1248:	f1 2c       	mov	r15, r1
    124a:	00 e0       	ldi	r16, 0x00	; 0
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	98 01       	movw	r18, r16
    1250:	40 e0       	ldi	r20, 0x00	; 0
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	ba 01       	movw	r22, r20
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    125c:	f4 01       	movw	r30, r8
    125e:	13 86       	std	Z+11, r1	; 0x0b
    1260:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1262:	be 01       	movw	r22, r28
    1264:	6a 5f       	subi	r22, 0xFA	; 250
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	da d7       	rcall	.+4020   	; 0x2222 <xTaskCheckForTimeOut>
    126e:	88 23       	and	r24, r24
    1270:	89 f2       	breq	.-94     	; 0x1214 <xStreamBufferSend+0x8e>
    1272:	05 c0       	rjmp	.+10     	; 0x127e <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1274:	0f 90       	pop	r0
    1276:	0f be       	out	0x3f, r0	; 63
                    break;
    1278:	02 c0       	rjmp	.+4      	; 0x127e <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    127a:	61 2c       	mov	r6, r1
    127c:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    127e:	61 14       	cp	r6, r1
    1280:	71 04       	cpc	r7, r1
    1282:	19 f4       	brne	.+6      	; 0x128a <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1284:	c4 01       	movw	r24, r8
    1286:	6d df       	rcall	.-294    	; 0x1162 <xStreamBufferSpacesAvailable>
    1288:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    128a:	82 01       	movw	r16, r4
    128c:	93 01       	movw	r18, r6
    128e:	a1 01       	movw	r20, r2
    1290:	6a 85       	ldd	r22, Y+10	; 0x0a
    1292:	7b 85       	ldd	r23, Y+11	; 0x0b
    1294:	c4 01       	movw	r24, r8
    1296:	3e de       	rcall	.-900    	; 0xf14 <prvWriteMessageToBuffer>
    1298:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    129a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    129c:	e9 f0       	breq	.+58     	; 0x12d8 <xStreamBufferSend+0x152>
    129e:	c4 01       	movw	r24, r8
    12a0:	cd dd       	rcall	.-1126   	; 0xe3c <prvBytesInBuffer>
    12a2:	f4 01       	movw	r30, r8
    12a4:	26 81       	ldd	r18, Z+6	; 0x06
    12a6:	37 81       	ldd	r19, Z+7	; 0x07
    12a8:	82 17       	cp	r24, r18
    12aa:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    12ac:	a8 f0       	brcs	.+42     	; 0x12d8 <xStreamBufferSend+0x152>
    12ae:	89 d3       	rcall	.+1810   	; 0x19c2 <vTaskSuspendAll>
    12b0:	f4 01       	movw	r30, r8
    12b2:	80 85       	ldd	r24, Z+8	; 0x08
    12b4:	91 85       	ldd	r25, Z+9	; 0x09
    12b6:	89 2b       	or	r24, r25
    12b8:	71 f0       	breq	.+28     	; 0x12d6 <xStreamBufferSend+0x150>
    12ba:	80 85       	ldd	r24, Z+8	; 0x08
    12bc:	91 85       	ldd	r25, Z+9	; 0x09
    12be:	e1 2c       	mov	r14, r1
    12c0:	f1 2c       	mov	r15, r1
    12c2:	00 e0       	ldi	r16, 0x00	; 0
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	a9 01       	movw	r20, r18
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	0e 94 90 12 	call	0x2520	; 0x2520 <xTaskGenericNotify>
    12d0:	f4 01       	movw	r30, r8
    12d2:	11 86       	std	Z+9, r1	; 0x09
    12d4:	10 86       	std	Z+8, r1	; 0x08
    12d6:	b5 d4       	rcall	.+2410   	; 0x1c42 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    12d8:	c6 01       	movw	r24, r12
    12da:	2b 96       	adiw	r28, 0x0b	; 11
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	bf 90       	pop	r11
    12f8:	af 90       	pop	r10
    12fa:	9f 90       	pop	r9
    12fc:	8f 90       	pop	r8
    12fe:	7f 90       	pop	r7
    1300:	6f 90       	pop	r6
    1302:	5f 90       	pop	r5
    1304:	4f 90       	pop	r4
    1306:	3f 90       	pop	r3
    1308:	2f 90       	pop	r2
    130a:	08 95       	ret

0000130c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    130c:	af 92       	push	r10
    130e:	bf 92       	push	r11
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    1322:	7b 01       	movw	r14, r22
    1324:	5a 01       	movw	r10, r20
    1326:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1328:	8e 85       	ldd	r24, Y+14	; 0x0e
    132a:	80 ff       	sbrs	r24, 0
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    132e:	8a 01       	movw	r16, r20
    1330:	0e 5f       	subi	r16, 0xFE	; 254
    1332:	1f 4f       	sbci	r17, 0xFF	; 255
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1336:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1338:	ce 01       	movw	r24, r28
    133a:	13 df       	rcall	.-474    	; 0x1162 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    133c:	9c 01       	movw	r18, r24
    133e:	a5 01       	movw	r20, r10
    1340:	b7 01       	movw	r22, r14
    1342:	ce 01       	movw	r24, r28
    1344:	e7 dd       	rcall	.-1074   	; 0xf14 <prvWriteMessageToBuffer>
    1346:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1348:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    134a:	c1 f0       	breq	.+48     	; 0x137c <xStreamBufferSendFromISR+0x70>
    134c:	ce 01       	movw	r24, r28
    134e:	76 dd       	rcall	.-1300   	; 0xe3c <prvBytesInBuffer>
    1350:	2e 81       	ldd	r18, Y+6	; 0x06
    1352:	3f 81       	ldd	r19, Y+7	; 0x07
    1354:	82 17       	cp	r24, r18
    1356:	93 07       	cpc	r25, r19
    1358:	88 f0       	brcs	.+34     	; 0x137c <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    135a:	88 85       	ldd	r24, Y+8	; 0x08
    135c:	99 85       	ldd	r25, Y+9	; 0x09
    135e:	89 2b       	or	r24, r25
    1360:	69 f0       	breq	.+26     	; 0x137c <xStreamBufferSendFromISR+0x70>
    1362:	88 85       	ldd	r24, Y+8	; 0x08
    1364:	99 85       	ldd	r25, Y+9	; 0x09
    1366:	e1 2c       	mov	r14, r1
    1368:	f1 2c       	mov	r15, r1
    136a:	00 e0       	ldi	r16, 0x00	; 0
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	a9 01       	movw	r20, r18
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	0e 94 87 13 	call	0x270e	; 0x270e <xTaskGenericNotifyFromISR>
    1378:	19 86       	std	Y+9, r1	; 0x09
    137a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    137c:	c5 01       	movw	r24, r10
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	ff 90       	pop	r15
    1388:	ef 90       	pop	r14
    138a:	df 90       	pop	r13
    138c:	cf 90       	pop	r12
    138e:	bf 90       	pop	r11
    1390:	af 90       	pop	r10
    1392:	08 95       	ret

00001394 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1394:	4f 92       	push	r4
    1396:	5f 92       	push	r5
    1398:	6f 92       	push	r6
    139a:	7f 92       	push	r7
    139c:	8f 92       	push	r8
    139e:	9f 92       	push	r9
    13a0:	af 92       	push	r10
    13a2:	bf 92       	push	r11
    13a4:	cf 92       	push	r12
    13a6:	df 92       	push	r13
    13a8:	ef 92       	push	r14
    13aa:	ff 92       	push	r15
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	ec 01       	movw	r28, r24
    13b6:	2b 01       	movw	r4, r22
    13b8:	3a 01       	movw	r6, r20
    13ba:	58 01       	movw	r10, r16
    13bc:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    13be:	8e 85       	ldd	r24, Y+14	; 0x0e
    13c0:	80 ff       	sbrs	r24, 0
    13c2:	05 c0       	rjmp	.+10     	; 0x13ce <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    13c4:	68 94       	set
    13c6:	88 24       	eor	r8, r8
    13c8:	81 f8       	bld	r8, 1
    13ca:	91 2c       	mov	r9, r1
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    13ce:	81 2c       	mov	r8, r1
    13d0:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    13d2:	a1 14       	cp	r10, r1
    13d4:	b1 04       	cpc	r11, r1
    13d6:	c1 04       	cpc	r12, r1
    13d8:	d1 04       	cpc	r13, r1
    13da:	31 f1       	breq	.+76     	; 0x1428 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13e2:	ce 01       	movw	r24, r28
    13e4:	2b dd       	rcall	.-1450   	; 0xe3c <prvBytesInBuffer>
    13e6:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    13e8:	88 16       	cp	r8, r24
    13ea:	99 06       	cpc	r9, r25
    13ec:	40 f0       	brcs	.+16     	; 0x13fe <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 a9 14 	call	0x2952	; 0x2952 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    13f8:	7e d7       	rcall	.+3836   	; 0x22f6 <xTaskGetCurrentTaskHandle>
    13fa:	99 87       	std	Y+9, r25	; 0x09
    13fc:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1402:	8e 14       	cp	r8, r14
    1404:	9f 04       	cpc	r9, r15
    1406:	98 f0       	brcs	.+38     	; 0x142e <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1408:	e1 2c       	mov	r14, r1
    140a:	f1 2c       	mov	r15, r1
    140c:	00 e0       	ldi	r16, 0x00	; 0
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	98 01       	movw	r18, r16
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	ba 01       	movw	r22, r20
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	db d7       	rcall	.+4022   	; 0x23d2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    141c:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    141e:	18 86       	std	Y+8, r1	; 0x08
    1420:	ce 01       	movw	r24, r28
    1422:	0c dd       	rcall	.-1512   	; 0xe3c <prvBytesInBuffer>
    1424:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1426:	03 c0       	rjmp	.+6      	; 0x142e <xStreamBufferReceive+0x9a>
    1428:	ce 01       	movw	r24, r28
    142a:	08 dd       	rcall	.-1520   	; 0xe3c <prvBytesInBuffer>
    142c:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    142e:	8e 14       	cp	r8, r14
    1430:	9f 04       	cpc	r9, r15
    1432:	e8 f4       	brcc	.+58     	; 0x146e <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1434:	84 01       	movw	r16, r8
    1436:	97 01       	movw	r18, r14
    1438:	a3 01       	movw	r20, r6
    143a:	b2 01       	movw	r22, r4
    143c:	ce 01       	movw	r24, r28
    143e:	fc dd       	rcall	.-1032   	; 0x1038 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1440:	6c 01       	movw	r12, r24
    1442:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1444:	b1 f0       	breq	.+44     	; 0x1472 <xStreamBufferReceive+0xde>
    1446:	bd d2       	rcall	.+1402   	; 0x19c2 <vTaskSuspendAll>
    1448:	8a 85       	ldd	r24, Y+10	; 0x0a
    144a:	9b 85       	ldd	r25, Y+11	; 0x0b
    144c:	89 2b       	or	r24, r25
    144e:	69 f0       	breq	.+26     	; 0x146a <xStreamBufferReceive+0xd6>
    1450:	8a 85       	ldd	r24, Y+10	; 0x0a
    1452:	9b 85       	ldd	r25, Y+11	; 0x0b
    1454:	e1 2c       	mov	r14, r1
    1456:	f1 2c       	mov	r15, r1
    1458:	00 e0       	ldi	r16, 0x00	; 0
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	a9 01       	movw	r20, r18
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	0e 94 90 12 	call	0x2520	; 0x2520 <xTaskGenericNotify>
    1466:	1b 86       	std	Y+11, r1	; 0x0b
    1468:	1a 86       	std	Y+10, r1	; 0x0a
    146a:	eb d3       	rcall	.+2006   	; 0x1c42 <xTaskResumeAll>
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    146e:	c1 2c       	mov	r12, r1
    1470:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1472:	c6 01       	movw	r24, r12
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	ff 90       	pop	r15
    147e:	ef 90       	pop	r14
    1480:	df 90       	pop	r13
    1482:	cf 90       	pop	r12
    1484:	bf 90       	pop	r11
    1486:	af 90       	pop	r10
    1488:	9f 90       	pop	r9
    148a:	8f 90       	pop	r8
    148c:	7f 90       	pop	r7
    148e:	6f 90       	pop	r6
    1490:	5f 90       	pop	r5
    1492:	4f 90       	pop	r4
    1494:	08 95       	ret

00001496 <prvResetNextTaskUnblockTime>:
    1496:	e0 91 85 11 	lds	r30, 0x1185	; 0x801185 <pxDelayedTaskList>
    149a:	f0 91 86 11 	lds	r31, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    149e:	80 81       	ld	r24, Z
    14a0:	81 11       	cpse	r24, r1
    14a2:	0c c0       	rjmp	.+24     	; 0x14bc <prvResetNextTaskUnblockTime+0x26>
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	9f ef       	ldi	r25, 0xFF	; 255
    14a8:	dc 01       	movw	r26, r24
    14aa:	80 93 4f 11 	sts	0x114F, r24	; 0x80114f <xNextTaskUnblockTime>
    14ae:	90 93 50 11 	sts	0x1150, r25	; 0x801150 <xNextTaskUnblockTime+0x1>
    14b2:	a0 93 51 11 	sts	0x1151, r26	; 0x801151 <xNextTaskUnblockTime+0x2>
    14b6:	b0 93 52 11 	sts	0x1152, r27	; 0x801152 <xNextTaskUnblockTime+0x3>
    14ba:	08 95       	ret
    14bc:	e0 91 85 11 	lds	r30, 0x1185	; 0x801185 <pxDelayedTaskList>
    14c0:	f0 91 86 11 	lds	r31, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    14c4:	07 80       	ldd	r0, Z+7	; 0x07
    14c6:	f0 85       	ldd	r31, Z+8	; 0x08
    14c8:	e0 2d       	mov	r30, r0
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	a2 81       	ldd	r26, Z+2	; 0x02
    14d0:	b3 81       	ldd	r27, Z+3	; 0x03
    14d2:	80 93 4f 11 	sts	0x114F, r24	; 0x80114f <xNextTaskUnblockTime>
    14d6:	90 93 50 11 	sts	0x1150, r25	; 0x801150 <xNextTaskUnblockTime+0x1>
    14da:	a0 93 51 11 	sts	0x1151, r26	; 0x801151 <xNextTaskUnblockTime+0x2>
    14de:	b0 93 52 11 	sts	0x1152, r27	; 0x801152 <xNextTaskUnblockTime+0x3>
    14e2:	08 95       	ret

000014e4 <prvDeleteTCB>:
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	ec 01       	movw	r28, r24
    14ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ee:	1d d8       	rcall	.-4038   	; 0x52a <vPortFree>
    14f0:	ce 01       	movw	r24, r28
    14f2:	1b d8       	rcall	.-4042   	; 0x52a <vPortFree>
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <prvInitialiseNewTask>:
    14fa:	4f 92       	push	r4
    14fc:	5f 92       	push	r5
    14fe:	6f 92       	push	r6
    1500:	7f 92       	push	r7
    1502:	8f 92       	push	r8
    1504:	9f 92       	push	r9
    1506:	af 92       	push	r10
    1508:	bf 92       	push	r11
    150a:	cf 92       	push	r12
    150c:	df 92       	push	r13
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	2c 01       	movw	r4, r24
    151a:	5b 01       	movw	r10, r22
    151c:	4a 01       	movw	r8, r20
    151e:	39 01       	movw	r6, r18
    1520:	e6 01       	movw	r28, r12
    1522:	65 ea       	ldi	r22, 0xA5	; 165
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1528:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152a:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <memset>
    152e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1532:	21 e0       	ldi	r18, 0x01	; 1
    1534:	82 1a       	sub	r8, r18
    1536:	91 08       	sbc	r9, r1
    1538:	88 0e       	add	r8, r24
    153a:	99 1e       	adc	r9, r25
    153c:	a1 14       	cp	r10, r1
    153e:	b1 04       	cpc	r11, r1
    1540:	89 f4       	brne	.+34     	; 0x1564 <prvInitialiseNewTask+0x6a>
    1542:	15 c0       	rjmp	.+42     	; 0x156e <prvInitialiseNewTask+0x74>
    1544:	82 2f       	mov	r24, r18
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	f5 01       	movw	r30, r10
    154a:	e8 0f       	add	r30, r24
    154c:	f9 1f       	adc	r31, r25
    154e:	30 81       	ld	r19, Z
    1550:	de 01       	movw	r26, r28
    1552:	a8 0f       	add	r26, r24
    1554:	b9 1f       	adc	r27, r25
    1556:	5d 96       	adiw	r26, 0x1d	; 29
    1558:	3c 93       	st	X, r19
    155a:	80 81       	ld	r24, Z
    155c:	88 23       	and	r24, r24
    155e:	29 f0       	breq	.+10     	; 0x156a <prvInitialiseNewTask+0x70>
    1560:	2f 5f       	subi	r18, 0xFF	; 255
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <prvInitialiseNewTask+0x6c>
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	20 31       	cpi	r18, 0x10	; 16
    1568:	68 f3       	brcs	.-38     	; 0x1544 <prvInitialiseNewTask+0x4a>
    156a:	1c a6       	std	Y+44, r1	; 0x2c
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <prvInitialiseNewTask+0x76>
    156e:	1d 8e       	std	Y+29, r1	; 0x1d
    1570:	0a 30       	cpi	r16, 0x0A	; 10
    1572:	08 f0       	brcs	.+2      	; 0x1576 <prvInitialiseNewTask+0x7c>
    1574:	09 e0       	ldi	r16, 0x09	; 9
    1576:	0a 8f       	std	Y+26, r16	; 0x1a
    1578:	0d a7       	std	Y+45, r16	; 0x2d
    157a:	1e a6       	std	Y+46, r1	; 0x2e
    157c:	ce 01       	movw	r24, r28
    157e:	02 96       	adiw	r24, 0x02	; 2
    1580:	22 d8       	rcall	.-4028   	; 0x5c6 <vListInitialiseItem>
    1582:	ce 01       	movw	r24, r28
    1584:	0e 96       	adiw	r24, 0x0e	; 14
    1586:	1f d8       	rcall	.-4034   	; 0x5c6 <vListInitialiseItem>
    1588:	db 87       	std	Y+11, r29	; 0x0b
    158a:	ca 87       	std	Y+10, r28	; 0x0a
    158c:	8a e0       	ldi	r24, 0x0A	; 10
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	80 1b       	sub	r24, r16
    1596:	91 09       	sbc	r25, r1
    1598:	a1 09       	sbc	r26, r1
    159a:	b1 09       	sbc	r27, r1
    159c:	8e 87       	std	Y+14, r24	; 0x0e
    159e:	9f 87       	std	Y+15, r25	; 0x0f
    15a0:	a8 8b       	std	Y+16, r26	; 0x10
    15a2:	b9 8b       	std	Y+17, r27	; 0x11
    15a4:	df 8b       	std	Y+23, r29	; 0x17
    15a6:	ce 8b       	std	Y+22, r28	; 0x16
    15a8:	84 e0       	ldi	r24, 0x04	; 4
    15aa:	fe 01       	movw	r30, r28
    15ac:	bf 96       	adiw	r30, 0x2f	; 47
    15ae:	df 01       	movw	r26, r30
    15b0:	1d 92       	st	X+, r1
    15b2:	8a 95       	dec	r24
    15b4:	e9 f7       	brne	.-6      	; 0x15b0 <prvInitialiseNewTask+0xb6>
    15b6:	1b aa       	std	Y+51, r1	; 0x33
    15b8:	a3 01       	movw	r20, r6
    15ba:	b2 01       	movw	r22, r4
    15bc:	c4 01       	movw	r24, r8
    15be:	77 d8       	rcall	.-3858   	; 0x6ae <pxPortInitialiseStack>
    15c0:	99 83       	std	Y+1, r25	; 0x01
    15c2:	88 83       	st	Y, r24
    15c4:	e1 14       	cp	r14, r1
    15c6:	f1 04       	cpc	r15, r1
    15c8:	19 f0       	breq	.+6      	; 0x15d0 <prvInitialiseNewTask+0xd6>
    15ca:	f7 01       	movw	r30, r14
    15cc:	d1 83       	std	Z+1, r29	; 0x01
    15ce:	c0 83       	st	Z, r28
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	9f 90       	pop	r9
    15e4:	8f 90       	pop	r8
    15e6:	7f 90       	pop	r7
    15e8:	6f 90       	pop	r6
    15ea:	5f 90       	pop	r5
    15ec:	4f 90       	pop	r4
    15ee:	08 95       	ret

000015f0 <prvInitialiseTaskLists>:
    15f0:	cf 93       	push	r28
    15f2:	c0 e0       	ldi	r28, 0x00	; 0
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <prvInitialiseTaskLists+0x18>
    15f6:	2b e0       	ldi	r18, 0x0B	; 11
    15f8:	c2 9f       	mul	r28, r18
    15fa:	c0 01       	movw	r24, r0
    15fc:	11 24       	eor	r1, r1
    15fe:	83 56       	subi	r24, 0x63	; 99
    1600:	9e 4e       	sbci	r25, 0xEE	; 238
    1602:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInitialise>
    1606:	cf 5f       	subi	r28, 0xFF	; 255
    1608:	ca 30       	cpi	r28, 0x0A	; 10
    160a:	a8 f3       	brcs	.-22     	; 0x15f6 <prvInitialiseTaskLists+0x6>
    160c:	82 e9       	ldi	r24, 0x92	; 146
    160e:	91 e1       	ldi	r25, 0x11	; 17
    1610:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInitialise>
    1614:	87 e8       	ldi	r24, 0x87	; 135
    1616:	91 e1       	ldi	r25, 0x11	; 17
    1618:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInitialise>
    161c:	88 e7       	ldi	r24, 0x78	; 120
    161e:	91 e1       	ldi	r25, 0x11	; 17
    1620:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInitialise>
    1624:	8d e6       	ldi	r24, 0x6D	; 109
    1626:	91 e1       	ldi	r25, 0x11	; 17
    1628:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInitialise>
    162c:	81 e6       	ldi	r24, 0x61	; 97
    162e:	91 e1       	ldi	r25, 0x11	; 17
    1630:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInitialise>
    1634:	82 e9       	ldi	r24, 0x92	; 146
    1636:	91 e1       	ldi	r25, 0x11	; 17
    1638:	90 93 86 11 	sts	0x1186, r25	; 0x801186 <pxDelayedTaskList+0x1>
    163c:	80 93 85 11 	sts	0x1185, r24	; 0x801185 <pxDelayedTaskList>
    1640:	87 e8       	ldi	r24, 0x87	; 135
    1642:	91 e1       	ldi	r25, 0x11	; 17
    1644:	90 93 84 11 	sts	0x1184, r25	; 0x801184 <pxOverflowDelayedTaskList+0x1>
    1648:	80 93 83 11 	sts	0x1183, r24	; 0x801183 <pxOverflowDelayedTaskList>
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <prvAddNewTaskToReadyList>:
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	ec 01       	movw	r28, r24
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	0f 92       	push	r0
    165c:	80 91 60 11 	lds	r24, 0x1160	; 0x801160 <uxCurrentNumberOfTasks>
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	80 93 60 11 	sts	0x1160, r24	; 0x801160 <uxCurrentNumberOfTasks>
    1666:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    166a:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    166e:	89 2b       	or	r24, r25
    1670:	51 f4       	brne	.+20     	; 0x1686 <prvAddNewTaskToReadyList+0x36>
    1672:	d0 93 0c 12 	sts	0x120C, r29	; 0x80120c <pxCurrentTCB+0x1>
    1676:	c0 93 0b 12 	sts	0x120B, r28	; 0x80120b <pxCurrentTCB>
    167a:	80 91 60 11 	lds	r24, 0x1160	; 0x801160 <uxCurrentNumberOfTasks>
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	91 f4       	brne	.+36     	; 0x16a6 <prvAddNewTaskToReadyList+0x56>
    1682:	b6 df       	rcall	.-148    	; 0x15f0 <prvInitialiseTaskLists>
    1684:	10 c0       	rjmp	.+32     	; 0x16a6 <prvAddNewTaskToReadyList+0x56>
    1686:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <xSchedulerRunning>
    168a:	81 11       	cpse	r24, r1
    168c:	0c c0       	rjmp	.+24     	; 0x16a6 <prvAddNewTaskToReadyList+0x56>
    168e:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1692:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1696:	92 8d       	ldd	r25, Z+26	; 0x1a
    1698:	8a 8d       	ldd	r24, Y+26	; 0x1a
    169a:	89 17       	cp	r24, r25
    169c:	20 f0       	brcs	.+8      	; 0x16a6 <prvAddNewTaskToReadyList+0x56>
    169e:	d0 93 0c 12 	sts	0x120C, r29	; 0x80120c <pxCurrentTCB+0x1>
    16a2:	c0 93 0b 12 	sts	0x120B, r28	; 0x80120b <pxCurrentTCB>
    16a6:	80 91 53 11 	lds	r24, 0x1153	; 0x801153 <uxTaskNumber>
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	80 93 53 11 	sts	0x1153, r24	; 0x801153 <uxTaskNumber>
    16b0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    16b2:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    16b6:	8e 17       	cp	r24, r30
    16b8:	10 f4       	brcc	.+4      	; 0x16be <prvAddNewTaskToReadyList+0x6e>
    16ba:	e0 93 5b 11 	sts	0x115B, r30	; 0x80115b <uxTopReadyPriority>
    16be:	8b e0       	ldi	r24, 0x0B	; 11
    16c0:	8e 9f       	mul	r24, r30
    16c2:	f0 01       	movw	r30, r0
    16c4:	11 24       	eor	r1, r1
    16c6:	e3 56       	subi	r30, 0x63	; 99
    16c8:	fe 4e       	sbci	r31, 0xEE	; 238
    16ca:	01 80       	ldd	r0, Z+1	; 0x01
    16cc:	f2 81       	ldd	r31, Z+2	; 0x02
    16ce:	e0 2d       	mov	r30, r0
    16d0:	ff 83       	std	Y+7, r31	; 0x07
    16d2:	ee 83       	std	Y+6, r30	; 0x06
    16d4:	26 81       	ldd	r18, Z+6	; 0x06
    16d6:	37 81       	ldd	r19, Z+7	; 0x07
    16d8:	39 87       	std	Y+9, r19	; 0x09
    16da:	28 87       	std	Y+8, r18	; 0x08
    16dc:	a6 81       	ldd	r26, Z+6	; 0x06
    16de:	b7 81       	ldd	r27, Z+7	; 0x07
    16e0:	9e 01       	movw	r18, r28
    16e2:	2e 5f       	subi	r18, 0xFE	; 254
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	15 96       	adiw	r26, 0x05	; 5
    16e8:	3c 93       	st	X, r19
    16ea:	2e 93       	st	-X, r18
    16ec:	14 97       	sbiw	r26, 0x04	; 4
    16ee:	37 83       	std	Z+7, r19	; 0x07
    16f0:	26 83       	std	Z+6, r18	; 0x06
    16f2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    16f4:	8e 9f       	mul	r24, r30
    16f6:	f0 01       	movw	r30, r0
    16f8:	11 24       	eor	r1, r1
    16fa:	e3 56       	subi	r30, 0x63	; 99
    16fc:	fe 4e       	sbci	r31, 0xEE	; 238
    16fe:	fd 87       	std	Y+13, r31	; 0x0d
    1700:	ec 87       	std	Y+12, r30	; 0x0c
    1702:	80 81       	ld	r24, Z
    1704:	8f 5f       	subi	r24, 0xFF	; 255
    1706:	80 83       	st	Z, r24
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <xSchedulerRunning>
    1710:	88 23       	and	r24, r24
    1712:	49 f0       	breq	.+18     	; 0x1726 <prvAddNewTaskToReadyList+0xd6>
    1714:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1718:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    171c:	92 8d       	ldd	r25, Z+26	; 0x1a
    171e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1720:	98 17       	cp	r25, r24
    1722:	08 f4       	brcc	.+2      	; 0x1726 <prvAddNewTaskToReadyList+0xd6>
    1724:	0d d8       	rcall	.-4070   	; 0x740 <vPortYield>
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	08 95       	ret

0000172c <prvCheckTasksWaitingTermination>:
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	1b c0       	rjmp	.+54     	; 0x1768 <prvCheckTasksWaitingTermination+0x3c>
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	0f 92       	push	r0
    1738:	e0 91 74 11 	lds	r30, 0x1174	; 0x801174 <xTasksWaitingTermination+0x7>
    173c:	f0 91 75 11 	lds	r31, 0x1175	; 0x801175 <xTasksWaitingTermination+0x8>
    1740:	c0 85       	ldd	r28, Z+8	; 0x08
    1742:	d1 85       	ldd	r29, Z+9	; 0x09
    1744:	ce 01       	movw	r24, r28
    1746:	02 96       	adiw	r24, 0x02	; 2
    1748:	0e 94 24 03 	call	0x648	; 0x648 <uxListRemove>
    174c:	80 91 60 11 	lds	r24, 0x1160	; 0x801160 <uxCurrentNumberOfTasks>
    1750:	81 50       	subi	r24, 0x01	; 1
    1752:	80 93 60 11 	sts	0x1160, r24	; 0x801160 <uxCurrentNumberOfTasks>
    1756:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <uxDeletedTasksWaitingCleanUp>
    175a:	81 50       	subi	r24, 0x01	; 1
    175c:	80 93 6c 11 	sts	0x116C, r24	; 0x80116c <uxDeletedTasksWaitingCleanUp>
    1760:	0f 90       	pop	r0
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	ce 01       	movw	r24, r28
    1766:	be de       	rcall	.-644    	; 0x14e4 <prvDeleteTCB>
    1768:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <uxDeletedTasksWaitingCleanUp>
    176c:	81 11       	cpse	r24, r1
    176e:	e1 cf       	rjmp	.-62     	; 0x1732 <prvCheckTasksWaitingTermination+0x6>
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <prvAddCurrentTaskToDelayedList>:
    1776:	8f 92       	push	r8
    1778:	9f 92       	push	r9
    177a:	af 92       	push	r10
    177c:	bf 92       	push	r11
    177e:	cf 92       	push	r12
    1780:	df 92       	push	r13
    1782:	ef 92       	push	r14
    1784:	ff 92       	push	r15
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	6b 01       	movw	r12, r22
    178c:	7c 01       	movw	r14, r24
    178e:	c4 2f       	mov	r28, r20
    1790:	80 90 5c 11 	lds	r8, 0x115C	; 0x80115c <xTickCount>
    1794:	90 90 5d 11 	lds	r9, 0x115D	; 0x80115d <xTickCount+0x1>
    1798:	a0 90 5e 11 	lds	r10, 0x115E	; 0x80115e <xTickCount+0x2>
    179c:	b0 90 5f 11 	lds	r11, 0x115F	; 0x80115f <xTickCount+0x3>
    17a0:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    17a4:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    17a8:	02 96       	adiw	r24, 0x02	; 2
    17aa:	0e 94 24 03 	call	0x648	; 0x648 <uxListRemove>
    17ae:	8f ef       	ldi	r24, 0xFF	; 255
    17b0:	c8 16       	cp	r12, r24
    17b2:	d8 06       	cpc	r13, r24
    17b4:	e8 06       	cpc	r14, r24
    17b6:	f8 06       	cpc	r15, r24
    17b8:	b1 f5       	brne	.+108    	; 0x1826 <prvAddCurrentTaskToDelayedList+0xb0>
    17ba:	cc 23       	and	r28, r28
    17bc:	a1 f1       	breq	.+104    	; 0x1826 <prvAddCurrentTaskToDelayedList+0xb0>
    17be:	e1 e6       	ldi	r30, 0x61	; 97
    17c0:	f1 e1       	ldi	r31, 0x11	; 17
    17c2:	a1 81       	ldd	r26, Z+1	; 0x01
    17c4:	b2 81       	ldd	r27, Z+2	; 0x02
    17c6:	c0 91 0b 12 	lds	r28, 0x120B	; 0x80120b <pxCurrentTCB>
    17ca:	d0 91 0c 12 	lds	r29, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    17ce:	bf 83       	std	Y+7, r27	; 0x07
    17d0:	ae 83       	std	Y+6, r26	; 0x06
    17d2:	c0 91 0b 12 	lds	r28, 0x120B	; 0x80120b <pxCurrentTCB>
    17d6:	d0 91 0c 12 	lds	r29, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    17da:	16 96       	adiw	r26, 0x06	; 6
    17dc:	8d 91       	ld	r24, X+
    17de:	9c 91       	ld	r25, X
    17e0:	17 97       	sbiw	r26, 0x07	; 7
    17e2:	99 87       	std	Y+9, r25	; 0x09
    17e4:	88 87       	std	Y+8, r24	; 0x08
    17e6:	16 96       	adiw	r26, 0x06	; 6
    17e8:	cd 91       	ld	r28, X+
    17ea:	dc 91       	ld	r29, X
    17ec:	17 97       	sbiw	r26, 0x07	; 7
    17ee:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    17f2:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    17f6:	02 96       	adiw	r24, 0x02	; 2
    17f8:	9d 83       	std	Y+5, r25	; 0x05
    17fa:	8c 83       	std	Y+4, r24	; 0x04
    17fc:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    1800:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1804:	02 96       	adiw	r24, 0x02	; 2
    1806:	17 96       	adiw	r26, 0x07	; 7
    1808:	9c 93       	st	X, r25
    180a:	8e 93       	st	-X, r24
    180c:	16 97       	sbiw	r26, 0x06	; 6
    180e:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
    1812:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1816:	1d 96       	adiw	r26, 0x0d	; 13
    1818:	fc 93       	st	X, r31
    181a:	ee 93       	st	-X, r30
    181c:	1c 97       	sbiw	r26, 0x0c	; 12
    181e:	80 81       	ld	r24, Z
    1820:	8f 5f       	subi	r24, 0xFF	; 255
    1822:	80 83       	st	Z, r24
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <prvAddCurrentTaskToDelayedList+0x12e>
    1826:	c8 0c       	add	r12, r8
    1828:	d9 1c       	adc	r13, r9
    182a:	ea 1c       	adc	r14, r10
    182c:	fb 1c       	adc	r15, r11
    182e:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1832:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1836:	c2 82       	std	Z+2, r12	; 0x02
    1838:	d3 82       	std	Z+3, r13	; 0x03
    183a:	e4 82       	std	Z+4, r14	; 0x04
    183c:	f5 82       	std	Z+5, r15	; 0x05
    183e:	c8 14       	cp	r12, r8
    1840:	d9 04       	cpc	r13, r9
    1842:	ea 04       	cpc	r14, r10
    1844:	fb 04       	cpc	r15, r11
    1846:	68 f4       	brcc	.+26     	; 0x1862 <prvAddCurrentTaskToDelayedList+0xec>
    1848:	60 91 0b 12 	lds	r22, 0x120B	; 0x80120b <pxCurrentTCB>
    184c:	70 91 0c 12 	lds	r23, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1850:	80 91 83 11 	lds	r24, 0x1183	; 0x801183 <pxOverflowDelayedTaskList>
    1854:	90 91 84 11 	lds	r25, 0x1184	; 0x801184 <pxOverflowDelayedTaskList+0x1>
    1858:	6e 5f       	subi	r22, 0xFE	; 254
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInsert>
    1860:	21 c0       	rjmp	.+66     	; 0x18a4 <prvAddCurrentTaskToDelayedList+0x12e>
    1862:	60 91 0b 12 	lds	r22, 0x120B	; 0x80120b <pxCurrentTCB>
    1866:	70 91 0c 12 	lds	r23, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    186a:	80 91 85 11 	lds	r24, 0x1185	; 0x801185 <pxDelayedTaskList>
    186e:	90 91 86 11 	lds	r25, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    1872:	6e 5f       	subi	r22, 0xFE	; 254
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInsert>
    187a:	80 91 4f 11 	lds	r24, 0x114F	; 0x80114f <xNextTaskUnblockTime>
    187e:	90 91 50 11 	lds	r25, 0x1150	; 0x801150 <xNextTaskUnblockTime+0x1>
    1882:	a0 91 51 11 	lds	r26, 0x1151	; 0x801151 <xNextTaskUnblockTime+0x2>
    1886:	b0 91 52 11 	lds	r27, 0x1152	; 0x801152 <xNextTaskUnblockTime+0x3>
    188a:	c8 16       	cp	r12, r24
    188c:	d9 06       	cpc	r13, r25
    188e:	ea 06       	cpc	r14, r26
    1890:	fb 06       	cpc	r15, r27
    1892:	40 f4       	brcc	.+16     	; 0x18a4 <prvAddCurrentTaskToDelayedList+0x12e>
    1894:	c0 92 4f 11 	sts	0x114F, r12	; 0x80114f <xNextTaskUnblockTime>
    1898:	d0 92 50 11 	sts	0x1150, r13	; 0x801150 <xNextTaskUnblockTime+0x1>
    189c:	e0 92 51 11 	sts	0x1151, r14	; 0x801151 <xNextTaskUnblockTime+0x2>
    18a0:	f0 92 52 11 	sts	0x1152, r15	; 0x801152 <xNextTaskUnblockTime+0x3>
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	df 90       	pop	r13
    18ae:	cf 90       	pop	r12
    18b0:	bf 90       	pop	r11
    18b2:	af 90       	pop	r10
    18b4:	9f 90       	pop	r9
    18b6:	8f 90       	pop	r8
    18b8:	08 95       	ret

000018ba <xTaskCreate>:
    18ba:	2f 92       	push	r2
    18bc:	3f 92       	push	r3
    18be:	4f 92       	push	r4
    18c0:	5f 92       	push	r5
    18c2:	6f 92       	push	r6
    18c4:	7f 92       	push	r7
    18c6:	8f 92       	push	r8
    18c8:	9f 92       	push	r9
    18ca:	af 92       	push	r10
    18cc:	bf 92       	push	r11
    18ce:	cf 92       	push	r12
    18d0:	df 92       	push	r13
    18d2:	ef 92       	push	r14
    18d4:	ff 92       	push	r15
    18d6:	0f 93       	push	r16
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	3c 01       	movw	r6, r24
    18de:	1b 01       	movw	r2, r22
    18e0:	4a 01       	movw	r8, r20
    18e2:	29 01       	movw	r4, r18
    18e4:	ca 01       	movw	r24, r20
    18e6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pvPortMalloc>
    18ea:	6c 01       	movw	r12, r24
    18ec:	89 2b       	or	r24, r25
    18ee:	71 f0       	breq	.+28     	; 0x190c <xTaskCreate+0x52>
    18f0:	84 e3       	ldi	r24, 0x34	; 52
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pvPortMalloc>
    18f8:	ec 01       	movw	r28, r24
    18fa:	89 2b       	or	r24, r25
    18fc:	19 f0       	breq	.+6      	; 0x1904 <xTaskCreate+0x4a>
    18fe:	dc 8e       	std	Y+28, r13	; 0x1c
    1900:	cb 8e       	std	Y+27, r12	; 0x1b
    1902:	06 c0       	rjmp	.+12     	; 0x1910 <xTaskCreate+0x56>
    1904:	c6 01       	movw	r24, r12
    1906:	0e 94 95 02 	call	0x52a	; 0x52a <vPortFree>
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <xTaskCreate+0x56>
    190c:	c0 e0       	ldi	r28, 0x00	; 0
    190e:	d0 e0       	ldi	r29, 0x00	; 0
    1910:	20 97       	sbiw	r28, 0x00	; 0
    1912:	61 f0       	breq	.+24     	; 0x192c <xTaskCreate+0x72>
    1914:	a1 2c       	mov	r10, r1
    1916:	b1 2c       	mov	r11, r1
    1918:	6e 01       	movw	r12, r28
    191a:	92 01       	movw	r18, r4
    191c:	a4 01       	movw	r20, r8
    191e:	b1 01       	movw	r22, r2
    1920:	c3 01       	movw	r24, r6
    1922:	eb dd       	rcall	.-1066   	; 0x14fa <prvInitialiseNewTask>
    1924:	ce 01       	movw	r24, r28
    1926:	94 de       	rcall	.-728    	; 0x1650 <prvAddNewTaskToReadyList>
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	01 c0       	rjmp	.+2      	; 0x192e <xTaskCreate+0x74>
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	0f 91       	pop	r16
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	df 90       	pop	r13
    193a:	cf 90       	pop	r12
    193c:	bf 90       	pop	r11
    193e:	af 90       	pop	r10
    1940:	9f 90       	pop	r9
    1942:	8f 90       	pop	r8
    1944:	7f 90       	pop	r7
    1946:	6f 90       	pop	r6
    1948:	5f 90       	pop	r5
    194a:	4f 90       	pop	r4
    194c:	3f 90       	pop	r3
    194e:	2f 90       	pop	r2
    1950:	08 95       	ret

00001952 <vTaskStartScheduler>:
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	0f 2e       	mov	r0, r31
    195a:	fd e4       	ldi	r31, 0x4D	; 77
    195c:	ef 2e       	mov	r14, r31
    195e:	f1 e1       	ldi	r31, 0x11	; 17
    1960:	ff 2e       	mov	r15, r31
    1962:	f0 2d       	mov	r31, r0
    1964:	00 e0       	ldi	r16, 0x00	; 0
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 ec       	ldi	r20, 0xC0	; 192
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	6a e9       	ldi	r22, 0x9A	; 154
    1970:	72 e0       	ldi	r23, 0x02	; 2
    1972:	8d ec       	ldi	r24, 0xCD	; 205
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a1 df       	rcall	.-190    	; 0x18ba <xTaskCreate>
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	11 f4       	brne	.+4      	; 0x1980 <vTaskStartScheduler+0x2e>
    197c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <xTimerCreateTimerTask>
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	c9 f4       	brne	.+50     	; 0x19b6 <vTaskStartScheduler+0x64>
    1984:	f8 94       	cli
    1986:	8f ef       	ldi	r24, 0xFF	; 255
    1988:	9f ef       	ldi	r25, 0xFF	; 255
    198a:	dc 01       	movw	r26, r24
    198c:	80 93 4f 11 	sts	0x114F, r24	; 0x80114f <xNextTaskUnblockTime>
    1990:	90 93 50 11 	sts	0x1150, r25	; 0x801150 <xNextTaskUnblockTime+0x1>
    1994:	a0 93 51 11 	sts	0x1151, r26	; 0x801151 <xNextTaskUnblockTime+0x2>
    1998:	b0 93 52 11 	sts	0x1152, r27	; 0x801152 <xNextTaskUnblockTime+0x3>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	80 93 5a 11 	sts	0x115A, r24	; 0x80115a <xSchedulerRunning>
    19a2:	10 92 5c 11 	sts	0x115C, r1	; 0x80115c <xTickCount>
    19a6:	10 92 5d 11 	sts	0x115D, r1	; 0x80115d <xTickCount+0x1>
    19aa:	10 92 5e 11 	sts	0x115E, r1	; 0x80115e <xTickCount+0x2>
    19ae:	10 92 5f 11 	sts	0x115F, r1	; 0x80115f <xTickCount+0x3>
    19b2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <xPortStartScheduler>
    19b6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	08 95       	ret

000019c2 <vTaskSuspendAll>:
    19c2:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	80 93 4c 11 	sts	0x114C, r24	; 0x80114c <uxSchedulerSuspended>
    19cc:	08 95       	ret

000019ce <xTaskGetTickCount>:
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	0f 92       	push	r0
    19d4:	60 91 5c 11 	lds	r22, 0x115C	; 0x80115c <xTickCount>
    19d8:	70 91 5d 11 	lds	r23, 0x115D	; 0x80115d <xTickCount+0x1>
    19dc:	80 91 5e 11 	lds	r24, 0x115E	; 0x80115e <xTickCount+0x2>
    19e0:	90 91 5f 11 	lds	r25, 0x115F	; 0x80115f <xTickCount+0x3>
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	08 95       	ret

000019ea <xTaskIncrementTick>:
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    19fa:	81 11       	cpse	r24, r1
    19fc:	05 c1       	rjmp	.+522    	; 0x1c08 <xTaskIncrementTick+0x21e>
    19fe:	c0 90 5c 11 	lds	r12, 0x115C	; 0x80115c <xTickCount>
    1a02:	d0 90 5d 11 	lds	r13, 0x115D	; 0x80115d <xTickCount+0x1>
    1a06:	e0 90 5e 11 	lds	r14, 0x115E	; 0x80115e <xTickCount+0x2>
    1a0a:	f0 90 5f 11 	lds	r15, 0x115F	; 0x80115f <xTickCount+0x3>
    1a0e:	8f ef       	ldi	r24, 0xFF	; 255
    1a10:	c8 1a       	sub	r12, r24
    1a12:	d8 0a       	sbc	r13, r24
    1a14:	e8 0a       	sbc	r14, r24
    1a16:	f8 0a       	sbc	r15, r24
    1a18:	c0 92 5c 11 	sts	0x115C, r12	; 0x80115c <xTickCount>
    1a1c:	d0 92 5d 11 	sts	0x115D, r13	; 0x80115d <xTickCount+0x1>
    1a20:	e0 92 5e 11 	sts	0x115E, r14	; 0x80115e <xTickCount+0x2>
    1a24:	f0 92 5f 11 	sts	0x115F, r15	; 0x80115f <xTickCount+0x3>
    1a28:	c1 14       	cp	r12, r1
    1a2a:	d1 04       	cpc	r13, r1
    1a2c:	e1 04       	cpc	r14, r1
    1a2e:	f1 04       	cpc	r15, r1
    1a30:	b1 f4       	brne	.+44     	; 0x1a5e <xTaskIncrementTick+0x74>
    1a32:	80 91 85 11 	lds	r24, 0x1185	; 0x801185 <pxDelayedTaskList>
    1a36:	90 91 86 11 	lds	r25, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    1a3a:	20 91 83 11 	lds	r18, 0x1183	; 0x801183 <pxOverflowDelayedTaskList>
    1a3e:	30 91 84 11 	lds	r19, 0x1184	; 0x801184 <pxOverflowDelayedTaskList+0x1>
    1a42:	30 93 86 11 	sts	0x1186, r19	; 0x801186 <pxDelayedTaskList+0x1>
    1a46:	20 93 85 11 	sts	0x1185, r18	; 0x801185 <pxDelayedTaskList>
    1a4a:	90 93 84 11 	sts	0x1184, r25	; 0x801184 <pxOverflowDelayedTaskList+0x1>
    1a4e:	80 93 83 11 	sts	0x1183, r24	; 0x801183 <pxOverflowDelayedTaskList>
    1a52:	80 91 54 11 	lds	r24, 0x1154	; 0x801154 <xNumOfOverflows>
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	80 93 54 11 	sts	0x1154, r24	; 0x801154 <xNumOfOverflows>
    1a5c:	1c dd       	rcall	.-1480   	; 0x1496 <prvResetNextTaskUnblockTime>
    1a5e:	80 91 4f 11 	lds	r24, 0x114F	; 0x80114f <xNextTaskUnblockTime>
    1a62:	90 91 50 11 	lds	r25, 0x1150	; 0x801150 <xNextTaskUnblockTime+0x1>
    1a66:	a0 91 51 11 	lds	r26, 0x1151	; 0x801151 <xNextTaskUnblockTime+0x2>
    1a6a:	b0 91 52 11 	lds	r27, 0x1152	; 0x801152 <xNextTaskUnblockTime+0x3>
    1a6e:	c8 16       	cp	r12, r24
    1a70:	d9 06       	cpc	r13, r25
    1a72:	ea 06       	cpc	r14, r26
    1a74:	fb 06       	cpc	r15, r27
    1a76:	20 f4       	brcc	.+8      	; 0x1a80 <xTaskIncrementTick+0x96>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	b2 c0       	rjmp	.+356    	; 0x1be0 <xTaskIncrementTick+0x1f6>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <xTaskIncrementTick+0x98>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	e0 91 85 11 	lds	r30, 0x1185	; 0x801185 <pxDelayedTaskList>
    1a86:	f0 91 86 11 	lds	r31, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    1a8a:	90 81       	ld	r25, Z
    1a8c:	91 11       	cpse	r25, r1
    1a8e:	0c c0       	rjmp	.+24     	; 0x1aa8 <xTaskIncrementTick+0xbe>
    1a90:	4f ef       	ldi	r20, 0xFF	; 255
    1a92:	5f ef       	ldi	r21, 0xFF	; 255
    1a94:	ba 01       	movw	r22, r20
    1a96:	40 93 4f 11 	sts	0x114F, r20	; 0x80114f <xNextTaskUnblockTime>
    1a9a:	50 93 50 11 	sts	0x1150, r21	; 0x801150 <xNextTaskUnblockTime+0x1>
    1a9e:	60 93 51 11 	sts	0x1151, r22	; 0x801151 <xNextTaskUnblockTime+0x2>
    1aa2:	70 93 52 11 	sts	0x1152, r23	; 0x801152 <xNextTaskUnblockTime+0x3>
    1aa6:	9c c0       	rjmp	.+312    	; 0x1be0 <xTaskIncrementTick+0x1f6>
    1aa8:	e0 91 85 11 	lds	r30, 0x1185	; 0x801185 <pxDelayedTaskList>
    1aac:	f0 91 86 11 	lds	r31, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    1ab0:	07 80       	ldd	r0, Z+7	; 0x07
    1ab2:	f0 85       	ldd	r31, Z+8	; 0x08
    1ab4:	e0 2d       	mov	r30, r0
    1ab6:	00 84       	ldd	r0, Z+8	; 0x08
    1ab8:	f1 85       	ldd	r31, Z+9	; 0x09
    1aba:	e0 2d       	mov	r30, r0
    1abc:	42 81       	ldd	r20, Z+2	; 0x02
    1abe:	53 81       	ldd	r21, Z+3	; 0x03
    1ac0:	64 81       	ldd	r22, Z+4	; 0x04
    1ac2:	75 81       	ldd	r23, Z+5	; 0x05
    1ac4:	c4 16       	cp	r12, r20
    1ac6:	d5 06       	cpc	r13, r21
    1ac8:	e6 06       	cpc	r14, r22
    1aca:	f7 06       	cpc	r15, r23
    1acc:	48 f4       	brcc	.+18     	; 0x1ae0 <xTaskIncrementTick+0xf6>
    1ace:	40 93 4f 11 	sts	0x114F, r20	; 0x80114f <xNextTaskUnblockTime>
    1ad2:	50 93 50 11 	sts	0x1150, r21	; 0x801150 <xNextTaskUnblockTime+0x1>
    1ad6:	60 93 51 11 	sts	0x1151, r22	; 0x801151 <xNextTaskUnblockTime+0x2>
    1ada:	70 93 52 11 	sts	0x1152, r23	; 0x801152 <xNextTaskUnblockTime+0x3>
    1ade:	80 c0       	rjmp	.+256    	; 0x1be0 <xTaskIncrementTick+0x1f6>
    1ae0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ae2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ae4:	c6 81       	ldd	r28, Z+6	; 0x06
    1ae6:	d7 81       	ldd	r29, Z+7	; 0x07
    1ae8:	20 85       	ldd	r18, Z+8	; 0x08
    1aea:	31 85       	ldd	r19, Z+9	; 0x09
    1aec:	3f 83       	std	Y+7, r19	; 0x07
    1aee:	2e 83       	std	Y+6, r18	; 0x06
    1af0:	c0 85       	ldd	r28, Z+8	; 0x08
    1af2:	d1 85       	ldd	r29, Z+9	; 0x09
    1af4:	26 81       	ldd	r18, Z+6	; 0x06
    1af6:	37 81       	ldd	r19, Z+7	; 0x07
    1af8:	3d 83       	std	Y+5, r19	; 0x05
    1afa:	2c 83       	std	Y+4, r18	; 0x04
    1afc:	11 96       	adiw	r26, 0x01	; 1
    1afe:	4d 91       	ld	r20, X+
    1b00:	5c 91       	ld	r21, X
    1b02:	12 97       	sbiw	r26, 0x02	; 2
    1b04:	9f 01       	movw	r18, r30
    1b06:	2e 5f       	subi	r18, 0xFE	; 254
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	42 17       	cp	r20, r18
    1b0c:	53 07       	cpc	r21, r19
    1b0e:	31 f4       	brne	.+12     	; 0x1b1c <xTaskIncrementTick+0x132>
    1b10:	40 85       	ldd	r20, Z+8	; 0x08
    1b12:	51 85       	ldd	r21, Z+9	; 0x09
    1b14:	12 96       	adiw	r26, 0x02	; 2
    1b16:	5c 93       	st	X, r21
    1b18:	4e 93       	st	-X, r20
    1b1a:	11 97       	sbiw	r26, 0x01	; 1
    1b1c:	15 86       	std	Z+13, r1	; 0x0d
    1b1e:	14 86       	std	Z+12, r1	; 0x0c
    1b20:	9c 91       	ld	r25, X
    1b22:	91 50       	subi	r25, 0x01	; 1
    1b24:	9c 93       	st	X, r25
    1b26:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b28:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b2a:	10 97       	sbiw	r26, 0x00	; 0
    1b2c:	09 f1       	breq	.+66     	; 0x1b70 <xTaskIncrementTick+0x186>
    1b2e:	c2 89       	ldd	r28, Z+18	; 0x12
    1b30:	d3 89       	ldd	r29, Z+19	; 0x13
    1b32:	44 89       	ldd	r20, Z+20	; 0x14
    1b34:	55 89       	ldd	r21, Z+21	; 0x15
    1b36:	5f 83       	std	Y+7, r21	; 0x07
    1b38:	4e 83       	std	Y+6, r20	; 0x06
    1b3a:	c4 89       	ldd	r28, Z+20	; 0x14
    1b3c:	d5 89       	ldd	r29, Z+21	; 0x15
    1b3e:	42 89       	ldd	r20, Z+18	; 0x12
    1b40:	53 89       	ldd	r21, Z+19	; 0x13
    1b42:	5d 83       	std	Y+5, r21	; 0x05
    1b44:	4c 83       	std	Y+4, r20	; 0x04
    1b46:	11 96       	adiw	r26, 0x01	; 1
    1b48:	6d 91       	ld	r22, X+
    1b4a:	7c 91       	ld	r23, X
    1b4c:	12 97       	sbiw	r26, 0x02	; 2
    1b4e:	af 01       	movw	r20, r30
    1b50:	42 5f       	subi	r20, 0xF2	; 242
    1b52:	5f 4f       	sbci	r21, 0xFF	; 255
    1b54:	64 17       	cp	r22, r20
    1b56:	75 07       	cpc	r23, r21
    1b58:	31 f4       	brne	.+12     	; 0x1b66 <xTaskIncrementTick+0x17c>
    1b5a:	44 89       	ldd	r20, Z+20	; 0x14
    1b5c:	55 89       	ldd	r21, Z+21	; 0x15
    1b5e:	12 96       	adiw	r26, 0x02	; 2
    1b60:	5c 93       	st	X, r21
    1b62:	4e 93       	st	-X, r20
    1b64:	11 97       	sbiw	r26, 0x01	; 1
    1b66:	11 8e       	std	Z+25, r1	; 0x19
    1b68:	10 8e       	std	Z+24, r1	; 0x18
    1b6a:	9c 91       	ld	r25, X
    1b6c:	91 50       	subi	r25, 0x01	; 1
    1b6e:	9c 93       	st	X, r25
    1b70:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b72:	90 91 5b 11 	lds	r25, 0x115B	; 0x80115b <uxTopReadyPriority>
    1b76:	9a 17       	cp	r25, r26
    1b78:	10 f4       	brcc	.+4      	; 0x1b7e <xTaskIncrementTick+0x194>
    1b7a:	a0 93 5b 11 	sts	0x115B, r26	; 0x80115b <uxTopReadyPriority>
    1b7e:	9b e0       	ldi	r25, 0x0B	; 11
    1b80:	9a 9f       	mul	r25, r26
    1b82:	d0 01       	movw	r26, r0
    1b84:	11 24       	eor	r1, r1
    1b86:	a3 56       	subi	r26, 0x63	; 99
    1b88:	be 4e       	sbci	r27, 0xEE	; 238
    1b8a:	11 96       	adiw	r26, 0x01	; 1
    1b8c:	0d 90       	ld	r0, X+
    1b8e:	bc 91       	ld	r27, X
    1b90:	a0 2d       	mov	r26, r0
    1b92:	b7 83       	std	Z+7, r27	; 0x07
    1b94:	a6 83       	std	Z+6, r26	; 0x06
    1b96:	16 96       	adiw	r26, 0x06	; 6
    1b98:	4d 91       	ld	r20, X+
    1b9a:	5c 91       	ld	r21, X
    1b9c:	17 97       	sbiw	r26, 0x07	; 7
    1b9e:	51 87       	std	Z+9, r21	; 0x09
    1ba0:	40 87       	std	Z+8, r20	; 0x08
    1ba2:	16 96       	adiw	r26, 0x06	; 6
    1ba4:	cd 91       	ld	r28, X+
    1ba6:	dc 91       	ld	r29, X
    1ba8:	17 97       	sbiw	r26, 0x07	; 7
    1baa:	3d 83       	std	Y+5, r19	; 0x05
    1bac:	2c 83       	std	Y+4, r18	; 0x04
    1bae:	17 96       	adiw	r26, 0x07	; 7
    1bb0:	3c 93       	st	X, r19
    1bb2:	2e 93       	st	-X, r18
    1bb4:	16 97       	sbiw	r26, 0x06	; 6
    1bb6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bb8:	9a 9f       	mul	r25, r26
    1bba:	d0 01       	movw	r26, r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	a3 56       	subi	r26, 0x63	; 99
    1bc0:	be 4e       	sbci	r27, 0xEE	; 238
    1bc2:	b5 87       	std	Z+13, r27	; 0x0d
    1bc4:	a4 87       	std	Z+12, r26	; 0x0c
    1bc6:	9c 91       	ld	r25, X
    1bc8:	9f 5f       	subi	r25, 0xFF	; 255
    1bca:	9c 93       	st	X, r25
    1bcc:	22 8d       	ldd	r18, Z+26	; 0x1a
    1bce:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1bd2:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1bd6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bd8:	29 17       	cp	r18, r25
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <xTaskIncrementTick+0x1f4>
    1bdc:	4f cf       	rjmp	.-354    	; 0x1a7c <xTaskIncrementTick+0x92>
    1bde:	51 cf       	rjmp	.-350    	; 0x1a82 <xTaskIncrementTick+0x98>
    1be0:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1be4:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1be8:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1bea:	9b e0       	ldi	r25, 0x0B	; 11
    1bec:	e9 9f       	mul	r30, r25
    1bee:	f0 01       	movw	r30, r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	e3 56       	subi	r30, 0x63	; 99
    1bf4:	fe 4e       	sbci	r31, 0xEE	; 238
    1bf6:	90 81       	ld	r25, Z
    1bf8:	92 30       	cpi	r25, 0x02	; 2
    1bfa:	08 f0       	brcs	.+2      	; 0x1bfe <xTaskIncrementTick+0x214>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 91 55 11 	lds	r25, 0x1155	; 0x801155 <xYieldPending>
    1c02:	91 11       	cpse	r25, r1
    1c04:	16 c0       	rjmp	.+44     	; 0x1c32 <xTaskIncrementTick+0x248>
    1c06:	16 c0       	rjmp	.+44     	; 0x1c34 <xTaskIncrementTick+0x24a>
    1c08:	80 91 56 11 	lds	r24, 0x1156	; 0x801156 <xPendedTicks>
    1c0c:	90 91 57 11 	lds	r25, 0x1157	; 0x801157 <xPendedTicks+0x1>
    1c10:	a0 91 58 11 	lds	r26, 0x1158	; 0x801158 <xPendedTicks+0x2>
    1c14:	b0 91 59 11 	lds	r27, 0x1159	; 0x801159 <xPendedTicks+0x3>
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	a1 1d       	adc	r26, r1
    1c1c:	b1 1d       	adc	r27, r1
    1c1e:	80 93 56 11 	sts	0x1156, r24	; 0x801156 <xPendedTicks>
    1c22:	90 93 57 11 	sts	0x1157, r25	; 0x801157 <xPendedTicks+0x1>
    1c26:	a0 93 58 11 	sts	0x1158, r26	; 0x801158 <xPendedTicks+0x2>
    1c2a:	b0 93 59 11 	sts	0x1159, r27	; 0x801159 <xPendedTicks+0x3>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <xTaskIncrementTick+0x24a>
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	08 95       	ret

00001c42 <xTaskResumeAll>:
    1c42:	cf 92       	push	r12
    1c44:	df 92       	push	r13
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	0f 92       	push	r0
    1c54:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    1c58:	81 50       	subi	r24, 0x01	; 1
    1c5a:	80 93 4c 11 	sts	0x114C, r24	; 0x80114c <uxSchedulerSuspended>
    1c5e:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    1c62:	81 11       	cpse	r24, r1
    1c64:	be c0       	rjmp	.+380    	; 0x1de2 <xTaskResumeAll+0x1a0>
    1c66:	80 91 60 11 	lds	r24, 0x1160	; 0x801160 <uxCurrentNumberOfTasks>
    1c6a:	81 11       	cpse	r24, r1
    1c6c:	88 c0       	rjmp	.+272    	; 0x1d7e <xTaskResumeAll+0x13c>
    1c6e:	bc c0       	rjmp	.+376    	; 0x1de8 <xTaskResumeAll+0x1a6>
    1c70:	e0 91 7f 11 	lds	r30, 0x117F	; 0x80117f <xPendingReadyList+0x7>
    1c74:	f0 91 80 11 	lds	r31, 0x1180	; 0x801180 <xPendingReadyList+0x8>
    1c78:	00 84       	ldd	r0, Z+8	; 0x08
    1c7a:	f1 85       	ldd	r31, Z+9	; 0x09
    1c7c:	e0 2d       	mov	r30, r0
    1c7e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c80:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c82:	c2 89       	ldd	r28, Z+18	; 0x12
    1c84:	d3 89       	ldd	r29, Z+19	; 0x13
    1c86:	84 89       	ldd	r24, Z+20	; 0x14
    1c88:	95 89       	ldd	r25, Z+21	; 0x15
    1c8a:	9f 83       	std	Y+7, r25	; 0x07
    1c8c:	8e 83       	std	Y+6, r24	; 0x06
    1c8e:	c4 89       	ldd	r28, Z+20	; 0x14
    1c90:	d5 89       	ldd	r29, Z+21	; 0x15
    1c92:	82 89       	ldd	r24, Z+18	; 0x12
    1c94:	93 89       	ldd	r25, Z+19	; 0x13
    1c96:	9d 83       	std	Y+5, r25	; 0x05
    1c98:	8c 83       	std	Y+4, r24	; 0x04
    1c9a:	11 96       	adiw	r26, 0x01	; 1
    1c9c:	2d 91       	ld	r18, X+
    1c9e:	3c 91       	ld	r19, X
    1ca0:	12 97       	sbiw	r26, 0x02	; 2
    1ca2:	cf 01       	movw	r24, r30
    1ca4:	0e 96       	adiw	r24, 0x0e	; 14
    1ca6:	28 17       	cp	r18, r24
    1ca8:	39 07       	cpc	r19, r25
    1caa:	31 f4       	brne	.+12     	; 0x1cb8 <xTaskResumeAll+0x76>
    1cac:	84 89       	ldd	r24, Z+20	; 0x14
    1cae:	95 89       	ldd	r25, Z+21	; 0x15
    1cb0:	12 96       	adiw	r26, 0x02	; 2
    1cb2:	9c 93       	st	X, r25
    1cb4:	8e 93       	st	-X, r24
    1cb6:	11 97       	sbiw	r26, 0x01	; 1
    1cb8:	11 8e       	std	Z+25, r1	; 0x19
    1cba:	10 8e       	std	Z+24, r1	; 0x18
    1cbc:	8c 91       	ld	r24, X
    1cbe:	81 50       	subi	r24, 0x01	; 1
    1cc0:	8c 93       	st	X, r24
    1cc2:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cc4:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cc6:	c6 81       	ldd	r28, Z+6	; 0x06
    1cc8:	d7 81       	ldd	r29, Z+7	; 0x07
    1cca:	80 85       	ldd	r24, Z+8	; 0x08
    1ccc:	91 85       	ldd	r25, Z+9	; 0x09
    1cce:	9f 83       	std	Y+7, r25	; 0x07
    1cd0:	8e 83       	std	Y+6, r24	; 0x06
    1cd2:	c0 85       	ldd	r28, Z+8	; 0x08
    1cd4:	d1 85       	ldd	r29, Z+9	; 0x09
    1cd6:	86 81       	ldd	r24, Z+6	; 0x06
    1cd8:	97 81       	ldd	r25, Z+7	; 0x07
    1cda:	9d 83       	std	Y+5, r25	; 0x05
    1cdc:	8c 83       	std	Y+4, r24	; 0x04
    1cde:	11 96       	adiw	r26, 0x01	; 1
    1ce0:	8d 91       	ld	r24, X+
    1ce2:	9c 91       	ld	r25, X
    1ce4:	12 97       	sbiw	r26, 0x02	; 2
    1ce6:	9f 01       	movw	r18, r30
    1ce8:	2e 5f       	subi	r18, 0xFE	; 254
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	82 17       	cp	r24, r18
    1cee:	93 07       	cpc	r25, r19
    1cf0:	31 f4       	brne	.+12     	; 0x1cfe <xTaskResumeAll+0xbc>
    1cf2:	80 85       	ldd	r24, Z+8	; 0x08
    1cf4:	91 85       	ldd	r25, Z+9	; 0x09
    1cf6:	12 96       	adiw	r26, 0x02	; 2
    1cf8:	9c 93       	st	X, r25
    1cfa:	8e 93       	st	-X, r24
    1cfc:	11 97       	sbiw	r26, 0x01	; 1
    1cfe:	15 86       	std	Z+13, r1	; 0x0d
    1d00:	14 86       	std	Z+12, r1	; 0x0c
    1d02:	8c 91       	ld	r24, X
    1d04:	81 50       	subi	r24, 0x01	; 1
    1d06:	8c 93       	st	X, r24
    1d08:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d0a:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    1d0e:	8a 17       	cp	r24, r26
    1d10:	10 f4       	brcc	.+4      	; 0x1d16 <xTaskResumeAll+0xd4>
    1d12:	a0 93 5b 11 	sts	0x115B, r26	; 0x80115b <uxTopReadyPriority>
    1d16:	8b e0       	ldi	r24, 0x0B	; 11
    1d18:	8a 9f       	mul	r24, r26
    1d1a:	d0 01       	movw	r26, r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	a3 56       	subi	r26, 0x63	; 99
    1d20:	be 4e       	sbci	r27, 0xEE	; 238
    1d22:	11 96       	adiw	r26, 0x01	; 1
    1d24:	0d 90       	ld	r0, X+
    1d26:	bc 91       	ld	r27, X
    1d28:	a0 2d       	mov	r26, r0
    1d2a:	b7 83       	std	Z+7, r27	; 0x07
    1d2c:	a6 83       	std	Z+6, r26	; 0x06
    1d2e:	16 96       	adiw	r26, 0x06	; 6
    1d30:	4d 91       	ld	r20, X+
    1d32:	5c 91       	ld	r21, X
    1d34:	17 97       	sbiw	r26, 0x07	; 7
    1d36:	51 87       	std	Z+9, r21	; 0x09
    1d38:	40 87       	std	Z+8, r20	; 0x08
    1d3a:	16 96       	adiw	r26, 0x06	; 6
    1d3c:	cd 91       	ld	r28, X+
    1d3e:	dc 91       	ld	r29, X
    1d40:	17 97       	sbiw	r26, 0x07	; 7
    1d42:	3d 83       	std	Y+5, r19	; 0x05
    1d44:	2c 83       	std	Y+4, r18	; 0x04
    1d46:	17 96       	adiw	r26, 0x07	; 7
    1d48:	3c 93       	st	X, r19
    1d4a:	2e 93       	st	-X, r18
    1d4c:	16 97       	sbiw	r26, 0x06	; 6
    1d4e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d50:	8a 9f       	mul	r24, r26
    1d52:	d0 01       	movw	r26, r0
    1d54:	11 24       	eor	r1, r1
    1d56:	a3 56       	subi	r26, 0x63	; 99
    1d58:	be 4e       	sbci	r27, 0xEE	; 238
    1d5a:	b5 87       	std	Z+13, r27	; 0x0d
    1d5c:	a4 87       	std	Z+12, r26	; 0x0c
    1d5e:	8c 91       	ld	r24, X
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	8c 93       	st	X, r24
    1d64:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d66:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
    1d6a:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1d6e:	5a 96       	adiw	r26, 0x1a	; 26
    1d70:	8c 91       	ld	r24, X
    1d72:	98 17       	cp	r25, r24
    1d74:	30 f0       	brcs	.+12     	; 0x1d82 <xTaskResumeAll+0x140>
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <xYieldPending>
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <xTaskResumeAll+0x140>
    1d7e:	e0 e0       	ldi	r30, 0x00	; 0
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 91 78 11 	lds	r24, 0x1178	; 0x801178 <xPendingReadyList>
    1d86:	81 11       	cpse	r24, r1
    1d88:	73 cf       	rjmp	.-282    	; 0x1c70 <xTaskResumeAll+0x2e>
    1d8a:	ef 2b       	or	r30, r31
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <xTaskResumeAll+0x14e>
    1d8e:	83 db       	rcall	.-2298   	; 0x1496 <prvResetNextTaskUnblockTime>
    1d90:	c0 90 56 11 	lds	r12, 0x1156	; 0x801156 <xPendedTicks>
    1d94:	d0 90 57 11 	lds	r13, 0x1157	; 0x801157 <xPendedTicks+0x1>
    1d98:	e0 90 58 11 	lds	r14, 0x1158	; 0x801158 <xPendedTicks+0x2>
    1d9c:	f0 90 59 11 	lds	r15, 0x1159	; 0x801159 <xPendedTicks+0x3>
    1da0:	c1 14       	cp	r12, r1
    1da2:	d1 04       	cpc	r13, r1
    1da4:	e1 04       	cpc	r14, r1
    1da6:	f1 04       	cpc	r15, r1
    1da8:	a1 f0       	breq	.+40     	; 0x1dd2 <xTaskResumeAll+0x190>
    1daa:	1f de       	rcall	.-962    	; 0x19ea <xTaskIncrementTick>
    1dac:	88 23       	and	r24, r24
    1dae:	19 f0       	breq	.+6      	; 0x1db6 <xTaskResumeAll+0x174>
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <xYieldPending>
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	c8 1a       	sub	r12, r24
    1dba:	d1 08       	sbc	r13, r1
    1dbc:	e1 08       	sbc	r14, r1
    1dbe:	f1 08       	sbc	r15, r1
    1dc0:	a1 f7       	brne	.-24     	; 0x1daa <xTaskResumeAll+0x168>
    1dc2:	10 92 56 11 	sts	0x1156, r1	; 0x801156 <xPendedTicks>
    1dc6:	10 92 57 11 	sts	0x1157, r1	; 0x801157 <xPendedTicks+0x1>
    1dca:	10 92 58 11 	sts	0x1158, r1	; 0x801158 <xPendedTicks+0x2>
    1dce:	10 92 59 11 	sts	0x1159, r1	; 0x801159 <xPendedTicks+0x3>
    1dd2:	80 91 55 11 	lds	r24, 0x1155	; 0x801155 <xYieldPending>
    1dd6:	88 23       	and	r24, r24
    1dd8:	31 f0       	breq	.+12     	; 0x1de6 <xTaskResumeAll+0x1a4>
    1dda:	0e 94 a0 03 	call	0x740	; 0x740 <vPortYield>
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	03 c0       	rjmp	.+6      	; 0x1de8 <xTaskResumeAll+0x1a6>
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <xTaskResumeAll+0x1a6>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	0f 90       	pop	r0
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	ff 90       	pop	r15
    1df2:	ef 90       	pop	r14
    1df4:	df 90       	pop	r13
    1df6:	cf 90       	pop	r12
    1df8:	08 95       	ret

00001dfa <xTaskDelayUntil>:
    1dfa:	8f 92       	push	r8
    1dfc:	9f 92       	push	r9
    1dfe:	af 92       	push	r10
    1e00:	bf 92       	push	r11
    1e02:	cf 92       	push	r12
    1e04:	df 92       	push	r13
    1e06:	ef 92       	push	r14
    1e08:	ff 92       	push	r15
    1e0a:	1f 93       	push	r17
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	ec 01       	movw	r28, r24
    1e12:	6a 01       	movw	r12, r20
    1e14:	7b 01       	movw	r14, r22
    1e16:	d5 dd       	rcall	.-1110   	; 0x19c2 <vTaskSuspendAll>
    1e18:	80 90 5c 11 	lds	r8, 0x115C	; 0x80115c <xTickCount>
    1e1c:	90 90 5d 11 	lds	r9, 0x115D	; 0x80115d <xTickCount+0x1>
    1e20:	a0 90 5e 11 	lds	r10, 0x115E	; 0x80115e <xTickCount+0x2>
    1e24:	b0 90 5f 11 	lds	r11, 0x115F	; 0x80115f <xTickCount+0x3>
    1e28:	88 81       	ld	r24, Y
    1e2a:	99 81       	ldd	r25, Y+1	; 0x01
    1e2c:	aa 81       	ldd	r26, Y+2	; 0x02
    1e2e:	bb 81       	ldd	r27, Y+3	; 0x03
    1e30:	ac 01       	movw	r20, r24
    1e32:	bd 01       	movw	r22, r26
    1e34:	4c 0d       	add	r20, r12
    1e36:	5d 1d       	adc	r21, r13
    1e38:	6e 1d       	adc	r22, r14
    1e3a:	7f 1d       	adc	r23, r15
    1e3c:	88 16       	cp	r8, r24
    1e3e:	99 06       	cpc	r9, r25
    1e40:	aa 06       	cpc	r10, r26
    1e42:	bb 06       	cpc	r11, r27
    1e44:	60 f4       	brcc	.+24     	; 0x1e5e <xTaskDelayUntil+0x64>
    1e46:	48 17       	cp	r20, r24
    1e48:	59 07       	cpc	r21, r25
    1e4a:	6a 07       	cpc	r22, r26
    1e4c:	7b 07       	cpc	r23, r27
    1e4e:	98 f4       	brcc	.+38     	; 0x1e76 <xTaskDelayUntil+0x7c>
    1e50:	84 16       	cp	r8, r20
    1e52:	95 06       	cpc	r9, r21
    1e54:	a6 06       	cpc	r10, r22
    1e56:	b7 06       	cpc	r11, r23
    1e58:	80 f0       	brcs	.+32     	; 0x1e7a <xTaskDelayUntil+0x80>
    1e5a:	10 e0       	ldi	r17, 0x00	; 0
    1e5c:	13 c0       	rjmp	.+38     	; 0x1e84 <xTaskDelayUntil+0x8a>
    1e5e:	48 17       	cp	r20, r24
    1e60:	59 07       	cpc	r21, r25
    1e62:	6a 07       	cpc	r22, r26
    1e64:	7b 07       	cpc	r23, r27
    1e66:	58 f0       	brcs	.+22     	; 0x1e7e <xTaskDelayUntil+0x84>
    1e68:	84 16       	cp	r8, r20
    1e6a:	95 06       	cpc	r9, r21
    1e6c:	a6 06       	cpc	r10, r22
    1e6e:	b7 06       	cpc	r11, r23
    1e70:	40 f0       	brcs	.+16     	; 0x1e82 <xTaskDelayUntil+0x88>
    1e72:	10 e0       	ldi	r17, 0x00	; 0
    1e74:	07 c0       	rjmp	.+14     	; 0x1e84 <xTaskDelayUntil+0x8a>
    1e76:	10 e0       	ldi	r17, 0x00	; 0
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <xTaskDelayUntil+0x8a>
    1e7a:	11 e0       	ldi	r17, 0x01	; 1
    1e7c:	03 c0       	rjmp	.+6      	; 0x1e84 <xTaskDelayUntil+0x8a>
    1e7e:	11 e0       	ldi	r17, 0x01	; 1
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <xTaskDelayUntil+0x8a>
    1e82:	11 e0       	ldi	r17, 0x01	; 1
    1e84:	48 83       	st	Y, r20
    1e86:	59 83       	std	Y+1, r21	; 0x01
    1e88:	6a 83       	std	Y+2, r22	; 0x02
    1e8a:	7b 83       	std	Y+3, r23	; 0x03
    1e8c:	11 23       	and	r17, r17
    1e8e:	41 f0       	breq	.+16     	; 0x1ea0 <xTaskDelayUntil+0xa6>
    1e90:	cb 01       	movw	r24, r22
    1e92:	ba 01       	movw	r22, r20
    1e94:	68 19       	sub	r22, r8
    1e96:	79 09       	sbc	r23, r9
    1e98:	8a 09       	sbc	r24, r10
    1e9a:	9b 09       	sbc	r25, r11
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	6b dc       	rcall	.-1834   	; 0x1776 <prvAddCurrentTaskToDelayedList>
    1ea0:	d0 de       	rcall	.-608    	; 0x1c42 <xTaskResumeAll>
    1ea2:	81 11       	cpse	r24, r1
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <xTaskDelayUntil+0xb0>
    1ea6:	0e 94 a0 03 	call	0x740	; 0x740 <vPortYield>
    1eaa:	81 2f       	mov	r24, r17
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	ff 90       	pop	r15
    1eb4:	ef 90       	pop	r14
    1eb6:	df 90       	pop	r13
    1eb8:	cf 90       	pop	r12
    1eba:	bf 90       	pop	r11
    1ebc:	af 90       	pop	r10
    1ebe:	9f 90       	pop	r9
    1ec0:	8f 90       	pop	r8
    1ec2:	08 95       	ret

00001ec4 <vTaskDelay>:
    1ec4:	cf 92       	push	r12
    1ec6:	df 92       	push	r13
    1ec8:	ef 92       	push	r14
    1eca:	ff 92       	push	r15
    1ecc:	6b 01       	movw	r12, r22
    1ece:	7c 01       	movw	r14, r24
    1ed0:	67 2b       	or	r22, r23
    1ed2:	68 2b       	or	r22, r24
    1ed4:	69 2b       	or	r22, r25
    1ed6:	39 f0       	breq	.+14     	; 0x1ee6 <vTaskDelay+0x22>
    1ed8:	74 dd       	rcall	.-1304   	; 0x19c2 <vTaskSuspendAll>
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	c7 01       	movw	r24, r14
    1ede:	b6 01       	movw	r22, r12
    1ee0:	4a dc       	rcall	.-1900   	; 0x1776 <prvAddCurrentTaskToDelayedList>
    1ee2:	af de       	rcall	.-674    	; 0x1c42 <xTaskResumeAll>
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <vTaskDelay+0x24>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	81 11       	cpse	r24, r1
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <vTaskDelay+0x2c>
    1eec:	0e 94 a0 03 	call	0x740	; 0x740 <vPortYield>
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	cf 90       	pop	r12
    1ef8:	08 95       	ret

00001efa <vTaskSwitchContext>:
    1efa:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    1efe:	88 23       	and	r24, r24
    1f00:	21 f0       	breq	.+8      	; 0x1f0a <vTaskSwitchContext+0x10>
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <xYieldPending>
    1f08:	08 95       	ret
    1f0a:	10 92 55 11 	sts	0x1155, r1	; 0x801155 <xYieldPending>
    1f0e:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1f12:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1f16:	20 81       	ld	r18, Z
    1f18:	31 81       	ldd	r19, Z+1	; 0x01
    1f1a:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1f1e:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1f22:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f24:	94 8d       	ldd	r25, Z+28	; 0x1c
    1f26:	82 17       	cp	r24, r18
    1f28:	93 07       	cpc	r25, r19
    1f2a:	60 f0       	brcs	.+24     	; 0x1f44 <vTaskSwitchContext+0x4a>
    1f2c:	60 91 0b 12 	lds	r22, 0x120B	; 0x80120b <pxCurrentTCB>
    1f30:	70 91 0c 12 	lds	r23, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1f34:	63 5e       	subi	r22, 0xE3	; 227
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    1f3c:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1f40:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <vApplicationStackOverflowHook>
    1f44:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <vTaskSwitchContext+0x52>
    1f4a:	81 50       	subi	r24, 0x01	; 1
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	9b e0       	ldi	r25, 0x0B	; 11
    1f52:	92 9f       	mul	r25, r18
    1f54:	f0 01       	movw	r30, r0
    1f56:	93 9f       	mul	r25, r19
    1f58:	f0 0d       	add	r31, r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	e3 56       	subi	r30, 0x63	; 99
    1f5e:	fe 4e       	sbci	r31, 0xEE	; 238
    1f60:	90 81       	ld	r25, Z
    1f62:	99 23       	and	r25, r25
    1f64:	91 f3       	breq	.-28     	; 0x1f4a <vTaskSwitchContext+0x50>
    1f66:	9b e0       	ldi	r25, 0x0B	; 11
    1f68:	92 9f       	mul	r25, r18
    1f6a:	a0 01       	movw	r20, r0
    1f6c:	93 9f       	mul	r25, r19
    1f6e:	50 0d       	add	r21, r0
    1f70:	11 24       	eor	r1, r1
    1f72:	df 01       	movw	r26, r30
    1f74:	01 80       	ldd	r0, Z+1	; 0x01
    1f76:	f2 81       	ldd	r31, Z+2	; 0x02
    1f78:	e0 2d       	mov	r30, r0
    1f7a:	04 80       	ldd	r0, Z+4	; 0x04
    1f7c:	f5 81       	ldd	r31, Z+5	; 0x05
    1f7e:	e0 2d       	mov	r30, r0
    1f80:	12 96       	adiw	r26, 0x02	; 2
    1f82:	fc 93       	st	X, r31
    1f84:	ee 93       	st	-X, r30
    1f86:	11 97       	sbiw	r26, 0x01	; 1
    1f88:	40 56       	subi	r20, 0x60	; 96
    1f8a:	5e 4e       	sbci	r21, 0xEE	; 238
    1f8c:	e4 17       	cp	r30, r20
    1f8e:	f5 07       	cpc	r31, r21
    1f90:	29 f4       	brne	.+10     	; 0x1f9c <vTaskSwitchContext+0xa2>
    1f92:	44 81       	ldd	r20, Z+4	; 0x04
    1f94:	55 81       	ldd	r21, Z+5	; 0x05
    1f96:	fd 01       	movw	r30, r26
    1f98:	52 83       	std	Z+2, r21	; 0x02
    1f9a:	41 83       	std	Z+1, r20	; 0x01
    1f9c:	9b e0       	ldi	r25, 0x0B	; 11
    1f9e:	92 9f       	mul	r25, r18
    1fa0:	f0 01       	movw	r30, r0
    1fa2:	93 9f       	mul	r25, r19
    1fa4:	f0 0d       	add	r31, r0
    1fa6:	11 24       	eor	r1, r1
    1fa8:	e3 56       	subi	r30, 0x63	; 99
    1faa:	fe 4e       	sbci	r31, 0xEE	; 238
    1fac:	01 80       	ldd	r0, Z+1	; 0x01
    1fae:	f2 81       	ldd	r31, Z+2	; 0x02
    1fb0:	e0 2d       	mov	r30, r0
    1fb2:	20 85       	ldd	r18, Z+8	; 0x08
    1fb4:	31 85       	ldd	r19, Z+9	; 0x09
    1fb6:	30 93 0c 12 	sts	0x120C, r19	; 0x80120c <pxCurrentTCB+0x1>
    1fba:	20 93 0b 12 	sts	0x120B, r18	; 0x80120b <pxCurrentTCB>
    1fbe:	80 93 5b 11 	sts	0x115B, r24	; 0x80115b <uxTopReadyPriority>
    1fc2:	08 95       	ret

00001fc4 <vTaskPlaceOnEventList>:
    1fc4:	cf 92       	push	r12
    1fc6:	df 92       	push	r13
    1fc8:	ef 92       	push	r14
    1fca:	ff 92       	push	r15
    1fcc:	6a 01       	movw	r12, r20
    1fce:	7b 01       	movw	r14, r22
    1fd0:	60 91 0b 12 	lds	r22, 0x120B	; 0x80120b <pxCurrentTCB>
    1fd4:	70 91 0c 12 	lds	r23, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1fd8:	62 5f       	subi	r22, 0xF2	; 242
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255
    1fdc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInsert>
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	c7 01       	movw	r24, r14
    1fe4:	b6 01       	movw	r22, r12
    1fe6:	c7 db       	rcall	.-2162   	; 0x1776 <prvAddCurrentTaskToDelayedList>
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	cf 90       	pop	r12
    1ff0:	08 95       	ret

00001ff2 <vTaskPlaceOnEventListRestricted>:
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	ba 01       	movw	r22, r20
    1ffc:	a1 81       	ldd	r26, Z+1	; 0x01
    1ffe:	b2 81       	ldd	r27, Z+2	; 0x02
    2000:	c0 91 0b 12 	lds	r28, 0x120B	; 0x80120b <pxCurrentTCB>
    2004:	d0 91 0c 12 	lds	r29, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2008:	bb 8b       	std	Y+19, r27	; 0x13
    200a:	aa 8b       	std	Y+18, r26	; 0x12
    200c:	c0 91 0b 12 	lds	r28, 0x120B	; 0x80120b <pxCurrentTCB>
    2010:	d0 91 0c 12 	lds	r29, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2014:	16 96       	adiw	r26, 0x06	; 6
    2016:	4d 91       	ld	r20, X+
    2018:	5c 91       	ld	r21, X
    201a:	17 97       	sbiw	r26, 0x07	; 7
    201c:	5d 8b       	std	Y+21, r21	; 0x15
    201e:	4c 8b       	std	Y+20, r20	; 0x14
    2020:	16 96       	adiw	r26, 0x06	; 6
    2022:	cd 91       	ld	r28, X+
    2024:	dc 91       	ld	r29, X
    2026:	17 97       	sbiw	r26, 0x07	; 7
    2028:	40 91 0b 12 	lds	r20, 0x120B	; 0x80120b <pxCurrentTCB>
    202c:	50 91 0c 12 	lds	r21, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2030:	42 5f       	subi	r20, 0xF2	; 242
    2032:	5f 4f       	sbci	r21, 0xFF	; 255
    2034:	5d 83       	std	Y+5, r21	; 0x05
    2036:	4c 83       	std	Y+4, r20	; 0x04
    2038:	40 91 0b 12 	lds	r20, 0x120B	; 0x80120b <pxCurrentTCB>
    203c:	50 91 0c 12 	lds	r21, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2040:	42 5f       	subi	r20, 0xF2	; 242
    2042:	5f 4f       	sbci	r21, 0xFF	; 255
    2044:	17 96       	adiw	r26, 0x07	; 7
    2046:	5c 93       	st	X, r21
    2048:	4e 93       	st	-X, r20
    204a:	16 97       	sbiw	r26, 0x06	; 6
    204c:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
    2050:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2054:	59 96       	adiw	r26, 0x19	; 25
    2056:	fc 93       	st	X, r31
    2058:	ee 93       	st	-X, r30
    205a:	58 97       	sbiw	r26, 0x18	; 24
    205c:	30 81       	ld	r19, Z
    205e:	3f 5f       	subi	r19, 0xFF	; 255
    2060:	30 83       	st	Z, r19
    2062:	22 23       	and	r18, r18
    2064:	19 f0       	breq	.+6      	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    2066:	6f ef       	ldi	r22, 0xFF	; 255
    2068:	7f ef       	ldi	r23, 0xFF	; 255
    206a:	cb 01       	movw	r24, r22
    206c:	42 2f       	mov	r20, r18
    206e:	83 db       	rcall	.-2298   	; 0x1776 <prvAddCurrentTaskToDelayedList>
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	08 95       	ret

00002076 <xTaskRemoveFromEventList>:
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	dc 01       	movw	r26, r24
    207c:	17 96       	adiw	r26, 0x07	; 7
    207e:	ed 91       	ld	r30, X+
    2080:	fc 91       	ld	r31, X
    2082:	18 97       	sbiw	r26, 0x08	; 8
    2084:	00 84       	ldd	r0, Z+8	; 0x08
    2086:	f1 85       	ldd	r31, Z+9	; 0x09
    2088:	e0 2d       	mov	r30, r0
    208a:	a0 8d       	ldd	r26, Z+24	; 0x18
    208c:	b1 8d       	ldd	r27, Z+25	; 0x19
    208e:	c2 89       	ldd	r28, Z+18	; 0x12
    2090:	d3 89       	ldd	r29, Z+19	; 0x13
    2092:	84 89       	ldd	r24, Z+20	; 0x14
    2094:	95 89       	ldd	r25, Z+21	; 0x15
    2096:	9f 83       	std	Y+7, r25	; 0x07
    2098:	8e 83       	std	Y+6, r24	; 0x06
    209a:	c4 89       	ldd	r28, Z+20	; 0x14
    209c:	d5 89       	ldd	r29, Z+21	; 0x15
    209e:	82 89       	ldd	r24, Z+18	; 0x12
    20a0:	93 89       	ldd	r25, Z+19	; 0x13
    20a2:	9d 83       	std	Y+5, r25	; 0x05
    20a4:	8c 83       	std	Y+4, r24	; 0x04
    20a6:	11 96       	adiw	r26, 0x01	; 1
    20a8:	8d 91       	ld	r24, X+
    20aa:	9c 91       	ld	r25, X
    20ac:	12 97       	sbiw	r26, 0x02	; 2
    20ae:	9f 01       	movw	r18, r30
    20b0:	22 5f       	subi	r18, 0xF2	; 242
    20b2:	3f 4f       	sbci	r19, 0xFF	; 255
    20b4:	82 17       	cp	r24, r18
    20b6:	93 07       	cpc	r25, r19
    20b8:	31 f4       	brne	.+12     	; 0x20c6 <xTaskRemoveFromEventList+0x50>
    20ba:	84 89       	ldd	r24, Z+20	; 0x14
    20bc:	95 89       	ldd	r25, Z+21	; 0x15
    20be:	12 96       	adiw	r26, 0x02	; 2
    20c0:	9c 93       	st	X, r25
    20c2:	8e 93       	st	-X, r24
    20c4:	11 97       	sbiw	r26, 0x01	; 1
    20c6:	11 8e       	std	Z+25, r1	; 0x19
    20c8:	10 8e       	std	Z+24, r1	; 0x18
    20ca:	8c 91       	ld	r24, X
    20cc:	81 50       	subi	r24, 0x01	; 1
    20ce:	8c 93       	st	X, r24
    20d0:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    20d4:	81 11       	cpse	r24, r1
    20d6:	52 c0       	rjmp	.+164    	; 0x217c <xTaskRemoveFromEventList+0x106>
    20d8:	a4 85       	ldd	r26, Z+12	; 0x0c
    20da:	b5 85       	ldd	r27, Z+13	; 0x0d
    20dc:	c6 81       	ldd	r28, Z+6	; 0x06
    20de:	d7 81       	ldd	r29, Z+7	; 0x07
    20e0:	80 85       	ldd	r24, Z+8	; 0x08
    20e2:	91 85       	ldd	r25, Z+9	; 0x09
    20e4:	9f 83       	std	Y+7, r25	; 0x07
    20e6:	8e 83       	std	Y+6, r24	; 0x06
    20e8:	c0 85       	ldd	r28, Z+8	; 0x08
    20ea:	d1 85       	ldd	r29, Z+9	; 0x09
    20ec:	86 81       	ldd	r24, Z+6	; 0x06
    20ee:	97 81       	ldd	r25, Z+7	; 0x07
    20f0:	9d 83       	std	Y+5, r25	; 0x05
    20f2:	8c 83       	std	Y+4, r24	; 0x04
    20f4:	11 96       	adiw	r26, 0x01	; 1
    20f6:	8d 91       	ld	r24, X+
    20f8:	9c 91       	ld	r25, X
    20fa:	12 97       	sbiw	r26, 0x02	; 2
    20fc:	9f 01       	movw	r18, r30
    20fe:	2e 5f       	subi	r18, 0xFE	; 254
    2100:	3f 4f       	sbci	r19, 0xFF	; 255
    2102:	82 17       	cp	r24, r18
    2104:	93 07       	cpc	r25, r19
    2106:	31 f4       	brne	.+12     	; 0x2114 <xTaskRemoveFromEventList+0x9e>
    2108:	80 85       	ldd	r24, Z+8	; 0x08
    210a:	91 85       	ldd	r25, Z+9	; 0x09
    210c:	12 96       	adiw	r26, 0x02	; 2
    210e:	9c 93       	st	X, r25
    2110:	8e 93       	st	-X, r24
    2112:	11 97       	sbiw	r26, 0x01	; 1
    2114:	15 86       	std	Z+13, r1	; 0x0d
    2116:	14 86       	std	Z+12, r1	; 0x0c
    2118:	8c 91       	ld	r24, X
    211a:	81 50       	subi	r24, 0x01	; 1
    211c:	8c 93       	st	X, r24
    211e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2120:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    2124:	8a 17       	cp	r24, r26
    2126:	10 f4       	brcc	.+4      	; 0x212c <xTaskRemoveFromEventList+0xb6>
    2128:	a0 93 5b 11 	sts	0x115B, r26	; 0x80115b <uxTopReadyPriority>
    212c:	8b e0       	ldi	r24, 0x0B	; 11
    212e:	8a 9f       	mul	r24, r26
    2130:	d0 01       	movw	r26, r0
    2132:	11 24       	eor	r1, r1
    2134:	a3 56       	subi	r26, 0x63	; 99
    2136:	be 4e       	sbci	r27, 0xEE	; 238
    2138:	11 96       	adiw	r26, 0x01	; 1
    213a:	0d 90       	ld	r0, X+
    213c:	bc 91       	ld	r27, X
    213e:	a0 2d       	mov	r26, r0
    2140:	b7 83       	std	Z+7, r27	; 0x07
    2142:	a6 83       	std	Z+6, r26	; 0x06
    2144:	16 96       	adiw	r26, 0x06	; 6
    2146:	4d 91       	ld	r20, X+
    2148:	5c 91       	ld	r21, X
    214a:	17 97       	sbiw	r26, 0x07	; 7
    214c:	51 87       	std	Z+9, r21	; 0x09
    214e:	40 87       	std	Z+8, r20	; 0x08
    2150:	16 96       	adiw	r26, 0x06	; 6
    2152:	cd 91       	ld	r28, X+
    2154:	dc 91       	ld	r29, X
    2156:	17 97       	sbiw	r26, 0x07	; 7
    2158:	3d 83       	std	Y+5, r19	; 0x05
    215a:	2c 83       	std	Y+4, r18	; 0x04
    215c:	17 96       	adiw	r26, 0x07	; 7
    215e:	3c 93       	st	X, r19
    2160:	2e 93       	st	-X, r18
    2162:	16 97       	sbiw	r26, 0x06	; 6
    2164:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2166:	8a 9f       	mul	r24, r26
    2168:	d0 01       	movw	r26, r0
    216a:	11 24       	eor	r1, r1
    216c:	a3 56       	subi	r26, 0x63	; 99
    216e:	be 4e       	sbci	r27, 0xEE	; 238
    2170:	b5 87       	std	Z+13, r27	; 0x0d
    2172:	a4 87       	std	Z+12, r26	; 0x0c
    2174:	8c 91       	ld	r24, X
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	8c 93       	st	X, r24
    217a:	1c c0       	rjmp	.+56     	; 0x21b4 <xTaskRemoveFromEventList+0x13e>
    217c:	48 e7       	ldi	r20, 0x78	; 120
    217e:	51 e1       	ldi	r21, 0x11	; 17
    2180:	da 01       	movw	r26, r20
    2182:	11 96       	adiw	r26, 0x01	; 1
    2184:	cd 91       	ld	r28, X+
    2186:	dc 91       	ld	r29, X
    2188:	12 97       	sbiw	r26, 0x02	; 2
    218a:	d3 8b       	std	Z+19, r29	; 0x13
    218c:	c2 8b       	std	Z+18, r28	; 0x12
    218e:	8e 81       	ldd	r24, Y+6	; 0x06
    2190:	9f 81       	ldd	r25, Y+7	; 0x07
    2192:	95 8b       	std	Z+21, r25	; 0x15
    2194:	84 8b       	std	Z+20, r24	; 0x14
    2196:	8e 81       	ldd	r24, Y+6	; 0x06
    2198:	9f 81       	ldd	r25, Y+7	; 0x07
    219a:	dc 01       	movw	r26, r24
    219c:	15 96       	adiw	r26, 0x05	; 5
    219e:	3c 93       	st	X, r19
    21a0:	2e 93       	st	-X, r18
    21a2:	14 97       	sbiw	r26, 0x04	; 4
    21a4:	3f 83       	std	Y+7, r19	; 0x07
    21a6:	2e 83       	std	Y+6, r18	; 0x06
    21a8:	51 8f       	std	Z+25, r21	; 0x19
    21aa:	40 8f       	std	Z+24, r20	; 0x18
    21ac:	da 01       	movw	r26, r20
    21ae:	8c 91       	ld	r24, X
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	8c 93       	st	X, r24
    21b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    21b6:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    21ba:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    21be:	82 8d       	ldd	r24, Z+26	; 0x1a
    21c0:	89 17       	cp	r24, r25
    21c2:	20 f4       	brcc	.+8      	; 0x21cc <xTaskRemoveFromEventList+0x156>
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <xYieldPending>
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <xTaskRemoveFromEventList+0x158>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	08 95       	ret

000021d4 <vTaskSetTimeOutState>:
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	0f 92       	push	r0
    21da:	20 91 54 11 	lds	r18, 0x1154	; 0x801154 <xNumOfOverflows>
    21de:	fc 01       	movw	r30, r24
    21e0:	20 83       	st	Z, r18
    21e2:	40 91 5c 11 	lds	r20, 0x115C	; 0x80115c <xTickCount>
    21e6:	50 91 5d 11 	lds	r21, 0x115D	; 0x80115d <xTickCount+0x1>
    21ea:	60 91 5e 11 	lds	r22, 0x115E	; 0x80115e <xTickCount+0x2>
    21ee:	70 91 5f 11 	lds	r23, 0x115F	; 0x80115f <xTickCount+0x3>
    21f2:	41 83       	std	Z+1, r20	; 0x01
    21f4:	52 83       	std	Z+2, r21	; 0x02
    21f6:	63 83       	std	Z+3, r22	; 0x03
    21f8:	74 83       	std	Z+4, r23	; 0x04
    21fa:	0f 90       	pop	r0
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	08 95       	ret

00002200 <vTaskInternalSetTimeOutState>:
    2200:	20 91 54 11 	lds	r18, 0x1154	; 0x801154 <xNumOfOverflows>
    2204:	fc 01       	movw	r30, r24
    2206:	20 83       	st	Z, r18
    2208:	40 91 5c 11 	lds	r20, 0x115C	; 0x80115c <xTickCount>
    220c:	50 91 5d 11 	lds	r21, 0x115D	; 0x80115d <xTickCount+0x1>
    2210:	60 91 5e 11 	lds	r22, 0x115E	; 0x80115e <xTickCount+0x2>
    2214:	70 91 5f 11 	lds	r23, 0x115F	; 0x80115f <xTickCount+0x3>
    2218:	41 83       	std	Z+1, r20	; 0x01
    221a:	52 83       	std	Z+2, r21	; 0x02
    221c:	63 83       	std	Z+3, r22	; 0x03
    221e:	74 83       	std	Z+4, r23	; 0x04
    2220:	08 95       	ret

00002222 <xTaskCheckForTimeOut>:
    2222:	8f 92       	push	r8
    2224:	9f 92       	push	r9
    2226:	af 92       	push	r10
    2228:	bf 92       	push	r11
    222a:	cf 92       	push	r12
    222c:	df 92       	push	r13
    222e:	ef 92       	push	r14
    2230:	ff 92       	push	r15
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	fb 01       	movw	r30, r22
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	0f 92       	push	r0
    2242:	c0 90 5c 11 	lds	r12, 0x115C	; 0x80115c <xTickCount>
    2246:	d0 90 5d 11 	lds	r13, 0x115D	; 0x80115d <xTickCount+0x1>
    224a:	e0 90 5e 11 	lds	r14, 0x115E	; 0x80115e <xTickCount+0x2>
    224e:	f0 90 5f 11 	lds	r15, 0x115F	; 0x80115f <xTickCount+0x3>
    2252:	dc 01       	movw	r26, r24
    2254:	11 96       	adiw	r26, 0x01	; 1
    2256:	0d 91       	ld	r16, X+
    2258:	1d 91       	ld	r17, X+
    225a:	2d 91       	ld	r18, X+
    225c:	3c 91       	ld	r19, X
    225e:	14 97       	sbiw	r26, 0x04	; 4
    2260:	46 01       	movw	r8, r12
    2262:	57 01       	movw	r10, r14
    2264:	80 1a       	sub	r8, r16
    2266:	91 0a       	sbc	r9, r17
    2268:	a2 0a       	sbc	r10, r18
    226a:	b3 0a       	sbc	r11, r19
    226c:	40 81       	ld	r20, Z
    226e:	51 81       	ldd	r21, Z+1	; 0x01
    2270:	62 81       	ldd	r22, Z+2	; 0x02
    2272:	73 81       	ldd	r23, Z+3	; 0x03
    2274:	4f 3f       	cpi	r20, 0xFF	; 255
    2276:	bf ef       	ldi	r27, 0xFF	; 255
    2278:	5b 07       	cpc	r21, r27
    227a:	6b 07       	cpc	r22, r27
    227c:	7b 07       	cpc	r23, r27
    227e:	39 f1       	breq	.+78     	; 0x22ce <xTaskCheckForTimeOut+0xac>
    2280:	ec 01       	movw	r28, r24
    2282:	b8 81       	ld	r27, Y
    2284:	a0 91 54 11 	lds	r26, 0x1154	; 0x801154 <xNumOfOverflows>
    2288:	ba 17       	cp	r27, r26
    228a:	59 f0       	breq	.+22     	; 0x22a2 <xTaskCheckForTimeOut+0x80>
    228c:	c0 16       	cp	r12, r16
    228e:	d1 06       	cpc	r13, r17
    2290:	e2 06       	cpc	r14, r18
    2292:	f3 06       	cpc	r15, r19
    2294:	30 f0       	brcs	.+12     	; 0x22a2 <xTaskCheckForTimeOut+0x80>
    2296:	10 82       	st	Z, r1
    2298:	11 82       	std	Z+1, r1	; 0x01
    229a:	12 82       	std	Z+2, r1	; 0x02
    229c:	13 82       	std	Z+3, r1	; 0x03
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	17 c0       	rjmp	.+46     	; 0x22d0 <xTaskCheckForTimeOut+0xae>
    22a2:	84 16       	cp	r8, r20
    22a4:	95 06       	cpc	r9, r21
    22a6:	a6 06       	cpc	r10, r22
    22a8:	b7 06       	cpc	r11, r23
    22aa:	58 f4       	brcc	.+22     	; 0x22c2 <xTaskCheckForTimeOut+0xa0>
    22ac:	48 19       	sub	r20, r8
    22ae:	59 09       	sbc	r21, r9
    22b0:	6a 09       	sbc	r22, r10
    22b2:	7b 09       	sbc	r23, r11
    22b4:	40 83       	st	Z, r20
    22b6:	51 83       	std	Z+1, r21	; 0x01
    22b8:	62 83       	std	Z+2, r22	; 0x02
    22ba:	73 83       	std	Z+3, r23	; 0x03
    22bc:	a1 df       	rcall	.-190    	; 0x2200 <vTaskInternalSetTimeOutState>
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <xTaskCheckForTimeOut+0xae>
    22c2:	10 82       	st	Z, r1
    22c4:	11 82       	std	Z+1, r1	; 0x01
    22c6:	12 82       	std	Z+2, r1	; 0x02
    22c8:	13 82       	std	Z+3, r1	; 0x03
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <xTaskCheckForTimeOut+0xae>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	0f 90       	pop	r0
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	ff 90       	pop	r15
    22de:	ef 90       	pop	r14
    22e0:	df 90       	pop	r13
    22e2:	cf 90       	pop	r12
    22e4:	bf 90       	pop	r11
    22e6:	af 90       	pop	r10
    22e8:	9f 90       	pop	r9
    22ea:	8f 90       	pop	r8
    22ec:	08 95       	ret

000022ee <vTaskMissedYield>:
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <xYieldPending>
    22f4:	08 95       	ret

000022f6 <xTaskGetCurrentTaskHandle>:
    22f6:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    22fa:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    22fe:	08 95       	ret

00002300 <xTaskGetSchedulerState>:
    2300:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <xSchedulerRunning>
    2304:	88 23       	and	r24, r24
    2306:	31 f0       	breq	.+12     	; 0x2314 <xTaskGetSchedulerState+0x14>
    2308:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    230c:	81 11       	cpse	r24, r1
    230e:	04 c0       	rjmp	.+8      	; 0x2318 <xTaskGetSchedulerState+0x18>
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	08 95       	ret
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	08 95       	ret
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	08 95       	ret

0000231c <xTaskPriorityDisinherit>:
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	fc 01       	movw	r30, r24
    2326:	89 2b       	or	r24, r25
    2328:	09 f4       	brne	.+2      	; 0x232c <xTaskPriorityDisinherit+0x10>
    232a:	49 c0       	rjmp	.+146    	; 0x23be <xTaskPriorityDisinherit+0xa2>
    232c:	86 a5       	ldd	r24, Z+46	; 0x2e
    232e:	81 50       	subi	r24, 0x01	; 1
    2330:	86 a7       	std	Z+46, r24	; 0x2e
    2332:	22 8d       	ldd	r18, Z+26	; 0x1a
    2334:	95 a5       	ldd	r25, Z+45	; 0x2d
    2336:	29 17       	cp	r18, r25
    2338:	09 f4       	brne	.+2      	; 0x233c <xTaskPriorityDisinherit+0x20>
    233a:	43 c0       	rjmp	.+134    	; 0x23c2 <xTaskPriorityDisinherit+0xa6>
    233c:	81 11       	cpse	r24, r1
    233e:	43 c0       	rjmp	.+134    	; 0x23c6 <xTaskPriorityDisinherit+0xaa>
    2340:	ef 01       	movw	r28, r30
    2342:	8f 01       	movw	r16, r30
    2344:	0e 5f       	subi	r16, 0xFE	; 254
    2346:	1f 4f       	sbci	r17, 0xFF	; 255
    2348:	c8 01       	movw	r24, r16
    234a:	0e 94 24 03 	call	0x648	; 0x648 <uxListRemove>
    234e:	ed a5       	ldd	r30, Y+45	; 0x2d
    2350:	ea 8f       	std	Y+26, r30	; 0x1a
    2352:	8a e0       	ldi	r24, 0x0A	; 10
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	8e 1b       	sub	r24, r30
    235c:	91 09       	sbc	r25, r1
    235e:	a1 09       	sbc	r26, r1
    2360:	b1 09       	sbc	r27, r1
    2362:	8e 87       	std	Y+14, r24	; 0x0e
    2364:	9f 87       	std	Y+15, r25	; 0x0f
    2366:	a8 8b       	std	Y+16, r26	; 0x10
    2368:	b9 8b       	std	Y+17, r27	; 0x11
    236a:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    236e:	8e 17       	cp	r24, r30
    2370:	10 f4       	brcc	.+4      	; 0x2376 <xTaskPriorityDisinherit+0x5a>
    2372:	e0 93 5b 11 	sts	0x115B, r30	; 0x80115b <uxTopReadyPriority>
    2376:	8b e0       	ldi	r24, 0x0B	; 11
    2378:	8e 9f       	mul	r24, r30
    237a:	f0 01       	movw	r30, r0
    237c:	11 24       	eor	r1, r1
    237e:	e3 56       	subi	r30, 0x63	; 99
    2380:	fe 4e       	sbci	r31, 0xEE	; 238
    2382:	01 80       	ldd	r0, Z+1	; 0x01
    2384:	f2 81       	ldd	r31, Z+2	; 0x02
    2386:	e0 2d       	mov	r30, r0
    2388:	ff 83       	std	Y+7, r31	; 0x07
    238a:	ee 83       	std	Y+6, r30	; 0x06
    238c:	26 81       	ldd	r18, Z+6	; 0x06
    238e:	37 81       	ldd	r19, Z+7	; 0x07
    2390:	39 87       	std	Y+9, r19	; 0x09
    2392:	28 87       	std	Y+8, r18	; 0x08
    2394:	a6 81       	ldd	r26, Z+6	; 0x06
    2396:	b7 81       	ldd	r27, Z+7	; 0x07
    2398:	15 96       	adiw	r26, 0x05	; 5
    239a:	1c 93       	st	X, r17
    239c:	0e 93       	st	-X, r16
    239e:	14 97       	sbiw	r26, 0x04	; 4
    23a0:	17 83       	std	Z+7, r17	; 0x07
    23a2:	06 83       	std	Z+6, r16	; 0x06
    23a4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    23a6:	8e 9f       	mul	r24, r30
    23a8:	f0 01       	movw	r30, r0
    23aa:	11 24       	eor	r1, r1
    23ac:	e3 56       	subi	r30, 0x63	; 99
    23ae:	fe 4e       	sbci	r31, 0xEE	; 238
    23b0:	fd 87       	std	Y+13, r31	; 0x0d
    23b2:	ec 87       	std	Y+12, r30	; 0x0c
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 5f       	subi	r24, 0xFF	; 255
    23b8:	80 83       	st	Z, r24
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	05 c0       	rjmp	.+10     	; 0x23c8 <xTaskPriorityDisinherit+0xac>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <xTaskPriorityDisinherit+0xac>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	01 c0       	rjmp	.+2      	; 0x23c8 <xTaskPriorityDisinherit+0xac>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	08 95       	ret

000023d2 <xTaskGenericNotifyWait>:
    23d2:	4f 92       	push	r4
    23d4:	5f 92       	push	r5
    23d6:	6f 92       	push	r6
    23d8:	7f 92       	push	r7
    23da:	af 92       	push	r10
    23dc:	bf 92       	push	r11
    23de:	cf 92       	push	r12
    23e0:	df 92       	push	r13
    23e2:	ef 92       	push	r14
    23e4:	ff 92       	push	r15
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	28 01       	movw	r4, r16
    23f0:	39 01       	movw	r6, r18
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	0f 92       	push	r0
    23f8:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    23fc:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2400:	c8 2f       	mov	r28, r24
    2402:	d0 e0       	ldi	r29, 0x00	; 0
    2404:	ec 0f       	add	r30, r28
    2406:	fd 1f       	adc	r31, r29
    2408:	83 a9       	ldd	r24, Z+51	; 0x33
    240a:	82 30       	cpi	r24, 0x02	; 2
    240c:	71 f1       	breq	.+92     	; 0x246a <xTaskGenericNotifyWait+0x98>
    240e:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    2412:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2416:	ce 01       	movw	r24, r28
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	e8 0f       	add	r30, r24
    2422:	f9 1f       	adc	r31, r25
    2424:	87 a5       	ldd	r24, Z+47	; 0x2f
    2426:	90 a9       	ldd	r25, Z+48	; 0x30
    2428:	a1 a9       	ldd	r26, Z+49	; 0x31
    242a:	b2 a9       	ldd	r27, Z+50	; 0x32
    242c:	40 95       	com	r20
    242e:	50 95       	com	r21
    2430:	60 95       	com	r22
    2432:	70 95       	com	r23
    2434:	48 23       	and	r20, r24
    2436:	59 23       	and	r21, r25
    2438:	6a 23       	and	r22, r26
    243a:	7b 23       	and	r23, r27
    243c:	47 a7       	std	Z+47, r20	; 0x2f
    243e:	50 ab       	std	Z+48, r21	; 0x30
    2440:	61 ab       	std	Z+49, r22	; 0x31
    2442:	72 ab       	std	Z+50, r23	; 0x32
    2444:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    2448:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    244c:	ec 0f       	add	r30, r28
    244e:	fd 1f       	adc	r31, r29
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	83 ab       	std	Z+51, r24	; 0x33
    2454:	a1 14       	cp	r10, r1
    2456:	b1 04       	cpc	r11, r1
    2458:	c1 04       	cpc	r12, r1
    245a:	d1 04       	cpc	r13, r1
    245c:	31 f0       	breq	.+12     	; 0x246a <xTaskGenericNotifyWait+0x98>
    245e:	41 e0       	ldi	r20, 0x01	; 1
    2460:	c6 01       	movw	r24, r12
    2462:	b5 01       	movw	r22, r10
    2464:	88 d9       	rcall	.-3312   	; 0x1776 <prvAddCurrentTaskToDelayedList>
    2466:	0e 94 a0 03 	call	0x740	; 0x740 <vPortYield>
    246a:	0f 90       	pop	r0
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	0f 92       	push	r0
    2474:	e1 14       	cp	r14, r1
    2476:	f1 04       	cpc	r15, r1
    2478:	a1 f0       	breq	.+40     	; 0x24a2 <xTaskGenericNotifyWait+0xd0>
    247a:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    247e:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2482:	ce 01       	movw	r24, r28
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	e8 0f       	add	r30, r24
    248e:	f9 1f       	adc	r31, r25
    2490:	87 a5       	ldd	r24, Z+47	; 0x2f
    2492:	90 a9       	ldd	r25, Z+48	; 0x30
    2494:	a1 a9       	ldd	r26, Z+49	; 0x31
    2496:	b2 a9       	ldd	r27, Z+50	; 0x32
    2498:	f7 01       	movw	r30, r14
    249a:	80 83       	st	Z, r24
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	a2 83       	std	Z+2, r26	; 0x02
    24a0:	b3 83       	std	Z+3, r27	; 0x03
    24a2:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    24a6:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    24aa:	ec 0f       	add	r30, r28
    24ac:	fd 1f       	adc	r31, r29
    24ae:	83 a9       	ldd	r24, Z+51	; 0x33
    24b0:	82 30       	cpi	r24, 0x02	; 2
    24b2:	e9 f4       	brne	.+58     	; 0x24ee <xTaskGenericNotifyWait+0x11c>
    24b4:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    24b8:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    24bc:	ce 01       	movw	r24, r28
    24be:	88 0f       	add	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	e8 0f       	add	r30, r24
    24c8:	f9 1f       	adc	r31, r25
    24ca:	87 a5       	ldd	r24, Z+47	; 0x2f
    24cc:	90 a9       	ldd	r25, Z+48	; 0x30
    24ce:	a1 a9       	ldd	r26, Z+49	; 0x31
    24d0:	b2 a9       	ldd	r27, Z+50	; 0x32
    24d2:	40 94       	com	r4
    24d4:	50 94       	com	r5
    24d6:	60 94       	com	r6
    24d8:	70 94       	com	r7
    24da:	48 22       	and	r4, r24
    24dc:	59 22       	and	r5, r25
    24de:	6a 22       	and	r6, r26
    24e0:	7b 22       	and	r7, r27
    24e2:	47 a6       	std	Z+47, r4	; 0x2f
    24e4:	50 aa       	std	Z+48, r5	; 0x30
    24e6:	61 aa       	std	Z+49, r6	; 0x31
    24e8:	72 aa       	std	Z+50, r7	; 0x32
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	01 c0       	rjmp	.+2      	; 0x24f0 <xTaskGenericNotifyWait+0x11e>
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	20 91 0b 12 	lds	r18, 0x120B	; 0x80120b <pxCurrentTCB>
    24f4:	30 91 0c 12 	lds	r19, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    24f8:	c2 0f       	add	r28, r18
    24fa:	d3 1f       	adc	r29, r19
    24fc:	1b aa       	std	Y+51, r1	; 0x33
    24fe:	0f 90       	pop	r0
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	1f 91       	pop	r17
    2508:	0f 91       	pop	r16
    250a:	ff 90       	pop	r15
    250c:	ef 90       	pop	r14
    250e:	df 90       	pop	r13
    2510:	cf 90       	pop	r12
    2512:	bf 90       	pop	r11
    2514:	af 90       	pop	r10
    2516:	7f 90       	pop	r7
    2518:	6f 90       	pop	r6
    251a:	5f 90       	pop	r5
    251c:	4f 90       	pop	r4
    251e:	08 95       	ret

00002520 <xTaskGenericNotify>:
    2520:	8f 92       	push	r8
    2522:	9f 92       	push	r9
    2524:	af 92       	push	r10
    2526:	bf 92       	push	r11
    2528:	ef 92       	push	r14
    252a:	ff 92       	push	r15
    252c:	0f 93       	push	r16
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	dc 01       	movw	r26, r24
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	0f 92       	push	r0
    253a:	e1 14       	cp	r14, r1
    253c:	f1 04       	cpc	r15, r1
    253e:	89 f0       	breq	.+34     	; 0x2562 <xTaskGenericNotify+0x42>
    2540:	e6 2f       	mov	r30, r22
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	e8 0f       	add	r30, r24
    254e:	f9 1f       	adc	r31, r25
    2550:	87 a4       	ldd	r8, Z+47	; 0x2f
    2552:	90 a8       	ldd	r9, Z+48	; 0x30
    2554:	a1 a8       	ldd	r10, Z+49	; 0x31
    2556:	b2 a8       	ldd	r11, Z+50	; 0x32
    2558:	f7 01       	movw	r30, r14
    255a:	80 82       	st	Z, r8
    255c:	91 82       	std	Z+1, r9	; 0x01
    255e:	a2 82       	std	Z+2, r10	; 0x02
    2560:	b3 82       	std	Z+3, r11	; 0x03
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	fd 01       	movw	r30, r26
    2566:	e6 0f       	add	r30, r22
    2568:	f7 1f       	adc	r31, r23
    256a:	83 a9       	ldd	r24, Z+51	; 0x33
    256c:	92 e0       	ldi	r25, 0x02	; 2
    256e:	93 ab       	std	Z+51, r25	; 0x33
    2570:	02 30       	cpi	r16, 0x02	; 2
    2572:	01 f1       	breq	.+64     	; 0x25b4 <xTaskGenericNotify+0x94>
    2574:	18 f4       	brcc	.+6      	; 0x257c <xTaskGenericNotify+0x5c>
    2576:	01 30       	cpi	r16, 0x01	; 1
    2578:	31 f0       	breq	.+12     	; 0x2586 <xTaskGenericNotify+0x66>
    257a:	4d c0       	rjmp	.+154    	; 0x2616 <xTaskGenericNotify+0xf6>
    257c:	03 30       	cpi	r16, 0x03	; 3
    257e:	79 f1       	breq	.+94     	; 0x25de <xTaskGenericNotify+0xbe>
    2580:	04 30       	cpi	r16, 0x04	; 4
    2582:	d1 f1       	breq	.+116    	; 0x25f8 <xTaskGenericNotify+0xd8>
    2584:	48 c0       	rjmp	.+144    	; 0x2616 <xTaskGenericNotify+0xf6>
    2586:	66 0f       	add	r22, r22
    2588:	77 1f       	adc	r23, r23
    258a:	66 0f       	add	r22, r22
    258c:	77 1f       	adc	r23, r23
    258e:	fd 01       	movw	r30, r26
    2590:	e6 0f       	add	r30, r22
    2592:	f7 1f       	adc	r31, r23
    2594:	87 a4       	ldd	r8, Z+47	; 0x2f
    2596:	90 a8       	ldd	r9, Z+48	; 0x30
    2598:	a1 a8       	ldd	r10, Z+49	; 0x31
    259a:	b2 a8       	ldd	r11, Z+50	; 0x32
    259c:	ba 01       	movw	r22, r20
    259e:	a9 01       	movw	r20, r18
    25a0:	48 29       	or	r20, r8
    25a2:	59 29       	or	r21, r9
    25a4:	6a 29       	or	r22, r10
    25a6:	7b 29       	or	r23, r11
    25a8:	47 a7       	std	Z+47, r20	; 0x2f
    25aa:	50 ab       	std	Z+48, r21	; 0x30
    25ac:	61 ab       	std	Z+49, r22	; 0x31
    25ae:	72 ab       	std	Z+50, r23	; 0x32
    25b0:	01 e0       	ldi	r16, 0x01	; 1
    25b2:	34 c0       	rjmp	.+104    	; 0x261c <xTaskGenericNotify+0xfc>
    25b4:	66 0f       	add	r22, r22
    25b6:	77 1f       	adc	r23, r23
    25b8:	66 0f       	add	r22, r22
    25ba:	77 1f       	adc	r23, r23
    25bc:	fd 01       	movw	r30, r26
    25be:	e6 0f       	add	r30, r22
    25c0:	f7 1f       	adc	r31, r23
    25c2:	47 a5       	ldd	r20, Z+47	; 0x2f
    25c4:	50 a9       	ldd	r21, Z+48	; 0x30
    25c6:	61 a9       	ldd	r22, Z+49	; 0x31
    25c8:	72 a9       	ldd	r23, Z+50	; 0x32
    25ca:	4f 5f       	subi	r20, 0xFF	; 255
    25cc:	5f 4f       	sbci	r21, 0xFF	; 255
    25ce:	6f 4f       	sbci	r22, 0xFF	; 255
    25d0:	7f 4f       	sbci	r23, 0xFF	; 255
    25d2:	47 a7       	std	Z+47, r20	; 0x2f
    25d4:	50 ab       	std	Z+48, r21	; 0x30
    25d6:	61 ab       	std	Z+49, r22	; 0x31
    25d8:	72 ab       	std	Z+50, r23	; 0x32
    25da:	01 e0       	ldi	r16, 0x01	; 1
    25dc:	1f c0       	rjmp	.+62     	; 0x261c <xTaskGenericNotify+0xfc>
    25de:	66 0f       	add	r22, r22
    25e0:	77 1f       	adc	r23, r23
    25e2:	66 0f       	add	r22, r22
    25e4:	77 1f       	adc	r23, r23
    25e6:	fd 01       	movw	r30, r26
    25e8:	e6 0f       	add	r30, r22
    25ea:	f7 1f       	adc	r31, r23
    25ec:	27 a7       	std	Z+47, r18	; 0x2f
    25ee:	30 ab       	std	Z+48, r19	; 0x30
    25f0:	41 ab       	std	Z+49, r20	; 0x31
    25f2:	52 ab       	std	Z+50, r21	; 0x32
    25f4:	01 e0       	ldi	r16, 0x01	; 1
    25f6:	12 c0       	rjmp	.+36     	; 0x261c <xTaskGenericNotify+0xfc>
    25f8:	82 30       	cpi	r24, 0x02	; 2
    25fa:	79 f0       	breq	.+30     	; 0x261a <xTaskGenericNotify+0xfa>
    25fc:	66 0f       	add	r22, r22
    25fe:	77 1f       	adc	r23, r23
    2600:	66 0f       	add	r22, r22
    2602:	77 1f       	adc	r23, r23
    2604:	fd 01       	movw	r30, r26
    2606:	e6 0f       	add	r30, r22
    2608:	f7 1f       	adc	r31, r23
    260a:	27 a7       	std	Z+47, r18	; 0x2f
    260c:	30 ab       	std	Z+48, r19	; 0x30
    260e:	41 ab       	std	Z+49, r20	; 0x31
    2610:	52 ab       	std	Z+50, r21	; 0x32
    2612:	01 e0       	ldi	r16, 0x01	; 1
    2614:	03 c0       	rjmp	.+6      	; 0x261c <xTaskGenericNotify+0xfc>
    2616:	01 e0       	ldi	r16, 0x01	; 1
    2618:	01 c0       	rjmp	.+2      	; 0x261c <xTaskGenericNotify+0xfc>
    261a:	00 e0       	ldi	r16, 0x00	; 0
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	09 f0       	breq	.+2      	; 0x2622 <xTaskGenericNotify+0x102>
    2620:	69 c0       	rjmp	.+210    	; 0x26f4 <xTaskGenericNotify+0x1d4>
    2622:	1c 96       	adiw	r26, 0x0c	; 12
    2624:	ed 91       	ld	r30, X+
    2626:	fc 91       	ld	r31, X
    2628:	1d 97       	sbiw	r26, 0x0d	; 13
    262a:	16 96       	adiw	r26, 0x06	; 6
    262c:	cd 91       	ld	r28, X+
    262e:	dc 91       	ld	r29, X
    2630:	17 97       	sbiw	r26, 0x07	; 7
    2632:	18 96       	adiw	r26, 0x08	; 8
    2634:	8d 91       	ld	r24, X+
    2636:	9c 91       	ld	r25, X
    2638:	19 97       	sbiw	r26, 0x09	; 9
    263a:	9f 83       	std	Y+7, r25	; 0x07
    263c:	8e 83       	std	Y+6, r24	; 0x06
    263e:	18 96       	adiw	r26, 0x08	; 8
    2640:	cd 91       	ld	r28, X+
    2642:	dc 91       	ld	r29, X
    2644:	19 97       	sbiw	r26, 0x09	; 9
    2646:	16 96       	adiw	r26, 0x06	; 6
    2648:	8d 91       	ld	r24, X+
    264a:	9c 91       	ld	r25, X
    264c:	17 97       	sbiw	r26, 0x07	; 7
    264e:	9d 83       	std	Y+5, r25	; 0x05
    2650:	8c 83       	std	Y+4, r24	; 0x04
    2652:	81 81       	ldd	r24, Z+1	; 0x01
    2654:	92 81       	ldd	r25, Z+2	; 0x02
    2656:	9d 01       	movw	r18, r26
    2658:	2e 5f       	subi	r18, 0xFE	; 254
    265a:	3f 4f       	sbci	r19, 0xFF	; 255
    265c:	82 17       	cp	r24, r18
    265e:	93 07       	cpc	r25, r19
    2660:	31 f4       	brne	.+12     	; 0x266e <xTaskGenericNotify+0x14e>
    2662:	18 96       	adiw	r26, 0x08	; 8
    2664:	8d 91       	ld	r24, X+
    2666:	9c 91       	ld	r25, X
    2668:	19 97       	sbiw	r26, 0x09	; 9
    266a:	92 83       	std	Z+2, r25	; 0x02
    266c:	81 83       	std	Z+1, r24	; 0x01
    266e:	1d 96       	adiw	r26, 0x0d	; 13
    2670:	1c 92       	st	X, r1
    2672:	1e 92       	st	-X, r1
    2674:	1c 97       	sbiw	r26, 0x0c	; 12
    2676:	80 81       	ld	r24, Z
    2678:	81 50       	subi	r24, 0x01	; 1
    267a:	80 83       	st	Z, r24
    267c:	5a 96       	adiw	r26, 0x1a	; 26
    267e:	ec 91       	ld	r30, X
    2680:	5a 97       	sbiw	r26, 0x1a	; 26
    2682:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    2686:	8e 17       	cp	r24, r30
    2688:	10 f4       	brcc	.+4      	; 0x268e <xTaskGenericNotify+0x16e>
    268a:	e0 93 5b 11 	sts	0x115B, r30	; 0x80115b <uxTopReadyPriority>
    268e:	8b e0       	ldi	r24, 0x0B	; 11
    2690:	8e 9f       	mul	r24, r30
    2692:	f0 01       	movw	r30, r0
    2694:	11 24       	eor	r1, r1
    2696:	e3 56       	subi	r30, 0x63	; 99
    2698:	fe 4e       	sbci	r31, 0xEE	; 238
    269a:	01 80       	ldd	r0, Z+1	; 0x01
    269c:	f2 81       	ldd	r31, Z+2	; 0x02
    269e:	e0 2d       	mov	r30, r0
    26a0:	17 96       	adiw	r26, 0x07	; 7
    26a2:	fc 93       	st	X, r31
    26a4:	ee 93       	st	-X, r30
    26a6:	16 97       	sbiw	r26, 0x06	; 6
    26a8:	46 81       	ldd	r20, Z+6	; 0x06
    26aa:	57 81       	ldd	r21, Z+7	; 0x07
    26ac:	19 96       	adiw	r26, 0x09	; 9
    26ae:	5c 93       	st	X, r21
    26b0:	4e 93       	st	-X, r20
    26b2:	18 97       	sbiw	r26, 0x08	; 8
    26b4:	c6 81       	ldd	r28, Z+6	; 0x06
    26b6:	d7 81       	ldd	r29, Z+7	; 0x07
    26b8:	3d 83       	std	Y+5, r19	; 0x05
    26ba:	2c 83       	std	Y+4, r18	; 0x04
    26bc:	37 83       	std	Z+7, r19	; 0x07
    26be:	26 83       	std	Z+6, r18	; 0x06
    26c0:	5a 96       	adiw	r26, 0x1a	; 26
    26c2:	ec 91       	ld	r30, X
    26c4:	5a 97       	sbiw	r26, 0x1a	; 26
    26c6:	8e 9f       	mul	r24, r30
    26c8:	f0 01       	movw	r30, r0
    26ca:	11 24       	eor	r1, r1
    26cc:	e3 56       	subi	r30, 0x63	; 99
    26ce:	fe 4e       	sbci	r31, 0xEE	; 238
    26d0:	1d 96       	adiw	r26, 0x0d	; 13
    26d2:	fc 93       	st	X, r31
    26d4:	ee 93       	st	-X, r30
    26d6:	1c 97       	sbiw	r26, 0x0c	; 12
    26d8:	80 81       	ld	r24, Z
    26da:	8f 5f       	subi	r24, 0xFF	; 255
    26dc:	80 83       	st	Z, r24
    26de:	5a 96       	adiw	r26, 0x1a	; 26
    26e0:	9c 91       	ld	r25, X
    26e2:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    26e6:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    26ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    26ec:	89 17       	cp	r24, r25
    26ee:	10 f4       	brcc	.+4      	; 0x26f4 <xTaskGenericNotify+0x1d4>
    26f0:	0e 94 a0 03 	call	0x740	; 0x740 <vPortYield>
    26f4:	0f 90       	pop	r0
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	80 2f       	mov	r24, r16
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	0f 91       	pop	r16
    2700:	ff 90       	pop	r15
    2702:	ef 90       	pop	r14
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	9f 90       	pop	r9
    270a:	8f 90       	pop	r8
    270c:	08 95       	ret

0000270e <xTaskGenericNotifyFromISR>:
    270e:	8f 92       	push	r8
    2710:	9f 92       	push	r9
    2712:	af 92       	push	r10
    2714:	bf 92       	push	r11
    2716:	cf 92       	push	r12
    2718:	df 92       	push	r13
    271a:	ef 92       	push	r14
    271c:	ff 92       	push	r15
    271e:	0f 93       	push	r16
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	dc 01       	movw	r26, r24
    2726:	e1 14       	cp	r14, r1
    2728:	f1 04       	cpc	r15, r1
    272a:	89 f0       	breq	.+34     	; 0x274e <xTaskGenericNotifyFromISR+0x40>
    272c:	e6 2f       	mov	r30, r22
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	e8 0f       	add	r30, r24
    273a:	f9 1f       	adc	r31, r25
    273c:	87 a4       	ldd	r8, Z+47	; 0x2f
    273e:	90 a8       	ldd	r9, Z+48	; 0x30
    2740:	a1 a8       	ldd	r10, Z+49	; 0x31
    2742:	b2 a8       	ldd	r11, Z+50	; 0x32
    2744:	f7 01       	movw	r30, r14
    2746:	80 82       	st	Z, r8
    2748:	91 82       	std	Z+1, r9	; 0x01
    274a:	a2 82       	std	Z+2, r10	; 0x02
    274c:	b3 82       	std	Z+3, r11	; 0x03
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	fd 01       	movw	r30, r26
    2752:	e6 0f       	add	r30, r22
    2754:	f7 1f       	adc	r31, r23
    2756:	93 a9       	ldd	r25, Z+51	; 0x33
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	83 ab       	std	Z+51, r24	; 0x33
    275c:	02 30       	cpi	r16, 0x02	; 2
    275e:	01 f1       	breq	.+64     	; 0x27a0 <xTaskGenericNotifyFromISR+0x92>
    2760:	18 f4       	brcc	.+6      	; 0x2768 <xTaskGenericNotifyFromISR+0x5a>
    2762:	01 30       	cpi	r16, 0x01	; 1
    2764:	31 f0       	breq	.+12     	; 0x2772 <xTaskGenericNotifyFromISR+0x64>
    2766:	4d c0       	rjmp	.+154    	; 0x2802 <xTaskGenericNotifyFromISR+0xf4>
    2768:	03 30       	cpi	r16, 0x03	; 3
    276a:	79 f1       	breq	.+94     	; 0x27ca <xTaskGenericNotifyFromISR+0xbc>
    276c:	04 30       	cpi	r16, 0x04	; 4
    276e:	d1 f1       	breq	.+116    	; 0x27e4 <xTaskGenericNotifyFromISR+0xd6>
    2770:	48 c0       	rjmp	.+144    	; 0x2802 <xTaskGenericNotifyFromISR+0xf4>
    2772:	66 0f       	add	r22, r22
    2774:	77 1f       	adc	r23, r23
    2776:	66 0f       	add	r22, r22
    2778:	77 1f       	adc	r23, r23
    277a:	fd 01       	movw	r30, r26
    277c:	e6 0f       	add	r30, r22
    277e:	f7 1f       	adc	r31, r23
    2780:	87 a4       	ldd	r8, Z+47	; 0x2f
    2782:	90 a8       	ldd	r9, Z+48	; 0x30
    2784:	a1 a8       	ldd	r10, Z+49	; 0x31
    2786:	b2 a8       	ldd	r11, Z+50	; 0x32
    2788:	ba 01       	movw	r22, r20
    278a:	a9 01       	movw	r20, r18
    278c:	48 29       	or	r20, r8
    278e:	59 29       	or	r21, r9
    2790:	6a 29       	or	r22, r10
    2792:	7b 29       	or	r23, r11
    2794:	47 a7       	std	Z+47, r20	; 0x2f
    2796:	50 ab       	std	Z+48, r21	; 0x30
    2798:	61 ab       	std	Z+49, r22	; 0x31
    279a:	72 ab       	std	Z+50, r23	; 0x32
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	34 c0       	rjmp	.+104    	; 0x2808 <xTaskGenericNotifyFromISR+0xfa>
    27a0:	66 0f       	add	r22, r22
    27a2:	77 1f       	adc	r23, r23
    27a4:	66 0f       	add	r22, r22
    27a6:	77 1f       	adc	r23, r23
    27a8:	fd 01       	movw	r30, r26
    27aa:	e6 0f       	add	r30, r22
    27ac:	f7 1f       	adc	r31, r23
    27ae:	47 a5       	ldd	r20, Z+47	; 0x2f
    27b0:	50 a9       	ldd	r21, Z+48	; 0x30
    27b2:	61 a9       	ldd	r22, Z+49	; 0x31
    27b4:	72 a9       	ldd	r23, Z+50	; 0x32
    27b6:	4f 5f       	subi	r20, 0xFF	; 255
    27b8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ba:	6f 4f       	sbci	r22, 0xFF	; 255
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	47 a7       	std	Z+47, r20	; 0x2f
    27c0:	50 ab       	std	Z+48, r21	; 0x30
    27c2:	61 ab       	std	Z+49, r22	; 0x31
    27c4:	72 ab       	std	Z+50, r23	; 0x32
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	1f c0       	rjmp	.+62     	; 0x2808 <xTaskGenericNotifyFromISR+0xfa>
    27ca:	66 0f       	add	r22, r22
    27cc:	77 1f       	adc	r23, r23
    27ce:	66 0f       	add	r22, r22
    27d0:	77 1f       	adc	r23, r23
    27d2:	fd 01       	movw	r30, r26
    27d4:	e6 0f       	add	r30, r22
    27d6:	f7 1f       	adc	r31, r23
    27d8:	27 a7       	std	Z+47, r18	; 0x2f
    27da:	30 ab       	std	Z+48, r19	; 0x30
    27dc:	41 ab       	std	Z+49, r20	; 0x31
    27de:	52 ab       	std	Z+50, r21	; 0x32
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	12 c0       	rjmp	.+36     	; 0x2808 <xTaskGenericNotifyFromISR+0xfa>
    27e4:	92 30       	cpi	r25, 0x02	; 2
    27e6:	79 f0       	breq	.+30     	; 0x2806 <xTaskGenericNotifyFromISR+0xf8>
    27e8:	66 0f       	add	r22, r22
    27ea:	77 1f       	adc	r23, r23
    27ec:	66 0f       	add	r22, r22
    27ee:	77 1f       	adc	r23, r23
    27f0:	fd 01       	movw	r30, r26
    27f2:	e6 0f       	add	r30, r22
    27f4:	f7 1f       	adc	r31, r23
    27f6:	27 a7       	std	Z+47, r18	; 0x2f
    27f8:	30 ab       	std	Z+48, r19	; 0x30
    27fa:	41 ab       	std	Z+49, r20	; 0x31
    27fc:	52 ab       	std	Z+50, r21	; 0x32
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	03 c0       	rjmp	.+6      	; 0x2808 <xTaskGenericNotifyFromISR+0xfa>
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	01 c0       	rjmp	.+2      	; 0x2808 <xTaskGenericNotifyFromISR+0xfa>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	91 30       	cpi	r25, 0x01	; 1
    280a:	09 f0       	breq	.+2      	; 0x280e <xTaskGenericNotifyFromISR+0x100>
    280c:	96 c0       	rjmp	.+300    	; 0x293a <xTaskGenericNotifyFromISR+0x22c>
    280e:	90 91 4c 11 	lds	r25, 0x114C	; 0x80114c <uxSchedulerSuspended>
    2812:	91 11       	cpse	r25, r1
    2814:	5f c0       	rjmp	.+190    	; 0x28d4 <xTaskGenericNotifyFromISR+0x1c6>
    2816:	1c 96       	adiw	r26, 0x0c	; 12
    2818:	ed 91       	ld	r30, X+
    281a:	fc 91       	ld	r31, X
    281c:	1d 97       	sbiw	r26, 0x0d	; 13
    281e:	16 96       	adiw	r26, 0x06	; 6
    2820:	cd 91       	ld	r28, X+
    2822:	dc 91       	ld	r29, X
    2824:	17 97       	sbiw	r26, 0x07	; 7
    2826:	18 96       	adiw	r26, 0x08	; 8
    2828:	2d 91       	ld	r18, X+
    282a:	3c 91       	ld	r19, X
    282c:	19 97       	sbiw	r26, 0x09	; 9
    282e:	3f 83       	std	Y+7, r19	; 0x07
    2830:	2e 83       	std	Y+6, r18	; 0x06
    2832:	18 96       	adiw	r26, 0x08	; 8
    2834:	cd 91       	ld	r28, X+
    2836:	dc 91       	ld	r29, X
    2838:	19 97       	sbiw	r26, 0x09	; 9
    283a:	16 96       	adiw	r26, 0x06	; 6
    283c:	2d 91       	ld	r18, X+
    283e:	3c 91       	ld	r19, X
    2840:	17 97       	sbiw	r26, 0x07	; 7
    2842:	3d 83       	std	Y+5, r19	; 0x05
    2844:	2c 83       	std	Y+4, r18	; 0x04
    2846:	41 81       	ldd	r20, Z+1	; 0x01
    2848:	52 81       	ldd	r21, Z+2	; 0x02
    284a:	9d 01       	movw	r18, r26
    284c:	2e 5f       	subi	r18, 0xFE	; 254
    284e:	3f 4f       	sbci	r19, 0xFF	; 255
    2850:	42 17       	cp	r20, r18
    2852:	53 07       	cpc	r21, r19
    2854:	31 f4       	brne	.+12     	; 0x2862 <xTaskGenericNotifyFromISR+0x154>
    2856:	18 96       	adiw	r26, 0x08	; 8
    2858:	4d 91       	ld	r20, X+
    285a:	5c 91       	ld	r21, X
    285c:	19 97       	sbiw	r26, 0x09	; 9
    285e:	52 83       	std	Z+2, r21	; 0x02
    2860:	41 83       	std	Z+1, r20	; 0x01
    2862:	1d 96       	adiw	r26, 0x0d	; 13
    2864:	1c 92       	st	X, r1
    2866:	1e 92       	st	-X, r1
    2868:	1c 97       	sbiw	r26, 0x0c	; 12
    286a:	90 81       	ld	r25, Z
    286c:	91 50       	subi	r25, 0x01	; 1
    286e:	90 83       	st	Z, r25
    2870:	5a 96       	adiw	r26, 0x1a	; 26
    2872:	ec 91       	ld	r30, X
    2874:	5a 97       	sbiw	r26, 0x1a	; 26
    2876:	90 91 5b 11 	lds	r25, 0x115B	; 0x80115b <uxTopReadyPriority>
    287a:	9e 17       	cp	r25, r30
    287c:	10 f4       	brcc	.+4      	; 0x2882 <xTaskGenericNotifyFromISR+0x174>
    287e:	e0 93 5b 11 	sts	0x115B, r30	; 0x80115b <uxTopReadyPriority>
    2882:	9b e0       	ldi	r25, 0x0B	; 11
    2884:	9e 9f       	mul	r25, r30
    2886:	f0 01       	movw	r30, r0
    2888:	11 24       	eor	r1, r1
    288a:	e3 56       	subi	r30, 0x63	; 99
    288c:	fe 4e       	sbci	r31, 0xEE	; 238
    288e:	01 80       	ldd	r0, Z+1	; 0x01
    2890:	f2 81       	ldd	r31, Z+2	; 0x02
    2892:	e0 2d       	mov	r30, r0
    2894:	17 96       	adiw	r26, 0x07	; 7
    2896:	fc 93       	st	X, r31
    2898:	ee 93       	st	-X, r30
    289a:	16 97       	sbiw	r26, 0x06	; 6
    289c:	46 81       	ldd	r20, Z+6	; 0x06
    289e:	57 81       	ldd	r21, Z+7	; 0x07
    28a0:	19 96       	adiw	r26, 0x09	; 9
    28a2:	5c 93       	st	X, r21
    28a4:	4e 93       	st	-X, r20
    28a6:	18 97       	sbiw	r26, 0x08	; 8
    28a8:	c6 81       	ldd	r28, Z+6	; 0x06
    28aa:	d7 81       	ldd	r29, Z+7	; 0x07
    28ac:	3d 83       	std	Y+5, r19	; 0x05
    28ae:	2c 83       	std	Y+4, r18	; 0x04
    28b0:	37 83       	std	Z+7, r19	; 0x07
    28b2:	26 83       	std	Z+6, r18	; 0x06
    28b4:	5a 96       	adiw	r26, 0x1a	; 26
    28b6:	ec 91       	ld	r30, X
    28b8:	5a 97       	sbiw	r26, 0x1a	; 26
    28ba:	9e 9f       	mul	r25, r30
    28bc:	f0 01       	movw	r30, r0
    28be:	11 24       	eor	r1, r1
    28c0:	e3 56       	subi	r30, 0x63	; 99
    28c2:	fe 4e       	sbci	r31, 0xEE	; 238
    28c4:	1d 96       	adiw	r26, 0x0d	; 13
    28c6:	fc 93       	st	X, r31
    28c8:	ee 93       	st	-X, r30
    28ca:	1c 97       	sbiw	r26, 0x0c	; 12
    28cc:	90 81       	ld	r25, Z
    28ce:	9f 5f       	subi	r25, 0xFF	; 255
    28d0:	90 83       	st	Z, r25
    28d2:	21 c0       	rjmp	.+66     	; 0x2916 <xTaskGenericNotifyFromISR+0x208>
    28d4:	68 e7       	ldi	r22, 0x78	; 120
    28d6:	71 e1       	ldi	r23, 0x11	; 17
    28d8:	fb 01       	movw	r30, r22
    28da:	c1 81       	ldd	r28, Z+1	; 0x01
    28dc:	d2 81       	ldd	r29, Z+2	; 0x02
    28de:	53 96       	adiw	r26, 0x13	; 19
    28e0:	dc 93       	st	X, r29
    28e2:	ce 93       	st	-X, r28
    28e4:	52 97       	sbiw	r26, 0x12	; 18
    28e6:	2e 81       	ldd	r18, Y+6	; 0x06
    28e8:	3f 81       	ldd	r19, Y+7	; 0x07
    28ea:	55 96       	adiw	r26, 0x15	; 21
    28ec:	3c 93       	st	X, r19
    28ee:	2e 93       	st	-X, r18
    28f0:	54 97       	sbiw	r26, 0x14	; 20
    28f2:	4e 81       	ldd	r20, Y+6	; 0x06
    28f4:	5f 81       	ldd	r21, Y+7	; 0x07
    28f6:	9d 01       	movw	r18, r26
    28f8:	22 5f       	subi	r18, 0xF2	; 242
    28fa:	3f 4f       	sbci	r19, 0xFF	; 255
    28fc:	fa 01       	movw	r30, r20
    28fe:	35 83       	std	Z+5, r19	; 0x05
    2900:	24 83       	std	Z+4, r18	; 0x04
    2902:	3f 83       	std	Y+7, r19	; 0x07
    2904:	2e 83       	std	Y+6, r18	; 0x06
    2906:	59 96       	adiw	r26, 0x19	; 25
    2908:	7c 93       	st	X, r23
    290a:	6e 93       	st	-X, r22
    290c:	58 97       	sbiw	r26, 0x18	; 24
    290e:	fb 01       	movw	r30, r22
    2910:	90 81       	ld	r25, Z
    2912:	9f 5f       	subi	r25, 0xFF	; 255
    2914:	90 83       	st	Z, r25
    2916:	5a 96       	adiw	r26, 0x1a	; 26
    2918:	2c 91       	ld	r18, X
    291a:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    291e:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2922:	92 8d       	ldd	r25, Z+26	; 0x1a
    2924:	92 17       	cp	r25, r18
    2926:	48 f4       	brcc	.+18     	; 0x293a <xTaskGenericNotifyFromISR+0x22c>
    2928:	c1 14       	cp	r12, r1
    292a:	d1 04       	cpc	r13, r1
    292c:	19 f0       	breq	.+6      	; 0x2934 <xTaskGenericNotifyFromISR+0x226>
    292e:	91 e0       	ldi	r25, 0x01	; 1
    2930:	f6 01       	movw	r30, r12
    2932:	90 83       	st	Z, r25
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	90 93 55 11 	sts	0x1155, r25	; 0x801155 <xYieldPending>
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	df 90       	pop	r13
    2946:	cf 90       	pop	r12
    2948:	bf 90       	pop	r11
    294a:	af 90       	pop	r10
    294c:	9f 90       	pop	r9
    294e:	8f 90       	pop	r8
    2950:	08 95       	ret

00002952 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	21 f4       	brne	.+8      	; 0x295e <xTaskGenericNotifyStateClear+0xc>
    2956:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    295a:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2964:	70 e0       	ldi	r23, 0x00	; 0
    2966:	fc 01       	movw	r30, r24
    2968:	e6 0f       	add	r30, r22
    296a:	f7 1f       	adc	r31, r23
    296c:	23 a9       	ldd	r18, Z+51	; 0x33
    296e:	22 30       	cpi	r18, 0x02	; 2
    2970:	31 f4       	brne	.+12     	; 0x297e <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2972:	fc 01       	movw	r30, r24
    2974:	e6 0f       	add	r30, r22
    2976:	f7 1f       	adc	r31, r23
    2978:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    297e:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2980:	0f 90       	pop	r0
    2982:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2984:	08 95       	ret

00002986 <prvGetNextExpireTime>:
    2986:	dc 01       	movw	r26, r24
    2988:	e0 91 17 12 	lds	r30, 0x1217	; 0x801217 <pxCurrentTimerList>
    298c:	f0 91 18 12 	lds	r31, 0x1218	; 0x801218 <pxCurrentTimerList+0x1>
    2990:	80 81       	ld	r24, Z
    2992:	91 e0       	ldi	r25, 0x01	; 1
    2994:	81 11       	cpse	r24, r1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9c 93       	st	X, r25
    299a:	91 11       	cpse	r25, r1
    299c:	08 c0       	rjmp	.+16     	; 0x29ae <prvGetNextExpireTime+0x28>
    299e:	07 80       	ldd	r0, Z+7	; 0x07
    29a0:	f0 85       	ldd	r31, Z+8	; 0x08
    29a2:	e0 2d       	mov	r30, r0
    29a4:	60 81       	ld	r22, Z
    29a6:	71 81       	ldd	r23, Z+1	; 0x01
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	08 95       	ret
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	cb 01       	movw	r24, r22
    29b4:	08 95       	ret

000029b6 <prvInsertTimerInActiveList>:
    29b6:	cf 92       	push	r12
    29b8:	df 92       	push	r13
    29ba:	ef 92       	push	r14
    29bc:	ff 92       	push	r15
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	fc 01       	movw	r30, r24
    29c4:	42 83       	std	Z+2, r20	; 0x02
    29c6:	53 83       	std	Z+3, r21	; 0x03
    29c8:	64 83       	std	Z+4, r22	; 0x04
    29ca:	75 83       	std	Z+5, r23	; 0x05
    29cc:	93 87       	std	Z+11, r25	; 0x0b
    29ce:	82 87       	std	Z+10, r24	; 0x0a
    29d0:	04 17       	cp	r16, r20
    29d2:	15 07       	cpc	r17, r21
    29d4:	26 07       	cpc	r18, r22
    29d6:	37 07       	cpc	r19, r23
    29d8:	c0 f0       	brcs	.+48     	; 0x2a0a <prvInsertTimerInActiveList+0x54>
    29da:	0c 19       	sub	r16, r12
    29dc:	1d 09       	sbc	r17, r13
    29de:	2e 09       	sbc	r18, r14
    29e0:	3f 09       	sbc	r19, r15
    29e2:	86 85       	ldd	r24, Z+14	; 0x0e
    29e4:	97 85       	ldd	r25, Z+15	; 0x0f
    29e6:	a0 89       	ldd	r26, Z+16	; 0x10
    29e8:	b1 89       	ldd	r27, Z+17	; 0x11
    29ea:	08 17       	cp	r16, r24
    29ec:	19 07       	cpc	r17, r25
    29ee:	2a 07       	cpc	r18, r26
    29f0:	3b 07       	cpc	r19, r27
    29f2:	00 f5       	brcc	.+64     	; 0x2a34 <prvInsertTimerInActiveList+0x7e>
    29f4:	bf 01       	movw	r22, r30
    29f6:	6e 5f       	subi	r22, 0xFE	; 254
    29f8:	7f 4f       	sbci	r23, 0xFF	; 255
    29fa:	80 91 15 12 	lds	r24, 0x1215	; 0x801215 <pxOverflowTimerList>
    29fe:	90 91 16 12 	lds	r25, 0x1216	; 0x801216 <pxOverflowTimerList+0x1>
    2a02:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInsert>
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	18 c0       	rjmp	.+48     	; 0x2a3a <prvInsertTimerInActiveList+0x84>
    2a0a:	0c 15       	cp	r16, r12
    2a0c:	1d 05       	cpc	r17, r13
    2a0e:	2e 05       	cpc	r18, r14
    2a10:	3f 05       	cpc	r19, r15
    2a12:	28 f4       	brcc	.+10     	; 0x2a1e <prvInsertTimerInActiveList+0x68>
    2a14:	4c 15       	cp	r20, r12
    2a16:	5d 05       	cpc	r21, r13
    2a18:	6e 05       	cpc	r22, r14
    2a1a:	7f 05       	cpc	r23, r15
    2a1c:	68 f4       	brcc	.+26     	; 0x2a38 <prvInsertTimerInActiveList+0x82>
    2a1e:	bf 01       	movw	r22, r30
    2a20:	6e 5f       	subi	r22, 0xFE	; 254
    2a22:	7f 4f       	sbci	r23, 0xFF	; 255
    2a24:	80 91 17 12 	lds	r24, 0x1217	; 0x801217 <pxCurrentTimerList>
    2a28:	90 91 18 12 	lds	r25, 0x1218	; 0x801218 <pxCurrentTimerList+0x1>
    2a2c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInsert>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	03 c0       	rjmp	.+6      	; 0x2a3a <prvInsertTimerInActiveList+0x84>
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	01 c0       	rjmp	.+2      	; 0x2a3a <prvInsertTimerInActiveList+0x84>
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	ff 90       	pop	r15
    2a40:	ef 90       	pop	r14
    2a42:	df 90       	pop	r13
    2a44:	cf 90       	pop	r12
    2a46:	08 95       	ret

00002a48 <prvCheckForValidListAndQueue>:
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	0f 92       	push	r0
    2a4e:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2a52:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2a56:	89 2b       	or	r24, r25
    2a58:	e9 f4       	brne	.+58     	; 0x2a94 <prvCheckForValidListAndQueue+0x4c>
    2a5a:	84 e2       	ldi	r24, 0x24	; 36
    2a5c:	92 e1       	ldi	r25, 0x12	; 18
    2a5e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInitialise>
    2a62:	89 e1       	ldi	r24, 0x19	; 25
    2a64:	92 e1       	ldi	r25, 0x12	; 18
    2a66:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <vListInitialise>
    2a6a:	84 e2       	ldi	r24, 0x24	; 36
    2a6c:	92 e1       	ldi	r25, 0x12	; 18
    2a6e:	90 93 18 12 	sts	0x1218, r25	; 0x801218 <pxCurrentTimerList+0x1>
    2a72:	80 93 17 12 	sts	0x1217, r24	; 0x801217 <pxCurrentTimerList>
    2a76:	89 e1       	ldi	r24, 0x19	; 25
    2a78:	92 e1       	ldi	r25, 0x12	; 18
    2a7a:	90 93 16 12 	sts	0x1216, r25	; 0x801216 <pxOverflowTimerList+0x1>
    2a7e:	80 93 15 12 	sts	0x1215, r24	; 0x801215 <pxOverflowTimerList>
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	67 e0       	ldi	r22, 0x07	; 7
    2a86:	8a e0       	ldi	r24, 0x0A	; 10
    2a88:	0e 94 85 05 	call	0xb0a	; 0xb0a <xQueueGenericCreate>
    2a8c:	90 93 14 12 	sts	0x1214, r25	; 0x801214 <xTimerQueue+0x1>
    2a90:	80 93 13 12 	sts	0x1213, r24	; 0x801213 <xTimerQueue>
    2a94:	0f 90       	pop	r0
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	08 95       	ret

00002a9a <xTimerCreateTimerTask>:
    2a9a:	ef 92       	push	r14
    2a9c:	ff 92       	push	r15
    2a9e:	0f 93       	push	r16
    2aa0:	d3 df       	rcall	.-90     	; 0x2a48 <prvCheckForValidListAndQueue>
    2aa2:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2aa6:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2aaa:	89 2b       	or	r24, r25
    2aac:	91 f0       	breq	.+36     	; 0x2ad2 <xTimerCreateTimerTask+0x38>
    2aae:	0f 2e       	mov	r0, r31
    2ab0:	f1 e1       	ldi	r31, 0x11	; 17
    2ab2:	ef 2e       	mov	r14, r31
    2ab4:	f2 e1       	ldi	r31, 0x12	; 18
    2ab6:	ff 2e       	mov	r15, r31
    2ab8:	f0 2d       	mov	r31, r0
    2aba:	03 e0       	ldi	r16, 0x03	; 3
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 ec       	ldi	r20, 0xC0	; 192
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	6f e9       	ldi	r22, 0x9F	; 159
    2ac6:	72 e0       	ldi	r23, 0x02	; 2
    2ac8:	87 ed       	ldi	r24, 0xD7	; 215
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <xTaskCreate>
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <xTimerCreateTimerTask+0x3a>
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	0f 91       	pop	r16
    2ad6:	ff 90       	pop	r15
    2ad8:	ef 90       	pop	r14
    2ada:	08 95       	ret

00002adc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2adc:	8f 92       	push	r8
    2ade:	9f 92       	push	r9
    2ae0:	af 92       	push	r10
    2ae2:	bf 92       	push	r11
    2ae4:	cf 92       	push	r12
    2ae6:	df 92       	push	r13
    2ae8:	ef 92       	push	r14
    2aea:	ff 92       	push	r15
    2aec:	0f 93       	push	r16
    2aee:	1f 93       	push	r17
    2af0:	cf 93       	push	r28
    2af2:	df 93       	push	r29
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	27 97       	sbiw	r28, 0x07	; 7
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2b04:	e0 91 13 12 	lds	r30, 0x1213	; 0x801213 <xTimerQueue>
    2b08:	f0 91 14 12 	lds	r31, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2b0c:	30 97       	sbiw	r30, 0x00	; 0
    2b0e:	81 f1       	breq	.+96     	; 0x2b70 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2b10:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2b12:	2a 83       	std	Y+2, r18	; 0x02
    2b14:	3b 83       	std	Y+3, r19	; 0x03
    2b16:	4c 83       	std	Y+4, r20	; 0x04
    2b18:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2b1a:	9f 83       	std	Y+7, r25	; 0x07
    2b1c:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2b1e:	66 30       	cpi	r22, 0x06	; 6
    2b20:	f4 f4       	brge	.+60     	; 0x2b5e <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2b22:	ee db       	rcall	.-2084   	; 0x2300 <xTaskGetSchedulerState>
    2b24:	82 30       	cpi	r24, 0x02	; 2
    2b26:	69 f4       	brne	.+26     	; 0x2b42 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2b28:	00 e0       	ldi	r16, 0x00	; 0
    2b2a:	a7 01       	movw	r20, r14
    2b2c:	96 01       	movw	r18, r12
    2b2e:	be 01       	movw	r22, r28
    2b30:	6f 5f       	subi	r22, 0xFF	; 255
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2b38:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2b3c:	0e 94 a8 05 	call	0xb50	; 0xb50 <xQueueGenericSend>
    2b40:	18 c0       	rjmp	.+48     	; 0x2b72 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2b42:	00 e0       	ldi	r16, 0x00	; 0
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	a9 01       	movw	r20, r18
    2b4a:	be 01       	movw	r22, r28
    2b4c:	6f 5f       	subi	r22, 0xFF	; 255
    2b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b50:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2b54:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2b58:	0e 94 a8 05 	call	0xb50	; 0xb50 <xQueueGenericSend>
    2b5c:	0a c0       	rjmp	.+20     	; 0x2b72 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	a8 01       	movw	r20, r16
    2b62:	be 01       	movw	r22, r28
    2b64:	6f 5f       	subi	r22, 0xFF	; 255
    2b66:	7f 4f       	sbci	r23, 0xFF	; 255
    2b68:	cf 01       	movw	r24, r30
    2b6a:	0e 94 38 06 	call	0xc70	; 0xc70 <xQueueGenericSendFromISR>
    2b6e:	01 c0       	rjmp	.+2      	; 0x2b72 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2b70:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2b72:	27 96       	adiw	r28, 0x07	; 7
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	ff 90       	pop	r15
    2b88:	ef 90       	pop	r14
    2b8a:	df 90       	pop	r13
    2b8c:	cf 90       	pop	r12
    2b8e:	bf 90       	pop	r11
    2b90:	af 90       	pop	r10
    2b92:	9f 90       	pop	r9
    2b94:	8f 90       	pop	r8
    2b96:	08 95       	ret

00002b98 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2b98:	8f 92       	push	r8
    2b9a:	9f 92       	push	r9
    2b9c:	af 92       	push	r10
    2b9e:	bf 92       	push	r11
    2ba0:	cf 92       	push	r12
    2ba2:	df 92       	push	r13
    2ba4:	ef 92       	push	r14
    2ba6:	ff 92       	push	r15
    2ba8:	0f 93       	push	r16
    2baa:	1f 93       	push	r17
    2bac:	cf 93       	push	r28
    2bae:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2bb0:	3b c0       	rjmp	.+118    	; 0x2c28 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2bb2:	07 80       	ldd	r0, Z+7	; 0x07
    2bb4:	f0 85       	ldd	r31, Z+8	; 0x08
    2bb6:	e0 2d       	mov	r30, r0
    2bb8:	80 80       	ld	r8, Z
    2bba:	91 80       	ldd	r9, Z+1	; 0x01
    2bbc:	a2 80       	ldd	r10, Z+2	; 0x02
    2bbe:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2bc0:	c0 85       	ldd	r28, Z+8	; 0x08
    2bc2:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2bc4:	8e 01       	movw	r16, r28
    2bc6:	0e 5f       	subi	r16, 0xFE	; 254
    2bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bca:	c8 01       	movw	r24, r16
    2bcc:	0e 94 24 03 	call	0x648	; 0x648 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2bd0:	ec 89       	ldd	r30, Y+20	; 0x14
    2bd2:	fd 89       	ldd	r31, Y+21	; 0x15
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2bd8:	8e 89       	ldd	r24, Y+22	; 0x16
    2bda:	82 ff       	sbrs	r24, 2
    2bdc:	25 c0       	rjmp	.+74     	; 0x2c28 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2bde:	8e 85       	ldd	r24, Y+14	; 0x0e
    2be0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2be2:	a8 89       	ldd	r26, Y+16	; 0x10
    2be4:	b9 89       	ldd	r27, Y+17	; 0x11
    2be6:	88 0d       	add	r24, r8
    2be8:	99 1d       	adc	r25, r9
    2bea:	aa 1d       	adc	r26, r10
    2bec:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2bee:	88 16       	cp	r8, r24
    2bf0:	99 06       	cpc	r9, r25
    2bf2:	aa 06       	cpc	r10, r26
    2bf4:	bb 06       	cpc	r11, r27
    2bf6:	70 f4       	brcc	.+28     	; 0x2c14 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2bf8:	8a 83       	std	Y+2, r24	; 0x02
    2bfa:	9b 83       	std	Y+3, r25	; 0x03
    2bfc:	ac 83       	std	Y+4, r26	; 0x04
    2bfe:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2c00:	db 87       	std	Y+11, r29	; 0x0b
    2c02:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2c04:	b8 01       	movw	r22, r16
    2c06:	80 91 17 12 	lds	r24, 0x1217	; 0x801217 <pxCurrentTimerList>
    2c0a:	90 91 18 12 	lds	r25, 0x1218	; 0x801218 <pxCurrentTimerList+0x1>
    2c0e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInsert>
    2c12:	0a c0       	rjmp	.+20     	; 0x2c28 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c14:	c1 2c       	mov	r12, r1
    2c16:	d1 2c       	mov	r13, r1
    2c18:	76 01       	movw	r14, r12
    2c1a:	00 e0       	ldi	r16, 0x00	; 0
    2c1c:	10 e0       	ldi	r17, 0x00	; 0
    2c1e:	a5 01       	movw	r20, r10
    2c20:	94 01       	movw	r18, r8
    2c22:	60 e0       	ldi	r22, 0x00	; 0
    2c24:	ce 01       	movw	r24, r28
    2c26:	5a df       	rcall	.-332    	; 0x2adc <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2c28:	e0 91 17 12 	lds	r30, 0x1217	; 0x801217 <pxCurrentTimerList>
    2c2c:	f0 91 18 12 	lds	r31, 0x1218	; 0x801218 <pxCurrentTimerList+0x1>
    2c30:	80 81       	ld	r24, Z
    2c32:	81 11       	cpse	r24, r1
    2c34:	be cf       	rjmp	.-132    	; 0x2bb2 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2c36:	80 91 15 12 	lds	r24, 0x1215	; 0x801215 <pxOverflowTimerList>
    2c3a:	90 91 16 12 	lds	r25, 0x1216	; 0x801216 <pxOverflowTimerList+0x1>
    2c3e:	90 93 18 12 	sts	0x1218, r25	; 0x801218 <pxCurrentTimerList+0x1>
    2c42:	80 93 17 12 	sts	0x1217, r24	; 0x801217 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2c46:	f0 93 16 12 	sts	0x1216, r31	; 0x801216 <pxOverflowTimerList+0x1>
    2c4a:	e0 93 15 12 	sts	0x1215, r30	; 0x801215 <pxOverflowTimerList>
    }
    2c4e:	df 91       	pop	r29
    2c50:	cf 91       	pop	r28
    2c52:	1f 91       	pop	r17
    2c54:	0f 91       	pop	r16
    2c56:	ff 90       	pop	r15
    2c58:	ef 90       	pop	r14
    2c5a:	df 90       	pop	r13
    2c5c:	cf 90       	pop	r12
    2c5e:	bf 90       	pop	r11
    2c60:	af 90       	pop	r10
    2c62:	9f 90       	pop	r9
    2c64:	8f 90       	pop	r8
    2c66:	08 95       	ret

00002c68 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2c68:	cf 92       	push	r12
    2c6a:	df 92       	push	r13
    2c6c:	ef 92       	push	r14
    2c6e:	ff 92       	push	r15
    2c70:	cf 93       	push	r28
    2c72:	df 93       	push	r29
    2c74:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2c76:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <xTaskGetTickCount>
    2c7a:	6b 01       	movw	r12, r22
    2c7c:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2c7e:	80 91 0d 12 	lds	r24, 0x120D	; 0x80120d <xLastTime.2436>
    2c82:	90 91 0e 12 	lds	r25, 0x120E	; 0x80120e <xLastTime.2436+0x1>
    2c86:	a0 91 0f 12 	lds	r26, 0x120F	; 0x80120f <xLastTime.2436+0x2>
    2c8a:	b0 91 10 12 	lds	r27, 0x1210	; 0x801210 <xLastTime.2436+0x3>
    2c8e:	c8 16       	cp	r12, r24
    2c90:	d9 06       	cpc	r13, r25
    2c92:	ea 06       	cpc	r14, r26
    2c94:	fb 06       	cpc	r15, r27
    2c96:	20 f4       	brcc	.+8      	; 0x2ca0 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2c98:	7f df       	rcall	.-258    	; 0x2b98 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	88 83       	st	Y, r24
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2ca0:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2ca2:	c0 92 0d 12 	sts	0x120D, r12	; 0x80120d <xLastTime.2436>
    2ca6:	d0 92 0e 12 	sts	0x120E, r13	; 0x80120e <xLastTime.2436+0x1>
    2caa:	e0 92 0f 12 	sts	0x120F, r14	; 0x80120f <xLastTime.2436+0x2>
    2cae:	f0 92 10 12 	sts	0x1210, r15	; 0x801210 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2cb2:	c7 01       	movw	r24, r14
    2cb4:	b6 01       	movw	r22, r12
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	ff 90       	pop	r15
    2cbc:	ef 90       	pop	r14
    2cbe:	df 90       	pop	r13
    2cc0:	cf 90       	pop	r12
    2cc2:	08 95       	ret

00002cc4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2cc4:	4f 92       	push	r4
    2cc6:	5f 92       	push	r5
    2cc8:	6f 92       	push	r6
    2cca:	7f 92       	push	r7
    2ccc:	8f 92       	push	r8
    2cce:	9f 92       	push	r9
    2cd0:	af 92       	push	r10
    2cd2:	bf 92       	push	r11
    2cd4:	cf 92       	push	r12
    2cd6:	df 92       	push	r13
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	4b 01       	movw	r8, r22
    2ce6:	5c 01       	movw	r10, r24
    2ce8:	29 01       	movw	r4, r18
    2cea:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2cec:	e0 91 17 12 	lds	r30, 0x1217	; 0x801217 <pxCurrentTimerList>
    2cf0:	f0 91 18 12 	lds	r31, 0x1218	; 0x801218 <pxCurrentTimerList+0x1>
    2cf4:	07 80       	ldd	r0, Z+7	; 0x07
    2cf6:	f0 85       	ldd	r31, Z+8	; 0x08
    2cf8:	e0 2d       	mov	r30, r0
    2cfa:	c0 85       	ldd	r28, Z+8	; 0x08
    2cfc:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2cfe:	ce 01       	movw	r24, r28
    2d00:	02 96       	adiw	r24, 0x02	; 2
    2d02:	0e 94 24 03 	call	0x648	; 0x648 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d06:	8e 89       	ldd	r24, Y+22	; 0x16
    2d08:	82 ff       	sbrs	r24, 2
    2d0a:	1b c0       	rjmp	.+54     	; 0x2d42 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2d0c:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d0e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d10:	68 89       	ldd	r22, Y+16	; 0x10
    2d12:	79 89       	ldd	r23, Y+17	; 0x11
    2d14:	48 0d       	add	r20, r8
    2d16:	59 1d       	adc	r21, r9
    2d18:	6a 1d       	adc	r22, r10
    2d1a:	7b 1d       	adc	r23, r11
    2d1c:	75 01       	movw	r14, r10
    2d1e:	64 01       	movw	r12, r8
    2d20:	93 01       	movw	r18, r6
    2d22:	82 01       	movw	r16, r4
    2d24:	ce 01       	movw	r24, r28
    2d26:	47 de       	rcall	.-882    	; 0x29b6 <prvInsertTimerInActiveList>
    2d28:	88 23       	and	r24, r24
    2d2a:	69 f0       	breq	.+26     	; 0x2d46 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2d2c:	c1 2c       	mov	r12, r1
    2d2e:	d1 2c       	mov	r13, r1
    2d30:	76 01       	movw	r14, r12
    2d32:	00 e0       	ldi	r16, 0x00	; 0
    2d34:	10 e0       	ldi	r17, 0x00	; 0
    2d36:	a5 01       	movw	r20, r10
    2d38:	94 01       	movw	r18, r8
    2d3a:	60 e0       	ldi	r22, 0x00	; 0
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	ce de       	rcall	.-612    	; 0x2adc <xTimerGenericCommand>
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2d42:	8e 7f       	andi	r24, 0xFE	; 254
    2d44:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d46:	ec 89       	ldd	r30, Y+20	; 0x14
    2d48:	fd 89       	ldd	r31, Y+21	; 0x15
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	19 95       	eicall
    }
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	1f 91       	pop	r17
    2d54:	0f 91       	pop	r16
    2d56:	ff 90       	pop	r15
    2d58:	ef 90       	pop	r14
    2d5a:	df 90       	pop	r13
    2d5c:	cf 90       	pop	r12
    2d5e:	bf 90       	pop	r11
    2d60:	af 90       	pop	r10
    2d62:	9f 90       	pop	r9
    2d64:	8f 90       	pop	r8
    2d66:	7f 90       	pop	r7
    2d68:	6f 90       	pop	r6
    2d6a:	5f 90       	pop	r5
    2d6c:	4f 90       	pop	r4
    2d6e:	08 95       	ret

00002d70 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2d70:	8f 92       	push	r8
    2d72:	9f 92       	push	r9
    2d74:	af 92       	push	r10
    2d76:	bf 92       	push	r11
    2d78:	cf 92       	push	r12
    2d7a:	df 92       	push	r13
    2d7c:	ef 92       	push	r14
    2d7e:	ff 92       	push	r15
    2d80:	1f 93       	push	r17
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	1f 92       	push	r1
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	6b 01       	movw	r12, r22
    2d8e:	7c 01       	movw	r14, r24
    2d90:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2d92:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d96:	ce 01       	movw	r24, r28
    2d98:	01 96       	adiw	r24, 0x01	; 1
    2d9a:	66 df       	rcall	.-308    	; 0x2c68 <prvSampleTimeNow>
    2d9c:	4b 01       	movw	r8, r22
    2d9e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	81 11       	cpse	r24, r1
    2da4:	2d c0       	rjmp	.+90     	; 0x2e00 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2da6:	11 11       	cpse	r17, r1
    2da8:	0d c0       	rjmp	.+26     	; 0x2dc4 <prvProcessTimerOrBlockTask+0x54>
    2daa:	8c 14       	cp	r8, r12
    2dac:	9d 04       	cpc	r9, r13
    2dae:	ae 04       	cpc	r10, r14
    2db0:	bf 04       	cpc	r11, r15
    2db2:	40 f0       	brcs	.+16     	; 0x2dc4 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2db4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2db8:	a5 01       	movw	r20, r10
    2dba:	94 01       	movw	r18, r8
    2dbc:	c7 01       	movw	r24, r14
    2dbe:	b6 01       	movw	r22, r12
    2dc0:	81 df       	rcall	.-254    	; 0x2cc4 <prvProcessExpiredTimer>
    2dc2:	20 c0       	rjmp	.+64     	; 0x2e04 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2dc4:	11 23       	and	r17, r17
    2dc6:	41 f0       	breq	.+16     	; 0x2dd8 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2dc8:	e0 91 15 12 	lds	r30, 0x1215	; 0x801215 <pxOverflowTimerList>
    2dcc:	f0 91 16 12 	lds	r31, 0x1216	; 0x801216 <pxOverflowTimerList+0x1>
    2dd0:	80 81       	ld	r24, Z
    2dd2:	11 e0       	ldi	r17, 0x01	; 1
    2dd4:	81 11       	cpse	r24, r1
    2dd6:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2dd8:	b7 01       	movw	r22, r14
    2dda:	a6 01       	movw	r20, r12
    2ddc:	48 19       	sub	r20, r8
    2dde:	59 09       	sbc	r21, r9
    2de0:	6a 09       	sbc	r22, r10
    2de2:	7b 09       	sbc	r23, r11
    2de4:	21 2f       	mov	r18, r17
    2de6:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2dea:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2dee:	0e 94 02 07 	call	0xe04	; 0xe04 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2df2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <xTaskResumeAll>
    2df6:	81 11       	cpse	r24, r1
    2df8:	05 c0       	rjmp	.+10     	; 0x2e04 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2dfa:	0e 94 a0 03 	call	0x740	; 0x740 <vPortYield>
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2e00:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <xTaskResumeAll>
            }
        }
    }
    2e04:	0f 90       	pop	r0
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	ff 90       	pop	r15
    2e0e:	ef 90       	pop	r14
    2e10:	df 90       	pop	r13
    2e12:	cf 90       	pop	r12
    2e14:	bf 90       	pop	r11
    2e16:	af 90       	pop	r10
    2e18:	9f 90       	pop	r9
    2e1a:	8f 90       	pop	r8
    2e1c:	08 95       	ret

00002e1e <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2e1e:	af 92       	push	r10
    2e20:	bf 92       	push	r11
    2e22:	cf 92       	push	r12
    2e24:	df 92       	push	r13
    2e26:	ef 92       	push	r14
    2e28:	ff 92       	push	r15
    2e2a:	0f 93       	push	r16
    2e2c:	1f 93       	push	r17
    2e2e:	cf 93       	push	r28
    2e30:	df 93       	push	r29
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	28 97       	sbiw	r28, 0x08	; 8
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e42:	82 c0       	rjmp	.+260    	; 0x2f48 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	88 23       	and	r24, r24
    2e48:	0c f4       	brge	.+2      	; 0x2e4c <prvProcessReceivedCommands+0x2e>
    2e4a:	7e c0       	rjmp	.+252    	; 0x2f48 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2e4c:	ae 80       	ldd	r10, Y+6	; 0x06
    2e4e:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2e50:	d5 01       	movw	r26, r10
    2e52:	1c 96       	adiw	r26, 0x0c	; 12
    2e54:	8d 91       	ld	r24, X+
    2e56:	9c 91       	ld	r25, X
    2e58:	1d 97       	sbiw	r26, 0x0d	; 13
    2e5a:	89 2b       	or	r24, r25
    2e5c:	21 f0       	breq	.+8      	; 0x2e66 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e5e:	c5 01       	movw	r24, r10
    2e60:	02 96       	adiw	r24, 0x02	; 2
    2e62:	0e 94 24 03 	call	0x648	; 0x648 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2e66:	ce 01       	movw	r24, r28
    2e68:	08 96       	adiw	r24, 0x08	; 8
    2e6a:	fe de       	rcall	.-516    	; 0x2c68 <prvSampleTimeNow>
    2e6c:	8b 01       	movw	r16, r22
    2e6e:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2e70:	e9 81       	ldd	r30, Y+1	; 0x01
    2e72:	0e 2e       	mov	r0, r30
    2e74:	00 0c       	add	r0, r0
    2e76:	ff 0b       	sbc	r31, r31
    2e78:	ea 30       	cpi	r30, 0x0A	; 10
    2e7a:	f1 05       	cpc	r31, r1
    2e7c:	08 f0       	brcs	.+2      	; 0x2e80 <prvProcessReceivedCommands+0x62>
    2e7e:	64 c0       	rjmp	.+200    	; 0x2f48 <prvProcessReceivedCommands+0x12a>
    2e80:	88 27       	eor	r24, r24
    2e82:	ee 58       	subi	r30, 0x8E	; 142
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	8f 4f       	sbci	r24, 0xFF	; 255
    2e88:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e8c:	f5 01       	movw	r30, r10
    2e8e:	86 89       	ldd	r24, Z+22	; 0x16
    2e90:	81 60       	ori	r24, 0x01	; 1
    2e92:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2e94:	ca 80       	ldd	r12, Y+2	; 0x02
    2e96:	db 80       	ldd	r13, Y+3	; 0x03
    2e98:	ec 80       	ldd	r14, Y+4	; 0x04
    2e9a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e9c:	46 85       	ldd	r20, Z+14	; 0x0e
    2e9e:	57 85       	ldd	r21, Z+15	; 0x0f
    2ea0:	60 89       	ldd	r22, Z+16	; 0x10
    2ea2:	71 89       	ldd	r23, Z+17	; 0x11
    2ea4:	4c 0d       	add	r20, r12
    2ea6:	5d 1d       	adc	r21, r13
    2ea8:	6e 1d       	adc	r22, r14
    2eaa:	7f 1d       	adc	r23, r15
    2eac:	c5 01       	movw	r24, r10
    2eae:	83 dd       	rcall	.-1274   	; 0x29b6 <prvInsertTimerInActiveList>
    2eb0:	88 23       	and	r24, r24
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <prvProcessReceivedCommands+0x98>
    2eb4:	49 c0       	rjmp	.+146    	; 0x2f48 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2eb6:	d5 01       	movw	r26, r10
    2eb8:	54 96       	adiw	r26, 0x14	; 20
    2eba:	ed 91       	ld	r30, X+
    2ebc:	fc 91       	ld	r31, X
    2ebe:	55 97       	sbiw	r26, 0x15	; 21
    2ec0:	c5 01       	movw	r24, r10
    2ec2:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2ec4:	f5 01       	movw	r30, r10
    2ec6:	86 89       	ldd	r24, Z+22	; 0x16
    2ec8:	82 ff       	sbrs	r24, 2
    2eca:	3e c0       	rjmp	.+124    	; 0x2f48 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2ecc:	4a 81       	ldd	r20, Y+2	; 0x02
    2ece:	5b 81       	ldd	r21, Y+3	; 0x03
    2ed0:	6c 81       	ldd	r22, Y+4	; 0x04
    2ed2:	7d 81       	ldd	r23, Y+5	; 0x05
    2ed4:	86 85       	ldd	r24, Z+14	; 0x0e
    2ed6:	97 85       	ldd	r25, Z+15	; 0x0f
    2ed8:	a0 89       	ldd	r26, Z+16	; 0x10
    2eda:	b1 89       	ldd	r27, Z+17	; 0x11
    2edc:	9a 01       	movw	r18, r20
    2ede:	ab 01       	movw	r20, r22
    2ee0:	28 0f       	add	r18, r24
    2ee2:	39 1f       	adc	r19, r25
    2ee4:	4a 1f       	adc	r20, r26
    2ee6:	5b 1f       	adc	r21, r27
    2ee8:	c1 2c       	mov	r12, r1
    2eea:	d1 2c       	mov	r13, r1
    2eec:	76 01       	movw	r14, r12
    2eee:	00 e0       	ldi	r16, 0x00	; 0
    2ef0:	10 e0       	ldi	r17, 0x00	; 0
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	c5 01       	movw	r24, r10
    2ef6:	f2 dd       	rcall	.-1052   	; 0x2adc <xTimerGenericCommand>
    2ef8:	27 c0       	rjmp	.+78     	; 0x2f48 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2efa:	d5 01       	movw	r26, r10
    2efc:	56 96       	adiw	r26, 0x16	; 22
    2efe:	8c 91       	ld	r24, X
    2f00:	56 97       	sbiw	r26, 0x16	; 22
    2f02:	8e 7f       	andi	r24, 0xFE	; 254
    2f04:	56 96       	adiw	r26, 0x16	; 22
    2f06:	8c 93       	st	X, r24
                        break;
    2f08:	1f c0       	rjmp	.+62     	; 0x2f48 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2f0a:	f5 01       	movw	r30, r10
    2f0c:	86 89       	ldd	r24, Z+22	; 0x16
    2f0e:	81 60       	ori	r24, 0x01	; 1
    2f10:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2f12:	4a 81       	ldd	r20, Y+2	; 0x02
    2f14:	5b 81       	ldd	r21, Y+3	; 0x03
    2f16:	6c 81       	ldd	r22, Y+4	; 0x04
    2f18:	7d 81       	ldd	r23, Y+5	; 0x05
    2f1a:	46 87       	std	Z+14, r20	; 0x0e
    2f1c:	57 87       	std	Z+15, r21	; 0x0f
    2f1e:	60 8b       	std	Z+16, r22	; 0x10
    2f20:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2f22:	40 0f       	add	r20, r16
    2f24:	51 1f       	adc	r21, r17
    2f26:	62 1f       	adc	r22, r18
    2f28:	73 1f       	adc	r23, r19
    2f2a:	68 01       	movw	r12, r16
    2f2c:	79 01       	movw	r14, r18
    2f2e:	c5 01       	movw	r24, r10
    2f30:	42 dd       	rcall	.-1404   	; 0x29b6 <prvInsertTimerInActiveList>
                        break;
    2f32:	0a c0       	rjmp	.+20     	; 0x2f48 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2f34:	f5 01       	movw	r30, r10
    2f36:	86 89       	ldd	r24, Z+22	; 0x16
    2f38:	81 fd       	sbrc	r24, 1
    2f3a:	04 c0       	rjmp	.+8      	; 0x2f44 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2f3c:	c5 01       	movw	r24, r10
    2f3e:	0e 94 95 02 	call	0x52a	; 0x52a <vPortFree>
    2f42:	02 c0       	rjmp	.+4      	; 0x2f48 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f44:	8e 7f       	andi	r24, 0xFE	; 254
    2f46:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	a9 01       	movw	r20, r18
    2f4e:	be 01       	movw	r22, r28
    2f50:	6f 5f       	subi	r22, 0xFF	; 255
    2f52:	7f 4f       	sbci	r23, 0xFF	; 255
    2f54:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2f58:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2f5c:	0e 94 73 06 	call	0xce6	; 0xce6 <xQueueReceive>
    2f60:	81 11       	cpse	r24, r1
    2f62:	70 cf       	rjmp	.-288    	; 0x2e44 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2f64:	28 96       	adiw	r28, 0x08	; 8
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	1f 91       	pop	r17
    2f76:	0f 91       	pop	r16
    2f78:	ff 90       	pop	r15
    2f7a:	ef 90       	pop	r14
    2f7c:	df 90       	pop	r13
    2f7e:	cf 90       	pop	r12
    2f80:	bf 90       	pop	r11
    2f82:	af 90       	pop	r10
    2f84:	08 95       	ret

00002f86 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2f86:	08 95       	ret

00002f88 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2f88:	84 b1       	in	r24, 0x04	; 4
    2f8a:	80 68       	ori	r24, 0x80	; 128
    2f8c:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2f8e:	85 b1       	in	r24, 0x05	; 5
    2f90:	80 68       	ori	r24, 0x80	; 128
    2f92:	85 b9       	out	0x05, r24	; 5
    2f94:	08 95       	ret

00002f96 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2f96:	83 b1       	in	r24, 0x03	; 3
    2f98:	80 68       	ori	r24, 0x80	; 128
    2f9a:	83 b9       	out	0x03, r24	; 3
    2f9c:	08 95       	ret

00002f9e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2f9e:	f4 df       	rcall	.-24     	; 0x2f88 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2fa0:	2f ef       	ldi	r18, 0xFF	; 255
    2fa2:	80 e7       	ldi	r24, 0x70	; 112
    2fa4:	92 e0       	ldi	r25, 0x02	; 2
    2fa6:	21 50       	subi	r18, 0x01	; 1
    2fa8:	80 40       	sbci	r24, 0x00	; 0
    2faa:	90 40       	sbci	r25, 0x00	; 0
    2fac:	e1 f7       	brne	.-8      	; 0x2fa6 <vApplicationMallocFailedHook+0x8>
    2fae:	00 c0       	rjmp	.+0      	; 0x2fb0 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2fb0:	00 00       	nop
    2fb2:	f1 df       	rcall	.-30     	; 0x2f96 <prvBlinkMainLed>
    2fb4:	f5 cf       	rjmp	.-22     	; 0x2fa0 <vApplicationMallocFailedHook+0x2>

00002fb6 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2fb6:	e8 df       	rcall	.-48     	; 0x2f88 <prvSetMainLedOn>
    2fb8:	2f ef       	ldi	r18, 0xFF	; 255
    2fba:	87 ea       	ldi	r24, 0xA7	; 167
    2fbc:	91 e6       	ldi	r25, 0x61	; 97
    2fbe:	21 50       	subi	r18, 0x01	; 1
    2fc0:	80 40       	sbci	r24, 0x00	; 0
    2fc2:	90 40       	sbci	r25, 0x00	; 0
    2fc4:	e1 f7       	brne	.-8      	; 0x2fbe <vApplicationStackOverflowHook+0x8>
    2fc6:	00 c0       	rjmp	.+0      	; 0x2fc8 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2fc8:	00 00       	nop
    2fca:	e5 df       	rcall	.-54     	; 0x2f96 <prvBlinkMainLed>
    2fcc:	f5 cf       	rjmp	.-22     	; 0x2fb8 <vApplicationStackOverflowHook+0x2>

00002fce <enqueueCO2Measure>:
void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(5, sizeof(uint16_t));
}


void enqueueCO2Measure(uint16_t ppm){
    2fce:	0f 93       	push	r16
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
    2fd4:	1f 92       	push	r1
    2fd6:	1f 92       	push	r1
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	9a 83       	std	Y+2, r25	; 0x02
    2fde:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    2fe0:	00 e0       	ldi	r16, 0x00	; 0
    2fe2:	2f ef       	ldi	r18, 0xFF	; 255
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	a9 01       	movw	r20, r18
    2fe8:	be 01       	movw	r22, r28
    2fea:	6f 5f       	subi	r22, 0xFF	; 255
    2fec:	7f 4f       	sbci	r23, 0xFF	; 255
    2fee:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <xQueueCO2>
    2ff2:	90 91 b3 13 	lds	r25, 0x13B3	; 0x8013b3 <xQueueCO2+0x1>
    2ff6:	0e 94 a8 05 	call	0xb50	; 0xb50 <xQueueGenericSend>
}
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	0f 91       	pop	r16
    3004:	08 95       	ret

00003006 <initializeCO2Queue>:
#include "../measuredrivers/header/CO2Handler.h"

QueueHandle_t xQueueCO2;

void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(5, sizeof(uint16_t));
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	62 e0       	ldi	r22, 0x02	; 2
    300a:	85 e0       	ldi	r24, 0x05	; 5
    300c:	0e 94 85 05 	call	0xb0a	; 0xb0a <xQueueGenericCreate>
    3010:	90 93 b3 13 	sts	0x13B3, r25	; 0x8013b3 <xQueueCO2+0x1>
    3014:	80 93 b2 13 	sts	0x13B2, r24	; 0x8013b2 <xQueueCO2>
    3018:	08 95       	ret

0000301a <co2Measure>:
}

void co2Measure() {
	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
    301a:	0e 94 c3 20 	call	0x4186	; 0x4186 <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
    301e:	81 11       	cpse	r24, r1
    3020:	05 c0       	rjmp	.+10     	; 0x302c <co2Measure+0x12>
	{
		mh_z19_injectCallBack(enqueueCO2Measure);
    3022:	87 ee       	ldi	r24, 0xE7	; 231
    3024:	97 e1       	ldi	r25, 0x17	; 23
    3026:	0c 94 be 20 	jmp	0x417c	; 0x417c <mh_z19_injectCallBack>
    302a:	08 95       	ret
	}
	else
	{
		puts("det gik galt");
    302c:	87 ea       	ldi	r24, 0xA7	; 167
    302e:	92 e0       	ldi	r25, 0x02	; 2
    3030:	0c 94 b9 2b 	jmp	0x5772	; 0x5772 <puts>
    3034:	08 95       	ret

00003036 <dequeueCO2Measure>:
	}
}


uint16_t dequeueCO2Measure(){
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	1f 92       	push	r1
    303c:	1f 92       	push	r1
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	
	xQueueReceive(xQueueCO2, &ppm, 1500);
    3042:	2c ed       	ldi	r18, 0xDC	; 220
    3044:	35 e0       	ldi	r19, 0x05	; 5
    3046:	40 e0       	ldi	r20, 0x00	; 0
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	be 01       	movw	r22, r28
    304c:	6f 5f       	subi	r22, 0xFF	; 255
    304e:	7f 4f       	sbci	r23, 0xFF	; 255
    3050:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <xQueueCO2>
    3054:	90 91 b3 13 	lds	r25, 0x13B3	; 0x8013b3 <xQueueCO2+0x1>
    3058:	0e 94 73 06 	call	0xce6	; 0xce6 <xQueueReceive>
	return ppm;
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	9a 81       	ldd	r25, Y+2	; 0x02
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	08 95       	ret

0000306a <initializeTempHumQueues>:
QueueHandle_t xQueueHum;


void initializeTempHumQueues()
{
	xQueueTemp = xQueueCreate(5, sizeof(int16_t));
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	62 e0       	ldi	r22, 0x02	; 2
    306e:	85 e0       	ldi	r24, 0x05	; 5
    3070:	0e 94 85 05 	call	0xb0a	; 0xb0a <xQueueGenericCreate>
    3074:	90 93 b7 13 	sts	0x13B7, r25	; 0x8013b7 <xQueueTemp+0x1>
    3078:	80 93 b6 13 	sts	0x13B6, r24	; 0x8013b6 <xQueueTemp>
	xQueueHum = xQueueCreate(5, sizeof(uint16_t));
    307c:	40 e0       	ldi	r20, 0x00	; 0
    307e:	62 e0       	ldi	r22, 0x02	; 2
    3080:	85 e0       	ldi	r24, 0x05	; 5
    3082:	0e 94 85 05 	call	0xb0a	; 0xb0a <xQueueGenericCreate>
    3086:	90 93 b5 13 	sts	0x13B5, r25	; 0x8013b5 <xQueueHum+0x1>
    308a:	80 93 b4 13 	sts	0x13B4, r24	; 0x8013b4 <xQueueHum>
    308e:	08 95       	ret

00003090 <enqueueTemperature>:
}

void enqueueTemperature(int16_t temp){
    3090:	0f 93       	push	r16
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	1f 92       	push	r1
    3098:	1f 92       	push	r1
    309a:	cd b7       	in	r28, 0x3d	; 61
    309c:	de b7       	in	r29, 0x3e	; 62
    309e:	9a 83       	std	Y+2, r25	; 0x02
    30a0:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueTemp, (void*)&temp, portMAX_DELAY);
    30a2:	00 e0       	ldi	r16, 0x00	; 0
    30a4:	2f ef       	ldi	r18, 0xFF	; 255
    30a6:	3f ef       	ldi	r19, 0xFF	; 255
    30a8:	a9 01       	movw	r20, r18
    30aa:	be 01       	movw	r22, r28
    30ac:	6f 5f       	subi	r22, 0xFF	; 255
    30ae:	7f 4f       	sbci	r23, 0xFF	; 255
    30b0:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <xQueueTemp>
    30b4:	90 91 b7 13 	lds	r25, 0x13B7	; 0x8013b7 <xQueueTemp+0x1>
    30b8:	0e 94 a8 05 	call	0xb50	; 0xb50 <xQueueGenericSend>
}
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	df 91       	pop	r29
    30c2:	cf 91       	pop	r28
    30c4:	0f 91       	pop	r16
    30c6:	08 95       	ret

000030c8 <enqueueHumidity>:

void enqueueHumidity(uint16_t hum){
    30c8:	0f 93       	push	r16
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
    30ce:	1f 92       	push	r1
    30d0:	1f 92       	push	r1
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	9a 83       	std	Y+2, r25	; 0x02
    30d8:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueHum, (void*)&hum, portMAX_DELAY);	
    30da:	00 e0       	ldi	r16, 0x00	; 0
    30dc:	2f ef       	ldi	r18, 0xFF	; 255
    30de:	3f ef       	ldi	r19, 0xFF	; 255
    30e0:	a9 01       	movw	r20, r18
    30e2:	be 01       	movw	r22, r28
    30e4:	6f 5f       	subi	r22, 0xFF	; 255
    30e6:	7f 4f       	sbci	r23, 0xFF	; 255
    30e8:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <xQueueHum>
    30ec:	90 91 b5 13 	lds	r25, 0x13B5	; 0x8013b5 <xQueueHum+0x1>
    30f0:	0e 94 a8 05 	call	0xb50	; 0xb50 <xQueueGenericSend>
}
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	0f 91       	pop	r16
    30fe:	08 95       	ret

00003100 <tempHumMeasure>:


void tempHumMeasure()
{
    3100:	8f 92       	push	r8
    3102:	9f 92       	push	r9
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	00 d0       	rcall	.+0      	; 0x3116 <tempHumMeasure+0x16>
    3116:	1f 92       	push	r1
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5/portTICK_PERIOD_MS; 
	const TickType_t xFrequency2 = 50/portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    311c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <xTaskGetTickCount>
    3120:	69 83       	std	Y+1, r22	; 0x01
    3122:	7a 83       	std	Y+2, r23	; 0x02
    3124:	8b 83       	std	Y+3, r24	; 0x03
    3126:	9c 83       	std	Y+4, r25	; 0x04

	if(HIH8120_OK != hih8120_wakeup())
    3128:	e8 d2       	rcall	.+1488   	; 0x36fa <hih8120_wakeup>
    312a:	88 23       	and	r24, r24
    312c:	41 f0       	breq	.+16     	; 0x313e <tempHumMeasure+0x3e>
	{
		printf("wakeup gik galt");
    312e:	84 eb       	ldi	r24, 0xB4	; 180
    3130:	92 e0       	ldi	r25, 0x02	; 2
    3132:	9f 93       	push	r25
    3134:	8f 93       	push	r24
    3136:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency2 );
    313e:	43 e0       	ldi	r20, 0x03	; 3
    3140:	50 e0       	ldi	r21, 0x00	; 0
    3142:	60 e0       	ldi	r22, 0x00	; 0
    3144:	70 e0       	ldi	r23, 0x00	; 0
    3146:	ce 01       	movw	r24, r28
    3148:	01 96       	adiw	r24, 0x01	; 1
    314a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskDelayUntil>
	if(HIH8120_OK != hih8120_measure())
    314e:	ea d2       	rcall	.+1492   	; 0x3724 <hih8120_measure>
    3150:	88 23       	and	r24, r24
    3152:	41 f0       	breq	.+16     	; 0x3164 <tempHumMeasure+0x64>
	{
		printf("measure gik galt");
    3154:	84 ec       	ldi	r24, 0xC4	; 196
    3156:	92 e0       	ldi	r25, 0x02	; 2
    3158:	9f 93       	push	r25
    315a:	8f 93       	push	r24
    315c:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	ba 01       	movw	r22, r20
    316a:	ce 01       	movw	r24, r28
    316c:	01 96       	adiw	r24, 0x01	; 1
    316e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskDelayUntil>
	
	uint16_t humidity = hih8120_getHumidity();
    3172:	e9 d2       	rcall	.+1490   	; 0x3746 <hih8120_getHumidity>
    3174:	28 d2       	rcall	.+1104   	; 0x35c6 <__fixunssfsi>
    3176:	4b 01       	movw	r8, r22
	int16_t temp = hih8120_getTemperature();
    3178:	5c 01       	movw	r10, r24
    317a:	fa d2       	rcall	.+1524   	; 0x3770 <hih8120_getTemperature>
    317c:	1f d2       	rcall	.+1086   	; 0x35bc <__fixsfsi>
    317e:	6b 01       	movw	r12, r22
	
	enqueueHumidity(humidity);
    3180:	7c 01       	movw	r14, r24
    3182:	c4 01       	movw	r24, r8
    3184:	a1 df       	rcall	.-190    	; 0x30c8 <enqueueHumidity>
	enqueueTemperature(temp);
    3186:	c6 01       	movw	r24, r12
    3188:	83 df       	rcall	.-250    	; 0x3090 <enqueueTemperature>
    318a:	0f 90       	pop	r0
}
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	ff 90       	pop	r15
    3198:	ef 90       	pop	r14
    319a:	df 90       	pop	r13
    319c:	cf 90       	pop	r12
    319e:	bf 90       	pop	r11
    31a0:	af 90       	pop	r10
    31a2:	9f 90       	pop	r9
    31a4:	8f 90       	pop	r8
    31a6:	08 95       	ret

000031a8 <dequeueTempMeasure>:
    31a8:	cf 93       	push	r28


int16_t dequeueTempMeasure(){
    31aa:	df 93       	push	r29
    31ac:	1f 92       	push	r1
    31ae:	1f 92       	push	r1
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	
	xQueueReceive(xQueueTemp, &temp, 1500);
    31b4:	2c ed       	ldi	r18, 0xDC	; 220
    31b6:	35 e0       	ldi	r19, 0x05	; 5
    31b8:	40 e0       	ldi	r20, 0x00	; 0
    31ba:	50 e0       	ldi	r21, 0x00	; 0
    31bc:	be 01       	movw	r22, r28
    31be:	6f 5f       	subi	r22, 0xFF	; 255
    31c0:	7f 4f       	sbci	r23, 0xFF	; 255
    31c2:	80 91 b6 13 	lds	r24, 0x13B6	; 0x8013b6 <xQueueTemp>
    31c6:	90 91 b7 13 	lds	r25, 0x13B7	; 0x8013b7 <xQueueTemp+0x1>
    31ca:	0e 94 73 06 	call	0xce6	; 0xce6 <xQueueReceive>
	return temp;
}
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	9a 81       	ldd	r25, Y+2	; 0x02
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	08 95       	ret

000031dc <dequeueHumidityMeasure>:

uint16_t dequeueHumidityMeasure(){
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	1f 92       	push	r1
    31e2:	1f 92       	push	r1
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
	uint16_t hum;
	
	xQueueReceive(xQueueHum, &hum, 1500);
    31e8:	2c ed       	ldi	r18, 0xDC	; 220
    31ea:	35 e0       	ldi	r19, 0x05	; 5
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	50 e0       	ldi	r21, 0x00	; 0
    31f0:	be 01       	movw	r22, r28
    31f2:	6f 5f       	subi	r22, 0xFF	; 255
    31f4:	7f 4f       	sbci	r23, 0xFF	; 255
    31f6:	80 91 b4 13 	lds	r24, 0x13B4	; 0x8013b4 <xQueueHum>
    31fa:	90 91 b5 13 	lds	r25, 0x13B5	; 0x8013b5 <xQueueHum+0x1>
    31fe:	0e 94 73 06 	call	0xce6	; 0xce6 <xQueueReceive>
	return hum;
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	9a 81       	ldd	r25, Y+2	; 0x02
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	08 95       	ret

00003210 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	64 97       	sbiw	r28, 0x14	; 20
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61

	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    322e:	28 d4       	rcall	.+2128   	; 0x3a80 <lora_driver_rn2483FactoryReset>
    3230:	a4 d6       	rcall	.+3400   	; 0x3f7a <lora_driver_mapReturnCodeToText>
    3232:	9f 93       	push	r25
    3234:	8f 93       	push	r24
    3236:	85 ed       	ldi	r24, 0xD5	; 213
    3238:	92 e0       	ldi	r25, 0x02	; 2
    323a:	9f 93       	push	r25
    323c:	8f 93       	push	r24
    323e:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3242:	9c d5       	rcall	.+2872   	; 0x3d7c <lora_driver_configureToEu868>
    3244:	9a d6       	rcall	.+3380   	; 0x3f7a <lora_driver_mapReturnCodeToText>
    3246:	9f 93       	push	r25
    3248:	8f 93       	push	r24
    324a:	88 ee       	ldi	r24, 0xE8	; 232
    324c:	92 e0       	ldi	r25, 0x02	; 2
    324e:	9f 93       	push	r25
    3250:	8f 93       	push	r24
    3252:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>
    3256:	8e 01       	movw	r16, r28
    3258:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    325a:	1f 4f       	sbci	r17, 0xFF	; 255
    325c:	c8 01       	movw	r24, r16
    325e:	22 d4       	rcall	.+2116   	; 0x3aa4 <lora_driver_getRn2483Hweui>
    3260:	8c d6       	rcall	.+3352   	; 0x3f7a <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3262:	1f 93       	push	r17
    3264:	0f 93       	push	r16
    3266:	9f 93       	push	r25
    3268:	8f 93       	push	r24
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	93 e0       	ldi	r25, 0x03	; 3
    326e:	9f 93       	push	r25
    3270:	8f 93       	push	r24
    3272:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3276:	c8 01       	movw	r24, r16
    3278:	31 d4       	rcall	.+2146   	; 0x3adc <lora_driver_setDeviceIdentifier>
    327a:	7f d6       	rcall	.+3326   	; 0x3f7a <lora_driver_mapReturnCodeToText>
    327c:	9f 93       	push	r25
    327e:	8f 93       	push	r24
    3280:	1f 93       	push	r17
    3282:	0f 93       	push	r16
    3284:	85 e1       	ldi	r24, 0x15	; 21
    3286:	93 e0       	ldi	r25, 0x03	; 3
    3288:	9f 93       	push	r25
    328a:	8f 93       	push	r24
    328c:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3290:	a8 01       	movw	r20, r16
    3292:	6a e2       	ldi	r22, 0x2A	; 42
    3294:	73 e0       	ldi	r23, 0x03	; 3
    3296:	8b e4       	ldi	r24, 0x4B	; 75
    3298:	93 e0       	ldi	r25, 0x03	; 3
    329a:	4e d6       	rcall	.+3228   	; 0x3f38 <lora_driver_setOtaaIdentity>
    329c:	6e d6       	rcall	.+3292   	; 0x3f7a <lora_driver_mapReturnCodeToText>
    329e:	9f 93       	push	r25
    32a0:	8f 93       	push	r24
    32a2:	1f 93       	push	r17
    32a4:	0f 93       	push	r16
    32a6:	8a e2       	ldi	r24, 0x2A	; 42
    32a8:	93 e0       	ldi	r25, 0x03	; 3
    32aa:	9f 93       	push	r25
    32ac:	8f 93       	push	r24
    32ae:	8b e4       	ldi	r24, 0x4B	; 75
    32b0:	93 e0       	ldi	r25, 0x03	; 3
    32b2:	9f 93       	push	r25
    32b4:	8f 93       	push	r24
    32b6:	8c e5       	ldi	r24, 0x5C	; 92
    32b8:	93 e0       	ldi	r25, 0x03	; 3
    32ba:	9f 93       	push	r25
    32bc:	8f 93       	push	r24
    32be:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    32c2:	3f d4       	rcall	.+2174   	; 0x3b42 <lora_driver_saveMac>
    32c4:	5a d6       	rcall	.+3252   	; 0x3f7a <lora_driver_mapReturnCodeToText>
    32c6:	9f 93       	push	r25
    32c8:	8f 93       	push	r24
    32ca:	82 e9       	ldi	r24, 0x92	; 146
    32cc:	93 e0       	ldi	r25, 0x03	; 3
    32ce:	9f 93       	push	r25
    32d0:	8f 93       	push	r24
    32d2:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	de bf       	out	0x3e, r29	; 62
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	cd bf       	out	0x3d, r28	; 61
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	29 d5       	rcall	.+2642   	; 0x3d36 <lora_driver_setAdaptiveDataRate>
    32e4:	4a d6       	rcall	.+3220   	; 0x3f7a <lora_driver_mapReturnCodeToText>
    32e6:	9f 93       	push	r25
    32e8:	8f 93       	push	r24
    32ea:	81 ea       	ldi	r24, 0xA1	; 161
    32ec:	93 e0       	ldi	r25, 0x03	; 3
    32ee:	9f 93       	push	r25
    32f0:	8f 93       	push	r24
    32f2:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    32f6:	84 ef       	ldi	r24, 0xF4	; 244
    32f8:	91 e0       	ldi	r25, 0x01	; 1
    32fa:	28 d5       	rcall	.+2640   	; 0x3d4c <lora_driver_setReceiveDelay>
    32fc:	3e d6       	rcall	.+3196   	; 0x3f7a <lora_driver_mapReturnCodeToText>
    32fe:	9f 93       	push	r25
    3300:	8f 93       	push	r24
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	8f 93       	push	r24
    3306:	84 ef       	ldi	r24, 0xF4	; 244
    3308:	8f 93       	push	r24
    330a:	82 ec       	ldi	r24, 0xC2	; 194
    330c:	93 e0       	ldi	r25, 0x03	; 3
    330e:	9f 93       	push	r25
    3310:	8f 93       	push	r24
    3312:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3320:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	14 d4       	rcall	.+2088   	; 0x3b4e <lora_driver_join>
    3326:	08 2f       	mov	r16, r24
    3328:	28 d6       	rcall	.+3152   	; 0x3f7a <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    332a:	9f 93       	push	r25
    332c:	8f 93       	push	r24
    332e:	1f 92       	push	r1
    3330:	1f 93       	push	r17
    3332:	82 ee       	ldi	r24, 0xE2	; 226
    3334:	93 e0       	ldi	r25, 0x03	; 3
    3336:	9f 93       	push	r25
    3338:	8f 93       	push	r24
    333a:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	08 30       	cpi	r16, 0x08	; 8
    334c:	59 f0       	breq	.+22     	; 0x3364 <_lora_setup+0x154>
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3354:	66 e3       	ldi	r22, 0x36	; 54
    3356:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskDelay>
    3360:	11 50       	subi	r17, 0x01	; 1
    3362:	f9 f6       	brne	.-66     	; 0x3322 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3364:	08 30       	cpi	r16, 0x08	; 8
    3366:	41 f4       	brne	.+16     	; 0x3378 <_lora_setup+0x168>

	if (rc == LORA_ACCEPTED)
    3368:	82 e0       	ldi	r24, 0x02	; 2
    336a:	94 e0       	ldi	r25, 0x04	; 4
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		printf("\t We have been accepted \n");
    336c:	0e 94 b9 2b 	call	0x5772	; 0x5772 <puts>
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <status_leds_ledOn>
		status_leds_ledOn(led_ST2); // OPTIONAL
    3376:	09 c0       	rjmp	.+18     	; 0x338a <_lora_setup+0x17a>
    3378:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    337a:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	0e 94 22 26 	call	0x4c44	; 0x4c44 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3384:	0e 94 a0 03 	call	0x740	; 0x740 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3388:	fd cf       	rjmp	.-6      	; 0x3384 <_lora_setup+0x174>
    338a:	64 96       	adiw	r28, 0x14	; 20
    338c:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	df 91       	pop	r29
    3398:	cf 91       	pop	r28
    339a:	1f 91       	pop	r17
    339c:	0f 91       	pop	r16
    339e:	08 95       	ret

000033a0 <lora_handler_task>:
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <lora_handler_task+0x6>
    33a6:	1f 92       	push	r1
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	5a d3       	rcall	.+1716   	; 0x3a64 <lora_driver_resetRn2483>
	vTaskDelay(2);
    33b0:	62 e0       	ldi	r22, 0x02	; 2
    33b2:	70 e0       	ldi	r23, 0x00	; 0
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskDelay>
	lora_driver_resetRn2483(0);
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	52 d3       	rcall	.+1700   	; 0x3a64 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    33c0:	66 e9       	ldi	r22, 0x96	; 150
    33c2:	70 e0       	ldi	r23, 0x00	; 0
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    33cc:	04 d3       	rcall	.+1544   	; 0x39d6 <lora_driver_flushBuffers>

	_lora_setup();
    33ce:	20 df       	rcall	.-448    	; 0x3210 <_lora_setup>
    33d0:	ef e2       	ldi	r30, 0x2F	; 47

	// DEFINING SIZE OF PAYLOAD
	_uplink_payload.len = 8;
    33d2:	f2 e1       	ldi	r31, 0x12	; 18
    33d4:	88 e0       	ldi	r24, 0x08	; 8
    33d6:	81 83       	std	Z+1, r24	; 0x01
    33d8:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    33da:	80 83       	st	Z, r24
    33dc:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(150000UL); // UNDER TESTING 30000 (30 sec) Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    33e0:	69 83       	std	Y+1, r22	; 0x01
    33e2:	7a 83       	std	Y+2, r23	; 0x02
    33e4:	8b 83       	std	Y+3, r24	; 0x03
    33e6:	9c 83       	std	Y+4, r25	; 0x04
    33e8:	8b e1       	ldi	r24, 0x1B	; 27

	for(;;)
	{
		uint16_t growbroId = 111;
		
		printf("\t going into delay \n");
    33ea:	94 e0       	ldi	r25, 0x04	; 4
    33ec:	0e 94 b9 2b 	call	0x5772	; 0x5772 <puts>
    33f0:	44 e5       	ldi	r20, 0x54	; 84
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    33f2:	54 e2       	ldi	r21, 0x24	; 36
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	70 e0       	ldi	r23, 0x00	; 0
    33f8:	ce 01       	movw	r24, r28
    33fa:	01 96       	adiw	r24, 0x01	; 1
    33fc:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskDelayUntil>
    3400:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <dequeueSharedData>
		
		// Creating struct and dequeueing data
		SharedData_t sharedData;
		sharedData = dequeueSharedData();
    3404:	8c 01       	movw	r16, r24
    3406:	dc 01       	movw	r26, r24
		
		printf("DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
    3408:	13 96       	adiw	r26, 0x03	; 3
    340a:	8c 91       	ld	r24, X
    340c:	13 97       	sbiw	r26, 0x03	; 3
    340e:	8f 93       	push	r24
    3410:	12 96       	adiw	r26, 0x02	; 2
    3412:	8c 91       	ld	r24, X
    3414:	12 97       	sbiw	r26, 0x02	; 2
    3416:	8f 93       	push	r24
    3418:	11 96       	adiw	r26, 0x01	; 1
    341a:	8c 91       	ld	r24, X
    341c:	11 97       	sbiw	r26, 0x01	; 1
    341e:	8f 93       	push	r24
    3420:	8c 91       	ld	r24, X
    3422:	8f 93       	push	r24
    3424:	15 96       	adiw	r26, 0x05	; 5
    3426:	8c 91       	ld	r24, X
    3428:	15 97       	sbiw	r26, 0x05	; 5
    342a:	8f 93       	push	r24
    342c:	14 96       	adiw	r26, 0x04	; 4
    342e:	8c 91       	ld	r24, X
    3430:	8f 93       	push	r24
    3432:	8f e2       	ldi	r24, 0x2F	; 47
    3434:	94 e0       	ldi	r25, 0x04	; 4
    3436:	9f 93       	push	r25
    3438:	8f 93       	push	r24
    343a:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>
    343e:	ef e2       	ldi	r30, 0x2F	; 47
		
		// CREATING OUR OWN PAYLOAD
		_uplink_payload.bytes[0] = growbroId >> 8;
    3440:	f2 e1       	ldi	r31, 0x12	; 18
    3442:	12 82       	std	Z+2, r1	; 0x02
    3444:	8f e6       	ldi	r24, 0x6F	; 111
		_uplink_payload.bytes[1] = growbroId & 0xFF;
    3446:	83 83       	std	Z+3, r24	; 0x03
    3448:	d8 01       	movw	r26, r16
		_uplink_payload.bytes[2] = sharedData->co2 >> 8;
    344a:	11 96       	adiw	r26, 0x01	; 1
    344c:	8c 91       	ld	r24, X
    344e:	11 97       	sbiw	r26, 0x01	; 1
    3450:	84 83       	std	Z+4, r24	; 0x04
    3452:	8c 91       	ld	r24, X
		_uplink_payload.bytes[3] = sharedData->co2 & 0xFF;
    3454:	85 83       	std	Z+5, r24	; 0x05
    3456:	15 96       	adiw	r26, 0x05	; 5
		_uplink_payload.bytes[4] = sharedData->humidity >> 8;
    3458:	8c 91       	ld	r24, X
    345a:	15 97       	sbiw	r26, 0x05	; 5
    345c:	86 83       	std	Z+6, r24	; 0x06
    345e:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[5] = sharedData->humidity & 0xFF;
    3460:	8c 91       	ld	r24, X
    3462:	14 97       	sbiw	r26, 0x04	; 4
    3464:	87 83       	std	Z+7, r24	; 0x07
    3466:	13 96       	adiw	r26, 0x03	; 3
		_uplink_payload.bytes[6] = sharedData->temperature >> 8;
    3468:	8c 91       	ld	r24, X
    346a:	13 97       	sbiw	r26, 0x03	; 3
    346c:	80 87       	std	Z+8, r24	; 0x08
    346e:	12 96       	adiw	r26, 0x02	; 2
		_uplink_payload.bytes[7] = sharedData->temperature & 0xFF;
    3470:	8c 91       	ld	r24, X
    3472:	81 87       	std	Z+9, r24	; 0x09
    3474:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3476:	0e 94 75 26 	call	0x4cea	; 0x4cea <status_leds_shortPuls>
		
		// SENDING PAYLOAD
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    347a:	6f e2       	ldi	r22, 0x2F	; 47
    347c:	72 e1       	ldi	r23, 0x12	; 18
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	8f d3       	rcall	.+1822   	; 0x3ba0 <lora_driver_sendUploadMessage>
    3482:	7b d5       	rcall	.+2806   	; 0x3f7a <lora_driver_mapReturnCodeToText>
    3484:	9f 93       	push	r25
    3486:	8f 93       	push	r24
    3488:	8a e5       	ldi	r24, 0x5A	; 90
    348a:	94 e0       	ldi	r25, 0x04	; 4
    348c:	9f 93       	push	r25
    348e:	8f 93       	push	r24
    3490:	0e 94 a6 2b 	call	0x574c	; 0x574c <printf>
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	a4 cf       	rjmp	.-184    	; 0x33e8 <lora_handler_task+0x48>

000034a0 <lora_handler_initialise>:
    34a0:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    34a2:	ff 92       	push	r15
    34a4:	0f 93       	push	r16
	xTaskCreate(
    34a6:	e1 2c       	mov	r14, r1
    34a8:	f1 2c       	mov	r15, r1
    34aa:	08 2f       	mov	r16, r24
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	48 e8       	ldi	r20, 0x88	; 136
    34b2:	51 e0       	ldi	r21, 0x01	; 1
    34b4:	6f e6       	ldi	r22, 0x6F	; 111
    34b6:	74 e0       	ldi	r23, 0x04	; 4
    34b8:	80 ed       	ldi	r24, 0xD0	; 208
    34ba:	99 e1       	ldi	r25, 0x19	; 25
    34bc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    34c0:	0f 91       	pop	r16
    34c2:	ff 90       	pop	r15
    34c4:	ef 90       	pop	r14
    34c6:	08 95       	ret

000034c8 <takeMeasure>:
	,  NULL );	
}


void takeMeasure(void *pvParameters)
{
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <takeMeasure+0x6>
    34ce:	1f 92       	push	r1
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 60000/portTICK_PERIOD_MS; // 60 s

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    34d4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <xTaskGetTickCount>
    34d8:	69 83       	std	Y+1, r22	; 0x01
    34da:	7a 83       	std	Y+2, r23	; 0x02
    34dc:	8b 83       	std	Y+3, r24	; 0x03
    34de:	9c 83       	std	Y+4, r25	; 0x04
		
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    34e0:	46 ea       	ldi	r20, 0xA6	; 166
    34e2:	5e e0       	ldi	r21, 0x0E	; 14
    34e4:	60 e0       	ldi	r22, 0x00	; 0
    34e6:	70 e0       	ldi	r23, 0x00	; 0
    34e8:	ce 01       	movw	r24, r28
    34ea:	01 96       	adiw	r24, 0x01	; 1
    34ec:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskDelayUntil>
		tempHumMeasure();	
    34f0:	07 de       	rcall	.-1010   	; 0x3100 <tempHumMeasure>
		co2Measure(); // Call CO2HandlerImpl to take measure
    34f2:	93 dd       	rcall	.-1242   	; 0x301a <co2Measure>
    34f4:	f5 cf       	rjmp	.-22     	; 0x34e0 <takeMeasure+0x18>

000034f6 <enqueueMeasures>:
    34f6:	cf 93       	push	r28
	}
}

void enqueueMeasures(void *pvParameters)
{
    34f8:	df 93       	push	r29
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <enqueueMeasures+0x6>
    34fc:	1f 92       	push	r1
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 65000/portTICK_PERIOD_MS; // 65 s

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3502:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <xTaskGetTickCount>
    3506:	69 83       	std	Y+1, r22	; 0x01
    3508:	7a 83       	std	Y+2, r23	; 0x02
    350a:	8b 83       	std	Y+3, r24	; 0x03
    350c:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    350e:	4e ed       	ldi	r20, 0xDE	; 222
    3510:	5f e0       	ldi	r21, 0x0F	; 15
    3512:	60 e0       	ldi	r22, 0x00	; 0
    3514:	70 e0       	ldi	r23, 0x00	; 0
    3516:	ce 01       	movw	r24, r28
    3518:	01 96       	adiw	r24, 0x01	; 1
    351a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <xTaskDelayUntil>
		enqueueSharedData(); // Call SharedDataQueueImpl to enqueue the measures
    351e:	0e 94 11 01 	call	0x222	; 0x222 <enqueueSharedData>
    3522:	f5 cf       	rjmp	.-22     	; 0x350e <enqueueMeasures+0x18>

00003524 <setupTasks>:
void takeMeasure( void *pvParameters );
void enqueueMeasures( void *pvParameters );


void setupTasks(void)
{
    3524:	ef 92       	push	r14
    3526:	ff 92       	push	r15
    3528:	0f 93       	push	r16
	
	xTaskCreate(
    352a:	e1 2c       	mov	r14, r1
    352c:	f1 2c       	mov	r15, r1
    352e:	00 e0       	ldi	r16, 0x00	; 0
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 ec       	ldi	r20, 0xC0	; 192
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	66 e7       	ldi	r22, 0x76	; 118
    353a:	74 e0       	ldi	r23, 0x04	; 4
    353c:	84 e6       	ldi	r24, 0x64	; 100
    353e:	9a e1       	ldi	r25, 0x1A	; 26
    3540:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 ec       	ldi	r20, 0xC0	; 192
    354a:	50 e0       	ldi	r21, 0x00	; 0
    354c:	62 e8       	ldi	r22, 0x82	; 130
    354e:	74 e0       	ldi	r23, 0x04	; 4
    3550:	8b e7       	ldi	r24, 0x7B	; 123
    3552:	9a e1       	ldi	r25, 0x1A	; 26
    3554:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <xTaskCreate>
	,  "enqueueMeasures"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );	
}
    3558:	0f 91       	pop	r16
    355a:	ff 90       	pop	r15
    355c:	ef 90       	pop	r14
    355e:	08 95       	ret

00003560 <startTasks>:
}


void startTasks()
{
	setupTasks();
    3560:	e1 df       	rcall	.-62     	; 0x3524 <setupTasks>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3562:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <vTaskStartScheduler>
    3566:	08 95       	ret

00003568 <initialiseSystem>:


/*-----------------------------------------------------------*/
void initialiseSystem()
{
printf("Program Started!!\n");
    3568:	82 e9       	ldi	r24, 0x92	; 146
    356a:	94 e0       	ldi	r25, 0x04	; 4
    356c:	0e 94 b9 2b 	call	0x5772	; 0x5772 <puts>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3570:	81 b1       	in	r24, 0x01	; 1
    3572:	81 68       	ori	r24, 0x81	; 129
    3574:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	0e 94 aa 24 	call	0x4954	; 0x4954 <stdio_initialise>
	
	// Initialize queues
	initializeCO2Queue();
    357e:	43 dd       	rcall	.-1402   	; 0x3006 <initializeCO2Queue>
	initializeTempHumQueues();
    3580:	74 dd       	rcall	.-1304   	; 0x306a <initializeTempHumQueues>
    3582:	0e 94 08 01 	call	0x210	; 0x210 <initializeSharedDataQueue>
	initializeSharedDataQueue();

	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    3586:	83 e0       	ldi	r24, 0x03	; 3
    3588:	d4 d5       	rcall	.+2984   	; 0x4132 <mh_z19_initialise>
	hih8120_initialise();
    358a:	9f d0       	rcall	.+318    	; 0x36ca <hih8120_initialise>
    358c:	85 e0       	ldi	r24, 0x05	; 5



	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    358e:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <status_leds_initialise>
    3592:	41 e0       	ldi	r20, 0x01	; 1
	// Initialise the LoRaWAN driver without down-link buffer
	MessageBufferHandle_t downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	70 e0       	ldi	r23, 0x00	; 0
    3598:	8c e2       	ldi	r24, 0x2C	; 44
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <xStreamBufferGenericCreate>
	lora_driver_initialise(1, NULL);
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	70 e0       	ldi	r23, 0x00	; 0
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	1e d2       	rcall	.+1084   	; 0x39e4 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    35a8:	83 e0       	ldi	r24, 0x03	; 3
    35aa:	7a cf       	rjmp	.-268    	; 0x34a0 <lora_handler_initialise>
    35ac:	08 95       	ret

000035ae <main>:
    35ae:	dc df       	rcall	.-72     	; 0x3568 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    35b0:	82 e9       	ldi	r24, 0x92	; 146
    35b2:	94 e0       	ldi	r25, 0x04	; 4
    35b4:	0e 94 b9 2b 	call	0x5772	; 0x5772 <puts>
	startTasks();
    35b8:	d3 df       	rcall	.-90     	; 0x3560 <startTasks>
    35ba:	ff cf       	rjmp	.-2      	; 0x35ba <main+0xc>

000035bc <__fixsfsi>:
    35bc:	04 d0       	rcall	.+8      	; 0x35c6 <__fixunssfsi>
    35be:	68 94       	set
    35c0:	b1 11       	cpse	r27, r1
    35c2:	50 c0       	rjmp	.+160    	; 0x3664 <__fp_szero>
    35c4:	08 95       	ret

000035c6 <__fixunssfsi>:
    35c6:	33 d0       	rcall	.+102    	; 0x362e <__fp_splitA>
    35c8:	88 f0       	brcs	.+34     	; 0x35ec <__fixunssfsi+0x26>
    35ca:	9f 57       	subi	r25, 0x7F	; 127
    35cc:	90 f0       	brcs	.+36     	; 0x35f2 <__fixunssfsi+0x2c>
    35ce:	b9 2f       	mov	r27, r25
    35d0:	99 27       	eor	r25, r25
    35d2:	b7 51       	subi	r27, 0x17	; 23
    35d4:	a0 f0       	brcs	.+40     	; 0x35fe <__fixunssfsi+0x38>
    35d6:	d1 f0       	breq	.+52     	; 0x360c <__fixunssfsi+0x46>
    35d8:	66 0f       	add	r22, r22
    35da:	77 1f       	adc	r23, r23
    35dc:	88 1f       	adc	r24, r24
    35de:	99 1f       	adc	r25, r25
    35e0:	1a f0       	brmi	.+6      	; 0x35e8 <__fixunssfsi+0x22>
    35e2:	ba 95       	dec	r27
    35e4:	c9 f7       	brne	.-14     	; 0x35d8 <__fixunssfsi+0x12>
    35e6:	12 c0       	rjmp	.+36     	; 0x360c <__fixunssfsi+0x46>
    35e8:	b1 30       	cpi	r27, 0x01	; 1
    35ea:	81 f0       	breq	.+32     	; 0x360c <__fixunssfsi+0x46>
    35ec:	3a d0       	rcall	.+116    	; 0x3662 <__fp_zero>
    35ee:	b1 e0       	ldi	r27, 0x01	; 1
    35f0:	08 95       	ret
    35f2:	37 c0       	rjmp	.+110    	; 0x3662 <__fp_zero>
    35f4:	67 2f       	mov	r22, r23
    35f6:	78 2f       	mov	r23, r24
    35f8:	88 27       	eor	r24, r24
    35fa:	b8 5f       	subi	r27, 0xF8	; 248
    35fc:	39 f0       	breq	.+14     	; 0x360c <__fixunssfsi+0x46>
    35fe:	b9 3f       	cpi	r27, 0xF9	; 249
    3600:	cc f3       	brlt	.-14     	; 0x35f4 <__fixunssfsi+0x2e>
    3602:	86 95       	lsr	r24
    3604:	77 95       	ror	r23
    3606:	67 95       	ror	r22
    3608:	b3 95       	inc	r27
    360a:	d9 f7       	brne	.-10     	; 0x3602 <__fixunssfsi+0x3c>
    360c:	3e f4       	brtc	.+14     	; 0x361c <__fixunssfsi+0x56>
    360e:	90 95       	com	r25
    3610:	80 95       	com	r24
    3612:	70 95       	com	r23
    3614:	61 95       	neg	r22
    3616:	7f 4f       	sbci	r23, 0xFF	; 255
    3618:	8f 4f       	sbci	r24, 0xFF	; 255
    361a:	9f 4f       	sbci	r25, 0xFF	; 255
    361c:	08 95       	ret

0000361e <__fp_split3>:
    361e:	57 fd       	sbrc	r21, 7
    3620:	90 58       	subi	r25, 0x80	; 128
    3622:	44 0f       	add	r20, r20
    3624:	55 1f       	adc	r21, r21
    3626:	59 f0       	breq	.+22     	; 0x363e <__fp_splitA+0x10>
    3628:	5f 3f       	cpi	r21, 0xFF	; 255
    362a:	71 f0       	breq	.+28     	; 0x3648 <__fp_splitA+0x1a>
    362c:	47 95       	ror	r20

0000362e <__fp_splitA>:
    362e:	88 0f       	add	r24, r24
    3630:	97 fb       	bst	r25, 7
    3632:	99 1f       	adc	r25, r25
    3634:	61 f0       	breq	.+24     	; 0x364e <__fp_splitA+0x20>
    3636:	9f 3f       	cpi	r25, 0xFF	; 255
    3638:	79 f0       	breq	.+30     	; 0x3658 <__fp_splitA+0x2a>
    363a:	87 95       	ror	r24
    363c:	08 95       	ret
    363e:	12 16       	cp	r1, r18
    3640:	13 06       	cpc	r1, r19
    3642:	14 06       	cpc	r1, r20
    3644:	55 1f       	adc	r21, r21
    3646:	f2 cf       	rjmp	.-28     	; 0x362c <__fp_split3+0xe>
    3648:	46 95       	lsr	r20
    364a:	f1 df       	rcall	.-30     	; 0x362e <__fp_splitA>
    364c:	08 c0       	rjmp	.+16     	; 0x365e <__fp_splitA+0x30>
    364e:	16 16       	cp	r1, r22
    3650:	17 06       	cpc	r1, r23
    3652:	18 06       	cpc	r1, r24
    3654:	99 1f       	adc	r25, r25
    3656:	f1 cf       	rjmp	.-30     	; 0x363a <__fp_splitA+0xc>
    3658:	86 95       	lsr	r24
    365a:	71 05       	cpc	r23, r1
    365c:	61 05       	cpc	r22, r1
    365e:	08 94       	sec
    3660:	08 95       	ret

00003662 <__fp_zero>:
    3662:	e8 94       	clt

00003664 <__fp_szero>:
    3664:	bb 27       	eor	r27, r27
    3666:	66 27       	eor	r22, r22
    3668:	77 27       	eor	r23, r23
    366a:	cb 01       	movw	r24, r22
    366c:	97 f9       	bld	r25, 7
    366e:	08 95       	ret

00003670 <_hihTwiCallback>:
    3670:	65 30       	cpi	r22, 0x05	; 5
    3672:	f1 f4       	brne	.+60     	; 0x36b0 <_hihTwiCallback+0x40>
    3674:	fa 01       	movw	r30, r20
    3676:	80 81       	ld	r24, Z
    3678:	8f 73       	andi	r24, 0x3F	; 63
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	98 2f       	mov	r25, r24
    367e:	88 27       	eor	r24, r24
    3680:	21 81       	ldd	r18, Z+1	; 0x01
    3682:	82 2b       	or	r24, r18
    3684:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3688:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    368c:	82 81       	ldd	r24, Z+2	; 0x02
    368e:	f0 e4       	ldi	r31, 0x40	; 64
    3690:	8f 9f       	mul	r24, r31
    3692:	c0 01       	movw	r24, r0
    3694:	11 24       	eor	r1, r1
    3696:	fa 01       	movw	r30, r20
    3698:	23 81       	ldd	r18, Z+3	; 0x03
    369a:	26 95       	lsr	r18
    369c:	26 95       	lsr	r18
    369e:	82 2b       	or	r24, r18
    36a0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    36a4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	80 93 45 12 	sts	0x1245, r24	; 0x801245 <_measuringIsReady>
    36ae:	08 95       	ret
    36b0:	64 30       	cpi	r22, 0x04	; 4
    36b2:	51 f0       	breq	.+20     	; 0x36c8 <_hihTwiCallback+0x58>
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e4       	ldi	r25, 0x40	; 64
    36b8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    36bc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    36c0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    36c4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    36c8:	08 95       	ret

000036ca <hih8120_initialise>:
    36ca:	0f 93       	push	r16
    36cc:	1f 93       	push	r17
    36ce:	08 e3       	ldi	r16, 0x38	; 56
    36d0:	1b e1       	ldi	r17, 0x1B	; 27
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	34 e2       	ldi	r19, 0x24	; 36
    36d6:	44 ef       	ldi	r20, 0xF4	; 244
    36d8:	50 e0       	ldi	r21, 0x00	; 0
    36da:	60 e0       	ldi	r22, 0x00	; 0
    36dc:	87 e2       	ldi	r24, 0x27	; 39
    36de:	0e 94 98 26 	call	0x4d30	; 0x4d30 <twiCreate>
    36e2:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <_hih8120Handler+0x1>
    36e6:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <_hih8120Handler>
    36ea:	21 e0       	ldi	r18, 0x01	; 1
    36ec:	89 2b       	or	r24, r25
    36ee:	09 f0       	breq	.+2      	; 0x36f2 <hih8120_initialise+0x28>
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	82 2f       	mov	r24, r18
    36f4:	1f 91       	pop	r17
    36f6:	0f 91       	pop	r16
    36f8:	08 95       	ret

000036fa <hih8120_wakeup>:
    36fa:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <_hih8120Handler>
    36fe:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <_hih8120Handler+0x1>
    3702:	00 97       	sbiw	r24, 0x00	; 0
    3704:	59 f0       	breq	.+22     	; 0x371c <hih8120_wakeup+0x22>
    3706:	40 e0       	ldi	r20, 0x00	; 0
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	70 e0       	ldi	r23, 0x00	; 0
    370c:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <twiTransmit>
    3710:	84 30       	cpi	r24, 0x04	; 4
    3712:	31 f4       	brne	.+12     	; 0x3720 <hih8120_wakeup+0x26>
    3714:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <_measuringIsReady>
    3718:	80 e0       	ldi	r24, 0x00	; 0
    371a:	08 95       	ret
    371c:	82 e0       	ldi	r24, 0x02	; 2
    371e:	08 95       	ret
    3720:	83 e0       	ldi	r24, 0x03	; 3
    3722:	08 95       	ret

00003724 <hih8120_measure>:
    3724:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <_hih8120Handler>
    3728:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <_hih8120Handler+0x1>
    372c:	00 97       	sbiw	r24, 0x00	; 0
    372e:	39 f0       	breq	.+14     	; 0x373e <hih8120_measure+0x1a>
    3730:	64 e0       	ldi	r22, 0x04	; 4
    3732:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <twiReceive>
    3736:	85 30       	cpi	r24, 0x05	; 5
    3738:	21 f0       	breq	.+8      	; 0x3742 <hih8120_measure+0x1e>
    373a:	83 e0       	ldi	r24, 0x03	; 3
    373c:	08 95       	ret
    373e:	82 e0       	ldi	r24, 0x02	; 2
    3740:	08 95       	ret
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	08 95       	ret

00003746 <hih8120_getHumidity>:
    3746:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    374a:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	0e 94 13 29 	call	0x5226	; 0x5226 <__floatunsisf>
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	48 ec       	ldi	r20, 0xC8	; 200
    375c:	52 e4       	ldi	r21, 0x42	; 66
    375e:	0e 94 78 29 	call	0x52f0	; 0x52f0 <__mulsf3>
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	38 ef       	ldi	r19, 0xF8	; 248
    3766:	4f e7       	ldi	r20, 0x7F	; 127
    3768:	56 e4       	ldi	r21, 0x46	; 70
    376a:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__divsf3>
    376e:	08 95       	ret

00003770 <hih8120_getTemperature>:
    3770:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3774:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 13 29 	call	0x5226	; 0x5226 <__floatunsisf>
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	45 e2       	ldi	r20, 0x25	; 37
    3786:	53 e4       	ldi	r21, 0x43	; 67
    3788:	0e 94 78 29 	call	0x52f0	; 0x52f0 <__mulsf3>
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	38 ef       	ldi	r19, 0xF8	; 248
    3790:	4f e7       	ldi	r20, 0x7F	; 127
    3792:	56 e4       	ldi	r21, 0x46	; 70
    3794:	0e 94 a8 28 	call	0x5150	; 0x5150 <__divsf3>
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	40 e2       	ldi	r20, 0x20	; 32
    379e:	52 e4       	ldi	r21, 0x42	; 66
    37a0:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__subsf3>
    37a4:	08 95       	ret

000037a6 <_serialCallBack>:
    37a6:	0f 93       	push	r16
    37a8:	1f 93       	push	r17
    37aa:	cf 93       	push	r28
    37ac:	df 93       	push	r29
    37ae:	1f 92       	push	r1
    37b0:	1f 92       	push	r1
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
    37b6:	8c 01       	movw	r16, r24
    37b8:	19 82       	std	Y+1, r1	; 0x01
    37ba:	2d c0       	rjmp	.+90     	; 0x3816 <_serialCallBack+0x70>
    37bc:	e0 91 ac 12 	lds	r30, 0x12AC	; 0x8012ac <rec_buf_inp.2878>
    37c0:	ec 32       	cpi	r30, 0x2C	; 44
    37c2:	50 f4       	brcc	.+20     	; 0x37d8 <_serialCallBack+0x32>
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	8e 0f       	add	r24, r30
    37c8:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <rec_buf_inp.2878>
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	e2 52       	subi	r30, 0x22	; 34
    37d0:	fd 4e       	sbci	r31, 0xED	; 237
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	80 83       	st	Z, r24
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <_serialCallBack+0x36>
    37d8:	10 92 ac 12 	sts	0x12AC, r1	; 0x8012ac <rec_buf_inp.2878>
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	8a 30       	cpi	r24, 0x0A	; 10
    37e0:	d1 f4       	brne	.+52     	; 0x3816 <_serialCallBack+0x70>
    37e2:	40 91 ac 12 	lds	r20, 0x12AC	; 0x8012ac <rec_buf_inp.2878>
    37e6:	50 e0       	ldi	r21, 0x00	; 0
    37e8:	fa 01       	movw	r30, r20
    37ea:	e4 52       	subi	r30, 0x24	; 36
    37ec:	fd 4e       	sbci	r31, 0xED	; 237
    37ee:	10 82       	st	Z, r1
    37f0:	41 50       	subi	r20, 0x01	; 1
    37f2:	51 09       	sbc	r21, r1
    37f4:	9e 01       	movw	r18, r28
    37f6:	2f 5f       	subi	r18, 0xFF	; 255
    37f8:	3f 4f       	sbci	r19, 0xFF	; 255
    37fa:	6e ed       	ldi	r22, 0xDE	; 222
    37fc:	72 e1       	ldi	r23, 0x12	; 18
    37fe:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    3802:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    3806:	0e 94 86 09 	call	0x130c	; 0x130c <xStreamBufferSendFromISR>
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	81 11       	cpse	r24, r1
    380e:	0e 94 a0 03 	call	0x740	; 0x740 <vPortYield>
    3812:	10 92 ac 12 	sts	0x12AC, r1	; 0x8012ac <rec_buf_inp.2878>
    3816:	be 01       	movw	r22, r28
    3818:	6e 5f       	subi	r22, 0xFE	; 254
    381a:	7f 4f       	sbci	r23, 0xFF	; 255
    381c:	c8 01       	movw	r24, r16
    381e:	04 d6       	rcall	.+3080   	; 0x4428 <serial_getByte>
    3820:	88 23       	and	r24, r24
    3822:	61 f2       	breq	.-104    	; 0x37bc <_serialCallBack+0x16>
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	08 95       	ret

00003832 <_uploadMessage>:
    3832:	0f 93       	push	r16
    3834:	1f 93       	push	r17
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	8c 01       	movw	r16, r24
    383c:	eb 01       	movw	r28, r22
    383e:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    3842:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    3846:	0e 94 93 08 	call	0x1126	; 0x1126 <xStreamBufferReset>
    384a:	b8 01       	movw	r22, r16
    384c:	88 e4       	ldi	r24, 0x48	; 72
    384e:	92 e1       	ldi	r25, 0x12	; 18
    3850:	0e 94 87 2b 	call	0x570e	; 0x570e <strcpy>
    3854:	20 97       	sbiw	r28, 0x00	; 0
    3856:	79 f0       	breq	.+30     	; 0x3876 <_uploadMessage+0x44>
    3858:	e8 e4       	ldi	r30, 0x48	; 72
    385a:	f2 e1       	ldi	r31, 0x12	; 18
    385c:	01 90       	ld	r0, Z+
    385e:	00 20       	and	r0, r0
    3860:	e9 f7       	brne	.-6      	; 0x385c <_uploadMessage+0x2a>
    3862:	31 97       	sbiw	r30, 0x01	; 1
    3864:	80 e2       	ldi	r24, 0x20	; 32
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	91 83       	std	Z+1, r25	; 0x01
    386a:	80 83       	st	Z, r24
    386c:	be 01       	movw	r22, r28
    386e:	88 e4       	ldi	r24, 0x48	; 72
    3870:	92 e1       	ldi	r25, 0x12	; 18
    3872:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <strcat>
    3876:	e8 e4       	ldi	r30, 0x48	; 72
    3878:	f2 e1       	ldi	r31, 0x12	; 18
    387a:	df 01       	movw	r26, r30
    387c:	0d 90       	ld	r0, X+
    387e:	00 20       	and	r0, r0
    3880:	e9 f7       	brne	.-6      	; 0x387c <_uploadMessage+0x4a>
    3882:	11 97       	sbiw	r26, 0x01	; 1
    3884:	8d e0       	ldi	r24, 0x0D	; 13
    3886:	9a e0       	ldi	r25, 0x0A	; 10
    3888:	11 96       	adiw	r26, 0x01	; 1
    388a:	9c 93       	st	X, r25
    388c:	8e 93       	st	-X, r24
    388e:	12 96       	adiw	r26, 0x02	; 2
    3890:	1c 92       	st	X, r1
    3892:	01 90       	ld	r0, Z+
    3894:	00 20       	and	r0, r0
    3896:	e9 f7       	brne	.-6      	; 0x3892 <_uploadMessage+0x60>
    3898:	31 97       	sbiw	r30, 0x01	; 1
    389a:	e8 54       	subi	r30, 0x48	; 72
    389c:	f2 41       	sbci	r31, 0x12	; 18
    389e:	ae 2f       	mov	r26, r30
    38a0:	88 e4       	ldi	r24, 0x48	; 72
    38a2:	92 e1       	ldi	r25, 0x12	; 18
    38a4:	ac 01       	movw	r20, r24
    38a6:	6a 2f       	mov	r22, r26
    38a8:	80 91 b1 12 	lds	r24, 0x12B1	; 0x8012b1 <_rn2483_serial>
    38ac:	90 91 b2 12 	lds	r25, 0x12B2	; 0x8012b2 <_rn2483_serial+0x1>
    38b0:	66 d5       	rcall	.+2764   	; 0x437e <serial_sendBytes>
    38b2:	81 11       	cpse	r24, r1
    38b4:	11 c0       	rjmp	.+34     	; 0x38d8 <_uploadMessage+0xa6>
    38b6:	08 e2       	ldi	r16, 0x28	; 40
    38b8:	15 e0       	ldi	r17, 0x05	; 5
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	4d e2       	ldi	r20, 0x2D	; 45
    38c0:	50 e0       	ldi	r21, 0x00	; 0
    38c2:	68 e3       	ldi	r22, 0x38	; 56
    38c4:	73 e1       	ldi	r23, 0x13	; 19
    38c6:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    38ca:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    38ce:	0e 94 ca 09 	call	0x1394	; 0x1394 <xStreamBufferReceive>
    38d2:	88 e3       	ldi	r24, 0x38	; 56
    38d4:	93 e1       	ldi	r25, 0x13	; 19
    38d6:	02 c0       	rjmp	.+4      	; 0x38dc <_uploadMessage+0xaa>
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	1f 91       	pop	r17
    38e2:	0f 91       	pop	r16
    38e4:	08 95       	ret

000038e6 <_reply2ReturnCode>:
    38e6:	2f 92       	push	r2
    38e8:	3f 92       	push	r3
    38ea:	4f 92       	push	r4
    38ec:	5f 92       	push	r5
    38ee:	6f 92       	push	r6
    38f0:	7f 92       	push	r7
    38f2:	8f 92       	push	r8
    38f4:	9f 92       	push	r9
    38f6:	af 92       	push	r10
    38f8:	bf 92       	push	r11
    38fa:	cf 92       	push	r12
    38fc:	df 92       	push	r13
    38fe:	ef 92       	push	r14
    3900:	ff 92       	push	r15
    3902:	0f 93       	push	r16
    3904:	1f 93       	push	r17
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	5c 01       	movw	r10, r24
    390c:	fc 01       	movw	r30, r24
    390e:	01 90       	ld	r0, Z+
    3910:	00 20       	and	r0, r0
    3912:	e9 f7       	brne	.-6      	; 0x390e <_reply2ReturnCode+0x28>
    3914:	31 97       	sbiw	r30, 0x01	; 1
    3916:	6f 01       	movw	r12, r30
    3918:	c8 1a       	sub	r12, r24
    391a:	d9 0a       	sbc	r13, r25
    391c:	5c 2c       	mov	r5, r12
    391e:	0f 2e       	mov	r0, r31
    3920:	fd e3       	ldi	r31, 0x3D	; 61
    3922:	8f 2e       	mov	r8, r31
    3924:	f7 e0       	ldi	r31, 0x07	; 7
    3926:	9f 2e       	mov	r9, r31
    3928:	f0 2d       	mov	r31, r0
    392a:	e1 2c       	mov	r14, r1
    392c:	f1 2c       	mov	r15, r1
    392e:	4c 2c       	mov	r4, r12
    3930:	37 01       	movw	r6, r14
    3932:	f4 01       	movw	r30, r8
    3934:	01 81       	ldd	r16, Z+1	; 0x01
    3936:	12 81       	ldd	r17, Z+2	; 0x02
    3938:	e8 01       	movw	r28, r16
    393a:	09 90       	ld	r0, Y+
    393c:	00 20       	and	r0, r0
    393e:	e9 f7       	brne	.-6      	; 0x393a <_reply2ReturnCode+0x54>
    3940:	21 97       	sbiw	r28, 0x01	; 1
    3942:	c0 1b       	sub	r28, r16
    3944:	d1 0b       	sbc	r29, r17
    3946:	3c 2e       	mov	r3, r28
    3948:	f9 e0       	ldi	r31, 0x09	; 9
    394a:	cf 16       	cp	r12, r31
    394c:	d1 04       	cpc	r13, r1
    394e:	58 f0       	brcs	.+22     	; 0x3966 <_reply2ReturnCode+0x80>
    3950:	f4 01       	movw	r30, r8
    3952:	20 80       	ld	r2, Z
    3954:	fe e0       	ldi	r31, 0x0E	; 14
    3956:	2f 12       	cpse	r2, r31
    3958:	06 c0       	rjmp	.+12     	; 0x3966 <_reply2ReturnCode+0x80>
    395a:	b8 01       	movw	r22, r16
    395c:	c5 01       	movw	r24, r10
    395e:	0e 94 57 2b 	call	0x56ae	; 0x56ae <strcasestr>
    3962:	89 2b       	or	r24, r25
    3964:	09 f5       	brne	.+66     	; 0x39a8 <_reply2ReturnCode+0xc2>
    3966:	44 2d       	mov	r20, r4
    3968:	35 14       	cp	r3, r5
    396a:	08 f4       	brcc	.+2      	; 0x396e <_reply2ReturnCode+0x88>
    396c:	4c 2f       	mov	r20, r28
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	b8 01       	movw	r22, r16
    3972:	c5 01       	movw	r24, r10
    3974:	0e 94 8e 2b 	call	0x571c	; 0x571c <strncasecmp>
    3978:	89 2b       	or	r24, r25
    397a:	49 f4       	brne	.+18     	; 0x398e <_reply2ReturnCode+0xa8>
    397c:	f3 01       	movw	r30, r6
    397e:	ee 0f       	add	r30, r30
    3980:	ff 1f       	adc	r31, r31
    3982:	e6 0d       	add	r30, r6
    3984:	f7 1d       	adc	r31, r7
    3986:	e3 5c       	subi	r30, 0xC3	; 195
    3988:	f8 4f       	sbci	r31, 0xF8	; 248
    398a:	20 80       	ld	r2, Z
    398c:	0d c0       	rjmp	.+26     	; 0x39a8 <_reply2ReturnCode+0xc2>
    398e:	8f ef       	ldi	r24, 0xFF	; 255
    3990:	e8 1a       	sub	r14, r24
    3992:	f8 0a       	sbc	r15, r24
    3994:	e3 e0       	ldi	r30, 0x03	; 3
    3996:	8e 0e       	add	r8, r30
    3998:	91 1c       	adc	r9, r1
    399a:	f1 e1       	ldi	r31, 0x11	; 17
    399c:	ef 16       	cp	r14, r31
    399e:	f1 04       	cpc	r15, r1
    39a0:	39 f6       	brne	.-114    	; 0x3930 <_reply2ReturnCode+0x4a>
    39a2:	68 94       	set
    39a4:	22 24       	eor	r2, r2
    39a6:	24 f8       	bld	r2, 4
    39a8:	82 2d       	mov	r24, r2
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	ff 90       	pop	r15
    39b4:	ef 90       	pop	r14
    39b6:	df 90       	pop	r13
    39b8:	cf 90       	pop	r12
    39ba:	bf 90       	pop	r11
    39bc:	af 90       	pop	r10
    39be:	9f 90       	pop	r9
    39c0:	8f 90       	pop	r8
    39c2:	7f 90       	pop	r7
    39c4:	6f 90       	pop	r6
    39c6:	5f 90       	pop	r5
    39c8:	4f 90       	pop	r4
    39ca:	3f 90       	pop	r3
    39cc:	2f 90       	pop	r2
    39ce:	08 95       	ret

000039d0 <_uploadMessageRc>:
    39d0:	30 df       	rcall	.-416    	; 0x3832 <_uploadMessage>
    39d2:	89 cf       	rjmp	.-238    	; 0x38e6 <_reply2ReturnCode>
    39d4:	08 95       	ret

000039d6 <lora_driver_flushBuffers>:
    39d6:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    39da:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    39de:	0c 94 93 08 	jmp	0x1126	; 0x1126 <xStreamBufferReset>
    39e2:	08 95       	ret

000039e4 <lora_driver_initialise>:
    39e4:	8f 92       	push	r8
    39e6:	9f 92       	push	r9
    39e8:	af 92       	push	r10
    39ea:	cf 92       	push	r12
    39ec:	ef 92       	push	r14
    39ee:	0f 93       	push	r16
    39f0:	1f 93       	push	r17
    39f2:	cf 93       	push	r28
    39f4:	c8 2f       	mov	r28, r24
    39f6:	8b 01       	movw	r16, r22
    39f8:	41 e0       	ldi	r20, 0x01	; 1
    39fa:	60 e0       	ldi	r22, 0x00	; 0
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	88 ec       	ldi	r24, 0xC8	; 200
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	0e 94 61 08 	call	0x10c2	; 0x10c2 <xStreamBufferGenericCreate>
    3a06:	90 93 b0 12 	sts	0x12B0, r25	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    3a0a:	80 93 af 12 	sts	0x12AF, r24	; 0x8012af <_serialReplyBufferHandle>
    3a0e:	10 93 ae 12 	sts	0x12AE, r17	; 0x8012ae <_downlinkMessageBuffer+0x1>
    3a12:	00 93 ad 12 	sts	0x12AD, r16	; 0x8012ad <_downlinkMessageBuffer>
    3a16:	0f 2e       	mov	r0, r31
    3a18:	f3 ed       	ldi	r31, 0xD3	; 211
    3a1a:	8f 2e       	mov	r8, r31
    3a1c:	fb e1       	ldi	r31, 0x1B	; 27
    3a1e:	9f 2e       	mov	r9, r31
    3a20:	f0 2d       	mov	r31, r0
    3a22:	68 94       	set
    3a24:	aa 24       	eor	r10, r10
    3a26:	a6 f8       	bld	r10, 6
    3a28:	68 94       	set
    3a2a:	cc 24       	eor	r12, r12
    3a2c:	c6 f8       	bld	r12, 6
    3a2e:	e1 2c       	mov	r14, r1
    3a30:	00 e0       	ldi	r16, 0x00	; 0
    3a32:	23 e0       	ldi	r18, 0x03	; 3
    3a34:	40 e0       	ldi	r20, 0x00	; 0
    3a36:	51 ee       	ldi	r21, 0xE1	; 225
    3a38:	60 e0       	ldi	r22, 0x00	; 0
    3a3a:	70 e0       	ldi	r23, 0x00	; 0
    3a3c:	8c 2f       	mov	r24, r28
    3a3e:	d2 d3       	rcall	.+1956   	; 0x41e4 <serial_create>
    3a40:	90 93 b2 12 	sts	0x12B2, r25	; 0x8012b2 <_rn2483_serial+0x1>
    3a44:	80 93 b1 12 	sts	0x12B1, r24	; 0x8012b1 <_rn2483_serial>
    3a48:	e7 e0       	ldi	r30, 0x07	; 7
    3a4a:	f1 e0       	ldi	r31, 0x01	; 1
    3a4c:	80 81       	ld	r24, Z
    3a4e:	80 61       	ori	r24, 0x10	; 16
    3a50:	80 83       	st	Z, r24
    3a52:	cf 91       	pop	r28
    3a54:	1f 91       	pop	r17
    3a56:	0f 91       	pop	r16
    3a58:	ef 90       	pop	r14
    3a5a:	cf 90       	pop	r12
    3a5c:	af 90       	pop	r10
    3a5e:	9f 90       	pop	r9
    3a60:	8f 90       	pop	r8
    3a62:	08 95       	ret

00003a64 <lora_driver_resetRn2483>:
    3a64:	88 23       	and	r24, r24
    3a66:	31 f0       	breq	.+12     	; 0x3a74 <lora_driver_resetRn2483+0x10>
    3a68:	e8 e0       	ldi	r30, 0x08	; 8
    3a6a:	f1 e0       	ldi	r31, 0x01	; 1
    3a6c:	80 81       	ld	r24, Z
    3a6e:	8f 7e       	andi	r24, 0xEF	; 239
    3a70:	80 83       	st	Z, r24
    3a72:	08 95       	ret
    3a74:	e8 e0       	ldi	r30, 0x08	; 8
    3a76:	f1 e0       	ldi	r31, 0x01	; 1
    3a78:	80 81       	ld	r24, Z
    3a7a:	80 61       	ori	r24, 0x10	; 16
    3a7c:	80 83       	st	Z, r24
    3a7e:	08 95       	ret

00003a80 <lora_driver_rn2483FactoryReset>:
    3a80:	60 e0       	ldi	r22, 0x00	; 0
    3a82:	70 e0       	ldi	r23, 0x00	; 0
    3a84:	83 ec       	ldi	r24, 0xC3	; 195
    3a86:	94 e0       	ldi	r25, 0x04	; 4
    3a88:	d4 de       	rcall	.-600    	; 0x3832 <_uploadMessage>
    3a8a:	e8 e3       	ldi	r30, 0x38	; 56
    3a8c:	f3 e1       	ldi	r31, 0x13	; 19
    3a8e:	01 90       	ld	r0, Z+
    3a90:	00 20       	and	r0, r0
    3a92:	e9 f7       	brne	.-6      	; 0x3a8e <lora_driver_rn2483FactoryReset+0xe>
    3a94:	31 97       	sbiw	r30, 0x01	; 1
    3a96:	e8 53       	subi	r30, 0x38	; 56
    3a98:	f3 41       	sbci	r31, 0x13	; 19
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	75 97       	sbiw	r30, 0x15	; 21
    3a9e:	08 f0       	brcs	.+2      	; 0x3aa2 <lora_driver_rn2483FactoryReset+0x22>
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	08 95       	ret

00003aa4 <lora_driver_getRn2483Hweui>:
    3aa4:	cf 93       	push	r28
    3aa6:	df 93       	push	r29
    3aa8:	ec 01       	movw	r28, r24
    3aaa:	60 e0       	ldi	r22, 0x00	; 0
    3aac:	70 e0       	ldi	r23, 0x00	; 0
    3aae:	84 ed       	ldi	r24, 0xD4	; 212
    3ab0:	94 e0       	ldi	r25, 0x04	; 4
    3ab2:	bf de       	rcall	.-642    	; 0x3832 <_uploadMessage>
    3ab4:	e8 e3       	ldi	r30, 0x38	; 56
    3ab6:	f3 e1       	ldi	r31, 0x13	; 19
    3ab8:	01 90       	ld	r0, Z+
    3aba:	00 20       	and	r0, r0
    3abc:	e9 f7       	brne	.-6      	; 0x3ab8 <lora_driver_getRn2483Hweui+0x14>
    3abe:	e9 54       	subi	r30, 0x49	; 73
    3ac0:	f3 41       	sbci	r31, 0x13	; 19
    3ac2:	39 f4       	brne	.+14     	; 0x3ad2 <lora_driver_getRn2483Hweui+0x2e>
    3ac4:	68 e3       	ldi	r22, 0x38	; 56
    3ac6:	73 e1       	ldi	r23, 0x13	; 19
    3ac8:	ce 01       	movw	r24, r28
    3aca:	0e 94 87 2b 	call	0x570e	; 0x570e <strcpy>
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	02 c0       	rjmp	.+4      	; 0x3ad6 <lora_driver_getRn2483Hweui+0x32>
    3ad2:	18 82       	st	Y, r1
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	08 95       	ret

00003adc <lora_driver_setDeviceIdentifier>:
    3adc:	fc 01       	movw	r30, r24
    3ade:	01 90       	ld	r0, Z+
    3ae0:	00 20       	and	r0, r0
    3ae2:	e9 f7       	brne	.-6      	; 0x3ade <lora_driver_setDeviceIdentifier+0x2>
    3ae4:	9f 01       	movw	r18, r30
    3ae6:	21 51       	subi	r18, 0x11	; 17
    3ae8:	31 09       	sbc	r19, r1
    3aea:	28 17       	cp	r18, r24
    3aec:	39 07       	cpc	r19, r25
    3aee:	29 f4       	brne	.+10     	; 0x3afa <lora_driver_setDeviceIdentifier+0x1e>
    3af0:	bc 01       	movw	r22, r24
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	95 e0       	ldi	r25, 0x05	; 5
    3af6:	6c cf       	rjmp	.-296    	; 0x39d0 <_uploadMessageRc>
    3af8:	08 95       	ret
    3afa:	89 e0       	ldi	r24, 0x09	; 9
    3afc:	08 95       	ret

00003afe <lora_driver_setApplicationIdentifier>:
    3afe:	fc 01       	movw	r30, r24
    3b00:	01 90       	ld	r0, Z+
    3b02:	00 20       	and	r0, r0
    3b04:	e9 f7       	brne	.-6      	; 0x3b00 <lora_driver_setApplicationIdentifier+0x2>
    3b06:	9f 01       	movw	r18, r30
    3b08:	21 51       	subi	r18, 0x11	; 17
    3b0a:	31 09       	sbc	r19, r1
    3b0c:	28 17       	cp	r18, r24
    3b0e:	39 07       	cpc	r19, r25
    3b10:	29 f4       	brne	.+10     	; 0x3b1c <lora_driver_setApplicationIdentifier+0x1e>
    3b12:	bc 01       	movw	r22, r24
    3b14:	81 e1       	ldi	r24, 0x11	; 17
    3b16:	95 e0       	ldi	r25, 0x05	; 5
    3b18:	5b cf       	rjmp	.-330    	; 0x39d0 <_uploadMessageRc>
    3b1a:	08 95       	ret
    3b1c:	89 e0       	ldi	r24, 0x09	; 9
    3b1e:	08 95       	ret

00003b20 <lora_driver_setApplicationKey>:
    3b20:	fc 01       	movw	r30, r24
    3b22:	01 90       	ld	r0, Z+
    3b24:	00 20       	and	r0, r0
    3b26:	e9 f7       	brne	.-6      	; 0x3b22 <lora_driver_setApplicationKey+0x2>
    3b28:	9f 01       	movw	r18, r30
    3b2a:	21 52       	subi	r18, 0x21	; 33
    3b2c:	31 09       	sbc	r19, r1
    3b2e:	28 17       	cp	r18, r24
    3b30:	39 07       	cpc	r19, r25
    3b32:	29 f4       	brne	.+10     	; 0x3b3e <lora_driver_setApplicationKey+0x1e>
    3b34:	bc 01       	movw	r22, r24
    3b36:	80 e2       	ldi	r24, 0x20	; 32
    3b38:	95 e0       	ldi	r25, 0x05	; 5
    3b3a:	4a cf       	rjmp	.-364    	; 0x39d0 <_uploadMessageRc>
    3b3c:	08 95       	ret
    3b3e:	89 e0       	ldi	r24, 0x09	; 9
    3b40:	08 95       	ret

00003b42 <lora_driver_saveMac>:
    3b42:	60 e0       	ldi	r22, 0x00	; 0
    3b44:	70 e0       	ldi	r23, 0x00	; 0
    3b46:	8f e5       	ldi	r24, 0x5F	; 95
    3b48:	95 e0       	ldi	r25, 0x05	; 5
    3b4a:	42 cf       	rjmp	.-380    	; 0x39d0 <_uploadMessageRc>
    3b4c:	08 95       	ret

00003b4e <lora_driver_join>:
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	e8 2f       	mov	r30, r24
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	ee 0f       	add	r30, r30
    3b58:	ff 1f       	adc	r31, r31
    3b5a:	e7 5c       	subi	r30, 0xC7	; 199
    3b5c:	f8 4f       	sbci	r31, 0xF8	; 248
    3b5e:	60 81       	ld	r22, Z
    3b60:	71 81       	ldd	r23, Z+1	; 0x01
    3b62:	88 e6       	ldi	r24, 0x68	; 104
    3b64:	95 e0       	ldi	r25, 0x05	; 5
    3b66:	34 df       	rcall	.-408    	; 0x39d0 <_uploadMessageRc>
    3b68:	81 11       	cpse	r24, r1
    3b6a:	14 c0       	rjmp	.+40     	; 0x3b94 <lora_driver_join+0x46>
    3b6c:	08 e2       	ldi	r16, 0x28	; 40
    3b6e:	15 e0       	ldi	r17, 0x05	; 5
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	4d e2       	ldi	r20, 0x2D	; 45
    3b76:	50 e0       	ldi	r21, 0x00	; 0
    3b78:	68 e3       	ldi	r22, 0x38	; 56
    3b7a:	73 e1       	ldi	r23, 0x13	; 19
    3b7c:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    3b80:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    3b84:	0e 94 ca 09 	call	0x1394	; 0x1394 <xStreamBufferReceive>
    3b88:	88 23       	and	r24, r24
    3b8a:	21 f0       	breq	.+8      	; 0x3b94 <lora_driver_join+0x46>
    3b8c:	88 e3       	ldi	r24, 0x38	; 56
    3b8e:	93 e1       	ldi	r25, 0x13	; 19
    3b90:	aa de       	rcall	.-684    	; 0x38e6 <_reply2ReturnCode>
    3b92:	03 c0       	rjmp	.+6      	; 0x3b9a <lora_driver_join+0x4c>
    3b94:	88 e3       	ldi	r24, 0x38	; 56
    3b96:	93 e1       	ldi	r25, 0x13	; 19
    3b98:	a6 de       	rcall	.-692    	; 0x38e6 <_reply2ReturnCode>
    3b9a:	1f 91       	pop	r17
    3b9c:	0f 91       	pop	r16
    3b9e:	08 95       	ret

00003ba0 <lora_driver_sendUploadMessage>:
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
    3ba8:	1f 92       	push	r1
    3baa:	cd b7       	in	r28, 0x3d	; 61
    3bac:	de b7       	in	r29, 0x3e	; 62
    3bae:	db 01       	movw	r26, r22
    3bb0:	11 96       	adiw	r26, 0x01	; 1
    3bb2:	9c 91       	ld	r25, X
    3bb4:	11 97       	sbiw	r26, 0x01	; 1
    3bb6:	95 31       	cpi	r25, 0x15	; 21
    3bb8:	08 f0       	brcs	.+2      	; 0x3bbc <lora_driver_sendUploadMessage+0x1c>
    3bba:	b4 c0       	rjmp	.+360    	; 0x3d24 <lora_driver_sendUploadMessage+0x184>
    3bbc:	99 23       	and	r25, r25
    3bbe:	81 f1       	breq	.+96     	; 0x3c20 <lora_driver_sendUploadMessage+0x80>
    3bc0:	60 e0       	ldi	r22, 0x00	; 0
    3bc2:	70 e0       	ldi	r23, 0x00	; 0
    3bc4:	27 2f       	mov	r18, r23
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	46 2f       	mov	r20, r22
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	fd 01       	movw	r30, r26
    3bce:	e4 0f       	add	r30, r20
    3bd0:	f5 1f       	adc	r31, r21
    3bd2:	92 81       	ldd	r25, Z+2	; 0x02
    3bd4:	92 95       	swap	r25
    3bd6:	9f 70       	andi	r25, 0x0F	; 15
    3bd8:	9a 30       	cpi	r25, 0x0A	; 10
    3bda:	10 f0       	brcs	.+4      	; 0x3be0 <lora_driver_sendUploadMessage+0x40>
    3bdc:	99 5c       	subi	r25, 0xC9	; 201
    3bde:	01 c0       	rjmp	.+2      	; 0x3be2 <lora_driver_sendUploadMessage+0x42>
    3be0:	90 5d       	subi	r25, 0xD0	; 208
    3be2:	f9 01       	movw	r30, r18
    3be4:	e7 53       	subi	r30, 0x37	; 55
    3be6:	fd 4e       	sbci	r31, 0xED	; 237
    3be8:	90 83       	st	Z, r25
    3bea:	2f 5f       	subi	r18, 0xFF	; 255
    3bec:	3f 4f       	sbci	r19, 0xFF	; 255
    3bee:	fd 01       	movw	r30, r26
    3bf0:	e4 0f       	add	r30, r20
    3bf2:	f5 1f       	adc	r31, r21
    3bf4:	92 81       	ldd	r25, Z+2	; 0x02
    3bf6:	9f 70       	andi	r25, 0x0F	; 15
    3bf8:	49 2f       	mov	r20, r25
    3bfa:	50 e0       	ldi	r21, 0x00	; 0
    3bfc:	4a 30       	cpi	r20, 0x0A	; 10
    3bfe:	51 05       	cpc	r21, r1
    3c00:	14 f0       	brlt	.+4      	; 0x3c06 <lora_driver_sendUploadMessage+0x66>
    3c02:	99 5c       	subi	r25, 0xC9	; 201
    3c04:	01 c0       	rjmp	.+2      	; 0x3c08 <lora_driver_sendUploadMessage+0x68>
    3c06:	90 5d       	subi	r25, 0xD0	; 208
    3c08:	f9 01       	movw	r30, r18
    3c0a:	e7 53       	subi	r30, 0x37	; 55
    3c0c:	fd 4e       	sbci	r31, 0xED	; 237
    3c0e:	90 83       	st	Z, r25
    3c10:	7e 5f       	subi	r23, 0xFE	; 254
    3c12:	6f 5f       	subi	r22, 0xFF	; 255
    3c14:	11 96       	adiw	r26, 0x01	; 1
    3c16:	9c 91       	ld	r25, X
    3c18:	11 97       	sbiw	r26, 0x01	; 1
    3c1a:	69 17       	cp	r22, r25
    3c1c:	98 f2       	brcs	.-90     	; 0x3bc4 <lora_driver_sendUploadMessage+0x24>
    3c1e:	01 c0       	rjmp	.+2      	; 0x3c22 <lora_driver_sendUploadMessage+0x82>
    3c20:	70 e0       	ldi	r23, 0x00	; 0
    3c22:	e7 2f       	mov	r30, r23
    3c24:	f0 e0       	ldi	r31, 0x00	; 0
    3c26:	e7 53       	subi	r30, 0x37	; 55
    3c28:	fd 4e       	sbci	r31, 0xED	; 237
    3c2a:	10 82       	st	Z, r1
    3c2c:	4c 91       	ld	r20, X
    3c2e:	81 11       	cpse	r24, r1
    3c30:	03 c0       	rjmp	.+6      	; 0x3c38 <lora_driver_sendUploadMessage+0x98>
    3c32:	81 e7       	ldi	r24, 0x71	; 113
    3c34:	95 e0       	ldi	r25, 0x05	; 5
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <lora_driver_sendUploadMessage+0x9c>
    3c38:	83 e7       	ldi	r24, 0x73	; 115
    3c3a:	95 e0       	ldi	r25, 0x05	; 5
    3c3c:	29 ec       	ldi	r18, 0xC9	; 201
    3c3e:	32 e1       	ldi	r19, 0x12	; 18
    3c40:	3f 93       	push	r19
    3c42:	2f 93       	push	r18
    3c44:	1f 92       	push	r1
    3c46:	4f 93       	push	r20
    3c48:	9f 93       	push	r25
    3c4a:	8f 93       	push	r24
    3c4c:	87 e7       	ldi	r24, 0x77	; 119
    3c4e:	95 e0       	ldi	r25, 0x05	; 5
    3c50:	9f 93       	push	r25
    3c52:	8f 93       	push	r24
    3c54:	8b e0       	ldi	r24, 0x0B	; 11
    3c56:	93 e1       	ldi	r25, 0x13	; 19
    3c58:	9f 93       	push	r25
    3c5a:	8f 93       	push	r24
    3c5c:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <sprintf>
    3c60:	60 e0       	ldi	r22, 0x00	; 0
    3c62:	70 e0       	ldi	r23, 0x00	; 0
    3c64:	8b e0       	ldi	r24, 0x0B	; 11
    3c66:	93 e1       	ldi	r25, 0x13	; 19
    3c68:	b3 de       	rcall	.-666    	; 0x39d0 <_uploadMessageRc>
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	f8 94       	cli
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	cd bf       	out	0x3d, r28	; 61
    3c74:	81 11       	cpse	r24, r1
    3c76:	59 c0       	rjmp	.+178    	; 0x3d2a <lora_driver_sendUploadMessage+0x18a>
    3c78:	08 e2       	ldi	r16, 0x28	; 40
    3c7a:	15 e0       	ldi	r17, 0x05	; 5
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	4d e2       	ldi	r20, 0x2D	; 45
    3c82:	50 e0       	ldi	r21, 0x00	; 0
    3c84:	68 e3       	ldi	r22, 0x38	; 56
    3c86:	73 e1       	ldi	r23, 0x13	; 19
    3c88:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    3c8c:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    3c90:	0e 94 ca 09 	call	0x1394	; 0x1394 <xStreamBufferReceive>
    3c94:	88 23       	and	r24, r24
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <lora_driver_sendUploadMessage+0xfa>
    3c98:	47 c0       	rjmp	.+142    	; 0x3d28 <lora_driver_sendUploadMessage+0x188>
    3c9a:	88 e3       	ldi	r24, 0x38	; 56
    3c9c:	93 e1       	ldi	r25, 0x13	; 19
    3c9e:	23 de       	rcall	.-954    	; 0x38e6 <_reply2ReturnCode>
    3ca0:	8e 30       	cpi	r24, 0x0E	; 14
    3ca2:	09 f0       	breq	.+2      	; 0x3ca6 <lora_driver_sendUploadMessage+0x106>
    3ca4:	42 c0       	rjmp	.+132    	; 0x3d2a <lora_driver_sendUploadMessage+0x18a>
    3ca6:	87 e0       	ldi	r24, 0x07	; 7
    3ca8:	89 83       	std	Y+1, r24	; 0x01
    3caa:	80 91 ad 12 	lds	r24, 0x12AD	; 0x8012ad <_downlinkMessageBuffer>
    3cae:	90 91 ae 12 	lds	r25, 0x12AE	; 0x8012ae <_downlinkMessageBuffer+0x1>
    3cb2:	89 2b       	or	r24, r25
    3cb4:	a9 f1       	breq	.+106    	; 0x3d20 <lora_driver_sendUploadMessage+0x180>
    3cb6:	be 01       	movw	r22, r28
    3cb8:	6f 5f       	subi	r22, 0xFF	; 255
    3cba:	7f 4f       	sbci	r23, 0xFF	; 255
    3cbc:	88 e3       	ldi	r24, 0x38	; 56
    3cbe:	93 e1       	ldi	r25, 0x13	; 19
    3cc0:	68 d1       	rcall	.+720    	; 0x3f92 <decode_port_no>
    3cc2:	80 93 b3 12 	sts	0x12B3, r24	; 0x8012b3 <_downlinkPayload>
    3cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc8:	f0 e0       	ldi	r31, 0x00	; 0
    3cca:	e8 5c       	subi	r30, 0xC8	; 200
    3ccc:	fc 4e       	sbci	r31, 0xEC	; 236
    3cce:	df 01       	movw	r26, r30
    3cd0:	0d 90       	ld	r0, X+
    3cd2:	00 20       	and	r0, r0
    3cd4:	e9 f7       	brne	.-6      	; 0x3cd0 <lora_driver_sendUploadMessage+0x130>
    3cd6:	11 97       	sbiw	r26, 0x01	; 1
    3cd8:	ae 1b       	sub	r26, r30
    3cda:	bf 0b       	sbc	r27, r31
    3cdc:	aa 23       	and	r26, r26
    3cde:	91 f0       	breq	.+36     	; 0x3d04 <lora_driver_sendUploadMessage+0x164>
    3ce0:	bb 27       	eor	r27, r27
    3ce2:	cd 01       	movw	r24, r26
    3ce4:	01 97       	sbiw	r24, 0x01	; 1
    3ce6:	9c 01       	movw	r18, r24
    3ce8:	12 f4       	brpl	.+4      	; 0x3cee <lora_driver_sendUploadMessage+0x14e>
    3cea:	2f 5f       	subi	r18, 0xFF	; 255
    3cec:	3f 4f       	sbci	r19, 0xFF	; 255
    3cee:	35 95       	asr	r19
    3cf0:	27 95       	ror	r18
    3cf2:	20 93 b4 12 	sts	0x12B4, r18	; 0x8012b4 <_downlinkPayload+0x1>
    3cf6:	af 01       	movw	r20, r30
    3cf8:	4f 5f       	subi	r20, 0xFF	; 255
    3cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    3cfc:	64 e1       	ldi	r22, 0x14	; 20
    3cfe:	85 eb       	ldi	r24, 0xB5	; 181
    3d00:	92 e1       	ldi	r25, 0x12	; 18
    3d02:	73 d1       	rcall	.+742    	; 0x3fea <decode_hexadecimal_string_bytes>
    3d04:	01 e0       	ldi	r16, 0x01	; 1
    3d06:	10 e0       	ldi	r17, 0x00	; 0
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	46 e1       	ldi	r20, 0x16	; 22
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	63 eb       	ldi	r22, 0xB3	; 179
    3d12:	72 e1       	ldi	r23, 0x12	; 18
    3d14:	80 91 ad 12 	lds	r24, 0x12AD	; 0x8012ad <_downlinkMessageBuffer>
    3d18:	90 91 ae 12 	lds	r25, 0x12AE	; 0x8012ae <_downlinkMessageBuffer+0x1>
    3d1c:	0e 94 c3 08 	call	0x1186	; 0x1186 <xStreamBufferSend>
    3d20:	8e e0       	ldi	r24, 0x0E	; 14
    3d22:	03 c0       	rjmp	.+6      	; 0x3d2a <lora_driver_sendUploadMessage+0x18a>
    3d24:	84 e1       	ldi	r24, 0x14	; 20
    3d26:	01 c0       	rjmp	.+2      	; 0x3d2a <lora_driver_sendUploadMessage+0x18a>
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	0f 90       	pop	r0
    3d2c:	df 91       	pop	r29
    3d2e:	cf 91       	pop	r28
    3d30:	1f 91       	pop	r17
    3d32:	0f 91       	pop	r16
    3d34:	08 95       	ret

00003d36 <lora_driver_setAdaptiveDataRate>:
    3d36:	81 30       	cpi	r24, 0x01	; 1
    3d38:	19 f0       	breq	.+6      	; 0x3d40 <lora_driver_setAdaptiveDataRate+0xa>
    3d3a:	67 e8       	ldi	r22, 0x87	; 135
    3d3c:	75 e0       	ldi	r23, 0x05	; 5
    3d3e:	02 c0       	rjmp	.+4      	; 0x3d44 <lora_driver_setAdaptiveDataRate+0xe>
    3d40:	60 e6       	ldi	r22, 0x60	; 96
    3d42:	76 e0       	ldi	r23, 0x06	; 6
    3d44:	8b e8       	ldi	r24, 0x8B	; 139
    3d46:	95 e0       	ldi	r25, 0x05	; 5
    3d48:	43 ce       	rjmp	.-890    	; 0x39d0 <_uploadMessageRc>
    3d4a:	08 95       	ret

00003d4c <lora_driver_setReceiveDelay>:
    3d4c:	9f 93       	push	r25
    3d4e:	8f 93       	push	r24
    3d50:	8c eb       	ldi	r24, 0xBC	; 188
    3d52:	95 e0       	ldi	r25, 0x05	; 5
    3d54:	9f 93       	push	r25
    3d56:	8f 93       	push	r24
    3d58:	8b e0       	ldi	r24, 0x0B	; 11
    3d5a:	93 e1       	ldi	r25, 0x13	; 19
    3d5c:	9f 93       	push	r25
    3d5e:	8f 93       	push	r24
    3d60:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <sprintf>
    3d64:	60 e0       	ldi	r22, 0x00	; 0
    3d66:	70 e0       	ldi	r23, 0x00	; 0
    3d68:	8b e0       	ldi	r24, 0x0B	; 11
    3d6a:	93 e1       	ldi	r25, 0x13	; 19
    3d6c:	31 de       	rcall	.-926    	; 0x39d0 <_uploadMessageRc>
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	08 95       	ret

00003d7c <lora_driver_configureToEu868>:
    3d7c:	2f 92       	push	r2
    3d7e:	3f 92       	push	r3
    3d80:	4f 92       	push	r4
    3d82:	5f 92       	push	r5
    3d84:	6f 92       	push	r6
    3d86:	7f 92       	push	r7
    3d88:	8f 92       	push	r8
    3d8a:	9f 92       	push	r9
    3d8c:	af 92       	push	r10
    3d8e:	bf 92       	push	r11
    3d90:	cf 92       	push	r12
    3d92:	df 92       	push	r13
    3d94:	ef 92       	push	r14
    3d96:	ff 92       	push	r15
    3d98:	0f 93       	push	r16
    3d9a:	1f 93       	push	r17
    3d9c:	cf 93       	push	r28
    3d9e:	df 93       	push	r29
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
    3da4:	a0 97       	sbiw	r28, 0x20	; 32
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	cd bf       	out	0x3d, r28	; 61
    3db0:	69 ee       	ldi	r22, 0xE9	; 233
    3db2:	75 e0       	ldi	r23, 0x05	; 5
    3db4:	85 ef       	ldi	r24, 0xF5	; 245
    3db6:	95 e0       	ldi	r25, 0x05	; 5
    3db8:	3c dd       	rcall	.-1416   	; 0x3832 <_uploadMessage>
    3dba:	95 dd       	rcall	.-1238   	; 0x38e6 <_reply2ReturnCode>
    3dbc:	81 11       	cpse	r24, r1
    3dbe:	a3 c0       	rjmp	.+326    	; 0x3f06 <lora_driver_configureToEu868+0x18a>
    3dc0:	80 e2       	ldi	r24, 0x20	; 32
    3dc2:	e2 e2       	ldi	r30, 0x22	; 34
    3dc4:	f2 e0       	ldi	r31, 0x02	; 2
    3dc6:	de 01       	movw	r26, r28
    3dc8:	11 96       	adiw	r26, 0x01	; 1
    3dca:	01 90       	ld	r0, Z+
    3dcc:	0d 92       	st	X+, r0
    3dce:	8a 95       	dec	r24
    3dd0:	e1 f7       	brne	.-8      	; 0x3dca <lora_driver_configureToEu868+0x4e>
    3dd2:	9e 01       	movw	r18, r28
    3dd4:	2f 5f       	subi	r18, 0xFF	; 255
    3dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd8:	69 01       	movw	r12, r18
    3dda:	e1 2c       	mov	r14, r1
    3ddc:	f1 2c       	mov	r15, r1
    3dde:	0f 2e       	mov	r0, r31
    3de0:	f1 e0       	ldi	r31, 0x01	; 1
    3de2:	af 2e       	mov	r10, r31
    3de4:	f6 e0       	ldi	r31, 0x06	; 6
    3de6:	bf 2e       	mov	r11, r31
    3de8:	f0 2d       	mov	r31, r0
    3dea:	0b e0       	ldi	r16, 0x0B	; 11
    3dec:	13 e1       	ldi	r17, 0x13	; 19
    3dee:	0f 2e       	mov	r0, r31
    3df0:	fa e1       	ldi	r31, 0x1A	; 26
    3df2:	4f 2e       	mov	r4, r31
    3df4:	f6 e0       	ldi	r31, 0x06	; 6
    3df6:	5f 2e       	mov	r5, r31
    3df8:	f0 2d       	mov	r31, r0
    3dfa:	0f 2e       	mov	r0, r31
    3dfc:	f1 e3       	ldi	r31, 0x31	; 49
    3dfe:	8f 2e       	mov	r8, r31
    3e00:	f6 e0       	ldi	r31, 0x06	; 6
    3e02:	9f 2e       	mov	r9, r31
    3e04:	f0 2d       	mov	r31, r0
    3e06:	0f 2e       	mov	r0, r31
    3e08:	fb e4       	ldi	r31, 0x4B	; 75
    3e0a:	6f 2e       	mov	r6, r31
    3e0c:	f6 e0       	ldi	r31, 0x06	; 6
    3e0e:	7f 2e       	mov	r7, r31
    3e10:	f0 2d       	mov	r31, r0
    3e12:	3e 2c       	mov	r3, r14
    3e14:	2f 2c       	mov	r2, r15
    3e16:	ff 92       	push	r15
    3e18:	ef 92       	push	r14
    3e1a:	bf 92       	push	r11
    3e1c:	af 92       	push	r10
    3e1e:	1f 93       	push	r17
    3e20:	0f 93       	push	r16
    3e22:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <sprintf>
    3e26:	60 e0       	ldi	r22, 0x00	; 0
    3e28:	70 e0       	ldi	r23, 0x00	; 0
    3e2a:	c8 01       	movw	r24, r16
    3e2c:	02 dd       	rcall	.-1532   	; 0x3832 <_uploadMessage>
    3e2e:	5b dd       	rcall	.-1354   	; 0x38e6 <_reply2ReturnCode>
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
    3e36:	0f 90       	pop	r0
    3e38:	0f 90       	pop	r0
    3e3a:	0f 90       	pop	r0
    3e3c:	81 11       	cpse	r24, r1
    3e3e:	63 c0       	rjmp	.+198    	; 0x3f06 <lora_driver_configureToEu868+0x18a>
    3e40:	32 e0       	ldi	r19, 0x02	; 2
    3e42:	3e 15       	cp	r19, r14
    3e44:	e8 f4       	brcc	.+58     	; 0x3e80 <lora_driver_configureToEu868+0x104>
    3e46:	f6 01       	movw	r30, r12
    3e48:	83 81       	ldd	r24, Z+3	; 0x03
    3e4a:	8f 93       	push	r24
    3e4c:	82 81       	ldd	r24, Z+2	; 0x02
    3e4e:	8f 93       	push	r24
    3e50:	81 81       	ldd	r24, Z+1	; 0x01
    3e52:	8f 93       	push	r24
    3e54:	80 81       	ld	r24, Z
    3e56:	8f 93       	push	r24
    3e58:	ff 92       	push	r15
    3e5a:	ef 92       	push	r14
    3e5c:	5f 92       	push	r5
    3e5e:	4f 92       	push	r4
    3e60:	1f 93       	push	r17
    3e62:	0f 93       	push	r16
    3e64:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <sprintf>
    3e68:	60 e0       	ldi	r22, 0x00	; 0
    3e6a:	70 e0       	ldi	r23, 0x00	; 0
    3e6c:	c8 01       	movw	r24, r16
    3e6e:	e1 dc       	rcall	.-1598   	; 0x3832 <_uploadMessage>
    3e70:	3a dd       	rcall	.-1420   	; 0x38e6 <_reply2ReturnCode>
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	81 11       	cpse	r24, r1
    3e7e:	43 c0       	rjmp	.+134    	; 0x3f06 <lora_driver_configureToEu868+0x18a>
    3e80:	2f 92       	push	r2
    3e82:	3f 92       	push	r3
    3e84:	9f 92       	push	r9
    3e86:	8f 92       	push	r8
    3e88:	1f 93       	push	r17
    3e8a:	0f 93       	push	r16
    3e8c:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <sprintf>
    3e90:	60 e0       	ldi	r22, 0x00	; 0
    3e92:	70 e0       	ldi	r23, 0x00	; 0
    3e94:	c8 01       	movw	r24, r16
    3e96:	cd dc       	rcall	.-1638   	; 0x3832 <_uploadMessage>
    3e98:	26 dd       	rcall	.-1460   	; 0x38e6 <_reply2ReturnCode>
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
    3ea6:	81 11       	cpse	r24, r1
    3ea8:	2e c0       	rjmp	.+92     	; 0x3f06 <lora_driver_configureToEu868+0x18a>
    3eaa:	2f 92       	push	r2
    3eac:	3f 92       	push	r3
    3eae:	7f 92       	push	r7
    3eb0:	6f 92       	push	r6
    3eb2:	1f 93       	push	r17
    3eb4:	0f 93       	push	r16
    3eb6:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <sprintf>
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	70 e0       	ldi	r23, 0x00	; 0
    3ebe:	c8 01       	movw	r24, r16
    3ec0:	b8 dc       	rcall	.-1680   	; 0x3832 <_uploadMessage>
    3ec2:	11 dd       	rcall	.-1502   	; 0x38e6 <_reply2ReturnCode>
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	0f 90       	pop	r0
    3ece:	0f 90       	pop	r0
    3ed0:	81 11       	cpse	r24, r1
    3ed2:	19 c0       	rjmp	.+50     	; 0x3f06 <lora_driver_configureToEu868+0x18a>
    3ed4:	3f ef       	ldi	r19, 0xFF	; 255
    3ed6:	e3 1a       	sub	r14, r19
    3ed8:	f3 0a       	sbc	r15, r19
    3eda:	84 e0       	ldi	r24, 0x04	; 4
    3edc:	c8 0e       	add	r12, r24
    3ede:	d1 1c       	adc	r13, r1
    3ee0:	98 e0       	ldi	r25, 0x08	; 8
    3ee2:	e9 16       	cp	r14, r25
    3ee4:	f1 04       	cpc	r15, r1
    3ee6:	09 f0       	breq	.+2      	; 0x3eea <lora_driver_configureToEu868+0x16e>
    3ee8:	94 cf       	rjmp	.-216    	; 0x3e12 <lora_driver_configureToEu868+0x96>
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	70 e0       	ldi	r23, 0x00	; 0
    3eee:	83 e6       	ldi	r24, 0x63	; 99
    3ef0:	96 e0       	ldi	r25, 0x06	; 6
    3ef2:	9f dc       	rcall	.-1730   	; 0x3832 <_uploadMessage>
    3ef4:	f8 dc       	rcall	.-1552   	; 0x38e6 <_reply2ReturnCode>
    3ef6:	81 11       	cpse	r24, r1
    3ef8:	06 c0       	rjmp	.+12     	; 0x3f06 <lora_driver_configureToEu868+0x18a>
    3efa:	60 e0       	ldi	r22, 0x00	; 0
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	84 e7       	ldi	r24, 0x74	; 116
    3f00:	96 e0       	ldi	r25, 0x06	; 6
    3f02:	97 dc       	rcall	.-1746   	; 0x3832 <_uploadMessage>
    3f04:	f0 dc       	rcall	.-1568   	; 0x38e6 <_reply2ReturnCode>
    3f06:	a0 96       	adiw	r28, 0x20	; 32
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	f8 94       	cli
    3f0c:	de bf       	out	0x3e, r29	; 62
    3f0e:	0f be       	out	0x3f, r0	; 63
    3f10:	cd bf       	out	0x3d, r28	; 61
    3f12:	df 91       	pop	r29
    3f14:	cf 91       	pop	r28
    3f16:	1f 91       	pop	r17
    3f18:	0f 91       	pop	r16
    3f1a:	ff 90       	pop	r15
    3f1c:	ef 90       	pop	r14
    3f1e:	df 90       	pop	r13
    3f20:	cf 90       	pop	r12
    3f22:	bf 90       	pop	r11
    3f24:	af 90       	pop	r10
    3f26:	9f 90       	pop	r9
    3f28:	8f 90       	pop	r8
    3f2a:	7f 90       	pop	r7
    3f2c:	6f 90       	pop	r6
    3f2e:	5f 90       	pop	r5
    3f30:	4f 90       	pop	r4
    3f32:	3f 90       	pop	r3
    3f34:	2f 90       	pop	r2
    3f36:	08 95       	ret

00003f38 <lora_driver_setOtaaIdentity>:
    3f38:	ef 92       	push	r14
    3f3a:	ff 92       	push	r15
    3f3c:	0f 93       	push	r16
    3f3e:	1f 93       	push	r17
    3f40:	cf 93       	push	r28
    3f42:	df 93       	push	r29
    3f44:	ec 01       	movw	r28, r24
    3f46:	8b 01       	movw	r16, r22
    3f48:	7a 01       	movw	r14, r20
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	f4 de       	rcall	.-536    	; 0x3d36 <lora_driver_setAdaptiveDataRate>
    3f4e:	81 11       	cpse	r24, r1
    3f50:	0d c0       	rjmp	.+26     	; 0x3f6c <lora_driver_setOtaaIdentity+0x34>
    3f52:	ce 01       	movw	r24, r28
    3f54:	d4 dd       	rcall	.-1112   	; 0x3afe <lora_driver_setApplicationIdentifier>
    3f56:	81 11       	cpse	r24, r1
    3f58:	09 c0       	rjmp	.+18     	; 0x3f6c <lora_driver_setOtaaIdentity+0x34>
    3f5a:	c8 01       	movw	r24, r16
    3f5c:	e1 dd       	rcall	.-1086   	; 0x3b20 <lora_driver_setApplicationKey>
    3f5e:	81 11       	cpse	r24, r1
    3f60:	05 c0       	rjmp	.+10     	; 0x3f6c <lora_driver_setOtaaIdentity+0x34>
    3f62:	c7 01       	movw	r24, r14
    3f64:	bb dd       	rcall	.-1162   	; 0x3adc <lora_driver_setDeviceIdentifier>
    3f66:	81 11       	cpse	r24, r1
    3f68:	01 c0       	rjmp	.+2      	; 0x3f6c <lora_driver_setOtaaIdentity+0x34>
    3f6a:	eb dd       	rcall	.-1066   	; 0x3b42 <lora_driver_saveMac>
    3f6c:	df 91       	pop	r29
    3f6e:	cf 91       	pop	r28
    3f70:	1f 91       	pop	r17
    3f72:	0f 91       	pop	r16
    3f74:	ff 90       	pop	r15
    3f76:	ef 90       	pop	r14
    3f78:	08 95       	ret

00003f7a <lora_driver_mapReturnCodeToText>:
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	ee 0f       	add	r30, r30
    3f80:	ff 1f       	adc	r31, r31
    3f82:	8e 0f       	add	r24, r30
    3f84:	9f 1f       	adc	r25, r31
    3f86:	fc 01       	movw	r30, r24
    3f88:	e3 5c       	subi	r30, 0xC3	; 195
    3f8a:	f8 4f       	sbci	r31, 0xF8	; 248
    3f8c:	81 81       	ldd	r24, Z+1	; 0x01
    3f8e:	92 81       	ldd	r25, Z+2	; 0x02
    3f90:	08 95       	ret

00003f92 <decode_port_no>:
    3f92:	dc 01       	movw	r26, r24
    3f94:	00 97       	sbiw	r24, 0x00	; 0
    3f96:	29 f1       	breq	.+74     	; 0x3fe2 <decode_port_no+0x50>
    3f98:	fb 01       	movw	r30, r22
    3f9a:	20 81       	ld	r18, Z
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	01 90       	ld	r0, Z+
    3fa0:	00 20       	and	r0, r0
    3fa2:	e9 f7       	brne	.-6      	; 0x3f9e <decode_port_no+0xc>
    3fa4:	31 97       	sbiw	r30, 0x01	; 1
    3fa6:	e8 1b       	sub	r30, r24
    3fa8:	f9 0b       	sbc	r31, r25
    3faa:	82 2f       	mov	r24, r18
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	e8 17       	cp	r30, r24
    3fb0:	f9 07       	cpc	r31, r25
    3fb2:	c8 f0       	brcs	.+50     	; 0x3fe6 <decode_port_no+0x54>
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	08 c0       	rjmp	.+16     	; 0x3fc8 <decode_port_no+0x36>
    3fb8:	88 0f       	add	r24, r24
    3fba:	38 2f       	mov	r19, r24
    3fbc:	33 0f       	add	r19, r19
    3fbe:	33 0f       	add	r19, r19
    3fc0:	83 0f       	add	r24, r19
    3fc2:	80 53       	subi	r24, 0x30	; 48
    3fc4:	89 0f       	add	r24, r25
    3fc6:	2f 5f       	subi	r18, 0xFF	; 255
    3fc8:	fd 01       	movw	r30, r26
    3fca:	e2 0f       	add	r30, r18
    3fcc:	f1 1d       	adc	r31, r1
    3fce:	90 81       	ld	r25, Z
    3fd0:	30 ed       	ldi	r19, 0xD0	; 208
    3fd2:	39 0f       	add	r19, r25
    3fd4:	3a 30       	cpi	r19, 0x0A	; 10
    3fd6:	10 f4       	brcc	.+4      	; 0x3fdc <decode_port_no+0x4a>
    3fd8:	91 11       	cpse	r25, r1
    3fda:	ee cf       	rjmp	.-36     	; 0x3fb8 <decode_port_no+0x26>
    3fdc:	fb 01       	movw	r30, r22
    3fde:	20 83       	st	Z, r18
    3fe0:	08 95       	ret
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	08 95       	ret
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	08 95       	ret

00003fea <decode_hexadecimal_string_bytes>:
    3fea:	0f 93       	push	r16
    3fec:	1f 93       	push	r17
    3fee:	cf 93       	push	r28
    3ff0:	df 93       	push	r29
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	ea 01       	movw	r28, r20
    3ff6:	20 97       	sbiw	r28, 0x00	; 0
    3ff8:	e1 f1       	breq	.+120    	; 0x4072 <decode_hexadecimal_string_bytes+0x88>
    3ffa:	fa 01       	movw	r30, r20
    3ffc:	01 90       	ld	r0, Z+
    3ffe:	00 20       	and	r0, r0
    4000:	e9 f7       	brne	.-6      	; 0x3ffc <decode_hexadecimal_string_bytes+0x12>
    4002:	31 97       	sbiw	r30, 0x01	; 1
    4004:	e4 1b       	sub	r30, r20
    4006:	f5 0b       	sbc	r31, r21
    4008:	32 97       	sbiw	r30, 0x02	; 2
    400a:	10 f5       	brcc	.+68     	; 0x4050 <decode_hexadecimal_string_bytes+0x66>
    400c:	32 c0       	rjmp	.+100    	; 0x4072 <decode_hexadecimal_string_bytes+0x88>
    400e:	8d 01       	movw	r16, r26
    4010:	04 0f       	add	r16, r20
    4012:	15 1f       	adc	r17, r21
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	ae 01       	movw	r20, r28
    4018:	42 0f       	add	r20, r18
    401a:	53 1f       	adc	r21, r19
    401c:	fa 01       	movw	r30, r20
    401e:	90 81       	ld	r25, Z
    4020:	91 34       	cpi	r25, 0x41	; 65
    4022:	28 f0       	brcs	.+10     	; 0x402e <decode_hexadecimal_string_bytes+0x44>
    4024:	97 53       	subi	r25, 0x37	; 55
    4026:	59 2f       	mov	r21, r25
    4028:	52 95       	swap	r21
    402a:	50 7f       	andi	r21, 0xF0	; 240
    402c:	03 c0       	rjmp	.+6      	; 0x4034 <decode_hexadecimal_string_bytes+0x4a>
    402e:	59 2f       	mov	r21, r25
    4030:	52 95       	swap	r21
    4032:	50 7f       	andi	r21, 0xF0	; 240
    4034:	2c 0f       	add	r18, r28
    4036:	3d 1f       	adc	r19, r29
    4038:	f9 01       	movw	r30, r18
    403a:	91 81       	ldd	r25, Z+1	; 0x01
    403c:	91 34       	cpi	r25, 0x41	; 65
    403e:	10 f0       	brcs	.+4      	; 0x4044 <decode_hexadecimal_string_bytes+0x5a>
    4040:	97 53       	subi	r25, 0x37	; 55
    4042:	01 c0       	rjmp	.+2      	; 0x4046 <decode_hexadecimal_string_bytes+0x5c>
    4044:	90 53       	subi	r25, 0x30	; 48
    4046:	95 0f       	add	r25, r21
    4048:	f8 01       	movw	r30, r16
    404a:	90 83       	st	Z, r25
    404c:	8f 5f       	subi	r24, 0xFF	; 255
    404e:	01 c0       	rjmp	.+2      	; 0x4052 <decode_hexadecimal_string_bytes+0x68>
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	28 2f       	mov	r18, r24
    4054:	22 0f       	add	r18, r18
    4056:	48 2f       	mov	r20, r24
    4058:	50 e0       	ldi	r21, 0x00	; 0
    405a:	fe 01       	movw	r30, r28
    405c:	01 90       	ld	r0, Z+
    405e:	00 20       	and	r0, r0
    4060:	e9 f7       	brne	.-6      	; 0x405c <decode_hexadecimal_string_bytes+0x72>
    4062:	31 97       	sbiw	r30, 0x01	; 1
    4064:	ec 1b       	sub	r30, r28
    4066:	fd 0b       	sbc	r31, r29
    4068:	4e 17       	cp	r20, r30
    406a:	5f 07       	cpc	r21, r31
    406c:	10 f4       	brcc	.+4      	; 0x4072 <decode_hexadecimal_string_bytes+0x88>
    406e:	86 13       	cpse	r24, r22
    4070:	ce cf       	rjmp	.-100    	; 0x400e <decode_hexadecimal_string_bytes+0x24>
    4072:	df 91       	pop	r29
    4074:	cf 91       	pop	r28
    4076:	1f 91       	pop	r17
    4078:	0f 91       	pop	r16
    407a:	08 95       	ret

0000407c <_serialCallBack>:
    407c:	80 91 68 13 	lds	r24, 0x1368	; 0x801368 <crc_sum.1945>
    4080:	86 0f       	add	r24, r22
    4082:	80 93 68 13 	sts	0x1368, r24	; 0x801368 <crc_sum.1945>
    4086:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_mh_state>
    408a:	91 30       	cpi	r25, 0x01	; 1
    408c:	79 f0       	breq	.+30     	; 0x40ac <_serialCallBack+0x30>
    408e:	28 f0       	brcs	.+10     	; 0x409a <_serialCallBack+0x1e>
    4090:	92 30       	cpi	r25, 0x02	; 2
    4092:	a9 f0       	breq	.+42     	; 0x40be <_serialCallBack+0x42>
    4094:	93 30       	cpi	r25, 0x03	; 3
    4096:	19 f1       	breq	.+70     	; 0x40de <_serialCallBack+0x62>
    4098:	08 95       	ret
    409a:	6f 3f       	cpi	r22, 0xFF	; 255
    409c:	09 f0       	breq	.+2      	; 0x40a0 <_serialCallBack+0x24>
    409e:	48 c0       	rjmp	.+144    	; 0x4130 <_serialCallBack+0xb4>
    40a0:	10 92 68 13 	sts	0x1368, r1	; 0x801368 <crc_sum.1945>
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	80 93 6b 13 	sts	0x136B, r24	; 0x80136b <_mh_state>
    40aa:	08 95       	ret
    40ac:	66 38       	cpi	r22, 0x86	; 134
    40ae:	09 f0       	breq	.+2      	; 0x40b2 <_serialCallBack+0x36>
    40b0:	3f c0       	rjmp	.+126    	; 0x4130 <_serialCallBack+0xb4>
    40b2:	10 92 67 13 	sts	0x1367, r1	; 0x801367 <inDex.1943>
    40b6:	82 e0       	ldi	r24, 0x02	; 2
    40b8:	80 93 6b 13 	sts	0x136B, r24	; 0x80136b <_mh_state>
    40bc:	08 95       	ret
    40be:	e0 91 67 13 	lds	r30, 0x1367	; 0x801367 <inDex.1943>
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	8e 0f       	add	r24, r30
    40c6:	80 93 67 13 	sts	0x1367, r24	; 0x801367 <inDex.1943>
    40ca:	f0 e0       	ldi	r31, 0x00	; 0
    40cc:	eb 59       	subi	r30, 0x9B	; 155
    40ce:	fc 4e       	sbci	r31, 0xEC	; 236
    40d0:	60 83       	st	Z, r22
    40d2:	82 30       	cpi	r24, 0x02	; 2
    40d4:	69 f5       	brne	.+90     	; 0x4130 <_serialCallBack+0xb4>
    40d6:	83 e0       	ldi	r24, 0x03	; 3
    40d8:	80 93 6b 13 	sts	0x136B, r24	; 0x80136b <_mh_state>
    40dc:	08 95       	ret
    40de:	90 91 67 13 	lds	r25, 0x1367	; 0x801367 <inDex.1943>
    40e2:	21 e0       	ldi	r18, 0x01	; 1
    40e4:	29 0f       	add	r18, r25
    40e6:	20 93 67 13 	sts	0x1367, r18	; 0x801367 <inDex.1943>
    40ea:	96 30       	cpi	r25, 0x06	; 6
    40ec:	09 f5       	brne	.+66     	; 0x4130 <_serialCallBack+0xb4>
    40ee:	81 11       	cpse	r24, r1
    40f0:	0e c0       	rjmp	.+28     	; 0x410e <_serialCallBack+0x92>
    40f2:	e5 e6       	ldi	r30, 0x65	; 101
    40f4:	f3 e1       	ldi	r31, 0x13	; 19
    40f6:	80 81       	ld	r24, Z
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	98 2f       	mov	r25, r24
    40fc:	88 27       	eor	r24, r24
    40fe:	21 81       	ldd	r18, Z+1	; 0x01
    4100:	82 0f       	add	r24, r18
    4102:	91 1d       	adc	r25, r1
    4104:	90 93 6d 13 	sts	0x136D, r25	; 0x80136d <_ppm+0x1>
    4108:	80 93 6c 13 	sts	0x136C, r24	; 0x80136c <_ppm>
    410c:	04 c0       	rjmp	.+8      	; 0x4116 <_serialCallBack+0x9a>
    410e:	10 92 6d 13 	sts	0x136D, r1	; 0x80136d <_ppm+0x1>
    4112:	10 92 6c 13 	sts	0x136C, r1	; 0x80136c <_ppm>
    4116:	10 92 6b 13 	sts	0x136B, r1	; 0x80136b <_mh_state>
    411a:	e0 91 69 13 	lds	r30, 0x1369	; 0x801369 <_appCallBack>
    411e:	f0 91 6a 13 	lds	r31, 0x136A	; 0x80136a <_appCallBack+0x1>
    4122:	30 97       	sbiw	r30, 0x00	; 0
    4124:	29 f0       	breq	.+10     	; 0x4130 <_serialCallBack+0xb4>
    4126:	80 91 6c 13 	lds	r24, 0x136C	; 0x80136c <_ppm>
    412a:	90 91 6d 13 	lds	r25, 0x136D	; 0x80136d <_ppm+0x1>
    412e:	19 95       	eicall
    4130:	08 95       	ret

00004132 <mh_z19_initialise>:
    4132:	8f 92       	push	r8
    4134:	9f 92       	push	r9
    4136:	af 92       	push	r10
    4138:	cf 92       	push	r12
    413a:	ef 92       	push	r14
    413c:	0f 93       	push	r16
    413e:	0f 2e       	mov	r0, r31
    4140:	fe e3       	ldi	r31, 0x3E	; 62
    4142:	8f 2e       	mov	r8, r31
    4144:	f0 e2       	ldi	r31, 0x20	; 32
    4146:	9f 2e       	mov	r9, r31
    4148:	f0 2d       	mov	r31, r0
    414a:	68 94       	set
    414c:	aa 24       	eor	r10, r10
    414e:	a4 f8       	bld	r10, 4
    4150:	68 94       	set
    4152:	cc 24       	eor	r12, r12
    4154:	c4 f8       	bld	r12, 4
    4156:	e1 2c       	mov	r14, r1
    4158:	00 e0       	ldi	r16, 0x00	; 0
    415a:	23 e0       	ldi	r18, 0x03	; 3
    415c:	40 e8       	ldi	r20, 0x80	; 128
    415e:	55 e2       	ldi	r21, 0x25	; 37
    4160:	60 e0       	ldi	r22, 0x00	; 0
    4162:	70 e0       	ldi	r23, 0x00	; 0
    4164:	3f d0       	rcall	.+126    	; 0x41e4 <serial_create>
    4166:	90 93 6f 13 	sts	0x136F, r25	; 0x80136f <_serial+0x1>
    416a:	80 93 6e 13 	sts	0x136E, r24	; 0x80136e <_serial>
    416e:	0f 91       	pop	r16
    4170:	ef 90       	pop	r14
    4172:	cf 90       	pop	r12
    4174:	af 90       	pop	r10
    4176:	9f 90       	pop	r9
    4178:	8f 90       	pop	r8
    417a:	08 95       	ret

0000417c <mh_z19_injectCallBack>:
    417c:	90 93 6a 13 	sts	0x136A, r25	; 0x80136a <_appCallBack+0x1>
    4180:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <_appCallBack>
    4184:	08 95       	ret

00004186 <mh_z19_takeMeassuring>:
    4186:	cf 93       	push	r28
    4188:	df 93       	push	r29
    418a:	cd b7       	in	r28, 0x3d	; 61
    418c:	de b7       	in	r29, 0x3e	; 62
    418e:	29 97       	sbiw	r28, 0x09	; 9
    4190:	0f b6       	in	r0, 0x3f	; 63
    4192:	f8 94       	cli
    4194:	de bf       	out	0x3e, r29	; 62
    4196:	0f be       	out	0x3f, r0	; 63
    4198:	cd bf       	out	0x3d, r28	; 61
    419a:	89 e0       	ldi	r24, 0x09	; 9
    419c:	e2 e4       	ldi	r30, 0x42	; 66
    419e:	f2 e0       	ldi	r31, 0x02	; 2
    41a0:	9e 01       	movw	r18, r28
    41a2:	2f 5f       	subi	r18, 0xFF	; 255
    41a4:	3f 4f       	sbci	r19, 0xFF	; 255
    41a6:	d9 01       	movw	r26, r18
    41a8:	01 90       	ld	r0, Z+
    41aa:	0d 92       	st	X+, r0
    41ac:	8a 95       	dec	r24
    41ae:	e1 f7       	brne	.-8      	; 0x41a8 <mh_z19_takeMeassuring+0x22>
    41b0:	10 92 6d 13 	sts	0x136D, r1	; 0x80136d <_ppm+0x1>
    41b4:	10 92 6c 13 	sts	0x136C, r1	; 0x80136c <_ppm>
    41b8:	80 91 6e 13 	lds	r24, 0x136E	; 0x80136e <_serial>
    41bc:	90 91 6f 13 	lds	r25, 0x136F	; 0x80136f <_serial+0x1>
    41c0:	00 97       	sbiw	r24, 0x00	; 0
    41c2:	31 f0       	breq	.+12     	; 0x41d0 <mh_z19_takeMeassuring+0x4a>
    41c4:	42 2f       	mov	r20, r18
    41c6:	53 2f       	mov	r21, r19
    41c8:	69 e0       	ldi	r22, 0x09	; 9
    41ca:	d9 d0       	rcall	.+434    	; 0x437e <serial_sendBytes>
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	01 c0       	rjmp	.+2      	; 0x41d2 <mh_z19_takeMeassuring+0x4c>
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	29 96       	adiw	r28, 0x09	; 9
    41d4:	0f b6       	in	r0, 0x3f	; 63
    41d6:	f8 94       	cli
    41d8:	de bf       	out	0x3e, r29	; 62
    41da:	0f be       	out	0x3f, r0	; 63
    41dc:	cd bf       	out	0x3d, r28	; 61
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	08 95       	ret

000041e4 <serial_create>:
    41e4:	2f 92       	push	r2
    41e6:	3f 92       	push	r3
    41e8:	4f 92       	push	r4
    41ea:	5f 92       	push	r5
    41ec:	6f 92       	push	r6
    41ee:	7f 92       	push	r7
    41f0:	8f 92       	push	r8
    41f2:	9f 92       	push	r9
    41f4:	af 92       	push	r10
    41f6:	cf 92       	push	r12
    41f8:	ef 92       	push	r14
    41fa:	ff 92       	push	r15
    41fc:	0f 93       	push	r16
    41fe:	1f 93       	push	r17
    4200:	cf 93       	push	r28
    4202:	df 93       	push	r29
    4204:	cd b7       	in	r28, 0x3d	; 61
    4206:	de b7       	in	r29, 0x3e	; 62
    4208:	f8 2e       	mov	r15, r24
    420a:	2a 01       	movw	r4, r20
    420c:	3b 01       	movw	r6, r22
    420e:	88 e0       	ldi	r24, 0x08	; 8
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	0e 94 22 2a 	call	0x5444	; 0x5444 <malloc>
    4216:	8c 01       	movw	r16, r24
    4218:	8f 2d       	mov	r24, r15
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	fc 01       	movw	r30, r24
    421e:	ee 0f       	add	r30, r30
    4220:	ff 1f       	adc	r31, r31
    4222:	e0 59       	subi	r30, 0x90	; 144
    4224:	fc 4e       	sbci	r31, 0xEC	; 236
    4226:	11 83       	std	Z+1, r17	; 0x01
    4228:	00 83       	st	Z, r16
    422a:	01 15       	cp	r16, r1
    422c:	11 05       	cpc	r17, r1
    422e:	09 f4       	brne	.+2      	; 0x4232 <serial_create+0x4e>
    4230:	69 c0       	rjmp	.+210    	; 0x4304 <serial_create+0x120>
    4232:	88 0f       	add	r24, r24
    4234:	99 1f       	adc	r25, r25
    4236:	fc 01       	movw	r30, r24
    4238:	e5 5f       	subi	r30, 0xF5	; 245
    423a:	fd 4f       	sbci	r31, 0xFD	; 253
    423c:	80 81       	ld	r24, Z
    423e:	91 81       	ldd	r25, Z+1	; 0x01
    4240:	d8 01       	movw	r26, r16
    4242:	8d 93       	st	X+, r24
    4244:	9c 93       	st	X, r25
    4246:	6c 2d       	mov	r22, r12
    4248:	70 e0       	ldi	r23, 0x00	; 0
    424a:	84 e0       	ldi	r24, 0x04	; 4
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	0e 94 08 2a 	call	0x5410	; 0x5410 <calloc>
    4252:	1c 01       	movw	r2, r24
    4254:	61 e0       	ldi	r22, 0x01	; 1
    4256:	70 e0       	ldi	r23, 0x00	; 0
    4258:	86 e0       	ldi	r24, 0x06	; 6
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	0e 94 08 2a 	call	0x5410	; 0x5410 <calloc>
    4260:	7c 01       	movw	r14, r24
    4262:	4c 2d       	mov	r20, r12
    4264:	b1 01       	movw	r22, r2
    4266:	f1 d6       	rcall	.+3554   	; 0x504a <fifo_init>
    4268:	f8 01       	movw	r30, r16
    426a:	f5 82       	std	Z+5, r15	; 0x05
    426c:	e4 82       	std	Z+4, r14	; 0x04
    426e:	6a 2d       	mov	r22, r10
    4270:	70 e0       	ldi	r23, 0x00	; 0
    4272:	84 e0       	ldi	r24, 0x04	; 4
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	0e 94 08 2a 	call	0x5410	; 0x5410 <calloc>
    427a:	1c 01       	movw	r2, r24
    427c:	61 e0       	ldi	r22, 0x01	; 1
    427e:	70 e0       	ldi	r23, 0x00	; 0
    4280:	86 e0       	ldi	r24, 0x06	; 6
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	0e 94 08 2a 	call	0x5410	; 0x5410 <calloc>
    4288:	7c 01       	movw	r14, r24
    428a:	4a 2d       	mov	r20, r10
    428c:	b1 01       	movw	r22, r2
    428e:	dd d6       	rcall	.+3514   	; 0x504a <fifo_init>
    4290:	d8 01       	movw	r26, r16
    4292:	13 96       	adiw	r26, 0x03	; 3
    4294:	fc 92       	st	X, r15
    4296:	ee 92       	st	-X, r14
    4298:	12 97       	sbiw	r26, 0x02	; 2
    429a:	17 96       	adiw	r26, 0x07	; 7
    429c:	9c 92       	st	X, r9
    429e:	8e 92       	st	-X, r8
    42a0:	16 97       	sbiw	r26, 0x06	; 6
    42a2:	ff b6       	in	r15, 0x3f	; 63
    42a4:	f8 94       	cli
    42a6:	ed 91       	ld	r30, X+
    42a8:	fc 91       	ld	r31, X
    42aa:	11 97       	sbiw	r26, 0x01	; 1
    42ac:	36 97       	sbiw	r30, 0x06	; 6
    42ae:	80 81       	ld	r24, Z
    42b0:	82 60       	ori	r24, 0x02	; 2
    42b2:	80 83       	st	Z, r24
    42b4:	8d 90       	ld	r8, X+
    42b6:	9c 90       	ld	r9, X
    42b8:	c3 01       	movw	r24, r6
    42ba:	b2 01       	movw	r22, r4
    42bc:	b4 d7       	rcall	.+3944   	; 0x5226 <__floatunsisf>
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	40 e0       	ldi	r20, 0x00	; 0
    42c4:	51 e4       	ldi	r21, 0x41	; 65
    42c6:	0e 94 78 29 	call	0x52f0	; 0x52f0 <__mulsf3>
    42ca:	9b 01       	movw	r18, r22
    42cc:	ac 01       	movw	r20, r24
    42ce:	60 e0       	ldi	r22, 0x00	; 0
    42d0:	74 e2       	ldi	r23, 0x24	; 36
    42d2:	84 e7       	ldi	r24, 0x74	; 116
    42d4:	9b e4       	ldi	r25, 0x4B	; 75
    42d6:	3c d7       	rcall	.+3704   	; 0x5150 <__divsf3>
    42d8:	20 e0       	ldi	r18, 0x00	; 0
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	40 e8       	ldi	r20, 0x80	; 128
    42de:	5f e3       	ldi	r21, 0x3F	; 63
    42e0:	d0 d6       	rcall	.+3488   	; 0x5082 <__subsf3>
    42e2:	71 d9       	rcall	.-3358   	; 0x35c6 <__fixunssfsi>
    42e4:	f4 01       	movw	r30, r8
    42e6:	32 97       	sbiw	r30, 0x02	; 2
    42e8:	60 83       	st	Z, r22
    42ea:	d8 01       	movw	r26, r16
    42ec:	ed 91       	ld	r30, X+
    42ee:	fc 91       	ld	r31, X
    42f0:	11 97       	sbiw	r26, 0x01	; 1
    42f2:	35 97       	sbiw	r30, 0x05	; 5
    42f4:	88 e9       	ldi	r24, 0x98	; 152
    42f6:	80 83       	st	Z, r24
    42f8:	ed 91       	ld	r30, X+
    42fa:	fc 91       	ld	r31, X
    42fc:	34 97       	sbiw	r30, 0x04	; 4
    42fe:	86 e0       	ldi	r24, 0x06	; 6
    4300:	80 83       	st	Z, r24
    4302:	ff be       	out	0x3f, r15	; 63
    4304:	c8 01       	movw	r24, r16
    4306:	df 91       	pop	r29
    4308:	cf 91       	pop	r28
    430a:	1f 91       	pop	r17
    430c:	0f 91       	pop	r16
    430e:	ff 90       	pop	r15
    4310:	ef 90       	pop	r14
    4312:	cf 90       	pop	r12
    4314:	af 90       	pop	r10
    4316:	9f 90       	pop	r9
    4318:	8f 90       	pop	r8
    431a:	7f 90       	pop	r7
    431c:	6f 90       	pop	r6
    431e:	5f 90       	pop	r5
    4320:	4f 90       	pop	r4
    4322:	3f 90       	pop	r3
    4324:	2f 90       	pop	r2
    4326:	08 95       	ret

00004328 <serial_sendByte>:
    4328:	cf 93       	push	r28
    432a:	df 93       	push	r29
    432c:	dc 01       	movw	r26, r24
    432e:	89 2b       	or	r24, r25
    4330:	01 f1       	breq	.+64     	; 0x4372 <serial_sendByte+0x4a>
    4332:	12 96       	adiw	r26, 0x02	; 2
    4334:	ed 91       	ld	r30, X+
    4336:	fc 91       	ld	r31, X
    4338:	13 97       	sbiw	r26, 0x03	; 3
    433a:	93 81       	ldd	r25, Z+3	; 0x03
    433c:	82 81       	ldd	r24, Z+2	; 0x02
    433e:	25 81       	ldd	r18, Z+5	; 0x05
    4340:	98 1b       	sub	r25, r24
    4342:	92 23       	and	r25, r18
    4344:	84 81       	ldd	r24, Z+4	; 0x04
    4346:	98 17       	cp	r25, r24
    4348:	b1 f0       	breq	.+44     	; 0x4376 <serial_sendByte+0x4e>
    434a:	83 81       	ldd	r24, Z+3	; 0x03
    434c:	26 95       	lsr	r18
    434e:	28 23       	and	r18, r24
    4350:	c0 81       	ld	r28, Z
    4352:	d1 81       	ldd	r29, Z+1	; 0x01
    4354:	c2 0f       	add	r28, r18
    4356:	d1 1d       	adc	r29, r1
    4358:	68 83       	st	Y, r22
    435a:	8f 5f       	subi	r24, 0xFF	; 255
    435c:	95 81       	ldd	r25, Z+5	; 0x05
    435e:	89 23       	and	r24, r25
    4360:	83 83       	std	Z+3, r24	; 0x03
    4362:	ed 91       	ld	r30, X+
    4364:	fc 91       	ld	r31, X
    4366:	35 97       	sbiw	r30, 0x05	; 5
    4368:	80 81       	ld	r24, Z
    436a:	80 62       	ori	r24, 0x20	; 32
    436c:	80 83       	st	Z, r24
    436e:	80 e0       	ldi	r24, 0x00	; 0
    4370:	03 c0       	rjmp	.+6      	; 0x4378 <serial_sendByte+0x50>
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	01 c0       	rjmp	.+2      	; 0x4378 <serial_sendByte+0x50>
    4376:	82 e0       	ldi	r24, 0x02	; 2
    4378:	df 91       	pop	r29
    437a:	cf 91       	pop	r28
    437c:	08 95       	ret

0000437e <serial_sendBytes>:
    437e:	ef 92       	push	r14
    4380:	ff 92       	push	r15
    4382:	0f 93       	push	r16
    4384:	1f 93       	push	r17
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	7c 01       	movw	r14, r24
    438c:	00 97       	sbiw	r24, 0x00	; 0
    438e:	09 f4       	brne	.+2      	; 0x4392 <serial_sendBytes+0x14>
    4390:	41 c0       	rjmp	.+130    	; 0x4414 <serial_sendBytes+0x96>
    4392:	dc 01       	movw	r26, r24
    4394:	12 96       	adiw	r26, 0x02	; 2
    4396:	ed 91       	ld	r30, X+
    4398:	fc 91       	ld	r31, X
    439a:	13 97       	sbiw	r26, 0x03	; 3
    439c:	93 81       	ldd	r25, Z+3	; 0x03
    439e:	82 81       	ldd	r24, Z+2	; 0x02
    43a0:	98 1b       	sub	r25, r24
    43a2:	85 81       	ldd	r24, Z+5	; 0x05
    43a4:	98 23       	and	r25, r24
    43a6:	84 81       	ldd	r24, Z+4	; 0x04
    43a8:	89 1b       	sub	r24, r25
    43aa:	86 17       	cp	r24, r22
    43ac:	a8 f1       	brcs	.+106    	; 0x4418 <serial_sendBytes+0x9a>
    43ae:	66 23       	and	r22, r22
    43b0:	41 f1       	breq	.+80     	; 0x4402 <serial_sendBytes+0x84>
    43b2:	84 2f       	mov	r24, r20
    43b4:	95 2f       	mov	r25, r21
    43b6:	dc 01       	movw	r26, r24
    43b8:	61 50       	subi	r22, 0x01	; 1
    43ba:	46 2f       	mov	r20, r22
    43bc:	50 e0       	ldi	r21, 0x00	; 0
    43be:	4f 5f       	subi	r20, 0xFF	; 255
    43c0:	5f 4f       	sbci	r21, 0xFF	; 255
    43c2:	48 0f       	add	r20, r24
    43c4:	59 1f       	adc	r21, r25
    43c6:	e7 01       	movw	r28, r14
    43c8:	ea 81       	ldd	r30, Y+2	; 0x02
    43ca:	fb 81       	ldd	r31, Y+3	; 0x03
    43cc:	93 81       	ldd	r25, Z+3	; 0x03
    43ce:	82 81       	ldd	r24, Z+2	; 0x02
    43d0:	25 81       	ldd	r18, Z+5	; 0x05
    43d2:	98 1b       	sub	r25, r24
    43d4:	92 23       	and	r25, r18
    43d6:	84 81       	ldd	r24, Z+4	; 0x04
    43d8:	98 17       	cp	r25, r24
    43da:	79 f0       	breq	.+30     	; 0x43fa <serial_sendBytes+0x7c>
    43dc:	8c 91       	ld	r24, X
    43de:	93 81       	ldd	r25, Z+3	; 0x03
    43e0:	26 95       	lsr	r18
    43e2:	29 23       	and	r18, r25
    43e4:	60 81       	ld	r22, Z
    43e6:	71 81       	ldd	r23, Z+1	; 0x01
    43e8:	8b 01       	movw	r16, r22
    43ea:	02 0f       	add	r16, r18
    43ec:	11 1d       	adc	r17, r1
    43ee:	e8 01       	movw	r28, r16
    43f0:	88 83       	st	Y, r24
    43f2:	9f 5f       	subi	r25, 0xFF	; 255
    43f4:	85 81       	ldd	r24, Z+5	; 0x05
    43f6:	98 23       	and	r25, r24
    43f8:	93 83       	std	Z+3, r25	; 0x03
    43fa:	11 96       	adiw	r26, 0x01	; 1
    43fc:	a4 17       	cp	r26, r20
    43fe:	b5 07       	cpc	r27, r21
    4400:	11 f7       	brne	.-60     	; 0x43c6 <serial_sendBytes+0x48>
    4402:	d7 01       	movw	r26, r14
    4404:	ed 91       	ld	r30, X+
    4406:	fc 91       	ld	r31, X
    4408:	35 97       	sbiw	r30, 0x05	; 5
    440a:	80 81       	ld	r24, Z
    440c:	80 62       	ori	r24, 0x20	; 32
    440e:	80 83       	st	Z, r24
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	03 c0       	rjmp	.+6      	; 0x441a <serial_sendBytes+0x9c>
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	01 c0       	rjmp	.+2      	; 0x441a <serial_sendBytes+0x9c>
    4418:	82 e0       	ldi	r24, 0x02	; 2
    441a:	df 91       	pop	r29
    441c:	cf 91       	pop	r28
    441e:	1f 91       	pop	r17
    4420:	0f 91       	pop	r16
    4422:	ff 90       	pop	r15
    4424:	ef 90       	pop	r14
    4426:	08 95       	ret

00004428 <serial_getByte>:
    4428:	00 97       	sbiw	r24, 0x00	; 0
    442a:	d1 f0       	breq	.+52     	; 0x4460 <serial_getByte+0x38>
    442c:	dc 01       	movw	r26, r24
    442e:	14 96       	adiw	r26, 0x04	; 4
    4430:	ed 91       	ld	r30, X+
    4432:	fc 91       	ld	r31, X
    4434:	15 97       	sbiw	r26, 0x05	; 5
    4436:	93 81       	ldd	r25, Z+3	; 0x03
    4438:	82 81       	ldd	r24, Z+2	; 0x02
    443a:	98 17       	cp	r25, r24
    443c:	99 f0       	breq	.+38     	; 0x4464 <serial_getByte+0x3c>
    443e:	92 81       	ldd	r25, Z+2	; 0x02
    4440:	85 81       	ldd	r24, Z+5	; 0x05
    4442:	86 95       	lsr	r24
    4444:	89 23       	and	r24, r25
    4446:	a0 81       	ld	r26, Z
    4448:	b1 81       	ldd	r27, Z+1	; 0x01
    444a:	a8 0f       	add	r26, r24
    444c:	b1 1d       	adc	r27, r1
    444e:	8c 91       	ld	r24, X
    4450:	db 01       	movw	r26, r22
    4452:	8c 93       	st	X, r24
    4454:	9f 5f       	subi	r25, 0xFF	; 255
    4456:	85 81       	ldd	r24, Z+5	; 0x05
    4458:	98 23       	and	r25, r24
    445a:	92 83       	std	Z+2, r25	; 0x02
    445c:	80 e0       	ldi	r24, 0x00	; 0
    445e:	08 95       	ret
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	08 95       	ret
    4464:	83 e0       	ldi	r24, 0x03	; 3
    4466:	08 95       	ret

00004468 <__vector_25>:
    4468:	1f 92       	push	r1
    446a:	0f 92       	push	r0
    446c:	0f b6       	in	r0, 0x3f	; 63
    446e:	0f 92       	push	r0
    4470:	11 24       	eor	r1, r1
    4472:	0b b6       	in	r0, 0x3b	; 59
    4474:	0f 92       	push	r0
    4476:	2f 93       	push	r18
    4478:	3f 93       	push	r19
    447a:	4f 93       	push	r20
    447c:	5f 93       	push	r21
    447e:	6f 93       	push	r22
    4480:	7f 93       	push	r23
    4482:	8f 93       	push	r24
    4484:	9f 93       	push	r25
    4486:	af 93       	push	r26
    4488:	bf 93       	push	r27
    448a:	cf 93       	push	r28
    448c:	df 93       	push	r29
    448e:	ef 93       	push	r30
    4490:	ff 93       	push	r31
    4492:	a0 91 70 13 	lds	r26, 0x1370	; 0x801370 <_ser_handle>
    4496:	b0 91 71 13 	lds	r27, 0x1371	; 0x801371 <_ser_handle+0x1>
    449a:	10 97       	sbiw	r26, 0x00	; 0
    449c:	11 f1       	breq	.+68     	; 0x44e2 <__vector_25+0x7a>
    449e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    44a2:	14 96       	adiw	r26, 0x04	; 4
    44a4:	ed 91       	ld	r30, X+
    44a6:	fc 91       	ld	r31, X
    44a8:	15 97       	sbiw	r26, 0x05	; 5
    44aa:	93 81       	ldd	r25, Z+3	; 0x03
    44ac:	82 81       	ldd	r24, Z+2	; 0x02
    44ae:	25 81       	ldd	r18, Z+5	; 0x05
    44b0:	98 1b       	sub	r25, r24
    44b2:	92 23       	and	r25, r18
    44b4:	84 81       	ldd	r24, Z+4	; 0x04
    44b6:	98 17       	cp	r25, r24
    44b8:	61 f0       	breq	.+24     	; 0x44d2 <__vector_25+0x6a>
    44ba:	83 81       	ldd	r24, Z+3	; 0x03
    44bc:	26 95       	lsr	r18
    44be:	28 23       	and	r18, r24
    44c0:	c0 81       	ld	r28, Z
    44c2:	d1 81       	ldd	r29, Z+1	; 0x01
    44c4:	c2 0f       	add	r28, r18
    44c6:	d1 1d       	adc	r29, r1
    44c8:	68 83       	st	Y, r22
    44ca:	8f 5f       	subi	r24, 0xFF	; 255
    44cc:	95 81       	ldd	r25, Z+5	; 0x05
    44ce:	89 23       	and	r24, r25
    44d0:	83 83       	std	Z+3, r24	; 0x03
    44d2:	16 96       	adiw	r26, 0x06	; 6
    44d4:	ed 91       	ld	r30, X+
    44d6:	fc 91       	ld	r31, X
    44d8:	17 97       	sbiw	r26, 0x07	; 7
    44da:	30 97       	sbiw	r30, 0x00	; 0
    44dc:	11 f0       	breq	.+4      	; 0x44e2 <__vector_25+0x7a>
    44de:	cd 01       	movw	r24, r26
    44e0:	19 95       	eicall
    44e2:	ff 91       	pop	r31
    44e4:	ef 91       	pop	r30
    44e6:	df 91       	pop	r29
    44e8:	cf 91       	pop	r28
    44ea:	bf 91       	pop	r27
    44ec:	af 91       	pop	r26
    44ee:	9f 91       	pop	r25
    44f0:	8f 91       	pop	r24
    44f2:	7f 91       	pop	r23
    44f4:	6f 91       	pop	r22
    44f6:	5f 91       	pop	r21
    44f8:	4f 91       	pop	r20
    44fa:	3f 91       	pop	r19
    44fc:	2f 91       	pop	r18
    44fe:	0f 90       	pop	r0
    4500:	0b be       	out	0x3b, r0	; 59
    4502:	0f 90       	pop	r0
    4504:	0f be       	out	0x3f, r0	; 63
    4506:	0f 90       	pop	r0
    4508:	1f 90       	pop	r1
    450a:	18 95       	reti

0000450c <__vector_26>:
    450c:	1f 92       	push	r1
    450e:	0f 92       	push	r0
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	0f 92       	push	r0
    4514:	11 24       	eor	r1, r1
    4516:	0b b6       	in	r0, 0x3b	; 59
    4518:	0f 92       	push	r0
    451a:	2f 93       	push	r18
    451c:	8f 93       	push	r24
    451e:	9f 93       	push	r25
    4520:	af 93       	push	r26
    4522:	bf 93       	push	r27
    4524:	ef 93       	push	r30
    4526:	ff 93       	push	r31
    4528:	e0 91 70 13 	lds	r30, 0x1370	; 0x801370 <_ser_handle>
    452c:	f0 91 71 13 	lds	r31, 0x1371	; 0x801371 <_ser_handle+0x1>
    4530:	30 97       	sbiw	r30, 0x00	; 0
    4532:	b9 f0       	breq	.+46     	; 0x4562 <__vector_26+0x56>
    4534:	02 80       	ldd	r0, Z+2	; 0x02
    4536:	f3 81       	ldd	r31, Z+3	; 0x03
    4538:	e0 2d       	mov	r30, r0
    453a:	93 81       	ldd	r25, Z+3	; 0x03
    453c:	82 81       	ldd	r24, Z+2	; 0x02
    453e:	98 17       	cp	r25, r24
    4540:	b1 f0       	breq	.+44     	; 0x456e <__vector_26+0x62>
    4542:	92 81       	ldd	r25, Z+2	; 0x02
    4544:	85 81       	ldd	r24, Z+5	; 0x05
    4546:	28 2f       	mov	r18, r24
    4548:	26 95       	lsr	r18
    454a:	29 23       	and	r18, r25
    454c:	a0 81       	ld	r26, Z
    454e:	b1 81       	ldd	r27, Z+1	; 0x01
    4550:	a2 0f       	add	r26, r18
    4552:	b1 1d       	adc	r27, r1
    4554:	2c 91       	ld	r18, X
    4556:	9f 5f       	subi	r25, 0xFF	; 255
    4558:	89 23       	and	r24, r25
    455a:	82 83       	std	Z+2, r24	; 0x02
    455c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4560:	0b c0       	rjmp	.+22     	; 0x4578 <__vector_26+0x6c>
    4562:	e1 ec       	ldi	r30, 0xC1	; 193
    4564:	f0 e0       	ldi	r31, 0x00	; 0
    4566:	80 81       	ld	r24, Z
    4568:	8f 7d       	andi	r24, 0xDF	; 223
    456a:	80 83       	st	Z, r24
    456c:	05 c0       	rjmp	.+10     	; 0x4578 <__vector_26+0x6c>
    456e:	e1 ec       	ldi	r30, 0xC1	; 193
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	80 81       	ld	r24, Z
    4574:	8f 7d       	andi	r24, 0xDF	; 223
    4576:	80 83       	st	Z, r24
    4578:	ff 91       	pop	r31
    457a:	ef 91       	pop	r30
    457c:	bf 91       	pop	r27
    457e:	af 91       	pop	r26
    4580:	9f 91       	pop	r25
    4582:	8f 91       	pop	r24
    4584:	2f 91       	pop	r18
    4586:	0f 90       	pop	r0
    4588:	0b be       	out	0x3b, r0	; 59
    458a:	0f 90       	pop	r0
    458c:	0f be       	out	0x3f, r0	; 63
    458e:	0f 90       	pop	r0
    4590:	1f 90       	pop	r1
    4592:	18 95       	reti

00004594 <__vector_36>:
    4594:	1f 92       	push	r1
    4596:	0f 92       	push	r0
    4598:	0f b6       	in	r0, 0x3f	; 63
    459a:	0f 92       	push	r0
    459c:	11 24       	eor	r1, r1
    459e:	0b b6       	in	r0, 0x3b	; 59
    45a0:	0f 92       	push	r0
    45a2:	2f 93       	push	r18
    45a4:	3f 93       	push	r19
    45a6:	4f 93       	push	r20
    45a8:	5f 93       	push	r21
    45aa:	6f 93       	push	r22
    45ac:	7f 93       	push	r23
    45ae:	8f 93       	push	r24
    45b0:	9f 93       	push	r25
    45b2:	af 93       	push	r26
    45b4:	bf 93       	push	r27
    45b6:	cf 93       	push	r28
    45b8:	df 93       	push	r29
    45ba:	ef 93       	push	r30
    45bc:	ff 93       	push	r31
    45be:	a0 91 72 13 	lds	r26, 0x1372	; 0x801372 <_ser_handle+0x2>
    45c2:	b0 91 73 13 	lds	r27, 0x1373	; 0x801373 <_ser_handle+0x3>
    45c6:	10 97       	sbiw	r26, 0x00	; 0
    45c8:	11 f1       	breq	.+68     	; 0x460e <__vector_36+0x7a>
    45ca:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    45ce:	14 96       	adiw	r26, 0x04	; 4
    45d0:	ed 91       	ld	r30, X+
    45d2:	fc 91       	ld	r31, X
    45d4:	15 97       	sbiw	r26, 0x05	; 5
    45d6:	93 81       	ldd	r25, Z+3	; 0x03
    45d8:	82 81       	ldd	r24, Z+2	; 0x02
    45da:	25 81       	ldd	r18, Z+5	; 0x05
    45dc:	98 1b       	sub	r25, r24
    45de:	92 23       	and	r25, r18
    45e0:	84 81       	ldd	r24, Z+4	; 0x04
    45e2:	98 17       	cp	r25, r24
    45e4:	61 f0       	breq	.+24     	; 0x45fe <__vector_36+0x6a>
    45e6:	83 81       	ldd	r24, Z+3	; 0x03
    45e8:	26 95       	lsr	r18
    45ea:	28 23       	and	r18, r24
    45ec:	c0 81       	ld	r28, Z
    45ee:	d1 81       	ldd	r29, Z+1	; 0x01
    45f0:	c2 0f       	add	r28, r18
    45f2:	d1 1d       	adc	r29, r1
    45f4:	68 83       	st	Y, r22
    45f6:	8f 5f       	subi	r24, 0xFF	; 255
    45f8:	95 81       	ldd	r25, Z+5	; 0x05
    45fa:	89 23       	and	r24, r25
    45fc:	83 83       	std	Z+3, r24	; 0x03
    45fe:	16 96       	adiw	r26, 0x06	; 6
    4600:	ed 91       	ld	r30, X+
    4602:	fc 91       	ld	r31, X
    4604:	17 97       	sbiw	r26, 0x07	; 7
    4606:	30 97       	sbiw	r30, 0x00	; 0
    4608:	11 f0       	breq	.+4      	; 0x460e <__vector_36+0x7a>
    460a:	cd 01       	movw	r24, r26
    460c:	19 95       	eicall
    460e:	ff 91       	pop	r31
    4610:	ef 91       	pop	r30
    4612:	df 91       	pop	r29
    4614:	cf 91       	pop	r28
    4616:	bf 91       	pop	r27
    4618:	af 91       	pop	r26
    461a:	9f 91       	pop	r25
    461c:	8f 91       	pop	r24
    461e:	7f 91       	pop	r23
    4620:	6f 91       	pop	r22
    4622:	5f 91       	pop	r21
    4624:	4f 91       	pop	r20
    4626:	3f 91       	pop	r19
    4628:	2f 91       	pop	r18
    462a:	0f 90       	pop	r0
    462c:	0b be       	out	0x3b, r0	; 59
    462e:	0f 90       	pop	r0
    4630:	0f be       	out	0x3f, r0	; 63
    4632:	0f 90       	pop	r0
    4634:	1f 90       	pop	r1
    4636:	18 95       	reti

00004638 <__vector_37>:
    4638:	1f 92       	push	r1
    463a:	0f 92       	push	r0
    463c:	0f b6       	in	r0, 0x3f	; 63
    463e:	0f 92       	push	r0
    4640:	11 24       	eor	r1, r1
    4642:	0b b6       	in	r0, 0x3b	; 59
    4644:	0f 92       	push	r0
    4646:	2f 93       	push	r18
    4648:	8f 93       	push	r24
    464a:	9f 93       	push	r25
    464c:	af 93       	push	r26
    464e:	bf 93       	push	r27
    4650:	ef 93       	push	r30
    4652:	ff 93       	push	r31
    4654:	e0 91 72 13 	lds	r30, 0x1372	; 0x801372 <_ser_handle+0x2>
    4658:	f0 91 73 13 	lds	r31, 0x1373	; 0x801373 <_ser_handle+0x3>
    465c:	30 97       	sbiw	r30, 0x00	; 0
    465e:	b9 f0       	breq	.+46     	; 0x468e <__vector_37+0x56>
    4660:	02 80       	ldd	r0, Z+2	; 0x02
    4662:	f3 81       	ldd	r31, Z+3	; 0x03
    4664:	e0 2d       	mov	r30, r0
    4666:	93 81       	ldd	r25, Z+3	; 0x03
    4668:	82 81       	ldd	r24, Z+2	; 0x02
    466a:	98 17       	cp	r25, r24
    466c:	b1 f0       	breq	.+44     	; 0x469a <__vector_37+0x62>
    466e:	92 81       	ldd	r25, Z+2	; 0x02
    4670:	85 81       	ldd	r24, Z+5	; 0x05
    4672:	28 2f       	mov	r18, r24
    4674:	26 95       	lsr	r18
    4676:	29 23       	and	r18, r25
    4678:	a0 81       	ld	r26, Z
    467a:	b1 81       	ldd	r27, Z+1	; 0x01
    467c:	a2 0f       	add	r26, r18
    467e:	b1 1d       	adc	r27, r1
    4680:	2c 91       	ld	r18, X
    4682:	9f 5f       	subi	r25, 0xFF	; 255
    4684:	89 23       	and	r24, r25
    4686:	82 83       	std	Z+2, r24	; 0x02
    4688:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    468c:	0b c0       	rjmp	.+22     	; 0x46a4 <__vector_37+0x6c>
    468e:	e9 ec       	ldi	r30, 0xC9	; 201
    4690:	f0 e0       	ldi	r31, 0x00	; 0
    4692:	80 81       	ld	r24, Z
    4694:	8f 7d       	andi	r24, 0xDF	; 223
    4696:	80 83       	st	Z, r24
    4698:	05 c0       	rjmp	.+10     	; 0x46a4 <__vector_37+0x6c>
    469a:	e9 ec       	ldi	r30, 0xC9	; 201
    469c:	f0 e0       	ldi	r31, 0x00	; 0
    469e:	80 81       	ld	r24, Z
    46a0:	8f 7d       	andi	r24, 0xDF	; 223
    46a2:	80 83       	st	Z, r24
    46a4:	ff 91       	pop	r31
    46a6:	ef 91       	pop	r30
    46a8:	bf 91       	pop	r27
    46aa:	af 91       	pop	r26
    46ac:	9f 91       	pop	r25
    46ae:	8f 91       	pop	r24
    46b0:	2f 91       	pop	r18
    46b2:	0f 90       	pop	r0
    46b4:	0b be       	out	0x3b, r0	; 59
    46b6:	0f 90       	pop	r0
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	0f 90       	pop	r0
    46bc:	1f 90       	pop	r1
    46be:	18 95       	reti

000046c0 <__vector_51>:
    46c0:	1f 92       	push	r1
    46c2:	0f 92       	push	r0
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	0f 92       	push	r0
    46c8:	11 24       	eor	r1, r1
    46ca:	0b b6       	in	r0, 0x3b	; 59
    46cc:	0f 92       	push	r0
    46ce:	2f 93       	push	r18
    46d0:	3f 93       	push	r19
    46d2:	4f 93       	push	r20
    46d4:	5f 93       	push	r21
    46d6:	6f 93       	push	r22
    46d8:	7f 93       	push	r23
    46da:	8f 93       	push	r24
    46dc:	9f 93       	push	r25
    46de:	af 93       	push	r26
    46e0:	bf 93       	push	r27
    46e2:	cf 93       	push	r28
    46e4:	df 93       	push	r29
    46e6:	ef 93       	push	r30
    46e8:	ff 93       	push	r31
    46ea:	a0 91 74 13 	lds	r26, 0x1374	; 0x801374 <_ser_handle+0x4>
    46ee:	b0 91 75 13 	lds	r27, 0x1375	; 0x801375 <_ser_handle+0x5>
    46f2:	10 97       	sbiw	r26, 0x00	; 0
    46f4:	11 f1       	breq	.+68     	; 0x473a <__vector_51+0x7a>
    46f6:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    46fa:	14 96       	adiw	r26, 0x04	; 4
    46fc:	ed 91       	ld	r30, X+
    46fe:	fc 91       	ld	r31, X
    4700:	15 97       	sbiw	r26, 0x05	; 5
    4702:	93 81       	ldd	r25, Z+3	; 0x03
    4704:	82 81       	ldd	r24, Z+2	; 0x02
    4706:	25 81       	ldd	r18, Z+5	; 0x05
    4708:	98 1b       	sub	r25, r24
    470a:	92 23       	and	r25, r18
    470c:	84 81       	ldd	r24, Z+4	; 0x04
    470e:	98 17       	cp	r25, r24
    4710:	61 f0       	breq	.+24     	; 0x472a <__vector_51+0x6a>
    4712:	83 81       	ldd	r24, Z+3	; 0x03
    4714:	26 95       	lsr	r18
    4716:	28 23       	and	r18, r24
    4718:	c0 81       	ld	r28, Z
    471a:	d1 81       	ldd	r29, Z+1	; 0x01
    471c:	c2 0f       	add	r28, r18
    471e:	d1 1d       	adc	r29, r1
    4720:	68 83       	st	Y, r22
    4722:	8f 5f       	subi	r24, 0xFF	; 255
    4724:	95 81       	ldd	r25, Z+5	; 0x05
    4726:	89 23       	and	r24, r25
    4728:	83 83       	std	Z+3, r24	; 0x03
    472a:	16 96       	adiw	r26, 0x06	; 6
    472c:	ed 91       	ld	r30, X+
    472e:	fc 91       	ld	r31, X
    4730:	17 97       	sbiw	r26, 0x07	; 7
    4732:	30 97       	sbiw	r30, 0x00	; 0
    4734:	11 f0       	breq	.+4      	; 0x473a <__vector_51+0x7a>
    4736:	cd 01       	movw	r24, r26
    4738:	19 95       	eicall
    473a:	ff 91       	pop	r31
    473c:	ef 91       	pop	r30
    473e:	df 91       	pop	r29
    4740:	cf 91       	pop	r28
    4742:	bf 91       	pop	r27
    4744:	af 91       	pop	r26
    4746:	9f 91       	pop	r25
    4748:	8f 91       	pop	r24
    474a:	7f 91       	pop	r23
    474c:	6f 91       	pop	r22
    474e:	5f 91       	pop	r21
    4750:	4f 91       	pop	r20
    4752:	3f 91       	pop	r19
    4754:	2f 91       	pop	r18
    4756:	0f 90       	pop	r0
    4758:	0b be       	out	0x3b, r0	; 59
    475a:	0f 90       	pop	r0
    475c:	0f be       	out	0x3f, r0	; 63
    475e:	0f 90       	pop	r0
    4760:	1f 90       	pop	r1
    4762:	18 95       	reti

00004764 <__vector_52>:
    4764:	1f 92       	push	r1
    4766:	0f 92       	push	r0
    4768:	0f b6       	in	r0, 0x3f	; 63
    476a:	0f 92       	push	r0
    476c:	11 24       	eor	r1, r1
    476e:	0b b6       	in	r0, 0x3b	; 59
    4770:	0f 92       	push	r0
    4772:	2f 93       	push	r18
    4774:	8f 93       	push	r24
    4776:	9f 93       	push	r25
    4778:	af 93       	push	r26
    477a:	bf 93       	push	r27
    477c:	ef 93       	push	r30
    477e:	ff 93       	push	r31
    4780:	e0 91 74 13 	lds	r30, 0x1374	; 0x801374 <_ser_handle+0x4>
    4784:	f0 91 75 13 	lds	r31, 0x1375	; 0x801375 <_ser_handle+0x5>
    4788:	30 97       	sbiw	r30, 0x00	; 0
    478a:	b9 f0       	breq	.+46     	; 0x47ba <__vector_52+0x56>
    478c:	02 80       	ldd	r0, Z+2	; 0x02
    478e:	f3 81       	ldd	r31, Z+3	; 0x03
    4790:	e0 2d       	mov	r30, r0
    4792:	93 81       	ldd	r25, Z+3	; 0x03
    4794:	82 81       	ldd	r24, Z+2	; 0x02
    4796:	98 17       	cp	r25, r24
    4798:	b1 f0       	breq	.+44     	; 0x47c6 <__vector_52+0x62>
    479a:	92 81       	ldd	r25, Z+2	; 0x02
    479c:	85 81       	ldd	r24, Z+5	; 0x05
    479e:	28 2f       	mov	r18, r24
    47a0:	26 95       	lsr	r18
    47a2:	29 23       	and	r18, r25
    47a4:	a0 81       	ld	r26, Z
    47a6:	b1 81       	ldd	r27, Z+1	; 0x01
    47a8:	a2 0f       	add	r26, r18
    47aa:	b1 1d       	adc	r27, r1
    47ac:	2c 91       	ld	r18, X
    47ae:	9f 5f       	subi	r25, 0xFF	; 255
    47b0:	89 23       	and	r24, r25
    47b2:	82 83       	std	Z+2, r24	; 0x02
    47b4:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    47b8:	0b c0       	rjmp	.+22     	; 0x47d0 <__vector_52+0x6c>
    47ba:	e1 ed       	ldi	r30, 0xD1	; 209
    47bc:	f0 e0       	ldi	r31, 0x00	; 0
    47be:	80 81       	ld	r24, Z
    47c0:	8f 7d       	andi	r24, 0xDF	; 223
    47c2:	80 83       	st	Z, r24
    47c4:	05 c0       	rjmp	.+10     	; 0x47d0 <__vector_52+0x6c>
    47c6:	e1 ed       	ldi	r30, 0xD1	; 209
    47c8:	f0 e0       	ldi	r31, 0x00	; 0
    47ca:	80 81       	ld	r24, Z
    47cc:	8f 7d       	andi	r24, 0xDF	; 223
    47ce:	80 83       	st	Z, r24
    47d0:	ff 91       	pop	r31
    47d2:	ef 91       	pop	r30
    47d4:	bf 91       	pop	r27
    47d6:	af 91       	pop	r26
    47d8:	9f 91       	pop	r25
    47da:	8f 91       	pop	r24
    47dc:	2f 91       	pop	r18
    47de:	0f 90       	pop	r0
    47e0:	0b be       	out	0x3b, r0	; 59
    47e2:	0f 90       	pop	r0
    47e4:	0f be       	out	0x3f, r0	; 63
    47e6:	0f 90       	pop	r0
    47e8:	1f 90       	pop	r1
    47ea:	18 95       	reti

000047ec <__vector_54>:
    47ec:	1f 92       	push	r1
    47ee:	0f 92       	push	r0
    47f0:	0f b6       	in	r0, 0x3f	; 63
    47f2:	0f 92       	push	r0
    47f4:	11 24       	eor	r1, r1
    47f6:	0b b6       	in	r0, 0x3b	; 59
    47f8:	0f 92       	push	r0
    47fa:	2f 93       	push	r18
    47fc:	3f 93       	push	r19
    47fe:	4f 93       	push	r20
    4800:	5f 93       	push	r21
    4802:	6f 93       	push	r22
    4804:	7f 93       	push	r23
    4806:	8f 93       	push	r24
    4808:	9f 93       	push	r25
    480a:	af 93       	push	r26
    480c:	bf 93       	push	r27
    480e:	cf 93       	push	r28
    4810:	df 93       	push	r29
    4812:	ef 93       	push	r30
    4814:	ff 93       	push	r31
    4816:	a0 91 76 13 	lds	r26, 0x1376	; 0x801376 <_ser_handle+0x6>
    481a:	b0 91 77 13 	lds	r27, 0x1377	; 0x801377 <_ser_handle+0x7>
    481e:	10 97       	sbiw	r26, 0x00	; 0
    4820:	11 f1       	breq	.+68     	; 0x4866 <__vector_54+0x7a>
    4822:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4826:	14 96       	adiw	r26, 0x04	; 4
    4828:	ed 91       	ld	r30, X+
    482a:	fc 91       	ld	r31, X
    482c:	15 97       	sbiw	r26, 0x05	; 5
    482e:	93 81       	ldd	r25, Z+3	; 0x03
    4830:	82 81       	ldd	r24, Z+2	; 0x02
    4832:	25 81       	ldd	r18, Z+5	; 0x05
    4834:	98 1b       	sub	r25, r24
    4836:	92 23       	and	r25, r18
    4838:	84 81       	ldd	r24, Z+4	; 0x04
    483a:	98 17       	cp	r25, r24
    483c:	61 f0       	breq	.+24     	; 0x4856 <__vector_54+0x6a>
    483e:	83 81       	ldd	r24, Z+3	; 0x03
    4840:	26 95       	lsr	r18
    4842:	28 23       	and	r18, r24
    4844:	c0 81       	ld	r28, Z
    4846:	d1 81       	ldd	r29, Z+1	; 0x01
    4848:	c2 0f       	add	r28, r18
    484a:	d1 1d       	adc	r29, r1
    484c:	68 83       	st	Y, r22
    484e:	8f 5f       	subi	r24, 0xFF	; 255
    4850:	95 81       	ldd	r25, Z+5	; 0x05
    4852:	89 23       	and	r24, r25
    4854:	83 83       	std	Z+3, r24	; 0x03
    4856:	16 96       	adiw	r26, 0x06	; 6
    4858:	ed 91       	ld	r30, X+
    485a:	fc 91       	ld	r31, X
    485c:	17 97       	sbiw	r26, 0x07	; 7
    485e:	30 97       	sbiw	r30, 0x00	; 0
    4860:	11 f0       	breq	.+4      	; 0x4866 <__vector_54+0x7a>
    4862:	cd 01       	movw	r24, r26
    4864:	19 95       	eicall
    4866:	ff 91       	pop	r31
    4868:	ef 91       	pop	r30
    486a:	df 91       	pop	r29
    486c:	cf 91       	pop	r28
    486e:	bf 91       	pop	r27
    4870:	af 91       	pop	r26
    4872:	9f 91       	pop	r25
    4874:	8f 91       	pop	r24
    4876:	7f 91       	pop	r23
    4878:	6f 91       	pop	r22
    487a:	5f 91       	pop	r21
    487c:	4f 91       	pop	r20
    487e:	3f 91       	pop	r19
    4880:	2f 91       	pop	r18
    4882:	0f 90       	pop	r0
    4884:	0b be       	out	0x3b, r0	; 59
    4886:	0f 90       	pop	r0
    4888:	0f be       	out	0x3f, r0	; 63
    488a:	0f 90       	pop	r0
    488c:	1f 90       	pop	r1
    488e:	18 95       	reti

00004890 <__vector_55>:
    4890:	1f 92       	push	r1
    4892:	0f 92       	push	r0
    4894:	0f b6       	in	r0, 0x3f	; 63
    4896:	0f 92       	push	r0
    4898:	11 24       	eor	r1, r1
    489a:	0b b6       	in	r0, 0x3b	; 59
    489c:	0f 92       	push	r0
    489e:	2f 93       	push	r18
    48a0:	8f 93       	push	r24
    48a2:	9f 93       	push	r25
    48a4:	af 93       	push	r26
    48a6:	bf 93       	push	r27
    48a8:	ef 93       	push	r30
    48aa:	ff 93       	push	r31
    48ac:	e0 91 76 13 	lds	r30, 0x1376	; 0x801376 <_ser_handle+0x6>
    48b0:	f0 91 77 13 	lds	r31, 0x1377	; 0x801377 <_ser_handle+0x7>
    48b4:	30 97       	sbiw	r30, 0x00	; 0
    48b6:	b9 f0       	breq	.+46     	; 0x48e6 <__vector_55+0x56>
    48b8:	02 80       	ldd	r0, Z+2	; 0x02
    48ba:	f3 81       	ldd	r31, Z+3	; 0x03
    48bc:	e0 2d       	mov	r30, r0
    48be:	93 81       	ldd	r25, Z+3	; 0x03
    48c0:	82 81       	ldd	r24, Z+2	; 0x02
    48c2:	98 17       	cp	r25, r24
    48c4:	b1 f0       	breq	.+44     	; 0x48f2 <__vector_55+0x62>
    48c6:	92 81       	ldd	r25, Z+2	; 0x02
    48c8:	85 81       	ldd	r24, Z+5	; 0x05
    48ca:	28 2f       	mov	r18, r24
    48cc:	26 95       	lsr	r18
    48ce:	29 23       	and	r18, r25
    48d0:	a0 81       	ld	r26, Z
    48d2:	b1 81       	ldd	r27, Z+1	; 0x01
    48d4:	a2 0f       	add	r26, r18
    48d6:	b1 1d       	adc	r27, r1
    48d8:	2c 91       	ld	r18, X
    48da:	9f 5f       	subi	r25, 0xFF	; 255
    48dc:	89 23       	and	r24, r25
    48de:	82 83       	std	Z+2, r24	; 0x02
    48e0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    48e4:	0b c0       	rjmp	.+22     	; 0x48fc <__vector_55+0x6c>
    48e6:	e1 e3       	ldi	r30, 0x31	; 49
    48e8:	f1 e0       	ldi	r31, 0x01	; 1
    48ea:	80 81       	ld	r24, Z
    48ec:	8f 7d       	andi	r24, 0xDF	; 223
    48ee:	80 83       	st	Z, r24
    48f0:	05 c0       	rjmp	.+10     	; 0x48fc <__vector_55+0x6c>
    48f2:	e1 e3       	ldi	r30, 0x31	; 49
    48f4:	f1 e0       	ldi	r31, 0x01	; 1
    48f6:	80 81       	ld	r24, Z
    48f8:	8f 7d       	andi	r24, 0xDF	; 223
    48fa:	80 83       	st	Z, r24
    48fc:	ff 91       	pop	r31
    48fe:	ef 91       	pop	r30
    4900:	bf 91       	pop	r27
    4902:	af 91       	pop	r26
    4904:	9f 91       	pop	r25
    4906:	8f 91       	pop	r24
    4908:	2f 91       	pop	r18
    490a:	0f 90       	pop	r0
    490c:	0b be       	out	0x3b, r0	; 59
    490e:	0f 90       	pop	r0
    4910:	0f be       	out	0x3f, r0	; 63
    4912:	0f 90       	pop	r0
    4914:	1f 90       	pop	r1
    4916:	18 95       	reti

00004918 <usart_getchar>:
    4918:	cf 93       	push	r28
    491a:	df 93       	push	r29
    491c:	1f 92       	push	r1
    491e:	cd b7       	in	r28, 0x3d	; 61
    4920:	de b7       	in	r29, 0x3e	; 62
    4922:	be 01       	movw	r22, r28
    4924:	6f 5f       	subi	r22, 0xFF	; 255
    4926:	7f 4f       	sbci	r23, 0xFF	; 255
    4928:	80 91 78 13 	lds	r24, 0x1378	; 0x801378 <_com_serial_instance>
    492c:	90 91 79 13 	lds	r25, 0x1379	; 0x801379 <_com_serial_instance+0x1>
    4930:	7b dd       	rcall	.-1290   	; 0x4428 <serial_getByte>
    4932:	81 11       	cpse	r24, r1
    4934:	f6 cf       	rjmp	.-20     	; 0x4922 <usart_getchar+0xa>
    4936:	89 81       	ldd	r24, Y+1	; 0x01
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	0f 90       	pop	r0
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	08 95       	ret

00004942 <usart_putchar>:
    4942:	68 2f       	mov	r22, r24
    4944:	80 91 78 13 	lds	r24, 0x1378	; 0x801378 <_com_serial_instance>
    4948:	90 91 79 13 	lds	r25, 0x1379	; 0x801379 <_com_serial_instance+0x1>
    494c:	ed dc       	rcall	.-1574   	; 0x4328 <serial_sendByte>
    494e:	80 e0       	ldi	r24, 0x00	; 0
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	08 95       	ret

00004954 <stdio_initialise>:
    4954:	8f 92       	push	r8
    4956:	9f 92       	push	r9
    4958:	af 92       	push	r10
    495a:	cf 92       	push	r12
    495c:	ef 92       	push	r14
    495e:	0f 93       	push	r16
    4960:	81 2c       	mov	r8, r1
    4962:	91 2c       	mov	r9, r1
    4964:	68 94       	set
    4966:	aa 24       	eor	r10, r10
    4968:	a7 f8       	bld	r10, 7
    496a:	68 94       	set
    496c:	cc 24       	eor	r12, r12
    496e:	c7 f8       	bld	r12, 7
    4970:	e1 2c       	mov	r14, r1
    4972:	00 e0       	ldi	r16, 0x00	; 0
    4974:	23 e0       	ldi	r18, 0x03	; 3
    4976:	40 e0       	ldi	r20, 0x00	; 0
    4978:	51 ee       	ldi	r21, 0xE1	; 225
    497a:	60 e0       	ldi	r22, 0x00	; 0
    497c:	70 e0       	ldi	r23, 0x00	; 0
    497e:	32 dc       	rcall	.-1948   	; 0x41e4 <serial_create>
    4980:	90 93 79 13 	sts	0x1379, r25	; 0x801379 <_com_serial_instance+0x1>
    4984:	80 93 78 13 	sts	0x1378, r24	; 0x801378 <_com_serial_instance>
    4988:	ec eb       	ldi	r30, 0xBC	; 188
    498a:	f3 e1       	ldi	r31, 0x13	; 19
    498c:	83 e1       	ldi	r24, 0x13	; 19
    498e:	92 e0       	ldi	r25, 0x02	; 2
    4990:	91 83       	std	Z+1, r25	; 0x01
    4992:	80 83       	st	Z, r24
    4994:	93 83       	std	Z+3, r25	; 0x03
    4996:	82 83       	std	Z+2, r24	; 0x02
    4998:	0f 91       	pop	r16
    499a:	ef 90       	pop	r14
    499c:	cf 90       	pop	r12
    499e:	af 90       	pop	r10
    49a0:	9f 90       	pop	r9
    49a2:	8f 90       	pop	r8
    49a4:	08 95       	ret

000049a6 <_turn_off>:
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	fc 01       	movw	r30, r24
    49aa:	ee 0f       	add	r30, r30
    49ac:	ff 1f       	adc	r31, r31
    49ae:	e8 0f       	add	r30, r24
    49b0:	f9 1f       	adc	r31, r25
    49b2:	ee 0f       	add	r30, r30
    49b4:	ff 1f       	adc	r31, r31
    49b6:	e6 58       	subi	r30, 0x86	; 134
    49b8:	fc 4e       	sbci	r31, 0xEC	; 236
    49ba:	23 81       	ldd	r18, Z+3	; 0x03
    49bc:	21 11       	cpse	r18, r1
    49be:	1f c0       	rjmp	.+62     	; 0x49fe <_turn_off+0x58>
    49c0:	9c 01       	movw	r18, r24
    49c2:	22 0f       	add	r18, r18
    49c4:	33 1f       	adc	r19, r19
    49c6:	f9 01       	movw	r30, r18
    49c8:	e8 0f       	add	r30, r24
    49ca:	f9 1f       	adc	r31, r25
    49cc:	ee 0f       	add	r30, r30
    49ce:	ff 1f       	adc	r31, r31
    49d0:	e6 58       	subi	r30, 0x86	; 134
    49d2:	fc 4e       	sbci	r31, 0xEC	; 236
    49d4:	a0 81       	ld	r26, Z
    49d6:	b1 81       	ldd	r27, Z+1	; 0x01
    49d8:	4c 91       	ld	r20, X
    49da:	f9 01       	movw	r30, r18
    49dc:	e8 0f       	add	r30, r24
    49de:	f9 1f       	adc	r31, r25
    49e0:	ee 0f       	add	r30, r30
    49e2:	ff 1f       	adc	r31, r31
    49e4:	e6 58       	subi	r30, 0x86	; 134
    49e6:	fc 4e       	sbci	r31, 0xEC	; 236
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	02 80       	ldd	r0, Z+2	; 0x02
    49ee:	02 c0       	rjmp	.+4      	; 0x49f4 <_turn_off+0x4e>
    49f0:	88 0f       	add	r24, r24
    49f2:	99 1f       	adc	r25, r25
    49f4:	0a 94       	dec	r0
    49f6:	e2 f7       	brpl	.-8      	; 0x49f0 <_turn_off+0x4a>
    49f8:	84 2b       	or	r24, r20
    49fa:	8c 93       	st	X, r24
    49fc:	08 95       	ret
    49fe:	fc 01       	movw	r30, r24
    4a00:	ee 0f       	add	r30, r30
    4a02:	ff 1f       	adc	r31, r31
    4a04:	df 01       	movw	r26, r30
    4a06:	a8 0f       	add	r26, r24
    4a08:	b9 1f       	adc	r27, r25
    4a0a:	aa 0f       	add	r26, r26
    4a0c:	bb 1f       	adc	r27, r27
    4a0e:	a6 58       	subi	r26, 0x86	; 134
    4a10:	bc 4e       	sbci	r27, 0xEC	; 236
    4a12:	0d 90       	ld	r0, X+
    4a14:	bc 91       	ld	r27, X
    4a16:	a0 2d       	mov	r26, r0
    4a18:	2c 91       	ld	r18, X
    4a1a:	e8 0f       	add	r30, r24
    4a1c:	f9 1f       	adc	r31, r25
    4a1e:	ee 0f       	add	r30, r30
    4a20:	ff 1f       	adc	r31, r31
    4a22:	e6 58       	subi	r30, 0x86	; 134
    4a24:	fc 4e       	sbci	r31, 0xEC	; 236
    4a26:	81 e0       	ldi	r24, 0x01	; 1
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	02 80       	ldd	r0, Z+2	; 0x02
    4a2c:	02 c0       	rjmp	.+4      	; 0x4a32 <_turn_off+0x8c>
    4a2e:	88 0f       	add	r24, r24
    4a30:	99 1f       	adc	r25, r25
    4a32:	0a 94       	dec	r0
    4a34:	e2 f7       	brpl	.-8      	; 0x4a2e <_turn_off+0x88>
    4a36:	80 95       	com	r24
    4a38:	82 23       	and	r24, r18
    4a3a:	8c 93       	st	X, r24
    4a3c:	08 95       	ret

00004a3e <_turn_on>:
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	fc 01       	movw	r30, r24
    4a42:	ee 0f       	add	r30, r30
    4a44:	ff 1f       	adc	r31, r31
    4a46:	e8 0f       	add	r30, r24
    4a48:	f9 1f       	adc	r31, r25
    4a4a:	ee 0f       	add	r30, r30
    4a4c:	ff 1f       	adc	r31, r31
    4a4e:	e6 58       	subi	r30, 0x86	; 134
    4a50:	fc 4e       	sbci	r31, 0xEC	; 236
    4a52:	23 81       	ldd	r18, Z+3	; 0x03
    4a54:	21 11       	cpse	r18, r1
    4a56:	20 c0       	rjmp	.+64     	; 0x4a98 <_turn_on+0x5a>
    4a58:	9c 01       	movw	r18, r24
    4a5a:	22 0f       	add	r18, r18
    4a5c:	33 1f       	adc	r19, r19
    4a5e:	f9 01       	movw	r30, r18
    4a60:	e8 0f       	add	r30, r24
    4a62:	f9 1f       	adc	r31, r25
    4a64:	ee 0f       	add	r30, r30
    4a66:	ff 1f       	adc	r31, r31
    4a68:	e6 58       	subi	r30, 0x86	; 134
    4a6a:	fc 4e       	sbci	r31, 0xEC	; 236
    4a6c:	a0 81       	ld	r26, Z
    4a6e:	b1 81       	ldd	r27, Z+1	; 0x01
    4a70:	4c 91       	ld	r20, X
    4a72:	f9 01       	movw	r30, r18
    4a74:	e8 0f       	add	r30, r24
    4a76:	f9 1f       	adc	r31, r25
    4a78:	ee 0f       	add	r30, r30
    4a7a:	ff 1f       	adc	r31, r31
    4a7c:	e6 58       	subi	r30, 0x86	; 134
    4a7e:	fc 4e       	sbci	r31, 0xEC	; 236
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	02 80       	ldd	r0, Z+2	; 0x02
    4a86:	02 c0       	rjmp	.+4      	; 0x4a8c <_turn_on+0x4e>
    4a88:	88 0f       	add	r24, r24
    4a8a:	99 1f       	adc	r25, r25
    4a8c:	0a 94       	dec	r0
    4a8e:	e2 f7       	brpl	.-8      	; 0x4a88 <_turn_on+0x4a>
    4a90:	80 95       	com	r24
    4a92:	84 23       	and	r24, r20
    4a94:	8c 93       	st	X, r24
    4a96:	08 95       	ret
    4a98:	fc 01       	movw	r30, r24
    4a9a:	ee 0f       	add	r30, r30
    4a9c:	ff 1f       	adc	r31, r31
    4a9e:	df 01       	movw	r26, r30
    4aa0:	a8 0f       	add	r26, r24
    4aa2:	b9 1f       	adc	r27, r25
    4aa4:	aa 0f       	add	r26, r26
    4aa6:	bb 1f       	adc	r27, r27
    4aa8:	a6 58       	subi	r26, 0x86	; 134
    4aaa:	bc 4e       	sbci	r27, 0xEC	; 236
    4aac:	0d 90       	ld	r0, X+
    4aae:	bc 91       	ld	r27, X
    4ab0:	a0 2d       	mov	r26, r0
    4ab2:	2c 91       	ld	r18, X
    4ab4:	e8 0f       	add	r30, r24
    4ab6:	f9 1f       	adc	r31, r25
    4ab8:	ee 0f       	add	r30, r30
    4aba:	ff 1f       	adc	r31, r31
    4abc:	e6 58       	subi	r30, 0x86	; 134
    4abe:	fc 4e       	sbci	r31, 0xEC	; 236
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	02 80       	ldd	r0, Z+2	; 0x02
    4ac6:	02 c0       	rjmp	.+4      	; 0x4acc <_turn_on+0x8e>
    4ac8:	88 0f       	add	r24, r24
    4aca:	99 1f       	adc	r25, r25
    4acc:	0a 94       	dec	r0
    4ace:	e2 f7       	brpl	.-8      	; 0x4ac8 <_turn_on+0x8a>
    4ad0:	82 2b       	or	r24, r18
    4ad2:	8c 93       	st	X, r24
    4ad4:	08 95       	ret

00004ad6 <_hal_led_task>:
    4ad6:	cc 24       	eor	r12, r12
    4ad8:	c3 94       	inc	r12
    4ada:	d1 2c       	mov	r13, r1
    4adc:	68 94       	set
    4ade:	bb 24       	eor	r11, r11
    4ae0:	b2 f8       	bld	r11, 2
    4ae2:	ca e7       	ldi	r28, 0x7A	; 122
    4ae4:	d3 e1       	ldi	r29, 0x13	; 19
    4ae6:	10 e0       	ldi	r17, 0x00	; 0
    4ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    4aea:	81 30       	cpi	r24, 0x01	; 1
    4aec:	81 f0       	breq	.+32     	; 0x4b0e <_hal_led_task+0x38>
    4aee:	18 f1       	brcs	.+70     	; 0x4b36 <_hal_led_task+0x60>
    4af0:	82 30       	cpi	r24, 0x02	; 2
    4af2:	61 f5       	brne	.+88     	; 0x4b4c <_hal_led_task+0x76>
    4af4:	e8 81       	ld	r30, Y
    4af6:	f9 81       	ldd	r31, Y+1	; 0x01
    4af8:	20 81       	ld	r18, Z
    4afa:	c6 01       	movw	r24, r12
    4afc:	0a 80       	ldd	r0, Y+2	; 0x02
    4afe:	02 c0       	rjmp	.+4      	; 0x4b04 <_hal_led_task+0x2e>
    4b00:	88 0f       	add	r24, r24
    4b02:	99 1f       	adc	r25, r25
    4b04:	0a 94       	dec	r0
    4b06:	e2 f7       	brpl	.-8      	; 0x4b00 <_hal_led_task+0x2a>
    4b08:	82 27       	eor	r24, r18
    4b0a:	80 83       	st	Z, r24
    4b0c:	1f c0       	rjmp	.+62     	; 0x4b4c <_hal_led_task+0x76>
    4b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b10:	8f 5f       	subi	r24, 0xFF	; 255
    4b12:	8a 30       	cpi	r24, 0x0A	; 10
    4b14:	10 f4       	brcc	.+4      	; 0x4b1a <_hal_led_task+0x44>
    4b16:	8d 83       	std	Y+5, r24	; 0x05
    4b18:	19 c0       	rjmp	.+50     	; 0x4b4c <_hal_led_task+0x76>
    4b1a:	1d 82       	std	Y+5, r1	; 0x05
    4b1c:	e8 81       	ld	r30, Y
    4b1e:	f9 81       	ldd	r31, Y+1	; 0x01
    4b20:	20 81       	ld	r18, Z
    4b22:	c6 01       	movw	r24, r12
    4b24:	0a 80       	ldd	r0, Y+2	; 0x02
    4b26:	02 c0       	rjmp	.+4      	; 0x4b2c <_hal_led_task+0x56>
    4b28:	88 0f       	add	r24, r24
    4b2a:	99 1f       	adc	r25, r25
    4b2c:	0a 94       	dec	r0
    4b2e:	e2 f7       	brpl	.-8      	; 0x4b28 <_hal_led_task+0x52>
    4b30:	82 27       	eor	r24, r18
    4b32:	80 83       	st	Z, r24
    4b34:	0b c0       	rjmp	.+22     	; 0x4b4c <_hal_led_task+0x76>
    4b36:	0d 81       	ldd	r16, Y+5	; 0x05
    4b38:	00 23       	and	r16, r16
    4b3a:	29 f0       	breq	.+10     	; 0x4b46 <_hal_led_task+0x70>
    4b3c:	81 2f       	mov	r24, r17
    4b3e:	7f df       	rcall	.-258    	; 0x4a3e <_turn_on>
    4b40:	01 50       	subi	r16, 0x01	; 1
    4b42:	0d 83       	std	Y+5, r16	; 0x05
    4b44:	03 c0       	rjmp	.+6      	; 0x4b4c <_hal_led_task+0x76>
    4b46:	bc 82       	std	Y+4, r11	; 0x04
    4b48:	81 2f       	mov	r24, r17
    4b4a:	2d df       	rcall	.-422    	; 0x49a6 <_turn_off>
    4b4c:	1f 5f       	subi	r17, 0xFF	; 255
    4b4e:	26 96       	adiw	r28, 0x06	; 6
    4b50:	14 30       	cpi	r17, 0x04	; 4
    4b52:	51 f6       	brne	.-108    	; 0x4ae8 <_hal_led_task+0x12>
    4b54:	65 e0       	ldi	r22, 0x05	; 5
    4b56:	70 e0       	ldi	r23, 0x00	; 0
    4b58:	80 e0       	ldi	r24, 0x00	; 0
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vTaskDelay>
    4b60:	c0 cf       	rjmp	.-128    	; 0x4ae2 <_hal_led_task+0xc>

00004b62 <status_leds_initialise>:
    4b62:	ef 92       	push	r14
    4b64:	ff 92       	push	r15
    4b66:	0f 93       	push	r16
    4b68:	1f 93       	push	r17
    4b6a:	cf 93       	push	r28
    4b6c:	df 93       	push	r29
    4b6e:	08 2f       	mov	r16, r24
    4b70:	80 e4       	ldi	r24, 0x40	; 64
    4b72:	87 b9       	out	0x07, r24	; 7
    4b74:	ca e7       	ldi	r28, 0x7A	; 122
    4b76:	d3 e1       	ldi	r29, 0x13	; 19
    4b78:	0f 2e       	mov	r0, r31
    4b7a:	f8 e2       	ldi	r31, 0x28	; 40
    4b7c:	ef 2e       	mov	r14, r31
    4b7e:	f1 2c       	mov	r15, r1
    4b80:	f0 2d       	mov	r31, r0
    4b82:	f9 82       	std	Y+1, r15	; 0x01
    4b84:	e8 82       	st	Y, r14
    4b86:	86 e0       	ldi	r24, 0x06	; 6
    4b88:	8a 83       	std	Y+2, r24	; 0x02
    4b8a:	1b 82       	std	Y+3, r1	; 0x03
    4b8c:	14 e0       	ldi	r17, 0x04	; 4
    4b8e:	1c 83       	std	Y+4, r17	; 0x04
    4b90:	80 e0       	ldi	r24, 0x00	; 0
    4b92:	09 df       	rcall	.-494    	; 0x49a6 <_turn_off>
    4b94:	80 e8       	ldi	r24, 0x80	; 128
    4b96:	87 b9       	out	0x07, r24	; 7
    4b98:	ff 82       	std	Y+7, r15	; 0x07
    4b9a:	ee 82       	std	Y+6, r14	; 0x06
    4b9c:	87 e0       	ldi	r24, 0x07	; 7
    4b9e:	88 87       	std	Y+8, r24	; 0x08
    4ba0:	19 86       	std	Y+9, r1	; 0x09
    4ba2:	1a 87       	std	Y+10, r17	; 0x0a
    4ba4:	81 e0       	ldi	r24, 0x01	; 1
    4ba6:	ff de       	rcall	.-514    	; 0x49a6 <_turn_off>
    4ba8:	80 e2       	ldi	r24, 0x20	; 32
    4baa:	83 bb       	out	0x13, r24	; 19
    4bac:	84 e3       	ldi	r24, 0x34	; 52
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	9d 87       	std	Y+13, r25	; 0x0d
    4bb2:	8c 87       	std	Y+12, r24	; 0x0c
    4bb4:	85 e0       	ldi	r24, 0x05	; 5
    4bb6:	8e 87       	std	Y+14, r24	; 0x0e
    4bb8:	1f 86       	std	Y+15, r1	; 0x0f
    4bba:	18 8b       	std	Y+16, r17	; 0x10
    4bbc:	82 e0       	ldi	r24, 0x02	; 2
    4bbe:	f3 de       	rcall	.-538    	; 0x49a6 <_turn_off>
    4bc0:	80 e1       	ldi	r24, 0x10	; 16
    4bc2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4bc6:	82 e0       	ldi	r24, 0x02	; 2
    4bc8:	91 e0       	ldi	r25, 0x01	; 1
    4bca:	9b 8b       	std	Y+19, r25	; 0x13
    4bcc:	8a 8b       	std	Y+18, r24	; 0x12
    4bce:	1c 8b       	std	Y+20, r17	; 0x14
    4bd0:	1d 8a       	std	Y+21, r1	; 0x15
    4bd2:	1e 8b       	std	Y+22, r17	; 0x16
    4bd4:	83 e0       	ldi	r24, 0x03	; 3
    4bd6:	e7 de       	rcall	.-562    	; 0x49a6 <_turn_off>
    4bd8:	e1 2c       	mov	r14, r1
    4bda:	f1 2c       	mov	r15, r1
    4bdc:	20 e0       	ldi	r18, 0x00	; 0
    4bde:	30 e0       	ldi	r19, 0x00	; 0
    4be0:	40 ec       	ldi	r20, 0xC0	; 192
    4be2:	50 e0       	ldi	r21, 0x00	; 0
    4be4:	60 e7       	ldi	r22, 0x70	; 112
    4be6:	77 e0       	ldi	r23, 0x07	; 7
    4be8:	8b e6       	ldi	r24, 0x6B	; 107
    4bea:	95 e2       	ldi	r25, 0x25	; 37
    4bec:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <xTaskCreate>
    4bf0:	df 91       	pop	r29
    4bf2:	cf 91       	pop	r28
    4bf4:	1f 91       	pop	r17
    4bf6:	0f 91       	pop	r16
    4bf8:	ff 90       	pop	r15
    4bfa:	ef 90       	pop	r14
    4bfc:	08 95       	ret

00004bfe <status_leds_slowBlink>:
    4bfe:	cf 93       	push	r28
    4c00:	df 93       	push	r29
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	fc 01       	movw	r30, r24
    4c06:	ee 0f       	add	r30, r30
    4c08:	ff 1f       	adc	r31, r31
    4c0a:	df 01       	movw	r26, r30
    4c0c:	a8 0f       	add	r26, r24
    4c0e:	b9 1f       	adc	r27, r25
    4c10:	aa 0f       	add	r26, r26
    4c12:	bb 1f       	adc	r27, r27
    4c14:	a6 58       	subi	r26, 0x86	; 134
    4c16:	bc 4e       	sbci	r27, 0xEC	; 236
    4c18:	cd 91       	ld	r28, X+
    4c1a:	dc 91       	ld	r29, X
    4c1c:	11 97       	sbiw	r26, 0x01	; 1
    4c1e:	48 81       	ld	r20, Y
    4c20:	21 e0       	ldi	r18, 0x01	; 1
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	12 96       	adiw	r26, 0x02	; 2
    4c26:	0c 90       	ld	r0, X
    4c28:	12 97       	sbiw	r26, 0x02	; 2
    4c2a:	02 c0       	rjmp	.+4      	; 0x4c30 <status_leds_slowBlink+0x32>
    4c2c:	22 0f       	add	r18, r18
    4c2e:	33 1f       	adc	r19, r19
    4c30:	0a 94       	dec	r0
    4c32:	e2 f7       	brpl	.-8      	; 0x4c2c <status_leds_slowBlink+0x2e>
    4c34:	24 27       	eor	r18, r20
    4c36:	28 83       	st	Y, r18
    4c38:	fd 01       	movw	r30, r26
    4c3a:	81 e0       	ldi	r24, 0x01	; 1
    4c3c:	84 83       	std	Z+4, r24	; 0x04
    4c3e:	df 91       	pop	r29
    4c40:	cf 91       	pop	r28
    4c42:	08 95       	ret

00004c44 <status_leds_fastBlink>:
    4c44:	cf 93       	push	r28
    4c46:	df 93       	push	r29
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	ee 0f       	add	r30, r30
    4c4e:	ff 1f       	adc	r31, r31
    4c50:	df 01       	movw	r26, r30
    4c52:	a8 0f       	add	r26, r24
    4c54:	b9 1f       	adc	r27, r25
    4c56:	aa 0f       	add	r26, r26
    4c58:	bb 1f       	adc	r27, r27
    4c5a:	a6 58       	subi	r26, 0x86	; 134
    4c5c:	bc 4e       	sbci	r27, 0xEC	; 236
    4c5e:	cd 91       	ld	r28, X+
    4c60:	dc 91       	ld	r29, X
    4c62:	11 97       	sbiw	r26, 0x01	; 1
    4c64:	48 81       	ld	r20, Y
    4c66:	21 e0       	ldi	r18, 0x01	; 1
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	12 96       	adiw	r26, 0x02	; 2
    4c6c:	0c 90       	ld	r0, X
    4c6e:	12 97       	sbiw	r26, 0x02	; 2
    4c70:	02 c0       	rjmp	.+4      	; 0x4c76 <status_leds_fastBlink+0x32>
    4c72:	22 0f       	add	r18, r18
    4c74:	33 1f       	adc	r19, r19
    4c76:	0a 94       	dec	r0
    4c78:	e2 f7       	brpl	.-8      	; 0x4c72 <status_leds_fastBlink+0x2e>
    4c7a:	24 27       	eor	r18, r20
    4c7c:	28 83       	st	Y, r18
    4c7e:	fd 01       	movw	r30, r26
    4c80:	82 e0       	ldi	r24, 0x02	; 2
    4c82:	84 83       	std	Z+4, r24	; 0x04
    4c84:	df 91       	pop	r29
    4c86:	cf 91       	pop	r28
    4c88:	08 95       	ret

00004c8a <status_leds_ledOn>:
    4c8a:	28 2f       	mov	r18, r24
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	f9 01       	movw	r30, r18
    4c90:	ee 0f       	add	r30, r30
    4c92:	ff 1f       	adc	r31, r31
    4c94:	e2 0f       	add	r30, r18
    4c96:	f3 1f       	adc	r31, r19
    4c98:	ee 0f       	add	r30, r30
    4c9a:	ff 1f       	adc	r31, r31
    4c9c:	e6 58       	subi	r30, 0x86	; 134
    4c9e:	fc 4e       	sbci	r31, 0xEC	; 236
    4ca0:	93 e0       	ldi	r25, 0x03	; 3
    4ca2:	94 83       	std	Z+4, r25	; 0x04
    4ca4:	cc ce       	rjmp	.-616    	; 0x4a3e <_turn_on>
    4ca6:	08 95       	ret

00004ca8 <status_leds_ledOff>:
    4ca8:	28 2f       	mov	r18, r24
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	f9 01       	movw	r30, r18
    4cae:	ee 0f       	add	r30, r30
    4cb0:	ff 1f       	adc	r31, r31
    4cb2:	e2 0f       	add	r30, r18
    4cb4:	f3 1f       	adc	r31, r19
    4cb6:	ee 0f       	add	r30, r30
    4cb8:	ff 1f       	adc	r31, r31
    4cba:	e6 58       	subi	r30, 0x86	; 134
    4cbc:	fc 4e       	sbci	r31, 0xEC	; 236
    4cbe:	94 e0       	ldi	r25, 0x04	; 4
    4cc0:	94 83       	std	Z+4, r25	; 0x04
    4cc2:	71 ce       	rjmp	.-798    	; 0x49a6 <_turn_off>
    4cc4:	08 95       	ret

00004cc6 <status_leds_longPuls>:
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	fc 01       	movw	r30, r24
    4cca:	ee 0f       	add	r30, r30
    4ccc:	ff 1f       	adc	r31, r31
    4cce:	df 01       	movw	r26, r30
    4cd0:	a8 0f       	add	r26, r24
    4cd2:	b9 1f       	adc	r27, r25
    4cd4:	aa 0f       	add	r26, r26
    4cd6:	bb 1f       	adc	r27, r27
    4cd8:	a6 58       	subi	r26, 0x86	; 134
    4cda:	bc 4e       	sbci	r27, 0xEC	; 236
    4cdc:	24 e0       	ldi	r18, 0x04	; 4
    4cde:	15 96       	adiw	r26, 0x05	; 5
    4ce0:	2c 93       	st	X, r18
    4ce2:	15 97       	sbiw	r26, 0x05	; 5
    4ce4:	fd 01       	movw	r30, r26
    4ce6:	14 82       	std	Z+4, r1	; 0x04
    4ce8:	08 95       	ret

00004cea <status_leds_shortPuls>:
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	fc 01       	movw	r30, r24
    4cee:	ee 0f       	add	r30, r30
    4cf0:	ff 1f       	adc	r31, r31
    4cf2:	df 01       	movw	r26, r30
    4cf4:	a8 0f       	add	r26, r24
    4cf6:	b9 1f       	adc	r27, r25
    4cf8:	aa 0f       	add	r26, r26
    4cfa:	bb 1f       	adc	r27, r27
    4cfc:	a6 58       	subi	r26, 0x86	; 134
    4cfe:	bc 4e       	sbci	r27, 0xEC	; 236
    4d00:	21 e0       	ldi	r18, 0x01	; 1
    4d02:	15 96       	adiw	r26, 0x05	; 5
    4d04:	2c 93       	st	X, r18
    4d06:	15 97       	sbiw	r26, 0x05	; 5
    4d08:	fd 01       	movw	r30, r26
    4d0a:	14 82       	std	Z+4, r1	; 0x04
    4d0c:	08 95       	ret

00004d0e <_initTwiInterface>:
    4d0e:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <_twiIsInitiated>
    4d12:	81 11       	cpse	r24, r1
    4d14:	0c c0       	rjmp	.+24     	; 0x4d2e <_initTwiInterface+0x20>
    4d16:	8c e0       	ldi	r24, 0x0C	; 12
    4d18:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4d1c:	8f ef       	ldi	r24, 0xFF	; 255
    4d1e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4d22:	84 e0       	ldi	r24, 0x04	; 4
    4d24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	80 93 a0 13 	sts	0x13A0, r24	; 0x8013a0 <_twiIsInitiated>
    4d2e:	08 95       	ret

00004d30 <twiCreate>:
    4d30:	af 92       	push	r10
    4d32:	bf 92       	push	r11
    4d34:	cf 92       	push	r12
    4d36:	df 92       	push	r13
    4d38:	ef 92       	push	r14
    4d3a:	ff 92       	push	r15
    4d3c:	0f 93       	push	r16
    4d3e:	1f 93       	push	r17
    4d40:	cf 93       	push	r28
    4d42:	df 93       	push	r29
    4d44:	a8 2e       	mov	r10, r24
    4d46:	b6 2e       	mov	r11, r22
    4d48:	69 01       	movw	r12, r18
    4d4a:	7a 01       	movw	r14, r20
    4d4c:	84 e0       	ldi	r24, 0x04	; 4
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	79 d3       	rcall	.+1778   	; 0x5444 <malloc>
    4d52:	ec 01       	movw	r28, r24
    4d54:	89 2b       	or	r24, r25
    4d56:	61 f1       	breq	.+88     	; 0x4db0 <twiCreate+0x80>
    4d58:	a8 82       	st	Y, r10
    4d5a:	81 e0       	ldi	r24, 0x01	; 1
    4d5c:	b8 12       	cpse	r11, r24
    4d5e:	12 c0       	rjmp	.+36     	; 0x4d84 <twiCreate+0x54>
    4d60:	c7 01       	movw	r24, r14
    4d62:	b6 01       	movw	r22, r12
    4d64:	20 ea       	ldi	r18, 0xA0	; 160
    4d66:	36 e8       	ldi	r19, 0x86	; 134
    4d68:	41 e0       	ldi	r20, 0x01	; 1
    4d6a:	50 e0       	ldi	r21, 0x00	; 0
    4d6c:	27 d3       	rcall	.+1614   	; 0x53bc <__udivmodsi4>
    4d6e:	da 01       	movw	r26, r20
    4d70:	c9 01       	movw	r24, r18
    4d72:	40 97       	sbiw	r24, 0x10	; 16
    4d74:	a1 09       	sbc	r26, r1
    4d76:	b1 09       	sbc	r27, r1
    4d78:	b6 95       	lsr	r27
    4d7a:	a7 95       	ror	r26
    4d7c:	97 95       	ror	r25
    4d7e:	87 95       	ror	r24
    4d80:	89 83       	std	Y+1, r24	; 0x01
    4d82:	11 c0       	rjmp	.+34     	; 0x4da6 <twiCreate+0x76>
    4d84:	c7 01       	movw	r24, r14
    4d86:	b6 01       	movw	r22, r12
    4d88:	20 e8       	ldi	r18, 0x80	; 128
    4d8a:	3a e1       	ldi	r19, 0x1A	; 26
    4d8c:	46 e0       	ldi	r20, 0x06	; 6
    4d8e:	50 e0       	ldi	r21, 0x00	; 0
    4d90:	15 d3       	rcall	.+1578   	; 0x53bc <__udivmodsi4>
    4d92:	da 01       	movw	r26, r20
    4d94:	c9 01       	movw	r24, r18
    4d96:	40 97       	sbiw	r24, 0x10	; 16
    4d98:	a1 09       	sbc	r26, r1
    4d9a:	b1 09       	sbc	r27, r1
    4d9c:	b6 95       	lsr	r27
    4d9e:	a7 95       	ror	r26
    4da0:	97 95       	ror	r25
    4da2:	87 95       	ror	r24
    4da4:	89 83       	std	Y+1, r24	; 0x01
    4da6:	1b 83       	std	Y+3, r17	; 0x03
    4da8:	0a 83       	std	Y+2, r16	; 0x02
    4daa:	8c 2f       	mov	r24, r28
    4dac:	9d 2f       	mov	r25, r29
    4dae:	02 c0       	rjmp	.+4      	; 0x4db4 <twiCreate+0x84>
    4db0:	80 e0       	ldi	r24, 0x00	; 0
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	df 91       	pop	r29
    4db6:	cf 91       	pop	r28
    4db8:	1f 91       	pop	r17
    4dba:	0f 91       	pop	r16
    4dbc:	ff 90       	pop	r15
    4dbe:	ef 90       	pop	r14
    4dc0:	df 90       	pop	r13
    4dc2:	cf 90       	pop	r12
    4dc4:	bf 90       	pop	r11
    4dc6:	af 90       	pop	r10
    4dc8:	08 95       	ret

00004dca <twiIsBusy>:
    4dca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4dce:	81 70       	andi	r24, 0x01	; 1
    4dd0:	08 95       	ret

00004dd2 <twiTransmit>:
    4dd2:	ff 92       	push	r15
    4dd4:	0f 93       	push	r16
    4dd6:	1f 93       	push	r17
    4dd8:	cf 93       	push	r28
    4dda:	df 93       	push	r29
    4ddc:	00 97       	sbiw	r24, 0x00	; 0
    4dde:	d1 f1       	breq	.+116    	; 0x4e54 <twiTransmit+0x82>
    4de0:	4a 30       	cpi	r20, 0x0A	; 10
    4de2:	d0 f5       	brcc	.+116    	; 0x4e58 <twiTransmit+0x86>
    4de4:	f4 2e       	mov	r15, r20
    4de6:	8b 01       	movw	r16, r22
    4de8:	ec 01       	movw	r28, r24
    4dea:	ef df       	rcall	.-34     	; 0x4dca <twiIsBusy>
    4dec:	81 11       	cpse	r24, r1
    4dee:	36 c0       	rjmp	.+108    	; 0x4e5c <twiTransmit+0x8a>
    4df0:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_twiCurrentHandler>
    4df4:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_twiCurrentHandler+0x1>
    4df8:	c8 17       	cp	r28, r24
    4dfa:	d9 07       	cpc	r29, r25
    4dfc:	41 f0       	breq	.+16     	; 0x4e0e <twiTransmit+0x3c>
    4dfe:	87 df       	rcall	.-242    	; 0x4d0e <_initTwiInterface>
    4e00:	89 81       	ldd	r24, Y+1	; 0x01
    4e02:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4e06:	d0 93 94 13 	sts	0x1394, r29	; 0x801394 <_twiCurrentHandler+0x1>
    4e0a:	c0 93 93 13 	sts	0x1393, r28	; 0x801393 <_twiCurrentHandler>
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	8f 0d       	add	r24, r15
    4e12:	80 93 95 13 	sts	0x1395, r24	; 0x801395 <_twiMessageLen>
    4e16:	88 81       	ld	r24, Y
    4e18:	88 0f       	add	r24, r24
    4e1a:	80 93 96 13 	sts	0x1396, r24	; 0x801396 <_twiMessageBuffer>
    4e1e:	ff 20       	and	r15, r15
    4e20:	89 f0       	breq	.+34     	; 0x4e44 <twiTransmit+0x72>
    4e22:	f8 01       	movw	r30, r16
    4e24:	a7 e9       	ldi	r26, 0x97	; 151
    4e26:	b3 e1       	ldi	r27, 0x13	; 19
    4e28:	4f ef       	ldi	r20, 0xFF	; 255
    4e2a:	4f 0d       	add	r20, r15
    4e2c:	64 2f       	mov	r22, r20
    4e2e:	70 e0       	ldi	r23, 0x00	; 0
    4e30:	cb 01       	movw	r24, r22
    4e32:	01 96       	adiw	r24, 0x01	; 1
    4e34:	b8 01       	movw	r22, r16
    4e36:	68 0f       	add	r22, r24
    4e38:	79 1f       	adc	r23, r25
    4e3a:	81 91       	ld	r24, Z+
    4e3c:	8d 93       	st	X+, r24
    4e3e:	e6 17       	cp	r30, r22
    4e40:	f7 07       	cpc	r31, r23
    4e42:	d9 f7       	brne	.-10     	; 0x4e3a <twiTransmit+0x68>
    4e44:	88 ef       	ldi	r24, 0xF8	; 248
    4e46:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4e4a:	85 ea       	ldi	r24, 0xA5	; 165
    4e4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e50:	84 e0       	ldi	r24, 0x04	; 4
    4e52:	05 c0       	rjmp	.+10     	; 0x4e5e <twiTransmit+0x8c>
    4e54:	86 e0       	ldi	r24, 0x06	; 6
    4e56:	03 c0       	rjmp	.+6      	; 0x4e5e <twiTransmit+0x8c>
    4e58:	87 e0       	ldi	r24, 0x07	; 7
    4e5a:	01 c0       	rjmp	.+2      	; 0x4e5e <twiTransmit+0x8c>
    4e5c:	82 e0       	ldi	r24, 0x02	; 2
    4e5e:	df 91       	pop	r29
    4e60:	cf 91       	pop	r28
    4e62:	1f 91       	pop	r17
    4e64:	0f 91       	pop	r16
    4e66:	ff 90       	pop	r15
    4e68:	08 95       	ret

00004e6a <twiReceive>:
    4e6a:	1f 93       	push	r17
    4e6c:	cf 93       	push	r28
    4e6e:	df 93       	push	r29
    4e70:	00 97       	sbiw	r24, 0x00	; 0
    4e72:	29 f1       	breq	.+74     	; 0x4ebe <twiReceive+0x54>
    4e74:	6b 30       	cpi	r22, 0x0B	; 11
    4e76:	28 f5       	brcc	.+74     	; 0x4ec2 <twiReceive+0x58>
    4e78:	16 2f       	mov	r17, r22
    4e7a:	ec 01       	movw	r28, r24
    4e7c:	a6 df       	rcall	.-180    	; 0x4dca <twiIsBusy>
    4e7e:	81 11       	cpse	r24, r1
    4e80:	22 c0       	rjmp	.+68     	; 0x4ec6 <twiReceive+0x5c>
    4e82:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_twiCurrentHandler>
    4e86:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_twiCurrentHandler+0x1>
    4e8a:	c8 17       	cp	r28, r24
    4e8c:	d9 07       	cpc	r29, r25
    4e8e:	41 f0       	breq	.+16     	; 0x4ea0 <twiReceive+0x36>
    4e90:	3e df       	rcall	.-388    	; 0x4d0e <_initTwiInterface>
    4e92:	89 81       	ldd	r24, Y+1	; 0x01
    4e94:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4e98:	d0 93 94 13 	sts	0x1394, r29	; 0x801394 <_twiCurrentHandler+0x1>
    4e9c:	c0 93 93 13 	sts	0x1393, r28	; 0x801393 <_twiCurrentHandler>
    4ea0:	10 93 95 13 	sts	0x1395, r17	; 0x801395 <_twiMessageLen>
    4ea4:	88 81       	ld	r24, Y
    4ea6:	88 0f       	add	r24, r24
    4ea8:	81 60       	ori	r24, 0x01	; 1
    4eaa:	80 93 96 13 	sts	0x1396, r24	; 0x801396 <_twiMessageBuffer>
    4eae:	88 ef       	ldi	r24, 0xF8	; 248
    4eb0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4eb4:	85 ea       	ldi	r24, 0xA5	; 165
    4eb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4eba:	85 e0       	ldi	r24, 0x05	; 5
    4ebc:	05 c0       	rjmp	.+10     	; 0x4ec8 <twiReceive+0x5e>
    4ebe:	86 e0       	ldi	r24, 0x06	; 6
    4ec0:	03 c0       	rjmp	.+6      	; 0x4ec8 <twiReceive+0x5e>
    4ec2:	87 e0       	ldi	r24, 0x07	; 7
    4ec4:	01 c0       	rjmp	.+2      	; 0x4ec8 <twiReceive+0x5e>
    4ec6:	82 e0       	ldi	r24, 0x02	; 2
    4ec8:	df 91       	pop	r29
    4eca:	cf 91       	pop	r28
    4ecc:	1f 91       	pop	r17
    4ece:	08 95       	ret

00004ed0 <__vector_39>:
    4ed0:	1f 92       	push	r1
    4ed2:	0f 92       	push	r0
    4ed4:	0f b6       	in	r0, 0x3f	; 63
    4ed6:	0f 92       	push	r0
    4ed8:	11 24       	eor	r1, r1
    4eda:	0b b6       	in	r0, 0x3b	; 59
    4edc:	0f 92       	push	r0
    4ede:	2f 93       	push	r18
    4ee0:	3f 93       	push	r19
    4ee2:	4f 93       	push	r20
    4ee4:	5f 93       	push	r21
    4ee6:	6f 93       	push	r22
    4ee8:	7f 93       	push	r23
    4eea:	8f 93       	push	r24
    4eec:	9f 93       	push	r25
    4eee:	af 93       	push	r26
    4ef0:	bf 93       	push	r27
    4ef2:	ef 93       	push	r30
    4ef4:	ff 93       	push	r31
    4ef6:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4efa:	8e 2f       	mov	r24, r30
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	fc 01       	movw	r30, r24
    4f00:	38 97       	sbiw	r30, 0x08	; 8
    4f02:	e1 35       	cpi	r30, 0x51	; 81
    4f04:	f1 05       	cpc	r31, r1
    4f06:	08 f0       	brcs	.+2      	; 0x4f0a <__vector_39+0x3a>
    4f08:	75 c0       	rjmp	.+234    	; 0x4ff4 <__vector_39+0x124>
    4f0a:	88 27       	eor	r24, r24
    4f0c:	e4 58       	subi	r30, 0x84	; 132
    4f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f10:	8f 4f       	sbci	r24, 0xFF	; 255
    4f12:	76 c2       	rjmp	.+1260   	; 0x5400 <__tablejump2__>
    4f14:	10 92 92 13 	sts	0x1392, r1	; 0x801392 <_index.1885>
    4f18:	e0 91 92 13 	lds	r30, 0x1392	; 0x801392 <_index.1885>
    4f1c:	80 91 95 13 	lds	r24, 0x1395	; 0x801395 <_twiMessageLen>
    4f20:	e8 17       	cp	r30, r24
    4f22:	70 f4       	brcc	.+28     	; 0x4f40 <__vector_39+0x70>
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	8e 0f       	add	r24, r30
    4f28:	80 93 92 13 	sts	0x1392, r24	; 0x801392 <_index.1885>
    4f2c:	f0 e0       	ldi	r31, 0x00	; 0
    4f2e:	ea 56       	subi	r30, 0x6A	; 106
    4f30:	fc 4e       	sbci	r31, 0xEC	; 236
    4f32:	80 81       	ld	r24, Z
    4f34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f38:	85 e8       	ldi	r24, 0x85	; 133
    4f3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f3e:	72 c0       	rjmp	.+228    	; 0x5024 <__vector_39+0x154>
    4f40:	84 e9       	ldi	r24, 0x94	; 148
    4f42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f46:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_twiCurrentHandler>
    4f4a:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_twiCurrentHandler+0x1>
    4f4e:	dc 01       	movw	r26, r24
    4f50:	12 96       	adiw	r26, 0x02	; 2
    4f52:	ed 91       	ld	r30, X+
    4f54:	fc 91       	ld	r31, X
    4f56:	13 97       	sbiw	r26, 0x03	; 3
    4f58:	30 97       	sbiw	r30, 0x00	; 0
    4f5a:	09 f4       	brne	.+2      	; 0x4f5e <__vector_39+0x8e>
    4f5c:	63 c0       	rjmp	.+198    	; 0x5024 <__vector_39+0x154>
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	40 e0       	ldi	r20, 0x00	; 0
    4f62:	50 e0       	ldi	r21, 0x00	; 0
    4f64:	64 e0       	ldi	r22, 0x04	; 4
    4f66:	19 95       	eicall
    4f68:	5d c0       	rjmp	.+186    	; 0x5024 <__vector_39+0x154>
    4f6a:	e0 91 92 13 	lds	r30, 0x1392	; 0x801392 <_index.1885>
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	8e 0f       	add	r24, r30
    4f72:	80 93 92 13 	sts	0x1392, r24	; 0x801392 <_index.1885>
    4f76:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f7a:	f0 e0       	ldi	r31, 0x00	; 0
    4f7c:	ea 56       	subi	r30, 0x6A	; 106
    4f7e:	fc 4e       	sbci	r31, 0xEC	; 236
    4f80:	80 83       	st	Z, r24
    4f82:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4f86:	80 34       	cpi	r24, 0x40	; 64
    4f88:	11 f4       	brne	.+4      	; 0x4f8e <__vector_39+0xbe>
    4f8a:	10 92 92 13 	sts	0x1392, r1	; 0x801392 <_index.1885>
    4f8e:	20 91 92 13 	lds	r18, 0x1392	; 0x801392 <_index.1885>
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	80 91 95 13 	lds	r24, 0x1395	; 0x801395 <_twiMessageLen>
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	01 97       	sbiw	r24, 0x01	; 1
    4f9c:	28 17       	cp	r18, r24
    4f9e:	39 07       	cpc	r19, r25
    4fa0:	24 f4       	brge	.+8      	; 0x4faa <__vector_39+0xda>
    4fa2:	85 ec       	ldi	r24, 0xC5	; 197
    4fa4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fa8:	3d c0       	rjmp	.+122    	; 0x5024 <__vector_39+0x154>
    4faa:	85 e8       	ldi	r24, 0x85	; 133
    4fac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fb0:	39 c0       	rjmp	.+114    	; 0x5024 <__vector_39+0x154>
    4fb2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4fb6:	e0 91 92 13 	lds	r30, 0x1392	; 0x801392 <_index.1885>
    4fba:	f0 e0       	ldi	r31, 0x00	; 0
    4fbc:	ea 56       	subi	r30, 0x6A	; 106
    4fbe:	fc 4e       	sbci	r31, 0xEC	; 236
    4fc0:	80 83       	st	Z, r24
    4fc2:	84 e9       	ldi	r24, 0x94	; 148
    4fc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fc8:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_twiCurrentHandler>
    4fcc:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_twiCurrentHandler+0x1>
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	12 96       	adiw	r26, 0x02	; 2
    4fd4:	ed 91       	ld	r30, X+
    4fd6:	fc 91       	ld	r31, X
    4fd8:	13 97       	sbiw	r26, 0x03	; 3
    4fda:	30 97       	sbiw	r30, 0x00	; 0
    4fdc:	19 f1       	breq	.+70     	; 0x5024 <__vector_39+0x154>
    4fde:	20 91 95 13 	lds	r18, 0x1395	; 0x801395 <_twiMessageLen>
    4fe2:	46 e9       	ldi	r20, 0x96	; 150
    4fe4:	53 e1       	ldi	r21, 0x13	; 19
    4fe6:	65 e0       	ldi	r22, 0x05	; 5
    4fe8:	19 95       	eicall
    4fea:	1c c0       	rjmp	.+56     	; 0x5024 <__vector_39+0x154>
    4fec:	85 ea       	ldi	r24, 0xA5	; 165
    4fee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ff2:	18 c0       	rjmp	.+48     	; 0x5024 <__vector_39+0x154>
    4ff4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4ff8:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4ffc:	84 e0       	ldi	r24, 0x04	; 4
    4ffe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5002:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_twiCurrentHandler>
    5006:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_twiCurrentHandler+0x1>
    500a:	dc 01       	movw	r26, r24
    500c:	12 96       	adiw	r26, 0x02	; 2
    500e:	ed 91       	ld	r30, X+
    5010:	fc 91       	ld	r31, X
    5012:	13 97       	sbiw	r26, 0x03	; 3
    5014:	30 97       	sbiw	r30, 0x00	; 0
    5016:	31 f0       	breq	.+12     	; 0x5024 <__vector_39+0x154>
    5018:	20 e0       	ldi	r18, 0x00	; 0
    501a:	40 e0       	ldi	r20, 0x00	; 0
    501c:	50 e0       	ldi	r21, 0x00	; 0
    501e:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5022:	19 95       	eicall
    5024:	ff 91       	pop	r31
    5026:	ef 91       	pop	r30
    5028:	bf 91       	pop	r27
    502a:	af 91       	pop	r26
    502c:	9f 91       	pop	r25
    502e:	8f 91       	pop	r24
    5030:	7f 91       	pop	r23
    5032:	6f 91       	pop	r22
    5034:	5f 91       	pop	r21
    5036:	4f 91       	pop	r20
    5038:	3f 91       	pop	r19
    503a:	2f 91       	pop	r18
    503c:	0f 90       	pop	r0
    503e:	0b be       	out	0x3b, r0	; 59
    5040:	0f 90       	pop	r0
    5042:	0f be       	out	0x3f, r0	; 63
    5044:	0f 90       	pop	r0
    5046:	1f 90       	pop	r1
    5048:	18 95       	reti

0000504a <fifo_init>:
    504a:	fc 01       	movw	r30, r24
    504c:	41 11       	cpse	r20, r1
    504e:	01 c0       	rjmp	.+2      	; 0x5052 <fifo_init+0x8>
    5050:	1a d3       	rcall	.+1588   	; 0x5686 <abort>
    5052:	84 2f       	mov	r24, r20
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	9c 01       	movw	r18, r24
    5058:	21 50       	subi	r18, 0x01	; 1
    505a:	31 09       	sbc	r19, r1
    505c:	82 23       	and	r24, r18
    505e:	93 23       	and	r25, r19
    5060:	89 2b       	or	r24, r25
    5062:	09 f0       	breq	.+2      	; 0x5066 <fifo_init+0x1c>
    5064:	10 d3       	rcall	.+1568   	; 0x5686 <abort>
    5066:	41 38       	cpi	r20, 0x81	; 129
    5068:	08 f0       	brcs	.+2      	; 0x506c <fifo_init+0x22>
    506a:	0d d3       	rcall	.+1562   	; 0x5686 <abort>
    506c:	12 82       	std	Z+2, r1	; 0x02
    506e:	13 82       	std	Z+3, r1	; 0x03
    5070:	44 83       	std	Z+4, r20	; 0x04
    5072:	44 0f       	add	r20, r20
    5074:	41 50       	subi	r20, 0x01	; 1
    5076:	45 83       	std	Z+5, r20	; 0x05
    5078:	71 83       	std	Z+1, r23	; 0x01
    507a:	60 83       	st	Z, r22
    507c:	80 e0       	ldi	r24, 0x00	; 0
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	08 95       	ret

00005082 <__subsf3>:
    5082:	50 58       	subi	r21, 0x80	; 128

00005084 <__addsf3>:
    5084:	bb 27       	eor	r27, r27
    5086:	aa 27       	eor	r26, r26
    5088:	0e d0       	rcall	.+28     	; 0x50a6 <__addsf3x>
    508a:	21 c1       	rjmp	.+578    	; 0x52ce <__fp_round>
    508c:	12 d1       	rcall	.+548    	; 0x52b2 <__fp_pscA>
    508e:	30 f0       	brcs	.+12     	; 0x509c <__addsf3+0x18>
    5090:	17 d1       	rcall	.+558    	; 0x52c0 <__fp_pscB>
    5092:	20 f0       	brcs	.+8      	; 0x509c <__addsf3+0x18>
    5094:	31 f4       	brne	.+12     	; 0x50a2 <__addsf3+0x1e>
    5096:	9f 3f       	cpi	r25, 0xFF	; 255
    5098:	11 f4       	brne	.+4      	; 0x509e <__addsf3+0x1a>
    509a:	1e f4       	brtc	.+6      	; 0x50a2 <__addsf3+0x1e>
    509c:	07 c1       	rjmp	.+526    	; 0x52ac <__fp_nan>
    509e:	0e f4       	brtc	.+2      	; 0x50a2 <__addsf3+0x1e>
    50a0:	e0 95       	com	r30
    50a2:	e7 fb       	bst	r30, 7
    50a4:	fd c0       	rjmp	.+506    	; 0x52a0 <__fp_inf>

000050a6 <__addsf3x>:
    50a6:	e9 2f       	mov	r30, r25
    50a8:	0e 94 0f 1b 	call	0x361e	; 0x361e <__fp_split3>
    50ac:	78 f3       	brcs	.-34     	; 0x508c <__addsf3+0x8>
    50ae:	ba 17       	cp	r27, r26
    50b0:	62 07       	cpc	r22, r18
    50b2:	73 07       	cpc	r23, r19
    50b4:	84 07       	cpc	r24, r20
    50b6:	95 07       	cpc	r25, r21
    50b8:	20 f0       	brcs	.+8      	; 0x50c2 <__addsf3x+0x1c>
    50ba:	79 f4       	brne	.+30     	; 0x50da <__addsf3x+0x34>
    50bc:	a6 f5       	brtc	.+104    	; 0x5126 <__addsf3x+0x80>
    50be:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <__fp_zero>
    50c2:	0e f4       	brtc	.+2      	; 0x50c6 <__addsf3x+0x20>
    50c4:	e0 95       	com	r30
    50c6:	0b 2e       	mov	r0, r27
    50c8:	ba 2f       	mov	r27, r26
    50ca:	a0 2d       	mov	r26, r0
    50cc:	0b 01       	movw	r0, r22
    50ce:	b9 01       	movw	r22, r18
    50d0:	90 01       	movw	r18, r0
    50d2:	0c 01       	movw	r0, r24
    50d4:	ca 01       	movw	r24, r20
    50d6:	a0 01       	movw	r20, r0
    50d8:	11 24       	eor	r1, r1
    50da:	ff 27       	eor	r31, r31
    50dc:	59 1b       	sub	r21, r25
    50de:	99 f0       	breq	.+38     	; 0x5106 <__addsf3x+0x60>
    50e0:	59 3f       	cpi	r21, 0xF9	; 249
    50e2:	50 f4       	brcc	.+20     	; 0x50f8 <__addsf3x+0x52>
    50e4:	50 3e       	cpi	r21, 0xE0	; 224
    50e6:	68 f1       	brcs	.+90     	; 0x5142 <__addsf3x+0x9c>
    50e8:	1a 16       	cp	r1, r26
    50ea:	f0 40       	sbci	r31, 0x00	; 0
    50ec:	a2 2f       	mov	r26, r18
    50ee:	23 2f       	mov	r18, r19
    50f0:	34 2f       	mov	r19, r20
    50f2:	44 27       	eor	r20, r20
    50f4:	58 5f       	subi	r21, 0xF8	; 248
    50f6:	f3 cf       	rjmp	.-26     	; 0x50de <__addsf3x+0x38>
    50f8:	46 95       	lsr	r20
    50fa:	37 95       	ror	r19
    50fc:	27 95       	ror	r18
    50fe:	a7 95       	ror	r26
    5100:	f0 40       	sbci	r31, 0x00	; 0
    5102:	53 95       	inc	r21
    5104:	c9 f7       	brne	.-14     	; 0x50f8 <__addsf3x+0x52>
    5106:	7e f4       	brtc	.+30     	; 0x5126 <__addsf3x+0x80>
    5108:	1f 16       	cp	r1, r31
    510a:	ba 0b       	sbc	r27, r26
    510c:	62 0b       	sbc	r22, r18
    510e:	73 0b       	sbc	r23, r19
    5110:	84 0b       	sbc	r24, r20
    5112:	ba f0       	brmi	.+46     	; 0x5142 <__addsf3x+0x9c>
    5114:	91 50       	subi	r25, 0x01	; 1
    5116:	a1 f0       	breq	.+40     	; 0x5140 <__addsf3x+0x9a>
    5118:	ff 0f       	add	r31, r31
    511a:	bb 1f       	adc	r27, r27
    511c:	66 1f       	adc	r22, r22
    511e:	77 1f       	adc	r23, r23
    5120:	88 1f       	adc	r24, r24
    5122:	c2 f7       	brpl	.-16     	; 0x5114 <__addsf3x+0x6e>
    5124:	0e c0       	rjmp	.+28     	; 0x5142 <__addsf3x+0x9c>
    5126:	ba 0f       	add	r27, r26
    5128:	62 1f       	adc	r22, r18
    512a:	73 1f       	adc	r23, r19
    512c:	84 1f       	adc	r24, r20
    512e:	48 f4       	brcc	.+18     	; 0x5142 <__addsf3x+0x9c>
    5130:	87 95       	ror	r24
    5132:	77 95       	ror	r23
    5134:	67 95       	ror	r22
    5136:	b7 95       	ror	r27
    5138:	f7 95       	ror	r31
    513a:	9e 3f       	cpi	r25, 0xFE	; 254
    513c:	08 f0       	brcs	.+2      	; 0x5140 <__addsf3x+0x9a>
    513e:	b1 cf       	rjmp	.-158    	; 0x50a2 <__addsf3+0x1e>
    5140:	93 95       	inc	r25
    5142:	88 0f       	add	r24, r24
    5144:	08 f0       	brcs	.+2      	; 0x5148 <__addsf3x+0xa2>
    5146:	99 27       	eor	r25, r25
    5148:	ee 0f       	add	r30, r30
    514a:	97 95       	ror	r25
    514c:	87 95       	ror	r24
    514e:	08 95       	ret

00005150 <__divsf3>:
    5150:	0d d0       	rcall	.+26     	; 0x516c <__divsf3x>
    5152:	bd c0       	rjmp	.+378    	; 0x52ce <__fp_round>
    5154:	b5 d0       	rcall	.+362    	; 0x52c0 <__fp_pscB>
    5156:	48 f0       	brcs	.+18     	; 0x516a <__divsf3+0x1a>
    5158:	ac d0       	rcall	.+344    	; 0x52b2 <__fp_pscA>
    515a:	38 f0       	brcs	.+14     	; 0x516a <__divsf3+0x1a>
    515c:	21 f4       	brne	.+8      	; 0x5166 <__divsf3+0x16>
    515e:	5f 3f       	cpi	r21, 0xFF	; 255
    5160:	21 f0       	breq	.+8      	; 0x516a <__divsf3+0x1a>
    5162:	9e c0       	rjmp	.+316    	; 0x52a0 <__fp_inf>
    5164:	51 11       	cpse	r21, r1
    5166:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__fp_szero>
    516a:	a0 c0       	rjmp	.+320    	; 0x52ac <__fp_nan>

0000516c <__divsf3x>:
    516c:	0e 94 0f 1b 	call	0x361e	; 0x361e <__fp_split3>
    5170:	88 f3       	brcs	.-30     	; 0x5154 <__divsf3+0x4>

00005172 <__divsf3_pse>:
    5172:	99 23       	and	r25, r25
    5174:	b9 f3       	breq	.-18     	; 0x5164 <__divsf3+0x14>
    5176:	55 23       	and	r21, r21
    5178:	a1 f3       	breq	.-24     	; 0x5162 <__divsf3+0x12>
    517a:	95 1b       	sub	r25, r21
    517c:	55 0b       	sbc	r21, r21
    517e:	bb 27       	eor	r27, r27
    5180:	aa 27       	eor	r26, r26
    5182:	62 17       	cp	r22, r18
    5184:	73 07       	cpc	r23, r19
    5186:	84 07       	cpc	r24, r20
    5188:	38 f0       	brcs	.+14     	; 0x5198 <__divsf3_pse+0x26>
    518a:	9f 5f       	subi	r25, 0xFF	; 255
    518c:	5f 4f       	sbci	r21, 0xFF	; 255
    518e:	22 0f       	add	r18, r18
    5190:	33 1f       	adc	r19, r19
    5192:	44 1f       	adc	r20, r20
    5194:	aa 1f       	adc	r26, r26
    5196:	a9 f3       	breq	.-22     	; 0x5182 <__divsf3_pse+0x10>
    5198:	34 d0       	rcall	.+104    	; 0x5202 <__divsf3_pse+0x90>
    519a:	0e 2e       	mov	r0, r30
    519c:	3a f0       	brmi	.+14     	; 0x51ac <__divsf3_pse+0x3a>
    519e:	e0 e8       	ldi	r30, 0x80	; 128
    51a0:	31 d0       	rcall	.+98     	; 0x5204 <__divsf3_pse+0x92>
    51a2:	91 50       	subi	r25, 0x01	; 1
    51a4:	50 40       	sbci	r21, 0x00	; 0
    51a6:	e6 95       	lsr	r30
    51a8:	00 1c       	adc	r0, r0
    51aa:	ca f7       	brpl	.-14     	; 0x519e <__divsf3_pse+0x2c>
    51ac:	2a d0       	rcall	.+84     	; 0x5202 <__divsf3_pse+0x90>
    51ae:	fe 2f       	mov	r31, r30
    51b0:	28 d0       	rcall	.+80     	; 0x5202 <__divsf3_pse+0x90>
    51b2:	66 0f       	add	r22, r22
    51b4:	77 1f       	adc	r23, r23
    51b6:	88 1f       	adc	r24, r24
    51b8:	bb 1f       	adc	r27, r27
    51ba:	26 17       	cp	r18, r22
    51bc:	37 07       	cpc	r19, r23
    51be:	48 07       	cpc	r20, r24
    51c0:	ab 07       	cpc	r26, r27
    51c2:	b0 e8       	ldi	r27, 0x80	; 128
    51c4:	09 f0       	breq	.+2      	; 0x51c8 <__divsf3_pse+0x56>
    51c6:	bb 0b       	sbc	r27, r27
    51c8:	80 2d       	mov	r24, r0
    51ca:	bf 01       	movw	r22, r30
    51cc:	ff 27       	eor	r31, r31
    51ce:	93 58       	subi	r25, 0x83	; 131
    51d0:	5f 4f       	sbci	r21, 0xFF	; 255
    51d2:	32 f0       	brmi	.+12     	; 0x51e0 <__divsf3_pse+0x6e>
    51d4:	9e 3f       	cpi	r25, 0xFE	; 254
    51d6:	51 05       	cpc	r21, r1
    51d8:	70 f0       	brcs	.+28     	; 0x51f6 <__divsf3_pse+0x84>
    51da:	62 c0       	rjmp	.+196    	; 0x52a0 <__fp_inf>
    51dc:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__fp_szero>
    51e0:	5f 3f       	cpi	r21, 0xFF	; 255
    51e2:	e4 f3       	brlt	.-8      	; 0x51dc <__divsf3_pse+0x6a>
    51e4:	98 3e       	cpi	r25, 0xE8	; 232
    51e6:	d4 f3       	brlt	.-12     	; 0x51dc <__divsf3_pse+0x6a>
    51e8:	86 95       	lsr	r24
    51ea:	77 95       	ror	r23
    51ec:	67 95       	ror	r22
    51ee:	b7 95       	ror	r27
    51f0:	f7 95       	ror	r31
    51f2:	9f 5f       	subi	r25, 0xFF	; 255
    51f4:	c9 f7       	brne	.-14     	; 0x51e8 <__divsf3_pse+0x76>
    51f6:	88 0f       	add	r24, r24
    51f8:	91 1d       	adc	r25, r1
    51fa:	96 95       	lsr	r25
    51fc:	87 95       	ror	r24
    51fe:	97 f9       	bld	r25, 7
    5200:	08 95       	ret
    5202:	e1 e0       	ldi	r30, 0x01	; 1
    5204:	66 0f       	add	r22, r22
    5206:	77 1f       	adc	r23, r23
    5208:	88 1f       	adc	r24, r24
    520a:	bb 1f       	adc	r27, r27
    520c:	62 17       	cp	r22, r18
    520e:	73 07       	cpc	r23, r19
    5210:	84 07       	cpc	r24, r20
    5212:	ba 07       	cpc	r27, r26
    5214:	20 f0       	brcs	.+8      	; 0x521e <__divsf3_pse+0xac>
    5216:	62 1b       	sub	r22, r18
    5218:	73 0b       	sbc	r23, r19
    521a:	84 0b       	sbc	r24, r20
    521c:	ba 0b       	sbc	r27, r26
    521e:	ee 1f       	adc	r30, r30
    5220:	88 f7       	brcc	.-30     	; 0x5204 <__divsf3_pse+0x92>
    5222:	e0 95       	com	r30
    5224:	08 95       	ret

00005226 <__floatunsisf>:
    5226:	e8 94       	clt
    5228:	09 c0       	rjmp	.+18     	; 0x523c <__floatsisf+0x12>

0000522a <__floatsisf>:
    522a:	97 fb       	bst	r25, 7
    522c:	3e f4       	brtc	.+14     	; 0x523c <__floatsisf+0x12>
    522e:	90 95       	com	r25
    5230:	80 95       	com	r24
    5232:	70 95       	com	r23
    5234:	61 95       	neg	r22
    5236:	7f 4f       	sbci	r23, 0xFF	; 255
    5238:	8f 4f       	sbci	r24, 0xFF	; 255
    523a:	9f 4f       	sbci	r25, 0xFF	; 255
    523c:	99 23       	and	r25, r25
    523e:	a9 f0       	breq	.+42     	; 0x526a <__floatsisf+0x40>
    5240:	f9 2f       	mov	r31, r25
    5242:	96 e9       	ldi	r25, 0x96	; 150
    5244:	bb 27       	eor	r27, r27
    5246:	93 95       	inc	r25
    5248:	f6 95       	lsr	r31
    524a:	87 95       	ror	r24
    524c:	77 95       	ror	r23
    524e:	67 95       	ror	r22
    5250:	b7 95       	ror	r27
    5252:	f1 11       	cpse	r31, r1
    5254:	f8 cf       	rjmp	.-16     	; 0x5246 <__floatsisf+0x1c>
    5256:	fa f4       	brpl	.+62     	; 0x5296 <__floatsisf+0x6c>
    5258:	bb 0f       	add	r27, r27
    525a:	11 f4       	brne	.+4      	; 0x5260 <__floatsisf+0x36>
    525c:	60 ff       	sbrs	r22, 0
    525e:	1b c0       	rjmp	.+54     	; 0x5296 <__floatsisf+0x6c>
    5260:	6f 5f       	subi	r22, 0xFF	; 255
    5262:	7f 4f       	sbci	r23, 0xFF	; 255
    5264:	8f 4f       	sbci	r24, 0xFF	; 255
    5266:	9f 4f       	sbci	r25, 0xFF	; 255
    5268:	16 c0       	rjmp	.+44     	; 0x5296 <__floatsisf+0x6c>
    526a:	88 23       	and	r24, r24
    526c:	11 f0       	breq	.+4      	; 0x5272 <__floatsisf+0x48>
    526e:	96 e9       	ldi	r25, 0x96	; 150
    5270:	11 c0       	rjmp	.+34     	; 0x5294 <__floatsisf+0x6a>
    5272:	77 23       	and	r23, r23
    5274:	21 f0       	breq	.+8      	; 0x527e <__floatsisf+0x54>
    5276:	9e e8       	ldi	r25, 0x8E	; 142
    5278:	87 2f       	mov	r24, r23
    527a:	76 2f       	mov	r23, r22
    527c:	05 c0       	rjmp	.+10     	; 0x5288 <__floatsisf+0x5e>
    527e:	66 23       	and	r22, r22
    5280:	71 f0       	breq	.+28     	; 0x529e <__floatsisf+0x74>
    5282:	96 e8       	ldi	r25, 0x86	; 134
    5284:	86 2f       	mov	r24, r22
    5286:	70 e0       	ldi	r23, 0x00	; 0
    5288:	60 e0       	ldi	r22, 0x00	; 0
    528a:	2a f0       	brmi	.+10     	; 0x5296 <__floatsisf+0x6c>
    528c:	9a 95       	dec	r25
    528e:	66 0f       	add	r22, r22
    5290:	77 1f       	adc	r23, r23
    5292:	88 1f       	adc	r24, r24
    5294:	da f7       	brpl	.-10     	; 0x528c <__floatsisf+0x62>
    5296:	88 0f       	add	r24, r24
    5298:	96 95       	lsr	r25
    529a:	87 95       	ror	r24
    529c:	97 f9       	bld	r25, 7
    529e:	08 95       	ret

000052a0 <__fp_inf>:
    52a0:	97 f9       	bld	r25, 7
    52a2:	9f 67       	ori	r25, 0x7F	; 127
    52a4:	80 e8       	ldi	r24, 0x80	; 128
    52a6:	70 e0       	ldi	r23, 0x00	; 0
    52a8:	60 e0       	ldi	r22, 0x00	; 0
    52aa:	08 95       	ret

000052ac <__fp_nan>:
    52ac:	9f ef       	ldi	r25, 0xFF	; 255
    52ae:	80 ec       	ldi	r24, 0xC0	; 192
    52b0:	08 95       	ret

000052b2 <__fp_pscA>:
    52b2:	00 24       	eor	r0, r0
    52b4:	0a 94       	dec	r0
    52b6:	16 16       	cp	r1, r22
    52b8:	17 06       	cpc	r1, r23
    52ba:	18 06       	cpc	r1, r24
    52bc:	09 06       	cpc	r0, r25
    52be:	08 95       	ret

000052c0 <__fp_pscB>:
    52c0:	00 24       	eor	r0, r0
    52c2:	0a 94       	dec	r0
    52c4:	12 16       	cp	r1, r18
    52c6:	13 06       	cpc	r1, r19
    52c8:	14 06       	cpc	r1, r20
    52ca:	05 06       	cpc	r0, r21
    52cc:	08 95       	ret

000052ce <__fp_round>:
    52ce:	09 2e       	mov	r0, r25
    52d0:	03 94       	inc	r0
    52d2:	00 0c       	add	r0, r0
    52d4:	11 f4       	brne	.+4      	; 0x52da <__fp_round+0xc>
    52d6:	88 23       	and	r24, r24
    52d8:	52 f0       	brmi	.+20     	; 0x52ee <__fp_round+0x20>
    52da:	bb 0f       	add	r27, r27
    52dc:	40 f4       	brcc	.+16     	; 0x52ee <__fp_round+0x20>
    52de:	bf 2b       	or	r27, r31
    52e0:	11 f4       	brne	.+4      	; 0x52e6 <__fp_round+0x18>
    52e2:	60 ff       	sbrs	r22, 0
    52e4:	04 c0       	rjmp	.+8      	; 0x52ee <__fp_round+0x20>
    52e6:	6f 5f       	subi	r22, 0xFF	; 255
    52e8:	7f 4f       	sbci	r23, 0xFF	; 255
    52ea:	8f 4f       	sbci	r24, 0xFF	; 255
    52ec:	9f 4f       	sbci	r25, 0xFF	; 255
    52ee:	08 95       	ret

000052f0 <__mulsf3>:
    52f0:	0c d0       	rcall	.+24     	; 0x530a <__mulsf3x>
    52f2:	ed cf       	rjmp	.-38     	; 0x52ce <__fp_round>
    52f4:	de df       	rcall	.-68     	; 0x52b2 <__fp_pscA>
    52f6:	28 f0       	brcs	.+10     	; 0x5302 <__mulsf3+0x12>
    52f8:	e3 df       	rcall	.-58     	; 0x52c0 <__fp_pscB>
    52fa:	18 f0       	brcs	.+6      	; 0x5302 <__mulsf3+0x12>
    52fc:	95 23       	and	r25, r21
    52fe:	09 f0       	breq	.+2      	; 0x5302 <__mulsf3+0x12>
    5300:	cf cf       	rjmp	.-98     	; 0x52a0 <__fp_inf>
    5302:	d4 cf       	rjmp	.-88     	; 0x52ac <__fp_nan>
    5304:	11 24       	eor	r1, r1
    5306:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__fp_szero>

0000530a <__mulsf3x>:
    530a:	0e 94 0f 1b 	call	0x361e	; 0x361e <__fp_split3>
    530e:	90 f3       	brcs	.-28     	; 0x52f4 <__mulsf3+0x4>

00005310 <__mulsf3_pse>:
    5310:	95 9f       	mul	r25, r21
    5312:	c1 f3       	breq	.-16     	; 0x5304 <__mulsf3+0x14>
    5314:	95 0f       	add	r25, r21
    5316:	50 e0       	ldi	r21, 0x00	; 0
    5318:	55 1f       	adc	r21, r21
    531a:	62 9f       	mul	r22, r18
    531c:	f0 01       	movw	r30, r0
    531e:	72 9f       	mul	r23, r18
    5320:	bb 27       	eor	r27, r27
    5322:	f0 0d       	add	r31, r0
    5324:	b1 1d       	adc	r27, r1
    5326:	63 9f       	mul	r22, r19
    5328:	aa 27       	eor	r26, r26
    532a:	f0 0d       	add	r31, r0
    532c:	b1 1d       	adc	r27, r1
    532e:	aa 1f       	adc	r26, r26
    5330:	64 9f       	mul	r22, r20
    5332:	66 27       	eor	r22, r22
    5334:	b0 0d       	add	r27, r0
    5336:	a1 1d       	adc	r26, r1
    5338:	66 1f       	adc	r22, r22
    533a:	82 9f       	mul	r24, r18
    533c:	22 27       	eor	r18, r18
    533e:	b0 0d       	add	r27, r0
    5340:	a1 1d       	adc	r26, r1
    5342:	62 1f       	adc	r22, r18
    5344:	73 9f       	mul	r23, r19
    5346:	b0 0d       	add	r27, r0
    5348:	a1 1d       	adc	r26, r1
    534a:	62 1f       	adc	r22, r18
    534c:	83 9f       	mul	r24, r19
    534e:	a0 0d       	add	r26, r0
    5350:	61 1d       	adc	r22, r1
    5352:	22 1f       	adc	r18, r18
    5354:	74 9f       	mul	r23, r20
    5356:	33 27       	eor	r19, r19
    5358:	a0 0d       	add	r26, r0
    535a:	61 1d       	adc	r22, r1
    535c:	23 1f       	adc	r18, r19
    535e:	84 9f       	mul	r24, r20
    5360:	60 0d       	add	r22, r0
    5362:	21 1d       	adc	r18, r1
    5364:	82 2f       	mov	r24, r18
    5366:	76 2f       	mov	r23, r22
    5368:	6a 2f       	mov	r22, r26
    536a:	11 24       	eor	r1, r1
    536c:	9f 57       	subi	r25, 0x7F	; 127
    536e:	50 40       	sbci	r21, 0x00	; 0
    5370:	92 f0       	brmi	.+36     	; 0x5396 <__mulsf3_pse+0x86>
    5372:	e9 f0       	breq	.+58     	; 0x53ae <__mulsf3_pse+0x9e>
    5374:	88 23       	and	r24, r24
    5376:	4a f0       	brmi	.+18     	; 0x538a <__mulsf3_pse+0x7a>
    5378:	ee 0f       	add	r30, r30
    537a:	ff 1f       	adc	r31, r31
    537c:	bb 1f       	adc	r27, r27
    537e:	66 1f       	adc	r22, r22
    5380:	77 1f       	adc	r23, r23
    5382:	88 1f       	adc	r24, r24
    5384:	91 50       	subi	r25, 0x01	; 1
    5386:	50 40       	sbci	r21, 0x00	; 0
    5388:	a9 f7       	brne	.-22     	; 0x5374 <__mulsf3_pse+0x64>
    538a:	9e 3f       	cpi	r25, 0xFE	; 254
    538c:	51 05       	cpc	r21, r1
    538e:	78 f0       	brcs	.+30     	; 0x53ae <__mulsf3_pse+0x9e>
    5390:	87 cf       	rjmp	.-242    	; 0x52a0 <__fp_inf>
    5392:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__fp_szero>
    5396:	5f 3f       	cpi	r21, 0xFF	; 255
    5398:	e4 f3       	brlt	.-8      	; 0x5392 <__mulsf3_pse+0x82>
    539a:	98 3e       	cpi	r25, 0xE8	; 232
    539c:	d4 f3       	brlt	.-12     	; 0x5392 <__mulsf3_pse+0x82>
    539e:	86 95       	lsr	r24
    53a0:	77 95       	ror	r23
    53a2:	67 95       	ror	r22
    53a4:	b7 95       	ror	r27
    53a6:	f7 95       	ror	r31
    53a8:	e7 95       	ror	r30
    53aa:	9f 5f       	subi	r25, 0xFF	; 255
    53ac:	c1 f7       	brne	.-16     	; 0x539e <__mulsf3_pse+0x8e>
    53ae:	fe 2b       	or	r31, r30
    53b0:	88 0f       	add	r24, r24
    53b2:	91 1d       	adc	r25, r1
    53b4:	96 95       	lsr	r25
    53b6:	87 95       	ror	r24
    53b8:	97 f9       	bld	r25, 7
    53ba:	08 95       	ret

000053bc <__udivmodsi4>:
    53bc:	a1 e2       	ldi	r26, 0x21	; 33
    53be:	1a 2e       	mov	r1, r26
    53c0:	aa 1b       	sub	r26, r26
    53c2:	bb 1b       	sub	r27, r27
    53c4:	fd 01       	movw	r30, r26
    53c6:	0d c0       	rjmp	.+26     	; 0x53e2 <__udivmodsi4_ep>

000053c8 <__udivmodsi4_loop>:
    53c8:	aa 1f       	adc	r26, r26
    53ca:	bb 1f       	adc	r27, r27
    53cc:	ee 1f       	adc	r30, r30
    53ce:	ff 1f       	adc	r31, r31
    53d0:	a2 17       	cp	r26, r18
    53d2:	b3 07       	cpc	r27, r19
    53d4:	e4 07       	cpc	r30, r20
    53d6:	f5 07       	cpc	r31, r21
    53d8:	20 f0       	brcs	.+8      	; 0x53e2 <__udivmodsi4_ep>
    53da:	a2 1b       	sub	r26, r18
    53dc:	b3 0b       	sbc	r27, r19
    53de:	e4 0b       	sbc	r30, r20
    53e0:	f5 0b       	sbc	r31, r21

000053e2 <__udivmodsi4_ep>:
    53e2:	66 1f       	adc	r22, r22
    53e4:	77 1f       	adc	r23, r23
    53e6:	88 1f       	adc	r24, r24
    53e8:	99 1f       	adc	r25, r25
    53ea:	1a 94       	dec	r1
    53ec:	69 f7       	brne	.-38     	; 0x53c8 <__udivmodsi4_loop>
    53ee:	60 95       	com	r22
    53f0:	70 95       	com	r23
    53f2:	80 95       	com	r24
    53f4:	90 95       	com	r25
    53f6:	9b 01       	movw	r18, r22
    53f8:	ac 01       	movw	r20, r24
    53fa:	bd 01       	movw	r22, r26
    53fc:	cf 01       	movw	r24, r30
    53fe:	08 95       	ret

00005400 <__tablejump2__>:
    5400:	ee 0f       	add	r30, r30
    5402:	ff 1f       	adc	r31, r31
    5404:	88 1f       	adc	r24, r24
    5406:	8b bf       	out	0x3b, r24	; 59
    5408:	07 90       	elpm	r0, Z+
    540a:	f6 91       	elpm	r31, Z
    540c:	e0 2d       	mov	r30, r0
    540e:	19 94       	eijmp

00005410 <calloc>:
    5410:	0f 93       	push	r16
    5412:	1f 93       	push	r17
    5414:	cf 93       	push	r28
    5416:	df 93       	push	r29
    5418:	86 9f       	mul	r24, r22
    541a:	80 01       	movw	r16, r0
    541c:	87 9f       	mul	r24, r23
    541e:	10 0d       	add	r17, r0
    5420:	96 9f       	mul	r25, r22
    5422:	10 0d       	add	r17, r0
    5424:	11 24       	eor	r1, r1
    5426:	c8 01       	movw	r24, r16
    5428:	0d d0       	rcall	.+26     	; 0x5444 <malloc>
    542a:	ec 01       	movw	r28, r24
    542c:	00 97       	sbiw	r24, 0x00	; 0
    542e:	21 f0       	breq	.+8      	; 0x5438 <calloc+0x28>
    5430:	a8 01       	movw	r20, r16
    5432:	60 e0       	ldi	r22, 0x00	; 0
    5434:	70 e0       	ldi	r23, 0x00	; 0
    5436:	34 d1       	rcall	.+616    	; 0x56a0 <memset>
    5438:	ce 01       	movw	r24, r28
    543a:	df 91       	pop	r29
    543c:	cf 91       	pop	r28
    543e:	1f 91       	pop	r17
    5440:	0f 91       	pop	r16
    5442:	08 95       	ret

00005444 <malloc>:
    5444:	0f 93       	push	r16
    5446:	1f 93       	push	r17
    5448:	cf 93       	push	r28
    544a:	df 93       	push	r29
    544c:	82 30       	cpi	r24, 0x02	; 2
    544e:	91 05       	cpc	r25, r1
    5450:	10 f4       	brcc	.+4      	; 0x5456 <malloc+0x12>
    5452:	82 e0       	ldi	r24, 0x02	; 2
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	e0 91 ba 13 	lds	r30, 0x13BA	; 0x8013ba <__flp>
    545a:	f0 91 bb 13 	lds	r31, 0x13BB	; 0x8013bb <__flp+0x1>
    545e:	20 e0       	ldi	r18, 0x00	; 0
    5460:	30 e0       	ldi	r19, 0x00	; 0
    5462:	a0 e0       	ldi	r26, 0x00	; 0
    5464:	b0 e0       	ldi	r27, 0x00	; 0
    5466:	30 97       	sbiw	r30, 0x00	; 0
    5468:	19 f1       	breq	.+70     	; 0x54b0 <malloc+0x6c>
    546a:	40 81       	ld	r20, Z
    546c:	51 81       	ldd	r21, Z+1	; 0x01
    546e:	02 81       	ldd	r16, Z+2	; 0x02
    5470:	13 81       	ldd	r17, Z+3	; 0x03
    5472:	48 17       	cp	r20, r24
    5474:	59 07       	cpc	r21, r25
    5476:	c8 f0       	brcs	.+50     	; 0x54aa <malloc+0x66>
    5478:	84 17       	cp	r24, r20
    547a:	95 07       	cpc	r25, r21
    547c:	69 f4       	brne	.+26     	; 0x5498 <malloc+0x54>
    547e:	10 97       	sbiw	r26, 0x00	; 0
    5480:	31 f0       	breq	.+12     	; 0x548e <malloc+0x4a>
    5482:	12 96       	adiw	r26, 0x02	; 2
    5484:	0c 93       	st	X, r16
    5486:	12 97       	sbiw	r26, 0x02	; 2
    5488:	13 96       	adiw	r26, 0x03	; 3
    548a:	1c 93       	st	X, r17
    548c:	27 c0       	rjmp	.+78     	; 0x54dc <malloc+0x98>
    548e:	00 93 ba 13 	sts	0x13BA, r16	; 0x8013ba <__flp>
    5492:	10 93 bb 13 	sts	0x13BB, r17	; 0x8013bb <__flp+0x1>
    5496:	22 c0       	rjmp	.+68     	; 0x54dc <malloc+0x98>
    5498:	21 15       	cp	r18, r1
    549a:	31 05       	cpc	r19, r1
    549c:	19 f0       	breq	.+6      	; 0x54a4 <malloc+0x60>
    549e:	42 17       	cp	r20, r18
    54a0:	53 07       	cpc	r21, r19
    54a2:	18 f4       	brcc	.+6      	; 0x54aa <malloc+0x66>
    54a4:	9a 01       	movw	r18, r20
    54a6:	bd 01       	movw	r22, r26
    54a8:	ef 01       	movw	r28, r30
    54aa:	df 01       	movw	r26, r30
    54ac:	f8 01       	movw	r30, r16
    54ae:	db cf       	rjmp	.-74     	; 0x5466 <malloc+0x22>
    54b0:	21 15       	cp	r18, r1
    54b2:	31 05       	cpc	r19, r1
    54b4:	f9 f0       	breq	.+62     	; 0x54f4 <malloc+0xb0>
    54b6:	28 1b       	sub	r18, r24
    54b8:	39 0b       	sbc	r19, r25
    54ba:	24 30       	cpi	r18, 0x04	; 4
    54bc:	31 05       	cpc	r19, r1
    54be:	80 f4       	brcc	.+32     	; 0x54e0 <malloc+0x9c>
    54c0:	8a 81       	ldd	r24, Y+2	; 0x02
    54c2:	9b 81       	ldd	r25, Y+3	; 0x03
    54c4:	61 15       	cp	r22, r1
    54c6:	71 05       	cpc	r23, r1
    54c8:	21 f0       	breq	.+8      	; 0x54d2 <malloc+0x8e>
    54ca:	fb 01       	movw	r30, r22
    54cc:	93 83       	std	Z+3, r25	; 0x03
    54ce:	82 83       	std	Z+2, r24	; 0x02
    54d0:	04 c0       	rjmp	.+8      	; 0x54da <malloc+0x96>
    54d2:	90 93 bb 13 	sts	0x13BB, r25	; 0x8013bb <__flp+0x1>
    54d6:	80 93 ba 13 	sts	0x13BA, r24	; 0x8013ba <__flp>
    54da:	fe 01       	movw	r30, r28
    54dc:	32 96       	adiw	r30, 0x02	; 2
    54de:	44 c0       	rjmp	.+136    	; 0x5568 <malloc+0x124>
    54e0:	fe 01       	movw	r30, r28
    54e2:	e2 0f       	add	r30, r18
    54e4:	f3 1f       	adc	r31, r19
    54e6:	81 93       	st	Z+, r24
    54e8:	91 93       	st	Z+, r25
    54ea:	22 50       	subi	r18, 0x02	; 2
    54ec:	31 09       	sbc	r19, r1
    54ee:	39 83       	std	Y+1, r19	; 0x01
    54f0:	28 83       	st	Y, r18
    54f2:	3a c0       	rjmp	.+116    	; 0x5568 <malloc+0x124>
    54f4:	20 91 b8 13 	lds	r18, 0x13B8	; 0x8013b8 <__brkval>
    54f8:	30 91 b9 13 	lds	r19, 0x13B9	; 0x8013b9 <__brkval+0x1>
    54fc:	23 2b       	or	r18, r19
    54fe:	41 f4       	brne	.+16     	; 0x5510 <malloc+0xcc>
    5500:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5504:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5508:	30 93 b9 13 	sts	0x13B9, r19	; 0x8013b9 <__brkval+0x1>
    550c:	20 93 b8 13 	sts	0x13B8, r18	; 0x8013b8 <__brkval>
    5510:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5514:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5518:	21 15       	cp	r18, r1
    551a:	31 05       	cpc	r19, r1
    551c:	41 f4       	brne	.+16     	; 0x552e <malloc+0xea>
    551e:	2d b7       	in	r18, 0x3d	; 61
    5520:	3e b7       	in	r19, 0x3e	; 62
    5522:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5526:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    552a:	24 1b       	sub	r18, r20
    552c:	35 0b       	sbc	r19, r21
    552e:	e0 91 b8 13 	lds	r30, 0x13B8	; 0x8013b8 <__brkval>
    5532:	f0 91 b9 13 	lds	r31, 0x13B9	; 0x8013b9 <__brkval+0x1>
    5536:	e2 17       	cp	r30, r18
    5538:	f3 07       	cpc	r31, r19
    553a:	a0 f4       	brcc	.+40     	; 0x5564 <malloc+0x120>
    553c:	2e 1b       	sub	r18, r30
    553e:	3f 0b       	sbc	r19, r31
    5540:	28 17       	cp	r18, r24
    5542:	39 07       	cpc	r19, r25
    5544:	78 f0       	brcs	.+30     	; 0x5564 <malloc+0x120>
    5546:	ac 01       	movw	r20, r24
    5548:	4e 5f       	subi	r20, 0xFE	; 254
    554a:	5f 4f       	sbci	r21, 0xFF	; 255
    554c:	24 17       	cp	r18, r20
    554e:	35 07       	cpc	r19, r21
    5550:	48 f0       	brcs	.+18     	; 0x5564 <malloc+0x120>
    5552:	4e 0f       	add	r20, r30
    5554:	5f 1f       	adc	r21, r31
    5556:	50 93 b9 13 	sts	0x13B9, r21	; 0x8013b9 <__brkval+0x1>
    555a:	40 93 b8 13 	sts	0x13B8, r20	; 0x8013b8 <__brkval>
    555e:	81 93       	st	Z+, r24
    5560:	91 93       	st	Z+, r25
    5562:	02 c0       	rjmp	.+4      	; 0x5568 <malloc+0x124>
    5564:	e0 e0       	ldi	r30, 0x00	; 0
    5566:	f0 e0       	ldi	r31, 0x00	; 0
    5568:	cf 01       	movw	r24, r30
    556a:	df 91       	pop	r29
    556c:	cf 91       	pop	r28
    556e:	1f 91       	pop	r17
    5570:	0f 91       	pop	r16
    5572:	08 95       	ret

00005574 <free>:
    5574:	cf 93       	push	r28
    5576:	df 93       	push	r29
    5578:	00 97       	sbiw	r24, 0x00	; 0
    557a:	09 f4       	brne	.+2      	; 0x557e <free+0xa>
    557c:	81 c0       	rjmp	.+258    	; 0x5680 <free+0x10c>
    557e:	fc 01       	movw	r30, r24
    5580:	32 97       	sbiw	r30, 0x02	; 2
    5582:	13 82       	std	Z+3, r1	; 0x03
    5584:	12 82       	std	Z+2, r1	; 0x02
    5586:	a0 91 ba 13 	lds	r26, 0x13BA	; 0x8013ba <__flp>
    558a:	b0 91 bb 13 	lds	r27, 0x13BB	; 0x8013bb <__flp+0x1>
    558e:	10 97       	sbiw	r26, 0x00	; 0
    5590:	81 f4       	brne	.+32     	; 0x55b2 <free+0x3e>
    5592:	20 81       	ld	r18, Z
    5594:	31 81       	ldd	r19, Z+1	; 0x01
    5596:	82 0f       	add	r24, r18
    5598:	93 1f       	adc	r25, r19
    559a:	20 91 b8 13 	lds	r18, 0x13B8	; 0x8013b8 <__brkval>
    559e:	30 91 b9 13 	lds	r19, 0x13B9	; 0x8013b9 <__brkval+0x1>
    55a2:	28 17       	cp	r18, r24
    55a4:	39 07       	cpc	r19, r25
    55a6:	51 f5       	brne	.+84     	; 0x55fc <free+0x88>
    55a8:	f0 93 b9 13 	sts	0x13B9, r31	; 0x8013b9 <__brkval+0x1>
    55ac:	e0 93 b8 13 	sts	0x13B8, r30	; 0x8013b8 <__brkval>
    55b0:	67 c0       	rjmp	.+206    	; 0x5680 <free+0x10c>
    55b2:	ed 01       	movw	r28, r26
    55b4:	20 e0       	ldi	r18, 0x00	; 0
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	ce 17       	cp	r28, r30
    55ba:	df 07       	cpc	r29, r31
    55bc:	40 f4       	brcc	.+16     	; 0x55ce <free+0x5a>
    55be:	4a 81       	ldd	r20, Y+2	; 0x02
    55c0:	5b 81       	ldd	r21, Y+3	; 0x03
    55c2:	9e 01       	movw	r18, r28
    55c4:	41 15       	cp	r20, r1
    55c6:	51 05       	cpc	r21, r1
    55c8:	f1 f0       	breq	.+60     	; 0x5606 <free+0x92>
    55ca:	ea 01       	movw	r28, r20
    55cc:	f5 cf       	rjmp	.-22     	; 0x55b8 <free+0x44>
    55ce:	d3 83       	std	Z+3, r29	; 0x03
    55d0:	c2 83       	std	Z+2, r28	; 0x02
    55d2:	40 81       	ld	r20, Z
    55d4:	51 81       	ldd	r21, Z+1	; 0x01
    55d6:	84 0f       	add	r24, r20
    55d8:	95 1f       	adc	r25, r21
    55da:	c8 17       	cp	r28, r24
    55dc:	d9 07       	cpc	r29, r25
    55de:	59 f4       	brne	.+22     	; 0x55f6 <free+0x82>
    55e0:	88 81       	ld	r24, Y
    55e2:	99 81       	ldd	r25, Y+1	; 0x01
    55e4:	84 0f       	add	r24, r20
    55e6:	95 1f       	adc	r25, r21
    55e8:	02 96       	adiw	r24, 0x02	; 2
    55ea:	91 83       	std	Z+1, r25	; 0x01
    55ec:	80 83       	st	Z, r24
    55ee:	8a 81       	ldd	r24, Y+2	; 0x02
    55f0:	9b 81       	ldd	r25, Y+3	; 0x03
    55f2:	93 83       	std	Z+3, r25	; 0x03
    55f4:	82 83       	std	Z+2, r24	; 0x02
    55f6:	21 15       	cp	r18, r1
    55f8:	31 05       	cpc	r19, r1
    55fa:	29 f4       	brne	.+10     	; 0x5606 <free+0x92>
    55fc:	f0 93 bb 13 	sts	0x13BB, r31	; 0x8013bb <__flp+0x1>
    5600:	e0 93 ba 13 	sts	0x13BA, r30	; 0x8013ba <__flp>
    5604:	3d c0       	rjmp	.+122    	; 0x5680 <free+0x10c>
    5606:	e9 01       	movw	r28, r18
    5608:	fb 83       	std	Y+3, r31	; 0x03
    560a:	ea 83       	std	Y+2, r30	; 0x02
    560c:	49 91       	ld	r20, Y+
    560e:	59 91       	ld	r21, Y+
    5610:	c4 0f       	add	r28, r20
    5612:	d5 1f       	adc	r29, r21
    5614:	ec 17       	cp	r30, r28
    5616:	fd 07       	cpc	r31, r29
    5618:	61 f4       	brne	.+24     	; 0x5632 <free+0xbe>
    561a:	80 81       	ld	r24, Z
    561c:	91 81       	ldd	r25, Z+1	; 0x01
    561e:	84 0f       	add	r24, r20
    5620:	95 1f       	adc	r25, r21
    5622:	02 96       	adiw	r24, 0x02	; 2
    5624:	e9 01       	movw	r28, r18
    5626:	99 83       	std	Y+1, r25	; 0x01
    5628:	88 83       	st	Y, r24
    562a:	82 81       	ldd	r24, Z+2	; 0x02
    562c:	93 81       	ldd	r25, Z+3	; 0x03
    562e:	9b 83       	std	Y+3, r25	; 0x03
    5630:	8a 83       	std	Y+2, r24	; 0x02
    5632:	e0 e0       	ldi	r30, 0x00	; 0
    5634:	f0 e0       	ldi	r31, 0x00	; 0
    5636:	12 96       	adiw	r26, 0x02	; 2
    5638:	8d 91       	ld	r24, X+
    563a:	9c 91       	ld	r25, X
    563c:	13 97       	sbiw	r26, 0x03	; 3
    563e:	00 97       	sbiw	r24, 0x00	; 0
    5640:	19 f0       	breq	.+6      	; 0x5648 <free+0xd4>
    5642:	fd 01       	movw	r30, r26
    5644:	dc 01       	movw	r26, r24
    5646:	f7 cf       	rjmp	.-18     	; 0x5636 <free+0xc2>
    5648:	8d 91       	ld	r24, X+
    564a:	9c 91       	ld	r25, X
    564c:	11 97       	sbiw	r26, 0x01	; 1
    564e:	9d 01       	movw	r18, r26
    5650:	2e 5f       	subi	r18, 0xFE	; 254
    5652:	3f 4f       	sbci	r19, 0xFF	; 255
    5654:	82 0f       	add	r24, r18
    5656:	93 1f       	adc	r25, r19
    5658:	20 91 b8 13 	lds	r18, 0x13B8	; 0x8013b8 <__brkval>
    565c:	30 91 b9 13 	lds	r19, 0x13B9	; 0x8013b9 <__brkval+0x1>
    5660:	28 17       	cp	r18, r24
    5662:	39 07       	cpc	r19, r25
    5664:	69 f4       	brne	.+26     	; 0x5680 <free+0x10c>
    5666:	30 97       	sbiw	r30, 0x00	; 0
    5668:	29 f4       	brne	.+10     	; 0x5674 <free+0x100>
    566a:	10 92 bb 13 	sts	0x13BB, r1	; 0x8013bb <__flp+0x1>
    566e:	10 92 ba 13 	sts	0x13BA, r1	; 0x8013ba <__flp>
    5672:	02 c0       	rjmp	.+4      	; 0x5678 <free+0x104>
    5674:	13 82       	std	Z+3, r1	; 0x03
    5676:	12 82       	std	Z+2, r1	; 0x02
    5678:	b0 93 b9 13 	sts	0x13B9, r27	; 0x8013b9 <__brkval+0x1>
    567c:	a0 93 b8 13 	sts	0x13B8, r26	; 0x8013b8 <__brkval>
    5680:	df 91       	pop	r29
    5682:	cf 91       	pop	r28
    5684:	08 95       	ret

00005686 <abort>:
    5686:	81 e0       	ldi	r24, 0x01	; 1
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	f8 94       	cli
    568c:	7d c3       	rjmp	.+1786   	; 0x5d88 <_exit>

0000568e <memcpy>:
    568e:	fb 01       	movw	r30, r22
    5690:	dc 01       	movw	r26, r24
    5692:	02 c0       	rjmp	.+4      	; 0x5698 <memcpy+0xa>
    5694:	01 90       	ld	r0, Z+
    5696:	0d 92       	st	X+, r0
    5698:	41 50       	subi	r20, 0x01	; 1
    569a:	50 40       	sbci	r21, 0x00	; 0
    569c:	d8 f7       	brcc	.-10     	; 0x5694 <memcpy+0x6>
    569e:	08 95       	ret

000056a0 <memset>:
    56a0:	dc 01       	movw	r26, r24
    56a2:	01 c0       	rjmp	.+2      	; 0x56a6 <memset+0x6>
    56a4:	6d 93       	st	X+, r22
    56a6:	41 50       	subi	r20, 0x01	; 1
    56a8:	50 40       	sbci	r21, 0x00	; 0
    56aa:	e0 f7       	brcc	.-8      	; 0x56a4 <memset+0x4>
    56ac:	08 95       	ret

000056ae <strcasestr>:
    56ae:	fb 01       	movw	r30, r22
    56b0:	51 91       	ld	r21, Z+
    56b2:	55 23       	and	r21, r21
    56b4:	b1 f0       	breq	.+44     	; 0x56e2 <strcasestr+0x34>
    56b6:	bf 01       	movw	r22, r30
    56b8:	dc 01       	movw	r26, r24
    56ba:	05 2e       	mov	r0, r21
    56bc:	4d 91       	ld	r20, X+
    56be:	44 23       	and	r20, r20
    56c0:	69 f0       	breq	.+26     	; 0x56dc <strcasestr+0x2e>
    56c2:	10 d0       	rcall	.+32     	; 0x56e4 <strcasestr+0x36>
    56c4:	d9 f7       	brne	.-10     	; 0x56bc <strcasestr+0xe>
    56c6:	cd 01       	movw	r24, r26
    56c8:	01 90       	ld	r0, Z+
    56ca:	00 20       	and	r0, r0
    56cc:	49 f0       	breq	.+18     	; 0x56e0 <strcasestr+0x32>
    56ce:	4d 91       	ld	r20, X+
    56d0:	41 11       	cpse	r20, r1
    56d2:	08 d0       	rcall	.+16     	; 0x56e4 <strcasestr+0x36>
    56d4:	c9 f3       	breq	.-14     	; 0x56c8 <strcasestr+0x1a>
    56d6:	fb 01       	movw	r30, r22
    56d8:	41 11       	cpse	r20, r1
    56da:	ee cf       	rjmp	.-36     	; 0x56b8 <strcasestr+0xa>
    56dc:	81 e0       	ldi	r24, 0x01	; 1
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	01 97       	sbiw	r24, 0x01	; 1
    56e2:	08 95       	ret
    56e4:	40 25       	eor	r20, r0
    56e6:	39 f0       	breq	.+14     	; 0x56f6 <strcasestr+0x48>
    56e8:	40 32       	cpi	r20, 0x20	; 32
    56ea:	29 f4       	brne	.+10     	; 0x56f6 <strcasestr+0x48>
    56ec:	40 29       	or	r20, r0
    56ee:	4b 57       	subi	r20, 0x7B	; 123
    56f0:	46 5e       	subi	r20, 0xE6	; 230
    56f2:	08 f0       	brcs	.+2      	; 0x56f6 <strcasestr+0x48>
    56f4:	18 94       	sez
    56f6:	08 95       	ret

000056f8 <strcat>:
    56f8:	fb 01       	movw	r30, r22
    56fa:	dc 01       	movw	r26, r24
    56fc:	0d 90       	ld	r0, X+
    56fe:	00 20       	and	r0, r0
    5700:	e9 f7       	brne	.-6      	; 0x56fc <strcat+0x4>
    5702:	11 97       	sbiw	r26, 0x01	; 1
    5704:	01 90       	ld	r0, Z+
    5706:	0d 92       	st	X+, r0
    5708:	00 20       	and	r0, r0
    570a:	e1 f7       	brne	.-8      	; 0x5704 <strcat+0xc>
    570c:	08 95       	ret

0000570e <strcpy>:
    570e:	fb 01       	movw	r30, r22
    5710:	dc 01       	movw	r26, r24
    5712:	01 90       	ld	r0, Z+
    5714:	0d 92       	st	X+, r0
    5716:	00 20       	and	r0, r0
    5718:	e1 f7       	brne	.-8      	; 0x5712 <strcpy+0x4>
    571a:	08 95       	ret

0000571c <strncasecmp>:
    571c:	fb 01       	movw	r30, r22
    571e:	dc 01       	movw	r26, r24
    5720:	41 50       	subi	r20, 0x01	; 1
    5722:	50 40       	sbci	r21, 0x00	; 0
    5724:	88 f0       	brcs	.+34     	; 0x5748 <strncasecmp+0x2c>
    5726:	8d 91       	ld	r24, X+
    5728:	81 34       	cpi	r24, 0x41	; 65
    572a:	1c f0       	brlt	.+6      	; 0x5732 <strncasecmp+0x16>
    572c:	8b 35       	cpi	r24, 0x5B	; 91
    572e:	0c f4       	brge	.+2      	; 0x5732 <strncasecmp+0x16>
    5730:	80 5e       	subi	r24, 0xE0	; 224
    5732:	61 91       	ld	r22, Z+
    5734:	61 34       	cpi	r22, 0x41	; 65
    5736:	1c f0       	brlt	.+6      	; 0x573e <strncasecmp+0x22>
    5738:	6b 35       	cpi	r22, 0x5B	; 91
    573a:	0c f4       	brge	.+2      	; 0x573e <strncasecmp+0x22>
    573c:	60 5e       	subi	r22, 0xE0	; 224
    573e:	86 1b       	sub	r24, r22
    5740:	61 11       	cpse	r22, r1
    5742:	71 f3       	breq	.-36     	; 0x5720 <strncasecmp+0x4>
    5744:	99 0b       	sbc	r25, r25
    5746:	08 95       	ret
    5748:	88 1b       	sub	r24, r24
    574a:	fc cf       	rjmp	.-8      	; 0x5744 <strncasecmp+0x28>

0000574c <printf>:
    574c:	cf 93       	push	r28
    574e:	df 93       	push	r29
    5750:	cd b7       	in	r28, 0x3d	; 61
    5752:	de b7       	in	r29, 0x3e	; 62
    5754:	ae 01       	movw	r20, r28
    5756:	4a 5f       	subi	r20, 0xFA	; 250
    5758:	5f 4f       	sbci	r21, 0xFF	; 255
    575a:	fa 01       	movw	r30, r20
    575c:	61 91       	ld	r22, Z+
    575e:	71 91       	ld	r23, Z+
    5760:	af 01       	movw	r20, r30
    5762:	80 91 be 13 	lds	r24, 0x13BE	; 0x8013be <__iob+0x2>
    5766:	90 91 bf 13 	lds	r25, 0x13BF	; 0x8013bf <__iob+0x3>
    576a:	61 d0       	rcall	.+194    	; 0x582e <vfprintf>
    576c:	df 91       	pop	r29
    576e:	cf 91       	pop	r28
    5770:	08 95       	ret

00005772 <puts>:
    5772:	0f 93       	push	r16
    5774:	1f 93       	push	r17
    5776:	cf 93       	push	r28
    5778:	df 93       	push	r29
    577a:	e0 91 be 13 	lds	r30, 0x13BE	; 0x8013be <__iob+0x2>
    577e:	f0 91 bf 13 	lds	r31, 0x13BF	; 0x8013bf <__iob+0x3>
    5782:	23 81       	ldd	r18, Z+3	; 0x03
    5784:	21 ff       	sbrs	r18, 1
    5786:	1b c0       	rjmp	.+54     	; 0x57be <puts+0x4c>
    5788:	8c 01       	movw	r16, r24
    578a:	d0 e0       	ldi	r29, 0x00	; 0
    578c:	c0 e0       	ldi	r28, 0x00	; 0
    578e:	f8 01       	movw	r30, r16
    5790:	81 91       	ld	r24, Z+
    5792:	8f 01       	movw	r16, r30
    5794:	60 91 be 13 	lds	r22, 0x13BE	; 0x8013be <__iob+0x2>
    5798:	70 91 bf 13 	lds	r23, 0x13BF	; 0x8013bf <__iob+0x3>
    579c:	db 01       	movw	r26, r22
    579e:	18 96       	adiw	r26, 0x08	; 8
    57a0:	ed 91       	ld	r30, X+
    57a2:	fc 91       	ld	r31, X
    57a4:	19 97       	sbiw	r26, 0x09	; 9
    57a6:	88 23       	and	r24, r24
    57a8:	31 f0       	breq	.+12     	; 0x57b6 <puts+0x44>
    57aa:	19 95       	eicall
    57ac:	89 2b       	or	r24, r25
    57ae:	79 f3       	breq	.-34     	; 0x578e <puts+0x1c>
    57b0:	df ef       	ldi	r29, 0xFF	; 255
    57b2:	cf ef       	ldi	r28, 0xFF	; 255
    57b4:	ec cf       	rjmp	.-40     	; 0x578e <puts+0x1c>
    57b6:	8a e0       	ldi	r24, 0x0A	; 10
    57b8:	19 95       	eicall
    57ba:	89 2b       	or	r24, r25
    57bc:	19 f0       	breq	.+6      	; 0x57c4 <puts+0x52>
    57be:	8f ef       	ldi	r24, 0xFF	; 255
    57c0:	9f ef       	ldi	r25, 0xFF	; 255
    57c2:	02 c0       	rjmp	.+4      	; 0x57c8 <puts+0x56>
    57c4:	8d 2f       	mov	r24, r29
    57c6:	9c 2f       	mov	r25, r28
    57c8:	df 91       	pop	r29
    57ca:	cf 91       	pop	r28
    57cc:	1f 91       	pop	r17
    57ce:	0f 91       	pop	r16
    57d0:	08 95       	ret

000057d2 <sprintf>:
    57d2:	0f 93       	push	r16
    57d4:	1f 93       	push	r17
    57d6:	cf 93       	push	r28
    57d8:	df 93       	push	r29
    57da:	cd b7       	in	r28, 0x3d	; 61
    57dc:	de b7       	in	r29, 0x3e	; 62
    57de:	2e 97       	sbiw	r28, 0x0e	; 14
    57e0:	0f b6       	in	r0, 0x3f	; 63
    57e2:	f8 94       	cli
    57e4:	de bf       	out	0x3e, r29	; 62
    57e6:	0f be       	out	0x3f, r0	; 63
    57e8:	cd bf       	out	0x3d, r28	; 61
    57ea:	0e 89       	ldd	r16, Y+22	; 0x16
    57ec:	1f 89       	ldd	r17, Y+23	; 0x17
    57ee:	86 e0       	ldi	r24, 0x06	; 6
    57f0:	8c 83       	std	Y+4, r24	; 0x04
    57f2:	1a 83       	std	Y+2, r17	; 0x02
    57f4:	09 83       	std	Y+1, r16	; 0x01
    57f6:	8f ef       	ldi	r24, 0xFF	; 255
    57f8:	9f e7       	ldi	r25, 0x7F	; 127
    57fa:	9e 83       	std	Y+6, r25	; 0x06
    57fc:	8d 83       	std	Y+5, r24	; 0x05
    57fe:	ae 01       	movw	r20, r28
    5800:	46 5e       	subi	r20, 0xE6	; 230
    5802:	5f 4f       	sbci	r21, 0xFF	; 255
    5804:	68 8d       	ldd	r22, Y+24	; 0x18
    5806:	79 8d       	ldd	r23, Y+25	; 0x19
    5808:	ce 01       	movw	r24, r28
    580a:	01 96       	adiw	r24, 0x01	; 1
    580c:	10 d0       	rcall	.+32     	; 0x582e <vfprintf>
    580e:	ef 81       	ldd	r30, Y+7	; 0x07
    5810:	f8 85       	ldd	r31, Y+8	; 0x08
    5812:	e0 0f       	add	r30, r16
    5814:	f1 1f       	adc	r31, r17
    5816:	10 82       	st	Z, r1
    5818:	2e 96       	adiw	r28, 0x0e	; 14
    581a:	0f b6       	in	r0, 0x3f	; 63
    581c:	f8 94       	cli
    581e:	de bf       	out	0x3e, r29	; 62
    5820:	0f be       	out	0x3f, r0	; 63
    5822:	cd bf       	out	0x3d, r28	; 61
    5824:	df 91       	pop	r29
    5826:	cf 91       	pop	r28
    5828:	1f 91       	pop	r17
    582a:	0f 91       	pop	r16
    582c:	08 95       	ret

0000582e <vfprintf>:
    582e:	2f 92       	push	r2
    5830:	3f 92       	push	r3
    5832:	4f 92       	push	r4
    5834:	5f 92       	push	r5
    5836:	6f 92       	push	r6
    5838:	7f 92       	push	r7
    583a:	8f 92       	push	r8
    583c:	9f 92       	push	r9
    583e:	af 92       	push	r10
    5840:	bf 92       	push	r11
    5842:	cf 92       	push	r12
    5844:	df 92       	push	r13
    5846:	ef 92       	push	r14
    5848:	ff 92       	push	r15
    584a:	0f 93       	push	r16
    584c:	1f 93       	push	r17
    584e:	cf 93       	push	r28
    5850:	df 93       	push	r29
    5852:	cd b7       	in	r28, 0x3d	; 61
    5854:	de b7       	in	r29, 0x3e	; 62
    5856:	2b 97       	sbiw	r28, 0x0b	; 11
    5858:	0f b6       	in	r0, 0x3f	; 63
    585a:	f8 94       	cli
    585c:	de bf       	out	0x3e, r29	; 62
    585e:	0f be       	out	0x3f, r0	; 63
    5860:	cd bf       	out	0x3d, r28	; 61
    5862:	6c 01       	movw	r12, r24
    5864:	7b 01       	movw	r14, r22
    5866:	8a 01       	movw	r16, r20
    5868:	fc 01       	movw	r30, r24
    586a:	17 82       	std	Z+7, r1	; 0x07
    586c:	16 82       	std	Z+6, r1	; 0x06
    586e:	83 81       	ldd	r24, Z+3	; 0x03
    5870:	81 ff       	sbrs	r24, 1
    5872:	bf c1       	rjmp	.+894    	; 0x5bf2 <vfprintf+0x3c4>
    5874:	ce 01       	movw	r24, r28
    5876:	01 96       	adiw	r24, 0x01	; 1
    5878:	3c 01       	movw	r6, r24
    587a:	f6 01       	movw	r30, r12
    587c:	93 81       	ldd	r25, Z+3	; 0x03
    587e:	f7 01       	movw	r30, r14
    5880:	93 fd       	sbrc	r25, 3
    5882:	85 91       	lpm	r24, Z+
    5884:	93 ff       	sbrs	r25, 3
    5886:	81 91       	ld	r24, Z+
    5888:	7f 01       	movw	r14, r30
    588a:	88 23       	and	r24, r24
    588c:	09 f4       	brne	.+2      	; 0x5890 <vfprintf+0x62>
    588e:	ad c1       	rjmp	.+858    	; 0x5bea <vfprintf+0x3bc>
    5890:	85 32       	cpi	r24, 0x25	; 37
    5892:	39 f4       	brne	.+14     	; 0x58a2 <vfprintf+0x74>
    5894:	93 fd       	sbrc	r25, 3
    5896:	85 91       	lpm	r24, Z+
    5898:	93 ff       	sbrs	r25, 3
    589a:	81 91       	ld	r24, Z+
    589c:	7f 01       	movw	r14, r30
    589e:	85 32       	cpi	r24, 0x25	; 37
    58a0:	21 f4       	brne	.+8      	; 0x58aa <vfprintf+0x7c>
    58a2:	b6 01       	movw	r22, r12
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	d6 d1       	rcall	.+940    	; 0x5c54 <fputc>
    58a8:	e8 cf       	rjmp	.-48     	; 0x587a <vfprintf+0x4c>
    58aa:	91 2c       	mov	r9, r1
    58ac:	21 2c       	mov	r2, r1
    58ae:	31 2c       	mov	r3, r1
    58b0:	ff e1       	ldi	r31, 0x1F	; 31
    58b2:	f3 15       	cp	r31, r3
    58b4:	d8 f0       	brcs	.+54     	; 0x58ec <vfprintf+0xbe>
    58b6:	8b 32       	cpi	r24, 0x2B	; 43
    58b8:	79 f0       	breq	.+30     	; 0x58d8 <vfprintf+0xaa>
    58ba:	38 f4       	brcc	.+14     	; 0x58ca <vfprintf+0x9c>
    58bc:	80 32       	cpi	r24, 0x20	; 32
    58be:	79 f0       	breq	.+30     	; 0x58de <vfprintf+0xb0>
    58c0:	83 32       	cpi	r24, 0x23	; 35
    58c2:	a1 f4       	brne	.+40     	; 0x58ec <vfprintf+0xbe>
    58c4:	23 2d       	mov	r18, r3
    58c6:	20 61       	ori	r18, 0x10	; 16
    58c8:	1d c0       	rjmp	.+58     	; 0x5904 <vfprintf+0xd6>
    58ca:	8d 32       	cpi	r24, 0x2D	; 45
    58cc:	61 f0       	breq	.+24     	; 0x58e6 <vfprintf+0xb8>
    58ce:	80 33       	cpi	r24, 0x30	; 48
    58d0:	69 f4       	brne	.+26     	; 0x58ec <vfprintf+0xbe>
    58d2:	23 2d       	mov	r18, r3
    58d4:	21 60       	ori	r18, 0x01	; 1
    58d6:	16 c0       	rjmp	.+44     	; 0x5904 <vfprintf+0xd6>
    58d8:	83 2d       	mov	r24, r3
    58da:	82 60       	ori	r24, 0x02	; 2
    58dc:	38 2e       	mov	r3, r24
    58de:	e3 2d       	mov	r30, r3
    58e0:	e4 60       	ori	r30, 0x04	; 4
    58e2:	3e 2e       	mov	r3, r30
    58e4:	2a c0       	rjmp	.+84     	; 0x593a <vfprintf+0x10c>
    58e6:	f3 2d       	mov	r31, r3
    58e8:	f8 60       	ori	r31, 0x08	; 8
    58ea:	1d c0       	rjmp	.+58     	; 0x5926 <vfprintf+0xf8>
    58ec:	37 fc       	sbrc	r3, 7
    58ee:	2d c0       	rjmp	.+90     	; 0x594a <vfprintf+0x11c>
    58f0:	20 ed       	ldi	r18, 0xD0	; 208
    58f2:	28 0f       	add	r18, r24
    58f4:	2a 30       	cpi	r18, 0x0A	; 10
    58f6:	40 f0       	brcs	.+16     	; 0x5908 <vfprintf+0xda>
    58f8:	8e 32       	cpi	r24, 0x2E	; 46
    58fa:	b9 f4       	brne	.+46     	; 0x592a <vfprintf+0xfc>
    58fc:	36 fc       	sbrc	r3, 6
    58fe:	75 c1       	rjmp	.+746    	; 0x5bea <vfprintf+0x3bc>
    5900:	23 2d       	mov	r18, r3
    5902:	20 64       	ori	r18, 0x40	; 64
    5904:	32 2e       	mov	r3, r18
    5906:	19 c0       	rjmp	.+50     	; 0x593a <vfprintf+0x10c>
    5908:	36 fe       	sbrs	r3, 6
    590a:	06 c0       	rjmp	.+12     	; 0x5918 <vfprintf+0xea>
    590c:	8a e0       	ldi	r24, 0x0A	; 10
    590e:	98 9e       	mul	r9, r24
    5910:	20 0d       	add	r18, r0
    5912:	11 24       	eor	r1, r1
    5914:	92 2e       	mov	r9, r18
    5916:	11 c0       	rjmp	.+34     	; 0x593a <vfprintf+0x10c>
    5918:	ea e0       	ldi	r30, 0x0A	; 10
    591a:	2e 9e       	mul	r2, r30
    591c:	20 0d       	add	r18, r0
    591e:	11 24       	eor	r1, r1
    5920:	22 2e       	mov	r2, r18
    5922:	f3 2d       	mov	r31, r3
    5924:	f0 62       	ori	r31, 0x20	; 32
    5926:	3f 2e       	mov	r3, r31
    5928:	08 c0       	rjmp	.+16     	; 0x593a <vfprintf+0x10c>
    592a:	8c 36       	cpi	r24, 0x6C	; 108
    592c:	21 f4       	brne	.+8      	; 0x5936 <vfprintf+0x108>
    592e:	83 2d       	mov	r24, r3
    5930:	80 68       	ori	r24, 0x80	; 128
    5932:	38 2e       	mov	r3, r24
    5934:	02 c0       	rjmp	.+4      	; 0x593a <vfprintf+0x10c>
    5936:	88 36       	cpi	r24, 0x68	; 104
    5938:	41 f4       	brne	.+16     	; 0x594a <vfprintf+0x11c>
    593a:	f7 01       	movw	r30, r14
    593c:	93 fd       	sbrc	r25, 3
    593e:	85 91       	lpm	r24, Z+
    5940:	93 ff       	sbrs	r25, 3
    5942:	81 91       	ld	r24, Z+
    5944:	7f 01       	movw	r14, r30
    5946:	81 11       	cpse	r24, r1
    5948:	b3 cf       	rjmp	.-154    	; 0x58b0 <vfprintf+0x82>
    594a:	98 2f       	mov	r25, r24
    594c:	9f 7d       	andi	r25, 0xDF	; 223
    594e:	95 54       	subi	r25, 0x45	; 69
    5950:	93 30       	cpi	r25, 0x03	; 3
    5952:	28 f4       	brcc	.+10     	; 0x595e <vfprintf+0x130>
    5954:	0c 5f       	subi	r16, 0xFC	; 252
    5956:	1f 4f       	sbci	r17, 0xFF	; 255
    5958:	9f e3       	ldi	r25, 0x3F	; 63
    595a:	99 83       	std	Y+1, r25	; 0x01
    595c:	0d c0       	rjmp	.+26     	; 0x5978 <vfprintf+0x14a>
    595e:	83 36       	cpi	r24, 0x63	; 99
    5960:	31 f0       	breq	.+12     	; 0x596e <vfprintf+0x140>
    5962:	83 37       	cpi	r24, 0x73	; 115
    5964:	71 f0       	breq	.+28     	; 0x5982 <vfprintf+0x154>
    5966:	83 35       	cpi	r24, 0x53	; 83
    5968:	09 f0       	breq	.+2      	; 0x596c <vfprintf+0x13e>
    596a:	55 c0       	rjmp	.+170    	; 0x5a16 <vfprintf+0x1e8>
    596c:	20 c0       	rjmp	.+64     	; 0x59ae <vfprintf+0x180>
    596e:	f8 01       	movw	r30, r16
    5970:	80 81       	ld	r24, Z
    5972:	89 83       	std	Y+1, r24	; 0x01
    5974:	0e 5f       	subi	r16, 0xFE	; 254
    5976:	1f 4f       	sbci	r17, 0xFF	; 255
    5978:	88 24       	eor	r8, r8
    597a:	83 94       	inc	r8
    597c:	91 2c       	mov	r9, r1
    597e:	53 01       	movw	r10, r6
    5980:	12 c0       	rjmp	.+36     	; 0x59a6 <vfprintf+0x178>
    5982:	28 01       	movw	r4, r16
    5984:	f2 e0       	ldi	r31, 0x02	; 2
    5986:	4f 0e       	add	r4, r31
    5988:	51 1c       	adc	r5, r1
    598a:	f8 01       	movw	r30, r16
    598c:	a0 80       	ld	r10, Z
    598e:	b1 80       	ldd	r11, Z+1	; 0x01
    5990:	36 fe       	sbrs	r3, 6
    5992:	03 c0       	rjmp	.+6      	; 0x599a <vfprintf+0x16c>
    5994:	69 2d       	mov	r22, r9
    5996:	70 e0       	ldi	r23, 0x00	; 0
    5998:	02 c0       	rjmp	.+4      	; 0x599e <vfprintf+0x170>
    599a:	6f ef       	ldi	r22, 0xFF	; 255
    599c:	7f ef       	ldi	r23, 0xFF	; 255
    599e:	c5 01       	movw	r24, r10
    59a0:	4e d1       	rcall	.+668    	; 0x5c3e <strnlen>
    59a2:	4c 01       	movw	r8, r24
    59a4:	82 01       	movw	r16, r4
    59a6:	f3 2d       	mov	r31, r3
    59a8:	ff 77       	andi	r31, 0x7F	; 127
    59aa:	3f 2e       	mov	r3, r31
    59ac:	15 c0       	rjmp	.+42     	; 0x59d8 <vfprintf+0x1aa>
    59ae:	28 01       	movw	r4, r16
    59b0:	22 e0       	ldi	r18, 0x02	; 2
    59b2:	42 0e       	add	r4, r18
    59b4:	51 1c       	adc	r5, r1
    59b6:	f8 01       	movw	r30, r16
    59b8:	a0 80       	ld	r10, Z
    59ba:	b1 80       	ldd	r11, Z+1	; 0x01
    59bc:	36 fe       	sbrs	r3, 6
    59be:	03 c0       	rjmp	.+6      	; 0x59c6 <vfprintf+0x198>
    59c0:	69 2d       	mov	r22, r9
    59c2:	70 e0       	ldi	r23, 0x00	; 0
    59c4:	02 c0       	rjmp	.+4      	; 0x59ca <vfprintf+0x19c>
    59c6:	6f ef       	ldi	r22, 0xFF	; 255
    59c8:	7f ef       	ldi	r23, 0xFF	; 255
    59ca:	c5 01       	movw	r24, r10
    59cc:	2d d1       	rcall	.+602    	; 0x5c28 <strnlen_P>
    59ce:	4c 01       	movw	r8, r24
    59d0:	f3 2d       	mov	r31, r3
    59d2:	f0 68       	ori	r31, 0x80	; 128
    59d4:	3f 2e       	mov	r3, r31
    59d6:	82 01       	movw	r16, r4
    59d8:	33 fc       	sbrc	r3, 3
    59da:	19 c0       	rjmp	.+50     	; 0x5a0e <vfprintf+0x1e0>
    59dc:	82 2d       	mov	r24, r2
    59de:	90 e0       	ldi	r25, 0x00	; 0
    59e0:	88 16       	cp	r8, r24
    59e2:	99 06       	cpc	r9, r25
    59e4:	a0 f4       	brcc	.+40     	; 0x5a0e <vfprintf+0x1e0>
    59e6:	b6 01       	movw	r22, r12
    59e8:	80 e2       	ldi	r24, 0x20	; 32
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	33 d1       	rcall	.+614    	; 0x5c54 <fputc>
    59ee:	2a 94       	dec	r2
    59f0:	f5 cf       	rjmp	.-22     	; 0x59dc <vfprintf+0x1ae>
    59f2:	f5 01       	movw	r30, r10
    59f4:	37 fc       	sbrc	r3, 7
    59f6:	85 91       	lpm	r24, Z+
    59f8:	37 fe       	sbrs	r3, 7
    59fa:	81 91       	ld	r24, Z+
    59fc:	5f 01       	movw	r10, r30
    59fe:	b6 01       	movw	r22, r12
    5a00:	90 e0       	ldi	r25, 0x00	; 0
    5a02:	28 d1       	rcall	.+592    	; 0x5c54 <fputc>
    5a04:	21 10       	cpse	r2, r1
    5a06:	2a 94       	dec	r2
    5a08:	21 e0       	ldi	r18, 0x01	; 1
    5a0a:	82 1a       	sub	r8, r18
    5a0c:	91 08       	sbc	r9, r1
    5a0e:	81 14       	cp	r8, r1
    5a10:	91 04       	cpc	r9, r1
    5a12:	79 f7       	brne	.-34     	; 0x59f2 <vfprintf+0x1c4>
    5a14:	e1 c0       	rjmp	.+450    	; 0x5bd8 <vfprintf+0x3aa>
    5a16:	84 36       	cpi	r24, 0x64	; 100
    5a18:	11 f0       	breq	.+4      	; 0x5a1e <vfprintf+0x1f0>
    5a1a:	89 36       	cpi	r24, 0x69	; 105
    5a1c:	39 f5       	brne	.+78     	; 0x5a6c <vfprintf+0x23e>
    5a1e:	f8 01       	movw	r30, r16
    5a20:	37 fe       	sbrs	r3, 7
    5a22:	07 c0       	rjmp	.+14     	; 0x5a32 <vfprintf+0x204>
    5a24:	60 81       	ld	r22, Z
    5a26:	71 81       	ldd	r23, Z+1	; 0x01
    5a28:	82 81       	ldd	r24, Z+2	; 0x02
    5a2a:	93 81       	ldd	r25, Z+3	; 0x03
    5a2c:	0c 5f       	subi	r16, 0xFC	; 252
    5a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a30:	08 c0       	rjmp	.+16     	; 0x5a42 <vfprintf+0x214>
    5a32:	60 81       	ld	r22, Z
    5a34:	71 81       	ldd	r23, Z+1	; 0x01
    5a36:	07 2e       	mov	r0, r23
    5a38:	00 0c       	add	r0, r0
    5a3a:	88 0b       	sbc	r24, r24
    5a3c:	99 0b       	sbc	r25, r25
    5a3e:	0e 5f       	subi	r16, 0xFE	; 254
    5a40:	1f 4f       	sbci	r17, 0xFF	; 255
    5a42:	f3 2d       	mov	r31, r3
    5a44:	ff 76       	andi	r31, 0x6F	; 111
    5a46:	3f 2e       	mov	r3, r31
    5a48:	97 ff       	sbrs	r25, 7
    5a4a:	09 c0       	rjmp	.+18     	; 0x5a5e <vfprintf+0x230>
    5a4c:	90 95       	com	r25
    5a4e:	80 95       	com	r24
    5a50:	70 95       	com	r23
    5a52:	61 95       	neg	r22
    5a54:	7f 4f       	sbci	r23, 0xFF	; 255
    5a56:	8f 4f       	sbci	r24, 0xFF	; 255
    5a58:	9f 4f       	sbci	r25, 0xFF	; 255
    5a5a:	f0 68       	ori	r31, 0x80	; 128
    5a5c:	3f 2e       	mov	r3, r31
    5a5e:	2a e0       	ldi	r18, 0x0A	; 10
    5a60:	30 e0       	ldi	r19, 0x00	; 0
    5a62:	a3 01       	movw	r20, r6
    5a64:	33 d1       	rcall	.+614    	; 0x5ccc <__ultoa_invert>
    5a66:	88 2e       	mov	r8, r24
    5a68:	86 18       	sub	r8, r6
    5a6a:	44 c0       	rjmp	.+136    	; 0x5af4 <vfprintf+0x2c6>
    5a6c:	85 37       	cpi	r24, 0x75	; 117
    5a6e:	31 f4       	brne	.+12     	; 0x5a7c <vfprintf+0x24e>
    5a70:	23 2d       	mov	r18, r3
    5a72:	2f 7e       	andi	r18, 0xEF	; 239
    5a74:	b2 2e       	mov	r11, r18
    5a76:	2a e0       	ldi	r18, 0x0A	; 10
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	25 c0       	rjmp	.+74     	; 0x5ac6 <vfprintf+0x298>
    5a7c:	93 2d       	mov	r25, r3
    5a7e:	99 7f       	andi	r25, 0xF9	; 249
    5a80:	b9 2e       	mov	r11, r25
    5a82:	8f 36       	cpi	r24, 0x6F	; 111
    5a84:	c1 f0       	breq	.+48     	; 0x5ab6 <vfprintf+0x288>
    5a86:	18 f4       	brcc	.+6      	; 0x5a8e <vfprintf+0x260>
    5a88:	88 35       	cpi	r24, 0x58	; 88
    5a8a:	79 f0       	breq	.+30     	; 0x5aaa <vfprintf+0x27c>
    5a8c:	ae c0       	rjmp	.+348    	; 0x5bea <vfprintf+0x3bc>
    5a8e:	80 37       	cpi	r24, 0x70	; 112
    5a90:	19 f0       	breq	.+6      	; 0x5a98 <vfprintf+0x26a>
    5a92:	88 37       	cpi	r24, 0x78	; 120
    5a94:	21 f0       	breq	.+8      	; 0x5a9e <vfprintf+0x270>
    5a96:	a9 c0       	rjmp	.+338    	; 0x5bea <vfprintf+0x3bc>
    5a98:	e9 2f       	mov	r30, r25
    5a9a:	e0 61       	ori	r30, 0x10	; 16
    5a9c:	be 2e       	mov	r11, r30
    5a9e:	b4 fe       	sbrs	r11, 4
    5aa0:	0d c0       	rjmp	.+26     	; 0x5abc <vfprintf+0x28e>
    5aa2:	fb 2d       	mov	r31, r11
    5aa4:	f4 60       	ori	r31, 0x04	; 4
    5aa6:	bf 2e       	mov	r11, r31
    5aa8:	09 c0       	rjmp	.+18     	; 0x5abc <vfprintf+0x28e>
    5aaa:	34 fe       	sbrs	r3, 4
    5aac:	0a c0       	rjmp	.+20     	; 0x5ac2 <vfprintf+0x294>
    5aae:	29 2f       	mov	r18, r25
    5ab0:	26 60       	ori	r18, 0x06	; 6
    5ab2:	b2 2e       	mov	r11, r18
    5ab4:	06 c0       	rjmp	.+12     	; 0x5ac2 <vfprintf+0x294>
    5ab6:	28 e0       	ldi	r18, 0x08	; 8
    5ab8:	30 e0       	ldi	r19, 0x00	; 0
    5aba:	05 c0       	rjmp	.+10     	; 0x5ac6 <vfprintf+0x298>
    5abc:	20 e1       	ldi	r18, 0x10	; 16
    5abe:	30 e0       	ldi	r19, 0x00	; 0
    5ac0:	02 c0       	rjmp	.+4      	; 0x5ac6 <vfprintf+0x298>
    5ac2:	20 e1       	ldi	r18, 0x10	; 16
    5ac4:	32 e0       	ldi	r19, 0x02	; 2
    5ac6:	f8 01       	movw	r30, r16
    5ac8:	b7 fe       	sbrs	r11, 7
    5aca:	07 c0       	rjmp	.+14     	; 0x5ada <vfprintf+0x2ac>
    5acc:	60 81       	ld	r22, Z
    5ace:	71 81       	ldd	r23, Z+1	; 0x01
    5ad0:	82 81       	ldd	r24, Z+2	; 0x02
    5ad2:	93 81       	ldd	r25, Z+3	; 0x03
    5ad4:	0c 5f       	subi	r16, 0xFC	; 252
    5ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ad8:	06 c0       	rjmp	.+12     	; 0x5ae6 <vfprintf+0x2b8>
    5ada:	60 81       	ld	r22, Z
    5adc:	71 81       	ldd	r23, Z+1	; 0x01
    5ade:	80 e0       	ldi	r24, 0x00	; 0
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
    5ae2:	0e 5f       	subi	r16, 0xFE	; 254
    5ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ae6:	a3 01       	movw	r20, r6
    5ae8:	f1 d0       	rcall	.+482    	; 0x5ccc <__ultoa_invert>
    5aea:	88 2e       	mov	r8, r24
    5aec:	86 18       	sub	r8, r6
    5aee:	fb 2d       	mov	r31, r11
    5af0:	ff 77       	andi	r31, 0x7F	; 127
    5af2:	3f 2e       	mov	r3, r31
    5af4:	36 fe       	sbrs	r3, 6
    5af6:	0d c0       	rjmp	.+26     	; 0x5b12 <vfprintf+0x2e4>
    5af8:	23 2d       	mov	r18, r3
    5afa:	2e 7f       	andi	r18, 0xFE	; 254
    5afc:	a2 2e       	mov	r10, r18
    5afe:	89 14       	cp	r8, r9
    5b00:	58 f4       	brcc	.+22     	; 0x5b18 <vfprintf+0x2ea>
    5b02:	34 fe       	sbrs	r3, 4
    5b04:	0b c0       	rjmp	.+22     	; 0x5b1c <vfprintf+0x2ee>
    5b06:	32 fc       	sbrc	r3, 2
    5b08:	09 c0       	rjmp	.+18     	; 0x5b1c <vfprintf+0x2ee>
    5b0a:	83 2d       	mov	r24, r3
    5b0c:	8e 7e       	andi	r24, 0xEE	; 238
    5b0e:	a8 2e       	mov	r10, r24
    5b10:	05 c0       	rjmp	.+10     	; 0x5b1c <vfprintf+0x2ee>
    5b12:	b8 2c       	mov	r11, r8
    5b14:	a3 2c       	mov	r10, r3
    5b16:	03 c0       	rjmp	.+6      	; 0x5b1e <vfprintf+0x2f0>
    5b18:	b8 2c       	mov	r11, r8
    5b1a:	01 c0       	rjmp	.+2      	; 0x5b1e <vfprintf+0x2f0>
    5b1c:	b9 2c       	mov	r11, r9
    5b1e:	a4 fe       	sbrs	r10, 4
    5b20:	0f c0       	rjmp	.+30     	; 0x5b40 <vfprintf+0x312>
    5b22:	fe 01       	movw	r30, r28
    5b24:	e8 0d       	add	r30, r8
    5b26:	f1 1d       	adc	r31, r1
    5b28:	80 81       	ld	r24, Z
    5b2a:	80 33       	cpi	r24, 0x30	; 48
    5b2c:	21 f4       	brne	.+8      	; 0x5b36 <vfprintf+0x308>
    5b2e:	9a 2d       	mov	r25, r10
    5b30:	99 7e       	andi	r25, 0xE9	; 233
    5b32:	a9 2e       	mov	r10, r25
    5b34:	09 c0       	rjmp	.+18     	; 0x5b48 <vfprintf+0x31a>
    5b36:	a2 fe       	sbrs	r10, 2
    5b38:	06 c0       	rjmp	.+12     	; 0x5b46 <vfprintf+0x318>
    5b3a:	b3 94       	inc	r11
    5b3c:	b3 94       	inc	r11
    5b3e:	04 c0       	rjmp	.+8      	; 0x5b48 <vfprintf+0x31a>
    5b40:	8a 2d       	mov	r24, r10
    5b42:	86 78       	andi	r24, 0x86	; 134
    5b44:	09 f0       	breq	.+2      	; 0x5b48 <vfprintf+0x31a>
    5b46:	b3 94       	inc	r11
    5b48:	a3 fc       	sbrc	r10, 3
    5b4a:	10 c0       	rjmp	.+32     	; 0x5b6c <vfprintf+0x33e>
    5b4c:	a0 fe       	sbrs	r10, 0
    5b4e:	06 c0       	rjmp	.+12     	; 0x5b5c <vfprintf+0x32e>
    5b50:	b2 14       	cp	r11, r2
    5b52:	80 f4       	brcc	.+32     	; 0x5b74 <vfprintf+0x346>
    5b54:	28 0c       	add	r2, r8
    5b56:	92 2c       	mov	r9, r2
    5b58:	9b 18       	sub	r9, r11
    5b5a:	0d c0       	rjmp	.+26     	; 0x5b76 <vfprintf+0x348>
    5b5c:	b2 14       	cp	r11, r2
    5b5e:	58 f4       	brcc	.+22     	; 0x5b76 <vfprintf+0x348>
    5b60:	b6 01       	movw	r22, r12
    5b62:	80 e2       	ldi	r24, 0x20	; 32
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	76 d0       	rcall	.+236    	; 0x5c54 <fputc>
    5b68:	b3 94       	inc	r11
    5b6a:	f8 cf       	rjmp	.-16     	; 0x5b5c <vfprintf+0x32e>
    5b6c:	b2 14       	cp	r11, r2
    5b6e:	18 f4       	brcc	.+6      	; 0x5b76 <vfprintf+0x348>
    5b70:	2b 18       	sub	r2, r11
    5b72:	02 c0       	rjmp	.+4      	; 0x5b78 <vfprintf+0x34a>
    5b74:	98 2c       	mov	r9, r8
    5b76:	21 2c       	mov	r2, r1
    5b78:	a4 fe       	sbrs	r10, 4
    5b7a:	0f c0       	rjmp	.+30     	; 0x5b9a <vfprintf+0x36c>
    5b7c:	b6 01       	movw	r22, r12
    5b7e:	80 e3       	ldi	r24, 0x30	; 48
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	68 d0       	rcall	.+208    	; 0x5c54 <fputc>
    5b84:	a2 fe       	sbrs	r10, 2
    5b86:	16 c0       	rjmp	.+44     	; 0x5bb4 <vfprintf+0x386>
    5b88:	a1 fc       	sbrc	r10, 1
    5b8a:	03 c0       	rjmp	.+6      	; 0x5b92 <vfprintf+0x364>
    5b8c:	88 e7       	ldi	r24, 0x78	; 120
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	02 c0       	rjmp	.+4      	; 0x5b96 <vfprintf+0x368>
    5b92:	88 e5       	ldi	r24, 0x58	; 88
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	b6 01       	movw	r22, r12
    5b98:	0c c0       	rjmp	.+24     	; 0x5bb2 <vfprintf+0x384>
    5b9a:	8a 2d       	mov	r24, r10
    5b9c:	86 78       	andi	r24, 0x86	; 134
    5b9e:	51 f0       	breq	.+20     	; 0x5bb4 <vfprintf+0x386>
    5ba0:	a1 fe       	sbrs	r10, 1
    5ba2:	02 c0       	rjmp	.+4      	; 0x5ba8 <vfprintf+0x37a>
    5ba4:	8b e2       	ldi	r24, 0x2B	; 43
    5ba6:	01 c0       	rjmp	.+2      	; 0x5baa <vfprintf+0x37c>
    5ba8:	80 e2       	ldi	r24, 0x20	; 32
    5baa:	a7 fc       	sbrc	r10, 7
    5bac:	8d e2       	ldi	r24, 0x2D	; 45
    5bae:	b6 01       	movw	r22, r12
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	50 d0       	rcall	.+160    	; 0x5c54 <fputc>
    5bb4:	89 14       	cp	r8, r9
    5bb6:	30 f4       	brcc	.+12     	; 0x5bc4 <vfprintf+0x396>
    5bb8:	b6 01       	movw	r22, r12
    5bba:	80 e3       	ldi	r24, 0x30	; 48
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	4a d0       	rcall	.+148    	; 0x5c54 <fputc>
    5bc0:	9a 94       	dec	r9
    5bc2:	f8 cf       	rjmp	.-16     	; 0x5bb4 <vfprintf+0x386>
    5bc4:	8a 94       	dec	r8
    5bc6:	f3 01       	movw	r30, r6
    5bc8:	e8 0d       	add	r30, r8
    5bca:	f1 1d       	adc	r31, r1
    5bcc:	80 81       	ld	r24, Z
    5bce:	b6 01       	movw	r22, r12
    5bd0:	90 e0       	ldi	r25, 0x00	; 0
    5bd2:	40 d0       	rcall	.+128    	; 0x5c54 <fputc>
    5bd4:	81 10       	cpse	r8, r1
    5bd6:	f6 cf       	rjmp	.-20     	; 0x5bc4 <vfprintf+0x396>
    5bd8:	22 20       	and	r2, r2
    5bda:	09 f4       	brne	.+2      	; 0x5bde <vfprintf+0x3b0>
    5bdc:	4e ce       	rjmp	.-868    	; 0x587a <vfprintf+0x4c>
    5bde:	b6 01       	movw	r22, r12
    5be0:	80 e2       	ldi	r24, 0x20	; 32
    5be2:	90 e0       	ldi	r25, 0x00	; 0
    5be4:	37 d0       	rcall	.+110    	; 0x5c54 <fputc>
    5be6:	2a 94       	dec	r2
    5be8:	f7 cf       	rjmp	.-18     	; 0x5bd8 <vfprintf+0x3aa>
    5bea:	f6 01       	movw	r30, r12
    5bec:	86 81       	ldd	r24, Z+6	; 0x06
    5bee:	97 81       	ldd	r25, Z+7	; 0x07
    5bf0:	02 c0       	rjmp	.+4      	; 0x5bf6 <vfprintf+0x3c8>
    5bf2:	8f ef       	ldi	r24, 0xFF	; 255
    5bf4:	9f ef       	ldi	r25, 0xFF	; 255
    5bf6:	2b 96       	adiw	r28, 0x0b	; 11
    5bf8:	0f b6       	in	r0, 0x3f	; 63
    5bfa:	f8 94       	cli
    5bfc:	de bf       	out	0x3e, r29	; 62
    5bfe:	0f be       	out	0x3f, r0	; 63
    5c00:	cd bf       	out	0x3d, r28	; 61
    5c02:	df 91       	pop	r29
    5c04:	cf 91       	pop	r28
    5c06:	1f 91       	pop	r17
    5c08:	0f 91       	pop	r16
    5c0a:	ff 90       	pop	r15
    5c0c:	ef 90       	pop	r14
    5c0e:	df 90       	pop	r13
    5c10:	cf 90       	pop	r12
    5c12:	bf 90       	pop	r11
    5c14:	af 90       	pop	r10
    5c16:	9f 90       	pop	r9
    5c18:	8f 90       	pop	r8
    5c1a:	7f 90       	pop	r7
    5c1c:	6f 90       	pop	r6
    5c1e:	5f 90       	pop	r5
    5c20:	4f 90       	pop	r4
    5c22:	3f 90       	pop	r3
    5c24:	2f 90       	pop	r2
    5c26:	08 95       	ret

00005c28 <strnlen_P>:
    5c28:	fc 01       	movw	r30, r24
    5c2a:	05 90       	lpm	r0, Z+
    5c2c:	61 50       	subi	r22, 0x01	; 1
    5c2e:	70 40       	sbci	r23, 0x00	; 0
    5c30:	01 10       	cpse	r0, r1
    5c32:	d8 f7       	brcc	.-10     	; 0x5c2a <strnlen_P+0x2>
    5c34:	80 95       	com	r24
    5c36:	90 95       	com	r25
    5c38:	8e 0f       	add	r24, r30
    5c3a:	9f 1f       	adc	r25, r31
    5c3c:	08 95       	ret

00005c3e <strnlen>:
    5c3e:	fc 01       	movw	r30, r24
    5c40:	61 50       	subi	r22, 0x01	; 1
    5c42:	70 40       	sbci	r23, 0x00	; 0
    5c44:	01 90       	ld	r0, Z+
    5c46:	01 10       	cpse	r0, r1
    5c48:	d8 f7       	brcc	.-10     	; 0x5c40 <strnlen+0x2>
    5c4a:	80 95       	com	r24
    5c4c:	90 95       	com	r25
    5c4e:	8e 0f       	add	r24, r30
    5c50:	9f 1f       	adc	r25, r31
    5c52:	08 95       	ret

00005c54 <fputc>:
    5c54:	0f 93       	push	r16
    5c56:	1f 93       	push	r17
    5c58:	cf 93       	push	r28
    5c5a:	df 93       	push	r29
    5c5c:	fb 01       	movw	r30, r22
    5c5e:	23 81       	ldd	r18, Z+3	; 0x03
    5c60:	21 fd       	sbrc	r18, 1
    5c62:	03 c0       	rjmp	.+6      	; 0x5c6a <fputc+0x16>
    5c64:	8f ef       	ldi	r24, 0xFF	; 255
    5c66:	9f ef       	ldi	r25, 0xFF	; 255
    5c68:	2c c0       	rjmp	.+88     	; 0x5cc2 <fputc+0x6e>
    5c6a:	22 ff       	sbrs	r18, 2
    5c6c:	16 c0       	rjmp	.+44     	; 0x5c9a <fputc+0x46>
    5c6e:	46 81       	ldd	r20, Z+6	; 0x06
    5c70:	57 81       	ldd	r21, Z+7	; 0x07
    5c72:	24 81       	ldd	r18, Z+4	; 0x04
    5c74:	35 81       	ldd	r19, Z+5	; 0x05
    5c76:	42 17       	cp	r20, r18
    5c78:	53 07       	cpc	r21, r19
    5c7a:	44 f4       	brge	.+16     	; 0x5c8c <fputc+0x38>
    5c7c:	a0 81       	ld	r26, Z
    5c7e:	b1 81       	ldd	r27, Z+1	; 0x01
    5c80:	9d 01       	movw	r18, r26
    5c82:	2f 5f       	subi	r18, 0xFF	; 255
    5c84:	3f 4f       	sbci	r19, 0xFF	; 255
    5c86:	31 83       	std	Z+1, r19	; 0x01
    5c88:	20 83       	st	Z, r18
    5c8a:	8c 93       	st	X, r24
    5c8c:	26 81       	ldd	r18, Z+6	; 0x06
    5c8e:	37 81       	ldd	r19, Z+7	; 0x07
    5c90:	2f 5f       	subi	r18, 0xFF	; 255
    5c92:	3f 4f       	sbci	r19, 0xFF	; 255
    5c94:	37 83       	std	Z+7, r19	; 0x07
    5c96:	26 83       	std	Z+6, r18	; 0x06
    5c98:	14 c0       	rjmp	.+40     	; 0x5cc2 <fputc+0x6e>
    5c9a:	8b 01       	movw	r16, r22
    5c9c:	ec 01       	movw	r28, r24
    5c9e:	fb 01       	movw	r30, r22
    5ca0:	00 84       	ldd	r0, Z+8	; 0x08
    5ca2:	f1 85       	ldd	r31, Z+9	; 0x09
    5ca4:	e0 2d       	mov	r30, r0
    5ca6:	19 95       	eicall
    5ca8:	89 2b       	or	r24, r25
    5caa:	e1 f6       	brne	.-72     	; 0x5c64 <fputc+0x10>
    5cac:	d8 01       	movw	r26, r16
    5cae:	16 96       	adiw	r26, 0x06	; 6
    5cb0:	8d 91       	ld	r24, X+
    5cb2:	9c 91       	ld	r25, X
    5cb4:	17 97       	sbiw	r26, 0x07	; 7
    5cb6:	01 96       	adiw	r24, 0x01	; 1
    5cb8:	17 96       	adiw	r26, 0x07	; 7
    5cba:	9c 93       	st	X, r25
    5cbc:	8e 93       	st	-X, r24
    5cbe:	16 97       	sbiw	r26, 0x06	; 6
    5cc0:	ce 01       	movw	r24, r28
    5cc2:	df 91       	pop	r29
    5cc4:	cf 91       	pop	r28
    5cc6:	1f 91       	pop	r17
    5cc8:	0f 91       	pop	r16
    5cca:	08 95       	ret

00005ccc <__ultoa_invert>:
    5ccc:	fa 01       	movw	r30, r20
    5cce:	aa 27       	eor	r26, r26
    5cd0:	28 30       	cpi	r18, 0x08	; 8
    5cd2:	51 f1       	breq	.+84     	; 0x5d28 <__ultoa_invert+0x5c>
    5cd4:	20 31       	cpi	r18, 0x10	; 16
    5cd6:	81 f1       	breq	.+96     	; 0x5d38 <__ultoa_invert+0x6c>
    5cd8:	e8 94       	clt
    5cda:	6f 93       	push	r22
    5cdc:	6e 7f       	andi	r22, 0xFE	; 254
    5cde:	6e 5f       	subi	r22, 0xFE	; 254
    5ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce6:	af 4f       	sbci	r26, 0xFF	; 255
    5ce8:	b1 e0       	ldi	r27, 0x01	; 1
    5cea:	3e d0       	rcall	.+124    	; 0x5d68 <__ultoa_invert+0x9c>
    5cec:	b4 e0       	ldi	r27, 0x04	; 4
    5cee:	3c d0       	rcall	.+120    	; 0x5d68 <__ultoa_invert+0x9c>
    5cf0:	67 0f       	add	r22, r23
    5cf2:	78 1f       	adc	r23, r24
    5cf4:	89 1f       	adc	r24, r25
    5cf6:	9a 1f       	adc	r25, r26
    5cf8:	a1 1d       	adc	r26, r1
    5cfa:	68 0f       	add	r22, r24
    5cfc:	79 1f       	adc	r23, r25
    5cfe:	8a 1f       	adc	r24, r26
    5d00:	91 1d       	adc	r25, r1
    5d02:	a1 1d       	adc	r26, r1
    5d04:	6a 0f       	add	r22, r26
    5d06:	71 1d       	adc	r23, r1
    5d08:	81 1d       	adc	r24, r1
    5d0a:	91 1d       	adc	r25, r1
    5d0c:	a1 1d       	adc	r26, r1
    5d0e:	20 d0       	rcall	.+64     	; 0x5d50 <__ultoa_invert+0x84>
    5d10:	09 f4       	brne	.+2      	; 0x5d14 <__ultoa_invert+0x48>
    5d12:	68 94       	set
    5d14:	3f 91       	pop	r19
    5d16:	2a e0       	ldi	r18, 0x0A	; 10
    5d18:	26 9f       	mul	r18, r22
    5d1a:	11 24       	eor	r1, r1
    5d1c:	30 19       	sub	r19, r0
    5d1e:	30 5d       	subi	r19, 0xD0	; 208
    5d20:	31 93       	st	Z+, r19
    5d22:	de f6       	brtc	.-74     	; 0x5cda <__ultoa_invert+0xe>
    5d24:	cf 01       	movw	r24, r30
    5d26:	08 95       	ret
    5d28:	46 2f       	mov	r20, r22
    5d2a:	47 70       	andi	r20, 0x07	; 7
    5d2c:	40 5d       	subi	r20, 0xD0	; 208
    5d2e:	41 93       	st	Z+, r20
    5d30:	b3 e0       	ldi	r27, 0x03	; 3
    5d32:	0f d0       	rcall	.+30     	; 0x5d52 <__ultoa_invert+0x86>
    5d34:	c9 f7       	brne	.-14     	; 0x5d28 <__ultoa_invert+0x5c>
    5d36:	f6 cf       	rjmp	.-20     	; 0x5d24 <__ultoa_invert+0x58>
    5d38:	46 2f       	mov	r20, r22
    5d3a:	4f 70       	andi	r20, 0x0F	; 15
    5d3c:	40 5d       	subi	r20, 0xD0	; 208
    5d3e:	4a 33       	cpi	r20, 0x3A	; 58
    5d40:	18 f0       	brcs	.+6      	; 0x5d48 <__ultoa_invert+0x7c>
    5d42:	49 5d       	subi	r20, 0xD9	; 217
    5d44:	31 fd       	sbrc	r19, 1
    5d46:	40 52       	subi	r20, 0x20	; 32
    5d48:	41 93       	st	Z+, r20
    5d4a:	02 d0       	rcall	.+4      	; 0x5d50 <__ultoa_invert+0x84>
    5d4c:	a9 f7       	brne	.-22     	; 0x5d38 <__ultoa_invert+0x6c>
    5d4e:	ea cf       	rjmp	.-44     	; 0x5d24 <__ultoa_invert+0x58>
    5d50:	b4 e0       	ldi	r27, 0x04	; 4
    5d52:	a6 95       	lsr	r26
    5d54:	97 95       	ror	r25
    5d56:	87 95       	ror	r24
    5d58:	77 95       	ror	r23
    5d5a:	67 95       	ror	r22
    5d5c:	ba 95       	dec	r27
    5d5e:	c9 f7       	brne	.-14     	; 0x5d52 <__ultoa_invert+0x86>
    5d60:	00 97       	sbiw	r24, 0x00	; 0
    5d62:	61 05       	cpc	r22, r1
    5d64:	71 05       	cpc	r23, r1
    5d66:	08 95       	ret
    5d68:	9b 01       	movw	r18, r22
    5d6a:	ac 01       	movw	r20, r24
    5d6c:	0a 2e       	mov	r0, r26
    5d6e:	06 94       	lsr	r0
    5d70:	57 95       	ror	r21
    5d72:	47 95       	ror	r20
    5d74:	37 95       	ror	r19
    5d76:	27 95       	ror	r18
    5d78:	ba 95       	dec	r27
    5d7a:	c9 f7       	brne	.-14     	; 0x5d6e <__ultoa_invert+0xa2>
    5d7c:	62 0f       	add	r22, r18
    5d7e:	73 1f       	adc	r23, r19
    5d80:	84 1f       	adc	r24, r20
    5d82:	95 1f       	adc	r25, r21
    5d84:	a0 1d       	adc	r26, r0
    5d86:	08 95       	ret

00005d88 <_exit>:
    5d88:	f8 94       	cli

00005d8a <__stop_program>:
    5d8a:	ff cf       	rjmp	.-2      	; 0x5d8a <__stop_program>
