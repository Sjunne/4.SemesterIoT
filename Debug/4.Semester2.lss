
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004de  00800200  000055dc  00005670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000055dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c8b  008006de  008006de  00005b4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005b4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000980  00000000  00000000  00005bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bfd9  00000000  00000000  0000656c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eb2  00000000  00000000  00012545  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e22  00000000  00000000  000153f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002304  00000000  00000000  0001b21c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000038e4  00000000  00000000  0001d520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b10f  00000000  00000000  00020e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f8  00000000  00000000  0002bf13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	9c c3       	rjmp	.+1848   	; 0x76a <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <__vector_25>
      68:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 65 20 	jmp	0x40ca	; 0x40ca <__vector_36>
      94:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <__vector_51>
      d0:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 91 21 	jmp	0x4322	; 0x4322 <__vector_54>
      dc:	0c 94 e3 21 	jmp	0x43c6	; 0x43c6 <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b9 16       	cp	r11, r25
      e6:	b9 16       	cp	r11, r25
      e8:	b9 16       	cp	r11, r25
      ea:	f0 16       	cp	r15, r16
      ec:	f8 16       	cp	r15, r24
      ee:	0d 17       	cp	r16, r29
      f0:	b9 16       	cp	r11, r25
      f2:	b9 16       	cp	r11, r25
      f4:	f0 16       	cp	r15, r16
      f6:	f8 16       	cp	r15, r24

000000f8 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      f8:	0e 94 09 0b 	call	0x1612	; 0x1612 <prvCheckTasksWaitingTermination>
      fc:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	6c d2       	rcall	.+1240   	; 0x5de <vPortYield>
     106:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 36 14 	call	0x286c	; 0x286c <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <prvProcessTimerOrBlockTask>
     124:	0e 94 82 16 	call	0x2d04	; 0x2d04 <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	16 e0       	ldi	r17, 0x06	; 6
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	ec ed       	ldi	r30, 0xDC	; 220
     142:	f5 e5       	ldi	r31, 0x55	; 85
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	ae 3d       	cpi	r26, 0xDE	; 222
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e1       	ldi	r18, 0x13	; 19
     156:	ae ed       	ldi	r26, 0xDE	; 222
     158:	b6 e0       	ldi	r27, 0x06	; 6
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a9 36       	cpi	r26, 0x69	; 105
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <main>
     168:	0c 94 ec 2a 	jmp	0x55d8	; 0x55d8 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <co2MeasureCallBack>:
#include "DataQueue.h"

void co2MeasureCallBack(uint16_t ppm)
{
	// Here we enqueue
	enqueueCO2Measure(ppm);
     16e:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <enqueueCO2Measure>
     172:	08 95       	ret

00000174 <co2Measure>:

void co2Measure() {

	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
     174:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
     178:	81 11       	cpse	r24, r1
     17a:	05 c0       	rjmp	.+10     	; 0x186 <co2Measure+0x12>
	{
		mh_z19_injectCallBack(co2MeasureCallBack);
     17c:	87 eb       	ldi	r24, 0xB7	; 183
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <mh_z19_injectCallBack>
     184:	08 95       	ret
	}
	else
	{
		puts("det gik galt");
     186:	8a e6       	ldi	r24, 0x6A	; 106
     188:	92 e0       	ldi	r25, 0x02	; 2
     18a:	0c 94 e1 27 	jmp	0x4fc2	; 0x4fc2 <puts>
     18e:	08 95       	ret

00000190 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     190:	ea ee       	ldi	r30, 0xEA	; 234
     192:	f6 e0       	ldi	r31, 0x06	; 6
     194:	ae ee       	ldi	r26, 0xEE	; 238
     196:	b6 e0       	ldi	r27, 0x06	; 6
     198:	b1 83       	std	Z+1, r27	; 0x01
     19a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     19c:	13 82       	std	Z+3, r1	; 0x03
     19e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     1a0:	ee ea       	ldi	r30, 0xAE	; 174
     1a2:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     1a4:	f0 93 e9 06 	sts	0x06E9, r31	; 0x8006e9 <pxEnd+0x1>
     1a8:	e0 93 e8 06 	sts	0x06E8, r30	; 0x8006e8 <pxEnd>
    pxEnd->xBlockSize = 0;
     1ac:	13 82       	std	Z+3, r1	; 0x03
     1ae:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     1b0:	11 82       	std	Z+1, r1	; 0x01
     1b2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     1b4:	80 ec       	ldi	r24, 0xC0	; 192
     1b6:	99 e0       	ldi	r25, 0x09	; 9
     1b8:	13 96       	adiw	r26, 0x03	; 3
     1ba:	9c 93       	st	X, r25
     1bc:	8e 93       	st	-X, r24
     1be:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     1c0:	ed 93       	st	X+, r30
     1c2:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1c4:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <xMinimumEverFreeBytesRemaining+0x1>
     1c8:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1cc:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <xFreeBytesRemaining+0x1>
     1d0:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e8       	ldi	r25, 0x80	; 128
     1d8:	90 93 df 06 	sts	0x06DF, r25	; 0x8006df <__data_end+0x1>
     1dc:	80 93 de 06 	sts	0x06DE, r24	; 0x8006de <__data_end>
     1e0:	08 95       	ret

000001e2 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     1e8:	aa ee       	ldi	r26, 0xEA	; 234
     1ea:	b6 e0       	ldi	r27, 0x06	; 6
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <prvInsertBlockIntoFreeList+0xe>
     1ee:	df 01       	movw	r26, r30
     1f0:	ed 91       	ld	r30, X+
     1f2:	fc 91       	ld	r31, X
     1f4:	11 97       	sbiw	r26, 0x01	; 1
     1f6:	ec 17       	cp	r30, r28
     1f8:	fd 07       	cpc	r31, r29
     1fa:	c8 f3       	brcs	.-14     	; 0x1ee <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     1fc:	12 96       	adiw	r26, 0x02	; 2
     1fe:	8d 91       	ld	r24, X+
     200:	9c 91       	ld	r25, X
     202:	13 97       	sbiw	r26, 0x03	; 3
     204:	9d 01       	movw	r18, r26
     206:	28 0f       	add	r18, r24
     208:	39 1f       	adc	r19, r25
     20a:	c2 17       	cp	r28, r18
     20c:	d3 07       	cpc	r29, r19
     20e:	49 f4       	brne	.+18     	; 0x222 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     210:	2a 81       	ldd	r18, Y+2	; 0x02
     212:	3b 81       	ldd	r19, Y+3	; 0x03
     214:	82 0f       	add	r24, r18
     216:	93 1f       	adc	r25, r19
     218:	13 96       	adiw	r26, 0x03	; 3
     21a:	9c 93       	st	X, r25
     21c:	8e 93       	st	-X, r24
     21e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     220:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     222:	8a 81       	ldd	r24, Y+2	; 0x02
     224:	9b 81       	ldd	r25, Y+3	; 0x03
     226:	9e 01       	movw	r18, r28
     228:	28 0f       	add	r18, r24
     22a:	39 1f       	adc	r19, r25
     22c:	e2 17       	cp	r30, r18
     22e:	f3 07       	cpc	r31, r19
     230:	c1 f4       	brne	.+48     	; 0x262 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     232:	20 91 e8 06 	lds	r18, 0x06E8	; 0x8006e8 <pxEnd>
     236:	30 91 e9 06 	lds	r19, 0x06E9	; 0x8006e9 <pxEnd+0x1>
     23a:	e2 17       	cp	r30, r18
     23c:	f3 07       	cpc	r31, r19
     23e:	71 f0       	breq	.+28     	; 0x25c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     240:	22 81       	ldd	r18, Z+2	; 0x02
     242:	33 81       	ldd	r19, Z+3	; 0x03
     244:	82 0f       	add	r24, r18
     246:	93 1f       	adc	r25, r19
     248:	9b 83       	std	Y+3, r25	; 0x03
     24a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     24c:	ed 91       	ld	r30, X+
     24e:	fc 91       	ld	r31, X
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	99 83       	std	Y+1, r25	; 0x01
     258:	88 83       	st	Y, r24
     25a:	05 c0       	rjmp	.+10     	; 0x266 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     25c:	39 83       	std	Y+1, r19	; 0x01
     25e:	28 83       	st	Y, r18
     260:	02 c0       	rjmp	.+4      	; 0x266 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     262:	f9 83       	std	Y+1, r31	; 0x01
     264:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     266:	ca 17       	cp	r28, r26
     268:	db 07       	cpc	r29, r27
     26a:	11 f0       	breq	.+4      	; 0x270 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     26c:	cd 93       	st	X+, r28
     26e:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     284:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     288:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <pxEnd>
     28c:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <pxEnd+0x1>
     290:	89 2b       	or	r24, r25
     292:	09 f4       	brne	.+2      	; 0x296 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     294:	7d df       	rcall	.-262    	; 0x190 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     296:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <__data_end>
     29a:	90 91 df 06 	lds	r25, 0x06DF	; 0x8006df <__data_end+0x1>
     29e:	80 23       	and	r24, r16
     2a0:	91 23       	and	r25, r17
     2a2:	89 2b       	or	r24, r25
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <pvPortMalloc+0x32>
     2a6:	76 c0       	rjmp	.+236    	; 0x394 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2a8:	01 15       	cp	r16, r1
     2aa:	11 05       	cpc	r17, r1
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     2ae:	c8 01       	movw	r24, r16
     2b0:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2b2:	08 17       	cp	r16, r24
     2b4:	19 07       	cpc	r17, r25
     2b6:	18 f0       	brcs	.+6      	; 0x2be <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     2b8:	00 e0       	ldi	r16, 0x00	; 0
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     2be:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     2c0:	01 15       	cp	r16, r1
     2c2:	11 05       	cpc	r17, r1
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <pvPortMalloc+0x52>
     2c6:	69 c0       	rjmp	.+210    	; 0x39a <pvPortMalloc+0x124>
     2c8:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <xFreeBytesRemaining>
     2cc:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <xFreeBytesRemaining+0x1>
     2d0:	80 17       	cp	r24, r16
     2d2:	91 07       	cpc	r25, r17
     2d4:	08 f4       	brcc	.+2      	; 0x2d8 <pvPortMalloc+0x62>
     2d6:	64 c0       	rjmp	.+200    	; 0x3a0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     2d8:	c0 91 ea 06 	lds	r28, 0x06EA	; 0x8006ea <xStart>
     2dc:	d0 91 eb 06 	lds	r29, 0x06EB	; 0x8006eb <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     2e0:	ea ee       	ldi	r30, 0xEA	; 234
     2e2:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     2e6:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     2e8:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	9b 81       	ldd	r25, Y+3	; 0x03
     2ee:	80 17       	cp	r24, r16
     2f0:	91 07       	cpc	r25, r17
     2f2:	20 f4       	brcc	.+8      	; 0x2fc <pvPortMalloc+0x86>
     2f4:	88 81       	ld	r24, Y
     2f6:	99 81       	ldd	r25, Y+1	; 0x01
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	a9 f7       	brne	.-22     	; 0x2e6 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     2fc:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <pxEnd>
     300:	90 91 e9 06 	lds	r25, 0x06E9	; 0x8006e9 <pxEnd+0x1>
     304:	c8 17       	cp	r28, r24
     306:	d9 07       	cpc	r29, r25
     308:	09 f4       	brne	.+2      	; 0x30c <pvPortMalloc+0x96>
     30a:	4d c0       	rjmp	.+154    	; 0x3a6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     30c:	e0 80       	ld	r14, Z
     30e:	f1 80       	ldd	r15, Z+1	; 0x01
     310:	84 e0       	ldi	r24, 0x04	; 4
     312:	e8 0e       	add	r14, r24
     314:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     316:	88 81       	ld	r24, Y
     318:	99 81       	ldd	r25, Y+1	; 0x01
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     31e:	2a 81       	ldd	r18, Y+2	; 0x02
     320:	3b 81       	ldd	r19, Y+3	; 0x03
     322:	20 1b       	sub	r18, r16
     324:	31 0b       	sbc	r19, r17
     326:	29 30       	cpi	r18, 0x09	; 9
     328:	31 05       	cpc	r19, r1
     32a:	48 f0       	brcs	.+18     	; 0x33e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     32c:	ce 01       	movw	r24, r28
     32e:	80 0f       	add	r24, r16
     330:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     332:	fc 01       	movw	r30, r24
     334:	33 83       	std	Z+3, r19	; 0x03
     336:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     338:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     33a:	0a 83       	std	Y+2, r16	; 0x02
     33c:	52 df       	rcall	.-348    	; 0x1e2 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     33e:	2a 81       	ldd	r18, Y+2	; 0x02
     340:	3b 81       	ldd	r19, Y+3	; 0x03
     342:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <xFreeBytesRemaining>
     346:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <xFreeBytesRemaining+0x1>
     34a:	82 1b       	sub	r24, r18
     34c:	93 0b       	sbc	r25, r19
     34e:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <xFreeBytesRemaining+0x1>
     352:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     356:	40 91 e4 06 	lds	r20, 0x06E4	; 0x8006e4 <xMinimumEverFreeBytesRemaining>
     35a:	50 91 e5 06 	lds	r21, 0x06E5	; 0x8006e5 <xMinimumEverFreeBytesRemaining+0x1>
     35e:	84 17       	cp	r24, r20
     360:	95 07       	cpc	r25, r21
     362:	20 f4       	brcc	.+8      	; 0x36c <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     364:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <xMinimumEverFreeBytesRemaining+0x1>
     368:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     36c:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <__data_end>
     370:	90 91 df 06 	lds	r25, 0x06DF	; 0x8006df <__data_end+0x1>
     374:	28 2b       	or	r18, r24
     376:	39 2b       	or	r19, r25
     378:	3b 83       	std	Y+3, r19	; 0x03
     37a:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     37c:	19 82       	std	Y+1, r1	; 0x01
     37e:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     380:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <xNumberOfSuccessfulAllocations>
     384:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <xNumberOfSuccessfulAllocations+0x1>
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <xNumberOfSuccessfulAllocations+0x1>
     38e:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <xNumberOfSuccessfulAllocations>
     392:	0b c0       	rjmp	.+22     	; 0x3aa <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     394:	e1 2c       	mov	r14, r1
     396:	f1 2c       	mov	r15, r1
     398:	08 c0       	rjmp	.+16     	; 0x3aa <pvPortMalloc+0x134>
     39a:	e1 2c       	mov	r14, r1
     39c:	f1 2c       	mov	r15, r1
     39e:	05 c0       	rjmp	.+10     	; 0x3aa <pvPortMalloc+0x134>
     3a0:	e1 2c       	mov	r14, r1
     3a2:	f1 2c       	mov	r15, r1
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <pvPortMalloc+0x134>
     3a6:	e1 2c       	mov	r14, r1
     3a8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3aa:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     3ae:	e1 14       	cp	r14, r1
     3b0:	f1 04       	cpc	r15, r1
     3b2:	11 f4       	brne	.+4      	; 0x3b8 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     3b4:	0e 94 42 17 	call	0x2e84	; 0x2e84 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     3b8:	c7 01       	movw	r24, r14
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	08 95       	ret

000003c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     3d0:	00 97       	sbiw	r24, 0x00	; 0
     3d2:	91 f1       	breq	.+100    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     3d4:	ec 01       	movw	r28, r24
     3d6:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     3d8:	4a 81       	ldd	r20, Y+2	; 0x02
     3da:	5b 81       	ldd	r21, Y+3	; 0x03
     3dc:	20 91 de 06 	lds	r18, 0x06DE	; 0x8006de <__data_end>
     3e0:	30 91 df 06 	lds	r19, 0x06DF	; 0x8006df <__data_end+0x1>
     3e4:	ba 01       	movw	r22, r20
     3e6:	62 23       	and	r22, r18
     3e8:	73 23       	and	r23, r19
     3ea:	67 2b       	or	r22, r23
     3ec:	29 f1       	breq	.+74     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     3ee:	68 81       	ld	r22, Y
     3f0:	79 81       	ldd	r23, Y+1	; 0x01
     3f2:	67 2b       	or	r22, r23
     3f4:	09 f5       	brne	.+66     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     3f6:	20 95       	com	r18
     3f8:	30 95       	com	r19
     3fa:	24 23       	and	r18, r20
     3fc:	35 23       	and	r19, r21
     3fe:	3b 83       	std	Y+3, r19	; 0x03
     400:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     402:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	9b 81       	ldd	r25, Y+3	; 0x03
     40a:	20 91 e6 06 	lds	r18, 0x06E6	; 0x8006e6 <xFreeBytesRemaining>
     40e:	30 91 e7 06 	lds	r19, 0x06E7	; 0x8006e7 <xFreeBytesRemaining+0x1>
     412:	82 0f       	add	r24, r18
     414:	93 1f       	adc	r25, r19
     416:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <xFreeBytesRemaining+0x1>
     41a:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     41e:	ce 01       	movw	r24, r28
     420:	e0 de       	rcall	.-576    	; 0x1e2 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     422:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <xNumberOfSuccessfulFrees>
     426:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <xNumberOfSuccessfulFrees+0x1>
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	90 93 e1 06 	sts	0x06E1, r25	; 0x8006e1 <xNumberOfSuccessfulFrees+0x1>
     430:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     434:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	08 95       	ret

00000442 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     442:	fc 01       	movw	r30, r24
     444:	03 96       	adiw	r24, 0x03	; 3
     446:	92 83       	std	Z+2, r25	; 0x02
     448:	81 83       	std	Z+1, r24	; 0x01
     44a:	4f ef       	ldi	r20, 0xFF	; 255
     44c:	5f ef       	ldi	r21, 0xFF	; 255
     44e:	ba 01       	movw	r22, r20
     450:	43 83       	std	Z+3, r20	; 0x03
     452:	54 83       	std	Z+4, r21	; 0x04
     454:	65 83       	std	Z+5, r22	; 0x05
     456:	76 83       	std	Z+6, r23	; 0x06
     458:	90 87       	std	Z+8, r25	; 0x08
     45a:	87 83       	std	Z+7, r24	; 0x07
     45c:	92 87       	std	Z+10, r25	; 0x0a
     45e:	81 87       	std	Z+9, r24	; 0x09
     460:	10 82       	st	Z, r1
     462:	08 95       	ret

00000464 <vListInitialiseItem>:
     464:	fc 01       	movw	r30, r24
     466:	13 86       	std	Z+11, r1	; 0x0b
     468:	12 86       	std	Z+10, r1	; 0x0a
     46a:	08 95       	ret

0000046c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     476:	08 81       	ld	r16, Y
     478:	19 81       	ldd	r17, Y+1	; 0x01
     47a:	2a 81       	ldd	r18, Y+2	; 0x02
     47c:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     47e:	0f 3f       	cpi	r16, 0xFF	; 255
     480:	4f ef       	ldi	r20, 0xFF	; 255
     482:	14 07       	cpc	r17, r20
     484:	24 07       	cpc	r18, r20
     486:	34 07       	cpc	r19, r20
     488:	21 f4       	brne	.+8      	; 0x492 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     48a:	fc 01       	movw	r30, r24
     48c:	a1 85       	ldd	r26, Z+9	; 0x09
     48e:	b2 85       	ldd	r27, Z+10	; 0x0a
     490:	11 c0       	rjmp	.+34     	; 0x4b4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     492:	dc 01       	movw	r26, r24
     494:	13 96       	adiw	r26, 0x03	; 3
     496:	01 c0       	rjmp	.+2      	; 0x49a <vListInsert+0x2e>
     498:	df 01       	movw	r26, r30
     49a:	14 96       	adiw	r26, 0x04	; 4
     49c:	ed 91       	ld	r30, X+
     49e:	fc 91       	ld	r31, X
     4a0:	15 97       	sbiw	r26, 0x05	; 5
     4a2:	40 81       	ld	r20, Z
     4a4:	51 81       	ldd	r21, Z+1	; 0x01
     4a6:	62 81       	ldd	r22, Z+2	; 0x02
     4a8:	73 81       	ldd	r23, Z+3	; 0x03
     4aa:	04 17       	cp	r16, r20
     4ac:	15 07       	cpc	r17, r21
     4ae:	26 07       	cpc	r18, r22
     4b0:	37 07       	cpc	r19, r23
     4b2:	90 f7       	brcc	.-28     	; 0x498 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     4b4:	14 96       	adiw	r26, 0x04	; 4
     4b6:	ed 91       	ld	r30, X+
     4b8:	fc 91       	ld	r31, X
     4ba:	15 97       	sbiw	r26, 0x05	; 5
     4bc:	fd 83       	std	Y+5, r31	; 0x05
     4be:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     4c0:	d7 83       	std	Z+7, r29	; 0x07
     4c2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     4c4:	bf 83       	std	Y+7, r27	; 0x07
     4c6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     4c8:	15 96       	adiw	r26, 0x05	; 5
     4ca:	dc 93       	st	X, r29
     4cc:	ce 93       	st	-X, r28
     4ce:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     4d0:	9b 87       	std	Y+11, r25	; 0x0b
     4d2:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 81       	ld	r18, Z
     4d8:	2f 5f       	subi	r18, 0xFF	; 255
     4da:	20 83       	st	Z, r18
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	08 95       	ret

000004e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     4ec:	a2 85       	ldd	r26, Z+10	; 0x0a
     4ee:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4f0:	c4 81       	ldd	r28, Z+4	; 0x04
     4f2:	d5 81       	ldd	r29, Z+5	; 0x05
     4f4:	86 81       	ldd	r24, Z+6	; 0x06
     4f6:	97 81       	ldd	r25, Z+7	; 0x07
     4f8:	9f 83       	std	Y+7, r25	; 0x07
     4fa:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4fc:	c6 81       	ldd	r28, Z+6	; 0x06
     4fe:	d7 81       	ldd	r29, Z+7	; 0x07
     500:	84 81       	ldd	r24, Z+4	; 0x04
     502:	95 81       	ldd	r25, Z+5	; 0x05
     504:	9d 83       	std	Y+5, r25	; 0x05
     506:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     508:	11 96       	adiw	r26, 0x01	; 1
     50a:	8d 91       	ld	r24, X+
     50c:	9c 91       	ld	r25, X
     50e:	12 97       	sbiw	r26, 0x02	; 2
     510:	e8 17       	cp	r30, r24
     512:	f9 07       	cpc	r31, r25
     514:	31 f4       	brne	.+12     	; 0x522 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     516:	86 81       	ldd	r24, Z+6	; 0x06
     518:	97 81       	ldd	r25, Z+7	; 0x07
     51a:	12 96       	adiw	r26, 0x02	; 2
     51c:	9c 93       	st	X, r25
     51e:	8e 93       	st	-X, r24
     520:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     522:	13 86       	std	Z+11, r1	; 0x0b
     524:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     526:	8c 91       	ld	r24, X
     528:	81 50       	subi	r24, 0x01	; 1
     52a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     52c:	8c 91       	ld	r24, X
}
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     534:	a8 95       	wdr
     536:	90 ec       	ldi	r25, 0xC0	; 192
     538:	88 e1       	ldi	r24, 0x18	; 24
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	a8 95       	wdr
     540:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     544:	0f be       	out	0x3f, r0	; 63
     546:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     54a:	08 95       	ret

0000054c <pxPortInitialiseStack>:
     54c:	fc 01       	movw	r30, r24
     54e:	60 83       	st	Z, r22
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	70 83       	st	Z, r23
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	10 82       	st	Z, r1
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	10 82       	st	Z, r1
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	20 e8       	ldi	r18, 0x80	; 128
     560:	20 83       	st	Z, r18
     562:	31 97       	sbiw	r30, 0x01	; 1
     564:	10 82       	st	Z, r1
     566:	31 97       	sbiw	r30, 0x01	; 1
     568:	10 82       	st	Z, r1
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	10 82       	st	Z, r1
     56e:	77 97       	sbiw	r30, 0x17	; 23
     570:	40 83       	st	Z, r20
     572:	31 97       	sbiw	r30, 0x01	; 1
     574:	50 83       	st	Z, r21
     576:	86 97       	sbiw	r24, 0x26	; 38
     578:	08 95       	ret

0000057a <xPortStartScheduler>:
     57a:	dc df       	rcall	.-72     	; 0x534 <prvSetupTimerInterrupt>
     57c:	a0 91 71 11 	lds	r26, 0x1171	; 0x801171 <pxCurrentTCB>
     580:	b0 91 72 11 	lds	r27, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
     584:	cd 91       	ld	r28, X+
     586:	cd bf       	out	0x3d, r28	; 61
     588:	dd 91       	ld	r29, X+
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	ff 91       	pop	r31
     58e:	ef 91       	pop	r30
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	bf 91       	pop	r27
     596:	af 91       	pop	r26
     598:	9f 91       	pop	r25
     59a:	8f 91       	pop	r24
     59c:	7f 91       	pop	r23
     59e:	6f 91       	pop	r22
     5a0:	5f 91       	pop	r21
     5a2:	4f 91       	pop	r20
     5a4:	3f 91       	pop	r19
     5a6:	2f 91       	pop	r18
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	cf 90       	pop	r12
     5b4:	bf 90       	pop	r11
     5b6:	af 90       	pop	r10
     5b8:	9f 90       	pop	r9
     5ba:	8f 90       	pop	r8
     5bc:	7f 90       	pop	r7
     5be:	6f 90       	pop	r6
     5c0:	5f 90       	pop	r5
     5c2:	4f 90       	pop	r4
     5c4:	3f 90       	pop	r3
     5c6:	2f 90       	pop	r2
     5c8:	1f 90       	pop	r1
     5ca:	0f 90       	pop	r0
     5cc:	0c be       	out	0x3c, r0	; 60
     5ce:	0f 90       	pop	r0
     5d0:	0b be       	out	0x3b, r0	; 59
     5d2:	0f 90       	pop	r0
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	0f 90       	pop	r0
     5d8:	08 95       	ret
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	08 95       	ret

000005de <vPortYield>:
     5de:	0f 92       	push	r0
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	0f 92       	push	r0
     5e6:	0b b6       	in	r0, 0x3b	; 59
     5e8:	0f 92       	push	r0
     5ea:	0c b6       	in	r0, 0x3c	; 60
     5ec:	0f 92       	push	r0
     5ee:	1f 92       	push	r1
     5f0:	11 24       	eor	r1, r1
     5f2:	2f 92       	push	r2
     5f4:	3f 92       	push	r3
     5f6:	4f 92       	push	r4
     5f8:	5f 92       	push	r5
     5fa:	6f 92       	push	r6
     5fc:	7f 92       	push	r7
     5fe:	8f 92       	push	r8
     600:	9f 92       	push	r9
     602:	af 92       	push	r10
     604:	bf 92       	push	r11
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	2f 93       	push	r18
     614:	3f 93       	push	r19
     616:	4f 93       	push	r20
     618:	5f 93       	push	r21
     61a:	6f 93       	push	r22
     61c:	7f 93       	push	r23
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
     62e:	a0 91 71 11 	lds	r26, 0x1171	; 0x801171 <pxCurrentTCB>
     632:	b0 91 72 11 	lds	r27, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
     636:	0d b6       	in	r0, 0x3d	; 61
     638:	0d 92       	st	X+, r0
     63a:	0e b6       	in	r0, 0x3e	; 62
     63c:	0d 92       	st	X+, r0
     63e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vTaskSwitchContext>
     642:	a0 91 71 11 	lds	r26, 0x1171	; 0x801171 <pxCurrentTCB>
     646:	b0 91 72 11 	lds	r27, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
     64a:	cd 91       	ld	r28, X+
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	dd 91       	ld	r29, X+
     650:	de bf       	out	0x3e, r29	; 62
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	7f 91       	pop	r23
     664:	6f 91       	pop	r22
     666:	5f 91       	pop	r21
     668:	4f 91       	pop	r20
     66a:	3f 91       	pop	r19
     66c:	2f 91       	pop	r18
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	bf 90       	pop	r11
     67c:	af 90       	pop	r10
     67e:	9f 90       	pop	r9
     680:	8f 90       	pop	r8
     682:	7f 90       	pop	r7
     684:	6f 90       	pop	r6
     686:	5f 90       	pop	r5
     688:	4f 90       	pop	r4
     68a:	3f 90       	pop	r3
     68c:	2f 90       	pop	r2
     68e:	1f 90       	pop	r1
     690:	0f 90       	pop	r0
     692:	0c be       	out	0x3c, r0	; 60
     694:	0f 90       	pop	r0
     696:	0b be       	out	0x3b, r0	; 59
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	08 95       	ret

000006a0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     6a0:	0f 92       	push	r0
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	0f 92       	push	r0
     6a8:	0b b6       	in	r0, 0x3b	; 59
     6aa:	0f 92       	push	r0
     6ac:	0c b6       	in	r0, 0x3c	; 60
     6ae:	0f 92       	push	r0
     6b0:	1f 92       	push	r1
     6b2:	11 24       	eor	r1, r1
     6b4:	2f 92       	push	r2
     6b6:	3f 92       	push	r3
     6b8:	4f 92       	push	r4
     6ba:	5f 92       	push	r5
     6bc:	6f 92       	push	r6
     6be:	7f 92       	push	r7
     6c0:	8f 92       	push	r8
     6c2:	9f 92       	push	r9
     6c4:	af 92       	push	r10
     6c6:	bf 92       	push	r11
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	2f 93       	push	r18
     6d6:	3f 93       	push	r19
     6d8:	4f 93       	push	r20
     6da:	5f 93       	push	r21
     6dc:	6f 93       	push	r22
     6de:	7f 93       	push	r23
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	af 93       	push	r26
     6e6:	bf 93       	push	r27
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ef 93       	push	r30
     6ee:	ff 93       	push	r31
     6f0:	a0 91 71 11 	lds	r26, 0x1171	; 0x801171 <pxCurrentTCB>
     6f4:	b0 91 72 11 	lds	r27, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
     6f8:	0d b6       	in	r0, 0x3d	; 61
     6fa:	0d 92       	st	X+, r0
     6fc:	0e b6       	in	r0, 0x3e	; 62
     6fe:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     700:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     702:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <xTaskIncrementTick>
     706:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     708:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     70c:	a0 91 71 11 	lds	r26, 0x1171	; 0x801171 <pxCurrentTCB>
     710:	b0 91 72 11 	lds	r27, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
     714:	cd 91       	ld	r28, X+
     716:	cd bf       	out	0x3d, r28	; 61
     718:	dd 91       	ld	r29, X+
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	bf 91       	pop	r27
     726:	af 91       	pop	r26
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	7f 91       	pop	r23
     72e:	6f 91       	pop	r22
     730:	5f 91       	pop	r21
     732:	4f 91       	pop	r20
     734:	3f 91       	pop	r19
     736:	2f 91       	pop	r18
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	bf 90       	pop	r11
     746:	af 90       	pop	r10
     748:	9f 90       	pop	r9
     74a:	8f 90       	pop	r8
     74c:	7f 90       	pop	r7
     74e:	6f 90       	pop	r6
     750:	5f 90       	pop	r5
     752:	4f 90       	pop	r4
     754:	3f 90       	pop	r3
     756:	2f 90       	pop	r2
     758:	1f 90       	pop	r1
     75a:	0f 90       	pop	r0
     75c:	0c be       	out	0x3c, r0	; 60
     75e:	0f 90       	pop	r0
     760:	0b be       	out	0x3b, r0	; 59
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
     766:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     768:	08 95       	ret

0000076a <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     76a:	9a df       	rcall	.-204    	; 0x6a0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     76c:	18 95       	reti

0000076e <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	0f 92       	push	r0
     774:	fc 01       	movw	r30, r24
     776:	86 8d       	ldd	r24, Z+30	; 0x1e
     778:	81 11       	cpse	r24, r1
     77a:	02 c0       	rjmp	.+4      	; 0x780 <prvIsQueueEmpty+0x12>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	01 c0       	rjmp	.+2      	; 0x782 <prvIsQueueEmpty+0x14>
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	08 95       	ret

00000788 <prvIsQueueFull>:
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	0f 92       	push	r0
     78e:	fc 01       	movw	r30, r24
     790:	26 8d       	ldd	r18, Z+30	; 0x1e
     792:	87 8d       	ldd	r24, Z+31	; 0x1f
     794:	28 13       	cpse	r18, r24
     796:	02 c0       	rjmp	.+4      	; 0x79c <prvIsQueueFull+0x14>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	01 c0       	rjmp	.+2      	; 0x79e <prvIsQueueFull+0x16>
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	0f 90       	pop	r0
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	08 95       	ret

000007a4 <prvCopyDataToQueue>:
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
     7ae:	04 2f       	mov	r16, r20
     7b0:	1e 8d       	ldd	r17, Y+30	; 0x1e
     7b2:	48 a1       	ldd	r20, Y+32	; 0x20
     7b4:	41 11       	cpse	r20, r1
     7b6:	0c c0       	rjmp	.+24     	; 0x7d0 <prvCopyDataToQueue+0x2c>
     7b8:	88 81       	ld	r24, Y
     7ba:	99 81       	ldd	r25, Y+1	; 0x01
     7bc:	89 2b       	or	r24, r25
     7be:	09 f0       	breq	.+2      	; 0x7c2 <prvCopyDataToQueue+0x1e>
     7c0:	42 c0       	rjmp	.+132    	; 0x846 <prvCopyDataToQueue+0xa2>
     7c2:	8c 81       	ldd	r24, Y+4	; 0x04
     7c4:	9d 81       	ldd	r25, Y+5	; 0x05
     7c6:	0e 94 01 11 	call	0x2202	; 0x2202 <xTaskPriorityDisinherit>
     7ca:	1d 82       	std	Y+5, r1	; 0x05
     7cc:	1c 82       	std	Y+4, r1	; 0x04
     7ce:	42 c0       	rjmp	.+132    	; 0x854 <prvCopyDataToQueue+0xb0>
     7d0:	01 11       	cpse	r16, r1
     7d2:	17 c0       	rjmp	.+46     	; 0x802 <prvCopyDataToQueue+0x5e>
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	9b 81       	ldd	r25, Y+3	; 0x03
     7da:	0e 94 6f 27 	call	0x4ede	; 0x4ede <memcpy>
     7de:	28 a1       	ldd	r18, Y+32	; 0x20
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	9b 81       	ldd	r25, Y+3	; 0x03
     7e4:	82 0f       	add	r24, r18
     7e6:	91 1d       	adc	r25, r1
     7e8:	9b 83       	std	Y+3, r25	; 0x03
     7ea:	8a 83       	std	Y+2, r24	; 0x02
     7ec:	2c 81       	ldd	r18, Y+4	; 0x04
     7ee:	3d 81       	ldd	r19, Y+5	; 0x05
     7f0:	82 17       	cp	r24, r18
     7f2:	93 07       	cpc	r25, r19
     7f4:	50 f1       	brcs	.+84     	; 0x84a <prvCopyDataToQueue+0xa6>
     7f6:	88 81       	ld	r24, Y
     7f8:	99 81       	ldd	r25, Y+1	; 0x01
     7fa:	9b 83       	std	Y+3, r25	; 0x03
     7fc:	8a 83       	std	Y+2, r24	; 0x02
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	29 c0       	rjmp	.+82     	; 0x854 <prvCopyDataToQueue+0xb0>
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	8e 81       	ldd	r24, Y+6	; 0x06
     806:	9f 81       	ldd	r25, Y+7	; 0x07
     808:	0e 94 6f 27 	call	0x4ede	; 0x4ede <memcpy>
     80c:	88 a1       	ldd	r24, Y+32	; 0x20
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	91 95       	neg	r25
     812:	81 95       	neg	r24
     814:	91 09       	sbc	r25, r1
     816:	2e 81       	ldd	r18, Y+6	; 0x06
     818:	3f 81       	ldd	r19, Y+7	; 0x07
     81a:	28 0f       	add	r18, r24
     81c:	39 1f       	adc	r19, r25
     81e:	3f 83       	std	Y+7, r19	; 0x07
     820:	2e 83       	std	Y+6, r18	; 0x06
     822:	48 81       	ld	r20, Y
     824:	59 81       	ldd	r21, Y+1	; 0x01
     826:	24 17       	cp	r18, r20
     828:	35 07       	cpc	r19, r21
     82a:	30 f4       	brcc	.+12     	; 0x838 <prvCopyDataToQueue+0x94>
     82c:	2c 81       	ldd	r18, Y+4	; 0x04
     82e:	3d 81       	ldd	r19, Y+5	; 0x05
     830:	82 0f       	add	r24, r18
     832:	93 1f       	adc	r25, r19
     834:	9f 83       	std	Y+7, r25	; 0x07
     836:	8e 83       	std	Y+6, r24	; 0x06
     838:	02 30       	cpi	r16, 0x02	; 2
     83a:	49 f4       	brne	.+18     	; 0x84e <prvCopyDataToQueue+0xaa>
     83c:	11 23       	and	r17, r17
     83e:	49 f0       	breq	.+18     	; 0x852 <prvCopyDataToQueue+0xae>
     840:	11 50       	subi	r17, 0x01	; 1
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	07 c0       	rjmp	.+14     	; 0x854 <prvCopyDataToQueue+0xb0>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	05 c0       	rjmp	.+10     	; 0x854 <prvCopyDataToQueue+0xb0>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	03 c0       	rjmp	.+6      	; 0x854 <prvCopyDataToQueue+0xb0>
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	01 c0       	rjmp	.+2      	; 0x854 <prvCopyDataToQueue+0xb0>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	1f 5f       	subi	r17, 0xFF	; 255
     856:	1e 8f       	std	Y+30, r17	; 0x1e
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	08 95       	ret

00000862 <prvCopyDataFromQueue>:
     862:	fc 01       	movw	r30, r24
     864:	40 a1       	ldd	r20, Z+32	; 0x20
     866:	44 23       	and	r20, r20
     868:	a9 f0       	breq	.+42     	; 0x894 <prvCopyDataFromQueue+0x32>
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	26 81       	ldd	r18, Z+6	; 0x06
     86e:	37 81       	ldd	r19, Z+7	; 0x07
     870:	24 0f       	add	r18, r20
     872:	35 1f       	adc	r19, r21
     874:	37 83       	std	Z+7, r19	; 0x07
     876:	26 83       	std	Z+6, r18	; 0x06
     878:	84 81       	ldd	r24, Z+4	; 0x04
     87a:	95 81       	ldd	r25, Z+5	; 0x05
     87c:	28 17       	cp	r18, r24
     87e:	39 07       	cpc	r19, r25
     880:	20 f0       	brcs	.+8      	; 0x88a <prvCopyDataFromQueue+0x28>
     882:	80 81       	ld	r24, Z
     884:	91 81       	ldd	r25, Z+1	; 0x01
     886:	97 83       	std	Z+7, r25	; 0x07
     888:	86 83       	std	Z+6, r24	; 0x06
     88a:	cb 01       	movw	r24, r22
     88c:	66 81       	ldd	r22, Z+6	; 0x06
     88e:	77 81       	ldd	r23, Z+7	; 0x07
     890:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <memcpy>
     894:	08 95       	ret

00000896 <prvUnlockQueue>:
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	ec 01       	movw	r28, r24
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	0f 92       	push	r0
     8a4:	1a a1       	ldd	r17, Y+34	; 0x22
     8a6:	0b c0       	rjmp	.+22     	; 0x8be <prvUnlockQueue+0x28>
     8a8:	8b 89       	ldd	r24, Y+19	; 0x13
     8aa:	88 23       	and	r24, r24
     8ac:	51 f0       	breq	.+20     	; 0x8c2 <prvUnlockQueue+0x2c>
     8ae:	ce 01       	movw	r24, r28
     8b0:	43 96       	adiw	r24, 0x13	; 19
     8b2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <xTaskRemoveFromEventList>
     8b6:	81 11       	cpse	r24, r1
     8b8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <vTaskMissedYield>
     8bc:	11 50       	subi	r17, 0x01	; 1
     8be:	11 16       	cp	r1, r17
     8c0:	9c f3       	brlt	.-26     	; 0x8a8 <prvUnlockQueue+0x12>
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	8a a3       	std	Y+34, r24	; 0x22
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	0f 92       	push	r0
     8d0:	19 a1       	ldd	r17, Y+33	; 0x21
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <prvUnlockQueue+0x54>
     8d4:	88 85       	ldd	r24, Y+8	; 0x08
     8d6:	88 23       	and	r24, r24
     8d8:	51 f0       	breq	.+20     	; 0x8ee <prvUnlockQueue+0x58>
     8da:	ce 01       	movw	r24, r28
     8dc:	08 96       	adiw	r24, 0x08	; 8
     8de:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <xTaskRemoveFromEventList>
     8e2:	81 11       	cpse	r24, r1
     8e4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <vTaskMissedYield>
     8e8:	11 50       	subi	r17, 0x01	; 1
     8ea:	11 16       	cp	r1, r17
     8ec:	9c f3       	brlt	.-26     	; 0x8d4 <prvUnlockQueue+0x3e>
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	89 a3       	std	Y+33, r24	; 0x21
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	08 95       	ret

000008fe <xQueueGenericReset>:
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	ec 01       	movw	r28, r24
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	0f 92       	push	r0
     90a:	e8 81       	ld	r30, Y
     90c:	f9 81       	ldd	r31, Y+1	; 0x01
     90e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     910:	28 a1       	ldd	r18, Y+32	; 0x20
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	82 9f       	mul	r24, r18
     918:	a0 01       	movw	r20, r0
     91a:	83 9f       	mul	r24, r19
     91c:	50 0d       	add	r21, r0
     91e:	92 9f       	mul	r25, r18
     920:	50 0d       	add	r21, r0
     922:	11 24       	eor	r1, r1
     924:	4e 0f       	add	r20, r30
     926:	5f 1f       	adc	r21, r31
     928:	5d 83       	std	Y+5, r21	; 0x05
     92a:	4c 83       	std	Y+4, r20	; 0x04
     92c:	1e 8e       	std	Y+30, r1	; 0x1e
     92e:	fb 83       	std	Y+3, r31	; 0x03
     930:	ea 83       	std	Y+2, r30	; 0x02
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	28 9f       	mul	r18, r24
     936:	a0 01       	movw	r20, r0
     938:	29 9f       	mul	r18, r25
     93a:	50 0d       	add	r21, r0
     93c:	38 9f       	mul	r19, r24
     93e:	50 0d       	add	r21, r0
     940:	11 24       	eor	r1, r1
     942:	cf 01       	movw	r24, r30
     944:	84 0f       	add	r24, r20
     946:	95 1f       	adc	r25, r21
     948:	9f 83       	std	Y+7, r25	; 0x07
     94a:	8e 83       	std	Y+6, r24	; 0x06
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	89 a3       	std	Y+33, r24	; 0x21
     950:	8a a3       	std	Y+34, r24	; 0x22
     952:	61 11       	cpse	r22, r1
     954:	0b c0       	rjmp	.+22     	; 0x96c <xQueueGenericReset+0x6e>
     956:	88 85       	ldd	r24, Y+8	; 0x08
     958:	88 23       	and	r24, r24
     95a:	71 f0       	breq	.+28     	; 0x978 <xQueueGenericReset+0x7a>
     95c:	ce 01       	movw	r24, r28
     95e:	08 96       	adiw	r24, 0x08	; 8
     960:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <xTaskRemoveFromEventList>
     964:	88 23       	and	r24, r24
     966:	41 f0       	breq	.+16     	; 0x978 <xQueueGenericReset+0x7a>
     968:	3a de       	rcall	.-908    	; 0x5de <vPortYield>
     96a:	06 c0       	rjmp	.+12     	; 0x978 <xQueueGenericReset+0x7a>
     96c:	ce 01       	movw	r24, r28
     96e:	08 96       	adiw	r24, 0x08	; 8
     970:	68 dd       	rcall	.-1328   	; 0x442 <vListInitialise>
     972:	ce 01       	movw	r24, r28
     974:	43 96       	adiw	r24, 0x13	; 19
     976:	65 dd       	rcall	.-1334   	; 0x442 <vListInitialise>
     978:	0f 90       	pop	r0
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <prvInitialiseNewQueue>:
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	f8 01       	movw	r30, r16
     98a:	61 11       	cpse	r22, r1
     98c:	03 c0       	rjmp	.+6      	; 0x994 <prvInitialiseNewQueue+0x10>
     98e:	11 83       	std	Z+1, r17	; 0x01
     990:	00 83       	st	Z, r16
     992:	02 c0       	rjmp	.+4      	; 0x998 <prvInitialiseNewQueue+0x14>
     994:	51 83       	std	Z+1, r21	; 0x01
     996:	40 83       	st	Z, r20
     998:	87 8f       	std	Z+31, r24	; 0x1f
     99a:	60 a3       	std	Z+32, r22	; 0x20
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	cf 01       	movw	r24, r30
     9a0:	ae df       	rcall	.-164    	; 0x8fe <xQueueGenericReset>
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	08 95       	ret

000009a8 <xQueueGenericCreate>:
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	f8 2e       	mov	r15, r24
     9b8:	e6 2e       	mov	r14, r22
     9ba:	d4 2e       	mov	r13, r20
     9bc:	86 9f       	mul	r24, r22
     9be:	c0 01       	movw	r24, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	83 96       	adiw	r24, 0x23	; 35
     9c4:	58 dc       	rcall	.-1872   	; 0x276 <pvPortMalloc>
     9c6:	ec 01       	movw	r28, r24
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	41 f0       	breq	.+16     	; 0x9dc <xQueueGenericCreate+0x34>
     9cc:	8c 01       	movw	r16, r24
     9ce:	2d 2d       	mov	r18, r13
     9d0:	ac 01       	movw	r20, r24
     9d2:	4d 5d       	subi	r20, 0xDD	; 221
     9d4:	5f 4f       	sbci	r21, 0xFF	; 255
     9d6:	6e 2d       	mov	r22, r14
     9d8:	8f 2d       	mov	r24, r15
     9da:	d4 df       	rcall	.-88     	; 0x984 <prvInitialiseNewQueue>
     9dc:	ce 01       	movw	r24, r28
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	08 95       	ret

000009ee <xQueueGenericSend>:
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	29 97       	sbiw	r28, 0x09	; 9
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	7c 01       	movw	r14, r24
     a10:	6b 01       	movw	r12, r22
     a12:	2e 83       	std	Y+6, r18	; 0x06
     a14:	3f 83       	std	Y+7, r19	; 0x07
     a16:	48 87       	std	Y+8, r20	; 0x08
     a18:	59 87       	std	Y+9, r21	; 0x09
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	0f 92       	push	r0
     a22:	f7 01       	movw	r30, r14
     a24:	96 8d       	ldd	r25, Z+30	; 0x1e
     a26:	87 8d       	ldd	r24, Z+31	; 0x1f
     a28:	98 17       	cp	r25, r24
     a2a:	10 f0       	brcs	.+4      	; 0xa30 <xQueueGenericSend+0x42>
     a2c:	02 30       	cpi	r16, 0x02	; 2
     a2e:	b1 f4       	brne	.+44     	; 0xa5c <xQueueGenericSend+0x6e>
     a30:	40 2f       	mov	r20, r16
     a32:	b6 01       	movw	r22, r12
     a34:	c7 01       	movw	r24, r14
     a36:	b6 de       	rcall	.-660    	; 0x7a4 <prvCopyDataToQueue>
     a38:	f7 01       	movw	r30, r14
     a3a:	93 89       	ldd	r25, Z+19	; 0x13
     a3c:	99 23       	and	r25, r25
     a3e:	41 f0       	breq	.+16     	; 0xa50 <xQueueGenericSend+0x62>
     a40:	c7 01       	movw	r24, r14
     a42:	43 96       	adiw	r24, 0x13	; 19
     a44:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <xTaskRemoveFromEventList>
     a48:	88 23       	and	r24, r24
     a4a:	21 f0       	breq	.+8      	; 0xa54 <xQueueGenericSend+0x66>
     a4c:	c8 dd       	rcall	.-1136   	; 0x5de <vPortYield>
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <xQueueGenericSend+0x66>
     a50:	81 11       	cpse	r24, r1
     a52:	c5 dd       	rcall	.-1142   	; 0x5de <vPortYield>
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	4c c0       	rjmp	.+152    	; 0xaf4 <xQueueGenericSend+0x106>
     a5c:	8e 81       	ldd	r24, Y+6	; 0x06
     a5e:	9f 81       	ldd	r25, Y+7	; 0x07
     a60:	a8 85       	ldd	r26, Y+8	; 0x08
     a62:	b9 85       	ldd	r27, Y+9	; 0x09
     a64:	89 2b       	or	r24, r25
     a66:	8a 2b       	or	r24, r26
     a68:	8b 2b       	or	r24, r27
     a6a:	21 f4       	brne	.+8      	; 0xa74 <xQueueGenericSend+0x86>
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	40 c0       	rjmp	.+128    	; 0xaf4 <xQueueGenericSend+0x106>
     a74:	11 11       	cpse	r17, r1
     a76:	05 c0       	rjmp	.+10     	; 0xa82 <xQueueGenericSend+0x94>
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <vTaskInternalSetTimeOutState>
     a80:	11 e0       	ldi	r17, 0x01	; 1
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	10 d7       	rcall	.+3616   	; 0x18a8 <vTaskSuspendAll>
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	f7 01       	movw	r30, r14
     a90:	81 a1       	ldd	r24, Z+33	; 0x21
     a92:	8f 3f       	cpi	r24, 0xFF	; 255
     a94:	09 f4       	brne	.+2      	; 0xa98 <xQueueGenericSend+0xaa>
     a96:	11 a2       	std	Z+33, r1	; 0x21
     a98:	f7 01       	movw	r30, r14
     a9a:	82 a1       	ldd	r24, Z+34	; 0x22
     a9c:	8f 3f       	cpi	r24, 0xFF	; 255
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <xQueueGenericSend+0xb4>
     aa0:	12 a2       	std	Z+34, r1	; 0x22
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	be 01       	movw	r22, r28
     aa8:	6a 5f       	subi	r22, 0xFA	; 250
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255
     aac:	ce 01       	movw	r24, r28
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	0e 94 84 10 	call	0x2108	; 0x2108 <xTaskCheckForTimeOut>
     ab4:	81 11       	cpse	r24, r1
     ab6:	19 c0       	rjmp	.+50     	; 0xaea <xQueueGenericSend+0xfc>
     ab8:	c7 01       	movw	r24, r14
     aba:	66 de       	rcall	.-820    	; 0x788 <prvIsQueueFull>
     abc:	88 23       	and	r24, r24
     abe:	81 f0       	breq	.+32     	; 0xae0 <xQueueGenericSend+0xf2>
     ac0:	4e 81       	ldd	r20, Y+6	; 0x06
     ac2:	5f 81       	ldd	r21, Y+7	; 0x07
     ac4:	68 85       	ldd	r22, Y+8	; 0x08
     ac6:	79 85       	ldd	r23, Y+9	; 0x09
     ac8:	c7 01       	movw	r24, r14
     aca:	08 96       	adiw	r24, 0x08	; 8
     acc:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vTaskPlaceOnEventList>
     ad0:	c7 01       	movw	r24, r14
     ad2:	e1 de       	rcall	.-574    	; 0x896 <prvUnlockQueue>
     ad4:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <xTaskResumeAll>
     ad8:	81 11       	cpse	r24, r1
     ada:	a0 cf       	rjmp	.-192    	; 0xa1c <xQueueGenericSend+0x2e>
     adc:	80 dd       	rcall	.-1280   	; 0x5de <vPortYield>
     ade:	9e cf       	rjmp	.-196    	; 0xa1c <xQueueGenericSend+0x2e>
     ae0:	c7 01       	movw	r24, r14
     ae2:	d9 de       	rcall	.-590    	; 0x896 <prvUnlockQueue>
     ae4:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <xTaskResumeAll>
     ae8:	99 cf       	rjmp	.-206    	; 0xa1c <xQueueGenericSend+0x2e>
     aea:	c7 01       	movw	r24, r14
     aec:	d4 de       	rcall	.-600    	; 0x896 <prvUnlockQueue>
     aee:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <xTaskResumeAll>
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	29 96       	adiw	r28, 0x09	; 9
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	08 95       	ret

00000b12 <prvInitialiseMutex>:
     b12:	0f 93       	push	r16
     b14:	00 97       	sbiw	r24, 0x00	; 0
     b16:	69 f0       	breq	.+26     	; 0xb32 <prvInitialiseMutex+0x20>
     b18:	fc 01       	movw	r30, r24
     b1a:	15 82       	std	Z+5, r1	; 0x05
     b1c:	14 82       	std	Z+4, r1	; 0x04
     b1e:	11 82       	std	Z+1, r1	; 0x01
     b20:	10 82       	st	Z, r1
     b22:	16 82       	std	Z+6, r1	; 0x06
     b24:	00 e0       	ldi	r16, 0x00	; 0
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	a9 01       	movw	r20, r18
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	5e df       	rcall	.-324    	; 0x9ee <xQueueGenericSend>
     b32:	0f 91       	pop	r16
     b34:	08 95       	ret

00000b36 <xQueueCreateMutex>:
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	48 2f       	mov	r20, r24
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	33 df       	rcall	.-410    	; 0x9a8 <xQueueGenericCreate>
     b42:	ec 01       	movw	r28, r24
     b44:	e6 df       	rcall	.-52     	; 0xb12 <prvInitialiseMutex>
     b46:	ce 01       	movw	r24, r28
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <xQueueGenericSendFromISR>:
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	8a 01       	movw	r16, r20
     b5c:	fc 01       	movw	r30, r24
     b5e:	56 8d       	ldd	r21, Z+30	; 0x1e
     b60:	37 8d       	ldd	r19, Z+31	; 0x1f
     b62:	53 17       	cp	r21, r19
     b64:	10 f0       	brcs	.+4      	; 0xb6a <xQueueGenericSendFromISR+0x1c>
     b66:	22 30       	cpi	r18, 0x02	; 2
     b68:	f9 f4       	brne	.+62     	; 0xba8 <xQueueGenericSendFromISR+0x5a>
     b6a:	42 2f       	mov	r20, r18
     b6c:	78 01       	movw	r14, r16
     b6e:	ec 01       	movw	r28, r24
     b70:	1a a1       	ldd	r17, Y+34	; 0x22
     b72:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b74:	ce 01       	movw	r24, r28
     b76:	16 de       	rcall	.-980    	; 0x7a4 <prvCopyDataToQueue>
     b78:	1f 3f       	cpi	r17, 0xFF	; 255
     b7a:	81 f4       	brne	.+32     	; 0xb9c <xQueueGenericSendFromISR+0x4e>
     b7c:	8b 89       	ldd	r24, Y+19	; 0x13
     b7e:	88 23       	and	r24, r24
     b80:	a9 f0       	breq	.+42     	; 0xbac <xQueueGenericSendFromISR+0x5e>
     b82:	ce 01       	movw	r24, r28
     b84:	43 96       	adiw	r24, 0x13	; 19
     b86:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <xTaskRemoveFromEventList>
     b8a:	88 23       	and	r24, r24
     b8c:	89 f0       	breq	.+34     	; 0xbb0 <xQueueGenericSendFromISR+0x62>
     b8e:	e1 14       	cp	r14, r1
     b90:	f1 04       	cpc	r15, r1
     b92:	81 f0       	breq	.+32     	; 0xbb4 <xQueueGenericSendFromISR+0x66>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	f7 01       	movw	r30, r14
     b98:	80 83       	st	Z, r24
     b9a:	0d c0       	rjmp	.+26     	; 0xbb6 <xQueueGenericSendFromISR+0x68>
     b9c:	ff 24       	eor	r15, r15
     b9e:	f3 94       	inc	r15
     ba0:	f1 0e       	add	r15, r17
     ba2:	fa a2       	std	Y+34, r15	; 0x22
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <xQueueGenericSendFromISR+0x68>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <xQueueGenericSendFromISR+0x68>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	03 c0       	rjmp	.+6      	; 0xbb6 <xQueueGenericSendFromISR+0x68>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <xQueueGenericSendFromISR+0x68>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	08 95       	ret

00000bc4 <xQueueReceive>:
     bc4:	cf 92       	push	r12
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	29 97       	sbiw	r28, 0x09	; 9
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	8c 01       	movw	r16, r24
     be6:	6b 01       	movw	r12, r22
     be8:	2e 83       	std	Y+6, r18	; 0x06
     bea:	3f 83       	std	Y+7, r19	; 0x07
     bec:	48 87       	std	Y+8, r20	; 0x08
     bee:	59 87       	std	Y+9, r21	; 0x09
     bf0:	e1 2c       	mov	r14, r1
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	0f 92       	push	r0
     bf8:	f8 01       	movw	r30, r16
     bfa:	f6 8c       	ldd	r15, Z+30	; 0x1e
     bfc:	ff 20       	and	r15, r15
     bfe:	99 f0       	breq	.+38     	; 0xc26 <xQueueReceive+0x62>
     c00:	b6 01       	movw	r22, r12
     c02:	c8 01       	movw	r24, r16
     c04:	2e de       	rcall	.-932    	; 0x862 <prvCopyDataFromQueue>
     c06:	fa 94       	dec	r15
     c08:	f8 01       	movw	r30, r16
     c0a:	f6 8e       	std	Z+30, r15	; 0x1e
     c0c:	80 85       	ldd	r24, Z+8	; 0x08
     c0e:	88 23       	and	r24, r24
     c10:	31 f0       	breq	.+12     	; 0xc1e <xQueueReceive+0x5a>
     c12:	c8 01       	movw	r24, r16
     c14:	08 96       	adiw	r24, 0x08	; 8
     c16:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <xTaskRemoveFromEventList>
     c1a:	81 11       	cpse	r24, r1
     c1c:	e0 dc       	rcall	.-1600   	; 0x5de <vPortYield>
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	4f c0       	rjmp	.+158    	; 0xcc4 <xQueueReceive+0x100>
     c26:	8e 81       	ldd	r24, Y+6	; 0x06
     c28:	9f 81       	ldd	r25, Y+7	; 0x07
     c2a:	a8 85       	ldd	r26, Y+8	; 0x08
     c2c:	b9 85       	ldd	r27, Y+9	; 0x09
     c2e:	89 2b       	or	r24, r25
     c30:	8a 2b       	or	r24, r26
     c32:	8b 2b       	or	r24, r27
     c34:	21 f4       	brne	.+8      	; 0xc3e <xQueueReceive+0x7a>
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	43 c0       	rjmp	.+134    	; 0xcc4 <xQueueReceive+0x100>
     c3e:	e1 10       	cpse	r14, r1
     c40:	06 c0       	rjmp	.+12     	; 0xc4e <xQueueReceive+0x8a>
     c42:	ce 01       	movw	r24, r28
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	0e 94 73 10 	call	0x20e6	; 0x20e6 <vTaskInternalSetTimeOutState>
     c4a:	ee 24       	eor	r14, r14
     c4c:	e3 94       	inc	r14
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	2a d6       	rcall	.+3156   	; 0x18a8 <vTaskSuspendAll>
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	0f 92       	push	r0
     c5a:	f8 01       	movw	r30, r16
     c5c:	81 a1       	ldd	r24, Z+33	; 0x21
     c5e:	8f 3f       	cpi	r24, 0xFF	; 255
     c60:	09 f4       	brne	.+2      	; 0xc64 <xQueueReceive+0xa0>
     c62:	11 a2       	std	Z+33, r1	; 0x21
     c64:	f8 01       	movw	r30, r16
     c66:	82 a1       	ldd	r24, Z+34	; 0x22
     c68:	8f 3f       	cpi	r24, 0xFF	; 255
     c6a:	09 f4       	brne	.+2      	; 0xc6e <xQueueReceive+0xaa>
     c6c:	12 a2       	std	Z+34, r1	; 0x22
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	be 01       	movw	r22, r28
     c74:	6a 5f       	subi	r22, 0xFA	; 250
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	ce 01       	movw	r24, r28
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	0e 94 84 10 	call	0x2108	; 0x2108 <xTaskCheckForTimeOut>
     c80:	81 11       	cpse	r24, r1
     c82:	17 c0       	rjmp	.+46     	; 0xcb2 <xQueueReceive+0xee>
     c84:	c8 01       	movw	r24, r16
     c86:	73 dd       	rcall	.-1306   	; 0x76e <prvIsQueueEmpty>
     c88:	88 23       	and	r24, r24
     c8a:	79 f0       	breq	.+30     	; 0xcaa <xQueueReceive+0xe6>
     c8c:	4e 81       	ldd	r20, Y+6	; 0x06
     c8e:	5f 81       	ldd	r21, Y+7	; 0x07
     c90:	68 85       	ldd	r22, Y+8	; 0x08
     c92:	79 85       	ldd	r23, Y+9	; 0x09
     c94:	c8 01       	movw	r24, r16
     c96:	43 96       	adiw	r24, 0x13	; 19
     c98:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vTaskPlaceOnEventList>
     c9c:	c8 01       	movw	r24, r16
     c9e:	fb dd       	rcall	.-1034   	; 0x896 <prvUnlockQueue>
     ca0:	43 d7       	rcall	.+3718   	; 0x1b28 <xTaskResumeAll>
     ca2:	81 11       	cpse	r24, r1
     ca4:	a6 cf       	rjmp	.-180    	; 0xbf2 <xQueueReceive+0x2e>
     ca6:	9b dc       	rcall	.-1738   	; 0x5de <vPortYield>
     ca8:	a4 cf       	rjmp	.-184    	; 0xbf2 <xQueueReceive+0x2e>
     caa:	c8 01       	movw	r24, r16
     cac:	f4 dd       	rcall	.-1048   	; 0x896 <prvUnlockQueue>
     cae:	3c d7       	rcall	.+3704   	; 0x1b28 <xTaskResumeAll>
     cb0:	a0 cf       	rjmp	.-192    	; 0xbf2 <xQueueReceive+0x2e>
     cb2:	c8 01       	movw	r24, r16
     cb4:	f0 dd       	rcall	.-1056   	; 0x896 <prvUnlockQueue>
     cb6:	38 d7       	rcall	.+3696   	; 0x1b28 <xTaskResumeAll>
     cb8:	c8 01       	movw	r24, r16
     cba:	59 dd       	rcall	.-1358   	; 0x76e <prvIsQueueEmpty>
     cbc:	88 23       	and	r24, r24
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <xQueueReceive+0xfe>
     cc0:	98 cf       	rjmp	.-208    	; 0xbf2 <xQueueReceive+0x2e>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	29 96       	adiw	r28, 0x09	; 9
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	08 95       	ret

00000ce2 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	0f 92       	push	r0
     cee:	89 a1       	ldd	r24, Y+33	; 0x21
     cf0:	8f 3f       	cpi	r24, 0xFF	; 255
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <vQueueWaitForMessageRestricted+0x14>
     cf4:	19 a2       	std	Y+33, r1	; 0x21
     cf6:	8a a1       	ldd	r24, Y+34	; 0x22
     cf8:	8f 3f       	cpi	r24, 0xFF	; 255
     cfa:	09 f4       	brne	.+2      	; 0xcfe <vQueueWaitForMessageRestricted+0x1c>
     cfc:	1a a2       	std	Y+34, r1	; 0x22
     cfe:	0f 90       	pop	r0
     d00:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d02:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d04:	81 11       	cpse	r24, r1
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d08:	ce 01       	movw	r24, r28
     d0a:	43 96       	adiw	r24, 0x13	; 19
     d0c:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d10:	ce 01       	movw	r24, r28
     d12:	c1 dd       	rcall	.-1150   	; 0x896 <prvUnlockQueue>
    }
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     d1a:	fc 01       	movw	r30, r24
     d1c:	44 81       	ldd	r20, Z+4	; 0x04
     d1e:	55 81       	ldd	r21, Z+5	; 0x05
     d20:	22 81       	ldd	r18, Z+2	; 0x02
     d22:	33 81       	ldd	r19, Z+3	; 0x03
     d24:	24 0f       	add	r18, r20
     d26:	35 1f       	adc	r19, r21
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
     d2c:	b9 01       	movw	r22, r18
     d2e:	68 1b       	sub	r22, r24
     d30:	79 0b       	sbc	r23, r25
     d32:	cb 01       	movw	r24, r22
     d34:	64 17       	cp	r22, r20
     d36:	75 07       	cpc	r23, r21
     d38:	10 f0       	brcs	.+4      	; 0xd3e <prvBytesInBuffer+0x24>
     d3a:	84 1b       	sub	r24, r20
     d3c:	95 0b       	sbc	r25, r21
     d3e:	08 95       	ret

00000d40 <prvInitialiseNewStreamBuffer>:
     d40:	0f 93       	push	r16
     d42:	fc 01       	movw	r30, r24
     d44:	8f e0       	ldi	r24, 0x0F	; 15
     d46:	df 01       	movw	r26, r30
     d48:	1d 92       	st	X+, r1
     d4a:	8a 95       	dec	r24
     d4c:	e9 f7       	brne	.-6      	; 0xd48 <prvInitialiseNewStreamBuffer+0x8>
     d4e:	75 87       	std	Z+13, r23	; 0x0d
     d50:	64 87       	std	Z+12, r22	; 0x0c
     d52:	55 83       	std	Z+5, r21	; 0x05
     d54:	44 83       	std	Z+4, r20	; 0x04
     d56:	37 83       	std	Z+7, r19	; 0x07
     d58:	26 83       	std	Z+6, r18	; 0x06
     d5a:	06 87       	std	Z+14, r16	; 0x0e
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <prvWriteBytesToBuffer>:
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	cf 92       	push	r12
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	6c 01       	movw	r12, r24
     d76:	5b 01       	movw	r10, r22
     d78:	7a 01       	movw	r14, r20
     d7a:	fc 01       	movw	r30, r24
     d7c:	c2 81       	ldd	r28, Z+2	; 0x02
     d7e:	d3 81       	ldd	r29, Z+3	; 0x03
     d80:	04 81       	ldd	r16, Z+4	; 0x04
     d82:	15 81       	ldd	r17, Z+5	; 0x05
     d84:	0c 1b       	sub	r16, r28
     d86:	1d 0b       	sbc	r17, r29
     d88:	40 17       	cp	r20, r16
     d8a:	51 07       	cpc	r21, r17
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <prvWriteBytesToBuffer+0x30>
     d8e:	8a 01       	movw	r16, r20
     d90:	f6 01       	movw	r30, r12
     d92:	84 85       	ldd	r24, Z+12	; 0x0c
     d94:	95 85       	ldd	r25, Z+13	; 0x0d
     d96:	a8 01       	movw	r20, r16
     d98:	b5 01       	movw	r22, r10
     d9a:	8c 0f       	add	r24, r28
     d9c:	9d 1f       	adc	r25, r29
     d9e:	0e 94 6f 27 	call	0x4ede	; 0x4ede <memcpy>
     da2:	0e 15       	cp	r16, r14
     da4:	1f 05       	cpc	r17, r15
     da6:	58 f4       	brcc	.+22     	; 0xdbe <prvWriteBytesToBuffer+0x5e>
     da8:	a7 01       	movw	r20, r14
     daa:	40 1b       	sub	r20, r16
     dac:	51 0b       	sbc	r21, r17
     dae:	b5 01       	movw	r22, r10
     db0:	60 0f       	add	r22, r16
     db2:	71 1f       	adc	r23, r17
     db4:	f6 01       	movw	r30, r12
     db6:	84 85       	ldd	r24, Z+12	; 0x0c
     db8:	95 85       	ldd	r25, Z+13	; 0x0d
     dba:	0e 94 6f 27 	call	0x4ede	; 0x4ede <memcpy>
     dbe:	ce 01       	movw	r24, r28
     dc0:	8e 0d       	add	r24, r14
     dc2:	9f 1d       	adc	r25, r15
     dc4:	f6 01       	movw	r30, r12
     dc6:	24 81       	ldd	r18, Z+4	; 0x04
     dc8:	35 81       	ldd	r19, Z+5	; 0x05
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	10 f0       	brcs	.+4      	; 0xdd4 <prvWriteBytesToBuffer+0x74>
     dd0:	82 1b       	sub	r24, r18
     dd2:	93 0b       	sbc	r25, r19
     dd4:	f6 01       	movw	r30, r12
     dd6:	93 83       	std	Z+3, r25	; 0x03
     dd8:	82 83       	std	Z+2, r24	; 0x02
     dda:	c7 01       	movw	r24, r14
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	08 95       	ret

00000df2 <prvWriteMessageToBuffer>:
     df2:	cf 92       	push	r12
     df4:	df 92       	push	r13
     df6:	ef 92       	push	r14
     df8:	ff 92       	push	r15
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	1f 92       	push	r1
     e04:	1f 92       	push	r1
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	7c 01       	movw	r14, r24
     e0c:	6b 01       	movw	r12, r22
     e0e:	5a 83       	std	Y+2, r21	; 0x02
     e10:	49 83       	std	Y+1, r20	; 0x01
     e12:	21 15       	cp	r18, r1
     e14:	31 05       	cpc	r19, r1
     e16:	c1 f0       	breq	.+48     	; 0xe48 <prvWriteMessageToBuffer+0x56>
     e18:	fc 01       	movw	r30, r24
     e1a:	86 85       	ldd	r24, Z+14	; 0x0e
     e1c:	80 fd       	sbrc	r24, 0
     e1e:	08 c0       	rjmp	.+16     	; 0xe30 <prvWriteMessageToBuffer+0x3e>
     e20:	42 17       	cp	r20, r18
     e22:	53 07       	cpc	r21, r19
     e24:	08 f4       	brcc	.+2      	; 0xe28 <prvWriteMessageToBuffer+0x36>
     e26:	9a 01       	movw	r18, r20
     e28:	3a 83       	std	Y+2, r19	; 0x02
     e2a:	29 83       	std	Y+1, r18	; 0x01
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0f c0       	rjmp	.+30     	; 0xe4e <prvWriteMessageToBuffer+0x5c>
     e30:	20 17       	cp	r18, r16
     e32:	31 07       	cpc	r19, r17
     e34:	58 f0       	brcs	.+22     	; 0xe4c <prvWriteMessageToBuffer+0x5a>
     e36:	42 e0       	ldi	r20, 0x02	; 2
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	be 01       	movw	r22, r28
     e3c:	6f 5f       	subi	r22, 0xFF	; 255
     e3e:	7f 4f       	sbci	r23, 0xFF	; 255
     e40:	c7 01       	movw	r24, r14
     e42:	8e df       	rcall	.-228    	; 0xd60 <prvWriteBytesToBuffer>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <prvWriteMessageToBuffer+0x5c>
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <prvWriteMessageToBuffer+0x5c>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	88 23       	and	r24, r24
     e50:	31 f0       	breq	.+12     	; 0xe5e <prvWriteMessageToBuffer+0x6c>
     e52:	49 81       	ldd	r20, Y+1	; 0x01
     e54:	5a 81       	ldd	r21, Y+2	; 0x02
     e56:	b6 01       	movw	r22, r12
     e58:	c7 01       	movw	r24, r14
     e5a:	82 df       	rcall	.-252    	; 0xd60 <prvWriteBytesToBuffer>
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <prvWriteMessageToBuffer+0x70>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	08 95       	ret

00000e78 <prvReadBytesFromBuffer>:
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	7c 01       	movw	r14, r24
     e8e:	5b 01       	movw	r10, r22
     e90:	e9 01       	movw	r28, r18
     e92:	42 17       	cp	r20, r18
     e94:	53 07       	cpc	r21, r19
     e96:	08 f4       	brcc	.+2      	; 0xe9a <prvReadBytesFromBuffer+0x22>
     e98:	ea 01       	movw	r28, r20
     e9a:	20 97       	sbiw	r28, 0x00	; 0
     e9c:	81 f1       	breq	.+96     	; 0xefe <prvReadBytesFromBuffer+0x86>
     e9e:	f7 01       	movw	r30, r14
     ea0:	00 81       	ld	r16, Z
     ea2:	11 81       	ldd	r17, Z+1	; 0x01
     ea4:	84 81       	ldd	r24, Z+4	; 0x04
     ea6:	95 81       	ldd	r25, Z+5	; 0x05
     ea8:	80 1b       	sub	r24, r16
     eaa:	91 0b       	sbc	r25, r17
     eac:	6e 01       	movw	r12, r28
     eae:	8c 17       	cp	r24, r28
     eb0:	9d 07       	cpc	r25, r29
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <prvReadBytesFromBuffer+0x3e>
     eb4:	6c 01       	movw	r12, r24
     eb6:	f7 01       	movw	r30, r14
     eb8:	64 85       	ldd	r22, Z+12	; 0x0c
     eba:	75 85       	ldd	r23, Z+13	; 0x0d
     ebc:	60 0f       	add	r22, r16
     ebe:	71 1f       	adc	r23, r17
     ec0:	a6 01       	movw	r20, r12
     ec2:	c5 01       	movw	r24, r10
     ec4:	0e 94 6f 27 	call	0x4ede	; 0x4ede <memcpy>
     ec8:	cc 16       	cp	r12, r28
     eca:	dd 06       	cpc	r13, r29
     ecc:	58 f4       	brcc	.+22     	; 0xee4 <prvReadBytesFromBuffer+0x6c>
     ece:	ae 01       	movw	r20, r28
     ed0:	4c 19       	sub	r20, r12
     ed2:	5d 09       	sbc	r21, r13
     ed4:	f7 01       	movw	r30, r14
     ed6:	64 85       	ldd	r22, Z+12	; 0x0c
     ed8:	75 85       	ldd	r23, Z+13	; 0x0d
     eda:	c5 01       	movw	r24, r10
     edc:	8c 0d       	add	r24, r12
     ede:	9d 1d       	adc	r25, r13
     ee0:	0e 94 6f 27 	call	0x4ede	; 0x4ede <memcpy>
     ee4:	0c 0f       	add	r16, r28
     ee6:	1d 1f       	adc	r17, r29
     ee8:	f7 01       	movw	r30, r14
     eea:	84 81       	ldd	r24, Z+4	; 0x04
     eec:	95 81       	ldd	r25, Z+5	; 0x05
     eee:	08 17       	cp	r16, r24
     ef0:	19 07       	cpc	r17, r25
     ef2:	10 f0       	brcs	.+4      	; 0xef8 <prvReadBytesFromBuffer+0x80>
     ef4:	08 1b       	sub	r16, r24
     ef6:	19 0b       	sbc	r17, r25
     ef8:	f7 01       	movw	r30, r14
     efa:	11 83       	std	Z+1, r17	; 0x01
     efc:	00 83       	st	Z, r16
     efe:	ce 01       	movw	r24, r28
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	08 95       	ret

00000f16 <prvReadMessageFromBuffer>:
     f16:	6f 92       	push	r6
     f18:	7f 92       	push	r7
     f1a:	8f 92       	push	r8
     f1c:	9f 92       	push	r9
     f1e:	af 92       	push	r10
     f20:	bf 92       	push	r11
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	1f 92       	push	r1
     f34:	1f 92       	push	r1
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	6c 01       	movw	r12, r24
     f3c:	4b 01       	movw	r8, r22
     f3e:	5a 01       	movw	r10, r20
     f40:	79 01       	movw	r14, r18
     f42:	01 15       	cp	r16, r1
     f44:	11 05       	cpc	r17, r1
     f46:	b1 f0       	breq	.+44     	; 0xf74 <prvReadMessageFromBuffer+0x5e>
     f48:	fc 01       	movw	r30, r24
     f4a:	60 80       	ld	r6, Z
     f4c:	71 80       	ldd	r7, Z+1	; 0x01
     f4e:	a8 01       	movw	r20, r16
     f50:	be 01       	movw	r22, r28
     f52:	6f 5f       	subi	r22, 0xFF	; 255
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	90 df       	rcall	.-224    	; 0xe78 <prvReadBytesFromBuffer>
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	e0 1a       	sub	r14, r16
     f5e:	f1 0a       	sbc	r15, r17
     f60:	a8 16       	cp	r10, r24
     f62:	b9 06       	cpc	r11, r25
     f64:	30 f4       	brcc	.+12     	; 0xf72 <prvReadMessageFromBuffer+0x5c>
     f66:	f6 01       	movw	r30, r12
     f68:	71 82       	std	Z+1, r7	; 0x01
     f6a:	60 82       	st	Z, r6
     f6c:	a1 2c       	mov	r10, r1
     f6e:	b1 2c       	mov	r11, r1
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <prvReadMessageFromBuffer+0x5e>
     f72:	5c 01       	movw	r10, r24
     f74:	97 01       	movw	r18, r14
     f76:	a5 01       	movw	r20, r10
     f78:	b4 01       	movw	r22, r8
     f7a:	c6 01       	movw	r24, r12
     f7c:	7d df       	rcall	.-262    	; 0xe78 <prvReadBytesFromBuffer>
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	cf 90       	pop	r12
     f92:	bf 90       	pop	r11
     f94:	af 90       	pop	r10
     f96:	9f 90       	pop	r9
     f98:	8f 90       	pop	r8
     f9a:	7f 90       	pop	r7
     f9c:	6f 90       	pop	r6
     f9e:	08 95       	ret

00000fa0 <xStreamBufferGenericCreate>:
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	ec 01       	movw	r28, r24
     fb0:	6b 01       	movw	r12, r22
     fb2:	41 30       	cpi	r20, 0x01	; 1
     fb4:	11 f4       	brne	.+4      	; 0xfba <xStreamBufferGenericCreate+0x1a>
     fb6:	01 e0       	ldi	r16, 0x01	; 1
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <xStreamBufferGenericCreate+0x1c>
     fba:	00 e0       	ldi	r16, 0x00	; 0
     fbc:	c1 14       	cp	r12, r1
     fbe:	d1 04       	cpc	r13, r1
     fc0:	19 f4       	brne	.+6      	; 0xfc8 <xStreamBufferGenericCreate+0x28>
     fc2:	cc 24       	eor	r12, r12
     fc4:	c3 94       	inc	r12
     fc6:	d1 2c       	mov	r13, r1
     fc8:	ce 01       	movw	r24, r28
     fca:	40 96       	adiw	r24, 0x10	; 16
     fcc:	c8 17       	cp	r28, r24
     fce:	d9 07       	cpc	r29, r25
     fd0:	20 f4       	brcc	.+8      	; 0xfda <xStreamBufferGenericCreate+0x3a>
     fd2:	21 96       	adiw	r28, 0x01	; 1
     fd4:	50 d9       	rcall	.-3424   	; 0x276 <pvPortMalloc>
     fd6:	7c 01       	movw	r14, r24
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <xStreamBufferGenericCreate+0x3e>
     fda:	e1 2c       	mov	r14, r1
     fdc:	f1 2c       	mov	r15, r1
     fde:	e1 14       	cp	r14, r1
     fe0:	f1 04       	cpc	r15, r1
     fe2:	39 f0       	breq	.+14     	; 0xff2 <xStreamBufferGenericCreate+0x52>
     fe4:	96 01       	movw	r18, r12
     fe6:	ae 01       	movw	r20, r28
     fe8:	b7 01       	movw	r22, r14
     fea:	61 5f       	subi	r22, 0xF1	; 241
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	c7 01       	movw	r24, r14
     ff0:	a7 de       	rcall	.-690    	; 0xd40 <prvInitialiseNewStreamBuffer>
     ff2:	c7 01       	movw	r24, r14
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	08 95       	ret

00001004 <xStreamBufferReset>:
    1004:	0f 93       	push	r16
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	0f 92       	push	r0
    100c:	fc 01       	movw	r30, r24
    100e:	20 85       	ldd	r18, Z+8	; 0x08
    1010:	31 85       	ldd	r19, Z+9	; 0x09
    1012:	23 2b       	or	r18, r19
    1014:	71 f4       	brne	.+28     	; 0x1032 <xStreamBufferReset+0x2e>
    1016:	22 85       	ldd	r18, Z+10	; 0x0a
    1018:	33 85       	ldd	r19, Z+11	; 0x0b
    101a:	23 2b       	or	r18, r19
    101c:	61 f4       	brne	.+24     	; 0x1036 <xStreamBufferReset+0x32>
    101e:	26 81       	ldd	r18, Z+6	; 0x06
    1020:	37 81       	ldd	r19, Z+7	; 0x07
    1022:	44 81       	ldd	r20, Z+4	; 0x04
    1024:	55 81       	ldd	r21, Z+5	; 0x05
    1026:	64 85       	ldd	r22, Z+12	; 0x0c
    1028:	75 85       	ldd	r23, Z+13	; 0x0d
    102a:	06 85       	ldd	r16, Z+14	; 0x0e
    102c:	89 de       	rcall	.-750    	; 0xd40 <prvInitialiseNewStreamBuffer>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	03 c0       	rjmp	.+6      	; 0x1038 <xStreamBufferReset+0x34>
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <xStreamBufferReset+0x34>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <xStreamBufferSpacesAvailable>:
    1040:	fc 01       	movw	r30, r24
    1042:	24 81       	ldd	r18, Z+4	; 0x04
    1044:	35 81       	ldd	r19, Z+5	; 0x05
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	82 0f       	add	r24, r18
    104c:	93 1f       	adc	r25, r19
    104e:	42 81       	ldd	r20, Z+2	; 0x02
    1050:	53 81       	ldd	r21, Z+3	; 0x03
    1052:	84 1b       	sub	r24, r20
    1054:	95 0b       	sbc	r25, r21
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	82 17       	cp	r24, r18
    105a:	93 07       	cpc	r25, r19
    105c:	10 f0       	brcs	.+4      	; 0x1062 <xStreamBufferSpacesAvailable+0x22>
    105e:	82 1b       	sub	r24, r18
    1060:	93 0b       	sbc	r25, r19
    1062:	08 95       	ret

00001064 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1064:	2f 92       	push	r2
    1066:	3f 92       	push	r3
    1068:	4f 92       	push	r4
    106a:	5f 92       	push	r5
    106c:	6f 92       	push	r6
    106e:	7f 92       	push	r7
    1070:	8f 92       	push	r8
    1072:	9f 92       	push	r9
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	2b 97       	sbiw	r28, 0x0b	; 11
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	4c 01       	movw	r8, r24
    109a:	7b 87       	std	Y+11, r23	; 0x0b
    109c:	6a 87       	std	Y+10, r22	; 0x0a
    109e:	1a 01       	movw	r2, r20
    10a0:	0e 83       	std	Y+6, r16	; 0x06
    10a2:	1f 83       	std	Y+7, r17	; 0x07
    10a4:	28 87       	std	Y+8, r18	; 0x08
    10a6:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    10a8:	fc 01       	movw	r30, r24
    10aa:	84 81       	ldd	r24, Z+4	; 0x04
    10ac:	95 81       	ldd	r25, Z+5	; 0x05
    10ae:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    10b0:	26 85       	ldd	r18, Z+14	; 0x0e
    10b2:	20 ff       	sbrs	r18, 0
    10b4:	0c c0       	rjmp	.+24     	; 0x10ce <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    10b6:	2a 01       	movw	r4, r20
    10b8:	f2 e0       	ldi	r31, 0x02	; 2
    10ba:	4f 0e       	add	r4, r31
    10bc:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    10be:	84 15       	cp	r24, r4
    10c0:	95 05       	cpc	r25, r5
    10c2:	58 f4       	brcc	.+22     	; 0x10da <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    10c4:	1e 82       	std	Y+6, r1	; 0x06
    10c6:	1f 82       	std	Y+7, r1	; 0x07
    10c8:	18 86       	std	Y+8, r1	; 0x08
    10ca:	19 86       	std	Y+9, r1	; 0x09
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    10ce:	84 17       	cp	r24, r20
    10d0:	95 07       	cpc	r25, r21
    10d2:	10 f0       	brcs	.+4      	; 0x10d8 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    10d4:	2a 01       	movw	r4, r20
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    10d8:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    10da:	8e 81       	ldd	r24, Y+6	; 0x06
    10dc:	9f 81       	ldd	r25, Y+7	; 0x07
    10de:	a8 85       	ldd	r26, Y+8	; 0x08
    10e0:	b9 85       	ldd	r27, Y+9	; 0x09
    10e2:	89 2b       	or	r24, r25
    10e4:	8a 2b       	or	r24, r26
    10e6:	8b 2b       	or	r24, r27
    10e8:	09 f4       	brne	.+2      	; 0x10ec <xStreamBufferSend+0x88>
    10ea:	36 c0       	rjmp	.+108    	; 0x1158 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    10ec:	ce 01       	movw	r24, r28
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	e4 d7       	rcall	.+4040   	; 0x20ba <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    10f8:	c4 01       	movw	r24, r8
    10fa:	a2 df       	rcall	.-188    	; 0x1040 <xStreamBufferSpacesAvailable>
    10fc:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    10fe:	84 15       	cp	r24, r4
    1100:	95 05       	cpc	r25, r5
    1102:	38 f5       	brcc	.+78     	; 0x1152 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 1c 14 	call	0x2838	; 0x2838 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    110e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <xTaskGetCurrentTaskHandle>
    1112:	f4 01       	movw	r30, r8
    1114:	93 87       	std	Z+11, r25	; 0x0b
    1116:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    111c:	ae 80       	ldd	r10, Y+6	; 0x06
    111e:	bf 80       	ldd	r11, Y+7	; 0x07
    1120:	c8 84       	ldd	r12, Y+8	; 0x08
    1122:	d9 84       	ldd	r13, Y+9	; 0x09
    1124:	e1 2c       	mov	r14, r1
    1126:	f1 2c       	mov	r15, r1
    1128:	00 e0       	ldi	r16, 0x00	; 0
    112a:	10 e0       	ldi	r17, 0x00	; 0
    112c:	98 01       	movw	r18, r16
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	ba 01       	movw	r22, r20
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    113a:	f4 01       	movw	r30, r8
    113c:	13 86       	std	Z+11, r1	; 0x0b
    113e:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1140:	be 01       	movw	r22, r28
    1142:	6a 5f       	subi	r22, 0xFA	; 250
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	ce 01       	movw	r24, r28
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	de d7       	rcall	.+4028   	; 0x2108 <xTaskCheckForTimeOut>
    114c:	88 23       	and	r24, r24
    114e:	89 f2       	breq	.-94     	; 0x10f2 <xStreamBufferSend+0x8e>
    1150:	05 c0       	rjmp	.+10     	; 0x115c <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
                    break;
    1156:	02 c0       	rjmp	.+4      	; 0x115c <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1158:	61 2c       	mov	r6, r1
    115a:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    115c:	61 14       	cp	r6, r1
    115e:	71 04       	cpc	r7, r1
    1160:	19 f4       	brne	.+6      	; 0x1168 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1162:	c4 01       	movw	r24, r8
    1164:	6d df       	rcall	.-294    	; 0x1040 <xStreamBufferSpacesAvailable>
    1166:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1168:	82 01       	movw	r16, r4
    116a:	93 01       	movw	r18, r6
    116c:	a1 01       	movw	r20, r2
    116e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1170:	7b 85       	ldd	r23, Y+11	; 0x0b
    1172:	c4 01       	movw	r24, r8
    1174:	3e de       	rcall	.-900    	; 0xdf2 <prvWriteMessageToBuffer>
    1176:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1178:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    117a:	e9 f0       	breq	.+58     	; 0x11b6 <xStreamBufferSend+0x152>
    117c:	c4 01       	movw	r24, r8
    117e:	cd dd       	rcall	.-1126   	; 0xd1a <prvBytesInBuffer>
    1180:	f4 01       	movw	r30, r8
    1182:	26 81       	ldd	r18, Z+6	; 0x06
    1184:	37 81       	ldd	r19, Z+7	; 0x07
    1186:	82 17       	cp	r24, r18
    1188:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    118a:	a8 f0       	brcs	.+42     	; 0x11b6 <xStreamBufferSend+0x152>
    118c:	8d d3       	rcall	.+1818   	; 0x18a8 <vTaskSuspendAll>
    118e:	f4 01       	movw	r30, r8
    1190:	80 85       	ldd	r24, Z+8	; 0x08
    1192:	91 85       	ldd	r25, Z+9	; 0x09
    1194:	89 2b       	or	r24, r25
    1196:	71 f0       	breq	.+28     	; 0x11b4 <xStreamBufferSend+0x150>
    1198:	80 85       	ldd	r24, Z+8	; 0x08
    119a:	91 85       	ldd	r25, Z+9	; 0x09
    119c:	e1 2c       	mov	r14, r1
    119e:	f1 2c       	mov	r15, r1
    11a0:	00 e0       	ldi	r16, 0x00	; 0
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	a9 01       	movw	r20, r18
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	0e 94 03 12 	call	0x2406	; 0x2406 <xTaskGenericNotify>
    11ae:	f4 01       	movw	r30, r8
    11b0:	11 86       	std	Z+9, r1	; 0x09
    11b2:	10 86       	std	Z+8, r1	; 0x08
    11b4:	b9 d4       	rcall	.+2418   	; 0x1b28 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    11b6:	c6 01       	movw	r24, r12
    11b8:	2b 96       	adiw	r28, 0x0b	; 11
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	bf 90       	pop	r11
    11d6:	af 90       	pop	r10
    11d8:	9f 90       	pop	r9
    11da:	8f 90       	pop	r8
    11dc:	7f 90       	pop	r7
    11de:	6f 90       	pop	r6
    11e0:	5f 90       	pop	r5
    11e2:	4f 90       	pop	r4
    11e4:	3f 90       	pop	r3
    11e6:	2f 90       	pop	r2
    11e8:	08 95       	ret

000011ea <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    11ea:	af 92       	push	r10
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
    1200:	7b 01       	movw	r14, r22
    1202:	5a 01       	movw	r10, r20
    1204:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1206:	8e 85       	ldd	r24, Y+14	; 0x0e
    1208:	80 ff       	sbrs	r24, 0
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    120c:	8a 01       	movw	r16, r20
    120e:	0e 5f       	subi	r16, 0xFE	; 254
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1214:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1216:	ce 01       	movw	r24, r28
    1218:	13 df       	rcall	.-474    	; 0x1040 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    121a:	9c 01       	movw	r18, r24
    121c:	a5 01       	movw	r20, r10
    121e:	b7 01       	movw	r22, r14
    1220:	ce 01       	movw	r24, r28
    1222:	e7 dd       	rcall	.-1074   	; 0xdf2 <prvWriteMessageToBuffer>
    1224:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1226:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1228:	c1 f0       	breq	.+48     	; 0x125a <xStreamBufferSendFromISR+0x70>
    122a:	ce 01       	movw	r24, r28
    122c:	76 dd       	rcall	.-1300   	; 0xd1a <prvBytesInBuffer>
    122e:	2e 81       	ldd	r18, Y+6	; 0x06
    1230:	3f 81       	ldd	r19, Y+7	; 0x07
    1232:	82 17       	cp	r24, r18
    1234:	93 07       	cpc	r25, r19
    1236:	88 f0       	brcs	.+34     	; 0x125a <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1238:	88 85       	ldd	r24, Y+8	; 0x08
    123a:	99 85       	ldd	r25, Y+9	; 0x09
    123c:	89 2b       	or	r24, r25
    123e:	69 f0       	breq	.+26     	; 0x125a <xStreamBufferSendFromISR+0x70>
    1240:	88 85       	ldd	r24, Y+8	; 0x08
    1242:	99 85       	ldd	r25, Y+9	; 0x09
    1244:	e1 2c       	mov	r14, r1
    1246:	f1 2c       	mov	r15, r1
    1248:	00 e0       	ldi	r16, 0x00	; 0
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <xTaskGenericNotifyFromISR>
    1256:	19 86       	std	Y+9, r1	; 0x09
    1258:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    125a:	c5 01       	movw	r24, r10
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	cf 90       	pop	r12
    126c:	bf 90       	pop	r11
    126e:	af 90       	pop	r10
    1270:	08 95       	ret

00001272 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1272:	4f 92       	push	r4
    1274:	5f 92       	push	r5
    1276:	6f 92       	push	r6
    1278:	7f 92       	push	r7
    127a:	8f 92       	push	r8
    127c:	9f 92       	push	r9
    127e:	af 92       	push	r10
    1280:	bf 92       	push	r11
    1282:	cf 92       	push	r12
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	ec 01       	movw	r28, r24
    1294:	2b 01       	movw	r4, r22
    1296:	3a 01       	movw	r6, r20
    1298:	58 01       	movw	r10, r16
    129a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    129c:	8e 85       	ldd	r24, Y+14	; 0x0e
    129e:	80 ff       	sbrs	r24, 0
    12a0:	05 c0       	rjmp	.+10     	; 0x12ac <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12a2:	68 94       	set
    12a4:	88 24       	eor	r8, r8
    12a6:	81 f8       	bld	r8, 1
    12a8:	91 2c       	mov	r9, r1
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    12ac:	81 2c       	mov	r8, r1
    12ae:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    12b0:	a1 14       	cp	r10, r1
    12b2:	b1 04       	cpc	r11, r1
    12b4:	c1 04       	cpc	r12, r1
    12b6:	d1 04       	cpc	r13, r1
    12b8:	31 f1       	breq	.+76     	; 0x1306 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    12c0:	ce 01       	movw	r24, r28
    12c2:	2b dd       	rcall	.-1450   	; 0xd1a <prvBytesInBuffer>
    12c4:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    12c6:	88 16       	cp	r8, r24
    12c8:	99 06       	cpc	r9, r25
    12ca:	40 f0       	brcs	.+16     	; 0x12dc <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 1c 14 	call	0x2838	; 0x2838 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    12d6:	82 d7       	rcall	.+3844   	; 0x21dc <xTaskGetCurrentTaskHandle>
    12d8:	99 87       	std	Y+9, r25	; 0x09
    12da:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    12e0:	8e 14       	cp	r8, r14
    12e2:	9f 04       	cpc	r9, r15
    12e4:	98 f0       	brcs	.+38     	; 0x130c <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    12e6:	e1 2c       	mov	r14, r1
    12e8:	f1 2c       	mov	r15, r1
    12ea:	00 e0       	ldi	r16, 0x00	; 0
    12ec:	10 e0       	ldi	r17, 0x00	; 0
    12ee:	98 01       	movw	r18, r16
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	ba 01       	movw	r22, r20
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	df d7       	rcall	.+4030   	; 0x22b8 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    12fa:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    12fc:	18 86       	std	Y+8, r1	; 0x08
    12fe:	ce 01       	movw	r24, r28
    1300:	0c dd       	rcall	.-1512   	; 0xd1a <prvBytesInBuffer>
    1302:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1304:	03 c0       	rjmp	.+6      	; 0x130c <xStreamBufferReceive+0x9a>
    1306:	ce 01       	movw	r24, r28
    1308:	08 dd       	rcall	.-1520   	; 0xd1a <prvBytesInBuffer>
    130a:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    130c:	8e 14       	cp	r8, r14
    130e:	9f 04       	cpc	r9, r15
    1310:	e8 f4       	brcc	.+58     	; 0x134c <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1312:	84 01       	movw	r16, r8
    1314:	97 01       	movw	r18, r14
    1316:	a3 01       	movw	r20, r6
    1318:	b2 01       	movw	r22, r4
    131a:	ce 01       	movw	r24, r28
    131c:	fc dd       	rcall	.-1032   	; 0xf16 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    131e:	6c 01       	movw	r12, r24
    1320:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1322:	b1 f0       	breq	.+44     	; 0x1350 <xStreamBufferReceive+0xde>
    1324:	c1 d2       	rcall	.+1410   	; 0x18a8 <vTaskSuspendAll>
    1326:	8a 85       	ldd	r24, Y+10	; 0x0a
    1328:	9b 85       	ldd	r25, Y+11	; 0x0b
    132a:	89 2b       	or	r24, r25
    132c:	69 f0       	breq	.+26     	; 0x1348 <xStreamBufferReceive+0xd6>
    132e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1330:	9b 85       	ldd	r25, Y+11	; 0x0b
    1332:	e1 2c       	mov	r14, r1
    1334:	f1 2c       	mov	r15, r1
    1336:	00 e0       	ldi	r16, 0x00	; 0
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	a9 01       	movw	r20, r18
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	0e 94 03 12 	call	0x2406	; 0x2406 <xTaskGenericNotify>
    1344:	1b 86       	std	Y+11, r1	; 0x0b
    1346:	1a 86       	std	Y+10, r1	; 0x0a
    1348:	ef d3       	rcall	.+2014   	; 0x1b28 <xTaskResumeAll>
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    134c:	c1 2c       	mov	r12, r1
    134e:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1350:	c6 01       	movw	r24, r12
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	ff 90       	pop	r15
    135c:	ef 90       	pop	r14
    135e:	df 90       	pop	r13
    1360:	cf 90       	pop	r12
    1362:	bf 90       	pop	r11
    1364:	af 90       	pop	r10
    1366:	9f 90       	pop	r9
    1368:	8f 90       	pop	r8
    136a:	7f 90       	pop	r7
    136c:	6f 90       	pop	r6
    136e:	5f 90       	pop	r5
    1370:	4f 90       	pop	r4
    1372:	08 95       	ret

00001374 <prvResetNextTaskUnblockTime>:
    1374:	e0 91 eb 10 	lds	r30, 0x10EB	; 0x8010eb <pxDelayedTaskList>
    1378:	f0 91 ec 10 	lds	r31, 0x10EC	; 0x8010ec <pxDelayedTaskList+0x1>
    137c:	80 81       	ld	r24, Z
    137e:	81 11       	cpse	r24, r1
    1380:	0c c0       	rjmp	.+24     	; 0x139a <prvResetNextTaskUnblockTime+0x26>
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	9f ef       	ldi	r25, 0xFF	; 255
    1386:	dc 01       	movw	r26, r24
    1388:	80 93 b5 10 	sts	0x10B5, r24	; 0x8010b5 <xNextTaskUnblockTime>
    138c:	90 93 b6 10 	sts	0x10B6, r25	; 0x8010b6 <xNextTaskUnblockTime+0x1>
    1390:	a0 93 b7 10 	sts	0x10B7, r26	; 0x8010b7 <xNextTaskUnblockTime+0x2>
    1394:	b0 93 b8 10 	sts	0x10B8, r27	; 0x8010b8 <xNextTaskUnblockTime+0x3>
    1398:	08 95       	ret
    139a:	e0 91 eb 10 	lds	r30, 0x10EB	; 0x8010eb <pxDelayedTaskList>
    139e:	f0 91 ec 10 	lds	r31, 0x10EC	; 0x8010ec <pxDelayedTaskList+0x1>
    13a2:	07 80       	ldd	r0, Z+7	; 0x07
    13a4:	f0 85       	ldd	r31, Z+8	; 0x08
    13a6:	e0 2d       	mov	r30, r0
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	a2 81       	ldd	r26, Z+2	; 0x02
    13ae:	b3 81       	ldd	r27, Z+3	; 0x03
    13b0:	80 93 b5 10 	sts	0x10B5, r24	; 0x8010b5 <xNextTaskUnblockTime>
    13b4:	90 93 b6 10 	sts	0x10B6, r25	; 0x8010b6 <xNextTaskUnblockTime+0x1>
    13b8:	a0 93 b7 10 	sts	0x10B7, r26	; 0x8010b7 <xNextTaskUnblockTime+0x2>
    13bc:	b0 93 b8 10 	sts	0x10B8, r27	; 0x8010b8 <xNextTaskUnblockTime+0x3>
    13c0:	08 95       	ret

000013c2 <prvDeleteTCB>:
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	ec 01       	movw	r28, r24
    13c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13cc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <vPortFree>
    13d0:	ce 01       	movw	r24, r28
    13d2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <vPortFree>
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	08 95       	ret

000013dc <prvInitialiseNewTask>:
    13dc:	4f 92       	push	r4
    13de:	5f 92       	push	r5
    13e0:	6f 92       	push	r6
    13e2:	7f 92       	push	r7
    13e4:	8f 92       	push	r8
    13e6:	9f 92       	push	r9
    13e8:	af 92       	push	r10
    13ea:	bf 92       	push	r11
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	2c 01       	movw	r4, r24
    13fc:	5b 01       	movw	r10, r22
    13fe:	4a 01       	movw	r8, r20
    1400:	39 01       	movw	r6, r18
    1402:	e6 01       	movw	r28, r12
    1404:	65 ea       	ldi	r22, 0xA5	; 165
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    140c:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <memset>
    1410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1412:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1414:	21 e0       	ldi	r18, 0x01	; 1
    1416:	82 1a       	sub	r8, r18
    1418:	91 08       	sbc	r9, r1
    141a:	88 0e       	add	r8, r24
    141c:	99 1e       	adc	r9, r25
    141e:	a1 14       	cp	r10, r1
    1420:	b1 04       	cpc	r11, r1
    1422:	89 f4       	brne	.+34     	; 0x1446 <prvInitialiseNewTask+0x6a>
    1424:	15 c0       	rjmp	.+42     	; 0x1450 <prvInitialiseNewTask+0x74>
    1426:	82 2f       	mov	r24, r18
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	f5 01       	movw	r30, r10
    142c:	e8 0f       	add	r30, r24
    142e:	f9 1f       	adc	r31, r25
    1430:	30 81       	ld	r19, Z
    1432:	de 01       	movw	r26, r28
    1434:	a8 0f       	add	r26, r24
    1436:	b9 1f       	adc	r27, r25
    1438:	5d 96       	adiw	r26, 0x1d	; 29
    143a:	3c 93       	st	X, r19
    143c:	80 81       	ld	r24, Z
    143e:	88 23       	and	r24, r24
    1440:	29 f0       	breq	.+10     	; 0x144c <prvInitialiseNewTask+0x70>
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <prvInitialiseNewTask+0x6c>
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	20 31       	cpi	r18, 0x10	; 16
    144a:	68 f3       	brcs	.-38     	; 0x1426 <prvInitialiseNewTask+0x4a>
    144c:	1c a6       	std	Y+44, r1	; 0x2c
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <prvInitialiseNewTask+0x76>
    1450:	1d 8e       	std	Y+29, r1	; 0x1d
    1452:	0a 30       	cpi	r16, 0x0A	; 10
    1454:	08 f0       	brcs	.+2      	; 0x1458 <prvInitialiseNewTask+0x7c>
    1456:	09 e0       	ldi	r16, 0x09	; 9
    1458:	0a 8f       	std	Y+26, r16	; 0x1a
    145a:	0d a7       	std	Y+45, r16	; 0x2d
    145c:	1e a6       	std	Y+46, r1	; 0x2e
    145e:	ce 01       	movw	r24, r28
    1460:	02 96       	adiw	r24, 0x02	; 2
    1462:	00 d8       	rcall	.-4096   	; 0x464 <vListInitialiseItem>
    1464:	ce 01       	movw	r24, r28
    1466:	0e 96       	adiw	r24, 0x0e	; 14
    1468:	0e 94 32 02 	call	0x464	; 0x464 <vListInitialiseItem>
    146c:	db 87       	std	Y+11, r29	; 0x0b
    146e:	ca 87       	std	Y+10, r28	; 0x0a
    1470:	8a e0       	ldi	r24, 0x0A	; 10
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	80 1b       	sub	r24, r16
    147a:	91 09       	sbc	r25, r1
    147c:	a1 09       	sbc	r26, r1
    147e:	b1 09       	sbc	r27, r1
    1480:	8e 87       	std	Y+14, r24	; 0x0e
    1482:	9f 87       	std	Y+15, r25	; 0x0f
    1484:	a8 8b       	std	Y+16, r26	; 0x10
    1486:	b9 8b       	std	Y+17, r27	; 0x11
    1488:	df 8b       	std	Y+23, r29	; 0x17
    148a:	ce 8b       	std	Y+22, r28	; 0x16
    148c:	84 e0       	ldi	r24, 0x04	; 4
    148e:	fe 01       	movw	r30, r28
    1490:	bf 96       	adiw	r30, 0x2f	; 47
    1492:	df 01       	movw	r26, r30
    1494:	1d 92       	st	X+, r1
    1496:	8a 95       	dec	r24
    1498:	e9 f7       	brne	.-6      	; 0x1494 <prvInitialiseNewTask+0xb8>
    149a:	1b aa       	std	Y+51, r1	; 0x33
    149c:	a3 01       	movw	r20, r6
    149e:	b2 01       	movw	r22, r4
    14a0:	c4 01       	movw	r24, r8
    14a2:	54 d8       	rcall	.-3928   	; 0x54c <pxPortInitialiseStack>
    14a4:	99 83       	std	Y+1, r25	; 0x01
    14a6:	88 83       	st	Y, r24
    14a8:	e1 14       	cp	r14, r1
    14aa:	f1 04       	cpc	r15, r1
    14ac:	19 f0       	breq	.+6      	; 0x14b4 <prvInitialiseNewTask+0xd8>
    14ae:	f7 01       	movw	r30, r14
    14b0:	d1 83       	std	Z+1, r29	; 0x01
    14b2:	c0 83       	st	Z, r28
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	cf 90       	pop	r12
    14c2:	bf 90       	pop	r11
    14c4:	af 90       	pop	r10
    14c6:	9f 90       	pop	r9
    14c8:	8f 90       	pop	r8
    14ca:	7f 90       	pop	r7
    14cc:	6f 90       	pop	r6
    14ce:	5f 90       	pop	r5
    14d0:	4f 90       	pop	r4
    14d2:	08 95       	ret

000014d4 <prvInitialiseTaskLists>:
    14d4:	cf 93       	push	r28
    14d6:	c0 e0       	ldi	r28, 0x00	; 0
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <prvInitialiseTaskLists+0x18>
    14da:	2b e0       	ldi	r18, 0x0B	; 11
    14dc:	c2 9f       	mul	r28, r18
    14de:	c0 01       	movw	r24, r0
    14e0:	11 24       	eor	r1, r1
    14e2:	8d 5f       	subi	r24, 0xFD	; 253
    14e4:	9e 4e       	sbci	r25, 0xEE	; 238
    14e6:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    14ea:	cf 5f       	subi	r28, 0xFF	; 255
    14ec:	ca 30       	cpi	r28, 0x0A	; 10
    14ee:	a8 f3       	brcs	.-22     	; 0x14da <prvInitialiseTaskLists+0x6>
    14f0:	88 ef       	ldi	r24, 0xF8	; 248
    14f2:	90 e1       	ldi	r25, 0x10	; 16
    14f4:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    14f8:	8d ee       	ldi	r24, 0xED	; 237
    14fa:	90 e1       	ldi	r25, 0x10	; 16
    14fc:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    1500:	8e ed       	ldi	r24, 0xDE	; 222
    1502:	90 e1       	ldi	r25, 0x10	; 16
    1504:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    1508:	83 ed       	ldi	r24, 0xD3	; 211
    150a:	90 e1       	ldi	r25, 0x10	; 16
    150c:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    1510:	87 ec       	ldi	r24, 0xC7	; 199
    1512:	90 e1       	ldi	r25, 0x10	; 16
    1514:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    1518:	88 ef       	ldi	r24, 0xF8	; 248
    151a:	90 e1       	ldi	r25, 0x10	; 16
    151c:	90 93 ec 10 	sts	0x10EC, r25	; 0x8010ec <pxDelayedTaskList+0x1>
    1520:	80 93 eb 10 	sts	0x10EB, r24	; 0x8010eb <pxDelayedTaskList>
    1524:	8d ee       	ldi	r24, 0xED	; 237
    1526:	90 e1       	ldi	r25, 0x10	; 16
    1528:	90 93 ea 10 	sts	0x10EA, r25	; 0x8010ea <pxOverflowDelayedTaskList+0x1>
    152c:	80 93 e9 10 	sts	0x10E9, r24	; 0x8010e9 <pxOverflowDelayedTaskList>
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <prvAddNewTaskToReadyList>:
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	ec 01       	movw	r28, r24
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	0f 92       	push	r0
    1540:	80 91 c6 10 	lds	r24, 0x10C6	; 0x8010c6 <uxCurrentNumberOfTasks>
    1544:	8f 5f       	subi	r24, 0xFF	; 255
    1546:	80 93 c6 10 	sts	0x10C6, r24	; 0x8010c6 <uxCurrentNumberOfTasks>
    154a:	80 91 71 11 	lds	r24, 0x1171	; 0x801171 <pxCurrentTCB>
    154e:	90 91 72 11 	lds	r25, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1552:	89 2b       	or	r24, r25
    1554:	51 f4       	brne	.+20     	; 0x156a <prvAddNewTaskToReadyList+0x36>
    1556:	d0 93 72 11 	sts	0x1172, r29	; 0x801172 <pxCurrentTCB+0x1>
    155a:	c0 93 71 11 	sts	0x1171, r28	; 0x801171 <pxCurrentTCB>
    155e:	80 91 c6 10 	lds	r24, 0x10C6	; 0x8010c6 <uxCurrentNumberOfTasks>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	91 f4       	brne	.+36     	; 0x158a <prvAddNewTaskToReadyList+0x56>
    1566:	b6 df       	rcall	.-148    	; 0x14d4 <prvInitialiseTaskLists>
    1568:	10 c0       	rjmp	.+32     	; 0x158a <prvAddNewTaskToReadyList+0x56>
    156a:	80 91 c0 10 	lds	r24, 0x10C0	; 0x8010c0 <xSchedulerRunning>
    156e:	81 11       	cpse	r24, r1
    1570:	0c c0       	rjmp	.+24     	; 0x158a <prvAddNewTaskToReadyList+0x56>
    1572:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    1576:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    157a:	92 8d       	ldd	r25, Z+26	; 0x1a
    157c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    157e:	89 17       	cp	r24, r25
    1580:	20 f0       	brcs	.+8      	; 0x158a <prvAddNewTaskToReadyList+0x56>
    1582:	d0 93 72 11 	sts	0x1172, r29	; 0x801172 <pxCurrentTCB+0x1>
    1586:	c0 93 71 11 	sts	0x1171, r28	; 0x801171 <pxCurrentTCB>
    158a:	80 91 b9 10 	lds	r24, 0x10B9	; 0x8010b9 <uxTaskNumber>
    158e:	8f 5f       	subi	r24, 0xFF	; 255
    1590:	80 93 b9 10 	sts	0x10B9, r24	; 0x8010b9 <uxTaskNumber>
    1594:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1596:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <uxTopReadyPriority>
    159a:	8e 17       	cp	r24, r30
    159c:	10 f4       	brcc	.+4      	; 0x15a2 <prvAddNewTaskToReadyList+0x6e>
    159e:	e0 93 c1 10 	sts	0x10C1, r30	; 0x8010c1 <uxTopReadyPriority>
    15a2:	8b e0       	ldi	r24, 0x0B	; 11
    15a4:	8e 9f       	mul	r24, r30
    15a6:	f0 01       	movw	r30, r0
    15a8:	11 24       	eor	r1, r1
    15aa:	ed 5f       	subi	r30, 0xFD	; 253
    15ac:	fe 4e       	sbci	r31, 0xEE	; 238
    15ae:	01 80       	ldd	r0, Z+1	; 0x01
    15b0:	f2 81       	ldd	r31, Z+2	; 0x02
    15b2:	e0 2d       	mov	r30, r0
    15b4:	ff 83       	std	Y+7, r31	; 0x07
    15b6:	ee 83       	std	Y+6, r30	; 0x06
    15b8:	26 81       	ldd	r18, Z+6	; 0x06
    15ba:	37 81       	ldd	r19, Z+7	; 0x07
    15bc:	39 87       	std	Y+9, r19	; 0x09
    15be:	28 87       	std	Y+8, r18	; 0x08
    15c0:	a6 81       	ldd	r26, Z+6	; 0x06
    15c2:	b7 81       	ldd	r27, Z+7	; 0x07
    15c4:	9e 01       	movw	r18, r28
    15c6:	2e 5f       	subi	r18, 0xFE	; 254
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	15 96       	adiw	r26, 0x05	; 5
    15cc:	3c 93       	st	X, r19
    15ce:	2e 93       	st	-X, r18
    15d0:	14 97       	sbiw	r26, 0x04	; 4
    15d2:	37 83       	std	Z+7, r19	; 0x07
    15d4:	26 83       	std	Z+6, r18	; 0x06
    15d6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    15d8:	8e 9f       	mul	r24, r30
    15da:	f0 01       	movw	r30, r0
    15dc:	11 24       	eor	r1, r1
    15de:	ed 5f       	subi	r30, 0xFD	; 253
    15e0:	fe 4e       	sbci	r31, 0xEE	; 238
    15e2:	fd 87       	std	Y+13, r31	; 0x0d
    15e4:	ec 87       	std	Y+12, r30	; 0x0c
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 5f       	subi	r24, 0xFF	; 255
    15ea:	80 83       	st	Z, r24
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	80 91 c0 10 	lds	r24, 0x10C0	; 0x8010c0 <xSchedulerRunning>
    15f4:	88 23       	and	r24, r24
    15f6:	51 f0       	breq	.+20     	; 0x160c <prvAddNewTaskToReadyList+0xd8>
    15f8:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    15fc:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1600:	92 8d       	ldd	r25, Z+26	; 0x1a
    1602:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1604:	98 17       	cp	r25, r24
    1606:	10 f4       	brcc	.+4      	; 0x160c <prvAddNewTaskToReadyList+0xd8>
    1608:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	08 95       	ret

00001612 <prvCheckTasksWaitingTermination>:
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	1b c0       	rjmp	.+54     	; 0x164e <prvCheckTasksWaitingTermination+0x3c>
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	0f 92       	push	r0
    161e:	e0 91 da 10 	lds	r30, 0x10DA	; 0x8010da <xTasksWaitingTermination+0x7>
    1622:	f0 91 db 10 	lds	r31, 0x10DB	; 0x8010db <xTasksWaitingTermination+0x8>
    1626:	c0 85       	ldd	r28, Z+8	; 0x08
    1628:	d1 85       	ldd	r29, Z+9	; 0x09
    162a:	ce 01       	movw	r24, r28
    162c:	02 96       	adiw	r24, 0x02	; 2
    162e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
    1632:	80 91 c6 10 	lds	r24, 0x10C6	; 0x8010c6 <uxCurrentNumberOfTasks>
    1636:	81 50       	subi	r24, 0x01	; 1
    1638:	80 93 c6 10 	sts	0x10C6, r24	; 0x8010c6 <uxCurrentNumberOfTasks>
    163c:	80 91 d2 10 	lds	r24, 0x10D2	; 0x8010d2 <uxDeletedTasksWaitingCleanUp>
    1640:	81 50       	subi	r24, 0x01	; 1
    1642:	80 93 d2 10 	sts	0x10D2, r24	; 0x8010d2 <uxDeletedTasksWaitingCleanUp>
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	ce 01       	movw	r24, r28
    164c:	ba de       	rcall	.-652    	; 0x13c2 <prvDeleteTCB>
    164e:	80 91 d2 10 	lds	r24, 0x10D2	; 0x8010d2 <uxDeletedTasksWaitingCleanUp>
    1652:	81 11       	cpse	r24, r1
    1654:	e1 cf       	rjmp	.-62     	; 0x1618 <prvCheckTasksWaitingTermination+0x6>
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	08 95       	ret

0000165c <prvAddCurrentTaskToDelayedList>:
    165c:	8f 92       	push	r8
    165e:	9f 92       	push	r9
    1660:	af 92       	push	r10
    1662:	bf 92       	push	r11
    1664:	cf 92       	push	r12
    1666:	df 92       	push	r13
    1668:	ef 92       	push	r14
    166a:	ff 92       	push	r15
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	6b 01       	movw	r12, r22
    1672:	7c 01       	movw	r14, r24
    1674:	c4 2f       	mov	r28, r20
    1676:	80 90 c2 10 	lds	r8, 0x10C2	; 0x8010c2 <xTickCount>
    167a:	90 90 c3 10 	lds	r9, 0x10C3	; 0x8010c3 <xTickCount+0x1>
    167e:	a0 90 c4 10 	lds	r10, 0x10C4	; 0x8010c4 <xTickCount+0x2>
    1682:	b0 90 c5 10 	lds	r11, 0x10C5	; 0x8010c5 <xTickCount+0x3>
    1686:	80 91 71 11 	lds	r24, 0x1171	; 0x801171 <pxCurrentTCB>
    168a:	90 91 72 11 	lds	r25, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    168e:	02 96       	adiw	r24, 0x02	; 2
    1690:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	c8 16       	cp	r12, r24
    1698:	d8 06       	cpc	r13, r24
    169a:	e8 06       	cpc	r14, r24
    169c:	f8 06       	cpc	r15, r24
    169e:	b1 f5       	brne	.+108    	; 0x170c <prvAddCurrentTaskToDelayedList+0xb0>
    16a0:	cc 23       	and	r28, r28
    16a2:	a1 f1       	breq	.+104    	; 0x170c <prvAddCurrentTaskToDelayedList+0xb0>
    16a4:	e7 ec       	ldi	r30, 0xC7	; 199
    16a6:	f0 e1       	ldi	r31, 0x10	; 16
    16a8:	a1 81       	ldd	r26, Z+1	; 0x01
    16aa:	b2 81       	ldd	r27, Z+2	; 0x02
    16ac:	c0 91 71 11 	lds	r28, 0x1171	; 0x801171 <pxCurrentTCB>
    16b0:	d0 91 72 11 	lds	r29, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    16b4:	bf 83       	std	Y+7, r27	; 0x07
    16b6:	ae 83       	std	Y+6, r26	; 0x06
    16b8:	c0 91 71 11 	lds	r28, 0x1171	; 0x801171 <pxCurrentTCB>
    16bc:	d0 91 72 11 	lds	r29, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    16c0:	16 96       	adiw	r26, 0x06	; 6
    16c2:	8d 91       	ld	r24, X+
    16c4:	9c 91       	ld	r25, X
    16c6:	17 97       	sbiw	r26, 0x07	; 7
    16c8:	99 87       	std	Y+9, r25	; 0x09
    16ca:	88 87       	std	Y+8, r24	; 0x08
    16cc:	16 96       	adiw	r26, 0x06	; 6
    16ce:	cd 91       	ld	r28, X+
    16d0:	dc 91       	ld	r29, X
    16d2:	17 97       	sbiw	r26, 0x07	; 7
    16d4:	80 91 71 11 	lds	r24, 0x1171	; 0x801171 <pxCurrentTCB>
    16d8:	90 91 72 11 	lds	r25, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    16dc:	02 96       	adiw	r24, 0x02	; 2
    16de:	9d 83       	std	Y+5, r25	; 0x05
    16e0:	8c 83       	std	Y+4, r24	; 0x04
    16e2:	80 91 71 11 	lds	r24, 0x1171	; 0x801171 <pxCurrentTCB>
    16e6:	90 91 72 11 	lds	r25, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    16ea:	02 96       	adiw	r24, 0x02	; 2
    16ec:	17 96       	adiw	r26, 0x07	; 7
    16ee:	9c 93       	st	X, r25
    16f0:	8e 93       	st	-X, r24
    16f2:	16 97       	sbiw	r26, 0x06	; 6
    16f4:	a0 91 71 11 	lds	r26, 0x1171	; 0x801171 <pxCurrentTCB>
    16f8:	b0 91 72 11 	lds	r27, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    16fc:	1d 96       	adiw	r26, 0x0d	; 13
    16fe:	fc 93       	st	X, r31
    1700:	ee 93       	st	-X, r30
    1702:	1c 97       	sbiw	r26, 0x0c	; 12
    1704:	80 81       	ld	r24, Z
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	80 83       	st	Z, r24
    170a:	3f c0       	rjmp	.+126    	; 0x178a <prvAddCurrentTaskToDelayedList+0x12e>
    170c:	c8 0c       	add	r12, r8
    170e:	d9 1c       	adc	r13, r9
    1710:	ea 1c       	adc	r14, r10
    1712:	fb 1c       	adc	r15, r11
    1714:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    1718:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    171c:	c2 82       	std	Z+2, r12	; 0x02
    171e:	d3 82       	std	Z+3, r13	; 0x03
    1720:	e4 82       	std	Z+4, r14	; 0x04
    1722:	f5 82       	std	Z+5, r15	; 0x05
    1724:	c8 14       	cp	r12, r8
    1726:	d9 04       	cpc	r13, r9
    1728:	ea 04       	cpc	r14, r10
    172a:	fb 04       	cpc	r15, r11
    172c:	68 f4       	brcc	.+26     	; 0x1748 <prvAddCurrentTaskToDelayedList+0xec>
    172e:	60 91 71 11 	lds	r22, 0x1171	; 0x801171 <pxCurrentTCB>
    1732:	70 91 72 11 	lds	r23, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1736:	80 91 e9 10 	lds	r24, 0x10E9	; 0x8010e9 <pxOverflowDelayedTaskList>
    173a:	90 91 ea 10 	lds	r25, 0x10EA	; 0x8010ea <pxOverflowDelayedTaskList+0x1>
    173e:	6e 5f       	subi	r22, 0xFE	; 254
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    1746:	21 c0       	rjmp	.+66     	; 0x178a <prvAddCurrentTaskToDelayedList+0x12e>
    1748:	60 91 71 11 	lds	r22, 0x1171	; 0x801171 <pxCurrentTCB>
    174c:	70 91 72 11 	lds	r23, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1750:	80 91 eb 10 	lds	r24, 0x10EB	; 0x8010eb <pxDelayedTaskList>
    1754:	90 91 ec 10 	lds	r25, 0x10EC	; 0x8010ec <pxDelayedTaskList+0x1>
    1758:	6e 5f       	subi	r22, 0xFE	; 254
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    1760:	80 91 b5 10 	lds	r24, 0x10B5	; 0x8010b5 <xNextTaskUnblockTime>
    1764:	90 91 b6 10 	lds	r25, 0x10B6	; 0x8010b6 <xNextTaskUnblockTime+0x1>
    1768:	a0 91 b7 10 	lds	r26, 0x10B7	; 0x8010b7 <xNextTaskUnblockTime+0x2>
    176c:	b0 91 b8 10 	lds	r27, 0x10B8	; 0x8010b8 <xNextTaskUnblockTime+0x3>
    1770:	c8 16       	cp	r12, r24
    1772:	d9 06       	cpc	r13, r25
    1774:	ea 06       	cpc	r14, r26
    1776:	fb 06       	cpc	r15, r27
    1778:	40 f4       	brcc	.+16     	; 0x178a <prvAddCurrentTaskToDelayedList+0x12e>
    177a:	c0 92 b5 10 	sts	0x10B5, r12	; 0x8010b5 <xNextTaskUnblockTime>
    177e:	d0 92 b6 10 	sts	0x10B6, r13	; 0x8010b6 <xNextTaskUnblockTime+0x1>
    1782:	e0 92 b7 10 	sts	0x10B7, r14	; 0x8010b7 <xNextTaskUnblockTime+0x2>
    1786:	f0 92 b8 10 	sts	0x10B8, r15	; 0x8010b8 <xNextTaskUnblockTime+0x3>
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	bf 90       	pop	r11
    1798:	af 90       	pop	r10
    179a:	9f 90       	pop	r9
    179c:	8f 90       	pop	r8
    179e:	08 95       	ret

000017a0 <xTaskCreate>:
    17a0:	2f 92       	push	r2
    17a2:	3f 92       	push	r3
    17a4:	4f 92       	push	r4
    17a6:	5f 92       	push	r5
    17a8:	6f 92       	push	r6
    17aa:	7f 92       	push	r7
    17ac:	8f 92       	push	r8
    17ae:	9f 92       	push	r9
    17b0:	af 92       	push	r10
    17b2:	bf 92       	push	r11
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	3c 01       	movw	r6, r24
    17c4:	1b 01       	movw	r2, r22
    17c6:	4a 01       	movw	r8, r20
    17c8:	29 01       	movw	r4, r18
    17ca:	ca 01       	movw	r24, r20
    17cc:	0e 94 3b 01 	call	0x276	; 0x276 <pvPortMalloc>
    17d0:	6c 01       	movw	r12, r24
    17d2:	89 2b       	or	r24, r25
    17d4:	71 f0       	breq	.+28     	; 0x17f2 <xTaskCreate+0x52>
    17d6:	84 e3       	ldi	r24, 0x34	; 52
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 3b 01 	call	0x276	; 0x276 <pvPortMalloc>
    17de:	ec 01       	movw	r28, r24
    17e0:	89 2b       	or	r24, r25
    17e2:	19 f0       	breq	.+6      	; 0x17ea <xTaskCreate+0x4a>
    17e4:	dc 8e       	std	Y+28, r13	; 0x1c
    17e6:	cb 8e       	std	Y+27, r12	; 0x1b
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <xTaskCreate+0x56>
    17ea:	c6 01       	movw	r24, r12
    17ec:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <vPortFree>
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <xTaskCreate+0x56>
    17f2:	c0 e0       	ldi	r28, 0x00	; 0
    17f4:	d0 e0       	ldi	r29, 0x00	; 0
    17f6:	20 97       	sbiw	r28, 0x00	; 0
    17f8:	61 f0       	breq	.+24     	; 0x1812 <xTaskCreate+0x72>
    17fa:	a1 2c       	mov	r10, r1
    17fc:	b1 2c       	mov	r11, r1
    17fe:	6e 01       	movw	r12, r28
    1800:	92 01       	movw	r18, r4
    1802:	a4 01       	movw	r20, r8
    1804:	b1 01       	movw	r22, r2
    1806:	c3 01       	movw	r24, r6
    1808:	e9 dd       	rcall	.-1070   	; 0x13dc <prvInitialiseNewTask>
    180a:	ce 01       	movw	r24, r28
    180c:	93 de       	rcall	.-730    	; 0x1534 <prvAddNewTaskToReadyList>
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <xTaskCreate+0x74>
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	6f 90       	pop	r6
    182e:	5f 90       	pop	r5
    1830:	4f 90       	pop	r4
    1832:	3f 90       	pop	r3
    1834:	2f 90       	pop	r2
    1836:	08 95       	ret

00001838 <vTaskStartScheduler>:
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	0f 2e       	mov	r0, r31
    1840:	f3 eb       	ldi	r31, 0xB3	; 179
    1842:	ef 2e       	mov	r14, r31
    1844:	f0 e1       	ldi	r31, 0x10	; 16
    1846:	ff 2e       	mov	r15, r31
    1848:	f0 2d       	mov	r31, r0
    184a:	00 e0       	ldi	r16, 0x00	; 0
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 ec       	ldi	r20, 0xC0	; 192
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	67 e7       	ldi	r22, 0x77	; 119
    1856:	72 e0       	ldi	r23, 0x02	; 2
    1858:	8c e7       	ldi	r24, 0x7C	; 124
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a1 df       	rcall	.-190    	; 0x17a0 <xTaskCreate>
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	11 f4       	brne	.+4      	; 0x1866 <vTaskStartScheduler+0x2e>
    1862:	0e 94 c0 14 	call	0x2980	; 0x2980 <xTimerCreateTimerTask>
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	c9 f4       	brne	.+50     	; 0x189c <vTaskStartScheduler+0x64>
    186a:	f8 94       	cli
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	9f ef       	ldi	r25, 0xFF	; 255
    1870:	dc 01       	movw	r26, r24
    1872:	80 93 b5 10 	sts	0x10B5, r24	; 0x8010b5 <xNextTaskUnblockTime>
    1876:	90 93 b6 10 	sts	0x10B6, r25	; 0x8010b6 <xNextTaskUnblockTime+0x1>
    187a:	a0 93 b7 10 	sts	0x10B7, r26	; 0x8010b7 <xNextTaskUnblockTime+0x2>
    187e:	b0 93 b8 10 	sts	0x10B8, r27	; 0x8010b8 <xNextTaskUnblockTime+0x3>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	80 93 c0 10 	sts	0x10C0, r24	; 0x8010c0 <xSchedulerRunning>
    1888:	10 92 c2 10 	sts	0x10C2, r1	; 0x8010c2 <xTickCount>
    188c:	10 92 c3 10 	sts	0x10C3, r1	; 0x8010c3 <xTickCount+0x1>
    1890:	10 92 c4 10 	sts	0x10C4, r1	; 0x8010c4 <xTickCount+0x2>
    1894:	10 92 c5 10 	sts	0x10C5, r1	; 0x8010c5 <xTickCount+0x3>
    1898:	0e 94 bd 02 	call	0x57a	; 0x57a <xPortStartScheduler>
    189c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	08 95       	ret

000018a8 <vTaskSuspendAll>:
    18a8:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxSchedulerSuspended>
    18ac:	8f 5f       	subi	r24, 0xFF	; 255
    18ae:	80 93 b2 10 	sts	0x10B2, r24	; 0x8010b2 <uxSchedulerSuspended>
    18b2:	08 95       	ret

000018b4 <xTaskGetTickCount>:
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	0f 92       	push	r0
    18ba:	60 91 c2 10 	lds	r22, 0x10C2	; 0x8010c2 <xTickCount>
    18be:	70 91 c3 10 	lds	r23, 0x10C3	; 0x8010c3 <xTickCount+0x1>
    18c2:	80 91 c4 10 	lds	r24, 0x10C4	; 0x8010c4 <xTickCount+0x2>
    18c6:	90 91 c5 10 	lds	r25, 0x10C5	; 0x8010c5 <xTickCount+0x3>
    18ca:	0f 90       	pop	r0
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	08 95       	ret

000018d0 <xTaskIncrementTick>:
    18d0:	cf 92       	push	r12
    18d2:	df 92       	push	r13
    18d4:	ef 92       	push	r14
    18d6:	ff 92       	push	r15
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxSchedulerSuspended>
    18e0:	81 11       	cpse	r24, r1
    18e2:	05 c1       	rjmp	.+522    	; 0x1aee <xTaskIncrementTick+0x21e>
    18e4:	c0 90 c2 10 	lds	r12, 0x10C2	; 0x8010c2 <xTickCount>
    18e8:	d0 90 c3 10 	lds	r13, 0x10C3	; 0x8010c3 <xTickCount+0x1>
    18ec:	e0 90 c4 10 	lds	r14, 0x10C4	; 0x8010c4 <xTickCount+0x2>
    18f0:	f0 90 c5 10 	lds	r15, 0x10C5	; 0x8010c5 <xTickCount+0x3>
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	c8 1a       	sub	r12, r24
    18f8:	d8 0a       	sbc	r13, r24
    18fa:	e8 0a       	sbc	r14, r24
    18fc:	f8 0a       	sbc	r15, r24
    18fe:	c0 92 c2 10 	sts	0x10C2, r12	; 0x8010c2 <xTickCount>
    1902:	d0 92 c3 10 	sts	0x10C3, r13	; 0x8010c3 <xTickCount+0x1>
    1906:	e0 92 c4 10 	sts	0x10C4, r14	; 0x8010c4 <xTickCount+0x2>
    190a:	f0 92 c5 10 	sts	0x10C5, r15	; 0x8010c5 <xTickCount+0x3>
    190e:	c1 14       	cp	r12, r1
    1910:	d1 04       	cpc	r13, r1
    1912:	e1 04       	cpc	r14, r1
    1914:	f1 04       	cpc	r15, r1
    1916:	b1 f4       	brne	.+44     	; 0x1944 <xTaskIncrementTick+0x74>
    1918:	80 91 eb 10 	lds	r24, 0x10EB	; 0x8010eb <pxDelayedTaskList>
    191c:	90 91 ec 10 	lds	r25, 0x10EC	; 0x8010ec <pxDelayedTaskList+0x1>
    1920:	20 91 e9 10 	lds	r18, 0x10E9	; 0x8010e9 <pxOverflowDelayedTaskList>
    1924:	30 91 ea 10 	lds	r19, 0x10EA	; 0x8010ea <pxOverflowDelayedTaskList+0x1>
    1928:	30 93 ec 10 	sts	0x10EC, r19	; 0x8010ec <pxDelayedTaskList+0x1>
    192c:	20 93 eb 10 	sts	0x10EB, r18	; 0x8010eb <pxDelayedTaskList>
    1930:	90 93 ea 10 	sts	0x10EA, r25	; 0x8010ea <pxOverflowDelayedTaskList+0x1>
    1934:	80 93 e9 10 	sts	0x10E9, r24	; 0x8010e9 <pxOverflowDelayedTaskList>
    1938:	80 91 ba 10 	lds	r24, 0x10BA	; 0x8010ba <xNumOfOverflows>
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	80 93 ba 10 	sts	0x10BA, r24	; 0x8010ba <xNumOfOverflows>
    1942:	18 dd       	rcall	.-1488   	; 0x1374 <prvResetNextTaskUnblockTime>
    1944:	80 91 b5 10 	lds	r24, 0x10B5	; 0x8010b5 <xNextTaskUnblockTime>
    1948:	90 91 b6 10 	lds	r25, 0x10B6	; 0x8010b6 <xNextTaskUnblockTime+0x1>
    194c:	a0 91 b7 10 	lds	r26, 0x10B7	; 0x8010b7 <xNextTaskUnblockTime+0x2>
    1950:	b0 91 b8 10 	lds	r27, 0x10B8	; 0x8010b8 <xNextTaskUnblockTime+0x3>
    1954:	c8 16       	cp	r12, r24
    1956:	d9 06       	cpc	r13, r25
    1958:	ea 06       	cpc	r14, r26
    195a:	fb 06       	cpc	r15, r27
    195c:	20 f4       	brcc	.+8      	; 0x1966 <xTaskIncrementTick+0x96>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	b2 c0       	rjmp	.+356    	; 0x1ac6 <xTaskIncrementTick+0x1f6>
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <xTaskIncrementTick+0x98>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	e0 91 eb 10 	lds	r30, 0x10EB	; 0x8010eb <pxDelayedTaskList>
    196c:	f0 91 ec 10 	lds	r31, 0x10EC	; 0x8010ec <pxDelayedTaskList+0x1>
    1970:	90 81       	ld	r25, Z
    1972:	91 11       	cpse	r25, r1
    1974:	0c c0       	rjmp	.+24     	; 0x198e <xTaskIncrementTick+0xbe>
    1976:	4f ef       	ldi	r20, 0xFF	; 255
    1978:	5f ef       	ldi	r21, 0xFF	; 255
    197a:	ba 01       	movw	r22, r20
    197c:	40 93 b5 10 	sts	0x10B5, r20	; 0x8010b5 <xNextTaskUnblockTime>
    1980:	50 93 b6 10 	sts	0x10B6, r21	; 0x8010b6 <xNextTaskUnblockTime+0x1>
    1984:	60 93 b7 10 	sts	0x10B7, r22	; 0x8010b7 <xNextTaskUnblockTime+0x2>
    1988:	70 93 b8 10 	sts	0x10B8, r23	; 0x8010b8 <xNextTaskUnblockTime+0x3>
    198c:	9c c0       	rjmp	.+312    	; 0x1ac6 <xTaskIncrementTick+0x1f6>
    198e:	e0 91 eb 10 	lds	r30, 0x10EB	; 0x8010eb <pxDelayedTaskList>
    1992:	f0 91 ec 10 	lds	r31, 0x10EC	; 0x8010ec <pxDelayedTaskList+0x1>
    1996:	07 80       	ldd	r0, Z+7	; 0x07
    1998:	f0 85       	ldd	r31, Z+8	; 0x08
    199a:	e0 2d       	mov	r30, r0
    199c:	00 84       	ldd	r0, Z+8	; 0x08
    199e:	f1 85       	ldd	r31, Z+9	; 0x09
    19a0:	e0 2d       	mov	r30, r0
    19a2:	42 81       	ldd	r20, Z+2	; 0x02
    19a4:	53 81       	ldd	r21, Z+3	; 0x03
    19a6:	64 81       	ldd	r22, Z+4	; 0x04
    19a8:	75 81       	ldd	r23, Z+5	; 0x05
    19aa:	c4 16       	cp	r12, r20
    19ac:	d5 06       	cpc	r13, r21
    19ae:	e6 06       	cpc	r14, r22
    19b0:	f7 06       	cpc	r15, r23
    19b2:	48 f4       	brcc	.+18     	; 0x19c6 <xTaskIncrementTick+0xf6>
    19b4:	40 93 b5 10 	sts	0x10B5, r20	; 0x8010b5 <xNextTaskUnblockTime>
    19b8:	50 93 b6 10 	sts	0x10B6, r21	; 0x8010b6 <xNextTaskUnblockTime+0x1>
    19bc:	60 93 b7 10 	sts	0x10B7, r22	; 0x8010b7 <xNextTaskUnblockTime+0x2>
    19c0:	70 93 b8 10 	sts	0x10B8, r23	; 0x8010b8 <xNextTaskUnblockTime+0x3>
    19c4:	80 c0       	rjmp	.+256    	; 0x1ac6 <xTaskIncrementTick+0x1f6>
    19c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    19c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    19ca:	c6 81       	ldd	r28, Z+6	; 0x06
    19cc:	d7 81       	ldd	r29, Z+7	; 0x07
    19ce:	20 85       	ldd	r18, Z+8	; 0x08
    19d0:	31 85       	ldd	r19, Z+9	; 0x09
    19d2:	3f 83       	std	Y+7, r19	; 0x07
    19d4:	2e 83       	std	Y+6, r18	; 0x06
    19d6:	c0 85       	ldd	r28, Z+8	; 0x08
    19d8:	d1 85       	ldd	r29, Z+9	; 0x09
    19da:	26 81       	ldd	r18, Z+6	; 0x06
    19dc:	37 81       	ldd	r19, Z+7	; 0x07
    19de:	3d 83       	std	Y+5, r19	; 0x05
    19e0:	2c 83       	std	Y+4, r18	; 0x04
    19e2:	11 96       	adiw	r26, 0x01	; 1
    19e4:	4d 91       	ld	r20, X+
    19e6:	5c 91       	ld	r21, X
    19e8:	12 97       	sbiw	r26, 0x02	; 2
    19ea:	9f 01       	movw	r18, r30
    19ec:	2e 5f       	subi	r18, 0xFE	; 254
    19ee:	3f 4f       	sbci	r19, 0xFF	; 255
    19f0:	42 17       	cp	r20, r18
    19f2:	53 07       	cpc	r21, r19
    19f4:	31 f4       	brne	.+12     	; 0x1a02 <xTaskIncrementTick+0x132>
    19f6:	40 85       	ldd	r20, Z+8	; 0x08
    19f8:	51 85       	ldd	r21, Z+9	; 0x09
    19fa:	12 96       	adiw	r26, 0x02	; 2
    19fc:	5c 93       	st	X, r21
    19fe:	4e 93       	st	-X, r20
    1a00:	11 97       	sbiw	r26, 0x01	; 1
    1a02:	15 86       	std	Z+13, r1	; 0x0d
    1a04:	14 86       	std	Z+12, r1	; 0x0c
    1a06:	9c 91       	ld	r25, X
    1a08:	91 50       	subi	r25, 0x01	; 1
    1a0a:	9c 93       	st	X, r25
    1a0c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a0e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a10:	10 97       	sbiw	r26, 0x00	; 0
    1a12:	09 f1       	breq	.+66     	; 0x1a56 <xTaskIncrementTick+0x186>
    1a14:	c2 89       	ldd	r28, Z+18	; 0x12
    1a16:	d3 89       	ldd	r29, Z+19	; 0x13
    1a18:	44 89       	ldd	r20, Z+20	; 0x14
    1a1a:	55 89       	ldd	r21, Z+21	; 0x15
    1a1c:	5f 83       	std	Y+7, r21	; 0x07
    1a1e:	4e 83       	std	Y+6, r20	; 0x06
    1a20:	c4 89       	ldd	r28, Z+20	; 0x14
    1a22:	d5 89       	ldd	r29, Z+21	; 0x15
    1a24:	42 89       	ldd	r20, Z+18	; 0x12
    1a26:	53 89       	ldd	r21, Z+19	; 0x13
    1a28:	5d 83       	std	Y+5, r21	; 0x05
    1a2a:	4c 83       	std	Y+4, r20	; 0x04
    1a2c:	11 96       	adiw	r26, 0x01	; 1
    1a2e:	6d 91       	ld	r22, X+
    1a30:	7c 91       	ld	r23, X
    1a32:	12 97       	sbiw	r26, 0x02	; 2
    1a34:	af 01       	movw	r20, r30
    1a36:	42 5f       	subi	r20, 0xF2	; 242
    1a38:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3a:	64 17       	cp	r22, r20
    1a3c:	75 07       	cpc	r23, r21
    1a3e:	31 f4       	brne	.+12     	; 0x1a4c <xTaskIncrementTick+0x17c>
    1a40:	44 89       	ldd	r20, Z+20	; 0x14
    1a42:	55 89       	ldd	r21, Z+21	; 0x15
    1a44:	12 96       	adiw	r26, 0x02	; 2
    1a46:	5c 93       	st	X, r21
    1a48:	4e 93       	st	-X, r20
    1a4a:	11 97       	sbiw	r26, 0x01	; 1
    1a4c:	11 8e       	std	Z+25, r1	; 0x19
    1a4e:	10 8e       	std	Z+24, r1	; 0x18
    1a50:	9c 91       	ld	r25, X
    1a52:	91 50       	subi	r25, 0x01	; 1
    1a54:	9c 93       	st	X, r25
    1a56:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a58:	90 91 c1 10 	lds	r25, 0x10C1	; 0x8010c1 <uxTopReadyPriority>
    1a5c:	9a 17       	cp	r25, r26
    1a5e:	10 f4       	brcc	.+4      	; 0x1a64 <xTaskIncrementTick+0x194>
    1a60:	a0 93 c1 10 	sts	0x10C1, r26	; 0x8010c1 <uxTopReadyPriority>
    1a64:	9b e0       	ldi	r25, 0x0B	; 11
    1a66:	9a 9f       	mul	r25, r26
    1a68:	d0 01       	movw	r26, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	ad 5f       	subi	r26, 0xFD	; 253
    1a6e:	be 4e       	sbci	r27, 0xEE	; 238
    1a70:	11 96       	adiw	r26, 0x01	; 1
    1a72:	0d 90       	ld	r0, X+
    1a74:	bc 91       	ld	r27, X
    1a76:	a0 2d       	mov	r26, r0
    1a78:	b7 83       	std	Z+7, r27	; 0x07
    1a7a:	a6 83       	std	Z+6, r26	; 0x06
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	4d 91       	ld	r20, X+
    1a80:	5c 91       	ld	r21, X
    1a82:	17 97       	sbiw	r26, 0x07	; 7
    1a84:	51 87       	std	Z+9, r21	; 0x09
    1a86:	40 87       	std	Z+8, r20	; 0x08
    1a88:	16 96       	adiw	r26, 0x06	; 6
    1a8a:	cd 91       	ld	r28, X+
    1a8c:	dc 91       	ld	r29, X
    1a8e:	17 97       	sbiw	r26, 0x07	; 7
    1a90:	3d 83       	std	Y+5, r19	; 0x05
    1a92:	2c 83       	std	Y+4, r18	; 0x04
    1a94:	17 96       	adiw	r26, 0x07	; 7
    1a96:	3c 93       	st	X, r19
    1a98:	2e 93       	st	-X, r18
    1a9a:	16 97       	sbiw	r26, 0x06	; 6
    1a9c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a9e:	9a 9f       	mul	r25, r26
    1aa0:	d0 01       	movw	r26, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	ad 5f       	subi	r26, 0xFD	; 253
    1aa6:	be 4e       	sbci	r27, 0xEE	; 238
    1aa8:	b5 87       	std	Z+13, r27	; 0x0d
    1aaa:	a4 87       	std	Z+12, r26	; 0x0c
    1aac:	9c 91       	ld	r25, X
    1aae:	9f 5f       	subi	r25, 0xFF	; 255
    1ab0:	9c 93       	st	X, r25
    1ab2:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ab4:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    1ab8:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1abc:	92 8d       	ldd	r25, Z+26	; 0x1a
    1abe:	29 17       	cp	r18, r25
    1ac0:	08 f0       	brcs	.+2      	; 0x1ac4 <xTaskIncrementTick+0x1f4>
    1ac2:	4f cf       	rjmp	.-354    	; 0x1962 <xTaskIncrementTick+0x92>
    1ac4:	51 cf       	rjmp	.-350    	; 0x1968 <xTaskIncrementTick+0x98>
    1ac6:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    1aca:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1ace:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1ad0:	9b e0       	ldi	r25, 0x0B	; 11
    1ad2:	e9 9f       	mul	r30, r25
    1ad4:	f0 01       	movw	r30, r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	ed 5f       	subi	r30, 0xFD	; 253
    1ada:	fe 4e       	sbci	r31, 0xEE	; 238
    1adc:	90 81       	ld	r25, Z
    1ade:	92 30       	cpi	r25, 0x02	; 2
    1ae0:	08 f0       	brcs	.+2      	; 0x1ae4 <xTaskIncrementTick+0x214>
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 91 bb 10 	lds	r25, 0x10BB	; 0x8010bb <xYieldPending>
    1ae8:	91 11       	cpse	r25, r1
    1aea:	16 c0       	rjmp	.+44     	; 0x1b18 <xTaskIncrementTick+0x248>
    1aec:	16 c0       	rjmp	.+44     	; 0x1b1a <xTaskIncrementTick+0x24a>
    1aee:	80 91 bc 10 	lds	r24, 0x10BC	; 0x8010bc <xPendedTicks>
    1af2:	90 91 bd 10 	lds	r25, 0x10BD	; 0x8010bd <xPendedTicks+0x1>
    1af6:	a0 91 be 10 	lds	r26, 0x10BE	; 0x8010be <xPendedTicks+0x2>
    1afa:	b0 91 bf 10 	lds	r27, 0x10BF	; 0x8010bf <xPendedTicks+0x3>
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	a1 1d       	adc	r26, r1
    1b02:	b1 1d       	adc	r27, r1
    1b04:	80 93 bc 10 	sts	0x10BC, r24	; 0x8010bc <xPendedTicks>
    1b08:	90 93 bd 10 	sts	0x10BD, r25	; 0x8010bd <xPendedTicks+0x1>
    1b0c:	a0 93 be 10 	sts	0x10BE, r26	; 0x8010be <xPendedTicks+0x2>
    1b10:	b0 93 bf 10 	sts	0x10BF, r27	; 0x8010bf <xPendedTicks+0x3>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <xTaskIncrementTick+0x24a>
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	ff 90       	pop	r15
    1b20:	ef 90       	pop	r14
    1b22:	df 90       	pop	r13
    1b24:	cf 90       	pop	r12
    1b26:	08 95       	ret

00001b28 <xTaskResumeAll>:
    1b28:	cf 92       	push	r12
    1b2a:	df 92       	push	r13
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	0f 92       	push	r0
    1b3a:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxSchedulerSuspended>
    1b3e:	81 50       	subi	r24, 0x01	; 1
    1b40:	80 93 b2 10 	sts	0x10B2, r24	; 0x8010b2 <uxSchedulerSuspended>
    1b44:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxSchedulerSuspended>
    1b48:	81 11       	cpse	r24, r1
    1b4a:	be c0       	rjmp	.+380    	; 0x1cc8 <xTaskResumeAll+0x1a0>
    1b4c:	80 91 c6 10 	lds	r24, 0x10C6	; 0x8010c6 <uxCurrentNumberOfTasks>
    1b50:	81 11       	cpse	r24, r1
    1b52:	88 c0       	rjmp	.+272    	; 0x1c64 <xTaskResumeAll+0x13c>
    1b54:	bc c0       	rjmp	.+376    	; 0x1cce <xTaskResumeAll+0x1a6>
    1b56:	e0 91 e5 10 	lds	r30, 0x10E5	; 0x8010e5 <xPendingReadyList+0x7>
    1b5a:	f0 91 e6 10 	lds	r31, 0x10E6	; 0x8010e6 <xPendingReadyList+0x8>
    1b5e:	00 84       	ldd	r0, Z+8	; 0x08
    1b60:	f1 85       	ldd	r31, Z+9	; 0x09
    1b62:	e0 2d       	mov	r30, r0
    1b64:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b66:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b68:	c2 89       	ldd	r28, Z+18	; 0x12
    1b6a:	d3 89       	ldd	r29, Z+19	; 0x13
    1b6c:	84 89       	ldd	r24, Z+20	; 0x14
    1b6e:	95 89       	ldd	r25, Z+21	; 0x15
    1b70:	9f 83       	std	Y+7, r25	; 0x07
    1b72:	8e 83       	std	Y+6, r24	; 0x06
    1b74:	c4 89       	ldd	r28, Z+20	; 0x14
    1b76:	d5 89       	ldd	r29, Z+21	; 0x15
    1b78:	82 89       	ldd	r24, Z+18	; 0x12
    1b7a:	93 89       	ldd	r25, Z+19	; 0x13
    1b7c:	9d 83       	std	Y+5, r25	; 0x05
    1b7e:	8c 83       	std	Y+4, r24	; 0x04
    1b80:	11 96       	adiw	r26, 0x01	; 1
    1b82:	2d 91       	ld	r18, X+
    1b84:	3c 91       	ld	r19, X
    1b86:	12 97       	sbiw	r26, 0x02	; 2
    1b88:	cf 01       	movw	r24, r30
    1b8a:	0e 96       	adiw	r24, 0x0e	; 14
    1b8c:	28 17       	cp	r18, r24
    1b8e:	39 07       	cpc	r19, r25
    1b90:	31 f4       	brne	.+12     	; 0x1b9e <xTaskResumeAll+0x76>
    1b92:	84 89       	ldd	r24, Z+20	; 0x14
    1b94:	95 89       	ldd	r25, Z+21	; 0x15
    1b96:	12 96       	adiw	r26, 0x02	; 2
    1b98:	9c 93       	st	X, r25
    1b9a:	8e 93       	st	-X, r24
    1b9c:	11 97       	sbiw	r26, 0x01	; 1
    1b9e:	11 8e       	std	Z+25, r1	; 0x19
    1ba0:	10 8e       	std	Z+24, r1	; 0x18
    1ba2:	8c 91       	ld	r24, X
    1ba4:	81 50       	subi	r24, 0x01	; 1
    1ba6:	8c 93       	st	X, r24
    1ba8:	a4 85       	ldd	r26, Z+12	; 0x0c
    1baa:	b5 85       	ldd	r27, Z+13	; 0x0d
    1bac:	c6 81       	ldd	r28, Z+6	; 0x06
    1bae:	d7 81       	ldd	r29, Z+7	; 0x07
    1bb0:	80 85       	ldd	r24, Z+8	; 0x08
    1bb2:	91 85       	ldd	r25, Z+9	; 0x09
    1bb4:	9f 83       	std	Y+7, r25	; 0x07
    1bb6:	8e 83       	std	Y+6, r24	; 0x06
    1bb8:	c0 85       	ldd	r28, Z+8	; 0x08
    1bba:	d1 85       	ldd	r29, Z+9	; 0x09
    1bbc:	86 81       	ldd	r24, Z+6	; 0x06
    1bbe:	97 81       	ldd	r25, Z+7	; 0x07
    1bc0:	9d 83       	std	Y+5, r25	; 0x05
    1bc2:	8c 83       	std	Y+4, r24	; 0x04
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	8d 91       	ld	r24, X+
    1bc8:	9c 91       	ld	r25, X
    1bca:	12 97       	sbiw	r26, 0x02	; 2
    1bcc:	9f 01       	movw	r18, r30
    1bce:	2e 5f       	subi	r18, 0xFE	; 254
    1bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd2:	82 17       	cp	r24, r18
    1bd4:	93 07       	cpc	r25, r19
    1bd6:	31 f4       	brne	.+12     	; 0x1be4 <xTaskResumeAll+0xbc>
    1bd8:	80 85       	ldd	r24, Z+8	; 0x08
    1bda:	91 85       	ldd	r25, Z+9	; 0x09
    1bdc:	12 96       	adiw	r26, 0x02	; 2
    1bde:	9c 93       	st	X, r25
    1be0:	8e 93       	st	-X, r24
    1be2:	11 97       	sbiw	r26, 0x01	; 1
    1be4:	15 86       	std	Z+13, r1	; 0x0d
    1be6:	14 86       	std	Z+12, r1	; 0x0c
    1be8:	8c 91       	ld	r24, X
    1bea:	81 50       	subi	r24, 0x01	; 1
    1bec:	8c 93       	st	X, r24
    1bee:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bf0:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <uxTopReadyPriority>
    1bf4:	8a 17       	cp	r24, r26
    1bf6:	10 f4       	brcc	.+4      	; 0x1bfc <xTaskResumeAll+0xd4>
    1bf8:	a0 93 c1 10 	sts	0x10C1, r26	; 0x8010c1 <uxTopReadyPriority>
    1bfc:	8b e0       	ldi	r24, 0x0B	; 11
    1bfe:	8a 9f       	mul	r24, r26
    1c00:	d0 01       	movw	r26, r0
    1c02:	11 24       	eor	r1, r1
    1c04:	ad 5f       	subi	r26, 0xFD	; 253
    1c06:	be 4e       	sbci	r27, 0xEE	; 238
    1c08:	11 96       	adiw	r26, 0x01	; 1
    1c0a:	0d 90       	ld	r0, X+
    1c0c:	bc 91       	ld	r27, X
    1c0e:	a0 2d       	mov	r26, r0
    1c10:	b7 83       	std	Z+7, r27	; 0x07
    1c12:	a6 83       	std	Z+6, r26	; 0x06
    1c14:	16 96       	adiw	r26, 0x06	; 6
    1c16:	4d 91       	ld	r20, X+
    1c18:	5c 91       	ld	r21, X
    1c1a:	17 97       	sbiw	r26, 0x07	; 7
    1c1c:	51 87       	std	Z+9, r21	; 0x09
    1c1e:	40 87       	std	Z+8, r20	; 0x08
    1c20:	16 96       	adiw	r26, 0x06	; 6
    1c22:	cd 91       	ld	r28, X+
    1c24:	dc 91       	ld	r29, X
    1c26:	17 97       	sbiw	r26, 0x07	; 7
    1c28:	3d 83       	std	Y+5, r19	; 0x05
    1c2a:	2c 83       	std	Y+4, r18	; 0x04
    1c2c:	17 96       	adiw	r26, 0x07	; 7
    1c2e:	3c 93       	st	X, r19
    1c30:	2e 93       	st	-X, r18
    1c32:	16 97       	sbiw	r26, 0x06	; 6
    1c34:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c36:	8a 9f       	mul	r24, r26
    1c38:	d0 01       	movw	r26, r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	ad 5f       	subi	r26, 0xFD	; 253
    1c3e:	be 4e       	sbci	r27, 0xEE	; 238
    1c40:	b5 87       	std	Z+13, r27	; 0x0d
    1c42:	a4 87       	std	Z+12, r26	; 0x0c
    1c44:	8c 91       	ld	r24, X
    1c46:	8f 5f       	subi	r24, 0xFF	; 255
    1c48:	8c 93       	st	X, r24
    1c4a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c4c:	a0 91 71 11 	lds	r26, 0x1171	; 0x801171 <pxCurrentTCB>
    1c50:	b0 91 72 11 	lds	r27, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1c54:	5a 96       	adiw	r26, 0x1a	; 26
    1c56:	8c 91       	ld	r24, X
    1c58:	98 17       	cp	r25, r24
    1c5a:	30 f0       	brcs	.+12     	; 0x1c68 <xTaskResumeAll+0x140>
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	80 93 bb 10 	sts	0x10BB, r24	; 0x8010bb <xYieldPending>
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <xTaskResumeAll+0x140>
    1c64:	e0 e0       	ldi	r30, 0x00	; 0
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 91 de 10 	lds	r24, 0x10DE	; 0x8010de <xPendingReadyList>
    1c6c:	81 11       	cpse	r24, r1
    1c6e:	73 cf       	rjmp	.-282    	; 0x1b56 <xTaskResumeAll+0x2e>
    1c70:	ef 2b       	or	r30, r31
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <xTaskResumeAll+0x14e>
    1c74:	7f db       	rcall	.-2306   	; 0x1374 <prvResetNextTaskUnblockTime>
    1c76:	c0 90 bc 10 	lds	r12, 0x10BC	; 0x8010bc <xPendedTicks>
    1c7a:	d0 90 bd 10 	lds	r13, 0x10BD	; 0x8010bd <xPendedTicks+0x1>
    1c7e:	e0 90 be 10 	lds	r14, 0x10BE	; 0x8010be <xPendedTicks+0x2>
    1c82:	f0 90 bf 10 	lds	r15, 0x10BF	; 0x8010bf <xPendedTicks+0x3>
    1c86:	c1 14       	cp	r12, r1
    1c88:	d1 04       	cpc	r13, r1
    1c8a:	e1 04       	cpc	r14, r1
    1c8c:	f1 04       	cpc	r15, r1
    1c8e:	a1 f0       	breq	.+40     	; 0x1cb8 <xTaskResumeAll+0x190>
    1c90:	1f de       	rcall	.-962    	; 0x18d0 <xTaskIncrementTick>
    1c92:	88 23       	and	r24, r24
    1c94:	19 f0       	breq	.+6      	; 0x1c9c <xTaskResumeAll+0x174>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	80 93 bb 10 	sts	0x10BB, r24	; 0x8010bb <xYieldPending>
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	c8 1a       	sub	r12, r24
    1ca0:	d1 08       	sbc	r13, r1
    1ca2:	e1 08       	sbc	r14, r1
    1ca4:	f1 08       	sbc	r15, r1
    1ca6:	a1 f7       	brne	.-24     	; 0x1c90 <xTaskResumeAll+0x168>
    1ca8:	10 92 bc 10 	sts	0x10BC, r1	; 0x8010bc <xPendedTicks>
    1cac:	10 92 bd 10 	sts	0x10BD, r1	; 0x8010bd <xPendedTicks+0x1>
    1cb0:	10 92 be 10 	sts	0x10BE, r1	; 0x8010be <xPendedTicks+0x2>
    1cb4:	10 92 bf 10 	sts	0x10BF, r1	; 0x8010bf <xPendedTicks+0x3>
    1cb8:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <xYieldPending>
    1cbc:	88 23       	and	r24, r24
    1cbe:	31 f0       	breq	.+12     	; 0x1ccc <xTaskResumeAll+0x1a4>
    1cc0:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	03 c0       	rjmp	.+6      	; 0x1cce <xTaskResumeAll+0x1a6>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <xTaskResumeAll+0x1a6>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	ff 90       	pop	r15
    1cd8:	ef 90       	pop	r14
    1cda:	df 90       	pop	r13
    1cdc:	cf 90       	pop	r12
    1cde:	08 95       	ret

00001ce0 <xTaskDelayUntil>:
    1ce0:	8f 92       	push	r8
    1ce2:	9f 92       	push	r9
    1ce4:	af 92       	push	r10
    1ce6:	bf 92       	push	r11
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	ec 01       	movw	r28, r24
    1cf8:	6a 01       	movw	r12, r20
    1cfa:	7b 01       	movw	r14, r22
    1cfc:	d5 dd       	rcall	.-1110   	; 0x18a8 <vTaskSuspendAll>
    1cfe:	80 90 c2 10 	lds	r8, 0x10C2	; 0x8010c2 <xTickCount>
    1d02:	90 90 c3 10 	lds	r9, 0x10C3	; 0x8010c3 <xTickCount+0x1>
    1d06:	a0 90 c4 10 	lds	r10, 0x10C4	; 0x8010c4 <xTickCount+0x2>
    1d0a:	b0 90 c5 10 	lds	r11, 0x10C5	; 0x8010c5 <xTickCount+0x3>
    1d0e:	88 81       	ld	r24, Y
    1d10:	99 81       	ldd	r25, Y+1	; 0x01
    1d12:	aa 81       	ldd	r26, Y+2	; 0x02
    1d14:	bb 81       	ldd	r27, Y+3	; 0x03
    1d16:	ac 01       	movw	r20, r24
    1d18:	bd 01       	movw	r22, r26
    1d1a:	4c 0d       	add	r20, r12
    1d1c:	5d 1d       	adc	r21, r13
    1d1e:	6e 1d       	adc	r22, r14
    1d20:	7f 1d       	adc	r23, r15
    1d22:	88 16       	cp	r8, r24
    1d24:	99 06       	cpc	r9, r25
    1d26:	aa 06       	cpc	r10, r26
    1d28:	bb 06       	cpc	r11, r27
    1d2a:	60 f4       	brcc	.+24     	; 0x1d44 <xTaskDelayUntil+0x64>
    1d2c:	48 17       	cp	r20, r24
    1d2e:	59 07       	cpc	r21, r25
    1d30:	6a 07       	cpc	r22, r26
    1d32:	7b 07       	cpc	r23, r27
    1d34:	98 f4       	brcc	.+38     	; 0x1d5c <xTaskDelayUntil+0x7c>
    1d36:	84 16       	cp	r8, r20
    1d38:	95 06       	cpc	r9, r21
    1d3a:	a6 06       	cpc	r10, r22
    1d3c:	b7 06       	cpc	r11, r23
    1d3e:	80 f0       	brcs	.+32     	; 0x1d60 <xTaskDelayUntil+0x80>
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	13 c0       	rjmp	.+38     	; 0x1d6a <xTaskDelayUntil+0x8a>
    1d44:	48 17       	cp	r20, r24
    1d46:	59 07       	cpc	r21, r25
    1d48:	6a 07       	cpc	r22, r26
    1d4a:	7b 07       	cpc	r23, r27
    1d4c:	58 f0       	brcs	.+22     	; 0x1d64 <xTaskDelayUntil+0x84>
    1d4e:	84 16       	cp	r8, r20
    1d50:	95 06       	cpc	r9, r21
    1d52:	a6 06       	cpc	r10, r22
    1d54:	b7 06       	cpc	r11, r23
    1d56:	40 f0       	brcs	.+16     	; 0x1d68 <xTaskDelayUntil+0x88>
    1d58:	10 e0       	ldi	r17, 0x00	; 0
    1d5a:	07 c0       	rjmp	.+14     	; 0x1d6a <xTaskDelayUntil+0x8a>
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
    1d5e:	05 c0       	rjmp	.+10     	; 0x1d6a <xTaskDelayUntil+0x8a>
    1d60:	11 e0       	ldi	r17, 0x01	; 1
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <xTaskDelayUntil+0x8a>
    1d64:	11 e0       	ldi	r17, 0x01	; 1
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <xTaskDelayUntil+0x8a>
    1d68:	11 e0       	ldi	r17, 0x01	; 1
    1d6a:	48 83       	st	Y, r20
    1d6c:	59 83       	std	Y+1, r21	; 0x01
    1d6e:	6a 83       	std	Y+2, r22	; 0x02
    1d70:	7b 83       	std	Y+3, r23	; 0x03
    1d72:	11 23       	and	r17, r17
    1d74:	41 f0       	breq	.+16     	; 0x1d86 <xTaskDelayUntil+0xa6>
    1d76:	cb 01       	movw	r24, r22
    1d78:	ba 01       	movw	r22, r20
    1d7a:	68 19       	sub	r22, r8
    1d7c:	79 09       	sbc	r23, r9
    1d7e:	8a 09       	sbc	r24, r10
    1d80:	9b 09       	sbc	r25, r11
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	6b dc       	rcall	.-1834   	; 0x165c <prvAddCurrentTaskToDelayedList>
    1d86:	d0 de       	rcall	.-608    	; 0x1b28 <xTaskResumeAll>
    1d88:	81 11       	cpse	r24, r1
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <xTaskDelayUntil+0xb0>
    1d8c:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    1d90:	81 2f       	mov	r24, r17
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	8f 90       	pop	r8
    1da8:	08 95       	ret

00001daa <vTaskDelay>:
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	6b 01       	movw	r12, r22
    1db4:	7c 01       	movw	r14, r24
    1db6:	67 2b       	or	r22, r23
    1db8:	68 2b       	or	r22, r24
    1dba:	69 2b       	or	r22, r25
    1dbc:	39 f0       	breq	.+14     	; 0x1dcc <vTaskDelay+0x22>
    1dbe:	74 dd       	rcall	.-1304   	; 0x18a8 <vTaskSuspendAll>
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	c7 01       	movw	r24, r14
    1dc4:	b6 01       	movw	r22, r12
    1dc6:	4a dc       	rcall	.-1900   	; 0x165c <prvAddCurrentTaskToDelayedList>
    1dc8:	af de       	rcall	.-674    	; 0x1b28 <xTaskResumeAll>
    1dca:	01 c0       	rjmp	.+2      	; 0x1dce <vTaskDelay+0x24>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	81 11       	cpse	r24, r1
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vTaskDelay+0x2c>
    1dd2:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	df 90       	pop	r13
    1ddc:	cf 90       	pop	r12
    1dde:	08 95       	ret

00001de0 <vTaskSwitchContext>:
    1de0:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxSchedulerSuspended>
    1de4:	88 23       	and	r24, r24
    1de6:	21 f0       	breq	.+8      	; 0x1df0 <vTaskSwitchContext+0x10>
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	80 93 bb 10 	sts	0x10BB, r24	; 0x8010bb <xYieldPending>
    1dee:	08 95       	ret
    1df0:	10 92 bb 10 	sts	0x10BB, r1	; 0x8010bb <xYieldPending>
    1df4:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    1df8:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1dfc:	20 81       	ld	r18, Z
    1dfe:	31 81       	ldd	r19, Z+1	; 0x01
    1e00:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    1e04:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1e08:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e0a:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e0c:	82 17       	cp	r24, r18
    1e0e:	93 07       	cpc	r25, r19
    1e10:	60 f0       	brcs	.+24     	; 0x1e2a <vTaskSwitchContext+0x4a>
    1e12:	60 91 71 11 	lds	r22, 0x1171	; 0x801171 <pxCurrentTCB>
    1e16:	70 91 72 11 	lds	r23, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1e1a:	63 5e       	subi	r22, 0xE3	; 227
    1e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1e:	80 91 71 11 	lds	r24, 0x1171	; 0x801171 <pxCurrentTCB>
    1e22:	90 91 72 11 	lds	r25, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1e26:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <vApplicationStackOverflowHook>
    1e2a:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <uxTopReadyPriority>
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <vTaskSwitchContext+0x52>
    1e30:	81 50       	subi	r24, 0x01	; 1
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	9b e0       	ldi	r25, 0x0B	; 11
    1e38:	92 9f       	mul	r25, r18
    1e3a:	f0 01       	movw	r30, r0
    1e3c:	93 9f       	mul	r25, r19
    1e3e:	f0 0d       	add	r31, r0
    1e40:	11 24       	eor	r1, r1
    1e42:	ed 5f       	subi	r30, 0xFD	; 253
    1e44:	fe 4e       	sbci	r31, 0xEE	; 238
    1e46:	90 81       	ld	r25, Z
    1e48:	99 23       	and	r25, r25
    1e4a:	91 f3       	breq	.-28     	; 0x1e30 <vTaskSwitchContext+0x50>
    1e4c:	9b e0       	ldi	r25, 0x0B	; 11
    1e4e:	92 9f       	mul	r25, r18
    1e50:	a0 01       	movw	r20, r0
    1e52:	93 9f       	mul	r25, r19
    1e54:	50 0d       	add	r21, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	df 01       	movw	r26, r30
    1e5a:	01 80       	ldd	r0, Z+1	; 0x01
    1e5c:	f2 81       	ldd	r31, Z+2	; 0x02
    1e5e:	e0 2d       	mov	r30, r0
    1e60:	04 80       	ldd	r0, Z+4	; 0x04
    1e62:	f5 81       	ldd	r31, Z+5	; 0x05
    1e64:	e0 2d       	mov	r30, r0
    1e66:	12 96       	adiw	r26, 0x02	; 2
    1e68:	fc 93       	st	X, r31
    1e6a:	ee 93       	st	-X, r30
    1e6c:	11 97       	sbiw	r26, 0x01	; 1
    1e6e:	4a 5f       	subi	r20, 0xFA	; 250
    1e70:	5e 4e       	sbci	r21, 0xEE	; 238
    1e72:	e4 17       	cp	r30, r20
    1e74:	f5 07       	cpc	r31, r21
    1e76:	29 f4       	brne	.+10     	; 0x1e82 <vTaskSwitchContext+0xa2>
    1e78:	44 81       	ldd	r20, Z+4	; 0x04
    1e7a:	55 81       	ldd	r21, Z+5	; 0x05
    1e7c:	fd 01       	movw	r30, r26
    1e7e:	52 83       	std	Z+2, r21	; 0x02
    1e80:	41 83       	std	Z+1, r20	; 0x01
    1e82:	9b e0       	ldi	r25, 0x0B	; 11
    1e84:	92 9f       	mul	r25, r18
    1e86:	f0 01       	movw	r30, r0
    1e88:	93 9f       	mul	r25, r19
    1e8a:	f0 0d       	add	r31, r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	ed 5f       	subi	r30, 0xFD	; 253
    1e90:	fe 4e       	sbci	r31, 0xEE	; 238
    1e92:	01 80       	ldd	r0, Z+1	; 0x01
    1e94:	f2 81       	ldd	r31, Z+2	; 0x02
    1e96:	e0 2d       	mov	r30, r0
    1e98:	20 85       	ldd	r18, Z+8	; 0x08
    1e9a:	31 85       	ldd	r19, Z+9	; 0x09
    1e9c:	30 93 72 11 	sts	0x1172, r19	; 0x801172 <pxCurrentTCB+0x1>
    1ea0:	20 93 71 11 	sts	0x1171, r18	; 0x801171 <pxCurrentTCB>
    1ea4:	80 93 c1 10 	sts	0x10C1, r24	; 0x8010c1 <uxTopReadyPriority>
    1ea8:	08 95       	ret

00001eaa <vTaskPlaceOnEventList>:
    1eaa:	cf 92       	push	r12
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	6a 01       	movw	r12, r20
    1eb4:	7b 01       	movw	r14, r22
    1eb6:	60 91 71 11 	lds	r22, 0x1171	; 0x801171 <pxCurrentTCB>
    1eba:	70 91 72 11 	lds	r23, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1ebe:	62 5f       	subi	r22, 0xF2	; 242
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec2:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	c7 01       	movw	r24, r14
    1eca:	b6 01       	movw	r22, r12
    1ecc:	c7 db       	rcall	.-2162   	; 0x165c <prvAddCurrentTaskToDelayedList>
    1ece:	ff 90       	pop	r15
    1ed0:	ef 90       	pop	r14
    1ed2:	df 90       	pop	r13
    1ed4:	cf 90       	pop	r12
    1ed6:	08 95       	ret

00001ed8 <vTaskPlaceOnEventListRestricted>:
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	fc 01       	movw	r30, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	ba 01       	movw	r22, r20
    1ee2:	a1 81       	ldd	r26, Z+1	; 0x01
    1ee4:	b2 81       	ldd	r27, Z+2	; 0x02
    1ee6:	c0 91 71 11 	lds	r28, 0x1171	; 0x801171 <pxCurrentTCB>
    1eea:	d0 91 72 11 	lds	r29, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1eee:	bb 8b       	std	Y+19, r27	; 0x13
    1ef0:	aa 8b       	std	Y+18, r26	; 0x12
    1ef2:	c0 91 71 11 	lds	r28, 0x1171	; 0x801171 <pxCurrentTCB>
    1ef6:	d0 91 72 11 	lds	r29, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1efa:	16 96       	adiw	r26, 0x06	; 6
    1efc:	4d 91       	ld	r20, X+
    1efe:	5c 91       	ld	r21, X
    1f00:	17 97       	sbiw	r26, 0x07	; 7
    1f02:	5d 8b       	std	Y+21, r21	; 0x15
    1f04:	4c 8b       	std	Y+20, r20	; 0x14
    1f06:	16 96       	adiw	r26, 0x06	; 6
    1f08:	cd 91       	ld	r28, X+
    1f0a:	dc 91       	ld	r29, X
    1f0c:	17 97       	sbiw	r26, 0x07	; 7
    1f0e:	40 91 71 11 	lds	r20, 0x1171	; 0x801171 <pxCurrentTCB>
    1f12:	50 91 72 11 	lds	r21, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1f16:	42 5f       	subi	r20, 0xF2	; 242
    1f18:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1a:	5d 83       	std	Y+5, r21	; 0x05
    1f1c:	4c 83       	std	Y+4, r20	; 0x04
    1f1e:	40 91 71 11 	lds	r20, 0x1171	; 0x801171 <pxCurrentTCB>
    1f22:	50 91 72 11 	lds	r21, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1f26:	42 5f       	subi	r20, 0xF2	; 242
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2a:	17 96       	adiw	r26, 0x07	; 7
    1f2c:	5c 93       	st	X, r21
    1f2e:	4e 93       	st	-X, r20
    1f30:	16 97       	sbiw	r26, 0x06	; 6
    1f32:	a0 91 71 11 	lds	r26, 0x1171	; 0x801171 <pxCurrentTCB>
    1f36:	b0 91 72 11 	lds	r27, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    1f3a:	59 96       	adiw	r26, 0x19	; 25
    1f3c:	fc 93       	st	X, r31
    1f3e:	ee 93       	st	-X, r30
    1f40:	58 97       	sbiw	r26, 0x18	; 24
    1f42:	30 81       	ld	r19, Z
    1f44:	3f 5f       	subi	r19, 0xFF	; 255
    1f46:	30 83       	st	Z, r19
    1f48:	22 23       	and	r18, r18
    1f4a:	19 f0       	breq	.+6      	; 0x1f52 <vTaskPlaceOnEventListRestricted+0x7a>
    1f4c:	6f ef       	ldi	r22, 0xFF	; 255
    1f4e:	7f ef       	ldi	r23, 0xFF	; 255
    1f50:	cb 01       	movw	r24, r22
    1f52:	42 2f       	mov	r20, r18
    1f54:	83 db       	rcall	.-2298   	; 0x165c <prvAddCurrentTaskToDelayedList>
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <xTaskRemoveFromEventList>:
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	dc 01       	movw	r26, r24
    1f62:	17 96       	adiw	r26, 0x07	; 7
    1f64:	ed 91       	ld	r30, X+
    1f66:	fc 91       	ld	r31, X
    1f68:	18 97       	sbiw	r26, 0x08	; 8
    1f6a:	00 84       	ldd	r0, Z+8	; 0x08
    1f6c:	f1 85       	ldd	r31, Z+9	; 0x09
    1f6e:	e0 2d       	mov	r30, r0
    1f70:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f72:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f74:	c2 89       	ldd	r28, Z+18	; 0x12
    1f76:	d3 89       	ldd	r29, Z+19	; 0x13
    1f78:	84 89       	ldd	r24, Z+20	; 0x14
    1f7a:	95 89       	ldd	r25, Z+21	; 0x15
    1f7c:	9f 83       	std	Y+7, r25	; 0x07
    1f7e:	8e 83       	std	Y+6, r24	; 0x06
    1f80:	c4 89       	ldd	r28, Z+20	; 0x14
    1f82:	d5 89       	ldd	r29, Z+21	; 0x15
    1f84:	82 89       	ldd	r24, Z+18	; 0x12
    1f86:	93 89       	ldd	r25, Z+19	; 0x13
    1f88:	9d 83       	std	Y+5, r25	; 0x05
    1f8a:	8c 83       	std	Y+4, r24	; 0x04
    1f8c:	11 96       	adiw	r26, 0x01	; 1
    1f8e:	8d 91       	ld	r24, X+
    1f90:	9c 91       	ld	r25, X
    1f92:	12 97       	sbiw	r26, 0x02	; 2
    1f94:	9f 01       	movw	r18, r30
    1f96:	22 5f       	subi	r18, 0xF2	; 242
    1f98:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9a:	82 17       	cp	r24, r18
    1f9c:	93 07       	cpc	r25, r19
    1f9e:	31 f4       	brne	.+12     	; 0x1fac <xTaskRemoveFromEventList+0x50>
    1fa0:	84 89       	ldd	r24, Z+20	; 0x14
    1fa2:	95 89       	ldd	r25, Z+21	; 0x15
    1fa4:	12 96       	adiw	r26, 0x02	; 2
    1fa6:	9c 93       	st	X, r25
    1fa8:	8e 93       	st	-X, r24
    1faa:	11 97       	sbiw	r26, 0x01	; 1
    1fac:	11 8e       	std	Z+25, r1	; 0x19
    1fae:	10 8e       	std	Z+24, r1	; 0x18
    1fb0:	8c 91       	ld	r24, X
    1fb2:	81 50       	subi	r24, 0x01	; 1
    1fb4:	8c 93       	st	X, r24
    1fb6:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxSchedulerSuspended>
    1fba:	81 11       	cpse	r24, r1
    1fbc:	52 c0       	rjmp	.+164    	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    1fbe:	a4 85       	ldd	r26, Z+12	; 0x0c
    1fc0:	b5 85       	ldd	r27, Z+13	; 0x0d
    1fc2:	c6 81       	ldd	r28, Z+6	; 0x06
    1fc4:	d7 81       	ldd	r29, Z+7	; 0x07
    1fc6:	80 85       	ldd	r24, Z+8	; 0x08
    1fc8:	91 85       	ldd	r25, Z+9	; 0x09
    1fca:	9f 83       	std	Y+7, r25	; 0x07
    1fcc:	8e 83       	std	Y+6, r24	; 0x06
    1fce:	c0 85       	ldd	r28, Z+8	; 0x08
    1fd0:	d1 85       	ldd	r29, Z+9	; 0x09
    1fd2:	86 81       	ldd	r24, Z+6	; 0x06
    1fd4:	97 81       	ldd	r25, Z+7	; 0x07
    1fd6:	9d 83       	std	Y+5, r25	; 0x05
    1fd8:	8c 83       	std	Y+4, r24	; 0x04
    1fda:	11 96       	adiw	r26, 0x01	; 1
    1fdc:	8d 91       	ld	r24, X+
    1fde:	9c 91       	ld	r25, X
    1fe0:	12 97       	sbiw	r26, 0x02	; 2
    1fe2:	9f 01       	movw	r18, r30
    1fe4:	2e 5f       	subi	r18, 0xFE	; 254
    1fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe8:	82 17       	cp	r24, r18
    1fea:	93 07       	cpc	r25, r19
    1fec:	31 f4       	brne	.+12     	; 0x1ffa <xTaskRemoveFromEventList+0x9e>
    1fee:	80 85       	ldd	r24, Z+8	; 0x08
    1ff0:	91 85       	ldd	r25, Z+9	; 0x09
    1ff2:	12 96       	adiw	r26, 0x02	; 2
    1ff4:	9c 93       	st	X, r25
    1ff6:	8e 93       	st	-X, r24
    1ff8:	11 97       	sbiw	r26, 0x01	; 1
    1ffa:	15 86       	std	Z+13, r1	; 0x0d
    1ffc:	14 86       	std	Z+12, r1	; 0x0c
    1ffe:	8c 91       	ld	r24, X
    2000:	81 50       	subi	r24, 0x01	; 1
    2002:	8c 93       	st	X, r24
    2004:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2006:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <uxTopReadyPriority>
    200a:	8a 17       	cp	r24, r26
    200c:	10 f4       	brcc	.+4      	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    200e:	a0 93 c1 10 	sts	0x10C1, r26	; 0x8010c1 <uxTopReadyPriority>
    2012:	8b e0       	ldi	r24, 0x0B	; 11
    2014:	8a 9f       	mul	r24, r26
    2016:	d0 01       	movw	r26, r0
    2018:	11 24       	eor	r1, r1
    201a:	ad 5f       	subi	r26, 0xFD	; 253
    201c:	be 4e       	sbci	r27, 0xEE	; 238
    201e:	11 96       	adiw	r26, 0x01	; 1
    2020:	0d 90       	ld	r0, X+
    2022:	bc 91       	ld	r27, X
    2024:	a0 2d       	mov	r26, r0
    2026:	b7 83       	std	Z+7, r27	; 0x07
    2028:	a6 83       	std	Z+6, r26	; 0x06
    202a:	16 96       	adiw	r26, 0x06	; 6
    202c:	4d 91       	ld	r20, X+
    202e:	5c 91       	ld	r21, X
    2030:	17 97       	sbiw	r26, 0x07	; 7
    2032:	51 87       	std	Z+9, r21	; 0x09
    2034:	40 87       	std	Z+8, r20	; 0x08
    2036:	16 96       	adiw	r26, 0x06	; 6
    2038:	cd 91       	ld	r28, X+
    203a:	dc 91       	ld	r29, X
    203c:	17 97       	sbiw	r26, 0x07	; 7
    203e:	3d 83       	std	Y+5, r19	; 0x05
    2040:	2c 83       	std	Y+4, r18	; 0x04
    2042:	17 96       	adiw	r26, 0x07	; 7
    2044:	3c 93       	st	X, r19
    2046:	2e 93       	st	-X, r18
    2048:	16 97       	sbiw	r26, 0x06	; 6
    204a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    204c:	8a 9f       	mul	r24, r26
    204e:	d0 01       	movw	r26, r0
    2050:	11 24       	eor	r1, r1
    2052:	ad 5f       	subi	r26, 0xFD	; 253
    2054:	be 4e       	sbci	r27, 0xEE	; 238
    2056:	b5 87       	std	Z+13, r27	; 0x0d
    2058:	a4 87       	std	Z+12, r26	; 0x0c
    205a:	8c 91       	ld	r24, X
    205c:	8f 5f       	subi	r24, 0xFF	; 255
    205e:	8c 93       	st	X, r24
    2060:	1c c0       	rjmp	.+56     	; 0x209a <__DATA_REGION_LENGTH__+0x9a>
    2062:	4e ed       	ldi	r20, 0xDE	; 222
    2064:	50 e1       	ldi	r21, 0x10	; 16
    2066:	da 01       	movw	r26, r20
    2068:	11 96       	adiw	r26, 0x01	; 1
    206a:	cd 91       	ld	r28, X+
    206c:	dc 91       	ld	r29, X
    206e:	12 97       	sbiw	r26, 0x02	; 2
    2070:	d3 8b       	std	Z+19, r29	; 0x13
    2072:	c2 8b       	std	Z+18, r28	; 0x12
    2074:	8e 81       	ldd	r24, Y+6	; 0x06
    2076:	9f 81       	ldd	r25, Y+7	; 0x07
    2078:	95 8b       	std	Z+21, r25	; 0x15
    207a:	84 8b       	std	Z+20, r24	; 0x14
    207c:	8e 81       	ldd	r24, Y+6	; 0x06
    207e:	9f 81       	ldd	r25, Y+7	; 0x07
    2080:	dc 01       	movw	r26, r24
    2082:	15 96       	adiw	r26, 0x05	; 5
    2084:	3c 93       	st	X, r19
    2086:	2e 93       	st	-X, r18
    2088:	14 97       	sbiw	r26, 0x04	; 4
    208a:	3f 83       	std	Y+7, r19	; 0x07
    208c:	2e 83       	std	Y+6, r18	; 0x06
    208e:	51 8f       	std	Z+25, r21	; 0x19
    2090:	40 8f       	std	Z+24, r20	; 0x18
    2092:	da 01       	movw	r26, r20
    2094:	8c 91       	ld	r24, X
    2096:	8f 5f       	subi	r24, 0xFF	; 255
    2098:	8c 93       	st	X, r24
    209a:	92 8d       	ldd	r25, Z+26	; 0x1a
    209c:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    20a0:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    20a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    20a6:	89 17       	cp	r24, r25
    20a8:	20 f4       	brcc	.+8      	; 0x20b2 <__DATA_REGION_LENGTH__+0xb2>
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	80 93 bb 10 	sts	0x10BB, r24	; 0x8010bb <xYieldPending>
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <__DATA_REGION_LENGTH__+0xb4>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <vTaskSetTimeOutState>:
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	0f 92       	push	r0
    20c0:	20 91 ba 10 	lds	r18, 0x10BA	; 0x8010ba <xNumOfOverflows>
    20c4:	fc 01       	movw	r30, r24
    20c6:	20 83       	st	Z, r18
    20c8:	40 91 c2 10 	lds	r20, 0x10C2	; 0x8010c2 <xTickCount>
    20cc:	50 91 c3 10 	lds	r21, 0x10C3	; 0x8010c3 <xTickCount+0x1>
    20d0:	60 91 c4 10 	lds	r22, 0x10C4	; 0x8010c4 <xTickCount+0x2>
    20d4:	70 91 c5 10 	lds	r23, 0x10C5	; 0x8010c5 <xTickCount+0x3>
    20d8:	41 83       	std	Z+1, r20	; 0x01
    20da:	52 83       	std	Z+2, r21	; 0x02
    20dc:	63 83       	std	Z+3, r22	; 0x03
    20de:	74 83       	std	Z+4, r23	; 0x04
    20e0:	0f 90       	pop	r0
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	08 95       	ret

000020e6 <vTaskInternalSetTimeOutState>:
    20e6:	20 91 ba 10 	lds	r18, 0x10BA	; 0x8010ba <xNumOfOverflows>
    20ea:	fc 01       	movw	r30, r24
    20ec:	20 83       	st	Z, r18
    20ee:	40 91 c2 10 	lds	r20, 0x10C2	; 0x8010c2 <xTickCount>
    20f2:	50 91 c3 10 	lds	r21, 0x10C3	; 0x8010c3 <xTickCount+0x1>
    20f6:	60 91 c4 10 	lds	r22, 0x10C4	; 0x8010c4 <xTickCount+0x2>
    20fa:	70 91 c5 10 	lds	r23, 0x10C5	; 0x8010c5 <xTickCount+0x3>
    20fe:	41 83       	std	Z+1, r20	; 0x01
    2100:	52 83       	std	Z+2, r21	; 0x02
    2102:	63 83       	std	Z+3, r22	; 0x03
    2104:	74 83       	std	Z+4, r23	; 0x04
    2106:	08 95       	ret

00002108 <xTaskCheckForTimeOut>:
    2108:	8f 92       	push	r8
    210a:	9f 92       	push	r9
    210c:	af 92       	push	r10
    210e:	bf 92       	push	r11
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	fb 01       	movw	r30, r22
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	0f 92       	push	r0
    2128:	c0 90 c2 10 	lds	r12, 0x10C2	; 0x8010c2 <xTickCount>
    212c:	d0 90 c3 10 	lds	r13, 0x10C3	; 0x8010c3 <xTickCount+0x1>
    2130:	e0 90 c4 10 	lds	r14, 0x10C4	; 0x8010c4 <xTickCount+0x2>
    2134:	f0 90 c5 10 	lds	r15, 0x10C5	; 0x8010c5 <xTickCount+0x3>
    2138:	dc 01       	movw	r26, r24
    213a:	11 96       	adiw	r26, 0x01	; 1
    213c:	0d 91       	ld	r16, X+
    213e:	1d 91       	ld	r17, X+
    2140:	2d 91       	ld	r18, X+
    2142:	3c 91       	ld	r19, X
    2144:	14 97       	sbiw	r26, 0x04	; 4
    2146:	46 01       	movw	r8, r12
    2148:	57 01       	movw	r10, r14
    214a:	80 1a       	sub	r8, r16
    214c:	91 0a       	sbc	r9, r17
    214e:	a2 0a       	sbc	r10, r18
    2150:	b3 0a       	sbc	r11, r19
    2152:	40 81       	ld	r20, Z
    2154:	51 81       	ldd	r21, Z+1	; 0x01
    2156:	62 81       	ldd	r22, Z+2	; 0x02
    2158:	73 81       	ldd	r23, Z+3	; 0x03
    215a:	4f 3f       	cpi	r20, 0xFF	; 255
    215c:	bf ef       	ldi	r27, 0xFF	; 255
    215e:	5b 07       	cpc	r21, r27
    2160:	6b 07       	cpc	r22, r27
    2162:	7b 07       	cpc	r23, r27
    2164:	39 f1       	breq	.+78     	; 0x21b4 <xTaskCheckForTimeOut+0xac>
    2166:	ec 01       	movw	r28, r24
    2168:	b8 81       	ld	r27, Y
    216a:	a0 91 ba 10 	lds	r26, 0x10BA	; 0x8010ba <xNumOfOverflows>
    216e:	ba 17       	cp	r27, r26
    2170:	59 f0       	breq	.+22     	; 0x2188 <xTaskCheckForTimeOut+0x80>
    2172:	c0 16       	cp	r12, r16
    2174:	d1 06       	cpc	r13, r17
    2176:	e2 06       	cpc	r14, r18
    2178:	f3 06       	cpc	r15, r19
    217a:	30 f0       	brcs	.+12     	; 0x2188 <xTaskCheckForTimeOut+0x80>
    217c:	10 82       	st	Z, r1
    217e:	11 82       	std	Z+1, r1	; 0x01
    2180:	12 82       	std	Z+2, r1	; 0x02
    2182:	13 82       	std	Z+3, r1	; 0x03
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	17 c0       	rjmp	.+46     	; 0x21b6 <xTaskCheckForTimeOut+0xae>
    2188:	84 16       	cp	r8, r20
    218a:	95 06       	cpc	r9, r21
    218c:	a6 06       	cpc	r10, r22
    218e:	b7 06       	cpc	r11, r23
    2190:	58 f4       	brcc	.+22     	; 0x21a8 <xTaskCheckForTimeOut+0xa0>
    2192:	48 19       	sub	r20, r8
    2194:	59 09       	sbc	r21, r9
    2196:	6a 09       	sbc	r22, r10
    2198:	7b 09       	sbc	r23, r11
    219a:	40 83       	st	Z, r20
    219c:	51 83       	std	Z+1, r21	; 0x01
    219e:	62 83       	std	Z+2, r22	; 0x02
    21a0:	73 83       	std	Z+3, r23	; 0x03
    21a2:	a1 df       	rcall	.-190    	; 0x20e6 <vTaskInternalSetTimeOutState>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	07 c0       	rjmp	.+14     	; 0x21b6 <xTaskCheckForTimeOut+0xae>
    21a8:	10 82       	st	Z, r1
    21aa:	11 82       	std	Z+1, r1	; 0x01
    21ac:	12 82       	std	Z+2, r1	; 0x02
    21ae:	13 82       	std	Z+3, r1	; 0x03
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <xTaskCheckForTimeOut+0xae>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	bf 90       	pop	r11
    21cc:	af 90       	pop	r10
    21ce:	9f 90       	pop	r9
    21d0:	8f 90       	pop	r8
    21d2:	08 95       	ret

000021d4 <vTaskMissedYield>:
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	80 93 bb 10 	sts	0x10BB, r24	; 0x8010bb <xYieldPending>
    21da:	08 95       	ret

000021dc <xTaskGetCurrentTaskHandle>:
    21dc:	80 91 71 11 	lds	r24, 0x1171	; 0x801171 <pxCurrentTCB>
    21e0:	90 91 72 11 	lds	r25, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    21e4:	08 95       	ret

000021e6 <xTaskGetSchedulerState>:
    21e6:	80 91 c0 10 	lds	r24, 0x10C0	; 0x8010c0 <xSchedulerRunning>
    21ea:	88 23       	and	r24, r24
    21ec:	31 f0       	breq	.+12     	; 0x21fa <xTaskGetSchedulerState+0x14>
    21ee:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxSchedulerSuspended>
    21f2:	81 11       	cpse	r24, r1
    21f4:	04 c0       	rjmp	.+8      	; 0x21fe <xTaskGetSchedulerState+0x18>
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	08 95       	ret
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	08 95       	ret
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	08 95       	ret

00002202 <xTaskPriorityDisinherit>:
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	fc 01       	movw	r30, r24
    220c:	89 2b       	or	r24, r25
    220e:	09 f4       	brne	.+2      	; 0x2212 <xTaskPriorityDisinherit+0x10>
    2210:	49 c0       	rjmp	.+146    	; 0x22a4 <xTaskPriorityDisinherit+0xa2>
    2212:	86 a5       	ldd	r24, Z+46	; 0x2e
    2214:	81 50       	subi	r24, 0x01	; 1
    2216:	86 a7       	std	Z+46, r24	; 0x2e
    2218:	22 8d       	ldd	r18, Z+26	; 0x1a
    221a:	95 a5       	ldd	r25, Z+45	; 0x2d
    221c:	29 17       	cp	r18, r25
    221e:	09 f4       	brne	.+2      	; 0x2222 <xTaskPriorityDisinherit+0x20>
    2220:	43 c0       	rjmp	.+134    	; 0x22a8 <xTaskPriorityDisinherit+0xa6>
    2222:	81 11       	cpse	r24, r1
    2224:	43 c0       	rjmp	.+134    	; 0x22ac <xTaskPriorityDisinherit+0xaa>
    2226:	ef 01       	movw	r28, r30
    2228:	8f 01       	movw	r16, r30
    222a:	0e 5f       	subi	r16, 0xFE	; 254
    222c:	1f 4f       	sbci	r17, 0xFF	; 255
    222e:	c8 01       	movw	r24, r16
    2230:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
    2234:	ed a5       	ldd	r30, Y+45	; 0x2d
    2236:	ea 8f       	std	Y+26, r30	; 0x1a
    2238:	8a e0       	ldi	r24, 0x0A	; 10
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	a0 e0       	ldi	r26, 0x00	; 0
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	8e 1b       	sub	r24, r30
    2242:	91 09       	sbc	r25, r1
    2244:	a1 09       	sbc	r26, r1
    2246:	b1 09       	sbc	r27, r1
    2248:	8e 87       	std	Y+14, r24	; 0x0e
    224a:	9f 87       	std	Y+15, r25	; 0x0f
    224c:	a8 8b       	std	Y+16, r26	; 0x10
    224e:	b9 8b       	std	Y+17, r27	; 0x11
    2250:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <uxTopReadyPriority>
    2254:	8e 17       	cp	r24, r30
    2256:	10 f4       	brcc	.+4      	; 0x225c <xTaskPriorityDisinherit+0x5a>
    2258:	e0 93 c1 10 	sts	0x10C1, r30	; 0x8010c1 <uxTopReadyPriority>
    225c:	8b e0       	ldi	r24, 0x0B	; 11
    225e:	8e 9f       	mul	r24, r30
    2260:	f0 01       	movw	r30, r0
    2262:	11 24       	eor	r1, r1
    2264:	ed 5f       	subi	r30, 0xFD	; 253
    2266:	fe 4e       	sbci	r31, 0xEE	; 238
    2268:	01 80       	ldd	r0, Z+1	; 0x01
    226a:	f2 81       	ldd	r31, Z+2	; 0x02
    226c:	e0 2d       	mov	r30, r0
    226e:	ff 83       	std	Y+7, r31	; 0x07
    2270:	ee 83       	std	Y+6, r30	; 0x06
    2272:	26 81       	ldd	r18, Z+6	; 0x06
    2274:	37 81       	ldd	r19, Z+7	; 0x07
    2276:	39 87       	std	Y+9, r19	; 0x09
    2278:	28 87       	std	Y+8, r18	; 0x08
    227a:	a6 81       	ldd	r26, Z+6	; 0x06
    227c:	b7 81       	ldd	r27, Z+7	; 0x07
    227e:	15 96       	adiw	r26, 0x05	; 5
    2280:	1c 93       	st	X, r17
    2282:	0e 93       	st	-X, r16
    2284:	14 97       	sbiw	r26, 0x04	; 4
    2286:	17 83       	std	Z+7, r17	; 0x07
    2288:	06 83       	std	Z+6, r16	; 0x06
    228a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    228c:	8e 9f       	mul	r24, r30
    228e:	f0 01       	movw	r30, r0
    2290:	11 24       	eor	r1, r1
    2292:	ed 5f       	subi	r30, 0xFD	; 253
    2294:	fe 4e       	sbci	r31, 0xEE	; 238
    2296:	fd 87       	std	Y+13, r31	; 0x0d
    2298:	ec 87       	std	Y+12, r30	; 0x0c
    229a:	80 81       	ld	r24, Z
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	80 83       	st	Z, r24
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	05 c0       	rjmp	.+10     	; 0x22ae <xTaskPriorityDisinherit+0xac>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	03 c0       	rjmp	.+6      	; 0x22ae <xTaskPriorityDisinherit+0xac>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <xTaskPriorityDisinherit+0xac>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	1f 91       	pop	r17
    22b4:	0f 91       	pop	r16
    22b6:	08 95       	ret

000022b8 <xTaskGenericNotifyWait>:
    22b8:	4f 92       	push	r4
    22ba:	5f 92       	push	r5
    22bc:	6f 92       	push	r6
    22be:	7f 92       	push	r7
    22c0:	af 92       	push	r10
    22c2:	bf 92       	push	r11
    22c4:	cf 92       	push	r12
    22c6:	df 92       	push	r13
    22c8:	ef 92       	push	r14
    22ca:	ff 92       	push	r15
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	28 01       	movw	r4, r16
    22d6:	39 01       	movw	r6, r18
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	0f 92       	push	r0
    22de:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    22e2:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    22e6:	c8 2f       	mov	r28, r24
    22e8:	d0 e0       	ldi	r29, 0x00	; 0
    22ea:	ec 0f       	add	r30, r28
    22ec:	fd 1f       	adc	r31, r29
    22ee:	83 a9       	ldd	r24, Z+51	; 0x33
    22f0:	82 30       	cpi	r24, 0x02	; 2
    22f2:	71 f1       	breq	.+92     	; 0x2350 <xTaskGenericNotifyWait+0x98>
    22f4:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    22f8:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    22fc:	ce 01       	movw	r24, r28
    22fe:	88 0f       	add	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	e8 0f       	add	r30, r24
    2308:	f9 1f       	adc	r31, r25
    230a:	87 a5       	ldd	r24, Z+47	; 0x2f
    230c:	90 a9       	ldd	r25, Z+48	; 0x30
    230e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2310:	b2 a9       	ldd	r27, Z+50	; 0x32
    2312:	40 95       	com	r20
    2314:	50 95       	com	r21
    2316:	60 95       	com	r22
    2318:	70 95       	com	r23
    231a:	48 23       	and	r20, r24
    231c:	59 23       	and	r21, r25
    231e:	6a 23       	and	r22, r26
    2320:	7b 23       	and	r23, r27
    2322:	47 a7       	std	Z+47, r20	; 0x2f
    2324:	50 ab       	std	Z+48, r21	; 0x30
    2326:	61 ab       	std	Z+49, r22	; 0x31
    2328:	72 ab       	std	Z+50, r23	; 0x32
    232a:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    232e:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    2332:	ec 0f       	add	r30, r28
    2334:	fd 1f       	adc	r31, r29
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	83 ab       	std	Z+51, r24	; 0x33
    233a:	a1 14       	cp	r10, r1
    233c:	b1 04       	cpc	r11, r1
    233e:	c1 04       	cpc	r12, r1
    2340:	d1 04       	cpc	r13, r1
    2342:	31 f0       	breq	.+12     	; 0x2350 <xTaskGenericNotifyWait+0x98>
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	c6 01       	movw	r24, r12
    2348:	b5 01       	movw	r22, r10
    234a:	88 d9       	rcall	.-3312   	; 0x165c <prvAddCurrentTaskToDelayedList>
    234c:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	0f 92       	push	r0
    235a:	e1 14       	cp	r14, r1
    235c:	f1 04       	cpc	r15, r1
    235e:	a1 f0       	breq	.+40     	; 0x2388 <xTaskGenericNotifyWait+0xd0>
    2360:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    2364:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    2368:	ce 01       	movw	r24, r28
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	e8 0f       	add	r30, r24
    2374:	f9 1f       	adc	r31, r25
    2376:	87 a5       	ldd	r24, Z+47	; 0x2f
    2378:	90 a9       	ldd	r25, Z+48	; 0x30
    237a:	a1 a9       	ldd	r26, Z+49	; 0x31
    237c:	b2 a9       	ldd	r27, Z+50	; 0x32
    237e:	f7 01       	movw	r30, r14
    2380:	80 83       	st	Z, r24
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	a2 83       	std	Z+2, r26	; 0x02
    2386:	b3 83       	std	Z+3, r27	; 0x03
    2388:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    238c:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    2390:	ec 0f       	add	r30, r28
    2392:	fd 1f       	adc	r31, r29
    2394:	83 a9       	ldd	r24, Z+51	; 0x33
    2396:	82 30       	cpi	r24, 0x02	; 2
    2398:	e9 f4       	brne	.+58     	; 0x23d4 <xTaskGenericNotifyWait+0x11c>
    239a:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    239e:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    23a2:	ce 01       	movw	r24, r28
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	e8 0f       	add	r30, r24
    23ae:	f9 1f       	adc	r31, r25
    23b0:	87 a5       	ldd	r24, Z+47	; 0x2f
    23b2:	90 a9       	ldd	r25, Z+48	; 0x30
    23b4:	a1 a9       	ldd	r26, Z+49	; 0x31
    23b6:	b2 a9       	ldd	r27, Z+50	; 0x32
    23b8:	40 94       	com	r4
    23ba:	50 94       	com	r5
    23bc:	60 94       	com	r6
    23be:	70 94       	com	r7
    23c0:	48 22       	and	r4, r24
    23c2:	59 22       	and	r5, r25
    23c4:	6a 22       	and	r6, r26
    23c6:	7b 22       	and	r7, r27
    23c8:	47 a6       	std	Z+47, r4	; 0x2f
    23ca:	50 aa       	std	Z+48, r5	; 0x30
    23cc:	61 aa       	std	Z+49, r6	; 0x31
    23ce:	72 aa       	std	Z+50, r7	; 0x32
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <xTaskGenericNotifyWait+0x11e>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	20 91 71 11 	lds	r18, 0x1171	; 0x801171 <pxCurrentTCB>
    23da:	30 91 72 11 	lds	r19, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    23de:	c2 0f       	add	r28, r18
    23e0:	d3 1f       	adc	r29, r19
    23e2:	1b aa       	std	Y+51, r1	; 0x33
    23e4:	0f 90       	pop	r0
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	1f 91       	pop	r17
    23ee:	0f 91       	pop	r16
    23f0:	ff 90       	pop	r15
    23f2:	ef 90       	pop	r14
    23f4:	df 90       	pop	r13
    23f6:	cf 90       	pop	r12
    23f8:	bf 90       	pop	r11
    23fa:	af 90       	pop	r10
    23fc:	7f 90       	pop	r7
    23fe:	6f 90       	pop	r6
    2400:	5f 90       	pop	r5
    2402:	4f 90       	pop	r4
    2404:	08 95       	ret

00002406 <xTaskGenericNotify>:
    2406:	8f 92       	push	r8
    2408:	9f 92       	push	r9
    240a:	af 92       	push	r10
    240c:	bf 92       	push	r11
    240e:	ef 92       	push	r14
    2410:	ff 92       	push	r15
    2412:	0f 93       	push	r16
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	dc 01       	movw	r26, r24
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	0f 92       	push	r0
    2420:	e1 14       	cp	r14, r1
    2422:	f1 04       	cpc	r15, r1
    2424:	89 f0       	breq	.+34     	; 0x2448 <xTaskGenericNotify+0x42>
    2426:	e6 2f       	mov	r30, r22
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	e8 0f       	add	r30, r24
    2434:	f9 1f       	adc	r31, r25
    2436:	87 a4       	ldd	r8, Z+47	; 0x2f
    2438:	90 a8       	ldd	r9, Z+48	; 0x30
    243a:	a1 a8       	ldd	r10, Z+49	; 0x31
    243c:	b2 a8       	ldd	r11, Z+50	; 0x32
    243e:	f7 01       	movw	r30, r14
    2440:	80 82       	st	Z, r8
    2442:	91 82       	std	Z+1, r9	; 0x01
    2444:	a2 82       	std	Z+2, r10	; 0x02
    2446:	b3 82       	std	Z+3, r11	; 0x03
    2448:	70 e0       	ldi	r23, 0x00	; 0
    244a:	fd 01       	movw	r30, r26
    244c:	e6 0f       	add	r30, r22
    244e:	f7 1f       	adc	r31, r23
    2450:	83 a9       	ldd	r24, Z+51	; 0x33
    2452:	92 e0       	ldi	r25, 0x02	; 2
    2454:	93 ab       	std	Z+51, r25	; 0x33
    2456:	02 30       	cpi	r16, 0x02	; 2
    2458:	01 f1       	breq	.+64     	; 0x249a <xTaskGenericNotify+0x94>
    245a:	18 f4       	brcc	.+6      	; 0x2462 <xTaskGenericNotify+0x5c>
    245c:	01 30       	cpi	r16, 0x01	; 1
    245e:	31 f0       	breq	.+12     	; 0x246c <xTaskGenericNotify+0x66>
    2460:	4d c0       	rjmp	.+154    	; 0x24fc <xTaskGenericNotify+0xf6>
    2462:	03 30       	cpi	r16, 0x03	; 3
    2464:	79 f1       	breq	.+94     	; 0x24c4 <xTaskGenericNotify+0xbe>
    2466:	04 30       	cpi	r16, 0x04	; 4
    2468:	d1 f1       	breq	.+116    	; 0x24de <xTaskGenericNotify+0xd8>
    246a:	48 c0       	rjmp	.+144    	; 0x24fc <xTaskGenericNotify+0xf6>
    246c:	66 0f       	add	r22, r22
    246e:	77 1f       	adc	r23, r23
    2470:	66 0f       	add	r22, r22
    2472:	77 1f       	adc	r23, r23
    2474:	fd 01       	movw	r30, r26
    2476:	e6 0f       	add	r30, r22
    2478:	f7 1f       	adc	r31, r23
    247a:	87 a4       	ldd	r8, Z+47	; 0x2f
    247c:	90 a8       	ldd	r9, Z+48	; 0x30
    247e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2480:	b2 a8       	ldd	r11, Z+50	; 0x32
    2482:	ba 01       	movw	r22, r20
    2484:	a9 01       	movw	r20, r18
    2486:	48 29       	or	r20, r8
    2488:	59 29       	or	r21, r9
    248a:	6a 29       	or	r22, r10
    248c:	7b 29       	or	r23, r11
    248e:	47 a7       	std	Z+47, r20	; 0x2f
    2490:	50 ab       	std	Z+48, r21	; 0x30
    2492:	61 ab       	std	Z+49, r22	; 0x31
    2494:	72 ab       	std	Z+50, r23	; 0x32
    2496:	01 e0       	ldi	r16, 0x01	; 1
    2498:	34 c0       	rjmp	.+104    	; 0x2502 <xTaskGenericNotify+0xfc>
    249a:	66 0f       	add	r22, r22
    249c:	77 1f       	adc	r23, r23
    249e:	66 0f       	add	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	fd 01       	movw	r30, r26
    24a4:	e6 0f       	add	r30, r22
    24a6:	f7 1f       	adc	r31, r23
    24a8:	47 a5       	ldd	r20, Z+47	; 0x2f
    24aa:	50 a9       	ldd	r21, Z+48	; 0x30
    24ac:	61 a9       	ldd	r22, Z+49	; 0x31
    24ae:	72 a9       	ldd	r23, Z+50	; 0x32
    24b0:	4f 5f       	subi	r20, 0xFF	; 255
    24b2:	5f 4f       	sbci	r21, 0xFF	; 255
    24b4:	6f 4f       	sbci	r22, 0xFF	; 255
    24b6:	7f 4f       	sbci	r23, 0xFF	; 255
    24b8:	47 a7       	std	Z+47, r20	; 0x2f
    24ba:	50 ab       	std	Z+48, r21	; 0x30
    24bc:	61 ab       	std	Z+49, r22	; 0x31
    24be:	72 ab       	std	Z+50, r23	; 0x32
    24c0:	01 e0       	ldi	r16, 0x01	; 1
    24c2:	1f c0       	rjmp	.+62     	; 0x2502 <xTaskGenericNotify+0xfc>
    24c4:	66 0f       	add	r22, r22
    24c6:	77 1f       	adc	r23, r23
    24c8:	66 0f       	add	r22, r22
    24ca:	77 1f       	adc	r23, r23
    24cc:	fd 01       	movw	r30, r26
    24ce:	e6 0f       	add	r30, r22
    24d0:	f7 1f       	adc	r31, r23
    24d2:	27 a7       	std	Z+47, r18	; 0x2f
    24d4:	30 ab       	std	Z+48, r19	; 0x30
    24d6:	41 ab       	std	Z+49, r20	; 0x31
    24d8:	52 ab       	std	Z+50, r21	; 0x32
    24da:	01 e0       	ldi	r16, 0x01	; 1
    24dc:	12 c0       	rjmp	.+36     	; 0x2502 <xTaskGenericNotify+0xfc>
    24de:	82 30       	cpi	r24, 0x02	; 2
    24e0:	79 f0       	breq	.+30     	; 0x2500 <xTaskGenericNotify+0xfa>
    24e2:	66 0f       	add	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	66 0f       	add	r22, r22
    24e8:	77 1f       	adc	r23, r23
    24ea:	fd 01       	movw	r30, r26
    24ec:	e6 0f       	add	r30, r22
    24ee:	f7 1f       	adc	r31, r23
    24f0:	27 a7       	std	Z+47, r18	; 0x2f
    24f2:	30 ab       	std	Z+48, r19	; 0x30
    24f4:	41 ab       	std	Z+49, r20	; 0x31
    24f6:	52 ab       	std	Z+50, r21	; 0x32
    24f8:	01 e0       	ldi	r16, 0x01	; 1
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <xTaskGenericNotify+0xfc>
    24fc:	01 e0       	ldi	r16, 0x01	; 1
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <xTaskGenericNotify+0xfc>
    2500:	00 e0       	ldi	r16, 0x00	; 0
    2502:	81 30       	cpi	r24, 0x01	; 1
    2504:	09 f0       	breq	.+2      	; 0x2508 <xTaskGenericNotify+0x102>
    2506:	69 c0       	rjmp	.+210    	; 0x25da <xTaskGenericNotify+0x1d4>
    2508:	1c 96       	adiw	r26, 0x0c	; 12
    250a:	ed 91       	ld	r30, X+
    250c:	fc 91       	ld	r31, X
    250e:	1d 97       	sbiw	r26, 0x0d	; 13
    2510:	16 96       	adiw	r26, 0x06	; 6
    2512:	cd 91       	ld	r28, X+
    2514:	dc 91       	ld	r29, X
    2516:	17 97       	sbiw	r26, 0x07	; 7
    2518:	18 96       	adiw	r26, 0x08	; 8
    251a:	8d 91       	ld	r24, X+
    251c:	9c 91       	ld	r25, X
    251e:	19 97       	sbiw	r26, 0x09	; 9
    2520:	9f 83       	std	Y+7, r25	; 0x07
    2522:	8e 83       	std	Y+6, r24	; 0x06
    2524:	18 96       	adiw	r26, 0x08	; 8
    2526:	cd 91       	ld	r28, X+
    2528:	dc 91       	ld	r29, X
    252a:	19 97       	sbiw	r26, 0x09	; 9
    252c:	16 96       	adiw	r26, 0x06	; 6
    252e:	8d 91       	ld	r24, X+
    2530:	9c 91       	ld	r25, X
    2532:	17 97       	sbiw	r26, 0x07	; 7
    2534:	9d 83       	std	Y+5, r25	; 0x05
    2536:	8c 83       	std	Y+4, r24	; 0x04
    2538:	81 81       	ldd	r24, Z+1	; 0x01
    253a:	92 81       	ldd	r25, Z+2	; 0x02
    253c:	9d 01       	movw	r18, r26
    253e:	2e 5f       	subi	r18, 0xFE	; 254
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
    2542:	82 17       	cp	r24, r18
    2544:	93 07       	cpc	r25, r19
    2546:	31 f4       	brne	.+12     	; 0x2554 <xTaskGenericNotify+0x14e>
    2548:	18 96       	adiw	r26, 0x08	; 8
    254a:	8d 91       	ld	r24, X+
    254c:	9c 91       	ld	r25, X
    254e:	19 97       	sbiw	r26, 0x09	; 9
    2550:	92 83       	std	Z+2, r25	; 0x02
    2552:	81 83       	std	Z+1, r24	; 0x01
    2554:	1d 96       	adiw	r26, 0x0d	; 13
    2556:	1c 92       	st	X, r1
    2558:	1e 92       	st	-X, r1
    255a:	1c 97       	sbiw	r26, 0x0c	; 12
    255c:	80 81       	ld	r24, Z
    255e:	81 50       	subi	r24, 0x01	; 1
    2560:	80 83       	st	Z, r24
    2562:	5a 96       	adiw	r26, 0x1a	; 26
    2564:	ec 91       	ld	r30, X
    2566:	5a 97       	sbiw	r26, 0x1a	; 26
    2568:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <uxTopReadyPriority>
    256c:	8e 17       	cp	r24, r30
    256e:	10 f4       	brcc	.+4      	; 0x2574 <xTaskGenericNotify+0x16e>
    2570:	e0 93 c1 10 	sts	0x10C1, r30	; 0x8010c1 <uxTopReadyPriority>
    2574:	8b e0       	ldi	r24, 0x0B	; 11
    2576:	8e 9f       	mul	r24, r30
    2578:	f0 01       	movw	r30, r0
    257a:	11 24       	eor	r1, r1
    257c:	ed 5f       	subi	r30, 0xFD	; 253
    257e:	fe 4e       	sbci	r31, 0xEE	; 238
    2580:	01 80       	ldd	r0, Z+1	; 0x01
    2582:	f2 81       	ldd	r31, Z+2	; 0x02
    2584:	e0 2d       	mov	r30, r0
    2586:	17 96       	adiw	r26, 0x07	; 7
    2588:	fc 93       	st	X, r31
    258a:	ee 93       	st	-X, r30
    258c:	16 97       	sbiw	r26, 0x06	; 6
    258e:	46 81       	ldd	r20, Z+6	; 0x06
    2590:	57 81       	ldd	r21, Z+7	; 0x07
    2592:	19 96       	adiw	r26, 0x09	; 9
    2594:	5c 93       	st	X, r21
    2596:	4e 93       	st	-X, r20
    2598:	18 97       	sbiw	r26, 0x08	; 8
    259a:	c6 81       	ldd	r28, Z+6	; 0x06
    259c:	d7 81       	ldd	r29, Z+7	; 0x07
    259e:	3d 83       	std	Y+5, r19	; 0x05
    25a0:	2c 83       	std	Y+4, r18	; 0x04
    25a2:	37 83       	std	Z+7, r19	; 0x07
    25a4:	26 83       	std	Z+6, r18	; 0x06
    25a6:	5a 96       	adiw	r26, 0x1a	; 26
    25a8:	ec 91       	ld	r30, X
    25aa:	5a 97       	sbiw	r26, 0x1a	; 26
    25ac:	8e 9f       	mul	r24, r30
    25ae:	f0 01       	movw	r30, r0
    25b0:	11 24       	eor	r1, r1
    25b2:	ed 5f       	subi	r30, 0xFD	; 253
    25b4:	fe 4e       	sbci	r31, 0xEE	; 238
    25b6:	1d 96       	adiw	r26, 0x0d	; 13
    25b8:	fc 93       	st	X, r31
    25ba:	ee 93       	st	-X, r30
    25bc:	1c 97       	sbiw	r26, 0x0c	; 12
    25be:	80 81       	ld	r24, Z
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	80 83       	st	Z, r24
    25c4:	5a 96       	adiw	r26, 0x1a	; 26
    25c6:	9c 91       	ld	r25, X
    25c8:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    25cc:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    25d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    25d2:	89 17       	cp	r24, r25
    25d4:	10 f4       	brcc	.+4      	; 0x25da <xTaskGenericNotify+0x1d4>
    25d6:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    25da:	0f 90       	pop	r0
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	80 2f       	mov	r24, r16
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	bf 90       	pop	r11
    25ec:	af 90       	pop	r10
    25ee:	9f 90       	pop	r9
    25f0:	8f 90       	pop	r8
    25f2:	08 95       	ret

000025f4 <xTaskGenericNotifyFromISR>:
    25f4:	8f 92       	push	r8
    25f6:	9f 92       	push	r9
    25f8:	af 92       	push	r10
    25fa:	bf 92       	push	r11
    25fc:	cf 92       	push	r12
    25fe:	df 92       	push	r13
    2600:	ef 92       	push	r14
    2602:	ff 92       	push	r15
    2604:	0f 93       	push	r16
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	dc 01       	movw	r26, r24
    260c:	e1 14       	cp	r14, r1
    260e:	f1 04       	cpc	r15, r1
    2610:	89 f0       	breq	.+34     	; 0x2634 <xTaskGenericNotifyFromISR+0x40>
    2612:	e6 2f       	mov	r30, r22
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	ee 0f       	add	r30, r30
    2618:	ff 1f       	adc	r31, r31
    261a:	ee 0f       	add	r30, r30
    261c:	ff 1f       	adc	r31, r31
    261e:	e8 0f       	add	r30, r24
    2620:	f9 1f       	adc	r31, r25
    2622:	87 a4       	ldd	r8, Z+47	; 0x2f
    2624:	90 a8       	ldd	r9, Z+48	; 0x30
    2626:	a1 a8       	ldd	r10, Z+49	; 0x31
    2628:	b2 a8       	ldd	r11, Z+50	; 0x32
    262a:	f7 01       	movw	r30, r14
    262c:	80 82       	st	Z, r8
    262e:	91 82       	std	Z+1, r9	; 0x01
    2630:	a2 82       	std	Z+2, r10	; 0x02
    2632:	b3 82       	std	Z+3, r11	; 0x03
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	fd 01       	movw	r30, r26
    2638:	e6 0f       	add	r30, r22
    263a:	f7 1f       	adc	r31, r23
    263c:	93 a9       	ldd	r25, Z+51	; 0x33
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	83 ab       	std	Z+51, r24	; 0x33
    2642:	02 30       	cpi	r16, 0x02	; 2
    2644:	01 f1       	breq	.+64     	; 0x2686 <xTaskGenericNotifyFromISR+0x92>
    2646:	18 f4       	brcc	.+6      	; 0x264e <xTaskGenericNotifyFromISR+0x5a>
    2648:	01 30       	cpi	r16, 0x01	; 1
    264a:	31 f0       	breq	.+12     	; 0x2658 <xTaskGenericNotifyFromISR+0x64>
    264c:	4d c0       	rjmp	.+154    	; 0x26e8 <xTaskGenericNotifyFromISR+0xf4>
    264e:	03 30       	cpi	r16, 0x03	; 3
    2650:	79 f1       	breq	.+94     	; 0x26b0 <xTaskGenericNotifyFromISR+0xbc>
    2652:	04 30       	cpi	r16, 0x04	; 4
    2654:	d1 f1       	breq	.+116    	; 0x26ca <xTaskGenericNotifyFromISR+0xd6>
    2656:	48 c0       	rjmp	.+144    	; 0x26e8 <xTaskGenericNotifyFromISR+0xf4>
    2658:	66 0f       	add	r22, r22
    265a:	77 1f       	adc	r23, r23
    265c:	66 0f       	add	r22, r22
    265e:	77 1f       	adc	r23, r23
    2660:	fd 01       	movw	r30, r26
    2662:	e6 0f       	add	r30, r22
    2664:	f7 1f       	adc	r31, r23
    2666:	87 a4       	ldd	r8, Z+47	; 0x2f
    2668:	90 a8       	ldd	r9, Z+48	; 0x30
    266a:	a1 a8       	ldd	r10, Z+49	; 0x31
    266c:	b2 a8       	ldd	r11, Z+50	; 0x32
    266e:	ba 01       	movw	r22, r20
    2670:	a9 01       	movw	r20, r18
    2672:	48 29       	or	r20, r8
    2674:	59 29       	or	r21, r9
    2676:	6a 29       	or	r22, r10
    2678:	7b 29       	or	r23, r11
    267a:	47 a7       	std	Z+47, r20	; 0x2f
    267c:	50 ab       	std	Z+48, r21	; 0x30
    267e:	61 ab       	std	Z+49, r22	; 0x31
    2680:	72 ab       	std	Z+50, r23	; 0x32
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	34 c0       	rjmp	.+104    	; 0x26ee <xTaskGenericNotifyFromISR+0xfa>
    2686:	66 0f       	add	r22, r22
    2688:	77 1f       	adc	r23, r23
    268a:	66 0f       	add	r22, r22
    268c:	77 1f       	adc	r23, r23
    268e:	fd 01       	movw	r30, r26
    2690:	e6 0f       	add	r30, r22
    2692:	f7 1f       	adc	r31, r23
    2694:	47 a5       	ldd	r20, Z+47	; 0x2f
    2696:	50 a9       	ldd	r21, Z+48	; 0x30
    2698:	61 a9       	ldd	r22, Z+49	; 0x31
    269a:	72 a9       	ldd	r23, Z+50	; 0x32
    269c:	4f 5f       	subi	r20, 0xFF	; 255
    269e:	5f 4f       	sbci	r21, 0xFF	; 255
    26a0:	6f 4f       	sbci	r22, 0xFF	; 255
    26a2:	7f 4f       	sbci	r23, 0xFF	; 255
    26a4:	47 a7       	std	Z+47, r20	; 0x2f
    26a6:	50 ab       	std	Z+48, r21	; 0x30
    26a8:	61 ab       	std	Z+49, r22	; 0x31
    26aa:	72 ab       	std	Z+50, r23	; 0x32
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	1f c0       	rjmp	.+62     	; 0x26ee <xTaskGenericNotifyFromISR+0xfa>
    26b0:	66 0f       	add	r22, r22
    26b2:	77 1f       	adc	r23, r23
    26b4:	66 0f       	add	r22, r22
    26b6:	77 1f       	adc	r23, r23
    26b8:	fd 01       	movw	r30, r26
    26ba:	e6 0f       	add	r30, r22
    26bc:	f7 1f       	adc	r31, r23
    26be:	27 a7       	std	Z+47, r18	; 0x2f
    26c0:	30 ab       	std	Z+48, r19	; 0x30
    26c2:	41 ab       	std	Z+49, r20	; 0x31
    26c4:	52 ab       	std	Z+50, r21	; 0x32
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	12 c0       	rjmp	.+36     	; 0x26ee <xTaskGenericNotifyFromISR+0xfa>
    26ca:	92 30       	cpi	r25, 0x02	; 2
    26cc:	79 f0       	breq	.+30     	; 0x26ec <xTaskGenericNotifyFromISR+0xf8>
    26ce:	66 0f       	add	r22, r22
    26d0:	77 1f       	adc	r23, r23
    26d2:	66 0f       	add	r22, r22
    26d4:	77 1f       	adc	r23, r23
    26d6:	fd 01       	movw	r30, r26
    26d8:	e6 0f       	add	r30, r22
    26da:	f7 1f       	adc	r31, r23
    26dc:	27 a7       	std	Z+47, r18	; 0x2f
    26de:	30 ab       	std	Z+48, r19	; 0x30
    26e0:	41 ab       	std	Z+49, r20	; 0x31
    26e2:	52 ab       	std	Z+50, r21	; 0x32
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	03 c0       	rjmp	.+6      	; 0x26ee <xTaskGenericNotifyFromISR+0xfa>
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <xTaskGenericNotifyFromISR+0xfa>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	91 30       	cpi	r25, 0x01	; 1
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <xTaskGenericNotifyFromISR+0x100>
    26f2:	96 c0       	rjmp	.+300    	; 0x2820 <xTaskGenericNotifyFromISR+0x22c>
    26f4:	90 91 b2 10 	lds	r25, 0x10B2	; 0x8010b2 <uxSchedulerSuspended>
    26f8:	91 11       	cpse	r25, r1
    26fa:	5f c0       	rjmp	.+190    	; 0x27ba <xTaskGenericNotifyFromISR+0x1c6>
    26fc:	1c 96       	adiw	r26, 0x0c	; 12
    26fe:	ed 91       	ld	r30, X+
    2700:	fc 91       	ld	r31, X
    2702:	1d 97       	sbiw	r26, 0x0d	; 13
    2704:	16 96       	adiw	r26, 0x06	; 6
    2706:	cd 91       	ld	r28, X+
    2708:	dc 91       	ld	r29, X
    270a:	17 97       	sbiw	r26, 0x07	; 7
    270c:	18 96       	adiw	r26, 0x08	; 8
    270e:	2d 91       	ld	r18, X+
    2710:	3c 91       	ld	r19, X
    2712:	19 97       	sbiw	r26, 0x09	; 9
    2714:	3f 83       	std	Y+7, r19	; 0x07
    2716:	2e 83       	std	Y+6, r18	; 0x06
    2718:	18 96       	adiw	r26, 0x08	; 8
    271a:	cd 91       	ld	r28, X+
    271c:	dc 91       	ld	r29, X
    271e:	19 97       	sbiw	r26, 0x09	; 9
    2720:	16 96       	adiw	r26, 0x06	; 6
    2722:	2d 91       	ld	r18, X+
    2724:	3c 91       	ld	r19, X
    2726:	17 97       	sbiw	r26, 0x07	; 7
    2728:	3d 83       	std	Y+5, r19	; 0x05
    272a:	2c 83       	std	Y+4, r18	; 0x04
    272c:	41 81       	ldd	r20, Z+1	; 0x01
    272e:	52 81       	ldd	r21, Z+2	; 0x02
    2730:	9d 01       	movw	r18, r26
    2732:	2e 5f       	subi	r18, 0xFE	; 254
    2734:	3f 4f       	sbci	r19, 0xFF	; 255
    2736:	42 17       	cp	r20, r18
    2738:	53 07       	cpc	r21, r19
    273a:	31 f4       	brne	.+12     	; 0x2748 <xTaskGenericNotifyFromISR+0x154>
    273c:	18 96       	adiw	r26, 0x08	; 8
    273e:	4d 91       	ld	r20, X+
    2740:	5c 91       	ld	r21, X
    2742:	19 97       	sbiw	r26, 0x09	; 9
    2744:	52 83       	std	Z+2, r21	; 0x02
    2746:	41 83       	std	Z+1, r20	; 0x01
    2748:	1d 96       	adiw	r26, 0x0d	; 13
    274a:	1c 92       	st	X, r1
    274c:	1e 92       	st	-X, r1
    274e:	1c 97       	sbiw	r26, 0x0c	; 12
    2750:	90 81       	ld	r25, Z
    2752:	91 50       	subi	r25, 0x01	; 1
    2754:	90 83       	st	Z, r25
    2756:	5a 96       	adiw	r26, 0x1a	; 26
    2758:	ec 91       	ld	r30, X
    275a:	5a 97       	sbiw	r26, 0x1a	; 26
    275c:	90 91 c1 10 	lds	r25, 0x10C1	; 0x8010c1 <uxTopReadyPriority>
    2760:	9e 17       	cp	r25, r30
    2762:	10 f4       	brcc	.+4      	; 0x2768 <xTaskGenericNotifyFromISR+0x174>
    2764:	e0 93 c1 10 	sts	0x10C1, r30	; 0x8010c1 <uxTopReadyPriority>
    2768:	9b e0       	ldi	r25, 0x0B	; 11
    276a:	9e 9f       	mul	r25, r30
    276c:	f0 01       	movw	r30, r0
    276e:	11 24       	eor	r1, r1
    2770:	ed 5f       	subi	r30, 0xFD	; 253
    2772:	fe 4e       	sbci	r31, 0xEE	; 238
    2774:	01 80       	ldd	r0, Z+1	; 0x01
    2776:	f2 81       	ldd	r31, Z+2	; 0x02
    2778:	e0 2d       	mov	r30, r0
    277a:	17 96       	adiw	r26, 0x07	; 7
    277c:	fc 93       	st	X, r31
    277e:	ee 93       	st	-X, r30
    2780:	16 97       	sbiw	r26, 0x06	; 6
    2782:	46 81       	ldd	r20, Z+6	; 0x06
    2784:	57 81       	ldd	r21, Z+7	; 0x07
    2786:	19 96       	adiw	r26, 0x09	; 9
    2788:	5c 93       	st	X, r21
    278a:	4e 93       	st	-X, r20
    278c:	18 97       	sbiw	r26, 0x08	; 8
    278e:	c6 81       	ldd	r28, Z+6	; 0x06
    2790:	d7 81       	ldd	r29, Z+7	; 0x07
    2792:	3d 83       	std	Y+5, r19	; 0x05
    2794:	2c 83       	std	Y+4, r18	; 0x04
    2796:	37 83       	std	Z+7, r19	; 0x07
    2798:	26 83       	std	Z+6, r18	; 0x06
    279a:	5a 96       	adiw	r26, 0x1a	; 26
    279c:	ec 91       	ld	r30, X
    279e:	5a 97       	sbiw	r26, 0x1a	; 26
    27a0:	9e 9f       	mul	r25, r30
    27a2:	f0 01       	movw	r30, r0
    27a4:	11 24       	eor	r1, r1
    27a6:	ed 5f       	subi	r30, 0xFD	; 253
    27a8:	fe 4e       	sbci	r31, 0xEE	; 238
    27aa:	1d 96       	adiw	r26, 0x0d	; 13
    27ac:	fc 93       	st	X, r31
    27ae:	ee 93       	st	-X, r30
    27b0:	1c 97       	sbiw	r26, 0x0c	; 12
    27b2:	90 81       	ld	r25, Z
    27b4:	9f 5f       	subi	r25, 0xFF	; 255
    27b6:	90 83       	st	Z, r25
    27b8:	21 c0       	rjmp	.+66     	; 0x27fc <xTaskGenericNotifyFromISR+0x208>
    27ba:	6e ed       	ldi	r22, 0xDE	; 222
    27bc:	70 e1       	ldi	r23, 0x10	; 16
    27be:	fb 01       	movw	r30, r22
    27c0:	c1 81       	ldd	r28, Z+1	; 0x01
    27c2:	d2 81       	ldd	r29, Z+2	; 0x02
    27c4:	53 96       	adiw	r26, 0x13	; 19
    27c6:	dc 93       	st	X, r29
    27c8:	ce 93       	st	-X, r28
    27ca:	52 97       	sbiw	r26, 0x12	; 18
    27cc:	2e 81       	ldd	r18, Y+6	; 0x06
    27ce:	3f 81       	ldd	r19, Y+7	; 0x07
    27d0:	55 96       	adiw	r26, 0x15	; 21
    27d2:	3c 93       	st	X, r19
    27d4:	2e 93       	st	-X, r18
    27d6:	54 97       	sbiw	r26, 0x14	; 20
    27d8:	4e 81       	ldd	r20, Y+6	; 0x06
    27da:	5f 81       	ldd	r21, Y+7	; 0x07
    27dc:	9d 01       	movw	r18, r26
    27de:	22 5f       	subi	r18, 0xF2	; 242
    27e0:	3f 4f       	sbci	r19, 0xFF	; 255
    27e2:	fa 01       	movw	r30, r20
    27e4:	35 83       	std	Z+5, r19	; 0x05
    27e6:	24 83       	std	Z+4, r18	; 0x04
    27e8:	3f 83       	std	Y+7, r19	; 0x07
    27ea:	2e 83       	std	Y+6, r18	; 0x06
    27ec:	59 96       	adiw	r26, 0x19	; 25
    27ee:	7c 93       	st	X, r23
    27f0:	6e 93       	st	-X, r22
    27f2:	58 97       	sbiw	r26, 0x18	; 24
    27f4:	fb 01       	movw	r30, r22
    27f6:	90 81       	ld	r25, Z
    27f8:	9f 5f       	subi	r25, 0xFF	; 255
    27fa:	90 83       	st	Z, r25
    27fc:	5a 96       	adiw	r26, 0x1a	; 26
    27fe:	2c 91       	ld	r18, X
    2800:	e0 91 71 11 	lds	r30, 0x1171	; 0x801171 <pxCurrentTCB>
    2804:	f0 91 72 11 	lds	r31, 0x1172	; 0x801172 <pxCurrentTCB+0x1>
    2808:	92 8d       	ldd	r25, Z+26	; 0x1a
    280a:	92 17       	cp	r25, r18
    280c:	48 f4       	brcc	.+18     	; 0x2820 <xTaskGenericNotifyFromISR+0x22c>
    280e:	c1 14       	cp	r12, r1
    2810:	d1 04       	cpc	r13, r1
    2812:	19 f0       	breq	.+6      	; 0x281a <xTaskGenericNotifyFromISR+0x226>
    2814:	91 e0       	ldi	r25, 0x01	; 1
    2816:	f6 01       	movw	r30, r12
    2818:	90 83       	st	Z, r25
    281a:	91 e0       	ldi	r25, 0x01	; 1
    281c:	90 93 bb 10 	sts	0x10BB, r25	; 0x8010bb <xYieldPending>
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	0f 91       	pop	r16
    2826:	ff 90       	pop	r15
    2828:	ef 90       	pop	r14
    282a:	df 90       	pop	r13
    282c:	cf 90       	pop	r12
    282e:	bf 90       	pop	r11
    2830:	af 90       	pop	r10
    2832:	9f 90       	pop	r9
    2834:	8f 90       	pop	r8
    2836:	08 95       	ret

00002838 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	21 f4       	brne	.+8      	; 0x2844 <xTaskGenericNotifyStateClear+0xc>
    283c:	80 91 71 11 	lds	r24, 0x1171	; 0x801171 <pxCurrentTCB>
    2840:	90 91 72 11 	lds	r25, 0x1172	; 0x801172 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	fc 01       	movw	r30, r24
    284e:	e6 0f       	add	r30, r22
    2850:	f7 1f       	adc	r31, r23
    2852:	23 a9       	ldd	r18, Z+51	; 0x33
    2854:	22 30       	cpi	r18, 0x02	; 2
    2856:	31 f4       	brne	.+12     	; 0x2864 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2858:	fc 01       	movw	r30, r24
    285a:	e6 0f       	add	r30, r22
    285c:	f7 1f       	adc	r31, r23
    285e:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	01 c0       	rjmp	.+2      	; 0x2866 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2864:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2866:	0f 90       	pop	r0
    2868:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    286a:	08 95       	ret

0000286c <prvGetNextExpireTime>:
    286c:	dc 01       	movw	r26, r24
    286e:	e0 91 7d 11 	lds	r30, 0x117D	; 0x80117d <pxCurrentTimerList>
    2872:	f0 91 7e 11 	lds	r31, 0x117E	; 0x80117e <pxCurrentTimerList+0x1>
    2876:	80 81       	ld	r24, Z
    2878:	91 e0       	ldi	r25, 0x01	; 1
    287a:	81 11       	cpse	r24, r1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9c 93       	st	X, r25
    2880:	91 11       	cpse	r25, r1
    2882:	08 c0       	rjmp	.+16     	; 0x2894 <prvGetNextExpireTime+0x28>
    2884:	07 80       	ldd	r0, Z+7	; 0x07
    2886:	f0 85       	ldd	r31, Z+8	; 0x08
    2888:	e0 2d       	mov	r30, r0
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	08 95       	ret
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	cb 01       	movw	r24, r22
    289a:	08 95       	ret

0000289c <prvInsertTimerInActiveList>:
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	fc 01       	movw	r30, r24
    28aa:	42 83       	std	Z+2, r20	; 0x02
    28ac:	53 83       	std	Z+3, r21	; 0x03
    28ae:	64 83       	std	Z+4, r22	; 0x04
    28b0:	75 83       	std	Z+5, r23	; 0x05
    28b2:	93 87       	std	Z+11, r25	; 0x0b
    28b4:	82 87       	std	Z+10, r24	; 0x0a
    28b6:	04 17       	cp	r16, r20
    28b8:	15 07       	cpc	r17, r21
    28ba:	26 07       	cpc	r18, r22
    28bc:	37 07       	cpc	r19, r23
    28be:	c0 f0       	brcs	.+48     	; 0x28f0 <prvInsertTimerInActiveList+0x54>
    28c0:	0c 19       	sub	r16, r12
    28c2:	1d 09       	sbc	r17, r13
    28c4:	2e 09       	sbc	r18, r14
    28c6:	3f 09       	sbc	r19, r15
    28c8:	86 85       	ldd	r24, Z+14	; 0x0e
    28ca:	97 85       	ldd	r25, Z+15	; 0x0f
    28cc:	a0 89       	ldd	r26, Z+16	; 0x10
    28ce:	b1 89       	ldd	r27, Z+17	; 0x11
    28d0:	08 17       	cp	r16, r24
    28d2:	19 07       	cpc	r17, r25
    28d4:	2a 07       	cpc	r18, r26
    28d6:	3b 07       	cpc	r19, r27
    28d8:	00 f5       	brcc	.+64     	; 0x291a <prvInsertTimerInActiveList+0x7e>
    28da:	bf 01       	movw	r22, r30
    28dc:	6e 5f       	subi	r22, 0xFE	; 254
    28de:	7f 4f       	sbci	r23, 0xFF	; 255
    28e0:	80 91 7b 11 	lds	r24, 0x117B	; 0x80117b <pxOverflowTimerList>
    28e4:	90 91 7c 11 	lds	r25, 0x117C	; 0x80117c <pxOverflowTimerList+0x1>
    28e8:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	18 c0       	rjmp	.+48     	; 0x2920 <prvInsertTimerInActiveList+0x84>
    28f0:	0c 15       	cp	r16, r12
    28f2:	1d 05       	cpc	r17, r13
    28f4:	2e 05       	cpc	r18, r14
    28f6:	3f 05       	cpc	r19, r15
    28f8:	28 f4       	brcc	.+10     	; 0x2904 <prvInsertTimerInActiveList+0x68>
    28fa:	4c 15       	cp	r20, r12
    28fc:	5d 05       	cpc	r21, r13
    28fe:	6e 05       	cpc	r22, r14
    2900:	7f 05       	cpc	r23, r15
    2902:	68 f4       	brcc	.+26     	; 0x291e <prvInsertTimerInActiveList+0x82>
    2904:	bf 01       	movw	r22, r30
    2906:	6e 5f       	subi	r22, 0xFE	; 254
    2908:	7f 4f       	sbci	r23, 0xFF	; 255
    290a:	80 91 7d 11 	lds	r24, 0x117D	; 0x80117d <pxCurrentTimerList>
    290e:	90 91 7e 11 	lds	r25, 0x117E	; 0x80117e <pxCurrentTimerList+0x1>
    2912:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	03 c0       	rjmp	.+6      	; 0x2920 <prvInsertTimerInActiveList+0x84>
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	01 c0       	rjmp	.+2      	; 0x2920 <prvInsertTimerInActiveList+0x84>
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	ff 90       	pop	r15
    2926:	ef 90       	pop	r14
    2928:	df 90       	pop	r13
    292a:	cf 90       	pop	r12
    292c:	08 95       	ret

0000292e <prvCheckForValidListAndQueue>:
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	0f 92       	push	r0
    2934:	80 91 79 11 	lds	r24, 0x1179	; 0x801179 <xTimerQueue>
    2938:	90 91 7a 11 	lds	r25, 0x117A	; 0x80117a <xTimerQueue+0x1>
    293c:	89 2b       	or	r24, r25
    293e:	e9 f4       	brne	.+58     	; 0x297a <prvCheckForValidListAndQueue+0x4c>
    2940:	8a e8       	ldi	r24, 0x8A	; 138
    2942:	91 e1       	ldi	r25, 0x11	; 17
    2944:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    2948:	8f e7       	ldi	r24, 0x7F	; 127
    294a:	91 e1       	ldi	r25, 0x11	; 17
    294c:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    2950:	8a e8       	ldi	r24, 0x8A	; 138
    2952:	91 e1       	ldi	r25, 0x11	; 17
    2954:	90 93 7e 11 	sts	0x117E, r25	; 0x80117e <pxCurrentTimerList+0x1>
    2958:	80 93 7d 11 	sts	0x117D, r24	; 0x80117d <pxCurrentTimerList>
    295c:	8f e7       	ldi	r24, 0x7F	; 127
    295e:	91 e1       	ldi	r25, 0x11	; 17
    2960:	90 93 7c 11 	sts	0x117C, r25	; 0x80117c <pxOverflowTimerList+0x1>
    2964:	80 93 7b 11 	sts	0x117B, r24	; 0x80117b <pxOverflowTimerList>
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	67 e0       	ldi	r22, 0x07	; 7
    296c:	8a e0       	ldi	r24, 0x0A	; 10
    296e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <xQueueGenericCreate>
    2972:	90 93 7a 11 	sts	0x117A, r25	; 0x80117a <xTimerQueue+0x1>
    2976:	80 93 79 11 	sts	0x1179, r24	; 0x801179 <xTimerQueue>
    297a:	0f 90       	pop	r0
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	08 95       	ret

00002980 <xTimerCreateTimerTask>:
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	d3 df       	rcall	.-90     	; 0x292e <prvCheckForValidListAndQueue>
    2988:	80 91 79 11 	lds	r24, 0x1179	; 0x801179 <xTimerQueue>
    298c:	90 91 7a 11 	lds	r25, 0x117A	; 0x80117a <xTimerQueue+0x1>
    2990:	89 2b       	or	r24, r25
    2992:	91 f0       	breq	.+36     	; 0x29b8 <xTimerCreateTimerTask+0x38>
    2994:	0f 2e       	mov	r0, r31
    2996:	f7 e7       	ldi	r31, 0x77	; 119
    2998:	ef 2e       	mov	r14, r31
    299a:	f1 e1       	ldi	r31, 0x11	; 17
    299c:	ff 2e       	mov	r15, r31
    299e:	f0 2d       	mov	r31, r0
    29a0:	03 e0       	ldi	r16, 0x03	; 3
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 ec       	ldi	r20, 0xC0	; 192
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	6c e7       	ldi	r22, 0x7C	; 124
    29ac:	72 e0       	ldi	r23, 0x02	; 2
    29ae:	86 e8       	ldi	r24, 0x86	; 134
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xTaskCreate>
    29b6:	01 c0       	rjmp	.+2      	; 0x29ba <xTimerCreateTimerTask+0x3a>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	ef 90       	pop	r14
    29c0:	08 95       	ret

000029c2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    29c2:	8f 92       	push	r8
    29c4:	9f 92       	push	r9
    29c6:	af 92       	push	r10
    29c8:	bf 92       	push	r11
    29ca:	cf 92       	push	r12
    29cc:	df 92       	push	r13
    29ce:	ef 92       	push	r14
    29d0:	ff 92       	push	r15
    29d2:	0f 93       	push	r16
    29d4:	1f 93       	push	r17
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	27 97       	sbiw	r28, 0x07	; 7
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    29ea:	e0 91 79 11 	lds	r30, 0x1179	; 0x801179 <xTimerQueue>
    29ee:	f0 91 7a 11 	lds	r31, 0x117A	; 0x80117a <xTimerQueue+0x1>
    29f2:	30 97       	sbiw	r30, 0x00	; 0
    29f4:	81 f1       	breq	.+96     	; 0x2a56 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    29f6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    29f8:	2a 83       	std	Y+2, r18	; 0x02
    29fa:	3b 83       	std	Y+3, r19	; 0x03
    29fc:	4c 83       	std	Y+4, r20	; 0x04
    29fe:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a00:	9f 83       	std	Y+7, r25	; 0x07
    2a02:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a04:	66 30       	cpi	r22, 0x06	; 6
    2a06:	f4 f4       	brge	.+60     	; 0x2a44 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a08:	ee db       	rcall	.-2084   	; 0x21e6 <xTaskGetSchedulerState>
    2a0a:	82 30       	cpi	r24, 0x02	; 2
    2a0c:	69 f4       	brne	.+26     	; 0x2a28 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a0e:	00 e0       	ldi	r16, 0x00	; 0
    2a10:	a7 01       	movw	r20, r14
    2a12:	96 01       	movw	r18, r12
    2a14:	be 01       	movw	r22, r28
    2a16:	6f 5f       	subi	r22, 0xFF	; 255
    2a18:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1a:	80 91 79 11 	lds	r24, 0x1179	; 0x801179 <xTimerQueue>
    2a1e:	90 91 7a 11 	lds	r25, 0x117A	; 0x80117a <xTimerQueue+0x1>
    2a22:	0e 94 f7 04 	call	0x9ee	; 0x9ee <xQueueGenericSend>
    2a26:	18 c0       	rjmp	.+48     	; 0x2a58 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2a28:	00 e0       	ldi	r16, 0x00	; 0
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	a9 01       	movw	r20, r18
    2a30:	be 01       	movw	r22, r28
    2a32:	6f 5f       	subi	r22, 0xFF	; 255
    2a34:	7f 4f       	sbci	r23, 0xFF	; 255
    2a36:	80 91 79 11 	lds	r24, 0x1179	; 0x801179 <xTimerQueue>
    2a3a:	90 91 7a 11 	lds	r25, 0x117A	; 0x80117a <xTimerQueue+0x1>
    2a3e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <xQueueGenericSend>
    2a42:	0a c0       	rjmp	.+20     	; 0x2a58 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	a8 01       	movw	r20, r16
    2a48:	be 01       	movw	r22, r28
    2a4a:	6f 5f       	subi	r22, 0xFF	; 255
    2a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4e:	cf 01       	movw	r24, r30
    2a50:	0e 94 a7 05 	call	0xb4e	; 0xb4e <xQueueGenericSendFromISR>
    2a54:	01 c0       	rjmp	.+2      	; 0x2a58 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2a56:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2a58:	27 96       	adiw	r28, 0x07	; 7
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	ff 90       	pop	r15
    2a6e:	ef 90       	pop	r14
    2a70:	df 90       	pop	r13
    2a72:	cf 90       	pop	r12
    2a74:	bf 90       	pop	r11
    2a76:	af 90       	pop	r10
    2a78:	9f 90       	pop	r9
    2a7a:	8f 90       	pop	r8
    2a7c:	08 95       	ret

00002a7e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2a7e:	8f 92       	push	r8
    2a80:	9f 92       	push	r9
    2a82:	af 92       	push	r10
    2a84:	bf 92       	push	r11
    2a86:	cf 92       	push	r12
    2a88:	df 92       	push	r13
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a96:	3b c0       	rjmp	.+118    	; 0x2b0e <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a98:	07 80       	ldd	r0, Z+7	; 0x07
    2a9a:	f0 85       	ldd	r31, Z+8	; 0x08
    2a9c:	e0 2d       	mov	r30, r0
    2a9e:	80 80       	ld	r8, Z
    2aa0:	91 80       	ldd	r9, Z+1	; 0x01
    2aa2:	a2 80       	ldd	r10, Z+2	; 0x02
    2aa4:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2aa6:	c0 85       	ldd	r28, Z+8	; 0x08
    2aa8:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2aaa:	8e 01       	movw	r16, r28
    2aac:	0e 5f       	subi	r16, 0xFE	; 254
    2aae:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab0:	c8 01       	movw	r24, r16
    2ab2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ab6:	ec 89       	ldd	r30, Y+20	; 0x14
    2ab8:	fd 89       	ldd	r31, Y+21	; 0x15
    2aba:	ce 01       	movw	r24, r28
    2abc:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2abe:	8e 89       	ldd	r24, Y+22	; 0x16
    2ac0:	82 ff       	sbrs	r24, 2
    2ac2:	25 c0       	rjmp	.+74     	; 0x2b0e <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2ac4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ac6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ac8:	a8 89       	ldd	r26, Y+16	; 0x10
    2aca:	b9 89       	ldd	r27, Y+17	; 0x11
    2acc:	88 0d       	add	r24, r8
    2ace:	99 1d       	adc	r25, r9
    2ad0:	aa 1d       	adc	r26, r10
    2ad2:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2ad4:	88 16       	cp	r8, r24
    2ad6:	99 06       	cpc	r9, r25
    2ad8:	aa 06       	cpc	r10, r26
    2ada:	bb 06       	cpc	r11, r27
    2adc:	70 f4       	brcc	.+28     	; 0x2afa <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2ade:	8a 83       	std	Y+2, r24	; 0x02
    2ae0:	9b 83       	std	Y+3, r25	; 0x03
    2ae2:	ac 83       	std	Y+4, r26	; 0x04
    2ae4:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2ae6:	db 87       	std	Y+11, r29	; 0x0b
    2ae8:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2aea:	b8 01       	movw	r22, r16
    2aec:	80 91 7d 11 	lds	r24, 0x117D	; 0x80117d <pxCurrentTimerList>
    2af0:	90 91 7e 11 	lds	r25, 0x117E	; 0x80117e <pxCurrentTimerList+0x1>
    2af4:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    2af8:	0a c0       	rjmp	.+20     	; 0x2b0e <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2afa:	c1 2c       	mov	r12, r1
    2afc:	d1 2c       	mov	r13, r1
    2afe:	76 01       	movw	r14, r12
    2b00:	00 e0       	ldi	r16, 0x00	; 0
    2b02:	10 e0       	ldi	r17, 0x00	; 0
    2b04:	a5 01       	movw	r20, r10
    2b06:	94 01       	movw	r18, r8
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	5a df       	rcall	.-332    	; 0x29c2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b0e:	e0 91 7d 11 	lds	r30, 0x117D	; 0x80117d <pxCurrentTimerList>
    2b12:	f0 91 7e 11 	lds	r31, 0x117E	; 0x80117e <pxCurrentTimerList+0x1>
    2b16:	80 81       	ld	r24, Z
    2b18:	81 11       	cpse	r24, r1
    2b1a:	be cf       	rjmp	.-132    	; 0x2a98 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2b1c:	80 91 7b 11 	lds	r24, 0x117B	; 0x80117b <pxOverflowTimerList>
    2b20:	90 91 7c 11 	lds	r25, 0x117C	; 0x80117c <pxOverflowTimerList+0x1>
    2b24:	90 93 7e 11 	sts	0x117E, r25	; 0x80117e <pxCurrentTimerList+0x1>
    2b28:	80 93 7d 11 	sts	0x117D, r24	; 0x80117d <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2b2c:	f0 93 7c 11 	sts	0x117C, r31	; 0x80117c <pxOverflowTimerList+0x1>
    2b30:	e0 93 7b 11 	sts	0x117B, r30	; 0x80117b <pxOverflowTimerList>
    }
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	ff 90       	pop	r15
    2b3e:	ef 90       	pop	r14
    2b40:	df 90       	pop	r13
    2b42:	cf 90       	pop	r12
    2b44:	bf 90       	pop	r11
    2b46:	af 90       	pop	r10
    2b48:	9f 90       	pop	r9
    2b4a:	8f 90       	pop	r8
    2b4c:	08 95       	ret

00002b4e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2b4e:	cf 92       	push	r12
    2b50:	df 92       	push	r13
    2b52:	ef 92       	push	r14
    2b54:	ff 92       	push	r15
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2b5c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <xTaskGetTickCount>
    2b60:	6b 01       	movw	r12, r22
    2b62:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2b64:	80 91 73 11 	lds	r24, 0x1173	; 0x801173 <xLastTime.2436>
    2b68:	90 91 74 11 	lds	r25, 0x1174	; 0x801174 <xLastTime.2436+0x1>
    2b6c:	a0 91 75 11 	lds	r26, 0x1175	; 0x801175 <xLastTime.2436+0x2>
    2b70:	b0 91 76 11 	lds	r27, 0x1176	; 0x801176 <xLastTime.2436+0x3>
    2b74:	c8 16       	cp	r12, r24
    2b76:	d9 06       	cpc	r13, r25
    2b78:	ea 06       	cpc	r14, r26
    2b7a:	fb 06       	cpc	r15, r27
    2b7c:	20 f4       	brcc	.+8      	; 0x2b86 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2b7e:	7f df       	rcall	.-258    	; 0x2a7e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	88 83       	st	Y, r24
    2b84:	01 c0       	rjmp	.+2      	; 0x2b88 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2b86:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2b88:	c0 92 73 11 	sts	0x1173, r12	; 0x801173 <xLastTime.2436>
    2b8c:	d0 92 74 11 	sts	0x1174, r13	; 0x801174 <xLastTime.2436+0x1>
    2b90:	e0 92 75 11 	sts	0x1175, r14	; 0x801175 <xLastTime.2436+0x2>
    2b94:	f0 92 76 11 	sts	0x1176, r15	; 0x801176 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2b98:	c7 01       	movw	r24, r14
    2b9a:	b6 01       	movw	r22, r12
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	ff 90       	pop	r15
    2ba2:	ef 90       	pop	r14
    2ba4:	df 90       	pop	r13
    2ba6:	cf 90       	pop	r12
    2ba8:	08 95       	ret

00002baa <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2baa:	4f 92       	push	r4
    2bac:	5f 92       	push	r5
    2bae:	6f 92       	push	r6
    2bb0:	7f 92       	push	r7
    2bb2:	8f 92       	push	r8
    2bb4:	9f 92       	push	r9
    2bb6:	af 92       	push	r10
    2bb8:	bf 92       	push	r11
    2bba:	cf 92       	push	r12
    2bbc:	df 92       	push	r13
    2bbe:	ef 92       	push	r14
    2bc0:	ff 92       	push	r15
    2bc2:	0f 93       	push	r16
    2bc4:	1f 93       	push	r17
    2bc6:	cf 93       	push	r28
    2bc8:	df 93       	push	r29
    2bca:	4b 01       	movw	r8, r22
    2bcc:	5c 01       	movw	r10, r24
    2bce:	29 01       	movw	r4, r18
    2bd0:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2bd2:	e0 91 7d 11 	lds	r30, 0x117D	; 0x80117d <pxCurrentTimerList>
    2bd6:	f0 91 7e 11 	lds	r31, 0x117E	; 0x80117e <pxCurrentTimerList+0x1>
    2bda:	07 80       	ldd	r0, Z+7	; 0x07
    2bdc:	f0 85       	ldd	r31, Z+8	; 0x08
    2bde:	e0 2d       	mov	r30, r0
    2be0:	c0 85       	ldd	r28, Z+8	; 0x08
    2be2:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2be4:	ce 01       	movw	r24, r28
    2be6:	02 96       	adiw	r24, 0x02	; 2
    2be8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2bec:	8e 89       	ldd	r24, Y+22	; 0x16
    2bee:	82 ff       	sbrs	r24, 2
    2bf0:	1b c0       	rjmp	.+54     	; 0x2c28 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2bf2:	4e 85       	ldd	r20, Y+14	; 0x0e
    2bf4:	5f 85       	ldd	r21, Y+15	; 0x0f
    2bf6:	68 89       	ldd	r22, Y+16	; 0x10
    2bf8:	79 89       	ldd	r23, Y+17	; 0x11
    2bfa:	48 0d       	add	r20, r8
    2bfc:	59 1d       	adc	r21, r9
    2bfe:	6a 1d       	adc	r22, r10
    2c00:	7b 1d       	adc	r23, r11
    2c02:	75 01       	movw	r14, r10
    2c04:	64 01       	movw	r12, r8
    2c06:	93 01       	movw	r18, r6
    2c08:	82 01       	movw	r16, r4
    2c0a:	ce 01       	movw	r24, r28
    2c0c:	47 de       	rcall	.-882    	; 0x289c <prvInsertTimerInActiveList>
    2c0e:	88 23       	and	r24, r24
    2c10:	69 f0       	breq	.+26     	; 0x2c2c <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c12:	c1 2c       	mov	r12, r1
    2c14:	d1 2c       	mov	r13, r1
    2c16:	76 01       	movw	r14, r12
    2c18:	00 e0       	ldi	r16, 0x00	; 0
    2c1a:	10 e0       	ldi	r17, 0x00	; 0
    2c1c:	a5 01       	movw	r20, r10
    2c1e:	94 01       	movw	r18, r8
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	ce 01       	movw	r24, r28
    2c24:	ce de       	rcall	.-612    	; 0x29c2 <xTimerGenericCommand>
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2c28:	8e 7f       	andi	r24, 0xFE	; 254
    2c2a:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2c2c:	ec 89       	ldd	r30, Y+20	; 0x14
    2c2e:	fd 89       	ldd	r31, Y+21	; 0x15
    2c30:	ce 01       	movw	r24, r28
    2c32:	19 95       	eicall
    }
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	ff 90       	pop	r15
    2c3e:	ef 90       	pop	r14
    2c40:	df 90       	pop	r13
    2c42:	cf 90       	pop	r12
    2c44:	bf 90       	pop	r11
    2c46:	af 90       	pop	r10
    2c48:	9f 90       	pop	r9
    2c4a:	8f 90       	pop	r8
    2c4c:	7f 90       	pop	r7
    2c4e:	6f 90       	pop	r6
    2c50:	5f 90       	pop	r5
    2c52:	4f 90       	pop	r4
    2c54:	08 95       	ret

00002c56 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2c56:	8f 92       	push	r8
    2c58:	9f 92       	push	r9
    2c5a:	af 92       	push	r10
    2c5c:	bf 92       	push	r11
    2c5e:	cf 92       	push	r12
    2c60:	df 92       	push	r13
    2c62:	ef 92       	push	r14
    2c64:	ff 92       	push	r15
    2c66:	1f 93       	push	r17
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	1f 92       	push	r1
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	6b 01       	movw	r12, r22
    2c74:	7c 01       	movw	r14, r24
    2c76:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2c78:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	66 df       	rcall	.-308    	; 0x2b4e <prvSampleTimeNow>
    2c82:	4b 01       	movw	r8, r22
    2c84:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	81 11       	cpse	r24, r1
    2c8a:	2d c0       	rjmp	.+90     	; 0x2ce6 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2c8c:	11 11       	cpse	r17, r1
    2c8e:	0d c0       	rjmp	.+26     	; 0x2caa <prvProcessTimerOrBlockTask+0x54>
    2c90:	8c 14       	cp	r8, r12
    2c92:	9d 04       	cpc	r9, r13
    2c94:	ae 04       	cpc	r10, r14
    2c96:	bf 04       	cpc	r11, r15
    2c98:	40 f0       	brcs	.+16     	; 0x2caa <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2c9a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2c9e:	a5 01       	movw	r20, r10
    2ca0:	94 01       	movw	r18, r8
    2ca2:	c7 01       	movw	r24, r14
    2ca4:	b6 01       	movw	r22, r12
    2ca6:	81 df       	rcall	.-254    	; 0x2baa <prvProcessExpiredTimer>
    2ca8:	20 c0       	rjmp	.+64     	; 0x2cea <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2caa:	11 23       	and	r17, r17
    2cac:	41 f0       	breq	.+16     	; 0x2cbe <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2cae:	e0 91 7b 11 	lds	r30, 0x117B	; 0x80117b <pxOverflowTimerList>
    2cb2:	f0 91 7c 11 	lds	r31, 0x117C	; 0x80117c <pxOverflowTimerList+0x1>
    2cb6:	80 81       	ld	r24, Z
    2cb8:	11 e0       	ldi	r17, 0x01	; 1
    2cba:	81 11       	cpse	r24, r1
    2cbc:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2cbe:	b7 01       	movw	r22, r14
    2cc0:	a6 01       	movw	r20, r12
    2cc2:	48 19       	sub	r20, r8
    2cc4:	59 09       	sbc	r21, r9
    2cc6:	6a 09       	sbc	r22, r10
    2cc8:	7b 09       	sbc	r23, r11
    2cca:	21 2f       	mov	r18, r17
    2ccc:	80 91 79 11 	lds	r24, 0x1179	; 0x801179 <xTimerQueue>
    2cd0:	90 91 7a 11 	lds	r25, 0x117A	; 0x80117a <xTimerQueue+0x1>
    2cd4:	0e 94 71 06 	call	0xce2	; 0xce2 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2cd8:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <xTaskResumeAll>
    2cdc:	81 11       	cpse	r24, r1
    2cde:	05 c0       	rjmp	.+10     	; 0x2cea <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2ce0:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2ce6:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <xTaskResumeAll>
            }
        }
    }
    2cea:	0f 90       	pop	r0
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	ff 90       	pop	r15
    2cf4:	ef 90       	pop	r14
    2cf6:	df 90       	pop	r13
    2cf8:	cf 90       	pop	r12
    2cfa:	bf 90       	pop	r11
    2cfc:	af 90       	pop	r10
    2cfe:	9f 90       	pop	r9
    2d00:	8f 90       	pop	r8
    2d02:	08 95       	ret

00002d04 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2d04:	af 92       	push	r10
    2d06:	bf 92       	push	r11
    2d08:	cf 92       	push	r12
    2d0a:	df 92       	push	r13
    2d0c:	ef 92       	push	r14
    2d0e:	ff 92       	push	r15
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	28 97       	sbiw	r28, 0x08	; 8
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2d28:	82 c0       	rjmp	.+260    	; 0x2e2e <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	88 23       	and	r24, r24
    2d2e:	0c f4       	brge	.+2      	; 0x2d32 <prvProcessReceivedCommands+0x2e>
    2d30:	7e c0       	rjmp	.+252    	; 0x2e2e <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2d32:	ae 80       	ldd	r10, Y+6	; 0x06
    2d34:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2d36:	d5 01       	movw	r26, r10
    2d38:	1c 96       	adiw	r26, 0x0c	; 12
    2d3a:	8d 91       	ld	r24, X+
    2d3c:	9c 91       	ld	r25, X
    2d3e:	1d 97       	sbiw	r26, 0x0d	; 13
    2d40:	89 2b       	or	r24, r25
    2d42:	21 f0       	breq	.+8      	; 0x2d4c <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d44:	c5 01       	movw	r24, r10
    2d46:	02 96       	adiw	r24, 0x02	; 2
    2d48:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	08 96       	adiw	r24, 0x08	; 8
    2d50:	fe de       	rcall	.-516    	; 0x2b4e <prvSampleTimeNow>
    2d52:	8b 01       	movw	r16, r22
    2d54:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2d56:	e9 81       	ldd	r30, Y+1	; 0x01
    2d58:	0e 2e       	mov	r0, r30
    2d5a:	00 0c       	add	r0, r0
    2d5c:	ff 0b       	sbc	r31, r31
    2d5e:	ea 30       	cpi	r30, 0x0A	; 10
    2d60:	f1 05       	cpc	r31, r1
    2d62:	08 f0       	brcs	.+2      	; 0x2d66 <prvProcessReceivedCommands+0x62>
    2d64:	64 c0       	rjmp	.+200    	; 0x2e2e <prvProcessReceivedCommands+0x12a>
    2d66:	88 27       	eor	r24, r24
    2d68:	ee 58       	subi	r30, 0x8E	; 142
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d6e:	0c 94 28 26 	jmp	0x4c50	; 0x4c50 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2d72:	f5 01       	movw	r30, r10
    2d74:	86 89       	ldd	r24, Z+22	; 0x16
    2d76:	81 60       	ori	r24, 0x01	; 1
    2d78:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2d7a:	ca 80       	ldd	r12, Y+2	; 0x02
    2d7c:	db 80       	ldd	r13, Y+3	; 0x03
    2d7e:	ec 80       	ldd	r14, Y+4	; 0x04
    2d80:	fd 80       	ldd	r15, Y+5	; 0x05
    2d82:	46 85       	ldd	r20, Z+14	; 0x0e
    2d84:	57 85       	ldd	r21, Z+15	; 0x0f
    2d86:	60 89       	ldd	r22, Z+16	; 0x10
    2d88:	71 89       	ldd	r23, Z+17	; 0x11
    2d8a:	4c 0d       	add	r20, r12
    2d8c:	5d 1d       	adc	r21, r13
    2d8e:	6e 1d       	adc	r22, r14
    2d90:	7f 1d       	adc	r23, r15
    2d92:	c5 01       	movw	r24, r10
    2d94:	83 dd       	rcall	.-1274   	; 0x289c <prvInsertTimerInActiveList>
    2d96:	88 23       	and	r24, r24
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <prvProcessReceivedCommands+0x98>
    2d9a:	49 c0       	rjmp	.+146    	; 0x2e2e <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d9c:	d5 01       	movw	r26, r10
    2d9e:	54 96       	adiw	r26, 0x14	; 20
    2da0:	ed 91       	ld	r30, X+
    2da2:	fc 91       	ld	r31, X
    2da4:	55 97       	sbiw	r26, 0x15	; 21
    2da6:	c5 01       	movw	r24, r10
    2da8:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2daa:	f5 01       	movw	r30, r10
    2dac:	86 89       	ldd	r24, Z+22	; 0x16
    2dae:	82 ff       	sbrs	r24, 2
    2db0:	3e c0       	rjmp	.+124    	; 0x2e2e <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2db2:	4a 81       	ldd	r20, Y+2	; 0x02
    2db4:	5b 81       	ldd	r21, Y+3	; 0x03
    2db6:	6c 81       	ldd	r22, Y+4	; 0x04
    2db8:	7d 81       	ldd	r23, Y+5	; 0x05
    2dba:	86 85       	ldd	r24, Z+14	; 0x0e
    2dbc:	97 85       	ldd	r25, Z+15	; 0x0f
    2dbe:	a0 89       	ldd	r26, Z+16	; 0x10
    2dc0:	b1 89       	ldd	r27, Z+17	; 0x11
    2dc2:	9a 01       	movw	r18, r20
    2dc4:	ab 01       	movw	r20, r22
    2dc6:	28 0f       	add	r18, r24
    2dc8:	39 1f       	adc	r19, r25
    2dca:	4a 1f       	adc	r20, r26
    2dcc:	5b 1f       	adc	r21, r27
    2dce:	c1 2c       	mov	r12, r1
    2dd0:	d1 2c       	mov	r13, r1
    2dd2:	76 01       	movw	r14, r12
    2dd4:	00 e0       	ldi	r16, 0x00	; 0
    2dd6:	10 e0       	ldi	r17, 0x00	; 0
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	c5 01       	movw	r24, r10
    2ddc:	f2 dd       	rcall	.-1052   	; 0x29c2 <xTimerGenericCommand>
    2dde:	27 c0       	rjmp	.+78     	; 0x2e2e <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2de0:	d5 01       	movw	r26, r10
    2de2:	56 96       	adiw	r26, 0x16	; 22
    2de4:	8c 91       	ld	r24, X
    2de6:	56 97       	sbiw	r26, 0x16	; 22
    2de8:	8e 7f       	andi	r24, 0xFE	; 254
    2dea:	56 96       	adiw	r26, 0x16	; 22
    2dec:	8c 93       	st	X, r24
                        break;
    2dee:	1f c0       	rjmp	.+62     	; 0x2e2e <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2df0:	f5 01       	movw	r30, r10
    2df2:	86 89       	ldd	r24, Z+22	; 0x16
    2df4:	81 60       	ori	r24, 0x01	; 1
    2df6:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2df8:	4a 81       	ldd	r20, Y+2	; 0x02
    2dfa:	5b 81       	ldd	r21, Y+3	; 0x03
    2dfc:	6c 81       	ldd	r22, Y+4	; 0x04
    2dfe:	7d 81       	ldd	r23, Y+5	; 0x05
    2e00:	46 87       	std	Z+14, r20	; 0x0e
    2e02:	57 87       	std	Z+15, r21	; 0x0f
    2e04:	60 8b       	std	Z+16, r22	; 0x10
    2e06:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2e08:	40 0f       	add	r20, r16
    2e0a:	51 1f       	adc	r21, r17
    2e0c:	62 1f       	adc	r22, r18
    2e0e:	73 1f       	adc	r23, r19
    2e10:	68 01       	movw	r12, r16
    2e12:	79 01       	movw	r14, r18
    2e14:	c5 01       	movw	r24, r10
    2e16:	42 dd       	rcall	.-1404   	; 0x289c <prvInsertTimerInActiveList>
                        break;
    2e18:	0a c0       	rjmp	.+20     	; 0x2e2e <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2e1a:	f5 01       	movw	r30, r10
    2e1c:	86 89       	ldd	r24, Z+22	; 0x16
    2e1e:	81 fd       	sbrc	r24, 1
    2e20:	04 c0       	rjmp	.+8      	; 0x2e2a <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2e22:	c5 01       	movw	r24, r10
    2e24:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <vPortFree>
    2e28:	02 c0       	rjmp	.+4      	; 0x2e2e <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e2a:	8e 7f       	andi	r24, 0xFE	; 254
    2e2c:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	a9 01       	movw	r20, r18
    2e34:	be 01       	movw	r22, r28
    2e36:	6f 5f       	subi	r22, 0xFF	; 255
    2e38:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3a:	80 91 79 11 	lds	r24, 0x1179	; 0x801179 <xTimerQueue>
    2e3e:	90 91 7a 11 	lds	r25, 0x117A	; 0x80117a <xTimerQueue+0x1>
    2e42:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <xQueueReceive>
    2e46:	81 11       	cpse	r24, r1
    2e48:	70 cf       	rjmp	.-288    	; 0x2d2a <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2e4a:	28 96       	adiw	r28, 0x08	; 8
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	ff 90       	pop	r15
    2e60:	ef 90       	pop	r14
    2e62:	df 90       	pop	r13
    2e64:	cf 90       	pop	r12
    2e66:	bf 90       	pop	r11
    2e68:	af 90       	pop	r10
    2e6a:	08 95       	ret

00002e6c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2e6c:	08 95       	ret

00002e6e <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2e6e:	84 b1       	in	r24, 0x04	; 4
    2e70:	80 68       	ori	r24, 0x80	; 128
    2e72:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2e74:	85 b1       	in	r24, 0x05	; 5
    2e76:	80 68       	ori	r24, 0x80	; 128
    2e78:	85 b9       	out	0x05, r24	; 5
    2e7a:	08 95       	ret

00002e7c <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2e7c:	83 b1       	in	r24, 0x03	; 3
    2e7e:	80 68       	ori	r24, 0x80	; 128
    2e80:	83 b9       	out	0x03, r24	; 3
    2e82:	08 95       	ret

00002e84 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2e84:	f4 df       	rcall	.-24     	; 0x2e6e <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e86:	2f ef       	ldi	r18, 0xFF	; 255
    2e88:	80 e7       	ldi	r24, 0x70	; 112
    2e8a:	92 e0       	ldi	r25, 0x02	; 2
    2e8c:	21 50       	subi	r18, 0x01	; 1
    2e8e:	80 40       	sbci	r24, 0x00	; 0
    2e90:	90 40       	sbci	r25, 0x00	; 0
    2e92:	e1 f7       	brne	.-8      	; 0x2e8c <vApplicationMallocFailedHook+0x8>
    2e94:	00 c0       	rjmp	.+0      	; 0x2e96 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2e96:	00 00       	nop
    2e98:	f1 df       	rcall	.-30     	; 0x2e7c <prvBlinkMainLed>
    2e9a:	f5 cf       	rjmp	.-22     	; 0x2e86 <vApplicationMallocFailedHook+0x2>

00002e9c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2e9c:	e8 df       	rcall	.-48     	; 0x2e6e <prvSetMainLedOn>
    2e9e:	2f ef       	ldi	r18, 0xFF	; 255
    2ea0:	87 ea       	ldi	r24, 0xA7	; 167
    2ea2:	91 e6       	ldi	r25, 0x61	; 97
    2ea4:	21 50       	subi	r18, 0x01	; 1
    2ea6:	80 40       	sbci	r24, 0x00	; 0
    2ea8:	90 40       	sbci	r25, 0x00	; 0
    2eaa:	e1 f7       	brne	.-8      	; 0x2ea4 <vApplicationStackOverflowHook+0x8>
    2eac:	00 c0       	rjmp	.+0      	; 0x2eae <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2eae:	00 00       	nop
    2eb0:	e5 df       	rcall	.-54     	; 0x2e7c <prvBlinkMainLed>
    2eb2:	f5 cf       	rjmp	.-22     	; 0x2e9e <vApplicationStackOverflowHook+0x2>

00002eb4 <initializeQueues>:
#include "DataQueue.h"

QueueHandle_t xQueueCO2;

void initializeQueues() {
	xQueueCO2 = xQueueCreate(15, sizeof(uint16_t));
    2eb4:	40 e0       	ldi	r20, 0x00	; 0
    2eb6:	62 e0       	ldi	r22, 0x02	; 2
    2eb8:	8f e0       	ldi	r24, 0x0F	; 15
    2eba:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <xQueueGenericCreate>
    2ebe:	90 93 5a 13 	sts	0x135A, r25	; 0x80135a <xQueueCO2+0x1>
    2ec2:	80 93 59 13 	sts	0x1359, r24	; 0x801359 <xQueueCO2>
    2ec6:	08 95       	ret

00002ec8 <enqueueCO2Measure>:
}

void enqueueCO2Measure(uint16_t ppm){
    2ec8:	0f 93       	push	r16
    2eca:	cf 93       	push	r28
    2ecc:	df 93       	push	r29
    2ece:	1f 92       	push	r1
    2ed0:	1f 92       	push	r1
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	9a 83       	std	Y+2, r25	; 0x02
    2ed8:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    2eda:	00 e0       	ldi	r16, 0x00	; 0
    2edc:	2f ef       	ldi	r18, 0xFF	; 255
    2ede:	3f ef       	ldi	r19, 0xFF	; 255
    2ee0:	a9 01       	movw	r20, r18
    2ee2:	be 01       	movw	r22, r28
    2ee4:	6f 5f       	subi	r22, 0xFF	; 255
    2ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee8:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xQueueCO2>
    2eec:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xQueueCO2+0x1>
    2ef0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <xQueueGenericSend>
}
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	0f 91       	pop	r16
    2efe:	08 95       	ret

00002f00 <dequeueCO2Measure>:

uint16_t dequeueCO2Measure(){
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	1f 92       	push	r1
    2f06:	1f 92       	push	r1
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	uint16_t* ppmpointer;
	ppmpointer = &ppm;
	
	xQueueReceive(xQueueCO2, &ppm, portMAX_DELAY);
    2f0c:	2f ef       	ldi	r18, 0xFF	; 255
    2f0e:	3f ef       	ldi	r19, 0xFF	; 255
    2f10:	a9 01       	movw	r20, r18
    2f12:	be 01       	movw	r22, r28
    2f14:	6f 5f       	subi	r22, 0xFF	; 255
    2f16:	7f 4f       	sbci	r23, 0xFF	; 255
    2f18:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xQueueCO2>
    2f1c:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xQueueCO2+0x1>
    2f20:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <xQueueReceive>
	return ppm;
}
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	9a 81       	ldd	r25, Y+2	; 0x02
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	08 95       	ret

00002f32 <initializeSharedDataQueue>:
	//timestamp
} SharedData;

void initializeSharedDataQueue()
{
	xQueueShared = xQueueCreate(15, sizeof(SharedData));
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	62 e0       	ldi	r22, 0x02	; 2
    2f36:	8f e0       	ldi	r24, 0x0F	; 15
    2f38:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <xQueueGenericCreate>
    2f3c:	90 93 5c 13 	sts	0x135C, r25	; 0x80135c <xQueueShared+0x1>
    2f40:	80 93 5b 13 	sts	0x135B, r24	; 0x80135b <xQueueShared>
    2f44:	08 95       	ret

00002f46 <enqueueSharedData>:
}

void enqueueSharedData()
{
    2f46:	0f 93       	push	r16
    2f48:	1f 93       	push	r17
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	1f 92       	push	r1
    2f50:	1f 92       	push	r1
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
	uint16_t co2 = dequeueCO2Measure();
    2f56:	d4 df       	rcall	.-88     	; 0x2f00 <dequeueCO2Measure>
    2f58:	08 2f       	mov	r16, r24
    2f5a:	19 2f       	mov	r17, r25
	//uint16_t temp = dequeueTempMeasure();
	//uint16_t light = dequeueLightMeasure();
	printf("CO2 PPM: %d slut" , co2);
    2f5c:	9f 93       	push	r25
    2f5e:	8f 93       	push	r24
    2f60:	84 e8       	ldi	r24, 0x84	; 132
    2f62:	92 e0       	ldi	r25, 0x02	; 2
    2f64:	9f 93       	push	r25
    2f66:	8f 93       	push	r24
    2f68:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>

	SharedData_t shared = calloc(sizeof(SharedData), 1);
    2f6c:	61 e0       	ldi	r22, 0x01	; 1
    2f6e:	70 e0       	ldi	r23, 0x00	; 0
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	0e 94 30 26 	call	0x4c60	; 0x4c60 <calloc>
    2f78:	9a 83       	std	Y+2, r25	; 0x02
    2f7a:	89 83       	std	Y+1, r24	; 0x01
	shared->co2 = co2;
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	00 83       	st	Z, r16
    2f80:	11 83       	std	Z+1, r17	; 0x01
	
	xQueueSend(xQueueShared, (void*)&shared, portMAX_DELAY);
    2f82:	00 e0       	ldi	r16, 0x00	; 0
    2f84:	2f ef       	ldi	r18, 0xFF	; 255
    2f86:	3f ef       	ldi	r19, 0xFF	; 255
    2f88:	a9 01       	movw	r20, r18
    2f8a:	be 01       	movw	r22, r28
    2f8c:	6f 5f       	subi	r22, 0xFF	; 255
    2f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f90:	80 91 5b 13 	lds	r24, 0x135B	; 0x80135b <xQueueShared>
    2f94:	90 91 5c 13 	lds	r25, 0x135C	; 0x80135c <xQueueShared+0x1>
    2f98:	0e 94 f7 04 	call	0x9ee	; 0x9ee <xQueueGenericSend>
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	1f 91       	pop	r17
    2fae:	0f 91       	pop	r16
    2fb0:	08 95       	ret

00002fb2 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	0e 94 9a 23 	call	0x4734	; 0x4734 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    2fbc:	02 d3       	rcall	.+1540   	; 0x35c2 <lora_driver_rn2483FactoryReset>
    2fbe:	7e d5       	rcall	.+2812   	; 0x3abc <lora_driver_mapReturnCodeToText>
    2fc0:	9f 93       	push	r25
    2fc2:	8f 93       	push	r24
    2fc4:	85 e9       	ldi	r24, 0x95	; 149
    2fc6:	92 e0       	ldi	r25, 0x02	; 2
    2fc8:	9f 93       	push	r25
    2fca:	8f 93       	push	r24
    2fcc:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    2fd0:	76 d4       	rcall	.+2284   	; 0x38be <lora_driver_configureToEu868>
    2fd2:	74 d5       	rcall	.+2792   	; 0x3abc <lora_driver_mapReturnCodeToText>
    2fd4:	9f 93       	push	r25
    2fd6:	8f 93       	push	r24
    2fd8:	88 ea       	ldi	r24, 0xA8	; 168
    2fda:	92 e0       	ldi	r25, 0x02	; 2
    2fdc:	9f 93       	push	r25
    2fde:	8f 93       	push	r24
    2fe0:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>
    2fe4:	8b ea       	ldi	r24, 0xAB	; 171

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    2fe6:	91 e1       	ldi	r25, 0x11	; 17
    2fe8:	fe d2       	rcall	.+1532   	; 0x35e6 <lora_driver_getRn2483Hweui>
    2fea:	68 d5       	rcall	.+2768   	; 0x3abc <lora_driver_mapReturnCodeToText>
    2fec:	cb ea       	ldi	r28, 0xAB	; 171
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    2fee:	d1 e1       	ldi	r29, 0x11	; 17
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	9f 93       	push	r25
    2ff6:	8f 93       	push	r24
    2ff8:	81 ec       	ldi	r24, 0xC1	; 193
    2ffa:	92 e0       	ldi	r25, 0x02	; 2
    2ffc:	9f 93       	push	r25
    2ffe:	8f 93       	push	r24
    3000:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>
    3004:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3006:	0b d3       	rcall	.+1558   	; 0x361e <lora_driver_setDeviceIdentifier>
    3008:	59 d5       	rcall	.+2738   	; 0x3abc <lora_driver_mapReturnCodeToText>
    300a:	9f 93       	push	r25
    300c:	8f 93       	push	r24
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	85 ed       	ldi	r24, 0xD5	; 213
    3014:	92 e0       	ldi	r25, 0x02	; 2
    3016:	9f 93       	push	r25
    3018:	8f 93       	push	r24
    301a:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>
    301e:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3020:	6a ee       	ldi	r22, 0xEA	; 234
    3022:	72 e0       	ldi	r23, 0x02	; 2
    3024:	8d e0       	ldi	r24, 0x0D	; 13
    3026:	93 e0       	ldi	r25, 0x03	; 3
    3028:	28 d5       	rcall	.+2640   	; 0x3a7a <lora_driver_setOtaaIdentity>
    302a:	48 d5       	rcall	.+2704   	; 0x3abc <lora_driver_mapReturnCodeToText>
    302c:	9f 93       	push	r25
    302e:	8f 93       	push	r24
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	8a ee       	ldi	r24, 0xEA	; 234
    3036:	92 e0       	ldi	r25, 0x02	; 2
    3038:	9f 93       	push	r25
    303a:	8f 93       	push	r24
    303c:	8d e0       	ldi	r24, 0x0D	; 13
    303e:	93 e0       	ldi	r25, 0x03	; 3
    3040:	9f 93       	push	r25
    3042:	8f 93       	push	r24
    3044:	8d e1       	ldi	r24, 0x1D	; 29
    3046:	93 e0       	ldi	r25, 0x03	; 3
    3048:	9f 93       	push	r25
    304a:	8f 93       	push	r24
    304c:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>
    3050:	19 d3       	rcall	.+1586   	; 0x3684 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3052:	34 d5       	rcall	.+2664   	; 0x3abc <lora_driver_mapReturnCodeToText>
    3054:	9f 93       	push	r25
    3056:	8f 93       	push	r24
    3058:	83 e5       	ldi	r24, 0x53	; 83
    305a:	93 e0       	ldi	r25, 0x03	; 3
    305c:	9f 93       	push	r25
    305e:	8f 93       	push	r24
    3060:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>
    3064:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3066:	9e b7       	in	r25, 0x3e	; 62
    3068:	82 96       	adiw	r24, 0x22	; 34
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	9e bf       	out	0x3e, r25	; 62
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	8d bf       	out	0x3d, r24	; 61
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	00 d4       	rcall	.+2048   	; 0x3878 <lora_driver_setAdaptiveDataRate>
    3078:	21 d5       	rcall	.+2626   	; 0x3abc <lora_driver_mapReturnCodeToText>
    307a:	9f 93       	push	r25
    307c:	8f 93       	push	r24
    307e:	82 e6       	ldi	r24, 0x62	; 98
    3080:	93 e0       	ldi	r25, 0x03	; 3
    3082:	9f 93       	push	r25
    3084:	8f 93       	push	r24
    3086:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>
    308a:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	ff d3       	rcall	.+2046   	; 0x388e <lora_driver_setReceiveDelay>
    3090:	15 d5       	rcall	.+2602   	; 0x3abc <lora_driver_mapReturnCodeToText>
    3092:	9f 93       	push	r25
    3094:	8f 93       	push	r24
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	8f 93       	push	r24
    309a:	84 ef       	ldi	r24, 0xF4	; 244
    309c:	8f 93       	push	r24
    309e:	83 e8       	ldi	r24, 0x83	; 131
    30a0:	93 e0       	ldi	r25, 0x03	; 3
    30a2:	9f 93       	push	r25
    30a4:	8f 93       	push	r24
    30a6:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>
    30aa:	8d b7       	in	r24, 0x3d	; 61
    30ac:	9e b7       	in	r25, 0x3e	; 62
    30ae:	0a 96       	adiw	r24, 0x0a	; 10
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	9e bf       	out	0x3e, r25	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	8d bf       	out	0x3d, r24	; 61
    30ba:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    30bc:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    30be:	e8 d2       	rcall	.+1488   	; 0x3690 <lora_driver_join>
    30c0:	d8 2f       	mov	r29, r24
    30c2:	fc d4       	rcall	.+2552   	; 0x3abc <lora_driver_mapReturnCodeToText>
    30c4:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    30c6:	8f 93       	push	r24
    30c8:	1f 92       	push	r1
    30ca:	cf 93       	push	r28
    30cc:	83 ea       	ldi	r24, 0xA3	; 163
    30ce:	93 e0       	ldi	r25, 0x03	; 3
    30d0:	9f 93       	push	r25
    30d2:	8f 93       	push	r24
    30d4:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	d8 30       	cpi	r29, 0x08	; 8
    30e6:	59 f0       	breq	.+22     	; 0x30fe <_lora_setup+0x14c>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	0e 94 fe 23 	call	0x47fc	; 0x47fc <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    30ee:	66 e3       	ldi	r22, 0x36	; 54
    30f0:	71 e0       	ldi	r23, 0x01	; 1
    30f2:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <vTaskDelay>
    30fa:	c1 50       	subi	r28, 0x01	; 1
    30fc:	f9 f6       	brne	.-66     	; 0x30bc <_lora_setup+0x10a>
    30fe:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3100:	21 f4       	brne	.+8      	; 0x310a <_lora_setup+0x158>
    3102:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3104:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3108:	09 c0       	rjmp	.+18     	; 0x311c <_lora_setup+0x16a>
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	0e 94 ef 23 	call	0x47de	; 0x47de <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	0e 94 bd 23 	call	0x477a	; 0x477a <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3116:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    311a:	fd cf       	rjmp	.-6      	; 0x3116 <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    311c:	df 91       	pop	r29
    311e:	cf 91       	pop	r28
    3120:	08 95       	ret

00003122 <lora_handler_task>:
		}
	}
}
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	00 d0       	rcall	.+0      	; 0x3128 <lora_handler_task+0x6>

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3128:	1f 92       	push	r1
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	3a d2       	rcall	.+1140   	; 0x35a6 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3132:	62 e0       	ldi	r22, 0x02	; 2
    3134:	70 e0       	ldi	r23, 0x00	; 0
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <vTaskDelay>
	lora_driver_resetRn2483(0);
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	32 d2       	rcall	.+1124   	; 0x35a6 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3142:	66 e9       	ldi	r22, 0x96	; 150
    3144:	70 e0       	ldi	r23, 0x00	; 0
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    314e:	e4 d1       	rcall	.+968    	; 0x3518 <lora_driver_flushBuffers>

	_lora_setup();
    3150:	30 df       	rcall	.-416    	; 0x2fb2 <_lora_setup>
    3152:	e5 e9       	ldi	r30, 0x95	; 149

	_uplink_payload.len = 6;
    3154:	f1 e1       	ldi	r31, 0x11	; 17
    3156:	86 e0       	ldi	r24, 0x06	; 6
    3158:	81 83       	std	Z+1, r24	; 0x01
    315a:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    315c:	80 83       	st	Z, r24
    315e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3162:	69 83       	std	Y+1, r22	; 0x01
    3164:	7a 83       	std	Y+2, r23	; 0x02
    3166:	8b 83       	std	Y+3, r24	; 0x03
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    316c:	58 e4       	ldi	r21, 0x48	; 72
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	ce 01       	movw	r24, r28
    3174:	01 96       	adiw	r24, 0x01	; 1
    3176:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <xTaskDelayUntil>
    317a:	e5 e9       	ldi	r30, 0x95	; 149
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    317c:	f1 e1       	ldi	r31, 0x11	; 17
    317e:	80 e3       	ldi	r24, 0x30	; 48
    3180:	82 83       	std	Z+2, r24	; 0x02
    3182:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    3184:	83 83       	std	Z+3, r24	; 0x03
    3186:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    3188:	84 83       	std	Z+4, r24	; 0x04
    318a:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    318c:	85 83       	std	Z+5, r24	; 0x05
    318e:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    3190:	86 83       	std	Z+6, r24	; 0x06
    3192:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    3194:	87 83       	std	Z+7, r24	; 0x07
    3196:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3198:	0e 94 10 24 	call	0x4820	; 0x4820 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    319c:	65 e9       	ldi	r22, 0x95	; 149
    319e:	71 e1       	ldi	r23, 0x11	; 17
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	9f d2       	rcall	.+1342   	; 0x36e2 <lora_driver_sendUploadMessage>
    31a4:	8b d4       	rcall	.+2326   	; 0x3abc <lora_driver_mapReturnCodeToText>
    31a6:	9f 93       	push	r25
    31a8:	8f 93       	push	r24
    31aa:	83 ec       	ldi	r24, 0xC3	; 195
    31ac:	93 e0       	ldi	r25, 0x03	; 3
    31ae:	9f 93       	push	r25
    31b0:	8f 93       	push	r24
    31b2:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <printf>
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	d5 cf       	rjmp	.-86     	; 0x316a <lora_handler_task+0x48>

000031c0 <lora_handler_initialise>:
    31c0:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    31c2:	ff 92       	push	r15
    31c4:	0f 93       	push	r16
	xTaskCreate(
    31c6:	e1 2c       	mov	r14, r1
    31c8:	f1 2c       	mov	r15, r1
    31ca:	08 2f       	mov	r16, r24
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	48 e8       	ldi	r20, 0x88	; 136
    31d2:	51 e0       	ldi	r21, 0x01	; 1
    31d4:	68 ed       	ldi	r22, 0xD8	; 216
    31d6:	73 e0       	ldi	r23, 0x03	; 3
    31d8:	81 e9       	ldi	r24, 0x91	; 145
    31da:	98 e1       	ldi	r25, 0x18	; 24
    31dc:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    31e0:	0f 91       	pop	r16
    31e2:	ff 90       	pop	r15
    31e4:	ef 90       	pop	r14
    31e6:	08 95       	ret

000031e8 <task1>:
}

void myCo2CallBack(uint16_t ppm)
{
	printf("PPM is %d \n" , ppm);
}
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <task1+0x6>
    31ee:	1f 92       	push	r1
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <xTaskGetTickCount>
    31f8:	69 83       	std	Y+1, r22	; 0x01
    31fa:	7a 83       	std	Y+2, r23	; 0x02
    31fc:	8b 83       	std	Y+3, r24	; 0x03
    31fe:	9c 83       	std	Y+4, r25	; 0x04
    3200:	4f e1       	ldi	r20, 0x1F	; 31
    3202:	50 e0       	ldi	r21, 0x00	; 0
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	ce 01       	movw	r24, r28
    320a:	01 96       	adiw	r24, 0x01	; 1
    320c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <xTaskDelayUntil>
    3210:	9a de       	rcall	.-716    	; 0x2f46 <enqueueSharedData>
    3212:	f6 cf       	rjmp	.-20     	; 0x3200 <task1+0x18>

00003214 <task2>:
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	00 d0       	rcall	.+0      	; 0x321a <task2+0x6>
    321a:	1f 92       	push	r1
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <xTaskGetTickCount>
    3224:	69 83       	std	Y+1, r22	; 0x01
    3226:	7a 83       	std	Y+2, r23	; 0x02
    3228:	8b 83       	std	Y+3, r24	; 0x03
    322a:	9c 83       	std	Y+4, r25	; 0x04
    322c:	4e e3       	ldi	r20, 0x3E	; 62
    322e:	50 e0       	ldi	r21, 0x00	; 0
    3230:	60 e0       	ldi	r22, 0x00	; 0
    3232:	70 e0       	ldi	r23, 0x00	; 0
    3234:	ce 01       	movw	r24, r28
    3236:	01 96       	adiw	r24, 0x01	; 1
    3238:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <xTaskDelayUntil>
    323c:	0e 94 ba 00 	call	0x174	; 0x174 <co2Measure>
    3240:	f5 cf       	rjmp	.-22     	; 0x322c <task2+0x18>

00003242 <create_tasks_and_semaphores>:
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	80 91 5d 13 	lds	r24, 0x135D	; 0x80135d <xTestSemaphore>
    324c:	90 91 5e 13 	lds	r25, 0x135E	; 0x80135e <xTestSemaphore+0x1>
    3250:	89 2b       	or	r24, r25
    3252:	89 f4       	brne	.+34     	; 0x3276 <create_tasks_and_semaphores+0x34>
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	0e 94 9b 05 	call	0xb36	; 0xb36 <xQueueCreateMutex>
    325a:	90 93 5e 13 	sts	0x135E, r25	; 0x80135e <xTestSemaphore+0x1>
    325e:	80 93 5d 13 	sts	0x135D, r24	; 0x80135d <xTestSemaphore>
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	41 f0       	breq	.+16     	; 0x3276 <create_tasks_and_semaphores+0x34>
    3266:	00 e0       	ldi	r16, 0x00	; 0
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	a9 01       	movw	r20, r18
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	70 e0       	ldi	r23, 0x00	; 0
    3272:	0e 94 f7 04 	call	0x9ee	; 0x9ee <xQueueGenericSend>
    3276:	e1 2c       	mov	r14, r1
    3278:	f1 2c       	mov	r15, r1
    327a:	02 e0       	ldi	r16, 0x02	; 2
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 ec       	ldi	r20, 0xC0	; 192
    3282:	50 e0       	ldi	r21, 0x00	; 0
    3284:	6f ed       	ldi	r22, 0xDF	; 223
    3286:	73 e0       	ldi	r23, 0x03	; 3
    3288:	84 ef       	ldi	r24, 0xF4	; 244
    328a:	98 e1       	ldi	r25, 0x18	; 24
    328c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xTaskCreate>
    3290:	01 e0       	ldi	r16, 0x01	; 1
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 ec       	ldi	r20, 0xC0	; 192
    3298:	50 e0       	ldi	r21, 0x00	; 0
    329a:	65 ee       	ldi	r22, 0xE5	; 229
    329c:	73 e0       	ldi	r23, 0x03	; 3
    329e:	8a e0       	ldi	r24, 0x0A	; 10
    32a0:	99 e1       	ldi	r25, 0x19	; 25
    32a2:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xTaskCreate>
    32a6:	0f 91       	pop	r16
    32a8:	ff 90       	pop	r15
    32aa:	ef 90       	pop	r14
    32ac:	08 95       	ret

000032ae <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    32ae:	81 b1       	in	r24, 0x01	; 1
    32b0:	81 68       	ori	r24, 0x81	; 129
    32b2:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	0e 94 45 22 	call	0x448a	; 0x448a <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    32ba:	c3 df       	rcall	.-122    	; 0x3242 <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    32bc:	85 e0       	ldi	r24, 0x05	; 5
    32be:	0e 94 4c 23 	call	0x4698	; 0x4698 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    32c2:	60 e0       	ldi	r22, 0x00	; 0
    32c4:	70 e0       	ldi	r23, 0x00	; 0
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	2e d1       	rcall	.+604    	; 0x3526 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    32ca:	83 e0       	ldi	r24, 0x03	; 3
    32cc:	79 df       	rcall	.-270    	; 0x31c0 <lora_handler_initialise>
	
	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    32ce:	83 e0       	ldi	r24, 0x03	; 3
    32d0:	d1 d4       	rcall	.+2466   	; 0x3c74 <mh_z19_initialise>
	
	
	// Initialize queues
	initializeQueues();
    32d2:	f0 dd       	rcall	.-1056   	; 0x2eb4 <initializeQueues>
    32d4:	2e ce       	rjmp	.-932    	; 0x2f32 <initializeSharedDataQueue>
	initializeSharedDataQueue();
    32d6:	08 95       	ret

000032d8 <main>:
    32d8:	ea df       	rcall	.-44     	; 0x32ae <initialiseSystem>
    32da:	87 ef       	ldi	r24, 0xF7	; 247

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    32dc:	93 e0       	ldi	r25, 0x03	; 3
    32de:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    32e2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <vTaskStartScheduler>
    32e6:	ff cf       	rjmp	.-2      	; 0x32e6 <main+0xe>

000032e8 <_serialCallBack>:
    32e8:	0f 93       	push	r16
    32ea:	1f 93       	push	r17
    32ec:	cf 93       	push	r28
    32ee:	df 93       	push	r29
    32f0:	1f 92       	push	r1
    32f2:	1f 92       	push	r1
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	8c 01       	movw	r16, r24
    32fa:	19 82       	std	Y+1, r1	; 0x01
    32fc:	2d c0       	rjmp	.+90     	; 0x3358 <_serialCallBack+0x70>
    32fe:	e0 91 73 12 	lds	r30, 0x1273	; 0x801273 <rec_buf_inp.2878>
    3302:	ec 32       	cpi	r30, 0x2C	; 44
    3304:	50 f4       	brcc	.+20     	; 0x331a <_serialCallBack+0x32>
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	8e 0f       	add	r24, r30
    330a:	80 93 73 12 	sts	0x1273, r24	; 0x801273 <rec_buf_inp.2878>
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	eb 55       	subi	r30, 0x5B	; 91
    3312:	fd 4e       	sbci	r31, 0xED	; 237
    3314:	8a 81       	ldd	r24, Y+2	; 0x02
    3316:	80 83       	st	Z, r24
    3318:	02 c0       	rjmp	.+4      	; 0x331e <_serialCallBack+0x36>
    331a:	10 92 73 12 	sts	0x1273, r1	; 0x801273 <rec_buf_inp.2878>
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	8a 30       	cpi	r24, 0x0A	; 10
    3322:	d1 f4       	brne	.+52     	; 0x3358 <_serialCallBack+0x70>
    3324:	40 91 73 12 	lds	r20, 0x1273	; 0x801273 <rec_buf_inp.2878>
    3328:	50 e0       	ldi	r21, 0x00	; 0
    332a:	fa 01       	movw	r30, r20
    332c:	ed 55       	subi	r30, 0x5D	; 93
    332e:	fd 4e       	sbci	r31, 0xED	; 237
    3330:	10 82       	st	Z, r1
    3332:	41 50       	subi	r20, 0x01	; 1
    3334:	51 09       	sbc	r21, r1
    3336:	9e 01       	movw	r18, r28
    3338:	2f 5f       	subi	r18, 0xFF	; 255
    333a:	3f 4f       	sbci	r19, 0xFF	; 255
    333c:	65 ea       	ldi	r22, 0xA5	; 165
    333e:	72 e1       	ldi	r23, 0x12	; 18
    3340:	80 91 76 12 	lds	r24, 0x1276	; 0x801276 <_serialReplyBufferHandle>
    3344:	90 91 77 12 	lds	r25, 0x1277	; 0x801277 <_serialReplyBufferHandle+0x1>
    3348:	0e 94 f5 08 	call	0x11ea	; 0x11ea <xStreamBufferSendFromISR>
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	81 11       	cpse	r24, r1
    3350:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    3354:	10 92 73 12 	sts	0x1273, r1	; 0x801273 <rec_buf_inp.2878>
    3358:	be 01       	movw	r22, r28
    335a:	6e 5f       	subi	r22, 0xFE	; 254
    335c:	7f 4f       	sbci	r23, 0xFF	; 255
    335e:	c8 01       	movw	r24, r16
    3360:	fe d5       	rcall	.+3068   	; 0x3f5e <serial_getByte>
    3362:	88 23       	and	r24, r24
    3364:	61 f2       	breq	.-104    	; 0x32fe <_serialCallBack+0x16>
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	0f 91       	pop	r16
    3372:	08 95       	ret

00003374 <_uploadMessage>:
    3374:	0f 93       	push	r16
    3376:	1f 93       	push	r17
    3378:	cf 93       	push	r28
    337a:	df 93       	push	r29
    337c:	8c 01       	movw	r16, r24
    337e:	eb 01       	movw	r28, r22
    3380:	80 91 76 12 	lds	r24, 0x1276	; 0x801276 <_serialReplyBufferHandle>
    3384:	90 91 77 12 	lds	r25, 0x1277	; 0x801277 <_serialReplyBufferHandle+0x1>
    3388:	0e 94 02 08 	call	0x1004	; 0x1004 <xStreamBufferReset>
    338c:	b8 01       	movw	r22, r16
    338e:	8f e0       	ldi	r24, 0x0F	; 15
    3390:	92 e1       	ldi	r25, 0x12	; 18
    3392:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <strcpy>
    3396:	20 97       	sbiw	r28, 0x00	; 0
    3398:	79 f0       	breq	.+30     	; 0x33b8 <_uploadMessage+0x44>
    339a:	ef e0       	ldi	r30, 0x0F	; 15
    339c:	f2 e1       	ldi	r31, 0x12	; 18
    339e:	01 90       	ld	r0, Z+
    33a0:	00 20       	and	r0, r0
    33a2:	e9 f7       	brne	.-6      	; 0x339e <_uploadMessage+0x2a>
    33a4:	31 97       	sbiw	r30, 0x01	; 1
    33a6:	80 e2       	ldi	r24, 0x20	; 32
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	91 83       	std	Z+1, r25	; 0x01
    33ac:	80 83       	st	Z, r24
    33ae:	be 01       	movw	r22, r28
    33b0:	8f e0       	ldi	r24, 0x0F	; 15
    33b2:	92 e1       	ldi	r25, 0x12	; 18
    33b4:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <strcat>
    33b8:	ef e0       	ldi	r30, 0x0F	; 15
    33ba:	f2 e1       	ldi	r31, 0x12	; 18
    33bc:	df 01       	movw	r26, r30
    33be:	0d 90       	ld	r0, X+
    33c0:	00 20       	and	r0, r0
    33c2:	e9 f7       	brne	.-6      	; 0x33be <_uploadMessage+0x4a>
    33c4:	11 97       	sbiw	r26, 0x01	; 1
    33c6:	8d e0       	ldi	r24, 0x0D	; 13
    33c8:	9a e0       	ldi	r25, 0x0A	; 10
    33ca:	11 96       	adiw	r26, 0x01	; 1
    33cc:	9c 93       	st	X, r25
    33ce:	8e 93       	st	-X, r24
    33d0:	12 96       	adiw	r26, 0x02	; 2
    33d2:	1c 92       	st	X, r1
    33d4:	01 90       	ld	r0, Z+
    33d6:	00 20       	and	r0, r0
    33d8:	e9 f7       	brne	.-6      	; 0x33d4 <_uploadMessage+0x60>
    33da:	31 97       	sbiw	r30, 0x01	; 1
    33dc:	ef 50       	subi	r30, 0x0F	; 15
    33de:	f2 41       	sbci	r31, 0x12	; 18
    33e0:	ae 2f       	mov	r26, r30
    33e2:	8f e0       	ldi	r24, 0x0F	; 15
    33e4:	92 e1       	ldi	r25, 0x12	; 18
    33e6:	ac 01       	movw	r20, r24
    33e8:	6a 2f       	mov	r22, r26
    33ea:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <_rn2483_serial>
    33ee:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <_rn2483_serial+0x1>
    33f2:	60 d5       	rcall	.+2752   	; 0x3eb4 <serial_sendBytes>
    33f4:	81 11       	cpse	r24, r1
    33f6:	11 c0       	rjmp	.+34     	; 0x341a <_uploadMessage+0xa6>
    33f8:	08 e2       	ldi	r16, 0x28	; 40
    33fa:	15 e0       	ldi	r17, 0x05	; 5
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	4d e2       	ldi	r20, 0x2D	; 45
    3402:	50 e0       	ldi	r21, 0x00	; 0
    3404:	6f ef       	ldi	r22, 0xFF	; 255
    3406:	72 e1       	ldi	r23, 0x12	; 18
    3408:	80 91 76 12 	lds	r24, 0x1276	; 0x801276 <_serialReplyBufferHandle>
    340c:	90 91 77 12 	lds	r25, 0x1277	; 0x801277 <_serialReplyBufferHandle+0x1>
    3410:	0e 94 39 09 	call	0x1272	; 0x1272 <xStreamBufferReceive>
    3414:	8f ef       	ldi	r24, 0xFF	; 255
    3416:	92 e1       	ldi	r25, 0x12	; 18
    3418:	02 c0       	rjmp	.+4      	; 0x341e <_uploadMessage+0xaa>
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	1f 91       	pop	r17
    3424:	0f 91       	pop	r16
    3426:	08 95       	ret

00003428 <_reply2ReturnCode>:
    3428:	2f 92       	push	r2
    342a:	3f 92       	push	r3
    342c:	4f 92       	push	r4
    342e:	5f 92       	push	r5
    3430:	6f 92       	push	r6
    3432:	7f 92       	push	r7
    3434:	8f 92       	push	r8
    3436:	9f 92       	push	r9
    3438:	af 92       	push	r10
    343a:	bf 92       	push	r11
    343c:	cf 92       	push	r12
    343e:	df 92       	push	r13
    3440:	ef 92       	push	r14
    3442:	ff 92       	push	r15
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	cf 93       	push	r28
    344a:	df 93       	push	r29
    344c:	5c 01       	movw	r10, r24
    344e:	fc 01       	movw	r30, r24
    3450:	01 90       	ld	r0, Z+
    3452:	00 20       	and	r0, r0
    3454:	e9 f7       	brne	.-6      	; 0x3450 <_reply2ReturnCode+0x28>
    3456:	31 97       	sbiw	r30, 0x01	; 1
    3458:	6f 01       	movw	r12, r30
    345a:	c8 1a       	sub	r12, r24
    345c:	d9 0a       	sbc	r13, r25
    345e:	5c 2c       	mov	r5, r12
    3460:	0f 2e       	mov	r0, r31
    3462:	f2 ea       	ldi	r31, 0xA2	; 162
    3464:	8f 2e       	mov	r8, r31
    3466:	f6 e0       	ldi	r31, 0x06	; 6
    3468:	9f 2e       	mov	r9, r31
    346a:	f0 2d       	mov	r31, r0
    346c:	e1 2c       	mov	r14, r1
    346e:	f1 2c       	mov	r15, r1
    3470:	4c 2c       	mov	r4, r12
    3472:	37 01       	movw	r6, r14
    3474:	f4 01       	movw	r30, r8
    3476:	01 81       	ldd	r16, Z+1	; 0x01
    3478:	12 81       	ldd	r17, Z+2	; 0x02
    347a:	e8 01       	movw	r28, r16
    347c:	09 90       	ld	r0, Y+
    347e:	00 20       	and	r0, r0
    3480:	e9 f7       	brne	.-6      	; 0x347c <_reply2ReturnCode+0x54>
    3482:	21 97       	sbiw	r28, 0x01	; 1
    3484:	c0 1b       	sub	r28, r16
    3486:	d1 0b       	sbc	r29, r17
    3488:	3c 2e       	mov	r3, r28
    348a:	f9 e0       	ldi	r31, 0x09	; 9
    348c:	cf 16       	cp	r12, r31
    348e:	d1 04       	cpc	r13, r1
    3490:	58 f0       	brcs	.+22     	; 0x34a8 <_reply2ReturnCode+0x80>
    3492:	f4 01       	movw	r30, r8
    3494:	20 80       	ld	r2, Z
    3496:	fe e0       	ldi	r31, 0x0E	; 14
    3498:	2f 12       	cpse	r2, r31
    349a:	06 c0       	rjmp	.+12     	; 0x34a8 <_reply2ReturnCode+0x80>
    349c:	b8 01       	movw	r22, r16
    349e:	c5 01       	movw	r24, r10
    34a0:	0e 94 7f 27 	call	0x4efe	; 0x4efe <strcasestr>
    34a4:	89 2b       	or	r24, r25
    34a6:	09 f5       	brne	.+66     	; 0x34ea <_reply2ReturnCode+0xc2>
    34a8:	44 2d       	mov	r20, r4
    34aa:	35 14       	cp	r3, r5
    34ac:	08 f4       	brcc	.+2      	; 0x34b0 <_reply2ReturnCode+0x88>
    34ae:	4c 2f       	mov	r20, r28
    34b0:	50 e0       	ldi	r21, 0x00	; 0
    34b2:	b8 01       	movw	r22, r16
    34b4:	c5 01       	movw	r24, r10
    34b6:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <strncasecmp>
    34ba:	89 2b       	or	r24, r25
    34bc:	49 f4       	brne	.+18     	; 0x34d0 <_reply2ReturnCode+0xa8>
    34be:	f3 01       	movw	r30, r6
    34c0:	ee 0f       	add	r30, r30
    34c2:	ff 1f       	adc	r31, r31
    34c4:	e6 0d       	add	r30, r6
    34c6:	f7 1d       	adc	r31, r7
    34c8:	ee 55       	subi	r30, 0x5E	; 94
    34ca:	f9 4f       	sbci	r31, 0xF9	; 249
    34cc:	20 80       	ld	r2, Z
    34ce:	0d c0       	rjmp	.+26     	; 0x34ea <_reply2ReturnCode+0xc2>
    34d0:	8f ef       	ldi	r24, 0xFF	; 255
    34d2:	e8 1a       	sub	r14, r24
    34d4:	f8 0a       	sbc	r15, r24
    34d6:	e3 e0       	ldi	r30, 0x03	; 3
    34d8:	8e 0e       	add	r8, r30
    34da:	91 1c       	adc	r9, r1
    34dc:	f1 e1       	ldi	r31, 0x11	; 17
    34de:	ef 16       	cp	r14, r31
    34e0:	f1 04       	cpc	r15, r1
    34e2:	39 f6       	brne	.-114    	; 0x3472 <_reply2ReturnCode+0x4a>
    34e4:	68 94       	set
    34e6:	22 24       	eor	r2, r2
    34e8:	24 f8       	bld	r2, 4
    34ea:	82 2d       	mov	r24, r2
    34ec:	df 91       	pop	r29
    34ee:	cf 91       	pop	r28
    34f0:	1f 91       	pop	r17
    34f2:	0f 91       	pop	r16
    34f4:	ff 90       	pop	r15
    34f6:	ef 90       	pop	r14
    34f8:	df 90       	pop	r13
    34fa:	cf 90       	pop	r12
    34fc:	bf 90       	pop	r11
    34fe:	af 90       	pop	r10
    3500:	9f 90       	pop	r9
    3502:	8f 90       	pop	r8
    3504:	7f 90       	pop	r7
    3506:	6f 90       	pop	r6
    3508:	5f 90       	pop	r5
    350a:	4f 90       	pop	r4
    350c:	3f 90       	pop	r3
    350e:	2f 90       	pop	r2
    3510:	08 95       	ret

00003512 <_uploadMessageRc>:
    3512:	30 df       	rcall	.-416    	; 0x3374 <_uploadMessage>
    3514:	89 cf       	rjmp	.-238    	; 0x3428 <_reply2ReturnCode>
    3516:	08 95       	ret

00003518 <lora_driver_flushBuffers>:
    3518:	80 91 76 12 	lds	r24, 0x1276	; 0x801276 <_serialReplyBufferHandle>
    351c:	90 91 77 12 	lds	r25, 0x1277	; 0x801277 <_serialReplyBufferHandle+0x1>
    3520:	0c 94 02 08 	jmp	0x1004	; 0x1004 <xStreamBufferReset>
    3524:	08 95       	ret

00003526 <lora_driver_initialise>:
    3526:	8f 92       	push	r8
    3528:	9f 92       	push	r9
    352a:	af 92       	push	r10
    352c:	cf 92       	push	r12
    352e:	ef 92       	push	r14
    3530:	0f 93       	push	r16
    3532:	1f 93       	push	r17
    3534:	cf 93       	push	r28
    3536:	c8 2f       	mov	r28, r24
    3538:	8b 01       	movw	r16, r22
    353a:	41 e0       	ldi	r20, 0x01	; 1
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	70 e0       	ldi	r23, 0x00	; 0
    3540:	88 ec       	ldi	r24, 0xC8	; 200
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <xStreamBufferGenericCreate>
    3548:	90 93 77 12 	sts	0x1277, r25	; 0x801277 <_serialReplyBufferHandle+0x1>
    354c:	80 93 76 12 	sts	0x1276, r24	; 0x801276 <_serialReplyBufferHandle>
    3550:	10 93 75 12 	sts	0x1275, r17	; 0x801275 <_downlinkMessageBuffer+0x1>
    3554:	00 93 74 12 	sts	0x1274, r16	; 0x801274 <_downlinkMessageBuffer>
    3558:	0f 2e       	mov	r0, r31
    355a:	f4 e7       	ldi	r31, 0x74	; 116
    355c:	8f 2e       	mov	r8, r31
    355e:	f9 e1       	ldi	r31, 0x19	; 25
    3560:	9f 2e       	mov	r9, r31
    3562:	f0 2d       	mov	r31, r0
    3564:	68 94       	set
    3566:	aa 24       	eor	r10, r10
    3568:	a6 f8       	bld	r10, 6
    356a:	68 94       	set
    356c:	cc 24       	eor	r12, r12
    356e:	c6 f8       	bld	r12, 6
    3570:	e1 2c       	mov	r14, r1
    3572:	00 e0       	ldi	r16, 0x00	; 0
    3574:	23 e0       	ldi	r18, 0x03	; 3
    3576:	40 e0       	ldi	r20, 0x00	; 0
    3578:	51 ee       	ldi	r21, 0xE1	; 225
    357a:	60 e0       	ldi	r22, 0x00	; 0
    357c:	70 e0       	ldi	r23, 0x00	; 0
    357e:	8c 2f       	mov	r24, r28
    3580:	d2 d3       	rcall	.+1956   	; 0x3d26 <serial_create>
    3582:	90 93 79 12 	sts	0x1279, r25	; 0x801279 <_rn2483_serial+0x1>
    3586:	80 93 78 12 	sts	0x1278, r24	; 0x801278 <_rn2483_serial>
    358a:	e7 e0       	ldi	r30, 0x07	; 7
    358c:	f1 e0       	ldi	r31, 0x01	; 1
    358e:	80 81       	ld	r24, Z
    3590:	80 61       	ori	r24, 0x10	; 16
    3592:	80 83       	st	Z, r24
    3594:	cf 91       	pop	r28
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	ef 90       	pop	r14
    359c:	cf 90       	pop	r12
    359e:	af 90       	pop	r10
    35a0:	9f 90       	pop	r9
    35a2:	8f 90       	pop	r8
    35a4:	08 95       	ret

000035a6 <lora_driver_resetRn2483>:
    35a6:	88 23       	and	r24, r24
    35a8:	31 f0       	breq	.+12     	; 0x35b6 <lora_driver_resetRn2483+0x10>
    35aa:	e8 e0       	ldi	r30, 0x08	; 8
    35ac:	f1 e0       	ldi	r31, 0x01	; 1
    35ae:	80 81       	ld	r24, Z
    35b0:	8f 7e       	andi	r24, 0xEF	; 239
    35b2:	80 83       	st	Z, r24
    35b4:	08 95       	ret
    35b6:	e8 e0       	ldi	r30, 0x08	; 8
    35b8:	f1 e0       	ldi	r31, 0x01	; 1
    35ba:	80 81       	ld	r24, Z
    35bc:	80 61       	ori	r24, 0x10	; 16
    35be:	80 83       	st	Z, r24
    35c0:	08 95       	ret

000035c2 <lora_driver_rn2483FactoryReset>:
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	70 e0       	ldi	r23, 0x00	; 0
    35c6:	88 e2       	ldi	r24, 0x28	; 40
    35c8:	94 e0       	ldi	r25, 0x04	; 4
    35ca:	d4 de       	rcall	.-600    	; 0x3374 <_uploadMessage>
    35cc:	ef ef       	ldi	r30, 0xFF	; 255
    35ce:	f2 e1       	ldi	r31, 0x12	; 18
    35d0:	01 90       	ld	r0, Z+
    35d2:	00 20       	and	r0, r0
    35d4:	e9 f7       	brne	.-6      	; 0x35d0 <lora_driver_rn2483FactoryReset+0xe>
    35d6:	31 97       	sbiw	r30, 0x01	; 1
    35d8:	ef 5f       	subi	r30, 0xFF	; 255
    35da:	f2 41       	sbci	r31, 0x12	; 18
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	75 97       	sbiw	r30, 0x15	; 21
    35e0:	08 f0       	brcs	.+2      	; 0x35e4 <lora_driver_rn2483FactoryReset+0x22>
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	08 95       	ret

000035e6 <lora_driver_getRn2483Hweui>:
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	ec 01       	movw	r28, r24
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	89 e3       	ldi	r24, 0x39	; 57
    35f2:	94 e0       	ldi	r25, 0x04	; 4
    35f4:	bf de       	rcall	.-642    	; 0x3374 <_uploadMessage>
    35f6:	ef ef       	ldi	r30, 0xFF	; 255
    35f8:	f2 e1       	ldi	r31, 0x12	; 18
    35fa:	01 90       	ld	r0, Z+
    35fc:	00 20       	and	r0, r0
    35fe:	e9 f7       	brne	.-6      	; 0x35fa <lora_driver_getRn2483Hweui+0x14>
    3600:	e0 51       	subi	r30, 0x10	; 16
    3602:	f3 41       	sbci	r31, 0x13	; 19
    3604:	39 f4       	brne	.+14     	; 0x3614 <lora_driver_getRn2483Hweui+0x2e>
    3606:	6f ef       	ldi	r22, 0xFF	; 255
    3608:	72 e1       	ldi	r23, 0x12	; 18
    360a:	ce 01       	movw	r24, r28
    360c:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <strcpy>
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	02 c0       	rjmp	.+4      	; 0x3618 <lora_driver_getRn2483Hweui+0x32>
    3614:	18 82       	st	Y, r1
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	df 91       	pop	r29
    361a:	cf 91       	pop	r28
    361c:	08 95       	ret

0000361e <lora_driver_setDeviceIdentifier>:
    361e:	fc 01       	movw	r30, r24
    3620:	01 90       	ld	r0, Z+
    3622:	00 20       	and	r0, r0
    3624:	e9 f7       	brne	.-6      	; 0x3620 <lora_driver_setDeviceIdentifier+0x2>
    3626:	9f 01       	movw	r18, r30
    3628:	21 51       	subi	r18, 0x11	; 17
    362a:	31 09       	sbc	r19, r1
    362c:	28 17       	cp	r18, r24
    362e:	39 07       	cpc	r19, r25
    3630:	29 f4       	brne	.+10     	; 0x363c <lora_driver_setDeviceIdentifier+0x1e>
    3632:	bc 01       	movw	r22, r24
    3634:	87 e6       	ldi	r24, 0x67	; 103
    3636:	94 e0       	ldi	r25, 0x04	; 4
    3638:	6c cf       	rjmp	.-296    	; 0x3512 <_uploadMessageRc>
    363a:	08 95       	ret
    363c:	89 e0       	ldi	r24, 0x09	; 9
    363e:	08 95       	ret

00003640 <lora_driver_setApplicationIdentifier>:
    3640:	fc 01       	movw	r30, r24
    3642:	01 90       	ld	r0, Z+
    3644:	00 20       	and	r0, r0
    3646:	e9 f7       	brne	.-6      	; 0x3642 <lora_driver_setApplicationIdentifier+0x2>
    3648:	9f 01       	movw	r18, r30
    364a:	21 51       	subi	r18, 0x11	; 17
    364c:	31 09       	sbc	r19, r1
    364e:	28 17       	cp	r18, r24
    3650:	39 07       	cpc	r19, r25
    3652:	29 f4       	brne	.+10     	; 0x365e <lora_driver_setApplicationIdentifier+0x1e>
    3654:	bc 01       	movw	r22, r24
    3656:	86 e7       	ldi	r24, 0x76	; 118
    3658:	94 e0       	ldi	r25, 0x04	; 4
    365a:	5b cf       	rjmp	.-330    	; 0x3512 <_uploadMessageRc>
    365c:	08 95       	ret
    365e:	89 e0       	ldi	r24, 0x09	; 9
    3660:	08 95       	ret

00003662 <lora_driver_setApplicationKey>:
    3662:	fc 01       	movw	r30, r24
    3664:	01 90       	ld	r0, Z+
    3666:	00 20       	and	r0, r0
    3668:	e9 f7       	brne	.-6      	; 0x3664 <lora_driver_setApplicationKey+0x2>
    366a:	9f 01       	movw	r18, r30
    366c:	21 52       	subi	r18, 0x21	; 33
    366e:	31 09       	sbc	r19, r1
    3670:	28 17       	cp	r18, r24
    3672:	39 07       	cpc	r19, r25
    3674:	29 f4       	brne	.+10     	; 0x3680 <lora_driver_setApplicationKey+0x1e>
    3676:	bc 01       	movw	r22, r24
    3678:	85 e8       	ldi	r24, 0x85	; 133
    367a:	94 e0       	ldi	r25, 0x04	; 4
    367c:	4a cf       	rjmp	.-364    	; 0x3512 <_uploadMessageRc>
    367e:	08 95       	ret
    3680:	89 e0       	ldi	r24, 0x09	; 9
    3682:	08 95       	ret

00003684 <lora_driver_saveMac>:
    3684:	60 e0       	ldi	r22, 0x00	; 0
    3686:	70 e0       	ldi	r23, 0x00	; 0
    3688:	84 ec       	ldi	r24, 0xC4	; 196
    368a:	94 e0       	ldi	r25, 0x04	; 4
    368c:	42 cf       	rjmp	.-380    	; 0x3512 <_uploadMessageRc>
    368e:	08 95       	ret

00003690 <lora_driver_join>:
    3690:	0f 93       	push	r16
    3692:	1f 93       	push	r17
    3694:	e8 2f       	mov	r30, r24
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	ee 0f       	add	r30, r30
    369a:	ff 1f       	adc	r31, r31
    369c:	e2 56       	subi	r30, 0x62	; 98
    369e:	f9 4f       	sbci	r31, 0xF9	; 249
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	8d ec       	ldi	r24, 0xCD	; 205
    36a6:	94 e0       	ldi	r25, 0x04	; 4
    36a8:	34 df       	rcall	.-408    	; 0x3512 <_uploadMessageRc>
    36aa:	81 11       	cpse	r24, r1
    36ac:	14 c0       	rjmp	.+40     	; 0x36d6 <lora_driver_join+0x46>
    36ae:	08 e2       	ldi	r16, 0x28	; 40
    36b0:	15 e0       	ldi	r17, 0x05	; 5
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	4d e2       	ldi	r20, 0x2D	; 45
    36b8:	50 e0       	ldi	r21, 0x00	; 0
    36ba:	6f ef       	ldi	r22, 0xFF	; 255
    36bc:	72 e1       	ldi	r23, 0x12	; 18
    36be:	80 91 76 12 	lds	r24, 0x1276	; 0x801276 <_serialReplyBufferHandle>
    36c2:	90 91 77 12 	lds	r25, 0x1277	; 0x801277 <_serialReplyBufferHandle+0x1>
    36c6:	0e 94 39 09 	call	0x1272	; 0x1272 <xStreamBufferReceive>
    36ca:	88 23       	and	r24, r24
    36cc:	21 f0       	breq	.+8      	; 0x36d6 <lora_driver_join+0x46>
    36ce:	8f ef       	ldi	r24, 0xFF	; 255
    36d0:	92 e1       	ldi	r25, 0x12	; 18
    36d2:	aa de       	rcall	.-684    	; 0x3428 <_reply2ReturnCode>
    36d4:	03 c0       	rjmp	.+6      	; 0x36dc <lora_driver_join+0x4c>
    36d6:	8f ef       	ldi	r24, 0xFF	; 255
    36d8:	92 e1       	ldi	r25, 0x12	; 18
    36da:	a6 de       	rcall	.-692    	; 0x3428 <_reply2ReturnCode>
    36dc:	1f 91       	pop	r17
    36de:	0f 91       	pop	r16
    36e0:	08 95       	ret

000036e2 <lora_driver_sendUploadMessage>:
    36e2:	0f 93       	push	r16
    36e4:	1f 93       	push	r17
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
    36ea:	1f 92       	push	r1
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	db 01       	movw	r26, r22
    36f2:	11 96       	adiw	r26, 0x01	; 1
    36f4:	9c 91       	ld	r25, X
    36f6:	11 97       	sbiw	r26, 0x01	; 1
    36f8:	95 31       	cpi	r25, 0x15	; 21
    36fa:	08 f0       	brcs	.+2      	; 0x36fe <lora_driver_sendUploadMessage+0x1c>
    36fc:	b4 c0       	rjmp	.+360    	; 0x3866 <lora_driver_sendUploadMessage+0x184>
    36fe:	99 23       	and	r25, r25
    3700:	81 f1       	breq	.+96     	; 0x3762 <lora_driver_sendUploadMessage+0x80>
    3702:	60 e0       	ldi	r22, 0x00	; 0
    3704:	70 e0       	ldi	r23, 0x00	; 0
    3706:	27 2f       	mov	r18, r23
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	46 2f       	mov	r20, r22
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	fd 01       	movw	r30, r26
    3710:	e4 0f       	add	r30, r20
    3712:	f5 1f       	adc	r31, r21
    3714:	92 81       	ldd	r25, Z+2	; 0x02
    3716:	92 95       	swap	r25
    3718:	9f 70       	andi	r25, 0x0F	; 15
    371a:	9a 30       	cpi	r25, 0x0A	; 10
    371c:	10 f0       	brcs	.+4      	; 0x3722 <lora_driver_sendUploadMessage+0x40>
    371e:	99 5c       	subi	r25, 0xC9	; 201
    3720:	01 c0       	rjmp	.+2      	; 0x3724 <lora_driver_sendUploadMessage+0x42>
    3722:	90 5d       	subi	r25, 0xD0	; 208
    3724:	f9 01       	movw	r30, r18
    3726:	e0 57       	subi	r30, 0x70	; 112
    3728:	fd 4e       	sbci	r31, 0xED	; 237
    372a:	90 83       	st	Z, r25
    372c:	2f 5f       	subi	r18, 0xFF	; 255
    372e:	3f 4f       	sbci	r19, 0xFF	; 255
    3730:	fd 01       	movw	r30, r26
    3732:	e4 0f       	add	r30, r20
    3734:	f5 1f       	adc	r31, r21
    3736:	92 81       	ldd	r25, Z+2	; 0x02
    3738:	9f 70       	andi	r25, 0x0F	; 15
    373a:	49 2f       	mov	r20, r25
    373c:	50 e0       	ldi	r21, 0x00	; 0
    373e:	4a 30       	cpi	r20, 0x0A	; 10
    3740:	51 05       	cpc	r21, r1
    3742:	14 f0       	brlt	.+4      	; 0x3748 <lora_driver_sendUploadMessage+0x66>
    3744:	99 5c       	subi	r25, 0xC9	; 201
    3746:	01 c0       	rjmp	.+2      	; 0x374a <lora_driver_sendUploadMessage+0x68>
    3748:	90 5d       	subi	r25, 0xD0	; 208
    374a:	f9 01       	movw	r30, r18
    374c:	e0 57       	subi	r30, 0x70	; 112
    374e:	fd 4e       	sbci	r31, 0xED	; 237
    3750:	90 83       	st	Z, r25
    3752:	7e 5f       	subi	r23, 0xFE	; 254
    3754:	6f 5f       	subi	r22, 0xFF	; 255
    3756:	11 96       	adiw	r26, 0x01	; 1
    3758:	9c 91       	ld	r25, X
    375a:	11 97       	sbiw	r26, 0x01	; 1
    375c:	69 17       	cp	r22, r25
    375e:	98 f2       	brcs	.-90     	; 0x3706 <lora_driver_sendUploadMessage+0x24>
    3760:	01 c0       	rjmp	.+2      	; 0x3764 <lora_driver_sendUploadMessage+0x82>
    3762:	70 e0       	ldi	r23, 0x00	; 0
    3764:	e7 2f       	mov	r30, r23
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	e0 57       	subi	r30, 0x70	; 112
    376a:	fd 4e       	sbci	r31, 0xED	; 237
    376c:	10 82       	st	Z, r1
    376e:	4c 91       	ld	r20, X
    3770:	81 11       	cpse	r24, r1
    3772:	03 c0       	rjmp	.+6      	; 0x377a <lora_driver_sendUploadMessage+0x98>
    3774:	86 ed       	ldi	r24, 0xD6	; 214
    3776:	94 e0       	ldi	r25, 0x04	; 4
    3778:	02 c0       	rjmp	.+4      	; 0x377e <lora_driver_sendUploadMessage+0x9c>
    377a:	88 ed       	ldi	r24, 0xD8	; 216
    377c:	94 e0       	ldi	r25, 0x04	; 4
    377e:	20 e9       	ldi	r18, 0x90	; 144
    3780:	32 e1       	ldi	r19, 0x12	; 18
    3782:	3f 93       	push	r19
    3784:	2f 93       	push	r18
    3786:	1f 92       	push	r1
    3788:	4f 93       	push	r20
    378a:	9f 93       	push	r25
    378c:	8f 93       	push	r24
    378e:	8c ed       	ldi	r24, 0xDC	; 220
    3790:	94 e0       	ldi	r25, 0x04	; 4
    3792:	9f 93       	push	r25
    3794:	8f 93       	push	r24
    3796:	82 ed       	ldi	r24, 0xD2	; 210
    3798:	92 e1       	ldi	r25, 0x12	; 18
    379a:	9f 93       	push	r25
    379c:	8f 93       	push	r24
    379e:	0e 94 11 28 	call	0x5022	; 0x5022 <sprintf>
    37a2:	60 e0       	ldi	r22, 0x00	; 0
    37a4:	70 e0       	ldi	r23, 0x00	; 0
    37a6:	82 ed       	ldi	r24, 0xD2	; 210
    37a8:	92 e1       	ldi	r25, 0x12	; 18
    37aa:	b3 de       	rcall	.-666    	; 0x3512 <_uploadMessageRc>
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	81 11       	cpse	r24, r1
    37b8:	59 c0       	rjmp	.+178    	; 0x386c <lora_driver_sendUploadMessage+0x18a>
    37ba:	08 e2       	ldi	r16, 0x28	; 40
    37bc:	15 e0       	ldi	r17, 0x05	; 5
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	4d e2       	ldi	r20, 0x2D	; 45
    37c4:	50 e0       	ldi	r21, 0x00	; 0
    37c6:	6f ef       	ldi	r22, 0xFF	; 255
    37c8:	72 e1       	ldi	r23, 0x12	; 18
    37ca:	80 91 76 12 	lds	r24, 0x1276	; 0x801276 <_serialReplyBufferHandle>
    37ce:	90 91 77 12 	lds	r25, 0x1277	; 0x801277 <_serialReplyBufferHandle+0x1>
    37d2:	0e 94 39 09 	call	0x1272	; 0x1272 <xStreamBufferReceive>
    37d6:	88 23       	and	r24, r24
    37d8:	09 f4       	brne	.+2      	; 0x37dc <lora_driver_sendUploadMessage+0xfa>
    37da:	47 c0       	rjmp	.+142    	; 0x386a <lora_driver_sendUploadMessage+0x188>
    37dc:	8f ef       	ldi	r24, 0xFF	; 255
    37de:	92 e1       	ldi	r25, 0x12	; 18
    37e0:	23 de       	rcall	.-954    	; 0x3428 <_reply2ReturnCode>
    37e2:	8e 30       	cpi	r24, 0x0E	; 14
    37e4:	09 f0       	breq	.+2      	; 0x37e8 <lora_driver_sendUploadMessage+0x106>
    37e6:	42 c0       	rjmp	.+132    	; 0x386c <lora_driver_sendUploadMessage+0x18a>
    37e8:	87 e0       	ldi	r24, 0x07	; 7
    37ea:	89 83       	std	Y+1, r24	; 0x01
    37ec:	80 91 74 12 	lds	r24, 0x1274	; 0x801274 <_downlinkMessageBuffer>
    37f0:	90 91 75 12 	lds	r25, 0x1275	; 0x801275 <_downlinkMessageBuffer+0x1>
    37f4:	89 2b       	or	r24, r25
    37f6:	a9 f1       	breq	.+106    	; 0x3862 <lora_driver_sendUploadMessage+0x180>
    37f8:	be 01       	movw	r22, r28
    37fa:	6f 5f       	subi	r22, 0xFF	; 255
    37fc:	7f 4f       	sbci	r23, 0xFF	; 255
    37fe:	8f ef       	ldi	r24, 0xFF	; 255
    3800:	92 e1       	ldi	r25, 0x12	; 18
    3802:	68 d1       	rcall	.+720    	; 0x3ad4 <decode_port_no>
    3804:	80 93 7a 12 	sts	0x127A, r24	; 0x80127a <_downlinkPayload>
    3808:	e9 81       	ldd	r30, Y+1	; 0x01
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	e1 50       	subi	r30, 0x01	; 1
    380e:	fd 4e       	sbci	r31, 0xED	; 237
    3810:	df 01       	movw	r26, r30
    3812:	0d 90       	ld	r0, X+
    3814:	00 20       	and	r0, r0
    3816:	e9 f7       	brne	.-6      	; 0x3812 <lora_driver_sendUploadMessage+0x130>
    3818:	11 97       	sbiw	r26, 0x01	; 1
    381a:	ae 1b       	sub	r26, r30
    381c:	bf 0b       	sbc	r27, r31
    381e:	aa 23       	and	r26, r26
    3820:	91 f0       	breq	.+36     	; 0x3846 <lora_driver_sendUploadMessage+0x164>
    3822:	bb 27       	eor	r27, r27
    3824:	cd 01       	movw	r24, r26
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	9c 01       	movw	r18, r24
    382a:	12 f4       	brpl	.+4      	; 0x3830 <lora_driver_sendUploadMessage+0x14e>
    382c:	2f 5f       	subi	r18, 0xFF	; 255
    382e:	3f 4f       	sbci	r19, 0xFF	; 255
    3830:	35 95       	asr	r19
    3832:	27 95       	ror	r18
    3834:	20 93 7b 12 	sts	0x127B, r18	; 0x80127b <_downlinkPayload+0x1>
    3838:	af 01       	movw	r20, r30
    383a:	4f 5f       	subi	r20, 0xFF	; 255
    383c:	5f 4f       	sbci	r21, 0xFF	; 255
    383e:	64 e1       	ldi	r22, 0x14	; 20
    3840:	8c e7       	ldi	r24, 0x7C	; 124
    3842:	92 e1       	ldi	r25, 0x12	; 18
    3844:	73 d1       	rcall	.+742    	; 0x3b2c <decode_hexadecimal_string_bytes>
    3846:	01 e0       	ldi	r16, 0x01	; 1
    3848:	10 e0       	ldi	r17, 0x00	; 0
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	46 e1       	ldi	r20, 0x16	; 22
    3850:	50 e0       	ldi	r21, 0x00	; 0
    3852:	6a e7       	ldi	r22, 0x7A	; 122
    3854:	72 e1       	ldi	r23, 0x12	; 18
    3856:	80 91 74 12 	lds	r24, 0x1274	; 0x801274 <_downlinkMessageBuffer>
    385a:	90 91 75 12 	lds	r25, 0x1275	; 0x801275 <_downlinkMessageBuffer+0x1>
    385e:	0e 94 32 08 	call	0x1064	; 0x1064 <xStreamBufferSend>
    3862:	8e e0       	ldi	r24, 0x0E	; 14
    3864:	03 c0       	rjmp	.+6      	; 0x386c <lora_driver_sendUploadMessage+0x18a>
    3866:	84 e1       	ldi	r24, 0x14	; 20
    3868:	01 c0       	rjmp	.+2      	; 0x386c <lora_driver_sendUploadMessage+0x18a>
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	0f 90       	pop	r0
    386e:	df 91       	pop	r29
    3870:	cf 91       	pop	r28
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    3876:	08 95       	ret

00003878 <lora_driver_setAdaptiveDataRate>:
    3878:	81 30       	cpi	r24, 0x01	; 1
    387a:	19 f0       	breq	.+6      	; 0x3882 <lora_driver_setAdaptiveDataRate+0xa>
    387c:	6c ee       	ldi	r22, 0xEC	; 236
    387e:	74 e0       	ldi	r23, 0x04	; 4
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <lora_driver_setAdaptiveDataRate+0xe>
    3882:	65 ec       	ldi	r22, 0xC5	; 197
    3884:	75 e0       	ldi	r23, 0x05	; 5
    3886:	80 ef       	ldi	r24, 0xF0	; 240
    3888:	94 e0       	ldi	r25, 0x04	; 4
    388a:	43 ce       	rjmp	.-890    	; 0x3512 <_uploadMessageRc>
    388c:	08 95       	ret

0000388e <lora_driver_setReceiveDelay>:
    388e:	9f 93       	push	r25
    3890:	8f 93       	push	r24
    3892:	81 e2       	ldi	r24, 0x21	; 33
    3894:	95 e0       	ldi	r25, 0x05	; 5
    3896:	9f 93       	push	r25
    3898:	8f 93       	push	r24
    389a:	82 ed       	ldi	r24, 0xD2	; 210
    389c:	92 e1       	ldi	r25, 0x12	; 18
    389e:	9f 93       	push	r25
    38a0:	8f 93       	push	r24
    38a2:	0e 94 11 28 	call	0x5022	; 0x5022 <sprintf>
    38a6:	60 e0       	ldi	r22, 0x00	; 0
    38a8:	70 e0       	ldi	r23, 0x00	; 0
    38aa:	82 ed       	ldi	r24, 0xD2	; 210
    38ac:	92 e1       	ldi	r25, 0x12	; 18
    38ae:	31 de       	rcall	.-926    	; 0x3512 <_uploadMessageRc>
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	0f 90       	pop	r0
    38bc:	08 95       	ret

000038be <lora_driver_configureToEu868>:
    38be:	2f 92       	push	r2
    38c0:	3f 92       	push	r3
    38c2:	4f 92       	push	r4
    38c4:	5f 92       	push	r5
    38c6:	6f 92       	push	r6
    38c8:	7f 92       	push	r7
    38ca:	8f 92       	push	r8
    38cc:	9f 92       	push	r9
    38ce:	af 92       	push	r10
    38d0:	bf 92       	push	r11
    38d2:	cf 92       	push	r12
    38d4:	df 92       	push	r13
    38d6:	ef 92       	push	r14
    38d8:	ff 92       	push	r15
    38da:	0f 93       	push	r16
    38dc:	1f 93       	push	r17
    38de:	cf 93       	push	r28
    38e0:	df 93       	push	r29
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
    38e6:	a0 97       	sbiw	r28, 0x20	; 32
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
    38f2:	6e e4       	ldi	r22, 0x4E	; 78
    38f4:	75 e0       	ldi	r23, 0x05	; 5
    38f6:	8a e5       	ldi	r24, 0x5A	; 90
    38f8:	95 e0       	ldi	r25, 0x05	; 5
    38fa:	3c dd       	rcall	.-1416   	; 0x3374 <_uploadMessage>
    38fc:	95 dd       	rcall	.-1238   	; 0x3428 <_reply2ReturnCode>
    38fe:	81 11       	cpse	r24, r1
    3900:	a3 c0       	rjmp	.+326    	; 0x3a48 <lora_driver_configureToEu868+0x18a>
    3902:	80 e2       	ldi	r24, 0x20	; 32
    3904:	ed e1       	ldi	r30, 0x1D	; 29
    3906:	f2 e0       	ldi	r31, 0x02	; 2
    3908:	de 01       	movw	r26, r28
    390a:	11 96       	adiw	r26, 0x01	; 1
    390c:	01 90       	ld	r0, Z+
    390e:	0d 92       	st	X+, r0
    3910:	8a 95       	dec	r24
    3912:	e1 f7       	brne	.-8      	; 0x390c <lora_driver_configureToEu868+0x4e>
    3914:	9e 01       	movw	r18, r28
    3916:	2f 5f       	subi	r18, 0xFF	; 255
    3918:	3f 4f       	sbci	r19, 0xFF	; 255
    391a:	69 01       	movw	r12, r18
    391c:	e1 2c       	mov	r14, r1
    391e:	f1 2c       	mov	r15, r1
    3920:	0f 2e       	mov	r0, r31
    3922:	f6 e6       	ldi	r31, 0x66	; 102
    3924:	af 2e       	mov	r10, r31
    3926:	f5 e0       	ldi	r31, 0x05	; 5
    3928:	bf 2e       	mov	r11, r31
    392a:	f0 2d       	mov	r31, r0
    392c:	02 ed       	ldi	r16, 0xD2	; 210
    392e:	12 e1       	ldi	r17, 0x12	; 18
    3930:	0f 2e       	mov	r0, r31
    3932:	ff e7       	ldi	r31, 0x7F	; 127
    3934:	4f 2e       	mov	r4, r31
    3936:	f5 e0       	ldi	r31, 0x05	; 5
    3938:	5f 2e       	mov	r5, r31
    393a:	f0 2d       	mov	r31, r0
    393c:	0f 2e       	mov	r0, r31
    393e:	f6 e9       	ldi	r31, 0x96	; 150
    3940:	8f 2e       	mov	r8, r31
    3942:	f5 e0       	ldi	r31, 0x05	; 5
    3944:	9f 2e       	mov	r9, r31
    3946:	f0 2d       	mov	r31, r0
    3948:	0f 2e       	mov	r0, r31
    394a:	f0 eb       	ldi	r31, 0xB0	; 176
    394c:	6f 2e       	mov	r6, r31
    394e:	f5 e0       	ldi	r31, 0x05	; 5
    3950:	7f 2e       	mov	r7, r31
    3952:	f0 2d       	mov	r31, r0
    3954:	3e 2c       	mov	r3, r14
    3956:	2f 2c       	mov	r2, r15
    3958:	ff 92       	push	r15
    395a:	ef 92       	push	r14
    395c:	bf 92       	push	r11
    395e:	af 92       	push	r10
    3960:	1f 93       	push	r17
    3962:	0f 93       	push	r16
    3964:	0e 94 11 28 	call	0x5022	; 0x5022 <sprintf>
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	c8 01       	movw	r24, r16
    396e:	02 dd       	rcall	.-1532   	; 0x3374 <_uploadMessage>
    3970:	5b dd       	rcall	.-1354   	; 0x3428 <_reply2ReturnCode>
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	81 11       	cpse	r24, r1
    3980:	63 c0       	rjmp	.+198    	; 0x3a48 <lora_driver_configureToEu868+0x18a>
    3982:	32 e0       	ldi	r19, 0x02	; 2
    3984:	3e 15       	cp	r19, r14
    3986:	e8 f4       	brcc	.+58     	; 0x39c2 <lora_driver_configureToEu868+0x104>
    3988:	f6 01       	movw	r30, r12
    398a:	83 81       	ldd	r24, Z+3	; 0x03
    398c:	8f 93       	push	r24
    398e:	82 81       	ldd	r24, Z+2	; 0x02
    3990:	8f 93       	push	r24
    3992:	81 81       	ldd	r24, Z+1	; 0x01
    3994:	8f 93       	push	r24
    3996:	80 81       	ld	r24, Z
    3998:	8f 93       	push	r24
    399a:	ff 92       	push	r15
    399c:	ef 92       	push	r14
    399e:	5f 92       	push	r5
    39a0:	4f 92       	push	r4
    39a2:	1f 93       	push	r17
    39a4:	0f 93       	push	r16
    39a6:	0e 94 11 28 	call	0x5022	; 0x5022 <sprintf>
    39aa:	60 e0       	ldi	r22, 0x00	; 0
    39ac:	70 e0       	ldi	r23, 0x00	; 0
    39ae:	c8 01       	movw	r24, r16
    39b0:	e1 dc       	rcall	.-1598   	; 0x3374 <_uploadMessage>
    39b2:	3a dd       	rcall	.-1420   	; 0x3428 <_reply2ReturnCode>
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	de bf       	out	0x3e, r29	; 62
    39ba:	0f be       	out	0x3f, r0	; 63
    39bc:	cd bf       	out	0x3d, r28	; 61
    39be:	81 11       	cpse	r24, r1
    39c0:	43 c0       	rjmp	.+134    	; 0x3a48 <lora_driver_configureToEu868+0x18a>
    39c2:	2f 92       	push	r2
    39c4:	3f 92       	push	r3
    39c6:	9f 92       	push	r9
    39c8:	8f 92       	push	r8
    39ca:	1f 93       	push	r17
    39cc:	0f 93       	push	r16
    39ce:	0e 94 11 28 	call	0x5022	; 0x5022 <sprintf>
    39d2:	60 e0       	ldi	r22, 0x00	; 0
    39d4:	70 e0       	ldi	r23, 0x00	; 0
    39d6:	c8 01       	movw	r24, r16
    39d8:	cd dc       	rcall	.-1638   	; 0x3374 <_uploadMessage>
    39da:	26 dd       	rcall	.-1460   	; 0x3428 <_reply2ReturnCode>
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	81 11       	cpse	r24, r1
    39ea:	2e c0       	rjmp	.+92     	; 0x3a48 <lora_driver_configureToEu868+0x18a>
    39ec:	2f 92       	push	r2
    39ee:	3f 92       	push	r3
    39f0:	7f 92       	push	r7
    39f2:	6f 92       	push	r6
    39f4:	1f 93       	push	r17
    39f6:	0f 93       	push	r16
    39f8:	0e 94 11 28 	call	0x5022	; 0x5022 <sprintf>
    39fc:	60 e0       	ldi	r22, 0x00	; 0
    39fe:	70 e0       	ldi	r23, 0x00	; 0
    3a00:	c8 01       	movw	r24, r16
    3a02:	b8 dc       	rcall	.-1680   	; 0x3374 <_uploadMessage>
    3a04:	11 dd       	rcall	.-1502   	; 0x3428 <_reply2ReturnCode>
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	0f 90       	pop	r0
    3a10:	0f 90       	pop	r0
    3a12:	81 11       	cpse	r24, r1
    3a14:	19 c0       	rjmp	.+50     	; 0x3a48 <lora_driver_configureToEu868+0x18a>
    3a16:	3f ef       	ldi	r19, 0xFF	; 255
    3a18:	e3 1a       	sub	r14, r19
    3a1a:	f3 0a       	sbc	r15, r19
    3a1c:	84 e0       	ldi	r24, 0x04	; 4
    3a1e:	c8 0e       	add	r12, r24
    3a20:	d1 1c       	adc	r13, r1
    3a22:	98 e0       	ldi	r25, 0x08	; 8
    3a24:	e9 16       	cp	r14, r25
    3a26:	f1 04       	cpc	r15, r1
    3a28:	09 f0       	breq	.+2      	; 0x3a2c <lora_driver_configureToEu868+0x16e>
    3a2a:	94 cf       	rjmp	.-216    	; 0x3954 <lora_driver_configureToEu868+0x96>
    3a2c:	60 e0       	ldi	r22, 0x00	; 0
    3a2e:	70 e0       	ldi	r23, 0x00	; 0
    3a30:	88 ec       	ldi	r24, 0xC8	; 200
    3a32:	95 e0       	ldi	r25, 0x05	; 5
    3a34:	9f dc       	rcall	.-1730   	; 0x3374 <_uploadMessage>
    3a36:	f8 dc       	rcall	.-1552   	; 0x3428 <_reply2ReturnCode>
    3a38:	81 11       	cpse	r24, r1
    3a3a:	06 c0       	rjmp	.+12     	; 0x3a48 <lora_driver_configureToEu868+0x18a>
    3a3c:	60 e0       	ldi	r22, 0x00	; 0
    3a3e:	70 e0       	ldi	r23, 0x00	; 0
    3a40:	89 ed       	ldi	r24, 0xD9	; 217
    3a42:	95 e0       	ldi	r25, 0x05	; 5
    3a44:	97 dc       	rcall	.-1746   	; 0x3374 <_uploadMessage>
    3a46:	f0 dc       	rcall	.-1568   	; 0x3428 <_reply2ReturnCode>
    3a48:	a0 96       	adiw	r28, 0x20	; 32
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	df 91       	pop	r29
    3a56:	cf 91       	pop	r28
    3a58:	1f 91       	pop	r17
    3a5a:	0f 91       	pop	r16
    3a5c:	ff 90       	pop	r15
    3a5e:	ef 90       	pop	r14
    3a60:	df 90       	pop	r13
    3a62:	cf 90       	pop	r12
    3a64:	bf 90       	pop	r11
    3a66:	af 90       	pop	r10
    3a68:	9f 90       	pop	r9
    3a6a:	8f 90       	pop	r8
    3a6c:	7f 90       	pop	r7
    3a6e:	6f 90       	pop	r6
    3a70:	5f 90       	pop	r5
    3a72:	4f 90       	pop	r4
    3a74:	3f 90       	pop	r3
    3a76:	2f 90       	pop	r2
    3a78:	08 95       	ret

00003a7a <lora_driver_setOtaaIdentity>:
    3a7a:	ef 92       	push	r14
    3a7c:	ff 92       	push	r15
    3a7e:	0f 93       	push	r16
    3a80:	1f 93       	push	r17
    3a82:	cf 93       	push	r28
    3a84:	df 93       	push	r29
    3a86:	ec 01       	movw	r28, r24
    3a88:	8b 01       	movw	r16, r22
    3a8a:	7a 01       	movw	r14, r20
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	f4 de       	rcall	.-536    	; 0x3878 <lora_driver_setAdaptiveDataRate>
    3a90:	81 11       	cpse	r24, r1
    3a92:	0d c0       	rjmp	.+26     	; 0x3aae <lora_driver_setOtaaIdentity+0x34>
    3a94:	ce 01       	movw	r24, r28
    3a96:	d4 dd       	rcall	.-1112   	; 0x3640 <lora_driver_setApplicationIdentifier>
    3a98:	81 11       	cpse	r24, r1
    3a9a:	09 c0       	rjmp	.+18     	; 0x3aae <lora_driver_setOtaaIdentity+0x34>
    3a9c:	c8 01       	movw	r24, r16
    3a9e:	e1 dd       	rcall	.-1086   	; 0x3662 <lora_driver_setApplicationKey>
    3aa0:	81 11       	cpse	r24, r1
    3aa2:	05 c0       	rjmp	.+10     	; 0x3aae <lora_driver_setOtaaIdentity+0x34>
    3aa4:	c7 01       	movw	r24, r14
    3aa6:	bb dd       	rcall	.-1162   	; 0x361e <lora_driver_setDeviceIdentifier>
    3aa8:	81 11       	cpse	r24, r1
    3aaa:	01 c0       	rjmp	.+2      	; 0x3aae <lora_driver_setOtaaIdentity+0x34>
    3aac:	eb dd       	rcall	.-1066   	; 0x3684 <lora_driver_saveMac>
    3aae:	df 91       	pop	r29
    3ab0:	cf 91       	pop	r28
    3ab2:	1f 91       	pop	r17
    3ab4:	0f 91       	pop	r16
    3ab6:	ff 90       	pop	r15
    3ab8:	ef 90       	pop	r14
    3aba:	08 95       	ret

00003abc <lora_driver_mapReturnCodeToText>:
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	fc 01       	movw	r30, r24
    3ac0:	ee 0f       	add	r30, r30
    3ac2:	ff 1f       	adc	r31, r31
    3ac4:	8e 0f       	add	r24, r30
    3ac6:	9f 1f       	adc	r25, r31
    3ac8:	fc 01       	movw	r30, r24
    3aca:	ee 55       	subi	r30, 0x5E	; 94
    3acc:	f9 4f       	sbci	r31, 0xF9	; 249
    3ace:	81 81       	ldd	r24, Z+1	; 0x01
    3ad0:	92 81       	ldd	r25, Z+2	; 0x02
    3ad2:	08 95       	ret

00003ad4 <decode_port_no>:
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	29 f1       	breq	.+74     	; 0x3b24 <decode_port_no+0x50>
    3ada:	fb 01       	movw	r30, r22
    3adc:	20 81       	ld	r18, Z
    3ade:	fc 01       	movw	r30, r24
    3ae0:	01 90       	ld	r0, Z+
    3ae2:	00 20       	and	r0, r0
    3ae4:	e9 f7       	brne	.-6      	; 0x3ae0 <decode_port_no+0xc>
    3ae6:	31 97       	sbiw	r30, 0x01	; 1
    3ae8:	e8 1b       	sub	r30, r24
    3aea:	f9 0b       	sbc	r31, r25
    3aec:	82 2f       	mov	r24, r18
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	e8 17       	cp	r30, r24
    3af2:	f9 07       	cpc	r31, r25
    3af4:	c8 f0       	brcs	.+50     	; 0x3b28 <decode_port_no+0x54>
    3af6:	80 e0       	ldi	r24, 0x00	; 0
    3af8:	08 c0       	rjmp	.+16     	; 0x3b0a <decode_port_no+0x36>
    3afa:	88 0f       	add	r24, r24
    3afc:	38 2f       	mov	r19, r24
    3afe:	33 0f       	add	r19, r19
    3b00:	33 0f       	add	r19, r19
    3b02:	83 0f       	add	r24, r19
    3b04:	80 53       	subi	r24, 0x30	; 48
    3b06:	89 0f       	add	r24, r25
    3b08:	2f 5f       	subi	r18, 0xFF	; 255
    3b0a:	fd 01       	movw	r30, r26
    3b0c:	e2 0f       	add	r30, r18
    3b0e:	f1 1d       	adc	r31, r1
    3b10:	90 81       	ld	r25, Z
    3b12:	30 ed       	ldi	r19, 0xD0	; 208
    3b14:	39 0f       	add	r19, r25
    3b16:	3a 30       	cpi	r19, 0x0A	; 10
    3b18:	10 f4       	brcc	.+4      	; 0x3b1e <decode_port_no+0x4a>
    3b1a:	91 11       	cpse	r25, r1
    3b1c:	ee cf       	rjmp	.-36     	; 0x3afa <decode_port_no+0x26>
    3b1e:	fb 01       	movw	r30, r22
    3b20:	20 83       	st	Z, r18
    3b22:	08 95       	ret
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	08 95       	ret
    3b28:	80 e0       	ldi	r24, 0x00	; 0
    3b2a:	08 95       	ret

00003b2c <decode_hexadecimal_string_bytes>:
    3b2c:	0f 93       	push	r16
    3b2e:	1f 93       	push	r17
    3b30:	cf 93       	push	r28
    3b32:	df 93       	push	r29
    3b34:	dc 01       	movw	r26, r24
    3b36:	ea 01       	movw	r28, r20
    3b38:	20 97       	sbiw	r28, 0x00	; 0
    3b3a:	e1 f1       	breq	.+120    	; 0x3bb4 <decode_hexadecimal_string_bytes+0x88>
    3b3c:	fa 01       	movw	r30, r20
    3b3e:	01 90       	ld	r0, Z+
    3b40:	00 20       	and	r0, r0
    3b42:	e9 f7       	brne	.-6      	; 0x3b3e <decode_hexadecimal_string_bytes+0x12>
    3b44:	31 97       	sbiw	r30, 0x01	; 1
    3b46:	e4 1b       	sub	r30, r20
    3b48:	f5 0b       	sbc	r31, r21
    3b4a:	32 97       	sbiw	r30, 0x02	; 2
    3b4c:	10 f5       	brcc	.+68     	; 0x3b92 <decode_hexadecimal_string_bytes+0x66>
    3b4e:	32 c0       	rjmp	.+100    	; 0x3bb4 <decode_hexadecimal_string_bytes+0x88>
    3b50:	8d 01       	movw	r16, r26
    3b52:	04 0f       	add	r16, r20
    3b54:	15 1f       	adc	r17, r21
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	ae 01       	movw	r20, r28
    3b5a:	42 0f       	add	r20, r18
    3b5c:	53 1f       	adc	r21, r19
    3b5e:	fa 01       	movw	r30, r20
    3b60:	90 81       	ld	r25, Z
    3b62:	91 34       	cpi	r25, 0x41	; 65
    3b64:	28 f0       	brcs	.+10     	; 0x3b70 <decode_hexadecimal_string_bytes+0x44>
    3b66:	97 53       	subi	r25, 0x37	; 55
    3b68:	59 2f       	mov	r21, r25
    3b6a:	52 95       	swap	r21
    3b6c:	50 7f       	andi	r21, 0xF0	; 240
    3b6e:	03 c0       	rjmp	.+6      	; 0x3b76 <decode_hexadecimal_string_bytes+0x4a>
    3b70:	59 2f       	mov	r21, r25
    3b72:	52 95       	swap	r21
    3b74:	50 7f       	andi	r21, 0xF0	; 240
    3b76:	2c 0f       	add	r18, r28
    3b78:	3d 1f       	adc	r19, r29
    3b7a:	f9 01       	movw	r30, r18
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	91 34       	cpi	r25, 0x41	; 65
    3b80:	10 f0       	brcs	.+4      	; 0x3b86 <decode_hexadecimal_string_bytes+0x5a>
    3b82:	97 53       	subi	r25, 0x37	; 55
    3b84:	01 c0       	rjmp	.+2      	; 0x3b88 <decode_hexadecimal_string_bytes+0x5c>
    3b86:	90 53       	subi	r25, 0x30	; 48
    3b88:	95 0f       	add	r25, r21
    3b8a:	f8 01       	movw	r30, r16
    3b8c:	90 83       	st	Z, r25
    3b8e:	8f 5f       	subi	r24, 0xFF	; 255
    3b90:	01 c0       	rjmp	.+2      	; 0x3b94 <decode_hexadecimal_string_bytes+0x68>
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	28 2f       	mov	r18, r24
    3b96:	22 0f       	add	r18, r18
    3b98:	48 2f       	mov	r20, r24
    3b9a:	50 e0       	ldi	r21, 0x00	; 0
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	01 90       	ld	r0, Z+
    3ba0:	00 20       	and	r0, r0
    3ba2:	e9 f7       	brne	.-6      	; 0x3b9e <decode_hexadecimal_string_bytes+0x72>
    3ba4:	31 97       	sbiw	r30, 0x01	; 1
    3ba6:	ec 1b       	sub	r30, r28
    3ba8:	fd 0b       	sbc	r31, r29
    3baa:	4e 17       	cp	r20, r30
    3bac:	5f 07       	cpc	r21, r31
    3bae:	10 f4       	brcc	.+4      	; 0x3bb4 <decode_hexadecimal_string_bytes+0x88>
    3bb0:	86 13       	cpse	r24, r22
    3bb2:	ce cf       	rjmp	.-100    	; 0x3b50 <decode_hexadecimal_string_bytes+0x24>
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	1f 91       	pop	r17
    3bba:	0f 91       	pop	r16
    3bbc:	08 95       	ret

00003bbe <_serialCallBack>:
    3bbe:	80 91 2f 13 	lds	r24, 0x132F	; 0x80132f <crc_sum.1945>
    3bc2:	86 0f       	add	r24, r22
    3bc4:	80 93 2f 13 	sts	0x132F, r24	; 0x80132f <crc_sum.1945>
    3bc8:	90 91 32 13 	lds	r25, 0x1332	; 0x801332 <_mh_state>
    3bcc:	91 30       	cpi	r25, 0x01	; 1
    3bce:	79 f0       	breq	.+30     	; 0x3bee <_serialCallBack+0x30>
    3bd0:	28 f0       	brcs	.+10     	; 0x3bdc <_serialCallBack+0x1e>
    3bd2:	92 30       	cpi	r25, 0x02	; 2
    3bd4:	a9 f0       	breq	.+42     	; 0x3c00 <_serialCallBack+0x42>
    3bd6:	93 30       	cpi	r25, 0x03	; 3
    3bd8:	19 f1       	breq	.+70     	; 0x3c20 <_serialCallBack+0x62>
    3bda:	08 95       	ret
    3bdc:	6f 3f       	cpi	r22, 0xFF	; 255
    3bde:	09 f0       	breq	.+2      	; 0x3be2 <_serialCallBack+0x24>
    3be0:	48 c0       	rjmp	.+144    	; 0x3c72 <_serialCallBack+0xb4>
    3be2:	10 92 2f 13 	sts	0x132F, r1	; 0x80132f <crc_sum.1945>
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	80 93 32 13 	sts	0x1332, r24	; 0x801332 <_mh_state>
    3bec:	08 95       	ret
    3bee:	66 38       	cpi	r22, 0x86	; 134
    3bf0:	09 f0       	breq	.+2      	; 0x3bf4 <_serialCallBack+0x36>
    3bf2:	3f c0       	rjmp	.+126    	; 0x3c72 <_serialCallBack+0xb4>
    3bf4:	10 92 2e 13 	sts	0x132E, r1	; 0x80132e <inDex.1943>
    3bf8:	82 e0       	ldi	r24, 0x02	; 2
    3bfa:	80 93 32 13 	sts	0x1332, r24	; 0x801332 <_mh_state>
    3bfe:	08 95       	ret
    3c00:	e0 91 2e 13 	lds	r30, 0x132E	; 0x80132e <inDex.1943>
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	8e 0f       	add	r24, r30
    3c08:	80 93 2e 13 	sts	0x132E, r24	; 0x80132e <inDex.1943>
    3c0c:	f0 e0       	ldi	r31, 0x00	; 0
    3c0e:	e4 5d       	subi	r30, 0xD4	; 212
    3c10:	fc 4e       	sbci	r31, 0xEC	; 236
    3c12:	60 83       	st	Z, r22
    3c14:	82 30       	cpi	r24, 0x02	; 2
    3c16:	69 f5       	brne	.+90     	; 0x3c72 <_serialCallBack+0xb4>
    3c18:	83 e0       	ldi	r24, 0x03	; 3
    3c1a:	80 93 32 13 	sts	0x1332, r24	; 0x801332 <_mh_state>
    3c1e:	08 95       	ret
    3c20:	90 91 2e 13 	lds	r25, 0x132E	; 0x80132e <inDex.1943>
    3c24:	21 e0       	ldi	r18, 0x01	; 1
    3c26:	29 0f       	add	r18, r25
    3c28:	20 93 2e 13 	sts	0x132E, r18	; 0x80132e <inDex.1943>
    3c2c:	96 30       	cpi	r25, 0x06	; 6
    3c2e:	09 f5       	brne	.+66     	; 0x3c72 <_serialCallBack+0xb4>
    3c30:	81 11       	cpse	r24, r1
    3c32:	0e c0       	rjmp	.+28     	; 0x3c50 <_serialCallBack+0x92>
    3c34:	ec e2       	ldi	r30, 0x2C	; 44
    3c36:	f3 e1       	ldi	r31, 0x13	; 19
    3c38:	80 81       	ld	r24, Z
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	98 2f       	mov	r25, r24
    3c3e:	88 27       	eor	r24, r24
    3c40:	21 81       	ldd	r18, Z+1	; 0x01
    3c42:	82 0f       	add	r24, r18
    3c44:	91 1d       	adc	r25, r1
    3c46:	90 93 34 13 	sts	0x1334, r25	; 0x801334 <_ppm+0x1>
    3c4a:	80 93 33 13 	sts	0x1333, r24	; 0x801333 <_ppm>
    3c4e:	04 c0       	rjmp	.+8      	; 0x3c58 <_serialCallBack+0x9a>
    3c50:	10 92 34 13 	sts	0x1334, r1	; 0x801334 <_ppm+0x1>
    3c54:	10 92 33 13 	sts	0x1333, r1	; 0x801333 <_ppm>
    3c58:	10 92 32 13 	sts	0x1332, r1	; 0x801332 <_mh_state>
    3c5c:	e0 91 30 13 	lds	r30, 0x1330	; 0x801330 <_appCallBack>
    3c60:	f0 91 31 13 	lds	r31, 0x1331	; 0x801331 <_appCallBack+0x1>
    3c64:	30 97       	sbiw	r30, 0x00	; 0
    3c66:	29 f0       	breq	.+10     	; 0x3c72 <_serialCallBack+0xb4>
    3c68:	80 91 33 13 	lds	r24, 0x1333	; 0x801333 <_ppm>
    3c6c:	90 91 34 13 	lds	r25, 0x1334	; 0x801334 <_ppm+0x1>
    3c70:	19 95       	eicall
    3c72:	08 95       	ret

00003c74 <mh_z19_initialise>:
    3c74:	8f 92       	push	r8
    3c76:	9f 92       	push	r9
    3c78:	af 92       	push	r10
    3c7a:	cf 92       	push	r12
    3c7c:	ef 92       	push	r14
    3c7e:	0f 93       	push	r16
    3c80:	0f 2e       	mov	r0, r31
    3c82:	ff ed       	ldi	r31, 0xDF	; 223
    3c84:	8f 2e       	mov	r8, r31
    3c86:	fd e1       	ldi	r31, 0x1D	; 29
    3c88:	9f 2e       	mov	r9, r31
    3c8a:	f0 2d       	mov	r31, r0
    3c8c:	68 94       	set
    3c8e:	aa 24       	eor	r10, r10
    3c90:	a4 f8       	bld	r10, 4
    3c92:	68 94       	set
    3c94:	cc 24       	eor	r12, r12
    3c96:	c4 f8       	bld	r12, 4
    3c98:	e1 2c       	mov	r14, r1
    3c9a:	00 e0       	ldi	r16, 0x00	; 0
    3c9c:	23 e0       	ldi	r18, 0x03	; 3
    3c9e:	40 e8       	ldi	r20, 0x80	; 128
    3ca0:	55 e2       	ldi	r21, 0x25	; 37
    3ca2:	60 e0       	ldi	r22, 0x00	; 0
    3ca4:	70 e0       	ldi	r23, 0x00	; 0
    3ca6:	3f d0       	rcall	.+126    	; 0x3d26 <serial_create>
    3ca8:	90 93 36 13 	sts	0x1336, r25	; 0x801336 <_serial+0x1>
    3cac:	80 93 35 13 	sts	0x1335, r24	; 0x801335 <_serial>
    3cb0:	0f 91       	pop	r16
    3cb2:	ef 90       	pop	r14
    3cb4:	cf 90       	pop	r12
    3cb6:	af 90       	pop	r10
    3cb8:	9f 90       	pop	r9
    3cba:	8f 90       	pop	r8
    3cbc:	08 95       	ret

00003cbe <mh_z19_injectCallBack>:
    3cbe:	90 93 31 13 	sts	0x1331, r25	; 0x801331 <_appCallBack+0x1>
    3cc2:	80 93 30 13 	sts	0x1330, r24	; 0x801330 <_appCallBack>
    3cc6:	08 95       	ret

00003cc8 <mh_z19_takeMeassuring>:
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
    3ccc:	cd b7       	in	r28, 0x3d	; 61
    3cce:	de b7       	in	r29, 0x3e	; 62
    3cd0:	29 97       	sbiw	r28, 0x09	; 9
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	f8 94       	cli
    3cd6:	de bf       	out	0x3e, r29	; 62
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	cd bf       	out	0x3d, r28	; 61
    3cdc:	89 e0       	ldi	r24, 0x09	; 9
    3cde:	ed e3       	ldi	r30, 0x3D	; 61
    3ce0:	f2 e0       	ldi	r31, 0x02	; 2
    3ce2:	9e 01       	movw	r18, r28
    3ce4:	2f 5f       	subi	r18, 0xFF	; 255
    3ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce8:	d9 01       	movw	r26, r18
    3cea:	01 90       	ld	r0, Z+
    3cec:	0d 92       	st	X+, r0
    3cee:	8a 95       	dec	r24
    3cf0:	e1 f7       	brne	.-8      	; 0x3cea <mh_z19_takeMeassuring+0x22>
    3cf2:	10 92 34 13 	sts	0x1334, r1	; 0x801334 <_ppm+0x1>
    3cf6:	10 92 33 13 	sts	0x1333, r1	; 0x801333 <_ppm>
    3cfa:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <_serial>
    3cfe:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <_serial+0x1>
    3d02:	00 97       	sbiw	r24, 0x00	; 0
    3d04:	31 f0       	breq	.+12     	; 0x3d12 <mh_z19_takeMeassuring+0x4a>
    3d06:	42 2f       	mov	r20, r18
    3d08:	53 2f       	mov	r21, r19
    3d0a:	69 e0       	ldi	r22, 0x09	; 9
    3d0c:	d3 d0       	rcall	.+422    	; 0x3eb4 <serial_sendBytes>
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	01 c0       	rjmp	.+2      	; 0x3d14 <mh_z19_takeMeassuring+0x4c>
    3d12:	82 e0       	ldi	r24, 0x02	; 2
    3d14:	29 96       	adiw	r28, 0x09	; 9
    3d16:	0f b6       	in	r0, 0x3f	; 63
    3d18:	f8 94       	cli
    3d1a:	de bf       	out	0x3e, r29	; 62
    3d1c:	0f be       	out	0x3f, r0	; 63
    3d1e:	cd bf       	out	0x3d, r28	; 61
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	08 95       	ret

00003d26 <serial_create>:
    3d26:	2f 92       	push	r2
    3d28:	3f 92       	push	r3
    3d2a:	4f 92       	push	r4
    3d2c:	5f 92       	push	r5
    3d2e:	6f 92       	push	r6
    3d30:	7f 92       	push	r7
    3d32:	8f 92       	push	r8
    3d34:	9f 92       	push	r9
    3d36:	af 92       	push	r10
    3d38:	cf 92       	push	r12
    3d3a:	ef 92       	push	r14
    3d3c:	ff 92       	push	r15
    3d3e:	0f 93       	push	r16
    3d40:	1f 93       	push	r17
    3d42:	cf 93       	push	r28
    3d44:	df 93       	push	r29
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	f8 2e       	mov	r15, r24
    3d4c:	2a 01       	movw	r4, r20
    3d4e:	3b 01       	movw	r6, r22
    3d50:	88 e0       	ldi	r24, 0x08	; 8
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	9f d7       	rcall	.+3902   	; 0x4c94 <malloc>
    3d56:	8c 01       	movw	r16, r24
    3d58:	8f 2d       	mov	r24, r15
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	fc 01       	movw	r30, r24
    3d5e:	ee 0f       	add	r30, r30
    3d60:	ff 1f       	adc	r31, r31
    3d62:	e9 5c       	subi	r30, 0xC9	; 201
    3d64:	fc 4e       	sbci	r31, 0xEC	; 236
    3d66:	11 83       	std	Z+1, r17	; 0x01
    3d68:	00 83       	st	Z, r16
    3d6a:	01 15       	cp	r16, r1
    3d6c:	11 05       	cpc	r17, r1
    3d6e:	09 f4       	brne	.+2      	; 0x3d72 <serial_create+0x4c>
    3d70:	64 c0       	rjmp	.+200    	; 0x3e3a <serial_create+0x114>
    3d72:	88 0f       	add	r24, r24
    3d74:	99 1f       	adc	r25, r25
    3d76:	fc 01       	movw	r30, r24
    3d78:	e9 5f       	subi	r30, 0xF9	; 249
    3d7a:	fd 4f       	sbci	r31, 0xFD	; 253
    3d7c:	80 81       	ld	r24, Z
    3d7e:	91 81       	ldd	r25, Z+1	; 0x01
    3d80:	d8 01       	movw	r26, r16
    3d82:	8d 93       	st	X+, r24
    3d84:	9c 93       	st	X, r25
    3d86:	6c 2d       	mov	r22, r12
    3d88:	70 e0       	ldi	r23, 0x00	; 0
    3d8a:	84 e0       	ldi	r24, 0x04	; 4
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	68 d7       	rcall	.+3792   	; 0x4c60 <calloc>
    3d90:	1c 01       	movw	r2, r24
    3d92:	61 e0       	ldi	r22, 0x01	; 1
    3d94:	70 e0       	ldi	r23, 0x00	; 0
    3d96:	86 e0       	ldi	r24, 0x06	; 6
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	62 d7       	rcall	.+3780   	; 0x4c60 <calloc>
    3d9c:	7c 01       	movw	r14, r24
    3d9e:	4c 2d       	mov	r20, r12
    3da0:	b1 01       	movw	r22, r2
    3da2:	50 d5       	rcall	.+2720   	; 0x4844 <fifo_init>
    3da4:	f8 01       	movw	r30, r16
    3da6:	f5 82       	std	Z+5, r15	; 0x05
    3da8:	e4 82       	std	Z+4, r14	; 0x04
    3daa:	6a 2d       	mov	r22, r10
    3dac:	70 e0       	ldi	r23, 0x00	; 0
    3dae:	84 e0       	ldi	r24, 0x04	; 4
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	56 d7       	rcall	.+3756   	; 0x4c60 <calloc>
    3db4:	1c 01       	movw	r2, r24
    3db6:	61 e0       	ldi	r22, 0x01	; 1
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	86 e0       	ldi	r24, 0x06	; 6
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	50 d7       	rcall	.+3744   	; 0x4c60 <calloc>
    3dc0:	7c 01       	movw	r14, r24
    3dc2:	4a 2d       	mov	r20, r10
    3dc4:	b1 01       	movw	r22, r2
    3dc6:	3e d5       	rcall	.+2684   	; 0x4844 <fifo_init>
    3dc8:	d8 01       	movw	r26, r16
    3dca:	13 96       	adiw	r26, 0x03	; 3
    3dcc:	fc 92       	st	X, r15
    3dce:	ee 92       	st	-X, r14
    3dd0:	12 97       	sbiw	r26, 0x02	; 2
    3dd2:	17 96       	adiw	r26, 0x07	; 7
    3dd4:	9c 92       	st	X, r9
    3dd6:	8e 92       	st	-X, r8
    3dd8:	16 97       	sbiw	r26, 0x06	; 6
    3dda:	ff b6       	in	r15, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	ed 91       	ld	r30, X+
    3de0:	fc 91       	ld	r31, X
    3de2:	11 97       	sbiw	r26, 0x01	; 1
    3de4:	36 97       	sbiw	r30, 0x06	; 6
    3de6:	80 81       	ld	r24, Z
    3de8:	82 60       	ori	r24, 0x02	; 2
    3dea:	80 83       	st	Z, r24
    3dec:	8d 90       	ld	r8, X+
    3dee:	9c 90       	ld	r9, X
    3df0:	c3 01       	movw	r24, r6
    3df2:	b2 01       	movw	r22, r4
    3df4:	3c d6       	rcall	.+3192   	; 0x4a6e <__floatunsisf>
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	40 e0       	ldi	r20, 0x00	; 0
    3dfc:	51 e4       	ldi	r21, 0x41	; 65
    3dfe:	c5 d6       	rcall	.+3466   	; 0x4b8a <__mulsf3>
    3e00:	9b 01       	movw	r18, r22
    3e02:	ac 01       	movw	r20, r24
    3e04:	60 e0       	ldi	r22, 0x00	; 0
    3e06:	74 e2       	ldi	r23, 0x24	; 36
    3e08:	84 e7       	ldi	r24, 0x74	; 116
    3e0a:	9b e4       	ldi	r25, 0x4B	; 75
    3e0c:	9c d5       	rcall	.+2872   	; 0x4946 <__divsf3>
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	40 e8       	ldi	r20, 0x80	; 128
    3e14:	5f e3       	ldi	r21, 0x3F	; 63
    3e16:	32 d5       	rcall	.+2660   	; 0x487c <__subsf3>
    3e18:	fe d5       	rcall	.+3068   	; 0x4a16 <__fixunssfsi>
    3e1a:	f4 01       	movw	r30, r8
    3e1c:	32 97       	sbiw	r30, 0x02	; 2
    3e1e:	60 83       	st	Z, r22
    3e20:	d8 01       	movw	r26, r16
    3e22:	ed 91       	ld	r30, X+
    3e24:	fc 91       	ld	r31, X
    3e26:	11 97       	sbiw	r26, 0x01	; 1
    3e28:	35 97       	sbiw	r30, 0x05	; 5
    3e2a:	88 e9       	ldi	r24, 0x98	; 152
    3e2c:	80 83       	st	Z, r24
    3e2e:	ed 91       	ld	r30, X+
    3e30:	fc 91       	ld	r31, X
    3e32:	34 97       	sbiw	r30, 0x04	; 4
    3e34:	86 e0       	ldi	r24, 0x06	; 6
    3e36:	80 83       	st	Z, r24
    3e38:	ff be       	out	0x3f, r15	; 63
    3e3a:	c8 01       	movw	r24, r16
    3e3c:	df 91       	pop	r29
    3e3e:	cf 91       	pop	r28
    3e40:	1f 91       	pop	r17
    3e42:	0f 91       	pop	r16
    3e44:	ff 90       	pop	r15
    3e46:	ef 90       	pop	r14
    3e48:	cf 90       	pop	r12
    3e4a:	af 90       	pop	r10
    3e4c:	9f 90       	pop	r9
    3e4e:	8f 90       	pop	r8
    3e50:	7f 90       	pop	r7
    3e52:	6f 90       	pop	r6
    3e54:	5f 90       	pop	r5
    3e56:	4f 90       	pop	r4
    3e58:	3f 90       	pop	r3
    3e5a:	2f 90       	pop	r2
    3e5c:	08 95       	ret

00003e5e <serial_sendByte>:
    3e5e:	cf 93       	push	r28
    3e60:	df 93       	push	r29
    3e62:	dc 01       	movw	r26, r24
    3e64:	89 2b       	or	r24, r25
    3e66:	01 f1       	breq	.+64     	; 0x3ea8 <serial_sendByte+0x4a>
    3e68:	12 96       	adiw	r26, 0x02	; 2
    3e6a:	ed 91       	ld	r30, X+
    3e6c:	fc 91       	ld	r31, X
    3e6e:	13 97       	sbiw	r26, 0x03	; 3
    3e70:	93 81       	ldd	r25, Z+3	; 0x03
    3e72:	82 81       	ldd	r24, Z+2	; 0x02
    3e74:	25 81       	ldd	r18, Z+5	; 0x05
    3e76:	98 1b       	sub	r25, r24
    3e78:	92 23       	and	r25, r18
    3e7a:	84 81       	ldd	r24, Z+4	; 0x04
    3e7c:	98 17       	cp	r25, r24
    3e7e:	b1 f0       	breq	.+44     	; 0x3eac <serial_sendByte+0x4e>
    3e80:	83 81       	ldd	r24, Z+3	; 0x03
    3e82:	26 95       	lsr	r18
    3e84:	28 23       	and	r18, r24
    3e86:	c0 81       	ld	r28, Z
    3e88:	d1 81       	ldd	r29, Z+1	; 0x01
    3e8a:	c2 0f       	add	r28, r18
    3e8c:	d1 1d       	adc	r29, r1
    3e8e:	68 83       	st	Y, r22
    3e90:	8f 5f       	subi	r24, 0xFF	; 255
    3e92:	95 81       	ldd	r25, Z+5	; 0x05
    3e94:	89 23       	and	r24, r25
    3e96:	83 83       	std	Z+3, r24	; 0x03
    3e98:	ed 91       	ld	r30, X+
    3e9a:	fc 91       	ld	r31, X
    3e9c:	35 97       	sbiw	r30, 0x05	; 5
    3e9e:	80 81       	ld	r24, Z
    3ea0:	80 62       	ori	r24, 0x20	; 32
    3ea2:	80 83       	st	Z, r24
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	03 c0       	rjmp	.+6      	; 0x3eae <serial_sendByte+0x50>
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	01 c0       	rjmp	.+2      	; 0x3eae <serial_sendByte+0x50>
    3eac:	82 e0       	ldi	r24, 0x02	; 2
    3eae:	df 91       	pop	r29
    3eb0:	cf 91       	pop	r28
    3eb2:	08 95       	ret

00003eb4 <serial_sendBytes>:
    3eb4:	ef 92       	push	r14
    3eb6:	ff 92       	push	r15
    3eb8:	0f 93       	push	r16
    3eba:	1f 93       	push	r17
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	7c 01       	movw	r14, r24
    3ec2:	00 97       	sbiw	r24, 0x00	; 0
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <serial_sendBytes+0x14>
    3ec6:	41 c0       	rjmp	.+130    	; 0x3f4a <serial_sendBytes+0x96>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	12 96       	adiw	r26, 0x02	; 2
    3ecc:	ed 91       	ld	r30, X+
    3ece:	fc 91       	ld	r31, X
    3ed0:	13 97       	sbiw	r26, 0x03	; 3
    3ed2:	93 81       	ldd	r25, Z+3	; 0x03
    3ed4:	82 81       	ldd	r24, Z+2	; 0x02
    3ed6:	98 1b       	sub	r25, r24
    3ed8:	85 81       	ldd	r24, Z+5	; 0x05
    3eda:	98 23       	and	r25, r24
    3edc:	84 81       	ldd	r24, Z+4	; 0x04
    3ede:	89 1b       	sub	r24, r25
    3ee0:	86 17       	cp	r24, r22
    3ee2:	a8 f1       	brcs	.+106    	; 0x3f4e <serial_sendBytes+0x9a>
    3ee4:	66 23       	and	r22, r22
    3ee6:	41 f1       	breq	.+80     	; 0x3f38 <serial_sendBytes+0x84>
    3ee8:	84 2f       	mov	r24, r20
    3eea:	95 2f       	mov	r25, r21
    3eec:	dc 01       	movw	r26, r24
    3eee:	61 50       	subi	r22, 0x01	; 1
    3ef0:	46 2f       	mov	r20, r22
    3ef2:	50 e0       	ldi	r21, 0x00	; 0
    3ef4:	4f 5f       	subi	r20, 0xFF	; 255
    3ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ef8:	48 0f       	add	r20, r24
    3efa:	59 1f       	adc	r21, r25
    3efc:	e7 01       	movw	r28, r14
    3efe:	ea 81       	ldd	r30, Y+2	; 0x02
    3f00:	fb 81       	ldd	r31, Y+3	; 0x03
    3f02:	93 81       	ldd	r25, Z+3	; 0x03
    3f04:	82 81       	ldd	r24, Z+2	; 0x02
    3f06:	25 81       	ldd	r18, Z+5	; 0x05
    3f08:	98 1b       	sub	r25, r24
    3f0a:	92 23       	and	r25, r18
    3f0c:	84 81       	ldd	r24, Z+4	; 0x04
    3f0e:	98 17       	cp	r25, r24
    3f10:	79 f0       	breq	.+30     	; 0x3f30 <serial_sendBytes+0x7c>
    3f12:	8c 91       	ld	r24, X
    3f14:	93 81       	ldd	r25, Z+3	; 0x03
    3f16:	26 95       	lsr	r18
    3f18:	29 23       	and	r18, r25
    3f1a:	60 81       	ld	r22, Z
    3f1c:	71 81       	ldd	r23, Z+1	; 0x01
    3f1e:	8b 01       	movw	r16, r22
    3f20:	02 0f       	add	r16, r18
    3f22:	11 1d       	adc	r17, r1
    3f24:	e8 01       	movw	r28, r16
    3f26:	88 83       	st	Y, r24
    3f28:	9f 5f       	subi	r25, 0xFF	; 255
    3f2a:	85 81       	ldd	r24, Z+5	; 0x05
    3f2c:	98 23       	and	r25, r24
    3f2e:	93 83       	std	Z+3, r25	; 0x03
    3f30:	11 96       	adiw	r26, 0x01	; 1
    3f32:	a4 17       	cp	r26, r20
    3f34:	b5 07       	cpc	r27, r21
    3f36:	11 f7       	brne	.-60     	; 0x3efc <serial_sendBytes+0x48>
    3f38:	d7 01       	movw	r26, r14
    3f3a:	ed 91       	ld	r30, X+
    3f3c:	fc 91       	ld	r31, X
    3f3e:	35 97       	sbiw	r30, 0x05	; 5
    3f40:	80 81       	ld	r24, Z
    3f42:	80 62       	ori	r24, 0x20	; 32
    3f44:	80 83       	st	Z, r24
    3f46:	80 e0       	ldi	r24, 0x00	; 0
    3f48:	03 c0       	rjmp	.+6      	; 0x3f50 <serial_sendBytes+0x9c>
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	01 c0       	rjmp	.+2      	; 0x3f50 <serial_sendBytes+0x9c>
    3f4e:	82 e0       	ldi	r24, 0x02	; 2
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	0f 91       	pop	r16
    3f58:	ff 90       	pop	r15
    3f5a:	ef 90       	pop	r14
    3f5c:	08 95       	ret

00003f5e <serial_getByte>:
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	d1 f0       	breq	.+52     	; 0x3f96 <serial_getByte+0x38>
    3f62:	dc 01       	movw	r26, r24
    3f64:	14 96       	adiw	r26, 0x04	; 4
    3f66:	ed 91       	ld	r30, X+
    3f68:	fc 91       	ld	r31, X
    3f6a:	15 97       	sbiw	r26, 0x05	; 5
    3f6c:	93 81       	ldd	r25, Z+3	; 0x03
    3f6e:	82 81       	ldd	r24, Z+2	; 0x02
    3f70:	98 17       	cp	r25, r24
    3f72:	99 f0       	breq	.+38     	; 0x3f9a <serial_getByte+0x3c>
    3f74:	92 81       	ldd	r25, Z+2	; 0x02
    3f76:	85 81       	ldd	r24, Z+5	; 0x05
    3f78:	86 95       	lsr	r24
    3f7a:	89 23       	and	r24, r25
    3f7c:	a0 81       	ld	r26, Z
    3f7e:	b1 81       	ldd	r27, Z+1	; 0x01
    3f80:	a8 0f       	add	r26, r24
    3f82:	b1 1d       	adc	r27, r1
    3f84:	8c 91       	ld	r24, X
    3f86:	db 01       	movw	r26, r22
    3f88:	8c 93       	st	X, r24
    3f8a:	9f 5f       	subi	r25, 0xFF	; 255
    3f8c:	85 81       	ldd	r24, Z+5	; 0x05
    3f8e:	98 23       	and	r25, r24
    3f90:	92 83       	std	Z+2, r25	; 0x02
    3f92:	80 e0       	ldi	r24, 0x00	; 0
    3f94:	08 95       	ret
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	08 95       	ret
    3f9a:	83 e0       	ldi	r24, 0x03	; 3
    3f9c:	08 95       	ret

00003f9e <__vector_25>:
    3f9e:	1f 92       	push	r1
    3fa0:	0f 92       	push	r0
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	0f 92       	push	r0
    3fa6:	11 24       	eor	r1, r1
    3fa8:	0b b6       	in	r0, 0x3b	; 59
    3faa:	0f 92       	push	r0
    3fac:	2f 93       	push	r18
    3fae:	3f 93       	push	r19
    3fb0:	4f 93       	push	r20
    3fb2:	5f 93       	push	r21
    3fb4:	6f 93       	push	r22
    3fb6:	7f 93       	push	r23
    3fb8:	8f 93       	push	r24
    3fba:	9f 93       	push	r25
    3fbc:	af 93       	push	r26
    3fbe:	bf 93       	push	r27
    3fc0:	cf 93       	push	r28
    3fc2:	df 93       	push	r29
    3fc4:	ef 93       	push	r30
    3fc6:	ff 93       	push	r31
    3fc8:	a0 91 37 13 	lds	r26, 0x1337	; 0x801337 <_ser_handle>
    3fcc:	b0 91 38 13 	lds	r27, 0x1338	; 0x801338 <_ser_handle+0x1>
    3fd0:	10 97       	sbiw	r26, 0x00	; 0
    3fd2:	11 f1       	breq	.+68     	; 0x4018 <__vector_25+0x7a>
    3fd4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3fd8:	14 96       	adiw	r26, 0x04	; 4
    3fda:	ed 91       	ld	r30, X+
    3fdc:	fc 91       	ld	r31, X
    3fde:	15 97       	sbiw	r26, 0x05	; 5
    3fe0:	93 81       	ldd	r25, Z+3	; 0x03
    3fe2:	82 81       	ldd	r24, Z+2	; 0x02
    3fe4:	25 81       	ldd	r18, Z+5	; 0x05
    3fe6:	98 1b       	sub	r25, r24
    3fe8:	92 23       	and	r25, r18
    3fea:	84 81       	ldd	r24, Z+4	; 0x04
    3fec:	98 17       	cp	r25, r24
    3fee:	61 f0       	breq	.+24     	; 0x4008 <__vector_25+0x6a>
    3ff0:	83 81       	ldd	r24, Z+3	; 0x03
    3ff2:	26 95       	lsr	r18
    3ff4:	28 23       	and	r18, r24
    3ff6:	c0 81       	ld	r28, Z
    3ff8:	d1 81       	ldd	r29, Z+1	; 0x01
    3ffa:	c2 0f       	add	r28, r18
    3ffc:	d1 1d       	adc	r29, r1
    3ffe:	68 83       	st	Y, r22
    4000:	8f 5f       	subi	r24, 0xFF	; 255
    4002:	95 81       	ldd	r25, Z+5	; 0x05
    4004:	89 23       	and	r24, r25
    4006:	83 83       	std	Z+3, r24	; 0x03
    4008:	16 96       	adiw	r26, 0x06	; 6
    400a:	ed 91       	ld	r30, X+
    400c:	fc 91       	ld	r31, X
    400e:	17 97       	sbiw	r26, 0x07	; 7
    4010:	30 97       	sbiw	r30, 0x00	; 0
    4012:	11 f0       	breq	.+4      	; 0x4018 <__vector_25+0x7a>
    4014:	cd 01       	movw	r24, r26
    4016:	19 95       	eicall
    4018:	ff 91       	pop	r31
    401a:	ef 91       	pop	r30
    401c:	df 91       	pop	r29
    401e:	cf 91       	pop	r28
    4020:	bf 91       	pop	r27
    4022:	af 91       	pop	r26
    4024:	9f 91       	pop	r25
    4026:	8f 91       	pop	r24
    4028:	7f 91       	pop	r23
    402a:	6f 91       	pop	r22
    402c:	5f 91       	pop	r21
    402e:	4f 91       	pop	r20
    4030:	3f 91       	pop	r19
    4032:	2f 91       	pop	r18
    4034:	0f 90       	pop	r0
    4036:	0b be       	out	0x3b, r0	; 59
    4038:	0f 90       	pop	r0
    403a:	0f be       	out	0x3f, r0	; 63
    403c:	0f 90       	pop	r0
    403e:	1f 90       	pop	r1
    4040:	18 95       	reti

00004042 <__vector_26>:
    4042:	1f 92       	push	r1
    4044:	0f 92       	push	r0
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	0f 92       	push	r0
    404a:	11 24       	eor	r1, r1
    404c:	0b b6       	in	r0, 0x3b	; 59
    404e:	0f 92       	push	r0
    4050:	2f 93       	push	r18
    4052:	8f 93       	push	r24
    4054:	9f 93       	push	r25
    4056:	af 93       	push	r26
    4058:	bf 93       	push	r27
    405a:	ef 93       	push	r30
    405c:	ff 93       	push	r31
    405e:	e0 91 37 13 	lds	r30, 0x1337	; 0x801337 <_ser_handle>
    4062:	f0 91 38 13 	lds	r31, 0x1338	; 0x801338 <_ser_handle+0x1>
    4066:	30 97       	sbiw	r30, 0x00	; 0
    4068:	b9 f0       	breq	.+46     	; 0x4098 <__vector_26+0x56>
    406a:	02 80       	ldd	r0, Z+2	; 0x02
    406c:	f3 81       	ldd	r31, Z+3	; 0x03
    406e:	e0 2d       	mov	r30, r0
    4070:	93 81       	ldd	r25, Z+3	; 0x03
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	98 17       	cp	r25, r24
    4076:	b1 f0       	breq	.+44     	; 0x40a4 <__vector_26+0x62>
    4078:	92 81       	ldd	r25, Z+2	; 0x02
    407a:	85 81       	ldd	r24, Z+5	; 0x05
    407c:	28 2f       	mov	r18, r24
    407e:	26 95       	lsr	r18
    4080:	29 23       	and	r18, r25
    4082:	a0 81       	ld	r26, Z
    4084:	b1 81       	ldd	r27, Z+1	; 0x01
    4086:	a2 0f       	add	r26, r18
    4088:	b1 1d       	adc	r27, r1
    408a:	2c 91       	ld	r18, X
    408c:	9f 5f       	subi	r25, 0xFF	; 255
    408e:	89 23       	and	r24, r25
    4090:	82 83       	std	Z+2, r24	; 0x02
    4092:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4096:	0b c0       	rjmp	.+22     	; 0x40ae <__vector_26+0x6c>
    4098:	e1 ec       	ldi	r30, 0xC1	; 193
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	80 81       	ld	r24, Z
    409e:	8f 7d       	andi	r24, 0xDF	; 223
    40a0:	80 83       	st	Z, r24
    40a2:	05 c0       	rjmp	.+10     	; 0x40ae <__vector_26+0x6c>
    40a4:	e1 ec       	ldi	r30, 0xC1	; 193
    40a6:	f0 e0       	ldi	r31, 0x00	; 0
    40a8:	80 81       	ld	r24, Z
    40aa:	8f 7d       	andi	r24, 0xDF	; 223
    40ac:	80 83       	st	Z, r24
    40ae:	ff 91       	pop	r31
    40b0:	ef 91       	pop	r30
    40b2:	bf 91       	pop	r27
    40b4:	af 91       	pop	r26
    40b6:	9f 91       	pop	r25
    40b8:	8f 91       	pop	r24
    40ba:	2f 91       	pop	r18
    40bc:	0f 90       	pop	r0
    40be:	0b be       	out	0x3b, r0	; 59
    40c0:	0f 90       	pop	r0
    40c2:	0f be       	out	0x3f, r0	; 63
    40c4:	0f 90       	pop	r0
    40c6:	1f 90       	pop	r1
    40c8:	18 95       	reti

000040ca <__vector_36>:
    40ca:	1f 92       	push	r1
    40cc:	0f 92       	push	r0
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	0f 92       	push	r0
    40d2:	11 24       	eor	r1, r1
    40d4:	0b b6       	in	r0, 0x3b	; 59
    40d6:	0f 92       	push	r0
    40d8:	2f 93       	push	r18
    40da:	3f 93       	push	r19
    40dc:	4f 93       	push	r20
    40de:	5f 93       	push	r21
    40e0:	6f 93       	push	r22
    40e2:	7f 93       	push	r23
    40e4:	8f 93       	push	r24
    40e6:	9f 93       	push	r25
    40e8:	af 93       	push	r26
    40ea:	bf 93       	push	r27
    40ec:	cf 93       	push	r28
    40ee:	df 93       	push	r29
    40f0:	ef 93       	push	r30
    40f2:	ff 93       	push	r31
    40f4:	a0 91 39 13 	lds	r26, 0x1339	; 0x801339 <_ser_handle+0x2>
    40f8:	b0 91 3a 13 	lds	r27, 0x133A	; 0x80133a <_ser_handle+0x3>
    40fc:	10 97       	sbiw	r26, 0x00	; 0
    40fe:	11 f1       	breq	.+68     	; 0x4144 <__vector_36+0x7a>
    4100:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4104:	14 96       	adiw	r26, 0x04	; 4
    4106:	ed 91       	ld	r30, X+
    4108:	fc 91       	ld	r31, X
    410a:	15 97       	sbiw	r26, 0x05	; 5
    410c:	93 81       	ldd	r25, Z+3	; 0x03
    410e:	82 81       	ldd	r24, Z+2	; 0x02
    4110:	25 81       	ldd	r18, Z+5	; 0x05
    4112:	98 1b       	sub	r25, r24
    4114:	92 23       	and	r25, r18
    4116:	84 81       	ldd	r24, Z+4	; 0x04
    4118:	98 17       	cp	r25, r24
    411a:	61 f0       	breq	.+24     	; 0x4134 <__vector_36+0x6a>
    411c:	83 81       	ldd	r24, Z+3	; 0x03
    411e:	26 95       	lsr	r18
    4120:	28 23       	and	r18, r24
    4122:	c0 81       	ld	r28, Z
    4124:	d1 81       	ldd	r29, Z+1	; 0x01
    4126:	c2 0f       	add	r28, r18
    4128:	d1 1d       	adc	r29, r1
    412a:	68 83       	st	Y, r22
    412c:	8f 5f       	subi	r24, 0xFF	; 255
    412e:	95 81       	ldd	r25, Z+5	; 0x05
    4130:	89 23       	and	r24, r25
    4132:	83 83       	std	Z+3, r24	; 0x03
    4134:	16 96       	adiw	r26, 0x06	; 6
    4136:	ed 91       	ld	r30, X+
    4138:	fc 91       	ld	r31, X
    413a:	17 97       	sbiw	r26, 0x07	; 7
    413c:	30 97       	sbiw	r30, 0x00	; 0
    413e:	11 f0       	breq	.+4      	; 0x4144 <__vector_36+0x7a>
    4140:	cd 01       	movw	r24, r26
    4142:	19 95       	eicall
    4144:	ff 91       	pop	r31
    4146:	ef 91       	pop	r30
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	bf 91       	pop	r27
    414e:	af 91       	pop	r26
    4150:	9f 91       	pop	r25
    4152:	8f 91       	pop	r24
    4154:	7f 91       	pop	r23
    4156:	6f 91       	pop	r22
    4158:	5f 91       	pop	r21
    415a:	4f 91       	pop	r20
    415c:	3f 91       	pop	r19
    415e:	2f 91       	pop	r18
    4160:	0f 90       	pop	r0
    4162:	0b be       	out	0x3b, r0	; 59
    4164:	0f 90       	pop	r0
    4166:	0f be       	out	0x3f, r0	; 63
    4168:	0f 90       	pop	r0
    416a:	1f 90       	pop	r1
    416c:	18 95       	reti

0000416e <__vector_37>:
    416e:	1f 92       	push	r1
    4170:	0f 92       	push	r0
    4172:	0f b6       	in	r0, 0x3f	; 63
    4174:	0f 92       	push	r0
    4176:	11 24       	eor	r1, r1
    4178:	0b b6       	in	r0, 0x3b	; 59
    417a:	0f 92       	push	r0
    417c:	2f 93       	push	r18
    417e:	8f 93       	push	r24
    4180:	9f 93       	push	r25
    4182:	af 93       	push	r26
    4184:	bf 93       	push	r27
    4186:	ef 93       	push	r30
    4188:	ff 93       	push	r31
    418a:	e0 91 39 13 	lds	r30, 0x1339	; 0x801339 <_ser_handle+0x2>
    418e:	f0 91 3a 13 	lds	r31, 0x133A	; 0x80133a <_ser_handle+0x3>
    4192:	30 97       	sbiw	r30, 0x00	; 0
    4194:	b9 f0       	breq	.+46     	; 0x41c4 <__vector_37+0x56>
    4196:	02 80       	ldd	r0, Z+2	; 0x02
    4198:	f3 81       	ldd	r31, Z+3	; 0x03
    419a:	e0 2d       	mov	r30, r0
    419c:	93 81       	ldd	r25, Z+3	; 0x03
    419e:	82 81       	ldd	r24, Z+2	; 0x02
    41a0:	98 17       	cp	r25, r24
    41a2:	b1 f0       	breq	.+44     	; 0x41d0 <__vector_37+0x62>
    41a4:	92 81       	ldd	r25, Z+2	; 0x02
    41a6:	85 81       	ldd	r24, Z+5	; 0x05
    41a8:	28 2f       	mov	r18, r24
    41aa:	26 95       	lsr	r18
    41ac:	29 23       	and	r18, r25
    41ae:	a0 81       	ld	r26, Z
    41b0:	b1 81       	ldd	r27, Z+1	; 0x01
    41b2:	a2 0f       	add	r26, r18
    41b4:	b1 1d       	adc	r27, r1
    41b6:	2c 91       	ld	r18, X
    41b8:	9f 5f       	subi	r25, 0xFF	; 255
    41ba:	89 23       	and	r24, r25
    41bc:	82 83       	std	Z+2, r24	; 0x02
    41be:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    41c2:	0b c0       	rjmp	.+22     	; 0x41da <__vector_37+0x6c>
    41c4:	e9 ec       	ldi	r30, 0xC9	; 201
    41c6:	f0 e0       	ldi	r31, 0x00	; 0
    41c8:	80 81       	ld	r24, Z
    41ca:	8f 7d       	andi	r24, 0xDF	; 223
    41cc:	80 83       	st	Z, r24
    41ce:	05 c0       	rjmp	.+10     	; 0x41da <__vector_37+0x6c>
    41d0:	e9 ec       	ldi	r30, 0xC9	; 201
    41d2:	f0 e0       	ldi	r31, 0x00	; 0
    41d4:	80 81       	ld	r24, Z
    41d6:	8f 7d       	andi	r24, 0xDF	; 223
    41d8:	80 83       	st	Z, r24
    41da:	ff 91       	pop	r31
    41dc:	ef 91       	pop	r30
    41de:	bf 91       	pop	r27
    41e0:	af 91       	pop	r26
    41e2:	9f 91       	pop	r25
    41e4:	8f 91       	pop	r24
    41e6:	2f 91       	pop	r18
    41e8:	0f 90       	pop	r0
    41ea:	0b be       	out	0x3b, r0	; 59
    41ec:	0f 90       	pop	r0
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	0f 90       	pop	r0
    41f2:	1f 90       	pop	r1
    41f4:	18 95       	reti

000041f6 <__vector_51>:
    41f6:	1f 92       	push	r1
    41f8:	0f 92       	push	r0
    41fa:	0f b6       	in	r0, 0x3f	; 63
    41fc:	0f 92       	push	r0
    41fe:	11 24       	eor	r1, r1
    4200:	0b b6       	in	r0, 0x3b	; 59
    4202:	0f 92       	push	r0
    4204:	2f 93       	push	r18
    4206:	3f 93       	push	r19
    4208:	4f 93       	push	r20
    420a:	5f 93       	push	r21
    420c:	6f 93       	push	r22
    420e:	7f 93       	push	r23
    4210:	8f 93       	push	r24
    4212:	9f 93       	push	r25
    4214:	af 93       	push	r26
    4216:	bf 93       	push	r27
    4218:	cf 93       	push	r28
    421a:	df 93       	push	r29
    421c:	ef 93       	push	r30
    421e:	ff 93       	push	r31
    4220:	a0 91 3b 13 	lds	r26, 0x133B	; 0x80133b <_ser_handle+0x4>
    4224:	b0 91 3c 13 	lds	r27, 0x133C	; 0x80133c <_ser_handle+0x5>
    4228:	10 97       	sbiw	r26, 0x00	; 0
    422a:	11 f1       	breq	.+68     	; 0x4270 <__vector_51+0x7a>
    422c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4230:	14 96       	adiw	r26, 0x04	; 4
    4232:	ed 91       	ld	r30, X+
    4234:	fc 91       	ld	r31, X
    4236:	15 97       	sbiw	r26, 0x05	; 5
    4238:	93 81       	ldd	r25, Z+3	; 0x03
    423a:	82 81       	ldd	r24, Z+2	; 0x02
    423c:	25 81       	ldd	r18, Z+5	; 0x05
    423e:	98 1b       	sub	r25, r24
    4240:	92 23       	and	r25, r18
    4242:	84 81       	ldd	r24, Z+4	; 0x04
    4244:	98 17       	cp	r25, r24
    4246:	61 f0       	breq	.+24     	; 0x4260 <__vector_51+0x6a>
    4248:	83 81       	ldd	r24, Z+3	; 0x03
    424a:	26 95       	lsr	r18
    424c:	28 23       	and	r18, r24
    424e:	c0 81       	ld	r28, Z
    4250:	d1 81       	ldd	r29, Z+1	; 0x01
    4252:	c2 0f       	add	r28, r18
    4254:	d1 1d       	adc	r29, r1
    4256:	68 83       	st	Y, r22
    4258:	8f 5f       	subi	r24, 0xFF	; 255
    425a:	95 81       	ldd	r25, Z+5	; 0x05
    425c:	89 23       	and	r24, r25
    425e:	83 83       	std	Z+3, r24	; 0x03
    4260:	16 96       	adiw	r26, 0x06	; 6
    4262:	ed 91       	ld	r30, X+
    4264:	fc 91       	ld	r31, X
    4266:	17 97       	sbiw	r26, 0x07	; 7
    4268:	30 97       	sbiw	r30, 0x00	; 0
    426a:	11 f0       	breq	.+4      	; 0x4270 <__vector_51+0x7a>
    426c:	cd 01       	movw	r24, r26
    426e:	19 95       	eicall
    4270:	ff 91       	pop	r31
    4272:	ef 91       	pop	r30
    4274:	df 91       	pop	r29
    4276:	cf 91       	pop	r28
    4278:	bf 91       	pop	r27
    427a:	af 91       	pop	r26
    427c:	9f 91       	pop	r25
    427e:	8f 91       	pop	r24
    4280:	7f 91       	pop	r23
    4282:	6f 91       	pop	r22
    4284:	5f 91       	pop	r21
    4286:	4f 91       	pop	r20
    4288:	3f 91       	pop	r19
    428a:	2f 91       	pop	r18
    428c:	0f 90       	pop	r0
    428e:	0b be       	out	0x3b, r0	; 59
    4290:	0f 90       	pop	r0
    4292:	0f be       	out	0x3f, r0	; 63
    4294:	0f 90       	pop	r0
    4296:	1f 90       	pop	r1
    4298:	18 95       	reti

0000429a <__vector_52>:
    429a:	1f 92       	push	r1
    429c:	0f 92       	push	r0
    429e:	0f b6       	in	r0, 0x3f	; 63
    42a0:	0f 92       	push	r0
    42a2:	11 24       	eor	r1, r1
    42a4:	0b b6       	in	r0, 0x3b	; 59
    42a6:	0f 92       	push	r0
    42a8:	2f 93       	push	r18
    42aa:	8f 93       	push	r24
    42ac:	9f 93       	push	r25
    42ae:	af 93       	push	r26
    42b0:	bf 93       	push	r27
    42b2:	ef 93       	push	r30
    42b4:	ff 93       	push	r31
    42b6:	e0 91 3b 13 	lds	r30, 0x133B	; 0x80133b <_ser_handle+0x4>
    42ba:	f0 91 3c 13 	lds	r31, 0x133C	; 0x80133c <_ser_handle+0x5>
    42be:	30 97       	sbiw	r30, 0x00	; 0
    42c0:	b9 f0       	breq	.+46     	; 0x42f0 <__vector_52+0x56>
    42c2:	02 80       	ldd	r0, Z+2	; 0x02
    42c4:	f3 81       	ldd	r31, Z+3	; 0x03
    42c6:	e0 2d       	mov	r30, r0
    42c8:	93 81       	ldd	r25, Z+3	; 0x03
    42ca:	82 81       	ldd	r24, Z+2	; 0x02
    42cc:	98 17       	cp	r25, r24
    42ce:	b1 f0       	breq	.+44     	; 0x42fc <__vector_52+0x62>
    42d0:	92 81       	ldd	r25, Z+2	; 0x02
    42d2:	85 81       	ldd	r24, Z+5	; 0x05
    42d4:	28 2f       	mov	r18, r24
    42d6:	26 95       	lsr	r18
    42d8:	29 23       	and	r18, r25
    42da:	a0 81       	ld	r26, Z
    42dc:	b1 81       	ldd	r27, Z+1	; 0x01
    42de:	a2 0f       	add	r26, r18
    42e0:	b1 1d       	adc	r27, r1
    42e2:	2c 91       	ld	r18, X
    42e4:	9f 5f       	subi	r25, 0xFF	; 255
    42e6:	89 23       	and	r24, r25
    42e8:	82 83       	std	Z+2, r24	; 0x02
    42ea:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    42ee:	0b c0       	rjmp	.+22     	; 0x4306 <__vector_52+0x6c>
    42f0:	e1 ed       	ldi	r30, 0xD1	; 209
    42f2:	f0 e0       	ldi	r31, 0x00	; 0
    42f4:	80 81       	ld	r24, Z
    42f6:	8f 7d       	andi	r24, 0xDF	; 223
    42f8:	80 83       	st	Z, r24
    42fa:	05 c0       	rjmp	.+10     	; 0x4306 <__vector_52+0x6c>
    42fc:	e1 ed       	ldi	r30, 0xD1	; 209
    42fe:	f0 e0       	ldi	r31, 0x00	; 0
    4300:	80 81       	ld	r24, Z
    4302:	8f 7d       	andi	r24, 0xDF	; 223
    4304:	80 83       	st	Z, r24
    4306:	ff 91       	pop	r31
    4308:	ef 91       	pop	r30
    430a:	bf 91       	pop	r27
    430c:	af 91       	pop	r26
    430e:	9f 91       	pop	r25
    4310:	8f 91       	pop	r24
    4312:	2f 91       	pop	r18
    4314:	0f 90       	pop	r0
    4316:	0b be       	out	0x3b, r0	; 59
    4318:	0f 90       	pop	r0
    431a:	0f be       	out	0x3f, r0	; 63
    431c:	0f 90       	pop	r0
    431e:	1f 90       	pop	r1
    4320:	18 95       	reti

00004322 <__vector_54>:
    4322:	1f 92       	push	r1
    4324:	0f 92       	push	r0
    4326:	0f b6       	in	r0, 0x3f	; 63
    4328:	0f 92       	push	r0
    432a:	11 24       	eor	r1, r1
    432c:	0b b6       	in	r0, 0x3b	; 59
    432e:	0f 92       	push	r0
    4330:	2f 93       	push	r18
    4332:	3f 93       	push	r19
    4334:	4f 93       	push	r20
    4336:	5f 93       	push	r21
    4338:	6f 93       	push	r22
    433a:	7f 93       	push	r23
    433c:	8f 93       	push	r24
    433e:	9f 93       	push	r25
    4340:	af 93       	push	r26
    4342:	bf 93       	push	r27
    4344:	cf 93       	push	r28
    4346:	df 93       	push	r29
    4348:	ef 93       	push	r30
    434a:	ff 93       	push	r31
    434c:	a0 91 3d 13 	lds	r26, 0x133D	; 0x80133d <_ser_handle+0x6>
    4350:	b0 91 3e 13 	lds	r27, 0x133E	; 0x80133e <_ser_handle+0x7>
    4354:	10 97       	sbiw	r26, 0x00	; 0
    4356:	11 f1       	breq	.+68     	; 0x439c <__vector_54+0x7a>
    4358:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    435c:	14 96       	adiw	r26, 0x04	; 4
    435e:	ed 91       	ld	r30, X+
    4360:	fc 91       	ld	r31, X
    4362:	15 97       	sbiw	r26, 0x05	; 5
    4364:	93 81       	ldd	r25, Z+3	; 0x03
    4366:	82 81       	ldd	r24, Z+2	; 0x02
    4368:	25 81       	ldd	r18, Z+5	; 0x05
    436a:	98 1b       	sub	r25, r24
    436c:	92 23       	and	r25, r18
    436e:	84 81       	ldd	r24, Z+4	; 0x04
    4370:	98 17       	cp	r25, r24
    4372:	61 f0       	breq	.+24     	; 0x438c <__vector_54+0x6a>
    4374:	83 81       	ldd	r24, Z+3	; 0x03
    4376:	26 95       	lsr	r18
    4378:	28 23       	and	r18, r24
    437a:	c0 81       	ld	r28, Z
    437c:	d1 81       	ldd	r29, Z+1	; 0x01
    437e:	c2 0f       	add	r28, r18
    4380:	d1 1d       	adc	r29, r1
    4382:	68 83       	st	Y, r22
    4384:	8f 5f       	subi	r24, 0xFF	; 255
    4386:	95 81       	ldd	r25, Z+5	; 0x05
    4388:	89 23       	and	r24, r25
    438a:	83 83       	std	Z+3, r24	; 0x03
    438c:	16 96       	adiw	r26, 0x06	; 6
    438e:	ed 91       	ld	r30, X+
    4390:	fc 91       	ld	r31, X
    4392:	17 97       	sbiw	r26, 0x07	; 7
    4394:	30 97       	sbiw	r30, 0x00	; 0
    4396:	11 f0       	breq	.+4      	; 0x439c <__vector_54+0x7a>
    4398:	cd 01       	movw	r24, r26
    439a:	19 95       	eicall
    439c:	ff 91       	pop	r31
    439e:	ef 91       	pop	r30
    43a0:	df 91       	pop	r29
    43a2:	cf 91       	pop	r28
    43a4:	bf 91       	pop	r27
    43a6:	af 91       	pop	r26
    43a8:	9f 91       	pop	r25
    43aa:	8f 91       	pop	r24
    43ac:	7f 91       	pop	r23
    43ae:	6f 91       	pop	r22
    43b0:	5f 91       	pop	r21
    43b2:	4f 91       	pop	r20
    43b4:	3f 91       	pop	r19
    43b6:	2f 91       	pop	r18
    43b8:	0f 90       	pop	r0
    43ba:	0b be       	out	0x3b, r0	; 59
    43bc:	0f 90       	pop	r0
    43be:	0f be       	out	0x3f, r0	; 63
    43c0:	0f 90       	pop	r0
    43c2:	1f 90       	pop	r1
    43c4:	18 95       	reti

000043c6 <__vector_55>:
    43c6:	1f 92       	push	r1
    43c8:	0f 92       	push	r0
    43ca:	0f b6       	in	r0, 0x3f	; 63
    43cc:	0f 92       	push	r0
    43ce:	11 24       	eor	r1, r1
    43d0:	0b b6       	in	r0, 0x3b	; 59
    43d2:	0f 92       	push	r0
    43d4:	2f 93       	push	r18
    43d6:	8f 93       	push	r24
    43d8:	9f 93       	push	r25
    43da:	af 93       	push	r26
    43dc:	bf 93       	push	r27
    43de:	ef 93       	push	r30
    43e0:	ff 93       	push	r31
    43e2:	e0 91 3d 13 	lds	r30, 0x133D	; 0x80133d <_ser_handle+0x6>
    43e6:	f0 91 3e 13 	lds	r31, 0x133E	; 0x80133e <_ser_handle+0x7>
    43ea:	30 97       	sbiw	r30, 0x00	; 0
    43ec:	b9 f0       	breq	.+46     	; 0x441c <__vector_55+0x56>
    43ee:	02 80       	ldd	r0, Z+2	; 0x02
    43f0:	f3 81       	ldd	r31, Z+3	; 0x03
    43f2:	e0 2d       	mov	r30, r0
    43f4:	93 81       	ldd	r25, Z+3	; 0x03
    43f6:	82 81       	ldd	r24, Z+2	; 0x02
    43f8:	98 17       	cp	r25, r24
    43fa:	b1 f0       	breq	.+44     	; 0x4428 <__vector_55+0x62>
    43fc:	92 81       	ldd	r25, Z+2	; 0x02
    43fe:	85 81       	ldd	r24, Z+5	; 0x05
    4400:	28 2f       	mov	r18, r24
    4402:	26 95       	lsr	r18
    4404:	29 23       	and	r18, r25
    4406:	a0 81       	ld	r26, Z
    4408:	b1 81       	ldd	r27, Z+1	; 0x01
    440a:	a2 0f       	add	r26, r18
    440c:	b1 1d       	adc	r27, r1
    440e:	2c 91       	ld	r18, X
    4410:	9f 5f       	subi	r25, 0xFF	; 255
    4412:	89 23       	and	r24, r25
    4414:	82 83       	std	Z+2, r24	; 0x02
    4416:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    441a:	0b c0       	rjmp	.+22     	; 0x4432 <__vector_55+0x6c>
    441c:	e1 e3       	ldi	r30, 0x31	; 49
    441e:	f1 e0       	ldi	r31, 0x01	; 1
    4420:	80 81       	ld	r24, Z
    4422:	8f 7d       	andi	r24, 0xDF	; 223
    4424:	80 83       	st	Z, r24
    4426:	05 c0       	rjmp	.+10     	; 0x4432 <__vector_55+0x6c>
    4428:	e1 e3       	ldi	r30, 0x31	; 49
    442a:	f1 e0       	ldi	r31, 0x01	; 1
    442c:	80 81       	ld	r24, Z
    442e:	8f 7d       	andi	r24, 0xDF	; 223
    4430:	80 83       	st	Z, r24
    4432:	ff 91       	pop	r31
    4434:	ef 91       	pop	r30
    4436:	bf 91       	pop	r27
    4438:	af 91       	pop	r26
    443a:	9f 91       	pop	r25
    443c:	8f 91       	pop	r24
    443e:	2f 91       	pop	r18
    4440:	0f 90       	pop	r0
    4442:	0b be       	out	0x3b, r0	; 59
    4444:	0f 90       	pop	r0
    4446:	0f be       	out	0x3f, r0	; 63
    4448:	0f 90       	pop	r0
    444a:	1f 90       	pop	r1
    444c:	18 95       	reti

0000444e <usart_getchar>:
    444e:	cf 93       	push	r28
    4450:	df 93       	push	r29
    4452:	1f 92       	push	r1
    4454:	cd b7       	in	r28, 0x3d	; 61
    4456:	de b7       	in	r29, 0x3e	; 62
    4458:	be 01       	movw	r22, r28
    445a:	6f 5f       	subi	r22, 0xFF	; 255
    445c:	7f 4f       	sbci	r23, 0xFF	; 255
    445e:	80 91 3f 13 	lds	r24, 0x133F	; 0x80133f <_com_serial_instance>
    4462:	90 91 40 13 	lds	r25, 0x1340	; 0x801340 <_com_serial_instance+0x1>
    4466:	7b dd       	rcall	.-1290   	; 0x3f5e <serial_getByte>
    4468:	81 11       	cpse	r24, r1
    446a:	f6 cf       	rjmp	.-20     	; 0x4458 <usart_getchar+0xa>
    446c:	89 81       	ldd	r24, Y+1	; 0x01
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	0f 90       	pop	r0
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	08 95       	ret

00004478 <usart_putchar>:
    4478:	68 2f       	mov	r22, r24
    447a:	80 91 3f 13 	lds	r24, 0x133F	; 0x80133f <_com_serial_instance>
    447e:	90 91 40 13 	lds	r25, 0x1340	; 0x801340 <_com_serial_instance+0x1>
    4482:	ed dc       	rcall	.-1574   	; 0x3e5e <serial_sendByte>
    4484:	80 e0       	ldi	r24, 0x00	; 0
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	08 95       	ret

0000448a <stdio_initialise>:
    448a:	8f 92       	push	r8
    448c:	9f 92       	push	r9
    448e:	af 92       	push	r10
    4490:	cf 92       	push	r12
    4492:	ef 92       	push	r14
    4494:	0f 93       	push	r16
    4496:	81 2c       	mov	r8, r1
    4498:	91 2c       	mov	r9, r1
    449a:	68 94       	set
    449c:	aa 24       	eor	r10, r10
    449e:	a7 f8       	bld	r10, 7
    44a0:	68 94       	set
    44a2:	cc 24       	eor	r12, r12
    44a4:	c7 f8       	bld	r12, 7
    44a6:	e1 2c       	mov	r14, r1
    44a8:	00 e0       	ldi	r16, 0x00	; 0
    44aa:	23 e0       	ldi	r18, 0x03	; 3
    44ac:	40 e0       	ldi	r20, 0x00	; 0
    44ae:	51 ee       	ldi	r21, 0xE1	; 225
    44b0:	60 e0       	ldi	r22, 0x00	; 0
    44b2:	70 e0       	ldi	r23, 0x00	; 0
    44b4:	38 dc       	rcall	.-1936   	; 0x3d26 <serial_create>
    44b6:	90 93 40 13 	sts	0x1340, r25	; 0x801340 <_com_serial_instance+0x1>
    44ba:	80 93 3f 13 	sts	0x133F, r24	; 0x80133f <_com_serial_instance>
    44be:	e3 e6       	ldi	r30, 0x63	; 99
    44c0:	f3 e1       	ldi	r31, 0x13	; 19
    44c2:	8f e0       	ldi	r24, 0x0F	; 15
    44c4:	92 e0       	ldi	r25, 0x02	; 2
    44c6:	91 83       	std	Z+1, r25	; 0x01
    44c8:	80 83       	st	Z, r24
    44ca:	93 83       	std	Z+3, r25	; 0x03
    44cc:	82 83       	std	Z+2, r24	; 0x02
    44ce:	0f 91       	pop	r16
    44d0:	ef 90       	pop	r14
    44d2:	cf 90       	pop	r12
    44d4:	af 90       	pop	r10
    44d6:	9f 90       	pop	r9
    44d8:	8f 90       	pop	r8
    44da:	08 95       	ret

000044dc <_turn_off>:
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	fc 01       	movw	r30, r24
    44e0:	ee 0f       	add	r30, r30
    44e2:	ff 1f       	adc	r31, r31
    44e4:	e8 0f       	add	r30, r24
    44e6:	f9 1f       	adc	r31, r25
    44e8:	ee 0f       	add	r30, r30
    44ea:	ff 1f       	adc	r31, r31
    44ec:	ef 5b       	subi	r30, 0xBF	; 191
    44ee:	fc 4e       	sbci	r31, 0xEC	; 236
    44f0:	23 81       	ldd	r18, Z+3	; 0x03
    44f2:	21 11       	cpse	r18, r1
    44f4:	1f c0       	rjmp	.+62     	; 0x4534 <_turn_off+0x58>
    44f6:	9c 01       	movw	r18, r24
    44f8:	22 0f       	add	r18, r18
    44fa:	33 1f       	adc	r19, r19
    44fc:	f9 01       	movw	r30, r18
    44fe:	e8 0f       	add	r30, r24
    4500:	f9 1f       	adc	r31, r25
    4502:	ee 0f       	add	r30, r30
    4504:	ff 1f       	adc	r31, r31
    4506:	ef 5b       	subi	r30, 0xBF	; 191
    4508:	fc 4e       	sbci	r31, 0xEC	; 236
    450a:	a0 81       	ld	r26, Z
    450c:	b1 81       	ldd	r27, Z+1	; 0x01
    450e:	4c 91       	ld	r20, X
    4510:	f9 01       	movw	r30, r18
    4512:	e8 0f       	add	r30, r24
    4514:	f9 1f       	adc	r31, r25
    4516:	ee 0f       	add	r30, r30
    4518:	ff 1f       	adc	r31, r31
    451a:	ef 5b       	subi	r30, 0xBF	; 191
    451c:	fc 4e       	sbci	r31, 0xEC	; 236
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	02 80       	ldd	r0, Z+2	; 0x02
    4524:	02 c0       	rjmp	.+4      	; 0x452a <_turn_off+0x4e>
    4526:	88 0f       	add	r24, r24
    4528:	99 1f       	adc	r25, r25
    452a:	0a 94       	dec	r0
    452c:	e2 f7       	brpl	.-8      	; 0x4526 <_turn_off+0x4a>
    452e:	84 2b       	or	r24, r20
    4530:	8c 93       	st	X, r24
    4532:	08 95       	ret
    4534:	fc 01       	movw	r30, r24
    4536:	ee 0f       	add	r30, r30
    4538:	ff 1f       	adc	r31, r31
    453a:	df 01       	movw	r26, r30
    453c:	a8 0f       	add	r26, r24
    453e:	b9 1f       	adc	r27, r25
    4540:	aa 0f       	add	r26, r26
    4542:	bb 1f       	adc	r27, r27
    4544:	af 5b       	subi	r26, 0xBF	; 191
    4546:	bc 4e       	sbci	r27, 0xEC	; 236
    4548:	0d 90       	ld	r0, X+
    454a:	bc 91       	ld	r27, X
    454c:	a0 2d       	mov	r26, r0
    454e:	2c 91       	ld	r18, X
    4550:	e8 0f       	add	r30, r24
    4552:	f9 1f       	adc	r31, r25
    4554:	ee 0f       	add	r30, r30
    4556:	ff 1f       	adc	r31, r31
    4558:	ef 5b       	subi	r30, 0xBF	; 191
    455a:	fc 4e       	sbci	r31, 0xEC	; 236
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	02 80       	ldd	r0, Z+2	; 0x02
    4562:	02 c0       	rjmp	.+4      	; 0x4568 <_turn_off+0x8c>
    4564:	88 0f       	add	r24, r24
    4566:	99 1f       	adc	r25, r25
    4568:	0a 94       	dec	r0
    456a:	e2 f7       	brpl	.-8      	; 0x4564 <_turn_off+0x88>
    456c:	80 95       	com	r24
    456e:	82 23       	and	r24, r18
    4570:	8c 93       	st	X, r24
    4572:	08 95       	ret

00004574 <_turn_on>:
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	fc 01       	movw	r30, r24
    4578:	ee 0f       	add	r30, r30
    457a:	ff 1f       	adc	r31, r31
    457c:	e8 0f       	add	r30, r24
    457e:	f9 1f       	adc	r31, r25
    4580:	ee 0f       	add	r30, r30
    4582:	ff 1f       	adc	r31, r31
    4584:	ef 5b       	subi	r30, 0xBF	; 191
    4586:	fc 4e       	sbci	r31, 0xEC	; 236
    4588:	23 81       	ldd	r18, Z+3	; 0x03
    458a:	21 11       	cpse	r18, r1
    458c:	20 c0       	rjmp	.+64     	; 0x45ce <_turn_on+0x5a>
    458e:	9c 01       	movw	r18, r24
    4590:	22 0f       	add	r18, r18
    4592:	33 1f       	adc	r19, r19
    4594:	f9 01       	movw	r30, r18
    4596:	e8 0f       	add	r30, r24
    4598:	f9 1f       	adc	r31, r25
    459a:	ee 0f       	add	r30, r30
    459c:	ff 1f       	adc	r31, r31
    459e:	ef 5b       	subi	r30, 0xBF	; 191
    45a0:	fc 4e       	sbci	r31, 0xEC	; 236
    45a2:	a0 81       	ld	r26, Z
    45a4:	b1 81       	ldd	r27, Z+1	; 0x01
    45a6:	4c 91       	ld	r20, X
    45a8:	f9 01       	movw	r30, r18
    45aa:	e8 0f       	add	r30, r24
    45ac:	f9 1f       	adc	r31, r25
    45ae:	ee 0f       	add	r30, r30
    45b0:	ff 1f       	adc	r31, r31
    45b2:	ef 5b       	subi	r30, 0xBF	; 191
    45b4:	fc 4e       	sbci	r31, 0xEC	; 236
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	02 80       	ldd	r0, Z+2	; 0x02
    45bc:	02 c0       	rjmp	.+4      	; 0x45c2 <_turn_on+0x4e>
    45be:	88 0f       	add	r24, r24
    45c0:	99 1f       	adc	r25, r25
    45c2:	0a 94       	dec	r0
    45c4:	e2 f7       	brpl	.-8      	; 0x45be <_turn_on+0x4a>
    45c6:	80 95       	com	r24
    45c8:	84 23       	and	r24, r20
    45ca:	8c 93       	st	X, r24
    45cc:	08 95       	ret
    45ce:	fc 01       	movw	r30, r24
    45d0:	ee 0f       	add	r30, r30
    45d2:	ff 1f       	adc	r31, r31
    45d4:	df 01       	movw	r26, r30
    45d6:	a8 0f       	add	r26, r24
    45d8:	b9 1f       	adc	r27, r25
    45da:	aa 0f       	add	r26, r26
    45dc:	bb 1f       	adc	r27, r27
    45de:	af 5b       	subi	r26, 0xBF	; 191
    45e0:	bc 4e       	sbci	r27, 0xEC	; 236
    45e2:	0d 90       	ld	r0, X+
    45e4:	bc 91       	ld	r27, X
    45e6:	a0 2d       	mov	r26, r0
    45e8:	2c 91       	ld	r18, X
    45ea:	e8 0f       	add	r30, r24
    45ec:	f9 1f       	adc	r31, r25
    45ee:	ee 0f       	add	r30, r30
    45f0:	ff 1f       	adc	r31, r31
    45f2:	ef 5b       	subi	r30, 0xBF	; 191
    45f4:	fc 4e       	sbci	r31, 0xEC	; 236
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	02 80       	ldd	r0, Z+2	; 0x02
    45fc:	02 c0       	rjmp	.+4      	; 0x4602 <_turn_on+0x8e>
    45fe:	88 0f       	add	r24, r24
    4600:	99 1f       	adc	r25, r25
    4602:	0a 94       	dec	r0
    4604:	e2 f7       	brpl	.-8      	; 0x45fe <_turn_on+0x8a>
    4606:	82 2b       	or	r24, r18
    4608:	8c 93       	st	X, r24
    460a:	08 95       	ret

0000460c <_hal_led_task>:
    460c:	cc 24       	eor	r12, r12
    460e:	c3 94       	inc	r12
    4610:	d1 2c       	mov	r13, r1
    4612:	68 94       	set
    4614:	bb 24       	eor	r11, r11
    4616:	b2 f8       	bld	r11, 2
    4618:	c1 e4       	ldi	r28, 0x41	; 65
    461a:	d3 e1       	ldi	r29, 0x13	; 19
    461c:	10 e0       	ldi	r17, 0x00	; 0
    461e:	8c 81       	ldd	r24, Y+4	; 0x04
    4620:	81 30       	cpi	r24, 0x01	; 1
    4622:	81 f0       	breq	.+32     	; 0x4644 <_hal_led_task+0x38>
    4624:	18 f1       	brcs	.+70     	; 0x466c <_hal_led_task+0x60>
    4626:	82 30       	cpi	r24, 0x02	; 2
    4628:	61 f5       	brne	.+88     	; 0x4682 <_hal_led_task+0x76>
    462a:	e8 81       	ld	r30, Y
    462c:	f9 81       	ldd	r31, Y+1	; 0x01
    462e:	20 81       	ld	r18, Z
    4630:	c6 01       	movw	r24, r12
    4632:	0a 80       	ldd	r0, Y+2	; 0x02
    4634:	02 c0       	rjmp	.+4      	; 0x463a <_hal_led_task+0x2e>
    4636:	88 0f       	add	r24, r24
    4638:	99 1f       	adc	r25, r25
    463a:	0a 94       	dec	r0
    463c:	e2 f7       	brpl	.-8      	; 0x4636 <_hal_led_task+0x2a>
    463e:	82 27       	eor	r24, r18
    4640:	80 83       	st	Z, r24
    4642:	1f c0       	rjmp	.+62     	; 0x4682 <_hal_led_task+0x76>
    4644:	8d 81       	ldd	r24, Y+5	; 0x05
    4646:	8f 5f       	subi	r24, 0xFF	; 255
    4648:	8a 30       	cpi	r24, 0x0A	; 10
    464a:	10 f4       	brcc	.+4      	; 0x4650 <_hal_led_task+0x44>
    464c:	8d 83       	std	Y+5, r24	; 0x05
    464e:	19 c0       	rjmp	.+50     	; 0x4682 <_hal_led_task+0x76>
    4650:	1d 82       	std	Y+5, r1	; 0x05
    4652:	e8 81       	ld	r30, Y
    4654:	f9 81       	ldd	r31, Y+1	; 0x01
    4656:	20 81       	ld	r18, Z
    4658:	c6 01       	movw	r24, r12
    465a:	0a 80       	ldd	r0, Y+2	; 0x02
    465c:	02 c0       	rjmp	.+4      	; 0x4662 <_hal_led_task+0x56>
    465e:	88 0f       	add	r24, r24
    4660:	99 1f       	adc	r25, r25
    4662:	0a 94       	dec	r0
    4664:	e2 f7       	brpl	.-8      	; 0x465e <_hal_led_task+0x52>
    4666:	82 27       	eor	r24, r18
    4668:	80 83       	st	Z, r24
    466a:	0b c0       	rjmp	.+22     	; 0x4682 <_hal_led_task+0x76>
    466c:	0d 81       	ldd	r16, Y+5	; 0x05
    466e:	00 23       	and	r16, r16
    4670:	29 f0       	breq	.+10     	; 0x467c <_hal_led_task+0x70>
    4672:	81 2f       	mov	r24, r17
    4674:	7f df       	rcall	.-258    	; 0x4574 <_turn_on>
    4676:	01 50       	subi	r16, 0x01	; 1
    4678:	0d 83       	std	Y+5, r16	; 0x05
    467a:	03 c0       	rjmp	.+6      	; 0x4682 <_hal_led_task+0x76>
    467c:	bc 82       	std	Y+4, r11	; 0x04
    467e:	81 2f       	mov	r24, r17
    4680:	2d df       	rcall	.-422    	; 0x44dc <_turn_off>
    4682:	1f 5f       	subi	r17, 0xFF	; 255
    4684:	26 96       	adiw	r28, 0x06	; 6
    4686:	14 30       	cpi	r17, 0x04	; 4
    4688:	51 f6       	brne	.-108    	; 0x461e <_hal_led_task+0x12>
    468a:	65 e0       	ldi	r22, 0x05	; 5
    468c:	70 e0       	ldi	r23, 0x00	; 0
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <vTaskDelay>
    4696:	c0 cf       	rjmp	.-128    	; 0x4618 <_hal_led_task+0xc>

00004698 <status_leds_initialise>:
    4698:	ef 92       	push	r14
    469a:	ff 92       	push	r15
    469c:	0f 93       	push	r16
    469e:	1f 93       	push	r17
    46a0:	cf 93       	push	r28
    46a2:	df 93       	push	r29
    46a4:	08 2f       	mov	r16, r24
    46a6:	80 e4       	ldi	r24, 0x40	; 64
    46a8:	87 b9       	out	0x07, r24	; 7
    46aa:	c1 e4       	ldi	r28, 0x41	; 65
    46ac:	d3 e1       	ldi	r29, 0x13	; 19
    46ae:	0f 2e       	mov	r0, r31
    46b0:	f8 e2       	ldi	r31, 0x28	; 40
    46b2:	ef 2e       	mov	r14, r31
    46b4:	f1 2c       	mov	r15, r1
    46b6:	f0 2d       	mov	r31, r0
    46b8:	f9 82       	std	Y+1, r15	; 0x01
    46ba:	e8 82       	st	Y, r14
    46bc:	86 e0       	ldi	r24, 0x06	; 6
    46be:	8a 83       	std	Y+2, r24	; 0x02
    46c0:	1b 82       	std	Y+3, r1	; 0x03
    46c2:	14 e0       	ldi	r17, 0x04	; 4
    46c4:	1c 83       	std	Y+4, r17	; 0x04
    46c6:	80 e0       	ldi	r24, 0x00	; 0
    46c8:	09 df       	rcall	.-494    	; 0x44dc <_turn_off>
    46ca:	80 e8       	ldi	r24, 0x80	; 128
    46cc:	87 b9       	out	0x07, r24	; 7
    46ce:	ff 82       	std	Y+7, r15	; 0x07
    46d0:	ee 82       	std	Y+6, r14	; 0x06
    46d2:	87 e0       	ldi	r24, 0x07	; 7
    46d4:	88 87       	std	Y+8, r24	; 0x08
    46d6:	19 86       	std	Y+9, r1	; 0x09
    46d8:	1a 87       	std	Y+10, r17	; 0x0a
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	ff de       	rcall	.-514    	; 0x44dc <_turn_off>
    46de:	80 e2       	ldi	r24, 0x20	; 32
    46e0:	83 bb       	out	0x13, r24	; 19
    46e2:	84 e3       	ldi	r24, 0x34	; 52
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	9d 87       	std	Y+13, r25	; 0x0d
    46e8:	8c 87       	std	Y+12, r24	; 0x0c
    46ea:	85 e0       	ldi	r24, 0x05	; 5
    46ec:	8e 87       	std	Y+14, r24	; 0x0e
    46ee:	1f 86       	std	Y+15, r1	; 0x0f
    46f0:	18 8b       	std	Y+16, r17	; 0x10
    46f2:	82 e0       	ldi	r24, 0x02	; 2
    46f4:	f3 de       	rcall	.-538    	; 0x44dc <_turn_off>
    46f6:	80 e1       	ldi	r24, 0x10	; 16
    46f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    46fc:	82 e0       	ldi	r24, 0x02	; 2
    46fe:	91 e0       	ldi	r25, 0x01	; 1
    4700:	9b 8b       	std	Y+19, r25	; 0x13
    4702:	8a 8b       	std	Y+18, r24	; 0x12
    4704:	1c 8b       	std	Y+20, r17	; 0x14
    4706:	1d 8a       	std	Y+21, r1	; 0x15
    4708:	1e 8b       	std	Y+22, r17	; 0x16
    470a:	83 e0       	ldi	r24, 0x03	; 3
    470c:	e7 de       	rcall	.-562    	; 0x44dc <_turn_off>
    470e:	e1 2c       	mov	r14, r1
    4710:	f1 2c       	mov	r15, r1
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	40 ec       	ldi	r20, 0xC0	; 192
    4718:	50 e0       	ldi	r21, 0x00	; 0
    471a:	65 ed       	ldi	r22, 0xD5	; 213
    471c:	76 e0       	ldi	r23, 0x06	; 6
    471e:	86 e0       	ldi	r24, 0x06	; 6
    4720:	93 e2       	ldi	r25, 0x23	; 35
    4722:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xTaskCreate>
    4726:	df 91       	pop	r29
    4728:	cf 91       	pop	r28
    472a:	1f 91       	pop	r17
    472c:	0f 91       	pop	r16
    472e:	ff 90       	pop	r15
    4730:	ef 90       	pop	r14
    4732:	08 95       	ret

00004734 <status_leds_slowBlink>:
    4734:	cf 93       	push	r28
    4736:	df 93       	push	r29
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	fc 01       	movw	r30, r24
    473c:	ee 0f       	add	r30, r30
    473e:	ff 1f       	adc	r31, r31
    4740:	df 01       	movw	r26, r30
    4742:	a8 0f       	add	r26, r24
    4744:	b9 1f       	adc	r27, r25
    4746:	aa 0f       	add	r26, r26
    4748:	bb 1f       	adc	r27, r27
    474a:	af 5b       	subi	r26, 0xBF	; 191
    474c:	bc 4e       	sbci	r27, 0xEC	; 236
    474e:	cd 91       	ld	r28, X+
    4750:	dc 91       	ld	r29, X
    4752:	11 97       	sbiw	r26, 0x01	; 1
    4754:	48 81       	ld	r20, Y
    4756:	21 e0       	ldi	r18, 0x01	; 1
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	12 96       	adiw	r26, 0x02	; 2
    475c:	0c 90       	ld	r0, X
    475e:	12 97       	sbiw	r26, 0x02	; 2
    4760:	02 c0       	rjmp	.+4      	; 0x4766 <status_leds_slowBlink+0x32>
    4762:	22 0f       	add	r18, r18
    4764:	33 1f       	adc	r19, r19
    4766:	0a 94       	dec	r0
    4768:	e2 f7       	brpl	.-8      	; 0x4762 <status_leds_slowBlink+0x2e>
    476a:	24 27       	eor	r18, r20
    476c:	28 83       	st	Y, r18
    476e:	fd 01       	movw	r30, r26
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	84 83       	std	Z+4, r24	; 0x04
    4774:	df 91       	pop	r29
    4776:	cf 91       	pop	r28
    4778:	08 95       	ret

0000477a <status_leds_fastBlink>:
    477a:	cf 93       	push	r28
    477c:	df 93       	push	r29
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	fc 01       	movw	r30, r24
    4782:	ee 0f       	add	r30, r30
    4784:	ff 1f       	adc	r31, r31
    4786:	df 01       	movw	r26, r30
    4788:	a8 0f       	add	r26, r24
    478a:	b9 1f       	adc	r27, r25
    478c:	aa 0f       	add	r26, r26
    478e:	bb 1f       	adc	r27, r27
    4790:	af 5b       	subi	r26, 0xBF	; 191
    4792:	bc 4e       	sbci	r27, 0xEC	; 236
    4794:	cd 91       	ld	r28, X+
    4796:	dc 91       	ld	r29, X
    4798:	11 97       	sbiw	r26, 0x01	; 1
    479a:	48 81       	ld	r20, Y
    479c:	21 e0       	ldi	r18, 0x01	; 1
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	12 96       	adiw	r26, 0x02	; 2
    47a2:	0c 90       	ld	r0, X
    47a4:	12 97       	sbiw	r26, 0x02	; 2
    47a6:	02 c0       	rjmp	.+4      	; 0x47ac <status_leds_fastBlink+0x32>
    47a8:	22 0f       	add	r18, r18
    47aa:	33 1f       	adc	r19, r19
    47ac:	0a 94       	dec	r0
    47ae:	e2 f7       	brpl	.-8      	; 0x47a8 <status_leds_fastBlink+0x2e>
    47b0:	24 27       	eor	r18, r20
    47b2:	28 83       	st	Y, r18
    47b4:	fd 01       	movw	r30, r26
    47b6:	82 e0       	ldi	r24, 0x02	; 2
    47b8:	84 83       	std	Z+4, r24	; 0x04
    47ba:	df 91       	pop	r29
    47bc:	cf 91       	pop	r28
    47be:	08 95       	ret

000047c0 <status_leds_ledOn>:
    47c0:	28 2f       	mov	r18, r24
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	f9 01       	movw	r30, r18
    47c6:	ee 0f       	add	r30, r30
    47c8:	ff 1f       	adc	r31, r31
    47ca:	e2 0f       	add	r30, r18
    47cc:	f3 1f       	adc	r31, r19
    47ce:	ee 0f       	add	r30, r30
    47d0:	ff 1f       	adc	r31, r31
    47d2:	ef 5b       	subi	r30, 0xBF	; 191
    47d4:	fc 4e       	sbci	r31, 0xEC	; 236
    47d6:	93 e0       	ldi	r25, 0x03	; 3
    47d8:	94 83       	std	Z+4, r25	; 0x04
    47da:	cc ce       	rjmp	.-616    	; 0x4574 <_turn_on>
    47dc:	08 95       	ret

000047de <status_leds_ledOff>:
    47de:	28 2f       	mov	r18, r24
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	f9 01       	movw	r30, r18
    47e4:	ee 0f       	add	r30, r30
    47e6:	ff 1f       	adc	r31, r31
    47e8:	e2 0f       	add	r30, r18
    47ea:	f3 1f       	adc	r31, r19
    47ec:	ee 0f       	add	r30, r30
    47ee:	ff 1f       	adc	r31, r31
    47f0:	ef 5b       	subi	r30, 0xBF	; 191
    47f2:	fc 4e       	sbci	r31, 0xEC	; 236
    47f4:	94 e0       	ldi	r25, 0x04	; 4
    47f6:	94 83       	std	Z+4, r25	; 0x04
    47f8:	71 ce       	rjmp	.-798    	; 0x44dc <_turn_off>
    47fa:	08 95       	ret

000047fc <status_leds_longPuls>:
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	fc 01       	movw	r30, r24
    4800:	ee 0f       	add	r30, r30
    4802:	ff 1f       	adc	r31, r31
    4804:	df 01       	movw	r26, r30
    4806:	a8 0f       	add	r26, r24
    4808:	b9 1f       	adc	r27, r25
    480a:	aa 0f       	add	r26, r26
    480c:	bb 1f       	adc	r27, r27
    480e:	af 5b       	subi	r26, 0xBF	; 191
    4810:	bc 4e       	sbci	r27, 0xEC	; 236
    4812:	24 e0       	ldi	r18, 0x04	; 4
    4814:	15 96       	adiw	r26, 0x05	; 5
    4816:	2c 93       	st	X, r18
    4818:	15 97       	sbiw	r26, 0x05	; 5
    481a:	fd 01       	movw	r30, r26
    481c:	14 82       	std	Z+4, r1	; 0x04
    481e:	08 95       	ret

00004820 <status_leds_shortPuls>:
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	fc 01       	movw	r30, r24
    4824:	ee 0f       	add	r30, r30
    4826:	ff 1f       	adc	r31, r31
    4828:	df 01       	movw	r26, r30
    482a:	a8 0f       	add	r26, r24
    482c:	b9 1f       	adc	r27, r25
    482e:	aa 0f       	add	r26, r26
    4830:	bb 1f       	adc	r27, r27
    4832:	af 5b       	subi	r26, 0xBF	; 191
    4834:	bc 4e       	sbci	r27, 0xEC	; 236
    4836:	21 e0       	ldi	r18, 0x01	; 1
    4838:	15 96       	adiw	r26, 0x05	; 5
    483a:	2c 93       	st	X, r18
    483c:	15 97       	sbiw	r26, 0x05	; 5
    483e:	fd 01       	movw	r30, r26
    4840:	14 82       	std	Z+4, r1	; 0x04
    4842:	08 95       	ret

00004844 <fifo_init>:
    4844:	fc 01       	movw	r30, r24
    4846:	41 11       	cpse	r20, r1
    4848:	01 c0       	rjmp	.+2      	; 0x484c <fifo_init+0x8>
    484a:	45 d3       	rcall	.+1674   	; 0x4ed6 <abort>
    484c:	84 2f       	mov	r24, r20
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	9c 01       	movw	r18, r24
    4852:	21 50       	subi	r18, 0x01	; 1
    4854:	31 09       	sbc	r19, r1
    4856:	82 23       	and	r24, r18
    4858:	93 23       	and	r25, r19
    485a:	89 2b       	or	r24, r25
    485c:	09 f0       	breq	.+2      	; 0x4860 <fifo_init+0x1c>
    485e:	3b d3       	rcall	.+1654   	; 0x4ed6 <abort>
    4860:	41 38       	cpi	r20, 0x81	; 129
    4862:	08 f0       	brcs	.+2      	; 0x4866 <fifo_init+0x22>
    4864:	38 d3       	rcall	.+1648   	; 0x4ed6 <abort>
    4866:	12 82       	std	Z+2, r1	; 0x02
    4868:	13 82       	std	Z+3, r1	; 0x03
    486a:	44 83       	std	Z+4, r20	; 0x04
    486c:	44 0f       	add	r20, r20
    486e:	41 50       	subi	r20, 0x01	; 1
    4870:	45 83       	std	Z+5, r20	; 0x05
    4872:	71 83       	std	Z+1, r23	; 0x01
    4874:	60 83       	st	Z, r22
    4876:	80 e0       	ldi	r24, 0x00	; 0
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	08 95       	ret

0000487c <__subsf3>:
    487c:	50 58       	subi	r21, 0x80	; 128

0000487e <__addsf3>:
    487e:	bb 27       	eor	r27, r27
    4880:	aa 27       	eor	r26, r26
    4882:	0e d0       	rcall	.+28     	; 0x48a0 <__addsf3x>
    4884:	48 c1       	rjmp	.+656    	; 0x4b16 <__fp_round>
    4886:	39 d1       	rcall	.+626    	; 0x4afa <__fp_pscA>
    4888:	30 f0       	brcs	.+12     	; 0x4896 <__addsf3+0x18>
    488a:	3e d1       	rcall	.+636    	; 0x4b08 <__fp_pscB>
    488c:	20 f0       	brcs	.+8      	; 0x4896 <__addsf3+0x18>
    488e:	31 f4       	brne	.+12     	; 0x489c <__addsf3+0x1e>
    4890:	9f 3f       	cpi	r25, 0xFF	; 255
    4892:	11 f4       	brne	.+4      	; 0x4898 <__addsf3+0x1a>
    4894:	1e f4       	brtc	.+6      	; 0x489c <__addsf3+0x1e>
    4896:	2e c1       	rjmp	.+604    	; 0x4af4 <__fp_nan>
    4898:	0e f4       	brtc	.+2      	; 0x489c <__addsf3+0x1e>
    489a:	e0 95       	com	r30
    489c:	e7 fb       	bst	r30, 7
    489e:	24 c1       	rjmp	.+584    	; 0x4ae8 <__fp_inf>

000048a0 <__addsf3x>:
    48a0:	e9 2f       	mov	r30, r25
    48a2:	4a d1       	rcall	.+660    	; 0x4b38 <__fp_split3>
    48a4:	80 f3       	brcs	.-32     	; 0x4886 <__addsf3+0x8>
    48a6:	ba 17       	cp	r27, r26
    48a8:	62 07       	cpc	r22, r18
    48aa:	73 07       	cpc	r23, r19
    48ac:	84 07       	cpc	r24, r20
    48ae:	95 07       	cpc	r25, r21
    48b0:	18 f0       	brcs	.+6      	; 0x48b8 <__addsf3x+0x18>
    48b2:	71 f4       	brne	.+28     	; 0x48d0 <__addsf3x+0x30>
    48b4:	9e f5       	brtc	.+102    	; 0x491c <__addsf3x+0x7c>
    48b6:	62 c1       	rjmp	.+708    	; 0x4b7c <__fp_zero>
    48b8:	0e f4       	brtc	.+2      	; 0x48bc <__addsf3x+0x1c>
    48ba:	e0 95       	com	r30
    48bc:	0b 2e       	mov	r0, r27
    48be:	ba 2f       	mov	r27, r26
    48c0:	a0 2d       	mov	r26, r0
    48c2:	0b 01       	movw	r0, r22
    48c4:	b9 01       	movw	r22, r18
    48c6:	90 01       	movw	r18, r0
    48c8:	0c 01       	movw	r0, r24
    48ca:	ca 01       	movw	r24, r20
    48cc:	a0 01       	movw	r20, r0
    48ce:	11 24       	eor	r1, r1
    48d0:	ff 27       	eor	r31, r31
    48d2:	59 1b       	sub	r21, r25
    48d4:	99 f0       	breq	.+38     	; 0x48fc <__addsf3x+0x5c>
    48d6:	59 3f       	cpi	r21, 0xF9	; 249
    48d8:	50 f4       	brcc	.+20     	; 0x48ee <__addsf3x+0x4e>
    48da:	50 3e       	cpi	r21, 0xE0	; 224
    48dc:	68 f1       	brcs	.+90     	; 0x4938 <__addsf3x+0x98>
    48de:	1a 16       	cp	r1, r26
    48e0:	f0 40       	sbci	r31, 0x00	; 0
    48e2:	a2 2f       	mov	r26, r18
    48e4:	23 2f       	mov	r18, r19
    48e6:	34 2f       	mov	r19, r20
    48e8:	44 27       	eor	r20, r20
    48ea:	58 5f       	subi	r21, 0xF8	; 248
    48ec:	f3 cf       	rjmp	.-26     	; 0x48d4 <__addsf3x+0x34>
    48ee:	46 95       	lsr	r20
    48f0:	37 95       	ror	r19
    48f2:	27 95       	ror	r18
    48f4:	a7 95       	ror	r26
    48f6:	f0 40       	sbci	r31, 0x00	; 0
    48f8:	53 95       	inc	r21
    48fa:	c9 f7       	brne	.-14     	; 0x48ee <__addsf3x+0x4e>
    48fc:	7e f4       	brtc	.+30     	; 0x491c <__addsf3x+0x7c>
    48fe:	1f 16       	cp	r1, r31
    4900:	ba 0b       	sbc	r27, r26
    4902:	62 0b       	sbc	r22, r18
    4904:	73 0b       	sbc	r23, r19
    4906:	84 0b       	sbc	r24, r20
    4908:	ba f0       	brmi	.+46     	; 0x4938 <__addsf3x+0x98>
    490a:	91 50       	subi	r25, 0x01	; 1
    490c:	a1 f0       	breq	.+40     	; 0x4936 <__addsf3x+0x96>
    490e:	ff 0f       	add	r31, r31
    4910:	bb 1f       	adc	r27, r27
    4912:	66 1f       	adc	r22, r22
    4914:	77 1f       	adc	r23, r23
    4916:	88 1f       	adc	r24, r24
    4918:	c2 f7       	brpl	.-16     	; 0x490a <__addsf3x+0x6a>
    491a:	0e c0       	rjmp	.+28     	; 0x4938 <__addsf3x+0x98>
    491c:	ba 0f       	add	r27, r26
    491e:	62 1f       	adc	r22, r18
    4920:	73 1f       	adc	r23, r19
    4922:	84 1f       	adc	r24, r20
    4924:	48 f4       	brcc	.+18     	; 0x4938 <__addsf3x+0x98>
    4926:	87 95       	ror	r24
    4928:	77 95       	ror	r23
    492a:	67 95       	ror	r22
    492c:	b7 95       	ror	r27
    492e:	f7 95       	ror	r31
    4930:	9e 3f       	cpi	r25, 0xFE	; 254
    4932:	08 f0       	brcs	.+2      	; 0x4936 <__addsf3x+0x96>
    4934:	b3 cf       	rjmp	.-154    	; 0x489c <__addsf3+0x1e>
    4936:	93 95       	inc	r25
    4938:	88 0f       	add	r24, r24
    493a:	08 f0       	brcs	.+2      	; 0x493e <__addsf3x+0x9e>
    493c:	99 27       	eor	r25, r25
    493e:	ee 0f       	add	r30, r30
    4940:	97 95       	ror	r25
    4942:	87 95       	ror	r24
    4944:	08 95       	ret

00004946 <__divsf3>:
    4946:	0c d0       	rcall	.+24     	; 0x4960 <__divsf3x>
    4948:	e6 c0       	rjmp	.+460    	; 0x4b16 <__fp_round>
    494a:	de d0       	rcall	.+444    	; 0x4b08 <__fp_pscB>
    494c:	40 f0       	brcs	.+16     	; 0x495e <__divsf3+0x18>
    494e:	d5 d0       	rcall	.+426    	; 0x4afa <__fp_pscA>
    4950:	30 f0       	brcs	.+12     	; 0x495e <__divsf3+0x18>
    4952:	21 f4       	brne	.+8      	; 0x495c <__divsf3+0x16>
    4954:	5f 3f       	cpi	r21, 0xFF	; 255
    4956:	19 f0       	breq	.+6      	; 0x495e <__divsf3+0x18>
    4958:	c7 c0       	rjmp	.+398    	; 0x4ae8 <__fp_inf>
    495a:	51 11       	cpse	r21, r1
    495c:	10 c1       	rjmp	.+544    	; 0x4b7e <__fp_szero>
    495e:	ca c0       	rjmp	.+404    	; 0x4af4 <__fp_nan>

00004960 <__divsf3x>:
    4960:	eb d0       	rcall	.+470    	; 0x4b38 <__fp_split3>
    4962:	98 f3       	brcs	.-26     	; 0x494a <__divsf3+0x4>

00004964 <__divsf3_pse>:
    4964:	99 23       	and	r25, r25
    4966:	c9 f3       	breq	.-14     	; 0x495a <__divsf3+0x14>
    4968:	55 23       	and	r21, r21
    496a:	b1 f3       	breq	.-20     	; 0x4958 <__divsf3+0x12>
    496c:	95 1b       	sub	r25, r21
    496e:	55 0b       	sbc	r21, r21
    4970:	bb 27       	eor	r27, r27
    4972:	aa 27       	eor	r26, r26
    4974:	62 17       	cp	r22, r18
    4976:	73 07       	cpc	r23, r19
    4978:	84 07       	cpc	r24, r20
    497a:	38 f0       	brcs	.+14     	; 0x498a <__divsf3_pse+0x26>
    497c:	9f 5f       	subi	r25, 0xFF	; 255
    497e:	5f 4f       	sbci	r21, 0xFF	; 255
    4980:	22 0f       	add	r18, r18
    4982:	33 1f       	adc	r19, r19
    4984:	44 1f       	adc	r20, r20
    4986:	aa 1f       	adc	r26, r26
    4988:	a9 f3       	breq	.-22     	; 0x4974 <__divsf3_pse+0x10>
    498a:	33 d0       	rcall	.+102    	; 0x49f2 <__divsf3_pse+0x8e>
    498c:	0e 2e       	mov	r0, r30
    498e:	3a f0       	brmi	.+14     	; 0x499e <__divsf3_pse+0x3a>
    4990:	e0 e8       	ldi	r30, 0x80	; 128
    4992:	30 d0       	rcall	.+96     	; 0x49f4 <__divsf3_pse+0x90>
    4994:	91 50       	subi	r25, 0x01	; 1
    4996:	50 40       	sbci	r21, 0x00	; 0
    4998:	e6 95       	lsr	r30
    499a:	00 1c       	adc	r0, r0
    499c:	ca f7       	brpl	.-14     	; 0x4990 <__divsf3_pse+0x2c>
    499e:	29 d0       	rcall	.+82     	; 0x49f2 <__divsf3_pse+0x8e>
    49a0:	fe 2f       	mov	r31, r30
    49a2:	27 d0       	rcall	.+78     	; 0x49f2 <__divsf3_pse+0x8e>
    49a4:	66 0f       	add	r22, r22
    49a6:	77 1f       	adc	r23, r23
    49a8:	88 1f       	adc	r24, r24
    49aa:	bb 1f       	adc	r27, r27
    49ac:	26 17       	cp	r18, r22
    49ae:	37 07       	cpc	r19, r23
    49b0:	48 07       	cpc	r20, r24
    49b2:	ab 07       	cpc	r26, r27
    49b4:	b0 e8       	ldi	r27, 0x80	; 128
    49b6:	09 f0       	breq	.+2      	; 0x49ba <__divsf3_pse+0x56>
    49b8:	bb 0b       	sbc	r27, r27
    49ba:	80 2d       	mov	r24, r0
    49bc:	bf 01       	movw	r22, r30
    49be:	ff 27       	eor	r31, r31
    49c0:	93 58       	subi	r25, 0x83	; 131
    49c2:	5f 4f       	sbci	r21, 0xFF	; 255
    49c4:	2a f0       	brmi	.+10     	; 0x49d0 <__divsf3_pse+0x6c>
    49c6:	9e 3f       	cpi	r25, 0xFE	; 254
    49c8:	51 05       	cpc	r21, r1
    49ca:	68 f0       	brcs	.+26     	; 0x49e6 <__divsf3_pse+0x82>
    49cc:	8d c0       	rjmp	.+282    	; 0x4ae8 <__fp_inf>
    49ce:	d7 c0       	rjmp	.+430    	; 0x4b7e <__fp_szero>
    49d0:	5f 3f       	cpi	r21, 0xFF	; 255
    49d2:	ec f3       	brlt	.-6      	; 0x49ce <__divsf3_pse+0x6a>
    49d4:	98 3e       	cpi	r25, 0xE8	; 232
    49d6:	dc f3       	brlt	.-10     	; 0x49ce <__divsf3_pse+0x6a>
    49d8:	86 95       	lsr	r24
    49da:	77 95       	ror	r23
    49dc:	67 95       	ror	r22
    49de:	b7 95       	ror	r27
    49e0:	f7 95       	ror	r31
    49e2:	9f 5f       	subi	r25, 0xFF	; 255
    49e4:	c9 f7       	brne	.-14     	; 0x49d8 <__divsf3_pse+0x74>
    49e6:	88 0f       	add	r24, r24
    49e8:	91 1d       	adc	r25, r1
    49ea:	96 95       	lsr	r25
    49ec:	87 95       	ror	r24
    49ee:	97 f9       	bld	r25, 7
    49f0:	08 95       	ret
    49f2:	e1 e0       	ldi	r30, 0x01	; 1
    49f4:	66 0f       	add	r22, r22
    49f6:	77 1f       	adc	r23, r23
    49f8:	88 1f       	adc	r24, r24
    49fa:	bb 1f       	adc	r27, r27
    49fc:	62 17       	cp	r22, r18
    49fe:	73 07       	cpc	r23, r19
    4a00:	84 07       	cpc	r24, r20
    4a02:	ba 07       	cpc	r27, r26
    4a04:	20 f0       	brcs	.+8      	; 0x4a0e <__divsf3_pse+0xaa>
    4a06:	62 1b       	sub	r22, r18
    4a08:	73 0b       	sbc	r23, r19
    4a0a:	84 0b       	sbc	r24, r20
    4a0c:	ba 0b       	sbc	r27, r26
    4a0e:	ee 1f       	adc	r30, r30
    4a10:	88 f7       	brcc	.-30     	; 0x49f4 <__divsf3_pse+0x90>
    4a12:	e0 95       	com	r30
    4a14:	08 95       	ret

00004a16 <__fixunssfsi>:
    4a16:	98 d0       	rcall	.+304    	; 0x4b48 <__fp_splitA>
    4a18:	88 f0       	brcs	.+34     	; 0x4a3c <__fixunssfsi+0x26>
    4a1a:	9f 57       	subi	r25, 0x7F	; 127
    4a1c:	90 f0       	brcs	.+36     	; 0x4a42 <__fixunssfsi+0x2c>
    4a1e:	b9 2f       	mov	r27, r25
    4a20:	99 27       	eor	r25, r25
    4a22:	b7 51       	subi	r27, 0x17	; 23
    4a24:	a0 f0       	brcs	.+40     	; 0x4a4e <__fixunssfsi+0x38>
    4a26:	d1 f0       	breq	.+52     	; 0x4a5c <__fixunssfsi+0x46>
    4a28:	66 0f       	add	r22, r22
    4a2a:	77 1f       	adc	r23, r23
    4a2c:	88 1f       	adc	r24, r24
    4a2e:	99 1f       	adc	r25, r25
    4a30:	1a f0       	brmi	.+6      	; 0x4a38 <__fixunssfsi+0x22>
    4a32:	ba 95       	dec	r27
    4a34:	c9 f7       	brne	.-14     	; 0x4a28 <__fixunssfsi+0x12>
    4a36:	12 c0       	rjmp	.+36     	; 0x4a5c <__fixunssfsi+0x46>
    4a38:	b1 30       	cpi	r27, 0x01	; 1
    4a3a:	81 f0       	breq	.+32     	; 0x4a5c <__fixunssfsi+0x46>
    4a3c:	9f d0       	rcall	.+318    	; 0x4b7c <__fp_zero>
    4a3e:	b1 e0       	ldi	r27, 0x01	; 1
    4a40:	08 95       	ret
    4a42:	9c c0       	rjmp	.+312    	; 0x4b7c <__fp_zero>
    4a44:	67 2f       	mov	r22, r23
    4a46:	78 2f       	mov	r23, r24
    4a48:	88 27       	eor	r24, r24
    4a4a:	b8 5f       	subi	r27, 0xF8	; 248
    4a4c:	39 f0       	breq	.+14     	; 0x4a5c <__fixunssfsi+0x46>
    4a4e:	b9 3f       	cpi	r27, 0xF9	; 249
    4a50:	cc f3       	brlt	.-14     	; 0x4a44 <__fixunssfsi+0x2e>
    4a52:	86 95       	lsr	r24
    4a54:	77 95       	ror	r23
    4a56:	67 95       	ror	r22
    4a58:	b3 95       	inc	r27
    4a5a:	d9 f7       	brne	.-10     	; 0x4a52 <__fixunssfsi+0x3c>
    4a5c:	3e f4       	brtc	.+14     	; 0x4a6c <__fixunssfsi+0x56>
    4a5e:	90 95       	com	r25
    4a60:	80 95       	com	r24
    4a62:	70 95       	com	r23
    4a64:	61 95       	neg	r22
    4a66:	7f 4f       	sbci	r23, 0xFF	; 255
    4a68:	8f 4f       	sbci	r24, 0xFF	; 255
    4a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a6c:	08 95       	ret

00004a6e <__floatunsisf>:
    4a6e:	e8 94       	clt
    4a70:	09 c0       	rjmp	.+18     	; 0x4a84 <__floatsisf+0x12>

00004a72 <__floatsisf>:
    4a72:	97 fb       	bst	r25, 7
    4a74:	3e f4       	brtc	.+14     	; 0x4a84 <__floatsisf+0x12>
    4a76:	90 95       	com	r25
    4a78:	80 95       	com	r24
    4a7a:	70 95       	com	r23
    4a7c:	61 95       	neg	r22
    4a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a80:	8f 4f       	sbci	r24, 0xFF	; 255
    4a82:	9f 4f       	sbci	r25, 0xFF	; 255
    4a84:	99 23       	and	r25, r25
    4a86:	a9 f0       	breq	.+42     	; 0x4ab2 <__floatsisf+0x40>
    4a88:	f9 2f       	mov	r31, r25
    4a8a:	96 e9       	ldi	r25, 0x96	; 150
    4a8c:	bb 27       	eor	r27, r27
    4a8e:	93 95       	inc	r25
    4a90:	f6 95       	lsr	r31
    4a92:	87 95       	ror	r24
    4a94:	77 95       	ror	r23
    4a96:	67 95       	ror	r22
    4a98:	b7 95       	ror	r27
    4a9a:	f1 11       	cpse	r31, r1
    4a9c:	f8 cf       	rjmp	.-16     	; 0x4a8e <__floatsisf+0x1c>
    4a9e:	fa f4       	brpl	.+62     	; 0x4ade <__floatsisf+0x6c>
    4aa0:	bb 0f       	add	r27, r27
    4aa2:	11 f4       	brne	.+4      	; 0x4aa8 <__floatsisf+0x36>
    4aa4:	60 ff       	sbrs	r22, 0
    4aa6:	1b c0       	rjmp	.+54     	; 0x4ade <__floatsisf+0x6c>
    4aa8:	6f 5f       	subi	r22, 0xFF	; 255
    4aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    4aac:	8f 4f       	sbci	r24, 0xFF	; 255
    4aae:	9f 4f       	sbci	r25, 0xFF	; 255
    4ab0:	16 c0       	rjmp	.+44     	; 0x4ade <__floatsisf+0x6c>
    4ab2:	88 23       	and	r24, r24
    4ab4:	11 f0       	breq	.+4      	; 0x4aba <__floatsisf+0x48>
    4ab6:	96 e9       	ldi	r25, 0x96	; 150
    4ab8:	11 c0       	rjmp	.+34     	; 0x4adc <__floatsisf+0x6a>
    4aba:	77 23       	and	r23, r23
    4abc:	21 f0       	breq	.+8      	; 0x4ac6 <__floatsisf+0x54>
    4abe:	9e e8       	ldi	r25, 0x8E	; 142
    4ac0:	87 2f       	mov	r24, r23
    4ac2:	76 2f       	mov	r23, r22
    4ac4:	05 c0       	rjmp	.+10     	; 0x4ad0 <__floatsisf+0x5e>
    4ac6:	66 23       	and	r22, r22
    4ac8:	71 f0       	breq	.+28     	; 0x4ae6 <__floatsisf+0x74>
    4aca:	96 e8       	ldi	r25, 0x86	; 134
    4acc:	86 2f       	mov	r24, r22
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	60 e0       	ldi	r22, 0x00	; 0
    4ad2:	2a f0       	brmi	.+10     	; 0x4ade <__floatsisf+0x6c>
    4ad4:	9a 95       	dec	r25
    4ad6:	66 0f       	add	r22, r22
    4ad8:	77 1f       	adc	r23, r23
    4ada:	88 1f       	adc	r24, r24
    4adc:	da f7       	brpl	.-10     	; 0x4ad4 <__floatsisf+0x62>
    4ade:	88 0f       	add	r24, r24
    4ae0:	96 95       	lsr	r25
    4ae2:	87 95       	ror	r24
    4ae4:	97 f9       	bld	r25, 7
    4ae6:	08 95       	ret

00004ae8 <__fp_inf>:
    4ae8:	97 f9       	bld	r25, 7
    4aea:	9f 67       	ori	r25, 0x7F	; 127
    4aec:	80 e8       	ldi	r24, 0x80	; 128
    4aee:	70 e0       	ldi	r23, 0x00	; 0
    4af0:	60 e0       	ldi	r22, 0x00	; 0
    4af2:	08 95       	ret

00004af4 <__fp_nan>:
    4af4:	9f ef       	ldi	r25, 0xFF	; 255
    4af6:	80 ec       	ldi	r24, 0xC0	; 192
    4af8:	08 95       	ret

00004afa <__fp_pscA>:
    4afa:	00 24       	eor	r0, r0
    4afc:	0a 94       	dec	r0
    4afe:	16 16       	cp	r1, r22
    4b00:	17 06       	cpc	r1, r23
    4b02:	18 06       	cpc	r1, r24
    4b04:	09 06       	cpc	r0, r25
    4b06:	08 95       	ret

00004b08 <__fp_pscB>:
    4b08:	00 24       	eor	r0, r0
    4b0a:	0a 94       	dec	r0
    4b0c:	12 16       	cp	r1, r18
    4b0e:	13 06       	cpc	r1, r19
    4b10:	14 06       	cpc	r1, r20
    4b12:	05 06       	cpc	r0, r21
    4b14:	08 95       	ret

00004b16 <__fp_round>:
    4b16:	09 2e       	mov	r0, r25
    4b18:	03 94       	inc	r0
    4b1a:	00 0c       	add	r0, r0
    4b1c:	11 f4       	brne	.+4      	; 0x4b22 <__fp_round+0xc>
    4b1e:	88 23       	and	r24, r24
    4b20:	52 f0       	brmi	.+20     	; 0x4b36 <__fp_round+0x20>
    4b22:	bb 0f       	add	r27, r27
    4b24:	40 f4       	brcc	.+16     	; 0x4b36 <__fp_round+0x20>
    4b26:	bf 2b       	or	r27, r31
    4b28:	11 f4       	brne	.+4      	; 0x4b2e <__fp_round+0x18>
    4b2a:	60 ff       	sbrs	r22, 0
    4b2c:	04 c0       	rjmp	.+8      	; 0x4b36 <__fp_round+0x20>
    4b2e:	6f 5f       	subi	r22, 0xFF	; 255
    4b30:	7f 4f       	sbci	r23, 0xFF	; 255
    4b32:	8f 4f       	sbci	r24, 0xFF	; 255
    4b34:	9f 4f       	sbci	r25, 0xFF	; 255
    4b36:	08 95       	ret

00004b38 <__fp_split3>:
    4b38:	57 fd       	sbrc	r21, 7
    4b3a:	90 58       	subi	r25, 0x80	; 128
    4b3c:	44 0f       	add	r20, r20
    4b3e:	55 1f       	adc	r21, r21
    4b40:	59 f0       	breq	.+22     	; 0x4b58 <__fp_splitA+0x10>
    4b42:	5f 3f       	cpi	r21, 0xFF	; 255
    4b44:	71 f0       	breq	.+28     	; 0x4b62 <__fp_splitA+0x1a>
    4b46:	47 95       	ror	r20

00004b48 <__fp_splitA>:
    4b48:	88 0f       	add	r24, r24
    4b4a:	97 fb       	bst	r25, 7
    4b4c:	99 1f       	adc	r25, r25
    4b4e:	61 f0       	breq	.+24     	; 0x4b68 <__fp_splitA+0x20>
    4b50:	9f 3f       	cpi	r25, 0xFF	; 255
    4b52:	79 f0       	breq	.+30     	; 0x4b72 <__fp_splitA+0x2a>
    4b54:	87 95       	ror	r24
    4b56:	08 95       	ret
    4b58:	12 16       	cp	r1, r18
    4b5a:	13 06       	cpc	r1, r19
    4b5c:	14 06       	cpc	r1, r20
    4b5e:	55 1f       	adc	r21, r21
    4b60:	f2 cf       	rjmp	.-28     	; 0x4b46 <__fp_split3+0xe>
    4b62:	46 95       	lsr	r20
    4b64:	f1 df       	rcall	.-30     	; 0x4b48 <__fp_splitA>
    4b66:	08 c0       	rjmp	.+16     	; 0x4b78 <__fp_splitA+0x30>
    4b68:	16 16       	cp	r1, r22
    4b6a:	17 06       	cpc	r1, r23
    4b6c:	18 06       	cpc	r1, r24
    4b6e:	99 1f       	adc	r25, r25
    4b70:	f1 cf       	rjmp	.-30     	; 0x4b54 <__fp_splitA+0xc>
    4b72:	86 95       	lsr	r24
    4b74:	71 05       	cpc	r23, r1
    4b76:	61 05       	cpc	r22, r1
    4b78:	08 94       	sec
    4b7a:	08 95       	ret

00004b7c <__fp_zero>:
    4b7c:	e8 94       	clt

00004b7e <__fp_szero>:
    4b7e:	bb 27       	eor	r27, r27
    4b80:	66 27       	eor	r22, r22
    4b82:	77 27       	eor	r23, r23
    4b84:	cb 01       	movw	r24, r22
    4b86:	97 f9       	bld	r25, 7
    4b88:	08 95       	ret

00004b8a <__mulsf3>:
    4b8a:	0b d0       	rcall	.+22     	; 0x4ba2 <__mulsf3x>
    4b8c:	c4 cf       	rjmp	.-120    	; 0x4b16 <__fp_round>
    4b8e:	b5 df       	rcall	.-150    	; 0x4afa <__fp_pscA>
    4b90:	28 f0       	brcs	.+10     	; 0x4b9c <__mulsf3+0x12>
    4b92:	ba df       	rcall	.-140    	; 0x4b08 <__fp_pscB>
    4b94:	18 f0       	brcs	.+6      	; 0x4b9c <__mulsf3+0x12>
    4b96:	95 23       	and	r25, r21
    4b98:	09 f0       	breq	.+2      	; 0x4b9c <__mulsf3+0x12>
    4b9a:	a6 cf       	rjmp	.-180    	; 0x4ae8 <__fp_inf>
    4b9c:	ab cf       	rjmp	.-170    	; 0x4af4 <__fp_nan>
    4b9e:	11 24       	eor	r1, r1
    4ba0:	ee cf       	rjmp	.-36     	; 0x4b7e <__fp_szero>

00004ba2 <__mulsf3x>:
    4ba2:	ca df       	rcall	.-108    	; 0x4b38 <__fp_split3>
    4ba4:	a0 f3       	brcs	.-24     	; 0x4b8e <__mulsf3+0x4>

00004ba6 <__mulsf3_pse>:
    4ba6:	95 9f       	mul	r25, r21
    4ba8:	d1 f3       	breq	.-12     	; 0x4b9e <__mulsf3+0x14>
    4baa:	95 0f       	add	r25, r21
    4bac:	50 e0       	ldi	r21, 0x00	; 0
    4bae:	55 1f       	adc	r21, r21
    4bb0:	62 9f       	mul	r22, r18
    4bb2:	f0 01       	movw	r30, r0
    4bb4:	72 9f       	mul	r23, r18
    4bb6:	bb 27       	eor	r27, r27
    4bb8:	f0 0d       	add	r31, r0
    4bba:	b1 1d       	adc	r27, r1
    4bbc:	63 9f       	mul	r22, r19
    4bbe:	aa 27       	eor	r26, r26
    4bc0:	f0 0d       	add	r31, r0
    4bc2:	b1 1d       	adc	r27, r1
    4bc4:	aa 1f       	adc	r26, r26
    4bc6:	64 9f       	mul	r22, r20
    4bc8:	66 27       	eor	r22, r22
    4bca:	b0 0d       	add	r27, r0
    4bcc:	a1 1d       	adc	r26, r1
    4bce:	66 1f       	adc	r22, r22
    4bd0:	82 9f       	mul	r24, r18
    4bd2:	22 27       	eor	r18, r18
    4bd4:	b0 0d       	add	r27, r0
    4bd6:	a1 1d       	adc	r26, r1
    4bd8:	62 1f       	adc	r22, r18
    4bda:	73 9f       	mul	r23, r19
    4bdc:	b0 0d       	add	r27, r0
    4bde:	a1 1d       	adc	r26, r1
    4be0:	62 1f       	adc	r22, r18
    4be2:	83 9f       	mul	r24, r19
    4be4:	a0 0d       	add	r26, r0
    4be6:	61 1d       	adc	r22, r1
    4be8:	22 1f       	adc	r18, r18
    4bea:	74 9f       	mul	r23, r20
    4bec:	33 27       	eor	r19, r19
    4bee:	a0 0d       	add	r26, r0
    4bf0:	61 1d       	adc	r22, r1
    4bf2:	23 1f       	adc	r18, r19
    4bf4:	84 9f       	mul	r24, r20
    4bf6:	60 0d       	add	r22, r0
    4bf8:	21 1d       	adc	r18, r1
    4bfa:	82 2f       	mov	r24, r18
    4bfc:	76 2f       	mov	r23, r22
    4bfe:	6a 2f       	mov	r22, r26
    4c00:	11 24       	eor	r1, r1
    4c02:	9f 57       	subi	r25, 0x7F	; 127
    4c04:	50 40       	sbci	r21, 0x00	; 0
    4c06:	8a f0       	brmi	.+34     	; 0x4c2a <__mulsf3_pse+0x84>
    4c08:	e1 f0       	breq	.+56     	; 0x4c42 <__mulsf3_pse+0x9c>
    4c0a:	88 23       	and	r24, r24
    4c0c:	4a f0       	brmi	.+18     	; 0x4c20 <__mulsf3_pse+0x7a>
    4c0e:	ee 0f       	add	r30, r30
    4c10:	ff 1f       	adc	r31, r31
    4c12:	bb 1f       	adc	r27, r27
    4c14:	66 1f       	adc	r22, r22
    4c16:	77 1f       	adc	r23, r23
    4c18:	88 1f       	adc	r24, r24
    4c1a:	91 50       	subi	r25, 0x01	; 1
    4c1c:	50 40       	sbci	r21, 0x00	; 0
    4c1e:	a9 f7       	brne	.-22     	; 0x4c0a <__mulsf3_pse+0x64>
    4c20:	9e 3f       	cpi	r25, 0xFE	; 254
    4c22:	51 05       	cpc	r21, r1
    4c24:	70 f0       	brcs	.+28     	; 0x4c42 <__mulsf3_pse+0x9c>
    4c26:	60 cf       	rjmp	.-320    	; 0x4ae8 <__fp_inf>
    4c28:	aa cf       	rjmp	.-172    	; 0x4b7e <__fp_szero>
    4c2a:	5f 3f       	cpi	r21, 0xFF	; 255
    4c2c:	ec f3       	brlt	.-6      	; 0x4c28 <__mulsf3_pse+0x82>
    4c2e:	98 3e       	cpi	r25, 0xE8	; 232
    4c30:	dc f3       	brlt	.-10     	; 0x4c28 <__mulsf3_pse+0x82>
    4c32:	86 95       	lsr	r24
    4c34:	77 95       	ror	r23
    4c36:	67 95       	ror	r22
    4c38:	b7 95       	ror	r27
    4c3a:	f7 95       	ror	r31
    4c3c:	e7 95       	ror	r30
    4c3e:	9f 5f       	subi	r25, 0xFF	; 255
    4c40:	c1 f7       	brne	.-16     	; 0x4c32 <__mulsf3_pse+0x8c>
    4c42:	fe 2b       	or	r31, r30
    4c44:	88 0f       	add	r24, r24
    4c46:	91 1d       	adc	r25, r1
    4c48:	96 95       	lsr	r25
    4c4a:	87 95       	ror	r24
    4c4c:	97 f9       	bld	r25, 7
    4c4e:	08 95       	ret

00004c50 <__tablejump2__>:
    4c50:	ee 0f       	add	r30, r30
    4c52:	ff 1f       	adc	r31, r31
    4c54:	88 1f       	adc	r24, r24
    4c56:	8b bf       	out	0x3b, r24	; 59
    4c58:	07 90       	elpm	r0, Z+
    4c5a:	f6 91       	elpm	r31, Z
    4c5c:	e0 2d       	mov	r30, r0
    4c5e:	19 94       	eijmp

00004c60 <calloc>:
    4c60:	0f 93       	push	r16
    4c62:	1f 93       	push	r17
    4c64:	cf 93       	push	r28
    4c66:	df 93       	push	r29
    4c68:	86 9f       	mul	r24, r22
    4c6a:	80 01       	movw	r16, r0
    4c6c:	87 9f       	mul	r24, r23
    4c6e:	10 0d       	add	r17, r0
    4c70:	96 9f       	mul	r25, r22
    4c72:	10 0d       	add	r17, r0
    4c74:	11 24       	eor	r1, r1
    4c76:	c8 01       	movw	r24, r16
    4c78:	0d d0       	rcall	.+26     	; 0x4c94 <malloc>
    4c7a:	ec 01       	movw	r28, r24
    4c7c:	00 97       	sbiw	r24, 0x00	; 0
    4c7e:	21 f0       	breq	.+8      	; 0x4c88 <calloc+0x28>
    4c80:	a8 01       	movw	r20, r16
    4c82:	60 e0       	ldi	r22, 0x00	; 0
    4c84:	70 e0       	ldi	r23, 0x00	; 0
    4c86:	34 d1       	rcall	.+616    	; 0x4ef0 <memset>
    4c88:	ce 01       	movw	r24, r28
    4c8a:	df 91       	pop	r29
    4c8c:	cf 91       	pop	r28
    4c8e:	1f 91       	pop	r17
    4c90:	0f 91       	pop	r16
    4c92:	08 95       	ret

00004c94 <malloc>:
    4c94:	0f 93       	push	r16
    4c96:	1f 93       	push	r17
    4c98:	cf 93       	push	r28
    4c9a:	df 93       	push	r29
    4c9c:	82 30       	cpi	r24, 0x02	; 2
    4c9e:	91 05       	cpc	r25, r1
    4ca0:	10 f4       	brcc	.+4      	; 0x4ca6 <malloc+0x12>
    4ca2:	82 e0       	ldi	r24, 0x02	; 2
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	e0 91 61 13 	lds	r30, 0x1361	; 0x801361 <__flp>
    4caa:	f0 91 62 13 	lds	r31, 0x1362	; 0x801362 <__flp+0x1>
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	a0 e0       	ldi	r26, 0x00	; 0
    4cb4:	b0 e0       	ldi	r27, 0x00	; 0
    4cb6:	30 97       	sbiw	r30, 0x00	; 0
    4cb8:	19 f1       	breq	.+70     	; 0x4d00 <malloc+0x6c>
    4cba:	40 81       	ld	r20, Z
    4cbc:	51 81       	ldd	r21, Z+1	; 0x01
    4cbe:	02 81       	ldd	r16, Z+2	; 0x02
    4cc0:	13 81       	ldd	r17, Z+3	; 0x03
    4cc2:	48 17       	cp	r20, r24
    4cc4:	59 07       	cpc	r21, r25
    4cc6:	c8 f0       	brcs	.+50     	; 0x4cfa <malloc+0x66>
    4cc8:	84 17       	cp	r24, r20
    4cca:	95 07       	cpc	r25, r21
    4ccc:	69 f4       	brne	.+26     	; 0x4ce8 <malloc+0x54>
    4cce:	10 97       	sbiw	r26, 0x00	; 0
    4cd0:	31 f0       	breq	.+12     	; 0x4cde <malloc+0x4a>
    4cd2:	12 96       	adiw	r26, 0x02	; 2
    4cd4:	0c 93       	st	X, r16
    4cd6:	12 97       	sbiw	r26, 0x02	; 2
    4cd8:	13 96       	adiw	r26, 0x03	; 3
    4cda:	1c 93       	st	X, r17
    4cdc:	27 c0       	rjmp	.+78     	; 0x4d2c <malloc+0x98>
    4cde:	00 93 61 13 	sts	0x1361, r16	; 0x801361 <__flp>
    4ce2:	10 93 62 13 	sts	0x1362, r17	; 0x801362 <__flp+0x1>
    4ce6:	22 c0       	rjmp	.+68     	; 0x4d2c <malloc+0x98>
    4ce8:	21 15       	cp	r18, r1
    4cea:	31 05       	cpc	r19, r1
    4cec:	19 f0       	breq	.+6      	; 0x4cf4 <malloc+0x60>
    4cee:	42 17       	cp	r20, r18
    4cf0:	53 07       	cpc	r21, r19
    4cf2:	18 f4       	brcc	.+6      	; 0x4cfa <malloc+0x66>
    4cf4:	9a 01       	movw	r18, r20
    4cf6:	bd 01       	movw	r22, r26
    4cf8:	ef 01       	movw	r28, r30
    4cfa:	df 01       	movw	r26, r30
    4cfc:	f8 01       	movw	r30, r16
    4cfe:	db cf       	rjmp	.-74     	; 0x4cb6 <malloc+0x22>
    4d00:	21 15       	cp	r18, r1
    4d02:	31 05       	cpc	r19, r1
    4d04:	f9 f0       	breq	.+62     	; 0x4d44 <malloc+0xb0>
    4d06:	28 1b       	sub	r18, r24
    4d08:	39 0b       	sbc	r19, r25
    4d0a:	24 30       	cpi	r18, 0x04	; 4
    4d0c:	31 05       	cpc	r19, r1
    4d0e:	80 f4       	brcc	.+32     	; 0x4d30 <malloc+0x9c>
    4d10:	8a 81       	ldd	r24, Y+2	; 0x02
    4d12:	9b 81       	ldd	r25, Y+3	; 0x03
    4d14:	61 15       	cp	r22, r1
    4d16:	71 05       	cpc	r23, r1
    4d18:	21 f0       	breq	.+8      	; 0x4d22 <malloc+0x8e>
    4d1a:	fb 01       	movw	r30, r22
    4d1c:	93 83       	std	Z+3, r25	; 0x03
    4d1e:	82 83       	std	Z+2, r24	; 0x02
    4d20:	04 c0       	rjmp	.+8      	; 0x4d2a <malloc+0x96>
    4d22:	90 93 62 13 	sts	0x1362, r25	; 0x801362 <__flp+0x1>
    4d26:	80 93 61 13 	sts	0x1361, r24	; 0x801361 <__flp>
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	32 96       	adiw	r30, 0x02	; 2
    4d2e:	44 c0       	rjmp	.+136    	; 0x4db8 <malloc+0x124>
    4d30:	fe 01       	movw	r30, r28
    4d32:	e2 0f       	add	r30, r18
    4d34:	f3 1f       	adc	r31, r19
    4d36:	81 93       	st	Z+, r24
    4d38:	91 93       	st	Z+, r25
    4d3a:	22 50       	subi	r18, 0x02	; 2
    4d3c:	31 09       	sbc	r19, r1
    4d3e:	39 83       	std	Y+1, r19	; 0x01
    4d40:	28 83       	st	Y, r18
    4d42:	3a c0       	rjmp	.+116    	; 0x4db8 <malloc+0x124>
    4d44:	20 91 5f 13 	lds	r18, 0x135F	; 0x80135f <__brkval>
    4d48:	30 91 60 13 	lds	r19, 0x1360	; 0x801360 <__brkval+0x1>
    4d4c:	23 2b       	or	r18, r19
    4d4e:	41 f4       	brne	.+16     	; 0x4d60 <malloc+0xcc>
    4d50:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4d54:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4d58:	30 93 60 13 	sts	0x1360, r19	; 0x801360 <__brkval+0x1>
    4d5c:	20 93 5f 13 	sts	0x135F, r18	; 0x80135f <__brkval>
    4d60:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4d64:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4d68:	21 15       	cp	r18, r1
    4d6a:	31 05       	cpc	r19, r1
    4d6c:	41 f4       	brne	.+16     	; 0x4d7e <malloc+0xea>
    4d6e:	2d b7       	in	r18, 0x3d	; 61
    4d70:	3e b7       	in	r19, 0x3e	; 62
    4d72:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4d76:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4d7a:	24 1b       	sub	r18, r20
    4d7c:	35 0b       	sbc	r19, r21
    4d7e:	e0 91 5f 13 	lds	r30, 0x135F	; 0x80135f <__brkval>
    4d82:	f0 91 60 13 	lds	r31, 0x1360	; 0x801360 <__brkval+0x1>
    4d86:	e2 17       	cp	r30, r18
    4d88:	f3 07       	cpc	r31, r19
    4d8a:	a0 f4       	brcc	.+40     	; 0x4db4 <malloc+0x120>
    4d8c:	2e 1b       	sub	r18, r30
    4d8e:	3f 0b       	sbc	r19, r31
    4d90:	28 17       	cp	r18, r24
    4d92:	39 07       	cpc	r19, r25
    4d94:	78 f0       	brcs	.+30     	; 0x4db4 <malloc+0x120>
    4d96:	ac 01       	movw	r20, r24
    4d98:	4e 5f       	subi	r20, 0xFE	; 254
    4d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    4d9c:	24 17       	cp	r18, r20
    4d9e:	35 07       	cpc	r19, r21
    4da0:	48 f0       	brcs	.+18     	; 0x4db4 <malloc+0x120>
    4da2:	4e 0f       	add	r20, r30
    4da4:	5f 1f       	adc	r21, r31
    4da6:	50 93 60 13 	sts	0x1360, r21	; 0x801360 <__brkval+0x1>
    4daa:	40 93 5f 13 	sts	0x135F, r20	; 0x80135f <__brkval>
    4dae:	81 93       	st	Z+, r24
    4db0:	91 93       	st	Z+, r25
    4db2:	02 c0       	rjmp	.+4      	; 0x4db8 <malloc+0x124>
    4db4:	e0 e0       	ldi	r30, 0x00	; 0
    4db6:	f0 e0       	ldi	r31, 0x00	; 0
    4db8:	cf 01       	movw	r24, r30
    4dba:	df 91       	pop	r29
    4dbc:	cf 91       	pop	r28
    4dbe:	1f 91       	pop	r17
    4dc0:	0f 91       	pop	r16
    4dc2:	08 95       	ret

00004dc4 <free>:
    4dc4:	cf 93       	push	r28
    4dc6:	df 93       	push	r29
    4dc8:	00 97       	sbiw	r24, 0x00	; 0
    4dca:	09 f4       	brne	.+2      	; 0x4dce <free+0xa>
    4dcc:	81 c0       	rjmp	.+258    	; 0x4ed0 <free+0x10c>
    4dce:	fc 01       	movw	r30, r24
    4dd0:	32 97       	sbiw	r30, 0x02	; 2
    4dd2:	13 82       	std	Z+3, r1	; 0x03
    4dd4:	12 82       	std	Z+2, r1	; 0x02
    4dd6:	a0 91 61 13 	lds	r26, 0x1361	; 0x801361 <__flp>
    4dda:	b0 91 62 13 	lds	r27, 0x1362	; 0x801362 <__flp+0x1>
    4dde:	10 97       	sbiw	r26, 0x00	; 0
    4de0:	81 f4       	brne	.+32     	; 0x4e02 <free+0x3e>
    4de2:	20 81       	ld	r18, Z
    4de4:	31 81       	ldd	r19, Z+1	; 0x01
    4de6:	82 0f       	add	r24, r18
    4de8:	93 1f       	adc	r25, r19
    4dea:	20 91 5f 13 	lds	r18, 0x135F	; 0x80135f <__brkval>
    4dee:	30 91 60 13 	lds	r19, 0x1360	; 0x801360 <__brkval+0x1>
    4df2:	28 17       	cp	r18, r24
    4df4:	39 07       	cpc	r19, r25
    4df6:	51 f5       	brne	.+84     	; 0x4e4c <free+0x88>
    4df8:	f0 93 60 13 	sts	0x1360, r31	; 0x801360 <__brkval+0x1>
    4dfc:	e0 93 5f 13 	sts	0x135F, r30	; 0x80135f <__brkval>
    4e00:	67 c0       	rjmp	.+206    	; 0x4ed0 <free+0x10c>
    4e02:	ed 01       	movw	r28, r26
    4e04:	20 e0       	ldi	r18, 0x00	; 0
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	ce 17       	cp	r28, r30
    4e0a:	df 07       	cpc	r29, r31
    4e0c:	40 f4       	brcc	.+16     	; 0x4e1e <free+0x5a>
    4e0e:	4a 81       	ldd	r20, Y+2	; 0x02
    4e10:	5b 81       	ldd	r21, Y+3	; 0x03
    4e12:	9e 01       	movw	r18, r28
    4e14:	41 15       	cp	r20, r1
    4e16:	51 05       	cpc	r21, r1
    4e18:	f1 f0       	breq	.+60     	; 0x4e56 <free+0x92>
    4e1a:	ea 01       	movw	r28, r20
    4e1c:	f5 cf       	rjmp	.-22     	; 0x4e08 <free+0x44>
    4e1e:	d3 83       	std	Z+3, r29	; 0x03
    4e20:	c2 83       	std	Z+2, r28	; 0x02
    4e22:	40 81       	ld	r20, Z
    4e24:	51 81       	ldd	r21, Z+1	; 0x01
    4e26:	84 0f       	add	r24, r20
    4e28:	95 1f       	adc	r25, r21
    4e2a:	c8 17       	cp	r28, r24
    4e2c:	d9 07       	cpc	r29, r25
    4e2e:	59 f4       	brne	.+22     	; 0x4e46 <free+0x82>
    4e30:	88 81       	ld	r24, Y
    4e32:	99 81       	ldd	r25, Y+1	; 0x01
    4e34:	84 0f       	add	r24, r20
    4e36:	95 1f       	adc	r25, r21
    4e38:	02 96       	adiw	r24, 0x02	; 2
    4e3a:	91 83       	std	Z+1, r25	; 0x01
    4e3c:	80 83       	st	Z, r24
    4e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e40:	9b 81       	ldd	r25, Y+3	; 0x03
    4e42:	93 83       	std	Z+3, r25	; 0x03
    4e44:	82 83       	std	Z+2, r24	; 0x02
    4e46:	21 15       	cp	r18, r1
    4e48:	31 05       	cpc	r19, r1
    4e4a:	29 f4       	brne	.+10     	; 0x4e56 <free+0x92>
    4e4c:	f0 93 62 13 	sts	0x1362, r31	; 0x801362 <__flp+0x1>
    4e50:	e0 93 61 13 	sts	0x1361, r30	; 0x801361 <__flp>
    4e54:	3d c0       	rjmp	.+122    	; 0x4ed0 <free+0x10c>
    4e56:	e9 01       	movw	r28, r18
    4e58:	fb 83       	std	Y+3, r31	; 0x03
    4e5a:	ea 83       	std	Y+2, r30	; 0x02
    4e5c:	49 91       	ld	r20, Y+
    4e5e:	59 91       	ld	r21, Y+
    4e60:	c4 0f       	add	r28, r20
    4e62:	d5 1f       	adc	r29, r21
    4e64:	ec 17       	cp	r30, r28
    4e66:	fd 07       	cpc	r31, r29
    4e68:	61 f4       	brne	.+24     	; 0x4e82 <free+0xbe>
    4e6a:	80 81       	ld	r24, Z
    4e6c:	91 81       	ldd	r25, Z+1	; 0x01
    4e6e:	84 0f       	add	r24, r20
    4e70:	95 1f       	adc	r25, r21
    4e72:	02 96       	adiw	r24, 0x02	; 2
    4e74:	e9 01       	movw	r28, r18
    4e76:	99 83       	std	Y+1, r25	; 0x01
    4e78:	88 83       	st	Y, r24
    4e7a:	82 81       	ldd	r24, Z+2	; 0x02
    4e7c:	93 81       	ldd	r25, Z+3	; 0x03
    4e7e:	9b 83       	std	Y+3, r25	; 0x03
    4e80:	8a 83       	std	Y+2, r24	; 0x02
    4e82:	e0 e0       	ldi	r30, 0x00	; 0
    4e84:	f0 e0       	ldi	r31, 0x00	; 0
    4e86:	12 96       	adiw	r26, 0x02	; 2
    4e88:	8d 91       	ld	r24, X+
    4e8a:	9c 91       	ld	r25, X
    4e8c:	13 97       	sbiw	r26, 0x03	; 3
    4e8e:	00 97       	sbiw	r24, 0x00	; 0
    4e90:	19 f0       	breq	.+6      	; 0x4e98 <free+0xd4>
    4e92:	fd 01       	movw	r30, r26
    4e94:	dc 01       	movw	r26, r24
    4e96:	f7 cf       	rjmp	.-18     	; 0x4e86 <free+0xc2>
    4e98:	8d 91       	ld	r24, X+
    4e9a:	9c 91       	ld	r25, X
    4e9c:	11 97       	sbiw	r26, 0x01	; 1
    4e9e:	9d 01       	movw	r18, r26
    4ea0:	2e 5f       	subi	r18, 0xFE	; 254
    4ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea4:	82 0f       	add	r24, r18
    4ea6:	93 1f       	adc	r25, r19
    4ea8:	20 91 5f 13 	lds	r18, 0x135F	; 0x80135f <__brkval>
    4eac:	30 91 60 13 	lds	r19, 0x1360	; 0x801360 <__brkval+0x1>
    4eb0:	28 17       	cp	r18, r24
    4eb2:	39 07       	cpc	r19, r25
    4eb4:	69 f4       	brne	.+26     	; 0x4ed0 <free+0x10c>
    4eb6:	30 97       	sbiw	r30, 0x00	; 0
    4eb8:	29 f4       	brne	.+10     	; 0x4ec4 <free+0x100>
    4eba:	10 92 62 13 	sts	0x1362, r1	; 0x801362 <__flp+0x1>
    4ebe:	10 92 61 13 	sts	0x1361, r1	; 0x801361 <__flp>
    4ec2:	02 c0       	rjmp	.+4      	; 0x4ec8 <free+0x104>
    4ec4:	13 82       	std	Z+3, r1	; 0x03
    4ec6:	12 82       	std	Z+2, r1	; 0x02
    4ec8:	b0 93 60 13 	sts	0x1360, r27	; 0x801360 <__brkval+0x1>
    4ecc:	a0 93 5f 13 	sts	0x135F, r26	; 0x80135f <__brkval>
    4ed0:	df 91       	pop	r29
    4ed2:	cf 91       	pop	r28
    4ed4:	08 95       	ret

00004ed6 <abort>:
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	f8 94       	cli
    4edc:	7d c3       	rjmp	.+1786   	; 0x55d8 <_exit>

00004ede <memcpy>:
    4ede:	fb 01       	movw	r30, r22
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <memcpy+0xa>
    4ee4:	01 90       	ld	r0, Z+
    4ee6:	0d 92       	st	X+, r0
    4ee8:	41 50       	subi	r20, 0x01	; 1
    4eea:	50 40       	sbci	r21, 0x00	; 0
    4eec:	d8 f7       	brcc	.-10     	; 0x4ee4 <memcpy+0x6>
    4eee:	08 95       	ret

00004ef0 <memset>:
    4ef0:	dc 01       	movw	r26, r24
    4ef2:	01 c0       	rjmp	.+2      	; 0x4ef6 <memset+0x6>
    4ef4:	6d 93       	st	X+, r22
    4ef6:	41 50       	subi	r20, 0x01	; 1
    4ef8:	50 40       	sbci	r21, 0x00	; 0
    4efa:	e0 f7       	brcc	.-8      	; 0x4ef4 <memset+0x4>
    4efc:	08 95       	ret

00004efe <strcasestr>:
    4efe:	fb 01       	movw	r30, r22
    4f00:	51 91       	ld	r21, Z+
    4f02:	55 23       	and	r21, r21
    4f04:	b1 f0       	breq	.+44     	; 0x4f32 <strcasestr+0x34>
    4f06:	bf 01       	movw	r22, r30
    4f08:	dc 01       	movw	r26, r24
    4f0a:	05 2e       	mov	r0, r21
    4f0c:	4d 91       	ld	r20, X+
    4f0e:	44 23       	and	r20, r20
    4f10:	69 f0       	breq	.+26     	; 0x4f2c <strcasestr+0x2e>
    4f12:	10 d0       	rcall	.+32     	; 0x4f34 <strcasestr+0x36>
    4f14:	d9 f7       	brne	.-10     	; 0x4f0c <strcasestr+0xe>
    4f16:	cd 01       	movw	r24, r26
    4f18:	01 90       	ld	r0, Z+
    4f1a:	00 20       	and	r0, r0
    4f1c:	49 f0       	breq	.+18     	; 0x4f30 <strcasestr+0x32>
    4f1e:	4d 91       	ld	r20, X+
    4f20:	41 11       	cpse	r20, r1
    4f22:	08 d0       	rcall	.+16     	; 0x4f34 <strcasestr+0x36>
    4f24:	c9 f3       	breq	.-14     	; 0x4f18 <strcasestr+0x1a>
    4f26:	fb 01       	movw	r30, r22
    4f28:	41 11       	cpse	r20, r1
    4f2a:	ee cf       	rjmp	.-36     	; 0x4f08 <strcasestr+0xa>
    4f2c:	81 e0       	ldi	r24, 0x01	; 1
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	01 97       	sbiw	r24, 0x01	; 1
    4f32:	08 95       	ret
    4f34:	40 25       	eor	r20, r0
    4f36:	39 f0       	breq	.+14     	; 0x4f46 <strcasestr+0x48>
    4f38:	40 32       	cpi	r20, 0x20	; 32
    4f3a:	29 f4       	brne	.+10     	; 0x4f46 <strcasestr+0x48>
    4f3c:	40 29       	or	r20, r0
    4f3e:	4b 57       	subi	r20, 0x7B	; 123
    4f40:	46 5e       	subi	r20, 0xE6	; 230
    4f42:	08 f0       	brcs	.+2      	; 0x4f46 <strcasestr+0x48>
    4f44:	18 94       	sez
    4f46:	08 95       	ret

00004f48 <strcat>:
    4f48:	fb 01       	movw	r30, r22
    4f4a:	dc 01       	movw	r26, r24
    4f4c:	0d 90       	ld	r0, X+
    4f4e:	00 20       	and	r0, r0
    4f50:	e9 f7       	brne	.-6      	; 0x4f4c <strcat+0x4>
    4f52:	11 97       	sbiw	r26, 0x01	; 1
    4f54:	01 90       	ld	r0, Z+
    4f56:	0d 92       	st	X+, r0
    4f58:	00 20       	and	r0, r0
    4f5a:	e1 f7       	brne	.-8      	; 0x4f54 <strcat+0xc>
    4f5c:	08 95       	ret

00004f5e <strcpy>:
    4f5e:	fb 01       	movw	r30, r22
    4f60:	dc 01       	movw	r26, r24
    4f62:	01 90       	ld	r0, Z+
    4f64:	0d 92       	st	X+, r0
    4f66:	00 20       	and	r0, r0
    4f68:	e1 f7       	brne	.-8      	; 0x4f62 <strcpy+0x4>
    4f6a:	08 95       	ret

00004f6c <strncasecmp>:
    4f6c:	fb 01       	movw	r30, r22
    4f6e:	dc 01       	movw	r26, r24
    4f70:	41 50       	subi	r20, 0x01	; 1
    4f72:	50 40       	sbci	r21, 0x00	; 0
    4f74:	88 f0       	brcs	.+34     	; 0x4f98 <strncasecmp+0x2c>
    4f76:	8d 91       	ld	r24, X+
    4f78:	81 34       	cpi	r24, 0x41	; 65
    4f7a:	1c f0       	brlt	.+6      	; 0x4f82 <strncasecmp+0x16>
    4f7c:	8b 35       	cpi	r24, 0x5B	; 91
    4f7e:	0c f4       	brge	.+2      	; 0x4f82 <strncasecmp+0x16>
    4f80:	80 5e       	subi	r24, 0xE0	; 224
    4f82:	61 91       	ld	r22, Z+
    4f84:	61 34       	cpi	r22, 0x41	; 65
    4f86:	1c f0       	brlt	.+6      	; 0x4f8e <strncasecmp+0x22>
    4f88:	6b 35       	cpi	r22, 0x5B	; 91
    4f8a:	0c f4       	brge	.+2      	; 0x4f8e <strncasecmp+0x22>
    4f8c:	60 5e       	subi	r22, 0xE0	; 224
    4f8e:	86 1b       	sub	r24, r22
    4f90:	61 11       	cpse	r22, r1
    4f92:	71 f3       	breq	.-36     	; 0x4f70 <strncasecmp+0x4>
    4f94:	99 0b       	sbc	r25, r25
    4f96:	08 95       	ret
    4f98:	88 1b       	sub	r24, r24
    4f9a:	fc cf       	rjmp	.-8      	; 0x4f94 <strncasecmp+0x28>

00004f9c <printf>:
    4f9c:	cf 93       	push	r28
    4f9e:	df 93       	push	r29
    4fa0:	cd b7       	in	r28, 0x3d	; 61
    4fa2:	de b7       	in	r29, 0x3e	; 62
    4fa4:	ae 01       	movw	r20, r28
    4fa6:	4a 5f       	subi	r20, 0xFA	; 250
    4fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    4faa:	fa 01       	movw	r30, r20
    4fac:	61 91       	ld	r22, Z+
    4fae:	71 91       	ld	r23, Z+
    4fb0:	af 01       	movw	r20, r30
    4fb2:	80 91 65 13 	lds	r24, 0x1365	; 0x801365 <__iob+0x2>
    4fb6:	90 91 66 13 	lds	r25, 0x1366	; 0x801366 <__iob+0x3>
    4fba:	61 d0       	rcall	.+194    	; 0x507e <vfprintf>
    4fbc:	df 91       	pop	r29
    4fbe:	cf 91       	pop	r28
    4fc0:	08 95       	ret

00004fc2 <puts>:
    4fc2:	0f 93       	push	r16
    4fc4:	1f 93       	push	r17
    4fc6:	cf 93       	push	r28
    4fc8:	df 93       	push	r29
    4fca:	e0 91 65 13 	lds	r30, 0x1365	; 0x801365 <__iob+0x2>
    4fce:	f0 91 66 13 	lds	r31, 0x1366	; 0x801366 <__iob+0x3>
    4fd2:	23 81       	ldd	r18, Z+3	; 0x03
    4fd4:	21 ff       	sbrs	r18, 1
    4fd6:	1b c0       	rjmp	.+54     	; 0x500e <puts+0x4c>
    4fd8:	8c 01       	movw	r16, r24
    4fda:	d0 e0       	ldi	r29, 0x00	; 0
    4fdc:	c0 e0       	ldi	r28, 0x00	; 0
    4fde:	f8 01       	movw	r30, r16
    4fe0:	81 91       	ld	r24, Z+
    4fe2:	8f 01       	movw	r16, r30
    4fe4:	60 91 65 13 	lds	r22, 0x1365	; 0x801365 <__iob+0x2>
    4fe8:	70 91 66 13 	lds	r23, 0x1366	; 0x801366 <__iob+0x3>
    4fec:	db 01       	movw	r26, r22
    4fee:	18 96       	adiw	r26, 0x08	; 8
    4ff0:	ed 91       	ld	r30, X+
    4ff2:	fc 91       	ld	r31, X
    4ff4:	19 97       	sbiw	r26, 0x09	; 9
    4ff6:	88 23       	and	r24, r24
    4ff8:	31 f0       	breq	.+12     	; 0x5006 <puts+0x44>
    4ffa:	19 95       	eicall
    4ffc:	89 2b       	or	r24, r25
    4ffe:	79 f3       	breq	.-34     	; 0x4fde <puts+0x1c>
    5000:	df ef       	ldi	r29, 0xFF	; 255
    5002:	cf ef       	ldi	r28, 0xFF	; 255
    5004:	ec cf       	rjmp	.-40     	; 0x4fde <puts+0x1c>
    5006:	8a e0       	ldi	r24, 0x0A	; 10
    5008:	19 95       	eicall
    500a:	89 2b       	or	r24, r25
    500c:	19 f0       	breq	.+6      	; 0x5014 <puts+0x52>
    500e:	8f ef       	ldi	r24, 0xFF	; 255
    5010:	9f ef       	ldi	r25, 0xFF	; 255
    5012:	02 c0       	rjmp	.+4      	; 0x5018 <puts+0x56>
    5014:	8d 2f       	mov	r24, r29
    5016:	9c 2f       	mov	r25, r28
    5018:	df 91       	pop	r29
    501a:	cf 91       	pop	r28
    501c:	1f 91       	pop	r17
    501e:	0f 91       	pop	r16
    5020:	08 95       	ret

00005022 <sprintf>:
    5022:	0f 93       	push	r16
    5024:	1f 93       	push	r17
    5026:	cf 93       	push	r28
    5028:	df 93       	push	r29
    502a:	cd b7       	in	r28, 0x3d	; 61
    502c:	de b7       	in	r29, 0x3e	; 62
    502e:	2e 97       	sbiw	r28, 0x0e	; 14
    5030:	0f b6       	in	r0, 0x3f	; 63
    5032:	f8 94       	cli
    5034:	de bf       	out	0x3e, r29	; 62
    5036:	0f be       	out	0x3f, r0	; 63
    5038:	cd bf       	out	0x3d, r28	; 61
    503a:	0e 89       	ldd	r16, Y+22	; 0x16
    503c:	1f 89       	ldd	r17, Y+23	; 0x17
    503e:	86 e0       	ldi	r24, 0x06	; 6
    5040:	8c 83       	std	Y+4, r24	; 0x04
    5042:	1a 83       	std	Y+2, r17	; 0x02
    5044:	09 83       	std	Y+1, r16	; 0x01
    5046:	8f ef       	ldi	r24, 0xFF	; 255
    5048:	9f e7       	ldi	r25, 0x7F	; 127
    504a:	9e 83       	std	Y+6, r25	; 0x06
    504c:	8d 83       	std	Y+5, r24	; 0x05
    504e:	ae 01       	movw	r20, r28
    5050:	46 5e       	subi	r20, 0xE6	; 230
    5052:	5f 4f       	sbci	r21, 0xFF	; 255
    5054:	68 8d       	ldd	r22, Y+24	; 0x18
    5056:	79 8d       	ldd	r23, Y+25	; 0x19
    5058:	ce 01       	movw	r24, r28
    505a:	01 96       	adiw	r24, 0x01	; 1
    505c:	10 d0       	rcall	.+32     	; 0x507e <vfprintf>
    505e:	ef 81       	ldd	r30, Y+7	; 0x07
    5060:	f8 85       	ldd	r31, Y+8	; 0x08
    5062:	e0 0f       	add	r30, r16
    5064:	f1 1f       	adc	r31, r17
    5066:	10 82       	st	Z, r1
    5068:	2e 96       	adiw	r28, 0x0e	; 14
    506a:	0f b6       	in	r0, 0x3f	; 63
    506c:	f8 94       	cli
    506e:	de bf       	out	0x3e, r29	; 62
    5070:	0f be       	out	0x3f, r0	; 63
    5072:	cd bf       	out	0x3d, r28	; 61
    5074:	df 91       	pop	r29
    5076:	cf 91       	pop	r28
    5078:	1f 91       	pop	r17
    507a:	0f 91       	pop	r16
    507c:	08 95       	ret

0000507e <vfprintf>:
    507e:	2f 92       	push	r2
    5080:	3f 92       	push	r3
    5082:	4f 92       	push	r4
    5084:	5f 92       	push	r5
    5086:	6f 92       	push	r6
    5088:	7f 92       	push	r7
    508a:	8f 92       	push	r8
    508c:	9f 92       	push	r9
    508e:	af 92       	push	r10
    5090:	bf 92       	push	r11
    5092:	cf 92       	push	r12
    5094:	df 92       	push	r13
    5096:	ef 92       	push	r14
    5098:	ff 92       	push	r15
    509a:	0f 93       	push	r16
    509c:	1f 93       	push	r17
    509e:	cf 93       	push	r28
    50a0:	df 93       	push	r29
    50a2:	cd b7       	in	r28, 0x3d	; 61
    50a4:	de b7       	in	r29, 0x3e	; 62
    50a6:	2b 97       	sbiw	r28, 0x0b	; 11
    50a8:	0f b6       	in	r0, 0x3f	; 63
    50aa:	f8 94       	cli
    50ac:	de bf       	out	0x3e, r29	; 62
    50ae:	0f be       	out	0x3f, r0	; 63
    50b0:	cd bf       	out	0x3d, r28	; 61
    50b2:	6c 01       	movw	r12, r24
    50b4:	7b 01       	movw	r14, r22
    50b6:	8a 01       	movw	r16, r20
    50b8:	fc 01       	movw	r30, r24
    50ba:	17 82       	std	Z+7, r1	; 0x07
    50bc:	16 82       	std	Z+6, r1	; 0x06
    50be:	83 81       	ldd	r24, Z+3	; 0x03
    50c0:	81 ff       	sbrs	r24, 1
    50c2:	bf c1       	rjmp	.+894    	; 0x5442 <vfprintf+0x3c4>
    50c4:	ce 01       	movw	r24, r28
    50c6:	01 96       	adiw	r24, 0x01	; 1
    50c8:	3c 01       	movw	r6, r24
    50ca:	f6 01       	movw	r30, r12
    50cc:	93 81       	ldd	r25, Z+3	; 0x03
    50ce:	f7 01       	movw	r30, r14
    50d0:	93 fd       	sbrc	r25, 3
    50d2:	85 91       	lpm	r24, Z+
    50d4:	93 ff       	sbrs	r25, 3
    50d6:	81 91       	ld	r24, Z+
    50d8:	7f 01       	movw	r14, r30
    50da:	88 23       	and	r24, r24
    50dc:	09 f4       	brne	.+2      	; 0x50e0 <vfprintf+0x62>
    50de:	ad c1       	rjmp	.+858    	; 0x543a <vfprintf+0x3bc>
    50e0:	85 32       	cpi	r24, 0x25	; 37
    50e2:	39 f4       	brne	.+14     	; 0x50f2 <vfprintf+0x74>
    50e4:	93 fd       	sbrc	r25, 3
    50e6:	85 91       	lpm	r24, Z+
    50e8:	93 ff       	sbrs	r25, 3
    50ea:	81 91       	ld	r24, Z+
    50ec:	7f 01       	movw	r14, r30
    50ee:	85 32       	cpi	r24, 0x25	; 37
    50f0:	21 f4       	brne	.+8      	; 0x50fa <vfprintf+0x7c>
    50f2:	b6 01       	movw	r22, r12
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	d6 d1       	rcall	.+940    	; 0x54a4 <fputc>
    50f8:	e8 cf       	rjmp	.-48     	; 0x50ca <vfprintf+0x4c>
    50fa:	91 2c       	mov	r9, r1
    50fc:	21 2c       	mov	r2, r1
    50fe:	31 2c       	mov	r3, r1
    5100:	ff e1       	ldi	r31, 0x1F	; 31
    5102:	f3 15       	cp	r31, r3
    5104:	d8 f0       	brcs	.+54     	; 0x513c <vfprintf+0xbe>
    5106:	8b 32       	cpi	r24, 0x2B	; 43
    5108:	79 f0       	breq	.+30     	; 0x5128 <vfprintf+0xaa>
    510a:	38 f4       	brcc	.+14     	; 0x511a <vfprintf+0x9c>
    510c:	80 32       	cpi	r24, 0x20	; 32
    510e:	79 f0       	breq	.+30     	; 0x512e <vfprintf+0xb0>
    5110:	83 32       	cpi	r24, 0x23	; 35
    5112:	a1 f4       	brne	.+40     	; 0x513c <vfprintf+0xbe>
    5114:	23 2d       	mov	r18, r3
    5116:	20 61       	ori	r18, 0x10	; 16
    5118:	1d c0       	rjmp	.+58     	; 0x5154 <vfprintf+0xd6>
    511a:	8d 32       	cpi	r24, 0x2D	; 45
    511c:	61 f0       	breq	.+24     	; 0x5136 <vfprintf+0xb8>
    511e:	80 33       	cpi	r24, 0x30	; 48
    5120:	69 f4       	brne	.+26     	; 0x513c <vfprintf+0xbe>
    5122:	23 2d       	mov	r18, r3
    5124:	21 60       	ori	r18, 0x01	; 1
    5126:	16 c0       	rjmp	.+44     	; 0x5154 <vfprintf+0xd6>
    5128:	83 2d       	mov	r24, r3
    512a:	82 60       	ori	r24, 0x02	; 2
    512c:	38 2e       	mov	r3, r24
    512e:	e3 2d       	mov	r30, r3
    5130:	e4 60       	ori	r30, 0x04	; 4
    5132:	3e 2e       	mov	r3, r30
    5134:	2a c0       	rjmp	.+84     	; 0x518a <vfprintf+0x10c>
    5136:	f3 2d       	mov	r31, r3
    5138:	f8 60       	ori	r31, 0x08	; 8
    513a:	1d c0       	rjmp	.+58     	; 0x5176 <vfprintf+0xf8>
    513c:	37 fc       	sbrc	r3, 7
    513e:	2d c0       	rjmp	.+90     	; 0x519a <vfprintf+0x11c>
    5140:	20 ed       	ldi	r18, 0xD0	; 208
    5142:	28 0f       	add	r18, r24
    5144:	2a 30       	cpi	r18, 0x0A	; 10
    5146:	40 f0       	brcs	.+16     	; 0x5158 <vfprintf+0xda>
    5148:	8e 32       	cpi	r24, 0x2E	; 46
    514a:	b9 f4       	brne	.+46     	; 0x517a <vfprintf+0xfc>
    514c:	36 fc       	sbrc	r3, 6
    514e:	75 c1       	rjmp	.+746    	; 0x543a <vfprintf+0x3bc>
    5150:	23 2d       	mov	r18, r3
    5152:	20 64       	ori	r18, 0x40	; 64
    5154:	32 2e       	mov	r3, r18
    5156:	19 c0       	rjmp	.+50     	; 0x518a <vfprintf+0x10c>
    5158:	36 fe       	sbrs	r3, 6
    515a:	06 c0       	rjmp	.+12     	; 0x5168 <vfprintf+0xea>
    515c:	8a e0       	ldi	r24, 0x0A	; 10
    515e:	98 9e       	mul	r9, r24
    5160:	20 0d       	add	r18, r0
    5162:	11 24       	eor	r1, r1
    5164:	92 2e       	mov	r9, r18
    5166:	11 c0       	rjmp	.+34     	; 0x518a <vfprintf+0x10c>
    5168:	ea e0       	ldi	r30, 0x0A	; 10
    516a:	2e 9e       	mul	r2, r30
    516c:	20 0d       	add	r18, r0
    516e:	11 24       	eor	r1, r1
    5170:	22 2e       	mov	r2, r18
    5172:	f3 2d       	mov	r31, r3
    5174:	f0 62       	ori	r31, 0x20	; 32
    5176:	3f 2e       	mov	r3, r31
    5178:	08 c0       	rjmp	.+16     	; 0x518a <vfprintf+0x10c>
    517a:	8c 36       	cpi	r24, 0x6C	; 108
    517c:	21 f4       	brne	.+8      	; 0x5186 <vfprintf+0x108>
    517e:	83 2d       	mov	r24, r3
    5180:	80 68       	ori	r24, 0x80	; 128
    5182:	38 2e       	mov	r3, r24
    5184:	02 c0       	rjmp	.+4      	; 0x518a <vfprintf+0x10c>
    5186:	88 36       	cpi	r24, 0x68	; 104
    5188:	41 f4       	brne	.+16     	; 0x519a <vfprintf+0x11c>
    518a:	f7 01       	movw	r30, r14
    518c:	93 fd       	sbrc	r25, 3
    518e:	85 91       	lpm	r24, Z+
    5190:	93 ff       	sbrs	r25, 3
    5192:	81 91       	ld	r24, Z+
    5194:	7f 01       	movw	r14, r30
    5196:	81 11       	cpse	r24, r1
    5198:	b3 cf       	rjmp	.-154    	; 0x5100 <vfprintf+0x82>
    519a:	98 2f       	mov	r25, r24
    519c:	9f 7d       	andi	r25, 0xDF	; 223
    519e:	95 54       	subi	r25, 0x45	; 69
    51a0:	93 30       	cpi	r25, 0x03	; 3
    51a2:	28 f4       	brcc	.+10     	; 0x51ae <vfprintf+0x130>
    51a4:	0c 5f       	subi	r16, 0xFC	; 252
    51a6:	1f 4f       	sbci	r17, 0xFF	; 255
    51a8:	9f e3       	ldi	r25, 0x3F	; 63
    51aa:	99 83       	std	Y+1, r25	; 0x01
    51ac:	0d c0       	rjmp	.+26     	; 0x51c8 <vfprintf+0x14a>
    51ae:	83 36       	cpi	r24, 0x63	; 99
    51b0:	31 f0       	breq	.+12     	; 0x51be <vfprintf+0x140>
    51b2:	83 37       	cpi	r24, 0x73	; 115
    51b4:	71 f0       	breq	.+28     	; 0x51d2 <vfprintf+0x154>
    51b6:	83 35       	cpi	r24, 0x53	; 83
    51b8:	09 f0       	breq	.+2      	; 0x51bc <vfprintf+0x13e>
    51ba:	55 c0       	rjmp	.+170    	; 0x5266 <vfprintf+0x1e8>
    51bc:	20 c0       	rjmp	.+64     	; 0x51fe <vfprintf+0x180>
    51be:	f8 01       	movw	r30, r16
    51c0:	80 81       	ld	r24, Z
    51c2:	89 83       	std	Y+1, r24	; 0x01
    51c4:	0e 5f       	subi	r16, 0xFE	; 254
    51c6:	1f 4f       	sbci	r17, 0xFF	; 255
    51c8:	88 24       	eor	r8, r8
    51ca:	83 94       	inc	r8
    51cc:	91 2c       	mov	r9, r1
    51ce:	53 01       	movw	r10, r6
    51d0:	12 c0       	rjmp	.+36     	; 0x51f6 <vfprintf+0x178>
    51d2:	28 01       	movw	r4, r16
    51d4:	f2 e0       	ldi	r31, 0x02	; 2
    51d6:	4f 0e       	add	r4, r31
    51d8:	51 1c       	adc	r5, r1
    51da:	f8 01       	movw	r30, r16
    51dc:	a0 80       	ld	r10, Z
    51de:	b1 80       	ldd	r11, Z+1	; 0x01
    51e0:	36 fe       	sbrs	r3, 6
    51e2:	03 c0       	rjmp	.+6      	; 0x51ea <vfprintf+0x16c>
    51e4:	69 2d       	mov	r22, r9
    51e6:	70 e0       	ldi	r23, 0x00	; 0
    51e8:	02 c0       	rjmp	.+4      	; 0x51ee <vfprintf+0x170>
    51ea:	6f ef       	ldi	r22, 0xFF	; 255
    51ec:	7f ef       	ldi	r23, 0xFF	; 255
    51ee:	c5 01       	movw	r24, r10
    51f0:	4e d1       	rcall	.+668    	; 0x548e <strnlen>
    51f2:	4c 01       	movw	r8, r24
    51f4:	82 01       	movw	r16, r4
    51f6:	f3 2d       	mov	r31, r3
    51f8:	ff 77       	andi	r31, 0x7F	; 127
    51fa:	3f 2e       	mov	r3, r31
    51fc:	15 c0       	rjmp	.+42     	; 0x5228 <vfprintf+0x1aa>
    51fe:	28 01       	movw	r4, r16
    5200:	22 e0       	ldi	r18, 0x02	; 2
    5202:	42 0e       	add	r4, r18
    5204:	51 1c       	adc	r5, r1
    5206:	f8 01       	movw	r30, r16
    5208:	a0 80       	ld	r10, Z
    520a:	b1 80       	ldd	r11, Z+1	; 0x01
    520c:	36 fe       	sbrs	r3, 6
    520e:	03 c0       	rjmp	.+6      	; 0x5216 <vfprintf+0x198>
    5210:	69 2d       	mov	r22, r9
    5212:	70 e0       	ldi	r23, 0x00	; 0
    5214:	02 c0       	rjmp	.+4      	; 0x521a <vfprintf+0x19c>
    5216:	6f ef       	ldi	r22, 0xFF	; 255
    5218:	7f ef       	ldi	r23, 0xFF	; 255
    521a:	c5 01       	movw	r24, r10
    521c:	2d d1       	rcall	.+602    	; 0x5478 <strnlen_P>
    521e:	4c 01       	movw	r8, r24
    5220:	f3 2d       	mov	r31, r3
    5222:	f0 68       	ori	r31, 0x80	; 128
    5224:	3f 2e       	mov	r3, r31
    5226:	82 01       	movw	r16, r4
    5228:	33 fc       	sbrc	r3, 3
    522a:	19 c0       	rjmp	.+50     	; 0x525e <vfprintf+0x1e0>
    522c:	82 2d       	mov	r24, r2
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	88 16       	cp	r8, r24
    5232:	99 06       	cpc	r9, r25
    5234:	a0 f4       	brcc	.+40     	; 0x525e <vfprintf+0x1e0>
    5236:	b6 01       	movw	r22, r12
    5238:	80 e2       	ldi	r24, 0x20	; 32
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	33 d1       	rcall	.+614    	; 0x54a4 <fputc>
    523e:	2a 94       	dec	r2
    5240:	f5 cf       	rjmp	.-22     	; 0x522c <vfprintf+0x1ae>
    5242:	f5 01       	movw	r30, r10
    5244:	37 fc       	sbrc	r3, 7
    5246:	85 91       	lpm	r24, Z+
    5248:	37 fe       	sbrs	r3, 7
    524a:	81 91       	ld	r24, Z+
    524c:	5f 01       	movw	r10, r30
    524e:	b6 01       	movw	r22, r12
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	28 d1       	rcall	.+592    	; 0x54a4 <fputc>
    5254:	21 10       	cpse	r2, r1
    5256:	2a 94       	dec	r2
    5258:	21 e0       	ldi	r18, 0x01	; 1
    525a:	82 1a       	sub	r8, r18
    525c:	91 08       	sbc	r9, r1
    525e:	81 14       	cp	r8, r1
    5260:	91 04       	cpc	r9, r1
    5262:	79 f7       	brne	.-34     	; 0x5242 <vfprintf+0x1c4>
    5264:	e1 c0       	rjmp	.+450    	; 0x5428 <vfprintf+0x3aa>
    5266:	84 36       	cpi	r24, 0x64	; 100
    5268:	11 f0       	breq	.+4      	; 0x526e <vfprintf+0x1f0>
    526a:	89 36       	cpi	r24, 0x69	; 105
    526c:	39 f5       	brne	.+78     	; 0x52bc <vfprintf+0x23e>
    526e:	f8 01       	movw	r30, r16
    5270:	37 fe       	sbrs	r3, 7
    5272:	07 c0       	rjmp	.+14     	; 0x5282 <vfprintf+0x204>
    5274:	60 81       	ld	r22, Z
    5276:	71 81       	ldd	r23, Z+1	; 0x01
    5278:	82 81       	ldd	r24, Z+2	; 0x02
    527a:	93 81       	ldd	r25, Z+3	; 0x03
    527c:	0c 5f       	subi	r16, 0xFC	; 252
    527e:	1f 4f       	sbci	r17, 0xFF	; 255
    5280:	08 c0       	rjmp	.+16     	; 0x5292 <vfprintf+0x214>
    5282:	60 81       	ld	r22, Z
    5284:	71 81       	ldd	r23, Z+1	; 0x01
    5286:	07 2e       	mov	r0, r23
    5288:	00 0c       	add	r0, r0
    528a:	88 0b       	sbc	r24, r24
    528c:	99 0b       	sbc	r25, r25
    528e:	0e 5f       	subi	r16, 0xFE	; 254
    5290:	1f 4f       	sbci	r17, 0xFF	; 255
    5292:	f3 2d       	mov	r31, r3
    5294:	ff 76       	andi	r31, 0x6F	; 111
    5296:	3f 2e       	mov	r3, r31
    5298:	97 ff       	sbrs	r25, 7
    529a:	09 c0       	rjmp	.+18     	; 0x52ae <vfprintf+0x230>
    529c:	90 95       	com	r25
    529e:	80 95       	com	r24
    52a0:	70 95       	com	r23
    52a2:	61 95       	neg	r22
    52a4:	7f 4f       	sbci	r23, 0xFF	; 255
    52a6:	8f 4f       	sbci	r24, 0xFF	; 255
    52a8:	9f 4f       	sbci	r25, 0xFF	; 255
    52aa:	f0 68       	ori	r31, 0x80	; 128
    52ac:	3f 2e       	mov	r3, r31
    52ae:	2a e0       	ldi	r18, 0x0A	; 10
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	a3 01       	movw	r20, r6
    52b4:	33 d1       	rcall	.+614    	; 0x551c <__ultoa_invert>
    52b6:	88 2e       	mov	r8, r24
    52b8:	86 18       	sub	r8, r6
    52ba:	44 c0       	rjmp	.+136    	; 0x5344 <vfprintf+0x2c6>
    52bc:	85 37       	cpi	r24, 0x75	; 117
    52be:	31 f4       	brne	.+12     	; 0x52cc <vfprintf+0x24e>
    52c0:	23 2d       	mov	r18, r3
    52c2:	2f 7e       	andi	r18, 0xEF	; 239
    52c4:	b2 2e       	mov	r11, r18
    52c6:	2a e0       	ldi	r18, 0x0A	; 10
    52c8:	30 e0       	ldi	r19, 0x00	; 0
    52ca:	25 c0       	rjmp	.+74     	; 0x5316 <vfprintf+0x298>
    52cc:	93 2d       	mov	r25, r3
    52ce:	99 7f       	andi	r25, 0xF9	; 249
    52d0:	b9 2e       	mov	r11, r25
    52d2:	8f 36       	cpi	r24, 0x6F	; 111
    52d4:	c1 f0       	breq	.+48     	; 0x5306 <vfprintf+0x288>
    52d6:	18 f4       	brcc	.+6      	; 0x52de <vfprintf+0x260>
    52d8:	88 35       	cpi	r24, 0x58	; 88
    52da:	79 f0       	breq	.+30     	; 0x52fa <vfprintf+0x27c>
    52dc:	ae c0       	rjmp	.+348    	; 0x543a <vfprintf+0x3bc>
    52de:	80 37       	cpi	r24, 0x70	; 112
    52e0:	19 f0       	breq	.+6      	; 0x52e8 <vfprintf+0x26a>
    52e2:	88 37       	cpi	r24, 0x78	; 120
    52e4:	21 f0       	breq	.+8      	; 0x52ee <vfprintf+0x270>
    52e6:	a9 c0       	rjmp	.+338    	; 0x543a <vfprintf+0x3bc>
    52e8:	e9 2f       	mov	r30, r25
    52ea:	e0 61       	ori	r30, 0x10	; 16
    52ec:	be 2e       	mov	r11, r30
    52ee:	b4 fe       	sbrs	r11, 4
    52f0:	0d c0       	rjmp	.+26     	; 0x530c <vfprintf+0x28e>
    52f2:	fb 2d       	mov	r31, r11
    52f4:	f4 60       	ori	r31, 0x04	; 4
    52f6:	bf 2e       	mov	r11, r31
    52f8:	09 c0       	rjmp	.+18     	; 0x530c <vfprintf+0x28e>
    52fa:	34 fe       	sbrs	r3, 4
    52fc:	0a c0       	rjmp	.+20     	; 0x5312 <vfprintf+0x294>
    52fe:	29 2f       	mov	r18, r25
    5300:	26 60       	ori	r18, 0x06	; 6
    5302:	b2 2e       	mov	r11, r18
    5304:	06 c0       	rjmp	.+12     	; 0x5312 <vfprintf+0x294>
    5306:	28 e0       	ldi	r18, 0x08	; 8
    5308:	30 e0       	ldi	r19, 0x00	; 0
    530a:	05 c0       	rjmp	.+10     	; 0x5316 <vfprintf+0x298>
    530c:	20 e1       	ldi	r18, 0x10	; 16
    530e:	30 e0       	ldi	r19, 0x00	; 0
    5310:	02 c0       	rjmp	.+4      	; 0x5316 <vfprintf+0x298>
    5312:	20 e1       	ldi	r18, 0x10	; 16
    5314:	32 e0       	ldi	r19, 0x02	; 2
    5316:	f8 01       	movw	r30, r16
    5318:	b7 fe       	sbrs	r11, 7
    531a:	07 c0       	rjmp	.+14     	; 0x532a <vfprintf+0x2ac>
    531c:	60 81       	ld	r22, Z
    531e:	71 81       	ldd	r23, Z+1	; 0x01
    5320:	82 81       	ldd	r24, Z+2	; 0x02
    5322:	93 81       	ldd	r25, Z+3	; 0x03
    5324:	0c 5f       	subi	r16, 0xFC	; 252
    5326:	1f 4f       	sbci	r17, 0xFF	; 255
    5328:	06 c0       	rjmp	.+12     	; 0x5336 <vfprintf+0x2b8>
    532a:	60 81       	ld	r22, Z
    532c:	71 81       	ldd	r23, Z+1	; 0x01
    532e:	80 e0       	ldi	r24, 0x00	; 0
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	0e 5f       	subi	r16, 0xFE	; 254
    5334:	1f 4f       	sbci	r17, 0xFF	; 255
    5336:	a3 01       	movw	r20, r6
    5338:	f1 d0       	rcall	.+482    	; 0x551c <__ultoa_invert>
    533a:	88 2e       	mov	r8, r24
    533c:	86 18       	sub	r8, r6
    533e:	fb 2d       	mov	r31, r11
    5340:	ff 77       	andi	r31, 0x7F	; 127
    5342:	3f 2e       	mov	r3, r31
    5344:	36 fe       	sbrs	r3, 6
    5346:	0d c0       	rjmp	.+26     	; 0x5362 <vfprintf+0x2e4>
    5348:	23 2d       	mov	r18, r3
    534a:	2e 7f       	andi	r18, 0xFE	; 254
    534c:	a2 2e       	mov	r10, r18
    534e:	89 14       	cp	r8, r9
    5350:	58 f4       	brcc	.+22     	; 0x5368 <vfprintf+0x2ea>
    5352:	34 fe       	sbrs	r3, 4
    5354:	0b c0       	rjmp	.+22     	; 0x536c <vfprintf+0x2ee>
    5356:	32 fc       	sbrc	r3, 2
    5358:	09 c0       	rjmp	.+18     	; 0x536c <vfprintf+0x2ee>
    535a:	83 2d       	mov	r24, r3
    535c:	8e 7e       	andi	r24, 0xEE	; 238
    535e:	a8 2e       	mov	r10, r24
    5360:	05 c0       	rjmp	.+10     	; 0x536c <vfprintf+0x2ee>
    5362:	b8 2c       	mov	r11, r8
    5364:	a3 2c       	mov	r10, r3
    5366:	03 c0       	rjmp	.+6      	; 0x536e <vfprintf+0x2f0>
    5368:	b8 2c       	mov	r11, r8
    536a:	01 c0       	rjmp	.+2      	; 0x536e <vfprintf+0x2f0>
    536c:	b9 2c       	mov	r11, r9
    536e:	a4 fe       	sbrs	r10, 4
    5370:	0f c0       	rjmp	.+30     	; 0x5390 <vfprintf+0x312>
    5372:	fe 01       	movw	r30, r28
    5374:	e8 0d       	add	r30, r8
    5376:	f1 1d       	adc	r31, r1
    5378:	80 81       	ld	r24, Z
    537a:	80 33       	cpi	r24, 0x30	; 48
    537c:	21 f4       	brne	.+8      	; 0x5386 <vfprintf+0x308>
    537e:	9a 2d       	mov	r25, r10
    5380:	99 7e       	andi	r25, 0xE9	; 233
    5382:	a9 2e       	mov	r10, r25
    5384:	09 c0       	rjmp	.+18     	; 0x5398 <vfprintf+0x31a>
    5386:	a2 fe       	sbrs	r10, 2
    5388:	06 c0       	rjmp	.+12     	; 0x5396 <vfprintf+0x318>
    538a:	b3 94       	inc	r11
    538c:	b3 94       	inc	r11
    538e:	04 c0       	rjmp	.+8      	; 0x5398 <vfprintf+0x31a>
    5390:	8a 2d       	mov	r24, r10
    5392:	86 78       	andi	r24, 0x86	; 134
    5394:	09 f0       	breq	.+2      	; 0x5398 <vfprintf+0x31a>
    5396:	b3 94       	inc	r11
    5398:	a3 fc       	sbrc	r10, 3
    539a:	10 c0       	rjmp	.+32     	; 0x53bc <vfprintf+0x33e>
    539c:	a0 fe       	sbrs	r10, 0
    539e:	06 c0       	rjmp	.+12     	; 0x53ac <vfprintf+0x32e>
    53a0:	b2 14       	cp	r11, r2
    53a2:	80 f4       	brcc	.+32     	; 0x53c4 <vfprintf+0x346>
    53a4:	28 0c       	add	r2, r8
    53a6:	92 2c       	mov	r9, r2
    53a8:	9b 18       	sub	r9, r11
    53aa:	0d c0       	rjmp	.+26     	; 0x53c6 <vfprintf+0x348>
    53ac:	b2 14       	cp	r11, r2
    53ae:	58 f4       	brcc	.+22     	; 0x53c6 <vfprintf+0x348>
    53b0:	b6 01       	movw	r22, r12
    53b2:	80 e2       	ldi	r24, 0x20	; 32
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	76 d0       	rcall	.+236    	; 0x54a4 <fputc>
    53b8:	b3 94       	inc	r11
    53ba:	f8 cf       	rjmp	.-16     	; 0x53ac <vfprintf+0x32e>
    53bc:	b2 14       	cp	r11, r2
    53be:	18 f4       	brcc	.+6      	; 0x53c6 <vfprintf+0x348>
    53c0:	2b 18       	sub	r2, r11
    53c2:	02 c0       	rjmp	.+4      	; 0x53c8 <vfprintf+0x34a>
    53c4:	98 2c       	mov	r9, r8
    53c6:	21 2c       	mov	r2, r1
    53c8:	a4 fe       	sbrs	r10, 4
    53ca:	0f c0       	rjmp	.+30     	; 0x53ea <vfprintf+0x36c>
    53cc:	b6 01       	movw	r22, r12
    53ce:	80 e3       	ldi	r24, 0x30	; 48
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	68 d0       	rcall	.+208    	; 0x54a4 <fputc>
    53d4:	a2 fe       	sbrs	r10, 2
    53d6:	16 c0       	rjmp	.+44     	; 0x5404 <vfprintf+0x386>
    53d8:	a1 fc       	sbrc	r10, 1
    53da:	03 c0       	rjmp	.+6      	; 0x53e2 <vfprintf+0x364>
    53dc:	88 e7       	ldi	r24, 0x78	; 120
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	02 c0       	rjmp	.+4      	; 0x53e6 <vfprintf+0x368>
    53e2:	88 e5       	ldi	r24, 0x58	; 88
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	b6 01       	movw	r22, r12
    53e8:	0c c0       	rjmp	.+24     	; 0x5402 <vfprintf+0x384>
    53ea:	8a 2d       	mov	r24, r10
    53ec:	86 78       	andi	r24, 0x86	; 134
    53ee:	51 f0       	breq	.+20     	; 0x5404 <vfprintf+0x386>
    53f0:	a1 fe       	sbrs	r10, 1
    53f2:	02 c0       	rjmp	.+4      	; 0x53f8 <vfprintf+0x37a>
    53f4:	8b e2       	ldi	r24, 0x2B	; 43
    53f6:	01 c0       	rjmp	.+2      	; 0x53fa <vfprintf+0x37c>
    53f8:	80 e2       	ldi	r24, 0x20	; 32
    53fa:	a7 fc       	sbrc	r10, 7
    53fc:	8d e2       	ldi	r24, 0x2D	; 45
    53fe:	b6 01       	movw	r22, r12
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	50 d0       	rcall	.+160    	; 0x54a4 <fputc>
    5404:	89 14       	cp	r8, r9
    5406:	30 f4       	brcc	.+12     	; 0x5414 <vfprintf+0x396>
    5408:	b6 01       	movw	r22, r12
    540a:	80 e3       	ldi	r24, 0x30	; 48
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	4a d0       	rcall	.+148    	; 0x54a4 <fputc>
    5410:	9a 94       	dec	r9
    5412:	f8 cf       	rjmp	.-16     	; 0x5404 <vfprintf+0x386>
    5414:	8a 94       	dec	r8
    5416:	f3 01       	movw	r30, r6
    5418:	e8 0d       	add	r30, r8
    541a:	f1 1d       	adc	r31, r1
    541c:	80 81       	ld	r24, Z
    541e:	b6 01       	movw	r22, r12
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	40 d0       	rcall	.+128    	; 0x54a4 <fputc>
    5424:	81 10       	cpse	r8, r1
    5426:	f6 cf       	rjmp	.-20     	; 0x5414 <vfprintf+0x396>
    5428:	22 20       	and	r2, r2
    542a:	09 f4       	brne	.+2      	; 0x542e <vfprintf+0x3b0>
    542c:	4e ce       	rjmp	.-868    	; 0x50ca <vfprintf+0x4c>
    542e:	b6 01       	movw	r22, r12
    5430:	80 e2       	ldi	r24, 0x20	; 32
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	37 d0       	rcall	.+110    	; 0x54a4 <fputc>
    5436:	2a 94       	dec	r2
    5438:	f7 cf       	rjmp	.-18     	; 0x5428 <vfprintf+0x3aa>
    543a:	f6 01       	movw	r30, r12
    543c:	86 81       	ldd	r24, Z+6	; 0x06
    543e:	97 81       	ldd	r25, Z+7	; 0x07
    5440:	02 c0       	rjmp	.+4      	; 0x5446 <vfprintf+0x3c8>
    5442:	8f ef       	ldi	r24, 0xFF	; 255
    5444:	9f ef       	ldi	r25, 0xFF	; 255
    5446:	2b 96       	adiw	r28, 0x0b	; 11
    5448:	0f b6       	in	r0, 0x3f	; 63
    544a:	f8 94       	cli
    544c:	de bf       	out	0x3e, r29	; 62
    544e:	0f be       	out	0x3f, r0	; 63
    5450:	cd bf       	out	0x3d, r28	; 61
    5452:	df 91       	pop	r29
    5454:	cf 91       	pop	r28
    5456:	1f 91       	pop	r17
    5458:	0f 91       	pop	r16
    545a:	ff 90       	pop	r15
    545c:	ef 90       	pop	r14
    545e:	df 90       	pop	r13
    5460:	cf 90       	pop	r12
    5462:	bf 90       	pop	r11
    5464:	af 90       	pop	r10
    5466:	9f 90       	pop	r9
    5468:	8f 90       	pop	r8
    546a:	7f 90       	pop	r7
    546c:	6f 90       	pop	r6
    546e:	5f 90       	pop	r5
    5470:	4f 90       	pop	r4
    5472:	3f 90       	pop	r3
    5474:	2f 90       	pop	r2
    5476:	08 95       	ret

00005478 <strnlen_P>:
    5478:	fc 01       	movw	r30, r24
    547a:	05 90       	lpm	r0, Z+
    547c:	61 50       	subi	r22, 0x01	; 1
    547e:	70 40       	sbci	r23, 0x00	; 0
    5480:	01 10       	cpse	r0, r1
    5482:	d8 f7       	brcc	.-10     	; 0x547a <strnlen_P+0x2>
    5484:	80 95       	com	r24
    5486:	90 95       	com	r25
    5488:	8e 0f       	add	r24, r30
    548a:	9f 1f       	adc	r25, r31
    548c:	08 95       	ret

0000548e <strnlen>:
    548e:	fc 01       	movw	r30, r24
    5490:	61 50       	subi	r22, 0x01	; 1
    5492:	70 40       	sbci	r23, 0x00	; 0
    5494:	01 90       	ld	r0, Z+
    5496:	01 10       	cpse	r0, r1
    5498:	d8 f7       	brcc	.-10     	; 0x5490 <strnlen+0x2>
    549a:	80 95       	com	r24
    549c:	90 95       	com	r25
    549e:	8e 0f       	add	r24, r30
    54a0:	9f 1f       	adc	r25, r31
    54a2:	08 95       	ret

000054a4 <fputc>:
    54a4:	0f 93       	push	r16
    54a6:	1f 93       	push	r17
    54a8:	cf 93       	push	r28
    54aa:	df 93       	push	r29
    54ac:	fb 01       	movw	r30, r22
    54ae:	23 81       	ldd	r18, Z+3	; 0x03
    54b0:	21 fd       	sbrc	r18, 1
    54b2:	03 c0       	rjmp	.+6      	; 0x54ba <fputc+0x16>
    54b4:	8f ef       	ldi	r24, 0xFF	; 255
    54b6:	9f ef       	ldi	r25, 0xFF	; 255
    54b8:	2c c0       	rjmp	.+88     	; 0x5512 <fputc+0x6e>
    54ba:	22 ff       	sbrs	r18, 2
    54bc:	16 c0       	rjmp	.+44     	; 0x54ea <fputc+0x46>
    54be:	46 81       	ldd	r20, Z+6	; 0x06
    54c0:	57 81       	ldd	r21, Z+7	; 0x07
    54c2:	24 81       	ldd	r18, Z+4	; 0x04
    54c4:	35 81       	ldd	r19, Z+5	; 0x05
    54c6:	42 17       	cp	r20, r18
    54c8:	53 07       	cpc	r21, r19
    54ca:	44 f4       	brge	.+16     	; 0x54dc <fputc+0x38>
    54cc:	a0 81       	ld	r26, Z
    54ce:	b1 81       	ldd	r27, Z+1	; 0x01
    54d0:	9d 01       	movw	r18, r26
    54d2:	2f 5f       	subi	r18, 0xFF	; 255
    54d4:	3f 4f       	sbci	r19, 0xFF	; 255
    54d6:	31 83       	std	Z+1, r19	; 0x01
    54d8:	20 83       	st	Z, r18
    54da:	8c 93       	st	X, r24
    54dc:	26 81       	ldd	r18, Z+6	; 0x06
    54de:	37 81       	ldd	r19, Z+7	; 0x07
    54e0:	2f 5f       	subi	r18, 0xFF	; 255
    54e2:	3f 4f       	sbci	r19, 0xFF	; 255
    54e4:	37 83       	std	Z+7, r19	; 0x07
    54e6:	26 83       	std	Z+6, r18	; 0x06
    54e8:	14 c0       	rjmp	.+40     	; 0x5512 <fputc+0x6e>
    54ea:	8b 01       	movw	r16, r22
    54ec:	ec 01       	movw	r28, r24
    54ee:	fb 01       	movw	r30, r22
    54f0:	00 84       	ldd	r0, Z+8	; 0x08
    54f2:	f1 85       	ldd	r31, Z+9	; 0x09
    54f4:	e0 2d       	mov	r30, r0
    54f6:	19 95       	eicall
    54f8:	89 2b       	or	r24, r25
    54fa:	e1 f6       	brne	.-72     	; 0x54b4 <fputc+0x10>
    54fc:	d8 01       	movw	r26, r16
    54fe:	16 96       	adiw	r26, 0x06	; 6
    5500:	8d 91       	ld	r24, X+
    5502:	9c 91       	ld	r25, X
    5504:	17 97       	sbiw	r26, 0x07	; 7
    5506:	01 96       	adiw	r24, 0x01	; 1
    5508:	17 96       	adiw	r26, 0x07	; 7
    550a:	9c 93       	st	X, r25
    550c:	8e 93       	st	-X, r24
    550e:	16 97       	sbiw	r26, 0x06	; 6
    5510:	ce 01       	movw	r24, r28
    5512:	df 91       	pop	r29
    5514:	cf 91       	pop	r28
    5516:	1f 91       	pop	r17
    5518:	0f 91       	pop	r16
    551a:	08 95       	ret

0000551c <__ultoa_invert>:
    551c:	fa 01       	movw	r30, r20
    551e:	aa 27       	eor	r26, r26
    5520:	28 30       	cpi	r18, 0x08	; 8
    5522:	51 f1       	breq	.+84     	; 0x5578 <__ultoa_invert+0x5c>
    5524:	20 31       	cpi	r18, 0x10	; 16
    5526:	81 f1       	breq	.+96     	; 0x5588 <__ultoa_invert+0x6c>
    5528:	e8 94       	clt
    552a:	6f 93       	push	r22
    552c:	6e 7f       	andi	r22, 0xFE	; 254
    552e:	6e 5f       	subi	r22, 0xFE	; 254
    5530:	7f 4f       	sbci	r23, 0xFF	; 255
    5532:	8f 4f       	sbci	r24, 0xFF	; 255
    5534:	9f 4f       	sbci	r25, 0xFF	; 255
    5536:	af 4f       	sbci	r26, 0xFF	; 255
    5538:	b1 e0       	ldi	r27, 0x01	; 1
    553a:	3e d0       	rcall	.+124    	; 0x55b8 <__ultoa_invert+0x9c>
    553c:	b4 e0       	ldi	r27, 0x04	; 4
    553e:	3c d0       	rcall	.+120    	; 0x55b8 <__ultoa_invert+0x9c>
    5540:	67 0f       	add	r22, r23
    5542:	78 1f       	adc	r23, r24
    5544:	89 1f       	adc	r24, r25
    5546:	9a 1f       	adc	r25, r26
    5548:	a1 1d       	adc	r26, r1
    554a:	68 0f       	add	r22, r24
    554c:	79 1f       	adc	r23, r25
    554e:	8a 1f       	adc	r24, r26
    5550:	91 1d       	adc	r25, r1
    5552:	a1 1d       	adc	r26, r1
    5554:	6a 0f       	add	r22, r26
    5556:	71 1d       	adc	r23, r1
    5558:	81 1d       	adc	r24, r1
    555a:	91 1d       	adc	r25, r1
    555c:	a1 1d       	adc	r26, r1
    555e:	20 d0       	rcall	.+64     	; 0x55a0 <__ultoa_invert+0x84>
    5560:	09 f4       	brne	.+2      	; 0x5564 <__ultoa_invert+0x48>
    5562:	68 94       	set
    5564:	3f 91       	pop	r19
    5566:	2a e0       	ldi	r18, 0x0A	; 10
    5568:	26 9f       	mul	r18, r22
    556a:	11 24       	eor	r1, r1
    556c:	30 19       	sub	r19, r0
    556e:	30 5d       	subi	r19, 0xD0	; 208
    5570:	31 93       	st	Z+, r19
    5572:	de f6       	brtc	.-74     	; 0x552a <__ultoa_invert+0xe>
    5574:	cf 01       	movw	r24, r30
    5576:	08 95       	ret
    5578:	46 2f       	mov	r20, r22
    557a:	47 70       	andi	r20, 0x07	; 7
    557c:	40 5d       	subi	r20, 0xD0	; 208
    557e:	41 93       	st	Z+, r20
    5580:	b3 e0       	ldi	r27, 0x03	; 3
    5582:	0f d0       	rcall	.+30     	; 0x55a2 <__ultoa_invert+0x86>
    5584:	c9 f7       	brne	.-14     	; 0x5578 <__ultoa_invert+0x5c>
    5586:	f6 cf       	rjmp	.-20     	; 0x5574 <__ultoa_invert+0x58>
    5588:	46 2f       	mov	r20, r22
    558a:	4f 70       	andi	r20, 0x0F	; 15
    558c:	40 5d       	subi	r20, 0xD0	; 208
    558e:	4a 33       	cpi	r20, 0x3A	; 58
    5590:	18 f0       	brcs	.+6      	; 0x5598 <__ultoa_invert+0x7c>
    5592:	49 5d       	subi	r20, 0xD9	; 217
    5594:	31 fd       	sbrc	r19, 1
    5596:	40 52       	subi	r20, 0x20	; 32
    5598:	41 93       	st	Z+, r20
    559a:	02 d0       	rcall	.+4      	; 0x55a0 <__ultoa_invert+0x84>
    559c:	a9 f7       	brne	.-22     	; 0x5588 <__ultoa_invert+0x6c>
    559e:	ea cf       	rjmp	.-44     	; 0x5574 <__ultoa_invert+0x58>
    55a0:	b4 e0       	ldi	r27, 0x04	; 4
    55a2:	a6 95       	lsr	r26
    55a4:	97 95       	ror	r25
    55a6:	87 95       	ror	r24
    55a8:	77 95       	ror	r23
    55aa:	67 95       	ror	r22
    55ac:	ba 95       	dec	r27
    55ae:	c9 f7       	brne	.-14     	; 0x55a2 <__ultoa_invert+0x86>
    55b0:	00 97       	sbiw	r24, 0x00	; 0
    55b2:	61 05       	cpc	r22, r1
    55b4:	71 05       	cpc	r23, r1
    55b6:	08 95       	ret
    55b8:	9b 01       	movw	r18, r22
    55ba:	ac 01       	movw	r20, r24
    55bc:	0a 2e       	mov	r0, r26
    55be:	06 94       	lsr	r0
    55c0:	57 95       	ror	r21
    55c2:	47 95       	ror	r20
    55c4:	37 95       	ror	r19
    55c6:	27 95       	ror	r18
    55c8:	ba 95       	dec	r27
    55ca:	c9 f7       	brne	.-14     	; 0x55be <__ultoa_invert+0xa2>
    55cc:	62 0f       	add	r22, r18
    55ce:	73 1f       	adc	r23, r19
    55d0:	84 1f       	adc	r24, r20
    55d2:	95 1f       	adc	r25, r21
    55d4:	a0 1d       	adc	r26, r0
    55d6:	08 95       	ret

000055d8 <_exit>:
    55d8:	f8 94       	cli

000055da <__stop_program>:
    55da:	ff cf       	rjmp	.-2      	; 0x55da <__stop_program>
