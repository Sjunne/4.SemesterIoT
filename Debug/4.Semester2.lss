
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000578  00800200  00005d60  00005df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c47  00800778  00800778  0000636c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000636c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000063c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a80  00000000  00000000  00006408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cebc  00000000  00000000  00006e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003410  00000000  00000000  00013d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000067f3  00000000  00000000  00017154  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000254c  00000000  00000000  0001d948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003fb5  00000000  00000000  0001fe94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b6c1  00000000  00000000  00023e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c8  00000000  00000000  0002f50a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c4       	rjmp	.+2138   	; 0x88c <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 1e 22 	jmp	0x443c	; 0x443c <__vector_25>
      68:	0c 94 70 22 	jmp	0x44e0	; 0x44e0 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b4 22 	jmp	0x4568	; 0x4568 <__vector_36>
      94:	0c 94 06 23 	jmp	0x460c	; 0x460c <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 52 27 	jmp	0x4ea4	; 0x4ea4 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <__vector_51>
      d0:	0c 94 9c 23 	jmp	0x4738	; 0x4738 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 e0 23 	jmp	0x47c0	; 0x47c0 <__vector_54>
      dc:	0c 94 32 24 	jmp	0x4864	; 0x4864 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	26 17       	cp	r18, r22
      e6:	26 17       	cp	r18, r22
      e8:	26 17       	cp	r18, r22
      ea:	5d 17       	cp	r21, r29
      ec:	65 17       	cp	r22, r21
      ee:	7a 17       	cp	r23, r26
      f0:	26 17       	cp	r18, r22
      f2:	26 17       	cp	r18, r22
      f4:	5d 17       	cp	r21, r29
      f6:	65 17       	cp	r22, r21
      f8:	74 27       	eor	r23, r20
      fa:	e4 27       	eor	r30, r20
      fc:	e4 27       	eor	r30, r20
      fe:	e4 27       	eor	r30, r20
     100:	e4 27       	eor	r30, r20
     102:	e4 27       	eor	r30, r20
     104:	e4 27       	eor	r30, r20
     106:	e4 27       	eor	r30, r20
     108:	74 27       	eor	r23, r20
     10a:	e4 27       	eor	r30, r20
     10c:	e4 27       	eor	r30, r20
     10e:	e4 27       	eor	r30, r20
     110:	e4 27       	eor	r30, r20
     112:	e4 27       	eor	r30, r20
     114:	e4 27       	eor	r30, r20
     116:	e4 27       	eor	r30, r20
     118:	76 27       	eor	r23, r22
     11a:	e4 27       	eor	r30, r20
     11c:	e4 27       	eor	r30, r20
     11e:	e4 27       	eor	r30, r20
     120:	e4 27       	eor	r30, r20
     122:	e4 27       	eor	r30, r20
     124:	e4 27       	eor	r30, r20
     126:	e4 27       	eor	r30, r20
     128:	e4 27       	eor	r30, r20
     12a:	e4 27       	eor	r30, r20
     12c:	e4 27       	eor	r30, r20
     12e:	e4 27       	eor	r30, r20
     130:	e4 27       	eor	r30, r20
     132:	e4 27       	eor	r30, r20
     134:	e4 27       	eor	r30, r20
     136:	e4 27       	eor	r30, r20
     138:	76 27       	eor	r23, r22
     13a:	e4 27       	eor	r30, r20
     13c:	e4 27       	eor	r30, r20
     13e:	e4 27       	eor	r30, r20
     140:	e4 27       	eor	r30, r20
     142:	e4 27       	eor	r30, r20
     144:	e4 27       	eor	r30, r20
     146:	e4 27       	eor	r30, r20
     148:	e4 27       	eor	r30, r20
     14a:	e4 27       	eor	r30, r20
     14c:	e4 27       	eor	r30, r20
     14e:	e4 27       	eor	r30, r20
     150:	e4 27       	eor	r30, r20
     152:	e4 27       	eor	r30, r20
     154:	e4 27       	eor	r30, r20
     156:	e4 27       	eor	r30, r20
     158:	e0 27       	eor	r30, r16
     15a:	e4 27       	eor	r30, r20
     15c:	e4 27       	eor	r30, r20
     15e:	e4 27       	eor	r30, r20
     160:	e4 27       	eor	r30, r20
     162:	e4 27       	eor	r30, r20
     164:	e4 27       	eor	r30, r20
     166:	e4 27       	eor	r30, r20
     168:	ab 27       	eor	r26, r27
     16a:	e4 27       	eor	r30, r20
     16c:	e4 27       	eor	r30, r20
     16e:	e4 27       	eor	r30, r20
     170:	e4 27       	eor	r30, r20
     172:	e4 27       	eor	r30, r20
     174:	e4 27       	eor	r30, r20
     176:	e4 27       	eor	r30, r20
     178:	e4 27       	eor	r30, r20
     17a:	e4 27       	eor	r30, r20
     17c:	e4 27       	eor	r30, r20
     17e:	e4 27       	eor	r30, r20
     180:	e4 27       	eor	r30, r20
     182:	e4 27       	eor	r30, r20
     184:	e4 27       	eor	r30, r20
     186:	e4 27       	eor	r30, r20
     188:	9f 27       	eor	r25, r31
     18a:	e4 27       	eor	r30, r20
     18c:	e4 27       	eor	r30, r20
     18e:	e4 27       	eor	r30, r20
     190:	e4 27       	eor	r30, r20
     192:	e4 27       	eor	r30, r20
     194:	e4 27       	eor	r30, r20
     196:	e4 27       	eor	r30, r20
     198:	c3 27       	eor	r28, r19

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <prvCheckTasksWaitingTermination>
     19e:	80 91 9d 11 	lds	r24, 0x119D	; 0x80119d <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	ac d2       	rcall	.+1368   	; 0x700 <vPortYield>
     1a8:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 a3 14 	call	0x2946	; 0x2946 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 98 16 	call	0x2d30	; 0x2d30 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 ef 16 	call	0x2dde	; 0x2dde <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	17 e0       	ldi	r17, 0x07	; 7
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e0 e6       	ldi	r30, 0x60	; 96
     1e4:	fd e5       	ldi	r31, 0x5D	; 93
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a8 37       	cpi	r26, 0x78	; 120
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	23 e1       	ldi	r18, 0x13	; 19
     1f8:	a8 e7       	ldi	r26, 0x78	; 120
     1fa:	b7 e0       	ldi	r27, 0x07	; 7
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 3b       	cpi	r26, 0xBF	; 191
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 c1 1a 	call	0x3582	; 0x3582 <main>
     20a:	0c 94 ae 2e 	jmp	0x5d5c	; 0x5d5c <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <initializeSharedDataQueue>:
SharedData receiveSharedData;
SharedData sharedData;

void initializeSharedDataQueue()
{
	xQueueShared = xQueueCreate(5, sizeof(SharedData));
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	66 e0       	ldi	r22, 0x06	; 6
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	59 d4       	rcall	.+2226   	; 0xaca <xQueueGenericCreate>
     218:	90 93 a8 13 	sts	0x13A8, r25	; 0x8013a8 <xQueueShared+0x1>
     21c:	80 93 a7 13 	sts	0x13A7, r24	; 0x8013a7 <xQueueShared>
     220:	08 95       	ret

00000222 <enqueueSharedData>:
}

void enqueueSharedData()
{
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
	res = (co2 / divider);
	printf("c02 som float %.2f \n", res);
	co2 = (uint16_t) res;
	*/
	
	uint16_t co2 = dequeueCO2Measure();
     22a:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <dequeueCO2Measure>
     22e:	c8 2f       	mov	r28, r24
     230:	d9 2f       	mov	r29, r25
	int16_t temp = dequeueTempMeasure();
     232:	0e 94 be 18 	call	0x317c	; 0x317c <dequeueTempMeasure>
     236:	18 2f       	mov	r17, r24
     238:	09 2f       	mov	r16, r25
	uint16_t hum = dequeueHumidityMeasure();
     23a:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <dequeueHumidityMeasure>

	SharedData_t shared = &sharedData;
	shared->co2 = co2;
     23e:	e1 ea       	ldi	r30, 0xA1	; 161
     240:	f3 e1       	ldi	r31, 0x13	; 19
     242:	c0 83       	st	Z, r28
     244:	d1 83       	std	Z+1, r29	; 0x01
	shared->temperature = temp;
     246:	12 83       	std	Z+2, r17	; 0x02
     248:	03 83       	std	Z+3, r16	; 0x03
	shared->humidity = hum;
     24a:	84 83       	std	Z+4, r24	; 0x04
     24c:	95 83       	std	Z+5, r25	; 0x05

	printf("ENQUEUE: humidity: %d, co2: %d, Temp: %d \n", shared->humidity, shared->co2, shared->temperature);
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	df 93       	push	r29
     254:	cf 93       	push	r28
     256:	9f 93       	push	r25
     258:	8f 93       	push	r24
     25a:	8f e6       	ldi	r24, 0x6F	; 111
     25c:	92 e0       	ldi	r25, 0x02	; 2
     25e:	9f 93       	push	r25
     260:	8f 93       	push	r24
     262:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>

	xQueueSend(xQueueShared, (void*)&sharedData, portMAX_DELAY);
     266:	00 e0       	ldi	r16, 0x00	; 0
     268:	2f ef       	ldi	r18, 0xFF	; 255
     26a:	3f ef       	ldi	r19, 0xFF	; 255
     26c:	a9 01       	movw	r20, r18
     26e:	61 ea       	ldi	r22, 0xA1	; 161
     270:	73 e1       	ldi	r23, 0x13	; 19
     272:	80 91 a7 13 	lds	r24, 0x13A7	; 0x8013a7 <xQueueShared>
     276:	90 91 a8 13 	lds	r25, 0x13A8	; 0x8013a8 <xQueueShared+0x1>
     27a:	4a d4       	rcall	.+2196   	; 0xb10 <xQueueGenericSend>

}
     27c:	8d b7       	in	r24, 0x3d	; 61
     27e:	9e b7       	in	r25, 0x3e	; 62
     280:	08 96       	adiw	r24, 0x08	; 8
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	9e bf       	out	0x3e, r25	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	8d bf       	out	0x3d, r24	; 61
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	1f 91       	pop	r17
     292:	0f 91       	pop	r16
     294:	08 95       	ret

00000296 <dequeueSharedData>:

SharedData_t dequeueSharedData() {
	SharedData_t data = &receiveSharedData;
	xQueueReceive(xQueueShared, &receiveSharedData, (TickType_t) 10);
     296:	2a e0       	ldi	r18, 0x0A	; 10
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	69 ea       	ldi	r22, 0xA9	; 169
     2a0:	73 e1       	ldi	r23, 0x13	; 19
     2a2:	80 91 a7 13 	lds	r24, 0x13A7	; 0x8013a7 <xQueueShared>
     2a6:	90 91 a8 13 	lds	r25, 0x13A8	; 0x8013a8 <xQueueShared+0x1>
     2aa:	fd d4       	rcall	.+2554   	; 0xca6 <xQueueReceive>
	return data;
}
     2ac:	89 ea       	ldi	r24, 0xA9	; 169
     2ae:	93 e1       	ldi	r25, 0x13	; 19
     2b0:	08 95       	ret

000002b2 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     2b2:	e4 e8       	ldi	r30, 0x84	; 132
     2b4:	f7 e0       	ldi	r31, 0x07	; 7
     2b6:	a8 e8       	ldi	r26, 0x88	; 136
     2b8:	b7 e0       	ldi	r27, 0x07	; 7
     2ba:	b1 83       	std	Z+1, r27	; 0x01
     2bc:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     2c2:	e8 e4       	ldi	r30, 0x48	; 72
     2c4:	f1 e1       	ldi	r31, 0x11	; 17
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     2c6:	f0 93 83 07 	sts	0x0783, r31	; 0x800783 <pxEnd+0x1>
     2ca:	e0 93 82 07 	sts	0x0782, r30	; 0x800782 <pxEnd>
    pxEnd->xBlockSize = 0;
     2ce:	13 82       	std	Z+3, r1	; 0x03
     2d0:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     2d2:	11 82       	std	Z+1, r1	; 0x01
     2d4:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     2d6:	80 ec       	ldi	r24, 0xC0	; 192
     2d8:	99 e0       	ldi	r25, 0x09	; 9
     2da:	13 96       	adiw	r26, 0x03	; 3
     2dc:	9c 93       	st	X, r25
     2de:	8e 93       	st	-X, r24
     2e0:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     2e2:	ed 93       	st	X+, r30
     2e4:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2e6:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <xMinimumEverFreeBytesRemaining+0x1>
     2ea:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2ee:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <xFreeBytesRemaining+0x1>
     2f2:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e8       	ldi	r25, 0x80	; 128
     2fa:	90 93 79 07 	sts	0x0779, r25	; 0x800779 <__data_end+0x1>
     2fe:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <__data_end>
     302:	08 95       	ret

00000304 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     30a:	a4 e8       	ldi	r26, 0x84	; 132
     30c:	b7 e0       	ldi	r27, 0x07	; 7
     30e:	01 c0       	rjmp	.+2      	; 0x312 <prvInsertBlockIntoFreeList+0xe>
     310:	df 01       	movw	r26, r30
     312:	ed 91       	ld	r30, X+
     314:	fc 91       	ld	r31, X
     316:	11 97       	sbiw	r26, 0x01	; 1
     318:	ec 17       	cp	r30, r28
     31a:	fd 07       	cpc	r31, r29
     31c:	c8 f3       	brcs	.-14     	; 0x310 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     31e:	12 96       	adiw	r26, 0x02	; 2
     320:	8d 91       	ld	r24, X+
     322:	9c 91       	ld	r25, X
     324:	13 97       	sbiw	r26, 0x03	; 3
     326:	9d 01       	movw	r18, r26
     328:	28 0f       	add	r18, r24
     32a:	39 1f       	adc	r19, r25
     32c:	c2 17       	cp	r28, r18
     32e:	d3 07       	cpc	r29, r19
     330:	49 f4       	brne	.+18     	; 0x344 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     332:	2a 81       	ldd	r18, Y+2	; 0x02
     334:	3b 81       	ldd	r19, Y+3	; 0x03
     336:	82 0f       	add	r24, r18
     338:	93 1f       	adc	r25, r19
     33a:	13 96       	adiw	r26, 0x03	; 3
     33c:	9c 93       	st	X, r25
     33e:	8e 93       	st	-X, r24
     340:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     342:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     344:	8a 81       	ldd	r24, Y+2	; 0x02
     346:	9b 81       	ldd	r25, Y+3	; 0x03
     348:	9e 01       	movw	r18, r28
     34a:	28 0f       	add	r18, r24
     34c:	39 1f       	adc	r19, r25
     34e:	e2 17       	cp	r30, r18
     350:	f3 07       	cpc	r31, r19
     352:	c1 f4       	brne	.+48     	; 0x384 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     354:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <pxEnd>
     358:	30 91 83 07 	lds	r19, 0x0783	; 0x800783 <pxEnd+0x1>
     35c:	e2 17       	cp	r30, r18
     35e:	f3 07       	cpc	r31, r19
     360:	71 f0       	breq	.+28     	; 0x37e <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     362:	22 81       	ldd	r18, Z+2	; 0x02
     364:	33 81       	ldd	r19, Z+3	; 0x03
     366:	82 0f       	add	r24, r18
     368:	93 1f       	adc	r25, r19
     36a:	9b 83       	std	Y+3, r25	; 0x03
     36c:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     36e:	ed 91       	ld	r30, X+
     370:	fc 91       	ld	r31, X
     372:	11 97       	sbiw	r26, 0x01	; 1
     374:	80 81       	ld	r24, Z
     376:	91 81       	ldd	r25, Z+1	; 0x01
     378:	99 83       	std	Y+1, r25	; 0x01
     37a:	88 83       	st	Y, r24
     37c:	05 c0       	rjmp	.+10     	; 0x388 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     37e:	39 83       	std	Y+1, r19	; 0x01
     380:	28 83       	st	Y, r18
     382:	02 c0       	rjmp	.+4      	; 0x388 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     384:	f9 83       	std	Y+1, r31	; 0x01
     386:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     388:	ca 17       	cp	r28, r26
     38a:	db 07       	cpc	r29, r27
     38c:	11 f0       	breq	.+4      	; 0x392 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     38e:	cd 93       	st	X+, r28
     390:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     3a6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     3aa:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <pxEnd>
     3ae:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <pxEnd+0x1>
     3b2:	89 2b       	or	r24, r25
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     3b6:	7d df       	rcall	.-262    	; 0x2b2 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     3b8:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <__data_end>
     3bc:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <__data_end+0x1>
     3c0:	80 23       	and	r24, r16
     3c2:	91 23       	and	r25, r17
     3c4:	89 2b       	or	r24, r25
     3c6:	09 f0       	breq	.+2      	; 0x3ca <pvPortMalloc+0x32>
     3c8:	76 c0       	rjmp	.+236    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3ca:	01 15       	cp	r16, r1
     3cc:	11 05       	cpc	r17, r1
     3ce:	49 f0       	breq	.+18     	; 0x3e2 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     3d0:	c8 01       	movw	r24, r16
     3d2:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3d4:	08 17       	cp	r16, r24
     3d6:	19 07       	cpc	r17, r25
     3d8:	18 f0       	brcs	.+6      	; 0x3e0 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	10 e0       	ldi	r17, 0x00	; 0
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     3e0:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     3e2:	01 15       	cp	r16, r1
     3e4:	11 05       	cpc	r17, r1
     3e6:	09 f4       	brne	.+2      	; 0x3ea <pvPortMalloc+0x52>
     3e8:	69 c0       	rjmp	.+210    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     3ea:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <xFreeBytesRemaining>
     3ee:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <xFreeBytesRemaining+0x1>
     3f2:	80 17       	cp	r24, r16
     3f4:	91 07       	cpc	r25, r17
     3f6:	08 f4       	brcc	.+2      	; 0x3fa <pvPortMalloc+0x62>
     3f8:	64 c0       	rjmp	.+200    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     3fa:	c0 91 84 07 	lds	r28, 0x0784	; 0x800784 <xStart>
     3fe:	d0 91 85 07 	lds	r29, 0x0785	; 0x800785 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     402:	e4 e8       	ldi	r30, 0x84	; 132
     404:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
                {
                    pxPreviousBlock = pxBlock;
     408:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     40a:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	9b 81       	ldd	r25, Y+3	; 0x03
     410:	80 17       	cp	r24, r16
     412:	91 07       	cpc	r25, r17
     414:	20 f4       	brcc	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     416:	88 81       	ld	r24, Y
     418:	99 81       	ldd	r25, Y+1	; 0x01
     41a:	00 97       	sbiw	r24, 0x00	; 0
     41c:	a9 f7       	brne	.-22     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     41e:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <pxEnd>
     422:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <pxEnd+0x1>
     426:	c8 17       	cp	r28, r24
     428:	d9 07       	cpc	r29, r25
     42a:	09 f4       	brne	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	4d c0       	rjmp	.+154    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     42e:	e0 80       	ld	r14, Z
     430:	f1 80       	ldd	r15, Z+1	; 0x01
     432:	84 e0       	ldi	r24, 0x04	; 4
     434:	e8 0e       	add	r14, r24
     436:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     438:	88 81       	ld	r24, Y
     43a:	99 81       	ldd	r25, Y+1	; 0x01
     43c:	91 83       	std	Z+1, r25	; 0x01
     43e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     440:	2a 81       	ldd	r18, Y+2	; 0x02
     442:	3b 81       	ldd	r19, Y+3	; 0x03
     444:	20 1b       	sub	r18, r16
     446:	31 0b       	sbc	r19, r17
     448:	29 30       	cpi	r18, 0x09	; 9
     44a:	31 05       	cpc	r19, r1
     44c:	48 f0       	brcs	.+18     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     44e:	ce 01       	movw	r24, r28
     450:	80 0f       	add	r24, r16
     452:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     454:	fc 01       	movw	r30, r24
     456:	33 83       	std	Z+3, r19	; 0x03
     458:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     45a:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     45c:	0a 83       	std	Y+2, r16	; 0x02
     45e:	52 df       	rcall	.-348    	; 0x304 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     460:	2a 81       	ldd	r18, Y+2	; 0x02
     462:	3b 81       	ldd	r19, Y+3	; 0x03
     464:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <xFreeBytesRemaining>
     468:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <xFreeBytesRemaining+0x1>
     46c:	82 1b       	sub	r24, r18
     46e:	93 0b       	sbc	r25, r19
     470:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <xFreeBytesRemaining+0x1>
     474:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     478:	40 91 7e 07 	lds	r20, 0x077E	; 0x80077e <xMinimumEverFreeBytesRemaining>
     47c:	50 91 7f 07 	lds	r21, 0x077F	; 0x80077f <xMinimumEverFreeBytesRemaining+0x1>
     480:	84 17       	cp	r24, r20
     482:	95 07       	cpc	r25, r21
     484:	20 f4       	brcc	.+8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     486:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <xMinimumEverFreeBytesRemaining+0x1>
     48a:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     48e:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <__data_end>
     492:	90 91 79 07 	lds	r25, 0x0779	; 0x800779 <__data_end+0x1>
     496:	28 2b       	or	r18, r24
     498:	39 2b       	or	r19, r25
     49a:	3b 83       	std	Y+3, r19	; 0x03
     49c:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     49e:	19 82       	std	Y+1, r1	; 0x01
     4a0:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     4a2:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <xNumberOfSuccessfulAllocations>
     4a6:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <xNumberOfSuccessfulAllocations+0x1>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <xNumberOfSuccessfulAllocations+0x1>
     4b0:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <xNumberOfSuccessfulAllocations>
     4b4:	0b c0       	rjmp	.+22     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     4b6:	e1 2c       	mov	r14, r1
     4b8:	f1 2c       	mov	r15, r1
     4ba:	08 c0       	rjmp	.+16     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4bc:	e1 2c       	mov	r14, r1
     4be:	f1 2c       	mov	r15, r1
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c2:	e1 2c       	mov	r14, r1
     4c4:	f1 2c       	mov	r15, r1
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c8:	e1 2c       	mov	r14, r1
     4ca:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4cc:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     4d0:	e1 14       	cp	r14, r1
     4d2:	f1 04       	cpc	r15, r1
     4d4:	11 f4       	brne	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     4d6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     4da:	c7 01       	movw	r24, r14
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	08 95       	ret

000004ea <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     4f2:	00 97       	sbiw	r24, 0x00	; 0
     4f4:	91 f1       	breq	.+100    	; 0x55a <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     4f6:	ec 01       	movw	r28, r24
     4f8:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     4fa:	4a 81       	ldd	r20, Y+2	; 0x02
     4fc:	5b 81       	ldd	r21, Y+3	; 0x03
     4fe:	20 91 78 07 	lds	r18, 0x0778	; 0x800778 <__data_end>
     502:	30 91 79 07 	lds	r19, 0x0779	; 0x800779 <__data_end+0x1>
     506:	ba 01       	movw	r22, r20
     508:	62 23       	and	r22, r18
     50a:	73 23       	and	r23, r19
     50c:	67 2b       	or	r22, r23
     50e:	29 f1       	breq	.+74     	; 0x55a <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     510:	68 81       	ld	r22, Y
     512:	79 81       	ldd	r23, Y+1	; 0x01
     514:	67 2b       	or	r22, r23
     516:	09 f5       	brne	.+66     	; 0x55a <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     518:	20 95       	com	r18
     51a:	30 95       	com	r19
     51c:	24 23       	and	r18, r20
     51e:	35 23       	and	r19, r21
     520:	3b 83       	std	Y+3, r19	; 0x03
     522:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     524:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     528:	8a 81       	ldd	r24, Y+2	; 0x02
     52a:	9b 81       	ldd	r25, Y+3	; 0x03
     52c:	20 91 80 07 	lds	r18, 0x0780	; 0x800780 <xFreeBytesRemaining>
     530:	30 91 81 07 	lds	r19, 0x0781	; 0x800781 <xFreeBytesRemaining+0x1>
     534:	82 0f       	add	r24, r18
     536:	93 1f       	adc	r25, r19
     538:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <xFreeBytesRemaining+0x1>
     53c:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     540:	ce 01       	movw	r24, r28
     542:	e0 de       	rcall	.-576    	; 0x304 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     544:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <xNumberOfSuccessfulFrees>
     548:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <xNumberOfSuccessfulFrees+0x1>
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	90 93 7b 07 	sts	0x077B, r25	; 0x80077b <xNumberOfSuccessfulFrees+0x1>
     552:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     556:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	08 95       	ret

00000564 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     564:	fc 01       	movw	r30, r24
     566:	03 96       	adiw	r24, 0x03	; 3
     568:	92 83       	std	Z+2, r25	; 0x02
     56a:	81 83       	std	Z+1, r24	; 0x01
     56c:	4f ef       	ldi	r20, 0xFF	; 255
     56e:	5f ef       	ldi	r21, 0xFF	; 255
     570:	ba 01       	movw	r22, r20
     572:	43 83       	std	Z+3, r20	; 0x03
     574:	54 83       	std	Z+4, r21	; 0x04
     576:	65 83       	std	Z+5, r22	; 0x05
     578:	76 83       	std	Z+6, r23	; 0x06
     57a:	90 87       	std	Z+8, r25	; 0x08
     57c:	87 83       	std	Z+7, r24	; 0x07
     57e:	92 87       	std	Z+10, r25	; 0x0a
     580:	81 87       	std	Z+9, r24	; 0x09
     582:	10 82       	st	Z, r1
     584:	08 95       	ret

00000586 <vListInitialiseItem>:
     586:	fc 01       	movw	r30, r24
     588:	13 86       	std	Z+11, r1	; 0x0b
     58a:	12 86       	std	Z+10, r1	; 0x0a
     58c:	08 95       	ret

0000058e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     598:	08 81       	ld	r16, Y
     59a:	19 81       	ldd	r17, Y+1	; 0x01
     59c:	2a 81       	ldd	r18, Y+2	; 0x02
     59e:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     5a0:	0f 3f       	cpi	r16, 0xFF	; 255
     5a2:	4f ef       	ldi	r20, 0xFF	; 255
     5a4:	14 07       	cpc	r17, r20
     5a6:	24 07       	cpc	r18, r20
     5a8:	34 07       	cpc	r19, r20
     5aa:	21 f4       	brne	.+8      	; 0x5b4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     5ac:	fc 01       	movw	r30, r24
     5ae:	a1 85       	ldd	r26, Z+9	; 0x09
     5b0:	b2 85       	ldd	r27, Z+10	; 0x0a
     5b2:	11 c0       	rjmp	.+34     	; 0x5d6 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     5b4:	dc 01       	movw	r26, r24
     5b6:	13 96       	adiw	r26, 0x03	; 3
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <vListInsert+0x2e>
     5ba:	df 01       	movw	r26, r30
     5bc:	14 96       	adiw	r26, 0x04	; 4
     5be:	ed 91       	ld	r30, X+
     5c0:	fc 91       	ld	r31, X
     5c2:	15 97       	sbiw	r26, 0x05	; 5
     5c4:	40 81       	ld	r20, Z
     5c6:	51 81       	ldd	r21, Z+1	; 0x01
     5c8:	62 81       	ldd	r22, Z+2	; 0x02
     5ca:	73 81       	ldd	r23, Z+3	; 0x03
     5cc:	04 17       	cp	r16, r20
     5ce:	15 07       	cpc	r17, r21
     5d0:	26 07       	cpc	r18, r22
     5d2:	37 07       	cpc	r19, r23
     5d4:	90 f7       	brcc	.-28     	; 0x5ba <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5d6:	14 96       	adiw	r26, 0x04	; 4
     5d8:	ed 91       	ld	r30, X+
     5da:	fc 91       	ld	r31, X
     5dc:	15 97       	sbiw	r26, 0x05	; 5
     5de:	fd 83       	std	Y+5, r31	; 0x05
     5e0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5e2:	d7 83       	std	Z+7, r29	; 0x07
     5e4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     5e6:	bf 83       	std	Y+7, r27	; 0x07
     5e8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     5ea:	15 96       	adiw	r26, 0x05	; 5
     5ec:	dc 93       	st	X, r29
     5ee:	ce 93       	st	-X, r28
     5f0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     5f2:	9b 87       	std	Y+11, r25	; 0x0b
     5f4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 81       	ld	r18, Z
     5fa:	2f 5f       	subi	r18, 0xFF	; 255
     5fc:	20 83       	st	Z, r18
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     60e:	a2 85       	ldd	r26, Z+10	; 0x0a
     610:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     612:	c4 81       	ldd	r28, Z+4	; 0x04
     614:	d5 81       	ldd	r29, Z+5	; 0x05
     616:	86 81       	ldd	r24, Z+6	; 0x06
     618:	97 81       	ldd	r25, Z+7	; 0x07
     61a:	9f 83       	std	Y+7, r25	; 0x07
     61c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     61e:	c6 81       	ldd	r28, Z+6	; 0x06
     620:	d7 81       	ldd	r29, Z+7	; 0x07
     622:	84 81       	ldd	r24, Z+4	; 0x04
     624:	95 81       	ldd	r25, Z+5	; 0x05
     626:	9d 83       	std	Y+5, r25	; 0x05
     628:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     62a:	11 96       	adiw	r26, 0x01	; 1
     62c:	8d 91       	ld	r24, X+
     62e:	9c 91       	ld	r25, X
     630:	12 97       	sbiw	r26, 0x02	; 2
     632:	e8 17       	cp	r30, r24
     634:	f9 07       	cpc	r31, r25
     636:	31 f4       	brne	.+12     	; 0x644 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     638:	86 81       	ldd	r24, Z+6	; 0x06
     63a:	97 81       	ldd	r25, Z+7	; 0x07
     63c:	12 96       	adiw	r26, 0x02	; 2
     63e:	9c 93       	st	X, r25
     640:	8e 93       	st	-X, r24
     642:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     644:	13 86       	std	Z+11, r1	; 0x0b
     646:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     648:	8c 91       	ld	r24, X
     64a:	81 50       	subi	r24, 0x01	; 1
     64c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     64e:	8c 91       	ld	r24, X
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     656:	a8 95       	wdr
     658:	90 ec       	ldi	r25, 0xC0	; 192
     65a:	88 e1       	ldi	r24, 0x18	; 24
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	a8 95       	wdr
     662:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     666:	0f be       	out	0x3f, r0	; 63
     668:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     66c:	08 95       	ret

0000066e <pxPortInitialiseStack>:
     66e:	fc 01       	movw	r30, r24
     670:	60 83       	st	Z, r22
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	70 83       	st	Z, r23
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	10 82       	st	Z, r1
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	10 82       	st	Z, r1
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	20 e8       	ldi	r18, 0x80	; 128
     682:	20 83       	st	Z, r18
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	10 82       	st	Z, r1
     688:	31 97       	sbiw	r30, 0x01	; 1
     68a:	10 82       	st	Z, r1
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	10 82       	st	Z, r1
     690:	77 97       	sbiw	r30, 0x17	; 23
     692:	40 83       	st	Z, r20
     694:	31 97       	sbiw	r30, 0x01	; 1
     696:	50 83       	st	Z, r21
     698:	86 97       	sbiw	r24, 0x26	; 38
     69a:	08 95       	ret

0000069c <xPortStartScheduler>:
     69c:	dc df       	rcall	.-72     	; 0x656 <prvSetupTimerInterrupt>
     69e:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
     6a2:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
     6a6:	cd 91       	ld	r28, X+
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	dd 91       	ld	r29, X+
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	ff 91       	pop	r31
     6b0:	ef 91       	pop	r30
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	bf 91       	pop	r27
     6b8:	af 91       	pop	r26
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	7f 91       	pop	r23
     6c0:	6f 91       	pop	r22
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	cf 90       	pop	r12
     6d6:	bf 90       	pop	r11
     6d8:	af 90       	pop	r10
     6da:	9f 90       	pop	r9
     6dc:	8f 90       	pop	r8
     6de:	7f 90       	pop	r7
     6e0:	6f 90       	pop	r6
     6e2:	5f 90       	pop	r5
     6e4:	4f 90       	pop	r4
     6e6:	3f 90       	pop	r3
     6e8:	2f 90       	pop	r2
     6ea:	1f 90       	pop	r1
     6ec:	0f 90       	pop	r0
     6ee:	0c be       	out	0x3c, r0	; 60
     6f0:	0f 90       	pop	r0
     6f2:	0b be       	out	0x3b, r0	; 59
     6f4:	0f 90       	pop	r0
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	0f 90       	pop	r0
     6fa:	08 95       	ret
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	08 95       	ret

00000700 <vPortYield>:
     700:	0f 92       	push	r0
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	0f 92       	push	r0
     708:	0b b6       	in	r0, 0x3b	; 59
     70a:	0f 92       	push	r0
     70c:	0c b6       	in	r0, 0x3c	; 60
     70e:	0f 92       	push	r0
     710:	1f 92       	push	r1
     712:	11 24       	eor	r1, r1
     714:	2f 92       	push	r2
     716:	3f 92       	push	r3
     718:	4f 92       	push	r4
     71a:	5f 92       	push	r5
     71c:	6f 92       	push	r6
     71e:	7f 92       	push	r7
     720:	8f 92       	push	r8
     722:	9f 92       	push	r9
     724:	af 92       	push	r10
     726:	bf 92       	push	r11
     728:	cf 92       	push	r12
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	2f 93       	push	r18
     736:	3f 93       	push	r19
     738:	4f 93       	push	r20
     73a:	5f 93       	push	r21
     73c:	6f 93       	push	r22
     73e:	7f 93       	push	r23
     740:	8f 93       	push	r24
     742:	9f 93       	push	r25
     744:	af 93       	push	r26
     746:	bf 93       	push	r27
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
     750:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
     754:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
     758:	0d b6       	in	r0, 0x3d	; 61
     75a:	0d 92       	st	X+, r0
     75c:	0e b6       	in	r0, 0x3e	; 62
     75e:	0d 92       	st	X+, r0
     760:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <vTaskSwitchContext>
     764:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
     768:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
     76c:	cd 91       	ld	r28, X+
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	dd 91       	ld	r29, X+
     772:	de bf       	out	0x3e, r29	; 62
     774:	ff 91       	pop	r31
     776:	ef 91       	pop	r30
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	bf 91       	pop	r27
     77e:	af 91       	pop	r26
     780:	9f 91       	pop	r25
     782:	8f 91       	pop	r24
     784:	7f 91       	pop	r23
     786:	6f 91       	pop	r22
     788:	5f 91       	pop	r21
     78a:	4f 91       	pop	r20
     78c:	3f 91       	pop	r19
     78e:	2f 91       	pop	r18
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	9f 90       	pop	r9
     7a2:	8f 90       	pop	r8
     7a4:	7f 90       	pop	r7
     7a6:	6f 90       	pop	r6
     7a8:	5f 90       	pop	r5
     7aa:	4f 90       	pop	r4
     7ac:	3f 90       	pop	r3
     7ae:	2f 90       	pop	r2
     7b0:	1f 90       	pop	r1
     7b2:	0f 90       	pop	r0
     7b4:	0c be       	out	0x3c, r0	; 60
     7b6:	0f 90       	pop	r0
     7b8:	0b be       	out	0x3b, r0	; 59
     7ba:	0f 90       	pop	r0
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	0f 90       	pop	r0
     7c0:	08 95       	ret

000007c2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     7c2:	0f 92       	push	r0
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	0f 92       	push	r0
     7ca:	0b b6       	in	r0, 0x3b	; 59
     7cc:	0f 92       	push	r0
     7ce:	0c b6       	in	r0, 0x3c	; 60
     7d0:	0f 92       	push	r0
     7d2:	1f 92       	push	r1
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 92       	push	r2
     7d8:	3f 92       	push	r3
     7da:	4f 92       	push	r4
     7dc:	5f 92       	push	r5
     7de:	6f 92       	push	r6
     7e0:	7f 92       	push	r7
     7e2:	8f 92       	push	r8
     7e4:	9f 92       	push	r9
     7e6:	af 92       	push	r10
     7e8:	bf 92       	push	r11
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	4f 93       	push	r20
     7fc:	5f 93       	push	r21
     7fe:	6f 93       	push	r22
     800:	7f 93       	push	r23
     802:	8f 93       	push	r24
     804:	9f 93       	push	r25
     806:	af 93       	push	r26
     808:	bf 93       	push	r27
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ef 93       	push	r30
     810:	ff 93       	push	r31
     812:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
     816:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
     81a:	0d b6       	in	r0, 0x3d	; 61
     81c:	0d 92       	st	X+, r0
     81e:	0e b6       	in	r0, 0x3e	; 62
     820:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     822:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     824:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <xTaskIncrementTick>
     828:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     82a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     82e:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
     832:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
     836:	cd 91       	ld	r28, X+
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	dd 91       	ld	r29, X+
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	ff 91       	pop	r31
     840:	ef 91       	pop	r30
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	bf 91       	pop	r27
     848:	af 91       	pop	r26
     84a:	9f 91       	pop	r25
     84c:	8f 91       	pop	r24
     84e:	7f 91       	pop	r23
     850:	6f 91       	pop	r22
     852:	5f 91       	pop	r21
     854:	4f 91       	pop	r20
     856:	3f 91       	pop	r19
     858:	2f 91       	pop	r18
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	bf 90       	pop	r11
     868:	af 90       	pop	r10
     86a:	9f 90       	pop	r9
     86c:	8f 90       	pop	r8
     86e:	7f 90       	pop	r7
     870:	6f 90       	pop	r6
     872:	5f 90       	pop	r5
     874:	4f 90       	pop	r4
     876:	3f 90       	pop	r3
     878:	2f 90       	pop	r2
     87a:	1f 90       	pop	r1
     87c:	0f 90       	pop	r0
     87e:	0c be       	out	0x3c, r0	; 60
     880:	0f 90       	pop	r0
     882:	0b be       	out	0x3b, r0	; 59
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     88a:	08 95       	ret

0000088c <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     88c:	9a df       	rcall	.-204    	; 0x7c2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     88e:	18 95       	reti

00000890 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	0f 92       	push	r0
     896:	fc 01       	movw	r30, r24
     898:	86 8d       	ldd	r24, Z+30	; 0x1e
     89a:	81 11       	cpse	r24, r1
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <prvIsQueueEmpty+0x12>
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <prvIsQueueEmpty+0x14>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	08 95       	ret

000008aa <prvIsQueueFull>:
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	0f 92       	push	r0
     8b0:	fc 01       	movw	r30, r24
     8b2:	26 8d       	ldd	r18, Z+30	; 0x1e
     8b4:	87 8d       	ldd	r24, Z+31	; 0x1f
     8b6:	28 13       	cpse	r18, r24
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <prvIsQueueFull+0x14>
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <prvIsQueueFull+0x16>
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	08 95       	ret

000008c6 <prvCopyDataToQueue>:
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	ec 01       	movw	r28, r24
     8d0:	04 2f       	mov	r16, r20
     8d2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8d4:	48 a1       	ldd	r20, Y+32	; 0x20
     8d6:	41 11       	cpse	r20, r1
     8d8:	0c c0       	rjmp	.+24     	; 0x8f2 <prvCopyDataToQueue+0x2c>
     8da:	88 81       	ld	r24, Y
     8dc:	99 81       	ldd	r25, Y+1	; 0x01
     8de:	89 2b       	or	r24, r25
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <prvCopyDataToQueue+0x1e>
     8e2:	42 c0       	rjmp	.+132    	; 0x968 <prvCopyDataToQueue+0xa2>
     8e4:	8c 81       	ldd	r24, Y+4	; 0x04
     8e6:	9d 81       	ldd	r25, Y+5	; 0x05
     8e8:	0e 94 6e 11 	call	0x22dc	; 0x22dc <xTaskPriorityDisinherit>
     8ec:	1d 82       	std	Y+5, r1	; 0x05
     8ee:	1c 82       	std	Y+4, r1	; 0x04
     8f0:	42 c0       	rjmp	.+132    	; 0x976 <prvCopyDataToQueue+0xb0>
     8f2:	01 11       	cpse	r16, r1
     8f4:	17 c0       	rjmp	.+46     	; 0x924 <prvCopyDataToQueue+0x5e>
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	9b 81       	ldd	r25, Y+3	; 0x03
     8fc:	0e 94 31 2b 	call	0x5662	; 0x5662 <memcpy>
     900:	28 a1       	ldd	r18, Y+32	; 0x20
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	9b 81       	ldd	r25, Y+3	; 0x03
     906:	82 0f       	add	r24, r18
     908:	91 1d       	adc	r25, r1
     90a:	9b 83       	std	Y+3, r25	; 0x03
     90c:	8a 83       	std	Y+2, r24	; 0x02
     90e:	2c 81       	ldd	r18, Y+4	; 0x04
     910:	3d 81       	ldd	r19, Y+5	; 0x05
     912:	82 17       	cp	r24, r18
     914:	93 07       	cpc	r25, r19
     916:	50 f1       	brcs	.+84     	; 0x96c <prvCopyDataToQueue+0xa6>
     918:	88 81       	ld	r24, Y
     91a:	99 81       	ldd	r25, Y+1	; 0x01
     91c:	9b 83       	std	Y+3, r25	; 0x03
     91e:	8a 83       	std	Y+2, r24	; 0x02
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	29 c0       	rjmp	.+82     	; 0x976 <prvCopyDataToQueue+0xb0>
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	8e 81       	ldd	r24, Y+6	; 0x06
     928:	9f 81       	ldd	r25, Y+7	; 0x07
     92a:	0e 94 31 2b 	call	0x5662	; 0x5662 <memcpy>
     92e:	88 a1       	ldd	r24, Y+32	; 0x20
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	91 95       	neg	r25
     934:	81 95       	neg	r24
     936:	91 09       	sbc	r25, r1
     938:	2e 81       	ldd	r18, Y+6	; 0x06
     93a:	3f 81       	ldd	r19, Y+7	; 0x07
     93c:	28 0f       	add	r18, r24
     93e:	39 1f       	adc	r19, r25
     940:	3f 83       	std	Y+7, r19	; 0x07
     942:	2e 83       	std	Y+6, r18	; 0x06
     944:	48 81       	ld	r20, Y
     946:	59 81       	ldd	r21, Y+1	; 0x01
     948:	24 17       	cp	r18, r20
     94a:	35 07       	cpc	r19, r21
     94c:	30 f4       	brcc	.+12     	; 0x95a <prvCopyDataToQueue+0x94>
     94e:	2c 81       	ldd	r18, Y+4	; 0x04
     950:	3d 81       	ldd	r19, Y+5	; 0x05
     952:	82 0f       	add	r24, r18
     954:	93 1f       	adc	r25, r19
     956:	9f 83       	std	Y+7, r25	; 0x07
     958:	8e 83       	std	Y+6, r24	; 0x06
     95a:	02 30       	cpi	r16, 0x02	; 2
     95c:	49 f4       	brne	.+18     	; 0x970 <prvCopyDataToQueue+0xaa>
     95e:	11 23       	and	r17, r17
     960:	49 f0       	breq	.+18     	; 0x974 <prvCopyDataToQueue+0xae>
     962:	11 50       	subi	r17, 0x01	; 1
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	07 c0       	rjmp	.+14     	; 0x976 <prvCopyDataToQueue+0xb0>
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	05 c0       	rjmp	.+10     	; 0x976 <prvCopyDataToQueue+0xb0>
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	03 c0       	rjmp	.+6      	; 0x976 <prvCopyDataToQueue+0xb0>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	01 c0       	rjmp	.+2      	; 0x976 <prvCopyDataToQueue+0xb0>
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	1f 5f       	subi	r17, 0xFF	; 255
     978:	1e 8f       	std	Y+30, r17	; 0x1e
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	08 95       	ret

00000984 <prvCopyDataFromQueue>:
     984:	fc 01       	movw	r30, r24
     986:	40 a1       	ldd	r20, Z+32	; 0x20
     988:	44 23       	and	r20, r20
     98a:	a9 f0       	breq	.+42     	; 0x9b6 <prvCopyDataFromQueue+0x32>
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	26 81       	ldd	r18, Z+6	; 0x06
     990:	37 81       	ldd	r19, Z+7	; 0x07
     992:	24 0f       	add	r18, r20
     994:	35 1f       	adc	r19, r21
     996:	37 83       	std	Z+7, r19	; 0x07
     998:	26 83       	std	Z+6, r18	; 0x06
     99a:	84 81       	ldd	r24, Z+4	; 0x04
     99c:	95 81       	ldd	r25, Z+5	; 0x05
     99e:	28 17       	cp	r18, r24
     9a0:	39 07       	cpc	r19, r25
     9a2:	20 f0       	brcs	.+8      	; 0x9ac <prvCopyDataFromQueue+0x28>
     9a4:	80 81       	ld	r24, Z
     9a6:	91 81       	ldd	r25, Z+1	; 0x01
     9a8:	97 83       	std	Z+7, r25	; 0x07
     9aa:	86 83       	std	Z+6, r24	; 0x06
     9ac:	cb 01       	movw	r24, r22
     9ae:	66 81       	ldd	r22, Z+6	; 0x06
     9b0:	77 81       	ldd	r23, Z+7	; 0x07
     9b2:	0c 94 31 2b 	jmp	0x5662	; 0x5662 <memcpy>
     9b6:	08 95       	ret

000009b8 <prvUnlockQueue>:
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	ec 01       	movw	r28, r24
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	0f 92       	push	r0
     9c6:	1a a1       	ldd	r17, Y+34	; 0x22
     9c8:	0b c0       	rjmp	.+22     	; 0x9e0 <prvUnlockQueue+0x28>
     9ca:	8b 89       	ldd	r24, Y+19	; 0x13
     9cc:	88 23       	and	r24, r24
     9ce:	51 f0       	breq	.+20     	; 0x9e4 <prvUnlockQueue+0x2c>
     9d0:	ce 01       	movw	r24, r28
     9d2:	43 96       	adiw	r24, 0x13	; 19
     9d4:	0e 94 1b 10 	call	0x2036	; 0x2036 <xTaskRemoveFromEventList>
     9d8:	81 11       	cpse	r24, r1
     9da:	0e 94 57 11 	call	0x22ae	; 0x22ae <vTaskMissedYield>
     9de:	11 50       	subi	r17, 0x01	; 1
     9e0:	11 16       	cp	r1, r17
     9e2:	9c f3       	brlt	.-26     	; 0x9ca <prvUnlockQueue+0x12>
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	8a a3       	std	Y+34, r24	; 0x22
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	0f 92       	push	r0
     9f2:	19 a1       	ldd	r17, Y+33	; 0x21
     9f4:	0b c0       	rjmp	.+22     	; 0xa0c <prvUnlockQueue+0x54>
     9f6:	88 85       	ldd	r24, Y+8	; 0x08
     9f8:	88 23       	and	r24, r24
     9fa:	51 f0       	breq	.+20     	; 0xa10 <prvUnlockQueue+0x58>
     9fc:	ce 01       	movw	r24, r28
     9fe:	08 96       	adiw	r24, 0x08	; 8
     a00:	0e 94 1b 10 	call	0x2036	; 0x2036 <xTaskRemoveFromEventList>
     a04:	81 11       	cpse	r24, r1
     a06:	0e 94 57 11 	call	0x22ae	; 0x22ae <vTaskMissedYield>
     a0a:	11 50       	subi	r17, 0x01	; 1
     a0c:	11 16       	cp	r1, r17
     a0e:	9c f3       	brlt	.-26     	; 0x9f6 <prvUnlockQueue+0x3e>
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	89 a3       	std	Y+33, r24	; 0x21
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	08 95       	ret

00000a20 <xQueueGenericReset>:
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ec 01       	movw	r28, r24
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	0f 92       	push	r0
     a2c:	e8 81       	ld	r30, Y
     a2e:	f9 81       	ldd	r31, Y+1	; 0x01
     a30:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a32:	28 a1       	ldd	r18, Y+32	; 0x20
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	82 9f       	mul	r24, r18
     a3a:	a0 01       	movw	r20, r0
     a3c:	83 9f       	mul	r24, r19
     a3e:	50 0d       	add	r21, r0
     a40:	92 9f       	mul	r25, r18
     a42:	50 0d       	add	r21, r0
     a44:	11 24       	eor	r1, r1
     a46:	4e 0f       	add	r20, r30
     a48:	5f 1f       	adc	r21, r31
     a4a:	5d 83       	std	Y+5, r21	; 0x05
     a4c:	4c 83       	std	Y+4, r20	; 0x04
     a4e:	1e 8e       	std	Y+30, r1	; 0x1e
     a50:	fb 83       	std	Y+3, r31	; 0x03
     a52:	ea 83       	std	Y+2, r30	; 0x02
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	28 9f       	mul	r18, r24
     a58:	a0 01       	movw	r20, r0
     a5a:	29 9f       	mul	r18, r25
     a5c:	50 0d       	add	r21, r0
     a5e:	38 9f       	mul	r19, r24
     a60:	50 0d       	add	r21, r0
     a62:	11 24       	eor	r1, r1
     a64:	cf 01       	movw	r24, r30
     a66:	84 0f       	add	r24, r20
     a68:	95 1f       	adc	r25, r21
     a6a:	9f 83       	std	Y+7, r25	; 0x07
     a6c:	8e 83       	std	Y+6, r24	; 0x06
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	89 a3       	std	Y+33, r24	; 0x21
     a72:	8a a3       	std	Y+34, r24	; 0x22
     a74:	61 11       	cpse	r22, r1
     a76:	0b c0       	rjmp	.+22     	; 0xa8e <xQueueGenericReset+0x6e>
     a78:	88 85       	ldd	r24, Y+8	; 0x08
     a7a:	88 23       	and	r24, r24
     a7c:	71 f0       	breq	.+28     	; 0xa9a <xQueueGenericReset+0x7a>
     a7e:	ce 01       	movw	r24, r28
     a80:	08 96       	adiw	r24, 0x08	; 8
     a82:	0e 94 1b 10 	call	0x2036	; 0x2036 <xTaskRemoveFromEventList>
     a86:	88 23       	and	r24, r24
     a88:	41 f0       	breq	.+16     	; 0xa9a <xQueueGenericReset+0x7a>
     a8a:	3a de       	rcall	.-908    	; 0x700 <vPortYield>
     a8c:	06 c0       	rjmp	.+12     	; 0xa9a <xQueueGenericReset+0x7a>
     a8e:	ce 01       	movw	r24, r28
     a90:	08 96       	adiw	r24, 0x08	; 8
     a92:	68 dd       	rcall	.-1328   	; 0x564 <vListInitialise>
     a94:	ce 01       	movw	r24, r28
     a96:	43 96       	adiw	r24, 0x13	; 19
     a98:	65 dd       	rcall	.-1334   	; 0x564 <vListInitialise>
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <prvInitialiseNewQueue>:
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	f8 01       	movw	r30, r16
     aac:	61 11       	cpse	r22, r1
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <prvInitialiseNewQueue+0x10>
     ab0:	11 83       	std	Z+1, r17	; 0x01
     ab2:	00 83       	st	Z, r16
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <prvInitialiseNewQueue+0x14>
     ab6:	51 83       	std	Z+1, r21	; 0x01
     ab8:	40 83       	st	Z, r20
     aba:	87 8f       	std	Z+31, r24	; 0x1f
     abc:	60 a3       	std	Z+32, r22	; 0x20
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	cf 01       	movw	r24, r30
     ac2:	ae df       	rcall	.-164    	; 0xa20 <xQueueGenericReset>
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	08 95       	ret

00000aca <xQueueGenericCreate>:
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	f8 2e       	mov	r15, r24
     ada:	e6 2e       	mov	r14, r22
     adc:	d4 2e       	mov	r13, r20
     ade:	86 9f       	mul	r24, r22
     ae0:	c0 01       	movw	r24, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	83 96       	adiw	r24, 0x23	; 35
     ae6:	58 dc       	rcall	.-1872   	; 0x398 <pvPortMalloc>
     ae8:	ec 01       	movw	r28, r24
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	41 f0       	breq	.+16     	; 0xafe <xQueueGenericCreate+0x34>
     aee:	8c 01       	movw	r16, r24
     af0:	2d 2d       	mov	r18, r13
     af2:	ac 01       	movw	r20, r24
     af4:	4d 5d       	subi	r20, 0xDD	; 221
     af6:	5f 4f       	sbci	r21, 0xFF	; 255
     af8:	6e 2d       	mov	r22, r14
     afa:	8f 2d       	mov	r24, r15
     afc:	d4 df       	rcall	.-88     	; 0xaa6 <prvInitialiseNewQueue>
     afe:	ce 01       	movw	r24, r28
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	08 95       	ret

00000b10 <xQueueGenericSend>:
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	29 97       	sbiw	r28, 0x09	; 9
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
     b30:	7c 01       	movw	r14, r24
     b32:	6b 01       	movw	r12, r22
     b34:	2e 83       	std	Y+6, r18	; 0x06
     b36:	3f 83       	std	Y+7, r19	; 0x07
     b38:	48 87       	std	Y+8, r20	; 0x08
     b3a:	59 87       	std	Y+9, r21	; 0x09
     b3c:	10 e0       	ldi	r17, 0x00	; 0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	0f 92       	push	r0
     b44:	f7 01       	movw	r30, r14
     b46:	96 8d       	ldd	r25, Z+30	; 0x1e
     b48:	87 8d       	ldd	r24, Z+31	; 0x1f
     b4a:	98 17       	cp	r25, r24
     b4c:	10 f0       	brcs	.+4      	; 0xb52 <xQueueGenericSend+0x42>
     b4e:	02 30       	cpi	r16, 0x02	; 2
     b50:	b1 f4       	brne	.+44     	; 0xb7e <xQueueGenericSend+0x6e>
     b52:	40 2f       	mov	r20, r16
     b54:	b6 01       	movw	r22, r12
     b56:	c7 01       	movw	r24, r14
     b58:	b6 de       	rcall	.-660    	; 0x8c6 <prvCopyDataToQueue>
     b5a:	f7 01       	movw	r30, r14
     b5c:	93 89       	ldd	r25, Z+19	; 0x13
     b5e:	99 23       	and	r25, r25
     b60:	41 f0       	breq	.+16     	; 0xb72 <xQueueGenericSend+0x62>
     b62:	c7 01       	movw	r24, r14
     b64:	43 96       	adiw	r24, 0x13	; 19
     b66:	0e 94 1b 10 	call	0x2036	; 0x2036 <xTaskRemoveFromEventList>
     b6a:	88 23       	and	r24, r24
     b6c:	21 f0       	breq	.+8      	; 0xb76 <xQueueGenericSend+0x66>
     b6e:	c8 dd       	rcall	.-1136   	; 0x700 <vPortYield>
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <xQueueGenericSend+0x66>
     b72:	81 11       	cpse	r24, r1
     b74:	c5 dd       	rcall	.-1142   	; 0x700 <vPortYield>
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	4a c0       	rjmp	.+148    	; 0xc12 <xQueueGenericSend+0x102>
     b7e:	8e 81       	ldd	r24, Y+6	; 0x06
     b80:	9f 81       	ldd	r25, Y+7	; 0x07
     b82:	a8 85       	ldd	r26, Y+8	; 0x08
     b84:	b9 85       	ldd	r27, Y+9	; 0x09
     b86:	89 2b       	or	r24, r25
     b88:	8a 2b       	or	r24, r26
     b8a:	8b 2b       	or	r24, r27
     b8c:	21 f4       	brne	.+8      	; 0xb96 <xQueueGenericSend+0x86>
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	3e c0       	rjmp	.+124    	; 0xc12 <xQueueGenericSend+0x102>
     b96:	11 11       	cpse	r17, r1
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <xQueueGenericSend+0x94>
     b9a:	ce 01       	movw	r24, r28
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskInternalSetTimeOutState>
     ba2:	11 e0       	ldi	r17, 0x01	; 1
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	ec d6       	rcall	.+3544   	; 0x1982 <vTaskSuspendAll>
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	0f 92       	push	r0
     bb0:	f7 01       	movw	r30, r14
     bb2:	81 a1       	ldd	r24, Z+33	; 0x21
     bb4:	8f 3f       	cpi	r24, 0xFF	; 255
     bb6:	09 f4       	brne	.+2      	; 0xbba <xQueueGenericSend+0xaa>
     bb8:	11 a2       	std	Z+33, r1	; 0x21
     bba:	f7 01       	movw	r30, r14
     bbc:	82 a1       	ldd	r24, Z+34	; 0x22
     bbe:	8f 3f       	cpi	r24, 0xFF	; 255
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <xQueueGenericSend+0xb4>
     bc2:	12 a2       	std	Z+34, r1	; 0x22
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	be 01       	movw	r22, r28
     bca:	6a 5f       	subi	r22, 0xFA	; 250
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	ce 01       	movw	r24, r28
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xTaskCheckForTimeOut>
     bd6:	81 11       	cpse	r24, r1
     bd8:	18 c0       	rjmp	.+48     	; 0xc0a <xQueueGenericSend+0xfa>
     bda:	c7 01       	movw	r24, r14
     bdc:	66 de       	rcall	.-820    	; 0x8aa <prvIsQueueFull>
     bde:	88 23       	and	r24, r24
     be0:	81 f0       	breq	.+32     	; 0xc02 <xQueueGenericSend+0xf2>
     be2:	4e 81       	ldd	r20, Y+6	; 0x06
     be4:	5f 81       	ldd	r21, Y+7	; 0x07
     be6:	68 85       	ldd	r22, Y+8	; 0x08
     be8:	79 85       	ldd	r23, Y+9	; 0x09
     bea:	c7 01       	movw	r24, r14
     bec:	08 96       	adiw	r24, 0x08	; 8
     bee:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <vTaskPlaceOnEventList>
     bf2:	c7 01       	movw	r24, r14
     bf4:	e1 de       	rcall	.-574    	; 0x9b8 <prvUnlockQueue>
     bf6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskResumeAll>
     bfa:	81 11       	cpse	r24, r1
     bfc:	a0 cf       	rjmp	.-192    	; 0xb3e <xQueueGenericSend+0x2e>
     bfe:	80 dd       	rcall	.-1280   	; 0x700 <vPortYield>
     c00:	9e cf       	rjmp	.-196    	; 0xb3e <xQueueGenericSend+0x2e>
     c02:	c7 01       	movw	r24, r14
     c04:	d9 de       	rcall	.-590    	; 0x9b8 <prvUnlockQueue>
     c06:	fd d7       	rcall	.+4090   	; 0x1c02 <xTaskResumeAll>
     c08:	9a cf       	rjmp	.-204    	; 0xb3e <xQueueGenericSend+0x2e>
     c0a:	c7 01       	movw	r24, r14
     c0c:	d5 de       	rcall	.-598    	; 0x9b8 <prvUnlockQueue>
     c0e:	f9 d7       	rcall	.+4082   	; 0x1c02 <xTaskResumeAll>
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	29 96       	adiw	r28, 0x09	; 9
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	08 95       	ret

00000c30 <xQueueGenericSendFromISR>:
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	8a 01       	movw	r16, r20
     c3e:	fc 01       	movw	r30, r24
     c40:	56 8d       	ldd	r21, Z+30	; 0x1e
     c42:	37 8d       	ldd	r19, Z+31	; 0x1f
     c44:	53 17       	cp	r21, r19
     c46:	10 f0       	brcs	.+4      	; 0xc4c <xQueueGenericSendFromISR+0x1c>
     c48:	22 30       	cpi	r18, 0x02	; 2
     c4a:	f9 f4       	brne	.+62     	; 0xc8a <xQueueGenericSendFromISR+0x5a>
     c4c:	42 2f       	mov	r20, r18
     c4e:	78 01       	movw	r14, r16
     c50:	ec 01       	movw	r28, r24
     c52:	1a a1       	ldd	r17, Y+34	; 0x22
     c54:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c56:	ce 01       	movw	r24, r28
     c58:	36 de       	rcall	.-916    	; 0x8c6 <prvCopyDataToQueue>
     c5a:	1f 3f       	cpi	r17, 0xFF	; 255
     c5c:	81 f4       	brne	.+32     	; 0xc7e <xQueueGenericSendFromISR+0x4e>
     c5e:	8b 89       	ldd	r24, Y+19	; 0x13
     c60:	88 23       	and	r24, r24
     c62:	a9 f0       	breq	.+42     	; 0xc8e <xQueueGenericSendFromISR+0x5e>
     c64:	ce 01       	movw	r24, r28
     c66:	43 96       	adiw	r24, 0x13	; 19
     c68:	0e 94 1b 10 	call	0x2036	; 0x2036 <xTaskRemoveFromEventList>
     c6c:	88 23       	and	r24, r24
     c6e:	89 f0       	breq	.+34     	; 0xc92 <xQueueGenericSendFromISR+0x62>
     c70:	e1 14       	cp	r14, r1
     c72:	f1 04       	cpc	r15, r1
     c74:	81 f0       	breq	.+32     	; 0xc96 <xQueueGenericSendFromISR+0x66>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	f7 01       	movw	r30, r14
     c7a:	80 83       	st	Z, r24
     c7c:	0d c0       	rjmp	.+26     	; 0xc98 <xQueueGenericSendFromISR+0x68>
     c7e:	ff 24       	eor	r15, r15
     c80:	f3 94       	inc	r15
     c82:	f1 0e       	add	r15, r17
     c84:	fa a2       	std	Y+34, r15	; 0x22
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	07 c0       	rjmp	.+14     	; 0xc98 <xQueueGenericSendFromISR+0x68>
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <xQueueGenericSendFromISR+0x68>
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <xQueueGenericSendFromISR+0x68>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <xQueueGenericSendFromISR+0x68>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	08 95       	ret

00000ca6 <xQueueReceive>:
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	29 97       	sbiw	r28, 0x09	; 9
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	8c 01       	movw	r16, r24
     cc8:	6b 01       	movw	r12, r22
     cca:	2e 83       	std	Y+6, r18	; 0x06
     ccc:	3f 83       	std	Y+7, r19	; 0x07
     cce:	48 87       	std	Y+8, r20	; 0x08
     cd0:	59 87       	std	Y+9, r21	; 0x09
     cd2:	e1 2c       	mov	r14, r1
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	0f 92       	push	r0
     cda:	f8 01       	movw	r30, r16
     cdc:	f6 8c       	ldd	r15, Z+30	; 0x1e
     cde:	ff 20       	and	r15, r15
     ce0:	99 f0       	breq	.+38     	; 0xd08 <xQueueReceive+0x62>
     ce2:	b6 01       	movw	r22, r12
     ce4:	c8 01       	movw	r24, r16
     ce6:	4e de       	rcall	.-868    	; 0x984 <prvCopyDataFromQueue>
     ce8:	fa 94       	dec	r15
     cea:	f8 01       	movw	r30, r16
     cec:	f6 8e       	std	Z+30, r15	; 0x1e
     cee:	80 85       	ldd	r24, Z+8	; 0x08
     cf0:	88 23       	and	r24, r24
     cf2:	31 f0       	breq	.+12     	; 0xd00 <xQueueReceive+0x5a>
     cf4:	c8 01       	movw	r24, r16
     cf6:	08 96       	adiw	r24, 0x08	; 8
     cf8:	0e 94 1b 10 	call	0x2036	; 0x2036 <xTaskRemoveFromEventList>
     cfc:	81 11       	cpse	r24, r1
     cfe:	00 dd       	rcall	.-1536   	; 0x700 <vPortYield>
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	4f c0       	rjmp	.+158    	; 0xda6 <xQueueReceive+0x100>
     d08:	8e 81       	ldd	r24, Y+6	; 0x06
     d0a:	9f 81       	ldd	r25, Y+7	; 0x07
     d0c:	a8 85       	ldd	r26, Y+8	; 0x08
     d0e:	b9 85       	ldd	r27, Y+9	; 0x09
     d10:	89 2b       	or	r24, r25
     d12:	8a 2b       	or	r24, r26
     d14:	8b 2b       	or	r24, r27
     d16:	21 f4       	brne	.+8      	; 0xd20 <xQueueReceive+0x7a>
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	43 c0       	rjmp	.+134    	; 0xda6 <xQueueReceive+0x100>
     d20:	e1 10       	cpse	r14, r1
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <xQueueReceive+0x8a>
     d24:	ce 01       	movw	r24, r28
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <vTaskInternalSetTimeOutState>
     d2c:	ee 24       	eor	r14, r14
     d2e:	e3 94       	inc	r14
     d30:	0f 90       	pop	r0
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	26 d6       	rcall	.+3148   	; 0x1982 <vTaskSuspendAll>
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	0f 92       	push	r0
     d3c:	f8 01       	movw	r30, r16
     d3e:	81 a1       	ldd	r24, Z+33	; 0x21
     d40:	8f 3f       	cpi	r24, 0xFF	; 255
     d42:	09 f4       	brne	.+2      	; 0xd46 <xQueueReceive+0xa0>
     d44:	11 a2       	std	Z+33, r1	; 0x21
     d46:	f8 01       	movw	r30, r16
     d48:	82 a1       	ldd	r24, Z+34	; 0x22
     d4a:	8f 3f       	cpi	r24, 0xFF	; 255
     d4c:	09 f4       	brne	.+2      	; 0xd50 <xQueueReceive+0xaa>
     d4e:	12 a2       	std	Z+34, r1	; 0x22
     d50:	0f 90       	pop	r0
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	be 01       	movw	r22, r28
     d56:	6a 5f       	subi	r22, 0xFA	; 250
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xTaskCheckForTimeOut>
     d62:	81 11       	cpse	r24, r1
     d64:	17 c0       	rjmp	.+46     	; 0xd94 <xQueueReceive+0xee>
     d66:	c8 01       	movw	r24, r16
     d68:	93 dd       	rcall	.-1242   	; 0x890 <prvIsQueueEmpty>
     d6a:	88 23       	and	r24, r24
     d6c:	79 f0       	breq	.+30     	; 0xd8c <xQueueReceive+0xe6>
     d6e:	4e 81       	ldd	r20, Y+6	; 0x06
     d70:	5f 81       	ldd	r21, Y+7	; 0x07
     d72:	68 85       	ldd	r22, Y+8	; 0x08
     d74:	79 85       	ldd	r23, Y+9	; 0x09
     d76:	c8 01       	movw	r24, r16
     d78:	43 96       	adiw	r24, 0x13	; 19
     d7a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <vTaskPlaceOnEventList>
     d7e:	c8 01       	movw	r24, r16
     d80:	1b de       	rcall	.-970    	; 0x9b8 <prvUnlockQueue>
     d82:	3f d7       	rcall	.+3710   	; 0x1c02 <xTaskResumeAll>
     d84:	81 11       	cpse	r24, r1
     d86:	a6 cf       	rjmp	.-180    	; 0xcd4 <xQueueReceive+0x2e>
     d88:	bb dc       	rcall	.-1674   	; 0x700 <vPortYield>
     d8a:	a4 cf       	rjmp	.-184    	; 0xcd4 <xQueueReceive+0x2e>
     d8c:	c8 01       	movw	r24, r16
     d8e:	14 de       	rcall	.-984    	; 0x9b8 <prvUnlockQueue>
     d90:	38 d7       	rcall	.+3696   	; 0x1c02 <xTaskResumeAll>
     d92:	a0 cf       	rjmp	.-192    	; 0xcd4 <xQueueReceive+0x2e>
     d94:	c8 01       	movw	r24, r16
     d96:	10 de       	rcall	.-992    	; 0x9b8 <prvUnlockQueue>
     d98:	34 d7       	rcall	.+3688   	; 0x1c02 <xTaskResumeAll>
     d9a:	c8 01       	movw	r24, r16
     d9c:	79 dd       	rcall	.-1294   	; 0x890 <prvIsQueueEmpty>
     d9e:	88 23       	and	r24, r24
     da0:	09 f4       	brne	.+2      	; 0xda4 <xQueueReceive+0xfe>
     da2:	98 cf       	rjmp	.-208    	; 0xcd4 <xQueueReceive+0x2e>
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	29 96       	adiw	r28, 0x09	; 9
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	08 95       	ret

00000dc4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	0f 92       	push	r0
     dd0:	89 a1       	ldd	r24, Y+33	; 0x21
     dd2:	8f 3f       	cpi	r24, 0xFF	; 255
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <vQueueWaitForMessageRestricted+0x14>
     dd6:	19 a2       	std	Y+33, r1	; 0x21
     dd8:	8a a1       	ldd	r24, Y+34	; 0x22
     dda:	8f 3f       	cpi	r24, 0xFF	; 255
     ddc:	09 f4       	brne	.+2      	; 0xde0 <vQueueWaitForMessageRestricted+0x1c>
     dde:	1a a2       	std	Y+34, r1	; 0x22
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     de4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     de6:	81 11       	cpse	r24, r1
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     dea:	ce 01       	movw	r24, r28
     dec:	43 96       	adiw	r24, 0x13	; 19
     dee:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     df2:	ce 01       	movw	r24, r28
     df4:	e1 dd       	rcall	.-1086   	; 0x9b8 <prvUnlockQueue>
    }
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     dfc:	fc 01       	movw	r30, r24
     dfe:	44 81       	ldd	r20, Z+4	; 0x04
     e00:	55 81       	ldd	r21, Z+5	; 0x05
     e02:	22 81       	ldd	r18, Z+2	; 0x02
     e04:	33 81       	ldd	r19, Z+3	; 0x03
     e06:	24 0f       	add	r18, r20
     e08:	35 1f       	adc	r19, r21
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	b9 01       	movw	r22, r18
     e10:	68 1b       	sub	r22, r24
     e12:	79 0b       	sbc	r23, r25
     e14:	cb 01       	movw	r24, r22
     e16:	64 17       	cp	r22, r20
     e18:	75 07       	cpc	r23, r21
     e1a:	10 f0       	brcs	.+4      	; 0xe20 <prvBytesInBuffer+0x24>
     e1c:	84 1b       	sub	r24, r20
     e1e:	95 0b       	sbc	r25, r21
     e20:	08 95       	ret

00000e22 <prvInitialiseNewStreamBuffer>:
     e22:	0f 93       	push	r16
     e24:	fc 01       	movw	r30, r24
     e26:	8f e0       	ldi	r24, 0x0F	; 15
     e28:	df 01       	movw	r26, r30
     e2a:	1d 92       	st	X+, r1
     e2c:	8a 95       	dec	r24
     e2e:	e9 f7       	brne	.-6      	; 0xe2a <prvInitialiseNewStreamBuffer+0x8>
     e30:	75 87       	std	Z+13, r23	; 0x0d
     e32:	64 87       	std	Z+12, r22	; 0x0c
     e34:	55 83       	std	Z+5, r21	; 0x05
     e36:	44 83       	std	Z+4, r20	; 0x04
     e38:	37 83       	std	Z+7, r19	; 0x07
     e3a:	26 83       	std	Z+6, r18	; 0x06
     e3c:	06 87       	std	Z+14, r16	; 0x0e
     e3e:	0f 91       	pop	r16
     e40:	08 95       	ret

00000e42 <prvWriteBytesToBuffer>:
     e42:	af 92       	push	r10
     e44:	bf 92       	push	r11
     e46:	cf 92       	push	r12
     e48:	df 92       	push	r13
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	6c 01       	movw	r12, r24
     e58:	5b 01       	movw	r10, r22
     e5a:	7a 01       	movw	r14, r20
     e5c:	fc 01       	movw	r30, r24
     e5e:	c2 81       	ldd	r28, Z+2	; 0x02
     e60:	d3 81       	ldd	r29, Z+3	; 0x03
     e62:	04 81       	ldd	r16, Z+4	; 0x04
     e64:	15 81       	ldd	r17, Z+5	; 0x05
     e66:	0c 1b       	sub	r16, r28
     e68:	1d 0b       	sbc	r17, r29
     e6a:	40 17       	cp	r20, r16
     e6c:	51 07       	cpc	r21, r17
     e6e:	08 f4       	brcc	.+2      	; 0xe72 <prvWriteBytesToBuffer+0x30>
     e70:	8a 01       	movw	r16, r20
     e72:	f6 01       	movw	r30, r12
     e74:	84 85       	ldd	r24, Z+12	; 0x0c
     e76:	95 85       	ldd	r25, Z+13	; 0x0d
     e78:	a8 01       	movw	r20, r16
     e7a:	b5 01       	movw	r22, r10
     e7c:	8c 0f       	add	r24, r28
     e7e:	9d 1f       	adc	r25, r29
     e80:	0e 94 31 2b 	call	0x5662	; 0x5662 <memcpy>
     e84:	0e 15       	cp	r16, r14
     e86:	1f 05       	cpc	r17, r15
     e88:	58 f4       	brcc	.+22     	; 0xea0 <prvWriteBytesToBuffer+0x5e>
     e8a:	a7 01       	movw	r20, r14
     e8c:	40 1b       	sub	r20, r16
     e8e:	51 0b       	sbc	r21, r17
     e90:	b5 01       	movw	r22, r10
     e92:	60 0f       	add	r22, r16
     e94:	71 1f       	adc	r23, r17
     e96:	f6 01       	movw	r30, r12
     e98:	84 85       	ldd	r24, Z+12	; 0x0c
     e9a:	95 85       	ldd	r25, Z+13	; 0x0d
     e9c:	0e 94 31 2b 	call	0x5662	; 0x5662 <memcpy>
     ea0:	ce 01       	movw	r24, r28
     ea2:	8e 0d       	add	r24, r14
     ea4:	9f 1d       	adc	r25, r15
     ea6:	f6 01       	movw	r30, r12
     ea8:	24 81       	ldd	r18, Z+4	; 0x04
     eaa:	35 81       	ldd	r19, Z+5	; 0x05
     eac:	82 17       	cp	r24, r18
     eae:	93 07       	cpc	r25, r19
     eb0:	10 f0       	brcs	.+4      	; 0xeb6 <prvWriteBytesToBuffer+0x74>
     eb2:	82 1b       	sub	r24, r18
     eb4:	93 0b       	sbc	r25, r19
     eb6:	f6 01       	movw	r30, r12
     eb8:	93 83       	std	Z+3, r25	; 0x03
     eba:	82 83       	std	Z+2, r24	; 0x02
     ebc:	c7 01       	movw	r24, r14
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	af 90       	pop	r10
     ed2:	08 95       	ret

00000ed4 <prvWriteMessageToBuffer>:
     ed4:	cf 92       	push	r12
     ed6:	df 92       	push	r13
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	1f 92       	push	r1
     ee6:	1f 92       	push	r1
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	7c 01       	movw	r14, r24
     eee:	6b 01       	movw	r12, r22
     ef0:	5a 83       	std	Y+2, r21	; 0x02
     ef2:	49 83       	std	Y+1, r20	; 0x01
     ef4:	21 15       	cp	r18, r1
     ef6:	31 05       	cpc	r19, r1
     ef8:	c1 f0       	breq	.+48     	; 0xf2a <prvWriteMessageToBuffer+0x56>
     efa:	fc 01       	movw	r30, r24
     efc:	86 85       	ldd	r24, Z+14	; 0x0e
     efe:	80 fd       	sbrc	r24, 0
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <prvWriteMessageToBuffer+0x3e>
     f02:	42 17       	cp	r20, r18
     f04:	53 07       	cpc	r21, r19
     f06:	08 f4       	brcc	.+2      	; 0xf0a <prvWriteMessageToBuffer+0x36>
     f08:	9a 01       	movw	r18, r20
     f0a:	3a 83       	std	Y+2, r19	; 0x02
     f0c:	29 83       	std	Y+1, r18	; 0x01
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <prvWriteMessageToBuffer+0x5c>
     f12:	20 17       	cp	r18, r16
     f14:	31 07       	cpc	r19, r17
     f16:	58 f0       	brcs	.+22     	; 0xf2e <prvWriteMessageToBuffer+0x5a>
     f18:	42 e0       	ldi	r20, 0x02	; 2
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	be 01       	movw	r22, r28
     f1e:	6f 5f       	subi	r22, 0xFF	; 255
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	c7 01       	movw	r24, r14
     f24:	8e df       	rcall	.-228    	; 0xe42 <prvWriteBytesToBuffer>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <prvWriteMessageToBuffer+0x5c>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <prvWriteMessageToBuffer+0x5c>
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	88 23       	and	r24, r24
     f32:	31 f0       	breq	.+12     	; 0xf40 <prvWriteMessageToBuffer+0x6c>
     f34:	49 81       	ldd	r20, Y+1	; 0x01
     f36:	5a 81       	ldd	r21, Y+2	; 0x02
     f38:	b6 01       	movw	r22, r12
     f3a:	c7 01       	movw	r24, r14
     f3c:	82 df       	rcall	.-252    	; 0xe42 <prvWriteBytesToBuffer>
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <prvWriteMessageToBuffer+0x70>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	08 95       	ret

00000f5a <prvReadBytesFromBuffer>:
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	7c 01       	movw	r14, r24
     f70:	5b 01       	movw	r10, r22
     f72:	e9 01       	movw	r28, r18
     f74:	42 17       	cp	r20, r18
     f76:	53 07       	cpc	r21, r19
     f78:	08 f4       	brcc	.+2      	; 0xf7c <prvReadBytesFromBuffer+0x22>
     f7a:	ea 01       	movw	r28, r20
     f7c:	20 97       	sbiw	r28, 0x00	; 0
     f7e:	81 f1       	breq	.+96     	; 0xfe0 <prvReadBytesFromBuffer+0x86>
     f80:	f7 01       	movw	r30, r14
     f82:	00 81       	ld	r16, Z
     f84:	11 81       	ldd	r17, Z+1	; 0x01
     f86:	84 81       	ldd	r24, Z+4	; 0x04
     f88:	95 81       	ldd	r25, Z+5	; 0x05
     f8a:	80 1b       	sub	r24, r16
     f8c:	91 0b       	sbc	r25, r17
     f8e:	6e 01       	movw	r12, r28
     f90:	8c 17       	cp	r24, r28
     f92:	9d 07       	cpc	r25, r29
     f94:	08 f4       	brcc	.+2      	; 0xf98 <prvReadBytesFromBuffer+0x3e>
     f96:	6c 01       	movw	r12, r24
     f98:	f7 01       	movw	r30, r14
     f9a:	64 85       	ldd	r22, Z+12	; 0x0c
     f9c:	75 85       	ldd	r23, Z+13	; 0x0d
     f9e:	60 0f       	add	r22, r16
     fa0:	71 1f       	adc	r23, r17
     fa2:	a6 01       	movw	r20, r12
     fa4:	c5 01       	movw	r24, r10
     fa6:	0e 94 31 2b 	call	0x5662	; 0x5662 <memcpy>
     faa:	cc 16       	cp	r12, r28
     fac:	dd 06       	cpc	r13, r29
     fae:	58 f4       	brcc	.+22     	; 0xfc6 <prvReadBytesFromBuffer+0x6c>
     fb0:	ae 01       	movw	r20, r28
     fb2:	4c 19       	sub	r20, r12
     fb4:	5d 09       	sbc	r21, r13
     fb6:	f7 01       	movw	r30, r14
     fb8:	64 85       	ldd	r22, Z+12	; 0x0c
     fba:	75 85       	ldd	r23, Z+13	; 0x0d
     fbc:	c5 01       	movw	r24, r10
     fbe:	8c 0d       	add	r24, r12
     fc0:	9d 1d       	adc	r25, r13
     fc2:	0e 94 31 2b 	call	0x5662	; 0x5662 <memcpy>
     fc6:	0c 0f       	add	r16, r28
     fc8:	1d 1f       	adc	r17, r29
     fca:	f7 01       	movw	r30, r14
     fcc:	84 81       	ldd	r24, Z+4	; 0x04
     fce:	95 81       	ldd	r25, Z+5	; 0x05
     fd0:	08 17       	cp	r16, r24
     fd2:	19 07       	cpc	r17, r25
     fd4:	10 f0       	brcs	.+4      	; 0xfda <prvReadBytesFromBuffer+0x80>
     fd6:	08 1b       	sub	r16, r24
     fd8:	19 0b       	sbc	r17, r25
     fda:	f7 01       	movw	r30, r14
     fdc:	11 83       	std	Z+1, r17	; 0x01
     fde:	00 83       	st	Z, r16
     fe0:	ce 01       	movw	r24, r28
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	df 90       	pop	r13
     ff0:	cf 90       	pop	r12
     ff2:	bf 90       	pop	r11
     ff4:	af 90       	pop	r10
     ff6:	08 95       	ret

00000ff8 <prvReadMessageFromBuffer>:
     ff8:	6f 92       	push	r6
     ffa:	7f 92       	push	r7
     ffc:	8f 92       	push	r8
     ffe:	9f 92       	push	r9
    1000:	af 92       	push	r10
    1002:	bf 92       	push	r11
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	1f 92       	push	r1
    1016:	1f 92       	push	r1
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	6c 01       	movw	r12, r24
    101e:	4b 01       	movw	r8, r22
    1020:	5a 01       	movw	r10, r20
    1022:	79 01       	movw	r14, r18
    1024:	01 15       	cp	r16, r1
    1026:	11 05       	cpc	r17, r1
    1028:	b1 f0       	breq	.+44     	; 0x1056 <__EEPROM_REGION_LENGTH__+0x56>
    102a:	fc 01       	movw	r30, r24
    102c:	60 80       	ld	r6, Z
    102e:	71 80       	ldd	r7, Z+1	; 0x01
    1030:	a8 01       	movw	r20, r16
    1032:	be 01       	movw	r22, r28
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	90 df       	rcall	.-224    	; 0xf5a <prvReadBytesFromBuffer>
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	e0 1a       	sub	r14, r16
    1040:	f1 0a       	sbc	r15, r17
    1042:	a8 16       	cp	r10, r24
    1044:	b9 06       	cpc	r11, r25
    1046:	30 f4       	brcc	.+12     	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
    1048:	f6 01       	movw	r30, r12
    104a:	71 82       	std	Z+1, r7	; 0x01
    104c:	60 82       	st	Z, r6
    104e:	a1 2c       	mov	r10, r1
    1050:	b1 2c       	mov	r11, r1
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <__EEPROM_REGION_LENGTH__+0x56>
    1054:	5c 01       	movw	r10, r24
    1056:	97 01       	movw	r18, r14
    1058:	a5 01       	movw	r20, r10
    105a:	b4 01       	movw	r22, r8
    105c:	c6 01       	movw	r24, r12
    105e:	7d df       	rcall	.-262    	; 0xf5a <prvReadBytesFromBuffer>
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	bf 90       	pop	r11
    1076:	af 90       	pop	r10
    1078:	9f 90       	pop	r9
    107a:	8f 90       	pop	r8
    107c:	7f 90       	pop	r7
    107e:	6f 90       	pop	r6
    1080:	08 95       	ret

00001082 <xStreamBufferGenericCreate>:
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	ec 01       	movw	r28, r24
    1092:	6b 01       	movw	r12, r22
    1094:	41 30       	cpi	r20, 0x01	; 1
    1096:	11 f4       	brne	.+4      	; 0x109c <xStreamBufferGenericCreate+0x1a>
    1098:	01 e0       	ldi	r16, 0x01	; 1
    109a:	01 c0       	rjmp	.+2      	; 0x109e <xStreamBufferGenericCreate+0x1c>
    109c:	00 e0       	ldi	r16, 0x00	; 0
    109e:	c1 14       	cp	r12, r1
    10a0:	d1 04       	cpc	r13, r1
    10a2:	19 f4       	brne	.+6      	; 0x10aa <xStreamBufferGenericCreate+0x28>
    10a4:	cc 24       	eor	r12, r12
    10a6:	c3 94       	inc	r12
    10a8:	d1 2c       	mov	r13, r1
    10aa:	ce 01       	movw	r24, r28
    10ac:	40 96       	adiw	r24, 0x10	; 16
    10ae:	c8 17       	cp	r28, r24
    10b0:	d9 07       	cpc	r29, r25
    10b2:	20 f4       	brcc	.+8      	; 0x10bc <xStreamBufferGenericCreate+0x3a>
    10b4:	21 96       	adiw	r28, 0x01	; 1
    10b6:	70 d9       	rcall	.-3360   	; 0x398 <pvPortMalloc>
    10b8:	7c 01       	movw	r14, r24
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <xStreamBufferGenericCreate+0x3e>
    10bc:	e1 2c       	mov	r14, r1
    10be:	f1 2c       	mov	r15, r1
    10c0:	e1 14       	cp	r14, r1
    10c2:	f1 04       	cpc	r15, r1
    10c4:	39 f0       	breq	.+14     	; 0x10d4 <xStreamBufferGenericCreate+0x52>
    10c6:	96 01       	movw	r18, r12
    10c8:	ae 01       	movw	r20, r28
    10ca:	b7 01       	movw	r22, r14
    10cc:	61 5f       	subi	r22, 0xF1	; 241
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	c7 01       	movw	r24, r14
    10d2:	a7 de       	rcall	.-690    	; 0xe22 <prvInitialiseNewStreamBuffer>
    10d4:	c7 01       	movw	r24, r14
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	df 90       	pop	r13
    10e2:	cf 90       	pop	r12
    10e4:	08 95       	ret

000010e6 <xStreamBufferReset>:
    10e6:	0f 93       	push	r16
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	0f 92       	push	r0
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 85       	ldd	r18, Z+8	; 0x08
    10f2:	31 85       	ldd	r19, Z+9	; 0x09
    10f4:	23 2b       	or	r18, r19
    10f6:	71 f4       	brne	.+28     	; 0x1114 <xStreamBufferReset+0x2e>
    10f8:	22 85       	ldd	r18, Z+10	; 0x0a
    10fa:	33 85       	ldd	r19, Z+11	; 0x0b
    10fc:	23 2b       	or	r18, r19
    10fe:	61 f4       	brne	.+24     	; 0x1118 <xStreamBufferReset+0x32>
    1100:	26 81       	ldd	r18, Z+6	; 0x06
    1102:	37 81       	ldd	r19, Z+7	; 0x07
    1104:	44 81       	ldd	r20, Z+4	; 0x04
    1106:	55 81       	ldd	r21, Z+5	; 0x05
    1108:	64 85       	ldd	r22, Z+12	; 0x0c
    110a:	75 85       	ldd	r23, Z+13	; 0x0d
    110c:	06 85       	ldd	r16, Z+14	; 0x0e
    110e:	89 de       	rcall	.-750    	; 0xe22 <prvInitialiseNewStreamBuffer>
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	03 c0       	rjmp	.+6      	; 0x111a <xStreamBufferReset+0x34>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	01 c0       	rjmp	.+2      	; 0x111a <xStreamBufferReset+0x34>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <xStreamBufferSpacesAvailable>:
    1122:	fc 01       	movw	r30, r24
    1124:	24 81       	ldd	r18, Z+4	; 0x04
    1126:	35 81       	ldd	r19, Z+5	; 0x05
    1128:	80 81       	ld	r24, Z
    112a:	91 81       	ldd	r25, Z+1	; 0x01
    112c:	82 0f       	add	r24, r18
    112e:	93 1f       	adc	r25, r19
    1130:	42 81       	ldd	r20, Z+2	; 0x02
    1132:	53 81       	ldd	r21, Z+3	; 0x03
    1134:	84 1b       	sub	r24, r20
    1136:	95 0b       	sbc	r25, r21
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	82 17       	cp	r24, r18
    113c:	93 07       	cpc	r25, r19
    113e:	10 f0       	brcs	.+4      	; 0x1144 <xStreamBufferSpacesAvailable+0x22>
    1140:	82 1b       	sub	r24, r18
    1142:	93 0b       	sbc	r25, r19
    1144:	08 95       	ret

00001146 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1146:	2f 92       	push	r2
    1148:	3f 92       	push	r3
    114a:	4f 92       	push	r4
    114c:	5f 92       	push	r5
    114e:	6f 92       	push	r6
    1150:	7f 92       	push	r7
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	2b 97       	sbiw	r28, 0x0b	; 11
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	4c 01       	movw	r8, r24
    117c:	7b 87       	std	Y+11, r23	; 0x0b
    117e:	6a 87       	std	Y+10, r22	; 0x0a
    1180:	1a 01       	movw	r2, r20
    1182:	0e 83       	std	Y+6, r16	; 0x06
    1184:	1f 83       	std	Y+7, r17	; 0x07
    1186:	28 87       	std	Y+8, r18	; 0x08
    1188:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    118a:	fc 01       	movw	r30, r24
    118c:	84 81       	ldd	r24, Z+4	; 0x04
    118e:	95 81       	ldd	r25, Z+5	; 0x05
    1190:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1192:	26 85       	ldd	r18, Z+14	; 0x0e
    1194:	20 ff       	sbrs	r18, 0
    1196:	0c c0       	rjmp	.+24     	; 0x11b0 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1198:	2a 01       	movw	r4, r20
    119a:	f2 e0       	ldi	r31, 0x02	; 2
    119c:	4f 0e       	add	r4, r31
    119e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    11a0:	84 15       	cp	r24, r4
    11a2:	95 05       	cpc	r25, r5
    11a4:	58 f4       	brcc	.+22     	; 0x11bc <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    11a6:	1e 82       	std	Y+6, r1	; 0x06
    11a8:	1f 82       	std	Y+7, r1	; 0x07
    11aa:	18 86       	std	Y+8, r1	; 0x08
    11ac:	19 86       	std	Y+9, r1	; 0x09
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    11b0:	84 17       	cp	r24, r20
    11b2:	95 07       	cpc	r25, r21
    11b4:	10 f0       	brcs	.+4      	; 0x11ba <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    11b6:	2a 01       	movw	r4, r20
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    11ba:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    11bc:	8e 81       	ldd	r24, Y+6	; 0x06
    11be:	9f 81       	ldd	r25, Y+7	; 0x07
    11c0:	a8 85       	ldd	r26, Y+8	; 0x08
    11c2:	b9 85       	ldd	r27, Y+9	; 0x09
    11c4:	89 2b       	or	r24, r25
    11c6:	8a 2b       	or	r24, r26
    11c8:	8b 2b       	or	r24, r27
    11ca:	09 f4       	brne	.+2      	; 0x11ce <xStreamBufferSend+0x88>
    11cc:	36 c0       	rjmp	.+108    	; 0x123a <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    11ce:	ce 01       	movw	r24, r28
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	e0 d7       	rcall	.+4032   	; 0x2194 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    11da:	c4 01       	movw	r24, r8
    11dc:	a2 df       	rcall	.-188    	; 0x1122 <xStreamBufferSpacesAvailable>
    11de:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    11e0:	84 15       	cp	r24, r4
    11e2:	95 05       	cpc	r25, r5
    11e4:	38 f5       	brcc	.+78     	; 0x1234 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 89 14 	call	0x2912	; 0x2912 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    11f0:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <xTaskGetCurrentTaskHandle>
    11f4:	f4 01       	movw	r30, r8
    11f6:	93 87       	std	Z+11, r25	; 0x0b
    11f8:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    11fe:	ae 80       	ldd	r10, Y+6	; 0x06
    1200:	bf 80       	ldd	r11, Y+7	; 0x07
    1202:	c8 84       	ldd	r12, Y+8	; 0x08
    1204:	d9 84       	ldd	r13, Y+9	; 0x09
    1206:	e1 2c       	mov	r14, r1
    1208:	f1 2c       	mov	r15, r1
    120a:	00 e0       	ldi	r16, 0x00	; 0
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	98 01       	movw	r18, r16
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	ba 01       	movw	r22, r20
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    121c:	f4 01       	movw	r30, r8
    121e:	13 86       	std	Z+11, r1	; 0x0b
    1220:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1222:	be 01       	movw	r22, r28
    1224:	6a 5f       	subi	r22, 0xFA	; 250
    1226:	7f 4f       	sbci	r23, 0xFF	; 255
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	da d7       	rcall	.+4020   	; 0x21e2 <xTaskCheckForTimeOut>
    122e:	88 23       	and	r24, r24
    1230:	89 f2       	breq	.-94     	; 0x11d4 <xStreamBufferSend+0x8e>
    1232:	05 c0       	rjmp	.+10     	; 0x123e <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
                    break;
    1238:	02 c0       	rjmp	.+4      	; 0x123e <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    123a:	61 2c       	mov	r6, r1
    123c:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    123e:	61 14       	cp	r6, r1
    1240:	71 04       	cpc	r7, r1
    1242:	19 f4       	brne	.+6      	; 0x124a <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1244:	c4 01       	movw	r24, r8
    1246:	6d df       	rcall	.-294    	; 0x1122 <xStreamBufferSpacesAvailable>
    1248:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    124a:	82 01       	movw	r16, r4
    124c:	93 01       	movw	r18, r6
    124e:	a1 01       	movw	r20, r2
    1250:	6a 85       	ldd	r22, Y+10	; 0x0a
    1252:	7b 85       	ldd	r23, Y+11	; 0x0b
    1254:	c4 01       	movw	r24, r8
    1256:	3e de       	rcall	.-900    	; 0xed4 <prvWriteMessageToBuffer>
    1258:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    125a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    125c:	e9 f0       	breq	.+58     	; 0x1298 <xStreamBufferSend+0x152>
    125e:	c4 01       	movw	r24, r8
    1260:	cd dd       	rcall	.-1126   	; 0xdfc <prvBytesInBuffer>
    1262:	f4 01       	movw	r30, r8
    1264:	26 81       	ldd	r18, Z+6	; 0x06
    1266:	37 81       	ldd	r19, Z+7	; 0x07
    1268:	82 17       	cp	r24, r18
    126a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    126c:	a8 f0       	brcs	.+42     	; 0x1298 <xStreamBufferSend+0x152>
    126e:	89 d3       	rcall	.+1810   	; 0x1982 <vTaskSuspendAll>
    1270:	f4 01       	movw	r30, r8
    1272:	80 85       	ldd	r24, Z+8	; 0x08
    1274:	91 85       	ldd	r25, Z+9	; 0x09
    1276:	89 2b       	or	r24, r25
    1278:	71 f0       	breq	.+28     	; 0x1296 <xStreamBufferSend+0x150>
    127a:	80 85       	ldd	r24, Z+8	; 0x08
    127c:	91 85       	ldd	r25, Z+9	; 0x09
    127e:	e1 2c       	mov	r14, r1
    1280:	f1 2c       	mov	r15, r1
    1282:	00 e0       	ldi	r16, 0x00	; 0
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	a9 01       	movw	r20, r18
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <xTaskGenericNotify>
    1290:	f4 01       	movw	r30, r8
    1292:	11 86       	std	Z+9, r1	; 0x09
    1294:	10 86       	std	Z+8, r1	; 0x08
    1296:	b5 d4       	rcall	.+2410   	; 0x1c02 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1298:	c6 01       	movw	r24, r12
    129a:	2b 96       	adiw	r28, 0x0b	; 11
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
    12b6:	bf 90       	pop	r11
    12b8:	af 90       	pop	r10
    12ba:	9f 90       	pop	r9
    12bc:	8f 90       	pop	r8
    12be:	7f 90       	pop	r7
    12c0:	6f 90       	pop	r6
    12c2:	5f 90       	pop	r5
    12c4:	4f 90       	pop	r4
    12c6:	3f 90       	pop	r3
    12c8:	2f 90       	pop	r2
    12ca:	08 95       	ret

000012cc <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    12cc:	af 92       	push	r10
    12ce:	bf 92       	push	r11
    12d0:	cf 92       	push	r12
    12d2:	df 92       	push	r13
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	7b 01       	movw	r14, r22
    12e4:	5a 01       	movw	r10, r20
    12e6:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    12ea:	80 ff       	sbrs	r24, 0
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12ee:	8a 01       	movw	r16, r20
    12f0:	0e 5f       	subi	r16, 0xFE	; 254
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    12f6:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12f8:	ce 01       	movw	r24, r28
    12fa:	13 df       	rcall	.-474    	; 0x1122 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    12fc:	9c 01       	movw	r18, r24
    12fe:	a5 01       	movw	r20, r10
    1300:	b7 01       	movw	r22, r14
    1302:	ce 01       	movw	r24, r28
    1304:	e7 dd       	rcall	.-1074   	; 0xed4 <prvWriteMessageToBuffer>
    1306:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1308:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    130a:	c1 f0       	breq	.+48     	; 0x133c <xStreamBufferSendFromISR+0x70>
    130c:	ce 01       	movw	r24, r28
    130e:	76 dd       	rcall	.-1300   	; 0xdfc <prvBytesInBuffer>
    1310:	2e 81       	ldd	r18, Y+6	; 0x06
    1312:	3f 81       	ldd	r19, Y+7	; 0x07
    1314:	82 17       	cp	r24, r18
    1316:	93 07       	cpc	r25, r19
    1318:	88 f0       	brcs	.+34     	; 0x133c <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    131a:	88 85       	ldd	r24, Y+8	; 0x08
    131c:	99 85       	ldd	r25, Y+9	; 0x09
    131e:	89 2b       	or	r24, r25
    1320:	69 f0       	breq	.+26     	; 0x133c <xStreamBufferSendFromISR+0x70>
    1322:	88 85       	ldd	r24, Y+8	; 0x08
    1324:	99 85       	ldd	r25, Y+9	; 0x09
    1326:	e1 2c       	mov	r14, r1
    1328:	f1 2c       	mov	r15, r1
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	a9 01       	movw	r20, r18
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	0e 94 67 13 	call	0x26ce	; 0x26ce <xTaskGenericNotifyFromISR>
    1338:	19 86       	std	Y+9, r1	; 0x09
    133a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    133c:	c5 01       	movw	r24, r10
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	df 90       	pop	r13
    134c:	cf 90       	pop	r12
    134e:	bf 90       	pop	r11
    1350:	af 90       	pop	r10
    1352:	08 95       	ret

00001354 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1354:	4f 92       	push	r4
    1356:	5f 92       	push	r5
    1358:	6f 92       	push	r6
    135a:	7f 92       	push	r7
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	ec 01       	movw	r28, r24
    1376:	2b 01       	movw	r4, r22
    1378:	3a 01       	movw	r6, r20
    137a:	58 01       	movw	r10, r16
    137c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    137e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1380:	80 ff       	sbrs	r24, 0
    1382:	05 c0       	rjmp	.+10     	; 0x138e <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1384:	68 94       	set
    1386:	88 24       	eor	r8, r8
    1388:	81 f8       	bld	r8, 1
    138a:	91 2c       	mov	r9, r1
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    138e:	81 2c       	mov	r8, r1
    1390:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1392:	a1 14       	cp	r10, r1
    1394:	b1 04       	cpc	r11, r1
    1396:	c1 04       	cpc	r12, r1
    1398:	d1 04       	cpc	r13, r1
    139a:	31 f1       	breq	.+76     	; 0x13e8 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13a2:	ce 01       	movw	r24, r28
    13a4:	2b dd       	rcall	.-1450   	; 0xdfc <prvBytesInBuffer>
    13a6:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    13a8:	88 16       	cp	r8, r24
    13aa:	99 06       	cpc	r9, r25
    13ac:	40 f0       	brcs	.+16     	; 0x13be <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 89 14 	call	0x2912	; 0x2912 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    13b8:	7e d7       	rcall	.+3836   	; 0x22b6 <xTaskGetCurrentTaskHandle>
    13ba:	99 87       	std	Y+9, r25	; 0x09
    13bc:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    13c2:	8e 14       	cp	r8, r14
    13c4:	9f 04       	cpc	r9, r15
    13c6:	98 f0       	brcs	.+38     	; 0x13ee <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    13c8:	e1 2c       	mov	r14, r1
    13ca:	f1 2c       	mov	r15, r1
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	98 01       	movw	r18, r16
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	ba 01       	movw	r22, r20
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	db d7       	rcall	.+4022   	; 0x2392 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    13dc:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13de:	18 86       	std	Y+8, r1	; 0x08
    13e0:	ce 01       	movw	r24, r28
    13e2:	0c dd       	rcall	.-1512   	; 0xdfc <prvBytesInBuffer>
    13e4:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13e6:	03 c0       	rjmp	.+6      	; 0x13ee <xStreamBufferReceive+0x9a>
    13e8:	ce 01       	movw	r24, r28
    13ea:	08 dd       	rcall	.-1520   	; 0xdfc <prvBytesInBuffer>
    13ec:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    13ee:	8e 14       	cp	r8, r14
    13f0:	9f 04       	cpc	r9, r15
    13f2:	e8 f4       	brcc	.+58     	; 0x142e <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    13f4:	84 01       	movw	r16, r8
    13f6:	97 01       	movw	r18, r14
    13f8:	a3 01       	movw	r20, r6
    13fa:	b2 01       	movw	r22, r4
    13fc:	ce 01       	movw	r24, r28
    13fe:	fc dd       	rcall	.-1032   	; 0xff8 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1400:	6c 01       	movw	r12, r24
    1402:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1404:	b1 f0       	breq	.+44     	; 0x1432 <xStreamBufferReceive+0xde>
    1406:	bd d2       	rcall	.+1402   	; 0x1982 <vTaskSuspendAll>
    1408:	8a 85       	ldd	r24, Y+10	; 0x0a
    140a:	9b 85       	ldd	r25, Y+11	; 0x0b
    140c:	89 2b       	or	r24, r25
    140e:	69 f0       	breq	.+26     	; 0x142a <xStreamBufferReceive+0xd6>
    1410:	8a 85       	ldd	r24, Y+10	; 0x0a
    1412:	9b 85       	ldd	r25, Y+11	; 0x0b
    1414:	e1 2c       	mov	r14, r1
    1416:	f1 2c       	mov	r15, r1
    1418:	00 e0       	ldi	r16, 0x00	; 0
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	a9 01       	movw	r20, r18
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	0e 94 70 12 	call	0x24e0	; 0x24e0 <xTaskGenericNotify>
    1426:	1b 86       	std	Y+11, r1	; 0x0b
    1428:	1a 86       	std	Y+10, r1	; 0x0a
    142a:	eb d3       	rcall	.+2006   	; 0x1c02 <xTaskResumeAll>
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    142e:	c1 2c       	mov	r12, r1
    1430:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1432:	c6 01       	movw	r24, r12
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	cf 90       	pop	r12
    1444:	bf 90       	pop	r11
    1446:	af 90       	pop	r10
    1448:	9f 90       	pop	r9
    144a:	8f 90       	pop	r8
    144c:	7f 90       	pop	r7
    144e:	6f 90       	pop	r6
    1450:	5f 90       	pop	r5
    1452:	4f 90       	pop	r4
    1454:	08 95       	ret

00001456 <prvResetNextTaskUnblockTime>:
    1456:	e0 91 85 11 	lds	r30, 0x1185	; 0x801185 <pxDelayedTaskList>
    145a:	f0 91 86 11 	lds	r31, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    145e:	80 81       	ld	r24, Z
    1460:	81 11       	cpse	r24, r1
    1462:	0c c0       	rjmp	.+24     	; 0x147c <prvResetNextTaskUnblockTime+0x26>
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	9f ef       	ldi	r25, 0xFF	; 255
    1468:	dc 01       	movw	r26, r24
    146a:	80 93 4f 11 	sts	0x114F, r24	; 0x80114f <xNextTaskUnblockTime>
    146e:	90 93 50 11 	sts	0x1150, r25	; 0x801150 <xNextTaskUnblockTime+0x1>
    1472:	a0 93 51 11 	sts	0x1151, r26	; 0x801151 <xNextTaskUnblockTime+0x2>
    1476:	b0 93 52 11 	sts	0x1152, r27	; 0x801152 <xNextTaskUnblockTime+0x3>
    147a:	08 95       	ret
    147c:	e0 91 85 11 	lds	r30, 0x1185	; 0x801185 <pxDelayedTaskList>
    1480:	f0 91 86 11 	lds	r31, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    1484:	07 80       	ldd	r0, Z+7	; 0x07
    1486:	f0 85       	ldd	r31, Z+8	; 0x08
    1488:	e0 2d       	mov	r30, r0
    148a:	80 81       	ld	r24, Z
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	a2 81       	ldd	r26, Z+2	; 0x02
    1490:	b3 81       	ldd	r27, Z+3	; 0x03
    1492:	80 93 4f 11 	sts	0x114F, r24	; 0x80114f <xNextTaskUnblockTime>
    1496:	90 93 50 11 	sts	0x1150, r25	; 0x801150 <xNextTaskUnblockTime+0x1>
    149a:	a0 93 51 11 	sts	0x1151, r26	; 0x801151 <xNextTaskUnblockTime+0x2>
    149e:	b0 93 52 11 	sts	0x1152, r27	; 0x801152 <xNextTaskUnblockTime+0x3>
    14a2:	08 95       	ret

000014a4 <prvDeleteTCB>:
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	ec 01       	movw	r28, r24
    14aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ae:	1d d8       	rcall	.-4038   	; 0x4ea <vPortFree>
    14b0:	ce 01       	movw	r24, r28
    14b2:	1b d8       	rcall	.-4042   	; 0x4ea <vPortFree>
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	08 95       	ret

000014ba <prvInitialiseNewTask>:
    14ba:	4f 92       	push	r4
    14bc:	5f 92       	push	r5
    14be:	6f 92       	push	r6
    14c0:	7f 92       	push	r7
    14c2:	8f 92       	push	r8
    14c4:	9f 92       	push	r9
    14c6:	af 92       	push	r10
    14c8:	bf 92       	push	r11
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	2c 01       	movw	r4, r24
    14da:	5b 01       	movw	r10, r22
    14dc:	4a 01       	movw	r8, r20
    14de:	39 01       	movw	r6, r18
    14e0:	e6 01       	movw	r28, r12
    14e2:	65 ea       	ldi	r22, 0xA5	; 165
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ea:	0e 94 3a 2b 	call	0x5674	; 0x5674 <memset>
    14ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f2:	21 e0       	ldi	r18, 0x01	; 1
    14f4:	82 1a       	sub	r8, r18
    14f6:	91 08       	sbc	r9, r1
    14f8:	88 0e       	add	r8, r24
    14fa:	99 1e       	adc	r9, r25
    14fc:	a1 14       	cp	r10, r1
    14fe:	b1 04       	cpc	r11, r1
    1500:	89 f4       	brne	.+34     	; 0x1524 <prvInitialiseNewTask+0x6a>
    1502:	15 c0       	rjmp	.+42     	; 0x152e <prvInitialiseNewTask+0x74>
    1504:	82 2f       	mov	r24, r18
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	f5 01       	movw	r30, r10
    150a:	e8 0f       	add	r30, r24
    150c:	f9 1f       	adc	r31, r25
    150e:	30 81       	ld	r19, Z
    1510:	de 01       	movw	r26, r28
    1512:	a8 0f       	add	r26, r24
    1514:	b9 1f       	adc	r27, r25
    1516:	5d 96       	adiw	r26, 0x1d	; 29
    1518:	3c 93       	st	X, r19
    151a:	80 81       	ld	r24, Z
    151c:	88 23       	and	r24, r24
    151e:	29 f0       	breq	.+10     	; 0x152a <prvInitialiseNewTask+0x70>
    1520:	2f 5f       	subi	r18, 0xFF	; 255
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <prvInitialiseNewTask+0x6c>
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	20 31       	cpi	r18, 0x10	; 16
    1528:	68 f3       	brcs	.-38     	; 0x1504 <prvInitialiseNewTask+0x4a>
    152a:	1c a6       	std	Y+44, r1	; 0x2c
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <prvInitialiseNewTask+0x76>
    152e:	1d 8e       	std	Y+29, r1	; 0x1d
    1530:	0a 30       	cpi	r16, 0x0A	; 10
    1532:	08 f0       	brcs	.+2      	; 0x1536 <prvInitialiseNewTask+0x7c>
    1534:	09 e0       	ldi	r16, 0x09	; 9
    1536:	0a 8f       	std	Y+26, r16	; 0x1a
    1538:	0d a7       	std	Y+45, r16	; 0x2d
    153a:	1e a6       	std	Y+46, r1	; 0x2e
    153c:	ce 01       	movw	r24, r28
    153e:	02 96       	adiw	r24, 0x02	; 2
    1540:	22 d8       	rcall	.-4028   	; 0x586 <vListInitialiseItem>
    1542:	ce 01       	movw	r24, r28
    1544:	0e 96       	adiw	r24, 0x0e	; 14
    1546:	1f d8       	rcall	.-4034   	; 0x586 <vListInitialiseItem>
    1548:	db 87       	std	Y+11, r29	; 0x0b
    154a:	ca 87       	std	Y+10, r28	; 0x0a
    154c:	8a e0       	ldi	r24, 0x0A	; 10
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	80 1b       	sub	r24, r16
    1556:	91 09       	sbc	r25, r1
    1558:	a1 09       	sbc	r26, r1
    155a:	b1 09       	sbc	r27, r1
    155c:	8e 87       	std	Y+14, r24	; 0x0e
    155e:	9f 87       	std	Y+15, r25	; 0x0f
    1560:	a8 8b       	std	Y+16, r26	; 0x10
    1562:	b9 8b       	std	Y+17, r27	; 0x11
    1564:	df 8b       	std	Y+23, r29	; 0x17
    1566:	ce 8b       	std	Y+22, r28	; 0x16
    1568:	84 e0       	ldi	r24, 0x04	; 4
    156a:	fe 01       	movw	r30, r28
    156c:	bf 96       	adiw	r30, 0x2f	; 47
    156e:	df 01       	movw	r26, r30
    1570:	1d 92       	st	X+, r1
    1572:	8a 95       	dec	r24
    1574:	e9 f7       	brne	.-6      	; 0x1570 <prvInitialiseNewTask+0xb6>
    1576:	1b aa       	std	Y+51, r1	; 0x33
    1578:	a3 01       	movw	r20, r6
    157a:	b2 01       	movw	r22, r4
    157c:	c4 01       	movw	r24, r8
    157e:	77 d8       	rcall	.-3858   	; 0x66e <pxPortInitialiseStack>
    1580:	99 83       	std	Y+1, r25	; 0x01
    1582:	88 83       	st	Y, r24
    1584:	e1 14       	cp	r14, r1
    1586:	f1 04       	cpc	r15, r1
    1588:	19 f0       	breq	.+6      	; 0x1590 <prvInitialiseNewTask+0xd6>
    158a:	f7 01       	movw	r30, r14
    158c:	d1 83       	std	Z+1, r29	; 0x01
    158e:	c0 83       	st	Z, r28
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	df 90       	pop	r13
    159c:	cf 90       	pop	r12
    159e:	bf 90       	pop	r11
    15a0:	af 90       	pop	r10
    15a2:	9f 90       	pop	r9
    15a4:	8f 90       	pop	r8
    15a6:	7f 90       	pop	r7
    15a8:	6f 90       	pop	r6
    15aa:	5f 90       	pop	r5
    15ac:	4f 90       	pop	r4
    15ae:	08 95       	ret

000015b0 <prvInitialiseTaskLists>:
    15b0:	cf 93       	push	r28
    15b2:	c0 e0       	ldi	r28, 0x00	; 0
    15b4:	09 c0       	rjmp	.+18     	; 0x15c8 <prvInitialiseTaskLists+0x18>
    15b6:	2b e0       	ldi	r18, 0x0B	; 11
    15b8:	c2 9f       	mul	r28, r18
    15ba:	c0 01       	movw	r24, r0
    15bc:	11 24       	eor	r1, r1
    15be:	83 56       	subi	r24, 0x63	; 99
    15c0:	9e 4e       	sbci	r25, 0xEE	; 238
    15c2:	0e 94 b2 02 	call	0x564	; 0x564 <vListInitialise>
    15c6:	cf 5f       	subi	r28, 0xFF	; 255
    15c8:	ca 30       	cpi	r28, 0x0A	; 10
    15ca:	a8 f3       	brcs	.-22     	; 0x15b6 <prvInitialiseTaskLists+0x6>
    15cc:	82 e9       	ldi	r24, 0x92	; 146
    15ce:	91 e1       	ldi	r25, 0x11	; 17
    15d0:	0e 94 b2 02 	call	0x564	; 0x564 <vListInitialise>
    15d4:	87 e8       	ldi	r24, 0x87	; 135
    15d6:	91 e1       	ldi	r25, 0x11	; 17
    15d8:	0e 94 b2 02 	call	0x564	; 0x564 <vListInitialise>
    15dc:	88 e7       	ldi	r24, 0x78	; 120
    15de:	91 e1       	ldi	r25, 0x11	; 17
    15e0:	0e 94 b2 02 	call	0x564	; 0x564 <vListInitialise>
    15e4:	8d e6       	ldi	r24, 0x6D	; 109
    15e6:	91 e1       	ldi	r25, 0x11	; 17
    15e8:	0e 94 b2 02 	call	0x564	; 0x564 <vListInitialise>
    15ec:	81 e6       	ldi	r24, 0x61	; 97
    15ee:	91 e1       	ldi	r25, 0x11	; 17
    15f0:	0e 94 b2 02 	call	0x564	; 0x564 <vListInitialise>
    15f4:	82 e9       	ldi	r24, 0x92	; 146
    15f6:	91 e1       	ldi	r25, 0x11	; 17
    15f8:	90 93 86 11 	sts	0x1186, r25	; 0x801186 <pxDelayedTaskList+0x1>
    15fc:	80 93 85 11 	sts	0x1185, r24	; 0x801185 <pxDelayedTaskList>
    1600:	87 e8       	ldi	r24, 0x87	; 135
    1602:	91 e1       	ldi	r25, 0x11	; 17
    1604:	90 93 84 11 	sts	0x1184, r25	; 0x801184 <pxOverflowDelayedTaskList+0x1>
    1608:	80 93 83 11 	sts	0x1183, r24	; 0x801183 <pxOverflowDelayedTaskList>
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <prvAddNewTaskToReadyList>:
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	ec 01       	movw	r28, r24
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	0f 92       	push	r0
    161c:	80 91 60 11 	lds	r24, 0x1160	; 0x801160 <uxCurrentNumberOfTasks>
    1620:	8f 5f       	subi	r24, 0xFF	; 255
    1622:	80 93 60 11 	sts	0x1160, r24	; 0x801160 <uxCurrentNumberOfTasks>
    1626:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    162a:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    162e:	89 2b       	or	r24, r25
    1630:	51 f4       	brne	.+20     	; 0x1646 <prvAddNewTaskToReadyList+0x36>
    1632:	d0 93 0c 12 	sts	0x120C, r29	; 0x80120c <pxCurrentTCB+0x1>
    1636:	c0 93 0b 12 	sts	0x120B, r28	; 0x80120b <pxCurrentTCB>
    163a:	80 91 60 11 	lds	r24, 0x1160	; 0x801160 <uxCurrentNumberOfTasks>
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	91 f4       	brne	.+36     	; 0x1666 <prvAddNewTaskToReadyList+0x56>
    1642:	b6 df       	rcall	.-148    	; 0x15b0 <prvInitialiseTaskLists>
    1644:	10 c0       	rjmp	.+32     	; 0x1666 <prvAddNewTaskToReadyList+0x56>
    1646:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <xSchedulerRunning>
    164a:	81 11       	cpse	r24, r1
    164c:	0c c0       	rjmp	.+24     	; 0x1666 <prvAddNewTaskToReadyList+0x56>
    164e:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1652:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1656:	92 8d       	ldd	r25, Z+26	; 0x1a
    1658:	8a 8d       	ldd	r24, Y+26	; 0x1a
    165a:	89 17       	cp	r24, r25
    165c:	20 f0       	brcs	.+8      	; 0x1666 <prvAddNewTaskToReadyList+0x56>
    165e:	d0 93 0c 12 	sts	0x120C, r29	; 0x80120c <pxCurrentTCB+0x1>
    1662:	c0 93 0b 12 	sts	0x120B, r28	; 0x80120b <pxCurrentTCB>
    1666:	80 91 53 11 	lds	r24, 0x1153	; 0x801153 <uxTaskNumber>
    166a:	8f 5f       	subi	r24, 0xFF	; 255
    166c:	80 93 53 11 	sts	0x1153, r24	; 0x801153 <uxTaskNumber>
    1670:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1672:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    1676:	8e 17       	cp	r24, r30
    1678:	10 f4       	brcc	.+4      	; 0x167e <prvAddNewTaskToReadyList+0x6e>
    167a:	e0 93 5b 11 	sts	0x115B, r30	; 0x80115b <uxTopReadyPriority>
    167e:	8b e0       	ldi	r24, 0x0B	; 11
    1680:	8e 9f       	mul	r24, r30
    1682:	f0 01       	movw	r30, r0
    1684:	11 24       	eor	r1, r1
    1686:	e3 56       	subi	r30, 0x63	; 99
    1688:	fe 4e       	sbci	r31, 0xEE	; 238
    168a:	01 80       	ldd	r0, Z+1	; 0x01
    168c:	f2 81       	ldd	r31, Z+2	; 0x02
    168e:	e0 2d       	mov	r30, r0
    1690:	ff 83       	std	Y+7, r31	; 0x07
    1692:	ee 83       	std	Y+6, r30	; 0x06
    1694:	26 81       	ldd	r18, Z+6	; 0x06
    1696:	37 81       	ldd	r19, Z+7	; 0x07
    1698:	39 87       	std	Y+9, r19	; 0x09
    169a:	28 87       	std	Y+8, r18	; 0x08
    169c:	a6 81       	ldd	r26, Z+6	; 0x06
    169e:	b7 81       	ldd	r27, Z+7	; 0x07
    16a0:	9e 01       	movw	r18, r28
    16a2:	2e 5f       	subi	r18, 0xFE	; 254
    16a4:	3f 4f       	sbci	r19, 0xFF	; 255
    16a6:	15 96       	adiw	r26, 0x05	; 5
    16a8:	3c 93       	st	X, r19
    16aa:	2e 93       	st	-X, r18
    16ac:	14 97       	sbiw	r26, 0x04	; 4
    16ae:	37 83       	std	Z+7, r19	; 0x07
    16b0:	26 83       	std	Z+6, r18	; 0x06
    16b2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    16b4:	8e 9f       	mul	r24, r30
    16b6:	f0 01       	movw	r30, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	e3 56       	subi	r30, 0x63	; 99
    16bc:	fe 4e       	sbci	r31, 0xEE	; 238
    16be:	fd 87       	std	Y+13, r31	; 0x0d
    16c0:	ec 87       	std	Y+12, r30	; 0x0c
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 5f       	subi	r24, 0xFF	; 255
    16c6:	80 83       	st	Z, r24
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <xSchedulerRunning>
    16d0:	88 23       	and	r24, r24
    16d2:	49 f0       	breq	.+18     	; 0x16e6 <prvAddNewTaskToReadyList+0xd6>
    16d4:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    16d8:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    16dc:	92 8d       	ldd	r25, Z+26	; 0x1a
    16de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16e0:	98 17       	cp	r25, r24
    16e2:	08 f4       	brcc	.+2      	; 0x16e6 <prvAddNewTaskToReadyList+0xd6>
    16e4:	0d d8       	rcall	.-4070   	; 0x700 <vPortYield>
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <prvCheckTasksWaitingTermination>:
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	1b c0       	rjmp	.+54     	; 0x1728 <prvCheckTasksWaitingTermination+0x3c>
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	0f 92       	push	r0
    16f8:	e0 91 74 11 	lds	r30, 0x1174	; 0x801174 <xTasksWaitingTermination+0x7>
    16fc:	f0 91 75 11 	lds	r31, 0x1175	; 0x801175 <xTasksWaitingTermination+0x8>
    1700:	c0 85       	ldd	r28, Z+8	; 0x08
    1702:	d1 85       	ldd	r29, Z+9	; 0x09
    1704:	ce 01       	movw	r24, r28
    1706:	02 96       	adiw	r24, 0x02	; 2
    1708:	0e 94 04 03 	call	0x608	; 0x608 <uxListRemove>
    170c:	80 91 60 11 	lds	r24, 0x1160	; 0x801160 <uxCurrentNumberOfTasks>
    1710:	81 50       	subi	r24, 0x01	; 1
    1712:	80 93 60 11 	sts	0x1160, r24	; 0x801160 <uxCurrentNumberOfTasks>
    1716:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <uxDeletedTasksWaitingCleanUp>
    171a:	81 50       	subi	r24, 0x01	; 1
    171c:	80 93 6c 11 	sts	0x116C, r24	; 0x80116c <uxDeletedTasksWaitingCleanUp>
    1720:	0f 90       	pop	r0
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	ce 01       	movw	r24, r28
    1726:	be de       	rcall	.-644    	; 0x14a4 <prvDeleteTCB>
    1728:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <uxDeletedTasksWaitingCleanUp>
    172c:	81 11       	cpse	r24, r1
    172e:	e1 cf       	rjmp	.-62     	; 0x16f2 <prvCheckTasksWaitingTermination+0x6>
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret

00001736 <prvAddCurrentTaskToDelayedList>:
    1736:	8f 92       	push	r8
    1738:	9f 92       	push	r9
    173a:	af 92       	push	r10
    173c:	bf 92       	push	r11
    173e:	cf 92       	push	r12
    1740:	df 92       	push	r13
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	6b 01       	movw	r12, r22
    174c:	7c 01       	movw	r14, r24
    174e:	c4 2f       	mov	r28, r20
    1750:	80 90 5c 11 	lds	r8, 0x115C	; 0x80115c <xTickCount>
    1754:	90 90 5d 11 	lds	r9, 0x115D	; 0x80115d <xTickCount+0x1>
    1758:	a0 90 5e 11 	lds	r10, 0x115E	; 0x80115e <xTickCount+0x2>
    175c:	b0 90 5f 11 	lds	r11, 0x115F	; 0x80115f <xTickCount+0x3>
    1760:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    1764:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1768:	02 96       	adiw	r24, 0x02	; 2
    176a:	0e 94 04 03 	call	0x608	; 0x608 <uxListRemove>
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	c8 16       	cp	r12, r24
    1772:	d8 06       	cpc	r13, r24
    1774:	e8 06       	cpc	r14, r24
    1776:	f8 06       	cpc	r15, r24
    1778:	b1 f5       	brne	.+108    	; 0x17e6 <prvAddCurrentTaskToDelayedList+0xb0>
    177a:	cc 23       	and	r28, r28
    177c:	a1 f1       	breq	.+104    	; 0x17e6 <prvAddCurrentTaskToDelayedList+0xb0>
    177e:	e1 e6       	ldi	r30, 0x61	; 97
    1780:	f1 e1       	ldi	r31, 0x11	; 17
    1782:	a1 81       	ldd	r26, Z+1	; 0x01
    1784:	b2 81       	ldd	r27, Z+2	; 0x02
    1786:	c0 91 0b 12 	lds	r28, 0x120B	; 0x80120b <pxCurrentTCB>
    178a:	d0 91 0c 12 	lds	r29, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    178e:	bf 83       	std	Y+7, r27	; 0x07
    1790:	ae 83       	std	Y+6, r26	; 0x06
    1792:	c0 91 0b 12 	lds	r28, 0x120B	; 0x80120b <pxCurrentTCB>
    1796:	d0 91 0c 12 	lds	r29, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    179a:	16 96       	adiw	r26, 0x06	; 6
    179c:	8d 91       	ld	r24, X+
    179e:	9c 91       	ld	r25, X
    17a0:	17 97       	sbiw	r26, 0x07	; 7
    17a2:	99 87       	std	Y+9, r25	; 0x09
    17a4:	88 87       	std	Y+8, r24	; 0x08
    17a6:	16 96       	adiw	r26, 0x06	; 6
    17a8:	cd 91       	ld	r28, X+
    17aa:	dc 91       	ld	r29, X
    17ac:	17 97       	sbiw	r26, 0x07	; 7
    17ae:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    17b2:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    17b6:	02 96       	adiw	r24, 0x02	; 2
    17b8:	9d 83       	std	Y+5, r25	; 0x05
    17ba:	8c 83       	std	Y+4, r24	; 0x04
    17bc:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    17c0:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    17c4:	02 96       	adiw	r24, 0x02	; 2
    17c6:	17 96       	adiw	r26, 0x07	; 7
    17c8:	9c 93       	st	X, r25
    17ca:	8e 93       	st	-X, r24
    17cc:	16 97       	sbiw	r26, 0x06	; 6
    17ce:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
    17d2:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    17d6:	1d 96       	adiw	r26, 0x0d	; 13
    17d8:	fc 93       	st	X, r31
    17da:	ee 93       	st	-X, r30
    17dc:	1c 97       	sbiw	r26, 0x0c	; 12
    17de:	80 81       	ld	r24, Z
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	80 83       	st	Z, r24
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <prvAddCurrentTaskToDelayedList+0x12e>
    17e6:	c8 0c       	add	r12, r8
    17e8:	d9 1c       	adc	r13, r9
    17ea:	ea 1c       	adc	r14, r10
    17ec:	fb 1c       	adc	r15, r11
    17ee:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    17f2:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    17f6:	c2 82       	std	Z+2, r12	; 0x02
    17f8:	d3 82       	std	Z+3, r13	; 0x03
    17fa:	e4 82       	std	Z+4, r14	; 0x04
    17fc:	f5 82       	std	Z+5, r15	; 0x05
    17fe:	c8 14       	cp	r12, r8
    1800:	d9 04       	cpc	r13, r9
    1802:	ea 04       	cpc	r14, r10
    1804:	fb 04       	cpc	r15, r11
    1806:	68 f4       	brcc	.+26     	; 0x1822 <prvAddCurrentTaskToDelayedList+0xec>
    1808:	60 91 0b 12 	lds	r22, 0x120B	; 0x80120b <pxCurrentTCB>
    180c:	70 91 0c 12 	lds	r23, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1810:	80 91 83 11 	lds	r24, 0x1183	; 0x801183 <pxOverflowDelayedTaskList>
    1814:	90 91 84 11 	lds	r25, 0x1184	; 0x801184 <pxOverflowDelayedTaskList+0x1>
    1818:	6e 5f       	subi	r22, 0xFE	; 254
    181a:	7f 4f       	sbci	r23, 0xFF	; 255
    181c:	0e 94 c7 02 	call	0x58e	; 0x58e <vListInsert>
    1820:	21 c0       	rjmp	.+66     	; 0x1864 <prvAddCurrentTaskToDelayedList+0x12e>
    1822:	60 91 0b 12 	lds	r22, 0x120B	; 0x80120b <pxCurrentTCB>
    1826:	70 91 0c 12 	lds	r23, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    182a:	80 91 85 11 	lds	r24, 0x1185	; 0x801185 <pxDelayedTaskList>
    182e:	90 91 86 11 	lds	r25, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    1832:	6e 5f       	subi	r22, 0xFE	; 254
    1834:	7f 4f       	sbci	r23, 0xFF	; 255
    1836:	0e 94 c7 02 	call	0x58e	; 0x58e <vListInsert>
    183a:	80 91 4f 11 	lds	r24, 0x114F	; 0x80114f <xNextTaskUnblockTime>
    183e:	90 91 50 11 	lds	r25, 0x1150	; 0x801150 <xNextTaskUnblockTime+0x1>
    1842:	a0 91 51 11 	lds	r26, 0x1151	; 0x801151 <xNextTaskUnblockTime+0x2>
    1846:	b0 91 52 11 	lds	r27, 0x1152	; 0x801152 <xNextTaskUnblockTime+0x3>
    184a:	c8 16       	cp	r12, r24
    184c:	d9 06       	cpc	r13, r25
    184e:	ea 06       	cpc	r14, r26
    1850:	fb 06       	cpc	r15, r27
    1852:	40 f4       	brcc	.+16     	; 0x1864 <prvAddCurrentTaskToDelayedList+0x12e>
    1854:	c0 92 4f 11 	sts	0x114F, r12	; 0x80114f <xNextTaskUnblockTime>
    1858:	d0 92 50 11 	sts	0x1150, r13	; 0x801150 <xNextTaskUnblockTime+0x1>
    185c:	e0 92 51 11 	sts	0x1151, r14	; 0x801151 <xNextTaskUnblockTime+0x2>
    1860:	f0 92 52 11 	sts	0x1152, r15	; 0x801152 <xNextTaskUnblockTime+0x3>
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	ff 90       	pop	r15
    186a:	ef 90       	pop	r14
    186c:	df 90       	pop	r13
    186e:	cf 90       	pop	r12
    1870:	bf 90       	pop	r11
    1872:	af 90       	pop	r10
    1874:	9f 90       	pop	r9
    1876:	8f 90       	pop	r8
    1878:	08 95       	ret

0000187a <xTaskCreate>:
    187a:	2f 92       	push	r2
    187c:	3f 92       	push	r3
    187e:	4f 92       	push	r4
    1880:	5f 92       	push	r5
    1882:	6f 92       	push	r6
    1884:	7f 92       	push	r7
    1886:	8f 92       	push	r8
    1888:	9f 92       	push	r9
    188a:	af 92       	push	r10
    188c:	bf 92       	push	r11
    188e:	cf 92       	push	r12
    1890:	df 92       	push	r13
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	3c 01       	movw	r6, r24
    189e:	1b 01       	movw	r2, r22
    18a0:	4a 01       	movw	r8, r20
    18a2:	29 01       	movw	r4, r18
    18a4:	ca 01       	movw	r24, r20
    18a6:	0e 94 cc 01 	call	0x398	; 0x398 <pvPortMalloc>
    18aa:	6c 01       	movw	r12, r24
    18ac:	89 2b       	or	r24, r25
    18ae:	71 f0       	breq	.+28     	; 0x18cc <xTaskCreate+0x52>
    18b0:	84 e3       	ldi	r24, 0x34	; 52
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 cc 01 	call	0x398	; 0x398 <pvPortMalloc>
    18b8:	ec 01       	movw	r28, r24
    18ba:	89 2b       	or	r24, r25
    18bc:	19 f0       	breq	.+6      	; 0x18c4 <xTaskCreate+0x4a>
    18be:	dc 8e       	std	Y+28, r13	; 0x1c
    18c0:	cb 8e       	std	Y+27, r12	; 0x1b
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <xTaskCreate+0x56>
    18c4:	c6 01       	movw	r24, r12
    18c6:	0e 94 75 02 	call	0x4ea	; 0x4ea <vPortFree>
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <xTaskCreate+0x56>
    18cc:	c0 e0       	ldi	r28, 0x00	; 0
    18ce:	d0 e0       	ldi	r29, 0x00	; 0
    18d0:	20 97       	sbiw	r28, 0x00	; 0
    18d2:	61 f0       	breq	.+24     	; 0x18ec <xTaskCreate+0x72>
    18d4:	a1 2c       	mov	r10, r1
    18d6:	b1 2c       	mov	r11, r1
    18d8:	6e 01       	movw	r12, r28
    18da:	92 01       	movw	r18, r4
    18dc:	a4 01       	movw	r20, r8
    18de:	b1 01       	movw	r22, r2
    18e0:	c3 01       	movw	r24, r6
    18e2:	eb dd       	rcall	.-1066   	; 0x14ba <prvInitialiseNewTask>
    18e4:	ce 01       	movw	r24, r28
    18e6:	94 de       	rcall	.-728    	; 0x1610 <prvAddNewTaskToReadyList>
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <xTaskCreate+0x74>
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	0f 91       	pop	r16
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	df 90       	pop	r13
    18fa:	cf 90       	pop	r12
    18fc:	bf 90       	pop	r11
    18fe:	af 90       	pop	r10
    1900:	9f 90       	pop	r9
    1902:	8f 90       	pop	r8
    1904:	7f 90       	pop	r7
    1906:	6f 90       	pop	r6
    1908:	5f 90       	pop	r5
    190a:	4f 90       	pop	r4
    190c:	3f 90       	pop	r3
    190e:	2f 90       	pop	r2
    1910:	08 95       	ret

00001912 <vTaskStartScheduler>:
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	0f 2e       	mov	r0, r31
    191a:	fd e4       	ldi	r31, 0x4D	; 77
    191c:	ef 2e       	mov	r14, r31
    191e:	f1 e1       	ldi	r31, 0x11	; 17
    1920:	ff 2e       	mov	r15, r31
    1922:	f0 2d       	mov	r31, r0
    1924:	00 e0       	ldi	r16, 0x00	; 0
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 ec       	ldi	r20, 0xC0	; 192
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	6a e9       	ldi	r22, 0x9A	; 154
    1930:	72 e0       	ldi	r23, 0x02	; 2
    1932:	8d ec       	ldi	r24, 0xCD	; 205
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a1 df       	rcall	.-190    	; 0x187a <xTaskCreate>
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	11 f4       	brne	.+4      	; 0x1940 <vTaskStartScheduler+0x2e>
    193c:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <xTimerCreateTimerTask>
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	c9 f4       	brne	.+50     	; 0x1976 <vTaskStartScheduler+0x64>
    1944:	f8 94       	cli
    1946:	8f ef       	ldi	r24, 0xFF	; 255
    1948:	9f ef       	ldi	r25, 0xFF	; 255
    194a:	dc 01       	movw	r26, r24
    194c:	80 93 4f 11 	sts	0x114F, r24	; 0x80114f <xNextTaskUnblockTime>
    1950:	90 93 50 11 	sts	0x1150, r25	; 0x801150 <xNextTaskUnblockTime+0x1>
    1954:	a0 93 51 11 	sts	0x1151, r26	; 0x801151 <xNextTaskUnblockTime+0x2>
    1958:	b0 93 52 11 	sts	0x1152, r27	; 0x801152 <xNextTaskUnblockTime+0x3>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	80 93 5a 11 	sts	0x115A, r24	; 0x80115a <xSchedulerRunning>
    1962:	10 92 5c 11 	sts	0x115C, r1	; 0x80115c <xTickCount>
    1966:	10 92 5d 11 	sts	0x115D, r1	; 0x80115d <xTickCount+0x1>
    196a:	10 92 5e 11 	sts	0x115E, r1	; 0x80115e <xTickCount+0x2>
    196e:	10 92 5f 11 	sts	0x115F, r1	; 0x80115f <xTickCount+0x3>
    1972:	0e 94 4e 03 	call	0x69c	; 0x69c <xPortStartScheduler>
    1976:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    197a:	0f 91       	pop	r16
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	08 95       	ret

00001982 <vTaskSuspendAll>:
    1982:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    1986:	8f 5f       	subi	r24, 0xFF	; 255
    1988:	80 93 4c 11 	sts	0x114C, r24	; 0x80114c <uxSchedulerSuspended>
    198c:	08 95       	ret

0000198e <xTaskGetTickCount>:
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	0f 92       	push	r0
    1994:	60 91 5c 11 	lds	r22, 0x115C	; 0x80115c <xTickCount>
    1998:	70 91 5d 11 	lds	r23, 0x115D	; 0x80115d <xTickCount+0x1>
    199c:	80 91 5e 11 	lds	r24, 0x115E	; 0x80115e <xTickCount+0x2>
    19a0:	90 91 5f 11 	lds	r25, 0x115F	; 0x80115f <xTickCount+0x3>
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	08 95       	ret

000019aa <xTaskIncrementTick>:
    19aa:	cf 92       	push	r12
    19ac:	df 92       	push	r13
    19ae:	ef 92       	push	r14
    19b0:	ff 92       	push	r15
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    19ba:	81 11       	cpse	r24, r1
    19bc:	05 c1       	rjmp	.+522    	; 0x1bc8 <xTaskIncrementTick+0x21e>
    19be:	c0 90 5c 11 	lds	r12, 0x115C	; 0x80115c <xTickCount>
    19c2:	d0 90 5d 11 	lds	r13, 0x115D	; 0x80115d <xTickCount+0x1>
    19c6:	e0 90 5e 11 	lds	r14, 0x115E	; 0x80115e <xTickCount+0x2>
    19ca:	f0 90 5f 11 	lds	r15, 0x115F	; 0x80115f <xTickCount+0x3>
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	c8 1a       	sub	r12, r24
    19d2:	d8 0a       	sbc	r13, r24
    19d4:	e8 0a       	sbc	r14, r24
    19d6:	f8 0a       	sbc	r15, r24
    19d8:	c0 92 5c 11 	sts	0x115C, r12	; 0x80115c <xTickCount>
    19dc:	d0 92 5d 11 	sts	0x115D, r13	; 0x80115d <xTickCount+0x1>
    19e0:	e0 92 5e 11 	sts	0x115E, r14	; 0x80115e <xTickCount+0x2>
    19e4:	f0 92 5f 11 	sts	0x115F, r15	; 0x80115f <xTickCount+0x3>
    19e8:	c1 14       	cp	r12, r1
    19ea:	d1 04       	cpc	r13, r1
    19ec:	e1 04       	cpc	r14, r1
    19ee:	f1 04       	cpc	r15, r1
    19f0:	b1 f4       	brne	.+44     	; 0x1a1e <xTaskIncrementTick+0x74>
    19f2:	80 91 85 11 	lds	r24, 0x1185	; 0x801185 <pxDelayedTaskList>
    19f6:	90 91 86 11 	lds	r25, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    19fa:	20 91 83 11 	lds	r18, 0x1183	; 0x801183 <pxOverflowDelayedTaskList>
    19fe:	30 91 84 11 	lds	r19, 0x1184	; 0x801184 <pxOverflowDelayedTaskList+0x1>
    1a02:	30 93 86 11 	sts	0x1186, r19	; 0x801186 <pxDelayedTaskList+0x1>
    1a06:	20 93 85 11 	sts	0x1185, r18	; 0x801185 <pxDelayedTaskList>
    1a0a:	90 93 84 11 	sts	0x1184, r25	; 0x801184 <pxOverflowDelayedTaskList+0x1>
    1a0e:	80 93 83 11 	sts	0x1183, r24	; 0x801183 <pxOverflowDelayedTaskList>
    1a12:	80 91 54 11 	lds	r24, 0x1154	; 0x801154 <xNumOfOverflows>
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	80 93 54 11 	sts	0x1154, r24	; 0x801154 <xNumOfOverflows>
    1a1c:	1c dd       	rcall	.-1480   	; 0x1456 <prvResetNextTaskUnblockTime>
    1a1e:	80 91 4f 11 	lds	r24, 0x114F	; 0x80114f <xNextTaskUnblockTime>
    1a22:	90 91 50 11 	lds	r25, 0x1150	; 0x801150 <xNextTaskUnblockTime+0x1>
    1a26:	a0 91 51 11 	lds	r26, 0x1151	; 0x801151 <xNextTaskUnblockTime+0x2>
    1a2a:	b0 91 52 11 	lds	r27, 0x1152	; 0x801152 <xNextTaskUnblockTime+0x3>
    1a2e:	c8 16       	cp	r12, r24
    1a30:	d9 06       	cpc	r13, r25
    1a32:	ea 06       	cpc	r14, r26
    1a34:	fb 06       	cpc	r15, r27
    1a36:	20 f4       	brcc	.+8      	; 0x1a40 <xTaskIncrementTick+0x96>
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	b2 c0       	rjmp	.+356    	; 0x1ba0 <xTaskIncrementTick+0x1f6>
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <xTaskIncrementTick+0x98>
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	e0 91 85 11 	lds	r30, 0x1185	; 0x801185 <pxDelayedTaskList>
    1a46:	f0 91 86 11 	lds	r31, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    1a4a:	90 81       	ld	r25, Z
    1a4c:	91 11       	cpse	r25, r1
    1a4e:	0c c0       	rjmp	.+24     	; 0x1a68 <xTaskIncrementTick+0xbe>
    1a50:	4f ef       	ldi	r20, 0xFF	; 255
    1a52:	5f ef       	ldi	r21, 0xFF	; 255
    1a54:	ba 01       	movw	r22, r20
    1a56:	40 93 4f 11 	sts	0x114F, r20	; 0x80114f <xNextTaskUnblockTime>
    1a5a:	50 93 50 11 	sts	0x1150, r21	; 0x801150 <xNextTaskUnblockTime+0x1>
    1a5e:	60 93 51 11 	sts	0x1151, r22	; 0x801151 <xNextTaskUnblockTime+0x2>
    1a62:	70 93 52 11 	sts	0x1152, r23	; 0x801152 <xNextTaskUnblockTime+0x3>
    1a66:	9c c0       	rjmp	.+312    	; 0x1ba0 <xTaskIncrementTick+0x1f6>
    1a68:	e0 91 85 11 	lds	r30, 0x1185	; 0x801185 <pxDelayedTaskList>
    1a6c:	f0 91 86 11 	lds	r31, 0x1186	; 0x801186 <pxDelayedTaskList+0x1>
    1a70:	07 80       	ldd	r0, Z+7	; 0x07
    1a72:	f0 85       	ldd	r31, Z+8	; 0x08
    1a74:	e0 2d       	mov	r30, r0
    1a76:	00 84       	ldd	r0, Z+8	; 0x08
    1a78:	f1 85       	ldd	r31, Z+9	; 0x09
    1a7a:	e0 2d       	mov	r30, r0
    1a7c:	42 81       	ldd	r20, Z+2	; 0x02
    1a7e:	53 81       	ldd	r21, Z+3	; 0x03
    1a80:	64 81       	ldd	r22, Z+4	; 0x04
    1a82:	75 81       	ldd	r23, Z+5	; 0x05
    1a84:	c4 16       	cp	r12, r20
    1a86:	d5 06       	cpc	r13, r21
    1a88:	e6 06       	cpc	r14, r22
    1a8a:	f7 06       	cpc	r15, r23
    1a8c:	48 f4       	brcc	.+18     	; 0x1aa0 <xTaskIncrementTick+0xf6>
    1a8e:	40 93 4f 11 	sts	0x114F, r20	; 0x80114f <xNextTaskUnblockTime>
    1a92:	50 93 50 11 	sts	0x1150, r21	; 0x801150 <xNextTaskUnblockTime+0x1>
    1a96:	60 93 51 11 	sts	0x1151, r22	; 0x801151 <xNextTaskUnblockTime+0x2>
    1a9a:	70 93 52 11 	sts	0x1152, r23	; 0x801152 <xNextTaskUnblockTime+0x3>
    1a9e:	80 c0       	rjmp	.+256    	; 0x1ba0 <xTaskIncrementTick+0x1f6>
    1aa0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1aa2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1aa4:	c6 81       	ldd	r28, Z+6	; 0x06
    1aa6:	d7 81       	ldd	r29, Z+7	; 0x07
    1aa8:	20 85       	ldd	r18, Z+8	; 0x08
    1aaa:	31 85       	ldd	r19, Z+9	; 0x09
    1aac:	3f 83       	std	Y+7, r19	; 0x07
    1aae:	2e 83       	std	Y+6, r18	; 0x06
    1ab0:	c0 85       	ldd	r28, Z+8	; 0x08
    1ab2:	d1 85       	ldd	r29, Z+9	; 0x09
    1ab4:	26 81       	ldd	r18, Z+6	; 0x06
    1ab6:	37 81       	ldd	r19, Z+7	; 0x07
    1ab8:	3d 83       	std	Y+5, r19	; 0x05
    1aba:	2c 83       	std	Y+4, r18	; 0x04
    1abc:	11 96       	adiw	r26, 0x01	; 1
    1abe:	4d 91       	ld	r20, X+
    1ac0:	5c 91       	ld	r21, X
    1ac2:	12 97       	sbiw	r26, 0x02	; 2
    1ac4:	9f 01       	movw	r18, r30
    1ac6:	2e 5f       	subi	r18, 0xFE	; 254
    1ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aca:	42 17       	cp	r20, r18
    1acc:	53 07       	cpc	r21, r19
    1ace:	31 f4       	brne	.+12     	; 0x1adc <xTaskIncrementTick+0x132>
    1ad0:	40 85       	ldd	r20, Z+8	; 0x08
    1ad2:	51 85       	ldd	r21, Z+9	; 0x09
    1ad4:	12 96       	adiw	r26, 0x02	; 2
    1ad6:	5c 93       	st	X, r21
    1ad8:	4e 93       	st	-X, r20
    1ada:	11 97       	sbiw	r26, 0x01	; 1
    1adc:	15 86       	std	Z+13, r1	; 0x0d
    1ade:	14 86       	std	Z+12, r1	; 0x0c
    1ae0:	9c 91       	ld	r25, X
    1ae2:	91 50       	subi	r25, 0x01	; 1
    1ae4:	9c 93       	st	X, r25
    1ae6:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ae8:	b1 8d       	ldd	r27, Z+25	; 0x19
    1aea:	10 97       	sbiw	r26, 0x00	; 0
    1aec:	09 f1       	breq	.+66     	; 0x1b30 <xTaskIncrementTick+0x186>
    1aee:	c2 89       	ldd	r28, Z+18	; 0x12
    1af0:	d3 89       	ldd	r29, Z+19	; 0x13
    1af2:	44 89       	ldd	r20, Z+20	; 0x14
    1af4:	55 89       	ldd	r21, Z+21	; 0x15
    1af6:	5f 83       	std	Y+7, r21	; 0x07
    1af8:	4e 83       	std	Y+6, r20	; 0x06
    1afa:	c4 89       	ldd	r28, Z+20	; 0x14
    1afc:	d5 89       	ldd	r29, Z+21	; 0x15
    1afe:	42 89       	ldd	r20, Z+18	; 0x12
    1b00:	53 89       	ldd	r21, Z+19	; 0x13
    1b02:	5d 83       	std	Y+5, r21	; 0x05
    1b04:	4c 83       	std	Y+4, r20	; 0x04
    1b06:	11 96       	adiw	r26, 0x01	; 1
    1b08:	6d 91       	ld	r22, X+
    1b0a:	7c 91       	ld	r23, X
    1b0c:	12 97       	sbiw	r26, 0x02	; 2
    1b0e:	af 01       	movw	r20, r30
    1b10:	42 5f       	subi	r20, 0xF2	; 242
    1b12:	5f 4f       	sbci	r21, 0xFF	; 255
    1b14:	64 17       	cp	r22, r20
    1b16:	75 07       	cpc	r23, r21
    1b18:	31 f4       	brne	.+12     	; 0x1b26 <xTaskIncrementTick+0x17c>
    1b1a:	44 89       	ldd	r20, Z+20	; 0x14
    1b1c:	55 89       	ldd	r21, Z+21	; 0x15
    1b1e:	12 96       	adiw	r26, 0x02	; 2
    1b20:	5c 93       	st	X, r21
    1b22:	4e 93       	st	-X, r20
    1b24:	11 97       	sbiw	r26, 0x01	; 1
    1b26:	11 8e       	std	Z+25, r1	; 0x19
    1b28:	10 8e       	std	Z+24, r1	; 0x18
    1b2a:	9c 91       	ld	r25, X
    1b2c:	91 50       	subi	r25, 0x01	; 1
    1b2e:	9c 93       	st	X, r25
    1b30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b32:	90 91 5b 11 	lds	r25, 0x115B	; 0x80115b <uxTopReadyPriority>
    1b36:	9a 17       	cp	r25, r26
    1b38:	10 f4       	brcc	.+4      	; 0x1b3e <xTaskIncrementTick+0x194>
    1b3a:	a0 93 5b 11 	sts	0x115B, r26	; 0x80115b <uxTopReadyPriority>
    1b3e:	9b e0       	ldi	r25, 0x0B	; 11
    1b40:	9a 9f       	mul	r25, r26
    1b42:	d0 01       	movw	r26, r0
    1b44:	11 24       	eor	r1, r1
    1b46:	a3 56       	subi	r26, 0x63	; 99
    1b48:	be 4e       	sbci	r27, 0xEE	; 238
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	0d 90       	ld	r0, X+
    1b4e:	bc 91       	ld	r27, X
    1b50:	a0 2d       	mov	r26, r0
    1b52:	b7 83       	std	Z+7, r27	; 0x07
    1b54:	a6 83       	std	Z+6, r26	; 0x06
    1b56:	16 96       	adiw	r26, 0x06	; 6
    1b58:	4d 91       	ld	r20, X+
    1b5a:	5c 91       	ld	r21, X
    1b5c:	17 97       	sbiw	r26, 0x07	; 7
    1b5e:	51 87       	std	Z+9, r21	; 0x09
    1b60:	40 87       	std	Z+8, r20	; 0x08
    1b62:	16 96       	adiw	r26, 0x06	; 6
    1b64:	cd 91       	ld	r28, X+
    1b66:	dc 91       	ld	r29, X
    1b68:	17 97       	sbiw	r26, 0x07	; 7
    1b6a:	3d 83       	std	Y+5, r19	; 0x05
    1b6c:	2c 83       	std	Y+4, r18	; 0x04
    1b6e:	17 96       	adiw	r26, 0x07	; 7
    1b70:	3c 93       	st	X, r19
    1b72:	2e 93       	st	-X, r18
    1b74:	16 97       	sbiw	r26, 0x06	; 6
    1b76:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b78:	9a 9f       	mul	r25, r26
    1b7a:	d0 01       	movw	r26, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	a3 56       	subi	r26, 0x63	; 99
    1b80:	be 4e       	sbci	r27, 0xEE	; 238
    1b82:	b5 87       	std	Z+13, r27	; 0x0d
    1b84:	a4 87       	std	Z+12, r26	; 0x0c
    1b86:	9c 91       	ld	r25, X
    1b88:	9f 5f       	subi	r25, 0xFF	; 255
    1b8a:	9c 93       	st	X, r25
    1b8c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b8e:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1b92:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1b96:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b98:	29 17       	cp	r18, r25
    1b9a:	08 f0       	brcs	.+2      	; 0x1b9e <xTaskIncrementTick+0x1f4>
    1b9c:	4f cf       	rjmp	.-354    	; 0x1a3c <xTaskIncrementTick+0x92>
    1b9e:	51 cf       	rjmp	.-350    	; 0x1a42 <xTaskIncrementTick+0x98>
    1ba0:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1ba4:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1ba8:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1baa:	9b e0       	ldi	r25, 0x0B	; 11
    1bac:	e9 9f       	mul	r30, r25
    1bae:	f0 01       	movw	r30, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	e3 56       	subi	r30, 0x63	; 99
    1bb4:	fe 4e       	sbci	r31, 0xEE	; 238
    1bb6:	90 81       	ld	r25, Z
    1bb8:	92 30       	cpi	r25, 0x02	; 2
    1bba:	08 f0       	brcs	.+2      	; 0x1bbe <xTaskIncrementTick+0x214>
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 91 55 11 	lds	r25, 0x1155	; 0x801155 <xYieldPending>
    1bc2:	91 11       	cpse	r25, r1
    1bc4:	16 c0       	rjmp	.+44     	; 0x1bf2 <xTaskIncrementTick+0x248>
    1bc6:	16 c0       	rjmp	.+44     	; 0x1bf4 <xTaskIncrementTick+0x24a>
    1bc8:	80 91 56 11 	lds	r24, 0x1156	; 0x801156 <xPendedTicks>
    1bcc:	90 91 57 11 	lds	r25, 0x1157	; 0x801157 <xPendedTicks+0x1>
    1bd0:	a0 91 58 11 	lds	r26, 0x1158	; 0x801158 <xPendedTicks+0x2>
    1bd4:	b0 91 59 11 	lds	r27, 0x1159	; 0x801159 <xPendedTicks+0x3>
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	a1 1d       	adc	r26, r1
    1bdc:	b1 1d       	adc	r27, r1
    1bde:	80 93 56 11 	sts	0x1156, r24	; 0x801156 <xPendedTicks>
    1be2:	90 93 57 11 	sts	0x1157, r25	; 0x801157 <xPendedTicks+0x1>
    1be6:	a0 93 58 11 	sts	0x1158, r26	; 0x801158 <xPendedTicks+0x2>
    1bea:	b0 93 59 11 	sts	0x1159, r27	; 0x801159 <xPendedTicks+0x3>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <xTaskIncrementTick+0x24a>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	ff 90       	pop	r15
    1bfa:	ef 90       	pop	r14
    1bfc:	df 90       	pop	r13
    1bfe:	cf 90       	pop	r12
    1c00:	08 95       	ret

00001c02 <xTaskResumeAll>:
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	0f 92       	push	r0
    1c14:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    1c18:	81 50       	subi	r24, 0x01	; 1
    1c1a:	80 93 4c 11 	sts	0x114C, r24	; 0x80114c <uxSchedulerSuspended>
    1c1e:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    1c22:	81 11       	cpse	r24, r1
    1c24:	be c0       	rjmp	.+380    	; 0x1da2 <xTaskResumeAll+0x1a0>
    1c26:	80 91 60 11 	lds	r24, 0x1160	; 0x801160 <uxCurrentNumberOfTasks>
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	88 c0       	rjmp	.+272    	; 0x1d3e <xTaskResumeAll+0x13c>
    1c2e:	bc c0       	rjmp	.+376    	; 0x1da8 <xTaskResumeAll+0x1a6>
    1c30:	e0 91 7f 11 	lds	r30, 0x117F	; 0x80117f <xPendingReadyList+0x7>
    1c34:	f0 91 80 11 	lds	r31, 0x1180	; 0x801180 <xPendingReadyList+0x8>
    1c38:	00 84       	ldd	r0, Z+8	; 0x08
    1c3a:	f1 85       	ldd	r31, Z+9	; 0x09
    1c3c:	e0 2d       	mov	r30, r0
    1c3e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c40:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c42:	c2 89       	ldd	r28, Z+18	; 0x12
    1c44:	d3 89       	ldd	r29, Z+19	; 0x13
    1c46:	84 89       	ldd	r24, Z+20	; 0x14
    1c48:	95 89       	ldd	r25, Z+21	; 0x15
    1c4a:	9f 83       	std	Y+7, r25	; 0x07
    1c4c:	8e 83       	std	Y+6, r24	; 0x06
    1c4e:	c4 89       	ldd	r28, Z+20	; 0x14
    1c50:	d5 89       	ldd	r29, Z+21	; 0x15
    1c52:	82 89       	ldd	r24, Z+18	; 0x12
    1c54:	93 89       	ldd	r25, Z+19	; 0x13
    1c56:	9d 83       	std	Y+5, r25	; 0x05
    1c58:	8c 83       	std	Y+4, r24	; 0x04
    1c5a:	11 96       	adiw	r26, 0x01	; 1
    1c5c:	2d 91       	ld	r18, X+
    1c5e:	3c 91       	ld	r19, X
    1c60:	12 97       	sbiw	r26, 0x02	; 2
    1c62:	cf 01       	movw	r24, r30
    1c64:	0e 96       	adiw	r24, 0x0e	; 14
    1c66:	28 17       	cp	r18, r24
    1c68:	39 07       	cpc	r19, r25
    1c6a:	31 f4       	brne	.+12     	; 0x1c78 <xTaskResumeAll+0x76>
    1c6c:	84 89       	ldd	r24, Z+20	; 0x14
    1c6e:	95 89       	ldd	r25, Z+21	; 0x15
    1c70:	12 96       	adiw	r26, 0x02	; 2
    1c72:	9c 93       	st	X, r25
    1c74:	8e 93       	st	-X, r24
    1c76:	11 97       	sbiw	r26, 0x01	; 1
    1c78:	11 8e       	std	Z+25, r1	; 0x19
    1c7a:	10 8e       	std	Z+24, r1	; 0x18
    1c7c:	8c 91       	ld	r24, X
    1c7e:	81 50       	subi	r24, 0x01	; 1
    1c80:	8c 93       	st	X, r24
    1c82:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c84:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c86:	c6 81       	ldd	r28, Z+6	; 0x06
    1c88:	d7 81       	ldd	r29, Z+7	; 0x07
    1c8a:	80 85       	ldd	r24, Z+8	; 0x08
    1c8c:	91 85       	ldd	r25, Z+9	; 0x09
    1c8e:	9f 83       	std	Y+7, r25	; 0x07
    1c90:	8e 83       	std	Y+6, r24	; 0x06
    1c92:	c0 85       	ldd	r28, Z+8	; 0x08
    1c94:	d1 85       	ldd	r29, Z+9	; 0x09
    1c96:	86 81       	ldd	r24, Z+6	; 0x06
    1c98:	97 81       	ldd	r25, Z+7	; 0x07
    1c9a:	9d 83       	std	Y+5, r25	; 0x05
    1c9c:	8c 83       	std	Y+4, r24	; 0x04
    1c9e:	11 96       	adiw	r26, 0x01	; 1
    1ca0:	8d 91       	ld	r24, X+
    1ca2:	9c 91       	ld	r25, X
    1ca4:	12 97       	sbiw	r26, 0x02	; 2
    1ca6:	9f 01       	movw	r18, r30
    1ca8:	2e 5f       	subi	r18, 0xFE	; 254
    1caa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cac:	82 17       	cp	r24, r18
    1cae:	93 07       	cpc	r25, r19
    1cb0:	31 f4       	brne	.+12     	; 0x1cbe <xTaskResumeAll+0xbc>
    1cb2:	80 85       	ldd	r24, Z+8	; 0x08
    1cb4:	91 85       	ldd	r25, Z+9	; 0x09
    1cb6:	12 96       	adiw	r26, 0x02	; 2
    1cb8:	9c 93       	st	X, r25
    1cba:	8e 93       	st	-X, r24
    1cbc:	11 97       	sbiw	r26, 0x01	; 1
    1cbe:	15 86       	std	Z+13, r1	; 0x0d
    1cc0:	14 86       	std	Z+12, r1	; 0x0c
    1cc2:	8c 91       	ld	r24, X
    1cc4:	81 50       	subi	r24, 0x01	; 1
    1cc6:	8c 93       	st	X, r24
    1cc8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cca:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    1cce:	8a 17       	cp	r24, r26
    1cd0:	10 f4       	brcc	.+4      	; 0x1cd6 <xTaskResumeAll+0xd4>
    1cd2:	a0 93 5b 11 	sts	0x115B, r26	; 0x80115b <uxTopReadyPriority>
    1cd6:	8b e0       	ldi	r24, 0x0B	; 11
    1cd8:	8a 9f       	mul	r24, r26
    1cda:	d0 01       	movw	r26, r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	a3 56       	subi	r26, 0x63	; 99
    1ce0:	be 4e       	sbci	r27, 0xEE	; 238
    1ce2:	11 96       	adiw	r26, 0x01	; 1
    1ce4:	0d 90       	ld	r0, X+
    1ce6:	bc 91       	ld	r27, X
    1ce8:	a0 2d       	mov	r26, r0
    1cea:	b7 83       	std	Z+7, r27	; 0x07
    1cec:	a6 83       	std	Z+6, r26	; 0x06
    1cee:	16 96       	adiw	r26, 0x06	; 6
    1cf0:	4d 91       	ld	r20, X+
    1cf2:	5c 91       	ld	r21, X
    1cf4:	17 97       	sbiw	r26, 0x07	; 7
    1cf6:	51 87       	std	Z+9, r21	; 0x09
    1cf8:	40 87       	std	Z+8, r20	; 0x08
    1cfa:	16 96       	adiw	r26, 0x06	; 6
    1cfc:	cd 91       	ld	r28, X+
    1cfe:	dc 91       	ld	r29, X
    1d00:	17 97       	sbiw	r26, 0x07	; 7
    1d02:	3d 83       	std	Y+5, r19	; 0x05
    1d04:	2c 83       	std	Y+4, r18	; 0x04
    1d06:	17 96       	adiw	r26, 0x07	; 7
    1d08:	3c 93       	st	X, r19
    1d0a:	2e 93       	st	-X, r18
    1d0c:	16 97       	sbiw	r26, 0x06	; 6
    1d0e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d10:	8a 9f       	mul	r24, r26
    1d12:	d0 01       	movw	r26, r0
    1d14:	11 24       	eor	r1, r1
    1d16:	a3 56       	subi	r26, 0x63	; 99
    1d18:	be 4e       	sbci	r27, 0xEE	; 238
    1d1a:	b5 87       	std	Z+13, r27	; 0x0d
    1d1c:	a4 87       	std	Z+12, r26	; 0x0c
    1d1e:	8c 91       	ld	r24, X
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
    1d22:	8c 93       	st	X, r24
    1d24:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d26:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
    1d2a:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1d2e:	5a 96       	adiw	r26, 0x1a	; 26
    1d30:	8c 91       	ld	r24, X
    1d32:	98 17       	cp	r25, r24
    1d34:	30 f0       	brcs	.+12     	; 0x1d42 <xTaskResumeAll+0x140>
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <xYieldPending>
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <xTaskResumeAll+0x140>
    1d3e:	e0 e0       	ldi	r30, 0x00	; 0
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 91 78 11 	lds	r24, 0x1178	; 0x801178 <xPendingReadyList>
    1d46:	81 11       	cpse	r24, r1
    1d48:	73 cf       	rjmp	.-282    	; 0x1c30 <xTaskResumeAll+0x2e>
    1d4a:	ef 2b       	or	r30, r31
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <xTaskResumeAll+0x14e>
    1d4e:	83 db       	rcall	.-2298   	; 0x1456 <prvResetNextTaskUnblockTime>
    1d50:	c0 90 56 11 	lds	r12, 0x1156	; 0x801156 <xPendedTicks>
    1d54:	d0 90 57 11 	lds	r13, 0x1157	; 0x801157 <xPendedTicks+0x1>
    1d58:	e0 90 58 11 	lds	r14, 0x1158	; 0x801158 <xPendedTicks+0x2>
    1d5c:	f0 90 59 11 	lds	r15, 0x1159	; 0x801159 <xPendedTicks+0x3>
    1d60:	c1 14       	cp	r12, r1
    1d62:	d1 04       	cpc	r13, r1
    1d64:	e1 04       	cpc	r14, r1
    1d66:	f1 04       	cpc	r15, r1
    1d68:	a1 f0       	breq	.+40     	; 0x1d92 <xTaskResumeAll+0x190>
    1d6a:	1f de       	rcall	.-962    	; 0x19aa <xTaskIncrementTick>
    1d6c:	88 23       	and	r24, r24
    1d6e:	19 f0       	breq	.+6      	; 0x1d76 <xTaskResumeAll+0x174>
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <xYieldPending>
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	c8 1a       	sub	r12, r24
    1d7a:	d1 08       	sbc	r13, r1
    1d7c:	e1 08       	sbc	r14, r1
    1d7e:	f1 08       	sbc	r15, r1
    1d80:	a1 f7       	brne	.-24     	; 0x1d6a <xTaskResumeAll+0x168>
    1d82:	10 92 56 11 	sts	0x1156, r1	; 0x801156 <xPendedTicks>
    1d86:	10 92 57 11 	sts	0x1157, r1	; 0x801157 <xPendedTicks+0x1>
    1d8a:	10 92 58 11 	sts	0x1158, r1	; 0x801158 <xPendedTicks+0x2>
    1d8e:	10 92 59 11 	sts	0x1159, r1	; 0x801159 <xPendedTicks+0x3>
    1d92:	80 91 55 11 	lds	r24, 0x1155	; 0x801155 <xYieldPending>
    1d96:	88 23       	and	r24, r24
    1d98:	31 f0       	breq	.+12     	; 0x1da6 <xTaskResumeAll+0x1a4>
    1d9a:	0e 94 80 03 	call	0x700	; 0x700 <vPortYield>
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <xTaskResumeAll+0x1a6>
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <xTaskResumeAll+0x1a6>
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	0f 90       	pop	r0
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	df 90       	pop	r13
    1db6:	cf 90       	pop	r12
    1db8:	08 95       	ret

00001dba <xTaskDelayUntil>:
    1dba:	8f 92       	push	r8
    1dbc:	9f 92       	push	r9
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	ec 01       	movw	r28, r24
    1dd2:	6a 01       	movw	r12, r20
    1dd4:	7b 01       	movw	r14, r22
    1dd6:	d5 dd       	rcall	.-1110   	; 0x1982 <vTaskSuspendAll>
    1dd8:	80 90 5c 11 	lds	r8, 0x115C	; 0x80115c <xTickCount>
    1ddc:	90 90 5d 11 	lds	r9, 0x115D	; 0x80115d <xTickCount+0x1>
    1de0:	a0 90 5e 11 	lds	r10, 0x115E	; 0x80115e <xTickCount+0x2>
    1de4:	b0 90 5f 11 	lds	r11, 0x115F	; 0x80115f <xTickCount+0x3>
    1de8:	88 81       	ld	r24, Y
    1dea:	99 81       	ldd	r25, Y+1	; 0x01
    1dec:	aa 81       	ldd	r26, Y+2	; 0x02
    1dee:	bb 81       	ldd	r27, Y+3	; 0x03
    1df0:	ac 01       	movw	r20, r24
    1df2:	bd 01       	movw	r22, r26
    1df4:	4c 0d       	add	r20, r12
    1df6:	5d 1d       	adc	r21, r13
    1df8:	6e 1d       	adc	r22, r14
    1dfa:	7f 1d       	adc	r23, r15
    1dfc:	88 16       	cp	r8, r24
    1dfe:	99 06       	cpc	r9, r25
    1e00:	aa 06       	cpc	r10, r26
    1e02:	bb 06       	cpc	r11, r27
    1e04:	60 f4       	brcc	.+24     	; 0x1e1e <xTaskDelayUntil+0x64>
    1e06:	48 17       	cp	r20, r24
    1e08:	59 07       	cpc	r21, r25
    1e0a:	6a 07       	cpc	r22, r26
    1e0c:	7b 07       	cpc	r23, r27
    1e0e:	98 f4       	brcc	.+38     	; 0x1e36 <xTaskDelayUntil+0x7c>
    1e10:	84 16       	cp	r8, r20
    1e12:	95 06       	cpc	r9, r21
    1e14:	a6 06       	cpc	r10, r22
    1e16:	b7 06       	cpc	r11, r23
    1e18:	80 f0       	brcs	.+32     	; 0x1e3a <xTaskDelayUntil+0x80>
    1e1a:	10 e0       	ldi	r17, 0x00	; 0
    1e1c:	13 c0       	rjmp	.+38     	; 0x1e44 <xTaskDelayUntil+0x8a>
    1e1e:	48 17       	cp	r20, r24
    1e20:	59 07       	cpc	r21, r25
    1e22:	6a 07       	cpc	r22, r26
    1e24:	7b 07       	cpc	r23, r27
    1e26:	58 f0       	brcs	.+22     	; 0x1e3e <xTaskDelayUntil+0x84>
    1e28:	84 16       	cp	r8, r20
    1e2a:	95 06       	cpc	r9, r21
    1e2c:	a6 06       	cpc	r10, r22
    1e2e:	b7 06       	cpc	r11, r23
    1e30:	40 f0       	brcs	.+16     	; 0x1e42 <xTaskDelayUntil+0x88>
    1e32:	10 e0       	ldi	r17, 0x00	; 0
    1e34:	07 c0       	rjmp	.+14     	; 0x1e44 <xTaskDelayUntil+0x8a>
    1e36:	10 e0       	ldi	r17, 0x00	; 0
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <xTaskDelayUntil+0x8a>
    1e3a:	11 e0       	ldi	r17, 0x01	; 1
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <xTaskDelayUntil+0x8a>
    1e3e:	11 e0       	ldi	r17, 0x01	; 1
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <xTaskDelayUntil+0x8a>
    1e42:	11 e0       	ldi	r17, 0x01	; 1
    1e44:	48 83       	st	Y, r20
    1e46:	59 83       	std	Y+1, r21	; 0x01
    1e48:	6a 83       	std	Y+2, r22	; 0x02
    1e4a:	7b 83       	std	Y+3, r23	; 0x03
    1e4c:	11 23       	and	r17, r17
    1e4e:	41 f0       	breq	.+16     	; 0x1e60 <xTaskDelayUntil+0xa6>
    1e50:	cb 01       	movw	r24, r22
    1e52:	ba 01       	movw	r22, r20
    1e54:	68 19       	sub	r22, r8
    1e56:	79 09       	sbc	r23, r9
    1e58:	8a 09       	sbc	r24, r10
    1e5a:	9b 09       	sbc	r25, r11
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	6b dc       	rcall	.-1834   	; 0x1736 <prvAddCurrentTaskToDelayedList>
    1e60:	d0 de       	rcall	.-608    	; 0x1c02 <xTaskResumeAll>
    1e62:	81 11       	cpse	r24, r1
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <xTaskDelayUntil+0xb0>
    1e66:	0e 94 80 03 	call	0x700	; 0x700 <vPortYield>
    1e6a:	81 2f       	mov	r24, r17
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	ff 90       	pop	r15
    1e74:	ef 90       	pop	r14
    1e76:	df 90       	pop	r13
    1e78:	cf 90       	pop	r12
    1e7a:	bf 90       	pop	r11
    1e7c:	af 90       	pop	r10
    1e7e:	9f 90       	pop	r9
    1e80:	8f 90       	pop	r8
    1e82:	08 95       	ret

00001e84 <vTaskDelay>:
    1e84:	cf 92       	push	r12
    1e86:	df 92       	push	r13
    1e88:	ef 92       	push	r14
    1e8a:	ff 92       	push	r15
    1e8c:	6b 01       	movw	r12, r22
    1e8e:	7c 01       	movw	r14, r24
    1e90:	67 2b       	or	r22, r23
    1e92:	68 2b       	or	r22, r24
    1e94:	69 2b       	or	r22, r25
    1e96:	39 f0       	breq	.+14     	; 0x1ea6 <vTaskDelay+0x22>
    1e98:	74 dd       	rcall	.-1304   	; 0x1982 <vTaskSuspendAll>
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	c7 01       	movw	r24, r14
    1e9e:	b6 01       	movw	r22, r12
    1ea0:	4a dc       	rcall	.-1900   	; 0x1736 <prvAddCurrentTaskToDelayedList>
    1ea2:	af de       	rcall	.-674    	; 0x1c02 <xTaskResumeAll>
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <vTaskDelay+0x24>
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	81 11       	cpse	r24, r1
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <vTaskDelay+0x2c>
    1eac:	0e 94 80 03 	call	0x700	; 0x700 <vPortYield>
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	df 90       	pop	r13
    1eb6:	cf 90       	pop	r12
    1eb8:	08 95       	ret

00001eba <vTaskSwitchContext>:
    1eba:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    1ebe:	88 23       	and	r24, r24
    1ec0:	21 f0       	breq	.+8      	; 0x1eca <vTaskSwitchContext+0x10>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <xYieldPending>
    1ec8:	08 95       	ret
    1eca:	10 92 55 11 	sts	0x1155, r1	; 0x801155 <xYieldPending>
    1ece:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1ed2:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1ed6:	20 81       	ld	r18, Z
    1ed8:	31 81       	ldd	r19, Z+1	; 0x01
    1eda:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    1ede:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1ee2:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ee4:	94 8d       	ldd	r25, Z+28	; 0x1c
    1ee6:	82 17       	cp	r24, r18
    1ee8:	93 07       	cpc	r25, r19
    1eea:	60 f0       	brcs	.+24     	; 0x1f04 <vTaskSwitchContext+0x4a>
    1eec:	60 91 0b 12 	lds	r22, 0x120B	; 0x80120b <pxCurrentTCB>
    1ef0:	70 91 0c 12 	lds	r23, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1ef4:	63 5e       	subi	r22, 0xE3	; 227
    1ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef8:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    1efc:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1f00:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <vApplicationStackOverflowHook>
    1f04:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <vTaskSwitchContext+0x52>
    1f0a:	81 50       	subi	r24, 0x01	; 1
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	9b e0       	ldi	r25, 0x0B	; 11
    1f12:	92 9f       	mul	r25, r18
    1f14:	f0 01       	movw	r30, r0
    1f16:	93 9f       	mul	r25, r19
    1f18:	f0 0d       	add	r31, r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	e3 56       	subi	r30, 0x63	; 99
    1f1e:	fe 4e       	sbci	r31, 0xEE	; 238
    1f20:	90 81       	ld	r25, Z
    1f22:	99 23       	and	r25, r25
    1f24:	91 f3       	breq	.-28     	; 0x1f0a <vTaskSwitchContext+0x50>
    1f26:	9b e0       	ldi	r25, 0x0B	; 11
    1f28:	92 9f       	mul	r25, r18
    1f2a:	a0 01       	movw	r20, r0
    1f2c:	93 9f       	mul	r25, r19
    1f2e:	50 0d       	add	r21, r0
    1f30:	11 24       	eor	r1, r1
    1f32:	df 01       	movw	r26, r30
    1f34:	01 80       	ldd	r0, Z+1	; 0x01
    1f36:	f2 81       	ldd	r31, Z+2	; 0x02
    1f38:	e0 2d       	mov	r30, r0
    1f3a:	04 80       	ldd	r0, Z+4	; 0x04
    1f3c:	f5 81       	ldd	r31, Z+5	; 0x05
    1f3e:	e0 2d       	mov	r30, r0
    1f40:	12 96       	adiw	r26, 0x02	; 2
    1f42:	fc 93       	st	X, r31
    1f44:	ee 93       	st	-X, r30
    1f46:	11 97       	sbiw	r26, 0x01	; 1
    1f48:	40 56       	subi	r20, 0x60	; 96
    1f4a:	5e 4e       	sbci	r21, 0xEE	; 238
    1f4c:	e4 17       	cp	r30, r20
    1f4e:	f5 07       	cpc	r31, r21
    1f50:	29 f4       	brne	.+10     	; 0x1f5c <vTaskSwitchContext+0xa2>
    1f52:	44 81       	ldd	r20, Z+4	; 0x04
    1f54:	55 81       	ldd	r21, Z+5	; 0x05
    1f56:	fd 01       	movw	r30, r26
    1f58:	52 83       	std	Z+2, r21	; 0x02
    1f5a:	41 83       	std	Z+1, r20	; 0x01
    1f5c:	9b e0       	ldi	r25, 0x0B	; 11
    1f5e:	92 9f       	mul	r25, r18
    1f60:	f0 01       	movw	r30, r0
    1f62:	93 9f       	mul	r25, r19
    1f64:	f0 0d       	add	r31, r0
    1f66:	11 24       	eor	r1, r1
    1f68:	e3 56       	subi	r30, 0x63	; 99
    1f6a:	fe 4e       	sbci	r31, 0xEE	; 238
    1f6c:	01 80       	ldd	r0, Z+1	; 0x01
    1f6e:	f2 81       	ldd	r31, Z+2	; 0x02
    1f70:	e0 2d       	mov	r30, r0
    1f72:	20 85       	ldd	r18, Z+8	; 0x08
    1f74:	31 85       	ldd	r19, Z+9	; 0x09
    1f76:	30 93 0c 12 	sts	0x120C, r19	; 0x80120c <pxCurrentTCB+0x1>
    1f7a:	20 93 0b 12 	sts	0x120B, r18	; 0x80120b <pxCurrentTCB>
    1f7e:	80 93 5b 11 	sts	0x115B, r24	; 0x80115b <uxTopReadyPriority>
    1f82:	08 95       	ret

00001f84 <vTaskPlaceOnEventList>:
    1f84:	cf 92       	push	r12
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	6a 01       	movw	r12, r20
    1f8e:	7b 01       	movw	r14, r22
    1f90:	60 91 0b 12 	lds	r22, 0x120B	; 0x80120b <pxCurrentTCB>
    1f94:	70 91 0c 12 	lds	r23, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1f98:	62 5f       	subi	r22, 0xF2	; 242
    1f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9c:	0e 94 c7 02 	call	0x58e	; 0x58e <vListInsert>
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	c7 01       	movw	r24, r14
    1fa4:	b6 01       	movw	r22, r12
    1fa6:	c7 db       	rcall	.-2162   	; 0x1736 <prvAddCurrentTaskToDelayedList>
    1fa8:	ff 90       	pop	r15
    1faa:	ef 90       	pop	r14
    1fac:	df 90       	pop	r13
    1fae:	cf 90       	pop	r12
    1fb0:	08 95       	ret

00001fb2 <vTaskPlaceOnEventListRestricted>:
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	ba 01       	movw	r22, r20
    1fbc:	a1 81       	ldd	r26, Z+1	; 0x01
    1fbe:	b2 81       	ldd	r27, Z+2	; 0x02
    1fc0:	c0 91 0b 12 	lds	r28, 0x120B	; 0x80120b <pxCurrentTCB>
    1fc4:	d0 91 0c 12 	lds	r29, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1fc8:	bb 8b       	std	Y+19, r27	; 0x13
    1fca:	aa 8b       	std	Y+18, r26	; 0x12
    1fcc:	c0 91 0b 12 	lds	r28, 0x120B	; 0x80120b <pxCurrentTCB>
    1fd0:	d0 91 0c 12 	lds	r29, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1fd4:	16 96       	adiw	r26, 0x06	; 6
    1fd6:	4d 91       	ld	r20, X+
    1fd8:	5c 91       	ld	r21, X
    1fda:	17 97       	sbiw	r26, 0x07	; 7
    1fdc:	5d 8b       	std	Y+21, r21	; 0x15
    1fde:	4c 8b       	std	Y+20, r20	; 0x14
    1fe0:	16 96       	adiw	r26, 0x06	; 6
    1fe2:	cd 91       	ld	r28, X+
    1fe4:	dc 91       	ld	r29, X
    1fe6:	17 97       	sbiw	r26, 0x07	; 7
    1fe8:	40 91 0b 12 	lds	r20, 0x120B	; 0x80120b <pxCurrentTCB>
    1fec:	50 91 0c 12 	lds	r21, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    1ff0:	42 5f       	subi	r20, 0xF2	; 242
    1ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff4:	5d 83       	std	Y+5, r21	; 0x05
    1ff6:	4c 83       	std	Y+4, r20	; 0x04
    1ff8:	40 91 0b 12 	lds	r20, 0x120B	; 0x80120b <pxCurrentTCB>
    1ffc:	50 91 0c 12 	lds	r21, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2000:	42 5f       	subi	r20, 0xF2	; 242
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	17 96       	adiw	r26, 0x07	; 7
    2006:	5c 93       	st	X, r21
    2008:	4e 93       	st	-X, r20
    200a:	16 97       	sbiw	r26, 0x06	; 6
    200c:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <pxCurrentTCB>
    2010:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2014:	59 96       	adiw	r26, 0x19	; 25
    2016:	fc 93       	st	X, r31
    2018:	ee 93       	st	-X, r30
    201a:	58 97       	sbiw	r26, 0x18	; 24
    201c:	30 81       	ld	r19, Z
    201e:	3f 5f       	subi	r19, 0xFF	; 255
    2020:	30 83       	st	Z, r19
    2022:	22 23       	and	r18, r18
    2024:	19 f0       	breq	.+6      	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    2026:	6f ef       	ldi	r22, 0xFF	; 255
    2028:	7f ef       	ldi	r23, 0xFF	; 255
    202a:	cb 01       	movw	r24, r22
    202c:	42 2f       	mov	r20, r18
    202e:	83 db       	rcall	.-2298   	; 0x1736 <prvAddCurrentTaskToDelayedList>
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <xTaskRemoveFromEventList>:
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	dc 01       	movw	r26, r24
    203c:	17 96       	adiw	r26, 0x07	; 7
    203e:	ed 91       	ld	r30, X+
    2040:	fc 91       	ld	r31, X
    2042:	18 97       	sbiw	r26, 0x08	; 8
    2044:	00 84       	ldd	r0, Z+8	; 0x08
    2046:	f1 85       	ldd	r31, Z+9	; 0x09
    2048:	e0 2d       	mov	r30, r0
    204a:	a0 8d       	ldd	r26, Z+24	; 0x18
    204c:	b1 8d       	ldd	r27, Z+25	; 0x19
    204e:	c2 89       	ldd	r28, Z+18	; 0x12
    2050:	d3 89       	ldd	r29, Z+19	; 0x13
    2052:	84 89       	ldd	r24, Z+20	; 0x14
    2054:	95 89       	ldd	r25, Z+21	; 0x15
    2056:	9f 83       	std	Y+7, r25	; 0x07
    2058:	8e 83       	std	Y+6, r24	; 0x06
    205a:	c4 89       	ldd	r28, Z+20	; 0x14
    205c:	d5 89       	ldd	r29, Z+21	; 0x15
    205e:	82 89       	ldd	r24, Z+18	; 0x12
    2060:	93 89       	ldd	r25, Z+19	; 0x13
    2062:	9d 83       	std	Y+5, r25	; 0x05
    2064:	8c 83       	std	Y+4, r24	; 0x04
    2066:	11 96       	adiw	r26, 0x01	; 1
    2068:	8d 91       	ld	r24, X+
    206a:	9c 91       	ld	r25, X
    206c:	12 97       	sbiw	r26, 0x02	; 2
    206e:	9f 01       	movw	r18, r30
    2070:	22 5f       	subi	r18, 0xF2	; 242
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	82 17       	cp	r24, r18
    2076:	93 07       	cpc	r25, r19
    2078:	31 f4       	brne	.+12     	; 0x2086 <xTaskRemoveFromEventList+0x50>
    207a:	84 89       	ldd	r24, Z+20	; 0x14
    207c:	95 89       	ldd	r25, Z+21	; 0x15
    207e:	12 96       	adiw	r26, 0x02	; 2
    2080:	9c 93       	st	X, r25
    2082:	8e 93       	st	-X, r24
    2084:	11 97       	sbiw	r26, 0x01	; 1
    2086:	11 8e       	std	Z+25, r1	; 0x19
    2088:	10 8e       	std	Z+24, r1	; 0x18
    208a:	8c 91       	ld	r24, X
    208c:	81 50       	subi	r24, 0x01	; 1
    208e:	8c 93       	st	X, r24
    2090:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    2094:	81 11       	cpse	r24, r1
    2096:	52 c0       	rjmp	.+164    	; 0x213c <xTaskRemoveFromEventList+0x106>
    2098:	a4 85       	ldd	r26, Z+12	; 0x0c
    209a:	b5 85       	ldd	r27, Z+13	; 0x0d
    209c:	c6 81       	ldd	r28, Z+6	; 0x06
    209e:	d7 81       	ldd	r29, Z+7	; 0x07
    20a0:	80 85       	ldd	r24, Z+8	; 0x08
    20a2:	91 85       	ldd	r25, Z+9	; 0x09
    20a4:	9f 83       	std	Y+7, r25	; 0x07
    20a6:	8e 83       	std	Y+6, r24	; 0x06
    20a8:	c0 85       	ldd	r28, Z+8	; 0x08
    20aa:	d1 85       	ldd	r29, Z+9	; 0x09
    20ac:	86 81       	ldd	r24, Z+6	; 0x06
    20ae:	97 81       	ldd	r25, Z+7	; 0x07
    20b0:	9d 83       	std	Y+5, r25	; 0x05
    20b2:	8c 83       	std	Y+4, r24	; 0x04
    20b4:	11 96       	adiw	r26, 0x01	; 1
    20b6:	8d 91       	ld	r24, X+
    20b8:	9c 91       	ld	r25, X
    20ba:	12 97       	sbiw	r26, 0x02	; 2
    20bc:	9f 01       	movw	r18, r30
    20be:	2e 5f       	subi	r18, 0xFE	; 254
    20c0:	3f 4f       	sbci	r19, 0xFF	; 255
    20c2:	82 17       	cp	r24, r18
    20c4:	93 07       	cpc	r25, r19
    20c6:	31 f4       	brne	.+12     	; 0x20d4 <xTaskRemoveFromEventList+0x9e>
    20c8:	80 85       	ldd	r24, Z+8	; 0x08
    20ca:	91 85       	ldd	r25, Z+9	; 0x09
    20cc:	12 96       	adiw	r26, 0x02	; 2
    20ce:	9c 93       	st	X, r25
    20d0:	8e 93       	st	-X, r24
    20d2:	11 97       	sbiw	r26, 0x01	; 1
    20d4:	15 86       	std	Z+13, r1	; 0x0d
    20d6:	14 86       	std	Z+12, r1	; 0x0c
    20d8:	8c 91       	ld	r24, X
    20da:	81 50       	subi	r24, 0x01	; 1
    20dc:	8c 93       	st	X, r24
    20de:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20e0:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    20e4:	8a 17       	cp	r24, r26
    20e6:	10 f4       	brcc	.+4      	; 0x20ec <xTaskRemoveFromEventList+0xb6>
    20e8:	a0 93 5b 11 	sts	0x115B, r26	; 0x80115b <uxTopReadyPriority>
    20ec:	8b e0       	ldi	r24, 0x0B	; 11
    20ee:	8a 9f       	mul	r24, r26
    20f0:	d0 01       	movw	r26, r0
    20f2:	11 24       	eor	r1, r1
    20f4:	a3 56       	subi	r26, 0x63	; 99
    20f6:	be 4e       	sbci	r27, 0xEE	; 238
    20f8:	11 96       	adiw	r26, 0x01	; 1
    20fa:	0d 90       	ld	r0, X+
    20fc:	bc 91       	ld	r27, X
    20fe:	a0 2d       	mov	r26, r0
    2100:	b7 83       	std	Z+7, r27	; 0x07
    2102:	a6 83       	std	Z+6, r26	; 0x06
    2104:	16 96       	adiw	r26, 0x06	; 6
    2106:	4d 91       	ld	r20, X+
    2108:	5c 91       	ld	r21, X
    210a:	17 97       	sbiw	r26, 0x07	; 7
    210c:	51 87       	std	Z+9, r21	; 0x09
    210e:	40 87       	std	Z+8, r20	; 0x08
    2110:	16 96       	adiw	r26, 0x06	; 6
    2112:	cd 91       	ld	r28, X+
    2114:	dc 91       	ld	r29, X
    2116:	17 97       	sbiw	r26, 0x07	; 7
    2118:	3d 83       	std	Y+5, r19	; 0x05
    211a:	2c 83       	std	Y+4, r18	; 0x04
    211c:	17 96       	adiw	r26, 0x07	; 7
    211e:	3c 93       	st	X, r19
    2120:	2e 93       	st	-X, r18
    2122:	16 97       	sbiw	r26, 0x06	; 6
    2124:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2126:	8a 9f       	mul	r24, r26
    2128:	d0 01       	movw	r26, r0
    212a:	11 24       	eor	r1, r1
    212c:	a3 56       	subi	r26, 0x63	; 99
    212e:	be 4e       	sbci	r27, 0xEE	; 238
    2130:	b5 87       	std	Z+13, r27	; 0x0d
    2132:	a4 87       	std	Z+12, r26	; 0x0c
    2134:	8c 91       	ld	r24, X
    2136:	8f 5f       	subi	r24, 0xFF	; 255
    2138:	8c 93       	st	X, r24
    213a:	1c c0       	rjmp	.+56     	; 0x2174 <xTaskRemoveFromEventList+0x13e>
    213c:	48 e7       	ldi	r20, 0x78	; 120
    213e:	51 e1       	ldi	r21, 0x11	; 17
    2140:	da 01       	movw	r26, r20
    2142:	11 96       	adiw	r26, 0x01	; 1
    2144:	cd 91       	ld	r28, X+
    2146:	dc 91       	ld	r29, X
    2148:	12 97       	sbiw	r26, 0x02	; 2
    214a:	d3 8b       	std	Z+19, r29	; 0x13
    214c:	c2 8b       	std	Z+18, r28	; 0x12
    214e:	8e 81       	ldd	r24, Y+6	; 0x06
    2150:	9f 81       	ldd	r25, Y+7	; 0x07
    2152:	95 8b       	std	Z+21, r25	; 0x15
    2154:	84 8b       	std	Z+20, r24	; 0x14
    2156:	8e 81       	ldd	r24, Y+6	; 0x06
    2158:	9f 81       	ldd	r25, Y+7	; 0x07
    215a:	dc 01       	movw	r26, r24
    215c:	15 96       	adiw	r26, 0x05	; 5
    215e:	3c 93       	st	X, r19
    2160:	2e 93       	st	-X, r18
    2162:	14 97       	sbiw	r26, 0x04	; 4
    2164:	3f 83       	std	Y+7, r19	; 0x07
    2166:	2e 83       	std	Y+6, r18	; 0x06
    2168:	51 8f       	std	Z+25, r21	; 0x19
    216a:	40 8f       	std	Z+24, r20	; 0x18
    216c:	da 01       	movw	r26, r20
    216e:	8c 91       	ld	r24, X
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	8c 93       	st	X, r24
    2174:	92 8d       	ldd	r25, Z+26	; 0x1a
    2176:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    217a:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    217e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2180:	89 17       	cp	r24, r25
    2182:	20 f4       	brcc	.+8      	; 0x218c <xTaskRemoveFromEventList+0x156>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <xYieldPending>
    218a:	01 c0       	rjmp	.+2      	; 0x218e <xTaskRemoveFromEventList+0x158>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <vTaskSetTimeOutState>:
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	0f 92       	push	r0
    219a:	20 91 54 11 	lds	r18, 0x1154	; 0x801154 <xNumOfOverflows>
    219e:	fc 01       	movw	r30, r24
    21a0:	20 83       	st	Z, r18
    21a2:	40 91 5c 11 	lds	r20, 0x115C	; 0x80115c <xTickCount>
    21a6:	50 91 5d 11 	lds	r21, 0x115D	; 0x80115d <xTickCount+0x1>
    21aa:	60 91 5e 11 	lds	r22, 0x115E	; 0x80115e <xTickCount+0x2>
    21ae:	70 91 5f 11 	lds	r23, 0x115F	; 0x80115f <xTickCount+0x3>
    21b2:	41 83       	std	Z+1, r20	; 0x01
    21b4:	52 83       	std	Z+2, r21	; 0x02
    21b6:	63 83       	std	Z+3, r22	; 0x03
    21b8:	74 83       	std	Z+4, r23	; 0x04
    21ba:	0f 90       	pop	r0
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	08 95       	ret

000021c0 <vTaskInternalSetTimeOutState>:
    21c0:	20 91 54 11 	lds	r18, 0x1154	; 0x801154 <xNumOfOverflows>
    21c4:	fc 01       	movw	r30, r24
    21c6:	20 83       	st	Z, r18
    21c8:	40 91 5c 11 	lds	r20, 0x115C	; 0x80115c <xTickCount>
    21cc:	50 91 5d 11 	lds	r21, 0x115D	; 0x80115d <xTickCount+0x1>
    21d0:	60 91 5e 11 	lds	r22, 0x115E	; 0x80115e <xTickCount+0x2>
    21d4:	70 91 5f 11 	lds	r23, 0x115F	; 0x80115f <xTickCount+0x3>
    21d8:	41 83       	std	Z+1, r20	; 0x01
    21da:	52 83       	std	Z+2, r21	; 0x02
    21dc:	63 83       	std	Z+3, r22	; 0x03
    21de:	74 83       	std	Z+4, r23	; 0x04
    21e0:	08 95       	ret

000021e2 <xTaskCheckForTimeOut>:
    21e2:	8f 92       	push	r8
    21e4:	9f 92       	push	r9
    21e6:	af 92       	push	r10
    21e8:	bf 92       	push	r11
    21ea:	cf 92       	push	r12
    21ec:	df 92       	push	r13
    21ee:	ef 92       	push	r14
    21f0:	ff 92       	push	r15
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	fb 01       	movw	r30, r22
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	0f 92       	push	r0
    2202:	c0 90 5c 11 	lds	r12, 0x115C	; 0x80115c <xTickCount>
    2206:	d0 90 5d 11 	lds	r13, 0x115D	; 0x80115d <xTickCount+0x1>
    220a:	e0 90 5e 11 	lds	r14, 0x115E	; 0x80115e <xTickCount+0x2>
    220e:	f0 90 5f 11 	lds	r15, 0x115F	; 0x80115f <xTickCount+0x3>
    2212:	dc 01       	movw	r26, r24
    2214:	11 96       	adiw	r26, 0x01	; 1
    2216:	0d 91       	ld	r16, X+
    2218:	1d 91       	ld	r17, X+
    221a:	2d 91       	ld	r18, X+
    221c:	3c 91       	ld	r19, X
    221e:	14 97       	sbiw	r26, 0x04	; 4
    2220:	46 01       	movw	r8, r12
    2222:	57 01       	movw	r10, r14
    2224:	80 1a       	sub	r8, r16
    2226:	91 0a       	sbc	r9, r17
    2228:	a2 0a       	sbc	r10, r18
    222a:	b3 0a       	sbc	r11, r19
    222c:	40 81       	ld	r20, Z
    222e:	51 81       	ldd	r21, Z+1	; 0x01
    2230:	62 81       	ldd	r22, Z+2	; 0x02
    2232:	73 81       	ldd	r23, Z+3	; 0x03
    2234:	4f 3f       	cpi	r20, 0xFF	; 255
    2236:	bf ef       	ldi	r27, 0xFF	; 255
    2238:	5b 07       	cpc	r21, r27
    223a:	6b 07       	cpc	r22, r27
    223c:	7b 07       	cpc	r23, r27
    223e:	39 f1       	breq	.+78     	; 0x228e <__stack+0x8f>
    2240:	ec 01       	movw	r28, r24
    2242:	b8 81       	ld	r27, Y
    2244:	a0 91 54 11 	lds	r26, 0x1154	; 0x801154 <xNumOfOverflows>
    2248:	ba 17       	cp	r27, r26
    224a:	59 f0       	breq	.+22     	; 0x2262 <__stack+0x63>
    224c:	c0 16       	cp	r12, r16
    224e:	d1 06       	cpc	r13, r17
    2250:	e2 06       	cpc	r14, r18
    2252:	f3 06       	cpc	r15, r19
    2254:	30 f0       	brcs	.+12     	; 0x2262 <__stack+0x63>
    2256:	10 82       	st	Z, r1
    2258:	11 82       	std	Z+1, r1	; 0x01
    225a:	12 82       	std	Z+2, r1	; 0x02
    225c:	13 82       	std	Z+3, r1	; 0x03
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	17 c0       	rjmp	.+46     	; 0x2290 <__stack+0x91>
    2262:	84 16       	cp	r8, r20
    2264:	95 06       	cpc	r9, r21
    2266:	a6 06       	cpc	r10, r22
    2268:	b7 06       	cpc	r11, r23
    226a:	58 f4       	brcc	.+22     	; 0x2282 <__stack+0x83>
    226c:	48 19       	sub	r20, r8
    226e:	59 09       	sbc	r21, r9
    2270:	6a 09       	sbc	r22, r10
    2272:	7b 09       	sbc	r23, r11
    2274:	40 83       	st	Z, r20
    2276:	51 83       	std	Z+1, r21	; 0x01
    2278:	62 83       	std	Z+2, r22	; 0x02
    227a:	73 83       	std	Z+3, r23	; 0x03
    227c:	a1 df       	rcall	.-190    	; 0x21c0 <vTaskInternalSetTimeOutState>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	07 c0       	rjmp	.+14     	; 0x2290 <__stack+0x91>
    2282:	10 82       	st	Z, r1
    2284:	11 82       	std	Z+1, r1	; 0x01
    2286:	12 82       	std	Z+2, r1	; 0x02
    2288:	13 82       	std	Z+3, r1	; 0x03
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	01 c0       	rjmp	.+2      	; 0x2290 <__stack+0x91>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	0f 90       	pop	r0
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	ff 90       	pop	r15
    229e:	ef 90       	pop	r14
    22a0:	df 90       	pop	r13
    22a2:	cf 90       	pop	r12
    22a4:	bf 90       	pop	r11
    22a6:	af 90       	pop	r10
    22a8:	9f 90       	pop	r9
    22aa:	8f 90       	pop	r8
    22ac:	08 95       	ret

000022ae <vTaskMissedYield>:
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <xYieldPending>
    22b4:	08 95       	ret

000022b6 <xTaskGetCurrentTaskHandle>:
    22b6:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    22ba:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    22be:	08 95       	ret

000022c0 <xTaskGetSchedulerState>:
    22c0:	80 91 5a 11 	lds	r24, 0x115A	; 0x80115a <xSchedulerRunning>
    22c4:	88 23       	and	r24, r24
    22c6:	31 f0       	breq	.+12     	; 0x22d4 <xTaskGetSchedulerState+0x14>
    22c8:	80 91 4c 11 	lds	r24, 0x114C	; 0x80114c <uxSchedulerSuspended>
    22cc:	81 11       	cpse	r24, r1
    22ce:	04 c0       	rjmp	.+8      	; 0x22d8 <xTaskGetSchedulerState+0x18>
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	08 95       	ret
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	08 95       	ret
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	08 95       	ret

000022dc <xTaskPriorityDisinherit>:
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	fc 01       	movw	r30, r24
    22e6:	89 2b       	or	r24, r25
    22e8:	09 f4       	brne	.+2      	; 0x22ec <xTaskPriorityDisinherit+0x10>
    22ea:	49 c0       	rjmp	.+146    	; 0x237e <xTaskPriorityDisinherit+0xa2>
    22ec:	86 a5       	ldd	r24, Z+46	; 0x2e
    22ee:	81 50       	subi	r24, 0x01	; 1
    22f0:	86 a7       	std	Z+46, r24	; 0x2e
    22f2:	22 8d       	ldd	r18, Z+26	; 0x1a
    22f4:	95 a5       	ldd	r25, Z+45	; 0x2d
    22f6:	29 17       	cp	r18, r25
    22f8:	09 f4       	brne	.+2      	; 0x22fc <xTaskPriorityDisinherit+0x20>
    22fa:	43 c0       	rjmp	.+134    	; 0x2382 <xTaskPriorityDisinherit+0xa6>
    22fc:	81 11       	cpse	r24, r1
    22fe:	43 c0       	rjmp	.+134    	; 0x2386 <xTaskPriorityDisinherit+0xaa>
    2300:	ef 01       	movw	r28, r30
    2302:	8f 01       	movw	r16, r30
    2304:	0e 5f       	subi	r16, 0xFE	; 254
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	c8 01       	movw	r24, r16
    230a:	0e 94 04 03 	call	0x608	; 0x608 <uxListRemove>
    230e:	ed a5       	ldd	r30, Y+45	; 0x2d
    2310:	ea 8f       	std	Y+26, r30	; 0x1a
    2312:	8a e0       	ldi	r24, 0x0A	; 10
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a0 e0       	ldi	r26, 0x00	; 0
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	8e 1b       	sub	r24, r30
    231c:	91 09       	sbc	r25, r1
    231e:	a1 09       	sbc	r26, r1
    2320:	b1 09       	sbc	r27, r1
    2322:	8e 87       	std	Y+14, r24	; 0x0e
    2324:	9f 87       	std	Y+15, r25	; 0x0f
    2326:	a8 8b       	std	Y+16, r26	; 0x10
    2328:	b9 8b       	std	Y+17, r27	; 0x11
    232a:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    232e:	8e 17       	cp	r24, r30
    2330:	10 f4       	brcc	.+4      	; 0x2336 <xTaskPriorityDisinherit+0x5a>
    2332:	e0 93 5b 11 	sts	0x115B, r30	; 0x80115b <uxTopReadyPriority>
    2336:	8b e0       	ldi	r24, 0x0B	; 11
    2338:	8e 9f       	mul	r24, r30
    233a:	f0 01       	movw	r30, r0
    233c:	11 24       	eor	r1, r1
    233e:	e3 56       	subi	r30, 0x63	; 99
    2340:	fe 4e       	sbci	r31, 0xEE	; 238
    2342:	01 80       	ldd	r0, Z+1	; 0x01
    2344:	f2 81       	ldd	r31, Z+2	; 0x02
    2346:	e0 2d       	mov	r30, r0
    2348:	ff 83       	std	Y+7, r31	; 0x07
    234a:	ee 83       	std	Y+6, r30	; 0x06
    234c:	26 81       	ldd	r18, Z+6	; 0x06
    234e:	37 81       	ldd	r19, Z+7	; 0x07
    2350:	39 87       	std	Y+9, r19	; 0x09
    2352:	28 87       	std	Y+8, r18	; 0x08
    2354:	a6 81       	ldd	r26, Z+6	; 0x06
    2356:	b7 81       	ldd	r27, Z+7	; 0x07
    2358:	15 96       	adiw	r26, 0x05	; 5
    235a:	1c 93       	st	X, r17
    235c:	0e 93       	st	-X, r16
    235e:	14 97       	sbiw	r26, 0x04	; 4
    2360:	17 83       	std	Z+7, r17	; 0x07
    2362:	06 83       	std	Z+6, r16	; 0x06
    2364:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2366:	8e 9f       	mul	r24, r30
    2368:	f0 01       	movw	r30, r0
    236a:	11 24       	eor	r1, r1
    236c:	e3 56       	subi	r30, 0x63	; 99
    236e:	fe 4e       	sbci	r31, 0xEE	; 238
    2370:	fd 87       	std	Y+13, r31	; 0x0d
    2372:	ec 87       	std	Y+12, r30	; 0x0c
    2374:	80 81       	ld	r24, Z
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	80 83       	st	Z, r24
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	05 c0       	rjmp	.+10     	; 0x2388 <xTaskPriorityDisinherit+0xac>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <xTaskPriorityDisinherit+0xac>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <xTaskPriorityDisinherit+0xac>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	08 95       	ret

00002392 <xTaskGenericNotifyWait>:
    2392:	4f 92       	push	r4
    2394:	5f 92       	push	r5
    2396:	6f 92       	push	r6
    2398:	7f 92       	push	r7
    239a:	af 92       	push	r10
    239c:	bf 92       	push	r11
    239e:	cf 92       	push	r12
    23a0:	df 92       	push	r13
    23a2:	ef 92       	push	r14
    23a4:	ff 92       	push	r15
    23a6:	0f 93       	push	r16
    23a8:	1f 93       	push	r17
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	28 01       	movw	r4, r16
    23b0:	39 01       	movw	r6, r18
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	0f 92       	push	r0
    23b8:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    23bc:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    23c0:	c8 2f       	mov	r28, r24
    23c2:	d0 e0       	ldi	r29, 0x00	; 0
    23c4:	ec 0f       	add	r30, r28
    23c6:	fd 1f       	adc	r31, r29
    23c8:	83 a9       	ldd	r24, Z+51	; 0x33
    23ca:	82 30       	cpi	r24, 0x02	; 2
    23cc:	71 f1       	breq	.+92     	; 0x242a <xTaskGenericNotifyWait+0x98>
    23ce:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    23d2:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    23d6:	ce 01       	movw	r24, r28
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	e8 0f       	add	r30, r24
    23e2:	f9 1f       	adc	r31, r25
    23e4:	87 a5       	ldd	r24, Z+47	; 0x2f
    23e6:	90 a9       	ldd	r25, Z+48	; 0x30
    23e8:	a1 a9       	ldd	r26, Z+49	; 0x31
    23ea:	b2 a9       	ldd	r27, Z+50	; 0x32
    23ec:	40 95       	com	r20
    23ee:	50 95       	com	r21
    23f0:	60 95       	com	r22
    23f2:	70 95       	com	r23
    23f4:	48 23       	and	r20, r24
    23f6:	59 23       	and	r21, r25
    23f8:	6a 23       	and	r22, r26
    23fa:	7b 23       	and	r23, r27
    23fc:	47 a7       	std	Z+47, r20	; 0x2f
    23fe:	50 ab       	std	Z+48, r21	; 0x30
    2400:	61 ab       	std	Z+49, r22	; 0x31
    2402:	72 ab       	std	Z+50, r23	; 0x32
    2404:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    2408:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    240c:	ec 0f       	add	r30, r28
    240e:	fd 1f       	adc	r31, r29
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	83 ab       	std	Z+51, r24	; 0x33
    2414:	a1 14       	cp	r10, r1
    2416:	b1 04       	cpc	r11, r1
    2418:	c1 04       	cpc	r12, r1
    241a:	d1 04       	cpc	r13, r1
    241c:	31 f0       	breq	.+12     	; 0x242a <xTaskGenericNotifyWait+0x98>
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	c6 01       	movw	r24, r12
    2422:	b5 01       	movw	r22, r10
    2424:	88 d9       	rcall	.-3312   	; 0x1736 <prvAddCurrentTaskToDelayedList>
    2426:	0e 94 80 03 	call	0x700	; 0x700 <vPortYield>
    242a:	0f 90       	pop	r0
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	0f 92       	push	r0
    2434:	e1 14       	cp	r14, r1
    2436:	f1 04       	cpc	r15, r1
    2438:	a1 f0       	breq	.+40     	; 0x2462 <xTaskGenericNotifyWait+0xd0>
    243a:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    243e:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    2442:	ce 01       	movw	r24, r28
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	e8 0f       	add	r30, r24
    244e:	f9 1f       	adc	r31, r25
    2450:	87 a5       	ldd	r24, Z+47	; 0x2f
    2452:	90 a9       	ldd	r25, Z+48	; 0x30
    2454:	a1 a9       	ldd	r26, Z+49	; 0x31
    2456:	b2 a9       	ldd	r27, Z+50	; 0x32
    2458:	f7 01       	movw	r30, r14
    245a:	80 83       	st	Z, r24
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	a2 83       	std	Z+2, r26	; 0x02
    2460:	b3 83       	std	Z+3, r27	; 0x03
    2462:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    2466:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    246a:	ec 0f       	add	r30, r28
    246c:	fd 1f       	adc	r31, r29
    246e:	83 a9       	ldd	r24, Z+51	; 0x33
    2470:	82 30       	cpi	r24, 0x02	; 2
    2472:	e9 f4       	brne	.+58     	; 0x24ae <xTaskGenericNotifyWait+0x11c>
    2474:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    2478:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    247c:	ce 01       	movw	r24, r28
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	e8 0f       	add	r30, r24
    2488:	f9 1f       	adc	r31, r25
    248a:	87 a5       	ldd	r24, Z+47	; 0x2f
    248c:	90 a9       	ldd	r25, Z+48	; 0x30
    248e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2490:	b2 a9       	ldd	r27, Z+50	; 0x32
    2492:	40 94       	com	r4
    2494:	50 94       	com	r5
    2496:	60 94       	com	r6
    2498:	70 94       	com	r7
    249a:	48 22       	and	r4, r24
    249c:	59 22       	and	r5, r25
    249e:	6a 22       	and	r6, r26
    24a0:	7b 22       	and	r7, r27
    24a2:	47 a6       	std	Z+47, r4	; 0x2f
    24a4:	50 aa       	std	Z+48, r5	; 0x30
    24a6:	61 aa       	std	Z+49, r6	; 0x31
    24a8:	72 aa       	std	Z+50, r7	; 0x32
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	01 c0       	rjmp	.+2      	; 0x24b0 <xTaskGenericNotifyWait+0x11e>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	20 91 0b 12 	lds	r18, 0x120B	; 0x80120b <pxCurrentTCB>
    24b4:	30 91 0c 12 	lds	r19, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    24b8:	c2 0f       	add	r28, r18
    24ba:	d3 1f       	adc	r29, r19
    24bc:	1b aa       	std	Y+51, r1	; 0x33
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	0f 91       	pop	r16
    24ca:	ff 90       	pop	r15
    24cc:	ef 90       	pop	r14
    24ce:	df 90       	pop	r13
    24d0:	cf 90       	pop	r12
    24d2:	bf 90       	pop	r11
    24d4:	af 90       	pop	r10
    24d6:	7f 90       	pop	r7
    24d8:	6f 90       	pop	r6
    24da:	5f 90       	pop	r5
    24dc:	4f 90       	pop	r4
    24de:	08 95       	ret

000024e0 <xTaskGenericNotify>:
    24e0:	8f 92       	push	r8
    24e2:	9f 92       	push	r9
    24e4:	af 92       	push	r10
    24e6:	bf 92       	push	r11
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	0f 93       	push	r16
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	dc 01       	movw	r26, r24
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	0f 92       	push	r0
    24fa:	e1 14       	cp	r14, r1
    24fc:	f1 04       	cpc	r15, r1
    24fe:	89 f0       	breq	.+34     	; 0x2522 <xTaskGenericNotify+0x42>
    2500:	e6 2f       	mov	r30, r22
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	ee 0f       	add	r30, r30
    2506:	ff 1f       	adc	r31, r31
    2508:	ee 0f       	add	r30, r30
    250a:	ff 1f       	adc	r31, r31
    250c:	e8 0f       	add	r30, r24
    250e:	f9 1f       	adc	r31, r25
    2510:	87 a4       	ldd	r8, Z+47	; 0x2f
    2512:	90 a8       	ldd	r9, Z+48	; 0x30
    2514:	a1 a8       	ldd	r10, Z+49	; 0x31
    2516:	b2 a8       	ldd	r11, Z+50	; 0x32
    2518:	f7 01       	movw	r30, r14
    251a:	80 82       	st	Z, r8
    251c:	91 82       	std	Z+1, r9	; 0x01
    251e:	a2 82       	std	Z+2, r10	; 0x02
    2520:	b3 82       	std	Z+3, r11	; 0x03
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	fd 01       	movw	r30, r26
    2526:	e6 0f       	add	r30, r22
    2528:	f7 1f       	adc	r31, r23
    252a:	83 a9       	ldd	r24, Z+51	; 0x33
    252c:	92 e0       	ldi	r25, 0x02	; 2
    252e:	93 ab       	std	Z+51, r25	; 0x33
    2530:	02 30       	cpi	r16, 0x02	; 2
    2532:	01 f1       	breq	.+64     	; 0x2574 <xTaskGenericNotify+0x94>
    2534:	18 f4       	brcc	.+6      	; 0x253c <xTaskGenericNotify+0x5c>
    2536:	01 30       	cpi	r16, 0x01	; 1
    2538:	31 f0       	breq	.+12     	; 0x2546 <xTaskGenericNotify+0x66>
    253a:	4d c0       	rjmp	.+154    	; 0x25d6 <xTaskGenericNotify+0xf6>
    253c:	03 30       	cpi	r16, 0x03	; 3
    253e:	79 f1       	breq	.+94     	; 0x259e <xTaskGenericNotify+0xbe>
    2540:	04 30       	cpi	r16, 0x04	; 4
    2542:	d1 f1       	breq	.+116    	; 0x25b8 <xTaskGenericNotify+0xd8>
    2544:	48 c0       	rjmp	.+144    	; 0x25d6 <xTaskGenericNotify+0xf6>
    2546:	66 0f       	add	r22, r22
    2548:	77 1f       	adc	r23, r23
    254a:	66 0f       	add	r22, r22
    254c:	77 1f       	adc	r23, r23
    254e:	fd 01       	movw	r30, r26
    2550:	e6 0f       	add	r30, r22
    2552:	f7 1f       	adc	r31, r23
    2554:	87 a4       	ldd	r8, Z+47	; 0x2f
    2556:	90 a8       	ldd	r9, Z+48	; 0x30
    2558:	a1 a8       	ldd	r10, Z+49	; 0x31
    255a:	b2 a8       	ldd	r11, Z+50	; 0x32
    255c:	ba 01       	movw	r22, r20
    255e:	a9 01       	movw	r20, r18
    2560:	48 29       	or	r20, r8
    2562:	59 29       	or	r21, r9
    2564:	6a 29       	or	r22, r10
    2566:	7b 29       	or	r23, r11
    2568:	47 a7       	std	Z+47, r20	; 0x2f
    256a:	50 ab       	std	Z+48, r21	; 0x30
    256c:	61 ab       	std	Z+49, r22	; 0x31
    256e:	72 ab       	std	Z+50, r23	; 0x32
    2570:	01 e0       	ldi	r16, 0x01	; 1
    2572:	34 c0       	rjmp	.+104    	; 0x25dc <xTaskGenericNotify+0xfc>
    2574:	66 0f       	add	r22, r22
    2576:	77 1f       	adc	r23, r23
    2578:	66 0f       	add	r22, r22
    257a:	77 1f       	adc	r23, r23
    257c:	fd 01       	movw	r30, r26
    257e:	e6 0f       	add	r30, r22
    2580:	f7 1f       	adc	r31, r23
    2582:	47 a5       	ldd	r20, Z+47	; 0x2f
    2584:	50 a9       	ldd	r21, Z+48	; 0x30
    2586:	61 a9       	ldd	r22, Z+49	; 0x31
    2588:	72 a9       	ldd	r23, Z+50	; 0x32
    258a:	4f 5f       	subi	r20, 0xFF	; 255
    258c:	5f 4f       	sbci	r21, 0xFF	; 255
    258e:	6f 4f       	sbci	r22, 0xFF	; 255
    2590:	7f 4f       	sbci	r23, 0xFF	; 255
    2592:	47 a7       	std	Z+47, r20	; 0x2f
    2594:	50 ab       	std	Z+48, r21	; 0x30
    2596:	61 ab       	std	Z+49, r22	; 0x31
    2598:	72 ab       	std	Z+50, r23	; 0x32
    259a:	01 e0       	ldi	r16, 0x01	; 1
    259c:	1f c0       	rjmp	.+62     	; 0x25dc <xTaskGenericNotify+0xfc>
    259e:	66 0f       	add	r22, r22
    25a0:	77 1f       	adc	r23, r23
    25a2:	66 0f       	add	r22, r22
    25a4:	77 1f       	adc	r23, r23
    25a6:	fd 01       	movw	r30, r26
    25a8:	e6 0f       	add	r30, r22
    25aa:	f7 1f       	adc	r31, r23
    25ac:	27 a7       	std	Z+47, r18	; 0x2f
    25ae:	30 ab       	std	Z+48, r19	; 0x30
    25b0:	41 ab       	std	Z+49, r20	; 0x31
    25b2:	52 ab       	std	Z+50, r21	; 0x32
    25b4:	01 e0       	ldi	r16, 0x01	; 1
    25b6:	12 c0       	rjmp	.+36     	; 0x25dc <xTaskGenericNotify+0xfc>
    25b8:	82 30       	cpi	r24, 0x02	; 2
    25ba:	79 f0       	breq	.+30     	; 0x25da <xTaskGenericNotify+0xfa>
    25bc:	66 0f       	add	r22, r22
    25be:	77 1f       	adc	r23, r23
    25c0:	66 0f       	add	r22, r22
    25c2:	77 1f       	adc	r23, r23
    25c4:	fd 01       	movw	r30, r26
    25c6:	e6 0f       	add	r30, r22
    25c8:	f7 1f       	adc	r31, r23
    25ca:	27 a7       	std	Z+47, r18	; 0x2f
    25cc:	30 ab       	std	Z+48, r19	; 0x30
    25ce:	41 ab       	std	Z+49, r20	; 0x31
    25d0:	52 ab       	std	Z+50, r21	; 0x32
    25d2:	01 e0       	ldi	r16, 0x01	; 1
    25d4:	03 c0       	rjmp	.+6      	; 0x25dc <xTaskGenericNotify+0xfc>
    25d6:	01 e0       	ldi	r16, 0x01	; 1
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <xTaskGenericNotify+0xfc>
    25da:	00 e0       	ldi	r16, 0x00	; 0
    25dc:	81 30       	cpi	r24, 0x01	; 1
    25de:	09 f0       	breq	.+2      	; 0x25e2 <xTaskGenericNotify+0x102>
    25e0:	69 c0       	rjmp	.+210    	; 0x26b4 <xTaskGenericNotify+0x1d4>
    25e2:	1c 96       	adiw	r26, 0x0c	; 12
    25e4:	ed 91       	ld	r30, X+
    25e6:	fc 91       	ld	r31, X
    25e8:	1d 97       	sbiw	r26, 0x0d	; 13
    25ea:	16 96       	adiw	r26, 0x06	; 6
    25ec:	cd 91       	ld	r28, X+
    25ee:	dc 91       	ld	r29, X
    25f0:	17 97       	sbiw	r26, 0x07	; 7
    25f2:	18 96       	adiw	r26, 0x08	; 8
    25f4:	8d 91       	ld	r24, X+
    25f6:	9c 91       	ld	r25, X
    25f8:	19 97       	sbiw	r26, 0x09	; 9
    25fa:	9f 83       	std	Y+7, r25	; 0x07
    25fc:	8e 83       	std	Y+6, r24	; 0x06
    25fe:	18 96       	adiw	r26, 0x08	; 8
    2600:	cd 91       	ld	r28, X+
    2602:	dc 91       	ld	r29, X
    2604:	19 97       	sbiw	r26, 0x09	; 9
    2606:	16 96       	adiw	r26, 0x06	; 6
    2608:	8d 91       	ld	r24, X+
    260a:	9c 91       	ld	r25, X
    260c:	17 97       	sbiw	r26, 0x07	; 7
    260e:	9d 83       	std	Y+5, r25	; 0x05
    2610:	8c 83       	std	Y+4, r24	; 0x04
    2612:	81 81       	ldd	r24, Z+1	; 0x01
    2614:	92 81       	ldd	r25, Z+2	; 0x02
    2616:	9d 01       	movw	r18, r26
    2618:	2e 5f       	subi	r18, 0xFE	; 254
    261a:	3f 4f       	sbci	r19, 0xFF	; 255
    261c:	82 17       	cp	r24, r18
    261e:	93 07       	cpc	r25, r19
    2620:	31 f4       	brne	.+12     	; 0x262e <xTaskGenericNotify+0x14e>
    2622:	18 96       	adiw	r26, 0x08	; 8
    2624:	8d 91       	ld	r24, X+
    2626:	9c 91       	ld	r25, X
    2628:	19 97       	sbiw	r26, 0x09	; 9
    262a:	92 83       	std	Z+2, r25	; 0x02
    262c:	81 83       	std	Z+1, r24	; 0x01
    262e:	1d 96       	adiw	r26, 0x0d	; 13
    2630:	1c 92       	st	X, r1
    2632:	1e 92       	st	-X, r1
    2634:	1c 97       	sbiw	r26, 0x0c	; 12
    2636:	80 81       	ld	r24, Z
    2638:	81 50       	subi	r24, 0x01	; 1
    263a:	80 83       	st	Z, r24
    263c:	5a 96       	adiw	r26, 0x1a	; 26
    263e:	ec 91       	ld	r30, X
    2640:	5a 97       	sbiw	r26, 0x1a	; 26
    2642:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <uxTopReadyPriority>
    2646:	8e 17       	cp	r24, r30
    2648:	10 f4       	brcc	.+4      	; 0x264e <xTaskGenericNotify+0x16e>
    264a:	e0 93 5b 11 	sts	0x115B, r30	; 0x80115b <uxTopReadyPriority>
    264e:	8b e0       	ldi	r24, 0x0B	; 11
    2650:	8e 9f       	mul	r24, r30
    2652:	f0 01       	movw	r30, r0
    2654:	11 24       	eor	r1, r1
    2656:	e3 56       	subi	r30, 0x63	; 99
    2658:	fe 4e       	sbci	r31, 0xEE	; 238
    265a:	01 80       	ldd	r0, Z+1	; 0x01
    265c:	f2 81       	ldd	r31, Z+2	; 0x02
    265e:	e0 2d       	mov	r30, r0
    2660:	17 96       	adiw	r26, 0x07	; 7
    2662:	fc 93       	st	X, r31
    2664:	ee 93       	st	-X, r30
    2666:	16 97       	sbiw	r26, 0x06	; 6
    2668:	46 81       	ldd	r20, Z+6	; 0x06
    266a:	57 81       	ldd	r21, Z+7	; 0x07
    266c:	19 96       	adiw	r26, 0x09	; 9
    266e:	5c 93       	st	X, r21
    2670:	4e 93       	st	-X, r20
    2672:	18 97       	sbiw	r26, 0x08	; 8
    2674:	c6 81       	ldd	r28, Z+6	; 0x06
    2676:	d7 81       	ldd	r29, Z+7	; 0x07
    2678:	3d 83       	std	Y+5, r19	; 0x05
    267a:	2c 83       	std	Y+4, r18	; 0x04
    267c:	37 83       	std	Z+7, r19	; 0x07
    267e:	26 83       	std	Z+6, r18	; 0x06
    2680:	5a 96       	adiw	r26, 0x1a	; 26
    2682:	ec 91       	ld	r30, X
    2684:	5a 97       	sbiw	r26, 0x1a	; 26
    2686:	8e 9f       	mul	r24, r30
    2688:	f0 01       	movw	r30, r0
    268a:	11 24       	eor	r1, r1
    268c:	e3 56       	subi	r30, 0x63	; 99
    268e:	fe 4e       	sbci	r31, 0xEE	; 238
    2690:	1d 96       	adiw	r26, 0x0d	; 13
    2692:	fc 93       	st	X, r31
    2694:	ee 93       	st	-X, r30
    2696:	1c 97       	sbiw	r26, 0x0c	; 12
    2698:	80 81       	ld	r24, Z
    269a:	8f 5f       	subi	r24, 0xFF	; 255
    269c:	80 83       	st	Z, r24
    269e:	5a 96       	adiw	r26, 0x1a	; 26
    26a0:	9c 91       	ld	r25, X
    26a2:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    26a6:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    26aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    26ac:	89 17       	cp	r24, r25
    26ae:	10 f4       	brcc	.+4      	; 0x26b4 <xTaskGenericNotify+0x1d4>
    26b0:	0e 94 80 03 	call	0x700	; 0x700 <vPortYield>
    26b4:	0f 90       	pop	r0
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	80 2f       	mov	r24, r16
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	bf 90       	pop	r11
    26c6:	af 90       	pop	r10
    26c8:	9f 90       	pop	r9
    26ca:	8f 90       	pop	r8
    26cc:	08 95       	ret

000026ce <xTaskGenericNotifyFromISR>:
    26ce:	8f 92       	push	r8
    26d0:	9f 92       	push	r9
    26d2:	af 92       	push	r10
    26d4:	bf 92       	push	r11
    26d6:	cf 92       	push	r12
    26d8:	df 92       	push	r13
    26da:	ef 92       	push	r14
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	dc 01       	movw	r26, r24
    26e6:	e1 14       	cp	r14, r1
    26e8:	f1 04       	cpc	r15, r1
    26ea:	89 f0       	breq	.+34     	; 0x270e <xTaskGenericNotifyFromISR+0x40>
    26ec:	e6 2f       	mov	r30, r22
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	ee 0f       	add	r30, r30
    26f2:	ff 1f       	adc	r31, r31
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	e8 0f       	add	r30, r24
    26fa:	f9 1f       	adc	r31, r25
    26fc:	87 a4       	ldd	r8, Z+47	; 0x2f
    26fe:	90 a8       	ldd	r9, Z+48	; 0x30
    2700:	a1 a8       	ldd	r10, Z+49	; 0x31
    2702:	b2 a8       	ldd	r11, Z+50	; 0x32
    2704:	f7 01       	movw	r30, r14
    2706:	80 82       	st	Z, r8
    2708:	91 82       	std	Z+1, r9	; 0x01
    270a:	a2 82       	std	Z+2, r10	; 0x02
    270c:	b3 82       	std	Z+3, r11	; 0x03
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	fd 01       	movw	r30, r26
    2712:	e6 0f       	add	r30, r22
    2714:	f7 1f       	adc	r31, r23
    2716:	93 a9       	ldd	r25, Z+51	; 0x33
    2718:	82 e0       	ldi	r24, 0x02	; 2
    271a:	83 ab       	std	Z+51, r24	; 0x33
    271c:	02 30       	cpi	r16, 0x02	; 2
    271e:	01 f1       	breq	.+64     	; 0x2760 <xTaskGenericNotifyFromISR+0x92>
    2720:	18 f4       	brcc	.+6      	; 0x2728 <xTaskGenericNotifyFromISR+0x5a>
    2722:	01 30       	cpi	r16, 0x01	; 1
    2724:	31 f0       	breq	.+12     	; 0x2732 <xTaskGenericNotifyFromISR+0x64>
    2726:	4d c0       	rjmp	.+154    	; 0x27c2 <xTaskGenericNotifyFromISR+0xf4>
    2728:	03 30       	cpi	r16, 0x03	; 3
    272a:	79 f1       	breq	.+94     	; 0x278a <xTaskGenericNotifyFromISR+0xbc>
    272c:	04 30       	cpi	r16, 0x04	; 4
    272e:	d1 f1       	breq	.+116    	; 0x27a4 <xTaskGenericNotifyFromISR+0xd6>
    2730:	48 c0       	rjmp	.+144    	; 0x27c2 <xTaskGenericNotifyFromISR+0xf4>
    2732:	66 0f       	add	r22, r22
    2734:	77 1f       	adc	r23, r23
    2736:	66 0f       	add	r22, r22
    2738:	77 1f       	adc	r23, r23
    273a:	fd 01       	movw	r30, r26
    273c:	e6 0f       	add	r30, r22
    273e:	f7 1f       	adc	r31, r23
    2740:	87 a4       	ldd	r8, Z+47	; 0x2f
    2742:	90 a8       	ldd	r9, Z+48	; 0x30
    2744:	a1 a8       	ldd	r10, Z+49	; 0x31
    2746:	b2 a8       	ldd	r11, Z+50	; 0x32
    2748:	ba 01       	movw	r22, r20
    274a:	a9 01       	movw	r20, r18
    274c:	48 29       	or	r20, r8
    274e:	59 29       	or	r21, r9
    2750:	6a 29       	or	r22, r10
    2752:	7b 29       	or	r23, r11
    2754:	47 a7       	std	Z+47, r20	; 0x2f
    2756:	50 ab       	std	Z+48, r21	; 0x30
    2758:	61 ab       	std	Z+49, r22	; 0x31
    275a:	72 ab       	std	Z+50, r23	; 0x32
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	34 c0       	rjmp	.+104    	; 0x27c8 <xTaskGenericNotifyFromISR+0xfa>
    2760:	66 0f       	add	r22, r22
    2762:	77 1f       	adc	r23, r23
    2764:	66 0f       	add	r22, r22
    2766:	77 1f       	adc	r23, r23
    2768:	fd 01       	movw	r30, r26
    276a:	e6 0f       	add	r30, r22
    276c:	f7 1f       	adc	r31, r23
    276e:	47 a5       	ldd	r20, Z+47	; 0x2f
    2770:	50 a9       	ldd	r21, Z+48	; 0x30
    2772:	61 a9       	ldd	r22, Z+49	; 0x31
    2774:	72 a9       	ldd	r23, Z+50	; 0x32
    2776:	4f 5f       	subi	r20, 0xFF	; 255
    2778:	5f 4f       	sbci	r21, 0xFF	; 255
    277a:	6f 4f       	sbci	r22, 0xFF	; 255
    277c:	7f 4f       	sbci	r23, 0xFF	; 255
    277e:	47 a7       	std	Z+47, r20	; 0x2f
    2780:	50 ab       	std	Z+48, r21	; 0x30
    2782:	61 ab       	std	Z+49, r22	; 0x31
    2784:	72 ab       	std	Z+50, r23	; 0x32
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	1f c0       	rjmp	.+62     	; 0x27c8 <xTaskGenericNotifyFromISR+0xfa>
    278a:	66 0f       	add	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	66 0f       	add	r22, r22
    2790:	77 1f       	adc	r23, r23
    2792:	fd 01       	movw	r30, r26
    2794:	e6 0f       	add	r30, r22
    2796:	f7 1f       	adc	r31, r23
    2798:	27 a7       	std	Z+47, r18	; 0x2f
    279a:	30 ab       	std	Z+48, r19	; 0x30
    279c:	41 ab       	std	Z+49, r20	; 0x31
    279e:	52 ab       	std	Z+50, r21	; 0x32
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	12 c0       	rjmp	.+36     	; 0x27c8 <xTaskGenericNotifyFromISR+0xfa>
    27a4:	92 30       	cpi	r25, 0x02	; 2
    27a6:	79 f0       	breq	.+30     	; 0x27c6 <xTaskGenericNotifyFromISR+0xf8>
    27a8:	66 0f       	add	r22, r22
    27aa:	77 1f       	adc	r23, r23
    27ac:	66 0f       	add	r22, r22
    27ae:	77 1f       	adc	r23, r23
    27b0:	fd 01       	movw	r30, r26
    27b2:	e6 0f       	add	r30, r22
    27b4:	f7 1f       	adc	r31, r23
    27b6:	27 a7       	std	Z+47, r18	; 0x2f
    27b8:	30 ab       	std	Z+48, r19	; 0x30
    27ba:	41 ab       	std	Z+49, r20	; 0x31
    27bc:	52 ab       	std	Z+50, r21	; 0x32
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	03 c0       	rjmp	.+6      	; 0x27c8 <xTaskGenericNotifyFromISR+0xfa>
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	01 c0       	rjmp	.+2      	; 0x27c8 <xTaskGenericNotifyFromISR+0xfa>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	91 30       	cpi	r25, 0x01	; 1
    27ca:	09 f0       	breq	.+2      	; 0x27ce <xTaskGenericNotifyFromISR+0x100>
    27cc:	96 c0       	rjmp	.+300    	; 0x28fa <xTaskGenericNotifyFromISR+0x22c>
    27ce:	90 91 4c 11 	lds	r25, 0x114C	; 0x80114c <uxSchedulerSuspended>
    27d2:	91 11       	cpse	r25, r1
    27d4:	5f c0       	rjmp	.+190    	; 0x2894 <xTaskGenericNotifyFromISR+0x1c6>
    27d6:	1c 96       	adiw	r26, 0x0c	; 12
    27d8:	ed 91       	ld	r30, X+
    27da:	fc 91       	ld	r31, X
    27dc:	1d 97       	sbiw	r26, 0x0d	; 13
    27de:	16 96       	adiw	r26, 0x06	; 6
    27e0:	cd 91       	ld	r28, X+
    27e2:	dc 91       	ld	r29, X
    27e4:	17 97       	sbiw	r26, 0x07	; 7
    27e6:	18 96       	adiw	r26, 0x08	; 8
    27e8:	2d 91       	ld	r18, X+
    27ea:	3c 91       	ld	r19, X
    27ec:	19 97       	sbiw	r26, 0x09	; 9
    27ee:	3f 83       	std	Y+7, r19	; 0x07
    27f0:	2e 83       	std	Y+6, r18	; 0x06
    27f2:	18 96       	adiw	r26, 0x08	; 8
    27f4:	cd 91       	ld	r28, X+
    27f6:	dc 91       	ld	r29, X
    27f8:	19 97       	sbiw	r26, 0x09	; 9
    27fa:	16 96       	adiw	r26, 0x06	; 6
    27fc:	2d 91       	ld	r18, X+
    27fe:	3c 91       	ld	r19, X
    2800:	17 97       	sbiw	r26, 0x07	; 7
    2802:	3d 83       	std	Y+5, r19	; 0x05
    2804:	2c 83       	std	Y+4, r18	; 0x04
    2806:	41 81       	ldd	r20, Z+1	; 0x01
    2808:	52 81       	ldd	r21, Z+2	; 0x02
    280a:	9d 01       	movw	r18, r26
    280c:	2e 5f       	subi	r18, 0xFE	; 254
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	42 17       	cp	r20, r18
    2812:	53 07       	cpc	r21, r19
    2814:	31 f4       	brne	.+12     	; 0x2822 <xTaskGenericNotifyFromISR+0x154>
    2816:	18 96       	adiw	r26, 0x08	; 8
    2818:	4d 91       	ld	r20, X+
    281a:	5c 91       	ld	r21, X
    281c:	19 97       	sbiw	r26, 0x09	; 9
    281e:	52 83       	std	Z+2, r21	; 0x02
    2820:	41 83       	std	Z+1, r20	; 0x01
    2822:	1d 96       	adiw	r26, 0x0d	; 13
    2824:	1c 92       	st	X, r1
    2826:	1e 92       	st	-X, r1
    2828:	1c 97       	sbiw	r26, 0x0c	; 12
    282a:	90 81       	ld	r25, Z
    282c:	91 50       	subi	r25, 0x01	; 1
    282e:	90 83       	st	Z, r25
    2830:	5a 96       	adiw	r26, 0x1a	; 26
    2832:	ec 91       	ld	r30, X
    2834:	5a 97       	sbiw	r26, 0x1a	; 26
    2836:	90 91 5b 11 	lds	r25, 0x115B	; 0x80115b <uxTopReadyPriority>
    283a:	9e 17       	cp	r25, r30
    283c:	10 f4       	brcc	.+4      	; 0x2842 <xTaskGenericNotifyFromISR+0x174>
    283e:	e0 93 5b 11 	sts	0x115B, r30	; 0x80115b <uxTopReadyPriority>
    2842:	9b e0       	ldi	r25, 0x0B	; 11
    2844:	9e 9f       	mul	r25, r30
    2846:	f0 01       	movw	r30, r0
    2848:	11 24       	eor	r1, r1
    284a:	e3 56       	subi	r30, 0x63	; 99
    284c:	fe 4e       	sbci	r31, 0xEE	; 238
    284e:	01 80       	ldd	r0, Z+1	; 0x01
    2850:	f2 81       	ldd	r31, Z+2	; 0x02
    2852:	e0 2d       	mov	r30, r0
    2854:	17 96       	adiw	r26, 0x07	; 7
    2856:	fc 93       	st	X, r31
    2858:	ee 93       	st	-X, r30
    285a:	16 97       	sbiw	r26, 0x06	; 6
    285c:	46 81       	ldd	r20, Z+6	; 0x06
    285e:	57 81       	ldd	r21, Z+7	; 0x07
    2860:	19 96       	adiw	r26, 0x09	; 9
    2862:	5c 93       	st	X, r21
    2864:	4e 93       	st	-X, r20
    2866:	18 97       	sbiw	r26, 0x08	; 8
    2868:	c6 81       	ldd	r28, Z+6	; 0x06
    286a:	d7 81       	ldd	r29, Z+7	; 0x07
    286c:	3d 83       	std	Y+5, r19	; 0x05
    286e:	2c 83       	std	Y+4, r18	; 0x04
    2870:	37 83       	std	Z+7, r19	; 0x07
    2872:	26 83       	std	Z+6, r18	; 0x06
    2874:	5a 96       	adiw	r26, 0x1a	; 26
    2876:	ec 91       	ld	r30, X
    2878:	5a 97       	sbiw	r26, 0x1a	; 26
    287a:	9e 9f       	mul	r25, r30
    287c:	f0 01       	movw	r30, r0
    287e:	11 24       	eor	r1, r1
    2880:	e3 56       	subi	r30, 0x63	; 99
    2882:	fe 4e       	sbci	r31, 0xEE	; 238
    2884:	1d 96       	adiw	r26, 0x0d	; 13
    2886:	fc 93       	st	X, r31
    2888:	ee 93       	st	-X, r30
    288a:	1c 97       	sbiw	r26, 0x0c	; 12
    288c:	90 81       	ld	r25, Z
    288e:	9f 5f       	subi	r25, 0xFF	; 255
    2890:	90 83       	st	Z, r25
    2892:	21 c0       	rjmp	.+66     	; 0x28d6 <xTaskGenericNotifyFromISR+0x208>
    2894:	68 e7       	ldi	r22, 0x78	; 120
    2896:	71 e1       	ldi	r23, 0x11	; 17
    2898:	fb 01       	movw	r30, r22
    289a:	c1 81       	ldd	r28, Z+1	; 0x01
    289c:	d2 81       	ldd	r29, Z+2	; 0x02
    289e:	53 96       	adiw	r26, 0x13	; 19
    28a0:	dc 93       	st	X, r29
    28a2:	ce 93       	st	-X, r28
    28a4:	52 97       	sbiw	r26, 0x12	; 18
    28a6:	2e 81       	ldd	r18, Y+6	; 0x06
    28a8:	3f 81       	ldd	r19, Y+7	; 0x07
    28aa:	55 96       	adiw	r26, 0x15	; 21
    28ac:	3c 93       	st	X, r19
    28ae:	2e 93       	st	-X, r18
    28b0:	54 97       	sbiw	r26, 0x14	; 20
    28b2:	4e 81       	ldd	r20, Y+6	; 0x06
    28b4:	5f 81       	ldd	r21, Y+7	; 0x07
    28b6:	9d 01       	movw	r18, r26
    28b8:	22 5f       	subi	r18, 0xF2	; 242
    28ba:	3f 4f       	sbci	r19, 0xFF	; 255
    28bc:	fa 01       	movw	r30, r20
    28be:	35 83       	std	Z+5, r19	; 0x05
    28c0:	24 83       	std	Z+4, r18	; 0x04
    28c2:	3f 83       	std	Y+7, r19	; 0x07
    28c4:	2e 83       	std	Y+6, r18	; 0x06
    28c6:	59 96       	adiw	r26, 0x19	; 25
    28c8:	7c 93       	st	X, r23
    28ca:	6e 93       	st	-X, r22
    28cc:	58 97       	sbiw	r26, 0x18	; 24
    28ce:	fb 01       	movw	r30, r22
    28d0:	90 81       	ld	r25, Z
    28d2:	9f 5f       	subi	r25, 0xFF	; 255
    28d4:	90 83       	st	Z, r25
    28d6:	5a 96       	adiw	r26, 0x1a	; 26
    28d8:	2c 91       	ld	r18, X
    28da:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <pxCurrentTCB>
    28de:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <pxCurrentTCB+0x1>
    28e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    28e4:	92 17       	cp	r25, r18
    28e6:	48 f4       	brcc	.+18     	; 0x28fa <xTaskGenericNotifyFromISR+0x22c>
    28e8:	c1 14       	cp	r12, r1
    28ea:	d1 04       	cpc	r13, r1
    28ec:	19 f0       	breq	.+6      	; 0x28f4 <xTaskGenericNotifyFromISR+0x226>
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	f6 01       	movw	r30, r12
    28f2:	90 83       	st	Z, r25
    28f4:	91 e0       	ldi	r25, 0x01	; 1
    28f6:	90 93 55 11 	sts	0x1155, r25	; 0x801155 <xYieldPending>
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	0f 91       	pop	r16
    2900:	ff 90       	pop	r15
    2902:	ef 90       	pop	r14
    2904:	df 90       	pop	r13
    2906:	cf 90       	pop	r12
    2908:	bf 90       	pop	r11
    290a:	af 90       	pop	r10
    290c:	9f 90       	pop	r9
    290e:	8f 90       	pop	r8
    2910:	08 95       	ret

00002912 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	21 f4       	brne	.+8      	; 0x291e <xTaskGenericNotifyStateClear+0xc>
    2916:	80 91 0b 12 	lds	r24, 0x120B	; 0x80120b <pxCurrentTCB>
    291a:	90 91 0c 12 	lds	r25, 0x120C	; 0x80120c <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2924:	70 e0       	ldi	r23, 0x00	; 0
    2926:	fc 01       	movw	r30, r24
    2928:	e6 0f       	add	r30, r22
    292a:	f7 1f       	adc	r31, r23
    292c:	23 a9       	ldd	r18, Z+51	; 0x33
    292e:	22 30       	cpi	r18, 0x02	; 2
    2930:	31 f4       	brne	.+12     	; 0x293e <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2932:	fc 01       	movw	r30, r24
    2934:	e6 0f       	add	r30, r22
    2936:	f7 1f       	adc	r31, r23
    2938:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    293e:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2940:	0f 90       	pop	r0
    2942:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2944:	08 95       	ret

00002946 <prvGetNextExpireTime>:
    2946:	dc 01       	movw	r26, r24
    2948:	e0 91 17 12 	lds	r30, 0x1217	; 0x801217 <pxCurrentTimerList>
    294c:	f0 91 18 12 	lds	r31, 0x1218	; 0x801218 <pxCurrentTimerList+0x1>
    2950:	80 81       	ld	r24, Z
    2952:	91 e0       	ldi	r25, 0x01	; 1
    2954:	81 11       	cpse	r24, r1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9c 93       	st	X, r25
    295a:	91 11       	cpse	r25, r1
    295c:	08 c0       	rjmp	.+16     	; 0x296e <prvGetNextExpireTime+0x28>
    295e:	07 80       	ldd	r0, Z+7	; 0x07
    2960:	f0 85       	ldd	r31, Z+8	; 0x08
    2962:	e0 2d       	mov	r30, r0
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	08 95       	ret
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	cb 01       	movw	r24, r22
    2974:	08 95       	ret

00002976 <prvInsertTimerInActiveList>:
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	1f 93       	push	r17
    2982:	fc 01       	movw	r30, r24
    2984:	42 83       	std	Z+2, r20	; 0x02
    2986:	53 83       	std	Z+3, r21	; 0x03
    2988:	64 83       	std	Z+4, r22	; 0x04
    298a:	75 83       	std	Z+5, r23	; 0x05
    298c:	93 87       	std	Z+11, r25	; 0x0b
    298e:	82 87       	std	Z+10, r24	; 0x0a
    2990:	04 17       	cp	r16, r20
    2992:	15 07       	cpc	r17, r21
    2994:	26 07       	cpc	r18, r22
    2996:	37 07       	cpc	r19, r23
    2998:	c0 f0       	brcs	.+48     	; 0x29ca <prvInsertTimerInActiveList+0x54>
    299a:	0c 19       	sub	r16, r12
    299c:	1d 09       	sbc	r17, r13
    299e:	2e 09       	sbc	r18, r14
    29a0:	3f 09       	sbc	r19, r15
    29a2:	86 85       	ldd	r24, Z+14	; 0x0e
    29a4:	97 85       	ldd	r25, Z+15	; 0x0f
    29a6:	a0 89       	ldd	r26, Z+16	; 0x10
    29a8:	b1 89       	ldd	r27, Z+17	; 0x11
    29aa:	08 17       	cp	r16, r24
    29ac:	19 07       	cpc	r17, r25
    29ae:	2a 07       	cpc	r18, r26
    29b0:	3b 07       	cpc	r19, r27
    29b2:	00 f5       	brcc	.+64     	; 0x29f4 <prvInsertTimerInActiveList+0x7e>
    29b4:	bf 01       	movw	r22, r30
    29b6:	6e 5f       	subi	r22, 0xFE	; 254
    29b8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ba:	80 91 15 12 	lds	r24, 0x1215	; 0x801215 <pxOverflowTimerList>
    29be:	90 91 16 12 	lds	r25, 0x1216	; 0x801216 <pxOverflowTimerList+0x1>
    29c2:	0e 94 c7 02 	call	0x58e	; 0x58e <vListInsert>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	18 c0       	rjmp	.+48     	; 0x29fa <prvInsertTimerInActiveList+0x84>
    29ca:	0c 15       	cp	r16, r12
    29cc:	1d 05       	cpc	r17, r13
    29ce:	2e 05       	cpc	r18, r14
    29d0:	3f 05       	cpc	r19, r15
    29d2:	28 f4       	brcc	.+10     	; 0x29de <prvInsertTimerInActiveList+0x68>
    29d4:	4c 15       	cp	r20, r12
    29d6:	5d 05       	cpc	r21, r13
    29d8:	6e 05       	cpc	r22, r14
    29da:	7f 05       	cpc	r23, r15
    29dc:	68 f4       	brcc	.+26     	; 0x29f8 <prvInsertTimerInActiveList+0x82>
    29de:	bf 01       	movw	r22, r30
    29e0:	6e 5f       	subi	r22, 0xFE	; 254
    29e2:	7f 4f       	sbci	r23, 0xFF	; 255
    29e4:	80 91 17 12 	lds	r24, 0x1217	; 0x801217 <pxCurrentTimerList>
    29e8:	90 91 18 12 	lds	r25, 0x1218	; 0x801218 <pxCurrentTimerList+0x1>
    29ec:	0e 94 c7 02 	call	0x58e	; 0x58e <vListInsert>
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	03 c0       	rjmp	.+6      	; 0x29fa <prvInsertTimerInActiveList+0x84>
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	01 c0       	rjmp	.+2      	; 0x29fa <prvInsertTimerInActiveList+0x84>
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	1f 91       	pop	r17
    29fc:	0f 91       	pop	r16
    29fe:	ff 90       	pop	r15
    2a00:	ef 90       	pop	r14
    2a02:	df 90       	pop	r13
    2a04:	cf 90       	pop	r12
    2a06:	08 95       	ret

00002a08 <prvCheckForValidListAndQueue>:
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	0f 92       	push	r0
    2a0e:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2a12:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2a16:	89 2b       	or	r24, r25
    2a18:	e9 f4       	brne	.+58     	; 0x2a54 <prvCheckForValidListAndQueue+0x4c>
    2a1a:	84 e2       	ldi	r24, 0x24	; 36
    2a1c:	92 e1       	ldi	r25, 0x12	; 18
    2a1e:	0e 94 b2 02 	call	0x564	; 0x564 <vListInitialise>
    2a22:	89 e1       	ldi	r24, 0x19	; 25
    2a24:	92 e1       	ldi	r25, 0x12	; 18
    2a26:	0e 94 b2 02 	call	0x564	; 0x564 <vListInitialise>
    2a2a:	84 e2       	ldi	r24, 0x24	; 36
    2a2c:	92 e1       	ldi	r25, 0x12	; 18
    2a2e:	90 93 18 12 	sts	0x1218, r25	; 0x801218 <pxCurrentTimerList+0x1>
    2a32:	80 93 17 12 	sts	0x1217, r24	; 0x801217 <pxCurrentTimerList>
    2a36:	89 e1       	ldi	r24, 0x19	; 25
    2a38:	92 e1       	ldi	r25, 0x12	; 18
    2a3a:	90 93 16 12 	sts	0x1216, r25	; 0x801216 <pxOverflowTimerList+0x1>
    2a3e:	80 93 15 12 	sts	0x1215, r24	; 0x801215 <pxOverflowTimerList>
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	67 e0       	ldi	r22, 0x07	; 7
    2a46:	8a e0       	ldi	r24, 0x0A	; 10
    2a48:	0e 94 65 05 	call	0xaca	; 0xaca <xQueueGenericCreate>
    2a4c:	90 93 14 12 	sts	0x1214, r25	; 0x801214 <xTimerQueue+0x1>
    2a50:	80 93 13 12 	sts	0x1213, r24	; 0x801213 <xTimerQueue>
    2a54:	0f 90       	pop	r0
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	08 95       	ret

00002a5a <xTimerCreateTimerTask>:
    2a5a:	ef 92       	push	r14
    2a5c:	ff 92       	push	r15
    2a5e:	0f 93       	push	r16
    2a60:	d3 df       	rcall	.-90     	; 0x2a08 <prvCheckForValidListAndQueue>
    2a62:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2a66:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2a6a:	89 2b       	or	r24, r25
    2a6c:	91 f0       	breq	.+36     	; 0x2a92 <xTimerCreateTimerTask+0x38>
    2a6e:	0f 2e       	mov	r0, r31
    2a70:	f1 e1       	ldi	r31, 0x11	; 17
    2a72:	ef 2e       	mov	r14, r31
    2a74:	f2 e1       	ldi	r31, 0x12	; 18
    2a76:	ff 2e       	mov	r15, r31
    2a78:	f0 2d       	mov	r31, r0
    2a7a:	03 e0       	ldi	r16, 0x03	; 3
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 ec       	ldi	r20, 0xC0	; 192
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	6f e9       	ldi	r22, 0x9F	; 159
    2a86:	72 e0       	ldi	r23, 0x02	; 2
    2a88:	87 ed       	ldi	r24, 0xD7	; 215
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTaskCreate>
    2a90:	01 c0       	rjmp	.+2      	; 0x2a94 <xTimerCreateTimerTask+0x3a>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	0f 91       	pop	r16
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	08 95       	ret

00002a9c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2a9c:	8f 92       	push	r8
    2a9e:	9f 92       	push	r9
    2aa0:	af 92       	push	r10
    2aa2:	bf 92       	push	r11
    2aa4:	cf 92       	push	r12
    2aa6:	df 92       	push	r13
    2aa8:	ef 92       	push	r14
    2aaa:	ff 92       	push	r15
    2aac:	0f 93       	push	r16
    2aae:	1f 93       	push	r17
    2ab0:	cf 93       	push	r28
    2ab2:	df 93       	push	r29
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	27 97       	sbiw	r28, 0x07	; 7
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2ac4:	e0 91 13 12 	lds	r30, 0x1213	; 0x801213 <xTimerQueue>
    2ac8:	f0 91 14 12 	lds	r31, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2acc:	30 97       	sbiw	r30, 0x00	; 0
    2ace:	81 f1       	breq	.+96     	; 0x2b30 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2ad0:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2ad2:	2a 83       	std	Y+2, r18	; 0x02
    2ad4:	3b 83       	std	Y+3, r19	; 0x03
    2ad6:	4c 83       	std	Y+4, r20	; 0x04
    2ad8:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2ada:	9f 83       	std	Y+7, r25	; 0x07
    2adc:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2ade:	66 30       	cpi	r22, 0x06	; 6
    2ae0:	f4 f4       	brge	.+60     	; 0x2b1e <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2ae2:	ee db       	rcall	.-2084   	; 0x22c0 <xTaskGetSchedulerState>
    2ae4:	82 30       	cpi	r24, 0x02	; 2
    2ae6:	69 f4       	brne	.+26     	; 0x2b02 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2ae8:	00 e0       	ldi	r16, 0x00	; 0
    2aea:	a7 01       	movw	r20, r14
    2aec:	96 01       	movw	r18, r12
    2aee:	be 01       	movw	r22, r28
    2af0:	6f 5f       	subi	r22, 0xFF	; 255
    2af2:	7f 4f       	sbci	r23, 0xFF	; 255
    2af4:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2af8:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2afc:	0e 94 88 05 	call	0xb10	; 0xb10 <xQueueGenericSend>
    2b00:	18 c0       	rjmp	.+48     	; 0x2b32 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2b02:	00 e0       	ldi	r16, 0x00	; 0
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	a9 01       	movw	r20, r18
    2b0a:	be 01       	movw	r22, r28
    2b0c:	6f 5f       	subi	r22, 0xFF	; 255
    2b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b10:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2b14:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2b18:	0e 94 88 05 	call	0xb10	; 0xb10 <xQueueGenericSend>
    2b1c:	0a c0       	rjmp	.+20     	; 0x2b32 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	a8 01       	movw	r20, r16
    2b22:	be 01       	movw	r22, r28
    2b24:	6f 5f       	subi	r22, 0xFF	; 255
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255
    2b28:	cf 01       	movw	r24, r30
    2b2a:	0e 94 18 06 	call	0xc30	; 0xc30 <xQueueGenericSendFromISR>
    2b2e:	01 c0       	rjmp	.+2      	; 0x2b32 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2b30:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2b32:	27 96       	adiw	r28, 0x07	; 7
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	ff 90       	pop	r15
    2b48:	ef 90       	pop	r14
    2b4a:	df 90       	pop	r13
    2b4c:	cf 90       	pop	r12
    2b4e:	bf 90       	pop	r11
    2b50:	af 90       	pop	r10
    2b52:	9f 90       	pop	r9
    2b54:	8f 90       	pop	r8
    2b56:	08 95       	ret

00002b58 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2b58:	8f 92       	push	r8
    2b5a:	9f 92       	push	r9
    2b5c:	af 92       	push	r10
    2b5e:	bf 92       	push	r11
    2b60:	cf 92       	push	r12
    2b62:	df 92       	push	r13
    2b64:	ef 92       	push	r14
    2b66:	ff 92       	push	r15
    2b68:	0f 93       	push	r16
    2b6a:	1f 93       	push	r17
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b70:	3b c0       	rjmp	.+118    	; 0x2be8 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b72:	07 80       	ldd	r0, Z+7	; 0x07
    2b74:	f0 85       	ldd	r31, Z+8	; 0x08
    2b76:	e0 2d       	mov	r30, r0
    2b78:	80 80       	ld	r8, Z
    2b7a:	91 80       	ldd	r9, Z+1	; 0x01
    2b7c:	a2 80       	ldd	r10, Z+2	; 0x02
    2b7e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2b80:	c0 85       	ldd	r28, Z+8	; 0x08
    2b82:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b84:	8e 01       	movw	r16, r28
    2b86:	0e 5f       	subi	r16, 0xFE	; 254
    2b88:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8a:	c8 01       	movw	r24, r16
    2b8c:	0e 94 04 03 	call	0x608	; 0x608 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b90:	ec 89       	ldd	r30, Y+20	; 0x14
    2b92:	fd 89       	ldd	r31, Y+21	; 0x15
    2b94:	ce 01       	movw	r24, r28
    2b96:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b98:	8e 89       	ldd	r24, Y+22	; 0x16
    2b9a:	82 ff       	sbrs	r24, 2
    2b9c:	25 c0       	rjmp	.+74     	; 0x2be8 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ba2:	a8 89       	ldd	r26, Y+16	; 0x10
    2ba4:	b9 89       	ldd	r27, Y+17	; 0x11
    2ba6:	88 0d       	add	r24, r8
    2ba8:	99 1d       	adc	r25, r9
    2baa:	aa 1d       	adc	r26, r10
    2bac:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2bae:	88 16       	cp	r8, r24
    2bb0:	99 06       	cpc	r9, r25
    2bb2:	aa 06       	cpc	r10, r26
    2bb4:	bb 06       	cpc	r11, r27
    2bb6:	70 f4       	brcc	.+28     	; 0x2bd4 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2bb8:	8a 83       	std	Y+2, r24	; 0x02
    2bba:	9b 83       	std	Y+3, r25	; 0x03
    2bbc:	ac 83       	std	Y+4, r26	; 0x04
    2bbe:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2bc0:	db 87       	std	Y+11, r29	; 0x0b
    2bc2:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2bc4:	b8 01       	movw	r22, r16
    2bc6:	80 91 17 12 	lds	r24, 0x1217	; 0x801217 <pxCurrentTimerList>
    2bca:	90 91 18 12 	lds	r25, 0x1218	; 0x801218 <pxCurrentTimerList+0x1>
    2bce:	0e 94 c7 02 	call	0x58e	; 0x58e <vListInsert>
    2bd2:	0a c0       	rjmp	.+20     	; 0x2be8 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2bd4:	c1 2c       	mov	r12, r1
    2bd6:	d1 2c       	mov	r13, r1
    2bd8:	76 01       	movw	r14, r12
    2bda:	00 e0       	ldi	r16, 0x00	; 0
    2bdc:	10 e0       	ldi	r17, 0x00	; 0
    2bde:	a5 01       	movw	r20, r10
    2be0:	94 01       	movw	r18, r8
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	ce 01       	movw	r24, r28
    2be6:	5a df       	rcall	.-332    	; 0x2a9c <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2be8:	e0 91 17 12 	lds	r30, 0x1217	; 0x801217 <pxCurrentTimerList>
    2bec:	f0 91 18 12 	lds	r31, 0x1218	; 0x801218 <pxCurrentTimerList+0x1>
    2bf0:	80 81       	ld	r24, Z
    2bf2:	81 11       	cpse	r24, r1
    2bf4:	be cf       	rjmp	.-132    	; 0x2b72 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2bf6:	80 91 15 12 	lds	r24, 0x1215	; 0x801215 <pxOverflowTimerList>
    2bfa:	90 91 16 12 	lds	r25, 0x1216	; 0x801216 <pxOverflowTimerList+0x1>
    2bfe:	90 93 18 12 	sts	0x1218, r25	; 0x801218 <pxCurrentTimerList+0x1>
    2c02:	80 93 17 12 	sts	0x1217, r24	; 0x801217 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2c06:	f0 93 16 12 	sts	0x1216, r31	; 0x801216 <pxOverflowTimerList+0x1>
    2c0a:	e0 93 15 12 	sts	0x1215, r30	; 0x801215 <pxOverflowTimerList>
    }
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	ff 90       	pop	r15
    2c18:	ef 90       	pop	r14
    2c1a:	df 90       	pop	r13
    2c1c:	cf 90       	pop	r12
    2c1e:	bf 90       	pop	r11
    2c20:	af 90       	pop	r10
    2c22:	9f 90       	pop	r9
    2c24:	8f 90       	pop	r8
    2c26:	08 95       	ret

00002c28 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2c28:	cf 92       	push	r12
    2c2a:	df 92       	push	r13
    2c2c:	ef 92       	push	r14
    2c2e:	ff 92       	push	r15
    2c30:	cf 93       	push	r28
    2c32:	df 93       	push	r29
    2c34:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2c36:	0e 94 c7 0c 	call	0x198e	; 0x198e <xTaskGetTickCount>
    2c3a:	6b 01       	movw	r12, r22
    2c3c:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2c3e:	80 91 0d 12 	lds	r24, 0x120D	; 0x80120d <xLastTime.2436>
    2c42:	90 91 0e 12 	lds	r25, 0x120E	; 0x80120e <xLastTime.2436+0x1>
    2c46:	a0 91 0f 12 	lds	r26, 0x120F	; 0x80120f <xLastTime.2436+0x2>
    2c4a:	b0 91 10 12 	lds	r27, 0x1210	; 0x801210 <xLastTime.2436+0x3>
    2c4e:	c8 16       	cp	r12, r24
    2c50:	d9 06       	cpc	r13, r25
    2c52:	ea 06       	cpc	r14, r26
    2c54:	fb 06       	cpc	r15, r27
    2c56:	20 f4       	brcc	.+8      	; 0x2c60 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2c58:	7f df       	rcall	.-258    	; 0x2b58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	88 83       	st	Y, r24
    2c5e:	01 c0       	rjmp	.+2      	; 0x2c62 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2c60:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2c62:	c0 92 0d 12 	sts	0x120D, r12	; 0x80120d <xLastTime.2436>
    2c66:	d0 92 0e 12 	sts	0x120E, r13	; 0x80120e <xLastTime.2436+0x1>
    2c6a:	e0 92 0f 12 	sts	0x120F, r14	; 0x80120f <xLastTime.2436+0x2>
    2c6e:	f0 92 10 12 	sts	0x1210, r15	; 0x801210 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2c72:	c7 01       	movw	r24, r14
    2c74:	b6 01       	movw	r22, r12
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
    2c82:	08 95       	ret

00002c84 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2c84:	4f 92       	push	r4
    2c86:	5f 92       	push	r5
    2c88:	6f 92       	push	r6
    2c8a:	7f 92       	push	r7
    2c8c:	8f 92       	push	r8
    2c8e:	9f 92       	push	r9
    2c90:	af 92       	push	r10
    2c92:	bf 92       	push	r11
    2c94:	cf 92       	push	r12
    2c96:	df 92       	push	r13
    2c98:	ef 92       	push	r14
    2c9a:	ff 92       	push	r15
    2c9c:	0f 93       	push	r16
    2c9e:	1f 93       	push	r17
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	4b 01       	movw	r8, r22
    2ca6:	5c 01       	movw	r10, r24
    2ca8:	29 01       	movw	r4, r18
    2caa:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2cac:	e0 91 17 12 	lds	r30, 0x1217	; 0x801217 <pxCurrentTimerList>
    2cb0:	f0 91 18 12 	lds	r31, 0x1218	; 0x801218 <pxCurrentTimerList+0x1>
    2cb4:	07 80       	ldd	r0, Z+7	; 0x07
    2cb6:	f0 85       	ldd	r31, Z+8	; 0x08
    2cb8:	e0 2d       	mov	r30, r0
    2cba:	c0 85       	ldd	r28, Z+8	; 0x08
    2cbc:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	02 96       	adiw	r24, 0x02	; 2
    2cc2:	0e 94 04 03 	call	0x608	; 0x608 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2cc6:	8e 89       	ldd	r24, Y+22	; 0x16
    2cc8:	82 ff       	sbrs	r24, 2
    2cca:	1b c0       	rjmp	.+54     	; 0x2d02 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2ccc:	4e 85       	ldd	r20, Y+14	; 0x0e
    2cce:	5f 85       	ldd	r21, Y+15	; 0x0f
    2cd0:	68 89       	ldd	r22, Y+16	; 0x10
    2cd2:	79 89       	ldd	r23, Y+17	; 0x11
    2cd4:	48 0d       	add	r20, r8
    2cd6:	59 1d       	adc	r21, r9
    2cd8:	6a 1d       	adc	r22, r10
    2cda:	7b 1d       	adc	r23, r11
    2cdc:	75 01       	movw	r14, r10
    2cde:	64 01       	movw	r12, r8
    2ce0:	93 01       	movw	r18, r6
    2ce2:	82 01       	movw	r16, r4
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	47 de       	rcall	.-882    	; 0x2976 <prvInsertTimerInActiveList>
    2ce8:	88 23       	and	r24, r24
    2cea:	69 f0       	breq	.+26     	; 0x2d06 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2cec:	c1 2c       	mov	r12, r1
    2cee:	d1 2c       	mov	r13, r1
    2cf0:	76 01       	movw	r14, r12
    2cf2:	00 e0       	ldi	r16, 0x00	; 0
    2cf4:	10 e0       	ldi	r17, 0x00	; 0
    2cf6:	a5 01       	movw	r20, r10
    2cf8:	94 01       	movw	r18, r8
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	ce de       	rcall	.-612    	; 0x2a9c <xTimerGenericCommand>
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2d02:	8e 7f       	andi	r24, 0xFE	; 254
    2d04:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d06:	ec 89       	ldd	r30, Y+20	; 0x14
    2d08:	fd 89       	ldd	r31, Y+21	; 0x15
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	19 95       	eicall
    }
    2d0e:	df 91       	pop	r29
    2d10:	cf 91       	pop	r28
    2d12:	1f 91       	pop	r17
    2d14:	0f 91       	pop	r16
    2d16:	ff 90       	pop	r15
    2d18:	ef 90       	pop	r14
    2d1a:	df 90       	pop	r13
    2d1c:	cf 90       	pop	r12
    2d1e:	bf 90       	pop	r11
    2d20:	af 90       	pop	r10
    2d22:	9f 90       	pop	r9
    2d24:	8f 90       	pop	r8
    2d26:	7f 90       	pop	r7
    2d28:	6f 90       	pop	r6
    2d2a:	5f 90       	pop	r5
    2d2c:	4f 90       	pop	r4
    2d2e:	08 95       	ret

00002d30 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2d30:	8f 92       	push	r8
    2d32:	9f 92       	push	r9
    2d34:	af 92       	push	r10
    2d36:	bf 92       	push	r11
    2d38:	cf 92       	push	r12
    2d3a:	df 92       	push	r13
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	1f 92       	push	r1
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	6b 01       	movw	r12, r22
    2d4e:	7c 01       	movw	r14, r24
    2d50:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2d52:	0e 94 c1 0c 	call	0x1982	; 0x1982 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d56:	ce 01       	movw	r24, r28
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	66 df       	rcall	.-308    	; 0x2c28 <prvSampleTimeNow>
    2d5c:	4b 01       	movw	r8, r22
    2d5e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	81 11       	cpse	r24, r1
    2d64:	2d c0       	rjmp	.+90     	; 0x2dc0 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2d66:	11 11       	cpse	r17, r1
    2d68:	0d c0       	rjmp	.+26     	; 0x2d84 <prvProcessTimerOrBlockTask+0x54>
    2d6a:	8c 14       	cp	r8, r12
    2d6c:	9d 04       	cpc	r9, r13
    2d6e:	ae 04       	cpc	r10, r14
    2d70:	bf 04       	cpc	r11, r15
    2d72:	40 f0       	brcs	.+16     	; 0x2d84 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2d74:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2d78:	a5 01       	movw	r20, r10
    2d7a:	94 01       	movw	r18, r8
    2d7c:	c7 01       	movw	r24, r14
    2d7e:	b6 01       	movw	r22, r12
    2d80:	81 df       	rcall	.-254    	; 0x2c84 <prvProcessExpiredTimer>
    2d82:	20 c0       	rjmp	.+64     	; 0x2dc4 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2d84:	11 23       	and	r17, r17
    2d86:	41 f0       	breq	.+16     	; 0x2d98 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d88:	e0 91 15 12 	lds	r30, 0x1215	; 0x801215 <pxOverflowTimerList>
    2d8c:	f0 91 16 12 	lds	r31, 0x1216	; 0x801216 <pxOverflowTimerList+0x1>
    2d90:	80 81       	ld	r24, Z
    2d92:	11 e0       	ldi	r17, 0x01	; 1
    2d94:	81 11       	cpse	r24, r1
    2d96:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2d98:	b7 01       	movw	r22, r14
    2d9a:	a6 01       	movw	r20, r12
    2d9c:	48 19       	sub	r20, r8
    2d9e:	59 09       	sbc	r21, r9
    2da0:	6a 09       	sbc	r22, r10
    2da2:	7b 09       	sbc	r23, r11
    2da4:	21 2f       	mov	r18, r17
    2da6:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2daa:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2dae:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2db2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskResumeAll>
    2db6:	81 11       	cpse	r24, r1
    2db8:	05 c0       	rjmp	.+10     	; 0x2dc4 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2dba:	0e 94 80 03 	call	0x700	; 0x700 <vPortYield>
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2dc0:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <xTaskResumeAll>
            }
        }
    }
    2dc4:	0f 90       	pop	r0
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	1f 91       	pop	r17
    2dcc:	ff 90       	pop	r15
    2dce:	ef 90       	pop	r14
    2dd0:	df 90       	pop	r13
    2dd2:	cf 90       	pop	r12
    2dd4:	bf 90       	pop	r11
    2dd6:	af 90       	pop	r10
    2dd8:	9f 90       	pop	r9
    2dda:	8f 90       	pop	r8
    2ddc:	08 95       	ret

00002dde <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2dde:	af 92       	push	r10
    2de0:	bf 92       	push	r11
    2de2:	cf 92       	push	r12
    2de4:	df 92       	push	r13
    2de6:	ef 92       	push	r14
    2de8:	ff 92       	push	r15
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	cf 93       	push	r28
    2df0:	df 93       	push	r29
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	28 97       	sbiw	r28, 0x08	; 8
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e02:	82 c0       	rjmp	.+260    	; 0x2f08 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	88 23       	and	r24, r24
    2e08:	0c f4       	brge	.+2      	; 0x2e0c <prvProcessReceivedCommands+0x2e>
    2e0a:	7e c0       	rjmp	.+252    	; 0x2f08 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2e0c:	ae 80       	ldd	r10, Y+6	; 0x06
    2e0e:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2e10:	d5 01       	movw	r26, r10
    2e12:	1c 96       	adiw	r26, 0x0c	; 12
    2e14:	8d 91       	ld	r24, X+
    2e16:	9c 91       	ld	r25, X
    2e18:	1d 97       	sbiw	r26, 0x0d	; 13
    2e1a:	89 2b       	or	r24, r25
    2e1c:	21 f0       	breq	.+8      	; 0x2e26 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e1e:	c5 01       	movw	r24, r10
    2e20:	02 96       	adiw	r24, 0x02	; 2
    2e22:	0e 94 04 03 	call	0x608	; 0x608 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2e26:	ce 01       	movw	r24, r28
    2e28:	08 96       	adiw	r24, 0x08	; 8
    2e2a:	fe de       	rcall	.-516    	; 0x2c28 <prvSampleTimeNow>
    2e2c:	8b 01       	movw	r16, r22
    2e2e:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2e30:	e9 81       	ldd	r30, Y+1	; 0x01
    2e32:	0e 2e       	mov	r0, r30
    2e34:	00 0c       	add	r0, r0
    2e36:	ff 0b       	sbc	r31, r31
    2e38:	ea 30       	cpi	r30, 0x0A	; 10
    2e3a:	f1 05       	cpc	r31, r1
    2e3c:	08 f0       	brcs	.+2      	; 0x2e40 <prvProcessReceivedCommands+0x62>
    2e3e:	64 c0       	rjmp	.+200    	; 0x2f08 <prvProcessReceivedCommands+0x12a>
    2e40:	88 27       	eor	r24, r24
    2e42:	ee 58       	subi	r30, 0x8E	; 142
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	8f 4f       	sbci	r24, 0xFF	; 255
    2e48:	0c 94 ea 29 	jmp	0x53d4	; 0x53d4 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e4c:	f5 01       	movw	r30, r10
    2e4e:	86 89       	ldd	r24, Z+22	; 0x16
    2e50:	81 60       	ori	r24, 0x01	; 1
    2e52:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2e54:	ca 80       	ldd	r12, Y+2	; 0x02
    2e56:	db 80       	ldd	r13, Y+3	; 0x03
    2e58:	ec 80       	ldd	r14, Y+4	; 0x04
    2e5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e5c:	46 85       	ldd	r20, Z+14	; 0x0e
    2e5e:	57 85       	ldd	r21, Z+15	; 0x0f
    2e60:	60 89       	ldd	r22, Z+16	; 0x10
    2e62:	71 89       	ldd	r23, Z+17	; 0x11
    2e64:	4c 0d       	add	r20, r12
    2e66:	5d 1d       	adc	r21, r13
    2e68:	6e 1d       	adc	r22, r14
    2e6a:	7f 1d       	adc	r23, r15
    2e6c:	c5 01       	movw	r24, r10
    2e6e:	83 dd       	rcall	.-1274   	; 0x2976 <prvInsertTimerInActiveList>
    2e70:	88 23       	and	r24, r24
    2e72:	09 f4       	brne	.+2      	; 0x2e76 <prvProcessReceivedCommands+0x98>
    2e74:	49 c0       	rjmp	.+146    	; 0x2f08 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e76:	d5 01       	movw	r26, r10
    2e78:	54 96       	adiw	r26, 0x14	; 20
    2e7a:	ed 91       	ld	r30, X+
    2e7c:	fc 91       	ld	r31, X
    2e7e:	55 97       	sbiw	r26, 0x15	; 21
    2e80:	c5 01       	movw	r24, r10
    2e82:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e84:	f5 01       	movw	r30, r10
    2e86:	86 89       	ldd	r24, Z+22	; 0x16
    2e88:	82 ff       	sbrs	r24, 2
    2e8a:	3e c0       	rjmp	.+124    	; 0x2f08 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2e8c:	4a 81       	ldd	r20, Y+2	; 0x02
    2e8e:	5b 81       	ldd	r21, Y+3	; 0x03
    2e90:	6c 81       	ldd	r22, Y+4	; 0x04
    2e92:	7d 81       	ldd	r23, Y+5	; 0x05
    2e94:	86 85       	ldd	r24, Z+14	; 0x0e
    2e96:	97 85       	ldd	r25, Z+15	; 0x0f
    2e98:	a0 89       	ldd	r26, Z+16	; 0x10
    2e9a:	b1 89       	ldd	r27, Z+17	; 0x11
    2e9c:	9a 01       	movw	r18, r20
    2e9e:	ab 01       	movw	r20, r22
    2ea0:	28 0f       	add	r18, r24
    2ea2:	39 1f       	adc	r19, r25
    2ea4:	4a 1f       	adc	r20, r26
    2ea6:	5b 1f       	adc	r21, r27
    2ea8:	c1 2c       	mov	r12, r1
    2eaa:	d1 2c       	mov	r13, r1
    2eac:	76 01       	movw	r14, r12
    2eae:	00 e0       	ldi	r16, 0x00	; 0
    2eb0:	10 e0       	ldi	r17, 0x00	; 0
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	c5 01       	movw	r24, r10
    2eb6:	f2 dd       	rcall	.-1052   	; 0x2a9c <xTimerGenericCommand>
    2eb8:	27 c0       	rjmp	.+78     	; 0x2f08 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2eba:	d5 01       	movw	r26, r10
    2ebc:	56 96       	adiw	r26, 0x16	; 22
    2ebe:	8c 91       	ld	r24, X
    2ec0:	56 97       	sbiw	r26, 0x16	; 22
    2ec2:	8e 7f       	andi	r24, 0xFE	; 254
    2ec4:	56 96       	adiw	r26, 0x16	; 22
    2ec6:	8c 93       	st	X, r24
                        break;
    2ec8:	1f c0       	rjmp	.+62     	; 0x2f08 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2eca:	f5 01       	movw	r30, r10
    2ecc:	86 89       	ldd	r24, Z+22	; 0x16
    2ece:	81 60       	ori	r24, 0x01	; 1
    2ed0:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2ed2:	4a 81       	ldd	r20, Y+2	; 0x02
    2ed4:	5b 81       	ldd	r21, Y+3	; 0x03
    2ed6:	6c 81       	ldd	r22, Y+4	; 0x04
    2ed8:	7d 81       	ldd	r23, Y+5	; 0x05
    2eda:	46 87       	std	Z+14, r20	; 0x0e
    2edc:	57 87       	std	Z+15, r21	; 0x0f
    2ede:	60 8b       	std	Z+16, r22	; 0x10
    2ee0:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2ee2:	40 0f       	add	r20, r16
    2ee4:	51 1f       	adc	r21, r17
    2ee6:	62 1f       	adc	r22, r18
    2ee8:	73 1f       	adc	r23, r19
    2eea:	68 01       	movw	r12, r16
    2eec:	79 01       	movw	r14, r18
    2eee:	c5 01       	movw	r24, r10
    2ef0:	42 dd       	rcall	.-1404   	; 0x2976 <prvInsertTimerInActiveList>
                        break;
    2ef2:	0a c0       	rjmp	.+20     	; 0x2f08 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2ef4:	f5 01       	movw	r30, r10
    2ef6:	86 89       	ldd	r24, Z+22	; 0x16
    2ef8:	81 fd       	sbrc	r24, 1
    2efa:	04 c0       	rjmp	.+8      	; 0x2f04 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2efc:	c5 01       	movw	r24, r10
    2efe:	0e 94 75 02 	call	0x4ea	; 0x4ea <vPortFree>
    2f02:	02 c0       	rjmp	.+4      	; 0x2f08 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f04:	8e 7f       	andi	r24, 0xFE	; 254
    2f06:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	a9 01       	movw	r20, r18
    2f0e:	be 01       	movw	r22, r28
    2f10:	6f 5f       	subi	r22, 0xFF	; 255
    2f12:	7f 4f       	sbci	r23, 0xFF	; 255
    2f14:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <xTimerQueue>
    2f18:	90 91 14 12 	lds	r25, 0x1214	; 0x801214 <xTimerQueue+0x1>
    2f1c:	0e 94 53 06 	call	0xca6	; 0xca6 <xQueueReceive>
    2f20:	81 11       	cpse	r24, r1
    2f22:	70 cf       	rjmp	.-288    	; 0x2e04 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2f24:	28 96       	adiw	r28, 0x08	; 8
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	ff 90       	pop	r15
    2f3a:	ef 90       	pop	r14
    2f3c:	df 90       	pop	r13
    2f3e:	cf 90       	pop	r12
    2f40:	bf 90       	pop	r11
    2f42:	af 90       	pop	r10
    2f44:	08 95       	ret

00002f46 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2f46:	08 95       	ret

00002f48 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2f48:	84 b1       	in	r24, 0x04	; 4
    2f4a:	80 68       	ori	r24, 0x80	; 128
    2f4c:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2f4e:	85 b1       	in	r24, 0x05	; 5
    2f50:	80 68       	ori	r24, 0x80	; 128
    2f52:	85 b9       	out	0x05, r24	; 5
    2f54:	08 95       	ret

00002f56 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2f56:	83 b1       	in	r24, 0x03	; 3
    2f58:	80 68       	ori	r24, 0x80	; 128
    2f5a:	83 b9       	out	0x03, r24	; 3
    2f5c:	08 95       	ret

00002f5e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2f5e:	f4 df       	rcall	.-24     	; 0x2f48 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f60:	2f ef       	ldi	r18, 0xFF	; 255
    2f62:	80 e7       	ldi	r24, 0x70	; 112
    2f64:	92 e0       	ldi	r25, 0x02	; 2
    2f66:	21 50       	subi	r18, 0x01	; 1
    2f68:	80 40       	sbci	r24, 0x00	; 0
    2f6a:	90 40       	sbci	r25, 0x00	; 0
    2f6c:	e1 f7       	brne	.-8      	; 0x2f66 <vApplicationMallocFailedHook+0x8>
    2f6e:	00 c0       	rjmp	.+0      	; 0x2f70 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2f70:	00 00       	nop
    2f72:	f1 df       	rcall	.-30     	; 0x2f56 <prvBlinkMainLed>
    2f74:	f5 cf       	rjmp	.-22     	; 0x2f60 <vApplicationMallocFailedHook+0x2>

00002f76 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2f76:	e8 df       	rcall	.-48     	; 0x2f48 <prvSetMainLedOn>
    2f78:	2f ef       	ldi	r18, 0xFF	; 255
    2f7a:	87 ea       	ldi	r24, 0xA7	; 167
    2f7c:	91 e6       	ldi	r25, 0x61	; 97
    2f7e:	21 50       	subi	r18, 0x01	; 1
    2f80:	80 40       	sbci	r24, 0x00	; 0
    2f82:	90 40       	sbci	r25, 0x00	; 0
    2f84:	e1 f7       	brne	.-8      	; 0x2f7e <vApplicationStackOverflowHook+0x8>
    2f86:	00 c0       	rjmp	.+0      	; 0x2f88 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2f88:	00 00       	nop
    2f8a:	e5 df       	rcall	.-54     	; 0x2f56 <prvBlinkMainLed>
    2f8c:	f5 cf       	rjmp	.-22     	; 0x2f78 <vApplicationStackOverflowHook+0x2>

00002f8e <enqueueCO2Measure>:
void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
}


void enqueueCO2Measure(uint16_t ppm){
    2f8e:	0f 93       	push	r16
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	1f 92       	push	r1
    2f96:	1f 92       	push	r1
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	9a 83       	std	Y+2, r25	; 0x02
    2f9e:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    2fa0:	00 e0       	ldi	r16, 0x00	; 0
    2fa2:	2f ef       	ldi	r18, 0xFF	; 255
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	a9 01       	movw	r20, r18
    2fa8:	be 01       	movw	r22, r28
    2faa:	6f 5f       	subi	r22, 0xFF	; 255
    2fac:	7f 4f       	sbci	r23, 0xFF	; 255
    2fae:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <xQueueCO2>
    2fb2:	90 91 b0 13 	lds	r25, 0x13B0	; 0x8013b0 <xQueueCO2+0x1>
    2fb6:	0e 94 88 05 	call	0xb10	; 0xb10 <xQueueGenericSend>
}
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	0f 91       	pop	r16
    2fc4:	08 95       	ret

00002fc6 <initializeCO2Queue>:
#include "../measuredrivers/header/CO2Handler.h"

QueueHandle_t xQueueCO2;

void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
    2fc6:	40 e0       	ldi	r20, 0x00	; 0
    2fc8:	62 e0       	ldi	r22, 0x02	; 2
    2fca:	8a e0       	ldi	r24, 0x0A	; 10
    2fcc:	0e 94 65 05 	call	0xaca	; 0xaca <xQueueGenericCreate>
    2fd0:	90 93 b0 13 	sts	0x13B0, r25	; 0x8013b0 <xQueueCO2+0x1>
    2fd4:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <xQueueCO2>
    2fd8:	08 95       	ret

00002fda <co2Measure>:
}

void co2Measure() {
	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
    2fda:	0e 94 ad 20 	call	0x415a	; 0x415a <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
    2fde:	81 11       	cpse	r24, r1
    2fe0:	05 c0       	rjmp	.+10     	; 0x2fec <co2Measure+0x12>
	{
		mh_z19_injectCallBack(enqueueCO2Measure);
    2fe2:	87 ec       	ldi	r24, 0xC7	; 199
    2fe4:	97 e1       	ldi	r25, 0x17	; 23
    2fe6:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <mh_z19_injectCallBack>
    2fea:	08 95       	ret
	}
	else
	{
		puts("det gik galt");
    2fec:	87 ea       	ldi	r24, 0xA7	; 167
    2fee:	92 e0       	ldi	r25, 0x02	; 2
    2ff0:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <puts>
    2ff4:	08 95       	ret

00002ff6 <dequeueCO2Measure>:
	}
}


uint16_t dequeueCO2Measure(){
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	1f 92       	push	r1
    2ffc:	1f 92       	push	r1
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	
	xQueueReceive(xQueueCO2, &ppm, 1500);
    3002:	2c ed       	ldi	r18, 0xDC	; 220
    3004:	35 e0       	ldi	r19, 0x05	; 5
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	be 01       	movw	r22, r28
    300c:	6f 5f       	subi	r22, 0xFF	; 255
    300e:	7f 4f       	sbci	r23, 0xFF	; 255
    3010:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <xQueueCO2>
    3014:	90 91 b0 13 	lds	r25, 0x13B0	; 0x8013b0 <xQueueCO2+0x1>
    3018:	0e 94 53 06 	call	0xca6	; 0xca6 <xQueueReceive>
	return ppm;
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	df 91       	pop	r29
    3026:	cf 91       	pop	r28
    3028:	08 95       	ret

0000302a <initializeTempHumQueues>:
QueueHandle_t xQueueHum;


void initializeTempHumQueues()
{
	xQueueTemp = xQueueCreate(10, sizeof(int16_t));
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	62 e0       	ldi	r22, 0x02	; 2
    302e:	8a e0       	ldi	r24, 0x0A	; 10
    3030:	0e 94 65 05 	call	0xaca	; 0xaca <xQueueGenericCreate>
    3034:	90 93 b4 13 	sts	0x13B4, r25	; 0x8013b4 <xQueueTemp+0x1>
    3038:	80 93 b3 13 	sts	0x13B3, r24	; 0x8013b3 <xQueueTemp>
	xQueueHum = xQueueCreate(10, sizeof(uint16_t));
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	62 e0       	ldi	r22, 0x02	; 2
    3040:	8a e0       	ldi	r24, 0x0A	; 10
    3042:	0e 94 65 05 	call	0xaca	; 0xaca <xQueueGenericCreate>
    3046:	90 93 b2 13 	sts	0x13B2, r25	; 0x8013b2 <xQueueHum+0x1>
    304a:	80 93 b1 13 	sts	0x13B1, r24	; 0x8013b1 <xQueueHum>
    304e:	08 95       	ret

00003050 <enqueueTemperature>:
}

void enqueueTemperature(int16_t temp){
    3050:	0f 93       	push	r16
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	1f 92       	push	r1
    3058:	1f 92       	push	r1
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	9a 83       	std	Y+2, r25	; 0x02
    3060:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueTemp, (void*)&temp, portMAX_DELAY);
    3062:	00 e0       	ldi	r16, 0x00	; 0
    3064:	2f ef       	ldi	r18, 0xFF	; 255
    3066:	3f ef       	ldi	r19, 0xFF	; 255
    3068:	a9 01       	movw	r20, r18
    306a:	be 01       	movw	r22, r28
    306c:	6f 5f       	subi	r22, 0xFF	; 255
    306e:	7f 4f       	sbci	r23, 0xFF	; 255
    3070:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <xQueueTemp>
    3074:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <xQueueTemp+0x1>
    3078:	0e 94 88 05 	call	0xb10	; 0xb10 <xQueueGenericSend>
}
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	0f 91       	pop	r16
    3086:	08 95       	ret

00003088 <enqueueHumidity>:

void enqueueHumidity(uint16_t hum){
    3088:	0f 93       	push	r16
    308a:	cf 93       	push	r28
    308c:	df 93       	push	r29
    308e:	1f 92       	push	r1
    3090:	1f 92       	push	r1
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    3096:	9a 83       	std	Y+2, r25	; 0x02
    3098:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueHum, (void*)&hum, portMAX_DELAY);	
    309a:	00 e0       	ldi	r16, 0x00	; 0
    309c:	2f ef       	ldi	r18, 0xFF	; 255
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	a9 01       	movw	r20, r18
    30a2:	be 01       	movw	r22, r28
    30a4:	6f 5f       	subi	r22, 0xFF	; 255
    30a6:	7f 4f       	sbci	r23, 0xFF	; 255
    30a8:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xQueueHum>
    30ac:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xQueueHum+0x1>
    30b0:	0e 94 88 05 	call	0xb10	; 0xb10 <xQueueGenericSend>
}
    30b4:	0f 90       	pop	r0
    30b6:	0f 90       	pop	r0
    30b8:	df 91       	pop	r29
    30ba:	cf 91       	pop	r28
    30bc:	0f 91       	pop	r16
    30be:	08 95       	ret

000030c0 <tempHumMeasure>:


void tempHumMeasure()
{
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	00 d0       	rcall	.+0      	; 0x30ce <tempHumMeasure+0xe>
    30ce:	1f 92       	push	r1
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5/portTICK_PERIOD_MS; 
	const TickType_t xFrequency2 = 50/portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    30d4:	0e 94 c7 0c 	call	0x198e	; 0x198e <xTaskGetTickCount>
    30d8:	69 83       	std	Y+1, r22	; 0x01
    30da:	7a 83       	std	Y+2, r23	; 0x02
    30dc:	8b 83       	std	Y+3, r24	; 0x03
    30de:	9c 83       	std	Y+4, r25	; 0x04

	if(HIH8120_OK != hih8120_wakeup())
    30e0:	f6 d2       	rcall	.+1516   	; 0x36ce <hih8120_wakeup>
    30e2:	88 23       	and	r24, r24
    30e4:	41 f0       	breq	.+16     	; 0x30f6 <tempHumMeasure+0x36>
	{
		printf("wakeup gik galt");
    30e6:	84 eb       	ldi	r24, 0xB4	; 180
    30e8:	92 e0       	ldi	r25, 0x02	; 2
    30ea:	9f 93       	push	r25
    30ec:	8f 93       	push	r24
    30ee:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency2 );
    30f6:	43 e0       	ldi	r20, 0x03	; 3
    30f8:	50 e0       	ldi	r21, 0x00	; 0
    30fa:	60 e0       	ldi	r22, 0x00	; 0
    30fc:	70 e0       	ldi	r23, 0x00	; 0
    30fe:	ce 01       	movw	r24, r28
    3100:	01 96       	adiw	r24, 0x01	; 1
    3102:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xTaskDelayUntil>
	if(HIH8120_OK != hih8120_measure())
    3106:	f8 d2       	rcall	.+1520   	; 0x36f8 <hih8120_measure>
    3108:	88 23       	and	r24, r24
    310a:	41 f0       	breq	.+16     	; 0x311c <tempHumMeasure+0x5c>
	{
		printf("measure gik galt");
    310c:	84 ec       	ldi	r24, 0xC4	; 196
    310e:	92 e0       	ldi	r25, 0x02	; 2
    3110:	9f 93       	push	r25
    3112:	8f 93       	push	r24
    3114:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	ba 01       	movw	r22, r20
    3122:	ce 01       	movw	r24, r28
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xTaskDelayUntil>
	
	uint16_t humidity = hih8120_getHumidity();
    312a:	f7 d2       	rcall	.+1518   	; 0x371a <hih8120_getHumidity>
    312c:	36 d2       	rcall	.+1132   	; 0x359a <__fixunssfsi>
	int16_t temp = hih8120_getTemperature();
    312e:	8b 01       	movw	r16, r22
    3130:	09 d3       	rcall	.+1554   	; 0x3744 <hih8120_getTemperature>
    3132:	2e d2       	rcall	.+1116   	; 0x3590 <__fixsfsi>
    3134:	7b 01       	movw	r14, r22
    3136:	00 36       	cpi	r16, 0x60	; 96
	
	if (humidity > 95 && temp > 100) {
    3138:	11 05       	cpc	r17, r1
    313a:	88 f0       	brcs	.+34     	; 0x315e <tempHumMeasure+0x9e>
    313c:	85 e6       	ldi	r24, 0x65	; 101
    313e:	e8 16       	cp	r14, r24
    3140:	f1 04       	cpc	r15, r1
    3142:	6c f0       	brlt	.+26     	; 0x315e <tempHumMeasure+0x9e>
    3144:	40 e0       	ldi	r20, 0x00	; 0
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	ba 01       	movw	r22, r20
    314a:	ce 01       	movw	r24, r28
    314c:	01 96       	adiw	r24, 0x01	; 1
			
		humidity = hih8120_getHumidity();
    314e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xTaskDelayUntil>
    3152:	e3 d2       	rcall	.+1478   	; 0x371a <hih8120_getHumidity>
		temp = hih8120_getTemperature();
    3154:	22 d2       	rcall	.+1092   	; 0x359a <__fixunssfsi>
    3156:	8b 01       	movw	r16, r22
    3158:	f5 d2       	rcall	.+1514   	; 0x3744 <hih8120_getTemperature>
    315a:	1a d2       	rcall	.+1076   	; 0x3590 <__fixsfsi>
    315c:	7b 01       	movw	r14, r22
	}
	
	enqueueHumidity(humidity);
    315e:	c8 01       	movw	r24, r16
    3160:	93 df       	rcall	.-218    	; 0x3088 <enqueueHumidity>
    3162:	c7 01       	movw	r24, r14
	enqueueTemperature(temp);
    3164:	75 df       	rcall	.-278    	; 0x3050 <enqueueTemperature>
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
}
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	08 95       	ret

0000317c <dequeueTempMeasure>:
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29


int16_t dequeueTempMeasure(){
    3180:	1f 92       	push	r1
    3182:	1f 92       	push	r1
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	
	xQueueReceive(xQueueTemp, &temp, 1500);
    3188:	2c ed       	ldi	r18, 0xDC	; 220
    318a:	35 e0       	ldi	r19, 0x05	; 5
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	50 e0       	ldi	r21, 0x00	; 0
    3190:	be 01       	movw	r22, r28
    3192:	6f 5f       	subi	r22, 0xFF	; 255
    3194:	7f 4f       	sbci	r23, 0xFF	; 255
    3196:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <xQueueTemp>
    319a:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <xQueueTemp+0x1>
    319e:	0e 94 53 06 	call	0xca6	; 0xca6 <xQueueReceive>
	return temp;
}
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	9a 81       	ldd	r25, Y+2	; 0x02
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28
    31ae:	08 95       	ret

000031b0 <dequeueHumidityMeasure>:

uint16_t dequeueHumidityMeasure(){
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	1f 92       	push	r1
    31b6:	1f 92       	push	r1
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
	uint16_t hum;
	
	xQueueReceive(xQueueHum, &hum, 1500);
    31bc:	2c ed       	ldi	r18, 0xDC	; 220
    31be:	35 e0       	ldi	r19, 0x05	; 5
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	50 e0       	ldi	r21, 0x00	; 0
    31c4:	be 01       	movw	r22, r28
    31c6:	6f 5f       	subi	r22, 0xFF	; 255
    31c8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ca:	80 91 b1 13 	lds	r24, 0x13B1	; 0x8013b1 <xQueueHum>
    31ce:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <xQueueHum+0x1>
    31d2:	0e 94 53 06 	call	0xca6	; 0xca6 <xQueueReceive>
	return hum;
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	9a 81       	ldd	r25, Y+2	; 0x02
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	08 95       	ret

000031e4 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    31e4:	0f 93       	push	r16
    31e6:	1f 93       	push	r17
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	64 97       	sbiw	r28, 0x14	; 20
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	f8 94       	cli
    31f6:	de bf       	out	0x3e, r29	; 62
    31f8:	0f be       	out	0x3f, r0	; 63
    31fa:	cd bf       	out	0x3d, r28	; 61

	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3202:	28 d4       	rcall	.+2128   	; 0x3a54 <lora_driver_rn2483FactoryReset>
    3204:	a4 d6       	rcall	.+3400   	; 0x3f4e <lora_driver_mapReturnCodeToText>
    3206:	9f 93       	push	r25
    3208:	8f 93       	push	r24
    320a:	85 ed       	ldi	r24, 0xD5	; 213
    320c:	92 e0       	ldi	r25, 0x02	; 2
    320e:	9f 93       	push	r25
    3210:	8f 93       	push	r24
    3212:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3216:	9c d5       	rcall	.+2872   	; 0x3d50 <lora_driver_configureToEu868>
    3218:	9a d6       	rcall	.+3380   	; 0x3f4e <lora_driver_mapReturnCodeToText>
    321a:	9f 93       	push	r25
    321c:	8f 93       	push	r24
    321e:	88 ee       	ldi	r24, 0xE8	; 232
    3220:	92 e0       	ldi	r25, 0x02	; 2
    3222:	9f 93       	push	r25
    3224:	8f 93       	push	r24
    3226:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>
    322a:	8e 01       	movw	r16, r28
    322c:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    322e:	1f 4f       	sbci	r17, 0xFF	; 255
    3230:	c8 01       	movw	r24, r16
    3232:	22 d4       	rcall	.+2116   	; 0x3a78 <lora_driver_getRn2483Hweui>
    3234:	8c d6       	rcall	.+3352   	; 0x3f4e <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3236:	1f 93       	push	r17
    3238:	0f 93       	push	r16
    323a:	9f 93       	push	r25
    323c:	8f 93       	push	r24
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	93 e0       	ldi	r25, 0x03	; 3
    3242:	9f 93       	push	r25
    3244:	8f 93       	push	r24
    3246:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    324a:	c8 01       	movw	r24, r16
    324c:	31 d4       	rcall	.+2146   	; 0x3ab0 <lora_driver_setDeviceIdentifier>
    324e:	7f d6       	rcall	.+3326   	; 0x3f4e <lora_driver_mapReturnCodeToText>
    3250:	9f 93       	push	r25
    3252:	8f 93       	push	r24
    3254:	1f 93       	push	r17
    3256:	0f 93       	push	r16
    3258:	85 e1       	ldi	r24, 0x15	; 21
    325a:	93 e0       	ldi	r25, 0x03	; 3
    325c:	9f 93       	push	r25
    325e:	8f 93       	push	r24
    3260:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3264:	a8 01       	movw	r20, r16
    3266:	6a e2       	ldi	r22, 0x2A	; 42
    3268:	73 e0       	ldi	r23, 0x03	; 3
    326a:	8b e4       	ldi	r24, 0x4B	; 75
    326c:	93 e0       	ldi	r25, 0x03	; 3
    326e:	4e d6       	rcall	.+3228   	; 0x3f0c <lora_driver_setOtaaIdentity>
    3270:	6e d6       	rcall	.+3292   	; 0x3f4e <lora_driver_mapReturnCodeToText>
    3272:	9f 93       	push	r25
    3274:	8f 93       	push	r24
    3276:	1f 93       	push	r17
    3278:	0f 93       	push	r16
    327a:	8a e2       	ldi	r24, 0x2A	; 42
    327c:	93 e0       	ldi	r25, 0x03	; 3
    327e:	9f 93       	push	r25
    3280:	8f 93       	push	r24
    3282:	8b e4       	ldi	r24, 0x4B	; 75
    3284:	93 e0       	ldi	r25, 0x03	; 3
    3286:	9f 93       	push	r25
    3288:	8f 93       	push	r24
    328a:	8c e5       	ldi	r24, 0x5C	; 92
    328c:	93 e0       	ldi	r25, 0x03	; 3
    328e:	9f 93       	push	r25
    3290:	8f 93       	push	r24
    3292:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3296:	3f d4       	rcall	.+2174   	; 0x3b16 <lora_driver_saveMac>
    3298:	5a d6       	rcall	.+3252   	; 0x3f4e <lora_driver_mapReturnCodeToText>
    329a:	9f 93       	push	r25
    329c:	8f 93       	push	r24
    329e:	82 e9       	ldi	r24, 0x92	; 146
    32a0:	93 e0       	ldi	r25, 0x03	; 3
    32a2:	9f 93       	push	r25
    32a4:	8f 93       	push	r24
    32a6:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	29 d5       	rcall	.+2642   	; 0x3d0a <lora_driver_setAdaptiveDataRate>
    32b8:	4a d6       	rcall	.+3220   	; 0x3f4e <lora_driver_mapReturnCodeToText>
    32ba:	9f 93       	push	r25
    32bc:	8f 93       	push	r24
    32be:	81 ea       	ldi	r24, 0xA1	; 161
    32c0:	93 e0       	ldi	r25, 0x03	; 3
    32c2:	9f 93       	push	r25
    32c4:	8f 93       	push	r24
    32c6:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    32ca:	84 ef       	ldi	r24, 0xF4	; 244
    32cc:	91 e0       	ldi	r25, 0x01	; 1
    32ce:	28 d5       	rcall	.+2640   	; 0x3d20 <lora_driver_setReceiveDelay>
    32d0:	3e d6       	rcall	.+3196   	; 0x3f4e <lora_driver_mapReturnCodeToText>
    32d2:	9f 93       	push	r25
    32d4:	8f 93       	push	r24
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	8f 93       	push	r24
    32da:	84 ef       	ldi	r24, 0xF4	; 244
    32dc:	8f 93       	push	r24
    32de:	82 ec       	ldi	r24, 0xC2	; 194
    32e0:	93 e0       	ldi	r25, 0x03	; 3
    32e2:	9f 93       	push	r25
    32e4:	8f 93       	push	r24
    32e6:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    32f4:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	14 d4       	rcall	.+2088   	; 0x3b22 <lora_driver_join>
    32fa:	08 2f       	mov	r16, r24
    32fc:	28 d6       	rcall	.+3152   	; 0x3f4e <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    32fe:	9f 93       	push	r25
    3300:	8f 93       	push	r24
    3302:	1f 92       	push	r1
    3304:	1f 93       	push	r17
    3306:	82 ee       	ldi	r24, 0xE2	; 226
    3308:	93 e0       	ldi	r25, 0x03	; 3
    330a:	9f 93       	push	r25
    330c:	8f 93       	push	r24
    330e:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	08 30       	cpi	r16, 0x08	; 8
    3320:	59 f0       	breq	.+22     	; 0x3338 <_lora_setup+0x154>
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3328:	66 e3       	ldi	r22, 0x36	; 54
    332a:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <vTaskDelay>
    3334:	11 50       	subi	r17, 0x01	; 1
    3336:	f9 f6       	brne	.-66     	; 0x32f6 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3338:	08 30       	cpi	r16, 0x08	; 8
    333a:	41 f4       	brne	.+16     	; 0x334c <_lora_setup+0x168>

	if (rc == LORA_ACCEPTED)
    333c:	82 e0       	ldi	r24, 0x02	; 2
    333e:	94 e0       	ldi	r25, 0x04	; 4
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		printf("\t We have been accepted \n");
    3340:	0e 94 a3 2b 	call	0x5746	; 0x5746 <puts>
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <status_leds_ledOn>
		status_leds_ledOn(led_ST2); // OPTIONAL
    334a:	09 c0       	rjmp	.+18     	; 0x335e <_lora_setup+0x17a>
    334c:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    334e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3358:	0e 94 80 03 	call	0x700	; 0x700 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    335c:	fd cf       	rjmp	.-6      	; 0x3358 <_lora_setup+0x174>
    335e:	64 96       	adiw	r28, 0x14	; 20
    3360:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3362:	f8 94       	cli
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	0f 91       	pop	r16
    3372:	08 95       	ret

00003374 <lora_handler_task>:
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3378:	00 d0       	rcall	.+0      	; 0x337a <lora_handler_task+0x6>
    337a:	1f 92       	push	r1
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	5a d3       	rcall	.+1716   	; 0x3a38 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3384:	62 e0       	ldi	r22, 0x02	; 2
    3386:	70 e0       	ldi	r23, 0x00	; 0
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	52 d3       	rcall	.+1700   	; 0x3a38 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3394:	66 e9       	ldi	r22, 0x96	; 150
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    33a0:	04 d3       	rcall	.+1544   	; 0x39aa <lora_driver_flushBuffers>

	_lora_setup();
    33a2:	20 df       	rcall	.-448    	; 0x31e4 <_lora_setup>
    33a4:	ef e2       	ldi	r30, 0x2F	; 47

	// DEFINING SIZE OF PAYLOAD
	_uplink_payload.len = 8;
    33a6:	f2 e1       	ldi	r31, 0x12	; 18
    33a8:	88 e0       	ldi	r24, 0x08	; 8
    33aa:	81 83       	std	Z+1, r24	; 0x01
    33ac:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    33ae:	80 83       	st	Z, r24
    33b0:	0e 94 c7 0c 	call	0x198e	; 0x198e <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(150000UL); // UNDER TESTING 30000 (30 sec) Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    33b4:	69 83       	std	Y+1, r22	; 0x01
    33b6:	7a 83       	std	Y+2, r23	; 0x02
    33b8:	8b 83       	std	Y+3, r24	; 0x03
    33ba:	9c 83       	std	Y+4, r25	; 0x04
    33bc:	8b e1       	ldi	r24, 0x1B	; 27

	for(;;)
	{
		uint16_t growbroId = 111;
		
		printf("\t going into delay \n");
    33be:	94 e0       	ldi	r25, 0x04	; 4
    33c0:	0e 94 a3 2b 	call	0x5746	; 0x5746 <puts>
    33c4:	44 e5       	ldi	r20, 0x54	; 84
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    33c6:	54 e2       	ldi	r21, 0x24	; 36
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	70 e0       	ldi	r23, 0x00	; 0
    33cc:	ce 01       	movw	r24, r28
    33ce:	01 96       	adiw	r24, 0x01	; 1
    33d0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xTaskDelayUntil>
    33d4:	0e 94 4b 01 	call	0x296	; 0x296 <dequeueSharedData>
		
		// Creating struct and dequeueing data
		SharedData_t sharedData;
		sharedData = dequeueSharedData();
    33d8:	8c 01       	movw	r16, r24
    33da:	dc 01       	movw	r26, r24
		
		printf("DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
    33dc:	13 96       	adiw	r26, 0x03	; 3
    33de:	8c 91       	ld	r24, X
    33e0:	13 97       	sbiw	r26, 0x03	; 3
    33e2:	8f 93       	push	r24
    33e4:	12 96       	adiw	r26, 0x02	; 2
    33e6:	8c 91       	ld	r24, X
    33e8:	12 97       	sbiw	r26, 0x02	; 2
    33ea:	8f 93       	push	r24
    33ec:	11 96       	adiw	r26, 0x01	; 1
    33ee:	8c 91       	ld	r24, X
    33f0:	11 97       	sbiw	r26, 0x01	; 1
    33f2:	8f 93       	push	r24
    33f4:	8c 91       	ld	r24, X
    33f6:	8f 93       	push	r24
    33f8:	15 96       	adiw	r26, 0x05	; 5
    33fa:	8c 91       	ld	r24, X
    33fc:	15 97       	sbiw	r26, 0x05	; 5
    33fe:	8f 93       	push	r24
    3400:	14 96       	adiw	r26, 0x04	; 4
    3402:	8c 91       	ld	r24, X
    3404:	8f 93       	push	r24
    3406:	8f e2       	ldi	r24, 0x2F	; 47
    3408:	94 e0       	ldi	r25, 0x04	; 4
    340a:	9f 93       	push	r25
    340c:	8f 93       	push	r24
    340e:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>
    3412:	ef e2       	ldi	r30, 0x2F	; 47
		
		// CREATING OUR OWN PAYLOAD
		_uplink_payload.bytes[0] = growbroId >> 8;
    3414:	f2 e1       	ldi	r31, 0x12	; 18
    3416:	12 82       	std	Z+2, r1	; 0x02
    3418:	8f e6       	ldi	r24, 0x6F	; 111
		_uplink_payload.bytes[1] = growbroId & 0xFF;
    341a:	83 83       	std	Z+3, r24	; 0x03
    341c:	d8 01       	movw	r26, r16
		_uplink_payload.bytes[2] = sharedData->co2 >> 8;
    341e:	11 96       	adiw	r26, 0x01	; 1
    3420:	8c 91       	ld	r24, X
    3422:	11 97       	sbiw	r26, 0x01	; 1
    3424:	84 83       	std	Z+4, r24	; 0x04
    3426:	8c 91       	ld	r24, X
		_uplink_payload.bytes[3] = sharedData->co2 & 0xFF;
    3428:	85 83       	std	Z+5, r24	; 0x05
    342a:	15 96       	adiw	r26, 0x05	; 5
		_uplink_payload.bytes[4] = sharedData->humidity >> 8;
    342c:	8c 91       	ld	r24, X
    342e:	15 97       	sbiw	r26, 0x05	; 5
    3430:	86 83       	std	Z+6, r24	; 0x06
    3432:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[5] = sharedData->humidity & 0xFF;
    3434:	8c 91       	ld	r24, X
    3436:	14 97       	sbiw	r26, 0x04	; 4
    3438:	87 83       	std	Z+7, r24	; 0x07
    343a:	13 96       	adiw	r26, 0x03	; 3
		_uplink_payload.bytes[6] = sharedData->temperature >> 8;
    343c:	8c 91       	ld	r24, X
    343e:	13 97       	sbiw	r26, 0x03	; 3
    3440:	80 87       	std	Z+8, r24	; 0x08
    3442:	12 96       	adiw	r26, 0x02	; 2
		_uplink_payload.bytes[7] = sharedData->temperature & 0xFF;
    3444:	8c 91       	ld	r24, X
    3446:	81 87       	std	Z+9, r24	; 0x09
    3448:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    344a:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <status_leds_shortPuls>
		
		// SENDING PAYLOAD
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    344e:	6f e2       	ldi	r22, 0x2F	; 47
    3450:	72 e1       	ldi	r23, 0x12	; 18
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	8f d3       	rcall	.+1822   	; 0x3b74 <lora_driver_sendUploadMessage>
    3456:	7b d5       	rcall	.+2806   	; 0x3f4e <lora_driver_mapReturnCodeToText>
    3458:	9f 93       	push	r25
    345a:	8f 93       	push	r24
    345c:	8a e5       	ldi	r24, 0x5A	; 90
    345e:	94 e0       	ldi	r25, 0x04	; 4
    3460:	9f 93       	push	r25
    3462:	8f 93       	push	r24
    3464:	0e 94 90 2b 	call	0x5720	; 0x5720 <printf>
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	a4 cf       	rjmp	.-184    	; 0x33bc <lora_handler_task+0x48>

00003474 <lora_handler_initialise>:
    3474:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3476:	ff 92       	push	r15
    3478:	0f 93       	push	r16
	xTaskCreate(
    347a:	e1 2c       	mov	r14, r1
    347c:	f1 2c       	mov	r15, r1
    347e:	08 2f       	mov	r16, r24
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	48 e8       	ldi	r20, 0x88	; 136
    3486:	51 e0       	ldi	r21, 0x01	; 1
    3488:	6f e6       	ldi	r22, 0x6F	; 111
    348a:	74 e0       	ldi	r23, 0x04	; 4
    348c:	8a eb       	ldi	r24, 0xBA	; 186
    348e:	99 e1       	ldi	r25, 0x19	; 25
    3490:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3494:	0f 91       	pop	r16
    3496:	ff 90       	pop	r15
    3498:	ef 90       	pop	r14
    349a:	08 95       	ret

0000349c <takeMeasure>:
	,  NULL );	
}


void takeMeasure(void *pvParameters)
{
    349c:	cf 93       	push	r28
    349e:	df 93       	push	r29
    34a0:	00 d0       	rcall	.+0      	; 0x34a2 <takeMeasure+0x6>
    34a2:	1f 92       	push	r1
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5000/portTICK_PERIOD_MS; // 60 s

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    34a8:	0e 94 c7 0c 	call	0x198e	; 0x198e <xTaskGetTickCount>
    34ac:	69 83       	std	Y+1, r22	; 0x01
    34ae:	7a 83       	std	Y+2, r23	; 0x02
    34b0:	8b 83       	std	Y+3, r24	; 0x03
    34b2:	9c 83       	std	Y+4, r25	; 0x04
		
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    34b4:	48 e3       	ldi	r20, 0x38	; 56
    34b6:	51 e0       	ldi	r21, 0x01	; 1
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	ce 01       	movw	r24, r28
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xTaskDelayUntil>
		tempHumMeasure();	
    34c4:	fd dd       	rcall	.-1030   	; 0x30c0 <tempHumMeasure>
		co2Measure(); // Call CO2HandlerImpl to take measure
    34c6:	89 dd       	rcall	.-1262   	; 0x2fda <co2Measure>
    34c8:	f5 cf       	rjmp	.-22     	; 0x34b4 <takeMeasure+0x18>

000034ca <enqueueMeasures>:
    34ca:	cf 93       	push	r28
	}
}

void enqueueMeasures(void *pvParameters)
{
    34cc:	df 93       	push	r29
    34ce:	00 d0       	rcall	.+0      	; 0x34d0 <enqueueMeasures+0x6>
    34d0:	1f 92       	push	r1
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 55000/portTICK_PERIOD_MS; // 65 s

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    34d6:	0e 94 c7 0c 	call	0x198e	; 0x198e <xTaskGetTickCount>
    34da:	69 83       	std	Y+1, r22	; 0x01
    34dc:	7a 83       	std	Y+2, r23	; 0x02
    34de:	8b 83       	std	Y+3, r24	; 0x03
    34e0:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    34e2:	4d e6       	ldi	r20, 0x6D	; 109
    34e4:	5d e0       	ldi	r21, 0x0D	; 13
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	ce 01       	movw	r24, r28
    34ec:	01 96       	adiw	r24, 0x01	; 1
    34ee:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <xTaskDelayUntil>
		enqueueSharedData(); // Call SharedDataQueueImpl to enqueue the measures
    34f2:	0e 94 11 01 	call	0x222	; 0x222 <enqueueSharedData>
    34f6:	f5 cf       	rjmp	.-22     	; 0x34e2 <enqueueMeasures+0x18>

000034f8 <setupTasks>:
void takeMeasure( void *pvParameters );
void enqueueMeasures( void *pvParameters );


void setupTasks(void) // Can only setup 2 tasks, memory problems?
{
    34f8:	ef 92       	push	r14
    34fa:	ff 92       	push	r15
    34fc:	0f 93       	push	r16
	
	xTaskCreate(
    34fe:	e1 2c       	mov	r14, r1
    3500:	f1 2c       	mov	r15, r1
    3502:	00 e0       	ldi	r16, 0x00	; 0
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 ec       	ldi	r20, 0xC0	; 192
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	66 e7       	ldi	r22, 0x76	; 118
    350e:	74 e0       	ldi	r23, 0x04	; 4
    3510:	8e e4       	ldi	r24, 0x4E	; 78
    3512:	9a e1       	ldi	r25, 0x1A	; 26
    3514:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 ec       	ldi	r20, 0xC0	; 192
    351e:	50 e0       	ldi	r21, 0x00	; 0
    3520:	62 e8       	ldi	r22, 0x82	; 130
    3522:	74 e0       	ldi	r23, 0x04	; 4
    3524:	85 e6       	ldi	r24, 0x65	; 101
    3526:	9a e1       	ldi	r25, 0x1A	; 26
    3528:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTaskCreate>
	,  "enqueueMeasures"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );	
}
    352c:	0f 91       	pop	r16
    352e:	ff 90       	pop	r15
    3530:	ef 90       	pop	r14
    3532:	08 95       	ret

00003534 <startTasks>:
}


void startTasks()
{
	setupTasks();
    3534:	e1 df       	rcall	.-62     	; 0x34f8 <setupTasks>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3536:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <vTaskStartScheduler>
    353a:	08 95       	ret

0000353c <initialiseSystem>:


/*-----------------------------------------------------------*/
void initialiseSystem()
{
printf("Program Started!!\n");
    353c:	82 e9       	ldi	r24, 0x92	; 146
    353e:	94 e0       	ldi	r25, 0x04	; 4
    3540:	0e 94 a3 2b 	call	0x5746	; 0x5746 <puts>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3544:	81 b1       	in	r24, 0x01	; 1
    3546:	81 68       	ori	r24, 0x81	; 129
    3548:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	0e 94 94 24 	call	0x4928	; 0x4928 <stdio_initialise>
	
	// Initialize queues
	initializeCO2Queue();
    3552:	39 dd       	rcall	.-1422   	; 0x2fc6 <initializeCO2Queue>
	initializeTempHumQueues();
    3554:	6a dd       	rcall	.-1324   	; 0x302a <initializeTempHumQueues>
    3556:	0e 94 08 01 	call	0x210	; 0x210 <initializeSharedDataQueue>
	initializeSharedDataQueue();

	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    355a:	83 e0       	ldi	r24, 0x03	; 3
    355c:	d4 d5       	rcall	.+2984   	; 0x4106 <mh_z19_initialise>
	hih8120_initialise();
    355e:	9f d0       	rcall	.+318    	; 0x369e <hih8120_initialise>
    3560:	85 e0       	ldi	r24, 0x05	; 5



	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3562:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <status_leds_initialise>
    3566:	41 e0       	ldi	r20, 0x01	; 1
	// Initialise the LoRaWAN driver without down-link buffer
	MessageBufferHandle_t downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3568:	60 e0       	ldi	r22, 0x00	; 0
    356a:	70 e0       	ldi	r23, 0x00	; 0
    356c:	8c e2       	ldi	r24, 0x2C	; 44
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 94 41 08 	call	0x1082	; 0x1082 <xStreamBufferGenericCreate>
	lora_driver_initialise(1, NULL);
    3574:	60 e0       	ldi	r22, 0x00	; 0
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	1e d2       	rcall	.+1084   	; 0x39b8 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    357c:	83 e0       	ldi	r24, 0x03	; 3
    357e:	7a cf       	rjmp	.-268    	; 0x3474 <lora_handler_initialise>
    3580:	08 95       	ret

00003582 <main>:
    3582:	dc df       	rcall	.-72     	; 0x353c <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    3584:	82 e9       	ldi	r24, 0x92	; 146
    3586:	94 e0       	ldi	r25, 0x04	; 4
    3588:	0e 94 a3 2b 	call	0x5746	; 0x5746 <puts>
	startTasks();
    358c:	d3 df       	rcall	.-90     	; 0x3534 <startTasks>
    358e:	ff cf       	rjmp	.-2      	; 0x358e <main+0xc>

00003590 <__fixsfsi>:
    3590:	04 d0       	rcall	.+8      	; 0x359a <__fixunssfsi>
    3592:	68 94       	set
    3594:	b1 11       	cpse	r27, r1
    3596:	50 c0       	rjmp	.+160    	; 0x3638 <__fp_szero>
    3598:	08 95       	ret

0000359a <__fixunssfsi>:
    359a:	33 d0       	rcall	.+102    	; 0x3602 <__fp_splitA>
    359c:	88 f0       	brcs	.+34     	; 0x35c0 <__fixunssfsi+0x26>
    359e:	9f 57       	subi	r25, 0x7F	; 127
    35a0:	90 f0       	brcs	.+36     	; 0x35c6 <__fixunssfsi+0x2c>
    35a2:	b9 2f       	mov	r27, r25
    35a4:	99 27       	eor	r25, r25
    35a6:	b7 51       	subi	r27, 0x17	; 23
    35a8:	a0 f0       	brcs	.+40     	; 0x35d2 <__fixunssfsi+0x38>
    35aa:	d1 f0       	breq	.+52     	; 0x35e0 <__fixunssfsi+0x46>
    35ac:	66 0f       	add	r22, r22
    35ae:	77 1f       	adc	r23, r23
    35b0:	88 1f       	adc	r24, r24
    35b2:	99 1f       	adc	r25, r25
    35b4:	1a f0       	brmi	.+6      	; 0x35bc <__fixunssfsi+0x22>
    35b6:	ba 95       	dec	r27
    35b8:	c9 f7       	brne	.-14     	; 0x35ac <__fixunssfsi+0x12>
    35ba:	12 c0       	rjmp	.+36     	; 0x35e0 <__fixunssfsi+0x46>
    35bc:	b1 30       	cpi	r27, 0x01	; 1
    35be:	81 f0       	breq	.+32     	; 0x35e0 <__fixunssfsi+0x46>
    35c0:	3a d0       	rcall	.+116    	; 0x3636 <__fp_zero>
    35c2:	b1 e0       	ldi	r27, 0x01	; 1
    35c4:	08 95       	ret
    35c6:	37 c0       	rjmp	.+110    	; 0x3636 <__fp_zero>
    35c8:	67 2f       	mov	r22, r23
    35ca:	78 2f       	mov	r23, r24
    35cc:	88 27       	eor	r24, r24
    35ce:	b8 5f       	subi	r27, 0xF8	; 248
    35d0:	39 f0       	breq	.+14     	; 0x35e0 <__fixunssfsi+0x46>
    35d2:	b9 3f       	cpi	r27, 0xF9	; 249
    35d4:	cc f3       	brlt	.-14     	; 0x35c8 <__fixunssfsi+0x2e>
    35d6:	86 95       	lsr	r24
    35d8:	77 95       	ror	r23
    35da:	67 95       	ror	r22
    35dc:	b3 95       	inc	r27
    35de:	d9 f7       	brne	.-10     	; 0x35d6 <__fixunssfsi+0x3c>
    35e0:	3e f4       	brtc	.+14     	; 0x35f0 <__fixunssfsi+0x56>
    35e2:	90 95       	com	r25
    35e4:	80 95       	com	r24
    35e6:	70 95       	com	r23
    35e8:	61 95       	neg	r22
    35ea:	7f 4f       	sbci	r23, 0xFF	; 255
    35ec:	8f 4f       	sbci	r24, 0xFF	; 255
    35ee:	9f 4f       	sbci	r25, 0xFF	; 255
    35f0:	08 95       	ret

000035f2 <__fp_split3>:
    35f2:	57 fd       	sbrc	r21, 7
    35f4:	90 58       	subi	r25, 0x80	; 128
    35f6:	44 0f       	add	r20, r20
    35f8:	55 1f       	adc	r21, r21
    35fa:	59 f0       	breq	.+22     	; 0x3612 <__fp_splitA+0x10>
    35fc:	5f 3f       	cpi	r21, 0xFF	; 255
    35fe:	71 f0       	breq	.+28     	; 0x361c <__fp_splitA+0x1a>
    3600:	47 95       	ror	r20

00003602 <__fp_splitA>:
    3602:	88 0f       	add	r24, r24
    3604:	97 fb       	bst	r25, 7
    3606:	99 1f       	adc	r25, r25
    3608:	61 f0       	breq	.+24     	; 0x3622 <__fp_splitA+0x20>
    360a:	9f 3f       	cpi	r25, 0xFF	; 255
    360c:	79 f0       	breq	.+30     	; 0x362c <__fp_splitA+0x2a>
    360e:	87 95       	ror	r24
    3610:	08 95       	ret
    3612:	12 16       	cp	r1, r18
    3614:	13 06       	cpc	r1, r19
    3616:	14 06       	cpc	r1, r20
    3618:	55 1f       	adc	r21, r21
    361a:	f2 cf       	rjmp	.-28     	; 0x3600 <__fp_split3+0xe>
    361c:	46 95       	lsr	r20
    361e:	f1 df       	rcall	.-30     	; 0x3602 <__fp_splitA>
    3620:	08 c0       	rjmp	.+16     	; 0x3632 <__fp_splitA+0x30>
    3622:	16 16       	cp	r1, r22
    3624:	17 06       	cpc	r1, r23
    3626:	18 06       	cpc	r1, r24
    3628:	99 1f       	adc	r25, r25
    362a:	f1 cf       	rjmp	.-30     	; 0x360e <__fp_splitA+0xc>
    362c:	86 95       	lsr	r24
    362e:	71 05       	cpc	r23, r1
    3630:	61 05       	cpc	r22, r1
    3632:	08 94       	sec
    3634:	08 95       	ret

00003636 <__fp_zero>:
    3636:	e8 94       	clt

00003638 <__fp_szero>:
    3638:	bb 27       	eor	r27, r27
    363a:	66 27       	eor	r22, r22
    363c:	77 27       	eor	r23, r23
    363e:	cb 01       	movw	r24, r22
    3640:	97 f9       	bld	r25, 7
    3642:	08 95       	ret

00003644 <_hihTwiCallback>:
    3644:	65 30       	cpi	r22, 0x05	; 5
    3646:	f1 f4       	brne	.+60     	; 0x3684 <_hihTwiCallback+0x40>
    3648:	fa 01       	movw	r30, r20
    364a:	80 81       	ld	r24, Z
    364c:	8f 73       	andi	r24, 0x3F	; 63
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	98 2f       	mov	r25, r24
    3652:	88 27       	eor	r24, r24
    3654:	21 81       	ldd	r18, Z+1	; 0x01
    3656:	82 2b       	or	r24, r18
    3658:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    365c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	f0 e4       	ldi	r31, 0x40	; 64
    3664:	8f 9f       	mul	r24, r31
    3666:	c0 01       	movw	r24, r0
    3668:	11 24       	eor	r1, r1
    366a:	fa 01       	movw	r30, r20
    366c:	23 81       	ldd	r18, Z+3	; 0x03
    366e:	26 95       	lsr	r18
    3670:	26 95       	lsr	r18
    3672:	82 2b       	or	r24, r18
    3674:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3678:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	80 93 45 12 	sts	0x1245, r24	; 0x801245 <_measuringIsReady>
    3682:	08 95       	ret
    3684:	64 30       	cpi	r22, 0x04	; 4
    3686:	51 f0       	breq	.+20     	; 0x369c <_hihTwiCallback+0x58>
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	90 e4       	ldi	r25, 0x40	; 64
    368c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3690:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3694:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3698:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    369c:	08 95       	ret

0000369e <hih8120_initialise>:
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	02 e2       	ldi	r16, 0x22	; 34
    36a4:	1b e1       	ldi	r17, 0x1B	; 27
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	34 e2       	ldi	r19, 0x24	; 36
    36aa:	44 ef       	ldi	r20, 0xF4	; 244
    36ac:	50 e0       	ldi	r21, 0x00	; 0
    36ae:	60 e0       	ldi	r22, 0x00	; 0
    36b0:	87 e2       	ldi	r24, 0x27	; 39
    36b2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <twiCreate>
    36b6:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <_hih8120Handler+0x1>
    36ba:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <_hih8120Handler>
    36be:	21 e0       	ldi	r18, 0x01	; 1
    36c0:	89 2b       	or	r24, r25
    36c2:	09 f0       	breq	.+2      	; 0x36c6 <hih8120_initialise+0x28>
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	82 2f       	mov	r24, r18
    36c8:	1f 91       	pop	r17
    36ca:	0f 91       	pop	r16
    36cc:	08 95       	ret

000036ce <hih8120_wakeup>:
    36ce:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <_hih8120Handler>
    36d2:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <_hih8120Handler+0x1>
    36d6:	00 97       	sbiw	r24, 0x00	; 0
    36d8:	59 f0       	breq	.+22     	; 0x36f0 <hih8120_wakeup+0x22>
    36da:	40 e0       	ldi	r20, 0x00	; 0
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <twiTransmit>
    36e4:	84 30       	cpi	r24, 0x04	; 4
    36e6:	31 f4       	brne	.+12     	; 0x36f4 <hih8120_wakeup+0x26>
    36e8:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <_measuringIsReady>
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	08 95       	ret
    36f0:	82 e0       	ldi	r24, 0x02	; 2
    36f2:	08 95       	ret
    36f4:	83 e0       	ldi	r24, 0x03	; 3
    36f6:	08 95       	ret

000036f8 <hih8120_measure>:
    36f8:	80 91 46 12 	lds	r24, 0x1246	; 0x801246 <_hih8120Handler>
    36fc:	90 91 47 12 	lds	r25, 0x1247	; 0x801247 <_hih8120Handler+0x1>
    3700:	00 97       	sbiw	r24, 0x00	; 0
    3702:	39 f0       	breq	.+14     	; 0x3712 <hih8120_measure+0x1a>
    3704:	64 e0       	ldi	r22, 0x04	; 4
    3706:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <twiReceive>
    370a:	85 30       	cpi	r24, 0x05	; 5
    370c:	21 f0       	breq	.+8      	; 0x3716 <hih8120_measure+0x1e>
    370e:	83 e0       	ldi	r24, 0x03	; 3
    3710:	08 95       	ret
    3712:	82 e0       	ldi	r24, 0x02	; 2
    3714:	08 95       	ret
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	08 95       	ret

0000371a <hih8120_getHumidity>:
    371a:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    371e:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	0e 94 fd 28 	call	0x51fa	; 0x51fa <__floatunsisf>
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	48 ec       	ldi	r20, 0xC8	; 200
    3730:	52 e4       	ldi	r21, 0x42	; 66
    3732:	0e 94 62 29 	call	0x52c4	; 0x52c4 <__mulsf3>
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	38 ef       	ldi	r19, 0xF8	; 248
    373a:	4f e7       	ldi	r20, 0x7F	; 127
    373c:	56 e4       	ldi	r21, 0x46	; 70
    373e:	0c 94 92 28 	jmp	0x5124	; 0x5124 <__divsf3>
    3742:	08 95       	ret

00003744 <hih8120_getTemperature>:
    3744:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3748:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0e 94 fd 28 	call	0x51fa	; 0x51fa <__floatunsisf>
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	45 e2       	ldi	r20, 0x25	; 37
    375a:	53 e4       	ldi	r21, 0x43	; 67
    375c:	0e 94 62 29 	call	0x52c4	; 0x52c4 <__mulsf3>
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	38 ef       	ldi	r19, 0xF8	; 248
    3764:	4f e7       	ldi	r20, 0x7F	; 127
    3766:	56 e4       	ldi	r21, 0x46	; 70
    3768:	0e 94 92 28 	call	0x5124	; 0x5124 <__divsf3>
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e2       	ldi	r20, 0x20	; 32
    3772:	52 e4       	ldi	r21, 0x42	; 66
    3774:	0c 94 2b 28 	jmp	0x5056	; 0x5056 <__subsf3>
    3778:	08 95       	ret

0000377a <_serialCallBack>:
    377a:	0f 93       	push	r16
    377c:	1f 93       	push	r17
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
    3782:	1f 92       	push	r1
    3784:	1f 92       	push	r1
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	8c 01       	movw	r16, r24
    378c:	19 82       	std	Y+1, r1	; 0x01
    378e:	2d c0       	rjmp	.+90     	; 0x37ea <_serialCallBack+0x70>
    3790:	e0 91 ac 12 	lds	r30, 0x12AC	; 0x8012ac <rec_buf_inp.2878>
    3794:	ec 32       	cpi	r30, 0x2C	; 44
    3796:	50 f4       	brcc	.+20     	; 0x37ac <_serialCallBack+0x32>
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	8e 0f       	add	r24, r30
    379c:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <rec_buf_inp.2878>
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	e2 52       	subi	r30, 0x22	; 34
    37a4:	fd 4e       	sbci	r31, 0xED	; 237
    37a6:	8a 81       	ldd	r24, Y+2	; 0x02
    37a8:	80 83       	st	Z, r24
    37aa:	02 c0       	rjmp	.+4      	; 0x37b0 <_serialCallBack+0x36>
    37ac:	10 92 ac 12 	sts	0x12AC, r1	; 0x8012ac <rec_buf_inp.2878>
    37b0:	8a 81       	ldd	r24, Y+2	; 0x02
    37b2:	8a 30       	cpi	r24, 0x0A	; 10
    37b4:	d1 f4       	brne	.+52     	; 0x37ea <_serialCallBack+0x70>
    37b6:	40 91 ac 12 	lds	r20, 0x12AC	; 0x8012ac <rec_buf_inp.2878>
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	fa 01       	movw	r30, r20
    37be:	e4 52       	subi	r30, 0x24	; 36
    37c0:	fd 4e       	sbci	r31, 0xED	; 237
    37c2:	10 82       	st	Z, r1
    37c4:	41 50       	subi	r20, 0x01	; 1
    37c6:	51 09       	sbc	r21, r1
    37c8:	9e 01       	movw	r18, r28
    37ca:	2f 5f       	subi	r18, 0xFF	; 255
    37cc:	3f 4f       	sbci	r19, 0xFF	; 255
    37ce:	6e ed       	ldi	r22, 0xDE	; 222
    37d0:	72 e1       	ldi	r23, 0x12	; 18
    37d2:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    37d6:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    37da:	0e 94 66 09 	call	0x12cc	; 0x12cc <xStreamBufferSendFromISR>
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	81 11       	cpse	r24, r1
    37e2:	0e 94 80 03 	call	0x700	; 0x700 <vPortYield>
    37e6:	10 92 ac 12 	sts	0x12AC, r1	; 0x8012ac <rec_buf_inp.2878>
    37ea:	be 01       	movw	r22, r28
    37ec:	6e 5f       	subi	r22, 0xFE	; 254
    37ee:	7f 4f       	sbci	r23, 0xFF	; 255
    37f0:	c8 01       	movw	r24, r16
    37f2:	04 d6       	rcall	.+3080   	; 0x43fc <serial_getByte>
    37f4:	88 23       	and	r24, r24
    37f6:	61 f2       	breq	.-104    	; 0x3790 <_serialCallBack+0x16>
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	1f 91       	pop	r17
    3802:	0f 91       	pop	r16
    3804:	08 95       	ret

00003806 <_uploadMessage>:
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	8c 01       	movw	r16, r24
    3810:	eb 01       	movw	r28, r22
    3812:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    3816:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    381a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <xStreamBufferReset>
    381e:	b8 01       	movw	r22, r16
    3820:	88 e4       	ldi	r24, 0x48	; 72
    3822:	92 e1       	ldi	r25, 0x12	; 18
    3824:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <strcpy>
    3828:	20 97       	sbiw	r28, 0x00	; 0
    382a:	79 f0       	breq	.+30     	; 0x384a <_uploadMessage+0x44>
    382c:	e8 e4       	ldi	r30, 0x48	; 72
    382e:	f2 e1       	ldi	r31, 0x12	; 18
    3830:	01 90       	ld	r0, Z+
    3832:	00 20       	and	r0, r0
    3834:	e9 f7       	brne	.-6      	; 0x3830 <_uploadMessage+0x2a>
    3836:	31 97       	sbiw	r30, 0x01	; 1
    3838:	80 e2       	ldi	r24, 0x20	; 32
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	80 83       	st	Z, r24
    3840:	be 01       	movw	r22, r28
    3842:	88 e4       	ldi	r24, 0x48	; 72
    3844:	92 e1       	ldi	r25, 0x12	; 18
    3846:	0e 94 66 2b 	call	0x56cc	; 0x56cc <strcat>
    384a:	e8 e4       	ldi	r30, 0x48	; 72
    384c:	f2 e1       	ldi	r31, 0x12	; 18
    384e:	df 01       	movw	r26, r30
    3850:	0d 90       	ld	r0, X+
    3852:	00 20       	and	r0, r0
    3854:	e9 f7       	brne	.-6      	; 0x3850 <_uploadMessage+0x4a>
    3856:	11 97       	sbiw	r26, 0x01	; 1
    3858:	8d e0       	ldi	r24, 0x0D	; 13
    385a:	9a e0       	ldi	r25, 0x0A	; 10
    385c:	11 96       	adiw	r26, 0x01	; 1
    385e:	9c 93       	st	X, r25
    3860:	8e 93       	st	-X, r24
    3862:	12 96       	adiw	r26, 0x02	; 2
    3864:	1c 92       	st	X, r1
    3866:	01 90       	ld	r0, Z+
    3868:	00 20       	and	r0, r0
    386a:	e9 f7       	brne	.-6      	; 0x3866 <_uploadMessage+0x60>
    386c:	31 97       	sbiw	r30, 0x01	; 1
    386e:	e8 54       	subi	r30, 0x48	; 72
    3870:	f2 41       	sbci	r31, 0x12	; 18
    3872:	ae 2f       	mov	r26, r30
    3874:	88 e4       	ldi	r24, 0x48	; 72
    3876:	92 e1       	ldi	r25, 0x12	; 18
    3878:	ac 01       	movw	r20, r24
    387a:	6a 2f       	mov	r22, r26
    387c:	80 91 b1 12 	lds	r24, 0x12B1	; 0x8012b1 <_rn2483_serial>
    3880:	90 91 b2 12 	lds	r25, 0x12B2	; 0x8012b2 <_rn2483_serial+0x1>
    3884:	66 d5       	rcall	.+2764   	; 0x4352 <serial_sendBytes>
    3886:	81 11       	cpse	r24, r1
    3888:	11 c0       	rjmp	.+34     	; 0x38ac <_uploadMessage+0xa6>
    388a:	08 e2       	ldi	r16, 0x28	; 40
    388c:	15 e0       	ldi	r17, 0x05	; 5
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	4d e2       	ldi	r20, 0x2D	; 45
    3894:	50 e0       	ldi	r21, 0x00	; 0
    3896:	68 e3       	ldi	r22, 0x38	; 56
    3898:	73 e1       	ldi	r23, 0x13	; 19
    389a:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    389e:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    38a2:	0e 94 aa 09 	call	0x1354	; 0x1354 <xStreamBufferReceive>
    38a6:	88 e3       	ldi	r24, 0x38	; 56
    38a8:	93 e1       	ldi	r25, 0x13	; 19
    38aa:	02 c0       	rjmp	.+4      	; 0x38b0 <_uploadMessage+0xaa>
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	df 91       	pop	r29
    38b2:	cf 91       	pop	r28
    38b4:	1f 91       	pop	r17
    38b6:	0f 91       	pop	r16
    38b8:	08 95       	ret

000038ba <_reply2ReturnCode>:
    38ba:	2f 92       	push	r2
    38bc:	3f 92       	push	r3
    38be:	4f 92       	push	r4
    38c0:	5f 92       	push	r5
    38c2:	6f 92       	push	r6
    38c4:	7f 92       	push	r7
    38c6:	8f 92       	push	r8
    38c8:	9f 92       	push	r9
    38ca:	af 92       	push	r10
    38cc:	bf 92       	push	r11
    38ce:	cf 92       	push	r12
    38d0:	df 92       	push	r13
    38d2:	ef 92       	push	r14
    38d4:	ff 92       	push	r15
    38d6:	0f 93       	push	r16
    38d8:	1f 93       	push	r17
    38da:	cf 93       	push	r28
    38dc:	df 93       	push	r29
    38de:	5c 01       	movw	r10, r24
    38e0:	fc 01       	movw	r30, r24
    38e2:	01 90       	ld	r0, Z+
    38e4:	00 20       	and	r0, r0
    38e6:	e9 f7       	brne	.-6      	; 0x38e2 <_reply2ReturnCode+0x28>
    38e8:	31 97       	sbiw	r30, 0x01	; 1
    38ea:	6f 01       	movw	r12, r30
    38ec:	c8 1a       	sub	r12, r24
    38ee:	d9 0a       	sbc	r13, r25
    38f0:	5c 2c       	mov	r5, r12
    38f2:	0f 2e       	mov	r0, r31
    38f4:	fd e3       	ldi	r31, 0x3D	; 61
    38f6:	8f 2e       	mov	r8, r31
    38f8:	f7 e0       	ldi	r31, 0x07	; 7
    38fa:	9f 2e       	mov	r9, r31
    38fc:	f0 2d       	mov	r31, r0
    38fe:	e1 2c       	mov	r14, r1
    3900:	f1 2c       	mov	r15, r1
    3902:	4c 2c       	mov	r4, r12
    3904:	37 01       	movw	r6, r14
    3906:	f4 01       	movw	r30, r8
    3908:	01 81       	ldd	r16, Z+1	; 0x01
    390a:	12 81       	ldd	r17, Z+2	; 0x02
    390c:	e8 01       	movw	r28, r16
    390e:	09 90       	ld	r0, Y+
    3910:	00 20       	and	r0, r0
    3912:	e9 f7       	brne	.-6      	; 0x390e <_reply2ReturnCode+0x54>
    3914:	21 97       	sbiw	r28, 0x01	; 1
    3916:	c0 1b       	sub	r28, r16
    3918:	d1 0b       	sbc	r29, r17
    391a:	3c 2e       	mov	r3, r28
    391c:	f9 e0       	ldi	r31, 0x09	; 9
    391e:	cf 16       	cp	r12, r31
    3920:	d1 04       	cpc	r13, r1
    3922:	58 f0       	brcs	.+22     	; 0x393a <_reply2ReturnCode+0x80>
    3924:	f4 01       	movw	r30, r8
    3926:	20 80       	ld	r2, Z
    3928:	fe e0       	ldi	r31, 0x0E	; 14
    392a:	2f 12       	cpse	r2, r31
    392c:	06 c0       	rjmp	.+12     	; 0x393a <_reply2ReturnCode+0x80>
    392e:	b8 01       	movw	r22, r16
    3930:	c5 01       	movw	r24, r10
    3932:	0e 94 41 2b 	call	0x5682	; 0x5682 <strcasestr>
    3936:	89 2b       	or	r24, r25
    3938:	09 f5       	brne	.+66     	; 0x397c <_reply2ReturnCode+0xc2>
    393a:	44 2d       	mov	r20, r4
    393c:	35 14       	cp	r3, r5
    393e:	08 f4       	brcc	.+2      	; 0x3942 <_reply2ReturnCode+0x88>
    3940:	4c 2f       	mov	r20, r28
    3942:	50 e0       	ldi	r21, 0x00	; 0
    3944:	b8 01       	movw	r22, r16
    3946:	c5 01       	movw	r24, r10
    3948:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <strncasecmp>
    394c:	89 2b       	or	r24, r25
    394e:	49 f4       	brne	.+18     	; 0x3962 <_reply2ReturnCode+0xa8>
    3950:	f3 01       	movw	r30, r6
    3952:	ee 0f       	add	r30, r30
    3954:	ff 1f       	adc	r31, r31
    3956:	e6 0d       	add	r30, r6
    3958:	f7 1d       	adc	r31, r7
    395a:	e3 5c       	subi	r30, 0xC3	; 195
    395c:	f8 4f       	sbci	r31, 0xF8	; 248
    395e:	20 80       	ld	r2, Z
    3960:	0d c0       	rjmp	.+26     	; 0x397c <_reply2ReturnCode+0xc2>
    3962:	8f ef       	ldi	r24, 0xFF	; 255
    3964:	e8 1a       	sub	r14, r24
    3966:	f8 0a       	sbc	r15, r24
    3968:	e3 e0       	ldi	r30, 0x03	; 3
    396a:	8e 0e       	add	r8, r30
    396c:	91 1c       	adc	r9, r1
    396e:	f1 e1       	ldi	r31, 0x11	; 17
    3970:	ef 16       	cp	r14, r31
    3972:	f1 04       	cpc	r15, r1
    3974:	39 f6       	brne	.-114    	; 0x3904 <_reply2ReturnCode+0x4a>
    3976:	68 94       	set
    3978:	22 24       	eor	r2, r2
    397a:	24 f8       	bld	r2, 4
    397c:	82 2d       	mov	r24, r2
    397e:	df 91       	pop	r29
    3980:	cf 91       	pop	r28
    3982:	1f 91       	pop	r17
    3984:	0f 91       	pop	r16
    3986:	ff 90       	pop	r15
    3988:	ef 90       	pop	r14
    398a:	df 90       	pop	r13
    398c:	cf 90       	pop	r12
    398e:	bf 90       	pop	r11
    3990:	af 90       	pop	r10
    3992:	9f 90       	pop	r9
    3994:	8f 90       	pop	r8
    3996:	7f 90       	pop	r7
    3998:	6f 90       	pop	r6
    399a:	5f 90       	pop	r5
    399c:	4f 90       	pop	r4
    399e:	3f 90       	pop	r3
    39a0:	2f 90       	pop	r2
    39a2:	08 95       	ret

000039a4 <_uploadMessageRc>:
    39a4:	30 df       	rcall	.-416    	; 0x3806 <_uploadMessage>
    39a6:	89 cf       	rjmp	.-238    	; 0x38ba <_reply2ReturnCode>
    39a8:	08 95       	ret

000039aa <lora_driver_flushBuffers>:
    39aa:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    39ae:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    39b2:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <xStreamBufferReset>
    39b6:	08 95       	ret

000039b8 <lora_driver_initialise>:
    39b8:	8f 92       	push	r8
    39ba:	9f 92       	push	r9
    39bc:	af 92       	push	r10
    39be:	cf 92       	push	r12
    39c0:	ef 92       	push	r14
    39c2:	0f 93       	push	r16
    39c4:	1f 93       	push	r17
    39c6:	cf 93       	push	r28
    39c8:	c8 2f       	mov	r28, r24
    39ca:	8b 01       	movw	r16, r22
    39cc:	41 e0       	ldi	r20, 0x01	; 1
    39ce:	60 e0       	ldi	r22, 0x00	; 0
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	88 ec       	ldi	r24, 0xC8	; 200
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 41 08 	call	0x1082	; 0x1082 <xStreamBufferGenericCreate>
    39da:	90 93 b0 12 	sts	0x12B0, r25	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    39de:	80 93 af 12 	sts	0x12AF, r24	; 0x8012af <_serialReplyBufferHandle>
    39e2:	10 93 ae 12 	sts	0x12AE, r17	; 0x8012ae <_downlinkMessageBuffer+0x1>
    39e6:	00 93 ad 12 	sts	0x12AD, r16	; 0x8012ad <_downlinkMessageBuffer>
    39ea:	0f 2e       	mov	r0, r31
    39ec:	fd eb       	ldi	r31, 0xBD	; 189
    39ee:	8f 2e       	mov	r8, r31
    39f0:	fb e1       	ldi	r31, 0x1B	; 27
    39f2:	9f 2e       	mov	r9, r31
    39f4:	f0 2d       	mov	r31, r0
    39f6:	68 94       	set
    39f8:	aa 24       	eor	r10, r10
    39fa:	a6 f8       	bld	r10, 6
    39fc:	68 94       	set
    39fe:	cc 24       	eor	r12, r12
    3a00:	c6 f8       	bld	r12, 6
    3a02:	e1 2c       	mov	r14, r1
    3a04:	00 e0       	ldi	r16, 0x00	; 0
    3a06:	23 e0       	ldi	r18, 0x03	; 3
    3a08:	40 e0       	ldi	r20, 0x00	; 0
    3a0a:	51 ee       	ldi	r21, 0xE1	; 225
    3a0c:	60 e0       	ldi	r22, 0x00	; 0
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	8c 2f       	mov	r24, r28
    3a12:	d2 d3       	rcall	.+1956   	; 0x41b8 <serial_create>
    3a14:	90 93 b2 12 	sts	0x12B2, r25	; 0x8012b2 <_rn2483_serial+0x1>
    3a18:	80 93 b1 12 	sts	0x12B1, r24	; 0x8012b1 <_rn2483_serial>
    3a1c:	e7 e0       	ldi	r30, 0x07	; 7
    3a1e:	f1 e0       	ldi	r31, 0x01	; 1
    3a20:	80 81       	ld	r24, Z
    3a22:	80 61       	ori	r24, 0x10	; 16
    3a24:	80 83       	st	Z, r24
    3a26:	cf 91       	pop	r28
    3a28:	1f 91       	pop	r17
    3a2a:	0f 91       	pop	r16
    3a2c:	ef 90       	pop	r14
    3a2e:	cf 90       	pop	r12
    3a30:	af 90       	pop	r10
    3a32:	9f 90       	pop	r9
    3a34:	8f 90       	pop	r8
    3a36:	08 95       	ret

00003a38 <lora_driver_resetRn2483>:
    3a38:	88 23       	and	r24, r24
    3a3a:	31 f0       	breq	.+12     	; 0x3a48 <lora_driver_resetRn2483+0x10>
    3a3c:	e8 e0       	ldi	r30, 0x08	; 8
    3a3e:	f1 e0       	ldi	r31, 0x01	; 1
    3a40:	80 81       	ld	r24, Z
    3a42:	8f 7e       	andi	r24, 0xEF	; 239
    3a44:	80 83       	st	Z, r24
    3a46:	08 95       	ret
    3a48:	e8 e0       	ldi	r30, 0x08	; 8
    3a4a:	f1 e0       	ldi	r31, 0x01	; 1
    3a4c:	80 81       	ld	r24, Z
    3a4e:	80 61       	ori	r24, 0x10	; 16
    3a50:	80 83       	st	Z, r24
    3a52:	08 95       	ret

00003a54 <lora_driver_rn2483FactoryReset>:
    3a54:	60 e0       	ldi	r22, 0x00	; 0
    3a56:	70 e0       	ldi	r23, 0x00	; 0
    3a58:	83 ec       	ldi	r24, 0xC3	; 195
    3a5a:	94 e0       	ldi	r25, 0x04	; 4
    3a5c:	d4 de       	rcall	.-600    	; 0x3806 <_uploadMessage>
    3a5e:	e8 e3       	ldi	r30, 0x38	; 56
    3a60:	f3 e1       	ldi	r31, 0x13	; 19
    3a62:	01 90       	ld	r0, Z+
    3a64:	00 20       	and	r0, r0
    3a66:	e9 f7       	brne	.-6      	; 0x3a62 <lora_driver_rn2483FactoryReset+0xe>
    3a68:	31 97       	sbiw	r30, 0x01	; 1
    3a6a:	e8 53       	subi	r30, 0x38	; 56
    3a6c:	f3 41       	sbci	r31, 0x13	; 19
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	75 97       	sbiw	r30, 0x15	; 21
    3a72:	08 f0       	brcs	.+2      	; 0x3a76 <lora_driver_rn2483FactoryReset+0x22>
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	08 95       	ret

00003a78 <lora_driver_getRn2483Hweui>:
    3a78:	cf 93       	push	r28
    3a7a:	df 93       	push	r29
    3a7c:	ec 01       	movw	r28, r24
    3a7e:	60 e0       	ldi	r22, 0x00	; 0
    3a80:	70 e0       	ldi	r23, 0x00	; 0
    3a82:	84 ed       	ldi	r24, 0xD4	; 212
    3a84:	94 e0       	ldi	r25, 0x04	; 4
    3a86:	bf de       	rcall	.-642    	; 0x3806 <_uploadMessage>
    3a88:	e8 e3       	ldi	r30, 0x38	; 56
    3a8a:	f3 e1       	ldi	r31, 0x13	; 19
    3a8c:	01 90       	ld	r0, Z+
    3a8e:	00 20       	and	r0, r0
    3a90:	e9 f7       	brne	.-6      	; 0x3a8c <lora_driver_getRn2483Hweui+0x14>
    3a92:	e9 54       	subi	r30, 0x49	; 73
    3a94:	f3 41       	sbci	r31, 0x13	; 19
    3a96:	39 f4       	brne	.+14     	; 0x3aa6 <lora_driver_getRn2483Hweui+0x2e>
    3a98:	68 e3       	ldi	r22, 0x38	; 56
    3a9a:	73 e1       	ldi	r23, 0x13	; 19
    3a9c:	ce 01       	movw	r24, r28
    3a9e:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <strcpy>
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	02 c0       	rjmp	.+4      	; 0x3aaa <lora_driver_getRn2483Hweui+0x32>
    3aa6:	18 82       	st	Y, r1
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	08 95       	ret

00003ab0 <lora_driver_setDeviceIdentifier>:
    3ab0:	fc 01       	movw	r30, r24
    3ab2:	01 90       	ld	r0, Z+
    3ab4:	00 20       	and	r0, r0
    3ab6:	e9 f7       	brne	.-6      	; 0x3ab2 <lora_driver_setDeviceIdentifier+0x2>
    3ab8:	9f 01       	movw	r18, r30
    3aba:	21 51       	subi	r18, 0x11	; 17
    3abc:	31 09       	sbc	r19, r1
    3abe:	28 17       	cp	r18, r24
    3ac0:	39 07       	cpc	r19, r25
    3ac2:	29 f4       	brne	.+10     	; 0x3ace <lora_driver_setDeviceIdentifier+0x1e>
    3ac4:	bc 01       	movw	r22, r24
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	95 e0       	ldi	r25, 0x05	; 5
    3aca:	6c cf       	rjmp	.-296    	; 0x39a4 <_uploadMessageRc>
    3acc:	08 95       	ret
    3ace:	89 e0       	ldi	r24, 0x09	; 9
    3ad0:	08 95       	ret

00003ad2 <lora_driver_setApplicationIdentifier>:
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	01 90       	ld	r0, Z+
    3ad6:	00 20       	and	r0, r0
    3ad8:	e9 f7       	brne	.-6      	; 0x3ad4 <lora_driver_setApplicationIdentifier+0x2>
    3ada:	9f 01       	movw	r18, r30
    3adc:	21 51       	subi	r18, 0x11	; 17
    3ade:	31 09       	sbc	r19, r1
    3ae0:	28 17       	cp	r18, r24
    3ae2:	39 07       	cpc	r19, r25
    3ae4:	29 f4       	brne	.+10     	; 0x3af0 <lora_driver_setApplicationIdentifier+0x1e>
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	81 e1       	ldi	r24, 0x11	; 17
    3aea:	95 e0       	ldi	r25, 0x05	; 5
    3aec:	5b cf       	rjmp	.-330    	; 0x39a4 <_uploadMessageRc>
    3aee:	08 95       	ret
    3af0:	89 e0       	ldi	r24, 0x09	; 9
    3af2:	08 95       	ret

00003af4 <lora_driver_setApplicationKey>:
    3af4:	fc 01       	movw	r30, r24
    3af6:	01 90       	ld	r0, Z+
    3af8:	00 20       	and	r0, r0
    3afa:	e9 f7       	brne	.-6      	; 0x3af6 <lora_driver_setApplicationKey+0x2>
    3afc:	9f 01       	movw	r18, r30
    3afe:	21 52       	subi	r18, 0x21	; 33
    3b00:	31 09       	sbc	r19, r1
    3b02:	28 17       	cp	r18, r24
    3b04:	39 07       	cpc	r19, r25
    3b06:	29 f4       	brne	.+10     	; 0x3b12 <lora_driver_setApplicationKey+0x1e>
    3b08:	bc 01       	movw	r22, r24
    3b0a:	80 e2       	ldi	r24, 0x20	; 32
    3b0c:	95 e0       	ldi	r25, 0x05	; 5
    3b0e:	4a cf       	rjmp	.-364    	; 0x39a4 <_uploadMessageRc>
    3b10:	08 95       	ret
    3b12:	89 e0       	ldi	r24, 0x09	; 9
    3b14:	08 95       	ret

00003b16 <lora_driver_saveMac>:
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	70 e0       	ldi	r23, 0x00	; 0
    3b1a:	8f e5       	ldi	r24, 0x5F	; 95
    3b1c:	95 e0       	ldi	r25, 0x05	; 5
    3b1e:	42 cf       	rjmp	.-380    	; 0x39a4 <_uploadMessageRc>
    3b20:	08 95       	ret

00003b22 <lora_driver_join>:
    3b22:	0f 93       	push	r16
    3b24:	1f 93       	push	r17
    3b26:	e8 2f       	mov	r30, r24
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	ee 0f       	add	r30, r30
    3b2c:	ff 1f       	adc	r31, r31
    3b2e:	e7 5c       	subi	r30, 0xC7	; 199
    3b30:	f8 4f       	sbci	r31, 0xF8	; 248
    3b32:	60 81       	ld	r22, Z
    3b34:	71 81       	ldd	r23, Z+1	; 0x01
    3b36:	88 e6       	ldi	r24, 0x68	; 104
    3b38:	95 e0       	ldi	r25, 0x05	; 5
    3b3a:	34 df       	rcall	.-408    	; 0x39a4 <_uploadMessageRc>
    3b3c:	81 11       	cpse	r24, r1
    3b3e:	14 c0       	rjmp	.+40     	; 0x3b68 <lora_driver_join+0x46>
    3b40:	08 e2       	ldi	r16, 0x28	; 40
    3b42:	15 e0       	ldi	r17, 0x05	; 5
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	4d e2       	ldi	r20, 0x2D	; 45
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	68 e3       	ldi	r22, 0x38	; 56
    3b4e:	73 e1       	ldi	r23, 0x13	; 19
    3b50:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    3b54:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    3b58:	0e 94 aa 09 	call	0x1354	; 0x1354 <xStreamBufferReceive>
    3b5c:	88 23       	and	r24, r24
    3b5e:	21 f0       	breq	.+8      	; 0x3b68 <lora_driver_join+0x46>
    3b60:	88 e3       	ldi	r24, 0x38	; 56
    3b62:	93 e1       	ldi	r25, 0x13	; 19
    3b64:	aa de       	rcall	.-684    	; 0x38ba <_reply2ReturnCode>
    3b66:	03 c0       	rjmp	.+6      	; 0x3b6e <lora_driver_join+0x4c>
    3b68:	88 e3       	ldi	r24, 0x38	; 56
    3b6a:	93 e1       	ldi	r25, 0x13	; 19
    3b6c:	a6 de       	rcall	.-692    	; 0x38ba <_reply2ReturnCode>
    3b6e:	1f 91       	pop	r17
    3b70:	0f 91       	pop	r16
    3b72:	08 95       	ret

00003b74 <lora_driver_sendUploadMessage>:
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17
    3b78:	cf 93       	push	r28
    3b7a:	df 93       	push	r29
    3b7c:	1f 92       	push	r1
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	db 01       	movw	r26, r22
    3b84:	11 96       	adiw	r26, 0x01	; 1
    3b86:	9c 91       	ld	r25, X
    3b88:	11 97       	sbiw	r26, 0x01	; 1
    3b8a:	95 31       	cpi	r25, 0x15	; 21
    3b8c:	08 f0       	brcs	.+2      	; 0x3b90 <lora_driver_sendUploadMessage+0x1c>
    3b8e:	b4 c0       	rjmp	.+360    	; 0x3cf8 <lora_driver_sendUploadMessage+0x184>
    3b90:	99 23       	and	r25, r25
    3b92:	81 f1       	breq	.+96     	; 0x3bf4 <lora_driver_sendUploadMessage+0x80>
    3b94:	60 e0       	ldi	r22, 0x00	; 0
    3b96:	70 e0       	ldi	r23, 0x00	; 0
    3b98:	27 2f       	mov	r18, r23
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	46 2f       	mov	r20, r22
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	fd 01       	movw	r30, r26
    3ba2:	e4 0f       	add	r30, r20
    3ba4:	f5 1f       	adc	r31, r21
    3ba6:	92 81       	ldd	r25, Z+2	; 0x02
    3ba8:	92 95       	swap	r25
    3baa:	9f 70       	andi	r25, 0x0F	; 15
    3bac:	9a 30       	cpi	r25, 0x0A	; 10
    3bae:	10 f0       	brcs	.+4      	; 0x3bb4 <lora_driver_sendUploadMessage+0x40>
    3bb0:	99 5c       	subi	r25, 0xC9	; 201
    3bb2:	01 c0       	rjmp	.+2      	; 0x3bb6 <lora_driver_sendUploadMessage+0x42>
    3bb4:	90 5d       	subi	r25, 0xD0	; 208
    3bb6:	f9 01       	movw	r30, r18
    3bb8:	e7 53       	subi	r30, 0x37	; 55
    3bba:	fd 4e       	sbci	r31, 0xED	; 237
    3bbc:	90 83       	st	Z, r25
    3bbe:	2f 5f       	subi	r18, 0xFF	; 255
    3bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc2:	fd 01       	movw	r30, r26
    3bc4:	e4 0f       	add	r30, r20
    3bc6:	f5 1f       	adc	r31, r21
    3bc8:	92 81       	ldd	r25, Z+2	; 0x02
    3bca:	9f 70       	andi	r25, 0x0F	; 15
    3bcc:	49 2f       	mov	r20, r25
    3bce:	50 e0       	ldi	r21, 0x00	; 0
    3bd0:	4a 30       	cpi	r20, 0x0A	; 10
    3bd2:	51 05       	cpc	r21, r1
    3bd4:	14 f0       	brlt	.+4      	; 0x3bda <lora_driver_sendUploadMessage+0x66>
    3bd6:	99 5c       	subi	r25, 0xC9	; 201
    3bd8:	01 c0       	rjmp	.+2      	; 0x3bdc <lora_driver_sendUploadMessage+0x68>
    3bda:	90 5d       	subi	r25, 0xD0	; 208
    3bdc:	f9 01       	movw	r30, r18
    3bde:	e7 53       	subi	r30, 0x37	; 55
    3be0:	fd 4e       	sbci	r31, 0xED	; 237
    3be2:	90 83       	st	Z, r25
    3be4:	7e 5f       	subi	r23, 0xFE	; 254
    3be6:	6f 5f       	subi	r22, 0xFF	; 255
    3be8:	11 96       	adiw	r26, 0x01	; 1
    3bea:	9c 91       	ld	r25, X
    3bec:	11 97       	sbiw	r26, 0x01	; 1
    3bee:	69 17       	cp	r22, r25
    3bf0:	98 f2       	brcs	.-90     	; 0x3b98 <lora_driver_sendUploadMessage+0x24>
    3bf2:	01 c0       	rjmp	.+2      	; 0x3bf6 <lora_driver_sendUploadMessage+0x82>
    3bf4:	70 e0       	ldi	r23, 0x00	; 0
    3bf6:	e7 2f       	mov	r30, r23
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	e7 53       	subi	r30, 0x37	; 55
    3bfc:	fd 4e       	sbci	r31, 0xED	; 237
    3bfe:	10 82       	st	Z, r1
    3c00:	4c 91       	ld	r20, X
    3c02:	81 11       	cpse	r24, r1
    3c04:	03 c0       	rjmp	.+6      	; 0x3c0c <lora_driver_sendUploadMessage+0x98>
    3c06:	81 e7       	ldi	r24, 0x71	; 113
    3c08:	95 e0       	ldi	r25, 0x05	; 5
    3c0a:	02 c0       	rjmp	.+4      	; 0x3c10 <lora_driver_sendUploadMessage+0x9c>
    3c0c:	83 e7       	ldi	r24, 0x73	; 115
    3c0e:	95 e0       	ldi	r25, 0x05	; 5
    3c10:	29 ec       	ldi	r18, 0xC9	; 201
    3c12:	32 e1       	ldi	r19, 0x12	; 18
    3c14:	3f 93       	push	r19
    3c16:	2f 93       	push	r18
    3c18:	1f 92       	push	r1
    3c1a:	4f 93       	push	r20
    3c1c:	9f 93       	push	r25
    3c1e:	8f 93       	push	r24
    3c20:	87 e7       	ldi	r24, 0x77	; 119
    3c22:	95 e0       	ldi	r25, 0x05	; 5
    3c24:	9f 93       	push	r25
    3c26:	8f 93       	push	r24
    3c28:	8b e0       	ldi	r24, 0x0B	; 11
    3c2a:	93 e1       	ldi	r25, 0x13	; 19
    3c2c:	9f 93       	push	r25
    3c2e:	8f 93       	push	r24
    3c30:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <sprintf>
    3c34:	60 e0       	ldi	r22, 0x00	; 0
    3c36:	70 e0       	ldi	r23, 0x00	; 0
    3c38:	8b e0       	ldi	r24, 0x0B	; 11
    3c3a:	93 e1       	ldi	r25, 0x13	; 19
    3c3c:	b3 de       	rcall	.-666    	; 0x39a4 <_uploadMessageRc>
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	f8 94       	cli
    3c42:	de bf       	out	0x3e, r29	; 62
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	cd bf       	out	0x3d, r28	; 61
    3c48:	81 11       	cpse	r24, r1
    3c4a:	59 c0       	rjmp	.+178    	; 0x3cfe <lora_driver_sendUploadMessage+0x18a>
    3c4c:	08 e2       	ldi	r16, 0x28	; 40
    3c4e:	15 e0       	ldi	r17, 0x05	; 5
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	4d e2       	ldi	r20, 0x2D	; 45
    3c56:	50 e0       	ldi	r21, 0x00	; 0
    3c58:	68 e3       	ldi	r22, 0x38	; 56
    3c5a:	73 e1       	ldi	r23, 0x13	; 19
    3c5c:	80 91 af 12 	lds	r24, 0x12AF	; 0x8012af <_serialReplyBufferHandle>
    3c60:	90 91 b0 12 	lds	r25, 0x12B0	; 0x8012b0 <_serialReplyBufferHandle+0x1>
    3c64:	0e 94 aa 09 	call	0x1354	; 0x1354 <xStreamBufferReceive>
    3c68:	88 23       	and	r24, r24
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <lora_driver_sendUploadMessage+0xfa>
    3c6c:	47 c0       	rjmp	.+142    	; 0x3cfc <lora_driver_sendUploadMessage+0x188>
    3c6e:	88 e3       	ldi	r24, 0x38	; 56
    3c70:	93 e1       	ldi	r25, 0x13	; 19
    3c72:	23 de       	rcall	.-954    	; 0x38ba <_reply2ReturnCode>
    3c74:	8e 30       	cpi	r24, 0x0E	; 14
    3c76:	09 f0       	breq	.+2      	; 0x3c7a <lora_driver_sendUploadMessage+0x106>
    3c78:	42 c0       	rjmp	.+132    	; 0x3cfe <lora_driver_sendUploadMessage+0x18a>
    3c7a:	87 e0       	ldi	r24, 0x07	; 7
    3c7c:	89 83       	std	Y+1, r24	; 0x01
    3c7e:	80 91 ad 12 	lds	r24, 0x12AD	; 0x8012ad <_downlinkMessageBuffer>
    3c82:	90 91 ae 12 	lds	r25, 0x12AE	; 0x8012ae <_downlinkMessageBuffer+0x1>
    3c86:	89 2b       	or	r24, r25
    3c88:	a9 f1       	breq	.+106    	; 0x3cf4 <lora_driver_sendUploadMessage+0x180>
    3c8a:	be 01       	movw	r22, r28
    3c8c:	6f 5f       	subi	r22, 0xFF	; 255
    3c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c90:	88 e3       	ldi	r24, 0x38	; 56
    3c92:	93 e1       	ldi	r25, 0x13	; 19
    3c94:	68 d1       	rcall	.+720    	; 0x3f66 <decode_port_no>
    3c96:	80 93 b3 12 	sts	0x12B3, r24	; 0x8012b3 <_downlinkPayload>
    3c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c9c:	f0 e0       	ldi	r31, 0x00	; 0
    3c9e:	e8 5c       	subi	r30, 0xC8	; 200
    3ca0:	fc 4e       	sbci	r31, 0xEC	; 236
    3ca2:	df 01       	movw	r26, r30
    3ca4:	0d 90       	ld	r0, X+
    3ca6:	00 20       	and	r0, r0
    3ca8:	e9 f7       	brne	.-6      	; 0x3ca4 <lora_driver_sendUploadMessage+0x130>
    3caa:	11 97       	sbiw	r26, 0x01	; 1
    3cac:	ae 1b       	sub	r26, r30
    3cae:	bf 0b       	sbc	r27, r31
    3cb0:	aa 23       	and	r26, r26
    3cb2:	91 f0       	breq	.+36     	; 0x3cd8 <lora_driver_sendUploadMessage+0x164>
    3cb4:	bb 27       	eor	r27, r27
    3cb6:	cd 01       	movw	r24, r26
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	9c 01       	movw	r18, r24
    3cbc:	12 f4       	brpl	.+4      	; 0x3cc2 <lora_driver_sendUploadMessage+0x14e>
    3cbe:	2f 5f       	subi	r18, 0xFF	; 255
    3cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc2:	35 95       	asr	r19
    3cc4:	27 95       	ror	r18
    3cc6:	20 93 b4 12 	sts	0x12B4, r18	; 0x8012b4 <_downlinkPayload+0x1>
    3cca:	af 01       	movw	r20, r30
    3ccc:	4f 5f       	subi	r20, 0xFF	; 255
    3cce:	5f 4f       	sbci	r21, 0xFF	; 255
    3cd0:	64 e1       	ldi	r22, 0x14	; 20
    3cd2:	85 eb       	ldi	r24, 0xB5	; 181
    3cd4:	92 e1       	ldi	r25, 0x12	; 18
    3cd6:	73 d1       	rcall	.+742    	; 0x3fbe <decode_hexadecimal_string_bytes>
    3cd8:	01 e0       	ldi	r16, 0x01	; 1
    3cda:	10 e0       	ldi	r17, 0x00	; 0
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	46 e1       	ldi	r20, 0x16	; 22
    3ce2:	50 e0       	ldi	r21, 0x00	; 0
    3ce4:	63 eb       	ldi	r22, 0xB3	; 179
    3ce6:	72 e1       	ldi	r23, 0x12	; 18
    3ce8:	80 91 ad 12 	lds	r24, 0x12AD	; 0x8012ad <_downlinkMessageBuffer>
    3cec:	90 91 ae 12 	lds	r25, 0x12AE	; 0x8012ae <_downlinkMessageBuffer+0x1>
    3cf0:	0e 94 a3 08 	call	0x1146	; 0x1146 <xStreamBufferSend>
    3cf4:	8e e0       	ldi	r24, 0x0E	; 14
    3cf6:	03 c0       	rjmp	.+6      	; 0x3cfe <lora_driver_sendUploadMessage+0x18a>
    3cf8:	84 e1       	ldi	r24, 0x14	; 20
    3cfa:	01 c0       	rjmp	.+2      	; 0x3cfe <lora_driver_sendUploadMessage+0x18a>
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	0f 90       	pop	r0
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
    3d04:	1f 91       	pop	r17
    3d06:	0f 91       	pop	r16
    3d08:	08 95       	ret

00003d0a <lora_driver_setAdaptiveDataRate>:
    3d0a:	81 30       	cpi	r24, 0x01	; 1
    3d0c:	19 f0       	breq	.+6      	; 0x3d14 <lora_driver_setAdaptiveDataRate+0xa>
    3d0e:	67 e8       	ldi	r22, 0x87	; 135
    3d10:	75 e0       	ldi	r23, 0x05	; 5
    3d12:	02 c0       	rjmp	.+4      	; 0x3d18 <lora_driver_setAdaptiveDataRate+0xe>
    3d14:	60 e6       	ldi	r22, 0x60	; 96
    3d16:	76 e0       	ldi	r23, 0x06	; 6
    3d18:	8b e8       	ldi	r24, 0x8B	; 139
    3d1a:	95 e0       	ldi	r25, 0x05	; 5
    3d1c:	43 ce       	rjmp	.-890    	; 0x39a4 <_uploadMessageRc>
    3d1e:	08 95       	ret

00003d20 <lora_driver_setReceiveDelay>:
    3d20:	9f 93       	push	r25
    3d22:	8f 93       	push	r24
    3d24:	8c eb       	ldi	r24, 0xBC	; 188
    3d26:	95 e0       	ldi	r25, 0x05	; 5
    3d28:	9f 93       	push	r25
    3d2a:	8f 93       	push	r24
    3d2c:	8b e0       	ldi	r24, 0x0B	; 11
    3d2e:	93 e1       	ldi	r25, 0x13	; 19
    3d30:	9f 93       	push	r25
    3d32:	8f 93       	push	r24
    3d34:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <sprintf>
    3d38:	60 e0       	ldi	r22, 0x00	; 0
    3d3a:	70 e0       	ldi	r23, 0x00	; 0
    3d3c:	8b e0       	ldi	r24, 0x0B	; 11
    3d3e:	93 e1       	ldi	r25, 0x13	; 19
    3d40:	31 de       	rcall	.-926    	; 0x39a4 <_uploadMessageRc>
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	0f 90       	pop	r0
    3d4c:	0f 90       	pop	r0
    3d4e:	08 95       	ret

00003d50 <lora_driver_configureToEu868>:
    3d50:	2f 92       	push	r2
    3d52:	3f 92       	push	r3
    3d54:	4f 92       	push	r4
    3d56:	5f 92       	push	r5
    3d58:	6f 92       	push	r6
    3d5a:	7f 92       	push	r7
    3d5c:	8f 92       	push	r8
    3d5e:	9f 92       	push	r9
    3d60:	af 92       	push	r10
    3d62:	bf 92       	push	r11
    3d64:	cf 92       	push	r12
    3d66:	df 92       	push	r13
    3d68:	ef 92       	push	r14
    3d6a:	ff 92       	push	r15
    3d6c:	0f 93       	push	r16
    3d6e:	1f 93       	push	r17
    3d70:	cf 93       	push	r28
    3d72:	df 93       	push	r29
    3d74:	cd b7       	in	r28, 0x3d	; 61
    3d76:	de b7       	in	r29, 0x3e	; 62
    3d78:	a0 97       	sbiw	r28, 0x20	; 32
    3d7a:	0f b6       	in	r0, 0x3f	; 63
    3d7c:	f8 94       	cli
    3d7e:	de bf       	out	0x3e, r29	; 62
    3d80:	0f be       	out	0x3f, r0	; 63
    3d82:	cd bf       	out	0x3d, r28	; 61
    3d84:	69 ee       	ldi	r22, 0xE9	; 233
    3d86:	75 e0       	ldi	r23, 0x05	; 5
    3d88:	85 ef       	ldi	r24, 0xF5	; 245
    3d8a:	95 e0       	ldi	r25, 0x05	; 5
    3d8c:	3c dd       	rcall	.-1416   	; 0x3806 <_uploadMessage>
    3d8e:	95 dd       	rcall	.-1238   	; 0x38ba <_reply2ReturnCode>
    3d90:	81 11       	cpse	r24, r1
    3d92:	a3 c0       	rjmp	.+326    	; 0x3eda <lora_driver_configureToEu868+0x18a>
    3d94:	80 e2       	ldi	r24, 0x20	; 32
    3d96:	e2 e2       	ldi	r30, 0x22	; 34
    3d98:	f2 e0       	ldi	r31, 0x02	; 2
    3d9a:	de 01       	movw	r26, r28
    3d9c:	11 96       	adiw	r26, 0x01	; 1
    3d9e:	01 90       	ld	r0, Z+
    3da0:	0d 92       	st	X+, r0
    3da2:	8a 95       	dec	r24
    3da4:	e1 f7       	brne	.-8      	; 0x3d9e <lora_driver_configureToEu868+0x4e>
    3da6:	9e 01       	movw	r18, r28
    3da8:	2f 5f       	subi	r18, 0xFF	; 255
    3daa:	3f 4f       	sbci	r19, 0xFF	; 255
    3dac:	69 01       	movw	r12, r18
    3dae:	e1 2c       	mov	r14, r1
    3db0:	f1 2c       	mov	r15, r1
    3db2:	0f 2e       	mov	r0, r31
    3db4:	f1 e0       	ldi	r31, 0x01	; 1
    3db6:	af 2e       	mov	r10, r31
    3db8:	f6 e0       	ldi	r31, 0x06	; 6
    3dba:	bf 2e       	mov	r11, r31
    3dbc:	f0 2d       	mov	r31, r0
    3dbe:	0b e0       	ldi	r16, 0x0B	; 11
    3dc0:	13 e1       	ldi	r17, 0x13	; 19
    3dc2:	0f 2e       	mov	r0, r31
    3dc4:	fa e1       	ldi	r31, 0x1A	; 26
    3dc6:	4f 2e       	mov	r4, r31
    3dc8:	f6 e0       	ldi	r31, 0x06	; 6
    3dca:	5f 2e       	mov	r5, r31
    3dcc:	f0 2d       	mov	r31, r0
    3dce:	0f 2e       	mov	r0, r31
    3dd0:	f1 e3       	ldi	r31, 0x31	; 49
    3dd2:	8f 2e       	mov	r8, r31
    3dd4:	f6 e0       	ldi	r31, 0x06	; 6
    3dd6:	9f 2e       	mov	r9, r31
    3dd8:	f0 2d       	mov	r31, r0
    3dda:	0f 2e       	mov	r0, r31
    3ddc:	fb e4       	ldi	r31, 0x4B	; 75
    3dde:	6f 2e       	mov	r6, r31
    3de0:	f6 e0       	ldi	r31, 0x06	; 6
    3de2:	7f 2e       	mov	r7, r31
    3de4:	f0 2d       	mov	r31, r0
    3de6:	3e 2c       	mov	r3, r14
    3de8:	2f 2c       	mov	r2, r15
    3dea:	ff 92       	push	r15
    3dec:	ef 92       	push	r14
    3dee:	bf 92       	push	r11
    3df0:	af 92       	push	r10
    3df2:	1f 93       	push	r17
    3df4:	0f 93       	push	r16
    3df6:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <sprintf>
    3dfa:	60 e0       	ldi	r22, 0x00	; 0
    3dfc:	70 e0       	ldi	r23, 0x00	; 0
    3dfe:	c8 01       	movw	r24, r16
    3e00:	02 dd       	rcall	.-1532   	; 0x3806 <_uploadMessage>
    3e02:	5b dd       	rcall	.-1354   	; 0x38ba <_reply2ReturnCode>
    3e04:	0f 90       	pop	r0
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	81 11       	cpse	r24, r1
    3e12:	63 c0       	rjmp	.+198    	; 0x3eda <lora_driver_configureToEu868+0x18a>
    3e14:	32 e0       	ldi	r19, 0x02	; 2
    3e16:	3e 15       	cp	r19, r14
    3e18:	e8 f4       	brcc	.+58     	; 0x3e54 <lora_driver_configureToEu868+0x104>
    3e1a:	f6 01       	movw	r30, r12
    3e1c:	83 81       	ldd	r24, Z+3	; 0x03
    3e1e:	8f 93       	push	r24
    3e20:	82 81       	ldd	r24, Z+2	; 0x02
    3e22:	8f 93       	push	r24
    3e24:	81 81       	ldd	r24, Z+1	; 0x01
    3e26:	8f 93       	push	r24
    3e28:	80 81       	ld	r24, Z
    3e2a:	8f 93       	push	r24
    3e2c:	ff 92       	push	r15
    3e2e:	ef 92       	push	r14
    3e30:	5f 92       	push	r5
    3e32:	4f 92       	push	r4
    3e34:	1f 93       	push	r17
    3e36:	0f 93       	push	r16
    3e38:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <sprintf>
    3e3c:	60 e0       	ldi	r22, 0x00	; 0
    3e3e:	70 e0       	ldi	r23, 0x00	; 0
    3e40:	c8 01       	movw	r24, r16
    3e42:	e1 dc       	rcall	.-1598   	; 0x3806 <_uploadMessage>
    3e44:	3a dd       	rcall	.-1420   	; 0x38ba <_reply2ReturnCode>
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	de bf       	out	0x3e, r29	; 62
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	cd bf       	out	0x3d, r28	; 61
    3e50:	81 11       	cpse	r24, r1
    3e52:	43 c0       	rjmp	.+134    	; 0x3eda <lora_driver_configureToEu868+0x18a>
    3e54:	2f 92       	push	r2
    3e56:	3f 92       	push	r3
    3e58:	9f 92       	push	r9
    3e5a:	8f 92       	push	r8
    3e5c:	1f 93       	push	r17
    3e5e:	0f 93       	push	r16
    3e60:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <sprintf>
    3e64:	60 e0       	ldi	r22, 0x00	; 0
    3e66:	70 e0       	ldi	r23, 0x00	; 0
    3e68:	c8 01       	movw	r24, r16
    3e6a:	cd dc       	rcall	.-1638   	; 0x3806 <_uploadMessage>
    3e6c:	26 dd       	rcall	.-1460   	; 0x38ba <_reply2ReturnCode>
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	81 11       	cpse	r24, r1
    3e7c:	2e c0       	rjmp	.+92     	; 0x3eda <lora_driver_configureToEu868+0x18a>
    3e7e:	2f 92       	push	r2
    3e80:	3f 92       	push	r3
    3e82:	7f 92       	push	r7
    3e84:	6f 92       	push	r6
    3e86:	1f 93       	push	r17
    3e88:	0f 93       	push	r16
    3e8a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <sprintf>
    3e8e:	60 e0       	ldi	r22, 0x00	; 0
    3e90:	70 e0       	ldi	r23, 0x00	; 0
    3e92:	c8 01       	movw	r24, r16
    3e94:	b8 dc       	rcall	.-1680   	; 0x3806 <_uploadMessage>
    3e96:	11 dd       	rcall	.-1502   	; 0x38ba <_reply2ReturnCode>
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	81 11       	cpse	r24, r1
    3ea6:	19 c0       	rjmp	.+50     	; 0x3eda <lora_driver_configureToEu868+0x18a>
    3ea8:	3f ef       	ldi	r19, 0xFF	; 255
    3eaa:	e3 1a       	sub	r14, r19
    3eac:	f3 0a       	sbc	r15, r19
    3eae:	84 e0       	ldi	r24, 0x04	; 4
    3eb0:	c8 0e       	add	r12, r24
    3eb2:	d1 1c       	adc	r13, r1
    3eb4:	98 e0       	ldi	r25, 0x08	; 8
    3eb6:	e9 16       	cp	r14, r25
    3eb8:	f1 04       	cpc	r15, r1
    3eba:	09 f0       	breq	.+2      	; 0x3ebe <lora_driver_configureToEu868+0x16e>
    3ebc:	94 cf       	rjmp	.-216    	; 0x3de6 <lora_driver_configureToEu868+0x96>
    3ebe:	60 e0       	ldi	r22, 0x00	; 0
    3ec0:	70 e0       	ldi	r23, 0x00	; 0
    3ec2:	83 e6       	ldi	r24, 0x63	; 99
    3ec4:	96 e0       	ldi	r25, 0x06	; 6
    3ec6:	9f dc       	rcall	.-1730   	; 0x3806 <_uploadMessage>
    3ec8:	f8 dc       	rcall	.-1552   	; 0x38ba <_reply2ReturnCode>
    3eca:	81 11       	cpse	r24, r1
    3ecc:	06 c0       	rjmp	.+12     	; 0x3eda <lora_driver_configureToEu868+0x18a>
    3ece:	60 e0       	ldi	r22, 0x00	; 0
    3ed0:	70 e0       	ldi	r23, 0x00	; 0
    3ed2:	84 e7       	ldi	r24, 0x74	; 116
    3ed4:	96 e0       	ldi	r25, 0x06	; 6
    3ed6:	97 dc       	rcall	.-1746   	; 0x3806 <_uploadMessage>
    3ed8:	f0 dc       	rcall	.-1568   	; 0x38ba <_reply2ReturnCode>
    3eda:	a0 96       	adiw	r28, 0x20	; 32
    3edc:	0f b6       	in	r0, 0x3f	; 63
    3ede:	f8 94       	cli
    3ee0:	de bf       	out	0x3e, r29	; 62
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	cd bf       	out	0x3d, r28	; 61
    3ee6:	df 91       	pop	r29
    3ee8:	cf 91       	pop	r28
    3eea:	1f 91       	pop	r17
    3eec:	0f 91       	pop	r16
    3eee:	ff 90       	pop	r15
    3ef0:	ef 90       	pop	r14
    3ef2:	df 90       	pop	r13
    3ef4:	cf 90       	pop	r12
    3ef6:	bf 90       	pop	r11
    3ef8:	af 90       	pop	r10
    3efa:	9f 90       	pop	r9
    3efc:	8f 90       	pop	r8
    3efe:	7f 90       	pop	r7
    3f00:	6f 90       	pop	r6
    3f02:	5f 90       	pop	r5
    3f04:	4f 90       	pop	r4
    3f06:	3f 90       	pop	r3
    3f08:	2f 90       	pop	r2
    3f0a:	08 95       	ret

00003f0c <lora_driver_setOtaaIdentity>:
    3f0c:	ef 92       	push	r14
    3f0e:	ff 92       	push	r15
    3f10:	0f 93       	push	r16
    3f12:	1f 93       	push	r17
    3f14:	cf 93       	push	r28
    3f16:	df 93       	push	r29
    3f18:	ec 01       	movw	r28, r24
    3f1a:	8b 01       	movw	r16, r22
    3f1c:	7a 01       	movw	r14, r20
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
    3f20:	f4 de       	rcall	.-536    	; 0x3d0a <lora_driver_setAdaptiveDataRate>
    3f22:	81 11       	cpse	r24, r1
    3f24:	0d c0       	rjmp	.+26     	; 0x3f40 <lora_driver_setOtaaIdentity+0x34>
    3f26:	ce 01       	movw	r24, r28
    3f28:	d4 dd       	rcall	.-1112   	; 0x3ad2 <lora_driver_setApplicationIdentifier>
    3f2a:	81 11       	cpse	r24, r1
    3f2c:	09 c0       	rjmp	.+18     	; 0x3f40 <lora_driver_setOtaaIdentity+0x34>
    3f2e:	c8 01       	movw	r24, r16
    3f30:	e1 dd       	rcall	.-1086   	; 0x3af4 <lora_driver_setApplicationKey>
    3f32:	81 11       	cpse	r24, r1
    3f34:	05 c0       	rjmp	.+10     	; 0x3f40 <lora_driver_setOtaaIdentity+0x34>
    3f36:	c7 01       	movw	r24, r14
    3f38:	bb dd       	rcall	.-1162   	; 0x3ab0 <lora_driver_setDeviceIdentifier>
    3f3a:	81 11       	cpse	r24, r1
    3f3c:	01 c0       	rjmp	.+2      	; 0x3f40 <lora_driver_setOtaaIdentity+0x34>
    3f3e:	eb dd       	rcall	.-1066   	; 0x3b16 <lora_driver_saveMac>
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	1f 91       	pop	r17
    3f46:	0f 91       	pop	r16
    3f48:	ff 90       	pop	r15
    3f4a:	ef 90       	pop	r14
    3f4c:	08 95       	ret

00003f4e <lora_driver_mapReturnCodeToText>:
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	fc 01       	movw	r30, r24
    3f52:	ee 0f       	add	r30, r30
    3f54:	ff 1f       	adc	r31, r31
    3f56:	8e 0f       	add	r24, r30
    3f58:	9f 1f       	adc	r25, r31
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	e3 5c       	subi	r30, 0xC3	; 195
    3f5e:	f8 4f       	sbci	r31, 0xF8	; 248
    3f60:	81 81       	ldd	r24, Z+1	; 0x01
    3f62:	92 81       	ldd	r25, Z+2	; 0x02
    3f64:	08 95       	ret

00003f66 <decode_port_no>:
    3f66:	dc 01       	movw	r26, r24
    3f68:	00 97       	sbiw	r24, 0x00	; 0
    3f6a:	29 f1       	breq	.+74     	; 0x3fb6 <decode_port_no+0x50>
    3f6c:	fb 01       	movw	r30, r22
    3f6e:	20 81       	ld	r18, Z
    3f70:	fc 01       	movw	r30, r24
    3f72:	01 90       	ld	r0, Z+
    3f74:	00 20       	and	r0, r0
    3f76:	e9 f7       	brne	.-6      	; 0x3f72 <decode_port_no+0xc>
    3f78:	31 97       	sbiw	r30, 0x01	; 1
    3f7a:	e8 1b       	sub	r30, r24
    3f7c:	f9 0b       	sbc	r31, r25
    3f7e:	82 2f       	mov	r24, r18
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	e8 17       	cp	r30, r24
    3f84:	f9 07       	cpc	r31, r25
    3f86:	c8 f0       	brcs	.+50     	; 0x3fba <decode_port_no+0x54>
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	08 c0       	rjmp	.+16     	; 0x3f9c <decode_port_no+0x36>
    3f8c:	88 0f       	add	r24, r24
    3f8e:	38 2f       	mov	r19, r24
    3f90:	33 0f       	add	r19, r19
    3f92:	33 0f       	add	r19, r19
    3f94:	83 0f       	add	r24, r19
    3f96:	80 53       	subi	r24, 0x30	; 48
    3f98:	89 0f       	add	r24, r25
    3f9a:	2f 5f       	subi	r18, 0xFF	; 255
    3f9c:	fd 01       	movw	r30, r26
    3f9e:	e2 0f       	add	r30, r18
    3fa0:	f1 1d       	adc	r31, r1
    3fa2:	90 81       	ld	r25, Z
    3fa4:	30 ed       	ldi	r19, 0xD0	; 208
    3fa6:	39 0f       	add	r19, r25
    3fa8:	3a 30       	cpi	r19, 0x0A	; 10
    3faa:	10 f4       	brcc	.+4      	; 0x3fb0 <decode_port_no+0x4a>
    3fac:	91 11       	cpse	r25, r1
    3fae:	ee cf       	rjmp	.-36     	; 0x3f8c <decode_port_no+0x26>
    3fb0:	fb 01       	movw	r30, r22
    3fb2:	20 83       	st	Z, r18
    3fb4:	08 95       	ret
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	08 95       	ret
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	08 95       	ret

00003fbe <decode_hexadecimal_string_bytes>:
    3fbe:	0f 93       	push	r16
    3fc0:	1f 93       	push	r17
    3fc2:	cf 93       	push	r28
    3fc4:	df 93       	push	r29
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	ea 01       	movw	r28, r20
    3fca:	20 97       	sbiw	r28, 0x00	; 0
    3fcc:	e1 f1       	breq	.+120    	; 0x4046 <decode_hexadecimal_string_bytes+0x88>
    3fce:	fa 01       	movw	r30, r20
    3fd0:	01 90       	ld	r0, Z+
    3fd2:	00 20       	and	r0, r0
    3fd4:	e9 f7       	brne	.-6      	; 0x3fd0 <decode_hexadecimal_string_bytes+0x12>
    3fd6:	31 97       	sbiw	r30, 0x01	; 1
    3fd8:	e4 1b       	sub	r30, r20
    3fda:	f5 0b       	sbc	r31, r21
    3fdc:	32 97       	sbiw	r30, 0x02	; 2
    3fde:	10 f5       	brcc	.+68     	; 0x4024 <decode_hexadecimal_string_bytes+0x66>
    3fe0:	32 c0       	rjmp	.+100    	; 0x4046 <decode_hexadecimal_string_bytes+0x88>
    3fe2:	8d 01       	movw	r16, r26
    3fe4:	04 0f       	add	r16, r20
    3fe6:	15 1f       	adc	r17, r21
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	ae 01       	movw	r20, r28
    3fec:	42 0f       	add	r20, r18
    3fee:	53 1f       	adc	r21, r19
    3ff0:	fa 01       	movw	r30, r20
    3ff2:	90 81       	ld	r25, Z
    3ff4:	91 34       	cpi	r25, 0x41	; 65
    3ff6:	28 f0       	brcs	.+10     	; 0x4002 <decode_hexadecimal_string_bytes+0x44>
    3ff8:	97 53       	subi	r25, 0x37	; 55
    3ffa:	59 2f       	mov	r21, r25
    3ffc:	52 95       	swap	r21
    3ffe:	50 7f       	andi	r21, 0xF0	; 240
    4000:	03 c0       	rjmp	.+6      	; 0x4008 <decode_hexadecimal_string_bytes+0x4a>
    4002:	59 2f       	mov	r21, r25
    4004:	52 95       	swap	r21
    4006:	50 7f       	andi	r21, 0xF0	; 240
    4008:	2c 0f       	add	r18, r28
    400a:	3d 1f       	adc	r19, r29
    400c:	f9 01       	movw	r30, r18
    400e:	91 81       	ldd	r25, Z+1	; 0x01
    4010:	91 34       	cpi	r25, 0x41	; 65
    4012:	10 f0       	brcs	.+4      	; 0x4018 <decode_hexadecimal_string_bytes+0x5a>
    4014:	97 53       	subi	r25, 0x37	; 55
    4016:	01 c0       	rjmp	.+2      	; 0x401a <decode_hexadecimal_string_bytes+0x5c>
    4018:	90 53       	subi	r25, 0x30	; 48
    401a:	95 0f       	add	r25, r21
    401c:	f8 01       	movw	r30, r16
    401e:	90 83       	st	Z, r25
    4020:	8f 5f       	subi	r24, 0xFF	; 255
    4022:	01 c0       	rjmp	.+2      	; 0x4026 <decode_hexadecimal_string_bytes+0x68>
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	28 2f       	mov	r18, r24
    4028:	22 0f       	add	r18, r18
    402a:	48 2f       	mov	r20, r24
    402c:	50 e0       	ldi	r21, 0x00	; 0
    402e:	fe 01       	movw	r30, r28
    4030:	01 90       	ld	r0, Z+
    4032:	00 20       	and	r0, r0
    4034:	e9 f7       	brne	.-6      	; 0x4030 <decode_hexadecimal_string_bytes+0x72>
    4036:	31 97       	sbiw	r30, 0x01	; 1
    4038:	ec 1b       	sub	r30, r28
    403a:	fd 0b       	sbc	r31, r29
    403c:	4e 17       	cp	r20, r30
    403e:	5f 07       	cpc	r21, r31
    4040:	10 f4       	brcc	.+4      	; 0x4046 <decode_hexadecimal_string_bytes+0x88>
    4042:	86 13       	cpse	r24, r22
    4044:	ce cf       	rjmp	.-100    	; 0x3fe2 <decode_hexadecimal_string_bytes+0x24>
    4046:	df 91       	pop	r29
    4048:	cf 91       	pop	r28
    404a:	1f 91       	pop	r17
    404c:	0f 91       	pop	r16
    404e:	08 95       	ret

00004050 <_serialCallBack>:
    4050:	80 91 68 13 	lds	r24, 0x1368	; 0x801368 <crc_sum.1945>
    4054:	86 0f       	add	r24, r22
    4056:	80 93 68 13 	sts	0x1368, r24	; 0x801368 <crc_sum.1945>
    405a:	90 91 6b 13 	lds	r25, 0x136B	; 0x80136b <_mh_state>
    405e:	91 30       	cpi	r25, 0x01	; 1
    4060:	79 f0       	breq	.+30     	; 0x4080 <_serialCallBack+0x30>
    4062:	28 f0       	brcs	.+10     	; 0x406e <_serialCallBack+0x1e>
    4064:	92 30       	cpi	r25, 0x02	; 2
    4066:	a9 f0       	breq	.+42     	; 0x4092 <_serialCallBack+0x42>
    4068:	93 30       	cpi	r25, 0x03	; 3
    406a:	19 f1       	breq	.+70     	; 0x40b2 <_serialCallBack+0x62>
    406c:	08 95       	ret
    406e:	6f 3f       	cpi	r22, 0xFF	; 255
    4070:	09 f0       	breq	.+2      	; 0x4074 <_serialCallBack+0x24>
    4072:	48 c0       	rjmp	.+144    	; 0x4104 <_serialCallBack+0xb4>
    4074:	10 92 68 13 	sts	0x1368, r1	; 0x801368 <crc_sum.1945>
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	80 93 6b 13 	sts	0x136B, r24	; 0x80136b <_mh_state>
    407e:	08 95       	ret
    4080:	66 38       	cpi	r22, 0x86	; 134
    4082:	09 f0       	breq	.+2      	; 0x4086 <_serialCallBack+0x36>
    4084:	3f c0       	rjmp	.+126    	; 0x4104 <_serialCallBack+0xb4>
    4086:	10 92 67 13 	sts	0x1367, r1	; 0x801367 <inDex.1943>
    408a:	82 e0       	ldi	r24, 0x02	; 2
    408c:	80 93 6b 13 	sts	0x136B, r24	; 0x80136b <_mh_state>
    4090:	08 95       	ret
    4092:	e0 91 67 13 	lds	r30, 0x1367	; 0x801367 <inDex.1943>
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	8e 0f       	add	r24, r30
    409a:	80 93 67 13 	sts	0x1367, r24	; 0x801367 <inDex.1943>
    409e:	f0 e0       	ldi	r31, 0x00	; 0
    40a0:	eb 59       	subi	r30, 0x9B	; 155
    40a2:	fc 4e       	sbci	r31, 0xEC	; 236
    40a4:	60 83       	st	Z, r22
    40a6:	82 30       	cpi	r24, 0x02	; 2
    40a8:	69 f5       	brne	.+90     	; 0x4104 <_serialCallBack+0xb4>
    40aa:	83 e0       	ldi	r24, 0x03	; 3
    40ac:	80 93 6b 13 	sts	0x136B, r24	; 0x80136b <_mh_state>
    40b0:	08 95       	ret
    40b2:	90 91 67 13 	lds	r25, 0x1367	; 0x801367 <inDex.1943>
    40b6:	21 e0       	ldi	r18, 0x01	; 1
    40b8:	29 0f       	add	r18, r25
    40ba:	20 93 67 13 	sts	0x1367, r18	; 0x801367 <inDex.1943>
    40be:	96 30       	cpi	r25, 0x06	; 6
    40c0:	09 f5       	brne	.+66     	; 0x4104 <_serialCallBack+0xb4>
    40c2:	81 11       	cpse	r24, r1
    40c4:	0e c0       	rjmp	.+28     	; 0x40e2 <_serialCallBack+0x92>
    40c6:	e5 e6       	ldi	r30, 0x65	; 101
    40c8:	f3 e1       	ldi	r31, 0x13	; 19
    40ca:	80 81       	ld	r24, Z
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	98 2f       	mov	r25, r24
    40d0:	88 27       	eor	r24, r24
    40d2:	21 81       	ldd	r18, Z+1	; 0x01
    40d4:	82 0f       	add	r24, r18
    40d6:	91 1d       	adc	r25, r1
    40d8:	90 93 6d 13 	sts	0x136D, r25	; 0x80136d <_ppm+0x1>
    40dc:	80 93 6c 13 	sts	0x136C, r24	; 0x80136c <_ppm>
    40e0:	04 c0       	rjmp	.+8      	; 0x40ea <_serialCallBack+0x9a>
    40e2:	10 92 6d 13 	sts	0x136D, r1	; 0x80136d <_ppm+0x1>
    40e6:	10 92 6c 13 	sts	0x136C, r1	; 0x80136c <_ppm>
    40ea:	10 92 6b 13 	sts	0x136B, r1	; 0x80136b <_mh_state>
    40ee:	e0 91 69 13 	lds	r30, 0x1369	; 0x801369 <_appCallBack>
    40f2:	f0 91 6a 13 	lds	r31, 0x136A	; 0x80136a <_appCallBack+0x1>
    40f6:	30 97       	sbiw	r30, 0x00	; 0
    40f8:	29 f0       	breq	.+10     	; 0x4104 <_serialCallBack+0xb4>
    40fa:	80 91 6c 13 	lds	r24, 0x136C	; 0x80136c <_ppm>
    40fe:	90 91 6d 13 	lds	r25, 0x136D	; 0x80136d <_ppm+0x1>
    4102:	19 95       	eicall
    4104:	08 95       	ret

00004106 <mh_z19_initialise>:
    4106:	8f 92       	push	r8
    4108:	9f 92       	push	r9
    410a:	af 92       	push	r10
    410c:	cf 92       	push	r12
    410e:	ef 92       	push	r14
    4110:	0f 93       	push	r16
    4112:	0f 2e       	mov	r0, r31
    4114:	f8 e2       	ldi	r31, 0x28	; 40
    4116:	8f 2e       	mov	r8, r31
    4118:	f0 e2       	ldi	r31, 0x20	; 32
    411a:	9f 2e       	mov	r9, r31
    411c:	f0 2d       	mov	r31, r0
    411e:	68 94       	set
    4120:	aa 24       	eor	r10, r10
    4122:	a4 f8       	bld	r10, 4
    4124:	68 94       	set
    4126:	cc 24       	eor	r12, r12
    4128:	c4 f8       	bld	r12, 4
    412a:	e1 2c       	mov	r14, r1
    412c:	00 e0       	ldi	r16, 0x00	; 0
    412e:	23 e0       	ldi	r18, 0x03	; 3
    4130:	40 e8       	ldi	r20, 0x80	; 128
    4132:	55 e2       	ldi	r21, 0x25	; 37
    4134:	60 e0       	ldi	r22, 0x00	; 0
    4136:	70 e0       	ldi	r23, 0x00	; 0
    4138:	3f d0       	rcall	.+126    	; 0x41b8 <serial_create>
    413a:	90 93 6f 13 	sts	0x136F, r25	; 0x80136f <_serial+0x1>
    413e:	80 93 6e 13 	sts	0x136E, r24	; 0x80136e <_serial>
    4142:	0f 91       	pop	r16
    4144:	ef 90       	pop	r14
    4146:	cf 90       	pop	r12
    4148:	af 90       	pop	r10
    414a:	9f 90       	pop	r9
    414c:	8f 90       	pop	r8
    414e:	08 95       	ret

00004150 <mh_z19_injectCallBack>:
    4150:	90 93 6a 13 	sts	0x136A, r25	; 0x80136a <_appCallBack+0x1>
    4154:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <_appCallBack>
    4158:	08 95       	ret

0000415a <mh_z19_takeMeassuring>:
    415a:	cf 93       	push	r28
    415c:	df 93       	push	r29
    415e:	cd b7       	in	r28, 0x3d	; 61
    4160:	de b7       	in	r29, 0x3e	; 62
    4162:	29 97       	sbiw	r28, 0x09	; 9
    4164:	0f b6       	in	r0, 0x3f	; 63
    4166:	f8 94       	cli
    4168:	de bf       	out	0x3e, r29	; 62
    416a:	0f be       	out	0x3f, r0	; 63
    416c:	cd bf       	out	0x3d, r28	; 61
    416e:	89 e0       	ldi	r24, 0x09	; 9
    4170:	e2 e4       	ldi	r30, 0x42	; 66
    4172:	f2 e0       	ldi	r31, 0x02	; 2
    4174:	9e 01       	movw	r18, r28
    4176:	2f 5f       	subi	r18, 0xFF	; 255
    4178:	3f 4f       	sbci	r19, 0xFF	; 255
    417a:	d9 01       	movw	r26, r18
    417c:	01 90       	ld	r0, Z+
    417e:	0d 92       	st	X+, r0
    4180:	8a 95       	dec	r24
    4182:	e1 f7       	brne	.-8      	; 0x417c <mh_z19_takeMeassuring+0x22>
    4184:	10 92 6d 13 	sts	0x136D, r1	; 0x80136d <_ppm+0x1>
    4188:	10 92 6c 13 	sts	0x136C, r1	; 0x80136c <_ppm>
    418c:	80 91 6e 13 	lds	r24, 0x136E	; 0x80136e <_serial>
    4190:	90 91 6f 13 	lds	r25, 0x136F	; 0x80136f <_serial+0x1>
    4194:	00 97       	sbiw	r24, 0x00	; 0
    4196:	31 f0       	breq	.+12     	; 0x41a4 <mh_z19_takeMeassuring+0x4a>
    4198:	42 2f       	mov	r20, r18
    419a:	53 2f       	mov	r21, r19
    419c:	69 e0       	ldi	r22, 0x09	; 9
    419e:	d9 d0       	rcall	.+434    	; 0x4352 <serial_sendBytes>
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	01 c0       	rjmp	.+2      	; 0x41a6 <mh_z19_takeMeassuring+0x4c>
    41a4:	82 e0       	ldi	r24, 0x02	; 2
    41a6:	29 96       	adiw	r28, 0x09	; 9
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	f8 94       	cli
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	df 91       	pop	r29
    41b4:	cf 91       	pop	r28
    41b6:	08 95       	ret

000041b8 <serial_create>:
    41b8:	2f 92       	push	r2
    41ba:	3f 92       	push	r3
    41bc:	4f 92       	push	r4
    41be:	5f 92       	push	r5
    41c0:	6f 92       	push	r6
    41c2:	7f 92       	push	r7
    41c4:	8f 92       	push	r8
    41c6:	9f 92       	push	r9
    41c8:	af 92       	push	r10
    41ca:	cf 92       	push	r12
    41cc:	ef 92       	push	r14
    41ce:	ff 92       	push	r15
    41d0:	0f 93       	push	r16
    41d2:	1f 93       	push	r17
    41d4:	cf 93       	push	r28
    41d6:	df 93       	push	r29
    41d8:	cd b7       	in	r28, 0x3d	; 61
    41da:	de b7       	in	r29, 0x3e	; 62
    41dc:	f8 2e       	mov	r15, r24
    41de:	2a 01       	movw	r4, r20
    41e0:	3b 01       	movw	r6, r22
    41e2:	88 e0       	ldi	r24, 0x08	; 8
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	0e 94 0c 2a 	call	0x5418	; 0x5418 <malloc>
    41ea:	8c 01       	movw	r16, r24
    41ec:	8f 2d       	mov	r24, r15
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	fc 01       	movw	r30, r24
    41f2:	ee 0f       	add	r30, r30
    41f4:	ff 1f       	adc	r31, r31
    41f6:	e0 59       	subi	r30, 0x90	; 144
    41f8:	fc 4e       	sbci	r31, 0xEC	; 236
    41fa:	11 83       	std	Z+1, r17	; 0x01
    41fc:	00 83       	st	Z, r16
    41fe:	01 15       	cp	r16, r1
    4200:	11 05       	cpc	r17, r1
    4202:	09 f4       	brne	.+2      	; 0x4206 <serial_create+0x4e>
    4204:	69 c0       	rjmp	.+210    	; 0x42d8 <serial_create+0x120>
    4206:	88 0f       	add	r24, r24
    4208:	99 1f       	adc	r25, r25
    420a:	fc 01       	movw	r30, r24
    420c:	e5 5f       	subi	r30, 0xF5	; 245
    420e:	fd 4f       	sbci	r31, 0xFD	; 253
    4210:	80 81       	ld	r24, Z
    4212:	91 81       	ldd	r25, Z+1	; 0x01
    4214:	d8 01       	movw	r26, r16
    4216:	8d 93       	st	X+, r24
    4218:	9c 93       	st	X, r25
    421a:	6c 2d       	mov	r22, r12
    421c:	70 e0       	ldi	r23, 0x00	; 0
    421e:	84 e0       	ldi	r24, 0x04	; 4
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <calloc>
    4226:	1c 01       	movw	r2, r24
    4228:	61 e0       	ldi	r22, 0x01	; 1
    422a:	70 e0       	ldi	r23, 0x00	; 0
    422c:	86 e0       	ldi	r24, 0x06	; 6
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <calloc>
    4234:	7c 01       	movw	r14, r24
    4236:	4c 2d       	mov	r20, r12
    4238:	b1 01       	movw	r22, r2
    423a:	f1 d6       	rcall	.+3554   	; 0x501e <fifo_init>
    423c:	f8 01       	movw	r30, r16
    423e:	f5 82       	std	Z+5, r15	; 0x05
    4240:	e4 82       	std	Z+4, r14	; 0x04
    4242:	6a 2d       	mov	r22, r10
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	84 e0       	ldi	r24, 0x04	; 4
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <calloc>
    424e:	1c 01       	movw	r2, r24
    4250:	61 e0       	ldi	r22, 0x01	; 1
    4252:	70 e0       	ldi	r23, 0x00	; 0
    4254:	86 e0       	ldi	r24, 0x06	; 6
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <calloc>
    425c:	7c 01       	movw	r14, r24
    425e:	4a 2d       	mov	r20, r10
    4260:	b1 01       	movw	r22, r2
    4262:	dd d6       	rcall	.+3514   	; 0x501e <fifo_init>
    4264:	d8 01       	movw	r26, r16
    4266:	13 96       	adiw	r26, 0x03	; 3
    4268:	fc 92       	st	X, r15
    426a:	ee 92       	st	-X, r14
    426c:	12 97       	sbiw	r26, 0x02	; 2
    426e:	17 96       	adiw	r26, 0x07	; 7
    4270:	9c 92       	st	X, r9
    4272:	8e 92       	st	-X, r8
    4274:	16 97       	sbiw	r26, 0x06	; 6
    4276:	ff b6       	in	r15, 0x3f	; 63
    4278:	f8 94       	cli
    427a:	ed 91       	ld	r30, X+
    427c:	fc 91       	ld	r31, X
    427e:	11 97       	sbiw	r26, 0x01	; 1
    4280:	36 97       	sbiw	r30, 0x06	; 6
    4282:	80 81       	ld	r24, Z
    4284:	82 60       	ori	r24, 0x02	; 2
    4286:	80 83       	st	Z, r24
    4288:	8d 90       	ld	r8, X+
    428a:	9c 90       	ld	r9, X
    428c:	c3 01       	movw	r24, r6
    428e:	b2 01       	movw	r22, r4
    4290:	b4 d7       	rcall	.+3944   	; 0x51fa <__floatunsisf>
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	40 e0       	ldi	r20, 0x00	; 0
    4298:	51 e4       	ldi	r21, 0x41	; 65
    429a:	0e 94 62 29 	call	0x52c4	; 0x52c4 <__mulsf3>
    429e:	9b 01       	movw	r18, r22
    42a0:	ac 01       	movw	r20, r24
    42a2:	60 e0       	ldi	r22, 0x00	; 0
    42a4:	74 e2       	ldi	r23, 0x24	; 36
    42a6:	84 e7       	ldi	r24, 0x74	; 116
    42a8:	9b e4       	ldi	r25, 0x4B	; 75
    42aa:	3c d7       	rcall	.+3704   	; 0x5124 <__divsf3>
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	40 e8       	ldi	r20, 0x80	; 128
    42b2:	5f e3       	ldi	r21, 0x3F	; 63
    42b4:	d0 d6       	rcall	.+3488   	; 0x5056 <__subsf3>
    42b6:	71 d9       	rcall	.-3358   	; 0x359a <__fixunssfsi>
    42b8:	f4 01       	movw	r30, r8
    42ba:	32 97       	sbiw	r30, 0x02	; 2
    42bc:	60 83       	st	Z, r22
    42be:	d8 01       	movw	r26, r16
    42c0:	ed 91       	ld	r30, X+
    42c2:	fc 91       	ld	r31, X
    42c4:	11 97       	sbiw	r26, 0x01	; 1
    42c6:	35 97       	sbiw	r30, 0x05	; 5
    42c8:	88 e9       	ldi	r24, 0x98	; 152
    42ca:	80 83       	st	Z, r24
    42cc:	ed 91       	ld	r30, X+
    42ce:	fc 91       	ld	r31, X
    42d0:	34 97       	sbiw	r30, 0x04	; 4
    42d2:	86 e0       	ldi	r24, 0x06	; 6
    42d4:	80 83       	st	Z, r24
    42d6:	ff be       	out	0x3f, r15	; 63
    42d8:	c8 01       	movw	r24, r16
    42da:	df 91       	pop	r29
    42dc:	cf 91       	pop	r28
    42de:	1f 91       	pop	r17
    42e0:	0f 91       	pop	r16
    42e2:	ff 90       	pop	r15
    42e4:	ef 90       	pop	r14
    42e6:	cf 90       	pop	r12
    42e8:	af 90       	pop	r10
    42ea:	9f 90       	pop	r9
    42ec:	8f 90       	pop	r8
    42ee:	7f 90       	pop	r7
    42f0:	6f 90       	pop	r6
    42f2:	5f 90       	pop	r5
    42f4:	4f 90       	pop	r4
    42f6:	3f 90       	pop	r3
    42f8:	2f 90       	pop	r2
    42fa:	08 95       	ret

000042fc <serial_sendByte>:
    42fc:	cf 93       	push	r28
    42fe:	df 93       	push	r29
    4300:	dc 01       	movw	r26, r24
    4302:	89 2b       	or	r24, r25
    4304:	01 f1       	breq	.+64     	; 0x4346 <serial_sendByte+0x4a>
    4306:	12 96       	adiw	r26, 0x02	; 2
    4308:	ed 91       	ld	r30, X+
    430a:	fc 91       	ld	r31, X
    430c:	13 97       	sbiw	r26, 0x03	; 3
    430e:	93 81       	ldd	r25, Z+3	; 0x03
    4310:	82 81       	ldd	r24, Z+2	; 0x02
    4312:	25 81       	ldd	r18, Z+5	; 0x05
    4314:	98 1b       	sub	r25, r24
    4316:	92 23       	and	r25, r18
    4318:	84 81       	ldd	r24, Z+4	; 0x04
    431a:	98 17       	cp	r25, r24
    431c:	b1 f0       	breq	.+44     	; 0x434a <serial_sendByte+0x4e>
    431e:	83 81       	ldd	r24, Z+3	; 0x03
    4320:	26 95       	lsr	r18
    4322:	28 23       	and	r18, r24
    4324:	c0 81       	ld	r28, Z
    4326:	d1 81       	ldd	r29, Z+1	; 0x01
    4328:	c2 0f       	add	r28, r18
    432a:	d1 1d       	adc	r29, r1
    432c:	68 83       	st	Y, r22
    432e:	8f 5f       	subi	r24, 0xFF	; 255
    4330:	95 81       	ldd	r25, Z+5	; 0x05
    4332:	89 23       	and	r24, r25
    4334:	83 83       	std	Z+3, r24	; 0x03
    4336:	ed 91       	ld	r30, X+
    4338:	fc 91       	ld	r31, X
    433a:	35 97       	sbiw	r30, 0x05	; 5
    433c:	80 81       	ld	r24, Z
    433e:	80 62       	ori	r24, 0x20	; 32
    4340:	80 83       	st	Z, r24
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	03 c0       	rjmp	.+6      	; 0x434c <serial_sendByte+0x50>
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	01 c0       	rjmp	.+2      	; 0x434c <serial_sendByte+0x50>
    434a:	82 e0       	ldi	r24, 0x02	; 2
    434c:	df 91       	pop	r29
    434e:	cf 91       	pop	r28
    4350:	08 95       	ret

00004352 <serial_sendBytes>:
    4352:	ef 92       	push	r14
    4354:	ff 92       	push	r15
    4356:	0f 93       	push	r16
    4358:	1f 93       	push	r17
    435a:	cf 93       	push	r28
    435c:	df 93       	push	r29
    435e:	7c 01       	movw	r14, r24
    4360:	00 97       	sbiw	r24, 0x00	; 0
    4362:	09 f4       	brne	.+2      	; 0x4366 <serial_sendBytes+0x14>
    4364:	41 c0       	rjmp	.+130    	; 0x43e8 <serial_sendBytes+0x96>
    4366:	dc 01       	movw	r26, r24
    4368:	12 96       	adiw	r26, 0x02	; 2
    436a:	ed 91       	ld	r30, X+
    436c:	fc 91       	ld	r31, X
    436e:	13 97       	sbiw	r26, 0x03	; 3
    4370:	93 81       	ldd	r25, Z+3	; 0x03
    4372:	82 81       	ldd	r24, Z+2	; 0x02
    4374:	98 1b       	sub	r25, r24
    4376:	85 81       	ldd	r24, Z+5	; 0x05
    4378:	98 23       	and	r25, r24
    437a:	84 81       	ldd	r24, Z+4	; 0x04
    437c:	89 1b       	sub	r24, r25
    437e:	86 17       	cp	r24, r22
    4380:	a8 f1       	brcs	.+106    	; 0x43ec <serial_sendBytes+0x9a>
    4382:	66 23       	and	r22, r22
    4384:	41 f1       	breq	.+80     	; 0x43d6 <serial_sendBytes+0x84>
    4386:	84 2f       	mov	r24, r20
    4388:	95 2f       	mov	r25, r21
    438a:	dc 01       	movw	r26, r24
    438c:	61 50       	subi	r22, 0x01	; 1
    438e:	46 2f       	mov	r20, r22
    4390:	50 e0       	ldi	r21, 0x00	; 0
    4392:	4f 5f       	subi	r20, 0xFF	; 255
    4394:	5f 4f       	sbci	r21, 0xFF	; 255
    4396:	48 0f       	add	r20, r24
    4398:	59 1f       	adc	r21, r25
    439a:	e7 01       	movw	r28, r14
    439c:	ea 81       	ldd	r30, Y+2	; 0x02
    439e:	fb 81       	ldd	r31, Y+3	; 0x03
    43a0:	93 81       	ldd	r25, Z+3	; 0x03
    43a2:	82 81       	ldd	r24, Z+2	; 0x02
    43a4:	25 81       	ldd	r18, Z+5	; 0x05
    43a6:	98 1b       	sub	r25, r24
    43a8:	92 23       	and	r25, r18
    43aa:	84 81       	ldd	r24, Z+4	; 0x04
    43ac:	98 17       	cp	r25, r24
    43ae:	79 f0       	breq	.+30     	; 0x43ce <serial_sendBytes+0x7c>
    43b0:	8c 91       	ld	r24, X
    43b2:	93 81       	ldd	r25, Z+3	; 0x03
    43b4:	26 95       	lsr	r18
    43b6:	29 23       	and	r18, r25
    43b8:	60 81       	ld	r22, Z
    43ba:	71 81       	ldd	r23, Z+1	; 0x01
    43bc:	8b 01       	movw	r16, r22
    43be:	02 0f       	add	r16, r18
    43c0:	11 1d       	adc	r17, r1
    43c2:	e8 01       	movw	r28, r16
    43c4:	88 83       	st	Y, r24
    43c6:	9f 5f       	subi	r25, 0xFF	; 255
    43c8:	85 81       	ldd	r24, Z+5	; 0x05
    43ca:	98 23       	and	r25, r24
    43cc:	93 83       	std	Z+3, r25	; 0x03
    43ce:	11 96       	adiw	r26, 0x01	; 1
    43d0:	a4 17       	cp	r26, r20
    43d2:	b5 07       	cpc	r27, r21
    43d4:	11 f7       	brne	.-60     	; 0x439a <serial_sendBytes+0x48>
    43d6:	d7 01       	movw	r26, r14
    43d8:	ed 91       	ld	r30, X+
    43da:	fc 91       	ld	r31, X
    43dc:	35 97       	sbiw	r30, 0x05	; 5
    43de:	80 81       	ld	r24, Z
    43e0:	80 62       	ori	r24, 0x20	; 32
    43e2:	80 83       	st	Z, r24
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	03 c0       	rjmp	.+6      	; 0x43ee <serial_sendBytes+0x9c>
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	01 c0       	rjmp	.+2      	; 0x43ee <serial_sendBytes+0x9c>
    43ec:	82 e0       	ldi	r24, 0x02	; 2
    43ee:	df 91       	pop	r29
    43f0:	cf 91       	pop	r28
    43f2:	1f 91       	pop	r17
    43f4:	0f 91       	pop	r16
    43f6:	ff 90       	pop	r15
    43f8:	ef 90       	pop	r14
    43fa:	08 95       	ret

000043fc <serial_getByte>:
    43fc:	00 97       	sbiw	r24, 0x00	; 0
    43fe:	d1 f0       	breq	.+52     	; 0x4434 <serial_getByte+0x38>
    4400:	dc 01       	movw	r26, r24
    4402:	14 96       	adiw	r26, 0x04	; 4
    4404:	ed 91       	ld	r30, X+
    4406:	fc 91       	ld	r31, X
    4408:	15 97       	sbiw	r26, 0x05	; 5
    440a:	93 81       	ldd	r25, Z+3	; 0x03
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	98 17       	cp	r25, r24
    4410:	99 f0       	breq	.+38     	; 0x4438 <serial_getByte+0x3c>
    4412:	92 81       	ldd	r25, Z+2	; 0x02
    4414:	85 81       	ldd	r24, Z+5	; 0x05
    4416:	86 95       	lsr	r24
    4418:	89 23       	and	r24, r25
    441a:	a0 81       	ld	r26, Z
    441c:	b1 81       	ldd	r27, Z+1	; 0x01
    441e:	a8 0f       	add	r26, r24
    4420:	b1 1d       	adc	r27, r1
    4422:	8c 91       	ld	r24, X
    4424:	db 01       	movw	r26, r22
    4426:	8c 93       	st	X, r24
    4428:	9f 5f       	subi	r25, 0xFF	; 255
    442a:	85 81       	ldd	r24, Z+5	; 0x05
    442c:	98 23       	and	r25, r24
    442e:	92 83       	std	Z+2, r25	; 0x02
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	08 95       	ret
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	08 95       	ret
    4438:	83 e0       	ldi	r24, 0x03	; 3
    443a:	08 95       	ret

0000443c <__vector_25>:
    443c:	1f 92       	push	r1
    443e:	0f 92       	push	r0
    4440:	0f b6       	in	r0, 0x3f	; 63
    4442:	0f 92       	push	r0
    4444:	11 24       	eor	r1, r1
    4446:	0b b6       	in	r0, 0x3b	; 59
    4448:	0f 92       	push	r0
    444a:	2f 93       	push	r18
    444c:	3f 93       	push	r19
    444e:	4f 93       	push	r20
    4450:	5f 93       	push	r21
    4452:	6f 93       	push	r22
    4454:	7f 93       	push	r23
    4456:	8f 93       	push	r24
    4458:	9f 93       	push	r25
    445a:	af 93       	push	r26
    445c:	bf 93       	push	r27
    445e:	cf 93       	push	r28
    4460:	df 93       	push	r29
    4462:	ef 93       	push	r30
    4464:	ff 93       	push	r31
    4466:	a0 91 70 13 	lds	r26, 0x1370	; 0x801370 <_ser_handle>
    446a:	b0 91 71 13 	lds	r27, 0x1371	; 0x801371 <_ser_handle+0x1>
    446e:	10 97       	sbiw	r26, 0x00	; 0
    4470:	11 f1       	breq	.+68     	; 0x44b6 <__vector_25+0x7a>
    4472:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4476:	14 96       	adiw	r26, 0x04	; 4
    4478:	ed 91       	ld	r30, X+
    447a:	fc 91       	ld	r31, X
    447c:	15 97       	sbiw	r26, 0x05	; 5
    447e:	93 81       	ldd	r25, Z+3	; 0x03
    4480:	82 81       	ldd	r24, Z+2	; 0x02
    4482:	25 81       	ldd	r18, Z+5	; 0x05
    4484:	98 1b       	sub	r25, r24
    4486:	92 23       	and	r25, r18
    4488:	84 81       	ldd	r24, Z+4	; 0x04
    448a:	98 17       	cp	r25, r24
    448c:	61 f0       	breq	.+24     	; 0x44a6 <__vector_25+0x6a>
    448e:	83 81       	ldd	r24, Z+3	; 0x03
    4490:	26 95       	lsr	r18
    4492:	28 23       	and	r18, r24
    4494:	c0 81       	ld	r28, Z
    4496:	d1 81       	ldd	r29, Z+1	; 0x01
    4498:	c2 0f       	add	r28, r18
    449a:	d1 1d       	adc	r29, r1
    449c:	68 83       	st	Y, r22
    449e:	8f 5f       	subi	r24, 0xFF	; 255
    44a0:	95 81       	ldd	r25, Z+5	; 0x05
    44a2:	89 23       	and	r24, r25
    44a4:	83 83       	std	Z+3, r24	; 0x03
    44a6:	16 96       	adiw	r26, 0x06	; 6
    44a8:	ed 91       	ld	r30, X+
    44aa:	fc 91       	ld	r31, X
    44ac:	17 97       	sbiw	r26, 0x07	; 7
    44ae:	30 97       	sbiw	r30, 0x00	; 0
    44b0:	11 f0       	breq	.+4      	; 0x44b6 <__vector_25+0x7a>
    44b2:	cd 01       	movw	r24, r26
    44b4:	19 95       	eicall
    44b6:	ff 91       	pop	r31
    44b8:	ef 91       	pop	r30
    44ba:	df 91       	pop	r29
    44bc:	cf 91       	pop	r28
    44be:	bf 91       	pop	r27
    44c0:	af 91       	pop	r26
    44c2:	9f 91       	pop	r25
    44c4:	8f 91       	pop	r24
    44c6:	7f 91       	pop	r23
    44c8:	6f 91       	pop	r22
    44ca:	5f 91       	pop	r21
    44cc:	4f 91       	pop	r20
    44ce:	3f 91       	pop	r19
    44d0:	2f 91       	pop	r18
    44d2:	0f 90       	pop	r0
    44d4:	0b be       	out	0x3b, r0	; 59
    44d6:	0f 90       	pop	r0
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	0f 90       	pop	r0
    44dc:	1f 90       	pop	r1
    44de:	18 95       	reti

000044e0 <__vector_26>:
    44e0:	1f 92       	push	r1
    44e2:	0f 92       	push	r0
    44e4:	0f b6       	in	r0, 0x3f	; 63
    44e6:	0f 92       	push	r0
    44e8:	11 24       	eor	r1, r1
    44ea:	0b b6       	in	r0, 0x3b	; 59
    44ec:	0f 92       	push	r0
    44ee:	2f 93       	push	r18
    44f0:	8f 93       	push	r24
    44f2:	9f 93       	push	r25
    44f4:	af 93       	push	r26
    44f6:	bf 93       	push	r27
    44f8:	ef 93       	push	r30
    44fa:	ff 93       	push	r31
    44fc:	e0 91 70 13 	lds	r30, 0x1370	; 0x801370 <_ser_handle>
    4500:	f0 91 71 13 	lds	r31, 0x1371	; 0x801371 <_ser_handle+0x1>
    4504:	30 97       	sbiw	r30, 0x00	; 0
    4506:	b9 f0       	breq	.+46     	; 0x4536 <__vector_26+0x56>
    4508:	02 80       	ldd	r0, Z+2	; 0x02
    450a:	f3 81       	ldd	r31, Z+3	; 0x03
    450c:	e0 2d       	mov	r30, r0
    450e:	93 81       	ldd	r25, Z+3	; 0x03
    4510:	82 81       	ldd	r24, Z+2	; 0x02
    4512:	98 17       	cp	r25, r24
    4514:	b1 f0       	breq	.+44     	; 0x4542 <__vector_26+0x62>
    4516:	92 81       	ldd	r25, Z+2	; 0x02
    4518:	85 81       	ldd	r24, Z+5	; 0x05
    451a:	28 2f       	mov	r18, r24
    451c:	26 95       	lsr	r18
    451e:	29 23       	and	r18, r25
    4520:	a0 81       	ld	r26, Z
    4522:	b1 81       	ldd	r27, Z+1	; 0x01
    4524:	a2 0f       	add	r26, r18
    4526:	b1 1d       	adc	r27, r1
    4528:	2c 91       	ld	r18, X
    452a:	9f 5f       	subi	r25, 0xFF	; 255
    452c:	89 23       	and	r24, r25
    452e:	82 83       	std	Z+2, r24	; 0x02
    4530:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4534:	0b c0       	rjmp	.+22     	; 0x454c <__vector_26+0x6c>
    4536:	e1 ec       	ldi	r30, 0xC1	; 193
    4538:	f0 e0       	ldi	r31, 0x00	; 0
    453a:	80 81       	ld	r24, Z
    453c:	8f 7d       	andi	r24, 0xDF	; 223
    453e:	80 83       	st	Z, r24
    4540:	05 c0       	rjmp	.+10     	; 0x454c <__vector_26+0x6c>
    4542:	e1 ec       	ldi	r30, 0xC1	; 193
    4544:	f0 e0       	ldi	r31, 0x00	; 0
    4546:	80 81       	ld	r24, Z
    4548:	8f 7d       	andi	r24, 0xDF	; 223
    454a:	80 83       	st	Z, r24
    454c:	ff 91       	pop	r31
    454e:	ef 91       	pop	r30
    4550:	bf 91       	pop	r27
    4552:	af 91       	pop	r26
    4554:	9f 91       	pop	r25
    4556:	8f 91       	pop	r24
    4558:	2f 91       	pop	r18
    455a:	0f 90       	pop	r0
    455c:	0b be       	out	0x3b, r0	; 59
    455e:	0f 90       	pop	r0
    4560:	0f be       	out	0x3f, r0	; 63
    4562:	0f 90       	pop	r0
    4564:	1f 90       	pop	r1
    4566:	18 95       	reti

00004568 <__vector_36>:
    4568:	1f 92       	push	r1
    456a:	0f 92       	push	r0
    456c:	0f b6       	in	r0, 0x3f	; 63
    456e:	0f 92       	push	r0
    4570:	11 24       	eor	r1, r1
    4572:	0b b6       	in	r0, 0x3b	; 59
    4574:	0f 92       	push	r0
    4576:	2f 93       	push	r18
    4578:	3f 93       	push	r19
    457a:	4f 93       	push	r20
    457c:	5f 93       	push	r21
    457e:	6f 93       	push	r22
    4580:	7f 93       	push	r23
    4582:	8f 93       	push	r24
    4584:	9f 93       	push	r25
    4586:	af 93       	push	r26
    4588:	bf 93       	push	r27
    458a:	cf 93       	push	r28
    458c:	df 93       	push	r29
    458e:	ef 93       	push	r30
    4590:	ff 93       	push	r31
    4592:	a0 91 72 13 	lds	r26, 0x1372	; 0x801372 <_ser_handle+0x2>
    4596:	b0 91 73 13 	lds	r27, 0x1373	; 0x801373 <_ser_handle+0x3>
    459a:	10 97       	sbiw	r26, 0x00	; 0
    459c:	11 f1       	breq	.+68     	; 0x45e2 <__vector_36+0x7a>
    459e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    45a2:	14 96       	adiw	r26, 0x04	; 4
    45a4:	ed 91       	ld	r30, X+
    45a6:	fc 91       	ld	r31, X
    45a8:	15 97       	sbiw	r26, 0x05	; 5
    45aa:	93 81       	ldd	r25, Z+3	; 0x03
    45ac:	82 81       	ldd	r24, Z+2	; 0x02
    45ae:	25 81       	ldd	r18, Z+5	; 0x05
    45b0:	98 1b       	sub	r25, r24
    45b2:	92 23       	and	r25, r18
    45b4:	84 81       	ldd	r24, Z+4	; 0x04
    45b6:	98 17       	cp	r25, r24
    45b8:	61 f0       	breq	.+24     	; 0x45d2 <__vector_36+0x6a>
    45ba:	83 81       	ldd	r24, Z+3	; 0x03
    45bc:	26 95       	lsr	r18
    45be:	28 23       	and	r18, r24
    45c0:	c0 81       	ld	r28, Z
    45c2:	d1 81       	ldd	r29, Z+1	; 0x01
    45c4:	c2 0f       	add	r28, r18
    45c6:	d1 1d       	adc	r29, r1
    45c8:	68 83       	st	Y, r22
    45ca:	8f 5f       	subi	r24, 0xFF	; 255
    45cc:	95 81       	ldd	r25, Z+5	; 0x05
    45ce:	89 23       	and	r24, r25
    45d0:	83 83       	std	Z+3, r24	; 0x03
    45d2:	16 96       	adiw	r26, 0x06	; 6
    45d4:	ed 91       	ld	r30, X+
    45d6:	fc 91       	ld	r31, X
    45d8:	17 97       	sbiw	r26, 0x07	; 7
    45da:	30 97       	sbiw	r30, 0x00	; 0
    45dc:	11 f0       	breq	.+4      	; 0x45e2 <__vector_36+0x7a>
    45de:	cd 01       	movw	r24, r26
    45e0:	19 95       	eicall
    45e2:	ff 91       	pop	r31
    45e4:	ef 91       	pop	r30
    45e6:	df 91       	pop	r29
    45e8:	cf 91       	pop	r28
    45ea:	bf 91       	pop	r27
    45ec:	af 91       	pop	r26
    45ee:	9f 91       	pop	r25
    45f0:	8f 91       	pop	r24
    45f2:	7f 91       	pop	r23
    45f4:	6f 91       	pop	r22
    45f6:	5f 91       	pop	r21
    45f8:	4f 91       	pop	r20
    45fa:	3f 91       	pop	r19
    45fc:	2f 91       	pop	r18
    45fe:	0f 90       	pop	r0
    4600:	0b be       	out	0x3b, r0	; 59
    4602:	0f 90       	pop	r0
    4604:	0f be       	out	0x3f, r0	; 63
    4606:	0f 90       	pop	r0
    4608:	1f 90       	pop	r1
    460a:	18 95       	reti

0000460c <__vector_37>:
    460c:	1f 92       	push	r1
    460e:	0f 92       	push	r0
    4610:	0f b6       	in	r0, 0x3f	; 63
    4612:	0f 92       	push	r0
    4614:	11 24       	eor	r1, r1
    4616:	0b b6       	in	r0, 0x3b	; 59
    4618:	0f 92       	push	r0
    461a:	2f 93       	push	r18
    461c:	8f 93       	push	r24
    461e:	9f 93       	push	r25
    4620:	af 93       	push	r26
    4622:	bf 93       	push	r27
    4624:	ef 93       	push	r30
    4626:	ff 93       	push	r31
    4628:	e0 91 72 13 	lds	r30, 0x1372	; 0x801372 <_ser_handle+0x2>
    462c:	f0 91 73 13 	lds	r31, 0x1373	; 0x801373 <_ser_handle+0x3>
    4630:	30 97       	sbiw	r30, 0x00	; 0
    4632:	b9 f0       	breq	.+46     	; 0x4662 <__vector_37+0x56>
    4634:	02 80       	ldd	r0, Z+2	; 0x02
    4636:	f3 81       	ldd	r31, Z+3	; 0x03
    4638:	e0 2d       	mov	r30, r0
    463a:	93 81       	ldd	r25, Z+3	; 0x03
    463c:	82 81       	ldd	r24, Z+2	; 0x02
    463e:	98 17       	cp	r25, r24
    4640:	b1 f0       	breq	.+44     	; 0x466e <__vector_37+0x62>
    4642:	92 81       	ldd	r25, Z+2	; 0x02
    4644:	85 81       	ldd	r24, Z+5	; 0x05
    4646:	28 2f       	mov	r18, r24
    4648:	26 95       	lsr	r18
    464a:	29 23       	and	r18, r25
    464c:	a0 81       	ld	r26, Z
    464e:	b1 81       	ldd	r27, Z+1	; 0x01
    4650:	a2 0f       	add	r26, r18
    4652:	b1 1d       	adc	r27, r1
    4654:	2c 91       	ld	r18, X
    4656:	9f 5f       	subi	r25, 0xFF	; 255
    4658:	89 23       	and	r24, r25
    465a:	82 83       	std	Z+2, r24	; 0x02
    465c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4660:	0b c0       	rjmp	.+22     	; 0x4678 <__vector_37+0x6c>
    4662:	e9 ec       	ldi	r30, 0xC9	; 201
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	80 81       	ld	r24, Z
    4668:	8f 7d       	andi	r24, 0xDF	; 223
    466a:	80 83       	st	Z, r24
    466c:	05 c0       	rjmp	.+10     	; 0x4678 <__vector_37+0x6c>
    466e:	e9 ec       	ldi	r30, 0xC9	; 201
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	80 81       	ld	r24, Z
    4674:	8f 7d       	andi	r24, 0xDF	; 223
    4676:	80 83       	st	Z, r24
    4678:	ff 91       	pop	r31
    467a:	ef 91       	pop	r30
    467c:	bf 91       	pop	r27
    467e:	af 91       	pop	r26
    4680:	9f 91       	pop	r25
    4682:	8f 91       	pop	r24
    4684:	2f 91       	pop	r18
    4686:	0f 90       	pop	r0
    4688:	0b be       	out	0x3b, r0	; 59
    468a:	0f 90       	pop	r0
    468c:	0f be       	out	0x3f, r0	; 63
    468e:	0f 90       	pop	r0
    4690:	1f 90       	pop	r1
    4692:	18 95       	reti

00004694 <__vector_51>:
    4694:	1f 92       	push	r1
    4696:	0f 92       	push	r0
    4698:	0f b6       	in	r0, 0x3f	; 63
    469a:	0f 92       	push	r0
    469c:	11 24       	eor	r1, r1
    469e:	0b b6       	in	r0, 0x3b	; 59
    46a0:	0f 92       	push	r0
    46a2:	2f 93       	push	r18
    46a4:	3f 93       	push	r19
    46a6:	4f 93       	push	r20
    46a8:	5f 93       	push	r21
    46aa:	6f 93       	push	r22
    46ac:	7f 93       	push	r23
    46ae:	8f 93       	push	r24
    46b0:	9f 93       	push	r25
    46b2:	af 93       	push	r26
    46b4:	bf 93       	push	r27
    46b6:	cf 93       	push	r28
    46b8:	df 93       	push	r29
    46ba:	ef 93       	push	r30
    46bc:	ff 93       	push	r31
    46be:	a0 91 74 13 	lds	r26, 0x1374	; 0x801374 <_ser_handle+0x4>
    46c2:	b0 91 75 13 	lds	r27, 0x1375	; 0x801375 <_ser_handle+0x5>
    46c6:	10 97       	sbiw	r26, 0x00	; 0
    46c8:	11 f1       	breq	.+68     	; 0x470e <__vector_51+0x7a>
    46ca:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    46ce:	14 96       	adiw	r26, 0x04	; 4
    46d0:	ed 91       	ld	r30, X+
    46d2:	fc 91       	ld	r31, X
    46d4:	15 97       	sbiw	r26, 0x05	; 5
    46d6:	93 81       	ldd	r25, Z+3	; 0x03
    46d8:	82 81       	ldd	r24, Z+2	; 0x02
    46da:	25 81       	ldd	r18, Z+5	; 0x05
    46dc:	98 1b       	sub	r25, r24
    46de:	92 23       	and	r25, r18
    46e0:	84 81       	ldd	r24, Z+4	; 0x04
    46e2:	98 17       	cp	r25, r24
    46e4:	61 f0       	breq	.+24     	; 0x46fe <__vector_51+0x6a>
    46e6:	83 81       	ldd	r24, Z+3	; 0x03
    46e8:	26 95       	lsr	r18
    46ea:	28 23       	and	r18, r24
    46ec:	c0 81       	ld	r28, Z
    46ee:	d1 81       	ldd	r29, Z+1	; 0x01
    46f0:	c2 0f       	add	r28, r18
    46f2:	d1 1d       	adc	r29, r1
    46f4:	68 83       	st	Y, r22
    46f6:	8f 5f       	subi	r24, 0xFF	; 255
    46f8:	95 81       	ldd	r25, Z+5	; 0x05
    46fa:	89 23       	and	r24, r25
    46fc:	83 83       	std	Z+3, r24	; 0x03
    46fe:	16 96       	adiw	r26, 0x06	; 6
    4700:	ed 91       	ld	r30, X+
    4702:	fc 91       	ld	r31, X
    4704:	17 97       	sbiw	r26, 0x07	; 7
    4706:	30 97       	sbiw	r30, 0x00	; 0
    4708:	11 f0       	breq	.+4      	; 0x470e <__vector_51+0x7a>
    470a:	cd 01       	movw	r24, r26
    470c:	19 95       	eicall
    470e:	ff 91       	pop	r31
    4710:	ef 91       	pop	r30
    4712:	df 91       	pop	r29
    4714:	cf 91       	pop	r28
    4716:	bf 91       	pop	r27
    4718:	af 91       	pop	r26
    471a:	9f 91       	pop	r25
    471c:	8f 91       	pop	r24
    471e:	7f 91       	pop	r23
    4720:	6f 91       	pop	r22
    4722:	5f 91       	pop	r21
    4724:	4f 91       	pop	r20
    4726:	3f 91       	pop	r19
    4728:	2f 91       	pop	r18
    472a:	0f 90       	pop	r0
    472c:	0b be       	out	0x3b, r0	; 59
    472e:	0f 90       	pop	r0
    4730:	0f be       	out	0x3f, r0	; 63
    4732:	0f 90       	pop	r0
    4734:	1f 90       	pop	r1
    4736:	18 95       	reti

00004738 <__vector_52>:
    4738:	1f 92       	push	r1
    473a:	0f 92       	push	r0
    473c:	0f b6       	in	r0, 0x3f	; 63
    473e:	0f 92       	push	r0
    4740:	11 24       	eor	r1, r1
    4742:	0b b6       	in	r0, 0x3b	; 59
    4744:	0f 92       	push	r0
    4746:	2f 93       	push	r18
    4748:	8f 93       	push	r24
    474a:	9f 93       	push	r25
    474c:	af 93       	push	r26
    474e:	bf 93       	push	r27
    4750:	ef 93       	push	r30
    4752:	ff 93       	push	r31
    4754:	e0 91 74 13 	lds	r30, 0x1374	; 0x801374 <_ser_handle+0x4>
    4758:	f0 91 75 13 	lds	r31, 0x1375	; 0x801375 <_ser_handle+0x5>
    475c:	30 97       	sbiw	r30, 0x00	; 0
    475e:	b9 f0       	breq	.+46     	; 0x478e <__vector_52+0x56>
    4760:	02 80       	ldd	r0, Z+2	; 0x02
    4762:	f3 81       	ldd	r31, Z+3	; 0x03
    4764:	e0 2d       	mov	r30, r0
    4766:	93 81       	ldd	r25, Z+3	; 0x03
    4768:	82 81       	ldd	r24, Z+2	; 0x02
    476a:	98 17       	cp	r25, r24
    476c:	b1 f0       	breq	.+44     	; 0x479a <__vector_52+0x62>
    476e:	92 81       	ldd	r25, Z+2	; 0x02
    4770:	85 81       	ldd	r24, Z+5	; 0x05
    4772:	28 2f       	mov	r18, r24
    4774:	26 95       	lsr	r18
    4776:	29 23       	and	r18, r25
    4778:	a0 81       	ld	r26, Z
    477a:	b1 81       	ldd	r27, Z+1	; 0x01
    477c:	a2 0f       	add	r26, r18
    477e:	b1 1d       	adc	r27, r1
    4780:	2c 91       	ld	r18, X
    4782:	9f 5f       	subi	r25, 0xFF	; 255
    4784:	89 23       	and	r24, r25
    4786:	82 83       	std	Z+2, r24	; 0x02
    4788:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    478c:	0b c0       	rjmp	.+22     	; 0x47a4 <__vector_52+0x6c>
    478e:	e1 ed       	ldi	r30, 0xD1	; 209
    4790:	f0 e0       	ldi	r31, 0x00	; 0
    4792:	80 81       	ld	r24, Z
    4794:	8f 7d       	andi	r24, 0xDF	; 223
    4796:	80 83       	st	Z, r24
    4798:	05 c0       	rjmp	.+10     	; 0x47a4 <__vector_52+0x6c>
    479a:	e1 ed       	ldi	r30, 0xD1	; 209
    479c:	f0 e0       	ldi	r31, 0x00	; 0
    479e:	80 81       	ld	r24, Z
    47a0:	8f 7d       	andi	r24, 0xDF	; 223
    47a2:	80 83       	st	Z, r24
    47a4:	ff 91       	pop	r31
    47a6:	ef 91       	pop	r30
    47a8:	bf 91       	pop	r27
    47aa:	af 91       	pop	r26
    47ac:	9f 91       	pop	r25
    47ae:	8f 91       	pop	r24
    47b0:	2f 91       	pop	r18
    47b2:	0f 90       	pop	r0
    47b4:	0b be       	out	0x3b, r0	; 59
    47b6:	0f 90       	pop	r0
    47b8:	0f be       	out	0x3f, r0	; 63
    47ba:	0f 90       	pop	r0
    47bc:	1f 90       	pop	r1
    47be:	18 95       	reti

000047c0 <__vector_54>:
    47c0:	1f 92       	push	r1
    47c2:	0f 92       	push	r0
    47c4:	0f b6       	in	r0, 0x3f	; 63
    47c6:	0f 92       	push	r0
    47c8:	11 24       	eor	r1, r1
    47ca:	0b b6       	in	r0, 0x3b	; 59
    47cc:	0f 92       	push	r0
    47ce:	2f 93       	push	r18
    47d0:	3f 93       	push	r19
    47d2:	4f 93       	push	r20
    47d4:	5f 93       	push	r21
    47d6:	6f 93       	push	r22
    47d8:	7f 93       	push	r23
    47da:	8f 93       	push	r24
    47dc:	9f 93       	push	r25
    47de:	af 93       	push	r26
    47e0:	bf 93       	push	r27
    47e2:	cf 93       	push	r28
    47e4:	df 93       	push	r29
    47e6:	ef 93       	push	r30
    47e8:	ff 93       	push	r31
    47ea:	a0 91 76 13 	lds	r26, 0x1376	; 0x801376 <_ser_handle+0x6>
    47ee:	b0 91 77 13 	lds	r27, 0x1377	; 0x801377 <_ser_handle+0x7>
    47f2:	10 97       	sbiw	r26, 0x00	; 0
    47f4:	11 f1       	breq	.+68     	; 0x483a <__vector_54+0x7a>
    47f6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    47fa:	14 96       	adiw	r26, 0x04	; 4
    47fc:	ed 91       	ld	r30, X+
    47fe:	fc 91       	ld	r31, X
    4800:	15 97       	sbiw	r26, 0x05	; 5
    4802:	93 81       	ldd	r25, Z+3	; 0x03
    4804:	82 81       	ldd	r24, Z+2	; 0x02
    4806:	25 81       	ldd	r18, Z+5	; 0x05
    4808:	98 1b       	sub	r25, r24
    480a:	92 23       	and	r25, r18
    480c:	84 81       	ldd	r24, Z+4	; 0x04
    480e:	98 17       	cp	r25, r24
    4810:	61 f0       	breq	.+24     	; 0x482a <__vector_54+0x6a>
    4812:	83 81       	ldd	r24, Z+3	; 0x03
    4814:	26 95       	lsr	r18
    4816:	28 23       	and	r18, r24
    4818:	c0 81       	ld	r28, Z
    481a:	d1 81       	ldd	r29, Z+1	; 0x01
    481c:	c2 0f       	add	r28, r18
    481e:	d1 1d       	adc	r29, r1
    4820:	68 83       	st	Y, r22
    4822:	8f 5f       	subi	r24, 0xFF	; 255
    4824:	95 81       	ldd	r25, Z+5	; 0x05
    4826:	89 23       	and	r24, r25
    4828:	83 83       	std	Z+3, r24	; 0x03
    482a:	16 96       	adiw	r26, 0x06	; 6
    482c:	ed 91       	ld	r30, X+
    482e:	fc 91       	ld	r31, X
    4830:	17 97       	sbiw	r26, 0x07	; 7
    4832:	30 97       	sbiw	r30, 0x00	; 0
    4834:	11 f0       	breq	.+4      	; 0x483a <__vector_54+0x7a>
    4836:	cd 01       	movw	r24, r26
    4838:	19 95       	eicall
    483a:	ff 91       	pop	r31
    483c:	ef 91       	pop	r30
    483e:	df 91       	pop	r29
    4840:	cf 91       	pop	r28
    4842:	bf 91       	pop	r27
    4844:	af 91       	pop	r26
    4846:	9f 91       	pop	r25
    4848:	8f 91       	pop	r24
    484a:	7f 91       	pop	r23
    484c:	6f 91       	pop	r22
    484e:	5f 91       	pop	r21
    4850:	4f 91       	pop	r20
    4852:	3f 91       	pop	r19
    4854:	2f 91       	pop	r18
    4856:	0f 90       	pop	r0
    4858:	0b be       	out	0x3b, r0	; 59
    485a:	0f 90       	pop	r0
    485c:	0f be       	out	0x3f, r0	; 63
    485e:	0f 90       	pop	r0
    4860:	1f 90       	pop	r1
    4862:	18 95       	reti

00004864 <__vector_55>:
    4864:	1f 92       	push	r1
    4866:	0f 92       	push	r0
    4868:	0f b6       	in	r0, 0x3f	; 63
    486a:	0f 92       	push	r0
    486c:	11 24       	eor	r1, r1
    486e:	0b b6       	in	r0, 0x3b	; 59
    4870:	0f 92       	push	r0
    4872:	2f 93       	push	r18
    4874:	8f 93       	push	r24
    4876:	9f 93       	push	r25
    4878:	af 93       	push	r26
    487a:	bf 93       	push	r27
    487c:	ef 93       	push	r30
    487e:	ff 93       	push	r31
    4880:	e0 91 76 13 	lds	r30, 0x1376	; 0x801376 <_ser_handle+0x6>
    4884:	f0 91 77 13 	lds	r31, 0x1377	; 0x801377 <_ser_handle+0x7>
    4888:	30 97       	sbiw	r30, 0x00	; 0
    488a:	b9 f0       	breq	.+46     	; 0x48ba <__vector_55+0x56>
    488c:	02 80       	ldd	r0, Z+2	; 0x02
    488e:	f3 81       	ldd	r31, Z+3	; 0x03
    4890:	e0 2d       	mov	r30, r0
    4892:	93 81       	ldd	r25, Z+3	; 0x03
    4894:	82 81       	ldd	r24, Z+2	; 0x02
    4896:	98 17       	cp	r25, r24
    4898:	b1 f0       	breq	.+44     	; 0x48c6 <__vector_55+0x62>
    489a:	92 81       	ldd	r25, Z+2	; 0x02
    489c:	85 81       	ldd	r24, Z+5	; 0x05
    489e:	28 2f       	mov	r18, r24
    48a0:	26 95       	lsr	r18
    48a2:	29 23       	and	r18, r25
    48a4:	a0 81       	ld	r26, Z
    48a6:	b1 81       	ldd	r27, Z+1	; 0x01
    48a8:	a2 0f       	add	r26, r18
    48aa:	b1 1d       	adc	r27, r1
    48ac:	2c 91       	ld	r18, X
    48ae:	9f 5f       	subi	r25, 0xFF	; 255
    48b0:	89 23       	and	r24, r25
    48b2:	82 83       	std	Z+2, r24	; 0x02
    48b4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    48b8:	0b c0       	rjmp	.+22     	; 0x48d0 <__vector_55+0x6c>
    48ba:	e1 e3       	ldi	r30, 0x31	; 49
    48bc:	f1 e0       	ldi	r31, 0x01	; 1
    48be:	80 81       	ld	r24, Z
    48c0:	8f 7d       	andi	r24, 0xDF	; 223
    48c2:	80 83       	st	Z, r24
    48c4:	05 c0       	rjmp	.+10     	; 0x48d0 <__vector_55+0x6c>
    48c6:	e1 e3       	ldi	r30, 0x31	; 49
    48c8:	f1 e0       	ldi	r31, 0x01	; 1
    48ca:	80 81       	ld	r24, Z
    48cc:	8f 7d       	andi	r24, 0xDF	; 223
    48ce:	80 83       	st	Z, r24
    48d0:	ff 91       	pop	r31
    48d2:	ef 91       	pop	r30
    48d4:	bf 91       	pop	r27
    48d6:	af 91       	pop	r26
    48d8:	9f 91       	pop	r25
    48da:	8f 91       	pop	r24
    48dc:	2f 91       	pop	r18
    48de:	0f 90       	pop	r0
    48e0:	0b be       	out	0x3b, r0	; 59
    48e2:	0f 90       	pop	r0
    48e4:	0f be       	out	0x3f, r0	; 63
    48e6:	0f 90       	pop	r0
    48e8:	1f 90       	pop	r1
    48ea:	18 95       	reti

000048ec <usart_getchar>:
    48ec:	cf 93       	push	r28
    48ee:	df 93       	push	r29
    48f0:	1f 92       	push	r1
    48f2:	cd b7       	in	r28, 0x3d	; 61
    48f4:	de b7       	in	r29, 0x3e	; 62
    48f6:	be 01       	movw	r22, r28
    48f8:	6f 5f       	subi	r22, 0xFF	; 255
    48fa:	7f 4f       	sbci	r23, 0xFF	; 255
    48fc:	80 91 78 13 	lds	r24, 0x1378	; 0x801378 <_com_serial_instance>
    4900:	90 91 79 13 	lds	r25, 0x1379	; 0x801379 <_com_serial_instance+0x1>
    4904:	7b dd       	rcall	.-1290   	; 0x43fc <serial_getByte>
    4906:	81 11       	cpse	r24, r1
    4908:	f6 cf       	rjmp	.-20     	; 0x48f6 <usart_getchar+0xa>
    490a:	89 81       	ldd	r24, Y+1	; 0x01
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	0f 90       	pop	r0
    4910:	df 91       	pop	r29
    4912:	cf 91       	pop	r28
    4914:	08 95       	ret

00004916 <usart_putchar>:
    4916:	68 2f       	mov	r22, r24
    4918:	80 91 78 13 	lds	r24, 0x1378	; 0x801378 <_com_serial_instance>
    491c:	90 91 79 13 	lds	r25, 0x1379	; 0x801379 <_com_serial_instance+0x1>
    4920:	ed dc       	rcall	.-1574   	; 0x42fc <serial_sendByte>
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	08 95       	ret

00004928 <stdio_initialise>:
    4928:	8f 92       	push	r8
    492a:	9f 92       	push	r9
    492c:	af 92       	push	r10
    492e:	cf 92       	push	r12
    4930:	ef 92       	push	r14
    4932:	0f 93       	push	r16
    4934:	81 2c       	mov	r8, r1
    4936:	91 2c       	mov	r9, r1
    4938:	68 94       	set
    493a:	aa 24       	eor	r10, r10
    493c:	a7 f8       	bld	r10, 7
    493e:	68 94       	set
    4940:	cc 24       	eor	r12, r12
    4942:	c7 f8       	bld	r12, 7
    4944:	e1 2c       	mov	r14, r1
    4946:	00 e0       	ldi	r16, 0x00	; 0
    4948:	23 e0       	ldi	r18, 0x03	; 3
    494a:	40 e0       	ldi	r20, 0x00	; 0
    494c:	51 ee       	ldi	r21, 0xE1	; 225
    494e:	60 e0       	ldi	r22, 0x00	; 0
    4950:	70 e0       	ldi	r23, 0x00	; 0
    4952:	32 dc       	rcall	.-1948   	; 0x41b8 <serial_create>
    4954:	90 93 79 13 	sts	0x1379, r25	; 0x801379 <_com_serial_instance+0x1>
    4958:	80 93 78 13 	sts	0x1378, r24	; 0x801378 <_com_serial_instance>
    495c:	e9 eb       	ldi	r30, 0xB9	; 185
    495e:	f3 e1       	ldi	r31, 0x13	; 19
    4960:	83 e1       	ldi	r24, 0x13	; 19
    4962:	92 e0       	ldi	r25, 0x02	; 2
    4964:	91 83       	std	Z+1, r25	; 0x01
    4966:	80 83       	st	Z, r24
    4968:	93 83       	std	Z+3, r25	; 0x03
    496a:	82 83       	std	Z+2, r24	; 0x02
    496c:	0f 91       	pop	r16
    496e:	ef 90       	pop	r14
    4970:	cf 90       	pop	r12
    4972:	af 90       	pop	r10
    4974:	9f 90       	pop	r9
    4976:	8f 90       	pop	r8
    4978:	08 95       	ret

0000497a <_turn_off>:
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	fc 01       	movw	r30, r24
    497e:	ee 0f       	add	r30, r30
    4980:	ff 1f       	adc	r31, r31
    4982:	e8 0f       	add	r30, r24
    4984:	f9 1f       	adc	r31, r25
    4986:	ee 0f       	add	r30, r30
    4988:	ff 1f       	adc	r31, r31
    498a:	e6 58       	subi	r30, 0x86	; 134
    498c:	fc 4e       	sbci	r31, 0xEC	; 236
    498e:	23 81       	ldd	r18, Z+3	; 0x03
    4990:	21 11       	cpse	r18, r1
    4992:	1f c0       	rjmp	.+62     	; 0x49d2 <_turn_off+0x58>
    4994:	9c 01       	movw	r18, r24
    4996:	22 0f       	add	r18, r18
    4998:	33 1f       	adc	r19, r19
    499a:	f9 01       	movw	r30, r18
    499c:	e8 0f       	add	r30, r24
    499e:	f9 1f       	adc	r31, r25
    49a0:	ee 0f       	add	r30, r30
    49a2:	ff 1f       	adc	r31, r31
    49a4:	e6 58       	subi	r30, 0x86	; 134
    49a6:	fc 4e       	sbci	r31, 0xEC	; 236
    49a8:	a0 81       	ld	r26, Z
    49aa:	b1 81       	ldd	r27, Z+1	; 0x01
    49ac:	4c 91       	ld	r20, X
    49ae:	f9 01       	movw	r30, r18
    49b0:	e8 0f       	add	r30, r24
    49b2:	f9 1f       	adc	r31, r25
    49b4:	ee 0f       	add	r30, r30
    49b6:	ff 1f       	adc	r31, r31
    49b8:	e6 58       	subi	r30, 0x86	; 134
    49ba:	fc 4e       	sbci	r31, 0xEC	; 236
    49bc:	81 e0       	ldi	r24, 0x01	; 1
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	02 80       	ldd	r0, Z+2	; 0x02
    49c2:	02 c0       	rjmp	.+4      	; 0x49c8 <_turn_off+0x4e>
    49c4:	88 0f       	add	r24, r24
    49c6:	99 1f       	adc	r25, r25
    49c8:	0a 94       	dec	r0
    49ca:	e2 f7       	brpl	.-8      	; 0x49c4 <_turn_off+0x4a>
    49cc:	84 2b       	or	r24, r20
    49ce:	8c 93       	st	X, r24
    49d0:	08 95       	ret
    49d2:	fc 01       	movw	r30, r24
    49d4:	ee 0f       	add	r30, r30
    49d6:	ff 1f       	adc	r31, r31
    49d8:	df 01       	movw	r26, r30
    49da:	a8 0f       	add	r26, r24
    49dc:	b9 1f       	adc	r27, r25
    49de:	aa 0f       	add	r26, r26
    49e0:	bb 1f       	adc	r27, r27
    49e2:	a6 58       	subi	r26, 0x86	; 134
    49e4:	bc 4e       	sbci	r27, 0xEC	; 236
    49e6:	0d 90       	ld	r0, X+
    49e8:	bc 91       	ld	r27, X
    49ea:	a0 2d       	mov	r26, r0
    49ec:	2c 91       	ld	r18, X
    49ee:	e8 0f       	add	r30, r24
    49f0:	f9 1f       	adc	r31, r25
    49f2:	ee 0f       	add	r30, r30
    49f4:	ff 1f       	adc	r31, r31
    49f6:	e6 58       	subi	r30, 0x86	; 134
    49f8:	fc 4e       	sbci	r31, 0xEC	; 236
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	02 80       	ldd	r0, Z+2	; 0x02
    4a00:	02 c0       	rjmp	.+4      	; 0x4a06 <_turn_off+0x8c>
    4a02:	88 0f       	add	r24, r24
    4a04:	99 1f       	adc	r25, r25
    4a06:	0a 94       	dec	r0
    4a08:	e2 f7       	brpl	.-8      	; 0x4a02 <_turn_off+0x88>
    4a0a:	80 95       	com	r24
    4a0c:	82 23       	and	r24, r18
    4a0e:	8c 93       	st	X, r24
    4a10:	08 95       	ret

00004a12 <_turn_on>:
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	fc 01       	movw	r30, r24
    4a16:	ee 0f       	add	r30, r30
    4a18:	ff 1f       	adc	r31, r31
    4a1a:	e8 0f       	add	r30, r24
    4a1c:	f9 1f       	adc	r31, r25
    4a1e:	ee 0f       	add	r30, r30
    4a20:	ff 1f       	adc	r31, r31
    4a22:	e6 58       	subi	r30, 0x86	; 134
    4a24:	fc 4e       	sbci	r31, 0xEC	; 236
    4a26:	23 81       	ldd	r18, Z+3	; 0x03
    4a28:	21 11       	cpse	r18, r1
    4a2a:	20 c0       	rjmp	.+64     	; 0x4a6c <_turn_on+0x5a>
    4a2c:	9c 01       	movw	r18, r24
    4a2e:	22 0f       	add	r18, r18
    4a30:	33 1f       	adc	r19, r19
    4a32:	f9 01       	movw	r30, r18
    4a34:	e8 0f       	add	r30, r24
    4a36:	f9 1f       	adc	r31, r25
    4a38:	ee 0f       	add	r30, r30
    4a3a:	ff 1f       	adc	r31, r31
    4a3c:	e6 58       	subi	r30, 0x86	; 134
    4a3e:	fc 4e       	sbci	r31, 0xEC	; 236
    4a40:	a0 81       	ld	r26, Z
    4a42:	b1 81       	ldd	r27, Z+1	; 0x01
    4a44:	4c 91       	ld	r20, X
    4a46:	f9 01       	movw	r30, r18
    4a48:	e8 0f       	add	r30, r24
    4a4a:	f9 1f       	adc	r31, r25
    4a4c:	ee 0f       	add	r30, r30
    4a4e:	ff 1f       	adc	r31, r31
    4a50:	e6 58       	subi	r30, 0x86	; 134
    4a52:	fc 4e       	sbci	r31, 0xEC	; 236
    4a54:	81 e0       	ldi	r24, 0x01	; 1
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	02 80       	ldd	r0, Z+2	; 0x02
    4a5a:	02 c0       	rjmp	.+4      	; 0x4a60 <_turn_on+0x4e>
    4a5c:	88 0f       	add	r24, r24
    4a5e:	99 1f       	adc	r25, r25
    4a60:	0a 94       	dec	r0
    4a62:	e2 f7       	brpl	.-8      	; 0x4a5c <_turn_on+0x4a>
    4a64:	80 95       	com	r24
    4a66:	84 23       	and	r24, r20
    4a68:	8c 93       	st	X, r24
    4a6a:	08 95       	ret
    4a6c:	fc 01       	movw	r30, r24
    4a6e:	ee 0f       	add	r30, r30
    4a70:	ff 1f       	adc	r31, r31
    4a72:	df 01       	movw	r26, r30
    4a74:	a8 0f       	add	r26, r24
    4a76:	b9 1f       	adc	r27, r25
    4a78:	aa 0f       	add	r26, r26
    4a7a:	bb 1f       	adc	r27, r27
    4a7c:	a6 58       	subi	r26, 0x86	; 134
    4a7e:	bc 4e       	sbci	r27, 0xEC	; 236
    4a80:	0d 90       	ld	r0, X+
    4a82:	bc 91       	ld	r27, X
    4a84:	a0 2d       	mov	r26, r0
    4a86:	2c 91       	ld	r18, X
    4a88:	e8 0f       	add	r30, r24
    4a8a:	f9 1f       	adc	r31, r25
    4a8c:	ee 0f       	add	r30, r30
    4a8e:	ff 1f       	adc	r31, r31
    4a90:	e6 58       	subi	r30, 0x86	; 134
    4a92:	fc 4e       	sbci	r31, 0xEC	; 236
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	02 80       	ldd	r0, Z+2	; 0x02
    4a9a:	02 c0       	rjmp	.+4      	; 0x4aa0 <_turn_on+0x8e>
    4a9c:	88 0f       	add	r24, r24
    4a9e:	99 1f       	adc	r25, r25
    4aa0:	0a 94       	dec	r0
    4aa2:	e2 f7       	brpl	.-8      	; 0x4a9c <_turn_on+0x8a>
    4aa4:	82 2b       	or	r24, r18
    4aa6:	8c 93       	st	X, r24
    4aa8:	08 95       	ret

00004aaa <_hal_led_task>:
    4aaa:	cc 24       	eor	r12, r12
    4aac:	c3 94       	inc	r12
    4aae:	d1 2c       	mov	r13, r1
    4ab0:	68 94       	set
    4ab2:	bb 24       	eor	r11, r11
    4ab4:	b2 f8       	bld	r11, 2
    4ab6:	ca e7       	ldi	r28, 0x7A	; 122
    4ab8:	d3 e1       	ldi	r29, 0x13	; 19
    4aba:	10 e0       	ldi	r17, 0x00	; 0
    4abc:	8c 81       	ldd	r24, Y+4	; 0x04
    4abe:	81 30       	cpi	r24, 0x01	; 1
    4ac0:	81 f0       	breq	.+32     	; 0x4ae2 <_hal_led_task+0x38>
    4ac2:	18 f1       	brcs	.+70     	; 0x4b0a <_hal_led_task+0x60>
    4ac4:	82 30       	cpi	r24, 0x02	; 2
    4ac6:	61 f5       	brne	.+88     	; 0x4b20 <_hal_led_task+0x76>
    4ac8:	e8 81       	ld	r30, Y
    4aca:	f9 81       	ldd	r31, Y+1	; 0x01
    4acc:	20 81       	ld	r18, Z
    4ace:	c6 01       	movw	r24, r12
    4ad0:	0a 80       	ldd	r0, Y+2	; 0x02
    4ad2:	02 c0       	rjmp	.+4      	; 0x4ad8 <_hal_led_task+0x2e>
    4ad4:	88 0f       	add	r24, r24
    4ad6:	99 1f       	adc	r25, r25
    4ad8:	0a 94       	dec	r0
    4ada:	e2 f7       	brpl	.-8      	; 0x4ad4 <_hal_led_task+0x2a>
    4adc:	82 27       	eor	r24, r18
    4ade:	80 83       	st	Z, r24
    4ae0:	1f c0       	rjmp	.+62     	; 0x4b20 <_hal_led_task+0x76>
    4ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae4:	8f 5f       	subi	r24, 0xFF	; 255
    4ae6:	8a 30       	cpi	r24, 0x0A	; 10
    4ae8:	10 f4       	brcc	.+4      	; 0x4aee <_hal_led_task+0x44>
    4aea:	8d 83       	std	Y+5, r24	; 0x05
    4aec:	19 c0       	rjmp	.+50     	; 0x4b20 <_hal_led_task+0x76>
    4aee:	1d 82       	std	Y+5, r1	; 0x05
    4af0:	e8 81       	ld	r30, Y
    4af2:	f9 81       	ldd	r31, Y+1	; 0x01
    4af4:	20 81       	ld	r18, Z
    4af6:	c6 01       	movw	r24, r12
    4af8:	0a 80       	ldd	r0, Y+2	; 0x02
    4afa:	02 c0       	rjmp	.+4      	; 0x4b00 <_hal_led_task+0x56>
    4afc:	88 0f       	add	r24, r24
    4afe:	99 1f       	adc	r25, r25
    4b00:	0a 94       	dec	r0
    4b02:	e2 f7       	brpl	.-8      	; 0x4afc <_hal_led_task+0x52>
    4b04:	82 27       	eor	r24, r18
    4b06:	80 83       	st	Z, r24
    4b08:	0b c0       	rjmp	.+22     	; 0x4b20 <_hal_led_task+0x76>
    4b0a:	0d 81       	ldd	r16, Y+5	; 0x05
    4b0c:	00 23       	and	r16, r16
    4b0e:	29 f0       	breq	.+10     	; 0x4b1a <_hal_led_task+0x70>
    4b10:	81 2f       	mov	r24, r17
    4b12:	7f df       	rcall	.-258    	; 0x4a12 <_turn_on>
    4b14:	01 50       	subi	r16, 0x01	; 1
    4b16:	0d 83       	std	Y+5, r16	; 0x05
    4b18:	03 c0       	rjmp	.+6      	; 0x4b20 <_hal_led_task+0x76>
    4b1a:	bc 82       	std	Y+4, r11	; 0x04
    4b1c:	81 2f       	mov	r24, r17
    4b1e:	2d df       	rcall	.-422    	; 0x497a <_turn_off>
    4b20:	1f 5f       	subi	r17, 0xFF	; 255
    4b22:	26 96       	adiw	r28, 0x06	; 6
    4b24:	14 30       	cpi	r17, 0x04	; 4
    4b26:	51 f6       	brne	.-108    	; 0x4abc <_hal_led_task+0x12>
    4b28:	65 e0       	ldi	r22, 0x05	; 5
    4b2a:	70 e0       	ldi	r23, 0x00	; 0
    4b2c:	80 e0       	ldi	r24, 0x00	; 0
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <vTaskDelay>
    4b34:	c0 cf       	rjmp	.-128    	; 0x4ab6 <_hal_led_task+0xc>

00004b36 <status_leds_initialise>:
    4b36:	ef 92       	push	r14
    4b38:	ff 92       	push	r15
    4b3a:	0f 93       	push	r16
    4b3c:	1f 93       	push	r17
    4b3e:	cf 93       	push	r28
    4b40:	df 93       	push	r29
    4b42:	08 2f       	mov	r16, r24
    4b44:	80 e4       	ldi	r24, 0x40	; 64
    4b46:	87 b9       	out	0x07, r24	; 7
    4b48:	ca e7       	ldi	r28, 0x7A	; 122
    4b4a:	d3 e1       	ldi	r29, 0x13	; 19
    4b4c:	0f 2e       	mov	r0, r31
    4b4e:	f8 e2       	ldi	r31, 0x28	; 40
    4b50:	ef 2e       	mov	r14, r31
    4b52:	f1 2c       	mov	r15, r1
    4b54:	f0 2d       	mov	r31, r0
    4b56:	f9 82       	std	Y+1, r15	; 0x01
    4b58:	e8 82       	st	Y, r14
    4b5a:	86 e0       	ldi	r24, 0x06	; 6
    4b5c:	8a 83       	std	Y+2, r24	; 0x02
    4b5e:	1b 82       	std	Y+3, r1	; 0x03
    4b60:	14 e0       	ldi	r17, 0x04	; 4
    4b62:	1c 83       	std	Y+4, r17	; 0x04
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	09 df       	rcall	.-494    	; 0x497a <_turn_off>
    4b68:	80 e8       	ldi	r24, 0x80	; 128
    4b6a:	87 b9       	out	0x07, r24	; 7
    4b6c:	ff 82       	std	Y+7, r15	; 0x07
    4b6e:	ee 82       	std	Y+6, r14	; 0x06
    4b70:	87 e0       	ldi	r24, 0x07	; 7
    4b72:	88 87       	std	Y+8, r24	; 0x08
    4b74:	19 86       	std	Y+9, r1	; 0x09
    4b76:	1a 87       	std	Y+10, r17	; 0x0a
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	ff de       	rcall	.-514    	; 0x497a <_turn_off>
    4b7c:	80 e2       	ldi	r24, 0x20	; 32
    4b7e:	83 bb       	out	0x13, r24	; 19
    4b80:	84 e3       	ldi	r24, 0x34	; 52
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	9d 87       	std	Y+13, r25	; 0x0d
    4b86:	8c 87       	std	Y+12, r24	; 0x0c
    4b88:	85 e0       	ldi	r24, 0x05	; 5
    4b8a:	8e 87       	std	Y+14, r24	; 0x0e
    4b8c:	1f 86       	std	Y+15, r1	; 0x0f
    4b8e:	18 8b       	std	Y+16, r17	; 0x10
    4b90:	82 e0       	ldi	r24, 0x02	; 2
    4b92:	f3 de       	rcall	.-538    	; 0x497a <_turn_off>
    4b94:	80 e1       	ldi	r24, 0x10	; 16
    4b96:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4b9a:	82 e0       	ldi	r24, 0x02	; 2
    4b9c:	91 e0       	ldi	r25, 0x01	; 1
    4b9e:	9b 8b       	std	Y+19, r25	; 0x13
    4ba0:	8a 8b       	std	Y+18, r24	; 0x12
    4ba2:	1c 8b       	std	Y+20, r17	; 0x14
    4ba4:	1d 8a       	std	Y+21, r1	; 0x15
    4ba6:	1e 8b       	std	Y+22, r17	; 0x16
    4ba8:	83 e0       	ldi	r24, 0x03	; 3
    4baa:	e7 de       	rcall	.-562    	; 0x497a <_turn_off>
    4bac:	e1 2c       	mov	r14, r1
    4bae:	f1 2c       	mov	r15, r1
    4bb0:	20 e0       	ldi	r18, 0x00	; 0
    4bb2:	30 e0       	ldi	r19, 0x00	; 0
    4bb4:	40 ec       	ldi	r20, 0xC0	; 192
    4bb6:	50 e0       	ldi	r21, 0x00	; 0
    4bb8:	60 e7       	ldi	r22, 0x70	; 112
    4bba:	77 e0       	ldi	r23, 0x07	; 7
    4bbc:	85 e5       	ldi	r24, 0x55	; 85
    4bbe:	95 e2       	ldi	r25, 0x25	; 37
    4bc0:	0e 94 3d 0c 	call	0x187a	; 0x187a <xTaskCreate>
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	1f 91       	pop	r17
    4bca:	0f 91       	pop	r16
    4bcc:	ff 90       	pop	r15
    4bce:	ef 90       	pop	r14
    4bd0:	08 95       	ret

00004bd2 <status_leds_slowBlink>:
    4bd2:	cf 93       	push	r28
    4bd4:	df 93       	push	r29
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	fc 01       	movw	r30, r24
    4bda:	ee 0f       	add	r30, r30
    4bdc:	ff 1f       	adc	r31, r31
    4bde:	df 01       	movw	r26, r30
    4be0:	a8 0f       	add	r26, r24
    4be2:	b9 1f       	adc	r27, r25
    4be4:	aa 0f       	add	r26, r26
    4be6:	bb 1f       	adc	r27, r27
    4be8:	a6 58       	subi	r26, 0x86	; 134
    4bea:	bc 4e       	sbci	r27, 0xEC	; 236
    4bec:	cd 91       	ld	r28, X+
    4bee:	dc 91       	ld	r29, X
    4bf0:	11 97       	sbiw	r26, 0x01	; 1
    4bf2:	48 81       	ld	r20, Y
    4bf4:	21 e0       	ldi	r18, 0x01	; 1
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	12 96       	adiw	r26, 0x02	; 2
    4bfa:	0c 90       	ld	r0, X
    4bfc:	12 97       	sbiw	r26, 0x02	; 2
    4bfe:	02 c0       	rjmp	.+4      	; 0x4c04 <status_leds_slowBlink+0x32>
    4c00:	22 0f       	add	r18, r18
    4c02:	33 1f       	adc	r19, r19
    4c04:	0a 94       	dec	r0
    4c06:	e2 f7       	brpl	.-8      	; 0x4c00 <status_leds_slowBlink+0x2e>
    4c08:	24 27       	eor	r18, r20
    4c0a:	28 83       	st	Y, r18
    4c0c:	fd 01       	movw	r30, r26
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	84 83       	std	Z+4, r24	; 0x04
    4c12:	df 91       	pop	r29
    4c14:	cf 91       	pop	r28
    4c16:	08 95       	ret

00004c18 <status_leds_fastBlink>:
    4c18:	cf 93       	push	r28
    4c1a:	df 93       	push	r29
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	fc 01       	movw	r30, r24
    4c20:	ee 0f       	add	r30, r30
    4c22:	ff 1f       	adc	r31, r31
    4c24:	df 01       	movw	r26, r30
    4c26:	a8 0f       	add	r26, r24
    4c28:	b9 1f       	adc	r27, r25
    4c2a:	aa 0f       	add	r26, r26
    4c2c:	bb 1f       	adc	r27, r27
    4c2e:	a6 58       	subi	r26, 0x86	; 134
    4c30:	bc 4e       	sbci	r27, 0xEC	; 236
    4c32:	cd 91       	ld	r28, X+
    4c34:	dc 91       	ld	r29, X
    4c36:	11 97       	sbiw	r26, 0x01	; 1
    4c38:	48 81       	ld	r20, Y
    4c3a:	21 e0       	ldi	r18, 0x01	; 1
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	12 96       	adiw	r26, 0x02	; 2
    4c40:	0c 90       	ld	r0, X
    4c42:	12 97       	sbiw	r26, 0x02	; 2
    4c44:	02 c0       	rjmp	.+4      	; 0x4c4a <status_leds_fastBlink+0x32>
    4c46:	22 0f       	add	r18, r18
    4c48:	33 1f       	adc	r19, r19
    4c4a:	0a 94       	dec	r0
    4c4c:	e2 f7       	brpl	.-8      	; 0x4c46 <status_leds_fastBlink+0x2e>
    4c4e:	24 27       	eor	r18, r20
    4c50:	28 83       	st	Y, r18
    4c52:	fd 01       	movw	r30, r26
    4c54:	82 e0       	ldi	r24, 0x02	; 2
    4c56:	84 83       	std	Z+4, r24	; 0x04
    4c58:	df 91       	pop	r29
    4c5a:	cf 91       	pop	r28
    4c5c:	08 95       	ret

00004c5e <status_leds_ledOn>:
    4c5e:	28 2f       	mov	r18, r24
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	f9 01       	movw	r30, r18
    4c64:	ee 0f       	add	r30, r30
    4c66:	ff 1f       	adc	r31, r31
    4c68:	e2 0f       	add	r30, r18
    4c6a:	f3 1f       	adc	r31, r19
    4c6c:	ee 0f       	add	r30, r30
    4c6e:	ff 1f       	adc	r31, r31
    4c70:	e6 58       	subi	r30, 0x86	; 134
    4c72:	fc 4e       	sbci	r31, 0xEC	; 236
    4c74:	93 e0       	ldi	r25, 0x03	; 3
    4c76:	94 83       	std	Z+4, r25	; 0x04
    4c78:	cc ce       	rjmp	.-616    	; 0x4a12 <_turn_on>
    4c7a:	08 95       	ret

00004c7c <status_leds_ledOff>:
    4c7c:	28 2f       	mov	r18, r24
    4c7e:	30 e0       	ldi	r19, 0x00	; 0
    4c80:	f9 01       	movw	r30, r18
    4c82:	ee 0f       	add	r30, r30
    4c84:	ff 1f       	adc	r31, r31
    4c86:	e2 0f       	add	r30, r18
    4c88:	f3 1f       	adc	r31, r19
    4c8a:	ee 0f       	add	r30, r30
    4c8c:	ff 1f       	adc	r31, r31
    4c8e:	e6 58       	subi	r30, 0x86	; 134
    4c90:	fc 4e       	sbci	r31, 0xEC	; 236
    4c92:	94 e0       	ldi	r25, 0x04	; 4
    4c94:	94 83       	std	Z+4, r25	; 0x04
    4c96:	71 ce       	rjmp	.-798    	; 0x497a <_turn_off>
    4c98:	08 95       	ret

00004c9a <status_leds_longPuls>:
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	ee 0f       	add	r30, r30
    4ca0:	ff 1f       	adc	r31, r31
    4ca2:	df 01       	movw	r26, r30
    4ca4:	a8 0f       	add	r26, r24
    4ca6:	b9 1f       	adc	r27, r25
    4ca8:	aa 0f       	add	r26, r26
    4caa:	bb 1f       	adc	r27, r27
    4cac:	a6 58       	subi	r26, 0x86	; 134
    4cae:	bc 4e       	sbci	r27, 0xEC	; 236
    4cb0:	24 e0       	ldi	r18, 0x04	; 4
    4cb2:	15 96       	adiw	r26, 0x05	; 5
    4cb4:	2c 93       	st	X, r18
    4cb6:	15 97       	sbiw	r26, 0x05	; 5
    4cb8:	fd 01       	movw	r30, r26
    4cba:	14 82       	std	Z+4, r1	; 0x04
    4cbc:	08 95       	ret

00004cbe <status_leds_shortPuls>:
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	ee 0f       	add	r30, r30
    4cc4:	ff 1f       	adc	r31, r31
    4cc6:	df 01       	movw	r26, r30
    4cc8:	a8 0f       	add	r26, r24
    4cca:	b9 1f       	adc	r27, r25
    4ccc:	aa 0f       	add	r26, r26
    4cce:	bb 1f       	adc	r27, r27
    4cd0:	a6 58       	subi	r26, 0x86	; 134
    4cd2:	bc 4e       	sbci	r27, 0xEC	; 236
    4cd4:	21 e0       	ldi	r18, 0x01	; 1
    4cd6:	15 96       	adiw	r26, 0x05	; 5
    4cd8:	2c 93       	st	X, r18
    4cda:	15 97       	sbiw	r26, 0x05	; 5
    4cdc:	fd 01       	movw	r30, r26
    4cde:	14 82       	std	Z+4, r1	; 0x04
    4ce0:	08 95       	ret

00004ce2 <_initTwiInterface>:
    4ce2:	80 91 a0 13 	lds	r24, 0x13A0	; 0x8013a0 <_twiIsInitiated>
    4ce6:	81 11       	cpse	r24, r1
    4ce8:	0c c0       	rjmp	.+24     	; 0x4d02 <_initTwiInterface+0x20>
    4cea:	8c e0       	ldi	r24, 0x0C	; 12
    4cec:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4cf0:	8f ef       	ldi	r24, 0xFF	; 255
    4cf2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4cf6:	84 e0       	ldi	r24, 0x04	; 4
    4cf8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	80 93 a0 13 	sts	0x13A0, r24	; 0x8013a0 <_twiIsInitiated>
    4d02:	08 95       	ret

00004d04 <twiCreate>:
    4d04:	af 92       	push	r10
    4d06:	bf 92       	push	r11
    4d08:	cf 92       	push	r12
    4d0a:	df 92       	push	r13
    4d0c:	ef 92       	push	r14
    4d0e:	ff 92       	push	r15
    4d10:	0f 93       	push	r16
    4d12:	1f 93       	push	r17
    4d14:	cf 93       	push	r28
    4d16:	df 93       	push	r29
    4d18:	a8 2e       	mov	r10, r24
    4d1a:	b6 2e       	mov	r11, r22
    4d1c:	69 01       	movw	r12, r18
    4d1e:	7a 01       	movw	r14, r20
    4d20:	84 e0       	ldi	r24, 0x04	; 4
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	79 d3       	rcall	.+1778   	; 0x5418 <malloc>
    4d26:	ec 01       	movw	r28, r24
    4d28:	89 2b       	or	r24, r25
    4d2a:	61 f1       	breq	.+88     	; 0x4d84 <twiCreate+0x80>
    4d2c:	a8 82       	st	Y, r10
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	b8 12       	cpse	r11, r24
    4d32:	12 c0       	rjmp	.+36     	; 0x4d58 <twiCreate+0x54>
    4d34:	c7 01       	movw	r24, r14
    4d36:	b6 01       	movw	r22, r12
    4d38:	20 ea       	ldi	r18, 0xA0	; 160
    4d3a:	36 e8       	ldi	r19, 0x86	; 134
    4d3c:	41 e0       	ldi	r20, 0x01	; 1
    4d3e:	50 e0       	ldi	r21, 0x00	; 0
    4d40:	27 d3       	rcall	.+1614   	; 0x5390 <__udivmodsi4>
    4d42:	da 01       	movw	r26, r20
    4d44:	c9 01       	movw	r24, r18
    4d46:	40 97       	sbiw	r24, 0x10	; 16
    4d48:	a1 09       	sbc	r26, r1
    4d4a:	b1 09       	sbc	r27, r1
    4d4c:	b6 95       	lsr	r27
    4d4e:	a7 95       	ror	r26
    4d50:	97 95       	ror	r25
    4d52:	87 95       	ror	r24
    4d54:	89 83       	std	Y+1, r24	; 0x01
    4d56:	11 c0       	rjmp	.+34     	; 0x4d7a <twiCreate+0x76>
    4d58:	c7 01       	movw	r24, r14
    4d5a:	b6 01       	movw	r22, r12
    4d5c:	20 e8       	ldi	r18, 0x80	; 128
    4d5e:	3a e1       	ldi	r19, 0x1A	; 26
    4d60:	46 e0       	ldi	r20, 0x06	; 6
    4d62:	50 e0       	ldi	r21, 0x00	; 0
    4d64:	15 d3       	rcall	.+1578   	; 0x5390 <__udivmodsi4>
    4d66:	da 01       	movw	r26, r20
    4d68:	c9 01       	movw	r24, r18
    4d6a:	40 97       	sbiw	r24, 0x10	; 16
    4d6c:	a1 09       	sbc	r26, r1
    4d6e:	b1 09       	sbc	r27, r1
    4d70:	b6 95       	lsr	r27
    4d72:	a7 95       	ror	r26
    4d74:	97 95       	ror	r25
    4d76:	87 95       	ror	r24
    4d78:	89 83       	std	Y+1, r24	; 0x01
    4d7a:	1b 83       	std	Y+3, r17	; 0x03
    4d7c:	0a 83       	std	Y+2, r16	; 0x02
    4d7e:	8c 2f       	mov	r24, r28
    4d80:	9d 2f       	mov	r25, r29
    4d82:	02 c0       	rjmp	.+4      	; 0x4d88 <twiCreate+0x84>
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	df 91       	pop	r29
    4d8a:	cf 91       	pop	r28
    4d8c:	1f 91       	pop	r17
    4d8e:	0f 91       	pop	r16
    4d90:	ff 90       	pop	r15
    4d92:	ef 90       	pop	r14
    4d94:	df 90       	pop	r13
    4d96:	cf 90       	pop	r12
    4d98:	bf 90       	pop	r11
    4d9a:	af 90       	pop	r10
    4d9c:	08 95       	ret

00004d9e <twiIsBusy>:
    4d9e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4da2:	81 70       	andi	r24, 0x01	; 1
    4da4:	08 95       	ret

00004da6 <twiTransmit>:
    4da6:	ff 92       	push	r15
    4da8:	0f 93       	push	r16
    4daa:	1f 93       	push	r17
    4dac:	cf 93       	push	r28
    4dae:	df 93       	push	r29
    4db0:	00 97       	sbiw	r24, 0x00	; 0
    4db2:	d1 f1       	breq	.+116    	; 0x4e28 <twiTransmit+0x82>
    4db4:	4a 30       	cpi	r20, 0x0A	; 10
    4db6:	d0 f5       	brcc	.+116    	; 0x4e2c <twiTransmit+0x86>
    4db8:	f4 2e       	mov	r15, r20
    4dba:	8b 01       	movw	r16, r22
    4dbc:	ec 01       	movw	r28, r24
    4dbe:	ef df       	rcall	.-34     	; 0x4d9e <twiIsBusy>
    4dc0:	81 11       	cpse	r24, r1
    4dc2:	36 c0       	rjmp	.+108    	; 0x4e30 <twiTransmit+0x8a>
    4dc4:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_twiCurrentHandler>
    4dc8:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_twiCurrentHandler+0x1>
    4dcc:	c8 17       	cp	r28, r24
    4dce:	d9 07       	cpc	r29, r25
    4dd0:	41 f0       	breq	.+16     	; 0x4de2 <twiTransmit+0x3c>
    4dd2:	87 df       	rcall	.-242    	; 0x4ce2 <_initTwiInterface>
    4dd4:	89 81       	ldd	r24, Y+1	; 0x01
    4dd6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4dda:	d0 93 94 13 	sts	0x1394, r29	; 0x801394 <_twiCurrentHandler+0x1>
    4dde:	c0 93 93 13 	sts	0x1393, r28	; 0x801393 <_twiCurrentHandler>
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	8f 0d       	add	r24, r15
    4de6:	80 93 95 13 	sts	0x1395, r24	; 0x801395 <_twiMessageLen>
    4dea:	88 81       	ld	r24, Y
    4dec:	88 0f       	add	r24, r24
    4dee:	80 93 96 13 	sts	0x1396, r24	; 0x801396 <_twiMessageBuffer>
    4df2:	ff 20       	and	r15, r15
    4df4:	89 f0       	breq	.+34     	; 0x4e18 <twiTransmit+0x72>
    4df6:	f8 01       	movw	r30, r16
    4df8:	a7 e9       	ldi	r26, 0x97	; 151
    4dfa:	b3 e1       	ldi	r27, 0x13	; 19
    4dfc:	4f ef       	ldi	r20, 0xFF	; 255
    4dfe:	4f 0d       	add	r20, r15
    4e00:	64 2f       	mov	r22, r20
    4e02:	70 e0       	ldi	r23, 0x00	; 0
    4e04:	cb 01       	movw	r24, r22
    4e06:	01 96       	adiw	r24, 0x01	; 1
    4e08:	b8 01       	movw	r22, r16
    4e0a:	68 0f       	add	r22, r24
    4e0c:	79 1f       	adc	r23, r25
    4e0e:	81 91       	ld	r24, Z+
    4e10:	8d 93       	st	X+, r24
    4e12:	e6 17       	cp	r30, r22
    4e14:	f7 07       	cpc	r31, r23
    4e16:	d9 f7       	brne	.-10     	; 0x4e0e <twiTransmit+0x68>
    4e18:	88 ef       	ldi	r24, 0xF8	; 248
    4e1a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4e1e:	85 ea       	ldi	r24, 0xA5	; 165
    4e20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e24:	84 e0       	ldi	r24, 0x04	; 4
    4e26:	05 c0       	rjmp	.+10     	; 0x4e32 <twiTransmit+0x8c>
    4e28:	86 e0       	ldi	r24, 0x06	; 6
    4e2a:	03 c0       	rjmp	.+6      	; 0x4e32 <twiTransmit+0x8c>
    4e2c:	87 e0       	ldi	r24, 0x07	; 7
    4e2e:	01 c0       	rjmp	.+2      	; 0x4e32 <twiTransmit+0x8c>
    4e30:	82 e0       	ldi	r24, 0x02	; 2
    4e32:	df 91       	pop	r29
    4e34:	cf 91       	pop	r28
    4e36:	1f 91       	pop	r17
    4e38:	0f 91       	pop	r16
    4e3a:	ff 90       	pop	r15
    4e3c:	08 95       	ret

00004e3e <twiReceive>:
    4e3e:	1f 93       	push	r17
    4e40:	cf 93       	push	r28
    4e42:	df 93       	push	r29
    4e44:	00 97       	sbiw	r24, 0x00	; 0
    4e46:	29 f1       	breq	.+74     	; 0x4e92 <twiReceive+0x54>
    4e48:	6b 30       	cpi	r22, 0x0B	; 11
    4e4a:	28 f5       	brcc	.+74     	; 0x4e96 <twiReceive+0x58>
    4e4c:	16 2f       	mov	r17, r22
    4e4e:	ec 01       	movw	r28, r24
    4e50:	a6 df       	rcall	.-180    	; 0x4d9e <twiIsBusy>
    4e52:	81 11       	cpse	r24, r1
    4e54:	22 c0       	rjmp	.+68     	; 0x4e9a <twiReceive+0x5c>
    4e56:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_twiCurrentHandler>
    4e5a:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_twiCurrentHandler+0x1>
    4e5e:	c8 17       	cp	r28, r24
    4e60:	d9 07       	cpc	r29, r25
    4e62:	41 f0       	breq	.+16     	; 0x4e74 <twiReceive+0x36>
    4e64:	3e df       	rcall	.-388    	; 0x4ce2 <_initTwiInterface>
    4e66:	89 81       	ldd	r24, Y+1	; 0x01
    4e68:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4e6c:	d0 93 94 13 	sts	0x1394, r29	; 0x801394 <_twiCurrentHandler+0x1>
    4e70:	c0 93 93 13 	sts	0x1393, r28	; 0x801393 <_twiCurrentHandler>
    4e74:	10 93 95 13 	sts	0x1395, r17	; 0x801395 <_twiMessageLen>
    4e78:	88 81       	ld	r24, Y
    4e7a:	88 0f       	add	r24, r24
    4e7c:	81 60       	ori	r24, 0x01	; 1
    4e7e:	80 93 96 13 	sts	0x1396, r24	; 0x801396 <_twiMessageBuffer>
    4e82:	88 ef       	ldi	r24, 0xF8	; 248
    4e84:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4e88:	85 ea       	ldi	r24, 0xA5	; 165
    4e8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4e8e:	85 e0       	ldi	r24, 0x05	; 5
    4e90:	05 c0       	rjmp	.+10     	; 0x4e9c <twiReceive+0x5e>
    4e92:	86 e0       	ldi	r24, 0x06	; 6
    4e94:	03 c0       	rjmp	.+6      	; 0x4e9c <twiReceive+0x5e>
    4e96:	87 e0       	ldi	r24, 0x07	; 7
    4e98:	01 c0       	rjmp	.+2      	; 0x4e9c <twiReceive+0x5e>
    4e9a:	82 e0       	ldi	r24, 0x02	; 2
    4e9c:	df 91       	pop	r29
    4e9e:	cf 91       	pop	r28
    4ea0:	1f 91       	pop	r17
    4ea2:	08 95       	ret

00004ea4 <__vector_39>:
    4ea4:	1f 92       	push	r1
    4ea6:	0f 92       	push	r0
    4ea8:	0f b6       	in	r0, 0x3f	; 63
    4eaa:	0f 92       	push	r0
    4eac:	11 24       	eor	r1, r1
    4eae:	0b b6       	in	r0, 0x3b	; 59
    4eb0:	0f 92       	push	r0
    4eb2:	2f 93       	push	r18
    4eb4:	3f 93       	push	r19
    4eb6:	4f 93       	push	r20
    4eb8:	5f 93       	push	r21
    4eba:	6f 93       	push	r22
    4ebc:	7f 93       	push	r23
    4ebe:	8f 93       	push	r24
    4ec0:	9f 93       	push	r25
    4ec2:	af 93       	push	r26
    4ec4:	bf 93       	push	r27
    4ec6:	ef 93       	push	r30
    4ec8:	ff 93       	push	r31
    4eca:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4ece:	8e 2f       	mov	r24, r30
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	38 97       	sbiw	r30, 0x08	; 8
    4ed6:	e1 35       	cpi	r30, 0x51	; 81
    4ed8:	f1 05       	cpc	r31, r1
    4eda:	08 f0       	brcs	.+2      	; 0x4ede <__vector_39+0x3a>
    4edc:	75 c0       	rjmp	.+234    	; 0x4fc8 <__vector_39+0x124>
    4ede:	88 27       	eor	r24, r24
    4ee0:	e4 58       	subi	r30, 0x84	; 132
    4ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ee6:	76 c2       	rjmp	.+1260   	; 0x53d4 <__tablejump2__>
    4ee8:	10 92 92 13 	sts	0x1392, r1	; 0x801392 <_index.1885>
    4eec:	e0 91 92 13 	lds	r30, 0x1392	; 0x801392 <_index.1885>
    4ef0:	80 91 95 13 	lds	r24, 0x1395	; 0x801395 <_twiMessageLen>
    4ef4:	e8 17       	cp	r30, r24
    4ef6:	70 f4       	brcc	.+28     	; 0x4f14 <__vector_39+0x70>
    4ef8:	81 e0       	ldi	r24, 0x01	; 1
    4efa:	8e 0f       	add	r24, r30
    4efc:	80 93 92 13 	sts	0x1392, r24	; 0x801392 <_index.1885>
    4f00:	f0 e0       	ldi	r31, 0x00	; 0
    4f02:	ea 56       	subi	r30, 0x6A	; 106
    4f04:	fc 4e       	sbci	r31, 0xEC	; 236
    4f06:	80 81       	ld	r24, Z
    4f08:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f0c:	85 e8       	ldi	r24, 0x85	; 133
    4f0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f12:	72 c0       	rjmp	.+228    	; 0x4ff8 <__vector_39+0x154>
    4f14:	84 e9       	ldi	r24, 0x94	; 148
    4f16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f1a:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_twiCurrentHandler>
    4f1e:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_twiCurrentHandler+0x1>
    4f22:	dc 01       	movw	r26, r24
    4f24:	12 96       	adiw	r26, 0x02	; 2
    4f26:	ed 91       	ld	r30, X+
    4f28:	fc 91       	ld	r31, X
    4f2a:	13 97       	sbiw	r26, 0x03	; 3
    4f2c:	30 97       	sbiw	r30, 0x00	; 0
    4f2e:	09 f4       	brne	.+2      	; 0x4f32 <__vector_39+0x8e>
    4f30:	63 c0       	rjmp	.+198    	; 0x4ff8 <__vector_39+0x154>
    4f32:	20 e0       	ldi	r18, 0x00	; 0
    4f34:	40 e0       	ldi	r20, 0x00	; 0
    4f36:	50 e0       	ldi	r21, 0x00	; 0
    4f38:	64 e0       	ldi	r22, 0x04	; 4
    4f3a:	19 95       	eicall
    4f3c:	5d c0       	rjmp	.+186    	; 0x4ff8 <__vector_39+0x154>
    4f3e:	e0 91 92 13 	lds	r30, 0x1392	; 0x801392 <_index.1885>
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	8e 0f       	add	r24, r30
    4f46:	80 93 92 13 	sts	0x1392, r24	; 0x801392 <_index.1885>
    4f4a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f4e:	f0 e0       	ldi	r31, 0x00	; 0
    4f50:	ea 56       	subi	r30, 0x6A	; 106
    4f52:	fc 4e       	sbci	r31, 0xEC	; 236
    4f54:	80 83       	st	Z, r24
    4f56:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4f5a:	80 34       	cpi	r24, 0x40	; 64
    4f5c:	11 f4       	brne	.+4      	; 0x4f62 <__vector_39+0xbe>
    4f5e:	10 92 92 13 	sts	0x1392, r1	; 0x801392 <_index.1885>
    4f62:	20 91 92 13 	lds	r18, 0x1392	; 0x801392 <_index.1885>
    4f66:	30 e0       	ldi	r19, 0x00	; 0
    4f68:	80 91 95 13 	lds	r24, 0x1395	; 0x801395 <_twiMessageLen>
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	01 97       	sbiw	r24, 0x01	; 1
    4f70:	28 17       	cp	r18, r24
    4f72:	39 07       	cpc	r19, r25
    4f74:	24 f4       	brge	.+8      	; 0x4f7e <__vector_39+0xda>
    4f76:	85 ec       	ldi	r24, 0xC5	; 197
    4f78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f7c:	3d c0       	rjmp	.+122    	; 0x4ff8 <__vector_39+0x154>
    4f7e:	85 e8       	ldi	r24, 0x85	; 133
    4f80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f84:	39 c0       	rjmp	.+114    	; 0x4ff8 <__vector_39+0x154>
    4f86:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4f8a:	e0 91 92 13 	lds	r30, 0x1392	; 0x801392 <_index.1885>
    4f8e:	f0 e0       	ldi	r31, 0x00	; 0
    4f90:	ea 56       	subi	r30, 0x6A	; 106
    4f92:	fc 4e       	sbci	r31, 0xEC	; 236
    4f94:	80 83       	st	Z, r24
    4f96:	84 e9       	ldi	r24, 0x94	; 148
    4f98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4f9c:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_twiCurrentHandler>
    4fa0:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_twiCurrentHandler+0x1>
    4fa4:	dc 01       	movw	r26, r24
    4fa6:	12 96       	adiw	r26, 0x02	; 2
    4fa8:	ed 91       	ld	r30, X+
    4faa:	fc 91       	ld	r31, X
    4fac:	13 97       	sbiw	r26, 0x03	; 3
    4fae:	30 97       	sbiw	r30, 0x00	; 0
    4fb0:	19 f1       	breq	.+70     	; 0x4ff8 <__vector_39+0x154>
    4fb2:	20 91 95 13 	lds	r18, 0x1395	; 0x801395 <_twiMessageLen>
    4fb6:	46 e9       	ldi	r20, 0x96	; 150
    4fb8:	53 e1       	ldi	r21, 0x13	; 19
    4fba:	65 e0       	ldi	r22, 0x05	; 5
    4fbc:	19 95       	eicall
    4fbe:	1c c0       	rjmp	.+56     	; 0x4ff8 <__vector_39+0x154>
    4fc0:	85 ea       	ldi	r24, 0xA5	; 165
    4fc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fc6:	18 c0       	rjmp	.+48     	; 0x4ff8 <__vector_39+0x154>
    4fc8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4fcc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4fd0:	84 e0       	ldi	r24, 0x04	; 4
    4fd2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4fd6:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <_twiCurrentHandler>
    4fda:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_twiCurrentHandler+0x1>
    4fde:	dc 01       	movw	r26, r24
    4fe0:	12 96       	adiw	r26, 0x02	; 2
    4fe2:	ed 91       	ld	r30, X+
    4fe4:	fc 91       	ld	r31, X
    4fe6:	13 97       	sbiw	r26, 0x03	; 3
    4fe8:	30 97       	sbiw	r30, 0x00	; 0
    4fea:	31 f0       	breq	.+12     	; 0x4ff8 <__vector_39+0x154>
    4fec:	20 e0       	ldi	r18, 0x00	; 0
    4fee:	40 e0       	ldi	r20, 0x00	; 0
    4ff0:	50 e0       	ldi	r21, 0x00	; 0
    4ff2:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4ff6:	19 95       	eicall
    4ff8:	ff 91       	pop	r31
    4ffa:	ef 91       	pop	r30
    4ffc:	bf 91       	pop	r27
    4ffe:	af 91       	pop	r26
    5000:	9f 91       	pop	r25
    5002:	8f 91       	pop	r24
    5004:	7f 91       	pop	r23
    5006:	6f 91       	pop	r22
    5008:	5f 91       	pop	r21
    500a:	4f 91       	pop	r20
    500c:	3f 91       	pop	r19
    500e:	2f 91       	pop	r18
    5010:	0f 90       	pop	r0
    5012:	0b be       	out	0x3b, r0	; 59
    5014:	0f 90       	pop	r0
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	0f 90       	pop	r0
    501a:	1f 90       	pop	r1
    501c:	18 95       	reti

0000501e <fifo_init>:
    501e:	fc 01       	movw	r30, r24
    5020:	41 11       	cpse	r20, r1
    5022:	01 c0       	rjmp	.+2      	; 0x5026 <fifo_init+0x8>
    5024:	1a d3       	rcall	.+1588   	; 0x565a <abort>
    5026:	84 2f       	mov	r24, r20
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	9c 01       	movw	r18, r24
    502c:	21 50       	subi	r18, 0x01	; 1
    502e:	31 09       	sbc	r19, r1
    5030:	82 23       	and	r24, r18
    5032:	93 23       	and	r25, r19
    5034:	89 2b       	or	r24, r25
    5036:	09 f0       	breq	.+2      	; 0x503a <fifo_init+0x1c>
    5038:	10 d3       	rcall	.+1568   	; 0x565a <abort>
    503a:	41 38       	cpi	r20, 0x81	; 129
    503c:	08 f0       	brcs	.+2      	; 0x5040 <fifo_init+0x22>
    503e:	0d d3       	rcall	.+1562   	; 0x565a <abort>
    5040:	12 82       	std	Z+2, r1	; 0x02
    5042:	13 82       	std	Z+3, r1	; 0x03
    5044:	44 83       	std	Z+4, r20	; 0x04
    5046:	44 0f       	add	r20, r20
    5048:	41 50       	subi	r20, 0x01	; 1
    504a:	45 83       	std	Z+5, r20	; 0x05
    504c:	71 83       	std	Z+1, r23	; 0x01
    504e:	60 83       	st	Z, r22
    5050:	80 e0       	ldi	r24, 0x00	; 0
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	08 95       	ret

00005056 <__subsf3>:
    5056:	50 58       	subi	r21, 0x80	; 128

00005058 <__addsf3>:
    5058:	bb 27       	eor	r27, r27
    505a:	aa 27       	eor	r26, r26
    505c:	0e d0       	rcall	.+28     	; 0x507a <__addsf3x>
    505e:	21 c1       	rjmp	.+578    	; 0x52a2 <__fp_round>
    5060:	12 d1       	rcall	.+548    	; 0x5286 <__fp_pscA>
    5062:	30 f0       	brcs	.+12     	; 0x5070 <__addsf3+0x18>
    5064:	17 d1       	rcall	.+558    	; 0x5294 <__fp_pscB>
    5066:	20 f0       	brcs	.+8      	; 0x5070 <__addsf3+0x18>
    5068:	31 f4       	brne	.+12     	; 0x5076 <__addsf3+0x1e>
    506a:	9f 3f       	cpi	r25, 0xFF	; 255
    506c:	11 f4       	brne	.+4      	; 0x5072 <__addsf3+0x1a>
    506e:	1e f4       	brtc	.+6      	; 0x5076 <__addsf3+0x1e>
    5070:	07 c1       	rjmp	.+526    	; 0x5280 <__fp_nan>
    5072:	0e f4       	brtc	.+2      	; 0x5076 <__addsf3+0x1e>
    5074:	e0 95       	com	r30
    5076:	e7 fb       	bst	r30, 7
    5078:	fd c0       	rjmp	.+506    	; 0x5274 <__fp_inf>

0000507a <__addsf3x>:
    507a:	e9 2f       	mov	r30, r25
    507c:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__fp_split3>
    5080:	78 f3       	brcs	.-34     	; 0x5060 <__addsf3+0x8>
    5082:	ba 17       	cp	r27, r26
    5084:	62 07       	cpc	r22, r18
    5086:	73 07       	cpc	r23, r19
    5088:	84 07       	cpc	r24, r20
    508a:	95 07       	cpc	r25, r21
    508c:	20 f0       	brcs	.+8      	; 0x5096 <__addsf3x+0x1c>
    508e:	79 f4       	brne	.+30     	; 0x50ae <__addsf3x+0x34>
    5090:	a6 f5       	brtc	.+104    	; 0x50fa <__addsf3x+0x80>
    5092:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__fp_zero>
    5096:	0e f4       	brtc	.+2      	; 0x509a <__addsf3x+0x20>
    5098:	e0 95       	com	r30
    509a:	0b 2e       	mov	r0, r27
    509c:	ba 2f       	mov	r27, r26
    509e:	a0 2d       	mov	r26, r0
    50a0:	0b 01       	movw	r0, r22
    50a2:	b9 01       	movw	r22, r18
    50a4:	90 01       	movw	r18, r0
    50a6:	0c 01       	movw	r0, r24
    50a8:	ca 01       	movw	r24, r20
    50aa:	a0 01       	movw	r20, r0
    50ac:	11 24       	eor	r1, r1
    50ae:	ff 27       	eor	r31, r31
    50b0:	59 1b       	sub	r21, r25
    50b2:	99 f0       	breq	.+38     	; 0x50da <__addsf3x+0x60>
    50b4:	59 3f       	cpi	r21, 0xF9	; 249
    50b6:	50 f4       	brcc	.+20     	; 0x50cc <__addsf3x+0x52>
    50b8:	50 3e       	cpi	r21, 0xE0	; 224
    50ba:	68 f1       	brcs	.+90     	; 0x5116 <__addsf3x+0x9c>
    50bc:	1a 16       	cp	r1, r26
    50be:	f0 40       	sbci	r31, 0x00	; 0
    50c0:	a2 2f       	mov	r26, r18
    50c2:	23 2f       	mov	r18, r19
    50c4:	34 2f       	mov	r19, r20
    50c6:	44 27       	eor	r20, r20
    50c8:	58 5f       	subi	r21, 0xF8	; 248
    50ca:	f3 cf       	rjmp	.-26     	; 0x50b2 <__addsf3x+0x38>
    50cc:	46 95       	lsr	r20
    50ce:	37 95       	ror	r19
    50d0:	27 95       	ror	r18
    50d2:	a7 95       	ror	r26
    50d4:	f0 40       	sbci	r31, 0x00	; 0
    50d6:	53 95       	inc	r21
    50d8:	c9 f7       	brne	.-14     	; 0x50cc <__addsf3x+0x52>
    50da:	7e f4       	brtc	.+30     	; 0x50fa <__addsf3x+0x80>
    50dc:	1f 16       	cp	r1, r31
    50de:	ba 0b       	sbc	r27, r26
    50e0:	62 0b       	sbc	r22, r18
    50e2:	73 0b       	sbc	r23, r19
    50e4:	84 0b       	sbc	r24, r20
    50e6:	ba f0       	brmi	.+46     	; 0x5116 <__addsf3x+0x9c>
    50e8:	91 50       	subi	r25, 0x01	; 1
    50ea:	a1 f0       	breq	.+40     	; 0x5114 <__addsf3x+0x9a>
    50ec:	ff 0f       	add	r31, r31
    50ee:	bb 1f       	adc	r27, r27
    50f0:	66 1f       	adc	r22, r22
    50f2:	77 1f       	adc	r23, r23
    50f4:	88 1f       	adc	r24, r24
    50f6:	c2 f7       	brpl	.-16     	; 0x50e8 <__addsf3x+0x6e>
    50f8:	0e c0       	rjmp	.+28     	; 0x5116 <__addsf3x+0x9c>
    50fa:	ba 0f       	add	r27, r26
    50fc:	62 1f       	adc	r22, r18
    50fe:	73 1f       	adc	r23, r19
    5100:	84 1f       	adc	r24, r20
    5102:	48 f4       	brcc	.+18     	; 0x5116 <__addsf3x+0x9c>
    5104:	87 95       	ror	r24
    5106:	77 95       	ror	r23
    5108:	67 95       	ror	r22
    510a:	b7 95       	ror	r27
    510c:	f7 95       	ror	r31
    510e:	9e 3f       	cpi	r25, 0xFE	; 254
    5110:	08 f0       	brcs	.+2      	; 0x5114 <__addsf3x+0x9a>
    5112:	b1 cf       	rjmp	.-158    	; 0x5076 <__addsf3+0x1e>
    5114:	93 95       	inc	r25
    5116:	88 0f       	add	r24, r24
    5118:	08 f0       	brcs	.+2      	; 0x511c <__addsf3x+0xa2>
    511a:	99 27       	eor	r25, r25
    511c:	ee 0f       	add	r30, r30
    511e:	97 95       	ror	r25
    5120:	87 95       	ror	r24
    5122:	08 95       	ret

00005124 <__divsf3>:
    5124:	0d d0       	rcall	.+26     	; 0x5140 <__divsf3x>
    5126:	bd c0       	rjmp	.+378    	; 0x52a2 <__fp_round>
    5128:	b5 d0       	rcall	.+362    	; 0x5294 <__fp_pscB>
    512a:	48 f0       	brcs	.+18     	; 0x513e <__divsf3+0x1a>
    512c:	ac d0       	rcall	.+344    	; 0x5286 <__fp_pscA>
    512e:	38 f0       	brcs	.+14     	; 0x513e <__divsf3+0x1a>
    5130:	21 f4       	brne	.+8      	; 0x513a <__divsf3+0x16>
    5132:	5f 3f       	cpi	r21, 0xFF	; 255
    5134:	21 f0       	breq	.+8      	; 0x513e <__divsf3+0x1a>
    5136:	9e c0       	rjmp	.+316    	; 0x5274 <__fp_inf>
    5138:	51 11       	cpse	r21, r1
    513a:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <__fp_szero>
    513e:	a0 c0       	rjmp	.+320    	; 0x5280 <__fp_nan>

00005140 <__divsf3x>:
    5140:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__fp_split3>
    5144:	88 f3       	brcs	.-30     	; 0x5128 <__divsf3+0x4>

00005146 <__divsf3_pse>:
    5146:	99 23       	and	r25, r25
    5148:	b9 f3       	breq	.-18     	; 0x5138 <__divsf3+0x14>
    514a:	55 23       	and	r21, r21
    514c:	a1 f3       	breq	.-24     	; 0x5136 <__divsf3+0x12>
    514e:	95 1b       	sub	r25, r21
    5150:	55 0b       	sbc	r21, r21
    5152:	bb 27       	eor	r27, r27
    5154:	aa 27       	eor	r26, r26
    5156:	62 17       	cp	r22, r18
    5158:	73 07       	cpc	r23, r19
    515a:	84 07       	cpc	r24, r20
    515c:	38 f0       	brcs	.+14     	; 0x516c <__divsf3_pse+0x26>
    515e:	9f 5f       	subi	r25, 0xFF	; 255
    5160:	5f 4f       	sbci	r21, 0xFF	; 255
    5162:	22 0f       	add	r18, r18
    5164:	33 1f       	adc	r19, r19
    5166:	44 1f       	adc	r20, r20
    5168:	aa 1f       	adc	r26, r26
    516a:	a9 f3       	breq	.-22     	; 0x5156 <__divsf3_pse+0x10>
    516c:	34 d0       	rcall	.+104    	; 0x51d6 <__divsf3_pse+0x90>
    516e:	0e 2e       	mov	r0, r30
    5170:	3a f0       	brmi	.+14     	; 0x5180 <__divsf3_pse+0x3a>
    5172:	e0 e8       	ldi	r30, 0x80	; 128
    5174:	31 d0       	rcall	.+98     	; 0x51d8 <__divsf3_pse+0x92>
    5176:	91 50       	subi	r25, 0x01	; 1
    5178:	50 40       	sbci	r21, 0x00	; 0
    517a:	e6 95       	lsr	r30
    517c:	00 1c       	adc	r0, r0
    517e:	ca f7       	brpl	.-14     	; 0x5172 <__divsf3_pse+0x2c>
    5180:	2a d0       	rcall	.+84     	; 0x51d6 <__divsf3_pse+0x90>
    5182:	fe 2f       	mov	r31, r30
    5184:	28 d0       	rcall	.+80     	; 0x51d6 <__divsf3_pse+0x90>
    5186:	66 0f       	add	r22, r22
    5188:	77 1f       	adc	r23, r23
    518a:	88 1f       	adc	r24, r24
    518c:	bb 1f       	adc	r27, r27
    518e:	26 17       	cp	r18, r22
    5190:	37 07       	cpc	r19, r23
    5192:	48 07       	cpc	r20, r24
    5194:	ab 07       	cpc	r26, r27
    5196:	b0 e8       	ldi	r27, 0x80	; 128
    5198:	09 f0       	breq	.+2      	; 0x519c <__divsf3_pse+0x56>
    519a:	bb 0b       	sbc	r27, r27
    519c:	80 2d       	mov	r24, r0
    519e:	bf 01       	movw	r22, r30
    51a0:	ff 27       	eor	r31, r31
    51a2:	93 58       	subi	r25, 0x83	; 131
    51a4:	5f 4f       	sbci	r21, 0xFF	; 255
    51a6:	32 f0       	brmi	.+12     	; 0x51b4 <__divsf3_pse+0x6e>
    51a8:	9e 3f       	cpi	r25, 0xFE	; 254
    51aa:	51 05       	cpc	r21, r1
    51ac:	70 f0       	brcs	.+28     	; 0x51ca <__divsf3_pse+0x84>
    51ae:	62 c0       	rjmp	.+196    	; 0x5274 <__fp_inf>
    51b0:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <__fp_szero>
    51b4:	5f 3f       	cpi	r21, 0xFF	; 255
    51b6:	e4 f3       	brlt	.-8      	; 0x51b0 <__divsf3_pse+0x6a>
    51b8:	98 3e       	cpi	r25, 0xE8	; 232
    51ba:	d4 f3       	brlt	.-12     	; 0x51b0 <__divsf3_pse+0x6a>
    51bc:	86 95       	lsr	r24
    51be:	77 95       	ror	r23
    51c0:	67 95       	ror	r22
    51c2:	b7 95       	ror	r27
    51c4:	f7 95       	ror	r31
    51c6:	9f 5f       	subi	r25, 0xFF	; 255
    51c8:	c9 f7       	brne	.-14     	; 0x51bc <__divsf3_pse+0x76>
    51ca:	88 0f       	add	r24, r24
    51cc:	91 1d       	adc	r25, r1
    51ce:	96 95       	lsr	r25
    51d0:	87 95       	ror	r24
    51d2:	97 f9       	bld	r25, 7
    51d4:	08 95       	ret
    51d6:	e1 e0       	ldi	r30, 0x01	; 1
    51d8:	66 0f       	add	r22, r22
    51da:	77 1f       	adc	r23, r23
    51dc:	88 1f       	adc	r24, r24
    51de:	bb 1f       	adc	r27, r27
    51e0:	62 17       	cp	r22, r18
    51e2:	73 07       	cpc	r23, r19
    51e4:	84 07       	cpc	r24, r20
    51e6:	ba 07       	cpc	r27, r26
    51e8:	20 f0       	brcs	.+8      	; 0x51f2 <__divsf3_pse+0xac>
    51ea:	62 1b       	sub	r22, r18
    51ec:	73 0b       	sbc	r23, r19
    51ee:	84 0b       	sbc	r24, r20
    51f0:	ba 0b       	sbc	r27, r26
    51f2:	ee 1f       	adc	r30, r30
    51f4:	88 f7       	brcc	.-30     	; 0x51d8 <__divsf3_pse+0x92>
    51f6:	e0 95       	com	r30
    51f8:	08 95       	ret

000051fa <__floatunsisf>:
    51fa:	e8 94       	clt
    51fc:	09 c0       	rjmp	.+18     	; 0x5210 <__floatsisf+0x12>

000051fe <__floatsisf>:
    51fe:	97 fb       	bst	r25, 7
    5200:	3e f4       	brtc	.+14     	; 0x5210 <__floatsisf+0x12>
    5202:	90 95       	com	r25
    5204:	80 95       	com	r24
    5206:	70 95       	com	r23
    5208:	61 95       	neg	r22
    520a:	7f 4f       	sbci	r23, 0xFF	; 255
    520c:	8f 4f       	sbci	r24, 0xFF	; 255
    520e:	9f 4f       	sbci	r25, 0xFF	; 255
    5210:	99 23       	and	r25, r25
    5212:	a9 f0       	breq	.+42     	; 0x523e <__floatsisf+0x40>
    5214:	f9 2f       	mov	r31, r25
    5216:	96 e9       	ldi	r25, 0x96	; 150
    5218:	bb 27       	eor	r27, r27
    521a:	93 95       	inc	r25
    521c:	f6 95       	lsr	r31
    521e:	87 95       	ror	r24
    5220:	77 95       	ror	r23
    5222:	67 95       	ror	r22
    5224:	b7 95       	ror	r27
    5226:	f1 11       	cpse	r31, r1
    5228:	f8 cf       	rjmp	.-16     	; 0x521a <__floatsisf+0x1c>
    522a:	fa f4       	brpl	.+62     	; 0x526a <__floatsisf+0x6c>
    522c:	bb 0f       	add	r27, r27
    522e:	11 f4       	brne	.+4      	; 0x5234 <__floatsisf+0x36>
    5230:	60 ff       	sbrs	r22, 0
    5232:	1b c0       	rjmp	.+54     	; 0x526a <__floatsisf+0x6c>
    5234:	6f 5f       	subi	r22, 0xFF	; 255
    5236:	7f 4f       	sbci	r23, 0xFF	; 255
    5238:	8f 4f       	sbci	r24, 0xFF	; 255
    523a:	9f 4f       	sbci	r25, 0xFF	; 255
    523c:	16 c0       	rjmp	.+44     	; 0x526a <__floatsisf+0x6c>
    523e:	88 23       	and	r24, r24
    5240:	11 f0       	breq	.+4      	; 0x5246 <__floatsisf+0x48>
    5242:	96 e9       	ldi	r25, 0x96	; 150
    5244:	11 c0       	rjmp	.+34     	; 0x5268 <__floatsisf+0x6a>
    5246:	77 23       	and	r23, r23
    5248:	21 f0       	breq	.+8      	; 0x5252 <__floatsisf+0x54>
    524a:	9e e8       	ldi	r25, 0x8E	; 142
    524c:	87 2f       	mov	r24, r23
    524e:	76 2f       	mov	r23, r22
    5250:	05 c0       	rjmp	.+10     	; 0x525c <__floatsisf+0x5e>
    5252:	66 23       	and	r22, r22
    5254:	71 f0       	breq	.+28     	; 0x5272 <__floatsisf+0x74>
    5256:	96 e8       	ldi	r25, 0x86	; 134
    5258:	86 2f       	mov	r24, r22
    525a:	70 e0       	ldi	r23, 0x00	; 0
    525c:	60 e0       	ldi	r22, 0x00	; 0
    525e:	2a f0       	brmi	.+10     	; 0x526a <__floatsisf+0x6c>
    5260:	9a 95       	dec	r25
    5262:	66 0f       	add	r22, r22
    5264:	77 1f       	adc	r23, r23
    5266:	88 1f       	adc	r24, r24
    5268:	da f7       	brpl	.-10     	; 0x5260 <__floatsisf+0x62>
    526a:	88 0f       	add	r24, r24
    526c:	96 95       	lsr	r25
    526e:	87 95       	ror	r24
    5270:	97 f9       	bld	r25, 7
    5272:	08 95       	ret

00005274 <__fp_inf>:
    5274:	97 f9       	bld	r25, 7
    5276:	9f 67       	ori	r25, 0x7F	; 127
    5278:	80 e8       	ldi	r24, 0x80	; 128
    527a:	70 e0       	ldi	r23, 0x00	; 0
    527c:	60 e0       	ldi	r22, 0x00	; 0
    527e:	08 95       	ret

00005280 <__fp_nan>:
    5280:	9f ef       	ldi	r25, 0xFF	; 255
    5282:	80 ec       	ldi	r24, 0xC0	; 192
    5284:	08 95       	ret

00005286 <__fp_pscA>:
    5286:	00 24       	eor	r0, r0
    5288:	0a 94       	dec	r0
    528a:	16 16       	cp	r1, r22
    528c:	17 06       	cpc	r1, r23
    528e:	18 06       	cpc	r1, r24
    5290:	09 06       	cpc	r0, r25
    5292:	08 95       	ret

00005294 <__fp_pscB>:
    5294:	00 24       	eor	r0, r0
    5296:	0a 94       	dec	r0
    5298:	12 16       	cp	r1, r18
    529a:	13 06       	cpc	r1, r19
    529c:	14 06       	cpc	r1, r20
    529e:	05 06       	cpc	r0, r21
    52a0:	08 95       	ret

000052a2 <__fp_round>:
    52a2:	09 2e       	mov	r0, r25
    52a4:	03 94       	inc	r0
    52a6:	00 0c       	add	r0, r0
    52a8:	11 f4       	brne	.+4      	; 0x52ae <__fp_round+0xc>
    52aa:	88 23       	and	r24, r24
    52ac:	52 f0       	brmi	.+20     	; 0x52c2 <__fp_round+0x20>
    52ae:	bb 0f       	add	r27, r27
    52b0:	40 f4       	brcc	.+16     	; 0x52c2 <__fp_round+0x20>
    52b2:	bf 2b       	or	r27, r31
    52b4:	11 f4       	brne	.+4      	; 0x52ba <__fp_round+0x18>
    52b6:	60 ff       	sbrs	r22, 0
    52b8:	04 c0       	rjmp	.+8      	; 0x52c2 <__fp_round+0x20>
    52ba:	6f 5f       	subi	r22, 0xFF	; 255
    52bc:	7f 4f       	sbci	r23, 0xFF	; 255
    52be:	8f 4f       	sbci	r24, 0xFF	; 255
    52c0:	9f 4f       	sbci	r25, 0xFF	; 255
    52c2:	08 95       	ret

000052c4 <__mulsf3>:
    52c4:	0c d0       	rcall	.+24     	; 0x52de <__mulsf3x>
    52c6:	ed cf       	rjmp	.-38     	; 0x52a2 <__fp_round>
    52c8:	de df       	rcall	.-68     	; 0x5286 <__fp_pscA>
    52ca:	28 f0       	brcs	.+10     	; 0x52d6 <__mulsf3+0x12>
    52cc:	e3 df       	rcall	.-58     	; 0x5294 <__fp_pscB>
    52ce:	18 f0       	brcs	.+6      	; 0x52d6 <__mulsf3+0x12>
    52d0:	95 23       	and	r25, r21
    52d2:	09 f0       	breq	.+2      	; 0x52d6 <__mulsf3+0x12>
    52d4:	cf cf       	rjmp	.-98     	; 0x5274 <__fp_inf>
    52d6:	d4 cf       	rjmp	.-88     	; 0x5280 <__fp_nan>
    52d8:	11 24       	eor	r1, r1
    52da:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <__fp_szero>

000052de <__mulsf3x>:
    52de:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__fp_split3>
    52e2:	90 f3       	brcs	.-28     	; 0x52c8 <__mulsf3+0x4>

000052e4 <__mulsf3_pse>:
    52e4:	95 9f       	mul	r25, r21
    52e6:	c1 f3       	breq	.-16     	; 0x52d8 <__mulsf3+0x14>
    52e8:	95 0f       	add	r25, r21
    52ea:	50 e0       	ldi	r21, 0x00	; 0
    52ec:	55 1f       	adc	r21, r21
    52ee:	62 9f       	mul	r22, r18
    52f0:	f0 01       	movw	r30, r0
    52f2:	72 9f       	mul	r23, r18
    52f4:	bb 27       	eor	r27, r27
    52f6:	f0 0d       	add	r31, r0
    52f8:	b1 1d       	adc	r27, r1
    52fa:	63 9f       	mul	r22, r19
    52fc:	aa 27       	eor	r26, r26
    52fe:	f0 0d       	add	r31, r0
    5300:	b1 1d       	adc	r27, r1
    5302:	aa 1f       	adc	r26, r26
    5304:	64 9f       	mul	r22, r20
    5306:	66 27       	eor	r22, r22
    5308:	b0 0d       	add	r27, r0
    530a:	a1 1d       	adc	r26, r1
    530c:	66 1f       	adc	r22, r22
    530e:	82 9f       	mul	r24, r18
    5310:	22 27       	eor	r18, r18
    5312:	b0 0d       	add	r27, r0
    5314:	a1 1d       	adc	r26, r1
    5316:	62 1f       	adc	r22, r18
    5318:	73 9f       	mul	r23, r19
    531a:	b0 0d       	add	r27, r0
    531c:	a1 1d       	adc	r26, r1
    531e:	62 1f       	adc	r22, r18
    5320:	83 9f       	mul	r24, r19
    5322:	a0 0d       	add	r26, r0
    5324:	61 1d       	adc	r22, r1
    5326:	22 1f       	adc	r18, r18
    5328:	74 9f       	mul	r23, r20
    532a:	33 27       	eor	r19, r19
    532c:	a0 0d       	add	r26, r0
    532e:	61 1d       	adc	r22, r1
    5330:	23 1f       	adc	r18, r19
    5332:	84 9f       	mul	r24, r20
    5334:	60 0d       	add	r22, r0
    5336:	21 1d       	adc	r18, r1
    5338:	82 2f       	mov	r24, r18
    533a:	76 2f       	mov	r23, r22
    533c:	6a 2f       	mov	r22, r26
    533e:	11 24       	eor	r1, r1
    5340:	9f 57       	subi	r25, 0x7F	; 127
    5342:	50 40       	sbci	r21, 0x00	; 0
    5344:	92 f0       	brmi	.+36     	; 0x536a <__mulsf3_pse+0x86>
    5346:	e9 f0       	breq	.+58     	; 0x5382 <__mulsf3_pse+0x9e>
    5348:	88 23       	and	r24, r24
    534a:	4a f0       	brmi	.+18     	; 0x535e <__mulsf3_pse+0x7a>
    534c:	ee 0f       	add	r30, r30
    534e:	ff 1f       	adc	r31, r31
    5350:	bb 1f       	adc	r27, r27
    5352:	66 1f       	adc	r22, r22
    5354:	77 1f       	adc	r23, r23
    5356:	88 1f       	adc	r24, r24
    5358:	91 50       	subi	r25, 0x01	; 1
    535a:	50 40       	sbci	r21, 0x00	; 0
    535c:	a9 f7       	brne	.-22     	; 0x5348 <__mulsf3_pse+0x64>
    535e:	9e 3f       	cpi	r25, 0xFE	; 254
    5360:	51 05       	cpc	r21, r1
    5362:	78 f0       	brcs	.+30     	; 0x5382 <__mulsf3_pse+0x9e>
    5364:	87 cf       	rjmp	.-242    	; 0x5274 <__fp_inf>
    5366:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <__fp_szero>
    536a:	5f 3f       	cpi	r21, 0xFF	; 255
    536c:	e4 f3       	brlt	.-8      	; 0x5366 <__mulsf3_pse+0x82>
    536e:	98 3e       	cpi	r25, 0xE8	; 232
    5370:	d4 f3       	brlt	.-12     	; 0x5366 <__mulsf3_pse+0x82>
    5372:	86 95       	lsr	r24
    5374:	77 95       	ror	r23
    5376:	67 95       	ror	r22
    5378:	b7 95       	ror	r27
    537a:	f7 95       	ror	r31
    537c:	e7 95       	ror	r30
    537e:	9f 5f       	subi	r25, 0xFF	; 255
    5380:	c1 f7       	brne	.-16     	; 0x5372 <__mulsf3_pse+0x8e>
    5382:	fe 2b       	or	r31, r30
    5384:	88 0f       	add	r24, r24
    5386:	91 1d       	adc	r25, r1
    5388:	96 95       	lsr	r25
    538a:	87 95       	ror	r24
    538c:	97 f9       	bld	r25, 7
    538e:	08 95       	ret

00005390 <__udivmodsi4>:
    5390:	a1 e2       	ldi	r26, 0x21	; 33
    5392:	1a 2e       	mov	r1, r26
    5394:	aa 1b       	sub	r26, r26
    5396:	bb 1b       	sub	r27, r27
    5398:	fd 01       	movw	r30, r26
    539a:	0d c0       	rjmp	.+26     	; 0x53b6 <__udivmodsi4_ep>

0000539c <__udivmodsi4_loop>:
    539c:	aa 1f       	adc	r26, r26
    539e:	bb 1f       	adc	r27, r27
    53a0:	ee 1f       	adc	r30, r30
    53a2:	ff 1f       	adc	r31, r31
    53a4:	a2 17       	cp	r26, r18
    53a6:	b3 07       	cpc	r27, r19
    53a8:	e4 07       	cpc	r30, r20
    53aa:	f5 07       	cpc	r31, r21
    53ac:	20 f0       	brcs	.+8      	; 0x53b6 <__udivmodsi4_ep>
    53ae:	a2 1b       	sub	r26, r18
    53b0:	b3 0b       	sbc	r27, r19
    53b2:	e4 0b       	sbc	r30, r20
    53b4:	f5 0b       	sbc	r31, r21

000053b6 <__udivmodsi4_ep>:
    53b6:	66 1f       	adc	r22, r22
    53b8:	77 1f       	adc	r23, r23
    53ba:	88 1f       	adc	r24, r24
    53bc:	99 1f       	adc	r25, r25
    53be:	1a 94       	dec	r1
    53c0:	69 f7       	brne	.-38     	; 0x539c <__udivmodsi4_loop>
    53c2:	60 95       	com	r22
    53c4:	70 95       	com	r23
    53c6:	80 95       	com	r24
    53c8:	90 95       	com	r25
    53ca:	9b 01       	movw	r18, r22
    53cc:	ac 01       	movw	r20, r24
    53ce:	bd 01       	movw	r22, r26
    53d0:	cf 01       	movw	r24, r30
    53d2:	08 95       	ret

000053d4 <__tablejump2__>:
    53d4:	ee 0f       	add	r30, r30
    53d6:	ff 1f       	adc	r31, r31
    53d8:	88 1f       	adc	r24, r24
    53da:	8b bf       	out	0x3b, r24	; 59
    53dc:	07 90       	elpm	r0, Z+
    53de:	f6 91       	elpm	r31, Z
    53e0:	e0 2d       	mov	r30, r0
    53e2:	19 94       	eijmp

000053e4 <calloc>:
    53e4:	0f 93       	push	r16
    53e6:	1f 93       	push	r17
    53e8:	cf 93       	push	r28
    53ea:	df 93       	push	r29
    53ec:	86 9f       	mul	r24, r22
    53ee:	80 01       	movw	r16, r0
    53f0:	87 9f       	mul	r24, r23
    53f2:	10 0d       	add	r17, r0
    53f4:	96 9f       	mul	r25, r22
    53f6:	10 0d       	add	r17, r0
    53f8:	11 24       	eor	r1, r1
    53fa:	c8 01       	movw	r24, r16
    53fc:	0d d0       	rcall	.+26     	; 0x5418 <malloc>
    53fe:	ec 01       	movw	r28, r24
    5400:	00 97       	sbiw	r24, 0x00	; 0
    5402:	21 f0       	breq	.+8      	; 0x540c <calloc+0x28>
    5404:	a8 01       	movw	r20, r16
    5406:	60 e0       	ldi	r22, 0x00	; 0
    5408:	70 e0       	ldi	r23, 0x00	; 0
    540a:	34 d1       	rcall	.+616    	; 0x5674 <memset>
    540c:	ce 01       	movw	r24, r28
    540e:	df 91       	pop	r29
    5410:	cf 91       	pop	r28
    5412:	1f 91       	pop	r17
    5414:	0f 91       	pop	r16
    5416:	08 95       	ret

00005418 <malloc>:
    5418:	0f 93       	push	r16
    541a:	1f 93       	push	r17
    541c:	cf 93       	push	r28
    541e:	df 93       	push	r29
    5420:	82 30       	cpi	r24, 0x02	; 2
    5422:	91 05       	cpc	r25, r1
    5424:	10 f4       	brcc	.+4      	; 0x542a <malloc+0x12>
    5426:	82 e0       	ldi	r24, 0x02	; 2
    5428:	90 e0       	ldi	r25, 0x00	; 0
    542a:	e0 91 b7 13 	lds	r30, 0x13B7	; 0x8013b7 <__flp>
    542e:	f0 91 b8 13 	lds	r31, 0x13B8	; 0x8013b8 <__flp+0x1>
    5432:	20 e0       	ldi	r18, 0x00	; 0
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	a0 e0       	ldi	r26, 0x00	; 0
    5438:	b0 e0       	ldi	r27, 0x00	; 0
    543a:	30 97       	sbiw	r30, 0x00	; 0
    543c:	19 f1       	breq	.+70     	; 0x5484 <malloc+0x6c>
    543e:	40 81       	ld	r20, Z
    5440:	51 81       	ldd	r21, Z+1	; 0x01
    5442:	02 81       	ldd	r16, Z+2	; 0x02
    5444:	13 81       	ldd	r17, Z+3	; 0x03
    5446:	48 17       	cp	r20, r24
    5448:	59 07       	cpc	r21, r25
    544a:	c8 f0       	brcs	.+50     	; 0x547e <malloc+0x66>
    544c:	84 17       	cp	r24, r20
    544e:	95 07       	cpc	r25, r21
    5450:	69 f4       	brne	.+26     	; 0x546c <malloc+0x54>
    5452:	10 97       	sbiw	r26, 0x00	; 0
    5454:	31 f0       	breq	.+12     	; 0x5462 <malloc+0x4a>
    5456:	12 96       	adiw	r26, 0x02	; 2
    5458:	0c 93       	st	X, r16
    545a:	12 97       	sbiw	r26, 0x02	; 2
    545c:	13 96       	adiw	r26, 0x03	; 3
    545e:	1c 93       	st	X, r17
    5460:	27 c0       	rjmp	.+78     	; 0x54b0 <malloc+0x98>
    5462:	00 93 b7 13 	sts	0x13B7, r16	; 0x8013b7 <__flp>
    5466:	10 93 b8 13 	sts	0x13B8, r17	; 0x8013b8 <__flp+0x1>
    546a:	22 c0       	rjmp	.+68     	; 0x54b0 <malloc+0x98>
    546c:	21 15       	cp	r18, r1
    546e:	31 05       	cpc	r19, r1
    5470:	19 f0       	breq	.+6      	; 0x5478 <malloc+0x60>
    5472:	42 17       	cp	r20, r18
    5474:	53 07       	cpc	r21, r19
    5476:	18 f4       	brcc	.+6      	; 0x547e <malloc+0x66>
    5478:	9a 01       	movw	r18, r20
    547a:	bd 01       	movw	r22, r26
    547c:	ef 01       	movw	r28, r30
    547e:	df 01       	movw	r26, r30
    5480:	f8 01       	movw	r30, r16
    5482:	db cf       	rjmp	.-74     	; 0x543a <malloc+0x22>
    5484:	21 15       	cp	r18, r1
    5486:	31 05       	cpc	r19, r1
    5488:	f9 f0       	breq	.+62     	; 0x54c8 <malloc+0xb0>
    548a:	28 1b       	sub	r18, r24
    548c:	39 0b       	sbc	r19, r25
    548e:	24 30       	cpi	r18, 0x04	; 4
    5490:	31 05       	cpc	r19, r1
    5492:	80 f4       	brcc	.+32     	; 0x54b4 <malloc+0x9c>
    5494:	8a 81       	ldd	r24, Y+2	; 0x02
    5496:	9b 81       	ldd	r25, Y+3	; 0x03
    5498:	61 15       	cp	r22, r1
    549a:	71 05       	cpc	r23, r1
    549c:	21 f0       	breq	.+8      	; 0x54a6 <malloc+0x8e>
    549e:	fb 01       	movw	r30, r22
    54a0:	93 83       	std	Z+3, r25	; 0x03
    54a2:	82 83       	std	Z+2, r24	; 0x02
    54a4:	04 c0       	rjmp	.+8      	; 0x54ae <malloc+0x96>
    54a6:	90 93 b8 13 	sts	0x13B8, r25	; 0x8013b8 <__flp+0x1>
    54aa:	80 93 b7 13 	sts	0x13B7, r24	; 0x8013b7 <__flp>
    54ae:	fe 01       	movw	r30, r28
    54b0:	32 96       	adiw	r30, 0x02	; 2
    54b2:	44 c0       	rjmp	.+136    	; 0x553c <malloc+0x124>
    54b4:	fe 01       	movw	r30, r28
    54b6:	e2 0f       	add	r30, r18
    54b8:	f3 1f       	adc	r31, r19
    54ba:	81 93       	st	Z+, r24
    54bc:	91 93       	st	Z+, r25
    54be:	22 50       	subi	r18, 0x02	; 2
    54c0:	31 09       	sbc	r19, r1
    54c2:	39 83       	std	Y+1, r19	; 0x01
    54c4:	28 83       	st	Y, r18
    54c6:	3a c0       	rjmp	.+116    	; 0x553c <malloc+0x124>
    54c8:	20 91 b5 13 	lds	r18, 0x13B5	; 0x8013b5 <__brkval>
    54cc:	30 91 b6 13 	lds	r19, 0x13B6	; 0x8013b6 <__brkval+0x1>
    54d0:	23 2b       	or	r18, r19
    54d2:	41 f4       	brne	.+16     	; 0x54e4 <malloc+0xcc>
    54d4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    54d8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    54dc:	30 93 b6 13 	sts	0x13B6, r19	; 0x8013b6 <__brkval+0x1>
    54e0:	20 93 b5 13 	sts	0x13B5, r18	; 0x8013b5 <__brkval>
    54e4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    54e8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    54ec:	21 15       	cp	r18, r1
    54ee:	31 05       	cpc	r19, r1
    54f0:	41 f4       	brne	.+16     	; 0x5502 <malloc+0xea>
    54f2:	2d b7       	in	r18, 0x3d	; 61
    54f4:	3e b7       	in	r19, 0x3e	; 62
    54f6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    54fa:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    54fe:	24 1b       	sub	r18, r20
    5500:	35 0b       	sbc	r19, r21
    5502:	e0 91 b5 13 	lds	r30, 0x13B5	; 0x8013b5 <__brkval>
    5506:	f0 91 b6 13 	lds	r31, 0x13B6	; 0x8013b6 <__brkval+0x1>
    550a:	e2 17       	cp	r30, r18
    550c:	f3 07       	cpc	r31, r19
    550e:	a0 f4       	brcc	.+40     	; 0x5538 <malloc+0x120>
    5510:	2e 1b       	sub	r18, r30
    5512:	3f 0b       	sbc	r19, r31
    5514:	28 17       	cp	r18, r24
    5516:	39 07       	cpc	r19, r25
    5518:	78 f0       	brcs	.+30     	; 0x5538 <malloc+0x120>
    551a:	ac 01       	movw	r20, r24
    551c:	4e 5f       	subi	r20, 0xFE	; 254
    551e:	5f 4f       	sbci	r21, 0xFF	; 255
    5520:	24 17       	cp	r18, r20
    5522:	35 07       	cpc	r19, r21
    5524:	48 f0       	brcs	.+18     	; 0x5538 <malloc+0x120>
    5526:	4e 0f       	add	r20, r30
    5528:	5f 1f       	adc	r21, r31
    552a:	50 93 b6 13 	sts	0x13B6, r21	; 0x8013b6 <__brkval+0x1>
    552e:	40 93 b5 13 	sts	0x13B5, r20	; 0x8013b5 <__brkval>
    5532:	81 93       	st	Z+, r24
    5534:	91 93       	st	Z+, r25
    5536:	02 c0       	rjmp	.+4      	; 0x553c <malloc+0x124>
    5538:	e0 e0       	ldi	r30, 0x00	; 0
    553a:	f0 e0       	ldi	r31, 0x00	; 0
    553c:	cf 01       	movw	r24, r30
    553e:	df 91       	pop	r29
    5540:	cf 91       	pop	r28
    5542:	1f 91       	pop	r17
    5544:	0f 91       	pop	r16
    5546:	08 95       	ret

00005548 <free>:
    5548:	cf 93       	push	r28
    554a:	df 93       	push	r29
    554c:	00 97       	sbiw	r24, 0x00	; 0
    554e:	09 f4       	brne	.+2      	; 0x5552 <free+0xa>
    5550:	81 c0       	rjmp	.+258    	; 0x5654 <free+0x10c>
    5552:	fc 01       	movw	r30, r24
    5554:	32 97       	sbiw	r30, 0x02	; 2
    5556:	13 82       	std	Z+3, r1	; 0x03
    5558:	12 82       	std	Z+2, r1	; 0x02
    555a:	a0 91 b7 13 	lds	r26, 0x13B7	; 0x8013b7 <__flp>
    555e:	b0 91 b8 13 	lds	r27, 0x13B8	; 0x8013b8 <__flp+0x1>
    5562:	10 97       	sbiw	r26, 0x00	; 0
    5564:	81 f4       	brne	.+32     	; 0x5586 <free+0x3e>
    5566:	20 81       	ld	r18, Z
    5568:	31 81       	ldd	r19, Z+1	; 0x01
    556a:	82 0f       	add	r24, r18
    556c:	93 1f       	adc	r25, r19
    556e:	20 91 b5 13 	lds	r18, 0x13B5	; 0x8013b5 <__brkval>
    5572:	30 91 b6 13 	lds	r19, 0x13B6	; 0x8013b6 <__brkval+0x1>
    5576:	28 17       	cp	r18, r24
    5578:	39 07       	cpc	r19, r25
    557a:	51 f5       	brne	.+84     	; 0x55d0 <free+0x88>
    557c:	f0 93 b6 13 	sts	0x13B6, r31	; 0x8013b6 <__brkval+0x1>
    5580:	e0 93 b5 13 	sts	0x13B5, r30	; 0x8013b5 <__brkval>
    5584:	67 c0       	rjmp	.+206    	; 0x5654 <free+0x10c>
    5586:	ed 01       	movw	r28, r26
    5588:	20 e0       	ldi	r18, 0x00	; 0
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	ce 17       	cp	r28, r30
    558e:	df 07       	cpc	r29, r31
    5590:	40 f4       	brcc	.+16     	; 0x55a2 <free+0x5a>
    5592:	4a 81       	ldd	r20, Y+2	; 0x02
    5594:	5b 81       	ldd	r21, Y+3	; 0x03
    5596:	9e 01       	movw	r18, r28
    5598:	41 15       	cp	r20, r1
    559a:	51 05       	cpc	r21, r1
    559c:	f1 f0       	breq	.+60     	; 0x55da <free+0x92>
    559e:	ea 01       	movw	r28, r20
    55a0:	f5 cf       	rjmp	.-22     	; 0x558c <free+0x44>
    55a2:	d3 83       	std	Z+3, r29	; 0x03
    55a4:	c2 83       	std	Z+2, r28	; 0x02
    55a6:	40 81       	ld	r20, Z
    55a8:	51 81       	ldd	r21, Z+1	; 0x01
    55aa:	84 0f       	add	r24, r20
    55ac:	95 1f       	adc	r25, r21
    55ae:	c8 17       	cp	r28, r24
    55b0:	d9 07       	cpc	r29, r25
    55b2:	59 f4       	brne	.+22     	; 0x55ca <free+0x82>
    55b4:	88 81       	ld	r24, Y
    55b6:	99 81       	ldd	r25, Y+1	; 0x01
    55b8:	84 0f       	add	r24, r20
    55ba:	95 1f       	adc	r25, r21
    55bc:	02 96       	adiw	r24, 0x02	; 2
    55be:	91 83       	std	Z+1, r25	; 0x01
    55c0:	80 83       	st	Z, r24
    55c2:	8a 81       	ldd	r24, Y+2	; 0x02
    55c4:	9b 81       	ldd	r25, Y+3	; 0x03
    55c6:	93 83       	std	Z+3, r25	; 0x03
    55c8:	82 83       	std	Z+2, r24	; 0x02
    55ca:	21 15       	cp	r18, r1
    55cc:	31 05       	cpc	r19, r1
    55ce:	29 f4       	brne	.+10     	; 0x55da <free+0x92>
    55d0:	f0 93 b8 13 	sts	0x13B8, r31	; 0x8013b8 <__flp+0x1>
    55d4:	e0 93 b7 13 	sts	0x13B7, r30	; 0x8013b7 <__flp>
    55d8:	3d c0       	rjmp	.+122    	; 0x5654 <free+0x10c>
    55da:	e9 01       	movw	r28, r18
    55dc:	fb 83       	std	Y+3, r31	; 0x03
    55de:	ea 83       	std	Y+2, r30	; 0x02
    55e0:	49 91       	ld	r20, Y+
    55e2:	59 91       	ld	r21, Y+
    55e4:	c4 0f       	add	r28, r20
    55e6:	d5 1f       	adc	r29, r21
    55e8:	ec 17       	cp	r30, r28
    55ea:	fd 07       	cpc	r31, r29
    55ec:	61 f4       	brne	.+24     	; 0x5606 <free+0xbe>
    55ee:	80 81       	ld	r24, Z
    55f0:	91 81       	ldd	r25, Z+1	; 0x01
    55f2:	84 0f       	add	r24, r20
    55f4:	95 1f       	adc	r25, r21
    55f6:	02 96       	adiw	r24, 0x02	; 2
    55f8:	e9 01       	movw	r28, r18
    55fa:	99 83       	std	Y+1, r25	; 0x01
    55fc:	88 83       	st	Y, r24
    55fe:	82 81       	ldd	r24, Z+2	; 0x02
    5600:	93 81       	ldd	r25, Z+3	; 0x03
    5602:	9b 83       	std	Y+3, r25	; 0x03
    5604:	8a 83       	std	Y+2, r24	; 0x02
    5606:	e0 e0       	ldi	r30, 0x00	; 0
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	12 96       	adiw	r26, 0x02	; 2
    560c:	8d 91       	ld	r24, X+
    560e:	9c 91       	ld	r25, X
    5610:	13 97       	sbiw	r26, 0x03	; 3
    5612:	00 97       	sbiw	r24, 0x00	; 0
    5614:	19 f0       	breq	.+6      	; 0x561c <free+0xd4>
    5616:	fd 01       	movw	r30, r26
    5618:	dc 01       	movw	r26, r24
    561a:	f7 cf       	rjmp	.-18     	; 0x560a <free+0xc2>
    561c:	8d 91       	ld	r24, X+
    561e:	9c 91       	ld	r25, X
    5620:	11 97       	sbiw	r26, 0x01	; 1
    5622:	9d 01       	movw	r18, r26
    5624:	2e 5f       	subi	r18, 0xFE	; 254
    5626:	3f 4f       	sbci	r19, 0xFF	; 255
    5628:	82 0f       	add	r24, r18
    562a:	93 1f       	adc	r25, r19
    562c:	20 91 b5 13 	lds	r18, 0x13B5	; 0x8013b5 <__brkval>
    5630:	30 91 b6 13 	lds	r19, 0x13B6	; 0x8013b6 <__brkval+0x1>
    5634:	28 17       	cp	r18, r24
    5636:	39 07       	cpc	r19, r25
    5638:	69 f4       	brne	.+26     	; 0x5654 <free+0x10c>
    563a:	30 97       	sbiw	r30, 0x00	; 0
    563c:	29 f4       	brne	.+10     	; 0x5648 <free+0x100>
    563e:	10 92 b8 13 	sts	0x13B8, r1	; 0x8013b8 <__flp+0x1>
    5642:	10 92 b7 13 	sts	0x13B7, r1	; 0x8013b7 <__flp>
    5646:	02 c0       	rjmp	.+4      	; 0x564c <free+0x104>
    5648:	13 82       	std	Z+3, r1	; 0x03
    564a:	12 82       	std	Z+2, r1	; 0x02
    564c:	b0 93 b6 13 	sts	0x13B6, r27	; 0x8013b6 <__brkval+0x1>
    5650:	a0 93 b5 13 	sts	0x13B5, r26	; 0x8013b5 <__brkval>
    5654:	df 91       	pop	r29
    5656:	cf 91       	pop	r28
    5658:	08 95       	ret

0000565a <abort>:
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	f8 94       	cli
    5660:	7d c3       	rjmp	.+1786   	; 0x5d5c <_exit>

00005662 <memcpy>:
    5662:	fb 01       	movw	r30, r22
    5664:	dc 01       	movw	r26, r24
    5666:	02 c0       	rjmp	.+4      	; 0x566c <memcpy+0xa>
    5668:	01 90       	ld	r0, Z+
    566a:	0d 92       	st	X+, r0
    566c:	41 50       	subi	r20, 0x01	; 1
    566e:	50 40       	sbci	r21, 0x00	; 0
    5670:	d8 f7       	brcc	.-10     	; 0x5668 <memcpy+0x6>
    5672:	08 95       	ret

00005674 <memset>:
    5674:	dc 01       	movw	r26, r24
    5676:	01 c0       	rjmp	.+2      	; 0x567a <memset+0x6>
    5678:	6d 93       	st	X+, r22
    567a:	41 50       	subi	r20, 0x01	; 1
    567c:	50 40       	sbci	r21, 0x00	; 0
    567e:	e0 f7       	brcc	.-8      	; 0x5678 <memset+0x4>
    5680:	08 95       	ret

00005682 <strcasestr>:
    5682:	fb 01       	movw	r30, r22
    5684:	51 91       	ld	r21, Z+
    5686:	55 23       	and	r21, r21
    5688:	b1 f0       	breq	.+44     	; 0x56b6 <strcasestr+0x34>
    568a:	bf 01       	movw	r22, r30
    568c:	dc 01       	movw	r26, r24
    568e:	05 2e       	mov	r0, r21
    5690:	4d 91       	ld	r20, X+
    5692:	44 23       	and	r20, r20
    5694:	69 f0       	breq	.+26     	; 0x56b0 <strcasestr+0x2e>
    5696:	10 d0       	rcall	.+32     	; 0x56b8 <strcasestr+0x36>
    5698:	d9 f7       	brne	.-10     	; 0x5690 <strcasestr+0xe>
    569a:	cd 01       	movw	r24, r26
    569c:	01 90       	ld	r0, Z+
    569e:	00 20       	and	r0, r0
    56a0:	49 f0       	breq	.+18     	; 0x56b4 <strcasestr+0x32>
    56a2:	4d 91       	ld	r20, X+
    56a4:	41 11       	cpse	r20, r1
    56a6:	08 d0       	rcall	.+16     	; 0x56b8 <strcasestr+0x36>
    56a8:	c9 f3       	breq	.-14     	; 0x569c <strcasestr+0x1a>
    56aa:	fb 01       	movw	r30, r22
    56ac:	41 11       	cpse	r20, r1
    56ae:	ee cf       	rjmp	.-36     	; 0x568c <strcasestr+0xa>
    56b0:	81 e0       	ldi	r24, 0x01	; 1
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	01 97       	sbiw	r24, 0x01	; 1
    56b6:	08 95       	ret
    56b8:	40 25       	eor	r20, r0
    56ba:	39 f0       	breq	.+14     	; 0x56ca <strcasestr+0x48>
    56bc:	40 32       	cpi	r20, 0x20	; 32
    56be:	29 f4       	brne	.+10     	; 0x56ca <strcasestr+0x48>
    56c0:	40 29       	or	r20, r0
    56c2:	4b 57       	subi	r20, 0x7B	; 123
    56c4:	46 5e       	subi	r20, 0xE6	; 230
    56c6:	08 f0       	brcs	.+2      	; 0x56ca <strcasestr+0x48>
    56c8:	18 94       	sez
    56ca:	08 95       	ret

000056cc <strcat>:
    56cc:	fb 01       	movw	r30, r22
    56ce:	dc 01       	movw	r26, r24
    56d0:	0d 90       	ld	r0, X+
    56d2:	00 20       	and	r0, r0
    56d4:	e9 f7       	brne	.-6      	; 0x56d0 <strcat+0x4>
    56d6:	11 97       	sbiw	r26, 0x01	; 1
    56d8:	01 90       	ld	r0, Z+
    56da:	0d 92       	st	X+, r0
    56dc:	00 20       	and	r0, r0
    56de:	e1 f7       	brne	.-8      	; 0x56d8 <strcat+0xc>
    56e0:	08 95       	ret

000056e2 <strcpy>:
    56e2:	fb 01       	movw	r30, r22
    56e4:	dc 01       	movw	r26, r24
    56e6:	01 90       	ld	r0, Z+
    56e8:	0d 92       	st	X+, r0
    56ea:	00 20       	and	r0, r0
    56ec:	e1 f7       	brne	.-8      	; 0x56e6 <strcpy+0x4>
    56ee:	08 95       	ret

000056f0 <strncasecmp>:
    56f0:	fb 01       	movw	r30, r22
    56f2:	dc 01       	movw	r26, r24
    56f4:	41 50       	subi	r20, 0x01	; 1
    56f6:	50 40       	sbci	r21, 0x00	; 0
    56f8:	88 f0       	brcs	.+34     	; 0x571c <strncasecmp+0x2c>
    56fa:	8d 91       	ld	r24, X+
    56fc:	81 34       	cpi	r24, 0x41	; 65
    56fe:	1c f0       	brlt	.+6      	; 0x5706 <strncasecmp+0x16>
    5700:	8b 35       	cpi	r24, 0x5B	; 91
    5702:	0c f4       	brge	.+2      	; 0x5706 <strncasecmp+0x16>
    5704:	80 5e       	subi	r24, 0xE0	; 224
    5706:	61 91       	ld	r22, Z+
    5708:	61 34       	cpi	r22, 0x41	; 65
    570a:	1c f0       	brlt	.+6      	; 0x5712 <strncasecmp+0x22>
    570c:	6b 35       	cpi	r22, 0x5B	; 91
    570e:	0c f4       	brge	.+2      	; 0x5712 <strncasecmp+0x22>
    5710:	60 5e       	subi	r22, 0xE0	; 224
    5712:	86 1b       	sub	r24, r22
    5714:	61 11       	cpse	r22, r1
    5716:	71 f3       	breq	.-36     	; 0x56f4 <strncasecmp+0x4>
    5718:	99 0b       	sbc	r25, r25
    571a:	08 95       	ret
    571c:	88 1b       	sub	r24, r24
    571e:	fc cf       	rjmp	.-8      	; 0x5718 <strncasecmp+0x28>

00005720 <printf>:
    5720:	cf 93       	push	r28
    5722:	df 93       	push	r29
    5724:	cd b7       	in	r28, 0x3d	; 61
    5726:	de b7       	in	r29, 0x3e	; 62
    5728:	ae 01       	movw	r20, r28
    572a:	4a 5f       	subi	r20, 0xFA	; 250
    572c:	5f 4f       	sbci	r21, 0xFF	; 255
    572e:	fa 01       	movw	r30, r20
    5730:	61 91       	ld	r22, Z+
    5732:	71 91       	ld	r23, Z+
    5734:	af 01       	movw	r20, r30
    5736:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <__iob+0x2>
    573a:	90 91 bc 13 	lds	r25, 0x13BC	; 0x8013bc <__iob+0x3>
    573e:	61 d0       	rcall	.+194    	; 0x5802 <vfprintf>
    5740:	df 91       	pop	r29
    5742:	cf 91       	pop	r28
    5744:	08 95       	ret

00005746 <puts>:
    5746:	0f 93       	push	r16
    5748:	1f 93       	push	r17
    574a:	cf 93       	push	r28
    574c:	df 93       	push	r29
    574e:	e0 91 bb 13 	lds	r30, 0x13BB	; 0x8013bb <__iob+0x2>
    5752:	f0 91 bc 13 	lds	r31, 0x13BC	; 0x8013bc <__iob+0x3>
    5756:	23 81       	ldd	r18, Z+3	; 0x03
    5758:	21 ff       	sbrs	r18, 1
    575a:	1b c0       	rjmp	.+54     	; 0x5792 <puts+0x4c>
    575c:	8c 01       	movw	r16, r24
    575e:	d0 e0       	ldi	r29, 0x00	; 0
    5760:	c0 e0       	ldi	r28, 0x00	; 0
    5762:	f8 01       	movw	r30, r16
    5764:	81 91       	ld	r24, Z+
    5766:	8f 01       	movw	r16, r30
    5768:	60 91 bb 13 	lds	r22, 0x13BB	; 0x8013bb <__iob+0x2>
    576c:	70 91 bc 13 	lds	r23, 0x13BC	; 0x8013bc <__iob+0x3>
    5770:	db 01       	movw	r26, r22
    5772:	18 96       	adiw	r26, 0x08	; 8
    5774:	ed 91       	ld	r30, X+
    5776:	fc 91       	ld	r31, X
    5778:	19 97       	sbiw	r26, 0x09	; 9
    577a:	88 23       	and	r24, r24
    577c:	31 f0       	breq	.+12     	; 0x578a <puts+0x44>
    577e:	19 95       	eicall
    5780:	89 2b       	or	r24, r25
    5782:	79 f3       	breq	.-34     	; 0x5762 <puts+0x1c>
    5784:	df ef       	ldi	r29, 0xFF	; 255
    5786:	cf ef       	ldi	r28, 0xFF	; 255
    5788:	ec cf       	rjmp	.-40     	; 0x5762 <puts+0x1c>
    578a:	8a e0       	ldi	r24, 0x0A	; 10
    578c:	19 95       	eicall
    578e:	89 2b       	or	r24, r25
    5790:	19 f0       	breq	.+6      	; 0x5798 <puts+0x52>
    5792:	8f ef       	ldi	r24, 0xFF	; 255
    5794:	9f ef       	ldi	r25, 0xFF	; 255
    5796:	02 c0       	rjmp	.+4      	; 0x579c <puts+0x56>
    5798:	8d 2f       	mov	r24, r29
    579a:	9c 2f       	mov	r25, r28
    579c:	df 91       	pop	r29
    579e:	cf 91       	pop	r28
    57a0:	1f 91       	pop	r17
    57a2:	0f 91       	pop	r16
    57a4:	08 95       	ret

000057a6 <sprintf>:
    57a6:	0f 93       	push	r16
    57a8:	1f 93       	push	r17
    57aa:	cf 93       	push	r28
    57ac:	df 93       	push	r29
    57ae:	cd b7       	in	r28, 0x3d	; 61
    57b0:	de b7       	in	r29, 0x3e	; 62
    57b2:	2e 97       	sbiw	r28, 0x0e	; 14
    57b4:	0f b6       	in	r0, 0x3f	; 63
    57b6:	f8 94       	cli
    57b8:	de bf       	out	0x3e, r29	; 62
    57ba:	0f be       	out	0x3f, r0	; 63
    57bc:	cd bf       	out	0x3d, r28	; 61
    57be:	0e 89       	ldd	r16, Y+22	; 0x16
    57c0:	1f 89       	ldd	r17, Y+23	; 0x17
    57c2:	86 e0       	ldi	r24, 0x06	; 6
    57c4:	8c 83       	std	Y+4, r24	; 0x04
    57c6:	1a 83       	std	Y+2, r17	; 0x02
    57c8:	09 83       	std	Y+1, r16	; 0x01
    57ca:	8f ef       	ldi	r24, 0xFF	; 255
    57cc:	9f e7       	ldi	r25, 0x7F	; 127
    57ce:	9e 83       	std	Y+6, r25	; 0x06
    57d0:	8d 83       	std	Y+5, r24	; 0x05
    57d2:	ae 01       	movw	r20, r28
    57d4:	46 5e       	subi	r20, 0xE6	; 230
    57d6:	5f 4f       	sbci	r21, 0xFF	; 255
    57d8:	68 8d       	ldd	r22, Y+24	; 0x18
    57da:	79 8d       	ldd	r23, Y+25	; 0x19
    57dc:	ce 01       	movw	r24, r28
    57de:	01 96       	adiw	r24, 0x01	; 1
    57e0:	10 d0       	rcall	.+32     	; 0x5802 <vfprintf>
    57e2:	ef 81       	ldd	r30, Y+7	; 0x07
    57e4:	f8 85       	ldd	r31, Y+8	; 0x08
    57e6:	e0 0f       	add	r30, r16
    57e8:	f1 1f       	adc	r31, r17
    57ea:	10 82       	st	Z, r1
    57ec:	2e 96       	adiw	r28, 0x0e	; 14
    57ee:	0f b6       	in	r0, 0x3f	; 63
    57f0:	f8 94       	cli
    57f2:	de bf       	out	0x3e, r29	; 62
    57f4:	0f be       	out	0x3f, r0	; 63
    57f6:	cd bf       	out	0x3d, r28	; 61
    57f8:	df 91       	pop	r29
    57fa:	cf 91       	pop	r28
    57fc:	1f 91       	pop	r17
    57fe:	0f 91       	pop	r16
    5800:	08 95       	ret

00005802 <vfprintf>:
    5802:	2f 92       	push	r2
    5804:	3f 92       	push	r3
    5806:	4f 92       	push	r4
    5808:	5f 92       	push	r5
    580a:	6f 92       	push	r6
    580c:	7f 92       	push	r7
    580e:	8f 92       	push	r8
    5810:	9f 92       	push	r9
    5812:	af 92       	push	r10
    5814:	bf 92       	push	r11
    5816:	cf 92       	push	r12
    5818:	df 92       	push	r13
    581a:	ef 92       	push	r14
    581c:	ff 92       	push	r15
    581e:	0f 93       	push	r16
    5820:	1f 93       	push	r17
    5822:	cf 93       	push	r28
    5824:	df 93       	push	r29
    5826:	cd b7       	in	r28, 0x3d	; 61
    5828:	de b7       	in	r29, 0x3e	; 62
    582a:	2b 97       	sbiw	r28, 0x0b	; 11
    582c:	0f b6       	in	r0, 0x3f	; 63
    582e:	f8 94       	cli
    5830:	de bf       	out	0x3e, r29	; 62
    5832:	0f be       	out	0x3f, r0	; 63
    5834:	cd bf       	out	0x3d, r28	; 61
    5836:	6c 01       	movw	r12, r24
    5838:	7b 01       	movw	r14, r22
    583a:	8a 01       	movw	r16, r20
    583c:	fc 01       	movw	r30, r24
    583e:	17 82       	std	Z+7, r1	; 0x07
    5840:	16 82       	std	Z+6, r1	; 0x06
    5842:	83 81       	ldd	r24, Z+3	; 0x03
    5844:	81 ff       	sbrs	r24, 1
    5846:	bf c1       	rjmp	.+894    	; 0x5bc6 <vfprintf+0x3c4>
    5848:	ce 01       	movw	r24, r28
    584a:	01 96       	adiw	r24, 0x01	; 1
    584c:	3c 01       	movw	r6, r24
    584e:	f6 01       	movw	r30, r12
    5850:	93 81       	ldd	r25, Z+3	; 0x03
    5852:	f7 01       	movw	r30, r14
    5854:	93 fd       	sbrc	r25, 3
    5856:	85 91       	lpm	r24, Z+
    5858:	93 ff       	sbrs	r25, 3
    585a:	81 91       	ld	r24, Z+
    585c:	7f 01       	movw	r14, r30
    585e:	88 23       	and	r24, r24
    5860:	09 f4       	brne	.+2      	; 0x5864 <vfprintf+0x62>
    5862:	ad c1       	rjmp	.+858    	; 0x5bbe <vfprintf+0x3bc>
    5864:	85 32       	cpi	r24, 0x25	; 37
    5866:	39 f4       	brne	.+14     	; 0x5876 <vfprintf+0x74>
    5868:	93 fd       	sbrc	r25, 3
    586a:	85 91       	lpm	r24, Z+
    586c:	93 ff       	sbrs	r25, 3
    586e:	81 91       	ld	r24, Z+
    5870:	7f 01       	movw	r14, r30
    5872:	85 32       	cpi	r24, 0x25	; 37
    5874:	21 f4       	brne	.+8      	; 0x587e <vfprintf+0x7c>
    5876:	b6 01       	movw	r22, r12
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	d6 d1       	rcall	.+940    	; 0x5c28 <fputc>
    587c:	e8 cf       	rjmp	.-48     	; 0x584e <vfprintf+0x4c>
    587e:	91 2c       	mov	r9, r1
    5880:	21 2c       	mov	r2, r1
    5882:	31 2c       	mov	r3, r1
    5884:	ff e1       	ldi	r31, 0x1F	; 31
    5886:	f3 15       	cp	r31, r3
    5888:	d8 f0       	brcs	.+54     	; 0x58c0 <vfprintf+0xbe>
    588a:	8b 32       	cpi	r24, 0x2B	; 43
    588c:	79 f0       	breq	.+30     	; 0x58ac <vfprintf+0xaa>
    588e:	38 f4       	brcc	.+14     	; 0x589e <vfprintf+0x9c>
    5890:	80 32       	cpi	r24, 0x20	; 32
    5892:	79 f0       	breq	.+30     	; 0x58b2 <vfprintf+0xb0>
    5894:	83 32       	cpi	r24, 0x23	; 35
    5896:	a1 f4       	brne	.+40     	; 0x58c0 <vfprintf+0xbe>
    5898:	23 2d       	mov	r18, r3
    589a:	20 61       	ori	r18, 0x10	; 16
    589c:	1d c0       	rjmp	.+58     	; 0x58d8 <vfprintf+0xd6>
    589e:	8d 32       	cpi	r24, 0x2D	; 45
    58a0:	61 f0       	breq	.+24     	; 0x58ba <vfprintf+0xb8>
    58a2:	80 33       	cpi	r24, 0x30	; 48
    58a4:	69 f4       	brne	.+26     	; 0x58c0 <vfprintf+0xbe>
    58a6:	23 2d       	mov	r18, r3
    58a8:	21 60       	ori	r18, 0x01	; 1
    58aa:	16 c0       	rjmp	.+44     	; 0x58d8 <vfprintf+0xd6>
    58ac:	83 2d       	mov	r24, r3
    58ae:	82 60       	ori	r24, 0x02	; 2
    58b0:	38 2e       	mov	r3, r24
    58b2:	e3 2d       	mov	r30, r3
    58b4:	e4 60       	ori	r30, 0x04	; 4
    58b6:	3e 2e       	mov	r3, r30
    58b8:	2a c0       	rjmp	.+84     	; 0x590e <vfprintf+0x10c>
    58ba:	f3 2d       	mov	r31, r3
    58bc:	f8 60       	ori	r31, 0x08	; 8
    58be:	1d c0       	rjmp	.+58     	; 0x58fa <vfprintf+0xf8>
    58c0:	37 fc       	sbrc	r3, 7
    58c2:	2d c0       	rjmp	.+90     	; 0x591e <vfprintf+0x11c>
    58c4:	20 ed       	ldi	r18, 0xD0	; 208
    58c6:	28 0f       	add	r18, r24
    58c8:	2a 30       	cpi	r18, 0x0A	; 10
    58ca:	40 f0       	brcs	.+16     	; 0x58dc <vfprintf+0xda>
    58cc:	8e 32       	cpi	r24, 0x2E	; 46
    58ce:	b9 f4       	brne	.+46     	; 0x58fe <vfprintf+0xfc>
    58d0:	36 fc       	sbrc	r3, 6
    58d2:	75 c1       	rjmp	.+746    	; 0x5bbe <vfprintf+0x3bc>
    58d4:	23 2d       	mov	r18, r3
    58d6:	20 64       	ori	r18, 0x40	; 64
    58d8:	32 2e       	mov	r3, r18
    58da:	19 c0       	rjmp	.+50     	; 0x590e <vfprintf+0x10c>
    58dc:	36 fe       	sbrs	r3, 6
    58de:	06 c0       	rjmp	.+12     	; 0x58ec <vfprintf+0xea>
    58e0:	8a e0       	ldi	r24, 0x0A	; 10
    58e2:	98 9e       	mul	r9, r24
    58e4:	20 0d       	add	r18, r0
    58e6:	11 24       	eor	r1, r1
    58e8:	92 2e       	mov	r9, r18
    58ea:	11 c0       	rjmp	.+34     	; 0x590e <vfprintf+0x10c>
    58ec:	ea e0       	ldi	r30, 0x0A	; 10
    58ee:	2e 9e       	mul	r2, r30
    58f0:	20 0d       	add	r18, r0
    58f2:	11 24       	eor	r1, r1
    58f4:	22 2e       	mov	r2, r18
    58f6:	f3 2d       	mov	r31, r3
    58f8:	f0 62       	ori	r31, 0x20	; 32
    58fa:	3f 2e       	mov	r3, r31
    58fc:	08 c0       	rjmp	.+16     	; 0x590e <vfprintf+0x10c>
    58fe:	8c 36       	cpi	r24, 0x6C	; 108
    5900:	21 f4       	brne	.+8      	; 0x590a <vfprintf+0x108>
    5902:	83 2d       	mov	r24, r3
    5904:	80 68       	ori	r24, 0x80	; 128
    5906:	38 2e       	mov	r3, r24
    5908:	02 c0       	rjmp	.+4      	; 0x590e <vfprintf+0x10c>
    590a:	88 36       	cpi	r24, 0x68	; 104
    590c:	41 f4       	brne	.+16     	; 0x591e <vfprintf+0x11c>
    590e:	f7 01       	movw	r30, r14
    5910:	93 fd       	sbrc	r25, 3
    5912:	85 91       	lpm	r24, Z+
    5914:	93 ff       	sbrs	r25, 3
    5916:	81 91       	ld	r24, Z+
    5918:	7f 01       	movw	r14, r30
    591a:	81 11       	cpse	r24, r1
    591c:	b3 cf       	rjmp	.-154    	; 0x5884 <vfprintf+0x82>
    591e:	98 2f       	mov	r25, r24
    5920:	9f 7d       	andi	r25, 0xDF	; 223
    5922:	95 54       	subi	r25, 0x45	; 69
    5924:	93 30       	cpi	r25, 0x03	; 3
    5926:	28 f4       	brcc	.+10     	; 0x5932 <vfprintf+0x130>
    5928:	0c 5f       	subi	r16, 0xFC	; 252
    592a:	1f 4f       	sbci	r17, 0xFF	; 255
    592c:	9f e3       	ldi	r25, 0x3F	; 63
    592e:	99 83       	std	Y+1, r25	; 0x01
    5930:	0d c0       	rjmp	.+26     	; 0x594c <vfprintf+0x14a>
    5932:	83 36       	cpi	r24, 0x63	; 99
    5934:	31 f0       	breq	.+12     	; 0x5942 <vfprintf+0x140>
    5936:	83 37       	cpi	r24, 0x73	; 115
    5938:	71 f0       	breq	.+28     	; 0x5956 <vfprintf+0x154>
    593a:	83 35       	cpi	r24, 0x53	; 83
    593c:	09 f0       	breq	.+2      	; 0x5940 <vfprintf+0x13e>
    593e:	55 c0       	rjmp	.+170    	; 0x59ea <vfprintf+0x1e8>
    5940:	20 c0       	rjmp	.+64     	; 0x5982 <vfprintf+0x180>
    5942:	f8 01       	movw	r30, r16
    5944:	80 81       	ld	r24, Z
    5946:	89 83       	std	Y+1, r24	; 0x01
    5948:	0e 5f       	subi	r16, 0xFE	; 254
    594a:	1f 4f       	sbci	r17, 0xFF	; 255
    594c:	88 24       	eor	r8, r8
    594e:	83 94       	inc	r8
    5950:	91 2c       	mov	r9, r1
    5952:	53 01       	movw	r10, r6
    5954:	12 c0       	rjmp	.+36     	; 0x597a <vfprintf+0x178>
    5956:	28 01       	movw	r4, r16
    5958:	f2 e0       	ldi	r31, 0x02	; 2
    595a:	4f 0e       	add	r4, r31
    595c:	51 1c       	adc	r5, r1
    595e:	f8 01       	movw	r30, r16
    5960:	a0 80       	ld	r10, Z
    5962:	b1 80       	ldd	r11, Z+1	; 0x01
    5964:	36 fe       	sbrs	r3, 6
    5966:	03 c0       	rjmp	.+6      	; 0x596e <vfprintf+0x16c>
    5968:	69 2d       	mov	r22, r9
    596a:	70 e0       	ldi	r23, 0x00	; 0
    596c:	02 c0       	rjmp	.+4      	; 0x5972 <vfprintf+0x170>
    596e:	6f ef       	ldi	r22, 0xFF	; 255
    5970:	7f ef       	ldi	r23, 0xFF	; 255
    5972:	c5 01       	movw	r24, r10
    5974:	4e d1       	rcall	.+668    	; 0x5c12 <strnlen>
    5976:	4c 01       	movw	r8, r24
    5978:	82 01       	movw	r16, r4
    597a:	f3 2d       	mov	r31, r3
    597c:	ff 77       	andi	r31, 0x7F	; 127
    597e:	3f 2e       	mov	r3, r31
    5980:	15 c0       	rjmp	.+42     	; 0x59ac <vfprintf+0x1aa>
    5982:	28 01       	movw	r4, r16
    5984:	22 e0       	ldi	r18, 0x02	; 2
    5986:	42 0e       	add	r4, r18
    5988:	51 1c       	adc	r5, r1
    598a:	f8 01       	movw	r30, r16
    598c:	a0 80       	ld	r10, Z
    598e:	b1 80       	ldd	r11, Z+1	; 0x01
    5990:	36 fe       	sbrs	r3, 6
    5992:	03 c0       	rjmp	.+6      	; 0x599a <vfprintf+0x198>
    5994:	69 2d       	mov	r22, r9
    5996:	70 e0       	ldi	r23, 0x00	; 0
    5998:	02 c0       	rjmp	.+4      	; 0x599e <vfprintf+0x19c>
    599a:	6f ef       	ldi	r22, 0xFF	; 255
    599c:	7f ef       	ldi	r23, 0xFF	; 255
    599e:	c5 01       	movw	r24, r10
    59a0:	2d d1       	rcall	.+602    	; 0x5bfc <strnlen_P>
    59a2:	4c 01       	movw	r8, r24
    59a4:	f3 2d       	mov	r31, r3
    59a6:	f0 68       	ori	r31, 0x80	; 128
    59a8:	3f 2e       	mov	r3, r31
    59aa:	82 01       	movw	r16, r4
    59ac:	33 fc       	sbrc	r3, 3
    59ae:	19 c0       	rjmp	.+50     	; 0x59e2 <vfprintf+0x1e0>
    59b0:	82 2d       	mov	r24, r2
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	88 16       	cp	r8, r24
    59b6:	99 06       	cpc	r9, r25
    59b8:	a0 f4       	brcc	.+40     	; 0x59e2 <vfprintf+0x1e0>
    59ba:	b6 01       	movw	r22, r12
    59bc:	80 e2       	ldi	r24, 0x20	; 32
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	33 d1       	rcall	.+614    	; 0x5c28 <fputc>
    59c2:	2a 94       	dec	r2
    59c4:	f5 cf       	rjmp	.-22     	; 0x59b0 <vfprintf+0x1ae>
    59c6:	f5 01       	movw	r30, r10
    59c8:	37 fc       	sbrc	r3, 7
    59ca:	85 91       	lpm	r24, Z+
    59cc:	37 fe       	sbrs	r3, 7
    59ce:	81 91       	ld	r24, Z+
    59d0:	5f 01       	movw	r10, r30
    59d2:	b6 01       	movw	r22, r12
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	28 d1       	rcall	.+592    	; 0x5c28 <fputc>
    59d8:	21 10       	cpse	r2, r1
    59da:	2a 94       	dec	r2
    59dc:	21 e0       	ldi	r18, 0x01	; 1
    59de:	82 1a       	sub	r8, r18
    59e0:	91 08       	sbc	r9, r1
    59e2:	81 14       	cp	r8, r1
    59e4:	91 04       	cpc	r9, r1
    59e6:	79 f7       	brne	.-34     	; 0x59c6 <vfprintf+0x1c4>
    59e8:	e1 c0       	rjmp	.+450    	; 0x5bac <vfprintf+0x3aa>
    59ea:	84 36       	cpi	r24, 0x64	; 100
    59ec:	11 f0       	breq	.+4      	; 0x59f2 <vfprintf+0x1f0>
    59ee:	89 36       	cpi	r24, 0x69	; 105
    59f0:	39 f5       	brne	.+78     	; 0x5a40 <vfprintf+0x23e>
    59f2:	f8 01       	movw	r30, r16
    59f4:	37 fe       	sbrs	r3, 7
    59f6:	07 c0       	rjmp	.+14     	; 0x5a06 <vfprintf+0x204>
    59f8:	60 81       	ld	r22, Z
    59fa:	71 81       	ldd	r23, Z+1	; 0x01
    59fc:	82 81       	ldd	r24, Z+2	; 0x02
    59fe:	93 81       	ldd	r25, Z+3	; 0x03
    5a00:	0c 5f       	subi	r16, 0xFC	; 252
    5a02:	1f 4f       	sbci	r17, 0xFF	; 255
    5a04:	08 c0       	rjmp	.+16     	; 0x5a16 <vfprintf+0x214>
    5a06:	60 81       	ld	r22, Z
    5a08:	71 81       	ldd	r23, Z+1	; 0x01
    5a0a:	07 2e       	mov	r0, r23
    5a0c:	00 0c       	add	r0, r0
    5a0e:	88 0b       	sbc	r24, r24
    5a10:	99 0b       	sbc	r25, r25
    5a12:	0e 5f       	subi	r16, 0xFE	; 254
    5a14:	1f 4f       	sbci	r17, 0xFF	; 255
    5a16:	f3 2d       	mov	r31, r3
    5a18:	ff 76       	andi	r31, 0x6F	; 111
    5a1a:	3f 2e       	mov	r3, r31
    5a1c:	97 ff       	sbrs	r25, 7
    5a1e:	09 c0       	rjmp	.+18     	; 0x5a32 <vfprintf+0x230>
    5a20:	90 95       	com	r25
    5a22:	80 95       	com	r24
    5a24:	70 95       	com	r23
    5a26:	61 95       	neg	r22
    5a28:	7f 4f       	sbci	r23, 0xFF	; 255
    5a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a2e:	f0 68       	ori	r31, 0x80	; 128
    5a30:	3f 2e       	mov	r3, r31
    5a32:	2a e0       	ldi	r18, 0x0A	; 10
    5a34:	30 e0       	ldi	r19, 0x00	; 0
    5a36:	a3 01       	movw	r20, r6
    5a38:	33 d1       	rcall	.+614    	; 0x5ca0 <__ultoa_invert>
    5a3a:	88 2e       	mov	r8, r24
    5a3c:	86 18       	sub	r8, r6
    5a3e:	44 c0       	rjmp	.+136    	; 0x5ac8 <vfprintf+0x2c6>
    5a40:	85 37       	cpi	r24, 0x75	; 117
    5a42:	31 f4       	brne	.+12     	; 0x5a50 <vfprintf+0x24e>
    5a44:	23 2d       	mov	r18, r3
    5a46:	2f 7e       	andi	r18, 0xEF	; 239
    5a48:	b2 2e       	mov	r11, r18
    5a4a:	2a e0       	ldi	r18, 0x0A	; 10
    5a4c:	30 e0       	ldi	r19, 0x00	; 0
    5a4e:	25 c0       	rjmp	.+74     	; 0x5a9a <vfprintf+0x298>
    5a50:	93 2d       	mov	r25, r3
    5a52:	99 7f       	andi	r25, 0xF9	; 249
    5a54:	b9 2e       	mov	r11, r25
    5a56:	8f 36       	cpi	r24, 0x6F	; 111
    5a58:	c1 f0       	breq	.+48     	; 0x5a8a <vfprintf+0x288>
    5a5a:	18 f4       	brcc	.+6      	; 0x5a62 <vfprintf+0x260>
    5a5c:	88 35       	cpi	r24, 0x58	; 88
    5a5e:	79 f0       	breq	.+30     	; 0x5a7e <vfprintf+0x27c>
    5a60:	ae c0       	rjmp	.+348    	; 0x5bbe <vfprintf+0x3bc>
    5a62:	80 37       	cpi	r24, 0x70	; 112
    5a64:	19 f0       	breq	.+6      	; 0x5a6c <vfprintf+0x26a>
    5a66:	88 37       	cpi	r24, 0x78	; 120
    5a68:	21 f0       	breq	.+8      	; 0x5a72 <vfprintf+0x270>
    5a6a:	a9 c0       	rjmp	.+338    	; 0x5bbe <vfprintf+0x3bc>
    5a6c:	e9 2f       	mov	r30, r25
    5a6e:	e0 61       	ori	r30, 0x10	; 16
    5a70:	be 2e       	mov	r11, r30
    5a72:	b4 fe       	sbrs	r11, 4
    5a74:	0d c0       	rjmp	.+26     	; 0x5a90 <vfprintf+0x28e>
    5a76:	fb 2d       	mov	r31, r11
    5a78:	f4 60       	ori	r31, 0x04	; 4
    5a7a:	bf 2e       	mov	r11, r31
    5a7c:	09 c0       	rjmp	.+18     	; 0x5a90 <vfprintf+0x28e>
    5a7e:	34 fe       	sbrs	r3, 4
    5a80:	0a c0       	rjmp	.+20     	; 0x5a96 <vfprintf+0x294>
    5a82:	29 2f       	mov	r18, r25
    5a84:	26 60       	ori	r18, 0x06	; 6
    5a86:	b2 2e       	mov	r11, r18
    5a88:	06 c0       	rjmp	.+12     	; 0x5a96 <vfprintf+0x294>
    5a8a:	28 e0       	ldi	r18, 0x08	; 8
    5a8c:	30 e0       	ldi	r19, 0x00	; 0
    5a8e:	05 c0       	rjmp	.+10     	; 0x5a9a <vfprintf+0x298>
    5a90:	20 e1       	ldi	r18, 0x10	; 16
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	02 c0       	rjmp	.+4      	; 0x5a9a <vfprintf+0x298>
    5a96:	20 e1       	ldi	r18, 0x10	; 16
    5a98:	32 e0       	ldi	r19, 0x02	; 2
    5a9a:	f8 01       	movw	r30, r16
    5a9c:	b7 fe       	sbrs	r11, 7
    5a9e:	07 c0       	rjmp	.+14     	; 0x5aae <vfprintf+0x2ac>
    5aa0:	60 81       	ld	r22, Z
    5aa2:	71 81       	ldd	r23, Z+1	; 0x01
    5aa4:	82 81       	ldd	r24, Z+2	; 0x02
    5aa6:	93 81       	ldd	r25, Z+3	; 0x03
    5aa8:	0c 5f       	subi	r16, 0xFC	; 252
    5aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    5aac:	06 c0       	rjmp	.+12     	; 0x5aba <vfprintf+0x2b8>
    5aae:	60 81       	ld	r22, Z
    5ab0:	71 81       	ldd	r23, Z+1	; 0x01
    5ab2:	80 e0       	ldi	r24, 0x00	; 0
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	0e 5f       	subi	r16, 0xFE	; 254
    5ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    5aba:	a3 01       	movw	r20, r6
    5abc:	f1 d0       	rcall	.+482    	; 0x5ca0 <__ultoa_invert>
    5abe:	88 2e       	mov	r8, r24
    5ac0:	86 18       	sub	r8, r6
    5ac2:	fb 2d       	mov	r31, r11
    5ac4:	ff 77       	andi	r31, 0x7F	; 127
    5ac6:	3f 2e       	mov	r3, r31
    5ac8:	36 fe       	sbrs	r3, 6
    5aca:	0d c0       	rjmp	.+26     	; 0x5ae6 <vfprintf+0x2e4>
    5acc:	23 2d       	mov	r18, r3
    5ace:	2e 7f       	andi	r18, 0xFE	; 254
    5ad0:	a2 2e       	mov	r10, r18
    5ad2:	89 14       	cp	r8, r9
    5ad4:	58 f4       	brcc	.+22     	; 0x5aec <vfprintf+0x2ea>
    5ad6:	34 fe       	sbrs	r3, 4
    5ad8:	0b c0       	rjmp	.+22     	; 0x5af0 <vfprintf+0x2ee>
    5ada:	32 fc       	sbrc	r3, 2
    5adc:	09 c0       	rjmp	.+18     	; 0x5af0 <vfprintf+0x2ee>
    5ade:	83 2d       	mov	r24, r3
    5ae0:	8e 7e       	andi	r24, 0xEE	; 238
    5ae2:	a8 2e       	mov	r10, r24
    5ae4:	05 c0       	rjmp	.+10     	; 0x5af0 <vfprintf+0x2ee>
    5ae6:	b8 2c       	mov	r11, r8
    5ae8:	a3 2c       	mov	r10, r3
    5aea:	03 c0       	rjmp	.+6      	; 0x5af2 <vfprintf+0x2f0>
    5aec:	b8 2c       	mov	r11, r8
    5aee:	01 c0       	rjmp	.+2      	; 0x5af2 <vfprintf+0x2f0>
    5af0:	b9 2c       	mov	r11, r9
    5af2:	a4 fe       	sbrs	r10, 4
    5af4:	0f c0       	rjmp	.+30     	; 0x5b14 <vfprintf+0x312>
    5af6:	fe 01       	movw	r30, r28
    5af8:	e8 0d       	add	r30, r8
    5afa:	f1 1d       	adc	r31, r1
    5afc:	80 81       	ld	r24, Z
    5afe:	80 33       	cpi	r24, 0x30	; 48
    5b00:	21 f4       	brne	.+8      	; 0x5b0a <vfprintf+0x308>
    5b02:	9a 2d       	mov	r25, r10
    5b04:	99 7e       	andi	r25, 0xE9	; 233
    5b06:	a9 2e       	mov	r10, r25
    5b08:	09 c0       	rjmp	.+18     	; 0x5b1c <vfprintf+0x31a>
    5b0a:	a2 fe       	sbrs	r10, 2
    5b0c:	06 c0       	rjmp	.+12     	; 0x5b1a <vfprintf+0x318>
    5b0e:	b3 94       	inc	r11
    5b10:	b3 94       	inc	r11
    5b12:	04 c0       	rjmp	.+8      	; 0x5b1c <vfprintf+0x31a>
    5b14:	8a 2d       	mov	r24, r10
    5b16:	86 78       	andi	r24, 0x86	; 134
    5b18:	09 f0       	breq	.+2      	; 0x5b1c <vfprintf+0x31a>
    5b1a:	b3 94       	inc	r11
    5b1c:	a3 fc       	sbrc	r10, 3
    5b1e:	10 c0       	rjmp	.+32     	; 0x5b40 <vfprintf+0x33e>
    5b20:	a0 fe       	sbrs	r10, 0
    5b22:	06 c0       	rjmp	.+12     	; 0x5b30 <vfprintf+0x32e>
    5b24:	b2 14       	cp	r11, r2
    5b26:	80 f4       	brcc	.+32     	; 0x5b48 <vfprintf+0x346>
    5b28:	28 0c       	add	r2, r8
    5b2a:	92 2c       	mov	r9, r2
    5b2c:	9b 18       	sub	r9, r11
    5b2e:	0d c0       	rjmp	.+26     	; 0x5b4a <vfprintf+0x348>
    5b30:	b2 14       	cp	r11, r2
    5b32:	58 f4       	brcc	.+22     	; 0x5b4a <vfprintf+0x348>
    5b34:	b6 01       	movw	r22, r12
    5b36:	80 e2       	ldi	r24, 0x20	; 32
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	76 d0       	rcall	.+236    	; 0x5c28 <fputc>
    5b3c:	b3 94       	inc	r11
    5b3e:	f8 cf       	rjmp	.-16     	; 0x5b30 <vfprintf+0x32e>
    5b40:	b2 14       	cp	r11, r2
    5b42:	18 f4       	brcc	.+6      	; 0x5b4a <vfprintf+0x348>
    5b44:	2b 18       	sub	r2, r11
    5b46:	02 c0       	rjmp	.+4      	; 0x5b4c <vfprintf+0x34a>
    5b48:	98 2c       	mov	r9, r8
    5b4a:	21 2c       	mov	r2, r1
    5b4c:	a4 fe       	sbrs	r10, 4
    5b4e:	0f c0       	rjmp	.+30     	; 0x5b6e <vfprintf+0x36c>
    5b50:	b6 01       	movw	r22, r12
    5b52:	80 e3       	ldi	r24, 0x30	; 48
    5b54:	90 e0       	ldi	r25, 0x00	; 0
    5b56:	68 d0       	rcall	.+208    	; 0x5c28 <fputc>
    5b58:	a2 fe       	sbrs	r10, 2
    5b5a:	16 c0       	rjmp	.+44     	; 0x5b88 <vfprintf+0x386>
    5b5c:	a1 fc       	sbrc	r10, 1
    5b5e:	03 c0       	rjmp	.+6      	; 0x5b66 <vfprintf+0x364>
    5b60:	88 e7       	ldi	r24, 0x78	; 120
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	02 c0       	rjmp	.+4      	; 0x5b6a <vfprintf+0x368>
    5b66:	88 e5       	ldi	r24, 0x58	; 88
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	b6 01       	movw	r22, r12
    5b6c:	0c c0       	rjmp	.+24     	; 0x5b86 <vfprintf+0x384>
    5b6e:	8a 2d       	mov	r24, r10
    5b70:	86 78       	andi	r24, 0x86	; 134
    5b72:	51 f0       	breq	.+20     	; 0x5b88 <vfprintf+0x386>
    5b74:	a1 fe       	sbrs	r10, 1
    5b76:	02 c0       	rjmp	.+4      	; 0x5b7c <vfprintf+0x37a>
    5b78:	8b e2       	ldi	r24, 0x2B	; 43
    5b7a:	01 c0       	rjmp	.+2      	; 0x5b7e <vfprintf+0x37c>
    5b7c:	80 e2       	ldi	r24, 0x20	; 32
    5b7e:	a7 fc       	sbrc	r10, 7
    5b80:	8d e2       	ldi	r24, 0x2D	; 45
    5b82:	b6 01       	movw	r22, r12
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	50 d0       	rcall	.+160    	; 0x5c28 <fputc>
    5b88:	89 14       	cp	r8, r9
    5b8a:	30 f4       	brcc	.+12     	; 0x5b98 <vfprintf+0x396>
    5b8c:	b6 01       	movw	r22, r12
    5b8e:	80 e3       	ldi	r24, 0x30	; 48
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	4a d0       	rcall	.+148    	; 0x5c28 <fputc>
    5b94:	9a 94       	dec	r9
    5b96:	f8 cf       	rjmp	.-16     	; 0x5b88 <vfprintf+0x386>
    5b98:	8a 94       	dec	r8
    5b9a:	f3 01       	movw	r30, r6
    5b9c:	e8 0d       	add	r30, r8
    5b9e:	f1 1d       	adc	r31, r1
    5ba0:	80 81       	ld	r24, Z
    5ba2:	b6 01       	movw	r22, r12
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	40 d0       	rcall	.+128    	; 0x5c28 <fputc>
    5ba8:	81 10       	cpse	r8, r1
    5baa:	f6 cf       	rjmp	.-20     	; 0x5b98 <vfprintf+0x396>
    5bac:	22 20       	and	r2, r2
    5bae:	09 f4       	brne	.+2      	; 0x5bb2 <vfprintf+0x3b0>
    5bb0:	4e ce       	rjmp	.-868    	; 0x584e <vfprintf+0x4c>
    5bb2:	b6 01       	movw	r22, r12
    5bb4:	80 e2       	ldi	r24, 0x20	; 32
    5bb6:	90 e0       	ldi	r25, 0x00	; 0
    5bb8:	37 d0       	rcall	.+110    	; 0x5c28 <fputc>
    5bba:	2a 94       	dec	r2
    5bbc:	f7 cf       	rjmp	.-18     	; 0x5bac <vfprintf+0x3aa>
    5bbe:	f6 01       	movw	r30, r12
    5bc0:	86 81       	ldd	r24, Z+6	; 0x06
    5bc2:	97 81       	ldd	r25, Z+7	; 0x07
    5bc4:	02 c0       	rjmp	.+4      	; 0x5bca <vfprintf+0x3c8>
    5bc6:	8f ef       	ldi	r24, 0xFF	; 255
    5bc8:	9f ef       	ldi	r25, 0xFF	; 255
    5bca:	2b 96       	adiw	r28, 0x0b	; 11
    5bcc:	0f b6       	in	r0, 0x3f	; 63
    5bce:	f8 94       	cli
    5bd0:	de bf       	out	0x3e, r29	; 62
    5bd2:	0f be       	out	0x3f, r0	; 63
    5bd4:	cd bf       	out	0x3d, r28	; 61
    5bd6:	df 91       	pop	r29
    5bd8:	cf 91       	pop	r28
    5bda:	1f 91       	pop	r17
    5bdc:	0f 91       	pop	r16
    5bde:	ff 90       	pop	r15
    5be0:	ef 90       	pop	r14
    5be2:	df 90       	pop	r13
    5be4:	cf 90       	pop	r12
    5be6:	bf 90       	pop	r11
    5be8:	af 90       	pop	r10
    5bea:	9f 90       	pop	r9
    5bec:	8f 90       	pop	r8
    5bee:	7f 90       	pop	r7
    5bf0:	6f 90       	pop	r6
    5bf2:	5f 90       	pop	r5
    5bf4:	4f 90       	pop	r4
    5bf6:	3f 90       	pop	r3
    5bf8:	2f 90       	pop	r2
    5bfa:	08 95       	ret

00005bfc <strnlen_P>:
    5bfc:	fc 01       	movw	r30, r24
    5bfe:	05 90       	lpm	r0, Z+
    5c00:	61 50       	subi	r22, 0x01	; 1
    5c02:	70 40       	sbci	r23, 0x00	; 0
    5c04:	01 10       	cpse	r0, r1
    5c06:	d8 f7       	brcc	.-10     	; 0x5bfe <strnlen_P+0x2>
    5c08:	80 95       	com	r24
    5c0a:	90 95       	com	r25
    5c0c:	8e 0f       	add	r24, r30
    5c0e:	9f 1f       	adc	r25, r31
    5c10:	08 95       	ret

00005c12 <strnlen>:
    5c12:	fc 01       	movw	r30, r24
    5c14:	61 50       	subi	r22, 0x01	; 1
    5c16:	70 40       	sbci	r23, 0x00	; 0
    5c18:	01 90       	ld	r0, Z+
    5c1a:	01 10       	cpse	r0, r1
    5c1c:	d8 f7       	brcc	.-10     	; 0x5c14 <strnlen+0x2>
    5c1e:	80 95       	com	r24
    5c20:	90 95       	com	r25
    5c22:	8e 0f       	add	r24, r30
    5c24:	9f 1f       	adc	r25, r31
    5c26:	08 95       	ret

00005c28 <fputc>:
    5c28:	0f 93       	push	r16
    5c2a:	1f 93       	push	r17
    5c2c:	cf 93       	push	r28
    5c2e:	df 93       	push	r29
    5c30:	fb 01       	movw	r30, r22
    5c32:	23 81       	ldd	r18, Z+3	; 0x03
    5c34:	21 fd       	sbrc	r18, 1
    5c36:	03 c0       	rjmp	.+6      	; 0x5c3e <fputc+0x16>
    5c38:	8f ef       	ldi	r24, 0xFF	; 255
    5c3a:	9f ef       	ldi	r25, 0xFF	; 255
    5c3c:	2c c0       	rjmp	.+88     	; 0x5c96 <fputc+0x6e>
    5c3e:	22 ff       	sbrs	r18, 2
    5c40:	16 c0       	rjmp	.+44     	; 0x5c6e <fputc+0x46>
    5c42:	46 81       	ldd	r20, Z+6	; 0x06
    5c44:	57 81       	ldd	r21, Z+7	; 0x07
    5c46:	24 81       	ldd	r18, Z+4	; 0x04
    5c48:	35 81       	ldd	r19, Z+5	; 0x05
    5c4a:	42 17       	cp	r20, r18
    5c4c:	53 07       	cpc	r21, r19
    5c4e:	44 f4       	brge	.+16     	; 0x5c60 <fputc+0x38>
    5c50:	a0 81       	ld	r26, Z
    5c52:	b1 81       	ldd	r27, Z+1	; 0x01
    5c54:	9d 01       	movw	r18, r26
    5c56:	2f 5f       	subi	r18, 0xFF	; 255
    5c58:	3f 4f       	sbci	r19, 0xFF	; 255
    5c5a:	31 83       	std	Z+1, r19	; 0x01
    5c5c:	20 83       	st	Z, r18
    5c5e:	8c 93       	st	X, r24
    5c60:	26 81       	ldd	r18, Z+6	; 0x06
    5c62:	37 81       	ldd	r19, Z+7	; 0x07
    5c64:	2f 5f       	subi	r18, 0xFF	; 255
    5c66:	3f 4f       	sbci	r19, 0xFF	; 255
    5c68:	37 83       	std	Z+7, r19	; 0x07
    5c6a:	26 83       	std	Z+6, r18	; 0x06
    5c6c:	14 c0       	rjmp	.+40     	; 0x5c96 <fputc+0x6e>
    5c6e:	8b 01       	movw	r16, r22
    5c70:	ec 01       	movw	r28, r24
    5c72:	fb 01       	movw	r30, r22
    5c74:	00 84       	ldd	r0, Z+8	; 0x08
    5c76:	f1 85       	ldd	r31, Z+9	; 0x09
    5c78:	e0 2d       	mov	r30, r0
    5c7a:	19 95       	eicall
    5c7c:	89 2b       	or	r24, r25
    5c7e:	e1 f6       	brne	.-72     	; 0x5c38 <fputc+0x10>
    5c80:	d8 01       	movw	r26, r16
    5c82:	16 96       	adiw	r26, 0x06	; 6
    5c84:	8d 91       	ld	r24, X+
    5c86:	9c 91       	ld	r25, X
    5c88:	17 97       	sbiw	r26, 0x07	; 7
    5c8a:	01 96       	adiw	r24, 0x01	; 1
    5c8c:	17 96       	adiw	r26, 0x07	; 7
    5c8e:	9c 93       	st	X, r25
    5c90:	8e 93       	st	-X, r24
    5c92:	16 97       	sbiw	r26, 0x06	; 6
    5c94:	ce 01       	movw	r24, r28
    5c96:	df 91       	pop	r29
    5c98:	cf 91       	pop	r28
    5c9a:	1f 91       	pop	r17
    5c9c:	0f 91       	pop	r16
    5c9e:	08 95       	ret

00005ca0 <__ultoa_invert>:
    5ca0:	fa 01       	movw	r30, r20
    5ca2:	aa 27       	eor	r26, r26
    5ca4:	28 30       	cpi	r18, 0x08	; 8
    5ca6:	51 f1       	breq	.+84     	; 0x5cfc <__ultoa_invert+0x5c>
    5ca8:	20 31       	cpi	r18, 0x10	; 16
    5caa:	81 f1       	breq	.+96     	; 0x5d0c <__ultoa_invert+0x6c>
    5cac:	e8 94       	clt
    5cae:	6f 93       	push	r22
    5cb0:	6e 7f       	andi	r22, 0xFE	; 254
    5cb2:	6e 5f       	subi	r22, 0xFE	; 254
    5cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    5cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cba:	af 4f       	sbci	r26, 0xFF	; 255
    5cbc:	b1 e0       	ldi	r27, 0x01	; 1
    5cbe:	3e d0       	rcall	.+124    	; 0x5d3c <__ultoa_invert+0x9c>
    5cc0:	b4 e0       	ldi	r27, 0x04	; 4
    5cc2:	3c d0       	rcall	.+120    	; 0x5d3c <__ultoa_invert+0x9c>
    5cc4:	67 0f       	add	r22, r23
    5cc6:	78 1f       	adc	r23, r24
    5cc8:	89 1f       	adc	r24, r25
    5cca:	9a 1f       	adc	r25, r26
    5ccc:	a1 1d       	adc	r26, r1
    5cce:	68 0f       	add	r22, r24
    5cd0:	79 1f       	adc	r23, r25
    5cd2:	8a 1f       	adc	r24, r26
    5cd4:	91 1d       	adc	r25, r1
    5cd6:	a1 1d       	adc	r26, r1
    5cd8:	6a 0f       	add	r22, r26
    5cda:	71 1d       	adc	r23, r1
    5cdc:	81 1d       	adc	r24, r1
    5cde:	91 1d       	adc	r25, r1
    5ce0:	a1 1d       	adc	r26, r1
    5ce2:	20 d0       	rcall	.+64     	; 0x5d24 <__ultoa_invert+0x84>
    5ce4:	09 f4       	brne	.+2      	; 0x5ce8 <__ultoa_invert+0x48>
    5ce6:	68 94       	set
    5ce8:	3f 91       	pop	r19
    5cea:	2a e0       	ldi	r18, 0x0A	; 10
    5cec:	26 9f       	mul	r18, r22
    5cee:	11 24       	eor	r1, r1
    5cf0:	30 19       	sub	r19, r0
    5cf2:	30 5d       	subi	r19, 0xD0	; 208
    5cf4:	31 93       	st	Z+, r19
    5cf6:	de f6       	brtc	.-74     	; 0x5cae <__ultoa_invert+0xe>
    5cf8:	cf 01       	movw	r24, r30
    5cfa:	08 95       	ret
    5cfc:	46 2f       	mov	r20, r22
    5cfe:	47 70       	andi	r20, 0x07	; 7
    5d00:	40 5d       	subi	r20, 0xD0	; 208
    5d02:	41 93       	st	Z+, r20
    5d04:	b3 e0       	ldi	r27, 0x03	; 3
    5d06:	0f d0       	rcall	.+30     	; 0x5d26 <__ultoa_invert+0x86>
    5d08:	c9 f7       	brne	.-14     	; 0x5cfc <__ultoa_invert+0x5c>
    5d0a:	f6 cf       	rjmp	.-20     	; 0x5cf8 <__ultoa_invert+0x58>
    5d0c:	46 2f       	mov	r20, r22
    5d0e:	4f 70       	andi	r20, 0x0F	; 15
    5d10:	40 5d       	subi	r20, 0xD0	; 208
    5d12:	4a 33       	cpi	r20, 0x3A	; 58
    5d14:	18 f0       	brcs	.+6      	; 0x5d1c <__ultoa_invert+0x7c>
    5d16:	49 5d       	subi	r20, 0xD9	; 217
    5d18:	31 fd       	sbrc	r19, 1
    5d1a:	40 52       	subi	r20, 0x20	; 32
    5d1c:	41 93       	st	Z+, r20
    5d1e:	02 d0       	rcall	.+4      	; 0x5d24 <__ultoa_invert+0x84>
    5d20:	a9 f7       	brne	.-22     	; 0x5d0c <__ultoa_invert+0x6c>
    5d22:	ea cf       	rjmp	.-44     	; 0x5cf8 <__ultoa_invert+0x58>
    5d24:	b4 e0       	ldi	r27, 0x04	; 4
    5d26:	a6 95       	lsr	r26
    5d28:	97 95       	ror	r25
    5d2a:	87 95       	ror	r24
    5d2c:	77 95       	ror	r23
    5d2e:	67 95       	ror	r22
    5d30:	ba 95       	dec	r27
    5d32:	c9 f7       	brne	.-14     	; 0x5d26 <__ultoa_invert+0x86>
    5d34:	00 97       	sbiw	r24, 0x00	; 0
    5d36:	61 05       	cpc	r22, r1
    5d38:	71 05       	cpc	r23, r1
    5d3a:	08 95       	ret
    5d3c:	9b 01       	movw	r18, r22
    5d3e:	ac 01       	movw	r20, r24
    5d40:	0a 2e       	mov	r0, r26
    5d42:	06 94       	lsr	r0
    5d44:	57 95       	ror	r21
    5d46:	47 95       	ror	r20
    5d48:	37 95       	ror	r19
    5d4a:	27 95       	ror	r18
    5d4c:	ba 95       	dec	r27
    5d4e:	c9 f7       	brne	.-14     	; 0x5d42 <__ultoa_invert+0xa2>
    5d50:	62 0f       	add	r22, r18
    5d52:	73 1f       	adc	r23, r19
    5d54:	84 1f       	adc	r24, r20
    5d56:	95 1f       	adc	r25, r21
    5d58:	a0 1d       	adc	r26, r0
    5d5a:	08 95       	ret

00005d5c <_exit>:
    5d5c:	f8 94       	cli

00005d5e <__stop_program>:
    5d5e:	ff cf       	rjmp	.-2      	; 0x5d5e <__stop_program>
