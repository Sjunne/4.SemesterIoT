
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000540  00800200  00005650  000056e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c91  00800740  00800740  00005c24  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005c24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005c80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009a8  00000000  00000000  00005cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c331  00000000  00000000  00006668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000301e  00000000  00000000  00012999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005f81  00000000  00000000  000159b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002348  00000000  00000000  0001b938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039cd  00000000  00000000  0001dc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b1b5  00000000  00000000  0002164d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000910  00000000  00000000  0002c802  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	9c c3       	rjmp	.+1848   	; 0x76a <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 09 20 	jmp	0x4012	; 0x4012 <__vector_25>
      68:	0c 94 5b 20 	jmp	0x40b6	; 0x40b6 <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__vector_36>
      94:	0c 94 f1 20 	jmp	0x41e2	; 0x41e2 <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 35 21 	jmp	0x426a	; 0x426a <__vector_51>
      d0:	0c 94 87 21 	jmp	0x430e	; 0x430e <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <__vector_54>
      dc:	0c 94 1d 22 	jmp	0x443a	; 0x443a <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 16       	cp	r9, r21
      e6:	95 16       	cp	r9, r21
      e8:	95 16       	cp	r9, r21
      ea:	cc 16       	cp	r12, r28
      ec:	d4 16       	cp	r13, r20
      ee:	e9 16       	cp	r14, r25
      f0:	95 16       	cp	r9, r21
      f2:	95 16       	cp	r9, r21
      f4:	cc 16       	cp	r12, r28
      f6:	d4 16       	cp	r13, r20

000000f8 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      f8:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <prvCheckTasksWaitingTermination>
      fc:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	6c d2       	rcall	.+1240   	; 0x5de <vPortYield>
     106:	0e 94 12 17 	call	0x2e24	; 0x2e24 <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 12 14 	call	0x2824	; 0x2824 <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <prvProcessTimerOrBlockTask>
     124:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	17 e0       	ldi	r17, 0x07	; 7
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e0 e5       	ldi	r30, 0x50	; 80
     142:	f6 e5       	ldi	r31, 0x56	; 86
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a0 34       	cpi	r26, 0x40	; 64
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e1       	ldi	r18, 0x13	; 19
     156:	a0 e4       	ldi	r26, 0x40	; 64
     158:	b7 e0       	ldi	r27, 0x07	; 7
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a1 3d       	cpi	r26, 0xD1	; 209
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 a7 19 	call	0x334e	; 0x334e <main>
     168:	0c 94 26 2b 	jmp	0x564c	; 0x564c <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <co2MeasureCallBack>:


void co2MeasureCallBack(uint16_t ppm)
{
	// Here we enqueue
	enqueueCO2Measure(ppm);
     16e:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <enqueueCO2Measure>
     172:	08 95       	ret

00000174 <co2Measure>:

void co2Measure() {

	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
     174:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
     178:	81 11       	cpse	r24, r1
     17a:	05 c0       	rjmp	.+10     	; 0x186 <co2Measure+0x12>
	{
		mh_z19_injectCallBack(co2MeasureCallBack);
     17c:	87 eb       	ldi	r24, 0xB7	; 183
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <mh_z19_injectCallBack>
     184:	08 95       	ret
	}
	else
	{
		puts("det gik galt");
     186:	8a e6       	ldi	r24, 0x6A	; 106
     188:	92 e0       	ldi	r25, 0x02	; 2
     18a:	0c 94 1b 28 	jmp	0x5036	; 0x5036 <puts>
     18e:	08 95       	ret

00000190 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     190:	ec e4       	ldi	r30, 0x4C	; 76
     192:	f7 e0       	ldi	r31, 0x07	; 7
     194:	a0 e5       	ldi	r26, 0x50	; 80
     196:	b7 e0       	ldi	r27, 0x07	; 7
     198:	b1 83       	std	Z+1, r27	; 0x01
     19a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     19c:	13 82       	std	Z+3, r1	; 0x03
     19e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     1a0:	e0 e1       	ldi	r30, 0x10	; 16
     1a2:	f1 e1       	ldi	r31, 0x11	; 17
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     1a4:	f0 93 4b 07 	sts	0x074B, r31	; 0x80074b <pxEnd+0x1>
     1a8:	e0 93 4a 07 	sts	0x074A, r30	; 0x80074a <pxEnd>
    pxEnd->xBlockSize = 0;
     1ac:	13 82       	std	Z+3, r1	; 0x03
     1ae:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     1b0:	11 82       	std	Z+1, r1	; 0x01
     1b2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     1b4:	80 ec       	ldi	r24, 0xC0	; 192
     1b6:	99 e0       	ldi	r25, 0x09	; 9
     1b8:	13 96       	adiw	r26, 0x03	; 3
     1ba:	9c 93       	st	X, r25
     1bc:	8e 93       	st	-X, r24
     1be:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     1c0:	ed 93       	st	X+, r30
     1c2:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1c4:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <xMinimumEverFreeBytesRemaining+0x1>
     1c8:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1cc:	90 93 49 07 	sts	0x0749, r25	; 0x800749 <xFreeBytesRemaining+0x1>
     1d0:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e8       	ldi	r25, 0x80	; 128
     1d8:	90 93 41 07 	sts	0x0741, r25	; 0x800741 <__data_end+0x1>
     1dc:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <__data_end>
     1e0:	08 95       	ret

000001e2 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     1e8:	ac e4       	ldi	r26, 0x4C	; 76
     1ea:	b7 e0       	ldi	r27, 0x07	; 7
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <prvInsertBlockIntoFreeList+0xe>
     1ee:	df 01       	movw	r26, r30
     1f0:	ed 91       	ld	r30, X+
     1f2:	fc 91       	ld	r31, X
     1f4:	11 97       	sbiw	r26, 0x01	; 1
     1f6:	ec 17       	cp	r30, r28
     1f8:	fd 07       	cpc	r31, r29
     1fa:	c8 f3       	brcs	.-14     	; 0x1ee <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     1fc:	12 96       	adiw	r26, 0x02	; 2
     1fe:	8d 91       	ld	r24, X+
     200:	9c 91       	ld	r25, X
     202:	13 97       	sbiw	r26, 0x03	; 3
     204:	9d 01       	movw	r18, r26
     206:	28 0f       	add	r18, r24
     208:	39 1f       	adc	r19, r25
     20a:	c2 17       	cp	r28, r18
     20c:	d3 07       	cpc	r29, r19
     20e:	49 f4       	brne	.+18     	; 0x222 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     210:	2a 81       	ldd	r18, Y+2	; 0x02
     212:	3b 81       	ldd	r19, Y+3	; 0x03
     214:	82 0f       	add	r24, r18
     216:	93 1f       	adc	r25, r19
     218:	13 96       	adiw	r26, 0x03	; 3
     21a:	9c 93       	st	X, r25
     21c:	8e 93       	st	-X, r24
     21e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     220:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     222:	8a 81       	ldd	r24, Y+2	; 0x02
     224:	9b 81       	ldd	r25, Y+3	; 0x03
     226:	9e 01       	movw	r18, r28
     228:	28 0f       	add	r18, r24
     22a:	39 1f       	adc	r19, r25
     22c:	e2 17       	cp	r30, r18
     22e:	f3 07       	cpc	r31, r19
     230:	c1 f4       	brne	.+48     	; 0x262 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     232:	20 91 4a 07 	lds	r18, 0x074A	; 0x80074a <pxEnd>
     236:	30 91 4b 07 	lds	r19, 0x074B	; 0x80074b <pxEnd+0x1>
     23a:	e2 17       	cp	r30, r18
     23c:	f3 07       	cpc	r31, r19
     23e:	71 f0       	breq	.+28     	; 0x25c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     240:	22 81       	ldd	r18, Z+2	; 0x02
     242:	33 81       	ldd	r19, Z+3	; 0x03
     244:	82 0f       	add	r24, r18
     246:	93 1f       	adc	r25, r19
     248:	9b 83       	std	Y+3, r25	; 0x03
     24a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     24c:	ed 91       	ld	r30, X+
     24e:	fc 91       	ld	r31, X
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	99 83       	std	Y+1, r25	; 0x01
     258:	88 83       	st	Y, r24
     25a:	05 c0       	rjmp	.+10     	; 0x266 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     25c:	39 83       	std	Y+1, r19	; 0x01
     25e:	28 83       	st	Y, r18
     260:	02 c0       	rjmp	.+4      	; 0x266 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     262:	f9 83       	std	Y+1, r31	; 0x01
     264:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     266:	ca 17       	cp	r28, r26
     268:	db 07       	cpc	r29, r27
     26a:	11 f0       	breq	.+4      	; 0x270 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     26c:	cd 93       	st	X+, r28
     26e:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     284:	0e 94 30 0c 	call	0x1860	; 0x1860 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     288:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <pxEnd>
     28c:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <pxEnd+0x1>
     290:	89 2b       	or	r24, r25
     292:	09 f4       	brne	.+2      	; 0x296 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     294:	7d df       	rcall	.-262    	; 0x190 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     296:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <__data_end>
     29a:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <__data_end+0x1>
     29e:	80 23       	and	r24, r16
     2a0:	91 23       	and	r25, r17
     2a2:	89 2b       	or	r24, r25
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <pvPortMalloc+0x32>
     2a6:	76 c0       	rjmp	.+236    	; 0x394 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2a8:	01 15       	cp	r16, r1
     2aa:	11 05       	cpc	r17, r1
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     2ae:	c8 01       	movw	r24, r16
     2b0:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2b2:	08 17       	cp	r16, r24
     2b4:	19 07       	cpc	r17, r25
     2b6:	18 f0       	brcs	.+6      	; 0x2be <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     2b8:	00 e0       	ldi	r16, 0x00	; 0
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     2be:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     2c0:	01 15       	cp	r16, r1
     2c2:	11 05       	cpc	r17, r1
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <pvPortMalloc+0x52>
     2c6:	69 c0       	rjmp	.+210    	; 0x39a <pvPortMalloc+0x124>
     2c8:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <xFreeBytesRemaining>
     2cc:	90 91 49 07 	lds	r25, 0x0749	; 0x800749 <xFreeBytesRemaining+0x1>
     2d0:	80 17       	cp	r24, r16
     2d2:	91 07       	cpc	r25, r17
     2d4:	08 f4       	brcc	.+2      	; 0x2d8 <pvPortMalloc+0x62>
     2d6:	64 c0       	rjmp	.+200    	; 0x3a0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     2d8:	c0 91 4c 07 	lds	r28, 0x074C	; 0x80074c <xStart>
     2dc:	d0 91 4d 07 	lds	r29, 0x074D	; 0x80074d <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     2e0:	ec e4       	ldi	r30, 0x4C	; 76
     2e2:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     2e6:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     2e8:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	9b 81       	ldd	r25, Y+3	; 0x03
     2ee:	80 17       	cp	r24, r16
     2f0:	91 07       	cpc	r25, r17
     2f2:	20 f4       	brcc	.+8      	; 0x2fc <pvPortMalloc+0x86>
     2f4:	88 81       	ld	r24, Y
     2f6:	99 81       	ldd	r25, Y+1	; 0x01
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	a9 f7       	brne	.-22     	; 0x2e6 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     2fc:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <pxEnd>
     300:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <pxEnd+0x1>
     304:	c8 17       	cp	r28, r24
     306:	d9 07       	cpc	r29, r25
     308:	09 f4       	brne	.+2      	; 0x30c <pvPortMalloc+0x96>
     30a:	4d c0       	rjmp	.+154    	; 0x3a6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     30c:	e0 80       	ld	r14, Z
     30e:	f1 80       	ldd	r15, Z+1	; 0x01
     310:	84 e0       	ldi	r24, 0x04	; 4
     312:	e8 0e       	add	r14, r24
     314:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     316:	88 81       	ld	r24, Y
     318:	99 81       	ldd	r25, Y+1	; 0x01
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     31e:	2a 81       	ldd	r18, Y+2	; 0x02
     320:	3b 81       	ldd	r19, Y+3	; 0x03
     322:	20 1b       	sub	r18, r16
     324:	31 0b       	sbc	r19, r17
     326:	29 30       	cpi	r18, 0x09	; 9
     328:	31 05       	cpc	r19, r1
     32a:	48 f0       	brcs	.+18     	; 0x33e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     32c:	ce 01       	movw	r24, r28
     32e:	80 0f       	add	r24, r16
     330:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     332:	fc 01       	movw	r30, r24
     334:	33 83       	std	Z+3, r19	; 0x03
     336:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     338:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     33a:	0a 83       	std	Y+2, r16	; 0x02
     33c:	52 df       	rcall	.-348    	; 0x1e2 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     33e:	2a 81       	ldd	r18, Y+2	; 0x02
     340:	3b 81       	ldd	r19, Y+3	; 0x03
     342:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <xFreeBytesRemaining>
     346:	90 91 49 07 	lds	r25, 0x0749	; 0x800749 <xFreeBytesRemaining+0x1>
     34a:	82 1b       	sub	r24, r18
     34c:	93 0b       	sbc	r25, r19
     34e:	90 93 49 07 	sts	0x0749, r25	; 0x800749 <xFreeBytesRemaining+0x1>
     352:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     356:	40 91 46 07 	lds	r20, 0x0746	; 0x800746 <xMinimumEverFreeBytesRemaining>
     35a:	50 91 47 07 	lds	r21, 0x0747	; 0x800747 <xMinimumEverFreeBytesRemaining+0x1>
     35e:	84 17       	cp	r24, r20
     360:	95 07       	cpc	r25, r21
     362:	20 f4       	brcc	.+8      	; 0x36c <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     364:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <xMinimumEverFreeBytesRemaining+0x1>
     368:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     36c:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <__data_end>
     370:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <__data_end+0x1>
     374:	28 2b       	or	r18, r24
     376:	39 2b       	or	r19, r25
     378:	3b 83       	std	Y+3, r19	; 0x03
     37a:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     37c:	19 82       	std	Y+1, r1	; 0x01
     37e:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     380:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <xNumberOfSuccessfulAllocations>
     384:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <xNumberOfSuccessfulAllocations+0x1>
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <xNumberOfSuccessfulAllocations+0x1>
     38e:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <xNumberOfSuccessfulAllocations>
     392:	0b c0       	rjmp	.+22     	; 0x3aa <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     394:	e1 2c       	mov	r14, r1
     396:	f1 2c       	mov	r15, r1
     398:	08 c0       	rjmp	.+16     	; 0x3aa <pvPortMalloc+0x134>
     39a:	e1 2c       	mov	r14, r1
     39c:	f1 2c       	mov	r15, r1
     39e:	05 c0       	rjmp	.+10     	; 0x3aa <pvPortMalloc+0x134>
     3a0:	e1 2c       	mov	r14, r1
     3a2:	f1 2c       	mov	r15, r1
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <pvPortMalloc+0x134>
     3a6:	e1 2c       	mov	r14, r1
     3a8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3aa:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     3ae:	e1 14       	cp	r14, r1
     3b0:	f1 04       	cpc	r15, r1
     3b2:	11 f4       	brne	.+4      	; 0x3b8 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     3b4:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     3b8:	c7 01       	movw	r24, r14
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	08 95       	ret

000003c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     3d0:	00 97       	sbiw	r24, 0x00	; 0
     3d2:	91 f1       	breq	.+100    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     3d4:	ec 01       	movw	r28, r24
     3d6:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     3d8:	4a 81       	ldd	r20, Y+2	; 0x02
     3da:	5b 81       	ldd	r21, Y+3	; 0x03
     3dc:	20 91 40 07 	lds	r18, 0x0740	; 0x800740 <__data_end>
     3e0:	30 91 41 07 	lds	r19, 0x0741	; 0x800741 <__data_end+0x1>
     3e4:	ba 01       	movw	r22, r20
     3e6:	62 23       	and	r22, r18
     3e8:	73 23       	and	r23, r19
     3ea:	67 2b       	or	r22, r23
     3ec:	29 f1       	breq	.+74     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     3ee:	68 81       	ld	r22, Y
     3f0:	79 81       	ldd	r23, Y+1	; 0x01
     3f2:	67 2b       	or	r22, r23
     3f4:	09 f5       	brne	.+66     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     3f6:	20 95       	com	r18
     3f8:	30 95       	com	r19
     3fa:	24 23       	and	r18, r20
     3fc:	35 23       	and	r19, r21
     3fe:	3b 83       	std	Y+3, r19	; 0x03
     400:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     402:	0e 94 30 0c 	call	0x1860	; 0x1860 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	9b 81       	ldd	r25, Y+3	; 0x03
     40a:	20 91 48 07 	lds	r18, 0x0748	; 0x800748 <xFreeBytesRemaining>
     40e:	30 91 49 07 	lds	r19, 0x0749	; 0x800749 <xFreeBytesRemaining+0x1>
     412:	82 0f       	add	r24, r18
     414:	93 1f       	adc	r25, r19
     416:	90 93 49 07 	sts	0x0749, r25	; 0x800749 <xFreeBytesRemaining+0x1>
     41a:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     41e:	ce 01       	movw	r24, r28
     420:	e0 de       	rcall	.-576    	; 0x1e2 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     422:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <xNumberOfSuccessfulFrees>
     426:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <xNumberOfSuccessfulFrees+0x1>
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <xNumberOfSuccessfulFrees+0x1>
     430:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     434:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	08 95       	ret

00000442 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     442:	fc 01       	movw	r30, r24
     444:	03 96       	adiw	r24, 0x03	; 3
     446:	92 83       	std	Z+2, r25	; 0x02
     448:	81 83       	std	Z+1, r24	; 0x01
     44a:	4f ef       	ldi	r20, 0xFF	; 255
     44c:	5f ef       	ldi	r21, 0xFF	; 255
     44e:	ba 01       	movw	r22, r20
     450:	43 83       	std	Z+3, r20	; 0x03
     452:	54 83       	std	Z+4, r21	; 0x04
     454:	65 83       	std	Z+5, r22	; 0x05
     456:	76 83       	std	Z+6, r23	; 0x06
     458:	90 87       	std	Z+8, r25	; 0x08
     45a:	87 83       	std	Z+7, r24	; 0x07
     45c:	92 87       	std	Z+10, r25	; 0x0a
     45e:	81 87       	std	Z+9, r24	; 0x09
     460:	10 82       	st	Z, r1
     462:	08 95       	ret

00000464 <vListInitialiseItem>:
     464:	fc 01       	movw	r30, r24
     466:	13 86       	std	Z+11, r1	; 0x0b
     468:	12 86       	std	Z+10, r1	; 0x0a
     46a:	08 95       	ret

0000046c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     476:	08 81       	ld	r16, Y
     478:	19 81       	ldd	r17, Y+1	; 0x01
     47a:	2a 81       	ldd	r18, Y+2	; 0x02
     47c:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     47e:	0f 3f       	cpi	r16, 0xFF	; 255
     480:	4f ef       	ldi	r20, 0xFF	; 255
     482:	14 07       	cpc	r17, r20
     484:	24 07       	cpc	r18, r20
     486:	34 07       	cpc	r19, r20
     488:	21 f4       	brne	.+8      	; 0x492 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     48a:	fc 01       	movw	r30, r24
     48c:	a1 85       	ldd	r26, Z+9	; 0x09
     48e:	b2 85       	ldd	r27, Z+10	; 0x0a
     490:	11 c0       	rjmp	.+34     	; 0x4b4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     492:	dc 01       	movw	r26, r24
     494:	13 96       	adiw	r26, 0x03	; 3
     496:	01 c0       	rjmp	.+2      	; 0x49a <vListInsert+0x2e>
     498:	df 01       	movw	r26, r30
     49a:	14 96       	adiw	r26, 0x04	; 4
     49c:	ed 91       	ld	r30, X+
     49e:	fc 91       	ld	r31, X
     4a0:	15 97       	sbiw	r26, 0x05	; 5
     4a2:	40 81       	ld	r20, Z
     4a4:	51 81       	ldd	r21, Z+1	; 0x01
     4a6:	62 81       	ldd	r22, Z+2	; 0x02
     4a8:	73 81       	ldd	r23, Z+3	; 0x03
     4aa:	04 17       	cp	r16, r20
     4ac:	15 07       	cpc	r17, r21
     4ae:	26 07       	cpc	r18, r22
     4b0:	37 07       	cpc	r19, r23
     4b2:	90 f7       	brcc	.-28     	; 0x498 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     4b4:	14 96       	adiw	r26, 0x04	; 4
     4b6:	ed 91       	ld	r30, X+
     4b8:	fc 91       	ld	r31, X
     4ba:	15 97       	sbiw	r26, 0x05	; 5
     4bc:	fd 83       	std	Y+5, r31	; 0x05
     4be:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     4c0:	d7 83       	std	Z+7, r29	; 0x07
     4c2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     4c4:	bf 83       	std	Y+7, r27	; 0x07
     4c6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     4c8:	15 96       	adiw	r26, 0x05	; 5
     4ca:	dc 93       	st	X, r29
     4cc:	ce 93       	st	-X, r28
     4ce:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     4d0:	9b 87       	std	Y+11, r25	; 0x0b
     4d2:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 81       	ld	r18, Z
     4d8:	2f 5f       	subi	r18, 0xFF	; 255
     4da:	20 83       	st	Z, r18
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	08 95       	ret

000004e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     4ec:	a2 85       	ldd	r26, Z+10	; 0x0a
     4ee:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4f0:	c4 81       	ldd	r28, Z+4	; 0x04
     4f2:	d5 81       	ldd	r29, Z+5	; 0x05
     4f4:	86 81       	ldd	r24, Z+6	; 0x06
     4f6:	97 81       	ldd	r25, Z+7	; 0x07
     4f8:	9f 83       	std	Y+7, r25	; 0x07
     4fa:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4fc:	c6 81       	ldd	r28, Z+6	; 0x06
     4fe:	d7 81       	ldd	r29, Z+7	; 0x07
     500:	84 81       	ldd	r24, Z+4	; 0x04
     502:	95 81       	ldd	r25, Z+5	; 0x05
     504:	9d 83       	std	Y+5, r25	; 0x05
     506:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     508:	11 96       	adiw	r26, 0x01	; 1
     50a:	8d 91       	ld	r24, X+
     50c:	9c 91       	ld	r25, X
     50e:	12 97       	sbiw	r26, 0x02	; 2
     510:	e8 17       	cp	r30, r24
     512:	f9 07       	cpc	r31, r25
     514:	31 f4       	brne	.+12     	; 0x522 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     516:	86 81       	ldd	r24, Z+6	; 0x06
     518:	97 81       	ldd	r25, Z+7	; 0x07
     51a:	12 96       	adiw	r26, 0x02	; 2
     51c:	9c 93       	st	X, r25
     51e:	8e 93       	st	-X, r24
     520:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     522:	13 86       	std	Z+11, r1	; 0x0b
     524:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     526:	8c 91       	ld	r24, X
     528:	81 50       	subi	r24, 0x01	; 1
     52a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     52c:	8c 91       	ld	r24, X
}
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     534:	a8 95       	wdr
     536:	90 ec       	ldi	r25, 0xC0	; 192
     538:	88 e1       	ldi	r24, 0x18	; 24
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	a8 95       	wdr
     540:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     544:	0f be       	out	0x3f, r0	; 63
     546:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     54a:	08 95       	ret

0000054c <pxPortInitialiseStack>:
     54c:	fc 01       	movw	r30, r24
     54e:	60 83       	st	Z, r22
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	70 83       	st	Z, r23
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	10 82       	st	Z, r1
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	10 82       	st	Z, r1
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	20 e8       	ldi	r18, 0x80	; 128
     560:	20 83       	st	Z, r18
     562:	31 97       	sbiw	r30, 0x01	; 1
     564:	10 82       	st	Z, r1
     566:	31 97       	sbiw	r30, 0x01	; 1
     568:	10 82       	st	Z, r1
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	10 82       	st	Z, r1
     56e:	77 97       	sbiw	r30, 0x17	; 23
     570:	40 83       	st	Z, r20
     572:	31 97       	sbiw	r30, 0x01	; 1
     574:	50 83       	st	Z, r21
     576:	86 97       	sbiw	r24, 0x26	; 38
     578:	08 95       	ret

0000057a <xPortStartScheduler>:
     57a:	dc df       	rcall	.-72     	; 0x534 <prvSetupTimerInterrupt>
     57c:	a0 91 d3 11 	lds	r26, 0x11D3	; 0x8011d3 <pxCurrentTCB>
     580:	b0 91 d4 11 	lds	r27, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
     584:	cd 91       	ld	r28, X+
     586:	cd bf       	out	0x3d, r28	; 61
     588:	dd 91       	ld	r29, X+
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	ff 91       	pop	r31
     58e:	ef 91       	pop	r30
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	bf 91       	pop	r27
     596:	af 91       	pop	r26
     598:	9f 91       	pop	r25
     59a:	8f 91       	pop	r24
     59c:	7f 91       	pop	r23
     59e:	6f 91       	pop	r22
     5a0:	5f 91       	pop	r21
     5a2:	4f 91       	pop	r20
     5a4:	3f 91       	pop	r19
     5a6:	2f 91       	pop	r18
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	cf 90       	pop	r12
     5b4:	bf 90       	pop	r11
     5b6:	af 90       	pop	r10
     5b8:	9f 90       	pop	r9
     5ba:	8f 90       	pop	r8
     5bc:	7f 90       	pop	r7
     5be:	6f 90       	pop	r6
     5c0:	5f 90       	pop	r5
     5c2:	4f 90       	pop	r4
     5c4:	3f 90       	pop	r3
     5c6:	2f 90       	pop	r2
     5c8:	1f 90       	pop	r1
     5ca:	0f 90       	pop	r0
     5cc:	0c be       	out	0x3c, r0	; 60
     5ce:	0f 90       	pop	r0
     5d0:	0b be       	out	0x3b, r0	; 59
     5d2:	0f 90       	pop	r0
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	0f 90       	pop	r0
     5d8:	08 95       	ret
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	08 95       	ret

000005de <vPortYield>:
     5de:	0f 92       	push	r0
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	0f 92       	push	r0
     5e6:	0b b6       	in	r0, 0x3b	; 59
     5e8:	0f 92       	push	r0
     5ea:	0c b6       	in	r0, 0x3c	; 60
     5ec:	0f 92       	push	r0
     5ee:	1f 92       	push	r1
     5f0:	11 24       	eor	r1, r1
     5f2:	2f 92       	push	r2
     5f4:	3f 92       	push	r3
     5f6:	4f 92       	push	r4
     5f8:	5f 92       	push	r5
     5fa:	6f 92       	push	r6
     5fc:	7f 92       	push	r7
     5fe:	8f 92       	push	r8
     600:	9f 92       	push	r9
     602:	af 92       	push	r10
     604:	bf 92       	push	r11
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	2f 93       	push	r18
     614:	3f 93       	push	r19
     616:	4f 93       	push	r20
     618:	5f 93       	push	r21
     61a:	6f 93       	push	r22
     61c:	7f 93       	push	r23
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
     62e:	a0 91 d3 11 	lds	r26, 0x11D3	; 0x8011d3 <pxCurrentTCB>
     632:	b0 91 d4 11 	lds	r27, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
     636:	0d b6       	in	r0, 0x3d	; 61
     638:	0d 92       	st	X+, r0
     63a:	0e b6       	in	r0, 0x3e	; 62
     63c:	0d 92       	st	X+, r0
     63e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <vTaskSwitchContext>
     642:	a0 91 d3 11 	lds	r26, 0x11D3	; 0x8011d3 <pxCurrentTCB>
     646:	b0 91 d4 11 	lds	r27, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
     64a:	cd 91       	ld	r28, X+
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	dd 91       	ld	r29, X+
     650:	de bf       	out	0x3e, r29	; 62
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	7f 91       	pop	r23
     664:	6f 91       	pop	r22
     666:	5f 91       	pop	r21
     668:	4f 91       	pop	r20
     66a:	3f 91       	pop	r19
     66c:	2f 91       	pop	r18
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	bf 90       	pop	r11
     67c:	af 90       	pop	r10
     67e:	9f 90       	pop	r9
     680:	8f 90       	pop	r8
     682:	7f 90       	pop	r7
     684:	6f 90       	pop	r6
     686:	5f 90       	pop	r5
     688:	4f 90       	pop	r4
     68a:	3f 90       	pop	r3
     68c:	2f 90       	pop	r2
     68e:	1f 90       	pop	r1
     690:	0f 90       	pop	r0
     692:	0c be       	out	0x3c, r0	; 60
     694:	0f 90       	pop	r0
     696:	0b be       	out	0x3b, r0	; 59
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	08 95       	ret

000006a0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     6a0:	0f 92       	push	r0
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	0f 92       	push	r0
     6a8:	0b b6       	in	r0, 0x3b	; 59
     6aa:	0f 92       	push	r0
     6ac:	0c b6       	in	r0, 0x3c	; 60
     6ae:	0f 92       	push	r0
     6b0:	1f 92       	push	r1
     6b2:	11 24       	eor	r1, r1
     6b4:	2f 92       	push	r2
     6b6:	3f 92       	push	r3
     6b8:	4f 92       	push	r4
     6ba:	5f 92       	push	r5
     6bc:	6f 92       	push	r6
     6be:	7f 92       	push	r7
     6c0:	8f 92       	push	r8
     6c2:	9f 92       	push	r9
     6c4:	af 92       	push	r10
     6c6:	bf 92       	push	r11
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	2f 93       	push	r18
     6d6:	3f 93       	push	r19
     6d8:	4f 93       	push	r20
     6da:	5f 93       	push	r21
     6dc:	6f 93       	push	r22
     6de:	7f 93       	push	r23
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	af 93       	push	r26
     6e6:	bf 93       	push	r27
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ef 93       	push	r30
     6ee:	ff 93       	push	r31
     6f0:	a0 91 d3 11 	lds	r26, 0x11D3	; 0x8011d3 <pxCurrentTCB>
     6f4:	b0 91 d4 11 	lds	r27, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
     6f8:	0d b6       	in	r0, 0x3d	; 61
     6fa:	0d 92       	st	X+, r0
     6fc:	0e b6       	in	r0, 0x3e	; 62
     6fe:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     700:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     702:	0e 94 44 0c 	call	0x1888	; 0x1888 <xTaskIncrementTick>
     706:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     708:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     70c:	a0 91 d3 11 	lds	r26, 0x11D3	; 0x8011d3 <pxCurrentTCB>
     710:	b0 91 d4 11 	lds	r27, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
     714:	cd 91       	ld	r28, X+
     716:	cd bf       	out	0x3d, r28	; 61
     718:	dd 91       	ld	r29, X+
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	bf 91       	pop	r27
     726:	af 91       	pop	r26
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	7f 91       	pop	r23
     72e:	6f 91       	pop	r22
     730:	5f 91       	pop	r21
     732:	4f 91       	pop	r20
     734:	3f 91       	pop	r19
     736:	2f 91       	pop	r18
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	bf 90       	pop	r11
     746:	af 90       	pop	r10
     748:	9f 90       	pop	r9
     74a:	8f 90       	pop	r8
     74c:	7f 90       	pop	r7
     74e:	6f 90       	pop	r6
     750:	5f 90       	pop	r5
     752:	4f 90       	pop	r4
     754:	3f 90       	pop	r3
     756:	2f 90       	pop	r2
     758:	1f 90       	pop	r1
     75a:	0f 90       	pop	r0
     75c:	0c be       	out	0x3c, r0	; 60
     75e:	0f 90       	pop	r0
     760:	0b be       	out	0x3b, r0	; 59
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
     766:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     768:	08 95       	ret

0000076a <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     76a:	9a df       	rcall	.-204    	; 0x6a0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     76c:	18 95       	reti

0000076e <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	0f 92       	push	r0
     774:	fc 01       	movw	r30, r24
     776:	86 8d       	ldd	r24, Z+30	; 0x1e
     778:	81 11       	cpse	r24, r1
     77a:	02 c0       	rjmp	.+4      	; 0x780 <prvIsQueueEmpty+0x12>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	01 c0       	rjmp	.+2      	; 0x782 <prvIsQueueEmpty+0x14>
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	08 95       	ret

00000788 <prvIsQueueFull>:
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	0f 92       	push	r0
     78e:	fc 01       	movw	r30, r24
     790:	26 8d       	ldd	r18, Z+30	; 0x1e
     792:	87 8d       	ldd	r24, Z+31	; 0x1f
     794:	28 13       	cpse	r18, r24
     796:	02 c0       	rjmp	.+4      	; 0x79c <prvIsQueueFull+0x14>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	01 c0       	rjmp	.+2      	; 0x79e <prvIsQueueFull+0x16>
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	0f 90       	pop	r0
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	08 95       	ret

000007a4 <prvCopyDataToQueue>:
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
     7ae:	04 2f       	mov	r16, r20
     7b0:	1e 8d       	ldd	r17, Y+30	; 0x1e
     7b2:	48 a1       	ldd	r20, Y+32	; 0x20
     7b4:	41 11       	cpse	r20, r1
     7b6:	0c c0       	rjmp	.+24     	; 0x7d0 <prvCopyDataToQueue+0x2c>
     7b8:	88 81       	ld	r24, Y
     7ba:	99 81       	ldd	r25, Y+1	; 0x01
     7bc:	89 2b       	or	r24, r25
     7be:	09 f0       	breq	.+2      	; 0x7c2 <prvCopyDataToQueue+0x1e>
     7c0:	42 c0       	rjmp	.+132    	; 0x846 <prvCopyDataToQueue+0xa2>
     7c2:	8c 81       	ldd	r24, Y+4	; 0x04
     7c4:	9d 81       	ldd	r25, Y+5	; 0x05
     7c6:	0e 94 dd 10 	call	0x21ba	; 0x21ba <xTaskPriorityDisinherit>
     7ca:	1d 82       	std	Y+5, r1	; 0x05
     7cc:	1c 82       	std	Y+4, r1	; 0x04
     7ce:	42 c0       	rjmp	.+132    	; 0x854 <prvCopyDataToQueue+0xb0>
     7d0:	01 11       	cpse	r16, r1
     7d2:	17 c0       	rjmp	.+46     	; 0x802 <prvCopyDataToQueue+0x5e>
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	9b 81       	ldd	r25, Y+3	; 0x03
     7da:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <memcpy>
     7de:	28 a1       	ldd	r18, Y+32	; 0x20
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	9b 81       	ldd	r25, Y+3	; 0x03
     7e4:	82 0f       	add	r24, r18
     7e6:	91 1d       	adc	r25, r1
     7e8:	9b 83       	std	Y+3, r25	; 0x03
     7ea:	8a 83       	std	Y+2, r24	; 0x02
     7ec:	2c 81       	ldd	r18, Y+4	; 0x04
     7ee:	3d 81       	ldd	r19, Y+5	; 0x05
     7f0:	82 17       	cp	r24, r18
     7f2:	93 07       	cpc	r25, r19
     7f4:	50 f1       	brcs	.+84     	; 0x84a <prvCopyDataToQueue+0xa6>
     7f6:	88 81       	ld	r24, Y
     7f8:	99 81       	ldd	r25, Y+1	; 0x01
     7fa:	9b 83       	std	Y+3, r25	; 0x03
     7fc:	8a 83       	std	Y+2, r24	; 0x02
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	29 c0       	rjmp	.+82     	; 0x854 <prvCopyDataToQueue+0xb0>
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	8e 81       	ldd	r24, Y+6	; 0x06
     806:	9f 81       	ldd	r25, Y+7	; 0x07
     808:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <memcpy>
     80c:	88 a1       	ldd	r24, Y+32	; 0x20
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	91 95       	neg	r25
     812:	81 95       	neg	r24
     814:	91 09       	sbc	r25, r1
     816:	2e 81       	ldd	r18, Y+6	; 0x06
     818:	3f 81       	ldd	r19, Y+7	; 0x07
     81a:	28 0f       	add	r18, r24
     81c:	39 1f       	adc	r19, r25
     81e:	3f 83       	std	Y+7, r19	; 0x07
     820:	2e 83       	std	Y+6, r18	; 0x06
     822:	48 81       	ld	r20, Y
     824:	59 81       	ldd	r21, Y+1	; 0x01
     826:	24 17       	cp	r18, r20
     828:	35 07       	cpc	r19, r21
     82a:	30 f4       	brcc	.+12     	; 0x838 <prvCopyDataToQueue+0x94>
     82c:	2c 81       	ldd	r18, Y+4	; 0x04
     82e:	3d 81       	ldd	r19, Y+5	; 0x05
     830:	82 0f       	add	r24, r18
     832:	93 1f       	adc	r25, r19
     834:	9f 83       	std	Y+7, r25	; 0x07
     836:	8e 83       	std	Y+6, r24	; 0x06
     838:	02 30       	cpi	r16, 0x02	; 2
     83a:	49 f4       	brne	.+18     	; 0x84e <prvCopyDataToQueue+0xaa>
     83c:	11 23       	and	r17, r17
     83e:	49 f0       	breq	.+18     	; 0x852 <prvCopyDataToQueue+0xae>
     840:	11 50       	subi	r17, 0x01	; 1
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	07 c0       	rjmp	.+14     	; 0x854 <prvCopyDataToQueue+0xb0>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	05 c0       	rjmp	.+10     	; 0x854 <prvCopyDataToQueue+0xb0>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	03 c0       	rjmp	.+6      	; 0x854 <prvCopyDataToQueue+0xb0>
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	01 c0       	rjmp	.+2      	; 0x854 <prvCopyDataToQueue+0xb0>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	1f 5f       	subi	r17, 0xFF	; 255
     856:	1e 8f       	std	Y+30, r17	; 0x1e
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	08 95       	ret

00000862 <prvCopyDataFromQueue>:
     862:	fc 01       	movw	r30, r24
     864:	40 a1       	ldd	r20, Z+32	; 0x20
     866:	44 23       	and	r20, r20
     868:	a9 f0       	breq	.+42     	; 0x894 <prvCopyDataFromQueue+0x32>
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	26 81       	ldd	r18, Z+6	; 0x06
     86e:	37 81       	ldd	r19, Z+7	; 0x07
     870:	24 0f       	add	r18, r20
     872:	35 1f       	adc	r19, r21
     874:	37 83       	std	Z+7, r19	; 0x07
     876:	26 83       	std	Z+6, r18	; 0x06
     878:	84 81       	ldd	r24, Z+4	; 0x04
     87a:	95 81       	ldd	r25, Z+5	; 0x05
     87c:	28 17       	cp	r18, r24
     87e:	39 07       	cpc	r19, r25
     880:	20 f0       	brcs	.+8      	; 0x88a <prvCopyDataFromQueue+0x28>
     882:	80 81       	ld	r24, Z
     884:	91 81       	ldd	r25, Z+1	; 0x01
     886:	97 83       	std	Z+7, r25	; 0x07
     888:	86 83       	std	Z+6, r24	; 0x06
     88a:	cb 01       	movw	r24, r22
     88c:	66 81       	ldd	r22, Z+6	; 0x06
     88e:	77 81       	ldd	r23, Z+7	; 0x07
     890:	0c 94 a9 27 	jmp	0x4f52	; 0x4f52 <memcpy>
     894:	08 95       	ret

00000896 <prvUnlockQueue>:
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	ec 01       	movw	r28, r24
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	0f 92       	push	r0
     8a4:	1a a1       	ldd	r17, Y+34	; 0x22
     8a6:	0b c0       	rjmp	.+22     	; 0x8be <prvUnlockQueue+0x28>
     8a8:	8b 89       	ldd	r24, Y+19	; 0x13
     8aa:	88 23       	and	r24, r24
     8ac:	51 f0       	breq	.+20     	; 0x8c2 <prvUnlockQueue+0x2c>
     8ae:	ce 01       	movw	r24, r28
     8b0:	43 96       	adiw	r24, 0x13	; 19
     8b2:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskRemoveFromEventList>
     8b6:	81 11       	cpse	r24, r1
     8b8:	0e 94 c6 10 	call	0x218c	; 0x218c <vTaskMissedYield>
     8bc:	11 50       	subi	r17, 0x01	; 1
     8be:	11 16       	cp	r1, r17
     8c0:	9c f3       	brlt	.-26     	; 0x8a8 <prvUnlockQueue+0x12>
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	8a a3       	std	Y+34, r24	; 0x22
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	0f 92       	push	r0
     8d0:	19 a1       	ldd	r17, Y+33	; 0x21
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <prvUnlockQueue+0x54>
     8d4:	88 85       	ldd	r24, Y+8	; 0x08
     8d6:	88 23       	and	r24, r24
     8d8:	51 f0       	breq	.+20     	; 0x8ee <prvUnlockQueue+0x58>
     8da:	ce 01       	movw	r24, r28
     8dc:	08 96       	adiw	r24, 0x08	; 8
     8de:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskRemoveFromEventList>
     8e2:	81 11       	cpse	r24, r1
     8e4:	0e 94 c6 10 	call	0x218c	; 0x218c <vTaskMissedYield>
     8e8:	11 50       	subi	r17, 0x01	; 1
     8ea:	11 16       	cp	r1, r17
     8ec:	9c f3       	brlt	.-26     	; 0x8d4 <prvUnlockQueue+0x3e>
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	89 a3       	std	Y+33, r24	; 0x21
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	08 95       	ret

000008fe <xQueueGenericReset>:
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	ec 01       	movw	r28, r24
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	0f 92       	push	r0
     90a:	e8 81       	ld	r30, Y
     90c:	f9 81       	ldd	r31, Y+1	; 0x01
     90e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     910:	28 a1       	ldd	r18, Y+32	; 0x20
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	82 9f       	mul	r24, r18
     918:	a0 01       	movw	r20, r0
     91a:	83 9f       	mul	r24, r19
     91c:	50 0d       	add	r21, r0
     91e:	92 9f       	mul	r25, r18
     920:	50 0d       	add	r21, r0
     922:	11 24       	eor	r1, r1
     924:	4e 0f       	add	r20, r30
     926:	5f 1f       	adc	r21, r31
     928:	5d 83       	std	Y+5, r21	; 0x05
     92a:	4c 83       	std	Y+4, r20	; 0x04
     92c:	1e 8e       	std	Y+30, r1	; 0x1e
     92e:	fb 83       	std	Y+3, r31	; 0x03
     930:	ea 83       	std	Y+2, r30	; 0x02
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	28 9f       	mul	r18, r24
     936:	a0 01       	movw	r20, r0
     938:	29 9f       	mul	r18, r25
     93a:	50 0d       	add	r21, r0
     93c:	38 9f       	mul	r19, r24
     93e:	50 0d       	add	r21, r0
     940:	11 24       	eor	r1, r1
     942:	cf 01       	movw	r24, r30
     944:	84 0f       	add	r24, r20
     946:	95 1f       	adc	r25, r21
     948:	9f 83       	std	Y+7, r25	; 0x07
     94a:	8e 83       	std	Y+6, r24	; 0x06
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	89 a3       	std	Y+33, r24	; 0x21
     950:	8a a3       	std	Y+34, r24	; 0x22
     952:	61 11       	cpse	r22, r1
     954:	0b c0       	rjmp	.+22     	; 0x96c <xQueueGenericReset+0x6e>
     956:	88 85       	ldd	r24, Y+8	; 0x08
     958:	88 23       	and	r24, r24
     95a:	71 f0       	breq	.+28     	; 0x978 <xQueueGenericReset+0x7a>
     95c:	ce 01       	movw	r24, r28
     95e:	08 96       	adiw	r24, 0x08	; 8
     960:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskRemoveFromEventList>
     964:	88 23       	and	r24, r24
     966:	41 f0       	breq	.+16     	; 0x978 <xQueueGenericReset+0x7a>
     968:	3a de       	rcall	.-908    	; 0x5de <vPortYield>
     96a:	06 c0       	rjmp	.+12     	; 0x978 <xQueueGenericReset+0x7a>
     96c:	ce 01       	movw	r24, r28
     96e:	08 96       	adiw	r24, 0x08	; 8
     970:	68 dd       	rcall	.-1328   	; 0x442 <vListInitialise>
     972:	ce 01       	movw	r24, r28
     974:	43 96       	adiw	r24, 0x13	; 19
     976:	65 dd       	rcall	.-1334   	; 0x442 <vListInitialise>
     978:	0f 90       	pop	r0
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <prvInitialiseNewQueue>:
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	f8 01       	movw	r30, r16
     98a:	61 11       	cpse	r22, r1
     98c:	03 c0       	rjmp	.+6      	; 0x994 <prvInitialiseNewQueue+0x10>
     98e:	11 83       	std	Z+1, r17	; 0x01
     990:	00 83       	st	Z, r16
     992:	02 c0       	rjmp	.+4      	; 0x998 <prvInitialiseNewQueue+0x14>
     994:	51 83       	std	Z+1, r21	; 0x01
     996:	40 83       	st	Z, r20
     998:	87 8f       	std	Z+31, r24	; 0x1f
     99a:	60 a3       	std	Z+32, r22	; 0x20
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	cf 01       	movw	r24, r30
     9a0:	ae df       	rcall	.-164    	; 0x8fe <xQueueGenericReset>
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	08 95       	ret

000009a8 <xQueueGenericCreate>:
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	f8 2e       	mov	r15, r24
     9b8:	e6 2e       	mov	r14, r22
     9ba:	d4 2e       	mov	r13, r20
     9bc:	86 9f       	mul	r24, r22
     9be:	c0 01       	movw	r24, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	83 96       	adiw	r24, 0x23	; 35
     9c4:	58 dc       	rcall	.-1872   	; 0x276 <pvPortMalloc>
     9c6:	ec 01       	movw	r28, r24
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	41 f0       	breq	.+16     	; 0x9dc <xQueueGenericCreate+0x34>
     9cc:	8c 01       	movw	r16, r24
     9ce:	2d 2d       	mov	r18, r13
     9d0:	ac 01       	movw	r20, r24
     9d2:	4d 5d       	subi	r20, 0xDD	; 221
     9d4:	5f 4f       	sbci	r21, 0xFF	; 255
     9d6:	6e 2d       	mov	r22, r14
     9d8:	8f 2d       	mov	r24, r15
     9da:	d4 df       	rcall	.-88     	; 0x984 <prvInitialiseNewQueue>
     9dc:	ce 01       	movw	r24, r28
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	08 95       	ret

000009ee <xQueueGenericSend>:
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	29 97       	sbiw	r28, 0x09	; 9
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	7c 01       	movw	r14, r24
     a10:	6b 01       	movw	r12, r22
     a12:	2e 83       	std	Y+6, r18	; 0x06
     a14:	3f 83       	std	Y+7, r19	; 0x07
     a16:	48 87       	std	Y+8, r20	; 0x08
     a18:	59 87       	std	Y+9, r21	; 0x09
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	0f 92       	push	r0
     a22:	f7 01       	movw	r30, r14
     a24:	96 8d       	ldd	r25, Z+30	; 0x1e
     a26:	87 8d       	ldd	r24, Z+31	; 0x1f
     a28:	98 17       	cp	r25, r24
     a2a:	10 f0       	brcs	.+4      	; 0xa30 <xQueueGenericSend+0x42>
     a2c:	02 30       	cpi	r16, 0x02	; 2
     a2e:	b1 f4       	brne	.+44     	; 0xa5c <xQueueGenericSend+0x6e>
     a30:	40 2f       	mov	r20, r16
     a32:	b6 01       	movw	r22, r12
     a34:	c7 01       	movw	r24, r14
     a36:	b6 de       	rcall	.-660    	; 0x7a4 <prvCopyDataToQueue>
     a38:	f7 01       	movw	r30, r14
     a3a:	93 89       	ldd	r25, Z+19	; 0x13
     a3c:	99 23       	and	r25, r25
     a3e:	41 f0       	breq	.+16     	; 0xa50 <xQueueGenericSend+0x62>
     a40:	c7 01       	movw	r24, r14
     a42:	43 96       	adiw	r24, 0x13	; 19
     a44:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskRemoveFromEventList>
     a48:	88 23       	and	r24, r24
     a4a:	21 f0       	breq	.+8      	; 0xa54 <xQueueGenericSend+0x66>
     a4c:	c8 dd       	rcall	.-1136   	; 0x5de <vPortYield>
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <xQueueGenericSend+0x66>
     a50:	81 11       	cpse	r24, r1
     a52:	c5 dd       	rcall	.-1142   	; 0x5de <vPortYield>
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	4a c0       	rjmp	.+148    	; 0xaf0 <xQueueGenericSend+0x102>
     a5c:	8e 81       	ldd	r24, Y+6	; 0x06
     a5e:	9f 81       	ldd	r25, Y+7	; 0x07
     a60:	a8 85       	ldd	r26, Y+8	; 0x08
     a62:	b9 85       	ldd	r27, Y+9	; 0x09
     a64:	89 2b       	or	r24, r25
     a66:	8a 2b       	or	r24, r26
     a68:	8b 2b       	or	r24, r27
     a6a:	21 f4       	brne	.+8      	; 0xa74 <xQueueGenericSend+0x86>
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	3e c0       	rjmp	.+124    	; 0xaf0 <xQueueGenericSend+0x102>
     a74:	11 11       	cpse	r17, r1
     a76:	05 c0       	rjmp	.+10     	; 0xa82 <xQueueGenericSend+0x94>
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	0e 94 4f 10 	call	0x209e	; 0x209e <vTaskInternalSetTimeOutState>
     a80:	11 e0       	ldi	r17, 0x01	; 1
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	ec d6       	rcall	.+3544   	; 0x1860 <vTaskSuspendAll>
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	0f 92       	push	r0
     a8e:	f7 01       	movw	r30, r14
     a90:	81 a1       	ldd	r24, Z+33	; 0x21
     a92:	8f 3f       	cpi	r24, 0xFF	; 255
     a94:	09 f4       	brne	.+2      	; 0xa98 <xQueueGenericSend+0xaa>
     a96:	11 a2       	std	Z+33, r1	; 0x21
     a98:	f7 01       	movw	r30, r14
     a9a:	82 a1       	ldd	r24, Z+34	; 0x22
     a9c:	8f 3f       	cpi	r24, 0xFF	; 255
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <xQueueGenericSend+0xb4>
     aa0:	12 a2       	std	Z+34, r1	; 0x22
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	be 01       	movw	r22, r28
     aa8:	6a 5f       	subi	r22, 0xFA	; 250
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255
     aac:	ce 01       	movw	r24, r28
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	0e 94 60 10 	call	0x20c0	; 0x20c0 <xTaskCheckForTimeOut>
     ab4:	81 11       	cpse	r24, r1
     ab6:	18 c0       	rjmp	.+48     	; 0xae8 <xQueueGenericSend+0xfa>
     ab8:	c7 01       	movw	r24, r14
     aba:	66 de       	rcall	.-820    	; 0x788 <prvIsQueueFull>
     abc:	88 23       	and	r24, r24
     abe:	81 f0       	breq	.+32     	; 0xae0 <xQueueGenericSend+0xf2>
     ac0:	4e 81       	ldd	r20, Y+6	; 0x06
     ac2:	5f 81       	ldd	r21, Y+7	; 0x07
     ac4:	68 85       	ldd	r22, Y+8	; 0x08
     ac6:	79 85       	ldd	r23, Y+9	; 0x09
     ac8:	c7 01       	movw	r24, r14
     aca:	08 96       	adiw	r24, 0x08	; 8
     acc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <vTaskPlaceOnEventList>
     ad0:	c7 01       	movw	r24, r14
     ad2:	e1 de       	rcall	.-574    	; 0x896 <prvUnlockQueue>
     ad4:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskResumeAll>
     ad8:	81 11       	cpse	r24, r1
     ada:	a0 cf       	rjmp	.-192    	; 0xa1c <xQueueGenericSend+0x2e>
     adc:	80 dd       	rcall	.-1280   	; 0x5de <vPortYield>
     ade:	9e cf       	rjmp	.-196    	; 0xa1c <xQueueGenericSend+0x2e>
     ae0:	c7 01       	movw	r24, r14
     ae2:	d9 de       	rcall	.-590    	; 0x896 <prvUnlockQueue>
     ae4:	fd d7       	rcall	.+4090   	; 0x1ae0 <xTaskResumeAll>
     ae6:	9a cf       	rjmp	.-204    	; 0xa1c <xQueueGenericSend+0x2e>
     ae8:	c7 01       	movw	r24, r14
     aea:	d5 de       	rcall	.-598    	; 0x896 <prvUnlockQueue>
     aec:	f9 d7       	rcall	.+4082   	; 0x1ae0 <xTaskResumeAll>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	29 96       	adiw	r28, 0x09	; 9
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	08 95       	ret

00000b0e <xQueueGenericSendFromISR>:
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	8a 01       	movw	r16, r20
     b1c:	fc 01       	movw	r30, r24
     b1e:	56 8d       	ldd	r21, Z+30	; 0x1e
     b20:	37 8d       	ldd	r19, Z+31	; 0x1f
     b22:	53 17       	cp	r21, r19
     b24:	10 f0       	brcs	.+4      	; 0xb2a <xQueueGenericSendFromISR+0x1c>
     b26:	22 30       	cpi	r18, 0x02	; 2
     b28:	f9 f4       	brne	.+62     	; 0xb68 <xQueueGenericSendFromISR+0x5a>
     b2a:	42 2f       	mov	r20, r18
     b2c:	78 01       	movw	r14, r16
     b2e:	ec 01       	movw	r28, r24
     b30:	1a a1       	ldd	r17, Y+34	; 0x22
     b32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b34:	ce 01       	movw	r24, r28
     b36:	36 de       	rcall	.-916    	; 0x7a4 <prvCopyDataToQueue>
     b38:	1f 3f       	cpi	r17, 0xFF	; 255
     b3a:	81 f4       	brne	.+32     	; 0xb5c <xQueueGenericSendFromISR+0x4e>
     b3c:	8b 89       	ldd	r24, Y+19	; 0x13
     b3e:	88 23       	and	r24, r24
     b40:	a9 f0       	breq	.+42     	; 0xb6c <xQueueGenericSendFromISR+0x5e>
     b42:	ce 01       	movw	r24, r28
     b44:	43 96       	adiw	r24, 0x13	; 19
     b46:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskRemoveFromEventList>
     b4a:	88 23       	and	r24, r24
     b4c:	89 f0       	breq	.+34     	; 0xb70 <xQueueGenericSendFromISR+0x62>
     b4e:	e1 14       	cp	r14, r1
     b50:	f1 04       	cpc	r15, r1
     b52:	81 f0       	breq	.+32     	; 0xb74 <xQueueGenericSendFromISR+0x66>
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	f7 01       	movw	r30, r14
     b58:	80 83       	st	Z, r24
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <xQueueGenericSendFromISR+0x68>
     b5c:	ff 24       	eor	r15, r15
     b5e:	f3 94       	inc	r15
     b60:	f1 0e       	add	r15, r17
     b62:	fa a2       	std	Y+34, r15	; 0x22
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	07 c0       	rjmp	.+14     	; 0xb76 <xQueueGenericSendFromISR+0x68>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <xQueueGenericSendFromISR+0x68>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	03 c0       	rjmp	.+6      	; 0xb76 <xQueueGenericSendFromISR+0x68>
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <xQueueGenericSendFromISR+0x68>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	08 95       	ret

00000b84 <xQueueReceive>:
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	29 97       	sbiw	r28, 0x09	; 9
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	8c 01       	movw	r16, r24
     ba6:	6b 01       	movw	r12, r22
     ba8:	2e 83       	std	Y+6, r18	; 0x06
     baa:	3f 83       	std	Y+7, r19	; 0x07
     bac:	48 87       	std	Y+8, r20	; 0x08
     bae:	59 87       	std	Y+9, r21	; 0x09
     bb0:	e1 2c       	mov	r14, r1
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	0f 92       	push	r0
     bb8:	f8 01       	movw	r30, r16
     bba:	f6 8c       	ldd	r15, Z+30	; 0x1e
     bbc:	ff 20       	and	r15, r15
     bbe:	99 f0       	breq	.+38     	; 0xbe6 <xQueueReceive+0x62>
     bc0:	b6 01       	movw	r22, r12
     bc2:	c8 01       	movw	r24, r16
     bc4:	4e de       	rcall	.-868    	; 0x862 <prvCopyDataFromQueue>
     bc6:	fa 94       	dec	r15
     bc8:	f8 01       	movw	r30, r16
     bca:	f6 8e       	std	Z+30, r15	; 0x1e
     bcc:	80 85       	ldd	r24, Z+8	; 0x08
     bce:	88 23       	and	r24, r24
     bd0:	31 f0       	breq	.+12     	; 0xbde <xQueueReceive+0x5a>
     bd2:	c8 01       	movw	r24, r16
     bd4:	08 96       	adiw	r24, 0x08	; 8
     bd6:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskRemoveFromEventList>
     bda:	81 11       	cpse	r24, r1
     bdc:	00 dd       	rcall	.-1536   	; 0x5de <vPortYield>
     bde:	0f 90       	pop	r0
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	4f c0       	rjmp	.+158    	; 0xc84 <xQueueReceive+0x100>
     be6:	8e 81       	ldd	r24, Y+6	; 0x06
     be8:	9f 81       	ldd	r25, Y+7	; 0x07
     bea:	a8 85       	ldd	r26, Y+8	; 0x08
     bec:	b9 85       	ldd	r27, Y+9	; 0x09
     bee:	89 2b       	or	r24, r25
     bf0:	8a 2b       	or	r24, r26
     bf2:	8b 2b       	or	r24, r27
     bf4:	21 f4       	brne	.+8      	; 0xbfe <xQueueReceive+0x7a>
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	43 c0       	rjmp	.+134    	; 0xc84 <xQueueReceive+0x100>
     bfe:	e1 10       	cpse	r14, r1
     c00:	06 c0       	rjmp	.+12     	; 0xc0e <xQueueReceive+0x8a>
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	0e 94 4f 10 	call	0x209e	; 0x209e <vTaskInternalSetTimeOutState>
     c0a:	ee 24       	eor	r14, r14
     c0c:	e3 94       	inc	r14
     c0e:	0f 90       	pop	r0
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	26 d6       	rcall	.+3148   	; 0x1860 <vTaskSuspendAll>
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	0f 92       	push	r0
     c1a:	f8 01       	movw	r30, r16
     c1c:	81 a1       	ldd	r24, Z+33	; 0x21
     c1e:	8f 3f       	cpi	r24, 0xFF	; 255
     c20:	09 f4       	brne	.+2      	; 0xc24 <xQueueReceive+0xa0>
     c22:	11 a2       	std	Z+33, r1	; 0x21
     c24:	f8 01       	movw	r30, r16
     c26:	82 a1       	ldd	r24, Z+34	; 0x22
     c28:	8f 3f       	cpi	r24, 0xFF	; 255
     c2a:	09 f4       	brne	.+2      	; 0xc2e <xQueueReceive+0xaa>
     c2c:	12 a2       	std	Z+34, r1	; 0x22
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	be 01       	movw	r22, r28
     c34:	6a 5f       	subi	r22, 0xFA	; 250
     c36:	7f 4f       	sbci	r23, 0xFF	; 255
     c38:	ce 01       	movw	r24, r28
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <xTaskCheckForTimeOut>
     c40:	81 11       	cpse	r24, r1
     c42:	17 c0       	rjmp	.+46     	; 0xc72 <xQueueReceive+0xee>
     c44:	c8 01       	movw	r24, r16
     c46:	93 dd       	rcall	.-1242   	; 0x76e <prvIsQueueEmpty>
     c48:	88 23       	and	r24, r24
     c4a:	79 f0       	breq	.+30     	; 0xc6a <xQueueReceive+0xe6>
     c4c:	4e 81       	ldd	r20, Y+6	; 0x06
     c4e:	5f 81       	ldd	r21, Y+7	; 0x07
     c50:	68 85       	ldd	r22, Y+8	; 0x08
     c52:	79 85       	ldd	r23, Y+9	; 0x09
     c54:	c8 01       	movw	r24, r16
     c56:	43 96       	adiw	r24, 0x13	; 19
     c58:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <vTaskPlaceOnEventList>
     c5c:	c8 01       	movw	r24, r16
     c5e:	1b de       	rcall	.-970    	; 0x896 <prvUnlockQueue>
     c60:	3f d7       	rcall	.+3710   	; 0x1ae0 <xTaskResumeAll>
     c62:	81 11       	cpse	r24, r1
     c64:	a6 cf       	rjmp	.-180    	; 0xbb2 <xQueueReceive+0x2e>
     c66:	bb dc       	rcall	.-1674   	; 0x5de <vPortYield>
     c68:	a4 cf       	rjmp	.-184    	; 0xbb2 <xQueueReceive+0x2e>
     c6a:	c8 01       	movw	r24, r16
     c6c:	14 de       	rcall	.-984    	; 0x896 <prvUnlockQueue>
     c6e:	38 d7       	rcall	.+3696   	; 0x1ae0 <xTaskResumeAll>
     c70:	a0 cf       	rjmp	.-192    	; 0xbb2 <xQueueReceive+0x2e>
     c72:	c8 01       	movw	r24, r16
     c74:	10 de       	rcall	.-992    	; 0x896 <prvUnlockQueue>
     c76:	34 d7       	rcall	.+3688   	; 0x1ae0 <xTaskResumeAll>
     c78:	c8 01       	movw	r24, r16
     c7a:	79 dd       	rcall	.-1294   	; 0x76e <prvIsQueueEmpty>
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <xQueueReceive+0xfe>
     c80:	98 cf       	rjmp	.-208    	; 0xbb2 <xQueueReceive+0x2e>
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	29 96       	adiw	r28, 0x09	; 9
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	08 95       	ret

00000ca2 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	0f 92       	push	r0
     cae:	89 a1       	ldd	r24, Y+33	; 0x21
     cb0:	8f 3f       	cpi	r24, 0xFF	; 255
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <vQueueWaitForMessageRestricted+0x14>
     cb4:	19 a2       	std	Y+33, r1	; 0x21
     cb6:	8a a1       	ldd	r24, Y+34	; 0x22
     cb8:	8f 3f       	cpi	r24, 0xFF	; 255
     cba:	09 f4       	brne	.+2      	; 0xcbe <vQueueWaitForMessageRestricted+0x1c>
     cbc:	1a a2       	std	Y+34, r1	; 0x22
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     cc2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cc4:	81 11       	cpse	r24, r1
     cc6:	04 c0       	rjmp	.+8      	; 0xcd0 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     cc8:	ce 01       	movw	r24, r28
     cca:	43 96       	adiw	r24, 0x13	; 19
     ccc:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     cd0:	ce 01       	movw	r24, r28
     cd2:	e1 dd       	rcall	.-1086   	; 0x896 <prvUnlockQueue>
    }
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     cda:	fc 01       	movw	r30, r24
     cdc:	44 81       	ldd	r20, Z+4	; 0x04
     cde:	55 81       	ldd	r21, Z+5	; 0x05
     ce0:	22 81       	ldd	r18, Z+2	; 0x02
     ce2:	33 81       	ldd	r19, Z+3	; 0x03
     ce4:	24 0f       	add	r18, r20
     ce6:	35 1f       	adc	r19, r21
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	b9 01       	movw	r22, r18
     cee:	68 1b       	sub	r22, r24
     cf0:	79 0b       	sbc	r23, r25
     cf2:	cb 01       	movw	r24, r22
     cf4:	64 17       	cp	r22, r20
     cf6:	75 07       	cpc	r23, r21
     cf8:	10 f0       	brcs	.+4      	; 0xcfe <prvBytesInBuffer+0x24>
     cfa:	84 1b       	sub	r24, r20
     cfc:	95 0b       	sbc	r25, r21
     cfe:	08 95       	ret

00000d00 <prvInitialiseNewStreamBuffer>:
     d00:	0f 93       	push	r16
     d02:	fc 01       	movw	r30, r24
     d04:	8f e0       	ldi	r24, 0x0F	; 15
     d06:	df 01       	movw	r26, r30
     d08:	1d 92       	st	X+, r1
     d0a:	8a 95       	dec	r24
     d0c:	e9 f7       	brne	.-6      	; 0xd08 <prvInitialiseNewStreamBuffer+0x8>
     d0e:	75 87       	std	Z+13, r23	; 0x0d
     d10:	64 87       	std	Z+12, r22	; 0x0c
     d12:	55 83       	std	Z+5, r21	; 0x05
     d14:	44 83       	std	Z+4, r20	; 0x04
     d16:	37 83       	std	Z+7, r19	; 0x07
     d18:	26 83       	std	Z+6, r18	; 0x06
     d1a:	06 87       	std	Z+14, r16	; 0x0e
     d1c:	0f 91       	pop	r16
     d1e:	08 95       	ret

00000d20 <prvWriteBytesToBuffer>:
     d20:	af 92       	push	r10
     d22:	bf 92       	push	r11
     d24:	cf 92       	push	r12
     d26:	df 92       	push	r13
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	6c 01       	movw	r12, r24
     d36:	5b 01       	movw	r10, r22
     d38:	7a 01       	movw	r14, r20
     d3a:	fc 01       	movw	r30, r24
     d3c:	c2 81       	ldd	r28, Z+2	; 0x02
     d3e:	d3 81       	ldd	r29, Z+3	; 0x03
     d40:	04 81       	ldd	r16, Z+4	; 0x04
     d42:	15 81       	ldd	r17, Z+5	; 0x05
     d44:	0c 1b       	sub	r16, r28
     d46:	1d 0b       	sbc	r17, r29
     d48:	40 17       	cp	r20, r16
     d4a:	51 07       	cpc	r21, r17
     d4c:	08 f4       	brcc	.+2      	; 0xd50 <prvWriteBytesToBuffer+0x30>
     d4e:	8a 01       	movw	r16, r20
     d50:	f6 01       	movw	r30, r12
     d52:	84 85       	ldd	r24, Z+12	; 0x0c
     d54:	95 85       	ldd	r25, Z+13	; 0x0d
     d56:	a8 01       	movw	r20, r16
     d58:	b5 01       	movw	r22, r10
     d5a:	8c 0f       	add	r24, r28
     d5c:	9d 1f       	adc	r25, r29
     d5e:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <memcpy>
     d62:	0e 15       	cp	r16, r14
     d64:	1f 05       	cpc	r17, r15
     d66:	58 f4       	brcc	.+22     	; 0xd7e <prvWriteBytesToBuffer+0x5e>
     d68:	a7 01       	movw	r20, r14
     d6a:	40 1b       	sub	r20, r16
     d6c:	51 0b       	sbc	r21, r17
     d6e:	b5 01       	movw	r22, r10
     d70:	60 0f       	add	r22, r16
     d72:	71 1f       	adc	r23, r17
     d74:	f6 01       	movw	r30, r12
     d76:	84 85       	ldd	r24, Z+12	; 0x0c
     d78:	95 85       	ldd	r25, Z+13	; 0x0d
     d7a:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <memcpy>
     d7e:	ce 01       	movw	r24, r28
     d80:	8e 0d       	add	r24, r14
     d82:	9f 1d       	adc	r25, r15
     d84:	f6 01       	movw	r30, r12
     d86:	24 81       	ldd	r18, Z+4	; 0x04
     d88:	35 81       	ldd	r19, Z+5	; 0x05
     d8a:	82 17       	cp	r24, r18
     d8c:	93 07       	cpc	r25, r19
     d8e:	10 f0       	brcs	.+4      	; 0xd94 <prvWriteBytesToBuffer+0x74>
     d90:	82 1b       	sub	r24, r18
     d92:	93 0b       	sbc	r25, r19
     d94:	f6 01       	movw	r30, r12
     d96:	93 83       	std	Z+3, r25	; 0x03
     d98:	82 83       	std	Z+2, r24	; 0x02
     d9a:	c7 01       	movw	r24, r14
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	08 95       	ret

00000db2 <prvWriteMessageToBuffer>:
     db2:	cf 92       	push	r12
     db4:	df 92       	push	r13
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	1f 92       	push	r1
     dc4:	1f 92       	push	r1
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	7c 01       	movw	r14, r24
     dcc:	6b 01       	movw	r12, r22
     dce:	5a 83       	std	Y+2, r21	; 0x02
     dd0:	49 83       	std	Y+1, r20	; 0x01
     dd2:	21 15       	cp	r18, r1
     dd4:	31 05       	cpc	r19, r1
     dd6:	c1 f0       	breq	.+48     	; 0xe08 <prvWriteMessageToBuffer+0x56>
     dd8:	fc 01       	movw	r30, r24
     dda:	86 85       	ldd	r24, Z+14	; 0x0e
     ddc:	80 fd       	sbrc	r24, 0
     dde:	08 c0       	rjmp	.+16     	; 0xdf0 <prvWriteMessageToBuffer+0x3e>
     de0:	42 17       	cp	r20, r18
     de2:	53 07       	cpc	r21, r19
     de4:	08 f4       	brcc	.+2      	; 0xde8 <prvWriteMessageToBuffer+0x36>
     de6:	9a 01       	movw	r18, r20
     de8:	3a 83       	std	Y+2, r19	; 0x02
     dea:	29 83       	std	Y+1, r18	; 0x01
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <prvWriteMessageToBuffer+0x5c>
     df0:	20 17       	cp	r18, r16
     df2:	31 07       	cpc	r19, r17
     df4:	58 f0       	brcs	.+22     	; 0xe0c <prvWriteMessageToBuffer+0x5a>
     df6:	42 e0       	ldi	r20, 0x02	; 2
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	be 01       	movw	r22, r28
     dfc:	6f 5f       	subi	r22, 0xFF	; 255
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	c7 01       	movw	r24, r14
     e02:	8e df       	rcall	.-228    	; 0xd20 <prvWriteBytesToBuffer>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <prvWriteMessageToBuffer+0x5c>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <prvWriteMessageToBuffer+0x5c>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	88 23       	and	r24, r24
     e10:	31 f0       	breq	.+12     	; 0xe1e <prvWriteMessageToBuffer+0x6c>
     e12:	49 81       	ldd	r20, Y+1	; 0x01
     e14:	5a 81       	ldd	r21, Y+2	; 0x02
     e16:	b6 01       	movw	r22, r12
     e18:	c7 01       	movw	r24, r14
     e1a:	82 df       	rcall	.-252    	; 0xd20 <prvWriteBytesToBuffer>
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <prvWriteMessageToBuffer+0x70>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	08 95       	ret

00000e38 <prvReadBytesFromBuffer>:
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	7c 01       	movw	r14, r24
     e4e:	5b 01       	movw	r10, r22
     e50:	e9 01       	movw	r28, r18
     e52:	42 17       	cp	r20, r18
     e54:	53 07       	cpc	r21, r19
     e56:	08 f4       	brcc	.+2      	; 0xe5a <prvReadBytesFromBuffer+0x22>
     e58:	ea 01       	movw	r28, r20
     e5a:	20 97       	sbiw	r28, 0x00	; 0
     e5c:	81 f1       	breq	.+96     	; 0xebe <prvReadBytesFromBuffer+0x86>
     e5e:	f7 01       	movw	r30, r14
     e60:	00 81       	ld	r16, Z
     e62:	11 81       	ldd	r17, Z+1	; 0x01
     e64:	84 81       	ldd	r24, Z+4	; 0x04
     e66:	95 81       	ldd	r25, Z+5	; 0x05
     e68:	80 1b       	sub	r24, r16
     e6a:	91 0b       	sbc	r25, r17
     e6c:	6e 01       	movw	r12, r28
     e6e:	8c 17       	cp	r24, r28
     e70:	9d 07       	cpc	r25, r29
     e72:	08 f4       	brcc	.+2      	; 0xe76 <prvReadBytesFromBuffer+0x3e>
     e74:	6c 01       	movw	r12, r24
     e76:	f7 01       	movw	r30, r14
     e78:	64 85       	ldd	r22, Z+12	; 0x0c
     e7a:	75 85       	ldd	r23, Z+13	; 0x0d
     e7c:	60 0f       	add	r22, r16
     e7e:	71 1f       	adc	r23, r17
     e80:	a6 01       	movw	r20, r12
     e82:	c5 01       	movw	r24, r10
     e84:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <memcpy>
     e88:	cc 16       	cp	r12, r28
     e8a:	dd 06       	cpc	r13, r29
     e8c:	58 f4       	brcc	.+22     	; 0xea4 <prvReadBytesFromBuffer+0x6c>
     e8e:	ae 01       	movw	r20, r28
     e90:	4c 19       	sub	r20, r12
     e92:	5d 09       	sbc	r21, r13
     e94:	f7 01       	movw	r30, r14
     e96:	64 85       	ldd	r22, Z+12	; 0x0c
     e98:	75 85       	ldd	r23, Z+13	; 0x0d
     e9a:	c5 01       	movw	r24, r10
     e9c:	8c 0d       	add	r24, r12
     e9e:	9d 1d       	adc	r25, r13
     ea0:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <memcpy>
     ea4:	0c 0f       	add	r16, r28
     ea6:	1d 1f       	adc	r17, r29
     ea8:	f7 01       	movw	r30, r14
     eaa:	84 81       	ldd	r24, Z+4	; 0x04
     eac:	95 81       	ldd	r25, Z+5	; 0x05
     eae:	08 17       	cp	r16, r24
     eb0:	19 07       	cpc	r17, r25
     eb2:	10 f0       	brcs	.+4      	; 0xeb8 <prvReadBytesFromBuffer+0x80>
     eb4:	08 1b       	sub	r16, r24
     eb6:	19 0b       	sbc	r17, r25
     eb8:	f7 01       	movw	r30, r14
     eba:	11 83       	std	Z+1, r17	; 0x01
     ebc:	00 83       	st	Z, r16
     ebe:	ce 01       	movw	r24, r28
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	af 90       	pop	r10
     ed4:	08 95       	ret

00000ed6 <prvReadMessageFromBuffer>:
     ed6:	6f 92       	push	r6
     ed8:	7f 92       	push	r7
     eda:	8f 92       	push	r8
     edc:	9f 92       	push	r9
     ede:	af 92       	push	r10
     ee0:	bf 92       	push	r11
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	1f 92       	push	r1
     ef4:	1f 92       	push	r1
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	6c 01       	movw	r12, r24
     efc:	4b 01       	movw	r8, r22
     efe:	5a 01       	movw	r10, r20
     f00:	79 01       	movw	r14, r18
     f02:	01 15       	cp	r16, r1
     f04:	11 05       	cpc	r17, r1
     f06:	b1 f0       	breq	.+44     	; 0xf34 <prvReadMessageFromBuffer+0x5e>
     f08:	fc 01       	movw	r30, r24
     f0a:	60 80       	ld	r6, Z
     f0c:	71 80       	ldd	r7, Z+1	; 0x01
     f0e:	a8 01       	movw	r20, r16
     f10:	be 01       	movw	r22, r28
     f12:	6f 5f       	subi	r22, 0xFF	; 255
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	90 df       	rcall	.-224    	; 0xe38 <prvReadBytesFromBuffer>
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	e0 1a       	sub	r14, r16
     f1e:	f1 0a       	sbc	r15, r17
     f20:	a8 16       	cp	r10, r24
     f22:	b9 06       	cpc	r11, r25
     f24:	30 f4       	brcc	.+12     	; 0xf32 <prvReadMessageFromBuffer+0x5c>
     f26:	f6 01       	movw	r30, r12
     f28:	71 82       	std	Z+1, r7	; 0x01
     f2a:	60 82       	st	Z, r6
     f2c:	a1 2c       	mov	r10, r1
     f2e:	b1 2c       	mov	r11, r1
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <prvReadMessageFromBuffer+0x5e>
     f32:	5c 01       	movw	r10, r24
     f34:	97 01       	movw	r18, r14
     f36:	a5 01       	movw	r20, r10
     f38:	b4 01       	movw	r22, r8
     f3a:	c6 01       	movw	r24, r12
     f3c:	7d df       	rcall	.-262    	; 0xe38 <prvReadBytesFromBuffer>
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	7f 90       	pop	r7
     f5c:	6f 90       	pop	r6
     f5e:	08 95       	ret

00000f60 <xStreamBufferGenericCreate>:
     f60:	cf 92       	push	r12
     f62:	df 92       	push	r13
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	ec 01       	movw	r28, r24
     f70:	6b 01       	movw	r12, r22
     f72:	41 30       	cpi	r20, 0x01	; 1
     f74:	11 f4       	brne	.+4      	; 0xf7a <xStreamBufferGenericCreate+0x1a>
     f76:	01 e0       	ldi	r16, 0x01	; 1
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <xStreamBufferGenericCreate+0x1c>
     f7a:	00 e0       	ldi	r16, 0x00	; 0
     f7c:	c1 14       	cp	r12, r1
     f7e:	d1 04       	cpc	r13, r1
     f80:	19 f4       	brne	.+6      	; 0xf88 <xStreamBufferGenericCreate+0x28>
     f82:	cc 24       	eor	r12, r12
     f84:	c3 94       	inc	r12
     f86:	d1 2c       	mov	r13, r1
     f88:	ce 01       	movw	r24, r28
     f8a:	40 96       	adiw	r24, 0x10	; 16
     f8c:	c8 17       	cp	r28, r24
     f8e:	d9 07       	cpc	r29, r25
     f90:	20 f4       	brcc	.+8      	; 0xf9a <xStreamBufferGenericCreate+0x3a>
     f92:	21 96       	adiw	r28, 0x01	; 1
     f94:	70 d9       	rcall	.-3360   	; 0x276 <pvPortMalloc>
     f96:	7c 01       	movw	r14, r24
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <xStreamBufferGenericCreate+0x3e>
     f9a:	e1 2c       	mov	r14, r1
     f9c:	f1 2c       	mov	r15, r1
     f9e:	e1 14       	cp	r14, r1
     fa0:	f1 04       	cpc	r15, r1
     fa2:	39 f0       	breq	.+14     	; 0xfb2 <xStreamBufferGenericCreate+0x52>
     fa4:	96 01       	movw	r18, r12
     fa6:	ae 01       	movw	r20, r28
     fa8:	b7 01       	movw	r22, r14
     faa:	61 5f       	subi	r22, 0xF1	; 241
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	c7 01       	movw	r24, r14
     fb0:	a7 de       	rcall	.-690    	; 0xd00 <prvInitialiseNewStreamBuffer>
     fb2:	c7 01       	movw	r24, r14
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	08 95       	ret

00000fc4 <xStreamBufferReset>:
     fc4:	0f 93       	push	r16
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	0f 92       	push	r0
     fcc:	fc 01       	movw	r30, r24
     fce:	20 85       	ldd	r18, Z+8	; 0x08
     fd0:	31 85       	ldd	r19, Z+9	; 0x09
     fd2:	23 2b       	or	r18, r19
     fd4:	71 f4       	brne	.+28     	; 0xff2 <xStreamBufferReset+0x2e>
     fd6:	22 85       	ldd	r18, Z+10	; 0x0a
     fd8:	33 85       	ldd	r19, Z+11	; 0x0b
     fda:	23 2b       	or	r18, r19
     fdc:	61 f4       	brne	.+24     	; 0xff6 <xStreamBufferReset+0x32>
     fde:	26 81       	ldd	r18, Z+6	; 0x06
     fe0:	37 81       	ldd	r19, Z+7	; 0x07
     fe2:	44 81       	ldd	r20, Z+4	; 0x04
     fe4:	55 81       	ldd	r21, Z+5	; 0x05
     fe6:	64 85       	ldd	r22, Z+12	; 0x0c
     fe8:	75 85       	ldd	r23, Z+13	; 0x0d
     fea:	06 85       	ldd	r16, Z+14	; 0x0e
     fec:	89 de       	rcall	.-750    	; 0xd00 <prvInitialiseNewStreamBuffer>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	03 c0       	rjmp	.+6      	; 0xff8 <xStreamBufferReset+0x34>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <xStreamBufferReset+0x34>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <xStreamBufferSpacesAvailable>:
    1000:	fc 01       	movw	r30, r24
    1002:	24 81       	ldd	r18, Z+4	; 0x04
    1004:	35 81       	ldd	r19, Z+5	; 0x05
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	42 81       	ldd	r20, Z+2	; 0x02
    1010:	53 81       	ldd	r21, Z+3	; 0x03
    1012:	84 1b       	sub	r24, r20
    1014:	95 0b       	sbc	r25, r21
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	82 17       	cp	r24, r18
    101a:	93 07       	cpc	r25, r19
    101c:	10 f0       	brcs	.+4      	; 0x1022 <xStreamBufferSpacesAvailable+0x22>
    101e:	82 1b       	sub	r24, r18
    1020:	93 0b       	sbc	r25, r19
    1022:	08 95       	ret

00001024 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1024:	2f 92       	push	r2
    1026:	3f 92       	push	r3
    1028:	4f 92       	push	r4
    102a:	5f 92       	push	r5
    102c:	6f 92       	push	r6
    102e:	7f 92       	push	r7
    1030:	8f 92       	push	r8
    1032:	9f 92       	push	r9
    1034:	af 92       	push	r10
    1036:	bf 92       	push	r11
    1038:	cf 92       	push	r12
    103a:	df 92       	push	r13
    103c:	ef 92       	push	r14
    103e:	ff 92       	push	r15
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	2b 97       	sbiw	r28, 0x0b	; 11
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	4c 01       	movw	r8, r24
    105a:	7b 87       	std	Y+11, r23	; 0x0b
    105c:	6a 87       	std	Y+10, r22	; 0x0a
    105e:	1a 01       	movw	r2, r20
    1060:	0e 83       	std	Y+6, r16	; 0x06
    1062:	1f 83       	std	Y+7, r17	; 0x07
    1064:	28 87       	std	Y+8, r18	; 0x08
    1066:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1068:	fc 01       	movw	r30, r24
    106a:	84 81       	ldd	r24, Z+4	; 0x04
    106c:	95 81       	ldd	r25, Z+5	; 0x05
    106e:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1070:	26 85       	ldd	r18, Z+14	; 0x0e
    1072:	20 ff       	sbrs	r18, 0
    1074:	0c c0       	rjmp	.+24     	; 0x108e <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1076:	2a 01       	movw	r4, r20
    1078:	f2 e0       	ldi	r31, 0x02	; 2
    107a:	4f 0e       	add	r4, r31
    107c:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    107e:	84 15       	cp	r24, r4
    1080:	95 05       	cpc	r25, r5
    1082:	58 f4       	brcc	.+22     	; 0x109a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1084:	1e 82       	std	Y+6, r1	; 0x06
    1086:	1f 82       	std	Y+7, r1	; 0x07
    1088:	18 86       	std	Y+8, r1	; 0x08
    108a:	19 86       	std	Y+9, r1	; 0x09
    108c:	06 c0       	rjmp	.+12     	; 0x109a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    108e:	84 17       	cp	r24, r20
    1090:	95 07       	cpc	r25, r21
    1092:	10 f0       	brcs	.+4      	; 0x1098 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1094:	2a 01       	movw	r4, r20
    1096:	01 c0       	rjmp	.+2      	; 0x109a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1098:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    109a:	8e 81       	ldd	r24, Y+6	; 0x06
    109c:	9f 81       	ldd	r25, Y+7	; 0x07
    109e:	a8 85       	ldd	r26, Y+8	; 0x08
    10a0:	b9 85       	ldd	r27, Y+9	; 0x09
    10a2:	89 2b       	or	r24, r25
    10a4:	8a 2b       	or	r24, r26
    10a6:	8b 2b       	or	r24, r27
    10a8:	09 f4       	brne	.+2      	; 0x10ac <xStreamBufferSend+0x88>
    10aa:	36 c0       	rjmp	.+108    	; 0x1118 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	e0 d7       	rcall	.+4032   	; 0x2072 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    10b8:	c4 01       	movw	r24, r8
    10ba:	a2 df       	rcall	.-188    	; 0x1000 <xStreamBufferSpacesAvailable>
    10bc:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    10be:	84 15       	cp	r24, r4
    10c0:	95 05       	cpc	r25, r5
    10c2:	38 f5       	brcc	.+78     	; 0x1112 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    10ce:	0e 94 ca 10 	call	0x2194	; 0x2194 <xTaskGetCurrentTaskHandle>
    10d2:	f4 01       	movw	r30, r8
    10d4:	93 87       	std	Z+11, r25	; 0x0b
    10d6:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    10dc:	ae 80       	ldd	r10, Y+6	; 0x06
    10de:	bf 80       	ldd	r11, Y+7	; 0x07
    10e0:	c8 84       	ldd	r12, Y+8	; 0x08
    10e2:	d9 84       	ldd	r13, Y+9	; 0x09
    10e4:	e1 2c       	mov	r14, r1
    10e6:	f1 2c       	mov	r15, r1
    10e8:	00 e0       	ldi	r16, 0x00	; 0
    10ea:	10 e0       	ldi	r17, 0x00	; 0
    10ec:	98 01       	movw	r18, r16
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	ba 01       	movw	r22, r20
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 38 11 	call	0x2270	; 0x2270 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    10fa:	f4 01       	movw	r30, r8
    10fc:	13 86       	std	Z+11, r1	; 0x0b
    10fe:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1100:	be 01       	movw	r22, r28
    1102:	6a 5f       	subi	r22, 0xFA	; 250
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	ce 01       	movw	r24, r28
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	da d7       	rcall	.+4020   	; 0x20c0 <xTaskCheckForTimeOut>
    110c:	88 23       	and	r24, r24
    110e:	89 f2       	breq	.-94     	; 0x10b2 <xStreamBufferSend+0x8e>
    1110:	05 c0       	rjmp	.+10     	; 0x111c <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
                    break;
    1116:	02 c0       	rjmp	.+4      	; 0x111c <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1118:	61 2c       	mov	r6, r1
    111a:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    111c:	61 14       	cp	r6, r1
    111e:	71 04       	cpc	r7, r1
    1120:	19 f4       	brne	.+6      	; 0x1128 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1122:	c4 01       	movw	r24, r8
    1124:	6d df       	rcall	.-294    	; 0x1000 <xStreamBufferSpacesAvailable>
    1126:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1128:	82 01       	movw	r16, r4
    112a:	93 01       	movw	r18, r6
    112c:	a1 01       	movw	r20, r2
    112e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1130:	7b 85       	ldd	r23, Y+11	; 0x0b
    1132:	c4 01       	movw	r24, r8
    1134:	3e de       	rcall	.-900    	; 0xdb2 <prvWriteMessageToBuffer>
    1136:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1138:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    113a:	e9 f0       	breq	.+58     	; 0x1176 <xStreamBufferSend+0x152>
    113c:	c4 01       	movw	r24, r8
    113e:	cd dd       	rcall	.-1126   	; 0xcda <prvBytesInBuffer>
    1140:	f4 01       	movw	r30, r8
    1142:	26 81       	ldd	r18, Z+6	; 0x06
    1144:	37 81       	ldd	r19, Z+7	; 0x07
    1146:	82 17       	cp	r24, r18
    1148:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    114a:	a8 f0       	brcs	.+42     	; 0x1176 <xStreamBufferSend+0x152>
    114c:	89 d3       	rcall	.+1810   	; 0x1860 <vTaskSuspendAll>
    114e:	f4 01       	movw	r30, r8
    1150:	80 85       	ldd	r24, Z+8	; 0x08
    1152:	91 85       	ldd	r25, Z+9	; 0x09
    1154:	89 2b       	or	r24, r25
    1156:	71 f0       	breq	.+28     	; 0x1174 <xStreamBufferSend+0x150>
    1158:	80 85       	ldd	r24, Z+8	; 0x08
    115a:	91 85       	ldd	r25, Z+9	; 0x09
    115c:	e1 2c       	mov	r14, r1
    115e:	f1 2c       	mov	r15, r1
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	a9 01       	movw	r20, r18
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	0e 94 df 11 	call	0x23be	; 0x23be <xTaskGenericNotify>
    116e:	f4 01       	movw	r30, r8
    1170:	11 86       	std	Z+9, r1	; 0x09
    1172:	10 86       	std	Z+8, r1	; 0x08
    1174:	b5 d4       	rcall	.+2410   	; 0x1ae0 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1176:	c6 01       	movw	r24, r12
    1178:	2b 96       	adiw	r28, 0x0b	; 11
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	9f 90       	pop	r9
    119a:	8f 90       	pop	r8
    119c:	7f 90       	pop	r7
    119e:	6f 90       	pop	r6
    11a0:	5f 90       	pop	r5
    11a2:	4f 90       	pop	r4
    11a4:	3f 90       	pop	r3
    11a6:	2f 90       	pop	r2
    11a8:	08 95       	ret

000011aa <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	ec 01       	movw	r28, r24
    11c0:	7b 01       	movw	r14, r22
    11c2:	5a 01       	movw	r10, r20
    11c4:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    11c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    11c8:	80 ff       	sbrs	r24, 0
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    11cc:	8a 01       	movw	r16, r20
    11ce:	0e 5f       	subi	r16, 0xFE	; 254
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    11d4:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    11d6:	ce 01       	movw	r24, r28
    11d8:	13 df       	rcall	.-474    	; 0x1000 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    11da:	9c 01       	movw	r18, r24
    11dc:	a5 01       	movw	r20, r10
    11de:	b7 01       	movw	r22, r14
    11e0:	ce 01       	movw	r24, r28
    11e2:	e7 dd       	rcall	.-1074   	; 0xdb2 <prvWriteMessageToBuffer>
    11e4:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    11e6:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    11e8:	c1 f0       	breq	.+48     	; 0x121a <xStreamBufferSendFromISR+0x70>
    11ea:	ce 01       	movw	r24, r28
    11ec:	76 dd       	rcall	.-1300   	; 0xcda <prvBytesInBuffer>
    11ee:	2e 81       	ldd	r18, Y+6	; 0x06
    11f0:	3f 81       	ldd	r19, Y+7	; 0x07
    11f2:	82 17       	cp	r24, r18
    11f4:	93 07       	cpc	r25, r19
    11f6:	88 f0       	brcs	.+34     	; 0x121a <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    11f8:	88 85       	ldd	r24, Y+8	; 0x08
    11fa:	99 85       	ldd	r25, Y+9	; 0x09
    11fc:	89 2b       	or	r24, r25
    11fe:	69 f0       	breq	.+26     	; 0x121a <xStreamBufferSendFromISR+0x70>
    1200:	88 85       	ldd	r24, Y+8	; 0x08
    1202:	99 85       	ldd	r25, Y+9	; 0x09
    1204:	e1 2c       	mov	r14, r1
    1206:	f1 2c       	mov	r15, r1
    1208:	00 e0       	ldi	r16, 0x00	; 0
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	a9 01       	movw	r20, r18
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	0e 94 d6 12 	call	0x25ac	; 0x25ac <xTaskGenericNotifyFromISR>
    1216:	19 86       	std	Y+9, r1	; 0x09
    1218:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    121a:	c5 01       	movw	r24, r10
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	bf 90       	pop	r11
    122e:	af 90       	pop	r10
    1230:	08 95       	ret

00001232 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1232:	4f 92       	push	r4
    1234:	5f 92       	push	r5
    1236:	6f 92       	push	r6
    1238:	7f 92       	push	r7
    123a:	8f 92       	push	r8
    123c:	9f 92       	push	r9
    123e:	af 92       	push	r10
    1240:	bf 92       	push	r11
    1242:	cf 92       	push	r12
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	ec 01       	movw	r28, r24
    1254:	2b 01       	movw	r4, r22
    1256:	3a 01       	movw	r6, r20
    1258:	58 01       	movw	r10, r16
    125a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    125c:	8e 85       	ldd	r24, Y+14	; 0x0e
    125e:	80 ff       	sbrs	r24, 0
    1260:	05 c0       	rjmp	.+10     	; 0x126c <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1262:	68 94       	set
    1264:	88 24       	eor	r8, r8
    1266:	81 f8       	bld	r8, 1
    1268:	91 2c       	mov	r9, r1
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    126c:	81 2c       	mov	r8, r1
    126e:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1270:	a1 14       	cp	r10, r1
    1272:	b1 04       	cpc	r11, r1
    1274:	c1 04       	cpc	r12, r1
    1276:	d1 04       	cpc	r13, r1
    1278:	31 f1       	breq	.+76     	; 0x12c6 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1280:	ce 01       	movw	r24, r28
    1282:	2b dd       	rcall	.-1450   	; 0xcda <prvBytesInBuffer>
    1284:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1286:	88 16       	cp	r8, r24
    1288:	99 06       	cpc	r9, r25
    128a:	40 f0       	brcs	.+16     	; 0x129c <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1296:	7e d7       	rcall	.+3836   	; 0x2194 <xTaskGetCurrentTaskHandle>
    1298:	99 87       	std	Y+9, r25	; 0x09
    129a:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    12a0:	8e 14       	cp	r8, r14
    12a2:	9f 04       	cpc	r9, r15
    12a4:	98 f0       	brcs	.+38     	; 0x12cc <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    12a6:	e1 2c       	mov	r14, r1
    12a8:	f1 2c       	mov	r15, r1
    12aa:	00 e0       	ldi	r16, 0x00	; 0
    12ac:	10 e0       	ldi	r17, 0x00	; 0
    12ae:	98 01       	movw	r18, r16
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	ba 01       	movw	r22, r20
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	db d7       	rcall	.+4022   	; 0x2270 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    12ba:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    12bc:	18 86       	std	Y+8, r1	; 0x08
    12be:	ce 01       	movw	r24, r28
    12c0:	0c dd       	rcall	.-1512   	; 0xcda <prvBytesInBuffer>
    12c2:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <xStreamBufferReceive+0x9a>
    12c6:	ce 01       	movw	r24, r28
    12c8:	08 dd       	rcall	.-1520   	; 0xcda <prvBytesInBuffer>
    12ca:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    12cc:	8e 14       	cp	r8, r14
    12ce:	9f 04       	cpc	r9, r15
    12d0:	e8 f4       	brcc	.+58     	; 0x130c <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    12d2:	84 01       	movw	r16, r8
    12d4:	97 01       	movw	r18, r14
    12d6:	a3 01       	movw	r20, r6
    12d8:	b2 01       	movw	r22, r4
    12da:	ce 01       	movw	r24, r28
    12dc:	fc dd       	rcall	.-1032   	; 0xed6 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    12de:	6c 01       	movw	r12, r24
    12e0:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    12e2:	b1 f0       	breq	.+44     	; 0x1310 <xStreamBufferReceive+0xde>
    12e4:	bd d2       	rcall	.+1402   	; 0x1860 <vTaskSuspendAll>
    12e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ea:	89 2b       	or	r24, r25
    12ec:	69 f0       	breq	.+26     	; 0x1308 <xStreamBufferReceive+0xd6>
    12ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f2:	e1 2c       	mov	r14, r1
    12f4:	f1 2c       	mov	r15, r1
    12f6:	00 e0       	ldi	r16, 0x00	; 0
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	a9 01       	movw	r20, r18
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	0e 94 df 11 	call	0x23be	; 0x23be <xTaskGenericNotify>
    1304:	1b 86       	std	Y+11, r1	; 0x0b
    1306:	1a 86       	std	Y+10, r1	; 0x0a
    1308:	eb d3       	rcall	.+2006   	; 0x1ae0 <xTaskResumeAll>
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    130c:	c1 2c       	mov	r12, r1
    130e:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1310:	c6 01       	movw	r24, r12
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	cf 90       	pop	r12
    1322:	bf 90       	pop	r11
    1324:	af 90       	pop	r10
    1326:	9f 90       	pop	r9
    1328:	8f 90       	pop	r8
    132a:	7f 90       	pop	r7
    132c:	6f 90       	pop	r6
    132e:	5f 90       	pop	r5
    1330:	4f 90       	pop	r4
    1332:	08 95       	ret

00001334 <prvResetNextTaskUnblockTime>:
    1334:	e0 91 4d 11 	lds	r30, 0x114D	; 0x80114d <pxDelayedTaskList>
    1338:	f0 91 4e 11 	lds	r31, 0x114E	; 0x80114e <pxDelayedTaskList+0x1>
    133c:	80 81       	ld	r24, Z
    133e:	81 11       	cpse	r24, r1
    1340:	0c c0       	rjmp	.+24     	; 0x135a <prvResetNextTaskUnblockTime+0x26>
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	9f ef       	ldi	r25, 0xFF	; 255
    1346:	dc 01       	movw	r26, r24
    1348:	80 93 17 11 	sts	0x1117, r24	; 0x801117 <xNextTaskUnblockTime>
    134c:	90 93 18 11 	sts	0x1118, r25	; 0x801118 <xNextTaskUnblockTime+0x1>
    1350:	a0 93 19 11 	sts	0x1119, r26	; 0x801119 <xNextTaskUnblockTime+0x2>
    1354:	b0 93 1a 11 	sts	0x111A, r27	; 0x80111a <xNextTaskUnblockTime+0x3>
    1358:	08 95       	ret
    135a:	e0 91 4d 11 	lds	r30, 0x114D	; 0x80114d <pxDelayedTaskList>
    135e:	f0 91 4e 11 	lds	r31, 0x114E	; 0x80114e <pxDelayedTaskList+0x1>
    1362:	07 80       	ldd	r0, Z+7	; 0x07
    1364:	f0 85       	ldd	r31, Z+8	; 0x08
    1366:	e0 2d       	mov	r30, r0
    1368:	80 81       	ld	r24, Z
    136a:	91 81       	ldd	r25, Z+1	; 0x01
    136c:	a2 81       	ldd	r26, Z+2	; 0x02
    136e:	b3 81       	ldd	r27, Z+3	; 0x03
    1370:	80 93 17 11 	sts	0x1117, r24	; 0x801117 <xNextTaskUnblockTime>
    1374:	90 93 18 11 	sts	0x1118, r25	; 0x801118 <xNextTaskUnblockTime+0x1>
    1378:	a0 93 19 11 	sts	0x1119, r26	; 0x801119 <xNextTaskUnblockTime+0x2>
    137c:	b0 93 1a 11 	sts	0x111A, r27	; 0x80111a <xNextTaskUnblockTime+0x3>
    1380:	08 95       	ret

00001382 <prvDeleteTCB>:
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	ec 01       	movw	r28, r24
    1388:	8b 8d       	ldd	r24, Y+27	; 0x1b
    138a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    138c:	1d d8       	rcall	.-4038   	; 0x3c8 <vPortFree>
    138e:	ce 01       	movw	r24, r28
    1390:	1b d8       	rcall	.-4042   	; 0x3c8 <vPortFree>
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <prvInitialiseNewTask>:
    1398:	4f 92       	push	r4
    139a:	5f 92       	push	r5
    139c:	6f 92       	push	r6
    139e:	7f 92       	push	r7
    13a0:	8f 92       	push	r8
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	2c 01       	movw	r4, r24
    13b8:	5b 01       	movw	r10, r22
    13ba:	4a 01       	movw	r8, r20
    13bc:	39 01       	movw	r6, r18
    13be:	e6 01       	movw	r28, r12
    13c0:	65 ea       	ldi	r22, 0xA5	; 165
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c8:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <memset>
    13cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d0:	21 e0       	ldi	r18, 0x01	; 1
    13d2:	82 1a       	sub	r8, r18
    13d4:	91 08       	sbc	r9, r1
    13d6:	88 0e       	add	r8, r24
    13d8:	99 1e       	adc	r9, r25
    13da:	a1 14       	cp	r10, r1
    13dc:	b1 04       	cpc	r11, r1
    13de:	89 f4       	brne	.+34     	; 0x1402 <prvInitialiseNewTask+0x6a>
    13e0:	15 c0       	rjmp	.+42     	; 0x140c <prvInitialiseNewTask+0x74>
    13e2:	82 2f       	mov	r24, r18
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	f5 01       	movw	r30, r10
    13e8:	e8 0f       	add	r30, r24
    13ea:	f9 1f       	adc	r31, r25
    13ec:	30 81       	ld	r19, Z
    13ee:	de 01       	movw	r26, r28
    13f0:	a8 0f       	add	r26, r24
    13f2:	b9 1f       	adc	r27, r25
    13f4:	5d 96       	adiw	r26, 0x1d	; 29
    13f6:	3c 93       	st	X, r19
    13f8:	80 81       	ld	r24, Z
    13fa:	88 23       	and	r24, r24
    13fc:	29 f0       	breq	.+10     	; 0x1408 <prvInitialiseNewTask+0x70>
    13fe:	2f 5f       	subi	r18, 0xFF	; 255
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <prvInitialiseNewTask+0x6c>
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	20 31       	cpi	r18, 0x10	; 16
    1406:	68 f3       	brcs	.-38     	; 0x13e2 <prvInitialiseNewTask+0x4a>
    1408:	1c a6       	std	Y+44, r1	; 0x2c
    140a:	01 c0       	rjmp	.+2      	; 0x140e <prvInitialiseNewTask+0x76>
    140c:	1d 8e       	std	Y+29, r1	; 0x1d
    140e:	0a 30       	cpi	r16, 0x0A	; 10
    1410:	08 f0       	brcs	.+2      	; 0x1414 <prvInitialiseNewTask+0x7c>
    1412:	09 e0       	ldi	r16, 0x09	; 9
    1414:	0a 8f       	std	Y+26, r16	; 0x1a
    1416:	0d a7       	std	Y+45, r16	; 0x2d
    1418:	1e a6       	std	Y+46, r1	; 0x2e
    141a:	ce 01       	movw	r24, r28
    141c:	02 96       	adiw	r24, 0x02	; 2
    141e:	22 d8       	rcall	.-4028   	; 0x464 <vListInitialiseItem>
    1420:	ce 01       	movw	r24, r28
    1422:	0e 96       	adiw	r24, 0x0e	; 14
    1424:	1f d8       	rcall	.-4034   	; 0x464 <vListInitialiseItem>
    1426:	db 87       	std	Y+11, r29	; 0x0b
    1428:	ca 87       	std	Y+10, r28	; 0x0a
    142a:	8a e0       	ldi	r24, 0x0A	; 10
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e0       	ldi	r26, 0x00	; 0
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	80 1b       	sub	r24, r16
    1434:	91 09       	sbc	r25, r1
    1436:	a1 09       	sbc	r26, r1
    1438:	b1 09       	sbc	r27, r1
    143a:	8e 87       	std	Y+14, r24	; 0x0e
    143c:	9f 87       	std	Y+15, r25	; 0x0f
    143e:	a8 8b       	std	Y+16, r26	; 0x10
    1440:	b9 8b       	std	Y+17, r27	; 0x11
    1442:	df 8b       	std	Y+23, r29	; 0x17
    1444:	ce 8b       	std	Y+22, r28	; 0x16
    1446:	84 e0       	ldi	r24, 0x04	; 4
    1448:	fe 01       	movw	r30, r28
    144a:	bf 96       	adiw	r30, 0x2f	; 47
    144c:	df 01       	movw	r26, r30
    144e:	1d 92       	st	X+, r1
    1450:	8a 95       	dec	r24
    1452:	e9 f7       	brne	.-6      	; 0x144e <prvInitialiseNewTask+0xb6>
    1454:	1b aa       	std	Y+51, r1	; 0x33
    1456:	a3 01       	movw	r20, r6
    1458:	b2 01       	movw	r22, r4
    145a:	c4 01       	movw	r24, r8
    145c:	77 d8       	rcall	.-3858   	; 0x54c <pxPortInitialiseStack>
    145e:	99 83       	std	Y+1, r25	; 0x01
    1460:	88 83       	st	Y, r24
    1462:	e1 14       	cp	r14, r1
    1464:	f1 04       	cpc	r15, r1
    1466:	19 f0       	breq	.+6      	; 0x146e <prvInitialiseNewTask+0xd6>
    1468:	f7 01       	movw	r30, r14
    146a:	d1 83       	std	Z+1, r29	; 0x01
    146c:	c0 83       	st	Z, r28
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	bf 90       	pop	r11
    147e:	af 90       	pop	r10
    1480:	9f 90       	pop	r9
    1482:	8f 90       	pop	r8
    1484:	7f 90       	pop	r7
    1486:	6f 90       	pop	r6
    1488:	5f 90       	pop	r5
    148a:	4f 90       	pop	r4
    148c:	08 95       	ret

0000148e <prvInitialiseTaskLists>:
    148e:	cf 93       	push	r28
    1490:	c0 e0       	ldi	r28, 0x00	; 0
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <prvInitialiseTaskLists+0x18>
    1494:	2b e0       	ldi	r18, 0x0B	; 11
    1496:	c2 9f       	mul	r28, r18
    1498:	c0 01       	movw	r24, r0
    149a:	11 24       	eor	r1, r1
    149c:	8b 59       	subi	r24, 0x9B	; 155
    149e:	9e 4e       	sbci	r25, 0xEE	; 238
    14a0:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    14a4:	cf 5f       	subi	r28, 0xFF	; 255
    14a6:	ca 30       	cpi	r28, 0x0A	; 10
    14a8:	a8 f3       	brcs	.-22     	; 0x1494 <prvInitialiseTaskLists+0x6>
    14aa:	8a e5       	ldi	r24, 0x5A	; 90
    14ac:	91 e1       	ldi	r25, 0x11	; 17
    14ae:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    14b2:	8f e4       	ldi	r24, 0x4F	; 79
    14b4:	91 e1       	ldi	r25, 0x11	; 17
    14b6:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    14ba:	80 e4       	ldi	r24, 0x40	; 64
    14bc:	91 e1       	ldi	r25, 0x11	; 17
    14be:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    14c2:	85 e3       	ldi	r24, 0x35	; 53
    14c4:	91 e1       	ldi	r25, 0x11	; 17
    14c6:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    14ca:	89 e2       	ldi	r24, 0x29	; 41
    14cc:	91 e1       	ldi	r25, 0x11	; 17
    14ce:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    14d2:	8a e5       	ldi	r24, 0x5A	; 90
    14d4:	91 e1       	ldi	r25, 0x11	; 17
    14d6:	90 93 4e 11 	sts	0x114E, r25	; 0x80114e <pxDelayedTaskList+0x1>
    14da:	80 93 4d 11 	sts	0x114D, r24	; 0x80114d <pxDelayedTaskList>
    14de:	8f e4       	ldi	r24, 0x4F	; 79
    14e0:	91 e1       	ldi	r25, 0x11	; 17
    14e2:	90 93 4c 11 	sts	0x114C, r25	; 0x80114c <pxOverflowDelayedTaskList+0x1>
    14e6:	80 93 4b 11 	sts	0x114B, r24	; 0x80114b <pxOverflowDelayedTaskList>
    14ea:	cf 91       	pop	r28
    14ec:	08 95       	ret

000014ee <prvAddNewTaskToReadyList>:
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	ec 01       	movw	r28, r24
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	0f 92       	push	r0
    14fa:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <uxCurrentNumberOfTasks>
    14fe:	8f 5f       	subi	r24, 0xFF	; 255
    1500:	80 93 28 11 	sts	0x1128, r24	; 0x801128 <uxCurrentNumberOfTasks>
    1504:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1508:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    150c:	89 2b       	or	r24, r25
    150e:	51 f4       	brne	.+20     	; 0x1524 <prvAddNewTaskToReadyList+0x36>
    1510:	d0 93 d4 11 	sts	0x11D4, r29	; 0x8011d4 <pxCurrentTCB+0x1>
    1514:	c0 93 d3 11 	sts	0x11D3, r28	; 0x8011d3 <pxCurrentTCB>
    1518:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <uxCurrentNumberOfTasks>
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	91 f4       	brne	.+36     	; 0x1544 <prvAddNewTaskToReadyList+0x56>
    1520:	b6 df       	rcall	.-148    	; 0x148e <prvInitialiseTaskLists>
    1522:	10 c0       	rjmp	.+32     	; 0x1544 <prvAddNewTaskToReadyList+0x56>
    1524:	80 91 22 11 	lds	r24, 0x1122	; 0x801122 <xSchedulerRunning>
    1528:	81 11       	cpse	r24, r1
    152a:	0c c0       	rjmp	.+24     	; 0x1544 <prvAddNewTaskToReadyList+0x56>
    152c:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1530:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1534:	92 8d       	ldd	r25, Z+26	; 0x1a
    1536:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1538:	89 17       	cp	r24, r25
    153a:	20 f0       	brcs	.+8      	; 0x1544 <prvAddNewTaskToReadyList+0x56>
    153c:	d0 93 d4 11 	sts	0x11D4, r29	; 0x8011d4 <pxCurrentTCB+0x1>
    1540:	c0 93 d3 11 	sts	0x11D3, r28	; 0x8011d3 <pxCurrentTCB>
    1544:	80 91 1b 11 	lds	r24, 0x111B	; 0x80111b <uxTaskNumber>
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	80 93 1b 11 	sts	0x111B, r24	; 0x80111b <uxTaskNumber>
    154e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1550:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <uxTopReadyPriority>
    1554:	8e 17       	cp	r24, r30
    1556:	10 f4       	brcc	.+4      	; 0x155c <prvAddNewTaskToReadyList+0x6e>
    1558:	e0 93 23 11 	sts	0x1123, r30	; 0x801123 <uxTopReadyPriority>
    155c:	8b e0       	ldi	r24, 0x0B	; 11
    155e:	8e 9f       	mul	r24, r30
    1560:	f0 01       	movw	r30, r0
    1562:	11 24       	eor	r1, r1
    1564:	eb 59       	subi	r30, 0x9B	; 155
    1566:	fe 4e       	sbci	r31, 0xEE	; 238
    1568:	01 80       	ldd	r0, Z+1	; 0x01
    156a:	f2 81       	ldd	r31, Z+2	; 0x02
    156c:	e0 2d       	mov	r30, r0
    156e:	ff 83       	std	Y+7, r31	; 0x07
    1570:	ee 83       	std	Y+6, r30	; 0x06
    1572:	26 81       	ldd	r18, Z+6	; 0x06
    1574:	37 81       	ldd	r19, Z+7	; 0x07
    1576:	39 87       	std	Y+9, r19	; 0x09
    1578:	28 87       	std	Y+8, r18	; 0x08
    157a:	a6 81       	ldd	r26, Z+6	; 0x06
    157c:	b7 81       	ldd	r27, Z+7	; 0x07
    157e:	9e 01       	movw	r18, r28
    1580:	2e 5f       	subi	r18, 0xFE	; 254
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	15 96       	adiw	r26, 0x05	; 5
    1586:	3c 93       	st	X, r19
    1588:	2e 93       	st	-X, r18
    158a:	14 97       	sbiw	r26, 0x04	; 4
    158c:	37 83       	std	Z+7, r19	; 0x07
    158e:	26 83       	std	Z+6, r18	; 0x06
    1590:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1592:	8e 9f       	mul	r24, r30
    1594:	f0 01       	movw	r30, r0
    1596:	11 24       	eor	r1, r1
    1598:	eb 59       	subi	r30, 0x9B	; 155
    159a:	fe 4e       	sbci	r31, 0xEE	; 238
    159c:	fd 87       	std	Y+13, r31	; 0x0d
    159e:	ec 87       	std	Y+12, r30	; 0x0c
    15a0:	80 81       	ld	r24, Z
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	80 83       	st	Z, r24
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	80 91 22 11 	lds	r24, 0x1122	; 0x801122 <xSchedulerRunning>
    15ae:	88 23       	and	r24, r24
    15b0:	49 f0       	breq	.+18     	; 0x15c4 <prvAddNewTaskToReadyList+0xd6>
    15b2:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    15b6:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    15ba:	92 8d       	ldd	r25, Z+26	; 0x1a
    15bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15be:	98 17       	cp	r25, r24
    15c0:	08 f4       	brcc	.+2      	; 0x15c4 <prvAddNewTaskToReadyList+0xd6>
    15c2:	0d d8       	rcall	.-4070   	; 0x5de <vPortYield>
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <prvCheckTasksWaitingTermination>:
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	1b c0       	rjmp	.+54     	; 0x1606 <prvCheckTasksWaitingTermination+0x3c>
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	0f 92       	push	r0
    15d6:	e0 91 3c 11 	lds	r30, 0x113C	; 0x80113c <xTasksWaitingTermination+0x7>
    15da:	f0 91 3d 11 	lds	r31, 0x113D	; 0x80113d <xTasksWaitingTermination+0x8>
    15de:	c0 85       	ldd	r28, Z+8	; 0x08
    15e0:	d1 85       	ldd	r29, Z+9	; 0x09
    15e2:	ce 01       	movw	r24, r28
    15e4:	02 96       	adiw	r24, 0x02	; 2
    15e6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
    15ea:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <uxCurrentNumberOfTasks>
    15ee:	81 50       	subi	r24, 0x01	; 1
    15f0:	80 93 28 11 	sts	0x1128, r24	; 0x801128 <uxCurrentNumberOfTasks>
    15f4:	80 91 34 11 	lds	r24, 0x1134	; 0x801134 <uxDeletedTasksWaitingCleanUp>
    15f8:	81 50       	subi	r24, 0x01	; 1
    15fa:	80 93 34 11 	sts	0x1134, r24	; 0x801134 <uxDeletedTasksWaitingCleanUp>
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	ce 01       	movw	r24, r28
    1604:	be de       	rcall	.-644    	; 0x1382 <prvDeleteTCB>
    1606:	80 91 34 11 	lds	r24, 0x1134	; 0x801134 <uxDeletedTasksWaitingCleanUp>
    160a:	81 11       	cpse	r24, r1
    160c:	e1 cf       	rjmp	.-62     	; 0x15d0 <prvCheckTasksWaitingTermination+0x6>
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <prvAddCurrentTaskToDelayedList>:
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	6b 01       	movw	r12, r22
    162a:	7c 01       	movw	r14, r24
    162c:	c4 2f       	mov	r28, r20
    162e:	80 90 24 11 	lds	r8, 0x1124	; 0x801124 <xTickCount>
    1632:	90 90 25 11 	lds	r9, 0x1125	; 0x801125 <xTickCount+0x1>
    1636:	a0 90 26 11 	lds	r10, 0x1126	; 0x801126 <xTickCount+0x2>
    163a:	b0 90 27 11 	lds	r11, 0x1127	; 0x801127 <xTickCount+0x3>
    163e:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1642:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1646:	02 96       	adiw	r24, 0x02	; 2
    1648:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	c8 16       	cp	r12, r24
    1650:	d8 06       	cpc	r13, r24
    1652:	e8 06       	cpc	r14, r24
    1654:	f8 06       	cpc	r15, r24
    1656:	b1 f5       	brne	.+108    	; 0x16c4 <prvAddCurrentTaskToDelayedList+0xb0>
    1658:	cc 23       	and	r28, r28
    165a:	a1 f1       	breq	.+104    	; 0x16c4 <prvAddCurrentTaskToDelayedList+0xb0>
    165c:	e9 e2       	ldi	r30, 0x29	; 41
    165e:	f1 e1       	ldi	r31, 0x11	; 17
    1660:	a1 81       	ldd	r26, Z+1	; 0x01
    1662:	b2 81       	ldd	r27, Z+2	; 0x02
    1664:	c0 91 d3 11 	lds	r28, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1668:	d0 91 d4 11 	lds	r29, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    166c:	bf 83       	std	Y+7, r27	; 0x07
    166e:	ae 83       	std	Y+6, r26	; 0x06
    1670:	c0 91 d3 11 	lds	r28, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1674:	d0 91 d4 11 	lds	r29, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1678:	16 96       	adiw	r26, 0x06	; 6
    167a:	8d 91       	ld	r24, X+
    167c:	9c 91       	ld	r25, X
    167e:	17 97       	sbiw	r26, 0x07	; 7
    1680:	99 87       	std	Y+9, r25	; 0x09
    1682:	88 87       	std	Y+8, r24	; 0x08
    1684:	16 96       	adiw	r26, 0x06	; 6
    1686:	cd 91       	ld	r28, X+
    1688:	dc 91       	ld	r29, X
    168a:	17 97       	sbiw	r26, 0x07	; 7
    168c:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1690:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1694:	02 96       	adiw	r24, 0x02	; 2
    1696:	9d 83       	std	Y+5, r25	; 0x05
    1698:	8c 83       	std	Y+4, r24	; 0x04
    169a:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    169e:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    16a2:	02 96       	adiw	r24, 0x02	; 2
    16a4:	17 96       	adiw	r26, 0x07	; 7
    16a6:	9c 93       	st	X, r25
    16a8:	8e 93       	st	-X, r24
    16aa:	16 97       	sbiw	r26, 0x06	; 6
    16ac:	a0 91 d3 11 	lds	r26, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    16b0:	b0 91 d4 11 	lds	r27, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    16b4:	1d 96       	adiw	r26, 0x0d	; 13
    16b6:	fc 93       	st	X, r31
    16b8:	ee 93       	st	-X, r30
    16ba:	1c 97       	sbiw	r26, 0x0c	; 12
    16bc:	80 81       	ld	r24, Z
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	80 83       	st	Z, r24
    16c2:	3f c0       	rjmp	.+126    	; 0x1742 <prvAddCurrentTaskToDelayedList+0x12e>
    16c4:	c8 0c       	add	r12, r8
    16c6:	d9 1c       	adc	r13, r9
    16c8:	ea 1c       	adc	r14, r10
    16ca:	fb 1c       	adc	r15, r11
    16cc:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    16d0:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    16d4:	c2 82       	std	Z+2, r12	; 0x02
    16d6:	d3 82       	std	Z+3, r13	; 0x03
    16d8:	e4 82       	std	Z+4, r14	; 0x04
    16da:	f5 82       	std	Z+5, r15	; 0x05
    16dc:	c8 14       	cp	r12, r8
    16de:	d9 04       	cpc	r13, r9
    16e0:	ea 04       	cpc	r14, r10
    16e2:	fb 04       	cpc	r15, r11
    16e4:	68 f4       	brcc	.+26     	; 0x1700 <prvAddCurrentTaskToDelayedList+0xec>
    16e6:	60 91 d3 11 	lds	r22, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    16ea:	70 91 d4 11 	lds	r23, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    16ee:	80 91 4b 11 	lds	r24, 0x114B	; 0x80114b <pxOverflowDelayedTaskList>
    16f2:	90 91 4c 11 	lds	r25, 0x114C	; 0x80114c <pxOverflowDelayedTaskList+0x1>
    16f6:	6e 5f       	subi	r22, 0xFE	; 254
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    16fe:	21 c0       	rjmp	.+66     	; 0x1742 <prvAddCurrentTaskToDelayedList+0x12e>
    1700:	60 91 d3 11 	lds	r22, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1704:	70 91 d4 11 	lds	r23, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1708:	80 91 4d 11 	lds	r24, 0x114D	; 0x80114d <pxDelayedTaskList>
    170c:	90 91 4e 11 	lds	r25, 0x114E	; 0x80114e <pxDelayedTaskList+0x1>
    1710:	6e 5f       	subi	r22, 0xFE	; 254
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    1718:	80 91 17 11 	lds	r24, 0x1117	; 0x801117 <xNextTaskUnblockTime>
    171c:	90 91 18 11 	lds	r25, 0x1118	; 0x801118 <xNextTaskUnblockTime+0x1>
    1720:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <xNextTaskUnblockTime+0x2>
    1724:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <xNextTaskUnblockTime+0x3>
    1728:	c8 16       	cp	r12, r24
    172a:	d9 06       	cpc	r13, r25
    172c:	ea 06       	cpc	r14, r26
    172e:	fb 06       	cpc	r15, r27
    1730:	40 f4       	brcc	.+16     	; 0x1742 <prvAddCurrentTaskToDelayedList+0x12e>
    1732:	c0 92 17 11 	sts	0x1117, r12	; 0x801117 <xNextTaskUnblockTime>
    1736:	d0 92 18 11 	sts	0x1118, r13	; 0x801118 <xNextTaskUnblockTime+0x1>
    173a:	e0 92 19 11 	sts	0x1119, r14	; 0x801119 <xNextTaskUnblockTime+0x2>
    173e:	f0 92 1a 11 	sts	0x111A, r15	; 0x80111a <xNextTaskUnblockTime+0x3>
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	df 90       	pop	r13
    174c:	cf 90       	pop	r12
    174e:	bf 90       	pop	r11
    1750:	af 90       	pop	r10
    1752:	9f 90       	pop	r9
    1754:	8f 90       	pop	r8
    1756:	08 95       	ret

00001758 <xTaskCreate>:
    1758:	2f 92       	push	r2
    175a:	3f 92       	push	r3
    175c:	4f 92       	push	r4
    175e:	5f 92       	push	r5
    1760:	6f 92       	push	r6
    1762:	7f 92       	push	r7
    1764:	8f 92       	push	r8
    1766:	9f 92       	push	r9
    1768:	af 92       	push	r10
    176a:	bf 92       	push	r11
    176c:	cf 92       	push	r12
    176e:	df 92       	push	r13
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	3c 01       	movw	r6, r24
    177c:	1b 01       	movw	r2, r22
    177e:	4a 01       	movw	r8, r20
    1780:	29 01       	movw	r4, r18
    1782:	ca 01       	movw	r24, r20
    1784:	0e 94 3b 01 	call	0x276	; 0x276 <pvPortMalloc>
    1788:	6c 01       	movw	r12, r24
    178a:	89 2b       	or	r24, r25
    178c:	71 f0       	breq	.+28     	; 0x17aa <xTaskCreate+0x52>
    178e:	84 e3       	ldi	r24, 0x34	; 52
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 3b 01 	call	0x276	; 0x276 <pvPortMalloc>
    1796:	ec 01       	movw	r28, r24
    1798:	89 2b       	or	r24, r25
    179a:	19 f0       	breq	.+6      	; 0x17a2 <xTaskCreate+0x4a>
    179c:	dc 8e       	std	Y+28, r13	; 0x1c
    179e:	cb 8e       	std	Y+27, r12	; 0x1b
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <xTaskCreate+0x56>
    17a2:	c6 01       	movw	r24, r12
    17a4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <vPortFree>
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <xTaskCreate+0x56>
    17aa:	c0 e0       	ldi	r28, 0x00	; 0
    17ac:	d0 e0       	ldi	r29, 0x00	; 0
    17ae:	20 97       	sbiw	r28, 0x00	; 0
    17b0:	61 f0       	breq	.+24     	; 0x17ca <xTaskCreate+0x72>
    17b2:	a1 2c       	mov	r10, r1
    17b4:	b1 2c       	mov	r11, r1
    17b6:	6e 01       	movw	r12, r28
    17b8:	92 01       	movw	r18, r4
    17ba:	a4 01       	movw	r20, r8
    17bc:	b1 01       	movw	r22, r2
    17be:	c3 01       	movw	r24, r6
    17c0:	eb dd       	rcall	.-1066   	; 0x1398 <prvInitialiseNewTask>
    17c2:	ce 01       	movw	r24, r28
    17c4:	94 de       	rcall	.-728    	; 0x14ee <prvAddNewTaskToReadyList>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <xTaskCreate+0x74>
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	bf 90       	pop	r11
    17dc:	af 90       	pop	r10
    17de:	9f 90       	pop	r9
    17e0:	8f 90       	pop	r8
    17e2:	7f 90       	pop	r7
    17e4:	6f 90       	pop	r6
    17e6:	5f 90       	pop	r5
    17e8:	4f 90       	pop	r4
    17ea:	3f 90       	pop	r3
    17ec:	2f 90       	pop	r2
    17ee:	08 95       	ret

000017f0 <vTaskStartScheduler>:
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	0f 2e       	mov	r0, r31
    17f8:	f5 e1       	ldi	r31, 0x15	; 21
    17fa:	ef 2e       	mov	r14, r31
    17fc:	f1 e1       	ldi	r31, 0x11	; 17
    17fe:	ff 2e       	mov	r15, r31
    1800:	f0 2d       	mov	r31, r0
    1802:	00 e0       	ldi	r16, 0x00	; 0
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 ec       	ldi	r20, 0xC0	; 192
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	67 e7       	ldi	r22, 0x77	; 119
    180e:	72 e0       	ldi	r23, 0x02	; 2
    1810:	8c e7       	ldi	r24, 0x7C	; 124
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a1 df       	rcall	.-190    	; 0x1758 <xTaskCreate>
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	11 f4       	brne	.+4      	; 0x181e <vTaskStartScheduler+0x2e>
    181a:	0e 94 9c 14 	call	0x2938	; 0x2938 <xTimerCreateTimerTask>
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	c9 f4       	brne	.+50     	; 0x1854 <vTaskStartScheduler+0x64>
    1822:	f8 94       	cli
    1824:	8f ef       	ldi	r24, 0xFF	; 255
    1826:	9f ef       	ldi	r25, 0xFF	; 255
    1828:	dc 01       	movw	r26, r24
    182a:	80 93 17 11 	sts	0x1117, r24	; 0x801117 <xNextTaskUnblockTime>
    182e:	90 93 18 11 	sts	0x1118, r25	; 0x801118 <xNextTaskUnblockTime+0x1>
    1832:	a0 93 19 11 	sts	0x1119, r26	; 0x801119 <xNextTaskUnblockTime+0x2>
    1836:	b0 93 1a 11 	sts	0x111A, r27	; 0x80111a <xNextTaskUnblockTime+0x3>
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 22 11 	sts	0x1122, r24	; 0x801122 <xSchedulerRunning>
    1840:	10 92 24 11 	sts	0x1124, r1	; 0x801124 <xTickCount>
    1844:	10 92 25 11 	sts	0x1125, r1	; 0x801125 <xTickCount+0x1>
    1848:	10 92 26 11 	sts	0x1126, r1	; 0x801126 <xTickCount+0x2>
    184c:	10 92 27 11 	sts	0x1127, r1	; 0x801127 <xTickCount+0x3>
    1850:	0e 94 bd 02 	call	0x57a	; 0x57a <xPortStartScheduler>
    1854:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	08 95       	ret

00001860 <vTaskSuspendAll>:
    1860:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxSchedulerSuspended>
    1864:	8f 5f       	subi	r24, 0xFF	; 255
    1866:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <uxSchedulerSuspended>
    186a:	08 95       	ret

0000186c <xTaskGetTickCount>:
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	0f 92       	push	r0
    1872:	60 91 24 11 	lds	r22, 0x1124	; 0x801124 <xTickCount>
    1876:	70 91 25 11 	lds	r23, 0x1125	; 0x801125 <xTickCount+0x1>
    187a:	80 91 26 11 	lds	r24, 0x1126	; 0x801126 <xTickCount+0x2>
    187e:	90 91 27 11 	lds	r25, 0x1127	; 0x801127 <xTickCount+0x3>
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	08 95       	ret

00001888 <xTaskIncrementTick>:
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxSchedulerSuspended>
    1898:	81 11       	cpse	r24, r1
    189a:	05 c1       	rjmp	.+522    	; 0x1aa6 <xTaskIncrementTick+0x21e>
    189c:	c0 90 24 11 	lds	r12, 0x1124	; 0x801124 <xTickCount>
    18a0:	d0 90 25 11 	lds	r13, 0x1125	; 0x801125 <xTickCount+0x1>
    18a4:	e0 90 26 11 	lds	r14, 0x1126	; 0x801126 <xTickCount+0x2>
    18a8:	f0 90 27 11 	lds	r15, 0x1127	; 0x801127 <xTickCount+0x3>
    18ac:	8f ef       	ldi	r24, 0xFF	; 255
    18ae:	c8 1a       	sub	r12, r24
    18b0:	d8 0a       	sbc	r13, r24
    18b2:	e8 0a       	sbc	r14, r24
    18b4:	f8 0a       	sbc	r15, r24
    18b6:	c0 92 24 11 	sts	0x1124, r12	; 0x801124 <xTickCount>
    18ba:	d0 92 25 11 	sts	0x1125, r13	; 0x801125 <xTickCount+0x1>
    18be:	e0 92 26 11 	sts	0x1126, r14	; 0x801126 <xTickCount+0x2>
    18c2:	f0 92 27 11 	sts	0x1127, r15	; 0x801127 <xTickCount+0x3>
    18c6:	c1 14       	cp	r12, r1
    18c8:	d1 04       	cpc	r13, r1
    18ca:	e1 04       	cpc	r14, r1
    18cc:	f1 04       	cpc	r15, r1
    18ce:	b1 f4       	brne	.+44     	; 0x18fc <xTaskIncrementTick+0x74>
    18d0:	80 91 4d 11 	lds	r24, 0x114D	; 0x80114d <pxDelayedTaskList>
    18d4:	90 91 4e 11 	lds	r25, 0x114E	; 0x80114e <pxDelayedTaskList+0x1>
    18d8:	20 91 4b 11 	lds	r18, 0x114B	; 0x80114b <pxOverflowDelayedTaskList>
    18dc:	30 91 4c 11 	lds	r19, 0x114C	; 0x80114c <pxOverflowDelayedTaskList+0x1>
    18e0:	30 93 4e 11 	sts	0x114E, r19	; 0x80114e <pxDelayedTaskList+0x1>
    18e4:	20 93 4d 11 	sts	0x114D, r18	; 0x80114d <pxDelayedTaskList>
    18e8:	90 93 4c 11 	sts	0x114C, r25	; 0x80114c <pxOverflowDelayedTaskList+0x1>
    18ec:	80 93 4b 11 	sts	0x114B, r24	; 0x80114b <pxOverflowDelayedTaskList>
    18f0:	80 91 1c 11 	lds	r24, 0x111C	; 0x80111c <xNumOfOverflows>
    18f4:	8f 5f       	subi	r24, 0xFF	; 255
    18f6:	80 93 1c 11 	sts	0x111C, r24	; 0x80111c <xNumOfOverflows>
    18fa:	1c dd       	rcall	.-1480   	; 0x1334 <prvResetNextTaskUnblockTime>
    18fc:	80 91 17 11 	lds	r24, 0x1117	; 0x801117 <xNextTaskUnblockTime>
    1900:	90 91 18 11 	lds	r25, 0x1118	; 0x801118 <xNextTaskUnblockTime+0x1>
    1904:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <xNextTaskUnblockTime+0x2>
    1908:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <xNextTaskUnblockTime+0x3>
    190c:	c8 16       	cp	r12, r24
    190e:	d9 06       	cpc	r13, r25
    1910:	ea 06       	cpc	r14, r26
    1912:	fb 06       	cpc	r15, r27
    1914:	20 f4       	brcc	.+8      	; 0x191e <xTaskIncrementTick+0x96>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	b2 c0       	rjmp	.+356    	; 0x1a7e <xTaskIncrementTick+0x1f6>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	01 c0       	rjmp	.+2      	; 0x1920 <xTaskIncrementTick+0x98>
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	e0 91 4d 11 	lds	r30, 0x114D	; 0x80114d <pxDelayedTaskList>
    1924:	f0 91 4e 11 	lds	r31, 0x114E	; 0x80114e <pxDelayedTaskList+0x1>
    1928:	90 81       	ld	r25, Z
    192a:	91 11       	cpse	r25, r1
    192c:	0c c0       	rjmp	.+24     	; 0x1946 <xTaskIncrementTick+0xbe>
    192e:	4f ef       	ldi	r20, 0xFF	; 255
    1930:	5f ef       	ldi	r21, 0xFF	; 255
    1932:	ba 01       	movw	r22, r20
    1934:	40 93 17 11 	sts	0x1117, r20	; 0x801117 <xNextTaskUnblockTime>
    1938:	50 93 18 11 	sts	0x1118, r21	; 0x801118 <xNextTaskUnblockTime+0x1>
    193c:	60 93 19 11 	sts	0x1119, r22	; 0x801119 <xNextTaskUnblockTime+0x2>
    1940:	70 93 1a 11 	sts	0x111A, r23	; 0x80111a <xNextTaskUnblockTime+0x3>
    1944:	9c c0       	rjmp	.+312    	; 0x1a7e <xTaskIncrementTick+0x1f6>
    1946:	e0 91 4d 11 	lds	r30, 0x114D	; 0x80114d <pxDelayedTaskList>
    194a:	f0 91 4e 11 	lds	r31, 0x114E	; 0x80114e <pxDelayedTaskList+0x1>
    194e:	07 80       	ldd	r0, Z+7	; 0x07
    1950:	f0 85       	ldd	r31, Z+8	; 0x08
    1952:	e0 2d       	mov	r30, r0
    1954:	00 84       	ldd	r0, Z+8	; 0x08
    1956:	f1 85       	ldd	r31, Z+9	; 0x09
    1958:	e0 2d       	mov	r30, r0
    195a:	42 81       	ldd	r20, Z+2	; 0x02
    195c:	53 81       	ldd	r21, Z+3	; 0x03
    195e:	64 81       	ldd	r22, Z+4	; 0x04
    1960:	75 81       	ldd	r23, Z+5	; 0x05
    1962:	c4 16       	cp	r12, r20
    1964:	d5 06       	cpc	r13, r21
    1966:	e6 06       	cpc	r14, r22
    1968:	f7 06       	cpc	r15, r23
    196a:	48 f4       	brcc	.+18     	; 0x197e <xTaskIncrementTick+0xf6>
    196c:	40 93 17 11 	sts	0x1117, r20	; 0x801117 <xNextTaskUnblockTime>
    1970:	50 93 18 11 	sts	0x1118, r21	; 0x801118 <xNextTaskUnblockTime+0x1>
    1974:	60 93 19 11 	sts	0x1119, r22	; 0x801119 <xNextTaskUnblockTime+0x2>
    1978:	70 93 1a 11 	sts	0x111A, r23	; 0x80111a <xNextTaskUnblockTime+0x3>
    197c:	80 c0       	rjmp	.+256    	; 0x1a7e <xTaskIncrementTick+0x1f6>
    197e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1980:	b5 85       	ldd	r27, Z+13	; 0x0d
    1982:	c6 81       	ldd	r28, Z+6	; 0x06
    1984:	d7 81       	ldd	r29, Z+7	; 0x07
    1986:	20 85       	ldd	r18, Z+8	; 0x08
    1988:	31 85       	ldd	r19, Z+9	; 0x09
    198a:	3f 83       	std	Y+7, r19	; 0x07
    198c:	2e 83       	std	Y+6, r18	; 0x06
    198e:	c0 85       	ldd	r28, Z+8	; 0x08
    1990:	d1 85       	ldd	r29, Z+9	; 0x09
    1992:	26 81       	ldd	r18, Z+6	; 0x06
    1994:	37 81       	ldd	r19, Z+7	; 0x07
    1996:	3d 83       	std	Y+5, r19	; 0x05
    1998:	2c 83       	std	Y+4, r18	; 0x04
    199a:	11 96       	adiw	r26, 0x01	; 1
    199c:	4d 91       	ld	r20, X+
    199e:	5c 91       	ld	r21, X
    19a0:	12 97       	sbiw	r26, 0x02	; 2
    19a2:	9f 01       	movw	r18, r30
    19a4:	2e 5f       	subi	r18, 0xFE	; 254
    19a6:	3f 4f       	sbci	r19, 0xFF	; 255
    19a8:	42 17       	cp	r20, r18
    19aa:	53 07       	cpc	r21, r19
    19ac:	31 f4       	brne	.+12     	; 0x19ba <xTaskIncrementTick+0x132>
    19ae:	40 85       	ldd	r20, Z+8	; 0x08
    19b0:	51 85       	ldd	r21, Z+9	; 0x09
    19b2:	12 96       	adiw	r26, 0x02	; 2
    19b4:	5c 93       	st	X, r21
    19b6:	4e 93       	st	-X, r20
    19b8:	11 97       	sbiw	r26, 0x01	; 1
    19ba:	15 86       	std	Z+13, r1	; 0x0d
    19bc:	14 86       	std	Z+12, r1	; 0x0c
    19be:	9c 91       	ld	r25, X
    19c0:	91 50       	subi	r25, 0x01	; 1
    19c2:	9c 93       	st	X, r25
    19c4:	a0 8d       	ldd	r26, Z+24	; 0x18
    19c6:	b1 8d       	ldd	r27, Z+25	; 0x19
    19c8:	10 97       	sbiw	r26, 0x00	; 0
    19ca:	09 f1       	breq	.+66     	; 0x1a0e <xTaskIncrementTick+0x186>
    19cc:	c2 89       	ldd	r28, Z+18	; 0x12
    19ce:	d3 89       	ldd	r29, Z+19	; 0x13
    19d0:	44 89       	ldd	r20, Z+20	; 0x14
    19d2:	55 89       	ldd	r21, Z+21	; 0x15
    19d4:	5f 83       	std	Y+7, r21	; 0x07
    19d6:	4e 83       	std	Y+6, r20	; 0x06
    19d8:	c4 89       	ldd	r28, Z+20	; 0x14
    19da:	d5 89       	ldd	r29, Z+21	; 0x15
    19dc:	42 89       	ldd	r20, Z+18	; 0x12
    19de:	53 89       	ldd	r21, Z+19	; 0x13
    19e0:	5d 83       	std	Y+5, r21	; 0x05
    19e2:	4c 83       	std	Y+4, r20	; 0x04
    19e4:	11 96       	adiw	r26, 0x01	; 1
    19e6:	6d 91       	ld	r22, X+
    19e8:	7c 91       	ld	r23, X
    19ea:	12 97       	sbiw	r26, 0x02	; 2
    19ec:	af 01       	movw	r20, r30
    19ee:	42 5f       	subi	r20, 0xF2	; 242
    19f0:	5f 4f       	sbci	r21, 0xFF	; 255
    19f2:	64 17       	cp	r22, r20
    19f4:	75 07       	cpc	r23, r21
    19f6:	31 f4       	brne	.+12     	; 0x1a04 <xTaskIncrementTick+0x17c>
    19f8:	44 89       	ldd	r20, Z+20	; 0x14
    19fa:	55 89       	ldd	r21, Z+21	; 0x15
    19fc:	12 96       	adiw	r26, 0x02	; 2
    19fe:	5c 93       	st	X, r21
    1a00:	4e 93       	st	-X, r20
    1a02:	11 97       	sbiw	r26, 0x01	; 1
    1a04:	11 8e       	std	Z+25, r1	; 0x19
    1a06:	10 8e       	std	Z+24, r1	; 0x18
    1a08:	9c 91       	ld	r25, X
    1a0a:	91 50       	subi	r25, 0x01	; 1
    1a0c:	9c 93       	st	X, r25
    1a0e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a10:	90 91 23 11 	lds	r25, 0x1123	; 0x801123 <uxTopReadyPriority>
    1a14:	9a 17       	cp	r25, r26
    1a16:	10 f4       	brcc	.+4      	; 0x1a1c <xTaskIncrementTick+0x194>
    1a18:	a0 93 23 11 	sts	0x1123, r26	; 0x801123 <uxTopReadyPriority>
    1a1c:	9b e0       	ldi	r25, 0x0B	; 11
    1a1e:	9a 9f       	mul	r25, r26
    1a20:	d0 01       	movw	r26, r0
    1a22:	11 24       	eor	r1, r1
    1a24:	ab 59       	subi	r26, 0x9B	; 155
    1a26:	be 4e       	sbci	r27, 0xEE	; 238
    1a28:	11 96       	adiw	r26, 0x01	; 1
    1a2a:	0d 90       	ld	r0, X+
    1a2c:	bc 91       	ld	r27, X
    1a2e:	a0 2d       	mov	r26, r0
    1a30:	b7 83       	std	Z+7, r27	; 0x07
    1a32:	a6 83       	std	Z+6, r26	; 0x06
    1a34:	16 96       	adiw	r26, 0x06	; 6
    1a36:	4d 91       	ld	r20, X+
    1a38:	5c 91       	ld	r21, X
    1a3a:	17 97       	sbiw	r26, 0x07	; 7
    1a3c:	51 87       	std	Z+9, r21	; 0x09
    1a3e:	40 87       	std	Z+8, r20	; 0x08
    1a40:	16 96       	adiw	r26, 0x06	; 6
    1a42:	cd 91       	ld	r28, X+
    1a44:	dc 91       	ld	r29, X
    1a46:	17 97       	sbiw	r26, 0x07	; 7
    1a48:	3d 83       	std	Y+5, r19	; 0x05
    1a4a:	2c 83       	std	Y+4, r18	; 0x04
    1a4c:	17 96       	adiw	r26, 0x07	; 7
    1a4e:	3c 93       	st	X, r19
    1a50:	2e 93       	st	-X, r18
    1a52:	16 97       	sbiw	r26, 0x06	; 6
    1a54:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a56:	9a 9f       	mul	r25, r26
    1a58:	d0 01       	movw	r26, r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	ab 59       	subi	r26, 0x9B	; 155
    1a5e:	be 4e       	sbci	r27, 0xEE	; 238
    1a60:	b5 87       	std	Z+13, r27	; 0x0d
    1a62:	a4 87       	std	Z+12, r26	; 0x0c
    1a64:	9c 91       	ld	r25, X
    1a66:	9f 5f       	subi	r25, 0xFF	; 255
    1a68:	9c 93       	st	X, r25
    1a6a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a6c:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1a70:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1a74:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a76:	29 17       	cp	r18, r25
    1a78:	08 f0       	brcs	.+2      	; 0x1a7c <xTaskIncrementTick+0x1f4>
    1a7a:	4f cf       	rjmp	.-354    	; 0x191a <xTaskIncrementTick+0x92>
    1a7c:	51 cf       	rjmp	.-350    	; 0x1920 <xTaskIncrementTick+0x98>
    1a7e:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1a82:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1a86:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1a88:	9b e0       	ldi	r25, 0x0B	; 11
    1a8a:	e9 9f       	mul	r30, r25
    1a8c:	f0 01       	movw	r30, r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	eb 59       	subi	r30, 0x9B	; 155
    1a92:	fe 4e       	sbci	r31, 0xEE	; 238
    1a94:	90 81       	ld	r25, Z
    1a96:	92 30       	cpi	r25, 0x02	; 2
    1a98:	08 f0       	brcs	.+2      	; 0x1a9c <xTaskIncrementTick+0x214>
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 91 1d 11 	lds	r25, 0x111D	; 0x80111d <xYieldPending>
    1aa0:	91 11       	cpse	r25, r1
    1aa2:	16 c0       	rjmp	.+44     	; 0x1ad0 <xTaskIncrementTick+0x248>
    1aa4:	16 c0       	rjmp	.+44     	; 0x1ad2 <xTaskIncrementTick+0x24a>
    1aa6:	80 91 1e 11 	lds	r24, 0x111E	; 0x80111e <xPendedTicks>
    1aaa:	90 91 1f 11 	lds	r25, 0x111F	; 0x80111f <xPendedTicks+0x1>
    1aae:	a0 91 20 11 	lds	r26, 0x1120	; 0x801120 <xPendedTicks+0x2>
    1ab2:	b0 91 21 11 	lds	r27, 0x1121	; 0x801121 <xPendedTicks+0x3>
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	a1 1d       	adc	r26, r1
    1aba:	b1 1d       	adc	r27, r1
    1abc:	80 93 1e 11 	sts	0x111E, r24	; 0x80111e <xPendedTicks>
    1ac0:	90 93 1f 11 	sts	0x111F, r25	; 0x80111f <xPendedTicks+0x1>
    1ac4:	a0 93 20 11 	sts	0x1120, r26	; 0x801120 <xPendedTicks+0x2>
    1ac8:	b0 93 21 11 	sts	0x1121, r27	; 0x801121 <xPendedTicks+0x3>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <xTaskIncrementTick+0x24a>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	ff 90       	pop	r15
    1ad8:	ef 90       	pop	r14
    1ada:	df 90       	pop	r13
    1adc:	cf 90       	pop	r12
    1ade:	08 95       	ret

00001ae0 <xTaskResumeAll>:
    1ae0:	cf 92       	push	r12
    1ae2:	df 92       	push	r13
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	0f 92       	push	r0
    1af2:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxSchedulerSuspended>
    1af6:	81 50       	subi	r24, 0x01	; 1
    1af8:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <uxSchedulerSuspended>
    1afc:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxSchedulerSuspended>
    1b00:	81 11       	cpse	r24, r1
    1b02:	be c0       	rjmp	.+380    	; 0x1c80 <xTaskResumeAll+0x1a0>
    1b04:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <uxCurrentNumberOfTasks>
    1b08:	81 11       	cpse	r24, r1
    1b0a:	88 c0       	rjmp	.+272    	; 0x1c1c <xTaskResumeAll+0x13c>
    1b0c:	bc c0       	rjmp	.+376    	; 0x1c86 <xTaskResumeAll+0x1a6>
    1b0e:	e0 91 47 11 	lds	r30, 0x1147	; 0x801147 <xPendingReadyList+0x7>
    1b12:	f0 91 48 11 	lds	r31, 0x1148	; 0x801148 <xPendingReadyList+0x8>
    1b16:	00 84       	ldd	r0, Z+8	; 0x08
    1b18:	f1 85       	ldd	r31, Z+9	; 0x09
    1b1a:	e0 2d       	mov	r30, r0
    1b1c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b1e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b20:	c2 89       	ldd	r28, Z+18	; 0x12
    1b22:	d3 89       	ldd	r29, Z+19	; 0x13
    1b24:	84 89       	ldd	r24, Z+20	; 0x14
    1b26:	95 89       	ldd	r25, Z+21	; 0x15
    1b28:	9f 83       	std	Y+7, r25	; 0x07
    1b2a:	8e 83       	std	Y+6, r24	; 0x06
    1b2c:	c4 89       	ldd	r28, Z+20	; 0x14
    1b2e:	d5 89       	ldd	r29, Z+21	; 0x15
    1b30:	82 89       	ldd	r24, Z+18	; 0x12
    1b32:	93 89       	ldd	r25, Z+19	; 0x13
    1b34:	9d 83       	std	Y+5, r25	; 0x05
    1b36:	8c 83       	std	Y+4, r24	; 0x04
    1b38:	11 96       	adiw	r26, 0x01	; 1
    1b3a:	2d 91       	ld	r18, X+
    1b3c:	3c 91       	ld	r19, X
    1b3e:	12 97       	sbiw	r26, 0x02	; 2
    1b40:	cf 01       	movw	r24, r30
    1b42:	0e 96       	adiw	r24, 0x0e	; 14
    1b44:	28 17       	cp	r18, r24
    1b46:	39 07       	cpc	r19, r25
    1b48:	31 f4       	brne	.+12     	; 0x1b56 <xTaskResumeAll+0x76>
    1b4a:	84 89       	ldd	r24, Z+20	; 0x14
    1b4c:	95 89       	ldd	r25, Z+21	; 0x15
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	9c 93       	st	X, r25
    1b52:	8e 93       	st	-X, r24
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	11 8e       	std	Z+25, r1	; 0x19
    1b58:	10 8e       	std	Z+24, r1	; 0x18
    1b5a:	8c 91       	ld	r24, X
    1b5c:	81 50       	subi	r24, 0x01	; 1
    1b5e:	8c 93       	st	X, r24
    1b60:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b62:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b64:	c6 81       	ldd	r28, Z+6	; 0x06
    1b66:	d7 81       	ldd	r29, Z+7	; 0x07
    1b68:	80 85       	ldd	r24, Z+8	; 0x08
    1b6a:	91 85       	ldd	r25, Z+9	; 0x09
    1b6c:	9f 83       	std	Y+7, r25	; 0x07
    1b6e:	8e 83       	std	Y+6, r24	; 0x06
    1b70:	c0 85       	ldd	r28, Z+8	; 0x08
    1b72:	d1 85       	ldd	r29, Z+9	; 0x09
    1b74:	86 81       	ldd	r24, Z+6	; 0x06
    1b76:	97 81       	ldd	r25, Z+7	; 0x07
    1b78:	9d 83       	std	Y+5, r25	; 0x05
    1b7a:	8c 83       	std	Y+4, r24	; 0x04
    1b7c:	11 96       	adiw	r26, 0x01	; 1
    1b7e:	8d 91       	ld	r24, X+
    1b80:	9c 91       	ld	r25, X
    1b82:	12 97       	sbiw	r26, 0x02	; 2
    1b84:	9f 01       	movw	r18, r30
    1b86:	2e 5f       	subi	r18, 0xFE	; 254
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	82 17       	cp	r24, r18
    1b8c:	93 07       	cpc	r25, r19
    1b8e:	31 f4       	brne	.+12     	; 0x1b9c <xTaskResumeAll+0xbc>
    1b90:	80 85       	ldd	r24, Z+8	; 0x08
    1b92:	91 85       	ldd	r25, Z+9	; 0x09
    1b94:	12 96       	adiw	r26, 0x02	; 2
    1b96:	9c 93       	st	X, r25
    1b98:	8e 93       	st	-X, r24
    1b9a:	11 97       	sbiw	r26, 0x01	; 1
    1b9c:	15 86       	std	Z+13, r1	; 0x0d
    1b9e:	14 86       	std	Z+12, r1	; 0x0c
    1ba0:	8c 91       	ld	r24, X
    1ba2:	81 50       	subi	r24, 0x01	; 1
    1ba4:	8c 93       	st	X, r24
    1ba6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ba8:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <uxTopReadyPriority>
    1bac:	8a 17       	cp	r24, r26
    1bae:	10 f4       	brcc	.+4      	; 0x1bb4 <xTaskResumeAll+0xd4>
    1bb0:	a0 93 23 11 	sts	0x1123, r26	; 0x801123 <uxTopReadyPriority>
    1bb4:	8b e0       	ldi	r24, 0x0B	; 11
    1bb6:	8a 9f       	mul	r24, r26
    1bb8:	d0 01       	movw	r26, r0
    1bba:	11 24       	eor	r1, r1
    1bbc:	ab 59       	subi	r26, 0x9B	; 155
    1bbe:	be 4e       	sbci	r27, 0xEE	; 238
    1bc0:	11 96       	adiw	r26, 0x01	; 1
    1bc2:	0d 90       	ld	r0, X+
    1bc4:	bc 91       	ld	r27, X
    1bc6:	a0 2d       	mov	r26, r0
    1bc8:	b7 83       	std	Z+7, r27	; 0x07
    1bca:	a6 83       	std	Z+6, r26	; 0x06
    1bcc:	16 96       	adiw	r26, 0x06	; 6
    1bce:	4d 91       	ld	r20, X+
    1bd0:	5c 91       	ld	r21, X
    1bd2:	17 97       	sbiw	r26, 0x07	; 7
    1bd4:	51 87       	std	Z+9, r21	; 0x09
    1bd6:	40 87       	std	Z+8, r20	; 0x08
    1bd8:	16 96       	adiw	r26, 0x06	; 6
    1bda:	cd 91       	ld	r28, X+
    1bdc:	dc 91       	ld	r29, X
    1bde:	17 97       	sbiw	r26, 0x07	; 7
    1be0:	3d 83       	std	Y+5, r19	; 0x05
    1be2:	2c 83       	std	Y+4, r18	; 0x04
    1be4:	17 96       	adiw	r26, 0x07	; 7
    1be6:	3c 93       	st	X, r19
    1be8:	2e 93       	st	-X, r18
    1bea:	16 97       	sbiw	r26, 0x06	; 6
    1bec:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bee:	8a 9f       	mul	r24, r26
    1bf0:	d0 01       	movw	r26, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	ab 59       	subi	r26, 0x9B	; 155
    1bf6:	be 4e       	sbci	r27, 0xEE	; 238
    1bf8:	b5 87       	std	Z+13, r27	; 0x0d
    1bfa:	a4 87       	std	Z+12, r26	; 0x0c
    1bfc:	8c 91       	ld	r24, X
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	8c 93       	st	X, r24
    1c02:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c04:	a0 91 d3 11 	lds	r26, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1c08:	b0 91 d4 11 	lds	r27, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1c0c:	5a 96       	adiw	r26, 0x1a	; 26
    1c0e:	8c 91       	ld	r24, X
    1c10:	98 17       	cp	r25, r24
    1c12:	30 f0       	brcs	.+12     	; 0x1c20 <xTaskResumeAll+0x140>
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	80 93 1d 11 	sts	0x111D, r24	; 0x80111d <xYieldPending>
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <xTaskResumeAll+0x140>
    1c1c:	e0 e0       	ldi	r30, 0x00	; 0
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 91 40 11 	lds	r24, 0x1140	; 0x801140 <xPendingReadyList>
    1c24:	81 11       	cpse	r24, r1
    1c26:	73 cf       	rjmp	.-282    	; 0x1b0e <xTaskResumeAll+0x2e>
    1c28:	ef 2b       	or	r30, r31
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <xTaskResumeAll+0x14e>
    1c2c:	83 db       	rcall	.-2298   	; 0x1334 <prvResetNextTaskUnblockTime>
    1c2e:	c0 90 1e 11 	lds	r12, 0x111E	; 0x80111e <xPendedTicks>
    1c32:	d0 90 1f 11 	lds	r13, 0x111F	; 0x80111f <xPendedTicks+0x1>
    1c36:	e0 90 20 11 	lds	r14, 0x1120	; 0x801120 <xPendedTicks+0x2>
    1c3a:	f0 90 21 11 	lds	r15, 0x1121	; 0x801121 <xPendedTicks+0x3>
    1c3e:	c1 14       	cp	r12, r1
    1c40:	d1 04       	cpc	r13, r1
    1c42:	e1 04       	cpc	r14, r1
    1c44:	f1 04       	cpc	r15, r1
    1c46:	a1 f0       	breq	.+40     	; 0x1c70 <xTaskResumeAll+0x190>
    1c48:	1f de       	rcall	.-962    	; 0x1888 <xTaskIncrementTick>
    1c4a:	88 23       	and	r24, r24
    1c4c:	19 f0       	breq	.+6      	; 0x1c54 <xTaskResumeAll+0x174>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	80 93 1d 11 	sts	0x111D, r24	; 0x80111d <xYieldPending>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	c8 1a       	sub	r12, r24
    1c58:	d1 08       	sbc	r13, r1
    1c5a:	e1 08       	sbc	r14, r1
    1c5c:	f1 08       	sbc	r15, r1
    1c5e:	a1 f7       	brne	.-24     	; 0x1c48 <xTaskResumeAll+0x168>
    1c60:	10 92 1e 11 	sts	0x111E, r1	; 0x80111e <xPendedTicks>
    1c64:	10 92 1f 11 	sts	0x111F, r1	; 0x80111f <xPendedTicks+0x1>
    1c68:	10 92 20 11 	sts	0x1120, r1	; 0x801120 <xPendedTicks+0x2>
    1c6c:	10 92 21 11 	sts	0x1121, r1	; 0x801121 <xPendedTicks+0x3>
    1c70:	80 91 1d 11 	lds	r24, 0x111D	; 0x80111d <xYieldPending>
    1c74:	88 23       	and	r24, r24
    1c76:	31 f0       	breq	.+12     	; 0x1c84 <xTaskResumeAll+0x1a4>
    1c78:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	03 c0       	rjmp	.+6      	; 0x1c86 <xTaskResumeAll+0x1a6>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <xTaskResumeAll+0x1a6>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	0f 90       	pop	r0
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	ff 90       	pop	r15
    1c90:	ef 90       	pop	r14
    1c92:	df 90       	pop	r13
    1c94:	cf 90       	pop	r12
    1c96:	08 95       	ret

00001c98 <xTaskDelayUntil>:
    1c98:	8f 92       	push	r8
    1c9a:	9f 92       	push	r9
    1c9c:	af 92       	push	r10
    1c9e:	bf 92       	push	r11
    1ca0:	cf 92       	push	r12
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	ec 01       	movw	r28, r24
    1cb0:	6a 01       	movw	r12, r20
    1cb2:	7b 01       	movw	r14, r22
    1cb4:	d5 dd       	rcall	.-1110   	; 0x1860 <vTaskSuspendAll>
    1cb6:	80 90 24 11 	lds	r8, 0x1124	; 0x801124 <xTickCount>
    1cba:	90 90 25 11 	lds	r9, 0x1125	; 0x801125 <xTickCount+0x1>
    1cbe:	a0 90 26 11 	lds	r10, 0x1126	; 0x801126 <xTickCount+0x2>
    1cc2:	b0 90 27 11 	lds	r11, 0x1127	; 0x801127 <xTickCount+0x3>
    1cc6:	88 81       	ld	r24, Y
    1cc8:	99 81       	ldd	r25, Y+1	; 0x01
    1cca:	aa 81       	ldd	r26, Y+2	; 0x02
    1ccc:	bb 81       	ldd	r27, Y+3	; 0x03
    1cce:	ac 01       	movw	r20, r24
    1cd0:	bd 01       	movw	r22, r26
    1cd2:	4c 0d       	add	r20, r12
    1cd4:	5d 1d       	adc	r21, r13
    1cd6:	6e 1d       	adc	r22, r14
    1cd8:	7f 1d       	adc	r23, r15
    1cda:	88 16       	cp	r8, r24
    1cdc:	99 06       	cpc	r9, r25
    1cde:	aa 06       	cpc	r10, r26
    1ce0:	bb 06       	cpc	r11, r27
    1ce2:	60 f4       	brcc	.+24     	; 0x1cfc <xTaskDelayUntil+0x64>
    1ce4:	48 17       	cp	r20, r24
    1ce6:	59 07       	cpc	r21, r25
    1ce8:	6a 07       	cpc	r22, r26
    1cea:	7b 07       	cpc	r23, r27
    1cec:	98 f4       	brcc	.+38     	; 0x1d14 <xTaskDelayUntil+0x7c>
    1cee:	84 16       	cp	r8, r20
    1cf0:	95 06       	cpc	r9, r21
    1cf2:	a6 06       	cpc	r10, r22
    1cf4:	b7 06       	cpc	r11, r23
    1cf6:	80 f0       	brcs	.+32     	; 0x1d18 <xTaskDelayUntil+0x80>
    1cf8:	10 e0       	ldi	r17, 0x00	; 0
    1cfa:	13 c0       	rjmp	.+38     	; 0x1d22 <xTaskDelayUntil+0x8a>
    1cfc:	48 17       	cp	r20, r24
    1cfe:	59 07       	cpc	r21, r25
    1d00:	6a 07       	cpc	r22, r26
    1d02:	7b 07       	cpc	r23, r27
    1d04:	58 f0       	brcs	.+22     	; 0x1d1c <xTaskDelayUntil+0x84>
    1d06:	84 16       	cp	r8, r20
    1d08:	95 06       	cpc	r9, r21
    1d0a:	a6 06       	cpc	r10, r22
    1d0c:	b7 06       	cpc	r11, r23
    1d0e:	40 f0       	brcs	.+16     	; 0x1d20 <xTaskDelayUntil+0x88>
    1d10:	10 e0       	ldi	r17, 0x00	; 0
    1d12:	07 c0       	rjmp	.+14     	; 0x1d22 <xTaskDelayUntil+0x8a>
    1d14:	10 e0       	ldi	r17, 0x00	; 0
    1d16:	05 c0       	rjmp	.+10     	; 0x1d22 <xTaskDelayUntil+0x8a>
    1d18:	11 e0       	ldi	r17, 0x01	; 1
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <xTaskDelayUntil+0x8a>
    1d1c:	11 e0       	ldi	r17, 0x01	; 1
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <xTaskDelayUntil+0x8a>
    1d20:	11 e0       	ldi	r17, 0x01	; 1
    1d22:	48 83       	st	Y, r20
    1d24:	59 83       	std	Y+1, r21	; 0x01
    1d26:	6a 83       	std	Y+2, r22	; 0x02
    1d28:	7b 83       	std	Y+3, r23	; 0x03
    1d2a:	11 23       	and	r17, r17
    1d2c:	41 f0       	breq	.+16     	; 0x1d3e <xTaskDelayUntil+0xa6>
    1d2e:	cb 01       	movw	r24, r22
    1d30:	ba 01       	movw	r22, r20
    1d32:	68 19       	sub	r22, r8
    1d34:	79 09       	sbc	r23, r9
    1d36:	8a 09       	sbc	r24, r10
    1d38:	9b 09       	sbc	r25, r11
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	6b dc       	rcall	.-1834   	; 0x1614 <prvAddCurrentTaskToDelayedList>
    1d3e:	d0 de       	rcall	.-608    	; 0x1ae0 <xTaskResumeAll>
    1d40:	81 11       	cpse	r24, r1
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <xTaskDelayUntil+0xb0>
    1d44:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    1d48:	81 2f       	mov	r24, r17
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	df 90       	pop	r13
    1d56:	cf 90       	pop	r12
    1d58:	bf 90       	pop	r11
    1d5a:	af 90       	pop	r10
    1d5c:	9f 90       	pop	r9
    1d5e:	8f 90       	pop	r8
    1d60:	08 95       	ret

00001d62 <vTaskDelay>:
    1d62:	cf 92       	push	r12
    1d64:	df 92       	push	r13
    1d66:	ef 92       	push	r14
    1d68:	ff 92       	push	r15
    1d6a:	6b 01       	movw	r12, r22
    1d6c:	7c 01       	movw	r14, r24
    1d6e:	67 2b       	or	r22, r23
    1d70:	68 2b       	or	r22, r24
    1d72:	69 2b       	or	r22, r25
    1d74:	39 f0       	breq	.+14     	; 0x1d84 <vTaskDelay+0x22>
    1d76:	74 dd       	rcall	.-1304   	; 0x1860 <vTaskSuspendAll>
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	c7 01       	movw	r24, r14
    1d7c:	b6 01       	movw	r22, r12
    1d7e:	4a dc       	rcall	.-1900   	; 0x1614 <prvAddCurrentTaskToDelayedList>
    1d80:	af de       	rcall	.-674    	; 0x1ae0 <xTaskResumeAll>
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <vTaskDelay+0x24>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	81 11       	cpse	r24, r1
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <vTaskDelay+0x2c>
    1d8a:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	08 95       	ret

00001d98 <vTaskSwitchContext>:
    1d98:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxSchedulerSuspended>
    1d9c:	88 23       	and	r24, r24
    1d9e:	21 f0       	breq	.+8      	; 0x1da8 <vTaskSwitchContext+0x10>
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	80 93 1d 11 	sts	0x111D, r24	; 0x80111d <xYieldPending>
    1da6:	08 95       	ret
    1da8:	10 92 1d 11 	sts	0x111D, r1	; 0x80111d <xYieldPending>
    1dac:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1db0:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1db4:	20 81       	ld	r18, Z
    1db6:	31 81       	ldd	r19, Z+1	; 0x01
    1db8:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1dbc:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1dc0:	83 8d       	ldd	r24, Z+27	; 0x1b
    1dc2:	94 8d       	ldd	r25, Z+28	; 0x1c
    1dc4:	82 17       	cp	r24, r18
    1dc6:	93 07       	cpc	r25, r19
    1dc8:	60 f0       	brcs	.+24     	; 0x1de2 <vTaskSwitchContext+0x4a>
    1dca:	60 91 d3 11 	lds	r22, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1dce:	70 91 d4 11 	lds	r23, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1dd2:	63 5e       	subi	r22, 0xE3	; 227
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1dda:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1dde:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <vApplicationStackOverflowHook>
    1de2:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <uxTopReadyPriority>
    1de6:	01 c0       	rjmp	.+2      	; 0x1dea <vTaskSwitchContext+0x52>
    1de8:	81 50       	subi	r24, 0x01	; 1
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	9b e0       	ldi	r25, 0x0B	; 11
    1df0:	92 9f       	mul	r25, r18
    1df2:	f0 01       	movw	r30, r0
    1df4:	93 9f       	mul	r25, r19
    1df6:	f0 0d       	add	r31, r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	eb 59       	subi	r30, 0x9B	; 155
    1dfc:	fe 4e       	sbci	r31, 0xEE	; 238
    1dfe:	90 81       	ld	r25, Z
    1e00:	99 23       	and	r25, r25
    1e02:	91 f3       	breq	.-28     	; 0x1de8 <vTaskSwitchContext+0x50>
    1e04:	9b e0       	ldi	r25, 0x0B	; 11
    1e06:	92 9f       	mul	r25, r18
    1e08:	a0 01       	movw	r20, r0
    1e0a:	93 9f       	mul	r25, r19
    1e0c:	50 0d       	add	r21, r0
    1e0e:	11 24       	eor	r1, r1
    1e10:	df 01       	movw	r26, r30
    1e12:	01 80       	ldd	r0, Z+1	; 0x01
    1e14:	f2 81       	ldd	r31, Z+2	; 0x02
    1e16:	e0 2d       	mov	r30, r0
    1e18:	04 80       	ldd	r0, Z+4	; 0x04
    1e1a:	f5 81       	ldd	r31, Z+5	; 0x05
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	12 96       	adiw	r26, 0x02	; 2
    1e20:	fc 93       	st	X, r31
    1e22:	ee 93       	st	-X, r30
    1e24:	11 97       	sbiw	r26, 0x01	; 1
    1e26:	48 59       	subi	r20, 0x98	; 152
    1e28:	5e 4e       	sbci	r21, 0xEE	; 238
    1e2a:	e4 17       	cp	r30, r20
    1e2c:	f5 07       	cpc	r31, r21
    1e2e:	29 f4       	brne	.+10     	; 0x1e3a <vTaskSwitchContext+0xa2>
    1e30:	44 81       	ldd	r20, Z+4	; 0x04
    1e32:	55 81       	ldd	r21, Z+5	; 0x05
    1e34:	fd 01       	movw	r30, r26
    1e36:	52 83       	std	Z+2, r21	; 0x02
    1e38:	41 83       	std	Z+1, r20	; 0x01
    1e3a:	9b e0       	ldi	r25, 0x0B	; 11
    1e3c:	92 9f       	mul	r25, r18
    1e3e:	f0 01       	movw	r30, r0
    1e40:	93 9f       	mul	r25, r19
    1e42:	f0 0d       	add	r31, r0
    1e44:	11 24       	eor	r1, r1
    1e46:	eb 59       	subi	r30, 0x9B	; 155
    1e48:	fe 4e       	sbci	r31, 0xEE	; 238
    1e4a:	01 80       	ldd	r0, Z+1	; 0x01
    1e4c:	f2 81       	ldd	r31, Z+2	; 0x02
    1e4e:	e0 2d       	mov	r30, r0
    1e50:	20 85       	ldd	r18, Z+8	; 0x08
    1e52:	31 85       	ldd	r19, Z+9	; 0x09
    1e54:	30 93 d4 11 	sts	0x11D4, r19	; 0x8011d4 <pxCurrentTCB+0x1>
    1e58:	20 93 d3 11 	sts	0x11D3, r18	; 0x8011d3 <pxCurrentTCB>
    1e5c:	80 93 23 11 	sts	0x1123, r24	; 0x801123 <uxTopReadyPriority>
    1e60:	08 95       	ret

00001e62 <vTaskPlaceOnEventList>:
    1e62:	cf 92       	push	r12
    1e64:	df 92       	push	r13
    1e66:	ef 92       	push	r14
    1e68:	ff 92       	push	r15
    1e6a:	6a 01       	movw	r12, r20
    1e6c:	7b 01       	movw	r14, r22
    1e6e:	60 91 d3 11 	lds	r22, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1e72:	70 91 d4 11 	lds	r23, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1e76:	62 5f       	subi	r22, 0xF2	; 242
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	c7 01       	movw	r24, r14
    1e82:	b6 01       	movw	r22, r12
    1e84:	c7 db       	rcall	.-2162   	; 0x1614 <prvAddCurrentTaskToDelayedList>
    1e86:	ff 90       	pop	r15
    1e88:	ef 90       	pop	r14
    1e8a:	df 90       	pop	r13
    1e8c:	cf 90       	pop	r12
    1e8e:	08 95       	ret

00001e90 <vTaskPlaceOnEventListRestricted>:
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	fc 01       	movw	r30, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	ba 01       	movw	r22, r20
    1e9a:	a1 81       	ldd	r26, Z+1	; 0x01
    1e9c:	b2 81       	ldd	r27, Z+2	; 0x02
    1e9e:	c0 91 d3 11 	lds	r28, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1ea2:	d0 91 d4 11 	lds	r29, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1ea6:	bb 8b       	std	Y+19, r27	; 0x13
    1ea8:	aa 8b       	std	Y+18, r26	; 0x12
    1eaa:	c0 91 d3 11 	lds	r28, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1eae:	d0 91 d4 11 	lds	r29, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1eb2:	16 96       	adiw	r26, 0x06	; 6
    1eb4:	4d 91       	ld	r20, X+
    1eb6:	5c 91       	ld	r21, X
    1eb8:	17 97       	sbiw	r26, 0x07	; 7
    1eba:	5d 8b       	std	Y+21, r21	; 0x15
    1ebc:	4c 8b       	std	Y+20, r20	; 0x14
    1ebe:	16 96       	adiw	r26, 0x06	; 6
    1ec0:	cd 91       	ld	r28, X+
    1ec2:	dc 91       	ld	r29, X
    1ec4:	17 97       	sbiw	r26, 0x07	; 7
    1ec6:	40 91 d3 11 	lds	r20, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1eca:	50 91 d4 11 	lds	r21, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1ece:	42 5f       	subi	r20, 0xF2	; 242
    1ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed2:	5d 83       	std	Y+5, r21	; 0x05
    1ed4:	4c 83       	std	Y+4, r20	; 0x04
    1ed6:	40 91 d3 11 	lds	r20, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1eda:	50 91 d4 11 	lds	r21, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1ede:	42 5f       	subi	r20, 0xF2	; 242
    1ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee2:	17 96       	adiw	r26, 0x07	; 7
    1ee4:	5c 93       	st	X, r21
    1ee6:	4e 93       	st	-X, r20
    1ee8:	16 97       	sbiw	r26, 0x06	; 6
    1eea:	a0 91 d3 11 	lds	r26, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    1eee:	b0 91 d4 11 	lds	r27, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    1ef2:	59 96       	adiw	r26, 0x19	; 25
    1ef4:	fc 93       	st	X, r31
    1ef6:	ee 93       	st	-X, r30
    1ef8:	58 97       	sbiw	r26, 0x18	; 24
    1efa:	30 81       	ld	r19, Z
    1efc:	3f 5f       	subi	r19, 0xFF	; 255
    1efe:	30 83       	st	Z, r19
    1f00:	22 23       	and	r18, r18
    1f02:	19 f0       	breq	.+6      	; 0x1f0a <vTaskPlaceOnEventListRestricted+0x7a>
    1f04:	6f ef       	ldi	r22, 0xFF	; 255
    1f06:	7f ef       	ldi	r23, 0xFF	; 255
    1f08:	cb 01       	movw	r24, r22
    1f0a:	42 2f       	mov	r20, r18
    1f0c:	83 db       	rcall	.-2298   	; 0x1614 <prvAddCurrentTaskToDelayedList>
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	08 95       	ret

00001f14 <xTaskRemoveFromEventList>:
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	dc 01       	movw	r26, r24
    1f1a:	17 96       	adiw	r26, 0x07	; 7
    1f1c:	ed 91       	ld	r30, X+
    1f1e:	fc 91       	ld	r31, X
    1f20:	18 97       	sbiw	r26, 0x08	; 8
    1f22:	00 84       	ldd	r0, Z+8	; 0x08
    1f24:	f1 85       	ldd	r31, Z+9	; 0x09
    1f26:	e0 2d       	mov	r30, r0
    1f28:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f2a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f2c:	c2 89       	ldd	r28, Z+18	; 0x12
    1f2e:	d3 89       	ldd	r29, Z+19	; 0x13
    1f30:	84 89       	ldd	r24, Z+20	; 0x14
    1f32:	95 89       	ldd	r25, Z+21	; 0x15
    1f34:	9f 83       	std	Y+7, r25	; 0x07
    1f36:	8e 83       	std	Y+6, r24	; 0x06
    1f38:	c4 89       	ldd	r28, Z+20	; 0x14
    1f3a:	d5 89       	ldd	r29, Z+21	; 0x15
    1f3c:	82 89       	ldd	r24, Z+18	; 0x12
    1f3e:	93 89       	ldd	r25, Z+19	; 0x13
    1f40:	9d 83       	std	Y+5, r25	; 0x05
    1f42:	8c 83       	std	Y+4, r24	; 0x04
    1f44:	11 96       	adiw	r26, 0x01	; 1
    1f46:	8d 91       	ld	r24, X+
    1f48:	9c 91       	ld	r25, X
    1f4a:	12 97       	sbiw	r26, 0x02	; 2
    1f4c:	9f 01       	movw	r18, r30
    1f4e:	22 5f       	subi	r18, 0xF2	; 242
    1f50:	3f 4f       	sbci	r19, 0xFF	; 255
    1f52:	82 17       	cp	r24, r18
    1f54:	93 07       	cpc	r25, r19
    1f56:	31 f4       	brne	.+12     	; 0x1f64 <xTaskRemoveFromEventList+0x50>
    1f58:	84 89       	ldd	r24, Z+20	; 0x14
    1f5a:	95 89       	ldd	r25, Z+21	; 0x15
    1f5c:	12 96       	adiw	r26, 0x02	; 2
    1f5e:	9c 93       	st	X, r25
    1f60:	8e 93       	st	-X, r24
    1f62:	11 97       	sbiw	r26, 0x01	; 1
    1f64:	11 8e       	std	Z+25, r1	; 0x19
    1f66:	10 8e       	std	Z+24, r1	; 0x18
    1f68:	8c 91       	ld	r24, X
    1f6a:	81 50       	subi	r24, 0x01	; 1
    1f6c:	8c 93       	st	X, r24
    1f6e:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxSchedulerSuspended>
    1f72:	81 11       	cpse	r24, r1
    1f74:	52 c0       	rjmp	.+164    	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1f76:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f78:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f7a:	c6 81       	ldd	r28, Z+6	; 0x06
    1f7c:	d7 81       	ldd	r29, Z+7	; 0x07
    1f7e:	80 85       	ldd	r24, Z+8	; 0x08
    1f80:	91 85       	ldd	r25, Z+9	; 0x09
    1f82:	9f 83       	std	Y+7, r25	; 0x07
    1f84:	8e 83       	std	Y+6, r24	; 0x06
    1f86:	c0 85       	ldd	r28, Z+8	; 0x08
    1f88:	d1 85       	ldd	r29, Z+9	; 0x09
    1f8a:	86 81       	ldd	r24, Z+6	; 0x06
    1f8c:	97 81       	ldd	r25, Z+7	; 0x07
    1f8e:	9d 83       	std	Y+5, r25	; 0x05
    1f90:	8c 83       	std	Y+4, r24	; 0x04
    1f92:	11 96       	adiw	r26, 0x01	; 1
    1f94:	8d 91       	ld	r24, X+
    1f96:	9c 91       	ld	r25, X
    1f98:	12 97       	sbiw	r26, 0x02	; 2
    1f9a:	9f 01       	movw	r18, r30
    1f9c:	2e 5f       	subi	r18, 0xFE	; 254
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa0:	82 17       	cp	r24, r18
    1fa2:	93 07       	cpc	r25, r19
    1fa4:	31 f4       	brne	.+12     	; 0x1fb2 <xTaskRemoveFromEventList+0x9e>
    1fa6:	80 85       	ldd	r24, Z+8	; 0x08
    1fa8:	91 85       	ldd	r25, Z+9	; 0x09
    1faa:	12 96       	adiw	r26, 0x02	; 2
    1fac:	9c 93       	st	X, r25
    1fae:	8e 93       	st	-X, r24
    1fb0:	11 97       	sbiw	r26, 0x01	; 1
    1fb2:	15 86       	std	Z+13, r1	; 0x0d
    1fb4:	14 86       	std	Z+12, r1	; 0x0c
    1fb6:	8c 91       	ld	r24, X
    1fb8:	81 50       	subi	r24, 0x01	; 1
    1fba:	8c 93       	st	X, r24
    1fbc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fbe:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <uxTopReadyPriority>
    1fc2:	8a 17       	cp	r24, r26
    1fc4:	10 f4       	brcc	.+4      	; 0x1fca <xTaskRemoveFromEventList+0xb6>
    1fc6:	a0 93 23 11 	sts	0x1123, r26	; 0x801123 <uxTopReadyPriority>
    1fca:	8b e0       	ldi	r24, 0x0B	; 11
    1fcc:	8a 9f       	mul	r24, r26
    1fce:	d0 01       	movw	r26, r0
    1fd0:	11 24       	eor	r1, r1
    1fd2:	ab 59       	subi	r26, 0x9B	; 155
    1fd4:	be 4e       	sbci	r27, 0xEE	; 238
    1fd6:	11 96       	adiw	r26, 0x01	; 1
    1fd8:	0d 90       	ld	r0, X+
    1fda:	bc 91       	ld	r27, X
    1fdc:	a0 2d       	mov	r26, r0
    1fde:	b7 83       	std	Z+7, r27	; 0x07
    1fe0:	a6 83       	std	Z+6, r26	; 0x06
    1fe2:	16 96       	adiw	r26, 0x06	; 6
    1fe4:	4d 91       	ld	r20, X+
    1fe6:	5c 91       	ld	r21, X
    1fe8:	17 97       	sbiw	r26, 0x07	; 7
    1fea:	51 87       	std	Z+9, r21	; 0x09
    1fec:	40 87       	std	Z+8, r20	; 0x08
    1fee:	16 96       	adiw	r26, 0x06	; 6
    1ff0:	cd 91       	ld	r28, X+
    1ff2:	dc 91       	ld	r29, X
    1ff4:	17 97       	sbiw	r26, 0x07	; 7
    1ff6:	3d 83       	std	Y+5, r19	; 0x05
    1ff8:	2c 83       	std	Y+4, r18	; 0x04
    1ffa:	17 96       	adiw	r26, 0x07	; 7
    1ffc:	3c 93       	st	X, r19
    1ffe:	2e 93       	st	-X, r18
    2000:	16 97       	sbiw	r26, 0x06	; 6
    2002:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2004:	8a 9f       	mul	r24, r26
    2006:	d0 01       	movw	r26, r0
    2008:	11 24       	eor	r1, r1
    200a:	ab 59       	subi	r26, 0x9B	; 155
    200c:	be 4e       	sbci	r27, 0xEE	; 238
    200e:	b5 87       	std	Z+13, r27	; 0x0d
    2010:	a4 87       	std	Z+12, r26	; 0x0c
    2012:	8c 91       	ld	r24, X
    2014:	8f 5f       	subi	r24, 0xFF	; 255
    2016:	8c 93       	st	X, r24
    2018:	1c c0       	rjmp	.+56     	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    201a:	40 e4       	ldi	r20, 0x40	; 64
    201c:	51 e1       	ldi	r21, 0x11	; 17
    201e:	da 01       	movw	r26, r20
    2020:	11 96       	adiw	r26, 0x01	; 1
    2022:	cd 91       	ld	r28, X+
    2024:	dc 91       	ld	r29, X
    2026:	12 97       	sbiw	r26, 0x02	; 2
    2028:	d3 8b       	std	Z+19, r29	; 0x13
    202a:	c2 8b       	std	Z+18, r28	; 0x12
    202c:	8e 81       	ldd	r24, Y+6	; 0x06
    202e:	9f 81       	ldd	r25, Y+7	; 0x07
    2030:	95 8b       	std	Z+21, r25	; 0x15
    2032:	84 8b       	std	Z+20, r24	; 0x14
    2034:	8e 81       	ldd	r24, Y+6	; 0x06
    2036:	9f 81       	ldd	r25, Y+7	; 0x07
    2038:	dc 01       	movw	r26, r24
    203a:	15 96       	adiw	r26, 0x05	; 5
    203c:	3c 93       	st	X, r19
    203e:	2e 93       	st	-X, r18
    2040:	14 97       	sbiw	r26, 0x04	; 4
    2042:	3f 83       	std	Y+7, r19	; 0x07
    2044:	2e 83       	std	Y+6, r18	; 0x06
    2046:	51 8f       	std	Z+25, r21	; 0x19
    2048:	40 8f       	std	Z+24, r20	; 0x18
    204a:	da 01       	movw	r26, r20
    204c:	8c 91       	ld	r24, X
    204e:	8f 5f       	subi	r24, 0xFF	; 255
    2050:	8c 93       	st	X, r24
    2052:	92 8d       	ldd	r25, Z+26	; 0x1a
    2054:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    2058:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    205c:	82 8d       	ldd	r24, Z+26	; 0x1a
    205e:	89 17       	cp	r24, r25
    2060:	20 f4       	brcc	.+8      	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	80 93 1d 11 	sts	0x111D, r24	; 0x80111d <xYieldPending>
    2068:	01 c0       	rjmp	.+2      	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <vTaskSetTimeOutState>:
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	0f 92       	push	r0
    2078:	20 91 1c 11 	lds	r18, 0x111C	; 0x80111c <xNumOfOverflows>
    207c:	fc 01       	movw	r30, r24
    207e:	20 83       	st	Z, r18
    2080:	40 91 24 11 	lds	r20, 0x1124	; 0x801124 <xTickCount>
    2084:	50 91 25 11 	lds	r21, 0x1125	; 0x801125 <xTickCount+0x1>
    2088:	60 91 26 11 	lds	r22, 0x1126	; 0x801126 <xTickCount+0x2>
    208c:	70 91 27 11 	lds	r23, 0x1127	; 0x801127 <xTickCount+0x3>
    2090:	41 83       	std	Z+1, r20	; 0x01
    2092:	52 83       	std	Z+2, r21	; 0x02
    2094:	63 83       	std	Z+3, r22	; 0x03
    2096:	74 83       	std	Z+4, r23	; 0x04
    2098:	0f 90       	pop	r0
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	08 95       	ret

0000209e <vTaskInternalSetTimeOutState>:
    209e:	20 91 1c 11 	lds	r18, 0x111C	; 0x80111c <xNumOfOverflows>
    20a2:	fc 01       	movw	r30, r24
    20a4:	20 83       	st	Z, r18
    20a6:	40 91 24 11 	lds	r20, 0x1124	; 0x801124 <xTickCount>
    20aa:	50 91 25 11 	lds	r21, 0x1125	; 0x801125 <xTickCount+0x1>
    20ae:	60 91 26 11 	lds	r22, 0x1126	; 0x801126 <xTickCount+0x2>
    20b2:	70 91 27 11 	lds	r23, 0x1127	; 0x801127 <xTickCount+0x3>
    20b6:	41 83       	std	Z+1, r20	; 0x01
    20b8:	52 83       	std	Z+2, r21	; 0x02
    20ba:	63 83       	std	Z+3, r22	; 0x03
    20bc:	74 83       	std	Z+4, r23	; 0x04
    20be:	08 95       	ret

000020c0 <xTaskCheckForTimeOut>:
    20c0:	8f 92       	push	r8
    20c2:	9f 92       	push	r9
    20c4:	af 92       	push	r10
    20c6:	bf 92       	push	r11
    20c8:	cf 92       	push	r12
    20ca:	df 92       	push	r13
    20cc:	ef 92       	push	r14
    20ce:	ff 92       	push	r15
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	fb 01       	movw	r30, r22
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	0f 92       	push	r0
    20e0:	c0 90 24 11 	lds	r12, 0x1124	; 0x801124 <xTickCount>
    20e4:	d0 90 25 11 	lds	r13, 0x1125	; 0x801125 <xTickCount+0x1>
    20e8:	e0 90 26 11 	lds	r14, 0x1126	; 0x801126 <xTickCount+0x2>
    20ec:	f0 90 27 11 	lds	r15, 0x1127	; 0x801127 <xTickCount+0x3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	11 96       	adiw	r26, 0x01	; 1
    20f4:	0d 91       	ld	r16, X+
    20f6:	1d 91       	ld	r17, X+
    20f8:	2d 91       	ld	r18, X+
    20fa:	3c 91       	ld	r19, X
    20fc:	14 97       	sbiw	r26, 0x04	; 4
    20fe:	46 01       	movw	r8, r12
    2100:	57 01       	movw	r10, r14
    2102:	80 1a       	sub	r8, r16
    2104:	91 0a       	sbc	r9, r17
    2106:	a2 0a       	sbc	r10, r18
    2108:	b3 0a       	sbc	r11, r19
    210a:	40 81       	ld	r20, Z
    210c:	51 81       	ldd	r21, Z+1	; 0x01
    210e:	62 81       	ldd	r22, Z+2	; 0x02
    2110:	73 81       	ldd	r23, Z+3	; 0x03
    2112:	4f 3f       	cpi	r20, 0xFF	; 255
    2114:	bf ef       	ldi	r27, 0xFF	; 255
    2116:	5b 07       	cpc	r21, r27
    2118:	6b 07       	cpc	r22, r27
    211a:	7b 07       	cpc	r23, r27
    211c:	39 f1       	breq	.+78     	; 0x216c <xTaskCheckForTimeOut+0xac>
    211e:	ec 01       	movw	r28, r24
    2120:	b8 81       	ld	r27, Y
    2122:	a0 91 1c 11 	lds	r26, 0x111C	; 0x80111c <xNumOfOverflows>
    2126:	ba 17       	cp	r27, r26
    2128:	59 f0       	breq	.+22     	; 0x2140 <xTaskCheckForTimeOut+0x80>
    212a:	c0 16       	cp	r12, r16
    212c:	d1 06       	cpc	r13, r17
    212e:	e2 06       	cpc	r14, r18
    2130:	f3 06       	cpc	r15, r19
    2132:	30 f0       	brcs	.+12     	; 0x2140 <xTaskCheckForTimeOut+0x80>
    2134:	10 82       	st	Z, r1
    2136:	11 82       	std	Z+1, r1	; 0x01
    2138:	12 82       	std	Z+2, r1	; 0x02
    213a:	13 82       	std	Z+3, r1	; 0x03
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	17 c0       	rjmp	.+46     	; 0x216e <xTaskCheckForTimeOut+0xae>
    2140:	84 16       	cp	r8, r20
    2142:	95 06       	cpc	r9, r21
    2144:	a6 06       	cpc	r10, r22
    2146:	b7 06       	cpc	r11, r23
    2148:	58 f4       	brcc	.+22     	; 0x2160 <xTaskCheckForTimeOut+0xa0>
    214a:	48 19       	sub	r20, r8
    214c:	59 09       	sbc	r21, r9
    214e:	6a 09       	sbc	r22, r10
    2150:	7b 09       	sbc	r23, r11
    2152:	40 83       	st	Z, r20
    2154:	51 83       	std	Z+1, r21	; 0x01
    2156:	62 83       	std	Z+2, r22	; 0x02
    2158:	73 83       	std	Z+3, r23	; 0x03
    215a:	a1 df       	rcall	.-190    	; 0x209e <vTaskInternalSetTimeOutState>
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	07 c0       	rjmp	.+14     	; 0x216e <xTaskCheckForTimeOut+0xae>
    2160:	10 82       	st	Z, r1
    2162:	11 82       	std	Z+1, r1	; 0x01
    2164:	12 82       	std	Z+2, r1	; 0x02
    2166:	13 82       	std	Z+3, r1	; 0x03
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	01 c0       	rjmp	.+2      	; 0x216e <xTaskCheckForTimeOut+0xae>
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	df 90       	pop	r13
    2180:	cf 90       	pop	r12
    2182:	bf 90       	pop	r11
    2184:	af 90       	pop	r10
    2186:	9f 90       	pop	r9
    2188:	8f 90       	pop	r8
    218a:	08 95       	ret

0000218c <vTaskMissedYield>:
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	80 93 1d 11 	sts	0x111D, r24	; 0x80111d <xYieldPending>
    2192:	08 95       	ret

00002194 <xTaskGetCurrentTaskHandle>:
    2194:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    2198:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    219c:	08 95       	ret

0000219e <xTaskGetSchedulerState>:
    219e:	80 91 22 11 	lds	r24, 0x1122	; 0x801122 <xSchedulerRunning>
    21a2:	88 23       	and	r24, r24
    21a4:	31 f0       	breq	.+12     	; 0x21b2 <xTaskGetSchedulerState+0x14>
    21a6:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxSchedulerSuspended>
    21aa:	81 11       	cpse	r24, r1
    21ac:	04 c0       	rjmp	.+8      	; 0x21b6 <xTaskGetSchedulerState+0x18>
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	08 95       	ret
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	08 95       	ret
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	08 95       	ret

000021ba <xTaskPriorityDisinherit>:
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	fc 01       	movw	r30, r24
    21c4:	89 2b       	or	r24, r25
    21c6:	09 f4       	brne	.+2      	; 0x21ca <xTaskPriorityDisinherit+0x10>
    21c8:	49 c0       	rjmp	.+146    	; 0x225c <__stack+0x5d>
    21ca:	86 a5       	ldd	r24, Z+46	; 0x2e
    21cc:	81 50       	subi	r24, 0x01	; 1
    21ce:	86 a7       	std	Z+46, r24	; 0x2e
    21d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    21d2:	95 a5       	ldd	r25, Z+45	; 0x2d
    21d4:	29 17       	cp	r18, r25
    21d6:	09 f4       	brne	.+2      	; 0x21da <xTaskPriorityDisinherit+0x20>
    21d8:	43 c0       	rjmp	.+134    	; 0x2260 <__stack+0x61>
    21da:	81 11       	cpse	r24, r1
    21dc:	43 c0       	rjmp	.+134    	; 0x2264 <__stack+0x65>
    21de:	ef 01       	movw	r28, r30
    21e0:	8f 01       	movw	r16, r30
    21e2:	0e 5f       	subi	r16, 0xFE	; 254
    21e4:	1f 4f       	sbci	r17, 0xFF	; 255
    21e6:	c8 01       	movw	r24, r16
    21e8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
    21ec:	ed a5       	ldd	r30, Y+45	; 0x2d
    21ee:	ea 8f       	std	Y+26, r30	; 0x1a
    21f0:	8a e0       	ldi	r24, 0x0A	; 10
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	a0 e0       	ldi	r26, 0x00	; 0
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	8e 1b       	sub	r24, r30
    21fa:	91 09       	sbc	r25, r1
    21fc:	a1 09       	sbc	r26, r1
    21fe:	b1 09       	sbc	r27, r1
    2200:	8e 87       	std	Y+14, r24	; 0x0e
    2202:	9f 87       	std	Y+15, r25	; 0x0f
    2204:	a8 8b       	std	Y+16, r26	; 0x10
    2206:	b9 8b       	std	Y+17, r27	; 0x11
    2208:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <uxTopReadyPriority>
    220c:	8e 17       	cp	r24, r30
    220e:	10 f4       	brcc	.+4      	; 0x2214 <__stack+0x15>
    2210:	e0 93 23 11 	sts	0x1123, r30	; 0x801123 <uxTopReadyPriority>
    2214:	8b e0       	ldi	r24, 0x0B	; 11
    2216:	8e 9f       	mul	r24, r30
    2218:	f0 01       	movw	r30, r0
    221a:	11 24       	eor	r1, r1
    221c:	eb 59       	subi	r30, 0x9B	; 155
    221e:	fe 4e       	sbci	r31, 0xEE	; 238
    2220:	01 80       	ldd	r0, Z+1	; 0x01
    2222:	f2 81       	ldd	r31, Z+2	; 0x02
    2224:	e0 2d       	mov	r30, r0
    2226:	ff 83       	std	Y+7, r31	; 0x07
    2228:	ee 83       	std	Y+6, r30	; 0x06
    222a:	26 81       	ldd	r18, Z+6	; 0x06
    222c:	37 81       	ldd	r19, Z+7	; 0x07
    222e:	39 87       	std	Y+9, r19	; 0x09
    2230:	28 87       	std	Y+8, r18	; 0x08
    2232:	a6 81       	ldd	r26, Z+6	; 0x06
    2234:	b7 81       	ldd	r27, Z+7	; 0x07
    2236:	15 96       	adiw	r26, 0x05	; 5
    2238:	1c 93       	st	X, r17
    223a:	0e 93       	st	-X, r16
    223c:	14 97       	sbiw	r26, 0x04	; 4
    223e:	17 83       	std	Z+7, r17	; 0x07
    2240:	06 83       	std	Z+6, r16	; 0x06
    2242:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2244:	8e 9f       	mul	r24, r30
    2246:	f0 01       	movw	r30, r0
    2248:	11 24       	eor	r1, r1
    224a:	eb 59       	subi	r30, 0x9B	; 155
    224c:	fe 4e       	sbci	r31, 0xEE	; 238
    224e:	fd 87       	std	Y+13, r31	; 0x0d
    2250:	ec 87       	std	Y+12, r30	; 0x0c
    2252:	80 81       	ld	r24, Z
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	80 83       	st	Z, r24
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	05 c0       	rjmp	.+10     	; 0x2266 <__stack+0x67>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <__stack+0x67>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	01 c0       	rjmp	.+2      	; 0x2266 <__stack+0x67>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	08 95       	ret

00002270 <xTaskGenericNotifyWait>:
    2270:	4f 92       	push	r4
    2272:	5f 92       	push	r5
    2274:	6f 92       	push	r6
    2276:	7f 92       	push	r7
    2278:	af 92       	push	r10
    227a:	bf 92       	push	r11
    227c:	cf 92       	push	r12
    227e:	df 92       	push	r13
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	28 01       	movw	r4, r16
    228e:	39 01       	movw	r6, r18
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	0f 92       	push	r0
    2296:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    229a:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    229e:	c8 2f       	mov	r28, r24
    22a0:	d0 e0       	ldi	r29, 0x00	; 0
    22a2:	ec 0f       	add	r30, r28
    22a4:	fd 1f       	adc	r31, r29
    22a6:	83 a9       	ldd	r24, Z+51	; 0x33
    22a8:	82 30       	cpi	r24, 0x02	; 2
    22aa:	71 f1       	breq	.+92     	; 0x2308 <xTaskGenericNotifyWait+0x98>
    22ac:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    22b0:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    22b4:	ce 01       	movw	r24, r28
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	e8 0f       	add	r30, r24
    22c0:	f9 1f       	adc	r31, r25
    22c2:	87 a5       	ldd	r24, Z+47	; 0x2f
    22c4:	90 a9       	ldd	r25, Z+48	; 0x30
    22c6:	a1 a9       	ldd	r26, Z+49	; 0x31
    22c8:	b2 a9       	ldd	r27, Z+50	; 0x32
    22ca:	40 95       	com	r20
    22cc:	50 95       	com	r21
    22ce:	60 95       	com	r22
    22d0:	70 95       	com	r23
    22d2:	48 23       	and	r20, r24
    22d4:	59 23       	and	r21, r25
    22d6:	6a 23       	and	r22, r26
    22d8:	7b 23       	and	r23, r27
    22da:	47 a7       	std	Z+47, r20	; 0x2f
    22dc:	50 ab       	std	Z+48, r21	; 0x30
    22de:	61 ab       	std	Z+49, r22	; 0x31
    22e0:	72 ab       	std	Z+50, r23	; 0x32
    22e2:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    22e6:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    22ea:	ec 0f       	add	r30, r28
    22ec:	fd 1f       	adc	r31, r29
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	83 ab       	std	Z+51, r24	; 0x33
    22f2:	a1 14       	cp	r10, r1
    22f4:	b1 04       	cpc	r11, r1
    22f6:	c1 04       	cpc	r12, r1
    22f8:	d1 04       	cpc	r13, r1
    22fa:	31 f0       	breq	.+12     	; 0x2308 <xTaskGenericNotifyWait+0x98>
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	c6 01       	movw	r24, r12
    2300:	b5 01       	movw	r22, r10
    2302:	88 d9       	rcall	.-3312   	; 0x1614 <prvAddCurrentTaskToDelayedList>
    2304:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    2308:	0f 90       	pop	r0
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	0f 92       	push	r0
    2312:	e1 14       	cp	r14, r1
    2314:	f1 04       	cpc	r15, r1
    2316:	a1 f0       	breq	.+40     	; 0x2340 <xTaskGenericNotifyWait+0xd0>
    2318:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    231c:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    2320:	ce 01       	movw	r24, r28
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	e8 0f       	add	r30, r24
    232c:	f9 1f       	adc	r31, r25
    232e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2330:	90 a9       	ldd	r25, Z+48	; 0x30
    2332:	a1 a9       	ldd	r26, Z+49	; 0x31
    2334:	b2 a9       	ldd	r27, Z+50	; 0x32
    2336:	f7 01       	movw	r30, r14
    2338:	80 83       	st	Z, r24
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	a2 83       	std	Z+2, r26	; 0x02
    233e:	b3 83       	std	Z+3, r27	; 0x03
    2340:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    2344:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    2348:	ec 0f       	add	r30, r28
    234a:	fd 1f       	adc	r31, r29
    234c:	83 a9       	ldd	r24, Z+51	; 0x33
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	e9 f4       	brne	.+58     	; 0x238c <xTaskGenericNotifyWait+0x11c>
    2352:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    2356:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    235a:	ce 01       	movw	r24, r28
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	e8 0f       	add	r30, r24
    2366:	f9 1f       	adc	r31, r25
    2368:	87 a5       	ldd	r24, Z+47	; 0x2f
    236a:	90 a9       	ldd	r25, Z+48	; 0x30
    236c:	a1 a9       	ldd	r26, Z+49	; 0x31
    236e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2370:	40 94       	com	r4
    2372:	50 94       	com	r5
    2374:	60 94       	com	r6
    2376:	70 94       	com	r7
    2378:	48 22       	and	r4, r24
    237a:	59 22       	and	r5, r25
    237c:	6a 22       	and	r6, r26
    237e:	7b 22       	and	r7, r27
    2380:	47 a6       	std	Z+47, r4	; 0x2f
    2382:	50 aa       	std	Z+48, r5	; 0x30
    2384:	61 aa       	std	Z+49, r6	; 0x31
    2386:	72 aa       	std	Z+50, r7	; 0x32
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	01 c0       	rjmp	.+2      	; 0x238e <xTaskGenericNotifyWait+0x11e>
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	20 91 d3 11 	lds	r18, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    2392:	30 91 d4 11 	lds	r19, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    2396:	c2 0f       	add	r28, r18
    2398:	d3 1f       	adc	r29, r19
    239a:	1b aa       	std	Y+51, r1	; 0x33
    239c:	0f 90       	pop	r0
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	df 90       	pop	r13
    23ae:	cf 90       	pop	r12
    23b0:	bf 90       	pop	r11
    23b2:	af 90       	pop	r10
    23b4:	7f 90       	pop	r7
    23b6:	6f 90       	pop	r6
    23b8:	5f 90       	pop	r5
    23ba:	4f 90       	pop	r4
    23bc:	08 95       	ret

000023be <xTaskGenericNotify>:
    23be:	8f 92       	push	r8
    23c0:	9f 92       	push	r9
    23c2:	af 92       	push	r10
    23c4:	bf 92       	push	r11
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	dc 01       	movw	r26, r24
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	0f 92       	push	r0
    23d8:	e1 14       	cp	r14, r1
    23da:	f1 04       	cpc	r15, r1
    23dc:	89 f0       	breq	.+34     	; 0x2400 <xTaskGenericNotify+0x42>
    23de:	e6 2f       	mov	r30, r22
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	e8 0f       	add	r30, r24
    23ec:	f9 1f       	adc	r31, r25
    23ee:	87 a4       	ldd	r8, Z+47	; 0x2f
    23f0:	90 a8       	ldd	r9, Z+48	; 0x30
    23f2:	a1 a8       	ldd	r10, Z+49	; 0x31
    23f4:	b2 a8       	ldd	r11, Z+50	; 0x32
    23f6:	f7 01       	movw	r30, r14
    23f8:	80 82       	st	Z, r8
    23fa:	91 82       	std	Z+1, r9	; 0x01
    23fc:	a2 82       	std	Z+2, r10	; 0x02
    23fe:	b3 82       	std	Z+3, r11	; 0x03
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	fd 01       	movw	r30, r26
    2404:	e6 0f       	add	r30, r22
    2406:	f7 1f       	adc	r31, r23
    2408:	83 a9       	ldd	r24, Z+51	; 0x33
    240a:	92 e0       	ldi	r25, 0x02	; 2
    240c:	93 ab       	std	Z+51, r25	; 0x33
    240e:	02 30       	cpi	r16, 0x02	; 2
    2410:	01 f1       	breq	.+64     	; 0x2452 <xTaskGenericNotify+0x94>
    2412:	18 f4       	brcc	.+6      	; 0x241a <xTaskGenericNotify+0x5c>
    2414:	01 30       	cpi	r16, 0x01	; 1
    2416:	31 f0       	breq	.+12     	; 0x2424 <xTaskGenericNotify+0x66>
    2418:	4d c0       	rjmp	.+154    	; 0x24b4 <xTaskGenericNotify+0xf6>
    241a:	03 30       	cpi	r16, 0x03	; 3
    241c:	79 f1       	breq	.+94     	; 0x247c <xTaskGenericNotify+0xbe>
    241e:	04 30       	cpi	r16, 0x04	; 4
    2420:	d1 f1       	breq	.+116    	; 0x2496 <xTaskGenericNotify+0xd8>
    2422:	48 c0       	rjmp	.+144    	; 0x24b4 <xTaskGenericNotify+0xf6>
    2424:	66 0f       	add	r22, r22
    2426:	77 1f       	adc	r23, r23
    2428:	66 0f       	add	r22, r22
    242a:	77 1f       	adc	r23, r23
    242c:	fd 01       	movw	r30, r26
    242e:	e6 0f       	add	r30, r22
    2430:	f7 1f       	adc	r31, r23
    2432:	87 a4       	ldd	r8, Z+47	; 0x2f
    2434:	90 a8       	ldd	r9, Z+48	; 0x30
    2436:	a1 a8       	ldd	r10, Z+49	; 0x31
    2438:	b2 a8       	ldd	r11, Z+50	; 0x32
    243a:	ba 01       	movw	r22, r20
    243c:	a9 01       	movw	r20, r18
    243e:	48 29       	or	r20, r8
    2440:	59 29       	or	r21, r9
    2442:	6a 29       	or	r22, r10
    2444:	7b 29       	or	r23, r11
    2446:	47 a7       	std	Z+47, r20	; 0x2f
    2448:	50 ab       	std	Z+48, r21	; 0x30
    244a:	61 ab       	std	Z+49, r22	; 0x31
    244c:	72 ab       	std	Z+50, r23	; 0x32
    244e:	01 e0       	ldi	r16, 0x01	; 1
    2450:	34 c0       	rjmp	.+104    	; 0x24ba <xTaskGenericNotify+0xfc>
    2452:	66 0f       	add	r22, r22
    2454:	77 1f       	adc	r23, r23
    2456:	66 0f       	add	r22, r22
    2458:	77 1f       	adc	r23, r23
    245a:	fd 01       	movw	r30, r26
    245c:	e6 0f       	add	r30, r22
    245e:	f7 1f       	adc	r31, r23
    2460:	47 a5       	ldd	r20, Z+47	; 0x2f
    2462:	50 a9       	ldd	r21, Z+48	; 0x30
    2464:	61 a9       	ldd	r22, Z+49	; 0x31
    2466:	72 a9       	ldd	r23, Z+50	; 0x32
    2468:	4f 5f       	subi	r20, 0xFF	; 255
    246a:	5f 4f       	sbci	r21, 0xFF	; 255
    246c:	6f 4f       	sbci	r22, 0xFF	; 255
    246e:	7f 4f       	sbci	r23, 0xFF	; 255
    2470:	47 a7       	std	Z+47, r20	; 0x2f
    2472:	50 ab       	std	Z+48, r21	; 0x30
    2474:	61 ab       	std	Z+49, r22	; 0x31
    2476:	72 ab       	std	Z+50, r23	; 0x32
    2478:	01 e0       	ldi	r16, 0x01	; 1
    247a:	1f c0       	rjmp	.+62     	; 0x24ba <xTaskGenericNotify+0xfc>
    247c:	66 0f       	add	r22, r22
    247e:	77 1f       	adc	r23, r23
    2480:	66 0f       	add	r22, r22
    2482:	77 1f       	adc	r23, r23
    2484:	fd 01       	movw	r30, r26
    2486:	e6 0f       	add	r30, r22
    2488:	f7 1f       	adc	r31, r23
    248a:	27 a7       	std	Z+47, r18	; 0x2f
    248c:	30 ab       	std	Z+48, r19	; 0x30
    248e:	41 ab       	std	Z+49, r20	; 0x31
    2490:	52 ab       	std	Z+50, r21	; 0x32
    2492:	01 e0       	ldi	r16, 0x01	; 1
    2494:	12 c0       	rjmp	.+36     	; 0x24ba <xTaskGenericNotify+0xfc>
    2496:	82 30       	cpi	r24, 0x02	; 2
    2498:	79 f0       	breq	.+30     	; 0x24b8 <xTaskGenericNotify+0xfa>
    249a:	66 0f       	add	r22, r22
    249c:	77 1f       	adc	r23, r23
    249e:	66 0f       	add	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	fd 01       	movw	r30, r26
    24a4:	e6 0f       	add	r30, r22
    24a6:	f7 1f       	adc	r31, r23
    24a8:	27 a7       	std	Z+47, r18	; 0x2f
    24aa:	30 ab       	std	Z+48, r19	; 0x30
    24ac:	41 ab       	std	Z+49, r20	; 0x31
    24ae:	52 ab       	std	Z+50, r21	; 0x32
    24b0:	01 e0       	ldi	r16, 0x01	; 1
    24b2:	03 c0       	rjmp	.+6      	; 0x24ba <xTaskGenericNotify+0xfc>
    24b4:	01 e0       	ldi	r16, 0x01	; 1
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <xTaskGenericNotify+0xfc>
    24b8:	00 e0       	ldi	r16, 0x00	; 0
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <xTaskGenericNotify+0x102>
    24be:	69 c0       	rjmp	.+210    	; 0x2592 <xTaskGenericNotify+0x1d4>
    24c0:	1c 96       	adiw	r26, 0x0c	; 12
    24c2:	ed 91       	ld	r30, X+
    24c4:	fc 91       	ld	r31, X
    24c6:	1d 97       	sbiw	r26, 0x0d	; 13
    24c8:	16 96       	adiw	r26, 0x06	; 6
    24ca:	cd 91       	ld	r28, X+
    24cc:	dc 91       	ld	r29, X
    24ce:	17 97       	sbiw	r26, 0x07	; 7
    24d0:	18 96       	adiw	r26, 0x08	; 8
    24d2:	8d 91       	ld	r24, X+
    24d4:	9c 91       	ld	r25, X
    24d6:	19 97       	sbiw	r26, 0x09	; 9
    24d8:	9f 83       	std	Y+7, r25	; 0x07
    24da:	8e 83       	std	Y+6, r24	; 0x06
    24dc:	18 96       	adiw	r26, 0x08	; 8
    24de:	cd 91       	ld	r28, X+
    24e0:	dc 91       	ld	r29, X
    24e2:	19 97       	sbiw	r26, 0x09	; 9
    24e4:	16 96       	adiw	r26, 0x06	; 6
    24e6:	8d 91       	ld	r24, X+
    24e8:	9c 91       	ld	r25, X
    24ea:	17 97       	sbiw	r26, 0x07	; 7
    24ec:	9d 83       	std	Y+5, r25	; 0x05
    24ee:	8c 83       	std	Y+4, r24	; 0x04
    24f0:	81 81       	ldd	r24, Z+1	; 0x01
    24f2:	92 81       	ldd	r25, Z+2	; 0x02
    24f4:	9d 01       	movw	r18, r26
    24f6:	2e 5f       	subi	r18, 0xFE	; 254
    24f8:	3f 4f       	sbci	r19, 0xFF	; 255
    24fa:	82 17       	cp	r24, r18
    24fc:	93 07       	cpc	r25, r19
    24fe:	31 f4       	brne	.+12     	; 0x250c <xTaskGenericNotify+0x14e>
    2500:	18 96       	adiw	r26, 0x08	; 8
    2502:	8d 91       	ld	r24, X+
    2504:	9c 91       	ld	r25, X
    2506:	19 97       	sbiw	r26, 0x09	; 9
    2508:	92 83       	std	Z+2, r25	; 0x02
    250a:	81 83       	std	Z+1, r24	; 0x01
    250c:	1d 96       	adiw	r26, 0x0d	; 13
    250e:	1c 92       	st	X, r1
    2510:	1e 92       	st	-X, r1
    2512:	1c 97       	sbiw	r26, 0x0c	; 12
    2514:	80 81       	ld	r24, Z
    2516:	81 50       	subi	r24, 0x01	; 1
    2518:	80 83       	st	Z, r24
    251a:	5a 96       	adiw	r26, 0x1a	; 26
    251c:	ec 91       	ld	r30, X
    251e:	5a 97       	sbiw	r26, 0x1a	; 26
    2520:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <uxTopReadyPriority>
    2524:	8e 17       	cp	r24, r30
    2526:	10 f4       	brcc	.+4      	; 0x252c <xTaskGenericNotify+0x16e>
    2528:	e0 93 23 11 	sts	0x1123, r30	; 0x801123 <uxTopReadyPriority>
    252c:	8b e0       	ldi	r24, 0x0B	; 11
    252e:	8e 9f       	mul	r24, r30
    2530:	f0 01       	movw	r30, r0
    2532:	11 24       	eor	r1, r1
    2534:	eb 59       	subi	r30, 0x9B	; 155
    2536:	fe 4e       	sbci	r31, 0xEE	; 238
    2538:	01 80       	ldd	r0, Z+1	; 0x01
    253a:	f2 81       	ldd	r31, Z+2	; 0x02
    253c:	e0 2d       	mov	r30, r0
    253e:	17 96       	adiw	r26, 0x07	; 7
    2540:	fc 93       	st	X, r31
    2542:	ee 93       	st	-X, r30
    2544:	16 97       	sbiw	r26, 0x06	; 6
    2546:	46 81       	ldd	r20, Z+6	; 0x06
    2548:	57 81       	ldd	r21, Z+7	; 0x07
    254a:	19 96       	adiw	r26, 0x09	; 9
    254c:	5c 93       	st	X, r21
    254e:	4e 93       	st	-X, r20
    2550:	18 97       	sbiw	r26, 0x08	; 8
    2552:	c6 81       	ldd	r28, Z+6	; 0x06
    2554:	d7 81       	ldd	r29, Z+7	; 0x07
    2556:	3d 83       	std	Y+5, r19	; 0x05
    2558:	2c 83       	std	Y+4, r18	; 0x04
    255a:	37 83       	std	Z+7, r19	; 0x07
    255c:	26 83       	std	Z+6, r18	; 0x06
    255e:	5a 96       	adiw	r26, 0x1a	; 26
    2560:	ec 91       	ld	r30, X
    2562:	5a 97       	sbiw	r26, 0x1a	; 26
    2564:	8e 9f       	mul	r24, r30
    2566:	f0 01       	movw	r30, r0
    2568:	11 24       	eor	r1, r1
    256a:	eb 59       	subi	r30, 0x9B	; 155
    256c:	fe 4e       	sbci	r31, 0xEE	; 238
    256e:	1d 96       	adiw	r26, 0x0d	; 13
    2570:	fc 93       	st	X, r31
    2572:	ee 93       	st	-X, r30
    2574:	1c 97       	sbiw	r26, 0x0c	; 12
    2576:	80 81       	ld	r24, Z
    2578:	8f 5f       	subi	r24, 0xFF	; 255
    257a:	80 83       	st	Z, r24
    257c:	5a 96       	adiw	r26, 0x1a	; 26
    257e:	9c 91       	ld	r25, X
    2580:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    2584:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    2588:	82 8d       	ldd	r24, Z+26	; 0x1a
    258a:	89 17       	cp	r24, r25
    258c:	10 f4       	brcc	.+4      	; 0x2592 <xTaskGenericNotify+0x1d4>
    258e:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    2592:	0f 90       	pop	r0
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	80 2f       	mov	r24, r16
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	0f 91       	pop	r16
    259e:	ff 90       	pop	r15
    25a0:	ef 90       	pop	r14
    25a2:	bf 90       	pop	r11
    25a4:	af 90       	pop	r10
    25a6:	9f 90       	pop	r9
    25a8:	8f 90       	pop	r8
    25aa:	08 95       	ret

000025ac <xTaskGenericNotifyFromISR>:
    25ac:	8f 92       	push	r8
    25ae:	9f 92       	push	r9
    25b0:	af 92       	push	r10
    25b2:	bf 92       	push	r11
    25b4:	cf 92       	push	r12
    25b6:	df 92       	push	r13
    25b8:	ef 92       	push	r14
    25ba:	ff 92       	push	r15
    25bc:	0f 93       	push	r16
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	dc 01       	movw	r26, r24
    25c4:	e1 14       	cp	r14, r1
    25c6:	f1 04       	cpc	r15, r1
    25c8:	89 f0       	breq	.+34     	; 0x25ec <xTaskGenericNotifyFromISR+0x40>
    25ca:	e6 2f       	mov	r30, r22
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	ee 0f       	add	r30, r30
    25d4:	ff 1f       	adc	r31, r31
    25d6:	e8 0f       	add	r30, r24
    25d8:	f9 1f       	adc	r31, r25
    25da:	87 a4       	ldd	r8, Z+47	; 0x2f
    25dc:	90 a8       	ldd	r9, Z+48	; 0x30
    25de:	a1 a8       	ldd	r10, Z+49	; 0x31
    25e0:	b2 a8       	ldd	r11, Z+50	; 0x32
    25e2:	f7 01       	movw	r30, r14
    25e4:	80 82       	st	Z, r8
    25e6:	91 82       	std	Z+1, r9	; 0x01
    25e8:	a2 82       	std	Z+2, r10	; 0x02
    25ea:	b3 82       	std	Z+3, r11	; 0x03
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	fd 01       	movw	r30, r26
    25f0:	e6 0f       	add	r30, r22
    25f2:	f7 1f       	adc	r31, r23
    25f4:	93 a9       	ldd	r25, Z+51	; 0x33
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	83 ab       	std	Z+51, r24	; 0x33
    25fa:	02 30       	cpi	r16, 0x02	; 2
    25fc:	01 f1       	breq	.+64     	; 0x263e <xTaskGenericNotifyFromISR+0x92>
    25fe:	18 f4       	brcc	.+6      	; 0x2606 <xTaskGenericNotifyFromISR+0x5a>
    2600:	01 30       	cpi	r16, 0x01	; 1
    2602:	31 f0       	breq	.+12     	; 0x2610 <xTaskGenericNotifyFromISR+0x64>
    2604:	4d c0       	rjmp	.+154    	; 0x26a0 <xTaskGenericNotifyFromISR+0xf4>
    2606:	03 30       	cpi	r16, 0x03	; 3
    2608:	79 f1       	breq	.+94     	; 0x2668 <xTaskGenericNotifyFromISR+0xbc>
    260a:	04 30       	cpi	r16, 0x04	; 4
    260c:	d1 f1       	breq	.+116    	; 0x2682 <xTaskGenericNotifyFromISR+0xd6>
    260e:	48 c0       	rjmp	.+144    	; 0x26a0 <xTaskGenericNotifyFromISR+0xf4>
    2610:	66 0f       	add	r22, r22
    2612:	77 1f       	adc	r23, r23
    2614:	66 0f       	add	r22, r22
    2616:	77 1f       	adc	r23, r23
    2618:	fd 01       	movw	r30, r26
    261a:	e6 0f       	add	r30, r22
    261c:	f7 1f       	adc	r31, r23
    261e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2620:	90 a8       	ldd	r9, Z+48	; 0x30
    2622:	a1 a8       	ldd	r10, Z+49	; 0x31
    2624:	b2 a8       	ldd	r11, Z+50	; 0x32
    2626:	ba 01       	movw	r22, r20
    2628:	a9 01       	movw	r20, r18
    262a:	48 29       	or	r20, r8
    262c:	59 29       	or	r21, r9
    262e:	6a 29       	or	r22, r10
    2630:	7b 29       	or	r23, r11
    2632:	47 a7       	std	Z+47, r20	; 0x2f
    2634:	50 ab       	std	Z+48, r21	; 0x30
    2636:	61 ab       	std	Z+49, r22	; 0x31
    2638:	72 ab       	std	Z+50, r23	; 0x32
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	34 c0       	rjmp	.+104    	; 0x26a6 <xTaskGenericNotifyFromISR+0xfa>
    263e:	66 0f       	add	r22, r22
    2640:	77 1f       	adc	r23, r23
    2642:	66 0f       	add	r22, r22
    2644:	77 1f       	adc	r23, r23
    2646:	fd 01       	movw	r30, r26
    2648:	e6 0f       	add	r30, r22
    264a:	f7 1f       	adc	r31, r23
    264c:	47 a5       	ldd	r20, Z+47	; 0x2f
    264e:	50 a9       	ldd	r21, Z+48	; 0x30
    2650:	61 a9       	ldd	r22, Z+49	; 0x31
    2652:	72 a9       	ldd	r23, Z+50	; 0x32
    2654:	4f 5f       	subi	r20, 0xFF	; 255
    2656:	5f 4f       	sbci	r21, 0xFF	; 255
    2658:	6f 4f       	sbci	r22, 0xFF	; 255
    265a:	7f 4f       	sbci	r23, 0xFF	; 255
    265c:	47 a7       	std	Z+47, r20	; 0x2f
    265e:	50 ab       	std	Z+48, r21	; 0x30
    2660:	61 ab       	std	Z+49, r22	; 0x31
    2662:	72 ab       	std	Z+50, r23	; 0x32
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	1f c0       	rjmp	.+62     	; 0x26a6 <xTaskGenericNotifyFromISR+0xfa>
    2668:	66 0f       	add	r22, r22
    266a:	77 1f       	adc	r23, r23
    266c:	66 0f       	add	r22, r22
    266e:	77 1f       	adc	r23, r23
    2670:	fd 01       	movw	r30, r26
    2672:	e6 0f       	add	r30, r22
    2674:	f7 1f       	adc	r31, r23
    2676:	27 a7       	std	Z+47, r18	; 0x2f
    2678:	30 ab       	std	Z+48, r19	; 0x30
    267a:	41 ab       	std	Z+49, r20	; 0x31
    267c:	52 ab       	std	Z+50, r21	; 0x32
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	12 c0       	rjmp	.+36     	; 0x26a6 <xTaskGenericNotifyFromISR+0xfa>
    2682:	92 30       	cpi	r25, 0x02	; 2
    2684:	79 f0       	breq	.+30     	; 0x26a4 <xTaskGenericNotifyFromISR+0xf8>
    2686:	66 0f       	add	r22, r22
    2688:	77 1f       	adc	r23, r23
    268a:	66 0f       	add	r22, r22
    268c:	77 1f       	adc	r23, r23
    268e:	fd 01       	movw	r30, r26
    2690:	e6 0f       	add	r30, r22
    2692:	f7 1f       	adc	r31, r23
    2694:	27 a7       	std	Z+47, r18	; 0x2f
    2696:	30 ab       	std	Z+48, r19	; 0x30
    2698:	41 ab       	std	Z+49, r20	; 0x31
    269a:	52 ab       	std	Z+50, r21	; 0x32
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <xTaskGenericNotifyFromISR+0xfa>
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	01 c0       	rjmp	.+2      	; 0x26a6 <xTaskGenericNotifyFromISR+0xfa>
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	91 30       	cpi	r25, 0x01	; 1
    26a8:	09 f0       	breq	.+2      	; 0x26ac <xTaskGenericNotifyFromISR+0x100>
    26aa:	96 c0       	rjmp	.+300    	; 0x27d8 <xTaskGenericNotifyFromISR+0x22c>
    26ac:	90 91 14 11 	lds	r25, 0x1114	; 0x801114 <uxSchedulerSuspended>
    26b0:	91 11       	cpse	r25, r1
    26b2:	5f c0       	rjmp	.+190    	; 0x2772 <xTaskGenericNotifyFromISR+0x1c6>
    26b4:	1c 96       	adiw	r26, 0x0c	; 12
    26b6:	ed 91       	ld	r30, X+
    26b8:	fc 91       	ld	r31, X
    26ba:	1d 97       	sbiw	r26, 0x0d	; 13
    26bc:	16 96       	adiw	r26, 0x06	; 6
    26be:	cd 91       	ld	r28, X+
    26c0:	dc 91       	ld	r29, X
    26c2:	17 97       	sbiw	r26, 0x07	; 7
    26c4:	18 96       	adiw	r26, 0x08	; 8
    26c6:	2d 91       	ld	r18, X+
    26c8:	3c 91       	ld	r19, X
    26ca:	19 97       	sbiw	r26, 0x09	; 9
    26cc:	3f 83       	std	Y+7, r19	; 0x07
    26ce:	2e 83       	std	Y+6, r18	; 0x06
    26d0:	18 96       	adiw	r26, 0x08	; 8
    26d2:	cd 91       	ld	r28, X+
    26d4:	dc 91       	ld	r29, X
    26d6:	19 97       	sbiw	r26, 0x09	; 9
    26d8:	16 96       	adiw	r26, 0x06	; 6
    26da:	2d 91       	ld	r18, X+
    26dc:	3c 91       	ld	r19, X
    26de:	17 97       	sbiw	r26, 0x07	; 7
    26e0:	3d 83       	std	Y+5, r19	; 0x05
    26e2:	2c 83       	std	Y+4, r18	; 0x04
    26e4:	41 81       	ldd	r20, Z+1	; 0x01
    26e6:	52 81       	ldd	r21, Z+2	; 0x02
    26e8:	9d 01       	movw	r18, r26
    26ea:	2e 5f       	subi	r18, 0xFE	; 254
    26ec:	3f 4f       	sbci	r19, 0xFF	; 255
    26ee:	42 17       	cp	r20, r18
    26f0:	53 07       	cpc	r21, r19
    26f2:	31 f4       	brne	.+12     	; 0x2700 <xTaskGenericNotifyFromISR+0x154>
    26f4:	18 96       	adiw	r26, 0x08	; 8
    26f6:	4d 91       	ld	r20, X+
    26f8:	5c 91       	ld	r21, X
    26fa:	19 97       	sbiw	r26, 0x09	; 9
    26fc:	52 83       	std	Z+2, r21	; 0x02
    26fe:	41 83       	std	Z+1, r20	; 0x01
    2700:	1d 96       	adiw	r26, 0x0d	; 13
    2702:	1c 92       	st	X, r1
    2704:	1e 92       	st	-X, r1
    2706:	1c 97       	sbiw	r26, 0x0c	; 12
    2708:	90 81       	ld	r25, Z
    270a:	91 50       	subi	r25, 0x01	; 1
    270c:	90 83       	st	Z, r25
    270e:	5a 96       	adiw	r26, 0x1a	; 26
    2710:	ec 91       	ld	r30, X
    2712:	5a 97       	sbiw	r26, 0x1a	; 26
    2714:	90 91 23 11 	lds	r25, 0x1123	; 0x801123 <uxTopReadyPriority>
    2718:	9e 17       	cp	r25, r30
    271a:	10 f4       	brcc	.+4      	; 0x2720 <xTaskGenericNotifyFromISR+0x174>
    271c:	e0 93 23 11 	sts	0x1123, r30	; 0x801123 <uxTopReadyPriority>
    2720:	9b e0       	ldi	r25, 0x0B	; 11
    2722:	9e 9f       	mul	r25, r30
    2724:	f0 01       	movw	r30, r0
    2726:	11 24       	eor	r1, r1
    2728:	eb 59       	subi	r30, 0x9B	; 155
    272a:	fe 4e       	sbci	r31, 0xEE	; 238
    272c:	01 80       	ldd	r0, Z+1	; 0x01
    272e:	f2 81       	ldd	r31, Z+2	; 0x02
    2730:	e0 2d       	mov	r30, r0
    2732:	17 96       	adiw	r26, 0x07	; 7
    2734:	fc 93       	st	X, r31
    2736:	ee 93       	st	-X, r30
    2738:	16 97       	sbiw	r26, 0x06	; 6
    273a:	46 81       	ldd	r20, Z+6	; 0x06
    273c:	57 81       	ldd	r21, Z+7	; 0x07
    273e:	19 96       	adiw	r26, 0x09	; 9
    2740:	5c 93       	st	X, r21
    2742:	4e 93       	st	-X, r20
    2744:	18 97       	sbiw	r26, 0x08	; 8
    2746:	c6 81       	ldd	r28, Z+6	; 0x06
    2748:	d7 81       	ldd	r29, Z+7	; 0x07
    274a:	3d 83       	std	Y+5, r19	; 0x05
    274c:	2c 83       	std	Y+4, r18	; 0x04
    274e:	37 83       	std	Z+7, r19	; 0x07
    2750:	26 83       	std	Z+6, r18	; 0x06
    2752:	5a 96       	adiw	r26, 0x1a	; 26
    2754:	ec 91       	ld	r30, X
    2756:	5a 97       	sbiw	r26, 0x1a	; 26
    2758:	9e 9f       	mul	r25, r30
    275a:	f0 01       	movw	r30, r0
    275c:	11 24       	eor	r1, r1
    275e:	eb 59       	subi	r30, 0x9B	; 155
    2760:	fe 4e       	sbci	r31, 0xEE	; 238
    2762:	1d 96       	adiw	r26, 0x0d	; 13
    2764:	fc 93       	st	X, r31
    2766:	ee 93       	st	-X, r30
    2768:	1c 97       	sbiw	r26, 0x0c	; 12
    276a:	90 81       	ld	r25, Z
    276c:	9f 5f       	subi	r25, 0xFF	; 255
    276e:	90 83       	st	Z, r25
    2770:	21 c0       	rjmp	.+66     	; 0x27b4 <xTaskGenericNotifyFromISR+0x208>
    2772:	60 e4       	ldi	r22, 0x40	; 64
    2774:	71 e1       	ldi	r23, 0x11	; 17
    2776:	fb 01       	movw	r30, r22
    2778:	c1 81       	ldd	r28, Z+1	; 0x01
    277a:	d2 81       	ldd	r29, Z+2	; 0x02
    277c:	53 96       	adiw	r26, 0x13	; 19
    277e:	dc 93       	st	X, r29
    2780:	ce 93       	st	-X, r28
    2782:	52 97       	sbiw	r26, 0x12	; 18
    2784:	2e 81       	ldd	r18, Y+6	; 0x06
    2786:	3f 81       	ldd	r19, Y+7	; 0x07
    2788:	55 96       	adiw	r26, 0x15	; 21
    278a:	3c 93       	st	X, r19
    278c:	2e 93       	st	-X, r18
    278e:	54 97       	sbiw	r26, 0x14	; 20
    2790:	4e 81       	ldd	r20, Y+6	; 0x06
    2792:	5f 81       	ldd	r21, Y+7	; 0x07
    2794:	9d 01       	movw	r18, r26
    2796:	22 5f       	subi	r18, 0xF2	; 242
    2798:	3f 4f       	sbci	r19, 0xFF	; 255
    279a:	fa 01       	movw	r30, r20
    279c:	35 83       	std	Z+5, r19	; 0x05
    279e:	24 83       	std	Z+4, r18	; 0x04
    27a0:	3f 83       	std	Y+7, r19	; 0x07
    27a2:	2e 83       	std	Y+6, r18	; 0x06
    27a4:	59 96       	adiw	r26, 0x19	; 25
    27a6:	7c 93       	st	X, r23
    27a8:	6e 93       	st	-X, r22
    27aa:	58 97       	sbiw	r26, 0x18	; 24
    27ac:	fb 01       	movw	r30, r22
    27ae:	90 81       	ld	r25, Z
    27b0:	9f 5f       	subi	r25, 0xFF	; 255
    27b2:	90 83       	st	Z, r25
    27b4:	5a 96       	adiw	r26, 0x1a	; 26
    27b6:	2c 91       	ld	r18, X
    27b8:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    27bc:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>
    27c0:	92 8d       	ldd	r25, Z+26	; 0x1a
    27c2:	92 17       	cp	r25, r18
    27c4:	48 f4       	brcc	.+18     	; 0x27d8 <xTaskGenericNotifyFromISR+0x22c>
    27c6:	c1 14       	cp	r12, r1
    27c8:	d1 04       	cpc	r13, r1
    27ca:	19 f0       	breq	.+6      	; 0x27d2 <xTaskGenericNotifyFromISR+0x226>
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	f6 01       	movw	r30, r12
    27d0:	90 83       	st	Z, r25
    27d2:	91 e0       	ldi	r25, 0x01	; 1
    27d4:	90 93 1d 11 	sts	0x111D, r25	; 0x80111d <xYieldPending>
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	0f 91       	pop	r16
    27de:	ff 90       	pop	r15
    27e0:	ef 90       	pop	r14
    27e2:	df 90       	pop	r13
    27e4:	cf 90       	pop	r12
    27e6:	bf 90       	pop	r11
    27e8:	af 90       	pop	r10
    27ea:	9f 90       	pop	r9
    27ec:	8f 90       	pop	r8
    27ee:	08 95       	ret

000027f0 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	21 f4       	brne	.+8      	; 0x27fc <xTaskGenericNotifyStateClear+0xc>
    27f4:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <pxCurrentTCB>
    27f8:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	fc 01       	movw	r30, r24
    2806:	e6 0f       	add	r30, r22
    2808:	f7 1f       	adc	r31, r23
    280a:	23 a9       	ldd	r18, Z+51	; 0x33
    280c:	22 30       	cpi	r18, 0x02	; 2
    280e:	31 f4       	brne	.+12     	; 0x281c <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2810:	fc 01       	movw	r30, r24
    2812:	e6 0f       	add	r30, r22
    2814:	f7 1f       	adc	r31, r23
    2816:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	01 c0       	rjmp	.+2      	; 0x281e <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    281c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    281e:	0f 90       	pop	r0
    2820:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2822:	08 95       	ret

00002824 <prvGetNextExpireTime>:
    2824:	dc 01       	movw	r26, r24
    2826:	e0 91 df 11 	lds	r30, 0x11DF	; 0x8011df <pxCurrentTimerList>
    282a:	f0 91 e0 11 	lds	r31, 0x11E0	; 0x8011e0 <pxCurrentTimerList+0x1>
    282e:	80 81       	ld	r24, Z
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	81 11       	cpse	r24, r1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	9c 93       	st	X, r25
    2838:	91 11       	cpse	r25, r1
    283a:	08 c0       	rjmp	.+16     	; 0x284c <prvGetNextExpireTime+0x28>
    283c:	07 80       	ldd	r0, Z+7	; 0x07
    283e:	f0 85       	ldd	r31, Z+8	; 0x08
    2840:	e0 2d       	mov	r30, r0
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	08 95       	ret
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	70 e0       	ldi	r23, 0x00	; 0
    2850:	cb 01       	movw	r24, r22
    2852:	08 95       	ret

00002854 <prvInsertTimerInActiveList>:
    2854:	cf 92       	push	r12
    2856:	df 92       	push	r13
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	fc 01       	movw	r30, r24
    2862:	42 83       	std	Z+2, r20	; 0x02
    2864:	53 83       	std	Z+3, r21	; 0x03
    2866:	64 83       	std	Z+4, r22	; 0x04
    2868:	75 83       	std	Z+5, r23	; 0x05
    286a:	93 87       	std	Z+11, r25	; 0x0b
    286c:	82 87       	std	Z+10, r24	; 0x0a
    286e:	04 17       	cp	r16, r20
    2870:	15 07       	cpc	r17, r21
    2872:	26 07       	cpc	r18, r22
    2874:	37 07       	cpc	r19, r23
    2876:	c0 f0       	brcs	.+48     	; 0x28a8 <prvInsertTimerInActiveList+0x54>
    2878:	0c 19       	sub	r16, r12
    287a:	1d 09       	sbc	r17, r13
    287c:	2e 09       	sbc	r18, r14
    287e:	3f 09       	sbc	r19, r15
    2880:	86 85       	ldd	r24, Z+14	; 0x0e
    2882:	97 85       	ldd	r25, Z+15	; 0x0f
    2884:	a0 89       	ldd	r26, Z+16	; 0x10
    2886:	b1 89       	ldd	r27, Z+17	; 0x11
    2888:	08 17       	cp	r16, r24
    288a:	19 07       	cpc	r17, r25
    288c:	2a 07       	cpc	r18, r26
    288e:	3b 07       	cpc	r19, r27
    2890:	00 f5       	brcc	.+64     	; 0x28d2 <prvInsertTimerInActiveList+0x7e>
    2892:	bf 01       	movw	r22, r30
    2894:	6e 5f       	subi	r22, 0xFE	; 254
    2896:	7f 4f       	sbci	r23, 0xFF	; 255
    2898:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <pxOverflowTimerList>
    289c:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <pxOverflowTimerList+0x1>
    28a0:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	18 c0       	rjmp	.+48     	; 0x28d8 <prvInsertTimerInActiveList+0x84>
    28a8:	0c 15       	cp	r16, r12
    28aa:	1d 05       	cpc	r17, r13
    28ac:	2e 05       	cpc	r18, r14
    28ae:	3f 05       	cpc	r19, r15
    28b0:	28 f4       	brcc	.+10     	; 0x28bc <prvInsertTimerInActiveList+0x68>
    28b2:	4c 15       	cp	r20, r12
    28b4:	5d 05       	cpc	r21, r13
    28b6:	6e 05       	cpc	r22, r14
    28b8:	7f 05       	cpc	r23, r15
    28ba:	68 f4       	brcc	.+26     	; 0x28d6 <prvInsertTimerInActiveList+0x82>
    28bc:	bf 01       	movw	r22, r30
    28be:	6e 5f       	subi	r22, 0xFE	; 254
    28c0:	7f 4f       	sbci	r23, 0xFF	; 255
    28c2:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <pxCurrentTimerList>
    28c6:	90 91 e0 11 	lds	r25, 0x11E0	; 0x8011e0 <pxCurrentTimerList+0x1>
    28ca:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	03 c0       	rjmp	.+6      	; 0x28d8 <prvInsertTimerInActiveList+0x84>
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	01 c0       	rjmp	.+2      	; 0x28d8 <prvInsertTimerInActiveList+0x84>
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	ff 90       	pop	r15
    28de:	ef 90       	pop	r14
    28e0:	df 90       	pop	r13
    28e2:	cf 90       	pop	r12
    28e4:	08 95       	ret

000028e6 <prvCheckForValidListAndQueue>:
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	0f 92       	push	r0
    28ec:	80 91 db 11 	lds	r24, 0x11DB	; 0x8011db <xTimerQueue>
    28f0:	90 91 dc 11 	lds	r25, 0x11DC	; 0x8011dc <xTimerQueue+0x1>
    28f4:	89 2b       	or	r24, r25
    28f6:	e9 f4       	brne	.+58     	; 0x2932 <prvCheckForValidListAndQueue+0x4c>
    28f8:	8c ee       	ldi	r24, 0xEC	; 236
    28fa:	91 e1       	ldi	r25, 0x11	; 17
    28fc:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    2900:	81 ee       	ldi	r24, 0xE1	; 225
    2902:	91 e1       	ldi	r25, 0x11	; 17
    2904:	0e 94 21 02 	call	0x442	; 0x442 <vListInitialise>
    2908:	8c ee       	ldi	r24, 0xEC	; 236
    290a:	91 e1       	ldi	r25, 0x11	; 17
    290c:	90 93 e0 11 	sts	0x11E0, r25	; 0x8011e0 <pxCurrentTimerList+0x1>
    2910:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <pxCurrentTimerList>
    2914:	81 ee       	ldi	r24, 0xE1	; 225
    2916:	91 e1       	ldi	r25, 0x11	; 17
    2918:	90 93 de 11 	sts	0x11DE, r25	; 0x8011de <pxOverflowTimerList+0x1>
    291c:	80 93 dd 11 	sts	0x11DD, r24	; 0x8011dd <pxOverflowTimerList>
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	67 e0       	ldi	r22, 0x07	; 7
    2924:	8a e0       	ldi	r24, 0x0A	; 10
    2926:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <xQueueGenericCreate>
    292a:	90 93 dc 11 	sts	0x11DC, r25	; 0x8011dc <xTimerQueue+0x1>
    292e:	80 93 db 11 	sts	0x11DB, r24	; 0x8011db <xTimerQueue>
    2932:	0f 90       	pop	r0
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	08 95       	ret

00002938 <xTimerCreateTimerTask>:
    2938:	ef 92       	push	r14
    293a:	ff 92       	push	r15
    293c:	0f 93       	push	r16
    293e:	d3 df       	rcall	.-90     	; 0x28e6 <prvCheckForValidListAndQueue>
    2940:	80 91 db 11 	lds	r24, 0x11DB	; 0x8011db <xTimerQueue>
    2944:	90 91 dc 11 	lds	r25, 0x11DC	; 0x8011dc <xTimerQueue+0x1>
    2948:	89 2b       	or	r24, r25
    294a:	91 f0       	breq	.+36     	; 0x2970 <xTimerCreateTimerTask+0x38>
    294c:	0f 2e       	mov	r0, r31
    294e:	f9 ed       	ldi	r31, 0xD9	; 217
    2950:	ef 2e       	mov	r14, r31
    2952:	f1 e1       	ldi	r31, 0x11	; 17
    2954:	ff 2e       	mov	r15, r31
    2956:	f0 2d       	mov	r31, r0
    2958:	03 e0       	ldi	r16, 0x03	; 3
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 ec       	ldi	r20, 0xC0	; 192
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	6c e7       	ldi	r22, 0x7C	; 124
    2964:	72 e0       	ldi	r23, 0x02	; 2
    2966:	86 e8       	ldi	r24, 0x86	; 134
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskCreate>
    296e:	01 c0       	rjmp	.+2      	; 0x2972 <xTimerCreateTimerTask+0x3a>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	0f 91       	pop	r16
    2974:	ff 90       	pop	r15
    2976:	ef 90       	pop	r14
    2978:	08 95       	ret

0000297a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    297a:	8f 92       	push	r8
    297c:	9f 92       	push	r9
    297e:	af 92       	push	r10
    2980:	bf 92       	push	r11
    2982:	cf 92       	push	r12
    2984:	df 92       	push	r13
    2986:	ef 92       	push	r14
    2988:	ff 92       	push	r15
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	27 97       	sbiw	r28, 0x07	; 7
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    29a2:	e0 91 db 11 	lds	r30, 0x11DB	; 0x8011db <xTimerQueue>
    29a6:	f0 91 dc 11 	lds	r31, 0x11DC	; 0x8011dc <xTimerQueue+0x1>
    29aa:	30 97       	sbiw	r30, 0x00	; 0
    29ac:	81 f1       	breq	.+96     	; 0x2a0e <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    29ae:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    29b0:	2a 83       	std	Y+2, r18	; 0x02
    29b2:	3b 83       	std	Y+3, r19	; 0x03
    29b4:	4c 83       	std	Y+4, r20	; 0x04
    29b6:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    29b8:	9f 83       	std	Y+7, r25	; 0x07
    29ba:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    29bc:	66 30       	cpi	r22, 0x06	; 6
    29be:	f4 f4       	brge	.+60     	; 0x29fc <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    29c0:	ee db       	rcall	.-2084   	; 0x219e <xTaskGetSchedulerState>
    29c2:	82 30       	cpi	r24, 0x02	; 2
    29c4:	69 f4       	brne	.+26     	; 0x29e0 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    29c6:	00 e0       	ldi	r16, 0x00	; 0
    29c8:	a7 01       	movw	r20, r14
    29ca:	96 01       	movw	r18, r12
    29cc:	be 01       	movw	r22, r28
    29ce:	6f 5f       	subi	r22, 0xFF	; 255
    29d0:	7f 4f       	sbci	r23, 0xFF	; 255
    29d2:	80 91 db 11 	lds	r24, 0x11DB	; 0x8011db <xTimerQueue>
    29d6:	90 91 dc 11 	lds	r25, 0x11DC	; 0x8011dc <xTimerQueue+0x1>
    29da:	0e 94 f7 04 	call	0x9ee	; 0x9ee <xQueueGenericSend>
    29de:	18 c0       	rjmp	.+48     	; 0x2a10 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    29e0:	00 e0       	ldi	r16, 0x00	; 0
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	a9 01       	movw	r20, r18
    29e8:	be 01       	movw	r22, r28
    29ea:	6f 5f       	subi	r22, 0xFF	; 255
    29ec:	7f 4f       	sbci	r23, 0xFF	; 255
    29ee:	80 91 db 11 	lds	r24, 0x11DB	; 0x8011db <xTimerQueue>
    29f2:	90 91 dc 11 	lds	r25, 0x11DC	; 0x8011dc <xTimerQueue+0x1>
    29f6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <xQueueGenericSend>
    29fa:	0a c0       	rjmp	.+20     	; 0x2a10 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	a8 01       	movw	r20, r16
    2a00:	be 01       	movw	r22, r28
    2a02:	6f 5f       	subi	r22, 0xFF	; 255
    2a04:	7f 4f       	sbci	r23, 0xFF	; 255
    2a06:	cf 01       	movw	r24, r30
    2a08:	0e 94 87 05 	call	0xb0e	; 0xb0e <xQueueGenericSendFromISR>
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2a10:	27 96       	adiw	r28, 0x07	; 7
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
    2a24:	ff 90       	pop	r15
    2a26:	ef 90       	pop	r14
    2a28:	df 90       	pop	r13
    2a2a:	cf 90       	pop	r12
    2a2c:	bf 90       	pop	r11
    2a2e:	af 90       	pop	r10
    2a30:	9f 90       	pop	r9
    2a32:	8f 90       	pop	r8
    2a34:	08 95       	ret

00002a36 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2a36:	8f 92       	push	r8
    2a38:	9f 92       	push	r9
    2a3a:	af 92       	push	r10
    2a3c:	bf 92       	push	r11
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a4e:	3b c0       	rjmp	.+118    	; 0x2ac6 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a50:	07 80       	ldd	r0, Z+7	; 0x07
    2a52:	f0 85       	ldd	r31, Z+8	; 0x08
    2a54:	e0 2d       	mov	r30, r0
    2a56:	80 80       	ld	r8, Z
    2a58:	91 80       	ldd	r9, Z+1	; 0x01
    2a5a:	a2 80       	ldd	r10, Z+2	; 0x02
    2a5c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2a5e:	c0 85       	ldd	r28, Z+8	; 0x08
    2a60:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a62:	8e 01       	movw	r16, r28
    2a64:	0e 5f       	subi	r16, 0xFE	; 254
    2a66:	1f 4f       	sbci	r17, 0xFF	; 255
    2a68:	c8 01       	movw	r24, r16
    2a6a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a6e:	ec 89       	ldd	r30, Y+20	; 0x14
    2a70:	fd 89       	ldd	r31, Y+21	; 0x15
    2a72:	ce 01       	movw	r24, r28
    2a74:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2a76:	8e 89       	ldd	r24, Y+22	; 0x16
    2a78:	82 ff       	sbrs	r24, 2
    2a7a:	25 c0       	rjmp	.+74     	; 0x2ac6 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2a7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a80:	a8 89       	ldd	r26, Y+16	; 0x10
    2a82:	b9 89       	ldd	r27, Y+17	; 0x11
    2a84:	88 0d       	add	r24, r8
    2a86:	99 1d       	adc	r25, r9
    2a88:	aa 1d       	adc	r26, r10
    2a8a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2a8c:	88 16       	cp	r8, r24
    2a8e:	99 06       	cpc	r9, r25
    2a90:	aa 06       	cpc	r10, r26
    2a92:	bb 06       	cpc	r11, r27
    2a94:	70 f4       	brcc	.+28     	; 0x2ab2 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a96:	8a 83       	std	Y+2, r24	; 0x02
    2a98:	9b 83       	std	Y+3, r25	; 0x03
    2a9a:	ac 83       	std	Y+4, r26	; 0x04
    2a9c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2a9e:	db 87       	std	Y+11, r29	; 0x0b
    2aa0:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2aa2:	b8 01       	movw	r22, r16
    2aa4:	80 91 df 11 	lds	r24, 0x11DF	; 0x8011df <pxCurrentTimerList>
    2aa8:	90 91 e0 11 	lds	r25, 0x11E0	; 0x8011e0 <pxCurrentTimerList+0x1>
    2aac:	0e 94 36 02 	call	0x46c	; 0x46c <vListInsert>
    2ab0:	0a c0       	rjmp	.+20     	; 0x2ac6 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ab2:	c1 2c       	mov	r12, r1
    2ab4:	d1 2c       	mov	r13, r1
    2ab6:	76 01       	movw	r14, r12
    2ab8:	00 e0       	ldi	r16, 0x00	; 0
    2aba:	10 e0       	ldi	r17, 0x00	; 0
    2abc:	a5 01       	movw	r20, r10
    2abe:	94 01       	movw	r18, r8
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	5a df       	rcall	.-332    	; 0x297a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2ac6:	e0 91 df 11 	lds	r30, 0x11DF	; 0x8011df <pxCurrentTimerList>
    2aca:	f0 91 e0 11 	lds	r31, 0x11E0	; 0x8011e0 <pxCurrentTimerList+0x1>
    2ace:	80 81       	ld	r24, Z
    2ad0:	81 11       	cpse	r24, r1
    2ad2:	be cf       	rjmp	.-132    	; 0x2a50 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2ad4:	80 91 dd 11 	lds	r24, 0x11DD	; 0x8011dd <pxOverflowTimerList>
    2ad8:	90 91 de 11 	lds	r25, 0x11DE	; 0x8011de <pxOverflowTimerList+0x1>
    2adc:	90 93 e0 11 	sts	0x11E0, r25	; 0x8011e0 <pxCurrentTimerList+0x1>
    2ae0:	80 93 df 11 	sts	0x11DF, r24	; 0x8011df <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2ae4:	f0 93 de 11 	sts	0x11DE, r31	; 0x8011de <pxOverflowTimerList+0x1>
    2ae8:	e0 93 dd 11 	sts	0x11DD, r30	; 0x8011dd <pxOverflowTimerList>
    }
    2aec:	df 91       	pop	r29
    2aee:	cf 91       	pop	r28
    2af0:	1f 91       	pop	r17
    2af2:	0f 91       	pop	r16
    2af4:	ff 90       	pop	r15
    2af6:	ef 90       	pop	r14
    2af8:	df 90       	pop	r13
    2afa:	cf 90       	pop	r12
    2afc:	bf 90       	pop	r11
    2afe:	af 90       	pop	r10
    2b00:	9f 90       	pop	r9
    2b02:	8f 90       	pop	r8
    2b04:	08 95       	ret

00002b06 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2b06:	cf 92       	push	r12
    2b08:	df 92       	push	r13
    2b0a:	ef 92       	push	r14
    2b0c:	ff 92       	push	r15
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2b14:	0e 94 36 0c 	call	0x186c	; 0x186c <xTaskGetTickCount>
    2b18:	6b 01       	movw	r12, r22
    2b1a:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2b1c:	80 91 d5 11 	lds	r24, 0x11D5	; 0x8011d5 <xLastTime.2436>
    2b20:	90 91 d6 11 	lds	r25, 0x11D6	; 0x8011d6 <xLastTime.2436+0x1>
    2b24:	a0 91 d7 11 	lds	r26, 0x11D7	; 0x8011d7 <xLastTime.2436+0x2>
    2b28:	b0 91 d8 11 	lds	r27, 0x11D8	; 0x8011d8 <xLastTime.2436+0x3>
    2b2c:	c8 16       	cp	r12, r24
    2b2e:	d9 06       	cpc	r13, r25
    2b30:	ea 06       	cpc	r14, r26
    2b32:	fb 06       	cpc	r15, r27
    2b34:	20 f4       	brcc	.+8      	; 0x2b3e <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2b36:	7f df       	rcall	.-258    	; 0x2a36 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	88 83       	st	Y, r24
    2b3c:	01 c0       	rjmp	.+2      	; 0x2b40 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2b3e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2b40:	c0 92 d5 11 	sts	0x11D5, r12	; 0x8011d5 <xLastTime.2436>
    2b44:	d0 92 d6 11 	sts	0x11D6, r13	; 0x8011d6 <xLastTime.2436+0x1>
    2b48:	e0 92 d7 11 	sts	0x11D7, r14	; 0x8011d7 <xLastTime.2436+0x2>
    2b4c:	f0 92 d8 11 	sts	0x11D8, r15	; 0x8011d8 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2b50:	c7 01       	movw	r24, r14
    2b52:	b6 01       	movw	r22, r12
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	ff 90       	pop	r15
    2b5a:	ef 90       	pop	r14
    2b5c:	df 90       	pop	r13
    2b5e:	cf 90       	pop	r12
    2b60:	08 95       	ret

00002b62 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2b62:	4f 92       	push	r4
    2b64:	5f 92       	push	r5
    2b66:	6f 92       	push	r6
    2b68:	7f 92       	push	r7
    2b6a:	8f 92       	push	r8
    2b6c:	9f 92       	push	r9
    2b6e:	af 92       	push	r10
    2b70:	bf 92       	push	r11
    2b72:	cf 92       	push	r12
    2b74:	df 92       	push	r13
    2b76:	ef 92       	push	r14
    2b78:	ff 92       	push	r15
    2b7a:	0f 93       	push	r16
    2b7c:	1f 93       	push	r17
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	4b 01       	movw	r8, r22
    2b84:	5c 01       	movw	r10, r24
    2b86:	29 01       	movw	r4, r18
    2b88:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2b8a:	e0 91 df 11 	lds	r30, 0x11DF	; 0x8011df <pxCurrentTimerList>
    2b8e:	f0 91 e0 11 	lds	r31, 0x11E0	; 0x8011e0 <pxCurrentTimerList+0x1>
    2b92:	07 80       	ldd	r0, Z+7	; 0x07
    2b94:	f0 85       	ldd	r31, Z+8	; 0x08
    2b96:	e0 2d       	mov	r30, r0
    2b98:	c0 85       	ldd	r28, Z+8	; 0x08
    2b9a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	02 96       	adiw	r24, 0x02	; 2
    2ba0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2ba4:	8e 89       	ldd	r24, Y+22	; 0x16
    2ba6:	82 ff       	sbrs	r24, 2
    2ba8:	1b c0       	rjmp	.+54     	; 0x2be0 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2baa:	4e 85       	ldd	r20, Y+14	; 0x0e
    2bac:	5f 85       	ldd	r21, Y+15	; 0x0f
    2bae:	68 89       	ldd	r22, Y+16	; 0x10
    2bb0:	79 89       	ldd	r23, Y+17	; 0x11
    2bb2:	48 0d       	add	r20, r8
    2bb4:	59 1d       	adc	r21, r9
    2bb6:	6a 1d       	adc	r22, r10
    2bb8:	7b 1d       	adc	r23, r11
    2bba:	75 01       	movw	r14, r10
    2bbc:	64 01       	movw	r12, r8
    2bbe:	93 01       	movw	r18, r6
    2bc0:	82 01       	movw	r16, r4
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	47 de       	rcall	.-882    	; 0x2854 <prvInsertTimerInActiveList>
    2bc6:	88 23       	and	r24, r24
    2bc8:	69 f0       	breq	.+26     	; 0x2be4 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2bca:	c1 2c       	mov	r12, r1
    2bcc:	d1 2c       	mov	r13, r1
    2bce:	76 01       	movw	r14, r12
    2bd0:	00 e0       	ldi	r16, 0x00	; 0
    2bd2:	10 e0       	ldi	r17, 0x00	; 0
    2bd4:	a5 01       	movw	r20, r10
    2bd6:	94 01       	movw	r18, r8
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	ce 01       	movw	r24, r28
    2bdc:	ce de       	rcall	.-612    	; 0x297a <xTimerGenericCommand>
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2be0:	8e 7f       	andi	r24, 0xFE	; 254
    2be2:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2be4:	ec 89       	ldd	r30, Y+20	; 0x14
    2be6:	fd 89       	ldd	r31, Y+21	; 0x15
    2be8:	ce 01       	movw	r24, r28
    2bea:	19 95       	eicall
    }
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	1f 91       	pop	r17
    2bf2:	0f 91       	pop	r16
    2bf4:	ff 90       	pop	r15
    2bf6:	ef 90       	pop	r14
    2bf8:	df 90       	pop	r13
    2bfa:	cf 90       	pop	r12
    2bfc:	bf 90       	pop	r11
    2bfe:	af 90       	pop	r10
    2c00:	9f 90       	pop	r9
    2c02:	8f 90       	pop	r8
    2c04:	7f 90       	pop	r7
    2c06:	6f 90       	pop	r6
    2c08:	5f 90       	pop	r5
    2c0a:	4f 90       	pop	r4
    2c0c:	08 95       	ret

00002c0e <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2c0e:	8f 92       	push	r8
    2c10:	9f 92       	push	r9
    2c12:	af 92       	push	r10
    2c14:	bf 92       	push	r11
    2c16:	cf 92       	push	r12
    2c18:	df 92       	push	r13
    2c1a:	ef 92       	push	r14
    2c1c:	ff 92       	push	r15
    2c1e:	1f 93       	push	r17
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	1f 92       	push	r1
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	6b 01       	movw	r12, r22
    2c2c:	7c 01       	movw	r14, r24
    2c2e:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2c30:	0e 94 30 0c 	call	0x1860	; 0x1860 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2c34:	ce 01       	movw	r24, r28
    2c36:	01 96       	adiw	r24, 0x01	; 1
    2c38:	66 df       	rcall	.-308    	; 0x2b06 <prvSampleTimeNow>
    2c3a:	4b 01       	movw	r8, r22
    2c3c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	81 11       	cpse	r24, r1
    2c42:	2d c0       	rjmp	.+90     	; 0x2c9e <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2c44:	11 11       	cpse	r17, r1
    2c46:	0d c0       	rjmp	.+26     	; 0x2c62 <prvProcessTimerOrBlockTask+0x54>
    2c48:	8c 14       	cp	r8, r12
    2c4a:	9d 04       	cpc	r9, r13
    2c4c:	ae 04       	cpc	r10, r14
    2c4e:	bf 04       	cpc	r11, r15
    2c50:	40 f0       	brcs	.+16     	; 0x2c62 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2c52:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2c56:	a5 01       	movw	r20, r10
    2c58:	94 01       	movw	r18, r8
    2c5a:	c7 01       	movw	r24, r14
    2c5c:	b6 01       	movw	r22, r12
    2c5e:	81 df       	rcall	.-254    	; 0x2b62 <prvProcessExpiredTimer>
    2c60:	20 c0       	rjmp	.+64     	; 0x2ca2 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2c62:	11 23       	and	r17, r17
    2c64:	41 f0       	breq	.+16     	; 0x2c76 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2c66:	e0 91 dd 11 	lds	r30, 0x11DD	; 0x8011dd <pxOverflowTimerList>
    2c6a:	f0 91 de 11 	lds	r31, 0x11DE	; 0x8011de <pxOverflowTimerList+0x1>
    2c6e:	80 81       	ld	r24, Z
    2c70:	11 e0       	ldi	r17, 0x01	; 1
    2c72:	81 11       	cpse	r24, r1
    2c74:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2c76:	b7 01       	movw	r22, r14
    2c78:	a6 01       	movw	r20, r12
    2c7a:	48 19       	sub	r20, r8
    2c7c:	59 09       	sbc	r21, r9
    2c7e:	6a 09       	sbc	r22, r10
    2c80:	7b 09       	sbc	r23, r11
    2c82:	21 2f       	mov	r18, r17
    2c84:	80 91 db 11 	lds	r24, 0x11DB	; 0x8011db <xTimerQueue>
    2c88:	90 91 dc 11 	lds	r25, 0x11DC	; 0x8011dc <xTimerQueue+0x1>
    2c8c:	0e 94 51 06 	call	0xca2	; 0xca2 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2c90:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskResumeAll>
    2c94:	81 11       	cpse	r24, r1
    2c96:	05 c0       	rjmp	.+10     	; 0x2ca2 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2c98:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2c9e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskResumeAll>
            }
        }
    }
    2ca2:	0f 90       	pop	r0
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	1f 91       	pop	r17
    2caa:	ff 90       	pop	r15
    2cac:	ef 90       	pop	r14
    2cae:	df 90       	pop	r13
    2cb0:	cf 90       	pop	r12
    2cb2:	bf 90       	pop	r11
    2cb4:	af 90       	pop	r10
    2cb6:	9f 90       	pop	r9
    2cb8:	8f 90       	pop	r8
    2cba:	08 95       	ret

00002cbc <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2cbc:	af 92       	push	r10
    2cbe:	bf 92       	push	r11
    2cc0:	cf 92       	push	r12
    2cc2:	df 92       	push	r13
    2cc4:	ef 92       	push	r14
    2cc6:	ff 92       	push	r15
    2cc8:	0f 93       	push	r16
    2cca:	1f 93       	push	r17
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	28 97       	sbiw	r28, 0x08	; 8
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2ce0:	82 c0       	rjmp	.+260    	; 0x2de6 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	88 23       	and	r24, r24
    2ce6:	0c f4       	brge	.+2      	; 0x2cea <prvProcessReceivedCommands+0x2e>
    2ce8:	7e c0       	rjmp	.+252    	; 0x2de6 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2cea:	ae 80       	ldd	r10, Y+6	; 0x06
    2cec:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2cee:	d5 01       	movw	r26, r10
    2cf0:	1c 96       	adiw	r26, 0x0c	; 12
    2cf2:	8d 91       	ld	r24, X+
    2cf4:	9c 91       	ld	r25, X
    2cf6:	1d 97       	sbiw	r26, 0x0d	; 13
    2cf8:	89 2b       	or	r24, r25
    2cfa:	21 f0       	breq	.+8      	; 0x2d04 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2cfc:	c5 01       	movw	r24, r10
    2cfe:	02 96       	adiw	r24, 0x02	; 2
    2d00:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d04:	ce 01       	movw	r24, r28
    2d06:	08 96       	adiw	r24, 0x08	; 8
    2d08:	fe de       	rcall	.-516    	; 0x2b06 <prvSampleTimeNow>
    2d0a:	8b 01       	movw	r16, r22
    2d0c:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d10:	0e 2e       	mov	r0, r30
    2d12:	00 0c       	add	r0, r0
    2d14:	ff 0b       	sbc	r31, r31
    2d16:	ea 30       	cpi	r30, 0x0A	; 10
    2d18:	f1 05       	cpc	r31, r1
    2d1a:	08 f0       	brcs	.+2      	; 0x2d1e <prvProcessReceivedCommands+0x62>
    2d1c:	64 c0       	rjmp	.+200    	; 0x2de6 <prvProcessReceivedCommands+0x12a>
    2d1e:	88 27       	eor	r24, r24
    2d20:	ee 58       	subi	r30, 0x8E	; 142
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	8f 4f       	sbci	r24, 0xFF	; 255
    2d26:	0c 94 62 26 	jmp	0x4cc4	; 0x4cc4 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2d2a:	f5 01       	movw	r30, r10
    2d2c:	86 89       	ldd	r24, Z+22	; 0x16
    2d2e:	81 60       	ori	r24, 0x01	; 1
    2d30:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2d32:	ca 80       	ldd	r12, Y+2	; 0x02
    2d34:	db 80       	ldd	r13, Y+3	; 0x03
    2d36:	ec 80       	ldd	r14, Y+4	; 0x04
    2d38:	fd 80       	ldd	r15, Y+5	; 0x05
    2d3a:	46 85       	ldd	r20, Z+14	; 0x0e
    2d3c:	57 85       	ldd	r21, Z+15	; 0x0f
    2d3e:	60 89       	ldd	r22, Z+16	; 0x10
    2d40:	71 89       	ldd	r23, Z+17	; 0x11
    2d42:	4c 0d       	add	r20, r12
    2d44:	5d 1d       	adc	r21, r13
    2d46:	6e 1d       	adc	r22, r14
    2d48:	7f 1d       	adc	r23, r15
    2d4a:	c5 01       	movw	r24, r10
    2d4c:	83 dd       	rcall	.-1274   	; 0x2854 <prvInsertTimerInActiveList>
    2d4e:	88 23       	and	r24, r24
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <prvProcessReceivedCommands+0x98>
    2d52:	49 c0       	rjmp	.+146    	; 0x2de6 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d54:	d5 01       	movw	r26, r10
    2d56:	54 96       	adiw	r26, 0x14	; 20
    2d58:	ed 91       	ld	r30, X+
    2d5a:	fc 91       	ld	r31, X
    2d5c:	55 97       	sbiw	r26, 0x15	; 21
    2d5e:	c5 01       	movw	r24, r10
    2d60:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d62:	f5 01       	movw	r30, r10
    2d64:	86 89       	ldd	r24, Z+22	; 0x16
    2d66:	82 ff       	sbrs	r24, 2
    2d68:	3e c0       	rjmp	.+124    	; 0x2de6 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2d6a:	4a 81       	ldd	r20, Y+2	; 0x02
    2d6c:	5b 81       	ldd	r21, Y+3	; 0x03
    2d6e:	6c 81       	ldd	r22, Y+4	; 0x04
    2d70:	7d 81       	ldd	r23, Y+5	; 0x05
    2d72:	86 85       	ldd	r24, Z+14	; 0x0e
    2d74:	97 85       	ldd	r25, Z+15	; 0x0f
    2d76:	a0 89       	ldd	r26, Z+16	; 0x10
    2d78:	b1 89       	ldd	r27, Z+17	; 0x11
    2d7a:	9a 01       	movw	r18, r20
    2d7c:	ab 01       	movw	r20, r22
    2d7e:	28 0f       	add	r18, r24
    2d80:	39 1f       	adc	r19, r25
    2d82:	4a 1f       	adc	r20, r26
    2d84:	5b 1f       	adc	r21, r27
    2d86:	c1 2c       	mov	r12, r1
    2d88:	d1 2c       	mov	r13, r1
    2d8a:	76 01       	movw	r14, r12
    2d8c:	00 e0       	ldi	r16, 0x00	; 0
    2d8e:	10 e0       	ldi	r17, 0x00	; 0
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	c5 01       	movw	r24, r10
    2d94:	f2 dd       	rcall	.-1052   	; 0x297a <xTimerGenericCommand>
    2d96:	27 c0       	rjmp	.+78     	; 0x2de6 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2d98:	d5 01       	movw	r26, r10
    2d9a:	56 96       	adiw	r26, 0x16	; 22
    2d9c:	8c 91       	ld	r24, X
    2d9e:	56 97       	sbiw	r26, 0x16	; 22
    2da0:	8e 7f       	andi	r24, 0xFE	; 254
    2da2:	56 96       	adiw	r26, 0x16	; 22
    2da4:	8c 93       	st	X, r24
                        break;
    2da6:	1f c0       	rjmp	.+62     	; 0x2de6 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2da8:	f5 01       	movw	r30, r10
    2daa:	86 89       	ldd	r24, Z+22	; 0x16
    2dac:	81 60       	ori	r24, 0x01	; 1
    2dae:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2db0:	4a 81       	ldd	r20, Y+2	; 0x02
    2db2:	5b 81       	ldd	r21, Y+3	; 0x03
    2db4:	6c 81       	ldd	r22, Y+4	; 0x04
    2db6:	7d 81       	ldd	r23, Y+5	; 0x05
    2db8:	46 87       	std	Z+14, r20	; 0x0e
    2dba:	57 87       	std	Z+15, r21	; 0x0f
    2dbc:	60 8b       	std	Z+16, r22	; 0x10
    2dbe:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2dc0:	40 0f       	add	r20, r16
    2dc2:	51 1f       	adc	r21, r17
    2dc4:	62 1f       	adc	r22, r18
    2dc6:	73 1f       	adc	r23, r19
    2dc8:	68 01       	movw	r12, r16
    2dca:	79 01       	movw	r14, r18
    2dcc:	c5 01       	movw	r24, r10
    2dce:	42 dd       	rcall	.-1404   	; 0x2854 <prvInsertTimerInActiveList>
                        break;
    2dd0:	0a c0       	rjmp	.+20     	; 0x2de6 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2dd2:	f5 01       	movw	r30, r10
    2dd4:	86 89       	ldd	r24, Z+22	; 0x16
    2dd6:	81 fd       	sbrc	r24, 1
    2dd8:	04 c0       	rjmp	.+8      	; 0x2de2 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2dda:	c5 01       	movw	r24, r10
    2ddc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <vPortFree>
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2de2:	8e 7f       	andi	r24, 0xFE	; 254
    2de4:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	a9 01       	movw	r20, r18
    2dec:	be 01       	movw	r22, r28
    2dee:	6f 5f       	subi	r22, 0xFF	; 255
    2df0:	7f 4f       	sbci	r23, 0xFF	; 255
    2df2:	80 91 db 11 	lds	r24, 0x11DB	; 0x8011db <xTimerQueue>
    2df6:	90 91 dc 11 	lds	r25, 0x11DC	; 0x8011dc <xTimerQueue+0x1>
    2dfa:	0e 94 c2 05 	call	0xb84	; 0xb84 <xQueueReceive>
    2dfe:	81 11       	cpse	r24, r1
    2e00:	70 cf       	rjmp	.-288    	; 0x2ce2 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2e02:	28 96       	adiw	r28, 0x08	; 8
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	ff 90       	pop	r15
    2e18:	ef 90       	pop	r14
    2e1a:	df 90       	pop	r13
    2e1c:	cf 90       	pop	r12
    2e1e:	bf 90       	pop	r11
    2e20:	af 90       	pop	r10
    2e22:	08 95       	ret

00002e24 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2e24:	08 95       	ret

00002e26 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2e26:	84 b1       	in	r24, 0x04	; 4
    2e28:	80 68       	ori	r24, 0x80	; 128
    2e2a:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2e2c:	85 b1       	in	r24, 0x05	; 5
    2e2e:	80 68       	ori	r24, 0x80	; 128
    2e30:	85 b9       	out	0x05, r24	; 5
    2e32:	08 95       	ret

00002e34 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2e34:	83 b1       	in	r24, 0x03	; 3
    2e36:	80 68       	ori	r24, 0x80	; 128
    2e38:	83 b9       	out	0x03, r24	; 3
    2e3a:	08 95       	ret

00002e3c <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2e3c:	f4 df       	rcall	.-24     	; 0x2e26 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e3e:	2f ef       	ldi	r18, 0xFF	; 255
    2e40:	80 e7       	ldi	r24, 0x70	; 112
    2e42:	92 e0       	ldi	r25, 0x02	; 2
    2e44:	21 50       	subi	r18, 0x01	; 1
    2e46:	80 40       	sbci	r24, 0x00	; 0
    2e48:	90 40       	sbci	r25, 0x00	; 0
    2e4a:	e1 f7       	brne	.-8      	; 0x2e44 <vApplicationMallocFailedHook+0x8>
    2e4c:	00 c0       	rjmp	.+0      	; 0x2e4e <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2e4e:	00 00       	nop
    2e50:	f1 df       	rcall	.-30     	; 0x2e34 <prvBlinkMainLed>
    2e52:	f5 cf       	rjmp	.-22     	; 0x2e3e <vApplicationMallocFailedHook+0x2>

00002e54 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2e54:	e8 df       	rcall	.-48     	; 0x2e26 <prvSetMainLedOn>
    2e56:	2f ef       	ldi	r18, 0xFF	; 255
    2e58:	87 ea       	ldi	r24, 0xA7	; 167
    2e5a:	91 e6       	ldi	r25, 0x61	; 97
    2e5c:	21 50       	subi	r18, 0x01	; 1
    2e5e:	80 40       	sbci	r24, 0x00	; 0
    2e60:	90 40       	sbci	r25, 0x00	; 0
    2e62:	e1 f7       	brne	.-8      	; 0x2e5c <vApplicationStackOverflowHook+0x8>
    2e64:	00 c0       	rjmp	.+0      	; 0x2e66 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2e66:	00 00       	nop
    2e68:	e5 df       	rcall	.-54     	; 0x2e34 <prvBlinkMainLed>
    2e6a:	f5 cf       	rjmp	.-22     	; 0x2e56 <vApplicationStackOverflowHook+0x2>

00002e6c <initializeQueues>:
#include "DataQueue.h"

QueueHandle_t xQueueCO2;

void initializeQueues() {
	xQueueCO2 = xQueueCreate(15, sizeof(uint16_t));
    2e6c:	40 e0       	ldi	r20, 0x00	; 0
    2e6e:	62 e0       	ldi	r22, 0x02	; 2
    2e70:	8f e0       	ldi	r24, 0x0F	; 15
    2e72:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <xQueueGenericCreate>
    2e76:	90 93 bc 13 	sts	0x13BC, r25	; 0x8013bc <xQueueCO2+0x1>
    2e7a:	80 93 bb 13 	sts	0x13BB, r24	; 0x8013bb <xQueueCO2>
    2e7e:	08 95       	ret

00002e80 <enqueueCO2Measure>:
}

void enqueueCO2Measure(uint16_t ppm){
    2e80:	0f 93       	push	r16
    2e82:	cf 93       	push	r28
    2e84:	df 93       	push	r29
    2e86:	1f 92       	push	r1
    2e88:	1f 92       	push	r1
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	9a 83       	std	Y+2, r25	; 0x02
    2e90:	89 83       	std	Y+1, r24	; 0x01
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    2e92:	00 e0       	ldi	r16, 0x00	; 0
    2e94:	2f ef       	ldi	r18, 0xFF	; 255
    2e96:	3f ef       	ldi	r19, 0xFF	; 255
    2e98:	a9 01       	movw	r20, r18
    2e9a:	be 01       	movw	r22, r28
    2e9c:	6f 5f       	subi	r22, 0xFF	; 255
    2e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea0:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <xQueueCO2>
    2ea4:	90 91 bc 13 	lds	r25, 0x13BC	; 0x8013bc <xQueueCO2+0x1>
    2ea8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <xQueueGenericSend>
}
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	0f 91       	pop	r16
    2eb6:	08 95       	ret

00002eb8 <dequeueCO2Measure>:

uint16_t dequeueCO2Measure(){
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	1f 92       	push	r1
    2ebe:	1f 92       	push	r1
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	
	xQueueReceive(xQueueCO2, &ppm, 1500);
    2ec4:	2c ed       	ldi	r18, 0xDC	; 220
    2ec6:	35 e0       	ldi	r19, 0x05	; 5
    2ec8:	40 e0       	ldi	r20, 0x00	; 0
    2eca:	50 e0       	ldi	r21, 0x00	; 0
    2ecc:	be 01       	movw	r22, r28
    2ece:	6f 5f       	subi	r22, 0xFF	; 255
    2ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed2:	80 91 bb 13 	lds	r24, 0x13BB	; 0x8013bb <xQueueCO2>
    2ed6:	90 91 bc 13 	lds	r25, 0x13BC	; 0x8013bc <xQueueCO2+0x1>
    2eda:	0e 94 c2 05 	call	0xb84	; 0xb84 <xQueueReceive>
	return ppm;
}
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	08 95       	ret

00002eec <initializeSharedDataQueue>:
SharedDataWithReturnCode sharedDataWithReturnCode;
BaseType_t xStatus;

void initializeSharedDataQueue()
{
	xQueueShared = xQueueCreate(15, sizeof(SharedData));
    2eec:	40 e0       	ldi	r20, 0x00	; 0
    2eee:	62 e0       	ldi	r22, 0x02	; 2
    2ef0:	8f e0       	ldi	r24, 0x0F	; 15
    2ef2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <xQueueGenericCreate>
    2ef6:	90 93 bf 13 	sts	0x13BF, r25	; 0x8013bf <xQueueShared+0x1>
    2efa:	80 93 be 13 	sts	0x13BE, r24	; 0x8013be <xQueueShared>
    2efe:	08 95       	ret

00002f00 <enqueueSharedData>:
}

void enqueueSharedData()
{
    2f00:	0f 93       	push	r16
    2f02:	1f 93       	push	r17
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	1f 92       	push	r1
    2f0a:	1f 92       	push	r1
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
	uint16_t co2 = dequeueCO2Measure();
    2f10:	d3 df       	rcall	.-90     	; 0x2eb8 <dequeueCO2Measure>
    2f12:	08 2f       	mov	r16, r24
    2f14:	19 2f       	mov	r17, r25
	//uint16_t temp = dequeueTempMeasure();
	//uint16_t light = dequeueLightMeasure();
	printf("Enqueuing Shared Data CO2: %d \n" , co2);
    2f16:	9f 93       	push	r25
    2f18:	8f 93       	push	r24
    2f1a:	84 e8       	ldi	r24, 0x84	; 132
    2f1c:	92 e0       	ldi	r25, 0x02	; 2
    2f1e:	9f 93       	push	r25
    2f20:	8f 93       	push	r24
    2f22:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>

	// TODO:
	SharedData_t shared = pvPortMalloc(sizeof(SharedData)); //Allocation memory to SharedData
    2f26:	82 e0       	ldi	r24, 0x02	; 2
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	0e 94 3b 01 	call	0x276	; 0x276 <pvPortMalloc>
    2f2e:	9a 83       	std	Y+2, r25	; 0x02
    2f30:	89 83       	std	Y+1, r24	; 0x01
	shared->co2 = co2;
    2f32:	fc 01       	movw	r30, r24
    2f34:	00 83       	st	Z, r16
    2f36:	11 83       	std	Z+1, r17	; 0x01
	
	xQueueSend(xQueueShared, (void*)&shared, portMAX_DELAY);
    2f38:	00 e0       	ldi	r16, 0x00	; 0
    2f3a:	2f ef       	ldi	r18, 0xFF	; 255
    2f3c:	3f ef       	ldi	r19, 0xFF	; 255
    2f3e:	a9 01       	movw	r20, r18
    2f40:	be 01       	movw	r22, r28
    2f42:	6f 5f       	subi	r22, 0xFF	; 255
    2f44:	7f 4f       	sbci	r23, 0xFF	; 255
    2f46:	80 91 be 13 	lds	r24, 0x13BE	; 0x8013be <xQueueShared>
    2f4a:	90 91 bf 13 	lds	r25, 0x13BF	; 0x8013bf <xQueueShared+0x1>
    2f4e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <xQueueGenericSend>
}
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	1f 91       	pop	r17
    2f64:	0f 91       	pop	r16
    2f66:	08 95       	ret

00002f68 <dequeueSharedData>:

SharedDataWithReturnCode_t dequeueSharedData()
{
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	1f 92       	push	r1
    2f6e:	1f 92       	push	r1
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
	SharedData_t received = &receiveSharedData;
    2f74:	80 ec       	ldi	r24, 0xC0	; 192
    2f76:	93 e1       	ldi	r25, 0x13	; 19
    2f78:	9a 83       	std	Y+2, r25	; 0x02
    2f7a:	89 83       	std	Y+1, r24	; 0x01
	
	SharedDataWithReturnCode_t sharedDataToReturn = &sharedDataWithReturnCode;
	
	
	xStatus = xQueueReceive(xQueueShared, &received, (TickType_t) 10);
    2f7c:	2a e0       	ldi	r18, 0x0A	; 10
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e0       	ldi	r20, 0x00	; 0
    2f82:	50 e0       	ldi	r21, 0x00	; 0
    2f84:	be 01       	movw	r22, r28
    2f86:	6f 5f       	subi	r22, 0xFF	; 255
    2f88:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8a:	80 91 be 13 	lds	r24, 0x13BE	; 0x8013be <xQueueShared>
    2f8e:	90 91 bf 13 	lds	r25, 0x13BF	; 0x8013bf <xQueueShared+0x1>
    2f92:	0e 94 c2 05 	call	0xb84	; 0xb84 <xQueueReceive>
    2f96:	80 93 bd 13 	sts	0x13BD, r24	; 0x8013bd <xStatus>
	
	if (xStatus == pdPASS){
    2f9a:	81 30       	cpi	r24, 0x01	; 1
    2f9c:	41 f4       	brne	.+16     	; 0x2fae <dequeueSharedData+0x46>
		sharedDataToReturn->returnCode = OK;
    2f9e:	e2 ec       	ldi	r30, 0xC2	; 194
    2fa0:	f3 e1       	ldi	r31, 0x13	; 19
    2fa2:	10 82       	st	Z, r1
		sharedDataToReturn->sharedData = received;
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	92 83       	std	Z+2, r25	; 0x02
    2faa:	81 83       	std	Z+1, r24	; 0x01
    2fac:	03 c0       	rjmp	.+6      	; 0x2fb4 <dequeueSharedData+0x4c>
	}
	else {
		sharedDataToReturn->returnCode = ENDOFQUEUE;
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	80 93 c2 13 	sts	0x13C2, r24	; 0x8013c2 <sharedDataWithReturnCode>
	}
	
	vPortFree(received);
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <vPortFree>
	return sharedDataToReturn;
}
    2fbc:	82 ec       	ldi	r24, 0xC2	; 194
    2fbe:	93 e1       	ldi	r25, 0x13	; 19
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	df 91       	pop	r29
    2fc6:	cf 91       	pop	r28
    2fc8:	08 95       	ret

00002fca <taskMeasureCO2>:

}


void taskMeasureCO2(void *pvParameters)
{
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <taskMeasureCO2+0x6>
    2fd0:	1f 92       	push	r1
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2500/portTICK_PERIOD_MS; // 2500 ms

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2fd6:	0e 94 36 0c 	call	0x186c	; 0x186c <xTaskGetTickCount>
    2fda:	69 83       	std	Y+1, r22	; 0x01
    2fdc:	7a 83       	std	Y+2, r23	; 0x02
    2fde:	8b 83       	std	Y+3, r24	; 0x03
    2fe0:	9c 83       	std	Y+4, r25	; 0x04
		
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    2fe2:	4c e9       	ldi	r20, 0x9C	; 156
    2fe4:	50 e0       	ldi	r21, 0x00	; 0
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	70 e0       	ldi	r23, 0x00	; 0
    2fea:	ce 01       	movw	r24, r28
    2fec:	01 96       	adiw	r24, 0x01	; 1
    2fee:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <xTaskDelayUntil>
		co2Measure(); // Call CO2HandlerImpl to take measure
    2ff2:	0e 94 ba 00 	call	0x174	; 0x174 <co2Measure>
    2ff6:	f5 cf       	rjmp	.-22     	; 0x2fe2 <taskMeasureCO2+0x18>

00002ff8 <queueCO2>:

	}
}

void queueCO2(void *pvParameters)
{
    2ff8:	cf 93       	push	r28
    2ffa:	df 93       	push	r29
    2ffc:	00 d0       	rcall	.+0      	; 0x2ffe <queueCO2+0x6>
    2ffe:	1f 92       	push	r1
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 3000/portTICK_PERIOD_MS; // 5500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3004:	0e 94 36 0c 	call	0x186c	; 0x186c <xTaskGetTickCount>
    3008:	69 83       	std	Y+1, r22	; 0x01
    300a:	7a 83       	std	Y+2, r23	; 0x02
    300c:	8b 83       	std	Y+3, r24	; 0x03
    300e:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3010:	4b eb       	ldi	r20, 0xBB	; 187
    3012:	50 e0       	ldi	r21, 0x00	; 0
    3014:	60 e0       	ldi	r22, 0x00	; 0
    3016:	70 e0       	ldi	r23, 0x00	; 0
    3018:	ce 01       	movw	r24, r28
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <xTaskDelayUntil>
		enqueueSharedData(); // Call SharedDataQueueImpl to enqueue the measures
    3020:	6f df       	rcall	.-290    	; 0x2f00 <enqueueSharedData>
    3022:	f6 cf       	rjmp	.-20     	; 0x3010 <queueCO2+0x18>

00003024 <dequeueCO2>:
		
	}
}

void dequeueCO2(void *pvParameters)
{
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	00 d0       	rcall	.+0      	; 0x302a <dequeueCO2+0x6>
    302a:	1f 92       	push	r1
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10000/portTICK_PERIOD_MS; // 10 s

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3030:	0e 94 36 0c 	call	0x186c	; 0x186c <xTaskGetTickCount>
    3034:	69 83       	std	Y+1, r22	; 0x01
    3036:	7a 83       	std	Y+2, r23	; 0x02
    3038:	8b 83       	std	Y+3, r24	; 0x03
    303a:	9c 83       	std	Y+4, r25	; 0x04
	
	SharedData_t sharedDataArray[15];
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    303c:	41 e7       	ldi	r20, 0x71	; 113
    303e:	52 e0       	ldi	r21, 0x02	; 2
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	70 e0       	ldi	r23, 0x00	; 0
    3044:	ce 01       	movw	r24, r28
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <xTaskDelayUntil>
		int arrayIndex = 0;
		SharedDataWithReturnCode_t dequeueData;
		bool flag = true;
    304c:	11 e0       	ldi	r17, 0x01	; 1
		
		while(flag) {
    304e:	18 c0       	rjmp	.+48     	; 0x3080 <dequeueCO2+0x5c>
			dequeueData = dequeueSharedData(); // Call SharedDataQueueImpl to dequeue the measures
    3050:	8b df       	rcall	.-234    	; 0x2f68 <dequeueSharedData>
			if (dequeueData->returnCode == OK)
    3052:	fc 01       	movw	r30, r24
    3054:	80 81       	ld	r24, Z
    3056:	81 11       	cpse	r24, r1
    3058:	05 c0       	rjmp	.+10     	; 0x3064 <dequeueCO2+0x40>
			{
				printf("Dequeueing OK \n");
    305a:	84 ea       	ldi	r24, 0xA4	; 164
    305c:	92 e0       	ldi	r25, 0x02	; 2
    305e:	0e 94 1b 28 	call	0x5036	; 0x5036 <puts>
    3062:	0e c0       	rjmp	.+28     	; 0x3080 <dequeueCO2+0x5c>
				sharedDataArray[arrayIndex] = dequeueData->sharedData;
			}
			else if(dequeueData->returnCode == ENDOFQUEUE)
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	61 f4       	brne	.+24     	; 0x3080 <dequeueCO2+0x5c>
			{
				printf("Dequeueing ENDOFQUEUE \n");
    3068:	83 eb       	ldi	r24, 0xB3	; 179
    306a:	92 e0       	ldi	r25, 0x02	; 2
    306c:	0e 94 1b 28 	call	0x5036	; 0x5036 <puts>
				for(int i = 0; i < (sizeof(sharedDataArray) / sizeof(SharedData)); i++)
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	01 c0       	rjmp	.+2      	; 0x3078 <dequeueCO2+0x54>
    3076:	01 96       	adiw	r24, 0x01	; 1
    3078:	8f 30       	cpi	r24, 0x0F	; 15
    307a:	91 05       	cpc	r25, r1
    307c:	e0 f3       	brcs	.-8      	; 0x3076 <dequeueCO2+0x52>
				{
					//printf("i is: %d \n", i);
					//printf("Sending to lorawan: %d \n", sharedDataArray[i]->co2);
				}
				flag = false;
    307e:	10 e0       	ldi	r17, 0x00	; 0
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
		int arrayIndex = 0;
		SharedDataWithReturnCode_t dequeueData;
		bool flag = true;
		
		while(flag) {
    3080:	11 11       	cpse	r17, r1
    3082:	e6 cf       	rjmp	.-52     	; 0x3050 <dequeueCO2+0x2c>
    3084:	db cf       	rjmp	.-74     	; 0x303c <dequeueCO2+0x18>

00003086 <setupTasks>:
void queueCO2( void *pvParameters );
void dequeueCO2( void *pvParameters );


void setupTasks(void)
{
    3086:	ef 92       	push	r14
    3088:	ff 92       	push	r15
    308a:	0f 93       	push	r16
	xTaskCreate(
    308c:	e1 2c       	mov	r14, r1
    308e:	f1 2c       	mov	r15, r1
    3090:	02 e0       	ldi	r16, 0x02	; 2
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 ec       	ldi	r20, 0xC0	; 192
    3098:	50 e0       	ldi	r21, 0x00	; 0
    309a:	6a ec       	ldi	r22, 0xCA	; 202
    309c:	72 e0       	ldi	r23, 0x02	; 2
    309e:	85 ee       	ldi	r24, 0xE5	; 229
    30a0:	97 e1       	ldi	r25, 0x17	; 23
    30a2:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    30a6:	01 e0       	ldi	r16, 0x01	; 1
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 ec       	ldi	r20, 0xC0	; 192
    30ae:	50 e0       	ldi	r21, 0x00	; 0
    30b0:	6b ed       	ldi	r22, 0xDB	; 219
    30b2:	72 e0       	ldi	r23, 0x02	; 2
    30b4:	8c ef       	ldi	r24, 0xFC	; 252
    30b6:	97 e1       	ldi	r25, 0x17	; 23
    30b8:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 ec       	ldi	r20, 0xC0	; 192
    30c2:	50 e0       	ldi	r21, 0x00	; 0
    30c4:	69 ed       	ldi	r22, 0xD9	; 217
    30c6:	72 e0       	ldi	r23, 0x02	; 2
    30c8:	82 e1       	ldi	r24, 0x12	; 18
    30ca:	98 e1       	ldi	r25, 0x18	; 24
    30cc:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

}
    30d0:	0f 91       	pop	r16
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	08 95       	ret

000030d8 <startTasks>:
	}
}

void startTasks()
{
	setupTasks();
    30d8:	d6 df       	rcall	.-84     	; 0x3086 <setupTasks>
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    30da:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <vTaskStartScheduler>
    30de:	08 95       	ret

000030e0 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    30ea:	a5 d2       	rcall	.+1354   	; 0x3636 <lora_driver_rn2483FactoryReset>
    30ec:	21 d5       	rcall	.+2626   	; 0x3b30 <lora_driver_mapReturnCodeToText>
    30ee:	9f 93       	push	r25
    30f0:	8f 93       	push	r24
    30f2:	84 ee       	ldi	r24, 0xE4	; 228
    30f4:	92 e0       	ldi	r25, 0x02	; 2
    30f6:	9f 93       	push	r25
    30f8:	8f 93       	push	r24
    30fa:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    30fe:	19 d4       	rcall	.+2098   	; 0x3932 <lora_driver_configureToEu868>
    3100:	17 d5       	rcall	.+2606   	; 0x3b30 <lora_driver_mapReturnCodeToText>
    3102:	9f 93       	push	r25
    3104:	8f 93       	push	r24
    3106:	87 ef       	ldi	r24, 0xF7	; 247
    3108:	92 e0       	ldi	r25, 0x02	; 2
    310a:	9f 93       	push	r25
    310c:	8f 93       	push	r24
    310e:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>
    3112:	8d e0       	ldi	r24, 0x0D	; 13

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3114:	92 e1       	ldi	r25, 0x12	; 18
    3116:	a1 d2       	rcall	.+1346   	; 0x365a <lora_driver_getRn2483Hweui>
    3118:	0b d5       	rcall	.+2582   	; 0x3b30 <lora_driver_mapReturnCodeToText>
    311a:	cd e0       	ldi	r28, 0x0D	; 13
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    311c:	d2 e1       	ldi	r29, 0x12	; 18
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	9f 93       	push	r25
    3124:	8f 93       	push	r24
    3126:	80 e1       	ldi	r24, 0x10	; 16
    3128:	93 e0       	ldi	r25, 0x03	; 3
    312a:	9f 93       	push	r25
    312c:	8f 93       	push	r24
    312e:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>
    3132:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3134:	ae d2       	rcall	.+1372   	; 0x3692 <lora_driver_setDeviceIdentifier>
    3136:	fc d4       	rcall	.+2552   	; 0x3b30 <lora_driver_mapReturnCodeToText>
    3138:	9f 93       	push	r25
    313a:	8f 93       	push	r24
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	84 e2       	ldi	r24, 0x24	; 36
    3142:	93 e0       	ldi	r25, 0x03	; 3
    3144:	9f 93       	push	r25
    3146:	8f 93       	push	r24
    3148:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>
    314c:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    314e:	69 e3       	ldi	r22, 0x39	; 57
    3150:	73 e0       	ldi	r23, 0x03	; 3
    3152:	8a e5       	ldi	r24, 0x5A	; 90
    3154:	93 e0       	ldi	r25, 0x03	; 3
    3156:	cb d4       	rcall	.+2454   	; 0x3aee <lora_driver_setOtaaIdentity>
    3158:	eb d4       	rcall	.+2518   	; 0x3b30 <lora_driver_mapReturnCodeToText>
    315a:	9f 93       	push	r25
    315c:	8f 93       	push	r24
    315e:	df 93       	push	r29
    3160:	cf 93       	push	r28
    3162:	89 e3       	ldi	r24, 0x39	; 57
    3164:	93 e0       	ldi	r25, 0x03	; 3
    3166:	9f 93       	push	r25
    3168:	8f 93       	push	r24
    316a:	8a e5       	ldi	r24, 0x5A	; 90
    316c:	93 e0       	ldi	r25, 0x03	; 3
    316e:	9f 93       	push	r25
    3170:	8f 93       	push	r24
    3172:	8b e6       	ldi	r24, 0x6B	; 107
    3174:	93 e0       	ldi	r25, 0x03	; 3
    3176:	9f 93       	push	r25
    3178:	8f 93       	push	r24
    317a:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>
    317e:	bc d2       	rcall	.+1400   	; 0x36f8 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3180:	d7 d4       	rcall	.+2478   	; 0x3b30 <lora_driver_mapReturnCodeToText>
    3182:	9f 93       	push	r25
    3184:	8f 93       	push	r24
    3186:	81 ea       	ldi	r24, 0xA1	; 161
    3188:	93 e0       	ldi	r25, 0x03	; 3
    318a:	9f 93       	push	r25
    318c:	8f 93       	push	r24
    318e:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>
    3192:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3194:	9e b7       	in	r25, 0x3e	; 62
    3196:	82 96       	adiw	r24, 0x22	; 34
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	9e bf       	out	0x3e, r25	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	8d bf       	out	0x3d, r24	; 61
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	a3 d3       	rcall	.+1862   	; 0x38ec <lora_driver_setAdaptiveDataRate>
    31a6:	c4 d4       	rcall	.+2440   	; 0x3b30 <lora_driver_mapReturnCodeToText>
    31a8:	9f 93       	push	r25
    31aa:	8f 93       	push	r24
    31ac:	80 eb       	ldi	r24, 0xB0	; 176
    31ae:	93 e0       	ldi	r25, 0x03	; 3
    31b0:	9f 93       	push	r25
    31b2:	8f 93       	push	r24
    31b4:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>
    31b8:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	a2 d3       	rcall	.+1860   	; 0x3902 <lora_driver_setReceiveDelay>
    31be:	b8 d4       	rcall	.+2416   	; 0x3b30 <lora_driver_mapReturnCodeToText>
    31c0:	9f 93       	push	r25
    31c2:	8f 93       	push	r24
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	8f 93       	push	r24
    31c8:	84 ef       	ldi	r24, 0xF4	; 244
    31ca:	8f 93       	push	r24
    31cc:	81 ed       	ldi	r24, 0xD1	; 209
    31ce:	93 e0       	ldi	r25, 0x03	; 3
    31d0:	9f 93       	push	r25
    31d2:	8f 93       	push	r24
    31d4:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>
    31d8:	8d b7       	in	r24, 0x3d	; 61
    31da:	9e b7       	in	r25, 0x3e	; 62
    31dc:	0a 96       	adiw	r24, 0x0a	; 10
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	9e bf       	out	0x3e, r25	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	8d bf       	out	0x3d, r24	; 61
    31e8:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    31ea:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    31ec:	8b d2       	rcall	.+1302   	; 0x3704 <lora_driver_join>
    31ee:	d8 2f       	mov	r29, r24
    31f0:	9f d4       	rcall	.+2366   	; 0x3b30 <lora_driver_mapReturnCodeToText>
    31f2:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    31f4:	8f 93       	push	r24
    31f6:	1f 92       	push	r1
    31f8:	cf 93       	push	r28
    31fa:	81 ef       	ldi	r24, 0xF1	; 241
    31fc:	93 e0       	ldi	r25, 0x03	; 3
    31fe:	9f 93       	push	r25
    3200:	8f 93       	push	r24
    3202:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	d8 30       	cpi	r29, 0x08	; 8
    3214:	59 f0       	breq	.+22     	; 0x322c <_lora_setup+0x14c>
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	0e 94 38 24 	call	0x4870	; 0x4870 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    321c:	66 e3       	ldi	r22, 0x36	; 54
    321e:	71 e0       	ldi	r23, 0x01	; 1
    3220:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vTaskDelay>
    3228:	c1 50       	subi	r28, 0x01	; 1
    322a:	f9 f6       	brne	.-66     	; 0x31ea <_lora_setup+0x10a>
    322c:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    322e:	41 f4       	brne	.+16     	; 0x3240 <_lora_setup+0x160>
    3230:	81 e1       	ldi	r24, 0x11	; 17

	if (rc == LORA_ACCEPTED)
    3232:	94 e0       	ldi	r25, 0x04	; 4
    3234:	0e 94 1b 28 	call	0x5036	; 0x5036 <puts>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		printf("\t We have been accepted \n");
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	0e 94 1a 24 	call	0x4834	; 0x4834 <status_leds_ledOn>
		status_leds_ledOn(led_ST2); // OPTIONAL
    323e:	09 c0       	rjmp	.+18     	; 0x3252 <_lora_setup+0x172>
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	0e 94 29 24 	call	0x4852	; 0x4852 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	0e 94 f7 23 	call	0x47ee	; 0x47ee <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    324c:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    3250:	fd cf       	rjmp	.-6      	; 0x324c <_lora_setup+0x16c>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3252:	df 91       	pop	r29
    3254:	cf 91       	pop	r28
    3256:	08 95       	ret

00003258 <lora_handler_task>:
		}
	}
}
    3258:	cf 93       	push	r28
    325a:	df 93       	push	r29
    325c:	00 d0       	rcall	.+0      	; 0x325e <lora_handler_task+0x6>

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    325e:	1f 92       	push	r1
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
	
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	d9 d1       	rcall	.+946    	; 0x361a <lora_driver_resetRn2483>
	vTaskDelay(2);
    3268:	62 e0       	ldi	r22, 0x02	; 2
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	d1 d1       	rcall	.+930    	; 0x361a <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3278:	66 e9       	ldi	r22, 0x96	; 150
    327a:	70 e0       	ldi	r23, 0x00	; 0
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3284:	83 d1       	rcall	.+774    	; 0x358c <lora_driver_flushBuffers>

	_lora_setup();
    3286:	2c df       	rcall	.-424    	; 0x30e0 <_lora_setup>
    3288:	8a e2       	ldi	r24, 0x2A	; 42

	printf("\t Do we get here? \n");
    328a:	94 e0       	ldi	r25, 0x04	; 4
    328c:	0e 94 1b 28 	call	0x5036	; 0x5036 <puts>
    3290:	e7 ef       	ldi	r30, 0xF7	; 247

	_uplink_payload.len = 6;
    3292:	f1 e1       	ldi	r31, 0x11	; 17
    3294:	86 e0       	ldi	r24, 0x06	; 6
    3296:	81 83       	std	Z+1, r24	; 0x01
    3298:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    329a:	80 83       	st	Z, r24
    329c:	0e 94 36 0c 	call	0x186c	; 0x186c <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    32a0:	69 83       	std	Y+1, r22	; 0x01
    32a2:	7a 83       	std	Y+2, r23	; 0x02
    32a4:	8b 83       	std	Y+3, r24	; 0x03
    32a6:	9c 83       	std	Y+4, r25	; 0x04
    32a8:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    32aa:	58 e4       	ldi	r21, 0x48	; 72
    32ac:	60 e0       	ldi	r22, 0x00	; 0
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	ce 01       	movw	r24, r28
    32b2:	01 96       	adiw	r24, 0x01	; 1
    32b4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <xTaskDelayUntil>
    32b8:	e7 ef       	ldi	r30, 0xF7	; 247
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2
		// Make own payload consisting of struct

		_uplink_payload.bytes[0] = hum >> 8;
    32ba:	f1 e1       	ldi	r31, 0x11	; 17
    32bc:	80 e3       	ldi	r24, 0x30	; 48
    32be:	82 83       	std	Z+2, r24	; 0x02
    32c0:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    32c2:	83 83       	std	Z+3, r24	; 0x03
    32c4:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    32c6:	84 83       	std	Z+4, r24	; 0x04
    32c8:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    32ca:	85 83       	std	Z+5, r24	; 0x05
    32cc:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    32ce:	86 83       	std	Z+6, r24	; 0x06
    32d0:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    32d2:	87 83       	std	Z+7, r24	; 0x07
    32d4:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    32d6:	0e 94 4a 24 	call	0x4894	; 0x4894 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    32da:	67 ef       	ldi	r22, 0xF7	; 247
    32dc:	71 e1       	ldi	r23, 0x11	; 17
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	3a d2       	rcall	.+1140   	; 0x3756 <lora_driver_sendUploadMessage>
    32e2:	26 d4       	rcall	.+2124   	; 0x3b30 <lora_driver_mapReturnCodeToText>
    32e4:	9f 93       	push	r25
    32e6:	8f 93       	push	r24
    32e8:	8d e3       	ldi	r24, 0x3D	; 61
    32ea:	94 e0       	ldi	r25, 0x04	; 4
    32ec:	9f 93       	push	r25
    32ee:	8f 93       	push	r24
    32f0:	0e 94 08 28 	call	0x5010	; 0x5010 <printf>
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	d5 cf       	rjmp	.-86     	; 0x32a8 <lora_handler_task+0x50>

000032fe <lora_handler_initialise>:
    32fe:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3300:	ff 92       	push	r15
    3302:	0f 93       	push	r16
	xTaskCreate(
    3304:	e1 2c       	mov	r14, r1
    3306:	f1 2c       	mov	r15, r1
    3308:	08 2f       	mov	r16, r24
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	48 e8       	ldi	r20, 0x88	; 136
    3310:	51 e0       	ldi	r21, 0x01	; 1
    3312:	62 e5       	ldi	r22, 0x52	; 82
    3314:	74 e0       	ldi	r23, 0x04	; 4
    3316:	8c e2       	ldi	r24, 0x2C	; 44
    3318:	99 e1       	ldi	r25, 0x19	; 25
    331a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    331e:	0f 91       	pop	r16
    3320:	ff 90       	pop	r15
    3322:	ef 90       	pop	r14
    3324:	08 95       	ret

00003326 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3326:	81 b1       	in	r24, 0x01	; 1
    3328:	81 68       	ori	r24, 0x81	; 129
    332a:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	0e 94 7f 22 	call	0x44fe	; 0x44fe <stdio_initialise>
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3332:	85 e0       	ldi	r24, 0x05	; 5
    3334:	0e 94 86 23 	call	0x470c	; 0x470c <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	2d d1       	rcall	.+602    	; 0x359a <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3340:	83 e0       	ldi	r24, 0x03	; 3
    3342:	dd df       	rcall	.-70     	; 0x32fe <lora_handler_initialise>
	
	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    3344:	83 e0       	ldi	r24, 0x03	; 3
	
	
	// Initialize queues
	initializeQueues();
    3346:	d0 d4       	rcall	.+2464   	; 0x3ce8 <mh_z19_initialise>
    3348:	91 dd       	rcall	.-1246   	; 0x2e6c <initializeQueues>
	initializeSharedDataQueue();
    334a:	d0 cd       	rjmp	.-1120   	; 0x2eec <initializeSharedDataQueue>
    334c:	08 95       	ret

0000334e <main>:
    334e:	eb df       	rcall	.-42     	; 0x3326 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    3350:	89 e5       	ldi	r24, 0x59	; 89
    3352:	94 e0       	ldi	r25, 0x04	; 4
    3354:	0e 94 1b 28 	call	0x5036	; 0x5036 <puts>
	startTasks();
    3358:	bf de       	rcall	.-642    	; 0x30d8 <startTasks>
    335a:	ff cf       	rjmp	.-2      	; 0x335a <main+0xc>

0000335c <_serialCallBack>:
    335c:	0f 93       	push	r16
    335e:	1f 93       	push	r17
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	1f 92       	push	r1
    3366:	1f 92       	push	r1
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	8c 01       	movw	r16, r24
    336e:	19 82       	std	Y+1, r1	; 0x01
    3370:	2d c0       	rjmp	.+90     	; 0x33cc <_serialCallBack+0x70>
    3372:	e0 91 d5 12 	lds	r30, 0x12D5	; 0x8012d5 <rec_buf_inp.2878>
    3376:	ec 32       	cpi	r30, 0x2C	; 44
    3378:	50 f4       	brcc	.+20     	; 0x338e <_serialCallBack+0x32>
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	8e 0f       	add	r24, r30
    337e:	80 93 d5 12 	sts	0x12D5, r24	; 0x8012d5 <rec_buf_inp.2878>
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	e9 5f       	subi	r30, 0xF9	; 249
    3386:	fc 4e       	sbci	r31, 0xEC	; 236
    3388:	8a 81       	ldd	r24, Y+2	; 0x02
    338a:	80 83       	st	Z, r24
    338c:	02 c0       	rjmp	.+4      	; 0x3392 <_serialCallBack+0x36>
    338e:	10 92 d5 12 	sts	0x12D5, r1	; 0x8012d5 <rec_buf_inp.2878>
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	8a 30       	cpi	r24, 0x0A	; 10
    3396:	d1 f4       	brne	.+52     	; 0x33cc <_serialCallBack+0x70>
    3398:	40 91 d5 12 	lds	r20, 0x12D5	; 0x8012d5 <rec_buf_inp.2878>
    339c:	50 e0       	ldi	r21, 0x00	; 0
    339e:	fa 01       	movw	r30, r20
    33a0:	eb 5f       	subi	r30, 0xFB	; 251
    33a2:	fc 4e       	sbci	r31, 0xEC	; 236
    33a4:	10 82       	st	Z, r1
    33a6:	41 50       	subi	r20, 0x01	; 1
    33a8:	51 09       	sbc	r21, r1
    33aa:	9e 01       	movw	r18, r28
    33ac:	2f 5f       	subi	r18, 0xFF	; 255
    33ae:	3f 4f       	sbci	r19, 0xFF	; 255
    33b0:	67 e0       	ldi	r22, 0x07	; 7
    33b2:	73 e1       	ldi	r23, 0x13	; 19
    33b4:	80 91 d8 12 	lds	r24, 0x12D8	; 0x8012d8 <_serialReplyBufferHandle>
    33b8:	90 91 d9 12 	lds	r25, 0x12D9	; 0x8012d9 <_serialReplyBufferHandle+0x1>
    33bc:	0e 94 d5 08 	call	0x11aa	; 0x11aa <xStreamBufferSendFromISR>
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	81 11       	cpse	r24, r1
    33c4:	0e 94 ef 02 	call	0x5de	; 0x5de <vPortYield>
    33c8:	10 92 d5 12 	sts	0x12D5, r1	; 0x8012d5 <rec_buf_inp.2878>
    33cc:	be 01       	movw	r22, r28
    33ce:	6e 5f       	subi	r22, 0xFE	; 254
    33d0:	7f 4f       	sbci	r23, 0xFF	; 255
    33d2:	c8 01       	movw	r24, r16
    33d4:	fe d5       	rcall	.+3068   	; 0x3fd2 <serial_getByte>
    33d6:	88 23       	and	r24, r24
    33d8:	61 f2       	breq	.-104    	; 0x3372 <_serialCallBack+0x16>
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	08 95       	ret

000033e8 <_uploadMessage>:
    33e8:	0f 93       	push	r16
    33ea:	1f 93       	push	r17
    33ec:	cf 93       	push	r28
    33ee:	df 93       	push	r29
    33f0:	8c 01       	movw	r16, r24
    33f2:	eb 01       	movw	r28, r22
    33f4:	80 91 d8 12 	lds	r24, 0x12D8	; 0x8012d8 <_serialReplyBufferHandle>
    33f8:	90 91 d9 12 	lds	r25, 0x12D9	; 0x8012d9 <_serialReplyBufferHandle+0x1>
    33fc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <xStreamBufferReset>
    3400:	b8 01       	movw	r22, r16
    3402:	81 e7       	ldi	r24, 0x71	; 113
    3404:	92 e1       	ldi	r25, 0x12	; 18
    3406:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <strcpy>
    340a:	20 97       	sbiw	r28, 0x00	; 0
    340c:	79 f0       	breq	.+30     	; 0x342c <_uploadMessage+0x44>
    340e:	e1 e7       	ldi	r30, 0x71	; 113
    3410:	f2 e1       	ldi	r31, 0x12	; 18
    3412:	01 90       	ld	r0, Z+
    3414:	00 20       	and	r0, r0
    3416:	e9 f7       	brne	.-6      	; 0x3412 <_uploadMessage+0x2a>
    3418:	31 97       	sbiw	r30, 0x01	; 1
    341a:	80 e2       	ldi	r24, 0x20	; 32
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	91 83       	std	Z+1, r25	; 0x01
    3420:	80 83       	st	Z, r24
    3422:	be 01       	movw	r22, r28
    3424:	81 e7       	ldi	r24, 0x71	; 113
    3426:	92 e1       	ldi	r25, 0x12	; 18
    3428:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <strcat>
    342c:	e1 e7       	ldi	r30, 0x71	; 113
    342e:	f2 e1       	ldi	r31, 0x12	; 18
    3430:	df 01       	movw	r26, r30
    3432:	0d 90       	ld	r0, X+
    3434:	00 20       	and	r0, r0
    3436:	e9 f7       	brne	.-6      	; 0x3432 <_uploadMessage+0x4a>
    3438:	11 97       	sbiw	r26, 0x01	; 1
    343a:	8d e0       	ldi	r24, 0x0D	; 13
    343c:	9a e0       	ldi	r25, 0x0A	; 10
    343e:	11 96       	adiw	r26, 0x01	; 1
    3440:	9c 93       	st	X, r25
    3442:	8e 93       	st	-X, r24
    3444:	12 96       	adiw	r26, 0x02	; 2
    3446:	1c 92       	st	X, r1
    3448:	01 90       	ld	r0, Z+
    344a:	00 20       	and	r0, r0
    344c:	e9 f7       	brne	.-6      	; 0x3448 <_uploadMessage+0x60>
    344e:	31 97       	sbiw	r30, 0x01	; 1
    3450:	e1 57       	subi	r30, 0x71	; 113
    3452:	f2 41       	sbci	r31, 0x12	; 18
    3454:	ae 2f       	mov	r26, r30
    3456:	81 e7       	ldi	r24, 0x71	; 113
    3458:	92 e1       	ldi	r25, 0x12	; 18
    345a:	ac 01       	movw	r20, r24
    345c:	6a 2f       	mov	r22, r26
    345e:	80 91 da 12 	lds	r24, 0x12DA	; 0x8012da <_rn2483_serial>
    3462:	90 91 db 12 	lds	r25, 0x12DB	; 0x8012db <_rn2483_serial+0x1>
    3466:	60 d5       	rcall	.+2752   	; 0x3f28 <serial_sendBytes>
    3468:	81 11       	cpse	r24, r1
    346a:	11 c0       	rjmp	.+34     	; 0x348e <_uploadMessage+0xa6>
    346c:	08 e2       	ldi	r16, 0x28	; 40
    346e:	15 e0       	ldi	r17, 0x05	; 5
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	4d e2       	ldi	r20, 0x2D	; 45
    3476:	50 e0       	ldi	r21, 0x00	; 0
    3478:	61 e6       	ldi	r22, 0x61	; 97
    347a:	73 e1       	ldi	r23, 0x13	; 19
    347c:	80 91 d8 12 	lds	r24, 0x12D8	; 0x8012d8 <_serialReplyBufferHandle>
    3480:	90 91 d9 12 	lds	r25, 0x12D9	; 0x8012d9 <_serialReplyBufferHandle+0x1>
    3484:	0e 94 19 09 	call	0x1232	; 0x1232 <xStreamBufferReceive>
    3488:	81 e6       	ldi	r24, 0x61	; 97
    348a:	93 e1       	ldi	r25, 0x13	; 19
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <_uploadMessage+0xaa>
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	1f 91       	pop	r17
    3498:	0f 91       	pop	r16
    349a:	08 95       	ret

0000349c <_reply2ReturnCode>:
    349c:	2f 92       	push	r2
    349e:	3f 92       	push	r3
    34a0:	4f 92       	push	r4
    34a2:	5f 92       	push	r5
    34a4:	6f 92       	push	r6
    34a6:	7f 92       	push	r7
    34a8:	8f 92       	push	r8
    34aa:	9f 92       	push	r9
    34ac:	af 92       	push	r10
    34ae:	bf 92       	push	r11
    34b0:	cf 92       	push	r12
    34b2:	df 92       	push	r13
    34b4:	ef 92       	push	r14
    34b6:	ff 92       	push	r15
    34b8:	0f 93       	push	r16
    34ba:	1f 93       	push	r17
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	5c 01       	movw	r10, r24
    34c2:	fc 01       	movw	r30, r24
    34c4:	01 90       	ld	r0, Z+
    34c6:	00 20       	and	r0, r0
    34c8:	e9 f7       	brne	.-6      	; 0x34c4 <_reply2ReturnCode+0x28>
    34ca:	31 97       	sbiw	r30, 0x01	; 1
    34cc:	6f 01       	movw	r12, r30
    34ce:	c8 1a       	sub	r12, r24
    34d0:	d9 0a       	sbc	r13, r25
    34d2:	5c 2c       	mov	r5, r12
    34d4:	0f 2e       	mov	r0, r31
    34d6:	f4 e0       	ldi	r31, 0x04	; 4
    34d8:	8f 2e       	mov	r8, r31
    34da:	f7 e0       	ldi	r31, 0x07	; 7
    34dc:	9f 2e       	mov	r9, r31
    34de:	f0 2d       	mov	r31, r0
    34e0:	e1 2c       	mov	r14, r1
    34e2:	f1 2c       	mov	r15, r1
    34e4:	4c 2c       	mov	r4, r12
    34e6:	37 01       	movw	r6, r14
    34e8:	f4 01       	movw	r30, r8
    34ea:	01 81       	ldd	r16, Z+1	; 0x01
    34ec:	12 81       	ldd	r17, Z+2	; 0x02
    34ee:	e8 01       	movw	r28, r16
    34f0:	09 90       	ld	r0, Y+
    34f2:	00 20       	and	r0, r0
    34f4:	e9 f7       	brne	.-6      	; 0x34f0 <_reply2ReturnCode+0x54>
    34f6:	21 97       	sbiw	r28, 0x01	; 1
    34f8:	c0 1b       	sub	r28, r16
    34fa:	d1 0b       	sbc	r29, r17
    34fc:	3c 2e       	mov	r3, r28
    34fe:	f9 e0       	ldi	r31, 0x09	; 9
    3500:	cf 16       	cp	r12, r31
    3502:	d1 04       	cpc	r13, r1
    3504:	58 f0       	brcs	.+22     	; 0x351c <_reply2ReturnCode+0x80>
    3506:	f4 01       	movw	r30, r8
    3508:	20 80       	ld	r2, Z
    350a:	fe e0       	ldi	r31, 0x0E	; 14
    350c:	2f 12       	cpse	r2, r31
    350e:	06 c0       	rjmp	.+12     	; 0x351c <_reply2ReturnCode+0x80>
    3510:	b8 01       	movw	r22, r16
    3512:	c5 01       	movw	r24, r10
    3514:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <strcasestr>
    3518:	89 2b       	or	r24, r25
    351a:	09 f5       	brne	.+66     	; 0x355e <_reply2ReturnCode+0xc2>
    351c:	44 2d       	mov	r20, r4
    351e:	35 14       	cp	r3, r5
    3520:	08 f4       	brcc	.+2      	; 0x3524 <_reply2ReturnCode+0x88>
    3522:	4c 2f       	mov	r20, r28
    3524:	50 e0       	ldi	r21, 0x00	; 0
    3526:	b8 01       	movw	r22, r16
    3528:	c5 01       	movw	r24, r10
    352a:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <strncasecmp>
    352e:	89 2b       	or	r24, r25
    3530:	49 f4       	brne	.+18     	; 0x3544 <_reply2ReturnCode+0xa8>
    3532:	f3 01       	movw	r30, r6
    3534:	ee 0f       	add	r30, r30
    3536:	ff 1f       	adc	r31, r31
    3538:	e6 0d       	add	r30, r6
    353a:	f7 1d       	adc	r31, r7
    353c:	ec 5f       	subi	r30, 0xFC	; 252
    353e:	f8 4f       	sbci	r31, 0xF8	; 248
    3540:	20 80       	ld	r2, Z
    3542:	0d c0       	rjmp	.+26     	; 0x355e <_reply2ReturnCode+0xc2>
    3544:	8f ef       	ldi	r24, 0xFF	; 255
    3546:	e8 1a       	sub	r14, r24
    3548:	f8 0a       	sbc	r15, r24
    354a:	e3 e0       	ldi	r30, 0x03	; 3
    354c:	8e 0e       	add	r8, r30
    354e:	91 1c       	adc	r9, r1
    3550:	f1 e1       	ldi	r31, 0x11	; 17
    3552:	ef 16       	cp	r14, r31
    3554:	f1 04       	cpc	r15, r1
    3556:	39 f6       	brne	.-114    	; 0x34e6 <_reply2ReturnCode+0x4a>
    3558:	68 94       	set
    355a:	22 24       	eor	r2, r2
    355c:	24 f8       	bld	r2, 4
    355e:	82 2d       	mov	r24, r2
    3560:	df 91       	pop	r29
    3562:	cf 91       	pop	r28
    3564:	1f 91       	pop	r17
    3566:	0f 91       	pop	r16
    3568:	ff 90       	pop	r15
    356a:	ef 90       	pop	r14
    356c:	df 90       	pop	r13
    356e:	cf 90       	pop	r12
    3570:	bf 90       	pop	r11
    3572:	af 90       	pop	r10
    3574:	9f 90       	pop	r9
    3576:	8f 90       	pop	r8
    3578:	7f 90       	pop	r7
    357a:	6f 90       	pop	r6
    357c:	5f 90       	pop	r5
    357e:	4f 90       	pop	r4
    3580:	3f 90       	pop	r3
    3582:	2f 90       	pop	r2
    3584:	08 95       	ret

00003586 <_uploadMessageRc>:
    3586:	30 df       	rcall	.-416    	; 0x33e8 <_uploadMessage>
    3588:	89 cf       	rjmp	.-238    	; 0x349c <_reply2ReturnCode>
    358a:	08 95       	ret

0000358c <lora_driver_flushBuffers>:
    358c:	80 91 d8 12 	lds	r24, 0x12D8	; 0x8012d8 <_serialReplyBufferHandle>
    3590:	90 91 d9 12 	lds	r25, 0x12D9	; 0x8012d9 <_serialReplyBufferHandle+0x1>
    3594:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <xStreamBufferReset>
    3598:	08 95       	ret

0000359a <lora_driver_initialise>:
    359a:	8f 92       	push	r8
    359c:	9f 92       	push	r9
    359e:	af 92       	push	r10
    35a0:	cf 92       	push	r12
    35a2:	ef 92       	push	r14
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    35a8:	cf 93       	push	r28
    35aa:	c8 2f       	mov	r28, r24
    35ac:	8b 01       	movw	r16, r22
    35ae:	41 e0       	ldi	r20, 0x01	; 1
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	70 e0       	ldi	r23, 0x00	; 0
    35b4:	88 ec       	ldi	r24, 0xC8	; 200
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	0e 94 b0 07 	call	0xf60	; 0xf60 <xStreamBufferGenericCreate>
    35bc:	90 93 d9 12 	sts	0x12D9, r25	; 0x8012d9 <_serialReplyBufferHandle+0x1>
    35c0:	80 93 d8 12 	sts	0x12D8, r24	; 0x8012d8 <_serialReplyBufferHandle>
    35c4:	10 93 d7 12 	sts	0x12D7, r17	; 0x8012d7 <_downlinkMessageBuffer+0x1>
    35c8:	00 93 d6 12 	sts	0x12D6, r16	; 0x8012d6 <_downlinkMessageBuffer>
    35cc:	0f 2e       	mov	r0, r31
    35ce:	fe ea       	ldi	r31, 0xAE	; 174
    35d0:	8f 2e       	mov	r8, r31
    35d2:	f9 e1       	ldi	r31, 0x19	; 25
    35d4:	9f 2e       	mov	r9, r31
    35d6:	f0 2d       	mov	r31, r0
    35d8:	68 94       	set
    35da:	aa 24       	eor	r10, r10
    35dc:	a6 f8       	bld	r10, 6
    35de:	68 94       	set
    35e0:	cc 24       	eor	r12, r12
    35e2:	c6 f8       	bld	r12, 6
    35e4:	e1 2c       	mov	r14, r1
    35e6:	00 e0       	ldi	r16, 0x00	; 0
    35e8:	23 e0       	ldi	r18, 0x03	; 3
    35ea:	40 e0       	ldi	r20, 0x00	; 0
    35ec:	51 ee       	ldi	r21, 0xE1	; 225
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	8c 2f       	mov	r24, r28
    35f4:	d2 d3       	rcall	.+1956   	; 0x3d9a <serial_create>
    35f6:	90 93 db 12 	sts	0x12DB, r25	; 0x8012db <_rn2483_serial+0x1>
    35fa:	80 93 da 12 	sts	0x12DA, r24	; 0x8012da <_rn2483_serial>
    35fe:	e7 e0       	ldi	r30, 0x07	; 7
    3600:	f1 e0       	ldi	r31, 0x01	; 1
    3602:	80 81       	ld	r24, Z
    3604:	80 61       	ori	r24, 0x10	; 16
    3606:	80 83       	st	Z, r24
    3608:	cf 91       	pop	r28
    360a:	1f 91       	pop	r17
    360c:	0f 91       	pop	r16
    360e:	ef 90       	pop	r14
    3610:	cf 90       	pop	r12
    3612:	af 90       	pop	r10
    3614:	9f 90       	pop	r9
    3616:	8f 90       	pop	r8
    3618:	08 95       	ret

0000361a <lora_driver_resetRn2483>:
    361a:	88 23       	and	r24, r24
    361c:	31 f0       	breq	.+12     	; 0x362a <lora_driver_resetRn2483+0x10>
    361e:	e8 e0       	ldi	r30, 0x08	; 8
    3620:	f1 e0       	ldi	r31, 0x01	; 1
    3622:	80 81       	ld	r24, Z
    3624:	8f 7e       	andi	r24, 0xEF	; 239
    3626:	80 83       	st	Z, r24
    3628:	08 95       	ret
    362a:	e8 e0       	ldi	r30, 0x08	; 8
    362c:	f1 e0       	ldi	r31, 0x01	; 1
    362e:	80 81       	ld	r24, Z
    3630:	80 61       	ori	r24, 0x10	; 16
    3632:	80 83       	st	Z, r24
    3634:	08 95       	ret

00003636 <lora_driver_rn2483FactoryReset>:
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	70 e0       	ldi	r23, 0x00	; 0
    363a:	8a e8       	ldi	r24, 0x8A	; 138
    363c:	94 e0       	ldi	r25, 0x04	; 4
    363e:	d4 de       	rcall	.-600    	; 0x33e8 <_uploadMessage>
    3640:	e1 e6       	ldi	r30, 0x61	; 97
    3642:	f3 e1       	ldi	r31, 0x13	; 19
    3644:	01 90       	ld	r0, Z+
    3646:	00 20       	and	r0, r0
    3648:	e9 f7       	brne	.-6      	; 0x3644 <lora_driver_rn2483FactoryReset+0xe>
    364a:	31 97       	sbiw	r30, 0x01	; 1
    364c:	e1 56       	subi	r30, 0x61	; 97
    364e:	f3 41       	sbci	r31, 0x13	; 19
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	75 97       	sbiw	r30, 0x15	; 21
    3654:	08 f0       	brcs	.+2      	; 0x3658 <lora_driver_rn2483FactoryReset+0x22>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	08 95       	ret

0000365a <lora_driver_getRn2483Hweui>:
    365a:	cf 93       	push	r28
    365c:	df 93       	push	r29
    365e:	ec 01       	movw	r28, r24
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	8b e9       	ldi	r24, 0x9B	; 155
    3666:	94 e0       	ldi	r25, 0x04	; 4
    3668:	bf de       	rcall	.-642    	; 0x33e8 <_uploadMessage>
    366a:	e1 e6       	ldi	r30, 0x61	; 97
    366c:	f3 e1       	ldi	r31, 0x13	; 19
    366e:	01 90       	ld	r0, Z+
    3670:	00 20       	and	r0, r0
    3672:	e9 f7       	brne	.-6      	; 0x366e <lora_driver_getRn2483Hweui+0x14>
    3674:	e2 57       	subi	r30, 0x72	; 114
    3676:	f3 41       	sbci	r31, 0x13	; 19
    3678:	39 f4       	brne	.+14     	; 0x3688 <lora_driver_getRn2483Hweui+0x2e>
    367a:	61 e6       	ldi	r22, 0x61	; 97
    367c:	73 e1       	ldi	r23, 0x13	; 19
    367e:	ce 01       	movw	r24, r28
    3680:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <strcpy>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	02 c0       	rjmp	.+4      	; 0x368c <lora_driver_getRn2483Hweui+0x32>
    3688:	18 82       	st	Y, r1
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	df 91       	pop	r29
    368e:	cf 91       	pop	r28
    3690:	08 95       	ret

00003692 <lora_driver_setDeviceIdentifier>:
    3692:	fc 01       	movw	r30, r24
    3694:	01 90       	ld	r0, Z+
    3696:	00 20       	and	r0, r0
    3698:	e9 f7       	brne	.-6      	; 0x3694 <lora_driver_setDeviceIdentifier+0x2>
    369a:	9f 01       	movw	r18, r30
    369c:	21 51       	subi	r18, 0x11	; 17
    369e:	31 09       	sbc	r19, r1
    36a0:	28 17       	cp	r18, r24
    36a2:	39 07       	cpc	r19, r25
    36a4:	29 f4       	brne	.+10     	; 0x36b0 <lora_driver_setDeviceIdentifier+0x1e>
    36a6:	bc 01       	movw	r22, r24
    36a8:	89 ec       	ldi	r24, 0xC9	; 201
    36aa:	94 e0       	ldi	r25, 0x04	; 4
    36ac:	6c cf       	rjmp	.-296    	; 0x3586 <_uploadMessageRc>
    36ae:	08 95       	ret
    36b0:	89 e0       	ldi	r24, 0x09	; 9
    36b2:	08 95       	ret

000036b4 <lora_driver_setApplicationIdentifier>:
    36b4:	fc 01       	movw	r30, r24
    36b6:	01 90       	ld	r0, Z+
    36b8:	00 20       	and	r0, r0
    36ba:	e9 f7       	brne	.-6      	; 0x36b6 <lora_driver_setApplicationIdentifier+0x2>
    36bc:	9f 01       	movw	r18, r30
    36be:	21 51       	subi	r18, 0x11	; 17
    36c0:	31 09       	sbc	r19, r1
    36c2:	28 17       	cp	r18, r24
    36c4:	39 07       	cpc	r19, r25
    36c6:	29 f4       	brne	.+10     	; 0x36d2 <lora_driver_setApplicationIdentifier+0x1e>
    36c8:	bc 01       	movw	r22, r24
    36ca:	88 ed       	ldi	r24, 0xD8	; 216
    36cc:	94 e0       	ldi	r25, 0x04	; 4
    36ce:	5b cf       	rjmp	.-330    	; 0x3586 <_uploadMessageRc>
    36d0:	08 95       	ret
    36d2:	89 e0       	ldi	r24, 0x09	; 9
    36d4:	08 95       	ret

000036d6 <lora_driver_setApplicationKey>:
    36d6:	fc 01       	movw	r30, r24
    36d8:	01 90       	ld	r0, Z+
    36da:	00 20       	and	r0, r0
    36dc:	e9 f7       	brne	.-6      	; 0x36d8 <lora_driver_setApplicationKey+0x2>
    36de:	9f 01       	movw	r18, r30
    36e0:	21 52       	subi	r18, 0x21	; 33
    36e2:	31 09       	sbc	r19, r1
    36e4:	28 17       	cp	r18, r24
    36e6:	39 07       	cpc	r19, r25
    36e8:	29 f4       	brne	.+10     	; 0x36f4 <lora_driver_setApplicationKey+0x1e>
    36ea:	bc 01       	movw	r22, r24
    36ec:	87 ee       	ldi	r24, 0xE7	; 231
    36ee:	94 e0       	ldi	r25, 0x04	; 4
    36f0:	4a cf       	rjmp	.-364    	; 0x3586 <_uploadMessageRc>
    36f2:	08 95       	ret
    36f4:	89 e0       	ldi	r24, 0x09	; 9
    36f6:	08 95       	ret

000036f8 <lora_driver_saveMac>:
    36f8:	60 e0       	ldi	r22, 0x00	; 0
    36fa:	70 e0       	ldi	r23, 0x00	; 0
    36fc:	86 e2       	ldi	r24, 0x26	; 38
    36fe:	95 e0       	ldi	r25, 0x05	; 5
    3700:	42 cf       	rjmp	.-380    	; 0x3586 <_uploadMessageRc>
    3702:	08 95       	ret

00003704 <lora_driver_join>:
    3704:	0f 93       	push	r16
    3706:	1f 93       	push	r17
    3708:	e8 2f       	mov	r30, r24
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	ee 0f       	add	r30, r30
    370e:	ff 1f       	adc	r31, r31
    3710:	e0 50       	subi	r30, 0x00	; 0
    3712:	f9 4f       	sbci	r31, 0xF9	; 249
    3714:	60 81       	ld	r22, Z
    3716:	71 81       	ldd	r23, Z+1	; 0x01
    3718:	8f e2       	ldi	r24, 0x2F	; 47
    371a:	95 e0       	ldi	r25, 0x05	; 5
    371c:	34 df       	rcall	.-408    	; 0x3586 <_uploadMessageRc>
    371e:	81 11       	cpse	r24, r1
    3720:	14 c0       	rjmp	.+40     	; 0x374a <lora_driver_join+0x46>
    3722:	08 e2       	ldi	r16, 0x28	; 40
    3724:	15 e0       	ldi	r17, 0x05	; 5
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	4d e2       	ldi	r20, 0x2D	; 45
    372c:	50 e0       	ldi	r21, 0x00	; 0
    372e:	61 e6       	ldi	r22, 0x61	; 97
    3730:	73 e1       	ldi	r23, 0x13	; 19
    3732:	80 91 d8 12 	lds	r24, 0x12D8	; 0x8012d8 <_serialReplyBufferHandle>
    3736:	90 91 d9 12 	lds	r25, 0x12D9	; 0x8012d9 <_serialReplyBufferHandle+0x1>
    373a:	0e 94 19 09 	call	0x1232	; 0x1232 <xStreamBufferReceive>
    373e:	88 23       	and	r24, r24
    3740:	21 f0       	breq	.+8      	; 0x374a <lora_driver_join+0x46>
    3742:	81 e6       	ldi	r24, 0x61	; 97
    3744:	93 e1       	ldi	r25, 0x13	; 19
    3746:	aa de       	rcall	.-684    	; 0x349c <_reply2ReturnCode>
    3748:	03 c0       	rjmp	.+6      	; 0x3750 <lora_driver_join+0x4c>
    374a:	81 e6       	ldi	r24, 0x61	; 97
    374c:	93 e1       	ldi	r25, 0x13	; 19
    374e:	a6 de       	rcall	.-692    	; 0x349c <_reply2ReturnCode>
    3750:	1f 91       	pop	r17
    3752:	0f 91       	pop	r16
    3754:	08 95       	ret

00003756 <lora_driver_sendUploadMessage>:
    3756:	0f 93       	push	r16
    3758:	1f 93       	push	r17
    375a:	cf 93       	push	r28
    375c:	df 93       	push	r29
    375e:	1f 92       	push	r1
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	db 01       	movw	r26, r22
    3766:	11 96       	adiw	r26, 0x01	; 1
    3768:	9c 91       	ld	r25, X
    376a:	11 97       	sbiw	r26, 0x01	; 1
    376c:	95 31       	cpi	r25, 0x15	; 21
    376e:	08 f0       	brcs	.+2      	; 0x3772 <lora_driver_sendUploadMessage+0x1c>
    3770:	b4 c0       	rjmp	.+360    	; 0x38da <lora_driver_sendUploadMessage+0x184>
    3772:	99 23       	and	r25, r25
    3774:	81 f1       	breq	.+96     	; 0x37d6 <lora_driver_sendUploadMessage+0x80>
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	70 e0       	ldi	r23, 0x00	; 0
    377a:	27 2f       	mov	r18, r23
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	46 2f       	mov	r20, r22
    3780:	50 e0       	ldi	r21, 0x00	; 0
    3782:	fd 01       	movw	r30, r26
    3784:	e4 0f       	add	r30, r20
    3786:	f5 1f       	adc	r31, r21
    3788:	92 81       	ldd	r25, Z+2	; 0x02
    378a:	92 95       	swap	r25
    378c:	9f 70       	andi	r25, 0x0F	; 15
    378e:	9a 30       	cpi	r25, 0x0A	; 10
    3790:	10 f0       	brcs	.+4      	; 0x3796 <lora_driver_sendUploadMessage+0x40>
    3792:	99 5c       	subi	r25, 0xC9	; 201
    3794:	01 c0       	rjmp	.+2      	; 0x3798 <lora_driver_sendUploadMessage+0x42>
    3796:	90 5d       	subi	r25, 0xD0	; 208
    3798:	f9 01       	movw	r30, r18
    379a:	ee 50       	subi	r30, 0x0E	; 14
    379c:	fd 4e       	sbci	r31, 0xED	; 237
    379e:	90 83       	st	Z, r25
    37a0:	2f 5f       	subi	r18, 0xFF	; 255
    37a2:	3f 4f       	sbci	r19, 0xFF	; 255
    37a4:	fd 01       	movw	r30, r26
    37a6:	e4 0f       	add	r30, r20
    37a8:	f5 1f       	adc	r31, r21
    37aa:	92 81       	ldd	r25, Z+2	; 0x02
    37ac:	9f 70       	andi	r25, 0x0F	; 15
    37ae:	49 2f       	mov	r20, r25
    37b0:	50 e0       	ldi	r21, 0x00	; 0
    37b2:	4a 30       	cpi	r20, 0x0A	; 10
    37b4:	51 05       	cpc	r21, r1
    37b6:	14 f0       	brlt	.+4      	; 0x37bc <lora_driver_sendUploadMessage+0x66>
    37b8:	99 5c       	subi	r25, 0xC9	; 201
    37ba:	01 c0       	rjmp	.+2      	; 0x37be <lora_driver_sendUploadMessage+0x68>
    37bc:	90 5d       	subi	r25, 0xD0	; 208
    37be:	f9 01       	movw	r30, r18
    37c0:	ee 50       	subi	r30, 0x0E	; 14
    37c2:	fd 4e       	sbci	r31, 0xED	; 237
    37c4:	90 83       	st	Z, r25
    37c6:	7e 5f       	subi	r23, 0xFE	; 254
    37c8:	6f 5f       	subi	r22, 0xFF	; 255
    37ca:	11 96       	adiw	r26, 0x01	; 1
    37cc:	9c 91       	ld	r25, X
    37ce:	11 97       	sbiw	r26, 0x01	; 1
    37d0:	69 17       	cp	r22, r25
    37d2:	98 f2       	brcs	.-90     	; 0x377a <lora_driver_sendUploadMessage+0x24>
    37d4:	01 c0       	rjmp	.+2      	; 0x37d8 <lora_driver_sendUploadMessage+0x82>
    37d6:	70 e0       	ldi	r23, 0x00	; 0
    37d8:	e7 2f       	mov	r30, r23
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	ee 50       	subi	r30, 0x0E	; 14
    37de:	fd 4e       	sbci	r31, 0xED	; 237
    37e0:	10 82       	st	Z, r1
    37e2:	4c 91       	ld	r20, X
    37e4:	81 11       	cpse	r24, r1
    37e6:	03 c0       	rjmp	.+6      	; 0x37ee <lora_driver_sendUploadMessage+0x98>
    37e8:	88 e3       	ldi	r24, 0x38	; 56
    37ea:	95 e0       	ldi	r25, 0x05	; 5
    37ec:	02 c0       	rjmp	.+4      	; 0x37f2 <lora_driver_sendUploadMessage+0x9c>
    37ee:	8a e3       	ldi	r24, 0x3A	; 58
    37f0:	95 e0       	ldi	r25, 0x05	; 5
    37f2:	22 ef       	ldi	r18, 0xF2	; 242
    37f4:	32 e1       	ldi	r19, 0x12	; 18
    37f6:	3f 93       	push	r19
    37f8:	2f 93       	push	r18
    37fa:	1f 92       	push	r1
    37fc:	4f 93       	push	r20
    37fe:	9f 93       	push	r25
    3800:	8f 93       	push	r24
    3802:	8e e3       	ldi	r24, 0x3E	; 62
    3804:	95 e0       	ldi	r25, 0x05	; 5
    3806:	9f 93       	push	r25
    3808:	8f 93       	push	r24
    380a:	84 e3       	ldi	r24, 0x34	; 52
    380c:	93 e1       	ldi	r25, 0x13	; 19
    380e:	9f 93       	push	r25
    3810:	8f 93       	push	r24
    3812:	0e 94 4b 28 	call	0x5096	; 0x5096 <sprintf>
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	84 e3       	ldi	r24, 0x34	; 52
    381c:	93 e1       	ldi	r25, 0x13	; 19
    381e:	b3 de       	rcall	.-666    	; 0x3586 <_uploadMessageRc>
    3820:	0f b6       	in	r0, 0x3f	; 63
    3822:	f8 94       	cli
    3824:	de bf       	out	0x3e, r29	; 62
    3826:	0f be       	out	0x3f, r0	; 63
    3828:	cd bf       	out	0x3d, r28	; 61
    382a:	81 11       	cpse	r24, r1
    382c:	59 c0       	rjmp	.+178    	; 0x38e0 <lora_driver_sendUploadMessage+0x18a>
    382e:	08 e2       	ldi	r16, 0x28	; 40
    3830:	15 e0       	ldi	r17, 0x05	; 5
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	4d e2       	ldi	r20, 0x2D	; 45
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	61 e6       	ldi	r22, 0x61	; 97
    383c:	73 e1       	ldi	r23, 0x13	; 19
    383e:	80 91 d8 12 	lds	r24, 0x12D8	; 0x8012d8 <_serialReplyBufferHandle>
    3842:	90 91 d9 12 	lds	r25, 0x12D9	; 0x8012d9 <_serialReplyBufferHandle+0x1>
    3846:	0e 94 19 09 	call	0x1232	; 0x1232 <xStreamBufferReceive>
    384a:	88 23       	and	r24, r24
    384c:	09 f4       	brne	.+2      	; 0x3850 <lora_driver_sendUploadMessage+0xfa>
    384e:	47 c0       	rjmp	.+142    	; 0x38de <lora_driver_sendUploadMessage+0x188>
    3850:	81 e6       	ldi	r24, 0x61	; 97
    3852:	93 e1       	ldi	r25, 0x13	; 19
    3854:	23 de       	rcall	.-954    	; 0x349c <_reply2ReturnCode>
    3856:	8e 30       	cpi	r24, 0x0E	; 14
    3858:	09 f0       	breq	.+2      	; 0x385c <lora_driver_sendUploadMessage+0x106>
    385a:	42 c0       	rjmp	.+132    	; 0x38e0 <lora_driver_sendUploadMessage+0x18a>
    385c:	87 e0       	ldi	r24, 0x07	; 7
    385e:	89 83       	std	Y+1, r24	; 0x01
    3860:	80 91 d6 12 	lds	r24, 0x12D6	; 0x8012d6 <_downlinkMessageBuffer>
    3864:	90 91 d7 12 	lds	r25, 0x12D7	; 0x8012d7 <_downlinkMessageBuffer+0x1>
    3868:	89 2b       	or	r24, r25
    386a:	a9 f1       	breq	.+106    	; 0x38d6 <lora_driver_sendUploadMessage+0x180>
    386c:	be 01       	movw	r22, r28
    386e:	6f 5f       	subi	r22, 0xFF	; 255
    3870:	7f 4f       	sbci	r23, 0xFF	; 255
    3872:	81 e6       	ldi	r24, 0x61	; 97
    3874:	93 e1       	ldi	r25, 0x13	; 19
    3876:	68 d1       	rcall	.+720    	; 0x3b48 <decode_port_no>
    3878:	80 93 dc 12 	sts	0x12DC, r24	; 0x8012dc <_downlinkPayload>
    387c:	e9 81       	ldd	r30, Y+1	; 0x01
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	ef 59       	subi	r30, 0x9F	; 159
    3882:	fc 4e       	sbci	r31, 0xEC	; 236
    3884:	df 01       	movw	r26, r30
    3886:	0d 90       	ld	r0, X+
    3888:	00 20       	and	r0, r0
    388a:	e9 f7       	brne	.-6      	; 0x3886 <lora_driver_sendUploadMessage+0x130>
    388c:	11 97       	sbiw	r26, 0x01	; 1
    388e:	ae 1b       	sub	r26, r30
    3890:	bf 0b       	sbc	r27, r31
    3892:	aa 23       	and	r26, r26
    3894:	91 f0       	breq	.+36     	; 0x38ba <lora_driver_sendUploadMessage+0x164>
    3896:	bb 27       	eor	r27, r27
    3898:	cd 01       	movw	r24, r26
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	9c 01       	movw	r18, r24
    389e:	12 f4       	brpl	.+4      	; 0x38a4 <lora_driver_sendUploadMessage+0x14e>
    38a0:	2f 5f       	subi	r18, 0xFF	; 255
    38a2:	3f 4f       	sbci	r19, 0xFF	; 255
    38a4:	35 95       	asr	r19
    38a6:	27 95       	ror	r18
    38a8:	20 93 dd 12 	sts	0x12DD, r18	; 0x8012dd <_downlinkPayload+0x1>
    38ac:	af 01       	movw	r20, r30
    38ae:	4f 5f       	subi	r20, 0xFF	; 255
    38b0:	5f 4f       	sbci	r21, 0xFF	; 255
    38b2:	64 e1       	ldi	r22, 0x14	; 20
    38b4:	8e ed       	ldi	r24, 0xDE	; 222
    38b6:	92 e1       	ldi	r25, 0x12	; 18
    38b8:	73 d1       	rcall	.+742    	; 0x3ba0 <decode_hexadecimal_string_bytes>
    38ba:	01 e0       	ldi	r16, 0x01	; 1
    38bc:	10 e0       	ldi	r17, 0x00	; 0
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	46 e1       	ldi	r20, 0x16	; 22
    38c4:	50 e0       	ldi	r21, 0x00	; 0
    38c6:	6c ed       	ldi	r22, 0xDC	; 220
    38c8:	72 e1       	ldi	r23, 0x12	; 18
    38ca:	80 91 d6 12 	lds	r24, 0x12D6	; 0x8012d6 <_downlinkMessageBuffer>
    38ce:	90 91 d7 12 	lds	r25, 0x12D7	; 0x8012d7 <_downlinkMessageBuffer+0x1>
    38d2:	0e 94 12 08 	call	0x1024	; 0x1024 <xStreamBufferSend>
    38d6:	8e e0       	ldi	r24, 0x0E	; 14
    38d8:	03 c0       	rjmp	.+6      	; 0x38e0 <lora_driver_sendUploadMessage+0x18a>
    38da:	84 e1       	ldi	r24, 0x14	; 20
    38dc:	01 c0       	rjmp	.+2      	; 0x38e0 <lora_driver_sendUploadMessage+0x18a>
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	0f 90       	pop	r0
    38e2:	df 91       	pop	r29
    38e4:	cf 91       	pop	r28
    38e6:	1f 91       	pop	r17
    38e8:	0f 91       	pop	r16
    38ea:	08 95       	ret

000038ec <lora_driver_setAdaptiveDataRate>:
    38ec:	81 30       	cpi	r24, 0x01	; 1
    38ee:	19 f0       	breq	.+6      	; 0x38f6 <lora_driver_setAdaptiveDataRate+0xa>
    38f0:	6e e4       	ldi	r22, 0x4E	; 78
    38f2:	75 e0       	ldi	r23, 0x05	; 5
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <lora_driver_setAdaptiveDataRate+0xe>
    38f6:	67 e2       	ldi	r22, 0x27	; 39
    38f8:	76 e0       	ldi	r23, 0x06	; 6
    38fa:	82 e5       	ldi	r24, 0x52	; 82
    38fc:	95 e0       	ldi	r25, 0x05	; 5
    38fe:	43 ce       	rjmp	.-890    	; 0x3586 <_uploadMessageRc>
    3900:	08 95       	ret

00003902 <lora_driver_setReceiveDelay>:
    3902:	9f 93       	push	r25
    3904:	8f 93       	push	r24
    3906:	83 e8       	ldi	r24, 0x83	; 131
    3908:	95 e0       	ldi	r25, 0x05	; 5
    390a:	9f 93       	push	r25
    390c:	8f 93       	push	r24
    390e:	84 e3       	ldi	r24, 0x34	; 52
    3910:	93 e1       	ldi	r25, 0x13	; 19
    3912:	9f 93       	push	r25
    3914:	8f 93       	push	r24
    3916:	0e 94 4b 28 	call	0x5096	; 0x5096 <sprintf>
    391a:	60 e0       	ldi	r22, 0x00	; 0
    391c:	70 e0       	ldi	r23, 0x00	; 0
    391e:	84 e3       	ldi	r24, 0x34	; 52
    3920:	93 e1       	ldi	r25, 0x13	; 19
    3922:	31 de       	rcall	.-926    	; 0x3586 <_uploadMessageRc>
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	0f 90       	pop	r0
    3930:	08 95       	ret

00003932 <lora_driver_configureToEu868>:
    3932:	2f 92       	push	r2
    3934:	3f 92       	push	r3
    3936:	4f 92       	push	r4
    3938:	5f 92       	push	r5
    393a:	6f 92       	push	r6
    393c:	7f 92       	push	r7
    393e:	8f 92       	push	r8
    3940:	9f 92       	push	r9
    3942:	af 92       	push	r10
    3944:	bf 92       	push	r11
    3946:	cf 92       	push	r12
    3948:	df 92       	push	r13
    394a:	ef 92       	push	r14
    394c:	ff 92       	push	r15
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	a0 97       	sbiw	r28, 0x20	; 32
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
    3966:	60 eb       	ldi	r22, 0xB0	; 176
    3968:	75 e0       	ldi	r23, 0x05	; 5
    396a:	8c eb       	ldi	r24, 0xBC	; 188
    396c:	95 e0       	ldi	r25, 0x05	; 5
    396e:	3c dd       	rcall	.-1416   	; 0x33e8 <_uploadMessage>
    3970:	95 dd       	rcall	.-1238   	; 0x349c <_reply2ReturnCode>
    3972:	81 11       	cpse	r24, r1
    3974:	a3 c0       	rjmp	.+326    	; 0x3abc <lora_driver_configureToEu868+0x18a>
    3976:	80 e2       	ldi	r24, 0x20	; 32
    3978:	ed e1       	ldi	r30, 0x1D	; 29
    397a:	f2 e0       	ldi	r31, 0x02	; 2
    397c:	de 01       	movw	r26, r28
    397e:	11 96       	adiw	r26, 0x01	; 1
    3980:	01 90       	ld	r0, Z+
    3982:	0d 92       	st	X+, r0
    3984:	8a 95       	dec	r24
    3986:	e1 f7       	brne	.-8      	; 0x3980 <lora_driver_configureToEu868+0x4e>
    3988:	9e 01       	movw	r18, r28
    398a:	2f 5f       	subi	r18, 0xFF	; 255
    398c:	3f 4f       	sbci	r19, 0xFF	; 255
    398e:	69 01       	movw	r12, r18
    3990:	e1 2c       	mov	r14, r1
    3992:	f1 2c       	mov	r15, r1
    3994:	0f 2e       	mov	r0, r31
    3996:	f8 ec       	ldi	r31, 0xC8	; 200
    3998:	af 2e       	mov	r10, r31
    399a:	f5 e0       	ldi	r31, 0x05	; 5
    399c:	bf 2e       	mov	r11, r31
    399e:	f0 2d       	mov	r31, r0
    39a0:	04 e3       	ldi	r16, 0x34	; 52
    39a2:	13 e1       	ldi	r17, 0x13	; 19
    39a4:	0f 2e       	mov	r0, r31
    39a6:	f1 ee       	ldi	r31, 0xE1	; 225
    39a8:	4f 2e       	mov	r4, r31
    39aa:	f5 e0       	ldi	r31, 0x05	; 5
    39ac:	5f 2e       	mov	r5, r31
    39ae:	f0 2d       	mov	r31, r0
    39b0:	0f 2e       	mov	r0, r31
    39b2:	f8 ef       	ldi	r31, 0xF8	; 248
    39b4:	8f 2e       	mov	r8, r31
    39b6:	f5 e0       	ldi	r31, 0x05	; 5
    39b8:	9f 2e       	mov	r9, r31
    39ba:	f0 2d       	mov	r31, r0
    39bc:	0f 2e       	mov	r0, r31
    39be:	f2 e1       	ldi	r31, 0x12	; 18
    39c0:	6f 2e       	mov	r6, r31
    39c2:	f6 e0       	ldi	r31, 0x06	; 6
    39c4:	7f 2e       	mov	r7, r31
    39c6:	f0 2d       	mov	r31, r0
    39c8:	3e 2c       	mov	r3, r14
    39ca:	2f 2c       	mov	r2, r15
    39cc:	ff 92       	push	r15
    39ce:	ef 92       	push	r14
    39d0:	bf 92       	push	r11
    39d2:	af 92       	push	r10
    39d4:	1f 93       	push	r17
    39d6:	0f 93       	push	r16
    39d8:	0e 94 4b 28 	call	0x5096	; 0x5096 <sprintf>
    39dc:	60 e0       	ldi	r22, 0x00	; 0
    39de:	70 e0       	ldi	r23, 0x00	; 0
    39e0:	c8 01       	movw	r24, r16
    39e2:	02 dd       	rcall	.-1532   	; 0x33e8 <_uploadMessage>
    39e4:	5b dd       	rcall	.-1354   	; 0x349c <_reply2ReturnCode>
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	0f 90       	pop	r0
    39f2:	81 11       	cpse	r24, r1
    39f4:	63 c0       	rjmp	.+198    	; 0x3abc <lora_driver_configureToEu868+0x18a>
    39f6:	32 e0       	ldi	r19, 0x02	; 2
    39f8:	3e 15       	cp	r19, r14
    39fa:	e8 f4       	brcc	.+58     	; 0x3a36 <lora_driver_configureToEu868+0x104>
    39fc:	f6 01       	movw	r30, r12
    39fe:	83 81       	ldd	r24, Z+3	; 0x03
    3a00:	8f 93       	push	r24
    3a02:	82 81       	ldd	r24, Z+2	; 0x02
    3a04:	8f 93       	push	r24
    3a06:	81 81       	ldd	r24, Z+1	; 0x01
    3a08:	8f 93       	push	r24
    3a0a:	80 81       	ld	r24, Z
    3a0c:	8f 93       	push	r24
    3a0e:	ff 92       	push	r15
    3a10:	ef 92       	push	r14
    3a12:	5f 92       	push	r5
    3a14:	4f 92       	push	r4
    3a16:	1f 93       	push	r17
    3a18:	0f 93       	push	r16
    3a1a:	0e 94 4b 28 	call	0x5096	; 0x5096 <sprintf>
    3a1e:	60 e0       	ldi	r22, 0x00	; 0
    3a20:	70 e0       	ldi	r23, 0x00	; 0
    3a22:	c8 01       	movw	r24, r16
    3a24:	e1 dc       	rcall	.-1598   	; 0x33e8 <_uploadMessage>
    3a26:	3a dd       	rcall	.-1420   	; 0x349c <_reply2ReturnCode>
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	de bf       	out	0x3e, r29	; 62
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	81 11       	cpse	r24, r1
    3a34:	43 c0       	rjmp	.+134    	; 0x3abc <lora_driver_configureToEu868+0x18a>
    3a36:	2f 92       	push	r2
    3a38:	3f 92       	push	r3
    3a3a:	9f 92       	push	r9
    3a3c:	8f 92       	push	r8
    3a3e:	1f 93       	push	r17
    3a40:	0f 93       	push	r16
    3a42:	0e 94 4b 28 	call	0x5096	; 0x5096 <sprintf>
    3a46:	60 e0       	ldi	r22, 0x00	; 0
    3a48:	70 e0       	ldi	r23, 0x00	; 0
    3a4a:	c8 01       	movw	r24, r16
    3a4c:	cd dc       	rcall	.-1638   	; 0x33e8 <_uploadMessage>
    3a4e:	26 dd       	rcall	.-1460   	; 0x349c <_reply2ReturnCode>
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	81 11       	cpse	r24, r1
    3a5e:	2e c0       	rjmp	.+92     	; 0x3abc <lora_driver_configureToEu868+0x18a>
    3a60:	2f 92       	push	r2
    3a62:	3f 92       	push	r3
    3a64:	7f 92       	push	r7
    3a66:	6f 92       	push	r6
    3a68:	1f 93       	push	r17
    3a6a:	0f 93       	push	r16
    3a6c:	0e 94 4b 28 	call	0x5096	; 0x5096 <sprintf>
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	70 e0       	ldi	r23, 0x00	; 0
    3a74:	c8 01       	movw	r24, r16
    3a76:	b8 dc       	rcall	.-1680   	; 0x33e8 <_uploadMessage>
    3a78:	11 dd       	rcall	.-1502   	; 0x349c <_reply2ReturnCode>
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	81 11       	cpse	r24, r1
    3a88:	19 c0       	rjmp	.+50     	; 0x3abc <lora_driver_configureToEu868+0x18a>
    3a8a:	3f ef       	ldi	r19, 0xFF	; 255
    3a8c:	e3 1a       	sub	r14, r19
    3a8e:	f3 0a       	sbc	r15, r19
    3a90:	84 e0       	ldi	r24, 0x04	; 4
    3a92:	c8 0e       	add	r12, r24
    3a94:	d1 1c       	adc	r13, r1
    3a96:	98 e0       	ldi	r25, 0x08	; 8
    3a98:	e9 16       	cp	r14, r25
    3a9a:	f1 04       	cpc	r15, r1
    3a9c:	09 f0       	breq	.+2      	; 0x3aa0 <lora_driver_configureToEu868+0x16e>
    3a9e:	94 cf       	rjmp	.-216    	; 0x39c8 <lora_driver_configureToEu868+0x96>
    3aa0:	60 e0       	ldi	r22, 0x00	; 0
    3aa2:	70 e0       	ldi	r23, 0x00	; 0
    3aa4:	8a e2       	ldi	r24, 0x2A	; 42
    3aa6:	96 e0       	ldi	r25, 0x06	; 6
    3aa8:	9f dc       	rcall	.-1730   	; 0x33e8 <_uploadMessage>
    3aaa:	f8 dc       	rcall	.-1552   	; 0x349c <_reply2ReturnCode>
    3aac:	81 11       	cpse	r24, r1
    3aae:	06 c0       	rjmp	.+12     	; 0x3abc <lora_driver_configureToEu868+0x18a>
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	70 e0       	ldi	r23, 0x00	; 0
    3ab4:	8b e3       	ldi	r24, 0x3B	; 59
    3ab6:	96 e0       	ldi	r25, 0x06	; 6
    3ab8:	97 dc       	rcall	.-1746   	; 0x33e8 <_uploadMessage>
    3aba:	f0 dc       	rcall	.-1568   	; 0x349c <_reply2ReturnCode>
    3abc:	a0 96       	adiw	r28, 0x20	; 32
    3abe:	0f b6       	in	r0, 0x3f	; 63
    3ac0:	f8 94       	cli
    3ac2:	de bf       	out	0x3e, r29	; 62
    3ac4:	0f be       	out	0x3f, r0	; 63
    3ac6:	cd bf       	out	0x3d, r28	; 61
    3ac8:	df 91       	pop	r29
    3aca:	cf 91       	pop	r28
    3acc:	1f 91       	pop	r17
    3ace:	0f 91       	pop	r16
    3ad0:	ff 90       	pop	r15
    3ad2:	ef 90       	pop	r14
    3ad4:	df 90       	pop	r13
    3ad6:	cf 90       	pop	r12
    3ad8:	bf 90       	pop	r11
    3ada:	af 90       	pop	r10
    3adc:	9f 90       	pop	r9
    3ade:	8f 90       	pop	r8
    3ae0:	7f 90       	pop	r7
    3ae2:	6f 90       	pop	r6
    3ae4:	5f 90       	pop	r5
    3ae6:	4f 90       	pop	r4
    3ae8:	3f 90       	pop	r3
    3aea:	2f 90       	pop	r2
    3aec:	08 95       	ret

00003aee <lora_driver_setOtaaIdentity>:
    3aee:	ef 92       	push	r14
    3af0:	ff 92       	push	r15
    3af2:	0f 93       	push	r16
    3af4:	1f 93       	push	r17
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	ec 01       	movw	r28, r24
    3afc:	8b 01       	movw	r16, r22
    3afe:	7a 01       	movw	r14, r20
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	f4 de       	rcall	.-536    	; 0x38ec <lora_driver_setAdaptiveDataRate>
    3b04:	81 11       	cpse	r24, r1
    3b06:	0d c0       	rjmp	.+26     	; 0x3b22 <lora_driver_setOtaaIdentity+0x34>
    3b08:	ce 01       	movw	r24, r28
    3b0a:	d4 dd       	rcall	.-1112   	; 0x36b4 <lora_driver_setApplicationIdentifier>
    3b0c:	81 11       	cpse	r24, r1
    3b0e:	09 c0       	rjmp	.+18     	; 0x3b22 <lora_driver_setOtaaIdentity+0x34>
    3b10:	c8 01       	movw	r24, r16
    3b12:	e1 dd       	rcall	.-1086   	; 0x36d6 <lora_driver_setApplicationKey>
    3b14:	81 11       	cpse	r24, r1
    3b16:	05 c0       	rjmp	.+10     	; 0x3b22 <lora_driver_setOtaaIdentity+0x34>
    3b18:	c7 01       	movw	r24, r14
    3b1a:	bb dd       	rcall	.-1162   	; 0x3692 <lora_driver_setDeviceIdentifier>
    3b1c:	81 11       	cpse	r24, r1
    3b1e:	01 c0       	rjmp	.+2      	; 0x3b22 <lora_driver_setOtaaIdentity+0x34>
    3b20:	eb dd       	rcall	.-1066   	; 0x36f8 <lora_driver_saveMac>
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	1f 91       	pop	r17
    3b28:	0f 91       	pop	r16
    3b2a:	ff 90       	pop	r15
    3b2c:	ef 90       	pop	r14
    3b2e:	08 95       	ret

00003b30 <lora_driver_mapReturnCodeToText>:
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	fc 01       	movw	r30, r24
    3b34:	ee 0f       	add	r30, r30
    3b36:	ff 1f       	adc	r31, r31
    3b38:	8e 0f       	add	r24, r30
    3b3a:	9f 1f       	adc	r25, r31
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	ec 5f       	subi	r30, 0xFC	; 252
    3b40:	f8 4f       	sbci	r31, 0xF8	; 248
    3b42:	81 81       	ldd	r24, Z+1	; 0x01
    3b44:	92 81       	ldd	r25, Z+2	; 0x02
    3b46:	08 95       	ret

00003b48 <decode_port_no>:
    3b48:	dc 01       	movw	r26, r24
    3b4a:	00 97       	sbiw	r24, 0x00	; 0
    3b4c:	29 f1       	breq	.+74     	; 0x3b98 <decode_port_no+0x50>
    3b4e:	fb 01       	movw	r30, r22
    3b50:	20 81       	ld	r18, Z
    3b52:	fc 01       	movw	r30, r24
    3b54:	01 90       	ld	r0, Z+
    3b56:	00 20       	and	r0, r0
    3b58:	e9 f7       	brne	.-6      	; 0x3b54 <decode_port_no+0xc>
    3b5a:	31 97       	sbiw	r30, 0x01	; 1
    3b5c:	e8 1b       	sub	r30, r24
    3b5e:	f9 0b       	sbc	r31, r25
    3b60:	82 2f       	mov	r24, r18
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	e8 17       	cp	r30, r24
    3b66:	f9 07       	cpc	r31, r25
    3b68:	c8 f0       	brcs	.+50     	; 0x3b9c <decode_port_no+0x54>
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	08 c0       	rjmp	.+16     	; 0x3b7e <decode_port_no+0x36>
    3b6e:	88 0f       	add	r24, r24
    3b70:	38 2f       	mov	r19, r24
    3b72:	33 0f       	add	r19, r19
    3b74:	33 0f       	add	r19, r19
    3b76:	83 0f       	add	r24, r19
    3b78:	80 53       	subi	r24, 0x30	; 48
    3b7a:	89 0f       	add	r24, r25
    3b7c:	2f 5f       	subi	r18, 0xFF	; 255
    3b7e:	fd 01       	movw	r30, r26
    3b80:	e2 0f       	add	r30, r18
    3b82:	f1 1d       	adc	r31, r1
    3b84:	90 81       	ld	r25, Z
    3b86:	30 ed       	ldi	r19, 0xD0	; 208
    3b88:	39 0f       	add	r19, r25
    3b8a:	3a 30       	cpi	r19, 0x0A	; 10
    3b8c:	10 f4       	brcc	.+4      	; 0x3b92 <decode_port_no+0x4a>
    3b8e:	91 11       	cpse	r25, r1
    3b90:	ee cf       	rjmp	.-36     	; 0x3b6e <decode_port_no+0x26>
    3b92:	fb 01       	movw	r30, r22
    3b94:	20 83       	st	Z, r18
    3b96:	08 95       	ret
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	08 95       	ret
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	08 95       	ret

00003ba0 <decode_hexadecimal_string_bytes>:
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
    3ba8:	dc 01       	movw	r26, r24
    3baa:	ea 01       	movw	r28, r20
    3bac:	20 97       	sbiw	r28, 0x00	; 0
    3bae:	e1 f1       	breq	.+120    	; 0x3c28 <decode_hexadecimal_string_bytes+0x88>
    3bb0:	fa 01       	movw	r30, r20
    3bb2:	01 90       	ld	r0, Z+
    3bb4:	00 20       	and	r0, r0
    3bb6:	e9 f7       	brne	.-6      	; 0x3bb2 <decode_hexadecimal_string_bytes+0x12>
    3bb8:	31 97       	sbiw	r30, 0x01	; 1
    3bba:	e4 1b       	sub	r30, r20
    3bbc:	f5 0b       	sbc	r31, r21
    3bbe:	32 97       	sbiw	r30, 0x02	; 2
    3bc0:	10 f5       	brcc	.+68     	; 0x3c06 <decode_hexadecimal_string_bytes+0x66>
    3bc2:	32 c0       	rjmp	.+100    	; 0x3c28 <decode_hexadecimal_string_bytes+0x88>
    3bc4:	8d 01       	movw	r16, r26
    3bc6:	04 0f       	add	r16, r20
    3bc8:	15 1f       	adc	r17, r21
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	ae 01       	movw	r20, r28
    3bce:	42 0f       	add	r20, r18
    3bd0:	53 1f       	adc	r21, r19
    3bd2:	fa 01       	movw	r30, r20
    3bd4:	90 81       	ld	r25, Z
    3bd6:	91 34       	cpi	r25, 0x41	; 65
    3bd8:	28 f0       	brcs	.+10     	; 0x3be4 <decode_hexadecimal_string_bytes+0x44>
    3bda:	97 53       	subi	r25, 0x37	; 55
    3bdc:	59 2f       	mov	r21, r25
    3bde:	52 95       	swap	r21
    3be0:	50 7f       	andi	r21, 0xF0	; 240
    3be2:	03 c0       	rjmp	.+6      	; 0x3bea <decode_hexadecimal_string_bytes+0x4a>
    3be4:	59 2f       	mov	r21, r25
    3be6:	52 95       	swap	r21
    3be8:	50 7f       	andi	r21, 0xF0	; 240
    3bea:	2c 0f       	add	r18, r28
    3bec:	3d 1f       	adc	r19, r29
    3bee:	f9 01       	movw	r30, r18
    3bf0:	91 81       	ldd	r25, Z+1	; 0x01
    3bf2:	91 34       	cpi	r25, 0x41	; 65
    3bf4:	10 f0       	brcs	.+4      	; 0x3bfa <decode_hexadecimal_string_bytes+0x5a>
    3bf6:	97 53       	subi	r25, 0x37	; 55
    3bf8:	01 c0       	rjmp	.+2      	; 0x3bfc <decode_hexadecimal_string_bytes+0x5c>
    3bfa:	90 53       	subi	r25, 0x30	; 48
    3bfc:	95 0f       	add	r25, r21
    3bfe:	f8 01       	movw	r30, r16
    3c00:	90 83       	st	Z, r25
    3c02:	8f 5f       	subi	r24, 0xFF	; 255
    3c04:	01 c0       	rjmp	.+2      	; 0x3c08 <decode_hexadecimal_string_bytes+0x68>
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	28 2f       	mov	r18, r24
    3c0a:	22 0f       	add	r18, r18
    3c0c:	48 2f       	mov	r20, r24
    3c0e:	50 e0       	ldi	r21, 0x00	; 0
    3c10:	fe 01       	movw	r30, r28
    3c12:	01 90       	ld	r0, Z+
    3c14:	00 20       	and	r0, r0
    3c16:	e9 f7       	brne	.-6      	; 0x3c12 <decode_hexadecimal_string_bytes+0x72>
    3c18:	31 97       	sbiw	r30, 0x01	; 1
    3c1a:	ec 1b       	sub	r30, r28
    3c1c:	fd 0b       	sbc	r31, r29
    3c1e:	4e 17       	cp	r20, r30
    3c20:	5f 07       	cpc	r21, r31
    3c22:	10 f4       	brcc	.+4      	; 0x3c28 <decode_hexadecimal_string_bytes+0x88>
    3c24:	86 13       	cpse	r24, r22
    3c26:	ce cf       	rjmp	.-100    	; 0x3bc4 <decode_hexadecimal_string_bytes+0x24>
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	1f 91       	pop	r17
    3c2e:	0f 91       	pop	r16
    3c30:	08 95       	ret

00003c32 <_serialCallBack>:
    3c32:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <crc_sum.1945>
    3c36:	86 0f       	add	r24, r22
    3c38:	80 93 91 13 	sts	0x1391, r24	; 0x801391 <crc_sum.1945>
    3c3c:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <_mh_state>
    3c40:	91 30       	cpi	r25, 0x01	; 1
    3c42:	79 f0       	breq	.+30     	; 0x3c62 <_serialCallBack+0x30>
    3c44:	28 f0       	brcs	.+10     	; 0x3c50 <_serialCallBack+0x1e>
    3c46:	92 30       	cpi	r25, 0x02	; 2
    3c48:	a9 f0       	breq	.+42     	; 0x3c74 <_serialCallBack+0x42>
    3c4a:	93 30       	cpi	r25, 0x03	; 3
    3c4c:	19 f1       	breq	.+70     	; 0x3c94 <_serialCallBack+0x62>
    3c4e:	08 95       	ret
    3c50:	6f 3f       	cpi	r22, 0xFF	; 255
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <_serialCallBack+0x24>
    3c54:	48 c0       	rjmp	.+144    	; 0x3ce6 <_serialCallBack+0xb4>
    3c56:	10 92 91 13 	sts	0x1391, r1	; 0x801391 <crc_sum.1945>
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	80 93 94 13 	sts	0x1394, r24	; 0x801394 <_mh_state>
    3c60:	08 95       	ret
    3c62:	66 38       	cpi	r22, 0x86	; 134
    3c64:	09 f0       	breq	.+2      	; 0x3c68 <_serialCallBack+0x36>
    3c66:	3f c0       	rjmp	.+126    	; 0x3ce6 <_serialCallBack+0xb4>
    3c68:	10 92 90 13 	sts	0x1390, r1	; 0x801390 <inDex.1943>
    3c6c:	82 e0       	ldi	r24, 0x02	; 2
    3c6e:	80 93 94 13 	sts	0x1394, r24	; 0x801394 <_mh_state>
    3c72:	08 95       	ret
    3c74:	e0 91 90 13 	lds	r30, 0x1390	; 0x801390 <inDex.1943>
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	8e 0f       	add	r24, r30
    3c7c:	80 93 90 13 	sts	0x1390, r24	; 0x801390 <inDex.1943>
    3c80:	f0 e0       	ldi	r31, 0x00	; 0
    3c82:	e2 57       	subi	r30, 0x72	; 114
    3c84:	fc 4e       	sbci	r31, 0xEC	; 236
    3c86:	60 83       	st	Z, r22
    3c88:	82 30       	cpi	r24, 0x02	; 2
    3c8a:	69 f5       	brne	.+90     	; 0x3ce6 <_serialCallBack+0xb4>
    3c8c:	83 e0       	ldi	r24, 0x03	; 3
    3c8e:	80 93 94 13 	sts	0x1394, r24	; 0x801394 <_mh_state>
    3c92:	08 95       	ret
    3c94:	90 91 90 13 	lds	r25, 0x1390	; 0x801390 <inDex.1943>
    3c98:	21 e0       	ldi	r18, 0x01	; 1
    3c9a:	29 0f       	add	r18, r25
    3c9c:	20 93 90 13 	sts	0x1390, r18	; 0x801390 <inDex.1943>
    3ca0:	96 30       	cpi	r25, 0x06	; 6
    3ca2:	09 f5       	brne	.+66     	; 0x3ce6 <_serialCallBack+0xb4>
    3ca4:	81 11       	cpse	r24, r1
    3ca6:	0e c0       	rjmp	.+28     	; 0x3cc4 <_serialCallBack+0x92>
    3ca8:	ee e8       	ldi	r30, 0x8E	; 142
    3caa:	f3 e1       	ldi	r31, 0x13	; 19
    3cac:	80 81       	ld	r24, Z
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	98 2f       	mov	r25, r24
    3cb2:	88 27       	eor	r24, r24
    3cb4:	21 81       	ldd	r18, Z+1	; 0x01
    3cb6:	82 0f       	add	r24, r18
    3cb8:	91 1d       	adc	r25, r1
    3cba:	90 93 96 13 	sts	0x1396, r25	; 0x801396 <_ppm+0x1>
    3cbe:	80 93 95 13 	sts	0x1395, r24	; 0x801395 <_ppm>
    3cc2:	04 c0       	rjmp	.+8      	; 0x3ccc <_serialCallBack+0x9a>
    3cc4:	10 92 96 13 	sts	0x1396, r1	; 0x801396 <_ppm+0x1>
    3cc8:	10 92 95 13 	sts	0x1395, r1	; 0x801395 <_ppm>
    3ccc:	10 92 94 13 	sts	0x1394, r1	; 0x801394 <_mh_state>
    3cd0:	e0 91 92 13 	lds	r30, 0x1392	; 0x801392 <_appCallBack>
    3cd4:	f0 91 93 13 	lds	r31, 0x1393	; 0x801393 <_appCallBack+0x1>
    3cd8:	30 97       	sbiw	r30, 0x00	; 0
    3cda:	29 f0       	breq	.+10     	; 0x3ce6 <_serialCallBack+0xb4>
    3cdc:	80 91 95 13 	lds	r24, 0x1395	; 0x801395 <_ppm>
    3ce0:	90 91 96 13 	lds	r25, 0x1396	; 0x801396 <_ppm+0x1>
    3ce4:	19 95       	eicall
    3ce6:	08 95       	ret

00003ce8 <mh_z19_initialise>:
    3ce8:	8f 92       	push	r8
    3cea:	9f 92       	push	r9
    3cec:	af 92       	push	r10
    3cee:	cf 92       	push	r12
    3cf0:	ef 92       	push	r14
    3cf2:	0f 93       	push	r16
    3cf4:	0f 2e       	mov	r0, r31
    3cf6:	f9 e1       	ldi	r31, 0x19	; 25
    3cf8:	8f 2e       	mov	r8, r31
    3cfa:	fe e1       	ldi	r31, 0x1E	; 30
    3cfc:	9f 2e       	mov	r9, r31
    3cfe:	f0 2d       	mov	r31, r0
    3d00:	68 94       	set
    3d02:	aa 24       	eor	r10, r10
    3d04:	a4 f8       	bld	r10, 4
    3d06:	68 94       	set
    3d08:	cc 24       	eor	r12, r12
    3d0a:	c4 f8       	bld	r12, 4
    3d0c:	e1 2c       	mov	r14, r1
    3d0e:	00 e0       	ldi	r16, 0x00	; 0
    3d10:	23 e0       	ldi	r18, 0x03	; 3
    3d12:	40 e8       	ldi	r20, 0x80	; 128
    3d14:	55 e2       	ldi	r21, 0x25	; 37
    3d16:	60 e0       	ldi	r22, 0x00	; 0
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	3f d0       	rcall	.+126    	; 0x3d9a <serial_create>
    3d1c:	90 93 98 13 	sts	0x1398, r25	; 0x801398 <_serial+0x1>
    3d20:	80 93 97 13 	sts	0x1397, r24	; 0x801397 <_serial>
    3d24:	0f 91       	pop	r16
    3d26:	ef 90       	pop	r14
    3d28:	cf 90       	pop	r12
    3d2a:	af 90       	pop	r10
    3d2c:	9f 90       	pop	r9
    3d2e:	8f 90       	pop	r8
    3d30:	08 95       	ret

00003d32 <mh_z19_injectCallBack>:
    3d32:	90 93 93 13 	sts	0x1393, r25	; 0x801393 <_appCallBack+0x1>
    3d36:	80 93 92 13 	sts	0x1392, r24	; 0x801392 <_appCallBack>
    3d3a:	08 95       	ret

00003d3c <mh_z19_takeMeassuring>:
    3d3c:	cf 93       	push	r28
    3d3e:	df 93       	push	r29
    3d40:	cd b7       	in	r28, 0x3d	; 61
    3d42:	de b7       	in	r29, 0x3e	; 62
    3d44:	29 97       	sbiw	r28, 0x09	; 9
    3d46:	0f b6       	in	r0, 0x3f	; 63
    3d48:	f8 94       	cli
    3d4a:	de bf       	out	0x3e, r29	; 62
    3d4c:	0f be       	out	0x3f, r0	; 63
    3d4e:	cd bf       	out	0x3d, r28	; 61
    3d50:	89 e0       	ldi	r24, 0x09	; 9
    3d52:	ed e3       	ldi	r30, 0x3D	; 61
    3d54:	f2 e0       	ldi	r31, 0x02	; 2
    3d56:	9e 01       	movw	r18, r28
    3d58:	2f 5f       	subi	r18, 0xFF	; 255
    3d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5c:	d9 01       	movw	r26, r18
    3d5e:	01 90       	ld	r0, Z+
    3d60:	0d 92       	st	X+, r0
    3d62:	8a 95       	dec	r24
    3d64:	e1 f7       	brne	.-8      	; 0x3d5e <mh_z19_takeMeassuring+0x22>
    3d66:	10 92 96 13 	sts	0x1396, r1	; 0x801396 <_ppm+0x1>
    3d6a:	10 92 95 13 	sts	0x1395, r1	; 0x801395 <_ppm>
    3d6e:	80 91 97 13 	lds	r24, 0x1397	; 0x801397 <_serial>
    3d72:	90 91 98 13 	lds	r25, 0x1398	; 0x801398 <_serial+0x1>
    3d76:	00 97       	sbiw	r24, 0x00	; 0
    3d78:	31 f0       	breq	.+12     	; 0x3d86 <mh_z19_takeMeassuring+0x4a>
    3d7a:	42 2f       	mov	r20, r18
    3d7c:	53 2f       	mov	r21, r19
    3d7e:	69 e0       	ldi	r22, 0x09	; 9
    3d80:	d3 d0       	rcall	.+422    	; 0x3f28 <serial_sendBytes>
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	01 c0       	rjmp	.+2      	; 0x3d88 <mh_z19_takeMeassuring+0x4c>
    3d86:	82 e0       	ldi	r24, 0x02	; 2
    3d88:	29 96       	adiw	r28, 0x09	; 9
    3d8a:	0f b6       	in	r0, 0x3f	; 63
    3d8c:	f8 94       	cli
    3d8e:	de bf       	out	0x3e, r29	; 62
    3d90:	0f be       	out	0x3f, r0	; 63
    3d92:	cd bf       	out	0x3d, r28	; 61
    3d94:	df 91       	pop	r29
    3d96:	cf 91       	pop	r28
    3d98:	08 95       	ret

00003d9a <serial_create>:
    3d9a:	2f 92       	push	r2
    3d9c:	3f 92       	push	r3
    3d9e:	4f 92       	push	r4
    3da0:	5f 92       	push	r5
    3da2:	6f 92       	push	r6
    3da4:	7f 92       	push	r7
    3da6:	8f 92       	push	r8
    3da8:	9f 92       	push	r9
    3daa:	af 92       	push	r10
    3dac:	cf 92       	push	r12
    3dae:	ef 92       	push	r14
    3db0:	ff 92       	push	r15
    3db2:	0f 93       	push	r16
    3db4:	1f 93       	push	r17
    3db6:	cf 93       	push	r28
    3db8:	df 93       	push	r29
    3dba:	cd b7       	in	r28, 0x3d	; 61
    3dbc:	de b7       	in	r29, 0x3e	; 62
    3dbe:	f8 2e       	mov	r15, r24
    3dc0:	2a 01       	movw	r4, r20
    3dc2:	3b 01       	movw	r6, r22
    3dc4:	88 e0       	ldi	r24, 0x08	; 8
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	9f d7       	rcall	.+3902   	; 0x4d08 <malloc>
    3dca:	8c 01       	movw	r16, r24
    3dcc:	8f 2d       	mov	r24, r15
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	ee 0f       	add	r30, r30
    3dd4:	ff 1f       	adc	r31, r31
    3dd6:	e7 56       	subi	r30, 0x67	; 103
    3dd8:	fc 4e       	sbci	r31, 0xEC	; 236
    3dda:	11 83       	std	Z+1, r17	; 0x01
    3ddc:	00 83       	st	Z, r16
    3dde:	01 15       	cp	r16, r1
    3de0:	11 05       	cpc	r17, r1
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <serial_create+0x4c>
    3de4:	64 c0       	rjmp	.+200    	; 0x3eae <serial_create+0x114>
    3de6:	88 0f       	add	r24, r24
    3de8:	99 1f       	adc	r25, r25
    3dea:	fc 01       	movw	r30, r24
    3dec:	e9 5f       	subi	r30, 0xF9	; 249
    3dee:	fd 4f       	sbci	r31, 0xFD	; 253
    3df0:	80 81       	ld	r24, Z
    3df2:	91 81       	ldd	r25, Z+1	; 0x01
    3df4:	d8 01       	movw	r26, r16
    3df6:	8d 93       	st	X+, r24
    3df8:	9c 93       	st	X, r25
    3dfa:	6c 2d       	mov	r22, r12
    3dfc:	70 e0       	ldi	r23, 0x00	; 0
    3dfe:	84 e0       	ldi	r24, 0x04	; 4
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	68 d7       	rcall	.+3792   	; 0x4cd4 <calloc>
    3e04:	1c 01       	movw	r2, r24
    3e06:	61 e0       	ldi	r22, 0x01	; 1
    3e08:	70 e0       	ldi	r23, 0x00	; 0
    3e0a:	86 e0       	ldi	r24, 0x06	; 6
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	62 d7       	rcall	.+3780   	; 0x4cd4 <calloc>
    3e10:	7c 01       	movw	r14, r24
    3e12:	4c 2d       	mov	r20, r12
    3e14:	b1 01       	movw	r22, r2
    3e16:	50 d5       	rcall	.+2720   	; 0x48b8 <fifo_init>
    3e18:	f8 01       	movw	r30, r16
    3e1a:	f5 82       	std	Z+5, r15	; 0x05
    3e1c:	e4 82       	std	Z+4, r14	; 0x04
    3e1e:	6a 2d       	mov	r22, r10
    3e20:	70 e0       	ldi	r23, 0x00	; 0
    3e22:	84 e0       	ldi	r24, 0x04	; 4
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	56 d7       	rcall	.+3756   	; 0x4cd4 <calloc>
    3e28:	1c 01       	movw	r2, r24
    3e2a:	61 e0       	ldi	r22, 0x01	; 1
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	86 e0       	ldi	r24, 0x06	; 6
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	50 d7       	rcall	.+3744   	; 0x4cd4 <calloc>
    3e34:	7c 01       	movw	r14, r24
    3e36:	4a 2d       	mov	r20, r10
    3e38:	b1 01       	movw	r22, r2
    3e3a:	3e d5       	rcall	.+2684   	; 0x48b8 <fifo_init>
    3e3c:	d8 01       	movw	r26, r16
    3e3e:	13 96       	adiw	r26, 0x03	; 3
    3e40:	fc 92       	st	X, r15
    3e42:	ee 92       	st	-X, r14
    3e44:	12 97       	sbiw	r26, 0x02	; 2
    3e46:	17 96       	adiw	r26, 0x07	; 7
    3e48:	9c 92       	st	X, r9
    3e4a:	8e 92       	st	-X, r8
    3e4c:	16 97       	sbiw	r26, 0x06	; 6
    3e4e:	ff b6       	in	r15, 0x3f	; 63
    3e50:	f8 94       	cli
    3e52:	ed 91       	ld	r30, X+
    3e54:	fc 91       	ld	r31, X
    3e56:	11 97       	sbiw	r26, 0x01	; 1
    3e58:	36 97       	sbiw	r30, 0x06	; 6
    3e5a:	80 81       	ld	r24, Z
    3e5c:	82 60       	ori	r24, 0x02	; 2
    3e5e:	80 83       	st	Z, r24
    3e60:	8d 90       	ld	r8, X+
    3e62:	9c 90       	ld	r9, X
    3e64:	c3 01       	movw	r24, r6
    3e66:	b2 01       	movw	r22, r4
    3e68:	3c d6       	rcall	.+3192   	; 0x4ae2 <__floatunsisf>
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    3e70:	51 e4       	ldi	r21, 0x41	; 65
    3e72:	c5 d6       	rcall	.+3466   	; 0x4bfe <__mulsf3>
    3e74:	9b 01       	movw	r18, r22
    3e76:	ac 01       	movw	r20, r24
    3e78:	60 e0       	ldi	r22, 0x00	; 0
    3e7a:	74 e2       	ldi	r23, 0x24	; 36
    3e7c:	84 e7       	ldi	r24, 0x74	; 116
    3e7e:	9b e4       	ldi	r25, 0x4B	; 75
    3e80:	9c d5       	rcall	.+2872   	; 0x49ba <__divsf3>
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e8       	ldi	r20, 0x80	; 128
    3e88:	5f e3       	ldi	r21, 0x3F	; 63
    3e8a:	32 d5       	rcall	.+2660   	; 0x48f0 <__subsf3>
    3e8c:	fe d5       	rcall	.+3068   	; 0x4a8a <__fixunssfsi>
    3e8e:	f4 01       	movw	r30, r8
    3e90:	32 97       	sbiw	r30, 0x02	; 2
    3e92:	60 83       	st	Z, r22
    3e94:	d8 01       	movw	r26, r16
    3e96:	ed 91       	ld	r30, X+
    3e98:	fc 91       	ld	r31, X
    3e9a:	11 97       	sbiw	r26, 0x01	; 1
    3e9c:	35 97       	sbiw	r30, 0x05	; 5
    3e9e:	88 e9       	ldi	r24, 0x98	; 152
    3ea0:	80 83       	st	Z, r24
    3ea2:	ed 91       	ld	r30, X+
    3ea4:	fc 91       	ld	r31, X
    3ea6:	34 97       	sbiw	r30, 0x04	; 4
    3ea8:	86 e0       	ldi	r24, 0x06	; 6
    3eaa:	80 83       	st	Z, r24
    3eac:	ff be       	out	0x3f, r15	; 63
    3eae:	c8 01       	movw	r24, r16
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28
    3eb4:	1f 91       	pop	r17
    3eb6:	0f 91       	pop	r16
    3eb8:	ff 90       	pop	r15
    3eba:	ef 90       	pop	r14
    3ebc:	cf 90       	pop	r12
    3ebe:	af 90       	pop	r10
    3ec0:	9f 90       	pop	r9
    3ec2:	8f 90       	pop	r8
    3ec4:	7f 90       	pop	r7
    3ec6:	6f 90       	pop	r6
    3ec8:	5f 90       	pop	r5
    3eca:	4f 90       	pop	r4
    3ecc:	3f 90       	pop	r3
    3ece:	2f 90       	pop	r2
    3ed0:	08 95       	ret

00003ed2 <serial_sendByte>:
    3ed2:	cf 93       	push	r28
    3ed4:	df 93       	push	r29
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	89 2b       	or	r24, r25
    3eda:	01 f1       	breq	.+64     	; 0x3f1c <serial_sendByte+0x4a>
    3edc:	12 96       	adiw	r26, 0x02	; 2
    3ede:	ed 91       	ld	r30, X+
    3ee0:	fc 91       	ld	r31, X
    3ee2:	13 97       	sbiw	r26, 0x03	; 3
    3ee4:	93 81       	ldd	r25, Z+3	; 0x03
    3ee6:	82 81       	ldd	r24, Z+2	; 0x02
    3ee8:	25 81       	ldd	r18, Z+5	; 0x05
    3eea:	98 1b       	sub	r25, r24
    3eec:	92 23       	and	r25, r18
    3eee:	84 81       	ldd	r24, Z+4	; 0x04
    3ef0:	98 17       	cp	r25, r24
    3ef2:	b1 f0       	breq	.+44     	; 0x3f20 <serial_sendByte+0x4e>
    3ef4:	83 81       	ldd	r24, Z+3	; 0x03
    3ef6:	26 95       	lsr	r18
    3ef8:	28 23       	and	r18, r24
    3efa:	c0 81       	ld	r28, Z
    3efc:	d1 81       	ldd	r29, Z+1	; 0x01
    3efe:	c2 0f       	add	r28, r18
    3f00:	d1 1d       	adc	r29, r1
    3f02:	68 83       	st	Y, r22
    3f04:	8f 5f       	subi	r24, 0xFF	; 255
    3f06:	95 81       	ldd	r25, Z+5	; 0x05
    3f08:	89 23       	and	r24, r25
    3f0a:	83 83       	std	Z+3, r24	; 0x03
    3f0c:	ed 91       	ld	r30, X+
    3f0e:	fc 91       	ld	r31, X
    3f10:	35 97       	sbiw	r30, 0x05	; 5
    3f12:	80 81       	ld	r24, Z
    3f14:	80 62       	ori	r24, 0x20	; 32
    3f16:	80 83       	st	Z, r24
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	03 c0       	rjmp	.+6      	; 0x3f22 <serial_sendByte+0x50>
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	01 c0       	rjmp	.+2      	; 0x3f22 <serial_sendByte+0x50>
    3f20:	82 e0       	ldi	r24, 0x02	; 2
    3f22:	df 91       	pop	r29
    3f24:	cf 91       	pop	r28
    3f26:	08 95       	ret

00003f28 <serial_sendBytes>:
    3f28:	ef 92       	push	r14
    3f2a:	ff 92       	push	r15
    3f2c:	0f 93       	push	r16
    3f2e:	1f 93       	push	r17
    3f30:	cf 93       	push	r28
    3f32:	df 93       	push	r29
    3f34:	7c 01       	movw	r14, r24
    3f36:	00 97       	sbiw	r24, 0x00	; 0
    3f38:	09 f4       	brne	.+2      	; 0x3f3c <serial_sendBytes+0x14>
    3f3a:	41 c0       	rjmp	.+130    	; 0x3fbe <serial_sendBytes+0x96>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	12 96       	adiw	r26, 0x02	; 2
    3f40:	ed 91       	ld	r30, X+
    3f42:	fc 91       	ld	r31, X
    3f44:	13 97       	sbiw	r26, 0x03	; 3
    3f46:	93 81       	ldd	r25, Z+3	; 0x03
    3f48:	82 81       	ldd	r24, Z+2	; 0x02
    3f4a:	98 1b       	sub	r25, r24
    3f4c:	85 81       	ldd	r24, Z+5	; 0x05
    3f4e:	98 23       	and	r25, r24
    3f50:	84 81       	ldd	r24, Z+4	; 0x04
    3f52:	89 1b       	sub	r24, r25
    3f54:	86 17       	cp	r24, r22
    3f56:	a8 f1       	brcs	.+106    	; 0x3fc2 <serial_sendBytes+0x9a>
    3f58:	66 23       	and	r22, r22
    3f5a:	41 f1       	breq	.+80     	; 0x3fac <serial_sendBytes+0x84>
    3f5c:	84 2f       	mov	r24, r20
    3f5e:	95 2f       	mov	r25, r21
    3f60:	dc 01       	movw	r26, r24
    3f62:	61 50       	subi	r22, 0x01	; 1
    3f64:	46 2f       	mov	r20, r22
    3f66:	50 e0       	ldi	r21, 0x00	; 0
    3f68:	4f 5f       	subi	r20, 0xFF	; 255
    3f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f6c:	48 0f       	add	r20, r24
    3f6e:	59 1f       	adc	r21, r25
    3f70:	e7 01       	movw	r28, r14
    3f72:	ea 81       	ldd	r30, Y+2	; 0x02
    3f74:	fb 81       	ldd	r31, Y+3	; 0x03
    3f76:	93 81       	ldd	r25, Z+3	; 0x03
    3f78:	82 81       	ldd	r24, Z+2	; 0x02
    3f7a:	25 81       	ldd	r18, Z+5	; 0x05
    3f7c:	98 1b       	sub	r25, r24
    3f7e:	92 23       	and	r25, r18
    3f80:	84 81       	ldd	r24, Z+4	; 0x04
    3f82:	98 17       	cp	r25, r24
    3f84:	79 f0       	breq	.+30     	; 0x3fa4 <serial_sendBytes+0x7c>
    3f86:	8c 91       	ld	r24, X
    3f88:	93 81       	ldd	r25, Z+3	; 0x03
    3f8a:	26 95       	lsr	r18
    3f8c:	29 23       	and	r18, r25
    3f8e:	60 81       	ld	r22, Z
    3f90:	71 81       	ldd	r23, Z+1	; 0x01
    3f92:	8b 01       	movw	r16, r22
    3f94:	02 0f       	add	r16, r18
    3f96:	11 1d       	adc	r17, r1
    3f98:	e8 01       	movw	r28, r16
    3f9a:	88 83       	st	Y, r24
    3f9c:	9f 5f       	subi	r25, 0xFF	; 255
    3f9e:	85 81       	ldd	r24, Z+5	; 0x05
    3fa0:	98 23       	and	r25, r24
    3fa2:	93 83       	std	Z+3, r25	; 0x03
    3fa4:	11 96       	adiw	r26, 0x01	; 1
    3fa6:	a4 17       	cp	r26, r20
    3fa8:	b5 07       	cpc	r27, r21
    3faa:	11 f7       	brne	.-60     	; 0x3f70 <serial_sendBytes+0x48>
    3fac:	d7 01       	movw	r26, r14
    3fae:	ed 91       	ld	r30, X+
    3fb0:	fc 91       	ld	r31, X
    3fb2:	35 97       	sbiw	r30, 0x05	; 5
    3fb4:	80 81       	ld	r24, Z
    3fb6:	80 62       	ori	r24, 0x20	; 32
    3fb8:	80 83       	st	Z, r24
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	03 c0       	rjmp	.+6      	; 0x3fc4 <serial_sendBytes+0x9c>
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	01 c0       	rjmp	.+2      	; 0x3fc4 <serial_sendBytes+0x9c>
    3fc2:	82 e0       	ldi	r24, 0x02	; 2
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	ff 90       	pop	r15
    3fce:	ef 90       	pop	r14
    3fd0:	08 95       	ret

00003fd2 <serial_getByte>:
    3fd2:	00 97       	sbiw	r24, 0x00	; 0
    3fd4:	d1 f0       	breq	.+52     	; 0x400a <serial_getByte+0x38>
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	14 96       	adiw	r26, 0x04	; 4
    3fda:	ed 91       	ld	r30, X+
    3fdc:	fc 91       	ld	r31, X
    3fde:	15 97       	sbiw	r26, 0x05	; 5
    3fe0:	93 81       	ldd	r25, Z+3	; 0x03
    3fe2:	82 81       	ldd	r24, Z+2	; 0x02
    3fe4:	98 17       	cp	r25, r24
    3fe6:	99 f0       	breq	.+38     	; 0x400e <serial_getByte+0x3c>
    3fe8:	92 81       	ldd	r25, Z+2	; 0x02
    3fea:	85 81       	ldd	r24, Z+5	; 0x05
    3fec:	86 95       	lsr	r24
    3fee:	89 23       	and	r24, r25
    3ff0:	a0 81       	ld	r26, Z
    3ff2:	b1 81       	ldd	r27, Z+1	; 0x01
    3ff4:	a8 0f       	add	r26, r24
    3ff6:	b1 1d       	adc	r27, r1
    3ff8:	8c 91       	ld	r24, X
    3ffa:	db 01       	movw	r26, r22
    3ffc:	8c 93       	st	X, r24
    3ffe:	9f 5f       	subi	r25, 0xFF	; 255
    4000:	85 81       	ldd	r24, Z+5	; 0x05
    4002:	98 23       	and	r25, r24
    4004:	92 83       	std	Z+2, r25	; 0x02
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	08 95       	ret
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	08 95       	ret
    400e:	83 e0       	ldi	r24, 0x03	; 3
    4010:	08 95       	ret

00004012 <__vector_25>:
    4012:	1f 92       	push	r1
    4014:	0f 92       	push	r0
    4016:	0f b6       	in	r0, 0x3f	; 63
    4018:	0f 92       	push	r0
    401a:	11 24       	eor	r1, r1
    401c:	0b b6       	in	r0, 0x3b	; 59
    401e:	0f 92       	push	r0
    4020:	2f 93       	push	r18
    4022:	3f 93       	push	r19
    4024:	4f 93       	push	r20
    4026:	5f 93       	push	r21
    4028:	6f 93       	push	r22
    402a:	7f 93       	push	r23
    402c:	8f 93       	push	r24
    402e:	9f 93       	push	r25
    4030:	af 93       	push	r26
    4032:	bf 93       	push	r27
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	ef 93       	push	r30
    403a:	ff 93       	push	r31
    403c:	a0 91 99 13 	lds	r26, 0x1399	; 0x801399 <_ser_handle>
    4040:	b0 91 9a 13 	lds	r27, 0x139A	; 0x80139a <_ser_handle+0x1>
    4044:	10 97       	sbiw	r26, 0x00	; 0
    4046:	11 f1       	breq	.+68     	; 0x408c <__vector_25+0x7a>
    4048:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    404c:	14 96       	adiw	r26, 0x04	; 4
    404e:	ed 91       	ld	r30, X+
    4050:	fc 91       	ld	r31, X
    4052:	15 97       	sbiw	r26, 0x05	; 5
    4054:	93 81       	ldd	r25, Z+3	; 0x03
    4056:	82 81       	ldd	r24, Z+2	; 0x02
    4058:	25 81       	ldd	r18, Z+5	; 0x05
    405a:	98 1b       	sub	r25, r24
    405c:	92 23       	and	r25, r18
    405e:	84 81       	ldd	r24, Z+4	; 0x04
    4060:	98 17       	cp	r25, r24
    4062:	61 f0       	breq	.+24     	; 0x407c <__vector_25+0x6a>
    4064:	83 81       	ldd	r24, Z+3	; 0x03
    4066:	26 95       	lsr	r18
    4068:	28 23       	and	r18, r24
    406a:	c0 81       	ld	r28, Z
    406c:	d1 81       	ldd	r29, Z+1	; 0x01
    406e:	c2 0f       	add	r28, r18
    4070:	d1 1d       	adc	r29, r1
    4072:	68 83       	st	Y, r22
    4074:	8f 5f       	subi	r24, 0xFF	; 255
    4076:	95 81       	ldd	r25, Z+5	; 0x05
    4078:	89 23       	and	r24, r25
    407a:	83 83       	std	Z+3, r24	; 0x03
    407c:	16 96       	adiw	r26, 0x06	; 6
    407e:	ed 91       	ld	r30, X+
    4080:	fc 91       	ld	r31, X
    4082:	17 97       	sbiw	r26, 0x07	; 7
    4084:	30 97       	sbiw	r30, 0x00	; 0
    4086:	11 f0       	breq	.+4      	; 0x408c <__vector_25+0x7a>
    4088:	cd 01       	movw	r24, r26
    408a:	19 95       	eicall
    408c:	ff 91       	pop	r31
    408e:	ef 91       	pop	r30
    4090:	df 91       	pop	r29
    4092:	cf 91       	pop	r28
    4094:	bf 91       	pop	r27
    4096:	af 91       	pop	r26
    4098:	9f 91       	pop	r25
    409a:	8f 91       	pop	r24
    409c:	7f 91       	pop	r23
    409e:	6f 91       	pop	r22
    40a0:	5f 91       	pop	r21
    40a2:	4f 91       	pop	r20
    40a4:	3f 91       	pop	r19
    40a6:	2f 91       	pop	r18
    40a8:	0f 90       	pop	r0
    40aa:	0b be       	out	0x3b, r0	; 59
    40ac:	0f 90       	pop	r0
    40ae:	0f be       	out	0x3f, r0	; 63
    40b0:	0f 90       	pop	r0
    40b2:	1f 90       	pop	r1
    40b4:	18 95       	reti

000040b6 <__vector_26>:
    40b6:	1f 92       	push	r1
    40b8:	0f 92       	push	r0
    40ba:	0f b6       	in	r0, 0x3f	; 63
    40bc:	0f 92       	push	r0
    40be:	11 24       	eor	r1, r1
    40c0:	0b b6       	in	r0, 0x3b	; 59
    40c2:	0f 92       	push	r0
    40c4:	2f 93       	push	r18
    40c6:	8f 93       	push	r24
    40c8:	9f 93       	push	r25
    40ca:	af 93       	push	r26
    40cc:	bf 93       	push	r27
    40ce:	ef 93       	push	r30
    40d0:	ff 93       	push	r31
    40d2:	e0 91 99 13 	lds	r30, 0x1399	; 0x801399 <_ser_handle>
    40d6:	f0 91 9a 13 	lds	r31, 0x139A	; 0x80139a <_ser_handle+0x1>
    40da:	30 97       	sbiw	r30, 0x00	; 0
    40dc:	b9 f0       	breq	.+46     	; 0x410c <__vector_26+0x56>
    40de:	02 80       	ldd	r0, Z+2	; 0x02
    40e0:	f3 81       	ldd	r31, Z+3	; 0x03
    40e2:	e0 2d       	mov	r30, r0
    40e4:	93 81       	ldd	r25, Z+3	; 0x03
    40e6:	82 81       	ldd	r24, Z+2	; 0x02
    40e8:	98 17       	cp	r25, r24
    40ea:	b1 f0       	breq	.+44     	; 0x4118 <__vector_26+0x62>
    40ec:	92 81       	ldd	r25, Z+2	; 0x02
    40ee:	85 81       	ldd	r24, Z+5	; 0x05
    40f0:	28 2f       	mov	r18, r24
    40f2:	26 95       	lsr	r18
    40f4:	29 23       	and	r18, r25
    40f6:	a0 81       	ld	r26, Z
    40f8:	b1 81       	ldd	r27, Z+1	; 0x01
    40fa:	a2 0f       	add	r26, r18
    40fc:	b1 1d       	adc	r27, r1
    40fe:	2c 91       	ld	r18, X
    4100:	9f 5f       	subi	r25, 0xFF	; 255
    4102:	89 23       	and	r24, r25
    4104:	82 83       	std	Z+2, r24	; 0x02
    4106:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    410a:	0b c0       	rjmp	.+22     	; 0x4122 <__vector_26+0x6c>
    410c:	e1 ec       	ldi	r30, 0xC1	; 193
    410e:	f0 e0       	ldi	r31, 0x00	; 0
    4110:	80 81       	ld	r24, Z
    4112:	8f 7d       	andi	r24, 0xDF	; 223
    4114:	80 83       	st	Z, r24
    4116:	05 c0       	rjmp	.+10     	; 0x4122 <__vector_26+0x6c>
    4118:	e1 ec       	ldi	r30, 0xC1	; 193
    411a:	f0 e0       	ldi	r31, 0x00	; 0
    411c:	80 81       	ld	r24, Z
    411e:	8f 7d       	andi	r24, 0xDF	; 223
    4120:	80 83       	st	Z, r24
    4122:	ff 91       	pop	r31
    4124:	ef 91       	pop	r30
    4126:	bf 91       	pop	r27
    4128:	af 91       	pop	r26
    412a:	9f 91       	pop	r25
    412c:	8f 91       	pop	r24
    412e:	2f 91       	pop	r18
    4130:	0f 90       	pop	r0
    4132:	0b be       	out	0x3b, r0	; 59
    4134:	0f 90       	pop	r0
    4136:	0f be       	out	0x3f, r0	; 63
    4138:	0f 90       	pop	r0
    413a:	1f 90       	pop	r1
    413c:	18 95       	reti

0000413e <__vector_36>:
    413e:	1f 92       	push	r1
    4140:	0f 92       	push	r0
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	0f 92       	push	r0
    4146:	11 24       	eor	r1, r1
    4148:	0b b6       	in	r0, 0x3b	; 59
    414a:	0f 92       	push	r0
    414c:	2f 93       	push	r18
    414e:	3f 93       	push	r19
    4150:	4f 93       	push	r20
    4152:	5f 93       	push	r21
    4154:	6f 93       	push	r22
    4156:	7f 93       	push	r23
    4158:	8f 93       	push	r24
    415a:	9f 93       	push	r25
    415c:	af 93       	push	r26
    415e:	bf 93       	push	r27
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
    4164:	ef 93       	push	r30
    4166:	ff 93       	push	r31
    4168:	a0 91 9b 13 	lds	r26, 0x139B	; 0x80139b <_ser_handle+0x2>
    416c:	b0 91 9c 13 	lds	r27, 0x139C	; 0x80139c <_ser_handle+0x3>
    4170:	10 97       	sbiw	r26, 0x00	; 0
    4172:	11 f1       	breq	.+68     	; 0x41b8 <__vector_36+0x7a>
    4174:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4178:	14 96       	adiw	r26, 0x04	; 4
    417a:	ed 91       	ld	r30, X+
    417c:	fc 91       	ld	r31, X
    417e:	15 97       	sbiw	r26, 0x05	; 5
    4180:	93 81       	ldd	r25, Z+3	; 0x03
    4182:	82 81       	ldd	r24, Z+2	; 0x02
    4184:	25 81       	ldd	r18, Z+5	; 0x05
    4186:	98 1b       	sub	r25, r24
    4188:	92 23       	and	r25, r18
    418a:	84 81       	ldd	r24, Z+4	; 0x04
    418c:	98 17       	cp	r25, r24
    418e:	61 f0       	breq	.+24     	; 0x41a8 <__vector_36+0x6a>
    4190:	83 81       	ldd	r24, Z+3	; 0x03
    4192:	26 95       	lsr	r18
    4194:	28 23       	and	r18, r24
    4196:	c0 81       	ld	r28, Z
    4198:	d1 81       	ldd	r29, Z+1	; 0x01
    419a:	c2 0f       	add	r28, r18
    419c:	d1 1d       	adc	r29, r1
    419e:	68 83       	st	Y, r22
    41a0:	8f 5f       	subi	r24, 0xFF	; 255
    41a2:	95 81       	ldd	r25, Z+5	; 0x05
    41a4:	89 23       	and	r24, r25
    41a6:	83 83       	std	Z+3, r24	; 0x03
    41a8:	16 96       	adiw	r26, 0x06	; 6
    41aa:	ed 91       	ld	r30, X+
    41ac:	fc 91       	ld	r31, X
    41ae:	17 97       	sbiw	r26, 0x07	; 7
    41b0:	30 97       	sbiw	r30, 0x00	; 0
    41b2:	11 f0       	breq	.+4      	; 0x41b8 <__vector_36+0x7a>
    41b4:	cd 01       	movw	r24, r26
    41b6:	19 95       	eicall
    41b8:	ff 91       	pop	r31
    41ba:	ef 91       	pop	r30
    41bc:	df 91       	pop	r29
    41be:	cf 91       	pop	r28
    41c0:	bf 91       	pop	r27
    41c2:	af 91       	pop	r26
    41c4:	9f 91       	pop	r25
    41c6:	8f 91       	pop	r24
    41c8:	7f 91       	pop	r23
    41ca:	6f 91       	pop	r22
    41cc:	5f 91       	pop	r21
    41ce:	4f 91       	pop	r20
    41d0:	3f 91       	pop	r19
    41d2:	2f 91       	pop	r18
    41d4:	0f 90       	pop	r0
    41d6:	0b be       	out	0x3b, r0	; 59
    41d8:	0f 90       	pop	r0
    41da:	0f be       	out	0x3f, r0	; 63
    41dc:	0f 90       	pop	r0
    41de:	1f 90       	pop	r1
    41e0:	18 95       	reti

000041e2 <__vector_37>:
    41e2:	1f 92       	push	r1
    41e4:	0f 92       	push	r0
    41e6:	0f b6       	in	r0, 0x3f	; 63
    41e8:	0f 92       	push	r0
    41ea:	11 24       	eor	r1, r1
    41ec:	0b b6       	in	r0, 0x3b	; 59
    41ee:	0f 92       	push	r0
    41f0:	2f 93       	push	r18
    41f2:	8f 93       	push	r24
    41f4:	9f 93       	push	r25
    41f6:	af 93       	push	r26
    41f8:	bf 93       	push	r27
    41fa:	ef 93       	push	r30
    41fc:	ff 93       	push	r31
    41fe:	e0 91 9b 13 	lds	r30, 0x139B	; 0x80139b <_ser_handle+0x2>
    4202:	f0 91 9c 13 	lds	r31, 0x139C	; 0x80139c <_ser_handle+0x3>
    4206:	30 97       	sbiw	r30, 0x00	; 0
    4208:	b9 f0       	breq	.+46     	; 0x4238 <__vector_37+0x56>
    420a:	02 80       	ldd	r0, Z+2	; 0x02
    420c:	f3 81       	ldd	r31, Z+3	; 0x03
    420e:	e0 2d       	mov	r30, r0
    4210:	93 81       	ldd	r25, Z+3	; 0x03
    4212:	82 81       	ldd	r24, Z+2	; 0x02
    4214:	98 17       	cp	r25, r24
    4216:	b1 f0       	breq	.+44     	; 0x4244 <__vector_37+0x62>
    4218:	92 81       	ldd	r25, Z+2	; 0x02
    421a:	85 81       	ldd	r24, Z+5	; 0x05
    421c:	28 2f       	mov	r18, r24
    421e:	26 95       	lsr	r18
    4220:	29 23       	and	r18, r25
    4222:	a0 81       	ld	r26, Z
    4224:	b1 81       	ldd	r27, Z+1	; 0x01
    4226:	a2 0f       	add	r26, r18
    4228:	b1 1d       	adc	r27, r1
    422a:	2c 91       	ld	r18, X
    422c:	9f 5f       	subi	r25, 0xFF	; 255
    422e:	89 23       	and	r24, r25
    4230:	82 83       	std	Z+2, r24	; 0x02
    4232:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4236:	0b c0       	rjmp	.+22     	; 0x424e <__vector_37+0x6c>
    4238:	e9 ec       	ldi	r30, 0xC9	; 201
    423a:	f0 e0       	ldi	r31, 0x00	; 0
    423c:	80 81       	ld	r24, Z
    423e:	8f 7d       	andi	r24, 0xDF	; 223
    4240:	80 83       	st	Z, r24
    4242:	05 c0       	rjmp	.+10     	; 0x424e <__vector_37+0x6c>
    4244:	e9 ec       	ldi	r30, 0xC9	; 201
    4246:	f0 e0       	ldi	r31, 0x00	; 0
    4248:	80 81       	ld	r24, Z
    424a:	8f 7d       	andi	r24, 0xDF	; 223
    424c:	80 83       	st	Z, r24
    424e:	ff 91       	pop	r31
    4250:	ef 91       	pop	r30
    4252:	bf 91       	pop	r27
    4254:	af 91       	pop	r26
    4256:	9f 91       	pop	r25
    4258:	8f 91       	pop	r24
    425a:	2f 91       	pop	r18
    425c:	0f 90       	pop	r0
    425e:	0b be       	out	0x3b, r0	; 59
    4260:	0f 90       	pop	r0
    4262:	0f be       	out	0x3f, r0	; 63
    4264:	0f 90       	pop	r0
    4266:	1f 90       	pop	r1
    4268:	18 95       	reti

0000426a <__vector_51>:
    426a:	1f 92       	push	r1
    426c:	0f 92       	push	r0
    426e:	0f b6       	in	r0, 0x3f	; 63
    4270:	0f 92       	push	r0
    4272:	11 24       	eor	r1, r1
    4274:	0b b6       	in	r0, 0x3b	; 59
    4276:	0f 92       	push	r0
    4278:	2f 93       	push	r18
    427a:	3f 93       	push	r19
    427c:	4f 93       	push	r20
    427e:	5f 93       	push	r21
    4280:	6f 93       	push	r22
    4282:	7f 93       	push	r23
    4284:	8f 93       	push	r24
    4286:	9f 93       	push	r25
    4288:	af 93       	push	r26
    428a:	bf 93       	push	r27
    428c:	cf 93       	push	r28
    428e:	df 93       	push	r29
    4290:	ef 93       	push	r30
    4292:	ff 93       	push	r31
    4294:	a0 91 9d 13 	lds	r26, 0x139D	; 0x80139d <_ser_handle+0x4>
    4298:	b0 91 9e 13 	lds	r27, 0x139E	; 0x80139e <_ser_handle+0x5>
    429c:	10 97       	sbiw	r26, 0x00	; 0
    429e:	11 f1       	breq	.+68     	; 0x42e4 <__vector_51+0x7a>
    42a0:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    42a4:	14 96       	adiw	r26, 0x04	; 4
    42a6:	ed 91       	ld	r30, X+
    42a8:	fc 91       	ld	r31, X
    42aa:	15 97       	sbiw	r26, 0x05	; 5
    42ac:	93 81       	ldd	r25, Z+3	; 0x03
    42ae:	82 81       	ldd	r24, Z+2	; 0x02
    42b0:	25 81       	ldd	r18, Z+5	; 0x05
    42b2:	98 1b       	sub	r25, r24
    42b4:	92 23       	and	r25, r18
    42b6:	84 81       	ldd	r24, Z+4	; 0x04
    42b8:	98 17       	cp	r25, r24
    42ba:	61 f0       	breq	.+24     	; 0x42d4 <__vector_51+0x6a>
    42bc:	83 81       	ldd	r24, Z+3	; 0x03
    42be:	26 95       	lsr	r18
    42c0:	28 23       	and	r18, r24
    42c2:	c0 81       	ld	r28, Z
    42c4:	d1 81       	ldd	r29, Z+1	; 0x01
    42c6:	c2 0f       	add	r28, r18
    42c8:	d1 1d       	adc	r29, r1
    42ca:	68 83       	st	Y, r22
    42cc:	8f 5f       	subi	r24, 0xFF	; 255
    42ce:	95 81       	ldd	r25, Z+5	; 0x05
    42d0:	89 23       	and	r24, r25
    42d2:	83 83       	std	Z+3, r24	; 0x03
    42d4:	16 96       	adiw	r26, 0x06	; 6
    42d6:	ed 91       	ld	r30, X+
    42d8:	fc 91       	ld	r31, X
    42da:	17 97       	sbiw	r26, 0x07	; 7
    42dc:	30 97       	sbiw	r30, 0x00	; 0
    42de:	11 f0       	breq	.+4      	; 0x42e4 <__vector_51+0x7a>
    42e0:	cd 01       	movw	r24, r26
    42e2:	19 95       	eicall
    42e4:	ff 91       	pop	r31
    42e6:	ef 91       	pop	r30
    42e8:	df 91       	pop	r29
    42ea:	cf 91       	pop	r28
    42ec:	bf 91       	pop	r27
    42ee:	af 91       	pop	r26
    42f0:	9f 91       	pop	r25
    42f2:	8f 91       	pop	r24
    42f4:	7f 91       	pop	r23
    42f6:	6f 91       	pop	r22
    42f8:	5f 91       	pop	r21
    42fa:	4f 91       	pop	r20
    42fc:	3f 91       	pop	r19
    42fe:	2f 91       	pop	r18
    4300:	0f 90       	pop	r0
    4302:	0b be       	out	0x3b, r0	; 59
    4304:	0f 90       	pop	r0
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	0f 90       	pop	r0
    430a:	1f 90       	pop	r1
    430c:	18 95       	reti

0000430e <__vector_52>:
    430e:	1f 92       	push	r1
    4310:	0f 92       	push	r0
    4312:	0f b6       	in	r0, 0x3f	; 63
    4314:	0f 92       	push	r0
    4316:	11 24       	eor	r1, r1
    4318:	0b b6       	in	r0, 0x3b	; 59
    431a:	0f 92       	push	r0
    431c:	2f 93       	push	r18
    431e:	8f 93       	push	r24
    4320:	9f 93       	push	r25
    4322:	af 93       	push	r26
    4324:	bf 93       	push	r27
    4326:	ef 93       	push	r30
    4328:	ff 93       	push	r31
    432a:	e0 91 9d 13 	lds	r30, 0x139D	; 0x80139d <_ser_handle+0x4>
    432e:	f0 91 9e 13 	lds	r31, 0x139E	; 0x80139e <_ser_handle+0x5>
    4332:	30 97       	sbiw	r30, 0x00	; 0
    4334:	b9 f0       	breq	.+46     	; 0x4364 <__vector_52+0x56>
    4336:	02 80       	ldd	r0, Z+2	; 0x02
    4338:	f3 81       	ldd	r31, Z+3	; 0x03
    433a:	e0 2d       	mov	r30, r0
    433c:	93 81       	ldd	r25, Z+3	; 0x03
    433e:	82 81       	ldd	r24, Z+2	; 0x02
    4340:	98 17       	cp	r25, r24
    4342:	b1 f0       	breq	.+44     	; 0x4370 <__vector_52+0x62>
    4344:	92 81       	ldd	r25, Z+2	; 0x02
    4346:	85 81       	ldd	r24, Z+5	; 0x05
    4348:	28 2f       	mov	r18, r24
    434a:	26 95       	lsr	r18
    434c:	29 23       	and	r18, r25
    434e:	a0 81       	ld	r26, Z
    4350:	b1 81       	ldd	r27, Z+1	; 0x01
    4352:	a2 0f       	add	r26, r18
    4354:	b1 1d       	adc	r27, r1
    4356:	2c 91       	ld	r18, X
    4358:	9f 5f       	subi	r25, 0xFF	; 255
    435a:	89 23       	and	r24, r25
    435c:	82 83       	std	Z+2, r24	; 0x02
    435e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4362:	0b c0       	rjmp	.+22     	; 0x437a <__vector_52+0x6c>
    4364:	e1 ed       	ldi	r30, 0xD1	; 209
    4366:	f0 e0       	ldi	r31, 0x00	; 0
    4368:	80 81       	ld	r24, Z
    436a:	8f 7d       	andi	r24, 0xDF	; 223
    436c:	80 83       	st	Z, r24
    436e:	05 c0       	rjmp	.+10     	; 0x437a <__vector_52+0x6c>
    4370:	e1 ed       	ldi	r30, 0xD1	; 209
    4372:	f0 e0       	ldi	r31, 0x00	; 0
    4374:	80 81       	ld	r24, Z
    4376:	8f 7d       	andi	r24, 0xDF	; 223
    4378:	80 83       	st	Z, r24
    437a:	ff 91       	pop	r31
    437c:	ef 91       	pop	r30
    437e:	bf 91       	pop	r27
    4380:	af 91       	pop	r26
    4382:	9f 91       	pop	r25
    4384:	8f 91       	pop	r24
    4386:	2f 91       	pop	r18
    4388:	0f 90       	pop	r0
    438a:	0b be       	out	0x3b, r0	; 59
    438c:	0f 90       	pop	r0
    438e:	0f be       	out	0x3f, r0	; 63
    4390:	0f 90       	pop	r0
    4392:	1f 90       	pop	r1
    4394:	18 95       	reti

00004396 <__vector_54>:
    4396:	1f 92       	push	r1
    4398:	0f 92       	push	r0
    439a:	0f b6       	in	r0, 0x3f	; 63
    439c:	0f 92       	push	r0
    439e:	11 24       	eor	r1, r1
    43a0:	0b b6       	in	r0, 0x3b	; 59
    43a2:	0f 92       	push	r0
    43a4:	2f 93       	push	r18
    43a6:	3f 93       	push	r19
    43a8:	4f 93       	push	r20
    43aa:	5f 93       	push	r21
    43ac:	6f 93       	push	r22
    43ae:	7f 93       	push	r23
    43b0:	8f 93       	push	r24
    43b2:	9f 93       	push	r25
    43b4:	af 93       	push	r26
    43b6:	bf 93       	push	r27
    43b8:	cf 93       	push	r28
    43ba:	df 93       	push	r29
    43bc:	ef 93       	push	r30
    43be:	ff 93       	push	r31
    43c0:	a0 91 9f 13 	lds	r26, 0x139F	; 0x80139f <_ser_handle+0x6>
    43c4:	b0 91 a0 13 	lds	r27, 0x13A0	; 0x8013a0 <_ser_handle+0x7>
    43c8:	10 97       	sbiw	r26, 0x00	; 0
    43ca:	11 f1       	breq	.+68     	; 0x4410 <__vector_54+0x7a>
    43cc:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    43d0:	14 96       	adiw	r26, 0x04	; 4
    43d2:	ed 91       	ld	r30, X+
    43d4:	fc 91       	ld	r31, X
    43d6:	15 97       	sbiw	r26, 0x05	; 5
    43d8:	93 81       	ldd	r25, Z+3	; 0x03
    43da:	82 81       	ldd	r24, Z+2	; 0x02
    43dc:	25 81       	ldd	r18, Z+5	; 0x05
    43de:	98 1b       	sub	r25, r24
    43e0:	92 23       	and	r25, r18
    43e2:	84 81       	ldd	r24, Z+4	; 0x04
    43e4:	98 17       	cp	r25, r24
    43e6:	61 f0       	breq	.+24     	; 0x4400 <__vector_54+0x6a>
    43e8:	83 81       	ldd	r24, Z+3	; 0x03
    43ea:	26 95       	lsr	r18
    43ec:	28 23       	and	r18, r24
    43ee:	c0 81       	ld	r28, Z
    43f0:	d1 81       	ldd	r29, Z+1	; 0x01
    43f2:	c2 0f       	add	r28, r18
    43f4:	d1 1d       	adc	r29, r1
    43f6:	68 83       	st	Y, r22
    43f8:	8f 5f       	subi	r24, 0xFF	; 255
    43fa:	95 81       	ldd	r25, Z+5	; 0x05
    43fc:	89 23       	and	r24, r25
    43fe:	83 83       	std	Z+3, r24	; 0x03
    4400:	16 96       	adiw	r26, 0x06	; 6
    4402:	ed 91       	ld	r30, X+
    4404:	fc 91       	ld	r31, X
    4406:	17 97       	sbiw	r26, 0x07	; 7
    4408:	30 97       	sbiw	r30, 0x00	; 0
    440a:	11 f0       	breq	.+4      	; 0x4410 <__vector_54+0x7a>
    440c:	cd 01       	movw	r24, r26
    440e:	19 95       	eicall
    4410:	ff 91       	pop	r31
    4412:	ef 91       	pop	r30
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	bf 91       	pop	r27
    441a:	af 91       	pop	r26
    441c:	9f 91       	pop	r25
    441e:	8f 91       	pop	r24
    4420:	7f 91       	pop	r23
    4422:	6f 91       	pop	r22
    4424:	5f 91       	pop	r21
    4426:	4f 91       	pop	r20
    4428:	3f 91       	pop	r19
    442a:	2f 91       	pop	r18
    442c:	0f 90       	pop	r0
    442e:	0b be       	out	0x3b, r0	; 59
    4430:	0f 90       	pop	r0
    4432:	0f be       	out	0x3f, r0	; 63
    4434:	0f 90       	pop	r0
    4436:	1f 90       	pop	r1
    4438:	18 95       	reti

0000443a <__vector_55>:
    443a:	1f 92       	push	r1
    443c:	0f 92       	push	r0
    443e:	0f b6       	in	r0, 0x3f	; 63
    4440:	0f 92       	push	r0
    4442:	11 24       	eor	r1, r1
    4444:	0b b6       	in	r0, 0x3b	; 59
    4446:	0f 92       	push	r0
    4448:	2f 93       	push	r18
    444a:	8f 93       	push	r24
    444c:	9f 93       	push	r25
    444e:	af 93       	push	r26
    4450:	bf 93       	push	r27
    4452:	ef 93       	push	r30
    4454:	ff 93       	push	r31
    4456:	e0 91 9f 13 	lds	r30, 0x139F	; 0x80139f <_ser_handle+0x6>
    445a:	f0 91 a0 13 	lds	r31, 0x13A0	; 0x8013a0 <_ser_handle+0x7>
    445e:	30 97       	sbiw	r30, 0x00	; 0
    4460:	b9 f0       	breq	.+46     	; 0x4490 <__vector_55+0x56>
    4462:	02 80       	ldd	r0, Z+2	; 0x02
    4464:	f3 81       	ldd	r31, Z+3	; 0x03
    4466:	e0 2d       	mov	r30, r0
    4468:	93 81       	ldd	r25, Z+3	; 0x03
    446a:	82 81       	ldd	r24, Z+2	; 0x02
    446c:	98 17       	cp	r25, r24
    446e:	b1 f0       	breq	.+44     	; 0x449c <__vector_55+0x62>
    4470:	92 81       	ldd	r25, Z+2	; 0x02
    4472:	85 81       	ldd	r24, Z+5	; 0x05
    4474:	28 2f       	mov	r18, r24
    4476:	26 95       	lsr	r18
    4478:	29 23       	and	r18, r25
    447a:	a0 81       	ld	r26, Z
    447c:	b1 81       	ldd	r27, Z+1	; 0x01
    447e:	a2 0f       	add	r26, r18
    4480:	b1 1d       	adc	r27, r1
    4482:	2c 91       	ld	r18, X
    4484:	9f 5f       	subi	r25, 0xFF	; 255
    4486:	89 23       	and	r24, r25
    4488:	82 83       	std	Z+2, r24	; 0x02
    448a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    448e:	0b c0       	rjmp	.+22     	; 0x44a6 <__vector_55+0x6c>
    4490:	e1 e3       	ldi	r30, 0x31	; 49
    4492:	f1 e0       	ldi	r31, 0x01	; 1
    4494:	80 81       	ld	r24, Z
    4496:	8f 7d       	andi	r24, 0xDF	; 223
    4498:	80 83       	st	Z, r24
    449a:	05 c0       	rjmp	.+10     	; 0x44a6 <__vector_55+0x6c>
    449c:	e1 e3       	ldi	r30, 0x31	; 49
    449e:	f1 e0       	ldi	r31, 0x01	; 1
    44a0:	80 81       	ld	r24, Z
    44a2:	8f 7d       	andi	r24, 0xDF	; 223
    44a4:	80 83       	st	Z, r24
    44a6:	ff 91       	pop	r31
    44a8:	ef 91       	pop	r30
    44aa:	bf 91       	pop	r27
    44ac:	af 91       	pop	r26
    44ae:	9f 91       	pop	r25
    44b0:	8f 91       	pop	r24
    44b2:	2f 91       	pop	r18
    44b4:	0f 90       	pop	r0
    44b6:	0b be       	out	0x3b, r0	; 59
    44b8:	0f 90       	pop	r0
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	0f 90       	pop	r0
    44be:	1f 90       	pop	r1
    44c0:	18 95       	reti

000044c2 <usart_getchar>:
    44c2:	cf 93       	push	r28
    44c4:	df 93       	push	r29
    44c6:	1f 92       	push	r1
    44c8:	cd b7       	in	r28, 0x3d	; 61
    44ca:	de b7       	in	r29, 0x3e	; 62
    44cc:	be 01       	movw	r22, r28
    44ce:	6f 5f       	subi	r22, 0xFF	; 255
    44d0:	7f 4f       	sbci	r23, 0xFF	; 255
    44d2:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <_com_serial_instance>
    44d6:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <_com_serial_instance+0x1>
    44da:	7b dd       	rcall	.-1290   	; 0x3fd2 <serial_getByte>
    44dc:	81 11       	cpse	r24, r1
    44de:	f6 cf       	rjmp	.-20     	; 0x44cc <usart_getchar+0xa>
    44e0:	89 81       	ldd	r24, Y+1	; 0x01
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	0f 90       	pop	r0
    44e6:	df 91       	pop	r29
    44e8:	cf 91       	pop	r28
    44ea:	08 95       	ret

000044ec <usart_putchar>:
    44ec:	68 2f       	mov	r22, r24
    44ee:	80 91 a1 13 	lds	r24, 0x13A1	; 0x8013a1 <_com_serial_instance>
    44f2:	90 91 a2 13 	lds	r25, 0x13A2	; 0x8013a2 <_com_serial_instance+0x1>
    44f6:	ed dc       	rcall	.-1574   	; 0x3ed2 <serial_sendByte>
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	08 95       	ret

000044fe <stdio_initialise>:
    44fe:	8f 92       	push	r8
    4500:	9f 92       	push	r9
    4502:	af 92       	push	r10
    4504:	cf 92       	push	r12
    4506:	ef 92       	push	r14
    4508:	0f 93       	push	r16
    450a:	81 2c       	mov	r8, r1
    450c:	91 2c       	mov	r9, r1
    450e:	68 94       	set
    4510:	aa 24       	eor	r10, r10
    4512:	a7 f8       	bld	r10, 7
    4514:	68 94       	set
    4516:	cc 24       	eor	r12, r12
    4518:	c7 f8       	bld	r12, 7
    451a:	e1 2c       	mov	r14, r1
    451c:	00 e0       	ldi	r16, 0x00	; 0
    451e:	23 e0       	ldi	r18, 0x03	; 3
    4520:	40 e0       	ldi	r20, 0x00	; 0
    4522:	51 ee       	ldi	r21, 0xE1	; 225
    4524:	60 e0       	ldi	r22, 0x00	; 0
    4526:	70 e0       	ldi	r23, 0x00	; 0
    4528:	38 dc       	rcall	.-1936   	; 0x3d9a <serial_create>
    452a:	90 93 a2 13 	sts	0x13A2, r25	; 0x8013a2 <_com_serial_instance+0x1>
    452e:	80 93 a1 13 	sts	0x13A1, r24	; 0x8013a1 <_com_serial_instance>
    4532:	eb ec       	ldi	r30, 0xCB	; 203
    4534:	f3 e1       	ldi	r31, 0x13	; 19
    4536:	8f e0       	ldi	r24, 0x0F	; 15
    4538:	92 e0       	ldi	r25, 0x02	; 2
    453a:	91 83       	std	Z+1, r25	; 0x01
    453c:	80 83       	st	Z, r24
    453e:	93 83       	std	Z+3, r25	; 0x03
    4540:	82 83       	std	Z+2, r24	; 0x02
    4542:	0f 91       	pop	r16
    4544:	ef 90       	pop	r14
    4546:	cf 90       	pop	r12
    4548:	af 90       	pop	r10
    454a:	9f 90       	pop	r9
    454c:	8f 90       	pop	r8
    454e:	08 95       	ret

00004550 <_turn_off>:
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	fc 01       	movw	r30, r24
    4554:	ee 0f       	add	r30, r30
    4556:	ff 1f       	adc	r31, r31
    4558:	e8 0f       	add	r30, r24
    455a:	f9 1f       	adc	r31, r25
    455c:	ee 0f       	add	r30, r30
    455e:	ff 1f       	adc	r31, r31
    4560:	ed 55       	subi	r30, 0x5D	; 93
    4562:	fc 4e       	sbci	r31, 0xEC	; 236
    4564:	23 81       	ldd	r18, Z+3	; 0x03
    4566:	21 11       	cpse	r18, r1
    4568:	1f c0       	rjmp	.+62     	; 0x45a8 <_turn_off+0x58>
    456a:	9c 01       	movw	r18, r24
    456c:	22 0f       	add	r18, r18
    456e:	33 1f       	adc	r19, r19
    4570:	f9 01       	movw	r30, r18
    4572:	e8 0f       	add	r30, r24
    4574:	f9 1f       	adc	r31, r25
    4576:	ee 0f       	add	r30, r30
    4578:	ff 1f       	adc	r31, r31
    457a:	ed 55       	subi	r30, 0x5D	; 93
    457c:	fc 4e       	sbci	r31, 0xEC	; 236
    457e:	a0 81       	ld	r26, Z
    4580:	b1 81       	ldd	r27, Z+1	; 0x01
    4582:	4c 91       	ld	r20, X
    4584:	f9 01       	movw	r30, r18
    4586:	e8 0f       	add	r30, r24
    4588:	f9 1f       	adc	r31, r25
    458a:	ee 0f       	add	r30, r30
    458c:	ff 1f       	adc	r31, r31
    458e:	ed 55       	subi	r30, 0x5D	; 93
    4590:	fc 4e       	sbci	r31, 0xEC	; 236
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	02 80       	ldd	r0, Z+2	; 0x02
    4598:	02 c0       	rjmp	.+4      	; 0x459e <_turn_off+0x4e>
    459a:	88 0f       	add	r24, r24
    459c:	99 1f       	adc	r25, r25
    459e:	0a 94       	dec	r0
    45a0:	e2 f7       	brpl	.-8      	; 0x459a <_turn_off+0x4a>
    45a2:	84 2b       	or	r24, r20
    45a4:	8c 93       	st	X, r24
    45a6:	08 95       	ret
    45a8:	fc 01       	movw	r30, r24
    45aa:	ee 0f       	add	r30, r30
    45ac:	ff 1f       	adc	r31, r31
    45ae:	df 01       	movw	r26, r30
    45b0:	a8 0f       	add	r26, r24
    45b2:	b9 1f       	adc	r27, r25
    45b4:	aa 0f       	add	r26, r26
    45b6:	bb 1f       	adc	r27, r27
    45b8:	ad 55       	subi	r26, 0x5D	; 93
    45ba:	bc 4e       	sbci	r27, 0xEC	; 236
    45bc:	0d 90       	ld	r0, X+
    45be:	bc 91       	ld	r27, X
    45c0:	a0 2d       	mov	r26, r0
    45c2:	2c 91       	ld	r18, X
    45c4:	e8 0f       	add	r30, r24
    45c6:	f9 1f       	adc	r31, r25
    45c8:	ee 0f       	add	r30, r30
    45ca:	ff 1f       	adc	r31, r31
    45cc:	ed 55       	subi	r30, 0x5D	; 93
    45ce:	fc 4e       	sbci	r31, 0xEC	; 236
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	02 80       	ldd	r0, Z+2	; 0x02
    45d6:	02 c0       	rjmp	.+4      	; 0x45dc <_turn_off+0x8c>
    45d8:	88 0f       	add	r24, r24
    45da:	99 1f       	adc	r25, r25
    45dc:	0a 94       	dec	r0
    45de:	e2 f7       	brpl	.-8      	; 0x45d8 <_turn_off+0x88>
    45e0:	80 95       	com	r24
    45e2:	82 23       	and	r24, r18
    45e4:	8c 93       	st	X, r24
    45e6:	08 95       	ret

000045e8 <_turn_on>:
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	fc 01       	movw	r30, r24
    45ec:	ee 0f       	add	r30, r30
    45ee:	ff 1f       	adc	r31, r31
    45f0:	e8 0f       	add	r30, r24
    45f2:	f9 1f       	adc	r31, r25
    45f4:	ee 0f       	add	r30, r30
    45f6:	ff 1f       	adc	r31, r31
    45f8:	ed 55       	subi	r30, 0x5D	; 93
    45fa:	fc 4e       	sbci	r31, 0xEC	; 236
    45fc:	23 81       	ldd	r18, Z+3	; 0x03
    45fe:	21 11       	cpse	r18, r1
    4600:	20 c0       	rjmp	.+64     	; 0x4642 <_turn_on+0x5a>
    4602:	9c 01       	movw	r18, r24
    4604:	22 0f       	add	r18, r18
    4606:	33 1f       	adc	r19, r19
    4608:	f9 01       	movw	r30, r18
    460a:	e8 0f       	add	r30, r24
    460c:	f9 1f       	adc	r31, r25
    460e:	ee 0f       	add	r30, r30
    4610:	ff 1f       	adc	r31, r31
    4612:	ed 55       	subi	r30, 0x5D	; 93
    4614:	fc 4e       	sbci	r31, 0xEC	; 236
    4616:	a0 81       	ld	r26, Z
    4618:	b1 81       	ldd	r27, Z+1	; 0x01
    461a:	4c 91       	ld	r20, X
    461c:	f9 01       	movw	r30, r18
    461e:	e8 0f       	add	r30, r24
    4620:	f9 1f       	adc	r31, r25
    4622:	ee 0f       	add	r30, r30
    4624:	ff 1f       	adc	r31, r31
    4626:	ed 55       	subi	r30, 0x5D	; 93
    4628:	fc 4e       	sbci	r31, 0xEC	; 236
    462a:	81 e0       	ldi	r24, 0x01	; 1
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	02 80       	ldd	r0, Z+2	; 0x02
    4630:	02 c0       	rjmp	.+4      	; 0x4636 <_turn_on+0x4e>
    4632:	88 0f       	add	r24, r24
    4634:	99 1f       	adc	r25, r25
    4636:	0a 94       	dec	r0
    4638:	e2 f7       	brpl	.-8      	; 0x4632 <_turn_on+0x4a>
    463a:	80 95       	com	r24
    463c:	84 23       	and	r24, r20
    463e:	8c 93       	st	X, r24
    4640:	08 95       	ret
    4642:	fc 01       	movw	r30, r24
    4644:	ee 0f       	add	r30, r30
    4646:	ff 1f       	adc	r31, r31
    4648:	df 01       	movw	r26, r30
    464a:	a8 0f       	add	r26, r24
    464c:	b9 1f       	adc	r27, r25
    464e:	aa 0f       	add	r26, r26
    4650:	bb 1f       	adc	r27, r27
    4652:	ad 55       	subi	r26, 0x5D	; 93
    4654:	bc 4e       	sbci	r27, 0xEC	; 236
    4656:	0d 90       	ld	r0, X+
    4658:	bc 91       	ld	r27, X
    465a:	a0 2d       	mov	r26, r0
    465c:	2c 91       	ld	r18, X
    465e:	e8 0f       	add	r30, r24
    4660:	f9 1f       	adc	r31, r25
    4662:	ee 0f       	add	r30, r30
    4664:	ff 1f       	adc	r31, r31
    4666:	ed 55       	subi	r30, 0x5D	; 93
    4668:	fc 4e       	sbci	r31, 0xEC	; 236
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	02 80       	ldd	r0, Z+2	; 0x02
    4670:	02 c0       	rjmp	.+4      	; 0x4676 <_turn_on+0x8e>
    4672:	88 0f       	add	r24, r24
    4674:	99 1f       	adc	r25, r25
    4676:	0a 94       	dec	r0
    4678:	e2 f7       	brpl	.-8      	; 0x4672 <_turn_on+0x8a>
    467a:	82 2b       	or	r24, r18
    467c:	8c 93       	st	X, r24
    467e:	08 95       	ret

00004680 <_hal_led_task>:
    4680:	cc 24       	eor	r12, r12
    4682:	c3 94       	inc	r12
    4684:	d1 2c       	mov	r13, r1
    4686:	68 94       	set
    4688:	bb 24       	eor	r11, r11
    468a:	b2 f8       	bld	r11, 2
    468c:	c3 ea       	ldi	r28, 0xA3	; 163
    468e:	d3 e1       	ldi	r29, 0x13	; 19
    4690:	10 e0       	ldi	r17, 0x00	; 0
    4692:	8c 81       	ldd	r24, Y+4	; 0x04
    4694:	81 30       	cpi	r24, 0x01	; 1
    4696:	81 f0       	breq	.+32     	; 0x46b8 <_hal_led_task+0x38>
    4698:	18 f1       	brcs	.+70     	; 0x46e0 <_hal_led_task+0x60>
    469a:	82 30       	cpi	r24, 0x02	; 2
    469c:	61 f5       	brne	.+88     	; 0x46f6 <_hal_led_task+0x76>
    469e:	e8 81       	ld	r30, Y
    46a0:	f9 81       	ldd	r31, Y+1	; 0x01
    46a2:	20 81       	ld	r18, Z
    46a4:	c6 01       	movw	r24, r12
    46a6:	0a 80       	ldd	r0, Y+2	; 0x02
    46a8:	02 c0       	rjmp	.+4      	; 0x46ae <_hal_led_task+0x2e>
    46aa:	88 0f       	add	r24, r24
    46ac:	99 1f       	adc	r25, r25
    46ae:	0a 94       	dec	r0
    46b0:	e2 f7       	brpl	.-8      	; 0x46aa <_hal_led_task+0x2a>
    46b2:	82 27       	eor	r24, r18
    46b4:	80 83       	st	Z, r24
    46b6:	1f c0       	rjmp	.+62     	; 0x46f6 <_hal_led_task+0x76>
    46b8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ba:	8f 5f       	subi	r24, 0xFF	; 255
    46bc:	8a 30       	cpi	r24, 0x0A	; 10
    46be:	10 f4       	brcc	.+4      	; 0x46c4 <_hal_led_task+0x44>
    46c0:	8d 83       	std	Y+5, r24	; 0x05
    46c2:	19 c0       	rjmp	.+50     	; 0x46f6 <_hal_led_task+0x76>
    46c4:	1d 82       	std	Y+5, r1	; 0x05
    46c6:	e8 81       	ld	r30, Y
    46c8:	f9 81       	ldd	r31, Y+1	; 0x01
    46ca:	20 81       	ld	r18, Z
    46cc:	c6 01       	movw	r24, r12
    46ce:	0a 80       	ldd	r0, Y+2	; 0x02
    46d0:	02 c0       	rjmp	.+4      	; 0x46d6 <_hal_led_task+0x56>
    46d2:	88 0f       	add	r24, r24
    46d4:	99 1f       	adc	r25, r25
    46d6:	0a 94       	dec	r0
    46d8:	e2 f7       	brpl	.-8      	; 0x46d2 <_hal_led_task+0x52>
    46da:	82 27       	eor	r24, r18
    46dc:	80 83       	st	Z, r24
    46de:	0b c0       	rjmp	.+22     	; 0x46f6 <_hal_led_task+0x76>
    46e0:	0d 81       	ldd	r16, Y+5	; 0x05
    46e2:	00 23       	and	r16, r16
    46e4:	29 f0       	breq	.+10     	; 0x46f0 <_hal_led_task+0x70>
    46e6:	81 2f       	mov	r24, r17
    46e8:	7f df       	rcall	.-258    	; 0x45e8 <_turn_on>
    46ea:	01 50       	subi	r16, 0x01	; 1
    46ec:	0d 83       	std	Y+5, r16	; 0x05
    46ee:	03 c0       	rjmp	.+6      	; 0x46f6 <_hal_led_task+0x76>
    46f0:	bc 82       	std	Y+4, r11	; 0x04
    46f2:	81 2f       	mov	r24, r17
    46f4:	2d df       	rcall	.-422    	; 0x4550 <_turn_off>
    46f6:	1f 5f       	subi	r17, 0xFF	; 255
    46f8:	26 96       	adiw	r28, 0x06	; 6
    46fa:	14 30       	cpi	r17, 0x04	; 4
    46fc:	51 f6       	brne	.-108    	; 0x4692 <_hal_led_task+0x12>
    46fe:	65 e0       	ldi	r22, 0x05	; 5
    4700:	70 e0       	ldi	r23, 0x00	; 0
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <vTaskDelay>
    470a:	c0 cf       	rjmp	.-128    	; 0x468c <_hal_led_task+0xc>

0000470c <status_leds_initialise>:
    470c:	ef 92       	push	r14
    470e:	ff 92       	push	r15
    4710:	0f 93       	push	r16
    4712:	1f 93       	push	r17
    4714:	cf 93       	push	r28
    4716:	df 93       	push	r29
    4718:	08 2f       	mov	r16, r24
    471a:	80 e4       	ldi	r24, 0x40	; 64
    471c:	87 b9       	out	0x07, r24	; 7
    471e:	c3 ea       	ldi	r28, 0xA3	; 163
    4720:	d3 e1       	ldi	r29, 0x13	; 19
    4722:	0f 2e       	mov	r0, r31
    4724:	f8 e2       	ldi	r31, 0x28	; 40
    4726:	ef 2e       	mov	r14, r31
    4728:	f1 2c       	mov	r15, r1
    472a:	f0 2d       	mov	r31, r0
    472c:	f9 82       	std	Y+1, r15	; 0x01
    472e:	e8 82       	st	Y, r14
    4730:	86 e0       	ldi	r24, 0x06	; 6
    4732:	8a 83       	std	Y+2, r24	; 0x02
    4734:	1b 82       	std	Y+3, r1	; 0x03
    4736:	14 e0       	ldi	r17, 0x04	; 4
    4738:	1c 83       	std	Y+4, r17	; 0x04
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	09 df       	rcall	.-494    	; 0x4550 <_turn_off>
    473e:	80 e8       	ldi	r24, 0x80	; 128
    4740:	87 b9       	out	0x07, r24	; 7
    4742:	ff 82       	std	Y+7, r15	; 0x07
    4744:	ee 82       	std	Y+6, r14	; 0x06
    4746:	87 e0       	ldi	r24, 0x07	; 7
    4748:	88 87       	std	Y+8, r24	; 0x08
    474a:	19 86       	std	Y+9, r1	; 0x09
    474c:	1a 87       	std	Y+10, r17	; 0x0a
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	ff de       	rcall	.-514    	; 0x4550 <_turn_off>
    4752:	80 e2       	ldi	r24, 0x20	; 32
    4754:	83 bb       	out	0x13, r24	; 19
    4756:	84 e3       	ldi	r24, 0x34	; 52
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	9d 87       	std	Y+13, r25	; 0x0d
    475c:	8c 87       	std	Y+12, r24	; 0x0c
    475e:	85 e0       	ldi	r24, 0x05	; 5
    4760:	8e 87       	std	Y+14, r24	; 0x0e
    4762:	1f 86       	std	Y+15, r1	; 0x0f
    4764:	18 8b       	std	Y+16, r17	; 0x10
    4766:	82 e0       	ldi	r24, 0x02	; 2
    4768:	f3 de       	rcall	.-538    	; 0x4550 <_turn_off>
    476a:	80 e1       	ldi	r24, 0x10	; 16
    476c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4770:	82 e0       	ldi	r24, 0x02	; 2
    4772:	91 e0       	ldi	r25, 0x01	; 1
    4774:	9b 8b       	std	Y+19, r25	; 0x13
    4776:	8a 8b       	std	Y+18, r24	; 0x12
    4778:	1c 8b       	std	Y+20, r17	; 0x14
    477a:	1d 8a       	std	Y+21, r1	; 0x15
    477c:	1e 8b       	std	Y+22, r17	; 0x16
    477e:	83 e0       	ldi	r24, 0x03	; 3
    4780:	e7 de       	rcall	.-562    	; 0x4550 <_turn_off>
    4782:	e1 2c       	mov	r14, r1
    4784:	f1 2c       	mov	r15, r1
    4786:	20 e0       	ldi	r18, 0x00	; 0
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	40 ec       	ldi	r20, 0xC0	; 192
    478c:	50 e0       	ldi	r21, 0x00	; 0
    478e:	67 e3       	ldi	r22, 0x37	; 55
    4790:	77 e0       	ldi	r23, 0x07	; 7
    4792:	80 e4       	ldi	r24, 0x40	; 64
    4794:	93 e2       	ldi	r25, 0x23	; 35
    4796:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskCreate>
    479a:	df 91       	pop	r29
    479c:	cf 91       	pop	r28
    479e:	1f 91       	pop	r17
    47a0:	0f 91       	pop	r16
    47a2:	ff 90       	pop	r15
    47a4:	ef 90       	pop	r14
    47a6:	08 95       	ret

000047a8 <status_leds_slowBlink>:
    47a8:	cf 93       	push	r28
    47aa:	df 93       	push	r29
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	fc 01       	movw	r30, r24
    47b0:	ee 0f       	add	r30, r30
    47b2:	ff 1f       	adc	r31, r31
    47b4:	df 01       	movw	r26, r30
    47b6:	a8 0f       	add	r26, r24
    47b8:	b9 1f       	adc	r27, r25
    47ba:	aa 0f       	add	r26, r26
    47bc:	bb 1f       	adc	r27, r27
    47be:	ad 55       	subi	r26, 0x5D	; 93
    47c0:	bc 4e       	sbci	r27, 0xEC	; 236
    47c2:	cd 91       	ld	r28, X+
    47c4:	dc 91       	ld	r29, X
    47c6:	11 97       	sbiw	r26, 0x01	; 1
    47c8:	48 81       	ld	r20, Y
    47ca:	21 e0       	ldi	r18, 0x01	; 1
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	12 96       	adiw	r26, 0x02	; 2
    47d0:	0c 90       	ld	r0, X
    47d2:	12 97       	sbiw	r26, 0x02	; 2
    47d4:	02 c0       	rjmp	.+4      	; 0x47da <status_leds_slowBlink+0x32>
    47d6:	22 0f       	add	r18, r18
    47d8:	33 1f       	adc	r19, r19
    47da:	0a 94       	dec	r0
    47dc:	e2 f7       	brpl	.-8      	; 0x47d6 <status_leds_slowBlink+0x2e>
    47de:	24 27       	eor	r18, r20
    47e0:	28 83       	st	Y, r18
    47e2:	fd 01       	movw	r30, r26
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	84 83       	std	Z+4, r24	; 0x04
    47e8:	df 91       	pop	r29
    47ea:	cf 91       	pop	r28
    47ec:	08 95       	ret

000047ee <status_leds_fastBlink>:
    47ee:	cf 93       	push	r28
    47f0:	df 93       	push	r29
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	fc 01       	movw	r30, r24
    47f6:	ee 0f       	add	r30, r30
    47f8:	ff 1f       	adc	r31, r31
    47fa:	df 01       	movw	r26, r30
    47fc:	a8 0f       	add	r26, r24
    47fe:	b9 1f       	adc	r27, r25
    4800:	aa 0f       	add	r26, r26
    4802:	bb 1f       	adc	r27, r27
    4804:	ad 55       	subi	r26, 0x5D	; 93
    4806:	bc 4e       	sbci	r27, 0xEC	; 236
    4808:	cd 91       	ld	r28, X+
    480a:	dc 91       	ld	r29, X
    480c:	11 97       	sbiw	r26, 0x01	; 1
    480e:	48 81       	ld	r20, Y
    4810:	21 e0       	ldi	r18, 0x01	; 1
    4812:	30 e0       	ldi	r19, 0x00	; 0
    4814:	12 96       	adiw	r26, 0x02	; 2
    4816:	0c 90       	ld	r0, X
    4818:	12 97       	sbiw	r26, 0x02	; 2
    481a:	02 c0       	rjmp	.+4      	; 0x4820 <status_leds_fastBlink+0x32>
    481c:	22 0f       	add	r18, r18
    481e:	33 1f       	adc	r19, r19
    4820:	0a 94       	dec	r0
    4822:	e2 f7       	brpl	.-8      	; 0x481c <status_leds_fastBlink+0x2e>
    4824:	24 27       	eor	r18, r20
    4826:	28 83       	st	Y, r18
    4828:	fd 01       	movw	r30, r26
    482a:	82 e0       	ldi	r24, 0x02	; 2
    482c:	84 83       	std	Z+4, r24	; 0x04
    482e:	df 91       	pop	r29
    4830:	cf 91       	pop	r28
    4832:	08 95       	ret

00004834 <status_leds_ledOn>:
    4834:	28 2f       	mov	r18, r24
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	f9 01       	movw	r30, r18
    483a:	ee 0f       	add	r30, r30
    483c:	ff 1f       	adc	r31, r31
    483e:	e2 0f       	add	r30, r18
    4840:	f3 1f       	adc	r31, r19
    4842:	ee 0f       	add	r30, r30
    4844:	ff 1f       	adc	r31, r31
    4846:	ed 55       	subi	r30, 0x5D	; 93
    4848:	fc 4e       	sbci	r31, 0xEC	; 236
    484a:	93 e0       	ldi	r25, 0x03	; 3
    484c:	94 83       	std	Z+4, r25	; 0x04
    484e:	cc ce       	rjmp	.-616    	; 0x45e8 <_turn_on>
    4850:	08 95       	ret

00004852 <status_leds_ledOff>:
    4852:	28 2f       	mov	r18, r24
    4854:	30 e0       	ldi	r19, 0x00	; 0
    4856:	f9 01       	movw	r30, r18
    4858:	ee 0f       	add	r30, r30
    485a:	ff 1f       	adc	r31, r31
    485c:	e2 0f       	add	r30, r18
    485e:	f3 1f       	adc	r31, r19
    4860:	ee 0f       	add	r30, r30
    4862:	ff 1f       	adc	r31, r31
    4864:	ed 55       	subi	r30, 0x5D	; 93
    4866:	fc 4e       	sbci	r31, 0xEC	; 236
    4868:	94 e0       	ldi	r25, 0x04	; 4
    486a:	94 83       	std	Z+4, r25	; 0x04
    486c:	71 ce       	rjmp	.-798    	; 0x4550 <_turn_off>
    486e:	08 95       	ret

00004870 <status_leds_longPuls>:
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	fc 01       	movw	r30, r24
    4874:	ee 0f       	add	r30, r30
    4876:	ff 1f       	adc	r31, r31
    4878:	df 01       	movw	r26, r30
    487a:	a8 0f       	add	r26, r24
    487c:	b9 1f       	adc	r27, r25
    487e:	aa 0f       	add	r26, r26
    4880:	bb 1f       	adc	r27, r27
    4882:	ad 55       	subi	r26, 0x5D	; 93
    4884:	bc 4e       	sbci	r27, 0xEC	; 236
    4886:	24 e0       	ldi	r18, 0x04	; 4
    4888:	15 96       	adiw	r26, 0x05	; 5
    488a:	2c 93       	st	X, r18
    488c:	15 97       	sbiw	r26, 0x05	; 5
    488e:	fd 01       	movw	r30, r26
    4890:	14 82       	std	Z+4, r1	; 0x04
    4892:	08 95       	ret

00004894 <status_leds_shortPuls>:
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	fc 01       	movw	r30, r24
    4898:	ee 0f       	add	r30, r30
    489a:	ff 1f       	adc	r31, r31
    489c:	df 01       	movw	r26, r30
    489e:	a8 0f       	add	r26, r24
    48a0:	b9 1f       	adc	r27, r25
    48a2:	aa 0f       	add	r26, r26
    48a4:	bb 1f       	adc	r27, r27
    48a6:	ad 55       	subi	r26, 0x5D	; 93
    48a8:	bc 4e       	sbci	r27, 0xEC	; 236
    48aa:	21 e0       	ldi	r18, 0x01	; 1
    48ac:	15 96       	adiw	r26, 0x05	; 5
    48ae:	2c 93       	st	X, r18
    48b0:	15 97       	sbiw	r26, 0x05	; 5
    48b2:	fd 01       	movw	r30, r26
    48b4:	14 82       	std	Z+4, r1	; 0x04
    48b6:	08 95       	ret

000048b8 <fifo_init>:
    48b8:	fc 01       	movw	r30, r24
    48ba:	41 11       	cpse	r20, r1
    48bc:	01 c0       	rjmp	.+2      	; 0x48c0 <fifo_init+0x8>
    48be:	45 d3       	rcall	.+1674   	; 0x4f4a <abort>
    48c0:	84 2f       	mov	r24, r20
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	9c 01       	movw	r18, r24
    48c6:	21 50       	subi	r18, 0x01	; 1
    48c8:	31 09       	sbc	r19, r1
    48ca:	82 23       	and	r24, r18
    48cc:	93 23       	and	r25, r19
    48ce:	89 2b       	or	r24, r25
    48d0:	09 f0       	breq	.+2      	; 0x48d4 <fifo_init+0x1c>
    48d2:	3b d3       	rcall	.+1654   	; 0x4f4a <abort>
    48d4:	41 38       	cpi	r20, 0x81	; 129
    48d6:	08 f0       	brcs	.+2      	; 0x48da <fifo_init+0x22>
    48d8:	38 d3       	rcall	.+1648   	; 0x4f4a <abort>
    48da:	12 82       	std	Z+2, r1	; 0x02
    48dc:	13 82       	std	Z+3, r1	; 0x03
    48de:	44 83       	std	Z+4, r20	; 0x04
    48e0:	44 0f       	add	r20, r20
    48e2:	41 50       	subi	r20, 0x01	; 1
    48e4:	45 83       	std	Z+5, r20	; 0x05
    48e6:	71 83       	std	Z+1, r23	; 0x01
    48e8:	60 83       	st	Z, r22
    48ea:	80 e0       	ldi	r24, 0x00	; 0
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	08 95       	ret

000048f0 <__subsf3>:
    48f0:	50 58       	subi	r21, 0x80	; 128

000048f2 <__addsf3>:
    48f2:	bb 27       	eor	r27, r27
    48f4:	aa 27       	eor	r26, r26
    48f6:	0e d0       	rcall	.+28     	; 0x4914 <__addsf3x>
    48f8:	48 c1       	rjmp	.+656    	; 0x4b8a <__fp_round>
    48fa:	39 d1       	rcall	.+626    	; 0x4b6e <__fp_pscA>
    48fc:	30 f0       	brcs	.+12     	; 0x490a <__addsf3+0x18>
    48fe:	3e d1       	rcall	.+636    	; 0x4b7c <__fp_pscB>
    4900:	20 f0       	brcs	.+8      	; 0x490a <__addsf3+0x18>
    4902:	31 f4       	brne	.+12     	; 0x4910 <__addsf3+0x1e>
    4904:	9f 3f       	cpi	r25, 0xFF	; 255
    4906:	11 f4       	brne	.+4      	; 0x490c <__addsf3+0x1a>
    4908:	1e f4       	brtc	.+6      	; 0x4910 <__addsf3+0x1e>
    490a:	2e c1       	rjmp	.+604    	; 0x4b68 <__fp_nan>
    490c:	0e f4       	brtc	.+2      	; 0x4910 <__addsf3+0x1e>
    490e:	e0 95       	com	r30
    4910:	e7 fb       	bst	r30, 7
    4912:	24 c1       	rjmp	.+584    	; 0x4b5c <__fp_inf>

00004914 <__addsf3x>:
    4914:	e9 2f       	mov	r30, r25
    4916:	4a d1       	rcall	.+660    	; 0x4bac <__fp_split3>
    4918:	80 f3       	brcs	.-32     	; 0x48fa <__addsf3+0x8>
    491a:	ba 17       	cp	r27, r26
    491c:	62 07       	cpc	r22, r18
    491e:	73 07       	cpc	r23, r19
    4920:	84 07       	cpc	r24, r20
    4922:	95 07       	cpc	r25, r21
    4924:	18 f0       	brcs	.+6      	; 0x492c <__addsf3x+0x18>
    4926:	71 f4       	brne	.+28     	; 0x4944 <__addsf3x+0x30>
    4928:	9e f5       	brtc	.+102    	; 0x4990 <__addsf3x+0x7c>
    492a:	62 c1       	rjmp	.+708    	; 0x4bf0 <__fp_zero>
    492c:	0e f4       	brtc	.+2      	; 0x4930 <__addsf3x+0x1c>
    492e:	e0 95       	com	r30
    4930:	0b 2e       	mov	r0, r27
    4932:	ba 2f       	mov	r27, r26
    4934:	a0 2d       	mov	r26, r0
    4936:	0b 01       	movw	r0, r22
    4938:	b9 01       	movw	r22, r18
    493a:	90 01       	movw	r18, r0
    493c:	0c 01       	movw	r0, r24
    493e:	ca 01       	movw	r24, r20
    4940:	a0 01       	movw	r20, r0
    4942:	11 24       	eor	r1, r1
    4944:	ff 27       	eor	r31, r31
    4946:	59 1b       	sub	r21, r25
    4948:	99 f0       	breq	.+38     	; 0x4970 <__addsf3x+0x5c>
    494a:	59 3f       	cpi	r21, 0xF9	; 249
    494c:	50 f4       	brcc	.+20     	; 0x4962 <__addsf3x+0x4e>
    494e:	50 3e       	cpi	r21, 0xE0	; 224
    4950:	68 f1       	brcs	.+90     	; 0x49ac <__addsf3x+0x98>
    4952:	1a 16       	cp	r1, r26
    4954:	f0 40       	sbci	r31, 0x00	; 0
    4956:	a2 2f       	mov	r26, r18
    4958:	23 2f       	mov	r18, r19
    495a:	34 2f       	mov	r19, r20
    495c:	44 27       	eor	r20, r20
    495e:	58 5f       	subi	r21, 0xF8	; 248
    4960:	f3 cf       	rjmp	.-26     	; 0x4948 <__addsf3x+0x34>
    4962:	46 95       	lsr	r20
    4964:	37 95       	ror	r19
    4966:	27 95       	ror	r18
    4968:	a7 95       	ror	r26
    496a:	f0 40       	sbci	r31, 0x00	; 0
    496c:	53 95       	inc	r21
    496e:	c9 f7       	brne	.-14     	; 0x4962 <__addsf3x+0x4e>
    4970:	7e f4       	brtc	.+30     	; 0x4990 <__addsf3x+0x7c>
    4972:	1f 16       	cp	r1, r31
    4974:	ba 0b       	sbc	r27, r26
    4976:	62 0b       	sbc	r22, r18
    4978:	73 0b       	sbc	r23, r19
    497a:	84 0b       	sbc	r24, r20
    497c:	ba f0       	brmi	.+46     	; 0x49ac <__addsf3x+0x98>
    497e:	91 50       	subi	r25, 0x01	; 1
    4980:	a1 f0       	breq	.+40     	; 0x49aa <__addsf3x+0x96>
    4982:	ff 0f       	add	r31, r31
    4984:	bb 1f       	adc	r27, r27
    4986:	66 1f       	adc	r22, r22
    4988:	77 1f       	adc	r23, r23
    498a:	88 1f       	adc	r24, r24
    498c:	c2 f7       	brpl	.-16     	; 0x497e <__addsf3x+0x6a>
    498e:	0e c0       	rjmp	.+28     	; 0x49ac <__addsf3x+0x98>
    4990:	ba 0f       	add	r27, r26
    4992:	62 1f       	adc	r22, r18
    4994:	73 1f       	adc	r23, r19
    4996:	84 1f       	adc	r24, r20
    4998:	48 f4       	brcc	.+18     	; 0x49ac <__addsf3x+0x98>
    499a:	87 95       	ror	r24
    499c:	77 95       	ror	r23
    499e:	67 95       	ror	r22
    49a0:	b7 95       	ror	r27
    49a2:	f7 95       	ror	r31
    49a4:	9e 3f       	cpi	r25, 0xFE	; 254
    49a6:	08 f0       	brcs	.+2      	; 0x49aa <__addsf3x+0x96>
    49a8:	b3 cf       	rjmp	.-154    	; 0x4910 <__addsf3+0x1e>
    49aa:	93 95       	inc	r25
    49ac:	88 0f       	add	r24, r24
    49ae:	08 f0       	brcs	.+2      	; 0x49b2 <__addsf3x+0x9e>
    49b0:	99 27       	eor	r25, r25
    49b2:	ee 0f       	add	r30, r30
    49b4:	97 95       	ror	r25
    49b6:	87 95       	ror	r24
    49b8:	08 95       	ret

000049ba <__divsf3>:
    49ba:	0c d0       	rcall	.+24     	; 0x49d4 <__divsf3x>
    49bc:	e6 c0       	rjmp	.+460    	; 0x4b8a <__fp_round>
    49be:	de d0       	rcall	.+444    	; 0x4b7c <__fp_pscB>
    49c0:	40 f0       	brcs	.+16     	; 0x49d2 <__divsf3+0x18>
    49c2:	d5 d0       	rcall	.+426    	; 0x4b6e <__fp_pscA>
    49c4:	30 f0       	brcs	.+12     	; 0x49d2 <__divsf3+0x18>
    49c6:	21 f4       	brne	.+8      	; 0x49d0 <__divsf3+0x16>
    49c8:	5f 3f       	cpi	r21, 0xFF	; 255
    49ca:	19 f0       	breq	.+6      	; 0x49d2 <__divsf3+0x18>
    49cc:	c7 c0       	rjmp	.+398    	; 0x4b5c <__fp_inf>
    49ce:	51 11       	cpse	r21, r1
    49d0:	10 c1       	rjmp	.+544    	; 0x4bf2 <__fp_szero>
    49d2:	ca c0       	rjmp	.+404    	; 0x4b68 <__fp_nan>

000049d4 <__divsf3x>:
    49d4:	eb d0       	rcall	.+470    	; 0x4bac <__fp_split3>
    49d6:	98 f3       	brcs	.-26     	; 0x49be <__divsf3+0x4>

000049d8 <__divsf3_pse>:
    49d8:	99 23       	and	r25, r25
    49da:	c9 f3       	breq	.-14     	; 0x49ce <__divsf3+0x14>
    49dc:	55 23       	and	r21, r21
    49de:	b1 f3       	breq	.-20     	; 0x49cc <__divsf3+0x12>
    49e0:	95 1b       	sub	r25, r21
    49e2:	55 0b       	sbc	r21, r21
    49e4:	bb 27       	eor	r27, r27
    49e6:	aa 27       	eor	r26, r26
    49e8:	62 17       	cp	r22, r18
    49ea:	73 07       	cpc	r23, r19
    49ec:	84 07       	cpc	r24, r20
    49ee:	38 f0       	brcs	.+14     	; 0x49fe <__divsf3_pse+0x26>
    49f0:	9f 5f       	subi	r25, 0xFF	; 255
    49f2:	5f 4f       	sbci	r21, 0xFF	; 255
    49f4:	22 0f       	add	r18, r18
    49f6:	33 1f       	adc	r19, r19
    49f8:	44 1f       	adc	r20, r20
    49fa:	aa 1f       	adc	r26, r26
    49fc:	a9 f3       	breq	.-22     	; 0x49e8 <__divsf3_pse+0x10>
    49fe:	33 d0       	rcall	.+102    	; 0x4a66 <__divsf3_pse+0x8e>
    4a00:	0e 2e       	mov	r0, r30
    4a02:	3a f0       	brmi	.+14     	; 0x4a12 <__divsf3_pse+0x3a>
    4a04:	e0 e8       	ldi	r30, 0x80	; 128
    4a06:	30 d0       	rcall	.+96     	; 0x4a68 <__divsf3_pse+0x90>
    4a08:	91 50       	subi	r25, 0x01	; 1
    4a0a:	50 40       	sbci	r21, 0x00	; 0
    4a0c:	e6 95       	lsr	r30
    4a0e:	00 1c       	adc	r0, r0
    4a10:	ca f7       	brpl	.-14     	; 0x4a04 <__divsf3_pse+0x2c>
    4a12:	29 d0       	rcall	.+82     	; 0x4a66 <__divsf3_pse+0x8e>
    4a14:	fe 2f       	mov	r31, r30
    4a16:	27 d0       	rcall	.+78     	; 0x4a66 <__divsf3_pse+0x8e>
    4a18:	66 0f       	add	r22, r22
    4a1a:	77 1f       	adc	r23, r23
    4a1c:	88 1f       	adc	r24, r24
    4a1e:	bb 1f       	adc	r27, r27
    4a20:	26 17       	cp	r18, r22
    4a22:	37 07       	cpc	r19, r23
    4a24:	48 07       	cpc	r20, r24
    4a26:	ab 07       	cpc	r26, r27
    4a28:	b0 e8       	ldi	r27, 0x80	; 128
    4a2a:	09 f0       	breq	.+2      	; 0x4a2e <__divsf3_pse+0x56>
    4a2c:	bb 0b       	sbc	r27, r27
    4a2e:	80 2d       	mov	r24, r0
    4a30:	bf 01       	movw	r22, r30
    4a32:	ff 27       	eor	r31, r31
    4a34:	93 58       	subi	r25, 0x83	; 131
    4a36:	5f 4f       	sbci	r21, 0xFF	; 255
    4a38:	2a f0       	brmi	.+10     	; 0x4a44 <__divsf3_pse+0x6c>
    4a3a:	9e 3f       	cpi	r25, 0xFE	; 254
    4a3c:	51 05       	cpc	r21, r1
    4a3e:	68 f0       	brcs	.+26     	; 0x4a5a <__divsf3_pse+0x82>
    4a40:	8d c0       	rjmp	.+282    	; 0x4b5c <__fp_inf>
    4a42:	d7 c0       	rjmp	.+430    	; 0x4bf2 <__fp_szero>
    4a44:	5f 3f       	cpi	r21, 0xFF	; 255
    4a46:	ec f3       	brlt	.-6      	; 0x4a42 <__divsf3_pse+0x6a>
    4a48:	98 3e       	cpi	r25, 0xE8	; 232
    4a4a:	dc f3       	brlt	.-10     	; 0x4a42 <__divsf3_pse+0x6a>
    4a4c:	86 95       	lsr	r24
    4a4e:	77 95       	ror	r23
    4a50:	67 95       	ror	r22
    4a52:	b7 95       	ror	r27
    4a54:	f7 95       	ror	r31
    4a56:	9f 5f       	subi	r25, 0xFF	; 255
    4a58:	c9 f7       	brne	.-14     	; 0x4a4c <__divsf3_pse+0x74>
    4a5a:	88 0f       	add	r24, r24
    4a5c:	91 1d       	adc	r25, r1
    4a5e:	96 95       	lsr	r25
    4a60:	87 95       	ror	r24
    4a62:	97 f9       	bld	r25, 7
    4a64:	08 95       	ret
    4a66:	e1 e0       	ldi	r30, 0x01	; 1
    4a68:	66 0f       	add	r22, r22
    4a6a:	77 1f       	adc	r23, r23
    4a6c:	88 1f       	adc	r24, r24
    4a6e:	bb 1f       	adc	r27, r27
    4a70:	62 17       	cp	r22, r18
    4a72:	73 07       	cpc	r23, r19
    4a74:	84 07       	cpc	r24, r20
    4a76:	ba 07       	cpc	r27, r26
    4a78:	20 f0       	brcs	.+8      	; 0x4a82 <__divsf3_pse+0xaa>
    4a7a:	62 1b       	sub	r22, r18
    4a7c:	73 0b       	sbc	r23, r19
    4a7e:	84 0b       	sbc	r24, r20
    4a80:	ba 0b       	sbc	r27, r26
    4a82:	ee 1f       	adc	r30, r30
    4a84:	88 f7       	brcc	.-30     	; 0x4a68 <__divsf3_pse+0x90>
    4a86:	e0 95       	com	r30
    4a88:	08 95       	ret

00004a8a <__fixunssfsi>:
    4a8a:	98 d0       	rcall	.+304    	; 0x4bbc <__fp_splitA>
    4a8c:	88 f0       	brcs	.+34     	; 0x4ab0 <__fixunssfsi+0x26>
    4a8e:	9f 57       	subi	r25, 0x7F	; 127
    4a90:	90 f0       	brcs	.+36     	; 0x4ab6 <__fixunssfsi+0x2c>
    4a92:	b9 2f       	mov	r27, r25
    4a94:	99 27       	eor	r25, r25
    4a96:	b7 51       	subi	r27, 0x17	; 23
    4a98:	a0 f0       	brcs	.+40     	; 0x4ac2 <__fixunssfsi+0x38>
    4a9a:	d1 f0       	breq	.+52     	; 0x4ad0 <__fixunssfsi+0x46>
    4a9c:	66 0f       	add	r22, r22
    4a9e:	77 1f       	adc	r23, r23
    4aa0:	88 1f       	adc	r24, r24
    4aa2:	99 1f       	adc	r25, r25
    4aa4:	1a f0       	brmi	.+6      	; 0x4aac <__fixunssfsi+0x22>
    4aa6:	ba 95       	dec	r27
    4aa8:	c9 f7       	brne	.-14     	; 0x4a9c <__fixunssfsi+0x12>
    4aaa:	12 c0       	rjmp	.+36     	; 0x4ad0 <__fixunssfsi+0x46>
    4aac:	b1 30       	cpi	r27, 0x01	; 1
    4aae:	81 f0       	breq	.+32     	; 0x4ad0 <__fixunssfsi+0x46>
    4ab0:	9f d0       	rcall	.+318    	; 0x4bf0 <__fp_zero>
    4ab2:	b1 e0       	ldi	r27, 0x01	; 1
    4ab4:	08 95       	ret
    4ab6:	9c c0       	rjmp	.+312    	; 0x4bf0 <__fp_zero>
    4ab8:	67 2f       	mov	r22, r23
    4aba:	78 2f       	mov	r23, r24
    4abc:	88 27       	eor	r24, r24
    4abe:	b8 5f       	subi	r27, 0xF8	; 248
    4ac0:	39 f0       	breq	.+14     	; 0x4ad0 <__fixunssfsi+0x46>
    4ac2:	b9 3f       	cpi	r27, 0xF9	; 249
    4ac4:	cc f3       	brlt	.-14     	; 0x4ab8 <__fixunssfsi+0x2e>
    4ac6:	86 95       	lsr	r24
    4ac8:	77 95       	ror	r23
    4aca:	67 95       	ror	r22
    4acc:	b3 95       	inc	r27
    4ace:	d9 f7       	brne	.-10     	; 0x4ac6 <__fixunssfsi+0x3c>
    4ad0:	3e f4       	brtc	.+14     	; 0x4ae0 <__fixunssfsi+0x56>
    4ad2:	90 95       	com	r25
    4ad4:	80 95       	com	r24
    4ad6:	70 95       	com	r23
    4ad8:	61 95       	neg	r22
    4ada:	7f 4f       	sbci	r23, 0xFF	; 255
    4adc:	8f 4f       	sbci	r24, 0xFF	; 255
    4ade:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae0:	08 95       	ret

00004ae2 <__floatunsisf>:
    4ae2:	e8 94       	clt
    4ae4:	09 c0       	rjmp	.+18     	; 0x4af8 <__floatsisf+0x12>

00004ae6 <__floatsisf>:
    4ae6:	97 fb       	bst	r25, 7
    4ae8:	3e f4       	brtc	.+14     	; 0x4af8 <__floatsisf+0x12>
    4aea:	90 95       	com	r25
    4aec:	80 95       	com	r24
    4aee:	70 95       	com	r23
    4af0:	61 95       	neg	r22
    4af2:	7f 4f       	sbci	r23, 0xFF	; 255
    4af4:	8f 4f       	sbci	r24, 0xFF	; 255
    4af6:	9f 4f       	sbci	r25, 0xFF	; 255
    4af8:	99 23       	and	r25, r25
    4afa:	a9 f0       	breq	.+42     	; 0x4b26 <__floatsisf+0x40>
    4afc:	f9 2f       	mov	r31, r25
    4afe:	96 e9       	ldi	r25, 0x96	; 150
    4b00:	bb 27       	eor	r27, r27
    4b02:	93 95       	inc	r25
    4b04:	f6 95       	lsr	r31
    4b06:	87 95       	ror	r24
    4b08:	77 95       	ror	r23
    4b0a:	67 95       	ror	r22
    4b0c:	b7 95       	ror	r27
    4b0e:	f1 11       	cpse	r31, r1
    4b10:	f8 cf       	rjmp	.-16     	; 0x4b02 <__floatsisf+0x1c>
    4b12:	fa f4       	brpl	.+62     	; 0x4b52 <__floatsisf+0x6c>
    4b14:	bb 0f       	add	r27, r27
    4b16:	11 f4       	brne	.+4      	; 0x4b1c <__floatsisf+0x36>
    4b18:	60 ff       	sbrs	r22, 0
    4b1a:	1b c0       	rjmp	.+54     	; 0x4b52 <__floatsisf+0x6c>
    4b1c:	6f 5f       	subi	r22, 0xFF	; 255
    4b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b20:	8f 4f       	sbci	r24, 0xFF	; 255
    4b22:	9f 4f       	sbci	r25, 0xFF	; 255
    4b24:	16 c0       	rjmp	.+44     	; 0x4b52 <__floatsisf+0x6c>
    4b26:	88 23       	and	r24, r24
    4b28:	11 f0       	breq	.+4      	; 0x4b2e <__floatsisf+0x48>
    4b2a:	96 e9       	ldi	r25, 0x96	; 150
    4b2c:	11 c0       	rjmp	.+34     	; 0x4b50 <__floatsisf+0x6a>
    4b2e:	77 23       	and	r23, r23
    4b30:	21 f0       	breq	.+8      	; 0x4b3a <__floatsisf+0x54>
    4b32:	9e e8       	ldi	r25, 0x8E	; 142
    4b34:	87 2f       	mov	r24, r23
    4b36:	76 2f       	mov	r23, r22
    4b38:	05 c0       	rjmp	.+10     	; 0x4b44 <__floatsisf+0x5e>
    4b3a:	66 23       	and	r22, r22
    4b3c:	71 f0       	breq	.+28     	; 0x4b5a <__floatsisf+0x74>
    4b3e:	96 e8       	ldi	r25, 0x86	; 134
    4b40:	86 2f       	mov	r24, r22
    4b42:	70 e0       	ldi	r23, 0x00	; 0
    4b44:	60 e0       	ldi	r22, 0x00	; 0
    4b46:	2a f0       	brmi	.+10     	; 0x4b52 <__floatsisf+0x6c>
    4b48:	9a 95       	dec	r25
    4b4a:	66 0f       	add	r22, r22
    4b4c:	77 1f       	adc	r23, r23
    4b4e:	88 1f       	adc	r24, r24
    4b50:	da f7       	brpl	.-10     	; 0x4b48 <__floatsisf+0x62>
    4b52:	88 0f       	add	r24, r24
    4b54:	96 95       	lsr	r25
    4b56:	87 95       	ror	r24
    4b58:	97 f9       	bld	r25, 7
    4b5a:	08 95       	ret

00004b5c <__fp_inf>:
    4b5c:	97 f9       	bld	r25, 7
    4b5e:	9f 67       	ori	r25, 0x7F	; 127
    4b60:	80 e8       	ldi	r24, 0x80	; 128
    4b62:	70 e0       	ldi	r23, 0x00	; 0
    4b64:	60 e0       	ldi	r22, 0x00	; 0
    4b66:	08 95       	ret

00004b68 <__fp_nan>:
    4b68:	9f ef       	ldi	r25, 0xFF	; 255
    4b6a:	80 ec       	ldi	r24, 0xC0	; 192
    4b6c:	08 95       	ret

00004b6e <__fp_pscA>:
    4b6e:	00 24       	eor	r0, r0
    4b70:	0a 94       	dec	r0
    4b72:	16 16       	cp	r1, r22
    4b74:	17 06       	cpc	r1, r23
    4b76:	18 06       	cpc	r1, r24
    4b78:	09 06       	cpc	r0, r25
    4b7a:	08 95       	ret

00004b7c <__fp_pscB>:
    4b7c:	00 24       	eor	r0, r0
    4b7e:	0a 94       	dec	r0
    4b80:	12 16       	cp	r1, r18
    4b82:	13 06       	cpc	r1, r19
    4b84:	14 06       	cpc	r1, r20
    4b86:	05 06       	cpc	r0, r21
    4b88:	08 95       	ret

00004b8a <__fp_round>:
    4b8a:	09 2e       	mov	r0, r25
    4b8c:	03 94       	inc	r0
    4b8e:	00 0c       	add	r0, r0
    4b90:	11 f4       	brne	.+4      	; 0x4b96 <__fp_round+0xc>
    4b92:	88 23       	and	r24, r24
    4b94:	52 f0       	brmi	.+20     	; 0x4baa <__fp_round+0x20>
    4b96:	bb 0f       	add	r27, r27
    4b98:	40 f4       	brcc	.+16     	; 0x4baa <__fp_round+0x20>
    4b9a:	bf 2b       	or	r27, r31
    4b9c:	11 f4       	brne	.+4      	; 0x4ba2 <__fp_round+0x18>
    4b9e:	60 ff       	sbrs	r22, 0
    4ba0:	04 c0       	rjmp	.+8      	; 0x4baa <__fp_round+0x20>
    4ba2:	6f 5f       	subi	r22, 0xFF	; 255
    4ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    4baa:	08 95       	ret

00004bac <__fp_split3>:
    4bac:	57 fd       	sbrc	r21, 7
    4bae:	90 58       	subi	r25, 0x80	; 128
    4bb0:	44 0f       	add	r20, r20
    4bb2:	55 1f       	adc	r21, r21
    4bb4:	59 f0       	breq	.+22     	; 0x4bcc <__fp_splitA+0x10>
    4bb6:	5f 3f       	cpi	r21, 0xFF	; 255
    4bb8:	71 f0       	breq	.+28     	; 0x4bd6 <__fp_splitA+0x1a>
    4bba:	47 95       	ror	r20

00004bbc <__fp_splitA>:
    4bbc:	88 0f       	add	r24, r24
    4bbe:	97 fb       	bst	r25, 7
    4bc0:	99 1f       	adc	r25, r25
    4bc2:	61 f0       	breq	.+24     	; 0x4bdc <__fp_splitA+0x20>
    4bc4:	9f 3f       	cpi	r25, 0xFF	; 255
    4bc6:	79 f0       	breq	.+30     	; 0x4be6 <__fp_splitA+0x2a>
    4bc8:	87 95       	ror	r24
    4bca:	08 95       	ret
    4bcc:	12 16       	cp	r1, r18
    4bce:	13 06       	cpc	r1, r19
    4bd0:	14 06       	cpc	r1, r20
    4bd2:	55 1f       	adc	r21, r21
    4bd4:	f2 cf       	rjmp	.-28     	; 0x4bba <__fp_split3+0xe>
    4bd6:	46 95       	lsr	r20
    4bd8:	f1 df       	rcall	.-30     	; 0x4bbc <__fp_splitA>
    4bda:	08 c0       	rjmp	.+16     	; 0x4bec <__fp_splitA+0x30>
    4bdc:	16 16       	cp	r1, r22
    4bde:	17 06       	cpc	r1, r23
    4be0:	18 06       	cpc	r1, r24
    4be2:	99 1f       	adc	r25, r25
    4be4:	f1 cf       	rjmp	.-30     	; 0x4bc8 <__fp_splitA+0xc>
    4be6:	86 95       	lsr	r24
    4be8:	71 05       	cpc	r23, r1
    4bea:	61 05       	cpc	r22, r1
    4bec:	08 94       	sec
    4bee:	08 95       	ret

00004bf0 <__fp_zero>:
    4bf0:	e8 94       	clt

00004bf2 <__fp_szero>:
    4bf2:	bb 27       	eor	r27, r27
    4bf4:	66 27       	eor	r22, r22
    4bf6:	77 27       	eor	r23, r23
    4bf8:	cb 01       	movw	r24, r22
    4bfa:	97 f9       	bld	r25, 7
    4bfc:	08 95       	ret

00004bfe <__mulsf3>:
    4bfe:	0b d0       	rcall	.+22     	; 0x4c16 <__mulsf3x>
    4c00:	c4 cf       	rjmp	.-120    	; 0x4b8a <__fp_round>
    4c02:	b5 df       	rcall	.-150    	; 0x4b6e <__fp_pscA>
    4c04:	28 f0       	brcs	.+10     	; 0x4c10 <__mulsf3+0x12>
    4c06:	ba df       	rcall	.-140    	; 0x4b7c <__fp_pscB>
    4c08:	18 f0       	brcs	.+6      	; 0x4c10 <__mulsf3+0x12>
    4c0a:	95 23       	and	r25, r21
    4c0c:	09 f0       	breq	.+2      	; 0x4c10 <__mulsf3+0x12>
    4c0e:	a6 cf       	rjmp	.-180    	; 0x4b5c <__fp_inf>
    4c10:	ab cf       	rjmp	.-170    	; 0x4b68 <__fp_nan>
    4c12:	11 24       	eor	r1, r1
    4c14:	ee cf       	rjmp	.-36     	; 0x4bf2 <__fp_szero>

00004c16 <__mulsf3x>:
    4c16:	ca df       	rcall	.-108    	; 0x4bac <__fp_split3>
    4c18:	a0 f3       	brcs	.-24     	; 0x4c02 <__mulsf3+0x4>

00004c1a <__mulsf3_pse>:
    4c1a:	95 9f       	mul	r25, r21
    4c1c:	d1 f3       	breq	.-12     	; 0x4c12 <__mulsf3+0x14>
    4c1e:	95 0f       	add	r25, r21
    4c20:	50 e0       	ldi	r21, 0x00	; 0
    4c22:	55 1f       	adc	r21, r21
    4c24:	62 9f       	mul	r22, r18
    4c26:	f0 01       	movw	r30, r0
    4c28:	72 9f       	mul	r23, r18
    4c2a:	bb 27       	eor	r27, r27
    4c2c:	f0 0d       	add	r31, r0
    4c2e:	b1 1d       	adc	r27, r1
    4c30:	63 9f       	mul	r22, r19
    4c32:	aa 27       	eor	r26, r26
    4c34:	f0 0d       	add	r31, r0
    4c36:	b1 1d       	adc	r27, r1
    4c38:	aa 1f       	adc	r26, r26
    4c3a:	64 9f       	mul	r22, r20
    4c3c:	66 27       	eor	r22, r22
    4c3e:	b0 0d       	add	r27, r0
    4c40:	a1 1d       	adc	r26, r1
    4c42:	66 1f       	adc	r22, r22
    4c44:	82 9f       	mul	r24, r18
    4c46:	22 27       	eor	r18, r18
    4c48:	b0 0d       	add	r27, r0
    4c4a:	a1 1d       	adc	r26, r1
    4c4c:	62 1f       	adc	r22, r18
    4c4e:	73 9f       	mul	r23, r19
    4c50:	b0 0d       	add	r27, r0
    4c52:	a1 1d       	adc	r26, r1
    4c54:	62 1f       	adc	r22, r18
    4c56:	83 9f       	mul	r24, r19
    4c58:	a0 0d       	add	r26, r0
    4c5a:	61 1d       	adc	r22, r1
    4c5c:	22 1f       	adc	r18, r18
    4c5e:	74 9f       	mul	r23, r20
    4c60:	33 27       	eor	r19, r19
    4c62:	a0 0d       	add	r26, r0
    4c64:	61 1d       	adc	r22, r1
    4c66:	23 1f       	adc	r18, r19
    4c68:	84 9f       	mul	r24, r20
    4c6a:	60 0d       	add	r22, r0
    4c6c:	21 1d       	adc	r18, r1
    4c6e:	82 2f       	mov	r24, r18
    4c70:	76 2f       	mov	r23, r22
    4c72:	6a 2f       	mov	r22, r26
    4c74:	11 24       	eor	r1, r1
    4c76:	9f 57       	subi	r25, 0x7F	; 127
    4c78:	50 40       	sbci	r21, 0x00	; 0
    4c7a:	8a f0       	brmi	.+34     	; 0x4c9e <__mulsf3_pse+0x84>
    4c7c:	e1 f0       	breq	.+56     	; 0x4cb6 <__mulsf3_pse+0x9c>
    4c7e:	88 23       	and	r24, r24
    4c80:	4a f0       	brmi	.+18     	; 0x4c94 <__mulsf3_pse+0x7a>
    4c82:	ee 0f       	add	r30, r30
    4c84:	ff 1f       	adc	r31, r31
    4c86:	bb 1f       	adc	r27, r27
    4c88:	66 1f       	adc	r22, r22
    4c8a:	77 1f       	adc	r23, r23
    4c8c:	88 1f       	adc	r24, r24
    4c8e:	91 50       	subi	r25, 0x01	; 1
    4c90:	50 40       	sbci	r21, 0x00	; 0
    4c92:	a9 f7       	brne	.-22     	; 0x4c7e <__mulsf3_pse+0x64>
    4c94:	9e 3f       	cpi	r25, 0xFE	; 254
    4c96:	51 05       	cpc	r21, r1
    4c98:	70 f0       	brcs	.+28     	; 0x4cb6 <__mulsf3_pse+0x9c>
    4c9a:	60 cf       	rjmp	.-320    	; 0x4b5c <__fp_inf>
    4c9c:	aa cf       	rjmp	.-172    	; 0x4bf2 <__fp_szero>
    4c9e:	5f 3f       	cpi	r21, 0xFF	; 255
    4ca0:	ec f3       	brlt	.-6      	; 0x4c9c <__mulsf3_pse+0x82>
    4ca2:	98 3e       	cpi	r25, 0xE8	; 232
    4ca4:	dc f3       	brlt	.-10     	; 0x4c9c <__mulsf3_pse+0x82>
    4ca6:	86 95       	lsr	r24
    4ca8:	77 95       	ror	r23
    4caa:	67 95       	ror	r22
    4cac:	b7 95       	ror	r27
    4cae:	f7 95       	ror	r31
    4cb0:	e7 95       	ror	r30
    4cb2:	9f 5f       	subi	r25, 0xFF	; 255
    4cb4:	c1 f7       	brne	.-16     	; 0x4ca6 <__mulsf3_pse+0x8c>
    4cb6:	fe 2b       	or	r31, r30
    4cb8:	88 0f       	add	r24, r24
    4cba:	91 1d       	adc	r25, r1
    4cbc:	96 95       	lsr	r25
    4cbe:	87 95       	ror	r24
    4cc0:	97 f9       	bld	r25, 7
    4cc2:	08 95       	ret

00004cc4 <__tablejump2__>:
    4cc4:	ee 0f       	add	r30, r30
    4cc6:	ff 1f       	adc	r31, r31
    4cc8:	88 1f       	adc	r24, r24
    4cca:	8b bf       	out	0x3b, r24	; 59
    4ccc:	07 90       	elpm	r0, Z+
    4cce:	f6 91       	elpm	r31, Z
    4cd0:	e0 2d       	mov	r30, r0
    4cd2:	19 94       	eijmp

00004cd4 <calloc>:
    4cd4:	0f 93       	push	r16
    4cd6:	1f 93       	push	r17
    4cd8:	cf 93       	push	r28
    4cda:	df 93       	push	r29
    4cdc:	86 9f       	mul	r24, r22
    4cde:	80 01       	movw	r16, r0
    4ce0:	87 9f       	mul	r24, r23
    4ce2:	10 0d       	add	r17, r0
    4ce4:	96 9f       	mul	r25, r22
    4ce6:	10 0d       	add	r17, r0
    4ce8:	11 24       	eor	r1, r1
    4cea:	c8 01       	movw	r24, r16
    4cec:	0d d0       	rcall	.+26     	; 0x4d08 <malloc>
    4cee:	ec 01       	movw	r28, r24
    4cf0:	00 97       	sbiw	r24, 0x00	; 0
    4cf2:	21 f0       	breq	.+8      	; 0x4cfc <calloc+0x28>
    4cf4:	a8 01       	movw	r20, r16
    4cf6:	60 e0       	ldi	r22, 0x00	; 0
    4cf8:	70 e0       	ldi	r23, 0x00	; 0
    4cfa:	34 d1       	rcall	.+616    	; 0x4f64 <memset>
    4cfc:	ce 01       	movw	r24, r28
    4cfe:	df 91       	pop	r29
    4d00:	cf 91       	pop	r28
    4d02:	1f 91       	pop	r17
    4d04:	0f 91       	pop	r16
    4d06:	08 95       	ret

00004d08 <malloc>:
    4d08:	0f 93       	push	r16
    4d0a:	1f 93       	push	r17
    4d0c:	cf 93       	push	r28
    4d0e:	df 93       	push	r29
    4d10:	82 30       	cpi	r24, 0x02	; 2
    4d12:	91 05       	cpc	r25, r1
    4d14:	10 f4       	brcc	.+4      	; 0x4d1a <malloc+0x12>
    4d16:	82 e0       	ldi	r24, 0x02	; 2
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	e0 91 c9 13 	lds	r30, 0x13C9	; 0x8013c9 <__flp>
    4d1e:	f0 91 ca 13 	lds	r31, 0x13CA	; 0x8013ca <__flp+0x1>
    4d22:	20 e0       	ldi	r18, 0x00	; 0
    4d24:	30 e0       	ldi	r19, 0x00	; 0
    4d26:	a0 e0       	ldi	r26, 0x00	; 0
    4d28:	b0 e0       	ldi	r27, 0x00	; 0
    4d2a:	30 97       	sbiw	r30, 0x00	; 0
    4d2c:	19 f1       	breq	.+70     	; 0x4d74 <malloc+0x6c>
    4d2e:	40 81       	ld	r20, Z
    4d30:	51 81       	ldd	r21, Z+1	; 0x01
    4d32:	02 81       	ldd	r16, Z+2	; 0x02
    4d34:	13 81       	ldd	r17, Z+3	; 0x03
    4d36:	48 17       	cp	r20, r24
    4d38:	59 07       	cpc	r21, r25
    4d3a:	c8 f0       	brcs	.+50     	; 0x4d6e <malloc+0x66>
    4d3c:	84 17       	cp	r24, r20
    4d3e:	95 07       	cpc	r25, r21
    4d40:	69 f4       	brne	.+26     	; 0x4d5c <malloc+0x54>
    4d42:	10 97       	sbiw	r26, 0x00	; 0
    4d44:	31 f0       	breq	.+12     	; 0x4d52 <malloc+0x4a>
    4d46:	12 96       	adiw	r26, 0x02	; 2
    4d48:	0c 93       	st	X, r16
    4d4a:	12 97       	sbiw	r26, 0x02	; 2
    4d4c:	13 96       	adiw	r26, 0x03	; 3
    4d4e:	1c 93       	st	X, r17
    4d50:	27 c0       	rjmp	.+78     	; 0x4da0 <malloc+0x98>
    4d52:	00 93 c9 13 	sts	0x13C9, r16	; 0x8013c9 <__flp>
    4d56:	10 93 ca 13 	sts	0x13CA, r17	; 0x8013ca <__flp+0x1>
    4d5a:	22 c0       	rjmp	.+68     	; 0x4da0 <malloc+0x98>
    4d5c:	21 15       	cp	r18, r1
    4d5e:	31 05       	cpc	r19, r1
    4d60:	19 f0       	breq	.+6      	; 0x4d68 <malloc+0x60>
    4d62:	42 17       	cp	r20, r18
    4d64:	53 07       	cpc	r21, r19
    4d66:	18 f4       	brcc	.+6      	; 0x4d6e <malloc+0x66>
    4d68:	9a 01       	movw	r18, r20
    4d6a:	bd 01       	movw	r22, r26
    4d6c:	ef 01       	movw	r28, r30
    4d6e:	df 01       	movw	r26, r30
    4d70:	f8 01       	movw	r30, r16
    4d72:	db cf       	rjmp	.-74     	; 0x4d2a <malloc+0x22>
    4d74:	21 15       	cp	r18, r1
    4d76:	31 05       	cpc	r19, r1
    4d78:	f9 f0       	breq	.+62     	; 0x4db8 <malloc+0xb0>
    4d7a:	28 1b       	sub	r18, r24
    4d7c:	39 0b       	sbc	r19, r25
    4d7e:	24 30       	cpi	r18, 0x04	; 4
    4d80:	31 05       	cpc	r19, r1
    4d82:	80 f4       	brcc	.+32     	; 0x4da4 <malloc+0x9c>
    4d84:	8a 81       	ldd	r24, Y+2	; 0x02
    4d86:	9b 81       	ldd	r25, Y+3	; 0x03
    4d88:	61 15       	cp	r22, r1
    4d8a:	71 05       	cpc	r23, r1
    4d8c:	21 f0       	breq	.+8      	; 0x4d96 <malloc+0x8e>
    4d8e:	fb 01       	movw	r30, r22
    4d90:	93 83       	std	Z+3, r25	; 0x03
    4d92:	82 83       	std	Z+2, r24	; 0x02
    4d94:	04 c0       	rjmp	.+8      	; 0x4d9e <malloc+0x96>
    4d96:	90 93 ca 13 	sts	0x13CA, r25	; 0x8013ca <__flp+0x1>
    4d9a:	80 93 c9 13 	sts	0x13C9, r24	; 0x8013c9 <__flp>
    4d9e:	fe 01       	movw	r30, r28
    4da0:	32 96       	adiw	r30, 0x02	; 2
    4da2:	44 c0       	rjmp	.+136    	; 0x4e2c <malloc+0x124>
    4da4:	fe 01       	movw	r30, r28
    4da6:	e2 0f       	add	r30, r18
    4da8:	f3 1f       	adc	r31, r19
    4daa:	81 93       	st	Z+, r24
    4dac:	91 93       	st	Z+, r25
    4dae:	22 50       	subi	r18, 0x02	; 2
    4db0:	31 09       	sbc	r19, r1
    4db2:	39 83       	std	Y+1, r19	; 0x01
    4db4:	28 83       	st	Y, r18
    4db6:	3a c0       	rjmp	.+116    	; 0x4e2c <malloc+0x124>
    4db8:	20 91 c7 13 	lds	r18, 0x13C7	; 0x8013c7 <__brkval>
    4dbc:	30 91 c8 13 	lds	r19, 0x13C8	; 0x8013c8 <__brkval+0x1>
    4dc0:	23 2b       	or	r18, r19
    4dc2:	41 f4       	brne	.+16     	; 0x4dd4 <malloc+0xcc>
    4dc4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4dc8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4dcc:	30 93 c8 13 	sts	0x13C8, r19	; 0x8013c8 <__brkval+0x1>
    4dd0:	20 93 c7 13 	sts	0x13C7, r18	; 0x8013c7 <__brkval>
    4dd4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4dd8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4ddc:	21 15       	cp	r18, r1
    4dde:	31 05       	cpc	r19, r1
    4de0:	41 f4       	brne	.+16     	; 0x4df2 <malloc+0xea>
    4de2:	2d b7       	in	r18, 0x3d	; 61
    4de4:	3e b7       	in	r19, 0x3e	; 62
    4de6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4dea:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4dee:	24 1b       	sub	r18, r20
    4df0:	35 0b       	sbc	r19, r21
    4df2:	e0 91 c7 13 	lds	r30, 0x13C7	; 0x8013c7 <__brkval>
    4df6:	f0 91 c8 13 	lds	r31, 0x13C8	; 0x8013c8 <__brkval+0x1>
    4dfa:	e2 17       	cp	r30, r18
    4dfc:	f3 07       	cpc	r31, r19
    4dfe:	a0 f4       	brcc	.+40     	; 0x4e28 <malloc+0x120>
    4e00:	2e 1b       	sub	r18, r30
    4e02:	3f 0b       	sbc	r19, r31
    4e04:	28 17       	cp	r18, r24
    4e06:	39 07       	cpc	r19, r25
    4e08:	78 f0       	brcs	.+30     	; 0x4e28 <malloc+0x120>
    4e0a:	ac 01       	movw	r20, r24
    4e0c:	4e 5f       	subi	r20, 0xFE	; 254
    4e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e10:	24 17       	cp	r18, r20
    4e12:	35 07       	cpc	r19, r21
    4e14:	48 f0       	brcs	.+18     	; 0x4e28 <malloc+0x120>
    4e16:	4e 0f       	add	r20, r30
    4e18:	5f 1f       	adc	r21, r31
    4e1a:	50 93 c8 13 	sts	0x13C8, r21	; 0x8013c8 <__brkval+0x1>
    4e1e:	40 93 c7 13 	sts	0x13C7, r20	; 0x8013c7 <__brkval>
    4e22:	81 93       	st	Z+, r24
    4e24:	91 93       	st	Z+, r25
    4e26:	02 c0       	rjmp	.+4      	; 0x4e2c <malloc+0x124>
    4e28:	e0 e0       	ldi	r30, 0x00	; 0
    4e2a:	f0 e0       	ldi	r31, 0x00	; 0
    4e2c:	cf 01       	movw	r24, r30
    4e2e:	df 91       	pop	r29
    4e30:	cf 91       	pop	r28
    4e32:	1f 91       	pop	r17
    4e34:	0f 91       	pop	r16
    4e36:	08 95       	ret

00004e38 <free>:
    4e38:	cf 93       	push	r28
    4e3a:	df 93       	push	r29
    4e3c:	00 97       	sbiw	r24, 0x00	; 0
    4e3e:	09 f4       	brne	.+2      	; 0x4e42 <free+0xa>
    4e40:	81 c0       	rjmp	.+258    	; 0x4f44 <free+0x10c>
    4e42:	fc 01       	movw	r30, r24
    4e44:	32 97       	sbiw	r30, 0x02	; 2
    4e46:	13 82       	std	Z+3, r1	; 0x03
    4e48:	12 82       	std	Z+2, r1	; 0x02
    4e4a:	a0 91 c9 13 	lds	r26, 0x13C9	; 0x8013c9 <__flp>
    4e4e:	b0 91 ca 13 	lds	r27, 0x13CA	; 0x8013ca <__flp+0x1>
    4e52:	10 97       	sbiw	r26, 0x00	; 0
    4e54:	81 f4       	brne	.+32     	; 0x4e76 <free+0x3e>
    4e56:	20 81       	ld	r18, Z
    4e58:	31 81       	ldd	r19, Z+1	; 0x01
    4e5a:	82 0f       	add	r24, r18
    4e5c:	93 1f       	adc	r25, r19
    4e5e:	20 91 c7 13 	lds	r18, 0x13C7	; 0x8013c7 <__brkval>
    4e62:	30 91 c8 13 	lds	r19, 0x13C8	; 0x8013c8 <__brkval+0x1>
    4e66:	28 17       	cp	r18, r24
    4e68:	39 07       	cpc	r19, r25
    4e6a:	51 f5       	brne	.+84     	; 0x4ec0 <free+0x88>
    4e6c:	f0 93 c8 13 	sts	0x13C8, r31	; 0x8013c8 <__brkval+0x1>
    4e70:	e0 93 c7 13 	sts	0x13C7, r30	; 0x8013c7 <__brkval>
    4e74:	67 c0       	rjmp	.+206    	; 0x4f44 <free+0x10c>
    4e76:	ed 01       	movw	r28, r26
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	ce 17       	cp	r28, r30
    4e7e:	df 07       	cpc	r29, r31
    4e80:	40 f4       	brcc	.+16     	; 0x4e92 <free+0x5a>
    4e82:	4a 81       	ldd	r20, Y+2	; 0x02
    4e84:	5b 81       	ldd	r21, Y+3	; 0x03
    4e86:	9e 01       	movw	r18, r28
    4e88:	41 15       	cp	r20, r1
    4e8a:	51 05       	cpc	r21, r1
    4e8c:	f1 f0       	breq	.+60     	; 0x4eca <free+0x92>
    4e8e:	ea 01       	movw	r28, r20
    4e90:	f5 cf       	rjmp	.-22     	; 0x4e7c <free+0x44>
    4e92:	d3 83       	std	Z+3, r29	; 0x03
    4e94:	c2 83       	std	Z+2, r28	; 0x02
    4e96:	40 81       	ld	r20, Z
    4e98:	51 81       	ldd	r21, Z+1	; 0x01
    4e9a:	84 0f       	add	r24, r20
    4e9c:	95 1f       	adc	r25, r21
    4e9e:	c8 17       	cp	r28, r24
    4ea0:	d9 07       	cpc	r29, r25
    4ea2:	59 f4       	brne	.+22     	; 0x4eba <free+0x82>
    4ea4:	88 81       	ld	r24, Y
    4ea6:	99 81       	ldd	r25, Y+1	; 0x01
    4ea8:	84 0f       	add	r24, r20
    4eaa:	95 1f       	adc	r25, r21
    4eac:	02 96       	adiw	r24, 0x02	; 2
    4eae:	91 83       	std	Z+1, r25	; 0x01
    4eb0:	80 83       	st	Z, r24
    4eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    4eb6:	93 83       	std	Z+3, r25	; 0x03
    4eb8:	82 83       	std	Z+2, r24	; 0x02
    4eba:	21 15       	cp	r18, r1
    4ebc:	31 05       	cpc	r19, r1
    4ebe:	29 f4       	brne	.+10     	; 0x4eca <free+0x92>
    4ec0:	f0 93 ca 13 	sts	0x13CA, r31	; 0x8013ca <__flp+0x1>
    4ec4:	e0 93 c9 13 	sts	0x13C9, r30	; 0x8013c9 <__flp>
    4ec8:	3d c0       	rjmp	.+122    	; 0x4f44 <free+0x10c>
    4eca:	e9 01       	movw	r28, r18
    4ecc:	fb 83       	std	Y+3, r31	; 0x03
    4ece:	ea 83       	std	Y+2, r30	; 0x02
    4ed0:	49 91       	ld	r20, Y+
    4ed2:	59 91       	ld	r21, Y+
    4ed4:	c4 0f       	add	r28, r20
    4ed6:	d5 1f       	adc	r29, r21
    4ed8:	ec 17       	cp	r30, r28
    4eda:	fd 07       	cpc	r31, r29
    4edc:	61 f4       	brne	.+24     	; 0x4ef6 <free+0xbe>
    4ede:	80 81       	ld	r24, Z
    4ee0:	91 81       	ldd	r25, Z+1	; 0x01
    4ee2:	84 0f       	add	r24, r20
    4ee4:	95 1f       	adc	r25, r21
    4ee6:	02 96       	adiw	r24, 0x02	; 2
    4ee8:	e9 01       	movw	r28, r18
    4eea:	99 83       	std	Y+1, r25	; 0x01
    4eec:	88 83       	st	Y, r24
    4eee:	82 81       	ldd	r24, Z+2	; 0x02
    4ef0:	93 81       	ldd	r25, Z+3	; 0x03
    4ef2:	9b 83       	std	Y+3, r25	; 0x03
    4ef4:	8a 83       	std	Y+2, r24	; 0x02
    4ef6:	e0 e0       	ldi	r30, 0x00	; 0
    4ef8:	f0 e0       	ldi	r31, 0x00	; 0
    4efa:	12 96       	adiw	r26, 0x02	; 2
    4efc:	8d 91       	ld	r24, X+
    4efe:	9c 91       	ld	r25, X
    4f00:	13 97       	sbiw	r26, 0x03	; 3
    4f02:	00 97       	sbiw	r24, 0x00	; 0
    4f04:	19 f0       	breq	.+6      	; 0x4f0c <free+0xd4>
    4f06:	fd 01       	movw	r30, r26
    4f08:	dc 01       	movw	r26, r24
    4f0a:	f7 cf       	rjmp	.-18     	; 0x4efa <free+0xc2>
    4f0c:	8d 91       	ld	r24, X+
    4f0e:	9c 91       	ld	r25, X
    4f10:	11 97       	sbiw	r26, 0x01	; 1
    4f12:	9d 01       	movw	r18, r26
    4f14:	2e 5f       	subi	r18, 0xFE	; 254
    4f16:	3f 4f       	sbci	r19, 0xFF	; 255
    4f18:	82 0f       	add	r24, r18
    4f1a:	93 1f       	adc	r25, r19
    4f1c:	20 91 c7 13 	lds	r18, 0x13C7	; 0x8013c7 <__brkval>
    4f20:	30 91 c8 13 	lds	r19, 0x13C8	; 0x8013c8 <__brkval+0x1>
    4f24:	28 17       	cp	r18, r24
    4f26:	39 07       	cpc	r19, r25
    4f28:	69 f4       	brne	.+26     	; 0x4f44 <free+0x10c>
    4f2a:	30 97       	sbiw	r30, 0x00	; 0
    4f2c:	29 f4       	brne	.+10     	; 0x4f38 <free+0x100>
    4f2e:	10 92 ca 13 	sts	0x13CA, r1	; 0x8013ca <__flp+0x1>
    4f32:	10 92 c9 13 	sts	0x13C9, r1	; 0x8013c9 <__flp>
    4f36:	02 c0       	rjmp	.+4      	; 0x4f3c <free+0x104>
    4f38:	13 82       	std	Z+3, r1	; 0x03
    4f3a:	12 82       	std	Z+2, r1	; 0x02
    4f3c:	b0 93 c8 13 	sts	0x13C8, r27	; 0x8013c8 <__brkval+0x1>
    4f40:	a0 93 c7 13 	sts	0x13C7, r26	; 0x8013c7 <__brkval>
    4f44:	df 91       	pop	r29
    4f46:	cf 91       	pop	r28
    4f48:	08 95       	ret

00004f4a <abort>:
    4f4a:	81 e0       	ldi	r24, 0x01	; 1
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	f8 94       	cli
    4f50:	7d c3       	rjmp	.+1786   	; 0x564c <_exit>

00004f52 <memcpy>:
    4f52:	fb 01       	movw	r30, r22
    4f54:	dc 01       	movw	r26, r24
    4f56:	02 c0       	rjmp	.+4      	; 0x4f5c <memcpy+0xa>
    4f58:	01 90       	ld	r0, Z+
    4f5a:	0d 92       	st	X+, r0
    4f5c:	41 50       	subi	r20, 0x01	; 1
    4f5e:	50 40       	sbci	r21, 0x00	; 0
    4f60:	d8 f7       	brcc	.-10     	; 0x4f58 <memcpy+0x6>
    4f62:	08 95       	ret

00004f64 <memset>:
    4f64:	dc 01       	movw	r26, r24
    4f66:	01 c0       	rjmp	.+2      	; 0x4f6a <memset+0x6>
    4f68:	6d 93       	st	X+, r22
    4f6a:	41 50       	subi	r20, 0x01	; 1
    4f6c:	50 40       	sbci	r21, 0x00	; 0
    4f6e:	e0 f7       	brcc	.-8      	; 0x4f68 <memset+0x4>
    4f70:	08 95       	ret

00004f72 <strcasestr>:
    4f72:	fb 01       	movw	r30, r22
    4f74:	51 91       	ld	r21, Z+
    4f76:	55 23       	and	r21, r21
    4f78:	b1 f0       	breq	.+44     	; 0x4fa6 <strcasestr+0x34>
    4f7a:	bf 01       	movw	r22, r30
    4f7c:	dc 01       	movw	r26, r24
    4f7e:	05 2e       	mov	r0, r21
    4f80:	4d 91       	ld	r20, X+
    4f82:	44 23       	and	r20, r20
    4f84:	69 f0       	breq	.+26     	; 0x4fa0 <strcasestr+0x2e>
    4f86:	10 d0       	rcall	.+32     	; 0x4fa8 <strcasestr+0x36>
    4f88:	d9 f7       	brne	.-10     	; 0x4f80 <strcasestr+0xe>
    4f8a:	cd 01       	movw	r24, r26
    4f8c:	01 90       	ld	r0, Z+
    4f8e:	00 20       	and	r0, r0
    4f90:	49 f0       	breq	.+18     	; 0x4fa4 <strcasestr+0x32>
    4f92:	4d 91       	ld	r20, X+
    4f94:	41 11       	cpse	r20, r1
    4f96:	08 d0       	rcall	.+16     	; 0x4fa8 <strcasestr+0x36>
    4f98:	c9 f3       	breq	.-14     	; 0x4f8c <strcasestr+0x1a>
    4f9a:	fb 01       	movw	r30, r22
    4f9c:	41 11       	cpse	r20, r1
    4f9e:	ee cf       	rjmp	.-36     	; 0x4f7c <strcasestr+0xa>
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	01 97       	sbiw	r24, 0x01	; 1
    4fa6:	08 95       	ret
    4fa8:	40 25       	eor	r20, r0
    4faa:	39 f0       	breq	.+14     	; 0x4fba <strcasestr+0x48>
    4fac:	40 32       	cpi	r20, 0x20	; 32
    4fae:	29 f4       	brne	.+10     	; 0x4fba <strcasestr+0x48>
    4fb0:	40 29       	or	r20, r0
    4fb2:	4b 57       	subi	r20, 0x7B	; 123
    4fb4:	46 5e       	subi	r20, 0xE6	; 230
    4fb6:	08 f0       	brcs	.+2      	; 0x4fba <strcasestr+0x48>
    4fb8:	18 94       	sez
    4fba:	08 95       	ret

00004fbc <strcat>:
    4fbc:	fb 01       	movw	r30, r22
    4fbe:	dc 01       	movw	r26, r24
    4fc0:	0d 90       	ld	r0, X+
    4fc2:	00 20       	and	r0, r0
    4fc4:	e9 f7       	brne	.-6      	; 0x4fc0 <strcat+0x4>
    4fc6:	11 97       	sbiw	r26, 0x01	; 1
    4fc8:	01 90       	ld	r0, Z+
    4fca:	0d 92       	st	X+, r0
    4fcc:	00 20       	and	r0, r0
    4fce:	e1 f7       	brne	.-8      	; 0x4fc8 <strcat+0xc>
    4fd0:	08 95       	ret

00004fd2 <strcpy>:
    4fd2:	fb 01       	movw	r30, r22
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	01 90       	ld	r0, Z+
    4fd8:	0d 92       	st	X+, r0
    4fda:	00 20       	and	r0, r0
    4fdc:	e1 f7       	brne	.-8      	; 0x4fd6 <strcpy+0x4>
    4fde:	08 95       	ret

00004fe0 <strncasecmp>:
    4fe0:	fb 01       	movw	r30, r22
    4fe2:	dc 01       	movw	r26, r24
    4fe4:	41 50       	subi	r20, 0x01	; 1
    4fe6:	50 40       	sbci	r21, 0x00	; 0
    4fe8:	88 f0       	brcs	.+34     	; 0x500c <strncasecmp+0x2c>
    4fea:	8d 91       	ld	r24, X+
    4fec:	81 34       	cpi	r24, 0x41	; 65
    4fee:	1c f0       	brlt	.+6      	; 0x4ff6 <strncasecmp+0x16>
    4ff0:	8b 35       	cpi	r24, 0x5B	; 91
    4ff2:	0c f4       	brge	.+2      	; 0x4ff6 <strncasecmp+0x16>
    4ff4:	80 5e       	subi	r24, 0xE0	; 224
    4ff6:	61 91       	ld	r22, Z+
    4ff8:	61 34       	cpi	r22, 0x41	; 65
    4ffa:	1c f0       	brlt	.+6      	; 0x5002 <strncasecmp+0x22>
    4ffc:	6b 35       	cpi	r22, 0x5B	; 91
    4ffe:	0c f4       	brge	.+2      	; 0x5002 <strncasecmp+0x22>
    5000:	60 5e       	subi	r22, 0xE0	; 224
    5002:	86 1b       	sub	r24, r22
    5004:	61 11       	cpse	r22, r1
    5006:	71 f3       	breq	.-36     	; 0x4fe4 <strncasecmp+0x4>
    5008:	99 0b       	sbc	r25, r25
    500a:	08 95       	ret
    500c:	88 1b       	sub	r24, r24
    500e:	fc cf       	rjmp	.-8      	; 0x5008 <strncasecmp+0x28>

00005010 <printf>:
    5010:	cf 93       	push	r28
    5012:	df 93       	push	r29
    5014:	cd b7       	in	r28, 0x3d	; 61
    5016:	de b7       	in	r29, 0x3e	; 62
    5018:	ae 01       	movw	r20, r28
    501a:	4a 5f       	subi	r20, 0xFA	; 250
    501c:	5f 4f       	sbci	r21, 0xFF	; 255
    501e:	fa 01       	movw	r30, r20
    5020:	61 91       	ld	r22, Z+
    5022:	71 91       	ld	r23, Z+
    5024:	af 01       	movw	r20, r30
    5026:	80 91 cd 13 	lds	r24, 0x13CD	; 0x8013cd <__iob+0x2>
    502a:	90 91 ce 13 	lds	r25, 0x13CE	; 0x8013ce <__iob+0x3>
    502e:	61 d0       	rcall	.+194    	; 0x50f2 <vfprintf>
    5030:	df 91       	pop	r29
    5032:	cf 91       	pop	r28
    5034:	08 95       	ret

00005036 <puts>:
    5036:	0f 93       	push	r16
    5038:	1f 93       	push	r17
    503a:	cf 93       	push	r28
    503c:	df 93       	push	r29
    503e:	e0 91 cd 13 	lds	r30, 0x13CD	; 0x8013cd <__iob+0x2>
    5042:	f0 91 ce 13 	lds	r31, 0x13CE	; 0x8013ce <__iob+0x3>
    5046:	23 81       	ldd	r18, Z+3	; 0x03
    5048:	21 ff       	sbrs	r18, 1
    504a:	1b c0       	rjmp	.+54     	; 0x5082 <puts+0x4c>
    504c:	8c 01       	movw	r16, r24
    504e:	d0 e0       	ldi	r29, 0x00	; 0
    5050:	c0 e0       	ldi	r28, 0x00	; 0
    5052:	f8 01       	movw	r30, r16
    5054:	81 91       	ld	r24, Z+
    5056:	8f 01       	movw	r16, r30
    5058:	60 91 cd 13 	lds	r22, 0x13CD	; 0x8013cd <__iob+0x2>
    505c:	70 91 ce 13 	lds	r23, 0x13CE	; 0x8013ce <__iob+0x3>
    5060:	db 01       	movw	r26, r22
    5062:	18 96       	adiw	r26, 0x08	; 8
    5064:	ed 91       	ld	r30, X+
    5066:	fc 91       	ld	r31, X
    5068:	19 97       	sbiw	r26, 0x09	; 9
    506a:	88 23       	and	r24, r24
    506c:	31 f0       	breq	.+12     	; 0x507a <puts+0x44>
    506e:	19 95       	eicall
    5070:	89 2b       	or	r24, r25
    5072:	79 f3       	breq	.-34     	; 0x5052 <puts+0x1c>
    5074:	df ef       	ldi	r29, 0xFF	; 255
    5076:	cf ef       	ldi	r28, 0xFF	; 255
    5078:	ec cf       	rjmp	.-40     	; 0x5052 <puts+0x1c>
    507a:	8a e0       	ldi	r24, 0x0A	; 10
    507c:	19 95       	eicall
    507e:	89 2b       	or	r24, r25
    5080:	19 f0       	breq	.+6      	; 0x5088 <puts+0x52>
    5082:	8f ef       	ldi	r24, 0xFF	; 255
    5084:	9f ef       	ldi	r25, 0xFF	; 255
    5086:	02 c0       	rjmp	.+4      	; 0x508c <puts+0x56>
    5088:	8d 2f       	mov	r24, r29
    508a:	9c 2f       	mov	r25, r28
    508c:	df 91       	pop	r29
    508e:	cf 91       	pop	r28
    5090:	1f 91       	pop	r17
    5092:	0f 91       	pop	r16
    5094:	08 95       	ret

00005096 <sprintf>:
    5096:	0f 93       	push	r16
    5098:	1f 93       	push	r17
    509a:	cf 93       	push	r28
    509c:	df 93       	push	r29
    509e:	cd b7       	in	r28, 0x3d	; 61
    50a0:	de b7       	in	r29, 0x3e	; 62
    50a2:	2e 97       	sbiw	r28, 0x0e	; 14
    50a4:	0f b6       	in	r0, 0x3f	; 63
    50a6:	f8 94       	cli
    50a8:	de bf       	out	0x3e, r29	; 62
    50aa:	0f be       	out	0x3f, r0	; 63
    50ac:	cd bf       	out	0x3d, r28	; 61
    50ae:	0e 89       	ldd	r16, Y+22	; 0x16
    50b0:	1f 89       	ldd	r17, Y+23	; 0x17
    50b2:	86 e0       	ldi	r24, 0x06	; 6
    50b4:	8c 83       	std	Y+4, r24	; 0x04
    50b6:	1a 83       	std	Y+2, r17	; 0x02
    50b8:	09 83       	std	Y+1, r16	; 0x01
    50ba:	8f ef       	ldi	r24, 0xFF	; 255
    50bc:	9f e7       	ldi	r25, 0x7F	; 127
    50be:	9e 83       	std	Y+6, r25	; 0x06
    50c0:	8d 83       	std	Y+5, r24	; 0x05
    50c2:	ae 01       	movw	r20, r28
    50c4:	46 5e       	subi	r20, 0xE6	; 230
    50c6:	5f 4f       	sbci	r21, 0xFF	; 255
    50c8:	68 8d       	ldd	r22, Y+24	; 0x18
    50ca:	79 8d       	ldd	r23, Y+25	; 0x19
    50cc:	ce 01       	movw	r24, r28
    50ce:	01 96       	adiw	r24, 0x01	; 1
    50d0:	10 d0       	rcall	.+32     	; 0x50f2 <vfprintf>
    50d2:	ef 81       	ldd	r30, Y+7	; 0x07
    50d4:	f8 85       	ldd	r31, Y+8	; 0x08
    50d6:	e0 0f       	add	r30, r16
    50d8:	f1 1f       	adc	r31, r17
    50da:	10 82       	st	Z, r1
    50dc:	2e 96       	adiw	r28, 0x0e	; 14
    50de:	0f b6       	in	r0, 0x3f	; 63
    50e0:	f8 94       	cli
    50e2:	de bf       	out	0x3e, r29	; 62
    50e4:	0f be       	out	0x3f, r0	; 63
    50e6:	cd bf       	out	0x3d, r28	; 61
    50e8:	df 91       	pop	r29
    50ea:	cf 91       	pop	r28
    50ec:	1f 91       	pop	r17
    50ee:	0f 91       	pop	r16
    50f0:	08 95       	ret

000050f2 <vfprintf>:
    50f2:	2f 92       	push	r2
    50f4:	3f 92       	push	r3
    50f6:	4f 92       	push	r4
    50f8:	5f 92       	push	r5
    50fa:	6f 92       	push	r6
    50fc:	7f 92       	push	r7
    50fe:	8f 92       	push	r8
    5100:	9f 92       	push	r9
    5102:	af 92       	push	r10
    5104:	bf 92       	push	r11
    5106:	cf 92       	push	r12
    5108:	df 92       	push	r13
    510a:	ef 92       	push	r14
    510c:	ff 92       	push	r15
    510e:	0f 93       	push	r16
    5110:	1f 93       	push	r17
    5112:	cf 93       	push	r28
    5114:	df 93       	push	r29
    5116:	cd b7       	in	r28, 0x3d	; 61
    5118:	de b7       	in	r29, 0x3e	; 62
    511a:	2b 97       	sbiw	r28, 0x0b	; 11
    511c:	0f b6       	in	r0, 0x3f	; 63
    511e:	f8 94       	cli
    5120:	de bf       	out	0x3e, r29	; 62
    5122:	0f be       	out	0x3f, r0	; 63
    5124:	cd bf       	out	0x3d, r28	; 61
    5126:	6c 01       	movw	r12, r24
    5128:	7b 01       	movw	r14, r22
    512a:	8a 01       	movw	r16, r20
    512c:	fc 01       	movw	r30, r24
    512e:	17 82       	std	Z+7, r1	; 0x07
    5130:	16 82       	std	Z+6, r1	; 0x06
    5132:	83 81       	ldd	r24, Z+3	; 0x03
    5134:	81 ff       	sbrs	r24, 1
    5136:	bf c1       	rjmp	.+894    	; 0x54b6 <vfprintf+0x3c4>
    5138:	ce 01       	movw	r24, r28
    513a:	01 96       	adiw	r24, 0x01	; 1
    513c:	3c 01       	movw	r6, r24
    513e:	f6 01       	movw	r30, r12
    5140:	93 81       	ldd	r25, Z+3	; 0x03
    5142:	f7 01       	movw	r30, r14
    5144:	93 fd       	sbrc	r25, 3
    5146:	85 91       	lpm	r24, Z+
    5148:	93 ff       	sbrs	r25, 3
    514a:	81 91       	ld	r24, Z+
    514c:	7f 01       	movw	r14, r30
    514e:	88 23       	and	r24, r24
    5150:	09 f4       	brne	.+2      	; 0x5154 <vfprintf+0x62>
    5152:	ad c1       	rjmp	.+858    	; 0x54ae <vfprintf+0x3bc>
    5154:	85 32       	cpi	r24, 0x25	; 37
    5156:	39 f4       	brne	.+14     	; 0x5166 <vfprintf+0x74>
    5158:	93 fd       	sbrc	r25, 3
    515a:	85 91       	lpm	r24, Z+
    515c:	93 ff       	sbrs	r25, 3
    515e:	81 91       	ld	r24, Z+
    5160:	7f 01       	movw	r14, r30
    5162:	85 32       	cpi	r24, 0x25	; 37
    5164:	21 f4       	brne	.+8      	; 0x516e <vfprintf+0x7c>
    5166:	b6 01       	movw	r22, r12
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	d6 d1       	rcall	.+940    	; 0x5518 <fputc>
    516c:	e8 cf       	rjmp	.-48     	; 0x513e <vfprintf+0x4c>
    516e:	91 2c       	mov	r9, r1
    5170:	21 2c       	mov	r2, r1
    5172:	31 2c       	mov	r3, r1
    5174:	ff e1       	ldi	r31, 0x1F	; 31
    5176:	f3 15       	cp	r31, r3
    5178:	d8 f0       	brcs	.+54     	; 0x51b0 <vfprintf+0xbe>
    517a:	8b 32       	cpi	r24, 0x2B	; 43
    517c:	79 f0       	breq	.+30     	; 0x519c <vfprintf+0xaa>
    517e:	38 f4       	brcc	.+14     	; 0x518e <vfprintf+0x9c>
    5180:	80 32       	cpi	r24, 0x20	; 32
    5182:	79 f0       	breq	.+30     	; 0x51a2 <vfprintf+0xb0>
    5184:	83 32       	cpi	r24, 0x23	; 35
    5186:	a1 f4       	brne	.+40     	; 0x51b0 <vfprintf+0xbe>
    5188:	23 2d       	mov	r18, r3
    518a:	20 61       	ori	r18, 0x10	; 16
    518c:	1d c0       	rjmp	.+58     	; 0x51c8 <vfprintf+0xd6>
    518e:	8d 32       	cpi	r24, 0x2D	; 45
    5190:	61 f0       	breq	.+24     	; 0x51aa <vfprintf+0xb8>
    5192:	80 33       	cpi	r24, 0x30	; 48
    5194:	69 f4       	brne	.+26     	; 0x51b0 <vfprintf+0xbe>
    5196:	23 2d       	mov	r18, r3
    5198:	21 60       	ori	r18, 0x01	; 1
    519a:	16 c0       	rjmp	.+44     	; 0x51c8 <vfprintf+0xd6>
    519c:	83 2d       	mov	r24, r3
    519e:	82 60       	ori	r24, 0x02	; 2
    51a0:	38 2e       	mov	r3, r24
    51a2:	e3 2d       	mov	r30, r3
    51a4:	e4 60       	ori	r30, 0x04	; 4
    51a6:	3e 2e       	mov	r3, r30
    51a8:	2a c0       	rjmp	.+84     	; 0x51fe <vfprintf+0x10c>
    51aa:	f3 2d       	mov	r31, r3
    51ac:	f8 60       	ori	r31, 0x08	; 8
    51ae:	1d c0       	rjmp	.+58     	; 0x51ea <vfprintf+0xf8>
    51b0:	37 fc       	sbrc	r3, 7
    51b2:	2d c0       	rjmp	.+90     	; 0x520e <vfprintf+0x11c>
    51b4:	20 ed       	ldi	r18, 0xD0	; 208
    51b6:	28 0f       	add	r18, r24
    51b8:	2a 30       	cpi	r18, 0x0A	; 10
    51ba:	40 f0       	brcs	.+16     	; 0x51cc <vfprintf+0xda>
    51bc:	8e 32       	cpi	r24, 0x2E	; 46
    51be:	b9 f4       	brne	.+46     	; 0x51ee <vfprintf+0xfc>
    51c0:	36 fc       	sbrc	r3, 6
    51c2:	75 c1       	rjmp	.+746    	; 0x54ae <vfprintf+0x3bc>
    51c4:	23 2d       	mov	r18, r3
    51c6:	20 64       	ori	r18, 0x40	; 64
    51c8:	32 2e       	mov	r3, r18
    51ca:	19 c0       	rjmp	.+50     	; 0x51fe <vfprintf+0x10c>
    51cc:	36 fe       	sbrs	r3, 6
    51ce:	06 c0       	rjmp	.+12     	; 0x51dc <vfprintf+0xea>
    51d0:	8a e0       	ldi	r24, 0x0A	; 10
    51d2:	98 9e       	mul	r9, r24
    51d4:	20 0d       	add	r18, r0
    51d6:	11 24       	eor	r1, r1
    51d8:	92 2e       	mov	r9, r18
    51da:	11 c0       	rjmp	.+34     	; 0x51fe <vfprintf+0x10c>
    51dc:	ea e0       	ldi	r30, 0x0A	; 10
    51de:	2e 9e       	mul	r2, r30
    51e0:	20 0d       	add	r18, r0
    51e2:	11 24       	eor	r1, r1
    51e4:	22 2e       	mov	r2, r18
    51e6:	f3 2d       	mov	r31, r3
    51e8:	f0 62       	ori	r31, 0x20	; 32
    51ea:	3f 2e       	mov	r3, r31
    51ec:	08 c0       	rjmp	.+16     	; 0x51fe <vfprintf+0x10c>
    51ee:	8c 36       	cpi	r24, 0x6C	; 108
    51f0:	21 f4       	brne	.+8      	; 0x51fa <vfprintf+0x108>
    51f2:	83 2d       	mov	r24, r3
    51f4:	80 68       	ori	r24, 0x80	; 128
    51f6:	38 2e       	mov	r3, r24
    51f8:	02 c0       	rjmp	.+4      	; 0x51fe <vfprintf+0x10c>
    51fa:	88 36       	cpi	r24, 0x68	; 104
    51fc:	41 f4       	brne	.+16     	; 0x520e <vfprintf+0x11c>
    51fe:	f7 01       	movw	r30, r14
    5200:	93 fd       	sbrc	r25, 3
    5202:	85 91       	lpm	r24, Z+
    5204:	93 ff       	sbrs	r25, 3
    5206:	81 91       	ld	r24, Z+
    5208:	7f 01       	movw	r14, r30
    520a:	81 11       	cpse	r24, r1
    520c:	b3 cf       	rjmp	.-154    	; 0x5174 <vfprintf+0x82>
    520e:	98 2f       	mov	r25, r24
    5210:	9f 7d       	andi	r25, 0xDF	; 223
    5212:	95 54       	subi	r25, 0x45	; 69
    5214:	93 30       	cpi	r25, 0x03	; 3
    5216:	28 f4       	brcc	.+10     	; 0x5222 <vfprintf+0x130>
    5218:	0c 5f       	subi	r16, 0xFC	; 252
    521a:	1f 4f       	sbci	r17, 0xFF	; 255
    521c:	9f e3       	ldi	r25, 0x3F	; 63
    521e:	99 83       	std	Y+1, r25	; 0x01
    5220:	0d c0       	rjmp	.+26     	; 0x523c <vfprintf+0x14a>
    5222:	83 36       	cpi	r24, 0x63	; 99
    5224:	31 f0       	breq	.+12     	; 0x5232 <vfprintf+0x140>
    5226:	83 37       	cpi	r24, 0x73	; 115
    5228:	71 f0       	breq	.+28     	; 0x5246 <vfprintf+0x154>
    522a:	83 35       	cpi	r24, 0x53	; 83
    522c:	09 f0       	breq	.+2      	; 0x5230 <vfprintf+0x13e>
    522e:	55 c0       	rjmp	.+170    	; 0x52da <vfprintf+0x1e8>
    5230:	20 c0       	rjmp	.+64     	; 0x5272 <vfprintf+0x180>
    5232:	f8 01       	movw	r30, r16
    5234:	80 81       	ld	r24, Z
    5236:	89 83       	std	Y+1, r24	; 0x01
    5238:	0e 5f       	subi	r16, 0xFE	; 254
    523a:	1f 4f       	sbci	r17, 0xFF	; 255
    523c:	88 24       	eor	r8, r8
    523e:	83 94       	inc	r8
    5240:	91 2c       	mov	r9, r1
    5242:	53 01       	movw	r10, r6
    5244:	12 c0       	rjmp	.+36     	; 0x526a <vfprintf+0x178>
    5246:	28 01       	movw	r4, r16
    5248:	f2 e0       	ldi	r31, 0x02	; 2
    524a:	4f 0e       	add	r4, r31
    524c:	51 1c       	adc	r5, r1
    524e:	f8 01       	movw	r30, r16
    5250:	a0 80       	ld	r10, Z
    5252:	b1 80       	ldd	r11, Z+1	; 0x01
    5254:	36 fe       	sbrs	r3, 6
    5256:	03 c0       	rjmp	.+6      	; 0x525e <vfprintf+0x16c>
    5258:	69 2d       	mov	r22, r9
    525a:	70 e0       	ldi	r23, 0x00	; 0
    525c:	02 c0       	rjmp	.+4      	; 0x5262 <vfprintf+0x170>
    525e:	6f ef       	ldi	r22, 0xFF	; 255
    5260:	7f ef       	ldi	r23, 0xFF	; 255
    5262:	c5 01       	movw	r24, r10
    5264:	4e d1       	rcall	.+668    	; 0x5502 <strnlen>
    5266:	4c 01       	movw	r8, r24
    5268:	82 01       	movw	r16, r4
    526a:	f3 2d       	mov	r31, r3
    526c:	ff 77       	andi	r31, 0x7F	; 127
    526e:	3f 2e       	mov	r3, r31
    5270:	15 c0       	rjmp	.+42     	; 0x529c <vfprintf+0x1aa>
    5272:	28 01       	movw	r4, r16
    5274:	22 e0       	ldi	r18, 0x02	; 2
    5276:	42 0e       	add	r4, r18
    5278:	51 1c       	adc	r5, r1
    527a:	f8 01       	movw	r30, r16
    527c:	a0 80       	ld	r10, Z
    527e:	b1 80       	ldd	r11, Z+1	; 0x01
    5280:	36 fe       	sbrs	r3, 6
    5282:	03 c0       	rjmp	.+6      	; 0x528a <vfprintf+0x198>
    5284:	69 2d       	mov	r22, r9
    5286:	70 e0       	ldi	r23, 0x00	; 0
    5288:	02 c0       	rjmp	.+4      	; 0x528e <vfprintf+0x19c>
    528a:	6f ef       	ldi	r22, 0xFF	; 255
    528c:	7f ef       	ldi	r23, 0xFF	; 255
    528e:	c5 01       	movw	r24, r10
    5290:	2d d1       	rcall	.+602    	; 0x54ec <strnlen_P>
    5292:	4c 01       	movw	r8, r24
    5294:	f3 2d       	mov	r31, r3
    5296:	f0 68       	ori	r31, 0x80	; 128
    5298:	3f 2e       	mov	r3, r31
    529a:	82 01       	movw	r16, r4
    529c:	33 fc       	sbrc	r3, 3
    529e:	19 c0       	rjmp	.+50     	; 0x52d2 <vfprintf+0x1e0>
    52a0:	82 2d       	mov	r24, r2
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	88 16       	cp	r8, r24
    52a6:	99 06       	cpc	r9, r25
    52a8:	a0 f4       	brcc	.+40     	; 0x52d2 <vfprintf+0x1e0>
    52aa:	b6 01       	movw	r22, r12
    52ac:	80 e2       	ldi	r24, 0x20	; 32
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	33 d1       	rcall	.+614    	; 0x5518 <fputc>
    52b2:	2a 94       	dec	r2
    52b4:	f5 cf       	rjmp	.-22     	; 0x52a0 <vfprintf+0x1ae>
    52b6:	f5 01       	movw	r30, r10
    52b8:	37 fc       	sbrc	r3, 7
    52ba:	85 91       	lpm	r24, Z+
    52bc:	37 fe       	sbrs	r3, 7
    52be:	81 91       	ld	r24, Z+
    52c0:	5f 01       	movw	r10, r30
    52c2:	b6 01       	movw	r22, r12
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	28 d1       	rcall	.+592    	; 0x5518 <fputc>
    52c8:	21 10       	cpse	r2, r1
    52ca:	2a 94       	dec	r2
    52cc:	21 e0       	ldi	r18, 0x01	; 1
    52ce:	82 1a       	sub	r8, r18
    52d0:	91 08       	sbc	r9, r1
    52d2:	81 14       	cp	r8, r1
    52d4:	91 04       	cpc	r9, r1
    52d6:	79 f7       	brne	.-34     	; 0x52b6 <vfprintf+0x1c4>
    52d8:	e1 c0       	rjmp	.+450    	; 0x549c <vfprintf+0x3aa>
    52da:	84 36       	cpi	r24, 0x64	; 100
    52dc:	11 f0       	breq	.+4      	; 0x52e2 <vfprintf+0x1f0>
    52de:	89 36       	cpi	r24, 0x69	; 105
    52e0:	39 f5       	brne	.+78     	; 0x5330 <vfprintf+0x23e>
    52e2:	f8 01       	movw	r30, r16
    52e4:	37 fe       	sbrs	r3, 7
    52e6:	07 c0       	rjmp	.+14     	; 0x52f6 <vfprintf+0x204>
    52e8:	60 81       	ld	r22, Z
    52ea:	71 81       	ldd	r23, Z+1	; 0x01
    52ec:	82 81       	ldd	r24, Z+2	; 0x02
    52ee:	93 81       	ldd	r25, Z+3	; 0x03
    52f0:	0c 5f       	subi	r16, 0xFC	; 252
    52f2:	1f 4f       	sbci	r17, 0xFF	; 255
    52f4:	08 c0       	rjmp	.+16     	; 0x5306 <vfprintf+0x214>
    52f6:	60 81       	ld	r22, Z
    52f8:	71 81       	ldd	r23, Z+1	; 0x01
    52fa:	07 2e       	mov	r0, r23
    52fc:	00 0c       	add	r0, r0
    52fe:	88 0b       	sbc	r24, r24
    5300:	99 0b       	sbc	r25, r25
    5302:	0e 5f       	subi	r16, 0xFE	; 254
    5304:	1f 4f       	sbci	r17, 0xFF	; 255
    5306:	f3 2d       	mov	r31, r3
    5308:	ff 76       	andi	r31, 0x6F	; 111
    530a:	3f 2e       	mov	r3, r31
    530c:	97 ff       	sbrs	r25, 7
    530e:	09 c0       	rjmp	.+18     	; 0x5322 <vfprintf+0x230>
    5310:	90 95       	com	r25
    5312:	80 95       	com	r24
    5314:	70 95       	com	r23
    5316:	61 95       	neg	r22
    5318:	7f 4f       	sbci	r23, 0xFF	; 255
    531a:	8f 4f       	sbci	r24, 0xFF	; 255
    531c:	9f 4f       	sbci	r25, 0xFF	; 255
    531e:	f0 68       	ori	r31, 0x80	; 128
    5320:	3f 2e       	mov	r3, r31
    5322:	2a e0       	ldi	r18, 0x0A	; 10
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	a3 01       	movw	r20, r6
    5328:	33 d1       	rcall	.+614    	; 0x5590 <__ultoa_invert>
    532a:	88 2e       	mov	r8, r24
    532c:	86 18       	sub	r8, r6
    532e:	44 c0       	rjmp	.+136    	; 0x53b8 <vfprintf+0x2c6>
    5330:	85 37       	cpi	r24, 0x75	; 117
    5332:	31 f4       	brne	.+12     	; 0x5340 <vfprintf+0x24e>
    5334:	23 2d       	mov	r18, r3
    5336:	2f 7e       	andi	r18, 0xEF	; 239
    5338:	b2 2e       	mov	r11, r18
    533a:	2a e0       	ldi	r18, 0x0A	; 10
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	25 c0       	rjmp	.+74     	; 0x538a <vfprintf+0x298>
    5340:	93 2d       	mov	r25, r3
    5342:	99 7f       	andi	r25, 0xF9	; 249
    5344:	b9 2e       	mov	r11, r25
    5346:	8f 36       	cpi	r24, 0x6F	; 111
    5348:	c1 f0       	breq	.+48     	; 0x537a <vfprintf+0x288>
    534a:	18 f4       	brcc	.+6      	; 0x5352 <vfprintf+0x260>
    534c:	88 35       	cpi	r24, 0x58	; 88
    534e:	79 f0       	breq	.+30     	; 0x536e <vfprintf+0x27c>
    5350:	ae c0       	rjmp	.+348    	; 0x54ae <vfprintf+0x3bc>
    5352:	80 37       	cpi	r24, 0x70	; 112
    5354:	19 f0       	breq	.+6      	; 0x535c <vfprintf+0x26a>
    5356:	88 37       	cpi	r24, 0x78	; 120
    5358:	21 f0       	breq	.+8      	; 0x5362 <vfprintf+0x270>
    535a:	a9 c0       	rjmp	.+338    	; 0x54ae <vfprintf+0x3bc>
    535c:	e9 2f       	mov	r30, r25
    535e:	e0 61       	ori	r30, 0x10	; 16
    5360:	be 2e       	mov	r11, r30
    5362:	b4 fe       	sbrs	r11, 4
    5364:	0d c0       	rjmp	.+26     	; 0x5380 <vfprintf+0x28e>
    5366:	fb 2d       	mov	r31, r11
    5368:	f4 60       	ori	r31, 0x04	; 4
    536a:	bf 2e       	mov	r11, r31
    536c:	09 c0       	rjmp	.+18     	; 0x5380 <vfprintf+0x28e>
    536e:	34 fe       	sbrs	r3, 4
    5370:	0a c0       	rjmp	.+20     	; 0x5386 <vfprintf+0x294>
    5372:	29 2f       	mov	r18, r25
    5374:	26 60       	ori	r18, 0x06	; 6
    5376:	b2 2e       	mov	r11, r18
    5378:	06 c0       	rjmp	.+12     	; 0x5386 <vfprintf+0x294>
    537a:	28 e0       	ldi	r18, 0x08	; 8
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	05 c0       	rjmp	.+10     	; 0x538a <vfprintf+0x298>
    5380:	20 e1       	ldi	r18, 0x10	; 16
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	02 c0       	rjmp	.+4      	; 0x538a <vfprintf+0x298>
    5386:	20 e1       	ldi	r18, 0x10	; 16
    5388:	32 e0       	ldi	r19, 0x02	; 2
    538a:	f8 01       	movw	r30, r16
    538c:	b7 fe       	sbrs	r11, 7
    538e:	07 c0       	rjmp	.+14     	; 0x539e <vfprintf+0x2ac>
    5390:	60 81       	ld	r22, Z
    5392:	71 81       	ldd	r23, Z+1	; 0x01
    5394:	82 81       	ldd	r24, Z+2	; 0x02
    5396:	93 81       	ldd	r25, Z+3	; 0x03
    5398:	0c 5f       	subi	r16, 0xFC	; 252
    539a:	1f 4f       	sbci	r17, 0xFF	; 255
    539c:	06 c0       	rjmp	.+12     	; 0x53aa <vfprintf+0x2b8>
    539e:	60 81       	ld	r22, Z
    53a0:	71 81       	ldd	r23, Z+1	; 0x01
    53a2:	80 e0       	ldi	r24, 0x00	; 0
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	0e 5f       	subi	r16, 0xFE	; 254
    53a8:	1f 4f       	sbci	r17, 0xFF	; 255
    53aa:	a3 01       	movw	r20, r6
    53ac:	f1 d0       	rcall	.+482    	; 0x5590 <__ultoa_invert>
    53ae:	88 2e       	mov	r8, r24
    53b0:	86 18       	sub	r8, r6
    53b2:	fb 2d       	mov	r31, r11
    53b4:	ff 77       	andi	r31, 0x7F	; 127
    53b6:	3f 2e       	mov	r3, r31
    53b8:	36 fe       	sbrs	r3, 6
    53ba:	0d c0       	rjmp	.+26     	; 0x53d6 <vfprintf+0x2e4>
    53bc:	23 2d       	mov	r18, r3
    53be:	2e 7f       	andi	r18, 0xFE	; 254
    53c0:	a2 2e       	mov	r10, r18
    53c2:	89 14       	cp	r8, r9
    53c4:	58 f4       	brcc	.+22     	; 0x53dc <vfprintf+0x2ea>
    53c6:	34 fe       	sbrs	r3, 4
    53c8:	0b c0       	rjmp	.+22     	; 0x53e0 <vfprintf+0x2ee>
    53ca:	32 fc       	sbrc	r3, 2
    53cc:	09 c0       	rjmp	.+18     	; 0x53e0 <vfprintf+0x2ee>
    53ce:	83 2d       	mov	r24, r3
    53d0:	8e 7e       	andi	r24, 0xEE	; 238
    53d2:	a8 2e       	mov	r10, r24
    53d4:	05 c0       	rjmp	.+10     	; 0x53e0 <vfprintf+0x2ee>
    53d6:	b8 2c       	mov	r11, r8
    53d8:	a3 2c       	mov	r10, r3
    53da:	03 c0       	rjmp	.+6      	; 0x53e2 <vfprintf+0x2f0>
    53dc:	b8 2c       	mov	r11, r8
    53de:	01 c0       	rjmp	.+2      	; 0x53e2 <vfprintf+0x2f0>
    53e0:	b9 2c       	mov	r11, r9
    53e2:	a4 fe       	sbrs	r10, 4
    53e4:	0f c0       	rjmp	.+30     	; 0x5404 <vfprintf+0x312>
    53e6:	fe 01       	movw	r30, r28
    53e8:	e8 0d       	add	r30, r8
    53ea:	f1 1d       	adc	r31, r1
    53ec:	80 81       	ld	r24, Z
    53ee:	80 33       	cpi	r24, 0x30	; 48
    53f0:	21 f4       	brne	.+8      	; 0x53fa <vfprintf+0x308>
    53f2:	9a 2d       	mov	r25, r10
    53f4:	99 7e       	andi	r25, 0xE9	; 233
    53f6:	a9 2e       	mov	r10, r25
    53f8:	09 c0       	rjmp	.+18     	; 0x540c <vfprintf+0x31a>
    53fa:	a2 fe       	sbrs	r10, 2
    53fc:	06 c0       	rjmp	.+12     	; 0x540a <vfprintf+0x318>
    53fe:	b3 94       	inc	r11
    5400:	b3 94       	inc	r11
    5402:	04 c0       	rjmp	.+8      	; 0x540c <vfprintf+0x31a>
    5404:	8a 2d       	mov	r24, r10
    5406:	86 78       	andi	r24, 0x86	; 134
    5408:	09 f0       	breq	.+2      	; 0x540c <vfprintf+0x31a>
    540a:	b3 94       	inc	r11
    540c:	a3 fc       	sbrc	r10, 3
    540e:	10 c0       	rjmp	.+32     	; 0x5430 <vfprintf+0x33e>
    5410:	a0 fe       	sbrs	r10, 0
    5412:	06 c0       	rjmp	.+12     	; 0x5420 <vfprintf+0x32e>
    5414:	b2 14       	cp	r11, r2
    5416:	80 f4       	brcc	.+32     	; 0x5438 <vfprintf+0x346>
    5418:	28 0c       	add	r2, r8
    541a:	92 2c       	mov	r9, r2
    541c:	9b 18       	sub	r9, r11
    541e:	0d c0       	rjmp	.+26     	; 0x543a <vfprintf+0x348>
    5420:	b2 14       	cp	r11, r2
    5422:	58 f4       	brcc	.+22     	; 0x543a <vfprintf+0x348>
    5424:	b6 01       	movw	r22, r12
    5426:	80 e2       	ldi	r24, 0x20	; 32
    5428:	90 e0       	ldi	r25, 0x00	; 0
    542a:	76 d0       	rcall	.+236    	; 0x5518 <fputc>
    542c:	b3 94       	inc	r11
    542e:	f8 cf       	rjmp	.-16     	; 0x5420 <vfprintf+0x32e>
    5430:	b2 14       	cp	r11, r2
    5432:	18 f4       	brcc	.+6      	; 0x543a <vfprintf+0x348>
    5434:	2b 18       	sub	r2, r11
    5436:	02 c0       	rjmp	.+4      	; 0x543c <vfprintf+0x34a>
    5438:	98 2c       	mov	r9, r8
    543a:	21 2c       	mov	r2, r1
    543c:	a4 fe       	sbrs	r10, 4
    543e:	0f c0       	rjmp	.+30     	; 0x545e <vfprintf+0x36c>
    5440:	b6 01       	movw	r22, r12
    5442:	80 e3       	ldi	r24, 0x30	; 48
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	68 d0       	rcall	.+208    	; 0x5518 <fputc>
    5448:	a2 fe       	sbrs	r10, 2
    544a:	16 c0       	rjmp	.+44     	; 0x5478 <vfprintf+0x386>
    544c:	a1 fc       	sbrc	r10, 1
    544e:	03 c0       	rjmp	.+6      	; 0x5456 <vfprintf+0x364>
    5450:	88 e7       	ldi	r24, 0x78	; 120
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	02 c0       	rjmp	.+4      	; 0x545a <vfprintf+0x368>
    5456:	88 e5       	ldi	r24, 0x58	; 88
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	b6 01       	movw	r22, r12
    545c:	0c c0       	rjmp	.+24     	; 0x5476 <vfprintf+0x384>
    545e:	8a 2d       	mov	r24, r10
    5460:	86 78       	andi	r24, 0x86	; 134
    5462:	51 f0       	breq	.+20     	; 0x5478 <vfprintf+0x386>
    5464:	a1 fe       	sbrs	r10, 1
    5466:	02 c0       	rjmp	.+4      	; 0x546c <vfprintf+0x37a>
    5468:	8b e2       	ldi	r24, 0x2B	; 43
    546a:	01 c0       	rjmp	.+2      	; 0x546e <vfprintf+0x37c>
    546c:	80 e2       	ldi	r24, 0x20	; 32
    546e:	a7 fc       	sbrc	r10, 7
    5470:	8d e2       	ldi	r24, 0x2D	; 45
    5472:	b6 01       	movw	r22, r12
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	50 d0       	rcall	.+160    	; 0x5518 <fputc>
    5478:	89 14       	cp	r8, r9
    547a:	30 f4       	brcc	.+12     	; 0x5488 <vfprintf+0x396>
    547c:	b6 01       	movw	r22, r12
    547e:	80 e3       	ldi	r24, 0x30	; 48
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	4a d0       	rcall	.+148    	; 0x5518 <fputc>
    5484:	9a 94       	dec	r9
    5486:	f8 cf       	rjmp	.-16     	; 0x5478 <vfprintf+0x386>
    5488:	8a 94       	dec	r8
    548a:	f3 01       	movw	r30, r6
    548c:	e8 0d       	add	r30, r8
    548e:	f1 1d       	adc	r31, r1
    5490:	80 81       	ld	r24, Z
    5492:	b6 01       	movw	r22, r12
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	40 d0       	rcall	.+128    	; 0x5518 <fputc>
    5498:	81 10       	cpse	r8, r1
    549a:	f6 cf       	rjmp	.-20     	; 0x5488 <vfprintf+0x396>
    549c:	22 20       	and	r2, r2
    549e:	09 f4       	brne	.+2      	; 0x54a2 <vfprintf+0x3b0>
    54a0:	4e ce       	rjmp	.-868    	; 0x513e <vfprintf+0x4c>
    54a2:	b6 01       	movw	r22, r12
    54a4:	80 e2       	ldi	r24, 0x20	; 32
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	37 d0       	rcall	.+110    	; 0x5518 <fputc>
    54aa:	2a 94       	dec	r2
    54ac:	f7 cf       	rjmp	.-18     	; 0x549c <vfprintf+0x3aa>
    54ae:	f6 01       	movw	r30, r12
    54b0:	86 81       	ldd	r24, Z+6	; 0x06
    54b2:	97 81       	ldd	r25, Z+7	; 0x07
    54b4:	02 c0       	rjmp	.+4      	; 0x54ba <vfprintf+0x3c8>
    54b6:	8f ef       	ldi	r24, 0xFF	; 255
    54b8:	9f ef       	ldi	r25, 0xFF	; 255
    54ba:	2b 96       	adiw	r28, 0x0b	; 11
    54bc:	0f b6       	in	r0, 0x3f	; 63
    54be:	f8 94       	cli
    54c0:	de bf       	out	0x3e, r29	; 62
    54c2:	0f be       	out	0x3f, r0	; 63
    54c4:	cd bf       	out	0x3d, r28	; 61
    54c6:	df 91       	pop	r29
    54c8:	cf 91       	pop	r28
    54ca:	1f 91       	pop	r17
    54cc:	0f 91       	pop	r16
    54ce:	ff 90       	pop	r15
    54d0:	ef 90       	pop	r14
    54d2:	df 90       	pop	r13
    54d4:	cf 90       	pop	r12
    54d6:	bf 90       	pop	r11
    54d8:	af 90       	pop	r10
    54da:	9f 90       	pop	r9
    54dc:	8f 90       	pop	r8
    54de:	7f 90       	pop	r7
    54e0:	6f 90       	pop	r6
    54e2:	5f 90       	pop	r5
    54e4:	4f 90       	pop	r4
    54e6:	3f 90       	pop	r3
    54e8:	2f 90       	pop	r2
    54ea:	08 95       	ret

000054ec <strnlen_P>:
    54ec:	fc 01       	movw	r30, r24
    54ee:	05 90       	lpm	r0, Z+
    54f0:	61 50       	subi	r22, 0x01	; 1
    54f2:	70 40       	sbci	r23, 0x00	; 0
    54f4:	01 10       	cpse	r0, r1
    54f6:	d8 f7       	brcc	.-10     	; 0x54ee <strnlen_P+0x2>
    54f8:	80 95       	com	r24
    54fa:	90 95       	com	r25
    54fc:	8e 0f       	add	r24, r30
    54fe:	9f 1f       	adc	r25, r31
    5500:	08 95       	ret

00005502 <strnlen>:
    5502:	fc 01       	movw	r30, r24
    5504:	61 50       	subi	r22, 0x01	; 1
    5506:	70 40       	sbci	r23, 0x00	; 0
    5508:	01 90       	ld	r0, Z+
    550a:	01 10       	cpse	r0, r1
    550c:	d8 f7       	brcc	.-10     	; 0x5504 <strnlen+0x2>
    550e:	80 95       	com	r24
    5510:	90 95       	com	r25
    5512:	8e 0f       	add	r24, r30
    5514:	9f 1f       	adc	r25, r31
    5516:	08 95       	ret

00005518 <fputc>:
    5518:	0f 93       	push	r16
    551a:	1f 93       	push	r17
    551c:	cf 93       	push	r28
    551e:	df 93       	push	r29
    5520:	fb 01       	movw	r30, r22
    5522:	23 81       	ldd	r18, Z+3	; 0x03
    5524:	21 fd       	sbrc	r18, 1
    5526:	03 c0       	rjmp	.+6      	; 0x552e <fputc+0x16>
    5528:	8f ef       	ldi	r24, 0xFF	; 255
    552a:	9f ef       	ldi	r25, 0xFF	; 255
    552c:	2c c0       	rjmp	.+88     	; 0x5586 <fputc+0x6e>
    552e:	22 ff       	sbrs	r18, 2
    5530:	16 c0       	rjmp	.+44     	; 0x555e <fputc+0x46>
    5532:	46 81       	ldd	r20, Z+6	; 0x06
    5534:	57 81       	ldd	r21, Z+7	; 0x07
    5536:	24 81       	ldd	r18, Z+4	; 0x04
    5538:	35 81       	ldd	r19, Z+5	; 0x05
    553a:	42 17       	cp	r20, r18
    553c:	53 07       	cpc	r21, r19
    553e:	44 f4       	brge	.+16     	; 0x5550 <fputc+0x38>
    5540:	a0 81       	ld	r26, Z
    5542:	b1 81       	ldd	r27, Z+1	; 0x01
    5544:	9d 01       	movw	r18, r26
    5546:	2f 5f       	subi	r18, 0xFF	; 255
    5548:	3f 4f       	sbci	r19, 0xFF	; 255
    554a:	31 83       	std	Z+1, r19	; 0x01
    554c:	20 83       	st	Z, r18
    554e:	8c 93       	st	X, r24
    5550:	26 81       	ldd	r18, Z+6	; 0x06
    5552:	37 81       	ldd	r19, Z+7	; 0x07
    5554:	2f 5f       	subi	r18, 0xFF	; 255
    5556:	3f 4f       	sbci	r19, 0xFF	; 255
    5558:	37 83       	std	Z+7, r19	; 0x07
    555a:	26 83       	std	Z+6, r18	; 0x06
    555c:	14 c0       	rjmp	.+40     	; 0x5586 <fputc+0x6e>
    555e:	8b 01       	movw	r16, r22
    5560:	ec 01       	movw	r28, r24
    5562:	fb 01       	movw	r30, r22
    5564:	00 84       	ldd	r0, Z+8	; 0x08
    5566:	f1 85       	ldd	r31, Z+9	; 0x09
    5568:	e0 2d       	mov	r30, r0
    556a:	19 95       	eicall
    556c:	89 2b       	or	r24, r25
    556e:	e1 f6       	brne	.-72     	; 0x5528 <fputc+0x10>
    5570:	d8 01       	movw	r26, r16
    5572:	16 96       	adiw	r26, 0x06	; 6
    5574:	8d 91       	ld	r24, X+
    5576:	9c 91       	ld	r25, X
    5578:	17 97       	sbiw	r26, 0x07	; 7
    557a:	01 96       	adiw	r24, 0x01	; 1
    557c:	17 96       	adiw	r26, 0x07	; 7
    557e:	9c 93       	st	X, r25
    5580:	8e 93       	st	-X, r24
    5582:	16 97       	sbiw	r26, 0x06	; 6
    5584:	ce 01       	movw	r24, r28
    5586:	df 91       	pop	r29
    5588:	cf 91       	pop	r28
    558a:	1f 91       	pop	r17
    558c:	0f 91       	pop	r16
    558e:	08 95       	ret

00005590 <__ultoa_invert>:
    5590:	fa 01       	movw	r30, r20
    5592:	aa 27       	eor	r26, r26
    5594:	28 30       	cpi	r18, 0x08	; 8
    5596:	51 f1       	breq	.+84     	; 0x55ec <__ultoa_invert+0x5c>
    5598:	20 31       	cpi	r18, 0x10	; 16
    559a:	81 f1       	breq	.+96     	; 0x55fc <__ultoa_invert+0x6c>
    559c:	e8 94       	clt
    559e:	6f 93       	push	r22
    55a0:	6e 7f       	andi	r22, 0xFE	; 254
    55a2:	6e 5f       	subi	r22, 0xFE	; 254
    55a4:	7f 4f       	sbci	r23, 0xFF	; 255
    55a6:	8f 4f       	sbci	r24, 0xFF	; 255
    55a8:	9f 4f       	sbci	r25, 0xFF	; 255
    55aa:	af 4f       	sbci	r26, 0xFF	; 255
    55ac:	b1 e0       	ldi	r27, 0x01	; 1
    55ae:	3e d0       	rcall	.+124    	; 0x562c <__ultoa_invert+0x9c>
    55b0:	b4 e0       	ldi	r27, 0x04	; 4
    55b2:	3c d0       	rcall	.+120    	; 0x562c <__ultoa_invert+0x9c>
    55b4:	67 0f       	add	r22, r23
    55b6:	78 1f       	adc	r23, r24
    55b8:	89 1f       	adc	r24, r25
    55ba:	9a 1f       	adc	r25, r26
    55bc:	a1 1d       	adc	r26, r1
    55be:	68 0f       	add	r22, r24
    55c0:	79 1f       	adc	r23, r25
    55c2:	8a 1f       	adc	r24, r26
    55c4:	91 1d       	adc	r25, r1
    55c6:	a1 1d       	adc	r26, r1
    55c8:	6a 0f       	add	r22, r26
    55ca:	71 1d       	adc	r23, r1
    55cc:	81 1d       	adc	r24, r1
    55ce:	91 1d       	adc	r25, r1
    55d0:	a1 1d       	adc	r26, r1
    55d2:	20 d0       	rcall	.+64     	; 0x5614 <__ultoa_invert+0x84>
    55d4:	09 f4       	brne	.+2      	; 0x55d8 <__ultoa_invert+0x48>
    55d6:	68 94       	set
    55d8:	3f 91       	pop	r19
    55da:	2a e0       	ldi	r18, 0x0A	; 10
    55dc:	26 9f       	mul	r18, r22
    55de:	11 24       	eor	r1, r1
    55e0:	30 19       	sub	r19, r0
    55e2:	30 5d       	subi	r19, 0xD0	; 208
    55e4:	31 93       	st	Z+, r19
    55e6:	de f6       	brtc	.-74     	; 0x559e <__ultoa_invert+0xe>
    55e8:	cf 01       	movw	r24, r30
    55ea:	08 95       	ret
    55ec:	46 2f       	mov	r20, r22
    55ee:	47 70       	andi	r20, 0x07	; 7
    55f0:	40 5d       	subi	r20, 0xD0	; 208
    55f2:	41 93       	st	Z+, r20
    55f4:	b3 e0       	ldi	r27, 0x03	; 3
    55f6:	0f d0       	rcall	.+30     	; 0x5616 <__ultoa_invert+0x86>
    55f8:	c9 f7       	brne	.-14     	; 0x55ec <__ultoa_invert+0x5c>
    55fa:	f6 cf       	rjmp	.-20     	; 0x55e8 <__ultoa_invert+0x58>
    55fc:	46 2f       	mov	r20, r22
    55fe:	4f 70       	andi	r20, 0x0F	; 15
    5600:	40 5d       	subi	r20, 0xD0	; 208
    5602:	4a 33       	cpi	r20, 0x3A	; 58
    5604:	18 f0       	brcs	.+6      	; 0x560c <__ultoa_invert+0x7c>
    5606:	49 5d       	subi	r20, 0xD9	; 217
    5608:	31 fd       	sbrc	r19, 1
    560a:	40 52       	subi	r20, 0x20	; 32
    560c:	41 93       	st	Z+, r20
    560e:	02 d0       	rcall	.+4      	; 0x5614 <__ultoa_invert+0x84>
    5610:	a9 f7       	brne	.-22     	; 0x55fc <__ultoa_invert+0x6c>
    5612:	ea cf       	rjmp	.-44     	; 0x55e8 <__ultoa_invert+0x58>
    5614:	b4 e0       	ldi	r27, 0x04	; 4
    5616:	a6 95       	lsr	r26
    5618:	97 95       	ror	r25
    561a:	87 95       	ror	r24
    561c:	77 95       	ror	r23
    561e:	67 95       	ror	r22
    5620:	ba 95       	dec	r27
    5622:	c9 f7       	brne	.-14     	; 0x5616 <__ultoa_invert+0x86>
    5624:	00 97       	sbiw	r24, 0x00	; 0
    5626:	61 05       	cpc	r22, r1
    5628:	71 05       	cpc	r23, r1
    562a:	08 95       	ret
    562c:	9b 01       	movw	r18, r22
    562e:	ac 01       	movw	r20, r24
    5630:	0a 2e       	mov	r0, r26
    5632:	06 94       	lsr	r0
    5634:	57 95       	ror	r21
    5636:	47 95       	ror	r20
    5638:	37 95       	ror	r19
    563a:	27 95       	ror	r18
    563c:	ba 95       	dec	r27
    563e:	c9 f7       	brne	.-14     	; 0x5632 <__ultoa_invert+0xa2>
    5640:	62 0f       	add	r22, r18
    5642:	73 1f       	adc	r23, r19
    5644:	84 1f       	adc	r24, r20
    5646:	95 1f       	adc	r25, r21
    5648:	a0 1d       	adc	r26, r0
    564a:	08 95       	ret

0000564c <_exit>:
    564c:	f8 94       	cli

0000564e <__stop_program>:
    564e:	ff cf       	rjmp	.-2      	; 0x564e <__stop_program>
