
4.Semester2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006d2  00800200  00006400  00006494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001097  008008d2  008008d2  00006b66  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006b66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab0  00000000  00000000  00006c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d7b1  00000000  00000000  000076b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000367d  00000000  00000000  00014e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006cb4  00000000  00000000  000184e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000025f8  00000000  00000000  0001f198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000402b  00000000  00000000  00021790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b94a  00000000  00000000  000257bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e8  00000000  00000000  00031105  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	62 c4       	rjmp	.+2244   	; 0x8f6 <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__vector_25>
      68:	0c 94 99 25 	jmp	0x4b32	; 0x4b32 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <__vector_36>
      94:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 7b 2a 	jmp	0x54f6	; 0x54f6 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 73 26 	jmp	0x4ce6	; 0x4ce6 <__vector_51>
      d0:	0c 94 c5 26 	jmp	0x4d8a	; 0x4d8a <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__vector_54>
      dc:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	25 19       	sub	r18, r5
      e6:	25 19       	sub	r18, r5
      e8:	25 19       	sub	r18, r5
      ea:	5c 19       	sub	r21, r12
      ec:	64 19       	sub	r22, r4
      ee:	79 19       	sub	r23, r9
      f0:	25 19       	sub	r18, r5
      f2:	25 19       	sub	r18, r5
      f4:	5c 19       	sub	r21, r12
      f6:	64 19       	sub	r22, r4
      f8:	9d 2a       	or	r9, r29
      fa:	0d 2b       	or	r16, r29
      fc:	0d 2b       	or	r16, r29
      fe:	0d 2b       	or	r16, r29
     100:	0d 2b       	or	r16, r29
     102:	0d 2b       	or	r16, r29
     104:	0d 2b       	or	r16, r29
     106:	0d 2b       	or	r16, r29
     108:	9d 2a       	or	r9, r29
     10a:	0d 2b       	or	r16, r29
     10c:	0d 2b       	or	r16, r29
     10e:	0d 2b       	or	r16, r29
     110:	0d 2b       	or	r16, r29
     112:	0d 2b       	or	r16, r29
     114:	0d 2b       	or	r16, r29
     116:	0d 2b       	or	r16, r29
     118:	9f 2a       	or	r9, r31
     11a:	0d 2b       	or	r16, r29
     11c:	0d 2b       	or	r16, r29
     11e:	0d 2b       	or	r16, r29
     120:	0d 2b       	or	r16, r29
     122:	0d 2b       	or	r16, r29
     124:	0d 2b       	or	r16, r29
     126:	0d 2b       	or	r16, r29
     128:	0d 2b       	or	r16, r29
     12a:	0d 2b       	or	r16, r29
     12c:	0d 2b       	or	r16, r29
     12e:	0d 2b       	or	r16, r29
     130:	0d 2b       	or	r16, r29
     132:	0d 2b       	or	r16, r29
     134:	0d 2b       	or	r16, r29
     136:	0d 2b       	or	r16, r29
     138:	9f 2a       	or	r9, r31
     13a:	0d 2b       	or	r16, r29
     13c:	0d 2b       	or	r16, r29
     13e:	0d 2b       	or	r16, r29
     140:	0d 2b       	or	r16, r29
     142:	0d 2b       	or	r16, r29
     144:	0d 2b       	or	r16, r29
     146:	0d 2b       	or	r16, r29
     148:	0d 2b       	or	r16, r29
     14a:	0d 2b       	or	r16, r29
     14c:	0d 2b       	or	r16, r29
     14e:	0d 2b       	or	r16, r29
     150:	0d 2b       	or	r16, r29
     152:	0d 2b       	or	r16, r29
     154:	0d 2b       	or	r16, r29
     156:	0d 2b       	or	r16, r29
     158:	09 2b       	or	r16, r25
     15a:	0d 2b       	or	r16, r29
     15c:	0d 2b       	or	r16, r29
     15e:	0d 2b       	or	r16, r29
     160:	0d 2b       	or	r16, r29
     162:	0d 2b       	or	r16, r29
     164:	0d 2b       	or	r16, r29
     166:	0d 2b       	or	r16, r29
     168:	d4 2a       	or	r13, r20
     16a:	0d 2b       	or	r16, r29
     16c:	0d 2b       	or	r16, r29
     16e:	0d 2b       	or	r16, r29
     170:	0d 2b       	or	r16, r29
     172:	0d 2b       	or	r16, r29
     174:	0d 2b       	or	r16, r29
     176:	0d 2b       	or	r16, r29
     178:	0d 2b       	or	r16, r29
     17a:	0d 2b       	or	r16, r29
     17c:	0d 2b       	or	r16, r29
     17e:	0d 2b       	or	r16, r29
     180:	0d 2b       	or	r16, r29
     182:	0d 2b       	or	r16, r29
     184:	0d 2b       	or	r16, r29
     186:	0d 2b       	or	r16, r29
     188:	c8 2a       	or	r12, r24
     18a:	0d 2b       	or	r16, r29
     18c:	0d 2b       	or	r16, r29
     18e:	0d 2b       	or	r16, r29
     190:	0d 2b       	or	r16, r29
     192:	0d 2b       	or	r16, r29
     194:	0d 2b       	or	r16, r29
     196:	0d 2b       	or	r16, r29
     198:	ec 2a       	or	r14, r28

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <prvCheckTasksWaitingTermination>
     19e:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	e1 d2       	rcall	.+1474   	; 0x76a <vPortYield>
     1a8:	0e 94 a2 19 	call	0x3344	; 0x3344 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 97 18 	call	0x312e	; 0x312e <prvProcessTimerOrBlockTask>
     1c6:	0e 94 ee 18 	call	0x31dc	; 0x31dc <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e0 e0       	ldi	r30, 0x00	; 0
     1e4:	f4 e6       	ldi	r31, 0x64	; 100
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a2 3d       	cpi	r26, 0xD2	; 210
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	29 e1       	ldi	r18, 0x19	; 25
     1f8:	a2 ed       	ldi	r26, 0xD2	; 210
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a9 36       	cpi	r26, 0x69	; 105
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <main>
     20a:	0c 94 fe 31 	jmp	0x63fc	; 0x63fc <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <initializeSharedDataQueue>:
SharedData receiveSharedData;
SharedData sharedData;

void initializeSharedDataQueue()
{
	xQueueShared = xQueueCreate(5, sizeof(SharedData));
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	66 e0       	ldi	r22, 0x06	; 6
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	9e d4       	rcall	.+2364   	; 0xb54 <xQueueGenericCreate>
     218:	90 93 50 19 	sts	0x1950, r25	; 0x801950 <xQueueShared+0x1>
     21c:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <xQueueShared>
     220:	08 95       	ret

00000222 <enqueueSharedData>:
}

void enqueueSharedData()
{
     222:	cf 92       	push	r12
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
	
	int counter = 0;
	
	uint16_t co2 = 0;
	int16_t temp = 0;
	uint16_t hum = 0;
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	10 e0       	ldi	r17, 0x00	; 0
	//uint16_t hum = dequeueHumidityMeasure();
	
	int counter = 0;
	
	uint16_t co2 = 0;
	int16_t temp = 0;
     236:	e1 2c       	mov	r14, r1
     238:	f1 2c       	mov	r15, r1
	//int16_t temp = dequeueTempMeasure();
	//uint16_t hum = dequeueHumidityMeasure();
	
	int counter = 0;
	
	uint16_t co2 = 0;
     23a:	c1 2c       	mov	r12, r1
     23c:	d1 2c       	mov	r13, r1
{
	//uint16_t co2 = dequeueCO2Measure();
	//int16_t temp = dequeueTempMeasure();
	//uint16_t hum = dequeueHumidityMeasure();
	
	int counter = 0;
     23e:	c0 e0       	ldi	r28, 0x00	; 0
     240:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t hum = 0;
	
	int co2res = 0;
	int tempres = 0;
	int humres = 0;
	while (counter < 10) {
     242:	0d c0       	rjmp	.+26     	; 0x25e <enqueueSharedData+0x3c>
		co2 += dequeueCO2Measure();
     244:	0e 94 11 1a 	call	0x3422	; 0x3422 <dequeueCO2Measure>
     248:	c8 0e       	add	r12, r24
     24a:	d9 1e       	adc	r13, r25
		temp += dequeueTempMeasure();
     24c:	0e 94 11 1b 	call	0x3622	; 0x3622 <dequeueTempMeasure>
     250:	e8 0e       	add	r14, r24
     252:	f9 1e       	adc	r15, r25
		hum += dequeueHumidityMeasure();
     254:	0e 94 42 1b 	call	0x3684	; 0x3684 <dequeueHumidityMeasure>
     258:	08 0f       	add	r16, r24
     25a:	19 1f       	adc	r17, r25
		counter++;
     25c:	21 96       	adiw	r28, 0x01	; 1
	uint16_t hum = 0;
	
	int co2res = 0;
	int tempres = 0;
	int humres = 0;
	while (counter < 10) {
     25e:	ca 30       	cpi	r28, 0x0A	; 10
     260:	d1 05       	cpc	r29, r1
     262:	84 f3       	brlt	.-32     	; 0x244 <enqueueSharedData+0x22>
		co2 += dequeueCO2Measure();
		temp += dequeueTempMeasure();
		hum += dequeueHumidityMeasure();
		counter++;
	}
	co2res = (co2 / (counter + 1));
     264:	21 96       	adiw	r28, 0x01	; 1
     266:	c6 01       	movw	r24, r12
     268:	be 01       	movw	r22, r28
     26a:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__udivmodhi4>
     26e:	26 2f       	mov	r18, r22
     270:	37 2f       	mov	r19, r23
	co2 = (uint16_t) co2res;
	
	tempres = (temp / (counter + 1));
     272:	c7 01       	movw	r24, r14
     274:	be 01       	movw	r22, r28
     276:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <__divmodhi4>
     27a:	46 2f       	mov	r20, r22
     27c:	f7 2e       	mov	r15, r23
	temp = (int16_t) tempres;
	
	humres = (hum / (counter + 1));
     27e:	c8 01       	movw	r24, r16
     280:	be 01       	movw	r22, r28
     282:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__udivmodhi4>
	
	


	SharedData_t shared = &sharedData;
	shared->co2 = co2;
     286:	e9 e4       	ldi	r30, 0x49	; 73
     288:	f9 e1       	ldi	r31, 0x19	; 25
     28a:	20 83       	st	Z, r18
     28c:	31 83       	std	Z+1, r19	; 0x01
	shared->temperature = temp;
     28e:	42 83       	std	Z+2, r20	; 0x02
     290:	f3 82       	std	Z+3, r15	; 0x03
	shared->humidity = hum;
     292:	64 83       	std	Z+4, r22	; 0x04
     294:	75 83       	std	Z+5, r23	; 0x05
	
	sprintf(printstring, "ENQUEUE: humidity: %d, co2: %d, Temp: %d \n", hum, co2, temp);
     296:	ff 92       	push	r15
     298:	4f 93       	push	r20
     29a:	3f 93       	push	r19
     29c:	2f 93       	push	r18
     29e:	7f 93       	push	r23
     2a0:	6f 93       	push	r22
     2a2:	8f e6       	ldi	r24, 0x6F	; 111
     2a4:	92 e0       	ldi	r25, 0x02	; 2
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	85 ee       	ldi	r24, 0xE5	; 229
     2ac:	98 e1       	ldi	r25, 0x18	; 24
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
	test_outprint(printstring);
     2b6:	85 ee       	ldi	r24, 0xE5	; 229
     2b8:	98 e1       	ldi	r25, 0x18	; 24
     2ba:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <test_outprint>

	//printf("ENQUEUE: humidity: %d, co2: %d, Temp: %d \n", shared->humidity, shared->co2, shared->temperature);

	xQueueSend(xQueueShared, (void*)&sharedData, portMAX_DELAY);
     2be:	00 e0       	ldi	r16, 0x00	; 0
     2c0:	2f ef       	ldi	r18, 0xFF	; 255
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	a9 01       	movw	r20, r18
     2c6:	69 e4       	ldi	r22, 0x49	; 73
     2c8:	79 e1       	ldi	r23, 0x19	; 25
     2ca:	80 91 4f 19 	lds	r24, 0x194F	; 0x80194f <xQueueShared>
     2ce:	90 91 50 19 	lds	r25, 0x1950	; 0x801950 <xQueueShared+0x1>
     2d2:	63 d4       	rcall	.+2246   	; 0xb9a <xQueueGenericSend>

}
     2d4:	8d b7       	in	r24, 0x3d	; 61
     2d6:	9e b7       	in	r25, 0x3e	; 62
     2d8:	0a 96       	adiw	r24, 0x0a	; 10
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	9e bf       	out	0x3e, r25	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	8d bf       	out	0x3d, r24	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	08 95       	ret

000002f6 <dequeueSharedData>:

SharedData_t dequeueSharedData() {
	SharedData_t data = &receiveSharedData;
	xQueueReceive(xQueueShared, &receiveSharedData, (TickType_t) 10);
     2f6:	2a e0       	ldi	r18, 0x0A	; 10
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	61 e5       	ldi	r22, 0x51	; 81
     300:	79 e1       	ldi	r23, 0x19	; 25
     302:	80 91 4f 19 	lds	r24, 0x194F	; 0x80194f <xQueueShared>
     306:	90 91 50 19 	lds	r25, 0x1950	; 0x801950 <xQueueShared+0x1>
     30a:	14 d5       	rcall	.+2600   	; 0xd34 <xQueueReceive>
	return data;
}
     30c:	81 e5       	ldi	r24, 0x51	; 81
     30e:	99 e1       	ldi	r25, 0x19	; 25
     310:	08 95       	ret

00000312 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     312:	ee ed       	ldi	r30, 0xDE	; 222
     314:	f8 e0       	ldi	r31, 0x08	; 8
     316:	a2 ee       	ldi	r26, 0xE2	; 226
     318:	b8 e0       	ldi	r27, 0x08	; 8
     31a:	b1 83       	std	Z+1, r27	; 0x01
     31c:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     31e:	13 82       	std	Z+3, r1	; 0x03
     320:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     322:	ea e8       	ldi	r30, 0x8A	; 138
     324:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     326:	f0 93 dd 08 	sts	0x08DD, r31	; 0x8008dd <pxEnd+0x1>
     32a:	e0 93 dc 08 	sts	0x08DC, r30	; 0x8008dc <pxEnd>
    pxEnd->xBlockSize = 0;
     32e:	13 82       	std	Z+3, r1	; 0x03
     330:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     332:	11 82       	std	Z+1, r1	; 0x01
     334:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     336:	88 ea       	ldi	r24, 0xA8	; 168
     338:	9d e0       	ldi	r25, 0x0D	; 13
     33a:	13 96       	adiw	r26, 0x03	; 3
     33c:	9c 93       	st	X, r25
     33e:	8e 93       	st	-X, r24
     340:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     342:	ed 93       	st	X+, r30
     344:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     346:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <xMinimumEverFreeBytesRemaining+0x1>
     34a:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     34e:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <xFreeBytesRemaining+0x1>
     352:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e8       	ldi	r25, 0x80	; 128
     35a:	90 93 d3 08 	sts	0x08D3, r25	; 0x8008d3 <__data_end+0x1>
     35e:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <__data_end>
     362:	08 95       	ret

00000364 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     36a:	ae ed       	ldi	r26, 0xDE	; 222
     36c:	b8 e0       	ldi	r27, 0x08	; 8
     36e:	01 c0       	rjmp	.+2      	; 0x372 <prvInsertBlockIntoFreeList+0xe>
     370:	df 01       	movw	r26, r30
     372:	ed 91       	ld	r30, X+
     374:	fc 91       	ld	r31, X
     376:	11 97       	sbiw	r26, 0x01	; 1
     378:	ec 17       	cp	r30, r28
     37a:	fd 07       	cpc	r31, r29
     37c:	c8 f3       	brcs	.-14     	; 0x370 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     37e:	12 96       	adiw	r26, 0x02	; 2
     380:	8d 91       	ld	r24, X+
     382:	9c 91       	ld	r25, X
     384:	13 97       	sbiw	r26, 0x03	; 3
     386:	9d 01       	movw	r18, r26
     388:	28 0f       	add	r18, r24
     38a:	39 1f       	adc	r19, r25
     38c:	c2 17       	cp	r28, r18
     38e:	d3 07       	cpc	r29, r19
     390:	49 f4       	brne	.+18     	; 0x3a4 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     392:	2a 81       	ldd	r18, Y+2	; 0x02
     394:	3b 81       	ldd	r19, Y+3	; 0x03
     396:	82 0f       	add	r24, r18
     398:	93 1f       	adc	r25, r19
     39a:	13 96       	adiw	r26, 0x03	; 3
     39c:	9c 93       	st	X, r25
     39e:	8e 93       	st	-X, r24
     3a0:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     3a2:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
     3a6:	9b 81       	ldd	r25, Y+3	; 0x03
     3a8:	9e 01       	movw	r18, r28
     3aa:	28 0f       	add	r18, r24
     3ac:	39 1f       	adc	r19, r25
     3ae:	e2 17       	cp	r30, r18
     3b0:	f3 07       	cpc	r31, r19
     3b2:	c1 f4       	brne	.+48     	; 0x3e4 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     3b4:	20 91 dc 08 	lds	r18, 0x08DC	; 0x8008dc <pxEnd>
     3b8:	30 91 dd 08 	lds	r19, 0x08DD	; 0x8008dd <pxEnd+0x1>
     3bc:	e2 17       	cp	r30, r18
     3be:	f3 07       	cpc	r31, r19
     3c0:	71 f0       	breq	.+28     	; 0x3de <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     3c2:	22 81       	ldd	r18, Z+2	; 0x02
     3c4:	33 81       	ldd	r19, Z+3	; 0x03
     3c6:	82 0f       	add	r24, r18
     3c8:	93 1f       	adc	r25, r19
     3ca:	9b 83       	std	Y+3, r25	; 0x03
     3cc:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     3ce:	ed 91       	ld	r30, X+
     3d0:	fc 91       	ld	r31, X
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	80 81       	ld	r24, Z
     3d6:	91 81       	ldd	r25, Z+1	; 0x01
     3d8:	99 83       	std	Y+1, r25	; 0x01
     3da:	88 83       	st	Y, r24
     3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     3de:	39 83       	std	Y+1, r19	; 0x01
     3e0:	28 83       	st	Y, r18
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     3e4:	f9 83       	std	Y+1, r31	; 0x01
     3e6:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     3e8:	ca 17       	cp	r28, r26
     3ea:	db 07       	cpc	r29, r27
     3ec:	11 f0       	breq	.+4      	; 0x3f2 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     3ee:	cd 93       	st	X+, r28
     3f0:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     406:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     40a:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <pxEnd>
     40e:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <pxEnd+0x1>
     412:	89 2b       	or	r24, r25
     414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
        {
            prvHeapInit();
     416:	7d df       	rcall	.-262    	; 0x312 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     418:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <__data_end>
     41c:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <__data_end+0x1>
     420:	80 23       	and	r24, r16
     422:	91 23       	and	r25, r17
     424:	89 2b       	or	r24, r25
     426:	09 f0       	breq	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	76 c0       	rjmp	.+236    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     42a:	01 15       	cp	r16, r1
     42c:	11 05       	cpc	r17, r1
     42e:	49 f0       	breq	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     430:	c8 01       	movw	r24, r16
     432:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     434:	08 17       	cp	r16, r24
     436:	19 07       	cpc	r17, r25
     438:	18 f0       	brcs	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     43a:	00 e0       	ldi	r16, 0x00	; 0
     43c:	10 e0       	ldi	r17, 0x00	; 0
     43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     440:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     442:	01 15       	cp	r16, r1
     444:	11 05       	cpc	r17, r1
     446:	09 f4       	brne	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	69 c0       	rjmp	.+210    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     44a:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <xFreeBytesRemaining>
     44e:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <xFreeBytesRemaining+0x1>
     452:	80 17       	cp	r24, r16
     454:	91 07       	cpc	r25, r17
     456:	08 f4       	brcc	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	64 c0       	rjmp	.+200    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     45a:	c0 91 de 08 	lds	r28, 0x08DE	; 0x8008de <xStart>
     45e:	d0 91 df 08 	lds	r29, 0x08DF	; 0x8008df <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     462:	ee ed       	ldi	r30, 0xDE	; 222
     464:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     466:	02 c0       	rjmp	.+4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
                {
                    pxPreviousBlock = pxBlock;
     468:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     46a:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	9b 81       	ldd	r25, Y+3	; 0x03
     470:	80 17       	cp	r24, r16
     472:	91 07       	cpc	r25, r17
     474:	20 f4       	brcc	.+8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     476:	88 81       	ld	r24, Y
     478:	99 81       	ldd	r25, Y+1	; 0x01
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	a9 f7       	brne	.-22     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     47e:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <pxEnd>
     482:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <pxEnd+0x1>
     486:	c8 17       	cp	r28, r24
     488:	d9 07       	cpc	r29, r25
     48a:	09 f4       	brne	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	4d c0       	rjmp	.+154    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     48e:	e0 80       	ld	r14, Z
     490:	f1 80       	ldd	r15, Z+1	; 0x01
     492:	84 e0       	ldi	r24, 0x04	; 4
     494:	e8 0e       	add	r14, r24
     496:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     498:	88 81       	ld	r24, Y
     49a:	99 81       	ldd	r25, Y+1	; 0x01
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4a0:	2a 81       	ldd	r18, Y+2	; 0x02
     4a2:	3b 81       	ldd	r19, Y+3	; 0x03
     4a4:	20 1b       	sub	r18, r16
     4a6:	31 0b       	sbc	r19, r17
     4a8:	29 30       	cpi	r18, 0x09	; 9
     4aa:	31 05       	cpc	r19, r1
     4ac:	48 f0       	brcs	.+18     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     4ae:	ce 01       	movw	r24, r28
     4b0:	80 0f       	add	r24, r16
     4b2:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     4b4:	fc 01       	movw	r30, r24
     4b6:	33 83       	std	Z+3, r19	; 0x03
     4b8:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     4ba:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     4bc:	0a 83       	std	Y+2, r16	; 0x02
     4be:	52 df       	rcall	.-348    	; 0x364 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     4c0:	2a 81       	ldd	r18, Y+2	; 0x02
     4c2:	3b 81       	ldd	r19, Y+3	; 0x03
     4c4:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <xFreeBytesRemaining>
     4c8:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <xFreeBytesRemaining+0x1>
     4cc:	82 1b       	sub	r24, r18
     4ce:	93 0b       	sbc	r25, r19
     4d0:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <xFreeBytesRemaining+0x1>
     4d4:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     4d8:	40 91 d8 08 	lds	r20, 0x08D8	; 0x8008d8 <xMinimumEverFreeBytesRemaining>
     4dc:	50 91 d9 08 	lds	r21, 0x08D9	; 0x8008d9 <xMinimumEverFreeBytesRemaining+0x1>
     4e0:	84 17       	cp	r24, r20
     4e2:	95 07       	cpc	r25, r21
     4e4:	20 f4       	brcc	.+8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     4e6:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <xMinimumEverFreeBytesRemaining+0x1>
     4ea:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     4ee:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <__data_end>
     4f2:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <__data_end+0x1>
     4f6:	28 2b       	or	r18, r24
     4f8:	39 2b       	or	r19, r25
     4fa:	3b 83       	std	Y+3, r19	; 0x03
     4fc:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     4fe:	19 82       	std	Y+1, r1	; 0x01
     500:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     502:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <xNumberOfSuccessfulAllocations>
     506:	90 91 d7 08 	lds	r25, 0x08D7	; 0x8008d7 <xNumberOfSuccessfulAllocations+0x1>
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	90 93 d7 08 	sts	0x08D7, r25	; 0x8008d7 <xNumberOfSuccessfulAllocations+0x1>
     510:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <xNumberOfSuccessfulAllocations>
     514:	0b c0       	rjmp	.+22     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     516:	e1 2c       	mov	r14, r1
     518:	f1 2c       	mov	r15, r1
     51a:	08 c0       	rjmp	.+16     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     51c:	e1 2c       	mov	r14, r1
     51e:	f1 2c       	mov	r15, r1
     520:	05 c0       	rjmp	.+10     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     522:	e1 2c       	mov	r14, r1
     524:	f1 2c       	mov	r15, r1
     526:	02 c0       	rjmp	.+4      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     528:	e1 2c       	mov	r14, r1
     52a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     52c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     530:	e1 14       	cp	r14, r1
     532:	f1 04       	cpc	r15, r1
     534:	11 f4       	brne	.+4      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     536:	0e 94 ae 19 	call	0x335c	; 0x335c <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     53a:	c7 01       	movw	r24, r14
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     552:	00 97       	sbiw	r24, 0x00	; 0
     554:	91 f1       	breq	.+100    	; 0x5ba <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     556:	ec 01       	movw	r28, r24
     558:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     55a:	4a 81       	ldd	r20, Y+2	; 0x02
     55c:	5b 81       	ldd	r21, Y+3	; 0x03
     55e:	20 91 d2 08 	lds	r18, 0x08D2	; 0x8008d2 <__data_end>
     562:	30 91 d3 08 	lds	r19, 0x08D3	; 0x8008d3 <__data_end+0x1>
     566:	ba 01       	movw	r22, r20
     568:	62 23       	and	r22, r18
     56a:	73 23       	and	r23, r19
     56c:	67 2b       	or	r22, r23
     56e:	29 f1       	breq	.+74     	; 0x5ba <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     570:	68 81       	ld	r22, Y
     572:	79 81       	ldd	r23, Y+1	; 0x01
     574:	67 2b       	or	r22, r23
     576:	09 f5       	brne	.+66     	; 0x5ba <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     578:	20 95       	com	r18
     57a:	30 95       	com	r19
     57c:	24 23       	and	r18, r20
     57e:	35 23       	and	r19, r21
     580:	3b 83       	std	Y+3, r19	; 0x03
     582:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     584:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     588:	8a 81       	ldd	r24, Y+2	; 0x02
     58a:	9b 81       	ldd	r25, Y+3	; 0x03
     58c:	20 91 da 08 	lds	r18, 0x08DA	; 0x8008da <xFreeBytesRemaining>
     590:	30 91 db 08 	lds	r19, 0x08DB	; 0x8008db <xFreeBytesRemaining+0x1>
     594:	82 0f       	add	r24, r18
     596:	93 1f       	adc	r25, r19
     598:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <xFreeBytesRemaining+0x1>
     59c:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5a0:	ce 01       	movw	r24, r28
     5a2:	e0 de       	rcall	.-576    	; 0x364 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     5a4:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <xNumberOfSuccessfulFrees>
     5a8:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <xNumberOfSuccessfulFrees+0x1>
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	90 93 d5 08 	sts	0x08D5, r25	; 0x8008d5 <xNumberOfSuccessfulFrees+0x1>
     5b2:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     5b6:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	08 95       	ret

000005c4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    return xFreeBytesRemaining;
}
     5c4:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <xFreeBytesRemaining>
     5c8:	90 91 db 08 	lds	r25, 0x08DB	; 0x8008db <xFreeBytesRemaining+0x1>
     5cc:	08 95       	ret

000005ce <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     5ce:	fc 01       	movw	r30, r24
     5d0:	03 96       	adiw	r24, 0x03	; 3
     5d2:	92 83       	std	Z+2, r25	; 0x02
     5d4:	81 83       	std	Z+1, r24	; 0x01
     5d6:	4f ef       	ldi	r20, 0xFF	; 255
     5d8:	5f ef       	ldi	r21, 0xFF	; 255
     5da:	ba 01       	movw	r22, r20
     5dc:	43 83       	std	Z+3, r20	; 0x03
     5de:	54 83       	std	Z+4, r21	; 0x04
     5e0:	65 83       	std	Z+5, r22	; 0x05
     5e2:	76 83       	std	Z+6, r23	; 0x06
     5e4:	90 87       	std	Z+8, r25	; 0x08
     5e6:	87 83       	std	Z+7, r24	; 0x07
     5e8:	92 87       	std	Z+10, r25	; 0x0a
     5ea:	81 87       	std	Z+9, r24	; 0x09
     5ec:	10 82       	st	Z, r1
     5ee:	08 95       	ret

000005f0 <vListInitialiseItem>:
     5f0:	fc 01       	movw	r30, r24
     5f2:	13 86       	std	Z+11, r1	; 0x0b
     5f4:	12 86       	std	Z+10, r1	; 0x0a
     5f6:	08 95       	ret

000005f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     602:	08 81       	ld	r16, Y
     604:	19 81       	ldd	r17, Y+1	; 0x01
     606:	2a 81       	ldd	r18, Y+2	; 0x02
     608:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     60a:	0f 3f       	cpi	r16, 0xFF	; 255
     60c:	4f ef       	ldi	r20, 0xFF	; 255
     60e:	14 07       	cpc	r17, r20
     610:	24 07       	cpc	r18, r20
     612:	34 07       	cpc	r19, r20
     614:	21 f4       	brne	.+8      	; 0x61e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     616:	fc 01       	movw	r30, r24
     618:	a1 85       	ldd	r26, Z+9	; 0x09
     61a:	b2 85       	ldd	r27, Z+10	; 0x0a
     61c:	11 c0       	rjmp	.+34     	; 0x640 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     61e:	dc 01       	movw	r26, r24
     620:	13 96       	adiw	r26, 0x03	; 3
     622:	01 c0       	rjmp	.+2      	; 0x626 <vListInsert+0x2e>
     624:	df 01       	movw	r26, r30
     626:	14 96       	adiw	r26, 0x04	; 4
     628:	ed 91       	ld	r30, X+
     62a:	fc 91       	ld	r31, X
     62c:	15 97       	sbiw	r26, 0x05	; 5
     62e:	40 81       	ld	r20, Z
     630:	51 81       	ldd	r21, Z+1	; 0x01
     632:	62 81       	ldd	r22, Z+2	; 0x02
     634:	73 81       	ldd	r23, Z+3	; 0x03
     636:	04 17       	cp	r16, r20
     638:	15 07       	cpc	r17, r21
     63a:	26 07       	cpc	r18, r22
     63c:	37 07       	cpc	r19, r23
     63e:	90 f7       	brcc	.-28     	; 0x624 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     640:	14 96       	adiw	r26, 0x04	; 4
     642:	ed 91       	ld	r30, X+
     644:	fc 91       	ld	r31, X
     646:	15 97       	sbiw	r26, 0x05	; 5
     648:	fd 83       	std	Y+5, r31	; 0x05
     64a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     64c:	d7 83       	std	Z+7, r29	; 0x07
     64e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     650:	bf 83       	std	Y+7, r27	; 0x07
     652:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     654:	15 96       	adiw	r26, 0x05	; 5
     656:	dc 93       	st	X, r29
     658:	ce 93       	st	-X, r28
     65a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     65c:	9b 87       	std	Y+11, r25	; 0x0b
     65e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     660:	fc 01       	movw	r30, r24
     662:	20 81       	ld	r18, Z
     664:	2f 5f       	subi	r18, 0xFF	; 255
     666:	20 83       	st	Z, r18
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	08 95       	ret

00000672 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     678:	a2 85       	ldd	r26, Z+10	; 0x0a
     67a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     67c:	c4 81       	ldd	r28, Z+4	; 0x04
     67e:	d5 81       	ldd	r29, Z+5	; 0x05
     680:	86 81       	ldd	r24, Z+6	; 0x06
     682:	97 81       	ldd	r25, Z+7	; 0x07
     684:	9f 83       	std	Y+7, r25	; 0x07
     686:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     688:	c6 81       	ldd	r28, Z+6	; 0x06
     68a:	d7 81       	ldd	r29, Z+7	; 0x07
     68c:	84 81       	ldd	r24, Z+4	; 0x04
     68e:	95 81       	ldd	r25, Z+5	; 0x05
     690:	9d 83       	std	Y+5, r25	; 0x05
     692:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     694:	11 96       	adiw	r26, 0x01	; 1
     696:	8d 91       	ld	r24, X+
     698:	9c 91       	ld	r25, X
     69a:	12 97       	sbiw	r26, 0x02	; 2
     69c:	e8 17       	cp	r30, r24
     69e:	f9 07       	cpc	r31, r25
     6a0:	31 f4       	brne	.+12     	; 0x6ae <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6a2:	86 81       	ldd	r24, Z+6	; 0x06
     6a4:	97 81       	ldd	r25, Z+7	; 0x07
     6a6:	12 96       	adiw	r26, 0x02	; 2
     6a8:	9c 93       	st	X, r25
     6aa:	8e 93       	st	-X, r24
     6ac:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6ae:	13 86       	std	Z+11, r1	; 0x0b
     6b0:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     6b2:	8c 91       	ld	r24, X
     6b4:	81 50       	subi	r24, 0x01	; 1
     6b6:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     6b8:	8c 91       	ld	r24, X
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     6c0:	a8 95       	wdr
     6c2:	90 ec       	ldi	r25, 0xC0	; 192
     6c4:	88 e1       	ldi	r24, 0x18	; 24
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	a8 95       	wdr
     6cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6d6:	08 95       	ret

000006d8 <pxPortInitialiseStack>:
     6d8:	fc 01       	movw	r30, r24
     6da:	60 83       	st	Z, r22
     6dc:	31 97       	sbiw	r30, 0x01	; 1
     6de:	70 83       	st	Z, r23
     6e0:	31 97       	sbiw	r30, 0x01	; 1
     6e2:	10 82       	st	Z, r1
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	10 82       	st	Z, r1
     6e8:	31 97       	sbiw	r30, 0x01	; 1
     6ea:	20 e8       	ldi	r18, 0x80	; 128
     6ec:	20 83       	st	Z, r18
     6ee:	31 97       	sbiw	r30, 0x01	; 1
     6f0:	10 82       	st	Z, r1
     6f2:	31 97       	sbiw	r30, 0x01	; 1
     6f4:	10 82       	st	Z, r1
     6f6:	31 97       	sbiw	r30, 0x01	; 1
     6f8:	10 82       	st	Z, r1
     6fa:	77 97       	sbiw	r30, 0x17	; 23
     6fc:	40 83       	st	Z, r20
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	50 83       	st	Z, r21
     702:	86 97       	sbiw	r24, 0x26	; 38
     704:	08 95       	ret

00000706 <xPortStartScheduler>:
     706:	dc df       	rcall	.-72     	; 0x6c0 <prvSetupTimerInterrupt>
     708:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
     70c:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
     710:	cd 91       	ld	r28, X+
     712:	cd bf       	out	0x3d, r28	; 61
     714:	dd 91       	ld	r29, X+
     716:	de bf       	out	0x3e, r29	; 62
     718:	ff 91       	pop	r31
     71a:	ef 91       	pop	r30
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	7f 91       	pop	r23
     72a:	6f 91       	pop	r22
     72c:	5f 91       	pop	r21
     72e:	4f 91       	pop	r20
     730:	3f 91       	pop	r19
     732:	2f 91       	pop	r18
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	bf 90       	pop	r11
     742:	af 90       	pop	r10
     744:	9f 90       	pop	r9
     746:	8f 90       	pop	r8
     748:	7f 90       	pop	r7
     74a:	6f 90       	pop	r6
     74c:	5f 90       	pop	r5
     74e:	4f 90       	pop	r4
     750:	3f 90       	pop	r3
     752:	2f 90       	pop	r2
     754:	1f 90       	pop	r1
     756:	0f 90       	pop	r0
     758:	0c be       	out	0x3c, r0	; 60
     75a:	0f 90       	pop	r0
     75c:	0b be       	out	0x3b, r0	; 59
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	08 95       	ret
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	08 95       	ret

0000076a <vPortYield>:
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	0f 92       	push	r0
     772:	0b b6       	in	r0, 0x3b	; 59
     774:	0f 92       	push	r0
     776:	0c b6       	in	r0, 0x3c	; 60
     778:	0f 92       	push	r0
     77a:	1f 92       	push	r1
     77c:	11 24       	eor	r1, r1
     77e:	2f 92       	push	r2
     780:	3f 92       	push	r3
     782:	4f 92       	push	r4
     784:	5f 92       	push	r5
     786:	6f 92       	push	r6
     788:	7f 92       	push	r7
     78a:	8f 92       	push	r8
     78c:	9f 92       	push	r9
     78e:	af 92       	push	r10
     790:	bf 92       	push	r11
     792:	cf 92       	push	r12
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	2f 93       	push	r18
     7a0:	3f 93       	push	r19
     7a2:	4f 93       	push	r20
     7a4:	5f 93       	push	r21
     7a6:	6f 93       	push	r22
     7a8:	7f 93       	push	r23
     7aa:	8f 93       	push	r24
     7ac:	9f 93       	push	r25
     7ae:	af 93       	push	r26
     7b0:	bf 93       	push	r27
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	ef 93       	push	r30
     7b8:	ff 93       	push	r31
     7ba:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
     7be:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
     7c2:	0d b6       	in	r0, 0x3d	; 61
     7c4:	0d 92       	st	X+, r0
     7c6:	0e b6       	in	r0, 0x3e	; 62
     7c8:	0d 92       	st	X+, r0
     7ca:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <vTaskSwitchContext>
     7ce:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
     7d2:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
     7d6:	cd 91       	ld	r28, X+
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	dd 91       	ld	r29, X+
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	ff 91       	pop	r31
     7e0:	ef 91       	pop	r30
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	bf 90       	pop	r11
     808:	af 90       	pop	r10
     80a:	9f 90       	pop	r9
     80c:	8f 90       	pop	r8
     80e:	7f 90       	pop	r7
     810:	6f 90       	pop	r6
     812:	5f 90       	pop	r5
     814:	4f 90       	pop	r4
     816:	3f 90       	pop	r3
     818:	2f 90       	pop	r2
     81a:	1f 90       	pop	r1
     81c:	0f 90       	pop	r0
     81e:	0c be       	out	0x3c, r0	; 60
     820:	0f 90       	pop	r0
     822:	0b be       	out	0x3b, r0	; 59
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	08 95       	ret

0000082c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	0f 92       	push	r0
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	0c b6       	in	r0, 0x3c	; 60
     83a:	0f 92       	push	r0
     83c:	1f 92       	push	r1
     83e:	11 24       	eor	r1, r1
     840:	2f 92       	push	r2
     842:	3f 92       	push	r3
     844:	4f 92       	push	r4
     846:	5f 92       	push	r5
     848:	6f 92       	push	r6
     84a:	7f 92       	push	r7
     84c:	8f 92       	push	r8
     84e:	9f 92       	push	r9
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	2f 93       	push	r18
     862:	3f 93       	push	r19
     864:	4f 93       	push	r20
     866:	5f 93       	push	r21
     868:	6f 93       	push	r22
     86a:	7f 93       	push	r23
     86c:	8f 93       	push	r24
     86e:	9f 93       	push	r25
     870:	af 93       	push	r26
     872:	bf 93       	push	r27
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
     87c:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
     880:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
     884:	0d b6       	in	r0, 0x3d	; 61
     886:	0d 92       	st	X+, r0
     888:	0e b6       	in	r0, 0x3e	; 62
     88a:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     88c:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     88e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xTaskIncrementTick>
     892:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     894:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     898:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
     89c:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
     8a0:	cd 91       	ld	r28, X+
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	dd 91       	ld	r29, X+
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	bf 91       	pop	r27
     8b2:	af 91       	pop	r26
     8b4:	9f 91       	pop	r25
     8b6:	8f 91       	pop	r24
     8b8:	7f 91       	pop	r23
     8ba:	6f 91       	pop	r22
     8bc:	5f 91       	pop	r21
     8be:	4f 91       	pop	r20
     8c0:	3f 91       	pop	r19
     8c2:	2f 91       	pop	r18
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	8f 90       	pop	r8
     8d8:	7f 90       	pop	r7
     8da:	6f 90       	pop	r6
     8dc:	5f 90       	pop	r5
     8de:	4f 90       	pop	r4
     8e0:	3f 90       	pop	r3
     8e2:	2f 90       	pop	r2
     8e4:	1f 90       	pop	r1
     8e6:	0f 90       	pop	r0
     8e8:	0c be       	out	0x3c, r0	; 60
     8ea:	0f 90       	pop	r0
     8ec:	0b be       	out	0x3b, r0	; 59
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     8f4:	08 95       	ret

000008f6 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     8f6:	9a df       	rcall	.-204    	; 0x82c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     8f8:	18 95       	reti

000008fa <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     8fa:	dc 01       	movw	r26, r24
     8fc:	53 96       	adiw	r26, 0x13	; 19
     8fe:	2c 91       	ld	r18, X
     900:	53 97       	sbiw	r26, 0x13	; 19
     902:	22 23       	and	r18, r18
     904:	41 f0       	breq	.+16     	; 0x916 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     906:	5a 96       	adiw	r26, 0x1a	; 26
     908:	ed 91       	ld	r30, X+
     90a:	fc 91       	ld	r31, X
     90c:	5b 97       	sbiw	r26, 0x1b	; 27
     90e:	90 81       	ld	r25, Z
     910:	8a e0       	ldi	r24, 0x0A	; 10
     912:	89 1b       	sub	r24, r25
     914:	08 95       	ret
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	08 95       	ret

0000091a <prvIsQueueEmpty>:
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	0f 92       	push	r0
     920:	fc 01       	movw	r30, r24
     922:	86 8d       	ldd	r24, Z+30	; 0x1e
     924:	81 11       	cpse	r24, r1
     926:	02 c0       	rjmp	.+4      	; 0x92c <prvIsQueueEmpty+0x12>
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	01 c0       	rjmp	.+2      	; 0x92e <prvIsQueueEmpty+0x14>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	08 95       	ret

00000934 <prvIsQueueFull>:
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	0f 92       	push	r0
     93a:	fc 01       	movw	r30, r24
     93c:	26 8d       	ldd	r18, Z+30	; 0x1e
     93e:	87 8d       	ldd	r24, Z+31	; 0x1f
     940:	28 13       	cpse	r18, r24
     942:	02 c0       	rjmp	.+4      	; 0x948 <prvIsQueueFull+0x14>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	01 c0       	rjmp	.+2      	; 0x94a <prvIsQueueFull+0x16>
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	08 95       	ret

00000950 <prvCopyDataToQueue>:
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
     95a:	04 2f       	mov	r16, r20
     95c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     95e:	48 a1       	ldd	r20, Y+32	; 0x20
     960:	41 11       	cpse	r20, r1
     962:	0c c0       	rjmp	.+24     	; 0x97c <prvCopyDataToQueue+0x2c>
     964:	88 81       	ld	r24, Y
     966:	99 81       	ldd	r25, Y+1	; 0x01
     968:	89 2b       	or	r24, r25
     96a:	09 f0       	breq	.+2      	; 0x96e <prvCopyDataToQueue+0x1e>
     96c:	42 c0       	rjmp	.+132    	; 0x9f2 <prvCopyDataToQueue+0xa2>
     96e:	8c 81       	ldd	r24, Y+4	; 0x04
     970:	9d 81       	ldd	r25, Y+5	; 0x05
     972:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <xTaskPriorityDisinherit>
     976:	1d 82       	std	Y+5, r1	; 0x05
     978:	1c 82       	std	Y+4, r1	; 0x04
     97a:	42 c0       	rjmp	.+132    	; 0xa00 <prvCopyDataToQueue+0xb0>
     97c:	01 11       	cpse	r16, r1
     97e:	17 c0       	rjmp	.+46     	; 0x9ae <prvCopyDataToQueue+0x5e>
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	9b 81       	ldd	r25, Y+3	; 0x03
     986:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <memcpy>
     98a:	28 a1       	ldd	r18, Y+32	; 0x20
     98c:	8a 81       	ldd	r24, Y+2	; 0x02
     98e:	9b 81       	ldd	r25, Y+3	; 0x03
     990:	82 0f       	add	r24, r18
     992:	91 1d       	adc	r25, r1
     994:	9b 83       	std	Y+3, r25	; 0x03
     996:	8a 83       	std	Y+2, r24	; 0x02
     998:	2c 81       	ldd	r18, Y+4	; 0x04
     99a:	3d 81       	ldd	r19, Y+5	; 0x05
     99c:	82 17       	cp	r24, r18
     99e:	93 07       	cpc	r25, r19
     9a0:	50 f1       	brcs	.+84     	; 0x9f6 <prvCopyDataToQueue+0xa6>
     9a2:	88 81       	ld	r24, Y
     9a4:	99 81       	ldd	r25, Y+1	; 0x01
     9a6:	9b 83       	std	Y+3, r25	; 0x03
     9a8:	8a 83       	std	Y+2, r24	; 0x02
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	29 c0       	rjmp	.+82     	; 0xa00 <prvCopyDataToQueue+0xb0>
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	8e 81       	ldd	r24, Y+6	; 0x06
     9b2:	9f 81       	ldd	r25, Y+7	; 0x07
     9b4:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <memcpy>
     9b8:	88 a1       	ldd	r24, Y+32	; 0x20
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	91 95       	neg	r25
     9be:	81 95       	neg	r24
     9c0:	91 09       	sbc	r25, r1
     9c2:	2e 81       	ldd	r18, Y+6	; 0x06
     9c4:	3f 81       	ldd	r19, Y+7	; 0x07
     9c6:	28 0f       	add	r18, r24
     9c8:	39 1f       	adc	r19, r25
     9ca:	3f 83       	std	Y+7, r19	; 0x07
     9cc:	2e 83       	std	Y+6, r18	; 0x06
     9ce:	48 81       	ld	r20, Y
     9d0:	59 81       	ldd	r21, Y+1	; 0x01
     9d2:	24 17       	cp	r18, r20
     9d4:	35 07       	cpc	r19, r21
     9d6:	30 f4       	brcc	.+12     	; 0x9e4 <prvCopyDataToQueue+0x94>
     9d8:	2c 81       	ldd	r18, Y+4	; 0x04
     9da:	3d 81       	ldd	r19, Y+5	; 0x05
     9dc:	82 0f       	add	r24, r18
     9de:	93 1f       	adc	r25, r19
     9e0:	9f 83       	std	Y+7, r25	; 0x07
     9e2:	8e 83       	std	Y+6, r24	; 0x06
     9e4:	02 30       	cpi	r16, 0x02	; 2
     9e6:	49 f4       	brne	.+18     	; 0x9fa <prvCopyDataToQueue+0xaa>
     9e8:	11 23       	and	r17, r17
     9ea:	49 f0       	breq	.+18     	; 0x9fe <prvCopyDataToQueue+0xae>
     9ec:	11 50       	subi	r17, 0x01	; 1
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	07 c0       	rjmp	.+14     	; 0xa00 <prvCopyDataToQueue+0xb0>
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <prvCopyDataToQueue+0xb0>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <prvCopyDataToQueue+0xb0>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <prvCopyDataToQueue+0xb0>
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	1f 5f       	subi	r17, 0xFF	; 255
     a02:	1e 8f       	std	Y+30, r17	; 0x1e
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	08 95       	ret

00000a0e <prvCopyDataFromQueue>:
     a0e:	fc 01       	movw	r30, r24
     a10:	40 a1       	ldd	r20, Z+32	; 0x20
     a12:	44 23       	and	r20, r20
     a14:	a9 f0       	breq	.+42     	; 0xa40 <prvCopyDataFromQueue+0x32>
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	26 81       	ldd	r18, Z+6	; 0x06
     a1a:	37 81       	ldd	r19, Z+7	; 0x07
     a1c:	24 0f       	add	r18, r20
     a1e:	35 1f       	adc	r19, r21
     a20:	37 83       	std	Z+7, r19	; 0x07
     a22:	26 83       	std	Z+6, r18	; 0x06
     a24:	84 81       	ldd	r24, Z+4	; 0x04
     a26:	95 81       	ldd	r25, Z+5	; 0x05
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	20 f0       	brcs	.+8      	; 0xa36 <prvCopyDataFromQueue+0x28>
     a2e:	80 81       	ld	r24, Z
     a30:	91 81       	ldd	r25, Z+1	; 0x01
     a32:	97 83       	std	Z+7, r25	; 0x07
     a34:	86 83       	std	Z+6, r24	; 0x06
     a36:	cb 01       	movw	r24, r22
     a38:	66 81       	ldd	r22, Z+6	; 0x06
     a3a:	77 81       	ldd	r23, Z+7	; 0x07
     a3c:	0c 94 81 2e 	jmp	0x5d02	; 0x5d02 <memcpy>
     a40:	08 95       	ret

00000a42 <prvUnlockQueue>:
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	ec 01       	movw	r28, r24
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	0f 92       	push	r0
     a50:	1a a1       	ldd	r17, Y+34	; 0x22
     a52:	0b c0       	rjmp	.+22     	; 0xa6a <prvUnlockQueue+0x28>
     a54:	8b 89       	ldd	r24, Y+19	; 0x13
     a56:	88 23       	and	r24, r24
     a58:	51 f0       	breq	.+20     	; 0xa6e <prvUnlockQueue+0x2c>
     a5a:	ce 01       	movw	r24, r28
     a5c:	43 96       	adiw	r24, 0x13	; 19
     a5e:	0e 94 1a 11 	call	0x2234	; 0x2234 <xTaskRemoveFromEventList>
     a62:	81 11       	cpse	r24, r1
     a64:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskMissedYield>
     a68:	11 50       	subi	r17, 0x01	; 1
     a6a:	11 16       	cp	r1, r17
     a6c:	9c f3       	brlt	.-26     	; 0xa54 <prvUnlockQueue+0x12>
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	8a a3       	std	Y+34, r24	; 0x22
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	0f 92       	push	r0
     a7c:	19 a1       	ldd	r17, Y+33	; 0x21
     a7e:	0b c0       	rjmp	.+22     	; 0xa96 <prvUnlockQueue+0x54>
     a80:	88 85       	ldd	r24, Y+8	; 0x08
     a82:	88 23       	and	r24, r24
     a84:	51 f0       	breq	.+20     	; 0xa9a <prvUnlockQueue+0x58>
     a86:	ce 01       	movw	r24, r28
     a88:	08 96       	adiw	r24, 0x08	; 8
     a8a:	0e 94 1a 11 	call	0x2234	; 0x2234 <xTaskRemoveFromEventList>
     a8e:	81 11       	cpse	r24, r1
     a90:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskMissedYield>
     a94:	11 50       	subi	r17, 0x01	; 1
     a96:	11 16       	cp	r1, r17
     a98:	9c f3       	brlt	.-26     	; 0xa80 <prvUnlockQueue+0x3e>
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	89 a3       	std	Y+33, r24	; 0x21
     a9e:	0f 90       	pop	r0
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	08 95       	ret

00000aaa <xQueueGenericReset>:
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	ec 01       	movw	r28, r24
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	0f 92       	push	r0
     ab6:	e8 81       	ld	r30, Y
     ab8:	f9 81       	ldd	r31, Y+1	; 0x01
     aba:	8f 8d       	ldd	r24, Y+31	; 0x1f
     abc:	28 a1       	ldd	r18, Y+32	; 0x20
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	82 9f       	mul	r24, r18
     ac4:	a0 01       	movw	r20, r0
     ac6:	83 9f       	mul	r24, r19
     ac8:	50 0d       	add	r21, r0
     aca:	92 9f       	mul	r25, r18
     acc:	50 0d       	add	r21, r0
     ace:	11 24       	eor	r1, r1
     ad0:	4e 0f       	add	r20, r30
     ad2:	5f 1f       	adc	r21, r31
     ad4:	5d 83       	std	Y+5, r21	; 0x05
     ad6:	4c 83       	std	Y+4, r20	; 0x04
     ad8:	1e 8e       	std	Y+30, r1	; 0x1e
     ada:	fb 83       	std	Y+3, r31	; 0x03
     adc:	ea 83       	std	Y+2, r30	; 0x02
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	28 9f       	mul	r18, r24
     ae2:	a0 01       	movw	r20, r0
     ae4:	29 9f       	mul	r18, r25
     ae6:	50 0d       	add	r21, r0
     ae8:	38 9f       	mul	r19, r24
     aea:	50 0d       	add	r21, r0
     aec:	11 24       	eor	r1, r1
     aee:	cf 01       	movw	r24, r30
     af0:	84 0f       	add	r24, r20
     af2:	95 1f       	adc	r25, r21
     af4:	9f 83       	std	Y+7, r25	; 0x07
     af6:	8e 83       	std	Y+6, r24	; 0x06
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	89 a3       	std	Y+33, r24	; 0x21
     afc:	8a a3       	std	Y+34, r24	; 0x22
     afe:	61 11       	cpse	r22, r1
     b00:	0b c0       	rjmp	.+22     	; 0xb18 <xQueueGenericReset+0x6e>
     b02:	88 85       	ldd	r24, Y+8	; 0x08
     b04:	88 23       	and	r24, r24
     b06:	71 f0       	breq	.+28     	; 0xb24 <xQueueGenericReset+0x7a>
     b08:	ce 01       	movw	r24, r28
     b0a:	08 96       	adiw	r24, 0x08	; 8
     b0c:	0e 94 1a 11 	call	0x2234	; 0x2234 <xTaskRemoveFromEventList>
     b10:	88 23       	and	r24, r24
     b12:	41 f0       	breq	.+16     	; 0xb24 <xQueueGenericReset+0x7a>
     b14:	2a de       	rcall	.-940    	; 0x76a <vPortYield>
     b16:	06 c0       	rjmp	.+12     	; 0xb24 <xQueueGenericReset+0x7a>
     b18:	ce 01       	movw	r24, r28
     b1a:	08 96       	adiw	r24, 0x08	; 8
     b1c:	58 dd       	rcall	.-1360   	; 0x5ce <vListInitialise>
     b1e:	ce 01       	movw	r24, r28
     b20:	43 96       	adiw	r24, 0x13	; 19
     b22:	55 dd       	rcall	.-1366   	; 0x5ce <vListInitialise>
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <prvInitialiseNewQueue>:
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	f8 01       	movw	r30, r16
     b36:	61 11       	cpse	r22, r1
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <prvInitialiseNewQueue+0x10>
     b3a:	11 83       	std	Z+1, r17	; 0x01
     b3c:	00 83       	st	Z, r16
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <prvInitialiseNewQueue+0x14>
     b40:	51 83       	std	Z+1, r21	; 0x01
     b42:	40 83       	st	Z, r20
     b44:	87 8f       	std	Z+31, r24	; 0x1f
     b46:	60 a3       	std	Z+32, r22	; 0x20
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	cf 01       	movw	r24, r30
     b4c:	ae df       	rcall	.-164    	; 0xaaa <xQueueGenericReset>
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <xQueueGenericCreate>:
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	f8 2e       	mov	r15, r24
     b64:	e6 2e       	mov	r14, r22
     b66:	d4 2e       	mov	r13, r20
     b68:	86 9f       	mul	r24, r22
     b6a:	c0 01       	movw	r24, r0
     b6c:	11 24       	eor	r1, r1
     b6e:	83 96       	adiw	r24, 0x23	; 35
     b70:	43 dc       	rcall	.-1914   	; 0x3f8 <pvPortMalloc>
     b72:	ec 01       	movw	r28, r24
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	41 f0       	breq	.+16     	; 0xb88 <xQueueGenericCreate+0x34>
     b78:	8c 01       	movw	r16, r24
     b7a:	2d 2d       	mov	r18, r13
     b7c:	ac 01       	movw	r20, r24
     b7e:	4d 5d       	subi	r20, 0xDD	; 221
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	6e 2d       	mov	r22, r14
     b84:	8f 2d       	mov	r24, r15
     b86:	d4 df       	rcall	.-88     	; 0xb30 <prvInitialiseNewQueue>
     b88:	ce 01       	movw	r24, r28
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	08 95       	ret

00000b9a <xQueueGenericSend>:
     b9a:	cf 92       	push	r12
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	29 97       	sbiw	r28, 0x09	; 9
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	7c 01       	movw	r14, r24
     bbc:	6b 01       	movw	r12, r22
     bbe:	2e 83       	std	Y+6, r18	; 0x06
     bc0:	3f 83       	std	Y+7, r19	; 0x07
     bc2:	48 87       	std	Y+8, r20	; 0x08
     bc4:	59 87       	std	Y+9, r21	; 0x09
     bc6:	10 e0       	ldi	r17, 0x00	; 0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	0f 92       	push	r0
     bce:	f7 01       	movw	r30, r14
     bd0:	96 8d       	ldd	r25, Z+30	; 0x1e
     bd2:	87 8d       	ldd	r24, Z+31	; 0x1f
     bd4:	98 17       	cp	r25, r24
     bd6:	10 f0       	brcs	.+4      	; 0xbdc <xQueueGenericSend+0x42>
     bd8:	02 30       	cpi	r16, 0x02	; 2
     bda:	b1 f4       	brne	.+44     	; 0xc08 <xQueueGenericSend+0x6e>
     bdc:	40 2f       	mov	r20, r16
     bde:	b6 01       	movw	r22, r12
     be0:	c7 01       	movw	r24, r14
     be2:	b6 de       	rcall	.-660    	; 0x950 <prvCopyDataToQueue>
     be4:	f7 01       	movw	r30, r14
     be6:	93 89       	ldd	r25, Z+19	; 0x13
     be8:	99 23       	and	r25, r25
     bea:	41 f0       	breq	.+16     	; 0xbfc <xQueueGenericSend+0x62>
     bec:	c7 01       	movw	r24, r14
     bee:	43 96       	adiw	r24, 0x13	; 19
     bf0:	0e 94 1a 11 	call	0x2234	; 0x2234 <xTaskRemoveFromEventList>
     bf4:	88 23       	and	r24, r24
     bf6:	21 f0       	breq	.+8      	; 0xc00 <xQueueGenericSend+0x66>
     bf8:	b8 dd       	rcall	.-1168   	; 0x76a <vPortYield>
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <xQueueGenericSend+0x66>
     bfc:	81 11       	cpse	r24, r1
     bfe:	b5 dd       	rcall	.-1174   	; 0x76a <vPortYield>
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	4c c0       	rjmp	.+152    	; 0xca0 <xQueueGenericSend+0x106>
     c08:	8e 81       	ldd	r24, Y+6	; 0x06
     c0a:	9f 81       	ldd	r25, Y+7	; 0x07
     c0c:	a8 85       	ldd	r26, Y+8	; 0x08
     c0e:	b9 85       	ldd	r27, Y+9	; 0x09
     c10:	89 2b       	or	r24, r25
     c12:	8a 2b       	or	r24, r26
     c14:	8b 2b       	or	r24, r27
     c16:	21 f4       	brne	.+8      	; 0xc20 <xQueueGenericSend+0x86>
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	40 c0       	rjmp	.+128    	; 0xca0 <xQueueGenericSend+0x106>
     c20:	11 11       	cpse	r17, r1
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <xQueueGenericSend+0x94>
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	0e 94 df 11 	call	0x23be	; 0x23be <vTaskInternalSetTimeOutState>
     c2c:	11 e0       	ldi	r17, 0x01	; 1
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	a6 d7       	rcall	.+3916   	; 0x1b80 <vTaskSuspendAll>
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	0f 92       	push	r0
     c3a:	f7 01       	movw	r30, r14
     c3c:	81 a1       	ldd	r24, Z+33	; 0x21
     c3e:	8f 3f       	cpi	r24, 0xFF	; 255
     c40:	09 f4       	brne	.+2      	; 0xc44 <xQueueGenericSend+0xaa>
     c42:	11 a2       	std	Z+33, r1	; 0x21
     c44:	f7 01       	movw	r30, r14
     c46:	82 a1       	ldd	r24, Z+34	; 0x22
     c48:	8f 3f       	cpi	r24, 0xFF	; 255
     c4a:	09 f4       	brne	.+2      	; 0xc4e <xQueueGenericSend+0xb4>
     c4c:	12 a2       	std	Z+34, r1	; 0x22
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	be 01       	movw	r22, r28
     c54:	6a 5f       	subi	r22, 0xFA	; 250
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	ce 01       	movw	r24, r28
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <xTaskCheckForTimeOut>
     c60:	81 11       	cpse	r24, r1
     c62:	19 c0       	rjmp	.+50     	; 0xc96 <xQueueGenericSend+0xfc>
     c64:	c7 01       	movw	r24, r14
     c66:	66 de       	rcall	.-820    	; 0x934 <prvIsQueueFull>
     c68:	88 23       	and	r24, r24
     c6a:	81 f0       	breq	.+32     	; 0xc8c <xQueueGenericSend+0xf2>
     c6c:	4e 81       	ldd	r20, Y+6	; 0x06
     c6e:	5f 81       	ldd	r21, Y+7	; 0x07
     c70:	68 85       	ldd	r22, Y+8	; 0x08
     c72:	79 85       	ldd	r23, Y+9	; 0x09
     c74:	c7 01       	movw	r24, r14
     c76:	08 96       	adiw	r24, 0x08	; 8
     c78:	0e 94 c1 10 	call	0x2182	; 0x2182 <vTaskPlaceOnEventList>
     c7c:	c7 01       	movw	r24, r14
     c7e:	e1 de       	rcall	.-574    	; 0xa42 <prvUnlockQueue>
     c80:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskResumeAll>
     c84:	81 11       	cpse	r24, r1
     c86:	a0 cf       	rjmp	.-192    	; 0xbc8 <xQueueGenericSend+0x2e>
     c88:	70 dd       	rcall	.-1312   	; 0x76a <vPortYield>
     c8a:	9e cf       	rjmp	.-196    	; 0xbc8 <xQueueGenericSend+0x2e>
     c8c:	c7 01       	movw	r24, r14
     c8e:	d9 de       	rcall	.-590    	; 0xa42 <prvUnlockQueue>
     c90:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskResumeAll>
     c94:	99 cf       	rjmp	.-206    	; 0xbc8 <xQueueGenericSend+0x2e>
     c96:	c7 01       	movw	r24, r14
     c98:	d4 de       	rcall	.-600    	; 0xa42 <prvUnlockQueue>
     c9a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskResumeAll>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	29 96       	adiw	r28, 0x09	; 9
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	08 95       	ret

00000cbe <xQueueGenericSendFromISR>:
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	8a 01       	movw	r16, r20
     ccc:	fc 01       	movw	r30, r24
     cce:	56 8d       	ldd	r21, Z+30	; 0x1e
     cd0:	37 8d       	ldd	r19, Z+31	; 0x1f
     cd2:	53 17       	cp	r21, r19
     cd4:	10 f0       	brcs	.+4      	; 0xcda <xQueueGenericSendFromISR+0x1c>
     cd6:	22 30       	cpi	r18, 0x02	; 2
     cd8:	f9 f4       	brne	.+62     	; 0xd18 <xQueueGenericSendFromISR+0x5a>
     cda:	42 2f       	mov	r20, r18
     cdc:	78 01       	movw	r14, r16
     cde:	ec 01       	movw	r28, r24
     ce0:	1a a1       	ldd	r17, Y+34	; 0x22
     ce2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ce4:	ce 01       	movw	r24, r28
     ce6:	34 de       	rcall	.-920    	; 0x950 <prvCopyDataToQueue>
     ce8:	1f 3f       	cpi	r17, 0xFF	; 255
     cea:	81 f4       	brne	.+32     	; 0xd0c <xQueueGenericSendFromISR+0x4e>
     cec:	8b 89       	ldd	r24, Y+19	; 0x13
     cee:	88 23       	and	r24, r24
     cf0:	a9 f0       	breq	.+42     	; 0xd1c <xQueueGenericSendFromISR+0x5e>
     cf2:	ce 01       	movw	r24, r28
     cf4:	43 96       	adiw	r24, 0x13	; 19
     cf6:	0e 94 1a 11 	call	0x2234	; 0x2234 <xTaskRemoveFromEventList>
     cfa:	88 23       	and	r24, r24
     cfc:	89 f0       	breq	.+34     	; 0xd20 <xQueueGenericSendFromISR+0x62>
     cfe:	e1 14       	cp	r14, r1
     d00:	f1 04       	cpc	r15, r1
     d02:	81 f0       	breq	.+32     	; 0xd24 <xQueueGenericSendFromISR+0x66>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	f7 01       	movw	r30, r14
     d08:	80 83       	st	Z, r24
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <xQueueGenericSendFromISR+0x68>
     d0c:	ff 24       	eor	r15, r15
     d0e:	f3 94       	inc	r15
     d10:	f1 0e       	add	r15, r17
     d12:	fa a2       	std	Y+34, r15	; 0x22
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <xQueueGenericSendFromISR+0x68>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <xQueueGenericSendFromISR+0x68>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <xQueueGenericSendFromISR+0x68>
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <xQueueGenericSendFromISR+0x68>
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	08 95       	ret

00000d34 <xQueueReceive>:
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	29 97       	sbiw	r28, 0x09	; 9
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	8c 01       	movw	r16, r24
     d56:	6b 01       	movw	r12, r22
     d58:	2e 83       	std	Y+6, r18	; 0x06
     d5a:	3f 83       	std	Y+7, r19	; 0x07
     d5c:	48 87       	std	Y+8, r20	; 0x08
     d5e:	59 87       	std	Y+9, r21	; 0x09
     d60:	e1 2c       	mov	r14, r1
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	0f 92       	push	r0
     d68:	f8 01       	movw	r30, r16
     d6a:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d6c:	ff 20       	and	r15, r15
     d6e:	99 f0       	breq	.+38     	; 0xd96 <xQueueReceive+0x62>
     d70:	b6 01       	movw	r22, r12
     d72:	c8 01       	movw	r24, r16
     d74:	4c de       	rcall	.-872    	; 0xa0e <prvCopyDataFromQueue>
     d76:	fa 94       	dec	r15
     d78:	f8 01       	movw	r30, r16
     d7a:	f6 8e       	std	Z+30, r15	; 0x1e
     d7c:	80 85       	ldd	r24, Z+8	; 0x08
     d7e:	88 23       	and	r24, r24
     d80:	31 f0       	breq	.+12     	; 0xd8e <xQueueReceive+0x5a>
     d82:	c8 01       	movw	r24, r16
     d84:	08 96       	adiw	r24, 0x08	; 8
     d86:	0e 94 1a 11 	call	0x2234	; 0x2234 <xTaskRemoveFromEventList>
     d8a:	81 11       	cpse	r24, r1
     d8c:	ee dc       	rcall	.-1572   	; 0x76a <vPortYield>
     d8e:	0f 90       	pop	r0
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	4f c0       	rjmp	.+158    	; 0xe34 <xQueueReceive+0x100>
     d96:	8e 81       	ldd	r24, Y+6	; 0x06
     d98:	9f 81       	ldd	r25, Y+7	; 0x07
     d9a:	a8 85       	ldd	r26, Y+8	; 0x08
     d9c:	b9 85       	ldd	r27, Y+9	; 0x09
     d9e:	89 2b       	or	r24, r25
     da0:	8a 2b       	or	r24, r26
     da2:	8b 2b       	or	r24, r27
     da4:	21 f4       	brne	.+8      	; 0xdae <xQueueReceive+0x7a>
     da6:	0f 90       	pop	r0
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <xQueueReceive+0x100>
     dae:	e1 10       	cpse	r14, r1
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <xQueueReceive+0x8a>
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	0e 94 df 11 	call	0x23be	; 0x23be <vTaskInternalSetTimeOutState>
     dba:	ee 24       	eor	r14, r14
     dbc:	e3 94       	inc	r14
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	de d6       	rcall	.+3516   	; 0x1b80 <vTaskSuspendAll>
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	0f 92       	push	r0
     dca:	f8 01       	movw	r30, r16
     dcc:	81 a1       	ldd	r24, Z+33	; 0x21
     dce:	8f 3f       	cpi	r24, 0xFF	; 255
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <xQueueReceive+0xa0>
     dd2:	11 a2       	std	Z+33, r1	; 0x21
     dd4:	f8 01       	movw	r30, r16
     dd6:	82 a1       	ldd	r24, Z+34	; 0x22
     dd8:	8f 3f       	cpi	r24, 0xFF	; 255
     dda:	09 f4       	brne	.+2      	; 0xdde <xQueueReceive+0xaa>
     ddc:	12 a2       	std	Z+34, r1	; 0x22
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	be 01       	movw	r22, r28
     de4:	6a 5f       	subi	r22, 0xFA	; 250
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <xTaskCheckForTimeOut>
     df0:	81 11       	cpse	r24, r1
     df2:	17 c0       	rjmp	.+46     	; 0xe22 <xQueueReceive+0xee>
     df4:	c8 01       	movw	r24, r16
     df6:	91 dd       	rcall	.-1246   	; 0x91a <prvIsQueueEmpty>
     df8:	88 23       	and	r24, r24
     dfa:	79 f0       	breq	.+30     	; 0xe1a <xQueueReceive+0xe6>
     dfc:	4e 81       	ldd	r20, Y+6	; 0x06
     dfe:	5f 81       	ldd	r21, Y+7	; 0x07
     e00:	68 85       	ldd	r22, Y+8	; 0x08
     e02:	79 85       	ldd	r23, Y+9	; 0x09
     e04:	c8 01       	movw	r24, r16
     e06:	43 96       	adiw	r24, 0x13	; 19
     e08:	0e 94 c1 10 	call	0x2182	; 0x2182 <vTaskPlaceOnEventList>
     e0c:	c8 01       	movw	r24, r16
     e0e:	19 de       	rcall	.-974    	; 0xa42 <prvUnlockQueue>
     e10:	f7 d7       	rcall	.+4078   	; 0x1e00 <xTaskResumeAll>
     e12:	81 11       	cpse	r24, r1
     e14:	a6 cf       	rjmp	.-180    	; 0xd62 <xQueueReceive+0x2e>
     e16:	a9 dc       	rcall	.-1710   	; 0x76a <vPortYield>
     e18:	a4 cf       	rjmp	.-184    	; 0xd62 <xQueueReceive+0x2e>
     e1a:	c8 01       	movw	r24, r16
     e1c:	12 de       	rcall	.-988    	; 0xa42 <prvUnlockQueue>
     e1e:	f0 d7       	rcall	.+4064   	; 0x1e00 <xTaskResumeAll>
     e20:	a0 cf       	rjmp	.-192    	; 0xd62 <xQueueReceive+0x2e>
     e22:	c8 01       	movw	r24, r16
     e24:	0e de       	rcall	.-996    	; 0xa42 <prvUnlockQueue>
     e26:	ec d7       	rcall	.+4056   	; 0x1e00 <xTaskResumeAll>
     e28:	c8 01       	movw	r24, r16
     e2a:	77 dd       	rcall	.-1298   	; 0x91a <prvIsQueueEmpty>
     e2c:	88 23       	and	r24, r24
     e2e:	09 f4       	brne	.+2      	; 0xe32 <xQueueReceive+0xfe>
     e30:	98 cf       	rjmp	.-208    	; 0xd62 <xQueueReceive+0x2e>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	29 96       	adiw	r28, 0x09	; 9
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	08 95       	ret

00000e52 <xQueueSemaphoreTake>:
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	29 97       	sbiw	r28, 0x09	; 9
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	8c 01       	movw	r16, r24
     e70:	4e 83       	std	Y+6, r20	; 0x06
     e72:	5f 83       	std	Y+7, r21	; 0x07
     e74:	68 87       	std	Y+8, r22	; 0x08
     e76:	79 87       	std	Y+9, r23	; 0x09
     e78:	e1 2c       	mov	r14, r1
     e7a:	f1 2c       	mov	r15, r1
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	0f 92       	push	r0
     e82:	f8 01       	movw	r30, r16
     e84:	86 8d       	ldd	r24, Z+30	; 0x1e
     e86:	88 23       	and	r24, r24
     e88:	c9 f0       	breq	.+50     	; 0xebc <xQueueSemaphoreTake+0x6a>
     e8a:	81 50       	subi	r24, 0x01	; 1
     e8c:	86 8f       	std	Z+30, r24	; 0x1e
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	89 2b       	or	r24, r25
     e94:	29 f4       	brne	.+10     	; 0xea0 <xQueueSemaphoreTake+0x4e>
     e96:	0e 94 b6 13 	call	0x276c	; 0x276c <pvTaskIncrementMutexHeldCount>
     e9a:	f8 01       	movw	r30, r16
     e9c:	95 83       	std	Z+5, r25	; 0x05
     e9e:	84 83       	std	Z+4, r24	; 0x04
     ea0:	f8 01       	movw	r30, r16
     ea2:	80 85       	ldd	r24, Z+8	; 0x08
     ea4:	88 23       	and	r24, r24
     ea6:	31 f0       	breq	.+12     	; 0xeb4 <xQueueSemaphoreTake+0x62>
     ea8:	c8 01       	movw	r24, r16
     eaa:	08 96       	adiw	r24, 0x08	; 8
     eac:	0e 94 1a 11 	call	0x2234	; 0x2234 <xTaskRemoveFromEventList>
     eb0:	81 11       	cpse	r24, r1
     eb2:	5b dc       	rcall	.-1866   	; 0x76a <vPortYield>
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	6f c0       	rjmp	.+222    	; 0xf9a <xQueueSemaphoreTake+0x148>
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	a8 85       	ldd	r26, Y+8	; 0x08
     ec2:	b9 85       	ldd	r27, Y+9	; 0x09
     ec4:	89 2b       	or	r24, r25
     ec6:	8a 2b       	or	r24, r26
     ec8:	8b 2b       	or	r24, r27
     eca:	21 f4       	brne	.+8      	; 0xed4 <xQueueSemaphoreTake+0x82>
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	63 c0       	rjmp	.+198    	; 0xf9a <xQueueSemaphoreTake+0x148>
     ed4:	f1 10       	cpse	r15, r1
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <xQueueSemaphoreTake+0x92>
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	0e 94 df 11 	call	0x23be	; 0x23be <vTaskInternalSetTimeOutState>
     ee0:	ff 24       	eor	r15, r15
     ee2:	f3 94       	inc	r15
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	4b d6       	rcall	.+3222   	; 0x1b80 <vTaskSuspendAll>
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	0f 92       	push	r0
     ef0:	f8 01       	movw	r30, r16
     ef2:	81 a1       	ldd	r24, Z+33	; 0x21
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	09 f4       	brne	.+2      	; 0xefa <xQueueSemaphoreTake+0xa8>
     ef8:	11 a2       	std	Z+33, r1	; 0x21
     efa:	f8 01       	movw	r30, r16
     efc:	82 a1       	ldd	r24, Z+34	; 0x22
     efe:	8f 3f       	cpi	r24, 0xFF	; 255
     f00:	09 f4       	brne	.+2      	; 0xf04 <xQueueSemaphoreTake+0xb2>
     f02:	12 a2       	std	Z+34, r1	; 0x22
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	be 01       	movw	r22, r28
     f0a:	6a 5f       	subi	r22, 0xFA	; 250
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	ce 01       	movw	r24, r28
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <xTaskCheckForTimeOut>
     f16:	81 11       	cpse	r24, r1
     f18:	26 c0       	rjmp	.+76     	; 0xf66 <xQueueSemaphoreTake+0x114>
     f1a:	c8 01       	movw	r24, r16
     f1c:	fe dc       	rcall	.-1540   	; 0x91a <prvIsQueueEmpty>
     f1e:	88 23       	and	r24, r24
     f20:	f1 f0       	breq	.+60     	; 0xf5e <xQueueSemaphoreTake+0x10c>
     f22:	f8 01       	movw	r30, r16
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	89 2b       	or	r24, r25
     f2a:	51 f4       	brne	.+20     	; 0xf40 <xQueueSemaphoreTake+0xee>
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	0f 92       	push	r0
     f32:	84 81       	ldd	r24, Z+4	; 0x04
     f34:	95 81       	ldd	r25, Z+5	; 0x05
     f36:	0e 94 6d 12 	call	0x24da	; 0x24da <xTaskPriorityInherit>
     f3a:	e8 2e       	mov	r14, r24
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	4e 81       	ldd	r20, Y+6	; 0x06
     f42:	5f 81       	ldd	r21, Y+7	; 0x07
     f44:	68 85       	ldd	r22, Y+8	; 0x08
     f46:	79 85       	ldd	r23, Y+9	; 0x09
     f48:	c8 01       	movw	r24, r16
     f4a:	43 96       	adiw	r24, 0x13	; 19
     f4c:	0e 94 c1 10 	call	0x2182	; 0x2182 <vTaskPlaceOnEventList>
     f50:	c8 01       	movw	r24, r16
     f52:	77 dd       	rcall	.-1298   	; 0xa42 <prvUnlockQueue>
     f54:	55 d7       	rcall	.+3754   	; 0x1e00 <xTaskResumeAll>
     f56:	81 11       	cpse	r24, r1
     f58:	91 cf       	rjmp	.-222    	; 0xe7c <xQueueSemaphoreTake+0x2a>
     f5a:	07 dc       	rcall	.-2034   	; 0x76a <vPortYield>
     f5c:	8f cf       	rjmp	.-226    	; 0xe7c <xQueueSemaphoreTake+0x2a>
     f5e:	c8 01       	movw	r24, r16
     f60:	70 dd       	rcall	.-1312   	; 0xa42 <prvUnlockQueue>
     f62:	4e d7       	rcall	.+3740   	; 0x1e00 <xTaskResumeAll>
     f64:	8b cf       	rjmp	.-234    	; 0xe7c <xQueueSemaphoreTake+0x2a>
     f66:	c8 01       	movw	r24, r16
     f68:	6c dd       	rcall	.-1320   	; 0xa42 <prvUnlockQueue>
     f6a:	4a d7       	rcall	.+3732   	; 0x1e00 <xTaskResumeAll>
     f6c:	c8 01       	movw	r24, r16
     f6e:	d5 dc       	rcall	.-1622   	; 0x91a <prvIsQueueEmpty>
     f70:	88 23       	and	r24, r24
     f72:	09 f4       	brne	.+2      	; 0xf76 <xQueueSemaphoreTake+0x124>
     f74:	83 cf       	rjmp	.-250    	; 0xe7c <xQueueSemaphoreTake+0x2a>
     f76:	ee 20       	and	r14, r14
     f78:	79 f0       	breq	.+30     	; 0xf98 <xQueueSemaphoreTake+0x146>
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	0f 92       	push	r0
     f80:	c8 01       	movw	r24, r16
     f82:	bb dc       	rcall	.-1674   	; 0x8fa <prvGetDisinheritPriorityAfterTimeout>
     f84:	68 2f       	mov	r22, r24
     f86:	f8 01       	movw	r30, r16
     f88:	84 81       	ldd	r24, Z+4	; 0x04
     f8a:	95 81       	ldd	r25, Z+5	; 0x05
     f8c:	0e 94 4f 13 	call	0x269e	; 0x269e <vTaskPriorityDisinheritAfterTimeout>
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <xQueueSemaphoreTake+0x148>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	29 96       	adiw	r28, 0x09	; 9
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	08 95       	ret

00000fb4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	0f 92       	push	r0
     fc0:	89 a1       	ldd	r24, Y+33	; 0x21
     fc2:	8f 3f       	cpi	r24, 0xFF	; 255
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <vQueueWaitForMessageRestricted+0x14>
     fc6:	19 a2       	std	Y+33, r1	; 0x21
     fc8:	8a a1       	ldd	r24, Y+34	; 0x22
     fca:	8f 3f       	cpi	r24, 0xFF	; 255
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <vQueueWaitForMessageRestricted+0x1c>
     fce:	1a a2       	std	Y+34, r1	; 0x22
     fd0:	0f 90       	pop	r0
     fd2:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     fd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd6:	81 11       	cpse	r24, r1
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     fda:	ce 01       	movw	r24, r28
     fdc:	43 96       	adiw	r24, 0x13	; 19
     fde:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     fe2:	ce 01       	movw	r24, r28
     fe4:	2e dd       	rcall	.-1444   	; 0xa42 <prvUnlockQueue>
    }
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     fec:	fc 01       	movw	r30, r24
     fee:	44 81       	ldd	r20, Z+4	; 0x04
     ff0:	55 81       	ldd	r21, Z+5	; 0x05
     ff2:	22 81       	ldd	r18, Z+2	; 0x02
     ff4:	33 81       	ldd	r19, Z+3	; 0x03
     ff6:	24 0f       	add	r18, r20
     ff8:	35 1f       	adc	r19, r21
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	b9 01       	movw	r22, r18
    1000:	68 1b       	sub	r22, r24
    1002:	79 0b       	sbc	r23, r25
    1004:	cb 01       	movw	r24, r22
    1006:	64 17       	cp	r22, r20
    1008:	75 07       	cpc	r23, r21
    100a:	10 f0       	brcs	.+4      	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    100c:	84 1b       	sub	r24, r20
    100e:	95 0b       	sbc	r25, r21
    1010:	08 95       	ret

00001012 <prvInitialiseNewStreamBuffer>:
    1012:	0f 93       	push	r16
    1014:	fc 01       	movw	r30, r24
    1016:	8f e0       	ldi	r24, 0x0F	; 15
    1018:	df 01       	movw	r26, r30
    101a:	1d 92       	st	X+, r1
    101c:	8a 95       	dec	r24
    101e:	e9 f7       	brne	.-6      	; 0x101a <prvInitialiseNewStreamBuffer+0x8>
    1020:	75 87       	std	Z+13, r23	; 0x0d
    1022:	64 87       	std	Z+12, r22	; 0x0c
    1024:	55 83       	std	Z+5, r21	; 0x05
    1026:	44 83       	std	Z+4, r20	; 0x04
    1028:	37 83       	std	Z+7, r19	; 0x07
    102a:	26 83       	std	Z+6, r18	; 0x06
    102c:	06 87       	std	Z+14, r16	; 0x0e
    102e:	0f 91       	pop	r16
    1030:	08 95       	ret

00001032 <prvWriteBytesToBuffer>:
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	6c 01       	movw	r12, r24
    1048:	5b 01       	movw	r10, r22
    104a:	7a 01       	movw	r14, r20
    104c:	fc 01       	movw	r30, r24
    104e:	c2 81       	ldd	r28, Z+2	; 0x02
    1050:	d3 81       	ldd	r29, Z+3	; 0x03
    1052:	04 81       	ldd	r16, Z+4	; 0x04
    1054:	15 81       	ldd	r17, Z+5	; 0x05
    1056:	0c 1b       	sub	r16, r28
    1058:	1d 0b       	sbc	r17, r29
    105a:	40 17       	cp	r20, r16
    105c:	51 07       	cpc	r21, r17
    105e:	08 f4       	brcc	.+2      	; 0x1062 <prvWriteBytesToBuffer+0x30>
    1060:	8a 01       	movw	r16, r20
    1062:	f6 01       	movw	r30, r12
    1064:	84 85       	ldd	r24, Z+12	; 0x0c
    1066:	95 85       	ldd	r25, Z+13	; 0x0d
    1068:	a8 01       	movw	r20, r16
    106a:	b5 01       	movw	r22, r10
    106c:	8c 0f       	add	r24, r28
    106e:	9d 1f       	adc	r25, r29
    1070:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <memcpy>
    1074:	0e 15       	cp	r16, r14
    1076:	1f 05       	cpc	r17, r15
    1078:	58 f4       	brcc	.+22     	; 0x1090 <prvWriteBytesToBuffer+0x5e>
    107a:	a7 01       	movw	r20, r14
    107c:	40 1b       	sub	r20, r16
    107e:	51 0b       	sbc	r21, r17
    1080:	b5 01       	movw	r22, r10
    1082:	60 0f       	add	r22, r16
    1084:	71 1f       	adc	r23, r17
    1086:	f6 01       	movw	r30, r12
    1088:	84 85       	ldd	r24, Z+12	; 0x0c
    108a:	95 85       	ldd	r25, Z+13	; 0x0d
    108c:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <memcpy>
    1090:	ce 01       	movw	r24, r28
    1092:	8e 0d       	add	r24, r14
    1094:	9f 1d       	adc	r25, r15
    1096:	f6 01       	movw	r30, r12
    1098:	24 81       	ldd	r18, Z+4	; 0x04
    109a:	35 81       	ldd	r19, Z+5	; 0x05
    109c:	82 17       	cp	r24, r18
    109e:	93 07       	cpc	r25, r19
    10a0:	10 f0       	brcs	.+4      	; 0x10a6 <prvWriteBytesToBuffer+0x74>
    10a2:	82 1b       	sub	r24, r18
    10a4:	93 0b       	sbc	r25, r19
    10a6:	f6 01       	movw	r30, r12
    10a8:	93 83       	std	Z+3, r25	; 0x03
    10aa:	82 83       	std	Z+2, r24	; 0x02
    10ac:	c7 01       	movw	r24, r14
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	bf 90       	pop	r11
    10c0:	af 90       	pop	r10
    10c2:	08 95       	ret

000010c4 <prvWriteMessageToBuffer>:
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	1f 92       	push	r1
    10d6:	1f 92       	push	r1
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	7c 01       	movw	r14, r24
    10de:	6b 01       	movw	r12, r22
    10e0:	5a 83       	std	Y+2, r21	; 0x02
    10e2:	49 83       	std	Y+1, r20	; 0x01
    10e4:	21 15       	cp	r18, r1
    10e6:	31 05       	cpc	r19, r1
    10e8:	c1 f0       	breq	.+48     	; 0x111a <prvWriteMessageToBuffer+0x56>
    10ea:	fc 01       	movw	r30, r24
    10ec:	86 85       	ldd	r24, Z+14	; 0x0e
    10ee:	80 fd       	sbrc	r24, 0
    10f0:	08 c0       	rjmp	.+16     	; 0x1102 <prvWriteMessageToBuffer+0x3e>
    10f2:	42 17       	cp	r20, r18
    10f4:	53 07       	cpc	r21, r19
    10f6:	08 f4       	brcc	.+2      	; 0x10fa <prvWriteMessageToBuffer+0x36>
    10f8:	9a 01       	movw	r18, r20
    10fa:	3a 83       	std	Y+2, r19	; 0x02
    10fc:	29 83       	std	Y+1, r18	; 0x01
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <prvWriteMessageToBuffer+0x5c>
    1102:	20 17       	cp	r18, r16
    1104:	31 07       	cpc	r19, r17
    1106:	58 f0       	brcs	.+22     	; 0x111e <prvWriteMessageToBuffer+0x5a>
    1108:	42 e0       	ldi	r20, 0x02	; 2
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	be 01       	movw	r22, r28
    110e:	6f 5f       	subi	r22, 0xFF	; 255
    1110:	7f 4f       	sbci	r23, 0xFF	; 255
    1112:	c7 01       	movw	r24, r14
    1114:	8e df       	rcall	.-228    	; 0x1032 <prvWriteBytesToBuffer>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <prvWriteMessageToBuffer+0x5c>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <prvWriteMessageToBuffer+0x5c>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	88 23       	and	r24, r24
    1122:	31 f0       	breq	.+12     	; 0x1130 <prvWriteMessageToBuffer+0x6c>
    1124:	49 81       	ldd	r20, Y+1	; 0x01
    1126:	5a 81       	ldd	r21, Y+2	; 0x02
    1128:	b6 01       	movw	r22, r12
    112a:	c7 01       	movw	r24, r14
    112c:	82 df       	rcall	.-252    	; 0x1032 <prvWriteBytesToBuffer>
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <prvWriteMessageToBuffer+0x70>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	08 95       	ret

0000114a <prvReadBytesFromBuffer>:
    114a:	af 92       	push	r10
    114c:	bf 92       	push	r11
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	7c 01       	movw	r14, r24
    1160:	5b 01       	movw	r10, r22
    1162:	e9 01       	movw	r28, r18
    1164:	42 17       	cp	r20, r18
    1166:	53 07       	cpc	r21, r19
    1168:	08 f4       	brcc	.+2      	; 0x116c <prvReadBytesFromBuffer+0x22>
    116a:	ea 01       	movw	r28, r20
    116c:	20 97       	sbiw	r28, 0x00	; 0
    116e:	81 f1       	breq	.+96     	; 0x11d0 <prvReadBytesFromBuffer+0x86>
    1170:	f7 01       	movw	r30, r14
    1172:	00 81       	ld	r16, Z
    1174:	11 81       	ldd	r17, Z+1	; 0x01
    1176:	84 81       	ldd	r24, Z+4	; 0x04
    1178:	95 81       	ldd	r25, Z+5	; 0x05
    117a:	80 1b       	sub	r24, r16
    117c:	91 0b       	sbc	r25, r17
    117e:	6e 01       	movw	r12, r28
    1180:	8c 17       	cp	r24, r28
    1182:	9d 07       	cpc	r25, r29
    1184:	08 f4       	brcc	.+2      	; 0x1188 <prvReadBytesFromBuffer+0x3e>
    1186:	6c 01       	movw	r12, r24
    1188:	f7 01       	movw	r30, r14
    118a:	64 85       	ldd	r22, Z+12	; 0x0c
    118c:	75 85       	ldd	r23, Z+13	; 0x0d
    118e:	60 0f       	add	r22, r16
    1190:	71 1f       	adc	r23, r17
    1192:	a6 01       	movw	r20, r12
    1194:	c5 01       	movw	r24, r10
    1196:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <memcpy>
    119a:	cc 16       	cp	r12, r28
    119c:	dd 06       	cpc	r13, r29
    119e:	58 f4       	brcc	.+22     	; 0x11b6 <prvReadBytesFromBuffer+0x6c>
    11a0:	ae 01       	movw	r20, r28
    11a2:	4c 19       	sub	r20, r12
    11a4:	5d 09       	sbc	r21, r13
    11a6:	f7 01       	movw	r30, r14
    11a8:	64 85       	ldd	r22, Z+12	; 0x0c
    11aa:	75 85       	ldd	r23, Z+13	; 0x0d
    11ac:	c5 01       	movw	r24, r10
    11ae:	8c 0d       	add	r24, r12
    11b0:	9d 1d       	adc	r25, r13
    11b2:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <memcpy>
    11b6:	0c 0f       	add	r16, r28
    11b8:	1d 1f       	adc	r17, r29
    11ba:	f7 01       	movw	r30, r14
    11bc:	84 81       	ldd	r24, Z+4	; 0x04
    11be:	95 81       	ldd	r25, Z+5	; 0x05
    11c0:	08 17       	cp	r16, r24
    11c2:	19 07       	cpc	r17, r25
    11c4:	10 f0       	brcs	.+4      	; 0x11ca <prvReadBytesFromBuffer+0x80>
    11c6:	08 1b       	sub	r16, r24
    11c8:	19 0b       	sbc	r17, r25
    11ca:	f7 01       	movw	r30, r14
    11cc:	11 83       	std	Z+1, r17	; 0x01
    11ce:	00 83       	st	Z, r16
    11d0:	ce 01       	movw	r24, r28
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	bf 90       	pop	r11
    11e4:	af 90       	pop	r10
    11e6:	08 95       	ret

000011e8 <prvReadMessageFromBuffer>:
    11e8:	6f 92       	push	r6
    11ea:	7f 92       	push	r7
    11ec:	8f 92       	push	r8
    11ee:	9f 92       	push	r9
    11f0:	af 92       	push	r10
    11f2:	bf 92       	push	r11
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	1f 92       	push	r1
    1206:	1f 92       	push	r1
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	6c 01       	movw	r12, r24
    120e:	4b 01       	movw	r8, r22
    1210:	5a 01       	movw	r10, r20
    1212:	79 01       	movw	r14, r18
    1214:	01 15       	cp	r16, r1
    1216:	11 05       	cpc	r17, r1
    1218:	b1 f0       	breq	.+44     	; 0x1246 <prvReadMessageFromBuffer+0x5e>
    121a:	fc 01       	movw	r30, r24
    121c:	60 80       	ld	r6, Z
    121e:	71 80       	ldd	r7, Z+1	; 0x01
    1220:	a8 01       	movw	r20, r16
    1222:	be 01       	movw	r22, r28
    1224:	6f 5f       	subi	r22, 0xFF	; 255
    1226:	7f 4f       	sbci	r23, 0xFF	; 255
    1228:	90 df       	rcall	.-224    	; 0x114a <prvReadBytesFromBuffer>
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	e0 1a       	sub	r14, r16
    1230:	f1 0a       	sbc	r15, r17
    1232:	a8 16       	cp	r10, r24
    1234:	b9 06       	cpc	r11, r25
    1236:	30 f4       	brcc	.+12     	; 0x1244 <prvReadMessageFromBuffer+0x5c>
    1238:	f6 01       	movw	r30, r12
    123a:	71 82       	std	Z+1, r7	; 0x01
    123c:	60 82       	st	Z, r6
    123e:	a1 2c       	mov	r10, r1
    1240:	b1 2c       	mov	r11, r1
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <prvReadMessageFromBuffer+0x5e>
    1244:	5c 01       	movw	r10, r24
    1246:	97 01       	movw	r18, r14
    1248:	a5 01       	movw	r20, r10
    124a:	b4 01       	movw	r22, r8
    124c:	c6 01       	movw	r24, r12
    124e:	7d df       	rcall	.-262    	; 0x114a <prvReadBytesFromBuffer>
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	bf 90       	pop	r11
    1266:	af 90       	pop	r10
    1268:	9f 90       	pop	r9
    126a:	8f 90       	pop	r8
    126c:	7f 90       	pop	r7
    126e:	6f 90       	pop	r6
    1270:	08 95       	ret

00001272 <xStreamBufferGenericCreate>:
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
    1282:	6b 01       	movw	r12, r22
    1284:	41 30       	cpi	r20, 0x01	; 1
    1286:	11 f4       	brne	.+4      	; 0x128c <xStreamBufferGenericCreate+0x1a>
    1288:	01 e0       	ldi	r16, 0x01	; 1
    128a:	01 c0       	rjmp	.+2      	; 0x128e <xStreamBufferGenericCreate+0x1c>
    128c:	00 e0       	ldi	r16, 0x00	; 0
    128e:	c1 14       	cp	r12, r1
    1290:	d1 04       	cpc	r13, r1
    1292:	19 f4       	brne	.+6      	; 0x129a <xStreamBufferGenericCreate+0x28>
    1294:	cc 24       	eor	r12, r12
    1296:	c3 94       	inc	r12
    1298:	d1 2c       	mov	r13, r1
    129a:	ce 01       	movw	r24, r28
    129c:	40 96       	adiw	r24, 0x10	; 16
    129e:	c8 17       	cp	r28, r24
    12a0:	d9 07       	cpc	r29, r25
    12a2:	20 f4       	brcc	.+8      	; 0x12ac <xStreamBufferGenericCreate+0x3a>
    12a4:	21 96       	adiw	r28, 0x01	; 1
    12a6:	a8 d8       	rcall	.-3760   	; 0x3f8 <pvPortMalloc>
    12a8:	7c 01       	movw	r14, r24
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <xStreamBufferGenericCreate+0x3e>
    12ac:	e1 2c       	mov	r14, r1
    12ae:	f1 2c       	mov	r15, r1
    12b0:	e1 14       	cp	r14, r1
    12b2:	f1 04       	cpc	r15, r1
    12b4:	39 f0       	breq	.+14     	; 0x12c4 <xStreamBufferGenericCreate+0x52>
    12b6:	96 01       	movw	r18, r12
    12b8:	ae 01       	movw	r20, r28
    12ba:	b7 01       	movw	r22, r14
    12bc:	61 5f       	subi	r22, 0xF1	; 241
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	c7 01       	movw	r24, r14
    12c2:	a7 de       	rcall	.-690    	; 0x1012 <prvInitialiseNewStreamBuffer>
    12c4:	c7 01       	movw	r24, r14
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	08 95       	ret

000012d6 <xStreamBufferReset>:
    12d6:	0f 93       	push	r16
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	0f 92       	push	r0
    12de:	fc 01       	movw	r30, r24
    12e0:	20 85       	ldd	r18, Z+8	; 0x08
    12e2:	31 85       	ldd	r19, Z+9	; 0x09
    12e4:	23 2b       	or	r18, r19
    12e6:	71 f4       	brne	.+28     	; 0x1304 <xStreamBufferReset+0x2e>
    12e8:	22 85       	ldd	r18, Z+10	; 0x0a
    12ea:	33 85       	ldd	r19, Z+11	; 0x0b
    12ec:	23 2b       	or	r18, r19
    12ee:	61 f4       	brne	.+24     	; 0x1308 <xStreamBufferReset+0x32>
    12f0:	26 81       	ldd	r18, Z+6	; 0x06
    12f2:	37 81       	ldd	r19, Z+7	; 0x07
    12f4:	44 81       	ldd	r20, Z+4	; 0x04
    12f6:	55 81       	ldd	r21, Z+5	; 0x05
    12f8:	64 85       	ldd	r22, Z+12	; 0x0c
    12fa:	75 85       	ldd	r23, Z+13	; 0x0d
    12fc:	06 85       	ldd	r16, Z+14	; 0x0e
    12fe:	89 de       	rcall	.-750    	; 0x1012 <prvInitialiseNewStreamBuffer>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	03 c0       	rjmp	.+6      	; 0x130a <xStreamBufferReset+0x34>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	01 c0       	rjmp	.+2      	; 0x130a <xStreamBufferReset+0x34>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	0f 91       	pop	r16
    1310:	08 95       	ret

00001312 <xStreamBufferSpacesAvailable>:
    1312:	fc 01       	movw	r30, r24
    1314:	24 81       	ldd	r18, Z+4	; 0x04
    1316:	35 81       	ldd	r19, Z+5	; 0x05
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	82 0f       	add	r24, r18
    131e:	93 1f       	adc	r25, r19
    1320:	42 81       	ldd	r20, Z+2	; 0x02
    1322:	53 81       	ldd	r21, Z+3	; 0x03
    1324:	84 1b       	sub	r24, r20
    1326:	95 0b       	sbc	r25, r21
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	82 17       	cp	r24, r18
    132c:	93 07       	cpc	r25, r19
    132e:	10 f0       	brcs	.+4      	; 0x1334 <xStreamBufferSpacesAvailable+0x22>
    1330:	82 1b       	sub	r24, r18
    1332:	93 0b       	sbc	r25, r19
    1334:	08 95       	ret

00001336 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1336:	2f 92       	push	r2
    1338:	3f 92       	push	r3
    133a:	4f 92       	push	r4
    133c:	5f 92       	push	r5
    133e:	6f 92       	push	r6
    1340:	7f 92       	push	r7
    1342:	8f 92       	push	r8
    1344:	9f 92       	push	r9
    1346:	af 92       	push	r10
    1348:	bf 92       	push	r11
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	2b 97       	sbiw	r28, 0x0b	; 11
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	4c 01       	movw	r8, r24
    136c:	7b 87       	std	Y+11, r23	; 0x0b
    136e:	6a 87       	std	Y+10, r22	; 0x0a
    1370:	1a 01       	movw	r2, r20
    1372:	0e 83       	std	Y+6, r16	; 0x06
    1374:	1f 83       	std	Y+7, r17	; 0x07
    1376:	28 87       	std	Y+8, r18	; 0x08
    1378:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    137a:	fc 01       	movw	r30, r24
    137c:	84 81       	ldd	r24, Z+4	; 0x04
    137e:	95 81       	ldd	r25, Z+5	; 0x05
    1380:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1382:	26 85       	ldd	r18, Z+14	; 0x0e
    1384:	20 ff       	sbrs	r18, 0
    1386:	0c c0       	rjmp	.+24     	; 0x13a0 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1388:	2a 01       	movw	r4, r20
    138a:	f2 e0       	ldi	r31, 0x02	; 2
    138c:	4f 0e       	add	r4, r31
    138e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1390:	84 15       	cp	r24, r4
    1392:	95 05       	cpc	r25, r5
    1394:	58 f4       	brcc	.+22     	; 0x13ac <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1396:	1e 82       	std	Y+6, r1	; 0x06
    1398:	1f 82       	std	Y+7, r1	; 0x07
    139a:	18 86       	std	Y+8, r1	; 0x08
    139c:	19 86       	std	Y+9, r1	; 0x09
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    13a0:	84 17       	cp	r24, r20
    13a2:	95 07       	cpc	r25, r21
    13a4:	10 f0       	brcs	.+4      	; 0x13aa <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    13a6:	2a 01       	movw	r4, r20
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    13aa:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	9f 81       	ldd	r25, Y+7	; 0x07
    13b0:	a8 85       	ldd	r26, Y+8	; 0x08
    13b2:	b9 85       	ldd	r27, Y+9	; 0x09
    13b4:	89 2b       	or	r24, r25
    13b6:	8a 2b       	or	r24, r26
    13b8:	8b 2b       	or	r24, r27
    13ba:	09 f4       	brne	.+2      	; 0x13be <xStreamBufferSend+0x88>
    13bc:	36 c0       	rjmp	.+108    	; 0x142a <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    13be:	ce 01       	movw	r24, r28
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	e7 d7       	rcall	.+4046   	; 0x2392 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13ca:	c4 01       	movw	r24, r8
    13cc:	a2 df       	rcall	.-188    	; 0x1312 <xStreamBufferSpacesAvailable>
    13ce:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    13d0:	84 15       	cp	r24, r4
    13d2:	95 05       	cpc	r25, r5
    13d4:	38 f5       	brcc	.+78     	; 0x1424 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 88 16 	call	0x2d10	; 0x2d10 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    13e0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <xTaskGetCurrentTaskHandle>
    13e4:	f4 01       	movw	r30, r8
    13e6:	93 87       	std	Z+11, r25	; 0x0b
    13e8:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    13ee:	ae 80       	ldd	r10, Y+6	; 0x06
    13f0:	bf 80       	ldd	r11, Y+7	; 0x07
    13f2:	c8 84       	ldd	r12, Y+8	; 0x08
    13f4:	d9 84       	ldd	r13, Y+9	; 0x09
    13f6:	e1 2c       	mov	r14, r1
    13f8:	f1 2c       	mov	r15, r1
    13fa:	00 e0       	ldi	r16, 0x00	; 0
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    13fe:	98 01       	movw	r18, r16
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	ba 01       	movw	r22, r20
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	0e 94 c8 13 	call	0x2790	; 0x2790 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    140c:	f4 01       	movw	r30, r8
    140e:	13 86       	std	Z+11, r1	; 0x0b
    1410:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1412:	be 01       	movw	r22, r28
    1414:	6a 5f       	subi	r22, 0xFA	; 250
    1416:	7f 4f       	sbci	r23, 0xFF	; 255
    1418:	ce 01       	movw	r24, r28
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	e1 d7       	rcall	.+4034   	; 0x23e0 <xTaskCheckForTimeOut>
    141e:	88 23       	and	r24, r24
    1420:	89 f2       	breq	.-94     	; 0x13c4 <xStreamBufferSend+0x8e>
    1422:	05 c0       	rjmp	.+10     	; 0x142e <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1424:	0f 90       	pop	r0
    1426:	0f be       	out	0x3f, r0	; 63
                    break;
    1428:	02 c0       	rjmp	.+4      	; 0x142e <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    142a:	61 2c       	mov	r6, r1
    142c:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    142e:	61 14       	cp	r6, r1
    1430:	71 04       	cpc	r7, r1
    1432:	19 f4       	brne	.+6      	; 0x143a <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1434:	c4 01       	movw	r24, r8
    1436:	6d df       	rcall	.-294    	; 0x1312 <xStreamBufferSpacesAvailable>
    1438:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    143a:	82 01       	movw	r16, r4
    143c:	93 01       	movw	r18, r6
    143e:	a1 01       	movw	r20, r2
    1440:	6a 85       	ldd	r22, Y+10	; 0x0a
    1442:	7b 85       	ldd	r23, Y+11	; 0x0b
    1444:	c4 01       	movw	r24, r8
    1446:	3e de       	rcall	.-900    	; 0x10c4 <prvWriteMessageToBuffer>
    1448:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    144a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    144c:	e9 f0       	breq	.+58     	; 0x1488 <xStreamBufferSend+0x152>
    144e:	c4 01       	movw	r24, r8
    1450:	cd dd       	rcall	.-1126   	; 0xfec <prvBytesInBuffer>
    1452:	f4 01       	movw	r30, r8
    1454:	26 81       	ldd	r18, Z+6	; 0x06
    1456:	37 81       	ldd	r19, Z+7	; 0x07
    1458:	82 17       	cp	r24, r18
    145a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    145c:	a8 f0       	brcs	.+42     	; 0x1488 <xStreamBufferSend+0x152>
    145e:	90 d3       	rcall	.+1824   	; 0x1b80 <vTaskSuspendAll>
    1460:	f4 01       	movw	r30, r8
    1462:	80 85       	ldd	r24, Z+8	; 0x08
    1464:	91 85       	ldd	r25, Z+9	; 0x09
    1466:	89 2b       	or	r24, r25
    1468:	71 f0       	breq	.+28     	; 0x1486 <xStreamBufferSend+0x150>
    146a:	80 85       	ldd	r24, Z+8	; 0x08
    146c:	91 85       	ldd	r25, Z+9	; 0x09
    146e:	e1 2c       	mov	r14, r1
    1470:	f1 2c       	mov	r15, r1
    1472:	00 e0       	ldi	r16, 0x00	; 0
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskGenericNotify>
    1480:	f4 01       	movw	r30, r8
    1482:	11 86       	std	Z+9, r1	; 0x09
    1484:	10 86       	std	Z+8, r1	; 0x08
    1486:	bc d4       	rcall	.+2424   	; 0x1e00 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1488:	c6 01       	movw	r24, r12
    148a:	2b 96       	adiw	r28, 0x0b	; 11
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	bf 90       	pop	r11
    14a8:	af 90       	pop	r10
    14aa:	9f 90       	pop	r9
    14ac:	8f 90       	pop	r8
    14ae:	7f 90       	pop	r7
    14b0:	6f 90       	pop	r6
    14b2:	5f 90       	pop	r5
    14b4:	4f 90       	pop	r4
    14b6:	3f 90       	pop	r3
    14b8:	2f 90       	pop	r2
    14ba:	08 95       	ret

000014bc <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	ec 01       	movw	r28, r24
    14d2:	7b 01       	movw	r14, r22
    14d4:	5a 01       	movw	r10, r20
    14d6:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    14d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    14da:	80 ff       	sbrs	r24, 0
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    14de:	8a 01       	movw	r16, r20
    14e0:	0e 5f       	subi	r16, 0xFE	; 254
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    14e6:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    14e8:	ce 01       	movw	r24, r28
    14ea:	13 df       	rcall	.-474    	; 0x1312 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    14ec:	9c 01       	movw	r18, r24
    14ee:	a5 01       	movw	r20, r10
    14f0:	b7 01       	movw	r22, r14
    14f2:	ce 01       	movw	r24, r28
    14f4:	e7 dd       	rcall	.-1074   	; 0x10c4 <prvWriteMessageToBuffer>
    14f6:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    14f8:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    14fa:	c1 f0       	breq	.+48     	; 0x152c <xStreamBufferSendFromISR+0x70>
    14fc:	ce 01       	movw	r24, r28
    14fe:	76 dd       	rcall	.-1300   	; 0xfec <prvBytesInBuffer>
    1500:	2e 81       	ldd	r18, Y+6	; 0x06
    1502:	3f 81       	ldd	r19, Y+7	; 0x07
    1504:	82 17       	cp	r24, r18
    1506:	93 07       	cpc	r25, r19
    1508:	88 f0       	brcs	.+34     	; 0x152c <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    150a:	88 85       	ldd	r24, Y+8	; 0x08
    150c:	99 85       	ldd	r25, Y+9	; 0x09
    150e:	89 2b       	or	r24, r25
    1510:	69 f0       	breq	.+26     	; 0x152c <xStreamBufferSendFromISR+0x70>
    1512:	88 85       	ldd	r24, Y+8	; 0x08
    1514:	99 85       	ldd	r25, Y+9	; 0x09
    1516:	e1 2c       	mov	r14, r1
    1518:	f1 2c       	mov	r15, r1
    151a:	00 e0       	ldi	r16, 0x00	; 0
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	a9 01       	movw	r20, r18
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	0e 94 66 15 	call	0x2acc	; 0x2acc <xTaskGenericNotifyFromISR>
    1528:	19 86       	std	Y+9, r1	; 0x09
    152a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    152c:	c5 01       	movw	r24, r10
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	df 90       	pop	r13
    153c:	cf 90       	pop	r12
    153e:	bf 90       	pop	r11
    1540:	af 90       	pop	r10
    1542:	08 95       	ret

00001544 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1544:	4f 92       	push	r4
    1546:	5f 92       	push	r5
    1548:	6f 92       	push	r6
    154a:	7f 92       	push	r7
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	ec 01       	movw	r28, r24
    1566:	2b 01       	movw	r4, r22
    1568:	3a 01       	movw	r6, r20
    156a:	58 01       	movw	r10, r16
    156c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    156e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1570:	80 ff       	sbrs	r24, 0
    1572:	05 c0       	rjmp	.+10     	; 0x157e <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1574:	68 94       	set
    1576:	88 24       	eor	r8, r8
    1578:	81 f8       	bld	r8, 1
    157a:	91 2c       	mov	r9, r1
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    157e:	81 2c       	mov	r8, r1
    1580:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1582:	a1 14       	cp	r10, r1
    1584:	b1 04       	cpc	r11, r1
    1586:	c1 04       	cpc	r12, r1
    1588:	d1 04       	cpc	r13, r1
    158a:	39 f1       	breq	.+78     	; 0x15da <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1592:	ce 01       	movw	r24, r28
    1594:	2b dd       	rcall	.-1450   	; 0xfec <prvBytesInBuffer>
    1596:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1598:	88 16       	cp	r8, r24
    159a:	99 06       	cpc	r9, r25
    159c:	40 f0       	brcs	.+16     	; 0x15ae <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 88 16 	call	0x2d10	; 0x2d10 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    15a8:	85 d7       	rcall	.+3850   	; 0x24b4 <xTaskGetCurrentTaskHandle>
    15aa:	99 87       	std	Y+9, r25	; 0x09
    15ac:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    15b2:	8e 14       	cp	r8, r14
    15b4:	9f 04       	cpc	r9, r15
    15b6:	a0 f0       	brcs	.+40     	; 0x15e0 <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    15b8:	e1 2c       	mov	r14, r1
    15ba:	f1 2c       	mov	r15, r1
    15bc:	00 e0       	ldi	r16, 0x00	; 0
    15be:	10 e0       	ldi	r17, 0x00	; 0
    15c0:	98 01       	movw	r18, r16
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	ba 01       	movw	r22, r20
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	0e 94 c8 13 	call	0x2790	; 0x2790 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    15ce:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15d0:	18 86       	std	Y+8, r1	; 0x08
    15d2:	ce 01       	movw	r24, r28
    15d4:	0b dd       	rcall	.-1514   	; 0xfec <prvBytesInBuffer>
    15d6:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15d8:	03 c0       	rjmp	.+6      	; 0x15e0 <xStreamBufferReceive+0x9c>
    15da:	ce 01       	movw	r24, r28
    15dc:	07 dd       	rcall	.-1522   	; 0xfec <prvBytesInBuffer>
    15de:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    15e0:	8e 14       	cp	r8, r14
    15e2:	9f 04       	cpc	r9, r15
    15e4:	e8 f4       	brcc	.+58     	; 0x1620 <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    15e6:	84 01       	movw	r16, r8
    15e8:	97 01       	movw	r18, r14
    15ea:	a3 01       	movw	r20, r6
    15ec:	b2 01       	movw	r22, r4
    15ee:	ce 01       	movw	r24, r28
    15f0:	fb dd       	rcall	.-1034   	; 0x11e8 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    15f2:	6c 01       	movw	r12, r24
    15f4:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    15f6:	b1 f0       	breq	.+44     	; 0x1624 <xStreamBufferReceive+0xe0>
    15f8:	c3 d2       	rcall	.+1414   	; 0x1b80 <vTaskSuspendAll>
    15fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    15fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    15fe:	89 2b       	or	r24, r25
    1600:	69 f0       	breq	.+26     	; 0x161c <xStreamBufferReceive+0xd8>
    1602:	8a 85       	ldd	r24, Y+10	; 0x0a
    1604:	9b 85       	ldd	r25, Y+11	; 0x0b
    1606:	e1 2c       	mov	r14, r1
    1608:	f1 2c       	mov	r15, r1
    160a:	00 e0       	ldi	r16, 0x00	; 0
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	a9 01       	movw	r20, r18
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskGenericNotify>
    1618:	1b 86       	std	Y+11, r1	; 0x0b
    161a:	1a 86       	std	Y+10, r1	; 0x0a
    161c:	f1 d3       	rcall	.+2018   	; 0x1e00 <xTaskResumeAll>
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1620:	c1 2c       	mov	r12, r1
    1622:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1624:	c6 01       	movw	r24, r12
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	bf 90       	pop	r11
    1638:	af 90       	pop	r10
    163a:	9f 90       	pop	r9
    163c:	8f 90       	pop	r8
    163e:	7f 90       	pop	r7
    1640:	6f 90       	pop	r6
    1642:	5f 90       	pop	r5
    1644:	4f 90       	pop	r4
    1646:	08 95       	ret

00001648 <prvResetNextTaskUnblockTime>:
    1648:	e0 91 c7 16 	lds	r30, 0x16C7	; 0x8016c7 <pxDelayedTaskList>
    164c:	f0 91 c8 16 	lds	r31, 0x16C8	; 0x8016c8 <pxDelayedTaskList+0x1>
    1650:	80 81       	ld	r24, Z
    1652:	81 11       	cpse	r24, r1
    1654:	0c c0       	rjmp	.+24     	; 0x166e <prvResetNextTaskUnblockTime+0x26>
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	9f ef       	ldi	r25, 0xFF	; 255
    165a:	dc 01       	movw	r26, r24
    165c:	80 93 91 16 	sts	0x1691, r24	; 0x801691 <xNextTaskUnblockTime>
    1660:	90 93 92 16 	sts	0x1692, r25	; 0x801692 <xNextTaskUnblockTime+0x1>
    1664:	a0 93 93 16 	sts	0x1693, r26	; 0x801693 <xNextTaskUnblockTime+0x2>
    1668:	b0 93 94 16 	sts	0x1694, r27	; 0x801694 <xNextTaskUnblockTime+0x3>
    166c:	08 95       	ret
    166e:	e0 91 c7 16 	lds	r30, 0x16C7	; 0x8016c7 <pxDelayedTaskList>
    1672:	f0 91 c8 16 	lds	r31, 0x16C8	; 0x8016c8 <pxDelayedTaskList+0x1>
    1676:	07 80       	ldd	r0, Z+7	; 0x07
    1678:	f0 85       	ldd	r31, Z+8	; 0x08
    167a:	e0 2d       	mov	r30, r0
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	a2 81       	ldd	r26, Z+2	; 0x02
    1682:	b3 81       	ldd	r27, Z+3	; 0x03
    1684:	80 93 91 16 	sts	0x1691, r24	; 0x801691 <xNextTaskUnblockTime>
    1688:	90 93 92 16 	sts	0x1692, r25	; 0x801692 <xNextTaskUnblockTime+0x1>
    168c:	a0 93 93 16 	sts	0x1693, r26	; 0x801693 <xNextTaskUnblockTime+0x2>
    1690:	b0 93 94 16 	sts	0x1694, r27	; 0x801694 <xNextTaskUnblockTime+0x3>
    1694:	08 95       	ret

00001696 <prvDeleteTCB>:
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	ec 01       	movw	r28, r24
    169c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a0:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortFree>
    16a4:	ce 01       	movw	r24, r28
    16a6:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortFree>
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	08 95       	ret

000016b0 <prvInitialiseNewTask>:
    16b0:	4f 92       	push	r4
    16b2:	5f 92       	push	r5
    16b4:	6f 92       	push	r6
    16b6:	7f 92       	push	r7
    16b8:	8f 92       	push	r8
    16ba:	9f 92       	push	r9
    16bc:	af 92       	push	r10
    16be:	bf 92       	push	r11
    16c0:	cf 92       	push	r12
    16c2:	df 92       	push	r13
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	2c 01       	movw	r4, r24
    16d0:	5b 01       	movw	r10, r22
    16d2:	4a 01       	movw	r8, r20
    16d4:	39 01       	movw	r6, r18
    16d6:	e6 01       	movw	r28, r12
    16d8:	65 ea       	ldi	r22, 0xA5	; 165
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e0:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <memset>
    16e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e8:	21 e0       	ldi	r18, 0x01	; 1
    16ea:	82 1a       	sub	r8, r18
    16ec:	91 08       	sbc	r9, r1
    16ee:	88 0e       	add	r8, r24
    16f0:	99 1e       	adc	r9, r25
    16f2:	a1 14       	cp	r10, r1
    16f4:	b1 04       	cpc	r11, r1
    16f6:	89 f4       	brne	.+34     	; 0x171a <prvInitialiseNewTask+0x6a>
    16f8:	15 c0       	rjmp	.+42     	; 0x1724 <prvInitialiseNewTask+0x74>
    16fa:	82 2f       	mov	r24, r18
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	f5 01       	movw	r30, r10
    1700:	e8 0f       	add	r30, r24
    1702:	f9 1f       	adc	r31, r25
    1704:	30 81       	ld	r19, Z
    1706:	de 01       	movw	r26, r28
    1708:	a8 0f       	add	r26, r24
    170a:	b9 1f       	adc	r27, r25
    170c:	5d 96       	adiw	r26, 0x1d	; 29
    170e:	3c 93       	st	X, r19
    1710:	80 81       	ld	r24, Z
    1712:	88 23       	and	r24, r24
    1714:	29 f0       	breq	.+10     	; 0x1720 <prvInitialiseNewTask+0x70>
    1716:	2f 5f       	subi	r18, 0xFF	; 255
    1718:	01 c0       	rjmp	.+2      	; 0x171c <prvInitialiseNewTask+0x6c>
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	20 31       	cpi	r18, 0x10	; 16
    171e:	68 f3       	brcs	.-38     	; 0x16fa <prvInitialiseNewTask+0x4a>
    1720:	1c a6       	std	Y+44, r1	; 0x2c
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <prvInitialiseNewTask+0x76>
    1724:	1d 8e       	std	Y+29, r1	; 0x1d
    1726:	0a 30       	cpi	r16, 0x0A	; 10
    1728:	08 f0       	brcs	.+2      	; 0x172c <prvInitialiseNewTask+0x7c>
    172a:	09 e0       	ldi	r16, 0x09	; 9
    172c:	0a 8f       	std	Y+26, r16	; 0x1a
    172e:	0d a7       	std	Y+45, r16	; 0x2d
    1730:	1e a6       	std	Y+46, r1	; 0x2e
    1732:	ce 01       	movw	r24, r28
    1734:	02 96       	adiw	r24, 0x02	; 2
    1736:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <vListInitialiseItem>
    173a:	ce 01       	movw	r24, r28
    173c:	0e 96       	adiw	r24, 0x0e	; 14
    173e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <vListInitialiseItem>
    1742:	db 87       	std	Y+11, r29	; 0x0b
    1744:	ca 87       	std	Y+10, r28	; 0x0a
    1746:	8a e0       	ldi	r24, 0x0A	; 10
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a0 e0       	ldi	r26, 0x00	; 0
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	80 1b       	sub	r24, r16
    1750:	91 09       	sbc	r25, r1
    1752:	a1 09       	sbc	r26, r1
    1754:	b1 09       	sbc	r27, r1
    1756:	8e 87       	std	Y+14, r24	; 0x0e
    1758:	9f 87       	std	Y+15, r25	; 0x0f
    175a:	a8 8b       	std	Y+16, r26	; 0x10
    175c:	b9 8b       	std	Y+17, r27	; 0x11
    175e:	df 8b       	std	Y+23, r29	; 0x17
    1760:	ce 8b       	std	Y+22, r28	; 0x16
    1762:	84 e0       	ldi	r24, 0x04	; 4
    1764:	fe 01       	movw	r30, r28
    1766:	bf 96       	adiw	r30, 0x2f	; 47
    1768:	df 01       	movw	r26, r30
    176a:	1d 92       	st	X+, r1
    176c:	8a 95       	dec	r24
    176e:	e9 f7       	brne	.-6      	; 0x176a <prvInitialiseNewTask+0xba>
    1770:	1b aa       	std	Y+51, r1	; 0x33
    1772:	a3 01       	movw	r20, r6
    1774:	b2 01       	movw	r22, r4
    1776:	c4 01       	movw	r24, r8
    1778:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <pxPortInitialiseStack>
    177c:	99 83       	std	Y+1, r25	; 0x01
    177e:	88 83       	st	Y, r24
    1780:	e1 14       	cp	r14, r1
    1782:	f1 04       	cpc	r15, r1
    1784:	19 f0       	breq	.+6      	; 0x178c <prvInitialiseNewTask+0xdc>
    1786:	f7 01       	movw	r30, r14
    1788:	d1 83       	std	Z+1, r29	; 0x01
    178a:	c0 83       	st	Z, r28
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	0f 91       	pop	r16
    1792:	ff 90       	pop	r15
    1794:	ef 90       	pop	r14
    1796:	df 90       	pop	r13
    1798:	cf 90       	pop	r12
    179a:	bf 90       	pop	r11
    179c:	af 90       	pop	r10
    179e:	9f 90       	pop	r9
    17a0:	8f 90       	pop	r8
    17a2:	7f 90       	pop	r7
    17a4:	6f 90       	pop	r6
    17a6:	5f 90       	pop	r5
    17a8:	4f 90       	pop	r4
    17aa:	08 95       	ret

000017ac <prvInitialiseTaskLists>:
    17ac:	cf 93       	push	r28
    17ae:	c0 e0       	ldi	r28, 0x00	; 0
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <prvInitialiseTaskLists+0x18>
    17b2:	2b e0       	ldi	r18, 0x0B	; 11
    17b4:	c2 9f       	mul	r28, r18
    17b6:	c0 01       	movw	r24, r0
    17b8:	11 24       	eor	r1, r1
    17ba:	81 52       	subi	r24, 0x21	; 33
    17bc:	99 4e       	sbci	r25, 0xE9	; 233
    17be:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInitialise>
    17c2:	cf 5f       	subi	r28, 0xFF	; 255
    17c4:	ca 30       	cpi	r28, 0x0A	; 10
    17c6:	a8 f3       	brcs	.-22     	; 0x17b2 <prvInitialiseTaskLists+0x6>
    17c8:	84 ed       	ldi	r24, 0xD4	; 212
    17ca:	96 e1       	ldi	r25, 0x16	; 22
    17cc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInitialise>
    17d0:	89 ec       	ldi	r24, 0xC9	; 201
    17d2:	96 e1       	ldi	r25, 0x16	; 22
    17d4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInitialise>
    17d8:	8a eb       	ldi	r24, 0xBA	; 186
    17da:	96 e1       	ldi	r25, 0x16	; 22
    17dc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInitialise>
    17e0:	8f ea       	ldi	r24, 0xAF	; 175
    17e2:	96 e1       	ldi	r25, 0x16	; 22
    17e4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInitialise>
    17e8:	83 ea       	ldi	r24, 0xA3	; 163
    17ea:	96 e1       	ldi	r25, 0x16	; 22
    17ec:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInitialise>
    17f0:	84 ed       	ldi	r24, 0xD4	; 212
    17f2:	96 e1       	ldi	r25, 0x16	; 22
    17f4:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <pxDelayedTaskList+0x1>
    17f8:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <pxDelayedTaskList>
    17fc:	89 ec       	ldi	r24, 0xC9	; 201
    17fe:	96 e1       	ldi	r25, 0x16	; 22
    1800:	90 93 c6 16 	sts	0x16C6, r25	; 0x8016c6 <pxOverflowDelayedTaskList+0x1>
    1804:	80 93 c5 16 	sts	0x16C5, r24	; 0x8016c5 <pxOverflowDelayedTaskList>
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <prvAddNewTaskToReadyList>:
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	ec 01       	movw	r28, r24
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	0f 92       	push	r0
    1818:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <uxCurrentNumberOfTasks>
    181c:	8f 5f       	subi	r24, 0xFF	; 255
    181e:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <uxCurrentNumberOfTasks>
    1822:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <pxCurrentTCB>
    1826:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    182a:	89 2b       	or	r24, r25
    182c:	51 f4       	brne	.+20     	; 0x1842 <prvAddNewTaskToReadyList+0x36>
    182e:	d0 93 4e 17 	sts	0x174E, r29	; 0x80174e <pxCurrentTCB+0x1>
    1832:	c0 93 4d 17 	sts	0x174D, r28	; 0x80174d <pxCurrentTCB>
    1836:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <uxCurrentNumberOfTasks>
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 f4       	brne	.+36     	; 0x1862 <prvAddNewTaskToReadyList+0x56>
    183e:	b6 df       	rcall	.-148    	; 0x17ac <prvInitialiseTaskLists>
    1840:	10 c0       	rjmp	.+32     	; 0x1862 <prvAddNewTaskToReadyList+0x56>
    1842:	80 91 9c 16 	lds	r24, 0x169C	; 0x80169c <xSchedulerRunning>
    1846:	81 11       	cpse	r24, r1
    1848:	0c c0       	rjmp	.+24     	; 0x1862 <prvAddNewTaskToReadyList+0x56>
    184a:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    184e:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    1852:	92 8d       	ldd	r25, Z+26	; 0x1a
    1854:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1856:	89 17       	cp	r24, r25
    1858:	20 f0       	brcs	.+8      	; 0x1862 <prvAddNewTaskToReadyList+0x56>
    185a:	d0 93 4e 17 	sts	0x174E, r29	; 0x80174e <pxCurrentTCB+0x1>
    185e:	c0 93 4d 17 	sts	0x174D, r28	; 0x80174d <pxCurrentTCB>
    1862:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <uxTaskNumber>
    1866:	8f 5f       	subi	r24, 0xFF	; 255
    1868:	80 93 95 16 	sts	0x1695, r24	; 0x801695 <uxTaskNumber>
    186c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    186e:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <uxTopReadyPriority>
    1872:	8e 17       	cp	r24, r30
    1874:	10 f4       	brcc	.+4      	; 0x187a <prvAddNewTaskToReadyList+0x6e>
    1876:	e0 93 9d 16 	sts	0x169D, r30	; 0x80169d <uxTopReadyPriority>
    187a:	8b e0       	ldi	r24, 0x0B	; 11
    187c:	8e 9f       	mul	r24, r30
    187e:	f0 01       	movw	r30, r0
    1880:	11 24       	eor	r1, r1
    1882:	e1 52       	subi	r30, 0x21	; 33
    1884:	f9 4e       	sbci	r31, 0xE9	; 233
    1886:	01 80       	ldd	r0, Z+1	; 0x01
    1888:	f2 81       	ldd	r31, Z+2	; 0x02
    188a:	e0 2d       	mov	r30, r0
    188c:	ff 83       	std	Y+7, r31	; 0x07
    188e:	ee 83       	std	Y+6, r30	; 0x06
    1890:	26 81       	ldd	r18, Z+6	; 0x06
    1892:	37 81       	ldd	r19, Z+7	; 0x07
    1894:	39 87       	std	Y+9, r19	; 0x09
    1896:	28 87       	std	Y+8, r18	; 0x08
    1898:	a6 81       	ldd	r26, Z+6	; 0x06
    189a:	b7 81       	ldd	r27, Z+7	; 0x07
    189c:	9e 01       	movw	r18, r28
    189e:	2e 5f       	subi	r18, 0xFE	; 254
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	15 96       	adiw	r26, 0x05	; 5
    18a4:	3c 93       	st	X, r19
    18a6:	2e 93       	st	-X, r18
    18a8:	14 97       	sbiw	r26, 0x04	; 4
    18aa:	37 83       	std	Z+7, r19	; 0x07
    18ac:	26 83       	std	Z+6, r18	; 0x06
    18ae:	ea 8d       	ldd	r30, Y+26	; 0x1a
    18b0:	8e 9f       	mul	r24, r30
    18b2:	f0 01       	movw	r30, r0
    18b4:	11 24       	eor	r1, r1
    18b6:	e1 52       	subi	r30, 0x21	; 33
    18b8:	f9 4e       	sbci	r31, 0xE9	; 233
    18ba:	fd 87       	std	Y+13, r31	; 0x0d
    18bc:	ec 87       	std	Y+12, r30	; 0x0c
    18be:	80 81       	ld	r24, Z
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	80 83       	st	Z, r24
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	80 91 9c 16 	lds	r24, 0x169C	; 0x80169c <xSchedulerRunning>
    18cc:	88 23       	and	r24, r24
    18ce:	51 f0       	breq	.+20     	; 0x18e4 <prvAddNewTaskToReadyList+0xd8>
    18d0:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    18d4:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    18d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    18da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18dc:	98 17       	cp	r25, r24
    18de:	10 f4       	brcc	.+4      	; 0x18e4 <prvAddNewTaskToReadyList+0xd8>
    18e0:	0e 94 b5 03 	call	0x76a	; 0x76a <vPortYield>
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <prvCheckTasksWaitingTermination>:
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	1b c0       	rjmp	.+54     	; 0x1926 <prvCheckTasksWaitingTermination+0x3c>
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	0f 92       	push	r0
    18f6:	e0 91 b6 16 	lds	r30, 0x16B6	; 0x8016b6 <xTasksWaitingTermination+0x7>
    18fa:	f0 91 b7 16 	lds	r31, 0x16B7	; 0x8016b7 <xTasksWaitingTermination+0x8>
    18fe:	c0 85       	ldd	r28, Z+8	; 0x08
    1900:	d1 85       	ldd	r29, Z+9	; 0x09
    1902:	ce 01       	movw	r24, r28
    1904:	02 96       	adiw	r24, 0x02	; 2
    1906:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
    190a:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <uxCurrentNumberOfTasks>
    190e:	81 50       	subi	r24, 0x01	; 1
    1910:	80 93 a2 16 	sts	0x16A2, r24	; 0x8016a2 <uxCurrentNumberOfTasks>
    1914:	80 91 ae 16 	lds	r24, 0x16AE	; 0x8016ae <uxDeletedTasksWaitingCleanUp>
    1918:	81 50       	subi	r24, 0x01	; 1
    191a:	80 93 ae 16 	sts	0x16AE, r24	; 0x8016ae <uxDeletedTasksWaitingCleanUp>
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	ce 01       	movw	r24, r28
    1924:	b8 de       	rcall	.-656    	; 0x1696 <prvDeleteTCB>
    1926:	80 91 ae 16 	lds	r24, 0x16AE	; 0x8016ae <uxDeletedTasksWaitingCleanUp>
    192a:	81 11       	cpse	r24, r1
    192c:	e1 cf       	rjmp	.-62     	; 0x18f0 <prvCheckTasksWaitingTermination+0x6>
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <prvAddCurrentTaskToDelayedList>:
    1934:	8f 92       	push	r8
    1936:	9f 92       	push	r9
    1938:	af 92       	push	r10
    193a:	bf 92       	push	r11
    193c:	cf 92       	push	r12
    193e:	df 92       	push	r13
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	6b 01       	movw	r12, r22
    194a:	7c 01       	movw	r14, r24
    194c:	c4 2f       	mov	r28, r20
    194e:	80 90 9e 16 	lds	r8, 0x169E	; 0x80169e <xTickCount>
    1952:	90 90 9f 16 	lds	r9, 0x169F	; 0x80169f <xTickCount+0x1>
    1956:	a0 90 a0 16 	lds	r10, 0x16A0	; 0x8016a0 <xTickCount+0x2>
    195a:	b0 90 a1 16 	lds	r11, 0x16A1	; 0x8016a1 <xTickCount+0x3>
    195e:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <pxCurrentTCB>
    1962:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    1966:	02 96       	adiw	r24, 0x02	; 2
    1968:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
    196c:	8f ef       	ldi	r24, 0xFF	; 255
    196e:	c8 16       	cp	r12, r24
    1970:	d8 06       	cpc	r13, r24
    1972:	e8 06       	cpc	r14, r24
    1974:	f8 06       	cpc	r15, r24
    1976:	b1 f5       	brne	.+108    	; 0x19e4 <prvAddCurrentTaskToDelayedList+0xb0>
    1978:	cc 23       	and	r28, r28
    197a:	a1 f1       	breq	.+104    	; 0x19e4 <prvAddCurrentTaskToDelayedList+0xb0>
    197c:	e3 ea       	ldi	r30, 0xA3	; 163
    197e:	f6 e1       	ldi	r31, 0x16	; 22
    1980:	a1 81       	ldd	r26, Z+1	; 0x01
    1982:	b2 81       	ldd	r27, Z+2	; 0x02
    1984:	c0 91 4d 17 	lds	r28, 0x174D	; 0x80174d <pxCurrentTCB>
    1988:	d0 91 4e 17 	lds	r29, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    198c:	bf 83       	std	Y+7, r27	; 0x07
    198e:	ae 83       	std	Y+6, r26	; 0x06
    1990:	c0 91 4d 17 	lds	r28, 0x174D	; 0x80174d <pxCurrentTCB>
    1994:	d0 91 4e 17 	lds	r29, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    1998:	16 96       	adiw	r26, 0x06	; 6
    199a:	8d 91       	ld	r24, X+
    199c:	9c 91       	ld	r25, X
    199e:	17 97       	sbiw	r26, 0x07	; 7
    19a0:	99 87       	std	Y+9, r25	; 0x09
    19a2:	88 87       	std	Y+8, r24	; 0x08
    19a4:	16 96       	adiw	r26, 0x06	; 6
    19a6:	cd 91       	ld	r28, X+
    19a8:	dc 91       	ld	r29, X
    19aa:	17 97       	sbiw	r26, 0x07	; 7
    19ac:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <pxCurrentTCB>
    19b0:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    19b4:	02 96       	adiw	r24, 0x02	; 2
    19b6:	9d 83       	std	Y+5, r25	; 0x05
    19b8:	8c 83       	std	Y+4, r24	; 0x04
    19ba:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <pxCurrentTCB>
    19be:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    19c2:	02 96       	adiw	r24, 0x02	; 2
    19c4:	17 96       	adiw	r26, 0x07	; 7
    19c6:	9c 93       	st	X, r25
    19c8:	8e 93       	st	-X, r24
    19ca:	16 97       	sbiw	r26, 0x06	; 6
    19cc:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
    19d0:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    19d4:	1d 96       	adiw	r26, 0x0d	; 13
    19d6:	fc 93       	st	X, r31
    19d8:	ee 93       	st	-X, r30
    19da:	1c 97       	sbiw	r26, 0x0c	; 12
    19dc:	80 81       	ld	r24, Z
    19de:	8f 5f       	subi	r24, 0xFF	; 255
    19e0:	80 83       	st	Z, r24
    19e2:	3f c0       	rjmp	.+126    	; 0x1a62 <prvAddCurrentTaskToDelayedList+0x12e>
    19e4:	c8 0c       	add	r12, r8
    19e6:	d9 1c       	adc	r13, r9
    19e8:	ea 1c       	adc	r14, r10
    19ea:	fb 1c       	adc	r15, r11
    19ec:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    19f0:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    19f4:	c2 82       	std	Z+2, r12	; 0x02
    19f6:	d3 82       	std	Z+3, r13	; 0x03
    19f8:	e4 82       	std	Z+4, r14	; 0x04
    19fa:	f5 82       	std	Z+5, r15	; 0x05
    19fc:	c8 14       	cp	r12, r8
    19fe:	d9 04       	cpc	r13, r9
    1a00:	ea 04       	cpc	r14, r10
    1a02:	fb 04       	cpc	r15, r11
    1a04:	68 f4       	brcc	.+26     	; 0x1a20 <prvAddCurrentTaskToDelayedList+0xec>
    1a06:	60 91 4d 17 	lds	r22, 0x174D	; 0x80174d <pxCurrentTCB>
    1a0a:	70 91 4e 17 	lds	r23, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    1a0e:	80 91 c5 16 	lds	r24, 0x16C5	; 0x8016c5 <pxOverflowDelayedTaskList>
    1a12:	90 91 c6 16 	lds	r25, 0x16C6	; 0x8016c6 <pxOverflowDelayedTaskList+0x1>
    1a16:	6e 5f       	subi	r22, 0xFE	; 254
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <vListInsert>
    1a1e:	21 c0       	rjmp	.+66     	; 0x1a62 <prvAddCurrentTaskToDelayedList+0x12e>
    1a20:	60 91 4d 17 	lds	r22, 0x174D	; 0x80174d <pxCurrentTCB>
    1a24:	70 91 4e 17 	lds	r23, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    1a28:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <pxDelayedTaskList>
    1a2c:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <pxDelayedTaskList+0x1>
    1a30:	6e 5f       	subi	r22, 0xFE	; 254
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <vListInsert>
    1a38:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <xNextTaskUnblockTime>
    1a3c:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <xNextTaskUnblockTime+0x1>
    1a40:	a0 91 93 16 	lds	r26, 0x1693	; 0x801693 <xNextTaskUnblockTime+0x2>
    1a44:	b0 91 94 16 	lds	r27, 0x1694	; 0x801694 <xNextTaskUnblockTime+0x3>
    1a48:	c8 16       	cp	r12, r24
    1a4a:	d9 06       	cpc	r13, r25
    1a4c:	ea 06       	cpc	r14, r26
    1a4e:	fb 06       	cpc	r15, r27
    1a50:	40 f4       	brcc	.+16     	; 0x1a62 <prvAddCurrentTaskToDelayedList+0x12e>
    1a52:	c0 92 91 16 	sts	0x1691, r12	; 0x801691 <xNextTaskUnblockTime>
    1a56:	d0 92 92 16 	sts	0x1692, r13	; 0x801692 <xNextTaskUnblockTime+0x1>
    1a5a:	e0 92 93 16 	sts	0x1693, r14	; 0x801693 <xNextTaskUnblockTime+0x2>
    1a5e:	f0 92 94 16 	sts	0x1694, r15	; 0x801694 <xNextTaskUnblockTime+0x3>
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	df 90       	pop	r13
    1a6c:	cf 90       	pop	r12
    1a6e:	bf 90       	pop	r11
    1a70:	af 90       	pop	r10
    1a72:	9f 90       	pop	r9
    1a74:	8f 90       	pop	r8
    1a76:	08 95       	ret

00001a78 <xTaskCreate>:
    1a78:	2f 92       	push	r2
    1a7a:	3f 92       	push	r3
    1a7c:	4f 92       	push	r4
    1a7e:	5f 92       	push	r5
    1a80:	6f 92       	push	r6
    1a82:	7f 92       	push	r7
    1a84:	8f 92       	push	r8
    1a86:	9f 92       	push	r9
    1a88:	af 92       	push	r10
    1a8a:	bf 92       	push	r11
    1a8c:	cf 92       	push	r12
    1a8e:	df 92       	push	r13
    1a90:	ef 92       	push	r14
    1a92:	ff 92       	push	r15
    1a94:	0f 93       	push	r16
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	3c 01       	movw	r6, r24
    1a9c:	1b 01       	movw	r2, r22
    1a9e:	4a 01       	movw	r8, r20
    1aa0:	29 01       	movw	r4, r18
    1aa2:	ca 01       	movw	r24, r20
    1aa4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <pvPortMalloc>
    1aa8:	6c 01       	movw	r12, r24
    1aaa:	89 2b       	or	r24, r25
    1aac:	71 f0       	breq	.+28     	; 0x1aca <xTaskCreate+0x52>
    1aae:	84 e3       	ldi	r24, 0x34	; 52
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <pvPortMalloc>
    1ab6:	ec 01       	movw	r28, r24
    1ab8:	89 2b       	or	r24, r25
    1aba:	19 f0       	breq	.+6      	; 0x1ac2 <xTaskCreate+0x4a>
    1abc:	dc 8e       	std	Y+28, r13	; 0x1c
    1abe:	cb 8e       	std	Y+27, r12	; 0x1b
    1ac0:	06 c0       	rjmp	.+12     	; 0x1ace <xTaskCreate+0x56>
    1ac2:	c6 01       	movw	r24, r12
    1ac4:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortFree>
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <xTaskCreate+0x56>
    1aca:	c0 e0       	ldi	r28, 0x00	; 0
    1acc:	d0 e0       	ldi	r29, 0x00	; 0
    1ace:	20 97       	sbiw	r28, 0x00	; 0
    1ad0:	61 f0       	breq	.+24     	; 0x1aea <xTaskCreate+0x72>
    1ad2:	a1 2c       	mov	r10, r1
    1ad4:	b1 2c       	mov	r11, r1
    1ad6:	6e 01       	movw	r12, r28
    1ad8:	92 01       	movw	r18, r4
    1ada:	a4 01       	movw	r20, r8
    1adc:	b1 01       	movw	r22, r2
    1ade:	c3 01       	movw	r24, r6
    1ae0:	e7 dd       	rcall	.-1074   	; 0x16b0 <prvInitialiseNewTask>
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	93 de       	rcall	.-730    	; 0x180c <prvAddNewTaskToReadyList>
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <xTaskCreate+0x74>
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	0f 91       	pop	r16
    1af2:	ff 90       	pop	r15
    1af4:	ef 90       	pop	r14
    1af6:	df 90       	pop	r13
    1af8:	cf 90       	pop	r12
    1afa:	bf 90       	pop	r11
    1afc:	af 90       	pop	r10
    1afe:	9f 90       	pop	r9
    1b00:	8f 90       	pop	r8
    1b02:	7f 90       	pop	r7
    1b04:	6f 90       	pop	r6
    1b06:	5f 90       	pop	r5
    1b08:	4f 90       	pop	r4
    1b0a:	3f 90       	pop	r3
    1b0c:	2f 90       	pop	r2
    1b0e:	08 95       	ret

00001b10 <vTaskStartScheduler>:
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	0f 2e       	mov	r0, r31
    1b18:	ff e8       	ldi	r31, 0x8F	; 143
    1b1a:	ef 2e       	mov	r14, r31
    1b1c:	f6 e1       	ldi	r31, 0x16	; 22
    1b1e:	ff 2e       	mov	r15, r31
    1b20:	f0 2d       	mov	r31, r0
    1b22:	00 e0       	ldi	r16, 0x00	; 0
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 ec       	ldi	r20, 0xC0	; 192
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	6a e9       	ldi	r22, 0x9A	; 154
    1b2e:	72 e0       	ldi	r23, 0x02	; 2
    1b30:	8d ec       	ldi	r24, 0xCD	; 205
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a1 df       	rcall	.-190    	; 0x1a78 <xTaskCreate>
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	11 f4       	brne	.+4      	; 0x1b3e <vTaskStartScheduler+0x2e>
    1b3a:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <xTimerCreateTimerTask>
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	c9 f4       	brne	.+50     	; 0x1b74 <vTaskStartScheduler+0x64>
    1b42:	f8 94       	cli
    1b44:	8f ef       	ldi	r24, 0xFF	; 255
    1b46:	9f ef       	ldi	r25, 0xFF	; 255
    1b48:	dc 01       	movw	r26, r24
    1b4a:	80 93 91 16 	sts	0x1691, r24	; 0x801691 <xNextTaskUnblockTime>
    1b4e:	90 93 92 16 	sts	0x1692, r25	; 0x801692 <xNextTaskUnblockTime+0x1>
    1b52:	a0 93 93 16 	sts	0x1693, r26	; 0x801693 <xNextTaskUnblockTime+0x2>
    1b56:	b0 93 94 16 	sts	0x1694, r27	; 0x801694 <xNextTaskUnblockTime+0x3>
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	80 93 9c 16 	sts	0x169C, r24	; 0x80169c <xSchedulerRunning>
    1b60:	10 92 9e 16 	sts	0x169E, r1	; 0x80169e <xTickCount>
    1b64:	10 92 9f 16 	sts	0x169F, r1	; 0x80169f <xTickCount+0x1>
    1b68:	10 92 a0 16 	sts	0x16A0, r1	; 0x8016a0 <xTickCount+0x2>
    1b6c:	10 92 a1 16 	sts	0x16A1, r1	; 0x8016a1 <xTickCount+0x3>
    1b70:	0e 94 83 03 	call	0x706	; 0x706 <xPortStartScheduler>
    1b74:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	08 95       	ret

00001b80 <vTaskSuspendAll>:
    1b80:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxSchedulerSuspended>
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	80 93 8e 16 	sts	0x168E, r24	; 0x80168e <uxSchedulerSuspended>
    1b8a:	08 95       	ret

00001b8c <xTaskGetTickCount>:
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	0f 92       	push	r0
    1b92:	60 91 9e 16 	lds	r22, 0x169E	; 0x80169e <xTickCount>
    1b96:	70 91 9f 16 	lds	r23, 0x169F	; 0x80169f <xTickCount+0x1>
    1b9a:	80 91 a0 16 	lds	r24, 0x16A0	; 0x8016a0 <xTickCount+0x2>
    1b9e:	90 91 a1 16 	lds	r25, 0x16A1	; 0x8016a1 <xTickCount+0x3>
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	08 95       	ret

00001ba8 <xTaskIncrementTick>:
    1ba8:	cf 92       	push	r12
    1baa:	df 92       	push	r13
    1bac:	ef 92       	push	r14
    1bae:	ff 92       	push	r15
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxSchedulerSuspended>
    1bb8:	81 11       	cpse	r24, r1
    1bba:	05 c1       	rjmp	.+522    	; 0x1dc6 <xTaskIncrementTick+0x21e>
    1bbc:	c0 90 9e 16 	lds	r12, 0x169E	; 0x80169e <xTickCount>
    1bc0:	d0 90 9f 16 	lds	r13, 0x169F	; 0x80169f <xTickCount+0x1>
    1bc4:	e0 90 a0 16 	lds	r14, 0x16A0	; 0x8016a0 <xTickCount+0x2>
    1bc8:	f0 90 a1 16 	lds	r15, 0x16A1	; 0x8016a1 <xTickCount+0x3>
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	c8 1a       	sub	r12, r24
    1bd0:	d8 0a       	sbc	r13, r24
    1bd2:	e8 0a       	sbc	r14, r24
    1bd4:	f8 0a       	sbc	r15, r24
    1bd6:	c0 92 9e 16 	sts	0x169E, r12	; 0x80169e <xTickCount>
    1bda:	d0 92 9f 16 	sts	0x169F, r13	; 0x80169f <xTickCount+0x1>
    1bde:	e0 92 a0 16 	sts	0x16A0, r14	; 0x8016a0 <xTickCount+0x2>
    1be2:	f0 92 a1 16 	sts	0x16A1, r15	; 0x8016a1 <xTickCount+0x3>
    1be6:	c1 14       	cp	r12, r1
    1be8:	d1 04       	cpc	r13, r1
    1bea:	e1 04       	cpc	r14, r1
    1bec:	f1 04       	cpc	r15, r1
    1bee:	b1 f4       	brne	.+44     	; 0x1c1c <xTaskIncrementTick+0x74>
    1bf0:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <pxDelayedTaskList>
    1bf4:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <pxDelayedTaskList+0x1>
    1bf8:	20 91 c5 16 	lds	r18, 0x16C5	; 0x8016c5 <pxOverflowDelayedTaskList>
    1bfc:	30 91 c6 16 	lds	r19, 0x16C6	; 0x8016c6 <pxOverflowDelayedTaskList+0x1>
    1c00:	30 93 c8 16 	sts	0x16C8, r19	; 0x8016c8 <pxDelayedTaskList+0x1>
    1c04:	20 93 c7 16 	sts	0x16C7, r18	; 0x8016c7 <pxDelayedTaskList>
    1c08:	90 93 c6 16 	sts	0x16C6, r25	; 0x8016c6 <pxOverflowDelayedTaskList+0x1>
    1c0c:	80 93 c5 16 	sts	0x16C5, r24	; 0x8016c5 <pxOverflowDelayedTaskList>
    1c10:	80 91 96 16 	lds	r24, 0x1696	; 0x801696 <xNumOfOverflows>
    1c14:	8f 5f       	subi	r24, 0xFF	; 255
    1c16:	80 93 96 16 	sts	0x1696, r24	; 0x801696 <xNumOfOverflows>
    1c1a:	16 dd       	rcall	.-1492   	; 0x1648 <prvResetNextTaskUnblockTime>
    1c1c:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <xNextTaskUnblockTime>
    1c20:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <xNextTaskUnblockTime+0x1>
    1c24:	a0 91 93 16 	lds	r26, 0x1693	; 0x801693 <xNextTaskUnblockTime+0x2>
    1c28:	b0 91 94 16 	lds	r27, 0x1694	; 0x801694 <xNextTaskUnblockTime+0x3>
    1c2c:	c8 16       	cp	r12, r24
    1c2e:	d9 06       	cpc	r13, r25
    1c30:	ea 06       	cpc	r14, r26
    1c32:	fb 06       	cpc	r15, r27
    1c34:	20 f4       	brcc	.+8      	; 0x1c3e <xTaskIncrementTick+0x96>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	b2 c0       	rjmp	.+356    	; 0x1d9e <xTaskIncrementTick+0x1f6>
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <xTaskIncrementTick+0x98>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	e0 91 c7 16 	lds	r30, 0x16C7	; 0x8016c7 <pxDelayedTaskList>
    1c44:	f0 91 c8 16 	lds	r31, 0x16C8	; 0x8016c8 <pxDelayedTaskList+0x1>
    1c48:	90 81       	ld	r25, Z
    1c4a:	91 11       	cpse	r25, r1
    1c4c:	0c c0       	rjmp	.+24     	; 0x1c66 <xTaskIncrementTick+0xbe>
    1c4e:	4f ef       	ldi	r20, 0xFF	; 255
    1c50:	5f ef       	ldi	r21, 0xFF	; 255
    1c52:	ba 01       	movw	r22, r20
    1c54:	40 93 91 16 	sts	0x1691, r20	; 0x801691 <xNextTaskUnblockTime>
    1c58:	50 93 92 16 	sts	0x1692, r21	; 0x801692 <xNextTaskUnblockTime+0x1>
    1c5c:	60 93 93 16 	sts	0x1693, r22	; 0x801693 <xNextTaskUnblockTime+0x2>
    1c60:	70 93 94 16 	sts	0x1694, r23	; 0x801694 <xNextTaskUnblockTime+0x3>
    1c64:	9c c0       	rjmp	.+312    	; 0x1d9e <xTaskIncrementTick+0x1f6>
    1c66:	e0 91 c7 16 	lds	r30, 0x16C7	; 0x8016c7 <pxDelayedTaskList>
    1c6a:	f0 91 c8 16 	lds	r31, 0x16C8	; 0x8016c8 <pxDelayedTaskList+0x1>
    1c6e:	07 80       	ldd	r0, Z+7	; 0x07
    1c70:	f0 85       	ldd	r31, Z+8	; 0x08
    1c72:	e0 2d       	mov	r30, r0
    1c74:	00 84       	ldd	r0, Z+8	; 0x08
    1c76:	f1 85       	ldd	r31, Z+9	; 0x09
    1c78:	e0 2d       	mov	r30, r0
    1c7a:	42 81       	ldd	r20, Z+2	; 0x02
    1c7c:	53 81       	ldd	r21, Z+3	; 0x03
    1c7e:	64 81       	ldd	r22, Z+4	; 0x04
    1c80:	75 81       	ldd	r23, Z+5	; 0x05
    1c82:	c4 16       	cp	r12, r20
    1c84:	d5 06       	cpc	r13, r21
    1c86:	e6 06       	cpc	r14, r22
    1c88:	f7 06       	cpc	r15, r23
    1c8a:	48 f4       	brcc	.+18     	; 0x1c9e <xTaskIncrementTick+0xf6>
    1c8c:	40 93 91 16 	sts	0x1691, r20	; 0x801691 <xNextTaskUnblockTime>
    1c90:	50 93 92 16 	sts	0x1692, r21	; 0x801692 <xNextTaskUnblockTime+0x1>
    1c94:	60 93 93 16 	sts	0x1693, r22	; 0x801693 <xNextTaskUnblockTime+0x2>
    1c98:	70 93 94 16 	sts	0x1694, r23	; 0x801694 <xNextTaskUnblockTime+0x3>
    1c9c:	80 c0       	rjmp	.+256    	; 0x1d9e <xTaskIncrementTick+0x1f6>
    1c9e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ca0:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ca2:	c6 81       	ldd	r28, Z+6	; 0x06
    1ca4:	d7 81       	ldd	r29, Z+7	; 0x07
    1ca6:	20 85       	ldd	r18, Z+8	; 0x08
    1ca8:	31 85       	ldd	r19, Z+9	; 0x09
    1caa:	3f 83       	std	Y+7, r19	; 0x07
    1cac:	2e 83       	std	Y+6, r18	; 0x06
    1cae:	c0 85       	ldd	r28, Z+8	; 0x08
    1cb0:	d1 85       	ldd	r29, Z+9	; 0x09
    1cb2:	26 81       	ldd	r18, Z+6	; 0x06
    1cb4:	37 81       	ldd	r19, Z+7	; 0x07
    1cb6:	3d 83       	std	Y+5, r19	; 0x05
    1cb8:	2c 83       	std	Y+4, r18	; 0x04
    1cba:	11 96       	adiw	r26, 0x01	; 1
    1cbc:	4d 91       	ld	r20, X+
    1cbe:	5c 91       	ld	r21, X
    1cc0:	12 97       	sbiw	r26, 0x02	; 2
    1cc2:	9f 01       	movw	r18, r30
    1cc4:	2e 5f       	subi	r18, 0xFE	; 254
    1cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc8:	42 17       	cp	r20, r18
    1cca:	53 07       	cpc	r21, r19
    1ccc:	31 f4       	brne	.+12     	; 0x1cda <xTaskIncrementTick+0x132>
    1cce:	40 85       	ldd	r20, Z+8	; 0x08
    1cd0:	51 85       	ldd	r21, Z+9	; 0x09
    1cd2:	12 96       	adiw	r26, 0x02	; 2
    1cd4:	5c 93       	st	X, r21
    1cd6:	4e 93       	st	-X, r20
    1cd8:	11 97       	sbiw	r26, 0x01	; 1
    1cda:	15 86       	std	Z+13, r1	; 0x0d
    1cdc:	14 86       	std	Z+12, r1	; 0x0c
    1cde:	9c 91       	ld	r25, X
    1ce0:	91 50       	subi	r25, 0x01	; 1
    1ce2:	9c 93       	st	X, r25
    1ce4:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ce6:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ce8:	10 97       	sbiw	r26, 0x00	; 0
    1cea:	09 f1       	breq	.+66     	; 0x1d2e <xTaskIncrementTick+0x186>
    1cec:	c2 89       	ldd	r28, Z+18	; 0x12
    1cee:	d3 89       	ldd	r29, Z+19	; 0x13
    1cf0:	44 89       	ldd	r20, Z+20	; 0x14
    1cf2:	55 89       	ldd	r21, Z+21	; 0x15
    1cf4:	5f 83       	std	Y+7, r21	; 0x07
    1cf6:	4e 83       	std	Y+6, r20	; 0x06
    1cf8:	c4 89       	ldd	r28, Z+20	; 0x14
    1cfa:	d5 89       	ldd	r29, Z+21	; 0x15
    1cfc:	42 89       	ldd	r20, Z+18	; 0x12
    1cfe:	53 89       	ldd	r21, Z+19	; 0x13
    1d00:	5d 83       	std	Y+5, r21	; 0x05
    1d02:	4c 83       	std	Y+4, r20	; 0x04
    1d04:	11 96       	adiw	r26, 0x01	; 1
    1d06:	6d 91       	ld	r22, X+
    1d08:	7c 91       	ld	r23, X
    1d0a:	12 97       	sbiw	r26, 0x02	; 2
    1d0c:	af 01       	movw	r20, r30
    1d0e:	42 5f       	subi	r20, 0xF2	; 242
    1d10:	5f 4f       	sbci	r21, 0xFF	; 255
    1d12:	64 17       	cp	r22, r20
    1d14:	75 07       	cpc	r23, r21
    1d16:	31 f4       	brne	.+12     	; 0x1d24 <xTaskIncrementTick+0x17c>
    1d18:	44 89       	ldd	r20, Z+20	; 0x14
    1d1a:	55 89       	ldd	r21, Z+21	; 0x15
    1d1c:	12 96       	adiw	r26, 0x02	; 2
    1d1e:	5c 93       	st	X, r21
    1d20:	4e 93       	st	-X, r20
    1d22:	11 97       	sbiw	r26, 0x01	; 1
    1d24:	11 8e       	std	Z+25, r1	; 0x19
    1d26:	10 8e       	std	Z+24, r1	; 0x18
    1d28:	9c 91       	ld	r25, X
    1d2a:	91 50       	subi	r25, 0x01	; 1
    1d2c:	9c 93       	st	X, r25
    1d2e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d30:	90 91 9d 16 	lds	r25, 0x169D	; 0x80169d <uxTopReadyPriority>
    1d34:	9a 17       	cp	r25, r26
    1d36:	10 f4       	brcc	.+4      	; 0x1d3c <xTaskIncrementTick+0x194>
    1d38:	a0 93 9d 16 	sts	0x169D, r26	; 0x80169d <uxTopReadyPriority>
    1d3c:	9b e0       	ldi	r25, 0x0B	; 11
    1d3e:	9a 9f       	mul	r25, r26
    1d40:	d0 01       	movw	r26, r0
    1d42:	11 24       	eor	r1, r1
    1d44:	a1 52       	subi	r26, 0x21	; 33
    1d46:	b9 4e       	sbci	r27, 0xE9	; 233
    1d48:	11 96       	adiw	r26, 0x01	; 1
    1d4a:	0d 90       	ld	r0, X+
    1d4c:	bc 91       	ld	r27, X
    1d4e:	a0 2d       	mov	r26, r0
    1d50:	b7 83       	std	Z+7, r27	; 0x07
    1d52:	a6 83       	std	Z+6, r26	; 0x06
    1d54:	16 96       	adiw	r26, 0x06	; 6
    1d56:	4d 91       	ld	r20, X+
    1d58:	5c 91       	ld	r21, X
    1d5a:	17 97       	sbiw	r26, 0x07	; 7
    1d5c:	51 87       	std	Z+9, r21	; 0x09
    1d5e:	40 87       	std	Z+8, r20	; 0x08
    1d60:	16 96       	adiw	r26, 0x06	; 6
    1d62:	cd 91       	ld	r28, X+
    1d64:	dc 91       	ld	r29, X
    1d66:	17 97       	sbiw	r26, 0x07	; 7
    1d68:	3d 83       	std	Y+5, r19	; 0x05
    1d6a:	2c 83       	std	Y+4, r18	; 0x04
    1d6c:	17 96       	adiw	r26, 0x07	; 7
    1d6e:	3c 93       	st	X, r19
    1d70:	2e 93       	st	-X, r18
    1d72:	16 97       	sbiw	r26, 0x06	; 6
    1d74:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d76:	9a 9f       	mul	r25, r26
    1d78:	d0 01       	movw	r26, r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	a1 52       	subi	r26, 0x21	; 33
    1d7e:	b9 4e       	sbci	r27, 0xE9	; 233
    1d80:	b5 87       	std	Z+13, r27	; 0x0d
    1d82:	a4 87       	std	Z+12, r26	; 0x0c
    1d84:	9c 91       	ld	r25, X
    1d86:	9f 5f       	subi	r25, 0xFF	; 255
    1d88:	9c 93       	st	X, r25
    1d8a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d8c:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    1d90:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    1d94:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d96:	29 17       	cp	r18, r25
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <xTaskIncrementTick+0x1f4>
    1d9a:	4f cf       	rjmp	.-354    	; 0x1c3a <xTaskIncrementTick+0x92>
    1d9c:	51 cf       	rjmp	.-350    	; 0x1c40 <xTaskIncrementTick+0x98>
    1d9e:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    1da2:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    1da6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1da8:	9b e0       	ldi	r25, 0x0B	; 11
    1daa:	e9 9f       	mul	r30, r25
    1dac:	f0 01       	movw	r30, r0
    1dae:	11 24       	eor	r1, r1
    1db0:	e1 52       	subi	r30, 0x21	; 33
    1db2:	f9 4e       	sbci	r31, 0xE9	; 233
    1db4:	90 81       	ld	r25, Z
    1db6:	92 30       	cpi	r25, 0x02	; 2
    1db8:	08 f0       	brcs	.+2      	; 0x1dbc <xTaskIncrementTick+0x214>
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 91 97 16 	lds	r25, 0x1697	; 0x801697 <xYieldPending>
    1dc0:	91 11       	cpse	r25, r1
    1dc2:	16 c0       	rjmp	.+44     	; 0x1df0 <xTaskIncrementTick+0x248>
    1dc4:	16 c0       	rjmp	.+44     	; 0x1df2 <xTaskIncrementTick+0x24a>
    1dc6:	80 91 98 16 	lds	r24, 0x1698	; 0x801698 <xPendedTicks>
    1dca:	90 91 99 16 	lds	r25, 0x1699	; 0x801699 <xPendedTicks+0x1>
    1dce:	a0 91 9a 16 	lds	r26, 0x169A	; 0x80169a <xPendedTicks+0x2>
    1dd2:	b0 91 9b 16 	lds	r27, 0x169B	; 0x80169b <xPendedTicks+0x3>
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	a1 1d       	adc	r26, r1
    1dda:	b1 1d       	adc	r27, r1
    1ddc:	80 93 98 16 	sts	0x1698, r24	; 0x801698 <xPendedTicks>
    1de0:	90 93 99 16 	sts	0x1699, r25	; 0x801699 <xPendedTicks+0x1>
    1de4:	a0 93 9a 16 	sts	0x169A, r26	; 0x80169a <xPendedTicks+0x2>
    1de8:	b0 93 9b 16 	sts	0x169B, r27	; 0x80169b <xPendedTicks+0x3>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <xTaskIncrementTick+0x24a>
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	ff 90       	pop	r15
    1df8:	ef 90       	pop	r14
    1dfa:	df 90       	pop	r13
    1dfc:	cf 90       	pop	r12
    1dfe:	08 95       	ret

00001e00 <xTaskResumeAll>:
    1e00:	cf 92       	push	r12
    1e02:	df 92       	push	r13
    1e04:	ef 92       	push	r14
    1e06:	ff 92       	push	r15
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	0f 92       	push	r0
    1e12:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxSchedulerSuspended>
    1e16:	81 50       	subi	r24, 0x01	; 1
    1e18:	80 93 8e 16 	sts	0x168E, r24	; 0x80168e <uxSchedulerSuspended>
    1e1c:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxSchedulerSuspended>
    1e20:	81 11       	cpse	r24, r1
    1e22:	be c0       	rjmp	.+380    	; 0x1fa0 <xTaskResumeAll+0x1a0>
    1e24:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <uxCurrentNumberOfTasks>
    1e28:	81 11       	cpse	r24, r1
    1e2a:	88 c0       	rjmp	.+272    	; 0x1f3c <xTaskResumeAll+0x13c>
    1e2c:	bc c0       	rjmp	.+376    	; 0x1fa6 <xTaskResumeAll+0x1a6>
    1e2e:	e0 91 c1 16 	lds	r30, 0x16C1	; 0x8016c1 <xPendingReadyList+0x7>
    1e32:	f0 91 c2 16 	lds	r31, 0x16C2	; 0x8016c2 <xPendingReadyList+0x8>
    1e36:	00 84       	ldd	r0, Z+8	; 0x08
    1e38:	f1 85       	ldd	r31, Z+9	; 0x09
    1e3a:	e0 2d       	mov	r30, r0
    1e3c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e3e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e40:	c2 89       	ldd	r28, Z+18	; 0x12
    1e42:	d3 89       	ldd	r29, Z+19	; 0x13
    1e44:	84 89       	ldd	r24, Z+20	; 0x14
    1e46:	95 89       	ldd	r25, Z+21	; 0x15
    1e48:	9f 83       	std	Y+7, r25	; 0x07
    1e4a:	8e 83       	std	Y+6, r24	; 0x06
    1e4c:	c4 89       	ldd	r28, Z+20	; 0x14
    1e4e:	d5 89       	ldd	r29, Z+21	; 0x15
    1e50:	82 89       	ldd	r24, Z+18	; 0x12
    1e52:	93 89       	ldd	r25, Z+19	; 0x13
    1e54:	9d 83       	std	Y+5, r25	; 0x05
    1e56:	8c 83       	std	Y+4, r24	; 0x04
    1e58:	11 96       	adiw	r26, 0x01	; 1
    1e5a:	2d 91       	ld	r18, X+
    1e5c:	3c 91       	ld	r19, X
    1e5e:	12 97       	sbiw	r26, 0x02	; 2
    1e60:	cf 01       	movw	r24, r30
    1e62:	0e 96       	adiw	r24, 0x0e	; 14
    1e64:	28 17       	cp	r18, r24
    1e66:	39 07       	cpc	r19, r25
    1e68:	31 f4       	brne	.+12     	; 0x1e76 <xTaskResumeAll+0x76>
    1e6a:	84 89       	ldd	r24, Z+20	; 0x14
    1e6c:	95 89       	ldd	r25, Z+21	; 0x15
    1e6e:	12 96       	adiw	r26, 0x02	; 2
    1e70:	9c 93       	st	X, r25
    1e72:	8e 93       	st	-X, r24
    1e74:	11 97       	sbiw	r26, 0x01	; 1
    1e76:	11 8e       	std	Z+25, r1	; 0x19
    1e78:	10 8e       	std	Z+24, r1	; 0x18
    1e7a:	8c 91       	ld	r24, X
    1e7c:	81 50       	subi	r24, 0x01	; 1
    1e7e:	8c 93       	st	X, r24
    1e80:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e82:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e84:	c6 81       	ldd	r28, Z+6	; 0x06
    1e86:	d7 81       	ldd	r29, Z+7	; 0x07
    1e88:	80 85       	ldd	r24, Z+8	; 0x08
    1e8a:	91 85       	ldd	r25, Z+9	; 0x09
    1e8c:	9f 83       	std	Y+7, r25	; 0x07
    1e8e:	8e 83       	std	Y+6, r24	; 0x06
    1e90:	c0 85       	ldd	r28, Z+8	; 0x08
    1e92:	d1 85       	ldd	r29, Z+9	; 0x09
    1e94:	86 81       	ldd	r24, Z+6	; 0x06
    1e96:	97 81       	ldd	r25, Z+7	; 0x07
    1e98:	9d 83       	std	Y+5, r25	; 0x05
    1e9a:	8c 83       	std	Y+4, r24	; 0x04
    1e9c:	11 96       	adiw	r26, 0x01	; 1
    1e9e:	8d 91       	ld	r24, X+
    1ea0:	9c 91       	ld	r25, X
    1ea2:	12 97       	sbiw	r26, 0x02	; 2
    1ea4:	9f 01       	movw	r18, r30
    1ea6:	2e 5f       	subi	r18, 0xFE	; 254
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	82 17       	cp	r24, r18
    1eac:	93 07       	cpc	r25, r19
    1eae:	31 f4       	brne	.+12     	; 0x1ebc <xTaskResumeAll+0xbc>
    1eb0:	80 85       	ldd	r24, Z+8	; 0x08
    1eb2:	91 85       	ldd	r25, Z+9	; 0x09
    1eb4:	12 96       	adiw	r26, 0x02	; 2
    1eb6:	9c 93       	st	X, r25
    1eb8:	8e 93       	st	-X, r24
    1eba:	11 97       	sbiw	r26, 0x01	; 1
    1ebc:	15 86       	std	Z+13, r1	; 0x0d
    1ebe:	14 86       	std	Z+12, r1	; 0x0c
    1ec0:	8c 91       	ld	r24, X
    1ec2:	81 50       	subi	r24, 0x01	; 1
    1ec4:	8c 93       	st	X, r24
    1ec6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ec8:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <uxTopReadyPriority>
    1ecc:	8a 17       	cp	r24, r26
    1ece:	10 f4       	brcc	.+4      	; 0x1ed4 <xTaskResumeAll+0xd4>
    1ed0:	a0 93 9d 16 	sts	0x169D, r26	; 0x80169d <uxTopReadyPriority>
    1ed4:	8b e0       	ldi	r24, 0x0B	; 11
    1ed6:	8a 9f       	mul	r24, r26
    1ed8:	d0 01       	movw	r26, r0
    1eda:	11 24       	eor	r1, r1
    1edc:	a1 52       	subi	r26, 0x21	; 33
    1ede:	b9 4e       	sbci	r27, 0xE9	; 233
    1ee0:	11 96       	adiw	r26, 0x01	; 1
    1ee2:	0d 90       	ld	r0, X+
    1ee4:	bc 91       	ld	r27, X
    1ee6:	a0 2d       	mov	r26, r0
    1ee8:	b7 83       	std	Z+7, r27	; 0x07
    1eea:	a6 83       	std	Z+6, r26	; 0x06
    1eec:	16 96       	adiw	r26, 0x06	; 6
    1eee:	4d 91       	ld	r20, X+
    1ef0:	5c 91       	ld	r21, X
    1ef2:	17 97       	sbiw	r26, 0x07	; 7
    1ef4:	51 87       	std	Z+9, r21	; 0x09
    1ef6:	40 87       	std	Z+8, r20	; 0x08
    1ef8:	16 96       	adiw	r26, 0x06	; 6
    1efa:	cd 91       	ld	r28, X+
    1efc:	dc 91       	ld	r29, X
    1efe:	17 97       	sbiw	r26, 0x07	; 7
    1f00:	3d 83       	std	Y+5, r19	; 0x05
    1f02:	2c 83       	std	Y+4, r18	; 0x04
    1f04:	17 96       	adiw	r26, 0x07	; 7
    1f06:	3c 93       	st	X, r19
    1f08:	2e 93       	st	-X, r18
    1f0a:	16 97       	sbiw	r26, 0x06	; 6
    1f0c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f0e:	8a 9f       	mul	r24, r26
    1f10:	d0 01       	movw	r26, r0
    1f12:	11 24       	eor	r1, r1
    1f14:	a1 52       	subi	r26, 0x21	; 33
    1f16:	b9 4e       	sbci	r27, 0xE9	; 233
    1f18:	b5 87       	std	Z+13, r27	; 0x0d
    1f1a:	a4 87       	std	Z+12, r26	; 0x0c
    1f1c:	8c 91       	ld	r24, X
    1f1e:	8f 5f       	subi	r24, 0xFF	; 255
    1f20:	8c 93       	st	X, r24
    1f22:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f24:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
    1f28:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    1f2c:	5a 96       	adiw	r26, 0x1a	; 26
    1f2e:	8c 91       	ld	r24, X
    1f30:	98 17       	cp	r25, r24
    1f32:	30 f0       	brcs	.+12     	; 0x1f40 <xTaskResumeAll+0x140>
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <xYieldPending>
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <xTaskResumeAll+0x140>
    1f3c:	e0 e0       	ldi	r30, 0x00	; 0
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <xPendingReadyList>
    1f44:	81 11       	cpse	r24, r1
    1f46:	73 cf       	rjmp	.-282    	; 0x1e2e <xTaskResumeAll+0x2e>
    1f48:	ef 2b       	or	r30, r31
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <xTaskResumeAll+0x14e>
    1f4c:	7d db       	rcall	.-2310   	; 0x1648 <prvResetNextTaskUnblockTime>
    1f4e:	c0 90 98 16 	lds	r12, 0x1698	; 0x801698 <xPendedTicks>
    1f52:	d0 90 99 16 	lds	r13, 0x1699	; 0x801699 <xPendedTicks+0x1>
    1f56:	e0 90 9a 16 	lds	r14, 0x169A	; 0x80169a <xPendedTicks+0x2>
    1f5a:	f0 90 9b 16 	lds	r15, 0x169B	; 0x80169b <xPendedTicks+0x3>
    1f5e:	c1 14       	cp	r12, r1
    1f60:	d1 04       	cpc	r13, r1
    1f62:	e1 04       	cpc	r14, r1
    1f64:	f1 04       	cpc	r15, r1
    1f66:	a1 f0       	breq	.+40     	; 0x1f90 <xTaskResumeAll+0x190>
    1f68:	1f de       	rcall	.-962    	; 0x1ba8 <xTaskIncrementTick>
    1f6a:	88 23       	and	r24, r24
    1f6c:	19 f0       	breq	.+6      	; 0x1f74 <xTaskResumeAll+0x174>
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <xYieldPending>
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	c8 1a       	sub	r12, r24
    1f78:	d1 08       	sbc	r13, r1
    1f7a:	e1 08       	sbc	r14, r1
    1f7c:	f1 08       	sbc	r15, r1
    1f7e:	a1 f7       	brne	.-24     	; 0x1f68 <xTaskResumeAll+0x168>
    1f80:	10 92 98 16 	sts	0x1698, r1	; 0x801698 <xPendedTicks>
    1f84:	10 92 99 16 	sts	0x1699, r1	; 0x801699 <xPendedTicks+0x1>
    1f88:	10 92 9a 16 	sts	0x169A, r1	; 0x80169a <xPendedTicks+0x2>
    1f8c:	10 92 9b 16 	sts	0x169B, r1	; 0x80169b <xPendedTicks+0x3>
    1f90:	80 91 97 16 	lds	r24, 0x1697	; 0x801697 <xYieldPending>
    1f94:	88 23       	and	r24, r24
    1f96:	31 f0       	breq	.+12     	; 0x1fa4 <xTaskResumeAll+0x1a4>
    1f98:	0e 94 b5 03 	call	0x76a	; 0x76a <vPortYield>
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	03 c0       	rjmp	.+6      	; 0x1fa6 <xTaskResumeAll+0x1a6>
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	01 c0       	rjmp	.+2      	; 0x1fa6 <xTaskResumeAll+0x1a6>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	ff 90       	pop	r15
    1fb0:	ef 90       	pop	r14
    1fb2:	df 90       	pop	r13
    1fb4:	cf 90       	pop	r12
    1fb6:	08 95       	ret

00001fb8 <xTaskDelayUntil>:
    1fb8:	8f 92       	push	r8
    1fba:	9f 92       	push	r9
    1fbc:	af 92       	push	r10
    1fbe:	bf 92       	push	r11
    1fc0:	cf 92       	push	r12
    1fc2:	df 92       	push	r13
    1fc4:	ef 92       	push	r14
    1fc6:	ff 92       	push	r15
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	ec 01       	movw	r28, r24
    1fd0:	6a 01       	movw	r12, r20
    1fd2:	7b 01       	movw	r14, r22
    1fd4:	d5 dd       	rcall	.-1110   	; 0x1b80 <vTaskSuspendAll>
    1fd6:	80 90 9e 16 	lds	r8, 0x169E	; 0x80169e <xTickCount>
    1fda:	90 90 9f 16 	lds	r9, 0x169F	; 0x80169f <xTickCount+0x1>
    1fde:	a0 90 a0 16 	lds	r10, 0x16A0	; 0x8016a0 <xTickCount+0x2>
    1fe2:	b0 90 a1 16 	lds	r11, 0x16A1	; 0x8016a1 <xTickCount+0x3>
    1fe6:	88 81       	ld	r24, Y
    1fe8:	99 81       	ldd	r25, Y+1	; 0x01
    1fea:	aa 81       	ldd	r26, Y+2	; 0x02
    1fec:	bb 81       	ldd	r27, Y+3	; 0x03
    1fee:	ac 01       	movw	r20, r24
    1ff0:	bd 01       	movw	r22, r26
    1ff2:	4c 0d       	add	r20, r12
    1ff4:	5d 1d       	adc	r21, r13
    1ff6:	6e 1d       	adc	r22, r14
    1ff8:	7f 1d       	adc	r23, r15
    1ffa:	88 16       	cp	r8, r24
    1ffc:	99 06       	cpc	r9, r25
    1ffe:	aa 06       	cpc	r10, r26
    2000:	bb 06       	cpc	r11, r27
    2002:	60 f4       	brcc	.+24     	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    2004:	48 17       	cp	r20, r24
    2006:	59 07       	cpc	r21, r25
    2008:	6a 07       	cpc	r22, r26
    200a:	7b 07       	cpc	r23, r27
    200c:	98 f4       	brcc	.+38     	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
    200e:	84 16       	cp	r8, r20
    2010:	95 06       	cpc	r9, r21
    2012:	a6 06       	cpc	r10, r22
    2014:	b7 06       	cpc	r11, r23
    2016:	80 f0       	brcs	.+32     	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    2018:	10 e0       	ldi	r17, 0x00	; 0
    201a:	13 c0       	rjmp	.+38     	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    201c:	48 17       	cp	r20, r24
    201e:	59 07       	cpc	r21, r25
    2020:	6a 07       	cpc	r22, r26
    2022:	7b 07       	cpc	r23, r27
    2024:	58 f0       	brcs	.+22     	; 0x203c <__DATA_REGION_LENGTH__+0x3c>
    2026:	84 16       	cp	r8, r20
    2028:	95 06       	cpc	r9, r21
    202a:	a6 06       	cpc	r10, r22
    202c:	b7 06       	cpc	r11, r23
    202e:	40 f0       	brcs	.+16     	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    2030:	10 e0       	ldi	r17, 0x00	; 0
    2032:	07 c0       	rjmp	.+14     	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    2034:	10 e0       	ldi	r17, 0x00	; 0
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    2038:	11 e0       	ldi	r17, 0x01	; 1
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    203c:	11 e0       	ldi	r17, 0x01	; 1
    203e:	01 c0       	rjmp	.+2      	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    2040:	11 e0       	ldi	r17, 0x01	; 1
    2042:	48 83       	st	Y, r20
    2044:	59 83       	std	Y+1, r21	; 0x01
    2046:	6a 83       	std	Y+2, r22	; 0x02
    2048:	7b 83       	std	Y+3, r23	; 0x03
    204a:	11 23       	and	r17, r17
    204c:	41 f0       	breq	.+16     	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    204e:	cb 01       	movw	r24, r22
    2050:	ba 01       	movw	r22, r20
    2052:	68 19       	sub	r22, r8
    2054:	79 09       	sbc	r23, r9
    2056:	8a 09       	sbc	r24, r10
    2058:	9b 09       	sbc	r25, r11
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	6b dc       	rcall	.-1834   	; 0x1934 <prvAddCurrentTaskToDelayedList>
    205e:	d0 de       	rcall	.-608    	; 0x1e00 <xTaskResumeAll>
    2060:	81 11       	cpse	r24, r1
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
    2064:	0e 94 b5 03 	call	0x76a	; 0x76a <vPortYield>
    2068:	81 2f       	mov	r24, r17
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	bf 90       	pop	r11
    207a:	af 90       	pop	r10
    207c:	9f 90       	pop	r9
    207e:	8f 90       	pop	r8
    2080:	08 95       	ret

00002082 <vTaskDelay>:
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	6b 01       	movw	r12, r22
    208c:	7c 01       	movw	r14, r24
    208e:	67 2b       	or	r22, r23
    2090:	68 2b       	or	r22, r24
    2092:	69 2b       	or	r22, r25
    2094:	39 f0       	breq	.+14     	; 0x20a4 <vTaskDelay+0x22>
    2096:	74 dd       	rcall	.-1304   	; 0x1b80 <vTaskSuspendAll>
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	c7 01       	movw	r24, r14
    209c:	b6 01       	movw	r22, r12
    209e:	4a dc       	rcall	.-1900   	; 0x1934 <prvAddCurrentTaskToDelayedList>
    20a0:	af de       	rcall	.-674    	; 0x1e00 <xTaskResumeAll>
    20a2:	01 c0       	rjmp	.+2      	; 0x20a6 <vTaskDelay+0x24>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	81 11       	cpse	r24, r1
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <vTaskDelay+0x2c>
    20aa:	0e 94 b5 03 	call	0x76a	; 0x76a <vPortYield>
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	df 90       	pop	r13
    20b4:	cf 90       	pop	r12
    20b6:	08 95       	ret

000020b8 <vTaskSwitchContext>:
    20b8:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxSchedulerSuspended>
    20bc:	88 23       	and	r24, r24
    20be:	21 f0       	breq	.+8      	; 0x20c8 <vTaskSwitchContext+0x10>
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <xYieldPending>
    20c6:	08 95       	ret
    20c8:	10 92 97 16 	sts	0x1697, r1	; 0x801697 <xYieldPending>
    20cc:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    20d0:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    20d4:	20 81       	ld	r18, Z
    20d6:	31 81       	ldd	r19, Z+1	; 0x01
    20d8:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    20dc:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    20e0:	83 8d       	ldd	r24, Z+27	; 0x1b
    20e2:	94 8d       	ldd	r25, Z+28	; 0x1c
    20e4:	82 17       	cp	r24, r18
    20e6:	93 07       	cpc	r25, r19
    20e8:	60 f0       	brcs	.+24     	; 0x2102 <vTaskSwitchContext+0x4a>
    20ea:	60 91 4d 17 	lds	r22, 0x174D	; 0x80174d <pxCurrentTCB>
    20ee:	70 91 4e 17 	lds	r23, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    20f2:	63 5e       	subi	r22, 0xE3	; 227
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <pxCurrentTCB>
    20fa:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    20fe:	0e 94 ba 19 	call	0x3374	; 0x3374 <vApplicationStackOverflowHook>
    2102:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <uxTopReadyPriority>
    2106:	01 c0       	rjmp	.+2      	; 0x210a <vTaskSwitchContext+0x52>
    2108:	81 50       	subi	r24, 0x01	; 1
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	9b e0       	ldi	r25, 0x0B	; 11
    2110:	92 9f       	mul	r25, r18
    2112:	f0 01       	movw	r30, r0
    2114:	93 9f       	mul	r25, r19
    2116:	f0 0d       	add	r31, r0
    2118:	11 24       	eor	r1, r1
    211a:	e1 52       	subi	r30, 0x21	; 33
    211c:	f9 4e       	sbci	r31, 0xE9	; 233
    211e:	90 81       	ld	r25, Z
    2120:	99 23       	and	r25, r25
    2122:	91 f3       	breq	.-28     	; 0x2108 <vTaskSwitchContext+0x50>
    2124:	9b e0       	ldi	r25, 0x0B	; 11
    2126:	92 9f       	mul	r25, r18
    2128:	a0 01       	movw	r20, r0
    212a:	93 9f       	mul	r25, r19
    212c:	50 0d       	add	r21, r0
    212e:	11 24       	eor	r1, r1
    2130:	df 01       	movw	r26, r30
    2132:	01 80       	ldd	r0, Z+1	; 0x01
    2134:	f2 81       	ldd	r31, Z+2	; 0x02
    2136:	e0 2d       	mov	r30, r0
    2138:	04 80       	ldd	r0, Z+4	; 0x04
    213a:	f5 81       	ldd	r31, Z+5	; 0x05
    213c:	e0 2d       	mov	r30, r0
    213e:	12 96       	adiw	r26, 0x02	; 2
    2140:	fc 93       	st	X, r31
    2142:	ee 93       	st	-X, r30
    2144:	11 97       	sbiw	r26, 0x01	; 1
    2146:	4e 51       	subi	r20, 0x1E	; 30
    2148:	59 4e       	sbci	r21, 0xE9	; 233
    214a:	e4 17       	cp	r30, r20
    214c:	f5 07       	cpc	r31, r21
    214e:	29 f4       	brne	.+10     	; 0x215a <vTaskSwitchContext+0xa2>
    2150:	44 81       	ldd	r20, Z+4	; 0x04
    2152:	55 81       	ldd	r21, Z+5	; 0x05
    2154:	fd 01       	movw	r30, r26
    2156:	52 83       	std	Z+2, r21	; 0x02
    2158:	41 83       	std	Z+1, r20	; 0x01
    215a:	9b e0       	ldi	r25, 0x0B	; 11
    215c:	92 9f       	mul	r25, r18
    215e:	f0 01       	movw	r30, r0
    2160:	93 9f       	mul	r25, r19
    2162:	f0 0d       	add	r31, r0
    2164:	11 24       	eor	r1, r1
    2166:	e1 52       	subi	r30, 0x21	; 33
    2168:	f9 4e       	sbci	r31, 0xE9	; 233
    216a:	01 80       	ldd	r0, Z+1	; 0x01
    216c:	f2 81       	ldd	r31, Z+2	; 0x02
    216e:	e0 2d       	mov	r30, r0
    2170:	20 85       	ldd	r18, Z+8	; 0x08
    2172:	31 85       	ldd	r19, Z+9	; 0x09
    2174:	30 93 4e 17 	sts	0x174E, r19	; 0x80174e <pxCurrentTCB+0x1>
    2178:	20 93 4d 17 	sts	0x174D, r18	; 0x80174d <pxCurrentTCB>
    217c:	80 93 9d 16 	sts	0x169D, r24	; 0x80169d <uxTopReadyPriority>
    2180:	08 95       	ret

00002182 <vTaskPlaceOnEventList>:
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	6a 01       	movw	r12, r20
    218c:	7b 01       	movw	r14, r22
    218e:	60 91 4d 17 	lds	r22, 0x174D	; 0x80174d <pxCurrentTCB>
    2192:	70 91 4e 17 	lds	r23, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    2196:	62 5f       	subi	r22, 0xF2	; 242
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <vListInsert>
    219e:	41 e0       	ldi	r20, 0x01	; 1
    21a0:	c7 01       	movw	r24, r14
    21a2:	b6 01       	movw	r22, r12
    21a4:	c7 db       	rcall	.-2162   	; 0x1934 <prvAddCurrentTaskToDelayedList>
    21a6:	ff 90       	pop	r15
    21a8:	ef 90       	pop	r14
    21aa:	df 90       	pop	r13
    21ac:	cf 90       	pop	r12
    21ae:	08 95       	ret

000021b0 <vTaskPlaceOnEventListRestricted>:
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	fc 01       	movw	r30, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	ba 01       	movw	r22, r20
    21ba:	a1 81       	ldd	r26, Z+1	; 0x01
    21bc:	b2 81       	ldd	r27, Z+2	; 0x02
    21be:	c0 91 4d 17 	lds	r28, 0x174D	; 0x80174d <pxCurrentTCB>
    21c2:	d0 91 4e 17 	lds	r29, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    21c6:	bb 8b       	std	Y+19, r27	; 0x13
    21c8:	aa 8b       	std	Y+18, r26	; 0x12
    21ca:	c0 91 4d 17 	lds	r28, 0x174D	; 0x80174d <pxCurrentTCB>
    21ce:	d0 91 4e 17 	lds	r29, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    21d2:	16 96       	adiw	r26, 0x06	; 6
    21d4:	4d 91       	ld	r20, X+
    21d6:	5c 91       	ld	r21, X
    21d8:	17 97       	sbiw	r26, 0x07	; 7
    21da:	5d 8b       	std	Y+21, r21	; 0x15
    21dc:	4c 8b       	std	Y+20, r20	; 0x14
    21de:	16 96       	adiw	r26, 0x06	; 6
    21e0:	cd 91       	ld	r28, X+
    21e2:	dc 91       	ld	r29, X
    21e4:	17 97       	sbiw	r26, 0x07	; 7
    21e6:	40 91 4d 17 	lds	r20, 0x174D	; 0x80174d <pxCurrentTCB>
    21ea:	50 91 4e 17 	lds	r21, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    21ee:	42 5f       	subi	r20, 0xF2	; 242
    21f0:	5f 4f       	sbci	r21, 0xFF	; 255
    21f2:	5d 83       	std	Y+5, r21	; 0x05
    21f4:	4c 83       	std	Y+4, r20	; 0x04
    21f6:	40 91 4d 17 	lds	r20, 0x174D	; 0x80174d <pxCurrentTCB>
    21fa:	50 91 4e 17 	lds	r21, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    21fe:	42 5f       	subi	r20, 0xF2	; 242
    2200:	5f 4f       	sbci	r21, 0xFF	; 255
    2202:	17 96       	adiw	r26, 0x07	; 7
    2204:	5c 93       	st	X, r21
    2206:	4e 93       	st	-X, r20
    2208:	16 97       	sbiw	r26, 0x06	; 6
    220a:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
    220e:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    2212:	59 96       	adiw	r26, 0x19	; 25
    2214:	fc 93       	st	X, r31
    2216:	ee 93       	st	-X, r30
    2218:	58 97       	sbiw	r26, 0x18	; 24
    221a:	30 81       	ld	r19, Z
    221c:	3f 5f       	subi	r19, 0xFF	; 255
    221e:	30 83       	st	Z, r19
    2220:	22 23       	and	r18, r18
    2222:	19 f0       	breq	.+6      	; 0x222a <__stack+0x2b>
    2224:	6f ef       	ldi	r22, 0xFF	; 255
    2226:	7f ef       	ldi	r23, 0xFF	; 255
    2228:	cb 01       	movw	r24, r22
    222a:	42 2f       	mov	r20, r18
    222c:	83 db       	rcall	.-2298   	; 0x1934 <prvAddCurrentTaskToDelayedList>
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	08 95       	ret

00002234 <xTaskRemoveFromEventList>:
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	dc 01       	movw	r26, r24
    223a:	17 96       	adiw	r26, 0x07	; 7
    223c:	ed 91       	ld	r30, X+
    223e:	fc 91       	ld	r31, X
    2240:	18 97       	sbiw	r26, 0x08	; 8
    2242:	00 84       	ldd	r0, Z+8	; 0x08
    2244:	f1 85       	ldd	r31, Z+9	; 0x09
    2246:	e0 2d       	mov	r30, r0
    2248:	a0 8d       	ldd	r26, Z+24	; 0x18
    224a:	b1 8d       	ldd	r27, Z+25	; 0x19
    224c:	c2 89       	ldd	r28, Z+18	; 0x12
    224e:	d3 89       	ldd	r29, Z+19	; 0x13
    2250:	84 89       	ldd	r24, Z+20	; 0x14
    2252:	95 89       	ldd	r25, Z+21	; 0x15
    2254:	9f 83       	std	Y+7, r25	; 0x07
    2256:	8e 83       	std	Y+6, r24	; 0x06
    2258:	c4 89       	ldd	r28, Z+20	; 0x14
    225a:	d5 89       	ldd	r29, Z+21	; 0x15
    225c:	82 89       	ldd	r24, Z+18	; 0x12
    225e:	93 89       	ldd	r25, Z+19	; 0x13
    2260:	9d 83       	std	Y+5, r25	; 0x05
    2262:	8c 83       	std	Y+4, r24	; 0x04
    2264:	11 96       	adiw	r26, 0x01	; 1
    2266:	8d 91       	ld	r24, X+
    2268:	9c 91       	ld	r25, X
    226a:	12 97       	sbiw	r26, 0x02	; 2
    226c:	9f 01       	movw	r18, r30
    226e:	22 5f       	subi	r18, 0xF2	; 242
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	82 17       	cp	r24, r18
    2274:	93 07       	cpc	r25, r19
    2276:	31 f4       	brne	.+12     	; 0x2284 <xTaskRemoveFromEventList+0x50>
    2278:	84 89       	ldd	r24, Z+20	; 0x14
    227a:	95 89       	ldd	r25, Z+21	; 0x15
    227c:	12 96       	adiw	r26, 0x02	; 2
    227e:	9c 93       	st	X, r25
    2280:	8e 93       	st	-X, r24
    2282:	11 97       	sbiw	r26, 0x01	; 1
    2284:	11 8e       	std	Z+25, r1	; 0x19
    2286:	10 8e       	std	Z+24, r1	; 0x18
    2288:	8c 91       	ld	r24, X
    228a:	81 50       	subi	r24, 0x01	; 1
    228c:	8c 93       	st	X, r24
    228e:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxSchedulerSuspended>
    2292:	81 11       	cpse	r24, r1
    2294:	52 c0       	rjmp	.+164    	; 0x233a <xTaskRemoveFromEventList+0x106>
    2296:	a4 85       	ldd	r26, Z+12	; 0x0c
    2298:	b5 85       	ldd	r27, Z+13	; 0x0d
    229a:	c6 81       	ldd	r28, Z+6	; 0x06
    229c:	d7 81       	ldd	r29, Z+7	; 0x07
    229e:	80 85       	ldd	r24, Z+8	; 0x08
    22a0:	91 85       	ldd	r25, Z+9	; 0x09
    22a2:	9f 83       	std	Y+7, r25	; 0x07
    22a4:	8e 83       	std	Y+6, r24	; 0x06
    22a6:	c0 85       	ldd	r28, Z+8	; 0x08
    22a8:	d1 85       	ldd	r29, Z+9	; 0x09
    22aa:	86 81       	ldd	r24, Z+6	; 0x06
    22ac:	97 81       	ldd	r25, Z+7	; 0x07
    22ae:	9d 83       	std	Y+5, r25	; 0x05
    22b0:	8c 83       	std	Y+4, r24	; 0x04
    22b2:	11 96       	adiw	r26, 0x01	; 1
    22b4:	8d 91       	ld	r24, X+
    22b6:	9c 91       	ld	r25, X
    22b8:	12 97       	sbiw	r26, 0x02	; 2
    22ba:	9f 01       	movw	r18, r30
    22bc:	2e 5f       	subi	r18, 0xFE	; 254
    22be:	3f 4f       	sbci	r19, 0xFF	; 255
    22c0:	82 17       	cp	r24, r18
    22c2:	93 07       	cpc	r25, r19
    22c4:	31 f4       	brne	.+12     	; 0x22d2 <xTaskRemoveFromEventList+0x9e>
    22c6:	80 85       	ldd	r24, Z+8	; 0x08
    22c8:	91 85       	ldd	r25, Z+9	; 0x09
    22ca:	12 96       	adiw	r26, 0x02	; 2
    22cc:	9c 93       	st	X, r25
    22ce:	8e 93       	st	-X, r24
    22d0:	11 97       	sbiw	r26, 0x01	; 1
    22d2:	15 86       	std	Z+13, r1	; 0x0d
    22d4:	14 86       	std	Z+12, r1	; 0x0c
    22d6:	8c 91       	ld	r24, X
    22d8:	81 50       	subi	r24, 0x01	; 1
    22da:	8c 93       	st	X, r24
    22dc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22de:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <uxTopReadyPriority>
    22e2:	8a 17       	cp	r24, r26
    22e4:	10 f4       	brcc	.+4      	; 0x22ea <xTaskRemoveFromEventList+0xb6>
    22e6:	a0 93 9d 16 	sts	0x169D, r26	; 0x80169d <uxTopReadyPriority>
    22ea:	8b e0       	ldi	r24, 0x0B	; 11
    22ec:	8a 9f       	mul	r24, r26
    22ee:	d0 01       	movw	r26, r0
    22f0:	11 24       	eor	r1, r1
    22f2:	a1 52       	subi	r26, 0x21	; 33
    22f4:	b9 4e       	sbci	r27, 0xE9	; 233
    22f6:	11 96       	adiw	r26, 0x01	; 1
    22f8:	0d 90       	ld	r0, X+
    22fa:	bc 91       	ld	r27, X
    22fc:	a0 2d       	mov	r26, r0
    22fe:	b7 83       	std	Z+7, r27	; 0x07
    2300:	a6 83       	std	Z+6, r26	; 0x06
    2302:	16 96       	adiw	r26, 0x06	; 6
    2304:	4d 91       	ld	r20, X+
    2306:	5c 91       	ld	r21, X
    2308:	17 97       	sbiw	r26, 0x07	; 7
    230a:	51 87       	std	Z+9, r21	; 0x09
    230c:	40 87       	std	Z+8, r20	; 0x08
    230e:	16 96       	adiw	r26, 0x06	; 6
    2310:	cd 91       	ld	r28, X+
    2312:	dc 91       	ld	r29, X
    2314:	17 97       	sbiw	r26, 0x07	; 7
    2316:	3d 83       	std	Y+5, r19	; 0x05
    2318:	2c 83       	std	Y+4, r18	; 0x04
    231a:	17 96       	adiw	r26, 0x07	; 7
    231c:	3c 93       	st	X, r19
    231e:	2e 93       	st	-X, r18
    2320:	16 97       	sbiw	r26, 0x06	; 6
    2322:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2324:	8a 9f       	mul	r24, r26
    2326:	d0 01       	movw	r26, r0
    2328:	11 24       	eor	r1, r1
    232a:	a1 52       	subi	r26, 0x21	; 33
    232c:	b9 4e       	sbci	r27, 0xE9	; 233
    232e:	b5 87       	std	Z+13, r27	; 0x0d
    2330:	a4 87       	std	Z+12, r26	; 0x0c
    2332:	8c 91       	ld	r24, X
    2334:	8f 5f       	subi	r24, 0xFF	; 255
    2336:	8c 93       	st	X, r24
    2338:	1c c0       	rjmp	.+56     	; 0x2372 <xTaskRemoveFromEventList+0x13e>
    233a:	4a eb       	ldi	r20, 0xBA	; 186
    233c:	56 e1       	ldi	r21, 0x16	; 22
    233e:	da 01       	movw	r26, r20
    2340:	11 96       	adiw	r26, 0x01	; 1
    2342:	cd 91       	ld	r28, X+
    2344:	dc 91       	ld	r29, X
    2346:	12 97       	sbiw	r26, 0x02	; 2
    2348:	d3 8b       	std	Z+19, r29	; 0x13
    234a:	c2 8b       	std	Z+18, r28	; 0x12
    234c:	8e 81       	ldd	r24, Y+6	; 0x06
    234e:	9f 81       	ldd	r25, Y+7	; 0x07
    2350:	95 8b       	std	Z+21, r25	; 0x15
    2352:	84 8b       	std	Z+20, r24	; 0x14
    2354:	8e 81       	ldd	r24, Y+6	; 0x06
    2356:	9f 81       	ldd	r25, Y+7	; 0x07
    2358:	dc 01       	movw	r26, r24
    235a:	15 96       	adiw	r26, 0x05	; 5
    235c:	3c 93       	st	X, r19
    235e:	2e 93       	st	-X, r18
    2360:	14 97       	sbiw	r26, 0x04	; 4
    2362:	3f 83       	std	Y+7, r19	; 0x07
    2364:	2e 83       	std	Y+6, r18	; 0x06
    2366:	51 8f       	std	Z+25, r21	; 0x19
    2368:	40 8f       	std	Z+24, r20	; 0x18
    236a:	da 01       	movw	r26, r20
    236c:	8c 91       	ld	r24, X
    236e:	8f 5f       	subi	r24, 0xFF	; 255
    2370:	8c 93       	st	X, r24
    2372:	92 8d       	ldd	r25, Z+26	; 0x1a
    2374:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    2378:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    237c:	82 8d       	ldd	r24, Z+26	; 0x1a
    237e:	89 17       	cp	r24, r25
    2380:	20 f4       	brcc	.+8      	; 0x238a <xTaskRemoveFromEventList+0x156>
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <xYieldPending>
    2388:	01 c0       	rjmp	.+2      	; 0x238c <xTaskRemoveFromEventList+0x158>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	08 95       	ret

00002392 <vTaskSetTimeOutState>:
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	0f 92       	push	r0
    2398:	20 91 96 16 	lds	r18, 0x1696	; 0x801696 <xNumOfOverflows>
    239c:	fc 01       	movw	r30, r24
    239e:	20 83       	st	Z, r18
    23a0:	40 91 9e 16 	lds	r20, 0x169E	; 0x80169e <xTickCount>
    23a4:	50 91 9f 16 	lds	r21, 0x169F	; 0x80169f <xTickCount+0x1>
    23a8:	60 91 a0 16 	lds	r22, 0x16A0	; 0x8016a0 <xTickCount+0x2>
    23ac:	70 91 a1 16 	lds	r23, 0x16A1	; 0x8016a1 <xTickCount+0x3>
    23b0:	41 83       	std	Z+1, r20	; 0x01
    23b2:	52 83       	std	Z+2, r21	; 0x02
    23b4:	63 83       	std	Z+3, r22	; 0x03
    23b6:	74 83       	std	Z+4, r23	; 0x04
    23b8:	0f 90       	pop	r0
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	08 95       	ret

000023be <vTaskInternalSetTimeOutState>:
    23be:	20 91 96 16 	lds	r18, 0x1696	; 0x801696 <xNumOfOverflows>
    23c2:	fc 01       	movw	r30, r24
    23c4:	20 83       	st	Z, r18
    23c6:	40 91 9e 16 	lds	r20, 0x169E	; 0x80169e <xTickCount>
    23ca:	50 91 9f 16 	lds	r21, 0x169F	; 0x80169f <xTickCount+0x1>
    23ce:	60 91 a0 16 	lds	r22, 0x16A0	; 0x8016a0 <xTickCount+0x2>
    23d2:	70 91 a1 16 	lds	r23, 0x16A1	; 0x8016a1 <xTickCount+0x3>
    23d6:	41 83       	std	Z+1, r20	; 0x01
    23d8:	52 83       	std	Z+2, r21	; 0x02
    23da:	63 83       	std	Z+3, r22	; 0x03
    23dc:	74 83       	std	Z+4, r23	; 0x04
    23de:	08 95       	ret

000023e0 <xTaskCheckForTimeOut>:
    23e0:	8f 92       	push	r8
    23e2:	9f 92       	push	r9
    23e4:	af 92       	push	r10
    23e6:	bf 92       	push	r11
    23e8:	cf 92       	push	r12
    23ea:	df 92       	push	r13
    23ec:	ef 92       	push	r14
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	fb 01       	movw	r30, r22
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	0f 92       	push	r0
    2400:	c0 90 9e 16 	lds	r12, 0x169E	; 0x80169e <xTickCount>
    2404:	d0 90 9f 16 	lds	r13, 0x169F	; 0x80169f <xTickCount+0x1>
    2408:	e0 90 a0 16 	lds	r14, 0x16A0	; 0x8016a0 <xTickCount+0x2>
    240c:	f0 90 a1 16 	lds	r15, 0x16A1	; 0x8016a1 <xTickCount+0x3>
    2410:	dc 01       	movw	r26, r24
    2412:	11 96       	adiw	r26, 0x01	; 1
    2414:	0d 91       	ld	r16, X+
    2416:	1d 91       	ld	r17, X+
    2418:	2d 91       	ld	r18, X+
    241a:	3c 91       	ld	r19, X
    241c:	14 97       	sbiw	r26, 0x04	; 4
    241e:	46 01       	movw	r8, r12
    2420:	57 01       	movw	r10, r14
    2422:	80 1a       	sub	r8, r16
    2424:	91 0a       	sbc	r9, r17
    2426:	a2 0a       	sbc	r10, r18
    2428:	b3 0a       	sbc	r11, r19
    242a:	40 81       	ld	r20, Z
    242c:	51 81       	ldd	r21, Z+1	; 0x01
    242e:	62 81       	ldd	r22, Z+2	; 0x02
    2430:	73 81       	ldd	r23, Z+3	; 0x03
    2432:	4f 3f       	cpi	r20, 0xFF	; 255
    2434:	bf ef       	ldi	r27, 0xFF	; 255
    2436:	5b 07       	cpc	r21, r27
    2438:	6b 07       	cpc	r22, r27
    243a:	7b 07       	cpc	r23, r27
    243c:	39 f1       	breq	.+78     	; 0x248c <xTaskCheckForTimeOut+0xac>
    243e:	ec 01       	movw	r28, r24
    2440:	b8 81       	ld	r27, Y
    2442:	a0 91 96 16 	lds	r26, 0x1696	; 0x801696 <xNumOfOverflows>
    2446:	ba 17       	cp	r27, r26
    2448:	59 f0       	breq	.+22     	; 0x2460 <xTaskCheckForTimeOut+0x80>
    244a:	c0 16       	cp	r12, r16
    244c:	d1 06       	cpc	r13, r17
    244e:	e2 06       	cpc	r14, r18
    2450:	f3 06       	cpc	r15, r19
    2452:	30 f0       	brcs	.+12     	; 0x2460 <xTaskCheckForTimeOut+0x80>
    2454:	10 82       	st	Z, r1
    2456:	11 82       	std	Z+1, r1	; 0x01
    2458:	12 82       	std	Z+2, r1	; 0x02
    245a:	13 82       	std	Z+3, r1	; 0x03
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	17 c0       	rjmp	.+46     	; 0x248e <xTaskCheckForTimeOut+0xae>
    2460:	84 16       	cp	r8, r20
    2462:	95 06       	cpc	r9, r21
    2464:	a6 06       	cpc	r10, r22
    2466:	b7 06       	cpc	r11, r23
    2468:	58 f4       	brcc	.+22     	; 0x2480 <xTaskCheckForTimeOut+0xa0>
    246a:	48 19       	sub	r20, r8
    246c:	59 09       	sbc	r21, r9
    246e:	6a 09       	sbc	r22, r10
    2470:	7b 09       	sbc	r23, r11
    2472:	40 83       	st	Z, r20
    2474:	51 83       	std	Z+1, r21	; 0x01
    2476:	62 83       	std	Z+2, r22	; 0x02
    2478:	73 83       	std	Z+3, r23	; 0x03
    247a:	a1 df       	rcall	.-190    	; 0x23be <vTaskInternalSetTimeOutState>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	07 c0       	rjmp	.+14     	; 0x248e <xTaskCheckForTimeOut+0xae>
    2480:	10 82       	st	Z, r1
    2482:	11 82       	std	Z+1, r1	; 0x01
    2484:	12 82       	std	Z+2, r1	; 0x02
    2486:	13 82       	std	Z+3, r1	; 0x03
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	01 c0       	rjmp	.+2      	; 0x248e <xTaskCheckForTimeOut+0xae>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	0f 90       	pop	r0
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	ff 90       	pop	r15
    249c:	ef 90       	pop	r14
    249e:	df 90       	pop	r13
    24a0:	cf 90       	pop	r12
    24a2:	bf 90       	pop	r11
    24a4:	af 90       	pop	r10
    24a6:	9f 90       	pop	r9
    24a8:	8f 90       	pop	r8
    24aa:	08 95       	ret

000024ac <vTaskMissedYield>:
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <xYieldPending>
    24b2:	08 95       	ret

000024b4 <xTaskGetCurrentTaskHandle>:
    24b4:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <pxCurrentTCB>
    24b8:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    24bc:	08 95       	ret

000024be <xTaskGetSchedulerState>:
    24be:	80 91 9c 16 	lds	r24, 0x169C	; 0x80169c <xSchedulerRunning>
    24c2:	88 23       	and	r24, r24
    24c4:	31 f0       	breq	.+12     	; 0x24d2 <xTaskGetSchedulerState+0x14>
    24c6:	80 91 8e 16 	lds	r24, 0x168E	; 0x80168e <uxSchedulerSuspended>
    24ca:	81 11       	cpse	r24, r1
    24cc:	04 c0       	rjmp	.+8      	; 0x24d6 <xTaskGetSchedulerState+0x18>
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	08 95       	ret
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	08 95       	ret
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	08 95       	ret

000024da <xTaskPriorityInherit>:
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	fc 01       	movw	r30, r24
    24e4:	89 2b       	or	r24, r25
    24e6:	09 f4       	brne	.+2      	; 0x24ea <xTaskPriorityInherit+0x10>
    24e8:	77 c0       	rjmp	.+238    	; 0x25d8 <xTaskPriorityInherit+0xfe>
    24ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    24ec:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
    24f0:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    24f4:	5a 96       	adiw	r26, 0x1a	; 26
    24f6:	9c 91       	ld	r25, X
    24f8:	89 17       	cp	r24, r25
    24fa:	08 f0       	brcs	.+2      	; 0x24fe <xTaskPriorityInherit+0x24>
    24fc:	63 c0       	rjmp	.+198    	; 0x25c4 <xTaskPriorityInherit+0xea>
    24fe:	46 85       	ldd	r20, Z+14	; 0x0e
    2500:	57 85       	ldd	r21, Z+15	; 0x0f
    2502:	60 89       	ldd	r22, Z+16	; 0x10
    2504:	71 89       	ldd	r23, Z+17	; 0x11
    2506:	77 23       	and	r23, r23
    2508:	94 f0       	brlt	.+36     	; 0x252e <xTaskPriorityInherit+0x54>
    250a:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
    250e:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    2512:	5a 96       	adiw	r26, 0x1a	; 26
    2514:	9c 91       	ld	r25, X
    2516:	4a e0       	ldi	r20, 0x0A	; 10
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	49 1b       	sub	r20, r25
    2520:	51 09       	sbc	r21, r1
    2522:	61 09       	sbc	r22, r1
    2524:	71 09       	sbc	r23, r1
    2526:	46 87       	std	Z+14, r20	; 0x0e
    2528:	57 87       	std	Z+15, r21	; 0x0f
    252a:	60 8b       	std	Z+16, r22	; 0x10
    252c:	71 8b       	std	Z+17, r23	; 0x11
    252e:	24 85       	ldd	r18, Z+12	; 0x0c
    2530:	35 85       	ldd	r19, Z+13	; 0x0d
    2532:	4b e0       	ldi	r20, 0x0B	; 11
    2534:	84 9f       	mul	r24, r20
    2536:	c0 01       	movw	r24, r0
    2538:	11 24       	eor	r1, r1
    253a:	81 52       	subi	r24, 0x21	; 33
    253c:	99 4e       	sbci	r25, 0xE9	; 233
    253e:	28 17       	cp	r18, r24
    2540:	39 07       	cpc	r19, r25
    2542:	b9 f5       	brne	.+110    	; 0x25b2 <xTaskPriorityInherit+0xd8>
    2544:	ef 01       	movw	r28, r30
    2546:	8f 01       	movw	r16, r30
    2548:	0e 5f       	subi	r16, 0xFE	; 254
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	c8 01       	movw	r24, r16
    254e:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
    2552:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    2556:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    255a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    255c:	ea 8f       	std	Y+26, r30	; 0x1a
    255e:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <uxTopReadyPriority>
    2562:	8e 17       	cp	r24, r30
    2564:	10 f4       	brcc	.+4      	; 0x256a <xTaskPriorityInherit+0x90>
    2566:	e0 93 9d 16 	sts	0x169D, r30	; 0x80169d <uxTopReadyPriority>
    256a:	8b e0       	ldi	r24, 0x0B	; 11
    256c:	8e 9f       	mul	r24, r30
    256e:	f0 01       	movw	r30, r0
    2570:	11 24       	eor	r1, r1
    2572:	e1 52       	subi	r30, 0x21	; 33
    2574:	f9 4e       	sbci	r31, 0xE9	; 233
    2576:	01 80       	ldd	r0, Z+1	; 0x01
    2578:	f2 81       	ldd	r31, Z+2	; 0x02
    257a:	e0 2d       	mov	r30, r0
    257c:	ff 83       	std	Y+7, r31	; 0x07
    257e:	ee 83       	std	Y+6, r30	; 0x06
    2580:	26 81       	ldd	r18, Z+6	; 0x06
    2582:	37 81       	ldd	r19, Z+7	; 0x07
    2584:	39 87       	std	Y+9, r19	; 0x09
    2586:	28 87       	std	Y+8, r18	; 0x08
    2588:	a6 81       	ldd	r26, Z+6	; 0x06
    258a:	b7 81       	ldd	r27, Z+7	; 0x07
    258c:	15 96       	adiw	r26, 0x05	; 5
    258e:	1c 93       	st	X, r17
    2590:	0e 93       	st	-X, r16
    2592:	14 97       	sbiw	r26, 0x04	; 4
    2594:	17 83       	std	Z+7, r17	; 0x07
    2596:	06 83       	std	Z+6, r16	; 0x06
    2598:	ea 8d       	ldd	r30, Y+26	; 0x1a
    259a:	8e 9f       	mul	r24, r30
    259c:	f0 01       	movw	r30, r0
    259e:	11 24       	eor	r1, r1
    25a0:	e1 52       	subi	r30, 0x21	; 33
    25a2:	f9 4e       	sbci	r31, 0xE9	; 233
    25a4:	fd 87       	std	Y+13, r31	; 0x0d
    25a6:	ec 87       	std	Y+12, r30	; 0x0c
    25a8:	80 81       	ld	r24, Z
    25aa:	8f 5f       	subi	r24, 0xFF	; 255
    25ac:	80 83       	st	Z, r24
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	16 c0       	rjmp	.+44     	; 0x25de <xTaskPriorityInherit+0x104>
    25b2:	a0 91 4d 17 	lds	r26, 0x174D	; 0x80174d <pxCurrentTCB>
    25b6:	b0 91 4e 17 	lds	r27, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    25ba:	5a 96       	adiw	r26, 0x1a	; 26
    25bc:	8c 91       	ld	r24, X
    25be:	82 8f       	std	Z+26, r24	; 0x1a
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	0d c0       	rjmp	.+26     	; 0x25de <xTaskPriorityInherit+0x104>
    25c4:	95 a5       	ldd	r25, Z+45	; 0x2d
    25c6:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    25ca:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    25ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    25d0:	98 17       	cp	r25, r24
    25d2:	20 f0       	brcs	.+8      	; 0x25dc <xTaskPriorityInherit+0x102>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	03 c0       	rjmp	.+6      	; 0x25de <xTaskPriorityInherit+0x104>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	01 c0       	rjmp	.+2      	; 0x25de <xTaskPriorityInherit+0x104>
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	08 95       	ret

000025e8 <xTaskPriorityDisinherit>:
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	fc 01       	movw	r30, r24
    25f2:	89 2b       	or	r24, r25
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <xTaskPriorityDisinherit+0x10>
    25f6:	49 c0       	rjmp	.+146    	; 0x268a <xTaskPriorityDisinherit+0xa2>
    25f8:	86 a5       	ldd	r24, Z+46	; 0x2e
    25fa:	81 50       	subi	r24, 0x01	; 1
    25fc:	86 a7       	std	Z+46, r24	; 0x2e
    25fe:	22 8d       	ldd	r18, Z+26	; 0x1a
    2600:	95 a5       	ldd	r25, Z+45	; 0x2d
    2602:	29 17       	cp	r18, r25
    2604:	09 f4       	brne	.+2      	; 0x2608 <xTaskPriorityDisinherit+0x20>
    2606:	43 c0       	rjmp	.+134    	; 0x268e <xTaskPriorityDisinherit+0xa6>
    2608:	81 11       	cpse	r24, r1
    260a:	43 c0       	rjmp	.+134    	; 0x2692 <xTaskPriorityDisinherit+0xaa>
    260c:	ef 01       	movw	r28, r30
    260e:	8f 01       	movw	r16, r30
    2610:	0e 5f       	subi	r16, 0xFE	; 254
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	c8 01       	movw	r24, r16
    2616:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
    261a:	ed a5       	ldd	r30, Y+45	; 0x2d
    261c:	ea 8f       	std	Y+26, r30	; 0x1a
    261e:	8a e0       	ldi	r24, 0x0A	; 10
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a0 e0       	ldi	r26, 0x00	; 0
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	8e 1b       	sub	r24, r30
    2628:	91 09       	sbc	r25, r1
    262a:	a1 09       	sbc	r26, r1
    262c:	b1 09       	sbc	r27, r1
    262e:	8e 87       	std	Y+14, r24	; 0x0e
    2630:	9f 87       	std	Y+15, r25	; 0x0f
    2632:	a8 8b       	std	Y+16, r26	; 0x10
    2634:	b9 8b       	std	Y+17, r27	; 0x11
    2636:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <uxTopReadyPriority>
    263a:	8e 17       	cp	r24, r30
    263c:	10 f4       	brcc	.+4      	; 0x2642 <xTaskPriorityDisinherit+0x5a>
    263e:	e0 93 9d 16 	sts	0x169D, r30	; 0x80169d <uxTopReadyPriority>
    2642:	8b e0       	ldi	r24, 0x0B	; 11
    2644:	8e 9f       	mul	r24, r30
    2646:	f0 01       	movw	r30, r0
    2648:	11 24       	eor	r1, r1
    264a:	e1 52       	subi	r30, 0x21	; 33
    264c:	f9 4e       	sbci	r31, 0xE9	; 233
    264e:	01 80       	ldd	r0, Z+1	; 0x01
    2650:	f2 81       	ldd	r31, Z+2	; 0x02
    2652:	e0 2d       	mov	r30, r0
    2654:	ff 83       	std	Y+7, r31	; 0x07
    2656:	ee 83       	std	Y+6, r30	; 0x06
    2658:	26 81       	ldd	r18, Z+6	; 0x06
    265a:	37 81       	ldd	r19, Z+7	; 0x07
    265c:	39 87       	std	Y+9, r19	; 0x09
    265e:	28 87       	std	Y+8, r18	; 0x08
    2660:	a6 81       	ldd	r26, Z+6	; 0x06
    2662:	b7 81       	ldd	r27, Z+7	; 0x07
    2664:	15 96       	adiw	r26, 0x05	; 5
    2666:	1c 93       	st	X, r17
    2668:	0e 93       	st	-X, r16
    266a:	14 97       	sbiw	r26, 0x04	; 4
    266c:	17 83       	std	Z+7, r17	; 0x07
    266e:	06 83       	std	Z+6, r16	; 0x06
    2670:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2672:	8e 9f       	mul	r24, r30
    2674:	f0 01       	movw	r30, r0
    2676:	11 24       	eor	r1, r1
    2678:	e1 52       	subi	r30, 0x21	; 33
    267a:	f9 4e       	sbci	r31, 0xE9	; 233
    267c:	fd 87       	std	Y+13, r31	; 0x0d
    267e:	ec 87       	std	Y+12, r30	; 0x0c
    2680:	80 81       	ld	r24, Z
    2682:	8f 5f       	subi	r24, 0xFF	; 255
    2684:	80 83       	st	Z, r24
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	05 c0       	rjmp	.+10     	; 0x2694 <xTaskPriorityDisinherit+0xac>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <xTaskPriorityDisinherit+0xac>
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <xTaskPriorityDisinherit+0xac>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	08 95       	ret

0000269e <vTaskPriorityDisinheritAfterTimeout>:
    269e:	0f 93       	push	r16
    26a0:	1f 93       	push	r17
    26a2:	cf 93       	push	r28
    26a4:	df 93       	push	r29
    26a6:	fc 01       	movw	r30, r24
    26a8:	89 2b       	or	r24, r25
    26aa:	09 f4       	brne	.+2      	; 0x26ae <vTaskPriorityDisinheritAfterTimeout+0x10>
    26ac:	5a c0       	rjmp	.+180    	; 0x2762 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    26ae:	85 a5       	ldd	r24, Z+45	; 0x2d
    26b0:	86 17       	cp	r24, r22
    26b2:	08 f4       	brcc	.+2      	; 0x26b6 <vTaskPriorityDisinheritAfterTimeout+0x18>
    26b4:	86 2f       	mov	r24, r22
    26b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    26b8:	89 17       	cp	r24, r25
    26ba:	09 f4       	brne	.+2      	; 0x26be <vTaskPriorityDisinheritAfterTimeout+0x20>
    26bc:	52 c0       	rjmp	.+164    	; 0x2762 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    26be:	26 a5       	ldd	r18, Z+46	; 0x2e
    26c0:	21 30       	cpi	r18, 0x01	; 1
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <vTaskPriorityDisinheritAfterTimeout+0x28>
    26c4:	4e c0       	rjmp	.+156    	; 0x2762 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    26c6:	82 8f       	std	Z+26, r24	; 0x1a
    26c8:	46 85       	ldd	r20, Z+14	; 0x0e
    26ca:	57 85       	ldd	r21, Z+15	; 0x0f
    26cc:	60 89       	ldd	r22, Z+16	; 0x10
    26ce:	71 89       	ldd	r23, Z+17	; 0x11
    26d0:	77 23       	and	r23, r23
    26d2:	64 f0       	brlt	.+24     	; 0x26ec <vTaskPriorityDisinheritAfterTimeout+0x4e>
    26d4:	4a e0       	ldi	r20, 0x0A	; 10
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	48 1b       	sub	r20, r24
    26de:	51 09       	sbc	r21, r1
    26e0:	61 09       	sbc	r22, r1
    26e2:	71 09       	sbc	r23, r1
    26e4:	46 87       	std	Z+14, r20	; 0x0e
    26e6:	57 87       	std	Z+15, r21	; 0x0f
    26e8:	60 8b       	std	Z+16, r22	; 0x10
    26ea:	71 8b       	std	Z+17, r23	; 0x11
    26ec:	24 85       	ldd	r18, Z+12	; 0x0c
    26ee:	35 85       	ldd	r19, Z+13	; 0x0d
    26f0:	4b e0       	ldi	r20, 0x0B	; 11
    26f2:	94 9f       	mul	r25, r20
    26f4:	c0 01       	movw	r24, r0
    26f6:	11 24       	eor	r1, r1
    26f8:	81 52       	subi	r24, 0x21	; 33
    26fa:	99 4e       	sbci	r25, 0xE9	; 233
    26fc:	28 17       	cp	r18, r24
    26fe:	39 07       	cpc	r19, r25
    2700:	81 f5       	brne	.+96     	; 0x2762 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2702:	ef 01       	movw	r28, r30
    2704:	8f 01       	movw	r16, r30
    2706:	0e 5f       	subi	r16, 0xFE	; 254
    2708:	1f 4f       	sbci	r17, 0xFF	; 255
    270a:	c8 01       	movw	r24, r16
    270c:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
    2710:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2712:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <uxTopReadyPriority>
    2716:	8e 17       	cp	r24, r30
    2718:	10 f4       	brcc	.+4      	; 0x271e <vTaskPriorityDisinheritAfterTimeout+0x80>
    271a:	e0 93 9d 16 	sts	0x169D, r30	; 0x80169d <uxTopReadyPriority>
    271e:	8b e0       	ldi	r24, 0x0B	; 11
    2720:	8e 9f       	mul	r24, r30
    2722:	f0 01       	movw	r30, r0
    2724:	11 24       	eor	r1, r1
    2726:	e1 52       	subi	r30, 0x21	; 33
    2728:	f9 4e       	sbci	r31, 0xE9	; 233
    272a:	01 80       	ldd	r0, Z+1	; 0x01
    272c:	f2 81       	ldd	r31, Z+2	; 0x02
    272e:	e0 2d       	mov	r30, r0
    2730:	ff 83       	std	Y+7, r31	; 0x07
    2732:	ee 83       	std	Y+6, r30	; 0x06
    2734:	26 81       	ldd	r18, Z+6	; 0x06
    2736:	37 81       	ldd	r19, Z+7	; 0x07
    2738:	39 87       	std	Y+9, r19	; 0x09
    273a:	28 87       	std	Y+8, r18	; 0x08
    273c:	a6 81       	ldd	r26, Z+6	; 0x06
    273e:	b7 81       	ldd	r27, Z+7	; 0x07
    2740:	15 96       	adiw	r26, 0x05	; 5
    2742:	1c 93       	st	X, r17
    2744:	0e 93       	st	-X, r16
    2746:	14 97       	sbiw	r26, 0x04	; 4
    2748:	17 83       	std	Z+7, r17	; 0x07
    274a:	06 83       	std	Z+6, r16	; 0x06
    274c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    274e:	8e 9f       	mul	r24, r30
    2750:	f0 01       	movw	r30, r0
    2752:	11 24       	eor	r1, r1
    2754:	e1 52       	subi	r30, 0x21	; 33
    2756:	f9 4e       	sbci	r31, 0xE9	; 233
    2758:	fd 87       	std	Y+13, r31	; 0x0d
    275a:	ec 87       	std	Y+12, r30	; 0x0c
    275c:	80 81       	ld	r24, Z
    275e:	8f 5f       	subi	r24, 0xFF	; 255
    2760:	80 83       	st	Z, r24
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	08 95       	ret

0000276c <pvTaskIncrementMutexHeldCount>:
    276c:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <pxCurrentTCB>
    2770:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    2774:	89 2b       	or	r24, r25
    2776:	39 f0       	breq	.+14     	; 0x2786 <pvTaskIncrementMutexHeldCount+0x1a>
    2778:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    277c:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    2780:	86 a5       	ldd	r24, Z+46	; 0x2e
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	86 a7       	std	Z+46, r24	; 0x2e
    2786:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <pxCurrentTCB>
    278a:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    278e:	08 95       	ret

00002790 <xTaskGenericNotifyWait>:
    2790:	4f 92       	push	r4
    2792:	5f 92       	push	r5
    2794:	6f 92       	push	r6
    2796:	7f 92       	push	r7
    2798:	af 92       	push	r10
    279a:	bf 92       	push	r11
    279c:	cf 92       	push	r12
    279e:	df 92       	push	r13
    27a0:	ef 92       	push	r14
    27a2:	ff 92       	push	r15
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	28 01       	movw	r4, r16
    27ae:	39 01       	movw	r6, r18
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	0f 92       	push	r0
    27b6:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    27ba:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    27be:	c8 2f       	mov	r28, r24
    27c0:	d0 e0       	ldi	r29, 0x00	; 0
    27c2:	ec 0f       	add	r30, r28
    27c4:	fd 1f       	adc	r31, r29
    27c6:	83 a9       	ldd	r24, Z+51	; 0x33
    27c8:	82 30       	cpi	r24, 0x02	; 2
    27ca:	71 f1       	breq	.+92     	; 0x2828 <xTaskGenericNotifyWait+0x98>
    27cc:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    27d0:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    27d4:	ce 01       	movw	r24, r28
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	e8 0f       	add	r30, r24
    27e0:	f9 1f       	adc	r31, r25
    27e2:	87 a5       	ldd	r24, Z+47	; 0x2f
    27e4:	90 a9       	ldd	r25, Z+48	; 0x30
    27e6:	a1 a9       	ldd	r26, Z+49	; 0x31
    27e8:	b2 a9       	ldd	r27, Z+50	; 0x32
    27ea:	40 95       	com	r20
    27ec:	50 95       	com	r21
    27ee:	60 95       	com	r22
    27f0:	70 95       	com	r23
    27f2:	48 23       	and	r20, r24
    27f4:	59 23       	and	r21, r25
    27f6:	6a 23       	and	r22, r26
    27f8:	7b 23       	and	r23, r27
    27fa:	47 a7       	std	Z+47, r20	; 0x2f
    27fc:	50 ab       	std	Z+48, r21	; 0x30
    27fe:	61 ab       	std	Z+49, r22	; 0x31
    2800:	72 ab       	std	Z+50, r23	; 0x32
    2802:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    2806:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    280a:	ec 0f       	add	r30, r28
    280c:	fd 1f       	adc	r31, r29
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	83 ab       	std	Z+51, r24	; 0x33
    2812:	a1 14       	cp	r10, r1
    2814:	b1 04       	cpc	r11, r1
    2816:	c1 04       	cpc	r12, r1
    2818:	d1 04       	cpc	r13, r1
    281a:	31 f0       	breq	.+12     	; 0x2828 <xTaskGenericNotifyWait+0x98>
    281c:	41 e0       	ldi	r20, 0x01	; 1
    281e:	c6 01       	movw	r24, r12
    2820:	b5 01       	movw	r22, r10
    2822:	88 d8       	rcall	.-3824   	; 0x1934 <prvAddCurrentTaskToDelayedList>
    2824:	0e 94 b5 03 	call	0x76a	; 0x76a <vPortYield>
    2828:	0f 90       	pop	r0
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	0f 92       	push	r0
    2832:	e1 14       	cp	r14, r1
    2834:	f1 04       	cpc	r15, r1
    2836:	a1 f0       	breq	.+40     	; 0x2860 <xTaskGenericNotifyWait+0xd0>
    2838:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    283c:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    2840:	ce 01       	movw	r24, r28
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	e8 0f       	add	r30, r24
    284c:	f9 1f       	adc	r31, r25
    284e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2850:	90 a9       	ldd	r25, Z+48	; 0x30
    2852:	a1 a9       	ldd	r26, Z+49	; 0x31
    2854:	b2 a9       	ldd	r27, Z+50	; 0x32
    2856:	f7 01       	movw	r30, r14
    2858:	80 83       	st	Z, r24
    285a:	91 83       	std	Z+1, r25	; 0x01
    285c:	a2 83       	std	Z+2, r26	; 0x02
    285e:	b3 83       	std	Z+3, r27	; 0x03
    2860:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    2864:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    2868:	ec 0f       	add	r30, r28
    286a:	fd 1f       	adc	r31, r29
    286c:	83 a9       	ldd	r24, Z+51	; 0x33
    286e:	82 30       	cpi	r24, 0x02	; 2
    2870:	e9 f4       	brne	.+58     	; 0x28ac <xTaskGenericNotifyWait+0x11c>
    2872:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    2876:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    287a:	ce 01       	movw	r24, r28
    287c:	88 0f       	add	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	e8 0f       	add	r30, r24
    2886:	f9 1f       	adc	r31, r25
    2888:	87 a5       	ldd	r24, Z+47	; 0x2f
    288a:	90 a9       	ldd	r25, Z+48	; 0x30
    288c:	a1 a9       	ldd	r26, Z+49	; 0x31
    288e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2890:	40 94       	com	r4
    2892:	50 94       	com	r5
    2894:	60 94       	com	r6
    2896:	70 94       	com	r7
    2898:	48 22       	and	r4, r24
    289a:	59 22       	and	r5, r25
    289c:	6a 22       	and	r6, r26
    289e:	7b 22       	and	r7, r27
    28a0:	47 a6       	std	Z+47, r4	; 0x2f
    28a2:	50 aa       	std	Z+48, r5	; 0x30
    28a4:	61 aa       	std	Z+49, r6	; 0x31
    28a6:	72 aa       	std	Z+50, r7	; 0x32
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <xTaskGenericNotifyWait+0x11e>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	20 91 4d 17 	lds	r18, 0x174D	; 0x80174d <pxCurrentTCB>
    28b2:	30 91 4e 17 	lds	r19, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    28b6:	c2 0f       	add	r28, r18
    28b8:	d3 1f       	adc	r29, r19
    28ba:	1b aa       	std	Y+51, r1	; 0x33
    28bc:	0f 90       	pop	r0
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	ff 90       	pop	r15
    28ca:	ef 90       	pop	r14
    28cc:	df 90       	pop	r13
    28ce:	cf 90       	pop	r12
    28d0:	bf 90       	pop	r11
    28d2:	af 90       	pop	r10
    28d4:	7f 90       	pop	r7
    28d6:	6f 90       	pop	r6
    28d8:	5f 90       	pop	r5
    28da:	4f 90       	pop	r4
    28dc:	08 95       	ret

000028de <xTaskGenericNotify>:
    28de:	8f 92       	push	r8
    28e0:	9f 92       	push	r9
    28e2:	af 92       	push	r10
    28e4:	bf 92       	push	r11
    28e6:	ef 92       	push	r14
    28e8:	ff 92       	push	r15
    28ea:	0f 93       	push	r16
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	dc 01       	movw	r26, r24
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	0f 92       	push	r0
    28f8:	e1 14       	cp	r14, r1
    28fa:	f1 04       	cpc	r15, r1
    28fc:	89 f0       	breq	.+34     	; 0x2920 <xTaskGenericNotify+0x42>
    28fe:	e6 2f       	mov	r30, r22
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	ee 0f       	add	r30, r30
    2904:	ff 1f       	adc	r31, r31
    2906:	ee 0f       	add	r30, r30
    2908:	ff 1f       	adc	r31, r31
    290a:	e8 0f       	add	r30, r24
    290c:	f9 1f       	adc	r31, r25
    290e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2910:	90 a8       	ldd	r9, Z+48	; 0x30
    2912:	a1 a8       	ldd	r10, Z+49	; 0x31
    2914:	b2 a8       	ldd	r11, Z+50	; 0x32
    2916:	f7 01       	movw	r30, r14
    2918:	80 82       	st	Z, r8
    291a:	91 82       	std	Z+1, r9	; 0x01
    291c:	a2 82       	std	Z+2, r10	; 0x02
    291e:	b3 82       	std	Z+3, r11	; 0x03
    2920:	70 e0       	ldi	r23, 0x00	; 0
    2922:	fd 01       	movw	r30, r26
    2924:	e6 0f       	add	r30, r22
    2926:	f7 1f       	adc	r31, r23
    2928:	83 a9       	ldd	r24, Z+51	; 0x33
    292a:	92 e0       	ldi	r25, 0x02	; 2
    292c:	93 ab       	std	Z+51, r25	; 0x33
    292e:	02 30       	cpi	r16, 0x02	; 2
    2930:	01 f1       	breq	.+64     	; 0x2972 <xTaskGenericNotify+0x94>
    2932:	18 f4       	brcc	.+6      	; 0x293a <xTaskGenericNotify+0x5c>
    2934:	01 30       	cpi	r16, 0x01	; 1
    2936:	31 f0       	breq	.+12     	; 0x2944 <xTaskGenericNotify+0x66>
    2938:	4d c0       	rjmp	.+154    	; 0x29d4 <xTaskGenericNotify+0xf6>
    293a:	03 30       	cpi	r16, 0x03	; 3
    293c:	79 f1       	breq	.+94     	; 0x299c <xTaskGenericNotify+0xbe>
    293e:	04 30       	cpi	r16, 0x04	; 4
    2940:	d1 f1       	breq	.+116    	; 0x29b6 <xTaskGenericNotify+0xd8>
    2942:	48 c0       	rjmp	.+144    	; 0x29d4 <xTaskGenericNotify+0xf6>
    2944:	66 0f       	add	r22, r22
    2946:	77 1f       	adc	r23, r23
    2948:	66 0f       	add	r22, r22
    294a:	77 1f       	adc	r23, r23
    294c:	fd 01       	movw	r30, r26
    294e:	e6 0f       	add	r30, r22
    2950:	f7 1f       	adc	r31, r23
    2952:	87 a4       	ldd	r8, Z+47	; 0x2f
    2954:	90 a8       	ldd	r9, Z+48	; 0x30
    2956:	a1 a8       	ldd	r10, Z+49	; 0x31
    2958:	b2 a8       	ldd	r11, Z+50	; 0x32
    295a:	ba 01       	movw	r22, r20
    295c:	a9 01       	movw	r20, r18
    295e:	48 29       	or	r20, r8
    2960:	59 29       	or	r21, r9
    2962:	6a 29       	or	r22, r10
    2964:	7b 29       	or	r23, r11
    2966:	47 a7       	std	Z+47, r20	; 0x2f
    2968:	50 ab       	std	Z+48, r21	; 0x30
    296a:	61 ab       	std	Z+49, r22	; 0x31
    296c:	72 ab       	std	Z+50, r23	; 0x32
    296e:	01 e0       	ldi	r16, 0x01	; 1
    2970:	34 c0       	rjmp	.+104    	; 0x29da <xTaskGenericNotify+0xfc>
    2972:	66 0f       	add	r22, r22
    2974:	77 1f       	adc	r23, r23
    2976:	66 0f       	add	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	fd 01       	movw	r30, r26
    297c:	e6 0f       	add	r30, r22
    297e:	f7 1f       	adc	r31, r23
    2980:	47 a5       	ldd	r20, Z+47	; 0x2f
    2982:	50 a9       	ldd	r21, Z+48	; 0x30
    2984:	61 a9       	ldd	r22, Z+49	; 0x31
    2986:	72 a9       	ldd	r23, Z+50	; 0x32
    2988:	4f 5f       	subi	r20, 0xFF	; 255
    298a:	5f 4f       	sbci	r21, 0xFF	; 255
    298c:	6f 4f       	sbci	r22, 0xFF	; 255
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	47 a7       	std	Z+47, r20	; 0x2f
    2992:	50 ab       	std	Z+48, r21	; 0x30
    2994:	61 ab       	std	Z+49, r22	; 0x31
    2996:	72 ab       	std	Z+50, r23	; 0x32
    2998:	01 e0       	ldi	r16, 0x01	; 1
    299a:	1f c0       	rjmp	.+62     	; 0x29da <xTaskGenericNotify+0xfc>
    299c:	66 0f       	add	r22, r22
    299e:	77 1f       	adc	r23, r23
    29a0:	66 0f       	add	r22, r22
    29a2:	77 1f       	adc	r23, r23
    29a4:	fd 01       	movw	r30, r26
    29a6:	e6 0f       	add	r30, r22
    29a8:	f7 1f       	adc	r31, r23
    29aa:	27 a7       	std	Z+47, r18	; 0x2f
    29ac:	30 ab       	std	Z+48, r19	; 0x30
    29ae:	41 ab       	std	Z+49, r20	; 0x31
    29b0:	52 ab       	std	Z+50, r21	; 0x32
    29b2:	01 e0       	ldi	r16, 0x01	; 1
    29b4:	12 c0       	rjmp	.+36     	; 0x29da <xTaskGenericNotify+0xfc>
    29b6:	82 30       	cpi	r24, 0x02	; 2
    29b8:	79 f0       	breq	.+30     	; 0x29d8 <xTaskGenericNotify+0xfa>
    29ba:	66 0f       	add	r22, r22
    29bc:	77 1f       	adc	r23, r23
    29be:	66 0f       	add	r22, r22
    29c0:	77 1f       	adc	r23, r23
    29c2:	fd 01       	movw	r30, r26
    29c4:	e6 0f       	add	r30, r22
    29c6:	f7 1f       	adc	r31, r23
    29c8:	27 a7       	std	Z+47, r18	; 0x2f
    29ca:	30 ab       	std	Z+48, r19	; 0x30
    29cc:	41 ab       	std	Z+49, r20	; 0x31
    29ce:	52 ab       	std	Z+50, r21	; 0x32
    29d0:	01 e0       	ldi	r16, 0x01	; 1
    29d2:	03 c0       	rjmp	.+6      	; 0x29da <xTaskGenericNotify+0xfc>
    29d4:	01 e0       	ldi	r16, 0x01	; 1
    29d6:	01 c0       	rjmp	.+2      	; 0x29da <xTaskGenericNotify+0xfc>
    29d8:	00 e0       	ldi	r16, 0x00	; 0
    29da:	81 30       	cpi	r24, 0x01	; 1
    29dc:	09 f0       	breq	.+2      	; 0x29e0 <xTaskGenericNotify+0x102>
    29de:	69 c0       	rjmp	.+210    	; 0x2ab2 <xTaskGenericNotify+0x1d4>
    29e0:	1c 96       	adiw	r26, 0x0c	; 12
    29e2:	ed 91       	ld	r30, X+
    29e4:	fc 91       	ld	r31, X
    29e6:	1d 97       	sbiw	r26, 0x0d	; 13
    29e8:	16 96       	adiw	r26, 0x06	; 6
    29ea:	cd 91       	ld	r28, X+
    29ec:	dc 91       	ld	r29, X
    29ee:	17 97       	sbiw	r26, 0x07	; 7
    29f0:	18 96       	adiw	r26, 0x08	; 8
    29f2:	8d 91       	ld	r24, X+
    29f4:	9c 91       	ld	r25, X
    29f6:	19 97       	sbiw	r26, 0x09	; 9
    29f8:	9f 83       	std	Y+7, r25	; 0x07
    29fa:	8e 83       	std	Y+6, r24	; 0x06
    29fc:	18 96       	adiw	r26, 0x08	; 8
    29fe:	cd 91       	ld	r28, X+
    2a00:	dc 91       	ld	r29, X
    2a02:	19 97       	sbiw	r26, 0x09	; 9
    2a04:	16 96       	adiw	r26, 0x06	; 6
    2a06:	8d 91       	ld	r24, X+
    2a08:	9c 91       	ld	r25, X
    2a0a:	17 97       	sbiw	r26, 0x07	; 7
    2a0c:	9d 83       	std	Y+5, r25	; 0x05
    2a0e:	8c 83       	std	Y+4, r24	; 0x04
    2a10:	81 81       	ldd	r24, Z+1	; 0x01
    2a12:	92 81       	ldd	r25, Z+2	; 0x02
    2a14:	9d 01       	movw	r18, r26
    2a16:	2e 5f       	subi	r18, 0xFE	; 254
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	82 17       	cp	r24, r18
    2a1c:	93 07       	cpc	r25, r19
    2a1e:	31 f4       	brne	.+12     	; 0x2a2c <xTaskGenericNotify+0x14e>
    2a20:	18 96       	adiw	r26, 0x08	; 8
    2a22:	8d 91       	ld	r24, X+
    2a24:	9c 91       	ld	r25, X
    2a26:	19 97       	sbiw	r26, 0x09	; 9
    2a28:	92 83       	std	Z+2, r25	; 0x02
    2a2a:	81 83       	std	Z+1, r24	; 0x01
    2a2c:	1d 96       	adiw	r26, 0x0d	; 13
    2a2e:	1c 92       	st	X, r1
    2a30:	1e 92       	st	-X, r1
    2a32:	1c 97       	sbiw	r26, 0x0c	; 12
    2a34:	80 81       	ld	r24, Z
    2a36:	81 50       	subi	r24, 0x01	; 1
    2a38:	80 83       	st	Z, r24
    2a3a:	5a 96       	adiw	r26, 0x1a	; 26
    2a3c:	ec 91       	ld	r30, X
    2a3e:	5a 97       	sbiw	r26, 0x1a	; 26
    2a40:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <uxTopReadyPriority>
    2a44:	8e 17       	cp	r24, r30
    2a46:	10 f4       	brcc	.+4      	; 0x2a4c <xTaskGenericNotify+0x16e>
    2a48:	e0 93 9d 16 	sts	0x169D, r30	; 0x80169d <uxTopReadyPriority>
    2a4c:	8b e0       	ldi	r24, 0x0B	; 11
    2a4e:	8e 9f       	mul	r24, r30
    2a50:	f0 01       	movw	r30, r0
    2a52:	11 24       	eor	r1, r1
    2a54:	e1 52       	subi	r30, 0x21	; 33
    2a56:	f9 4e       	sbci	r31, 0xE9	; 233
    2a58:	01 80       	ldd	r0, Z+1	; 0x01
    2a5a:	f2 81       	ldd	r31, Z+2	; 0x02
    2a5c:	e0 2d       	mov	r30, r0
    2a5e:	17 96       	adiw	r26, 0x07	; 7
    2a60:	fc 93       	st	X, r31
    2a62:	ee 93       	st	-X, r30
    2a64:	16 97       	sbiw	r26, 0x06	; 6
    2a66:	46 81       	ldd	r20, Z+6	; 0x06
    2a68:	57 81       	ldd	r21, Z+7	; 0x07
    2a6a:	19 96       	adiw	r26, 0x09	; 9
    2a6c:	5c 93       	st	X, r21
    2a6e:	4e 93       	st	-X, r20
    2a70:	18 97       	sbiw	r26, 0x08	; 8
    2a72:	c6 81       	ldd	r28, Z+6	; 0x06
    2a74:	d7 81       	ldd	r29, Z+7	; 0x07
    2a76:	3d 83       	std	Y+5, r19	; 0x05
    2a78:	2c 83       	std	Y+4, r18	; 0x04
    2a7a:	37 83       	std	Z+7, r19	; 0x07
    2a7c:	26 83       	std	Z+6, r18	; 0x06
    2a7e:	5a 96       	adiw	r26, 0x1a	; 26
    2a80:	ec 91       	ld	r30, X
    2a82:	5a 97       	sbiw	r26, 0x1a	; 26
    2a84:	8e 9f       	mul	r24, r30
    2a86:	f0 01       	movw	r30, r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	e1 52       	subi	r30, 0x21	; 33
    2a8c:	f9 4e       	sbci	r31, 0xE9	; 233
    2a8e:	1d 96       	adiw	r26, 0x0d	; 13
    2a90:	fc 93       	st	X, r31
    2a92:	ee 93       	st	-X, r30
    2a94:	1c 97       	sbiw	r26, 0x0c	; 12
    2a96:	80 81       	ld	r24, Z
    2a98:	8f 5f       	subi	r24, 0xFF	; 255
    2a9a:	80 83       	st	Z, r24
    2a9c:	5a 96       	adiw	r26, 0x1a	; 26
    2a9e:	9c 91       	ld	r25, X
    2aa0:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    2aa4:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    2aa8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2aaa:	89 17       	cp	r24, r25
    2aac:	10 f4       	brcc	.+4      	; 0x2ab2 <xTaskGenericNotify+0x1d4>
    2aae:	0e 94 b5 03 	call	0x76a	; 0x76a <vPortYield>
    2ab2:	0f 90       	pop	r0
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	80 2f       	mov	r24, r16
    2ab8:	df 91       	pop	r29
    2aba:	cf 91       	pop	r28
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	ef 90       	pop	r14
    2ac2:	bf 90       	pop	r11
    2ac4:	af 90       	pop	r10
    2ac6:	9f 90       	pop	r9
    2ac8:	8f 90       	pop	r8
    2aca:	08 95       	ret

00002acc <xTaskGenericNotifyFromISR>:
    2acc:	8f 92       	push	r8
    2ace:	9f 92       	push	r9
    2ad0:	af 92       	push	r10
    2ad2:	bf 92       	push	r11
    2ad4:	cf 92       	push	r12
    2ad6:	df 92       	push	r13
    2ad8:	ef 92       	push	r14
    2ada:	ff 92       	push	r15
    2adc:	0f 93       	push	r16
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	e1 14       	cp	r14, r1
    2ae6:	f1 04       	cpc	r15, r1
    2ae8:	89 f0       	breq	.+34     	; 0x2b0c <xTaskGenericNotifyFromISR+0x40>
    2aea:	e6 2f       	mov	r30, r22
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	ee 0f       	add	r30, r30
    2af0:	ff 1f       	adc	r31, r31
    2af2:	ee 0f       	add	r30, r30
    2af4:	ff 1f       	adc	r31, r31
    2af6:	e8 0f       	add	r30, r24
    2af8:	f9 1f       	adc	r31, r25
    2afa:	87 a4       	ldd	r8, Z+47	; 0x2f
    2afc:	90 a8       	ldd	r9, Z+48	; 0x30
    2afe:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b00:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b02:	f7 01       	movw	r30, r14
    2b04:	80 82       	st	Z, r8
    2b06:	91 82       	std	Z+1, r9	; 0x01
    2b08:	a2 82       	std	Z+2, r10	; 0x02
    2b0a:	b3 82       	std	Z+3, r11	; 0x03
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	fd 01       	movw	r30, r26
    2b10:	e6 0f       	add	r30, r22
    2b12:	f7 1f       	adc	r31, r23
    2b14:	93 a9       	ldd	r25, Z+51	; 0x33
    2b16:	82 e0       	ldi	r24, 0x02	; 2
    2b18:	83 ab       	std	Z+51, r24	; 0x33
    2b1a:	02 30       	cpi	r16, 0x02	; 2
    2b1c:	01 f1       	breq	.+64     	; 0x2b5e <xTaskGenericNotifyFromISR+0x92>
    2b1e:	18 f4       	brcc	.+6      	; 0x2b26 <xTaskGenericNotifyFromISR+0x5a>
    2b20:	01 30       	cpi	r16, 0x01	; 1
    2b22:	31 f0       	breq	.+12     	; 0x2b30 <xTaskGenericNotifyFromISR+0x64>
    2b24:	4d c0       	rjmp	.+154    	; 0x2bc0 <xTaskGenericNotifyFromISR+0xf4>
    2b26:	03 30       	cpi	r16, 0x03	; 3
    2b28:	79 f1       	breq	.+94     	; 0x2b88 <xTaskGenericNotifyFromISR+0xbc>
    2b2a:	04 30       	cpi	r16, 0x04	; 4
    2b2c:	d1 f1       	breq	.+116    	; 0x2ba2 <xTaskGenericNotifyFromISR+0xd6>
    2b2e:	48 c0       	rjmp	.+144    	; 0x2bc0 <xTaskGenericNotifyFromISR+0xf4>
    2b30:	66 0f       	add	r22, r22
    2b32:	77 1f       	adc	r23, r23
    2b34:	66 0f       	add	r22, r22
    2b36:	77 1f       	adc	r23, r23
    2b38:	fd 01       	movw	r30, r26
    2b3a:	e6 0f       	add	r30, r22
    2b3c:	f7 1f       	adc	r31, r23
    2b3e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2b40:	90 a8       	ldd	r9, Z+48	; 0x30
    2b42:	a1 a8       	ldd	r10, Z+49	; 0x31
    2b44:	b2 a8       	ldd	r11, Z+50	; 0x32
    2b46:	ba 01       	movw	r22, r20
    2b48:	a9 01       	movw	r20, r18
    2b4a:	48 29       	or	r20, r8
    2b4c:	59 29       	or	r21, r9
    2b4e:	6a 29       	or	r22, r10
    2b50:	7b 29       	or	r23, r11
    2b52:	47 a7       	std	Z+47, r20	; 0x2f
    2b54:	50 ab       	std	Z+48, r21	; 0x30
    2b56:	61 ab       	std	Z+49, r22	; 0x31
    2b58:	72 ab       	std	Z+50, r23	; 0x32
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	34 c0       	rjmp	.+104    	; 0x2bc6 <xTaskGenericNotifyFromISR+0xfa>
    2b5e:	66 0f       	add	r22, r22
    2b60:	77 1f       	adc	r23, r23
    2b62:	66 0f       	add	r22, r22
    2b64:	77 1f       	adc	r23, r23
    2b66:	fd 01       	movw	r30, r26
    2b68:	e6 0f       	add	r30, r22
    2b6a:	f7 1f       	adc	r31, r23
    2b6c:	47 a5       	ldd	r20, Z+47	; 0x2f
    2b6e:	50 a9       	ldd	r21, Z+48	; 0x30
    2b70:	61 a9       	ldd	r22, Z+49	; 0x31
    2b72:	72 a9       	ldd	r23, Z+50	; 0x32
    2b74:	4f 5f       	subi	r20, 0xFF	; 255
    2b76:	5f 4f       	sbci	r21, 0xFF	; 255
    2b78:	6f 4f       	sbci	r22, 0xFF	; 255
    2b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7c:	47 a7       	std	Z+47, r20	; 0x2f
    2b7e:	50 ab       	std	Z+48, r21	; 0x30
    2b80:	61 ab       	std	Z+49, r22	; 0x31
    2b82:	72 ab       	std	Z+50, r23	; 0x32
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	1f c0       	rjmp	.+62     	; 0x2bc6 <xTaskGenericNotifyFromISR+0xfa>
    2b88:	66 0f       	add	r22, r22
    2b8a:	77 1f       	adc	r23, r23
    2b8c:	66 0f       	add	r22, r22
    2b8e:	77 1f       	adc	r23, r23
    2b90:	fd 01       	movw	r30, r26
    2b92:	e6 0f       	add	r30, r22
    2b94:	f7 1f       	adc	r31, r23
    2b96:	27 a7       	std	Z+47, r18	; 0x2f
    2b98:	30 ab       	std	Z+48, r19	; 0x30
    2b9a:	41 ab       	std	Z+49, r20	; 0x31
    2b9c:	52 ab       	std	Z+50, r21	; 0x32
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	12 c0       	rjmp	.+36     	; 0x2bc6 <xTaskGenericNotifyFromISR+0xfa>
    2ba2:	92 30       	cpi	r25, 0x02	; 2
    2ba4:	79 f0       	breq	.+30     	; 0x2bc4 <xTaskGenericNotifyFromISR+0xf8>
    2ba6:	66 0f       	add	r22, r22
    2ba8:	77 1f       	adc	r23, r23
    2baa:	66 0f       	add	r22, r22
    2bac:	77 1f       	adc	r23, r23
    2bae:	fd 01       	movw	r30, r26
    2bb0:	e6 0f       	add	r30, r22
    2bb2:	f7 1f       	adc	r31, r23
    2bb4:	27 a7       	std	Z+47, r18	; 0x2f
    2bb6:	30 ab       	std	Z+48, r19	; 0x30
    2bb8:	41 ab       	std	Z+49, r20	; 0x31
    2bba:	52 ab       	std	Z+50, r21	; 0x32
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	03 c0       	rjmp	.+6      	; 0x2bc6 <xTaskGenericNotifyFromISR+0xfa>
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	01 c0       	rjmp	.+2      	; 0x2bc6 <xTaskGenericNotifyFromISR+0xfa>
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	91 30       	cpi	r25, 0x01	; 1
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <xTaskGenericNotifyFromISR+0x100>
    2bca:	96 c0       	rjmp	.+300    	; 0x2cf8 <xTaskGenericNotifyFromISR+0x22c>
    2bcc:	90 91 8e 16 	lds	r25, 0x168E	; 0x80168e <uxSchedulerSuspended>
    2bd0:	91 11       	cpse	r25, r1
    2bd2:	5f c0       	rjmp	.+190    	; 0x2c92 <xTaskGenericNotifyFromISR+0x1c6>
    2bd4:	1c 96       	adiw	r26, 0x0c	; 12
    2bd6:	ed 91       	ld	r30, X+
    2bd8:	fc 91       	ld	r31, X
    2bda:	1d 97       	sbiw	r26, 0x0d	; 13
    2bdc:	16 96       	adiw	r26, 0x06	; 6
    2bde:	cd 91       	ld	r28, X+
    2be0:	dc 91       	ld	r29, X
    2be2:	17 97       	sbiw	r26, 0x07	; 7
    2be4:	18 96       	adiw	r26, 0x08	; 8
    2be6:	2d 91       	ld	r18, X+
    2be8:	3c 91       	ld	r19, X
    2bea:	19 97       	sbiw	r26, 0x09	; 9
    2bec:	3f 83       	std	Y+7, r19	; 0x07
    2bee:	2e 83       	std	Y+6, r18	; 0x06
    2bf0:	18 96       	adiw	r26, 0x08	; 8
    2bf2:	cd 91       	ld	r28, X+
    2bf4:	dc 91       	ld	r29, X
    2bf6:	19 97       	sbiw	r26, 0x09	; 9
    2bf8:	16 96       	adiw	r26, 0x06	; 6
    2bfa:	2d 91       	ld	r18, X+
    2bfc:	3c 91       	ld	r19, X
    2bfe:	17 97       	sbiw	r26, 0x07	; 7
    2c00:	3d 83       	std	Y+5, r19	; 0x05
    2c02:	2c 83       	std	Y+4, r18	; 0x04
    2c04:	41 81       	ldd	r20, Z+1	; 0x01
    2c06:	52 81       	ldd	r21, Z+2	; 0x02
    2c08:	9d 01       	movw	r18, r26
    2c0a:	2e 5f       	subi	r18, 0xFE	; 254
    2c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0e:	42 17       	cp	r20, r18
    2c10:	53 07       	cpc	r21, r19
    2c12:	31 f4       	brne	.+12     	; 0x2c20 <xTaskGenericNotifyFromISR+0x154>
    2c14:	18 96       	adiw	r26, 0x08	; 8
    2c16:	4d 91       	ld	r20, X+
    2c18:	5c 91       	ld	r21, X
    2c1a:	19 97       	sbiw	r26, 0x09	; 9
    2c1c:	52 83       	std	Z+2, r21	; 0x02
    2c1e:	41 83       	std	Z+1, r20	; 0x01
    2c20:	1d 96       	adiw	r26, 0x0d	; 13
    2c22:	1c 92       	st	X, r1
    2c24:	1e 92       	st	-X, r1
    2c26:	1c 97       	sbiw	r26, 0x0c	; 12
    2c28:	90 81       	ld	r25, Z
    2c2a:	91 50       	subi	r25, 0x01	; 1
    2c2c:	90 83       	st	Z, r25
    2c2e:	5a 96       	adiw	r26, 0x1a	; 26
    2c30:	ec 91       	ld	r30, X
    2c32:	5a 97       	sbiw	r26, 0x1a	; 26
    2c34:	90 91 9d 16 	lds	r25, 0x169D	; 0x80169d <uxTopReadyPriority>
    2c38:	9e 17       	cp	r25, r30
    2c3a:	10 f4       	brcc	.+4      	; 0x2c40 <xTaskGenericNotifyFromISR+0x174>
    2c3c:	e0 93 9d 16 	sts	0x169D, r30	; 0x80169d <uxTopReadyPriority>
    2c40:	9b e0       	ldi	r25, 0x0B	; 11
    2c42:	9e 9f       	mul	r25, r30
    2c44:	f0 01       	movw	r30, r0
    2c46:	11 24       	eor	r1, r1
    2c48:	e1 52       	subi	r30, 0x21	; 33
    2c4a:	f9 4e       	sbci	r31, 0xE9	; 233
    2c4c:	01 80       	ldd	r0, Z+1	; 0x01
    2c4e:	f2 81       	ldd	r31, Z+2	; 0x02
    2c50:	e0 2d       	mov	r30, r0
    2c52:	17 96       	adiw	r26, 0x07	; 7
    2c54:	fc 93       	st	X, r31
    2c56:	ee 93       	st	-X, r30
    2c58:	16 97       	sbiw	r26, 0x06	; 6
    2c5a:	46 81       	ldd	r20, Z+6	; 0x06
    2c5c:	57 81       	ldd	r21, Z+7	; 0x07
    2c5e:	19 96       	adiw	r26, 0x09	; 9
    2c60:	5c 93       	st	X, r21
    2c62:	4e 93       	st	-X, r20
    2c64:	18 97       	sbiw	r26, 0x08	; 8
    2c66:	c6 81       	ldd	r28, Z+6	; 0x06
    2c68:	d7 81       	ldd	r29, Z+7	; 0x07
    2c6a:	3d 83       	std	Y+5, r19	; 0x05
    2c6c:	2c 83       	std	Y+4, r18	; 0x04
    2c6e:	37 83       	std	Z+7, r19	; 0x07
    2c70:	26 83       	std	Z+6, r18	; 0x06
    2c72:	5a 96       	adiw	r26, 0x1a	; 26
    2c74:	ec 91       	ld	r30, X
    2c76:	5a 97       	sbiw	r26, 0x1a	; 26
    2c78:	9e 9f       	mul	r25, r30
    2c7a:	f0 01       	movw	r30, r0
    2c7c:	11 24       	eor	r1, r1
    2c7e:	e1 52       	subi	r30, 0x21	; 33
    2c80:	f9 4e       	sbci	r31, 0xE9	; 233
    2c82:	1d 96       	adiw	r26, 0x0d	; 13
    2c84:	fc 93       	st	X, r31
    2c86:	ee 93       	st	-X, r30
    2c88:	1c 97       	sbiw	r26, 0x0c	; 12
    2c8a:	90 81       	ld	r25, Z
    2c8c:	9f 5f       	subi	r25, 0xFF	; 255
    2c8e:	90 83       	st	Z, r25
    2c90:	21 c0       	rjmp	.+66     	; 0x2cd4 <xTaskGenericNotifyFromISR+0x208>
    2c92:	6a eb       	ldi	r22, 0xBA	; 186
    2c94:	76 e1       	ldi	r23, 0x16	; 22
    2c96:	fb 01       	movw	r30, r22
    2c98:	c1 81       	ldd	r28, Z+1	; 0x01
    2c9a:	d2 81       	ldd	r29, Z+2	; 0x02
    2c9c:	53 96       	adiw	r26, 0x13	; 19
    2c9e:	dc 93       	st	X, r29
    2ca0:	ce 93       	st	-X, r28
    2ca2:	52 97       	sbiw	r26, 0x12	; 18
    2ca4:	2e 81       	ldd	r18, Y+6	; 0x06
    2ca6:	3f 81       	ldd	r19, Y+7	; 0x07
    2ca8:	55 96       	adiw	r26, 0x15	; 21
    2caa:	3c 93       	st	X, r19
    2cac:	2e 93       	st	-X, r18
    2cae:	54 97       	sbiw	r26, 0x14	; 20
    2cb0:	4e 81       	ldd	r20, Y+6	; 0x06
    2cb2:	5f 81       	ldd	r21, Y+7	; 0x07
    2cb4:	9d 01       	movw	r18, r26
    2cb6:	22 5f       	subi	r18, 0xF2	; 242
    2cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cba:	fa 01       	movw	r30, r20
    2cbc:	35 83       	std	Z+5, r19	; 0x05
    2cbe:	24 83       	std	Z+4, r18	; 0x04
    2cc0:	3f 83       	std	Y+7, r19	; 0x07
    2cc2:	2e 83       	std	Y+6, r18	; 0x06
    2cc4:	59 96       	adiw	r26, 0x19	; 25
    2cc6:	7c 93       	st	X, r23
    2cc8:	6e 93       	st	-X, r22
    2cca:	58 97       	sbiw	r26, 0x18	; 24
    2ccc:	fb 01       	movw	r30, r22
    2cce:	90 81       	ld	r25, Z
    2cd0:	9f 5f       	subi	r25, 0xFF	; 255
    2cd2:	90 83       	st	Z, r25
    2cd4:	5a 96       	adiw	r26, 0x1a	; 26
    2cd6:	2c 91       	ld	r18, X
    2cd8:	e0 91 4d 17 	lds	r30, 0x174D	; 0x80174d <pxCurrentTCB>
    2cdc:	f0 91 4e 17 	lds	r31, 0x174E	; 0x80174e <pxCurrentTCB+0x1>
    2ce0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ce2:	92 17       	cp	r25, r18
    2ce4:	48 f4       	brcc	.+18     	; 0x2cf8 <xTaskGenericNotifyFromISR+0x22c>
    2ce6:	c1 14       	cp	r12, r1
    2ce8:	d1 04       	cpc	r13, r1
    2cea:	19 f0       	breq	.+6      	; 0x2cf2 <xTaskGenericNotifyFromISR+0x226>
    2cec:	91 e0       	ldi	r25, 0x01	; 1
    2cee:	f6 01       	movw	r30, r12
    2cf0:	90 83       	st	Z, r25
    2cf2:	91 e0       	ldi	r25, 0x01	; 1
    2cf4:	90 93 97 16 	sts	0x1697, r25	; 0x801697 <xYieldPending>
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	0f 91       	pop	r16
    2cfe:	ff 90       	pop	r15
    2d00:	ef 90       	pop	r14
    2d02:	df 90       	pop	r13
    2d04:	cf 90       	pop	r12
    2d06:	bf 90       	pop	r11
    2d08:	af 90       	pop	r10
    2d0a:	9f 90       	pop	r9
    2d0c:	8f 90       	pop	r8
    2d0e:	08 95       	ret

00002d10 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	21 f4       	brne	.+8      	; 0x2d1c <xTaskGenericNotifyStateClear+0xc>
    2d14:	80 91 4d 17 	lds	r24, 0x174D	; 0x80174d <pxCurrentTCB>
    2d18:	90 91 4e 17 	lds	r25, 0x174E	; 0x80174e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2d22:	70 e0       	ldi	r23, 0x00	; 0
    2d24:	fc 01       	movw	r30, r24
    2d26:	e6 0f       	add	r30, r22
    2d28:	f7 1f       	adc	r31, r23
    2d2a:	23 a9       	ldd	r18, Z+51	; 0x33
    2d2c:	22 30       	cpi	r18, 0x02	; 2
    2d2e:	31 f4       	brne	.+12     	; 0x2d3c <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2d30:	fc 01       	movw	r30, r24
    2d32:	e6 0f       	add	r30, r22
    2d34:	f7 1f       	adc	r31, r23
    2d36:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	01 c0       	rjmp	.+2      	; 0x2d3e <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2d3e:	0f 90       	pop	r0
    2d40:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2d42:	08 95       	ret

00002d44 <prvGetNextExpireTime>:
    2d44:	dc 01       	movw	r26, r24
    2d46:	e0 91 59 17 	lds	r30, 0x1759	; 0x801759 <pxCurrentTimerList>
    2d4a:	f0 91 5a 17 	lds	r31, 0x175A	; 0x80175a <pxCurrentTimerList+0x1>
    2d4e:	80 81       	ld	r24, Z
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	81 11       	cpse	r24, r1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9c 93       	st	X, r25
    2d58:	91 11       	cpse	r25, r1
    2d5a:	08 c0       	rjmp	.+16     	; 0x2d6c <prvGetNextExpireTime+0x28>
    2d5c:	07 80       	ldd	r0, Z+7	; 0x07
    2d5e:	f0 85       	ldd	r31, Z+8	; 0x08
    2d60:	e0 2d       	mov	r30, r0
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	08 95       	ret
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	70 e0       	ldi	r23, 0x00	; 0
    2d70:	cb 01       	movw	r24, r22
    2d72:	08 95       	ret

00002d74 <prvInsertTimerInActiveList>:
    2d74:	cf 92       	push	r12
    2d76:	df 92       	push	r13
    2d78:	ef 92       	push	r14
    2d7a:	ff 92       	push	r15
    2d7c:	0f 93       	push	r16
    2d7e:	1f 93       	push	r17
    2d80:	fc 01       	movw	r30, r24
    2d82:	42 83       	std	Z+2, r20	; 0x02
    2d84:	53 83       	std	Z+3, r21	; 0x03
    2d86:	64 83       	std	Z+4, r22	; 0x04
    2d88:	75 83       	std	Z+5, r23	; 0x05
    2d8a:	93 87       	std	Z+11, r25	; 0x0b
    2d8c:	82 87       	std	Z+10, r24	; 0x0a
    2d8e:	04 17       	cp	r16, r20
    2d90:	15 07       	cpc	r17, r21
    2d92:	26 07       	cpc	r18, r22
    2d94:	37 07       	cpc	r19, r23
    2d96:	c0 f0       	brcs	.+48     	; 0x2dc8 <prvInsertTimerInActiveList+0x54>
    2d98:	0c 19       	sub	r16, r12
    2d9a:	1d 09       	sbc	r17, r13
    2d9c:	2e 09       	sbc	r18, r14
    2d9e:	3f 09       	sbc	r19, r15
    2da0:	86 85       	ldd	r24, Z+14	; 0x0e
    2da2:	97 85       	ldd	r25, Z+15	; 0x0f
    2da4:	a0 89       	ldd	r26, Z+16	; 0x10
    2da6:	b1 89       	ldd	r27, Z+17	; 0x11
    2da8:	08 17       	cp	r16, r24
    2daa:	19 07       	cpc	r17, r25
    2dac:	2a 07       	cpc	r18, r26
    2dae:	3b 07       	cpc	r19, r27
    2db0:	00 f5       	brcc	.+64     	; 0x2df2 <prvInsertTimerInActiveList+0x7e>
    2db2:	bf 01       	movw	r22, r30
    2db4:	6e 5f       	subi	r22, 0xFE	; 254
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255
    2db8:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxOverflowTimerList>
    2dbc:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxOverflowTimerList+0x1>
    2dc0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <vListInsert>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	18 c0       	rjmp	.+48     	; 0x2df8 <prvInsertTimerInActiveList+0x84>
    2dc8:	0c 15       	cp	r16, r12
    2dca:	1d 05       	cpc	r17, r13
    2dcc:	2e 05       	cpc	r18, r14
    2dce:	3f 05       	cpc	r19, r15
    2dd0:	28 f4       	brcc	.+10     	; 0x2ddc <prvInsertTimerInActiveList+0x68>
    2dd2:	4c 15       	cp	r20, r12
    2dd4:	5d 05       	cpc	r21, r13
    2dd6:	6e 05       	cpc	r22, r14
    2dd8:	7f 05       	cpc	r23, r15
    2dda:	68 f4       	brcc	.+26     	; 0x2df6 <prvInsertTimerInActiveList+0x82>
    2ddc:	bf 01       	movw	r22, r30
    2dde:	6e 5f       	subi	r22, 0xFE	; 254
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255
    2de2:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <pxCurrentTimerList>
    2de6:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <pxCurrentTimerList+0x1>
    2dea:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <vListInsert>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	03 c0       	rjmp	.+6      	; 0x2df8 <prvInsertTimerInActiveList+0x84>
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	01 c0       	rjmp	.+2      	; 0x2df8 <prvInsertTimerInActiveList+0x84>
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	ff 90       	pop	r15
    2dfe:	ef 90       	pop	r14
    2e00:	df 90       	pop	r13
    2e02:	cf 90       	pop	r12
    2e04:	08 95       	ret

00002e06 <prvCheckForValidListAndQueue>:
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	0f 92       	push	r0
    2e0c:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <xTimerQueue>
    2e10:	90 91 56 17 	lds	r25, 0x1756	; 0x801756 <xTimerQueue+0x1>
    2e14:	89 2b       	or	r24, r25
    2e16:	e9 f4       	brne	.+58     	; 0x2e52 <prvCheckForValidListAndQueue+0x4c>
    2e18:	86 e6       	ldi	r24, 0x66	; 102
    2e1a:	97 e1       	ldi	r25, 0x17	; 23
    2e1c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInitialise>
    2e20:	8b e5       	ldi	r24, 0x5B	; 91
    2e22:	97 e1       	ldi	r25, 0x17	; 23
    2e24:	0e 94 e7 02 	call	0x5ce	; 0x5ce <vListInitialise>
    2e28:	86 e6       	ldi	r24, 0x66	; 102
    2e2a:	97 e1       	ldi	r25, 0x17	; 23
    2e2c:	90 93 5a 17 	sts	0x175A, r25	; 0x80175a <pxCurrentTimerList+0x1>
    2e30:	80 93 59 17 	sts	0x1759, r24	; 0x801759 <pxCurrentTimerList>
    2e34:	8b e5       	ldi	r24, 0x5B	; 91
    2e36:	97 e1       	ldi	r25, 0x17	; 23
    2e38:	90 93 58 17 	sts	0x1758, r25	; 0x801758 <pxOverflowTimerList+0x1>
    2e3c:	80 93 57 17 	sts	0x1757, r24	; 0x801757 <pxOverflowTimerList>
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	67 e0       	ldi	r22, 0x07	; 7
    2e44:	8a e0       	ldi	r24, 0x0A	; 10
    2e46:	0e 94 aa 05 	call	0xb54	; 0xb54 <xQueueGenericCreate>
    2e4a:	90 93 56 17 	sts	0x1756, r25	; 0x801756 <xTimerQueue+0x1>
    2e4e:	80 93 55 17 	sts	0x1755, r24	; 0x801755 <xTimerQueue>
    2e52:	0f 90       	pop	r0
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	08 95       	ret

00002e58 <xTimerCreateTimerTask>:
    2e58:	ef 92       	push	r14
    2e5a:	ff 92       	push	r15
    2e5c:	0f 93       	push	r16
    2e5e:	d3 df       	rcall	.-90     	; 0x2e06 <prvCheckForValidListAndQueue>
    2e60:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <xTimerQueue>
    2e64:	90 91 56 17 	lds	r25, 0x1756	; 0x801756 <xTimerQueue+0x1>
    2e68:	89 2b       	or	r24, r25
    2e6a:	91 f0       	breq	.+36     	; 0x2e90 <xTimerCreateTimerTask+0x38>
    2e6c:	0f 2e       	mov	r0, r31
    2e6e:	f3 e5       	ldi	r31, 0x53	; 83
    2e70:	ef 2e       	mov	r14, r31
    2e72:	f7 e1       	ldi	r31, 0x17	; 23
    2e74:	ff 2e       	mov	r15, r31
    2e76:	f0 2d       	mov	r31, r0
    2e78:	03 e0       	ldi	r16, 0x03	; 3
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 ec       	ldi	r20, 0xC0	; 192
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	6f e9       	ldi	r22, 0x9F	; 159
    2e84:	72 e0       	ldi	r23, 0x02	; 2
    2e86:	87 ed       	ldi	r24, 0xD7	; 215
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <xTaskCreate>
    2e8e:	01 c0       	rjmp	.+2      	; 0x2e92 <xTimerCreateTimerTask+0x3a>
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	0f 91       	pop	r16
    2e94:	ff 90       	pop	r15
    2e96:	ef 90       	pop	r14
    2e98:	08 95       	ret

00002e9a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2e9a:	8f 92       	push	r8
    2e9c:	9f 92       	push	r9
    2e9e:	af 92       	push	r10
    2ea0:	bf 92       	push	r11
    2ea2:	cf 92       	push	r12
    2ea4:	df 92       	push	r13
    2ea6:	ef 92       	push	r14
    2ea8:	ff 92       	push	r15
    2eaa:	0f 93       	push	r16
    2eac:	1f 93       	push	r17
    2eae:	cf 93       	push	r28
    2eb0:	df 93       	push	r29
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	27 97       	sbiw	r28, 0x07	; 7
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2ec2:	e0 91 55 17 	lds	r30, 0x1755	; 0x801755 <xTimerQueue>
    2ec6:	f0 91 56 17 	lds	r31, 0x1756	; 0x801756 <xTimerQueue+0x1>
    2eca:	30 97       	sbiw	r30, 0x00	; 0
    2ecc:	81 f1       	breq	.+96     	; 0x2f2e <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2ece:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2ed0:	2a 83       	std	Y+2, r18	; 0x02
    2ed2:	3b 83       	std	Y+3, r19	; 0x03
    2ed4:	4c 83       	std	Y+4, r20	; 0x04
    2ed6:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2ed8:	9f 83       	std	Y+7, r25	; 0x07
    2eda:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2edc:	66 30       	cpi	r22, 0x06	; 6
    2ede:	f4 f4       	brge	.+60     	; 0x2f1c <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2ee0:	ee da       	rcall	.-2596   	; 0x24be <xTaskGetSchedulerState>
    2ee2:	82 30       	cpi	r24, 0x02	; 2
    2ee4:	69 f4       	brne	.+26     	; 0x2f00 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2ee6:	00 e0       	ldi	r16, 0x00	; 0
    2ee8:	a7 01       	movw	r20, r14
    2eea:	96 01       	movw	r18, r12
    2eec:	be 01       	movw	r22, r28
    2eee:	6f 5f       	subi	r22, 0xFF	; 255
    2ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef2:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <xTimerQueue>
    2ef6:	90 91 56 17 	lds	r25, 0x1756	; 0x801756 <xTimerQueue+0x1>
    2efa:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
    2efe:	18 c0       	rjmp	.+48     	; 0x2f30 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2f00:	00 e0       	ldi	r16, 0x00	; 0
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	a9 01       	movw	r20, r18
    2f08:	be 01       	movw	r22, r28
    2f0a:	6f 5f       	subi	r22, 0xFF	; 255
    2f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0e:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <xTimerQueue>
    2f12:	90 91 56 17 	lds	r25, 0x1756	; 0x801756 <xTimerQueue+0x1>
    2f16:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
    2f1a:	0a c0       	rjmp	.+20     	; 0x2f30 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	a8 01       	movw	r20, r16
    2f20:	be 01       	movw	r22, r28
    2f22:	6f 5f       	subi	r22, 0xFF	; 255
    2f24:	7f 4f       	sbci	r23, 0xFF	; 255
    2f26:	cf 01       	movw	r24, r30
    2f28:	0e 94 5f 06 	call	0xcbe	; 0xcbe <xQueueGenericSendFromISR>
    2f2c:	01 c0       	rjmp	.+2      	; 0x2f30 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2f30:	27 96       	adiw	r28, 0x07	; 7
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	1f 91       	pop	r17
    2f42:	0f 91       	pop	r16
    2f44:	ff 90       	pop	r15
    2f46:	ef 90       	pop	r14
    2f48:	df 90       	pop	r13
    2f4a:	cf 90       	pop	r12
    2f4c:	bf 90       	pop	r11
    2f4e:	af 90       	pop	r10
    2f50:	9f 90       	pop	r9
    2f52:	8f 90       	pop	r8
    2f54:	08 95       	ret

00002f56 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2f56:	8f 92       	push	r8
    2f58:	9f 92       	push	r9
    2f5a:	af 92       	push	r10
    2f5c:	bf 92       	push	r11
    2f5e:	cf 92       	push	r12
    2f60:	df 92       	push	r13
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2f6e:	3b c0       	rjmp	.+118    	; 0x2fe6 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2f70:	07 80       	ldd	r0, Z+7	; 0x07
    2f72:	f0 85       	ldd	r31, Z+8	; 0x08
    2f74:	e0 2d       	mov	r30, r0
    2f76:	80 80       	ld	r8, Z
    2f78:	91 80       	ldd	r9, Z+1	; 0x01
    2f7a:	a2 80       	ldd	r10, Z+2	; 0x02
    2f7c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2f7e:	c0 85       	ldd	r28, Z+8	; 0x08
    2f80:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2f82:	8e 01       	movw	r16, r28
    2f84:	0e 5f       	subi	r16, 0xFE	; 254
    2f86:	1f 4f       	sbci	r17, 0xFF	; 255
    2f88:	c8 01       	movw	r24, r16
    2f8a:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2f8e:	ec 89       	ldd	r30, Y+20	; 0x14
    2f90:	fd 89       	ldd	r31, Y+21	; 0x15
    2f92:	ce 01       	movw	r24, r28
    2f94:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2f96:	8e 89       	ldd	r24, Y+22	; 0x16
    2f98:	82 ff       	sbrs	r24, 2
    2f9a:	25 c0       	rjmp	.+74     	; 0x2fe6 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2f9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fa0:	a8 89       	ldd	r26, Y+16	; 0x10
    2fa2:	b9 89       	ldd	r27, Y+17	; 0x11
    2fa4:	88 0d       	add	r24, r8
    2fa6:	99 1d       	adc	r25, r9
    2fa8:	aa 1d       	adc	r26, r10
    2faa:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2fac:	88 16       	cp	r8, r24
    2fae:	99 06       	cpc	r9, r25
    2fb0:	aa 06       	cpc	r10, r26
    2fb2:	bb 06       	cpc	r11, r27
    2fb4:	70 f4       	brcc	.+28     	; 0x2fd2 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2fb6:	8a 83       	std	Y+2, r24	; 0x02
    2fb8:	9b 83       	std	Y+3, r25	; 0x03
    2fba:	ac 83       	std	Y+4, r26	; 0x04
    2fbc:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2fbe:	db 87       	std	Y+11, r29	; 0x0b
    2fc0:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2fc2:	b8 01       	movw	r22, r16
    2fc4:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <pxCurrentTimerList>
    2fc8:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <pxCurrentTimerList+0x1>
    2fcc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <vListInsert>
    2fd0:	0a c0       	rjmp	.+20     	; 0x2fe6 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2fd2:	c1 2c       	mov	r12, r1
    2fd4:	d1 2c       	mov	r13, r1
    2fd6:	76 01       	movw	r14, r12
    2fd8:	00 e0       	ldi	r16, 0x00	; 0
    2fda:	10 e0       	ldi	r17, 0x00	; 0
    2fdc:	a5 01       	movw	r20, r10
    2fde:	94 01       	movw	r18, r8
    2fe0:	60 e0       	ldi	r22, 0x00	; 0
    2fe2:	ce 01       	movw	r24, r28
    2fe4:	5a df       	rcall	.-332    	; 0x2e9a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2fe6:	e0 91 59 17 	lds	r30, 0x1759	; 0x801759 <pxCurrentTimerList>
    2fea:	f0 91 5a 17 	lds	r31, 0x175A	; 0x80175a <pxCurrentTimerList+0x1>
    2fee:	80 81       	ld	r24, Z
    2ff0:	81 11       	cpse	r24, r1
    2ff2:	be cf       	rjmp	.-132    	; 0x2f70 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2ff4:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <pxOverflowTimerList>
    2ff8:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <pxOverflowTimerList+0x1>
    2ffc:	90 93 5a 17 	sts	0x175A, r25	; 0x80175a <pxCurrentTimerList+0x1>
    3000:	80 93 59 17 	sts	0x1759, r24	; 0x801759 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3004:	f0 93 58 17 	sts	0x1758, r31	; 0x801758 <pxOverflowTimerList+0x1>
    3008:	e0 93 57 17 	sts	0x1757, r30	; 0x801757 <pxOverflowTimerList>
    }
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	1f 91       	pop	r17
    3012:	0f 91       	pop	r16
    3014:	ff 90       	pop	r15
    3016:	ef 90       	pop	r14
    3018:	df 90       	pop	r13
    301a:	cf 90       	pop	r12
    301c:	bf 90       	pop	r11
    301e:	af 90       	pop	r10
    3020:	9f 90       	pop	r9
    3022:	8f 90       	pop	r8
    3024:	08 95       	ret

00003026 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3026:	cf 92       	push	r12
    3028:	df 92       	push	r13
    302a:	ef 92       	push	r14
    302c:	ff 92       	push	r15
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3034:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <xTaskGetTickCount>
    3038:	6b 01       	movw	r12, r22
    303a:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    303c:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <xLastTime.2436>
    3040:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <xLastTime.2436+0x1>
    3044:	a0 91 51 17 	lds	r26, 0x1751	; 0x801751 <xLastTime.2436+0x2>
    3048:	b0 91 52 17 	lds	r27, 0x1752	; 0x801752 <xLastTime.2436+0x3>
    304c:	c8 16       	cp	r12, r24
    304e:	d9 06       	cpc	r13, r25
    3050:	ea 06       	cpc	r14, r26
    3052:	fb 06       	cpc	r15, r27
    3054:	20 f4       	brcc	.+8      	; 0x305e <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3056:	7f df       	rcall	.-258    	; 0x2f56 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	88 83       	st	Y, r24
    305c:	01 c0       	rjmp	.+2      	; 0x3060 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    305e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3060:	c0 92 4f 17 	sts	0x174F, r12	; 0x80174f <xLastTime.2436>
    3064:	d0 92 50 17 	sts	0x1750, r13	; 0x801750 <xLastTime.2436+0x1>
    3068:	e0 92 51 17 	sts	0x1751, r14	; 0x801751 <xLastTime.2436+0x2>
    306c:	f0 92 52 17 	sts	0x1752, r15	; 0x801752 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3070:	c7 01       	movw	r24, r14
    3072:	b6 01       	movw	r22, r12
    3074:	df 91       	pop	r29
    3076:	cf 91       	pop	r28
    3078:	ff 90       	pop	r15
    307a:	ef 90       	pop	r14
    307c:	df 90       	pop	r13
    307e:	cf 90       	pop	r12
    3080:	08 95       	ret

00003082 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3082:	4f 92       	push	r4
    3084:	5f 92       	push	r5
    3086:	6f 92       	push	r6
    3088:	7f 92       	push	r7
    308a:	8f 92       	push	r8
    308c:	9f 92       	push	r9
    308e:	af 92       	push	r10
    3090:	bf 92       	push	r11
    3092:	cf 92       	push	r12
    3094:	df 92       	push	r13
    3096:	ef 92       	push	r14
    3098:	ff 92       	push	r15
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	4b 01       	movw	r8, r22
    30a4:	5c 01       	movw	r10, r24
    30a6:	29 01       	movw	r4, r18
    30a8:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    30aa:	e0 91 59 17 	lds	r30, 0x1759	; 0x801759 <pxCurrentTimerList>
    30ae:	f0 91 5a 17 	lds	r31, 0x175A	; 0x80175a <pxCurrentTimerList+0x1>
    30b2:	07 80       	ldd	r0, Z+7	; 0x07
    30b4:	f0 85       	ldd	r31, Z+8	; 0x08
    30b6:	e0 2d       	mov	r30, r0
    30b8:	c0 85       	ldd	r28, Z+8	; 0x08
    30ba:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30bc:	ce 01       	movw	r24, r28
    30be:	02 96       	adiw	r24, 0x02	; 2
    30c0:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    30c4:	8e 89       	ldd	r24, Y+22	; 0x16
    30c6:	82 ff       	sbrs	r24, 2
    30c8:	1b c0       	rjmp	.+54     	; 0x3100 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    30ca:	4e 85       	ldd	r20, Y+14	; 0x0e
    30cc:	5f 85       	ldd	r21, Y+15	; 0x0f
    30ce:	68 89       	ldd	r22, Y+16	; 0x10
    30d0:	79 89       	ldd	r23, Y+17	; 0x11
    30d2:	48 0d       	add	r20, r8
    30d4:	59 1d       	adc	r21, r9
    30d6:	6a 1d       	adc	r22, r10
    30d8:	7b 1d       	adc	r23, r11
    30da:	75 01       	movw	r14, r10
    30dc:	64 01       	movw	r12, r8
    30de:	93 01       	movw	r18, r6
    30e0:	82 01       	movw	r16, r4
    30e2:	ce 01       	movw	r24, r28
    30e4:	47 de       	rcall	.-882    	; 0x2d74 <prvInsertTimerInActiveList>
    30e6:	88 23       	and	r24, r24
    30e8:	69 f0       	breq	.+26     	; 0x3104 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    30ea:	c1 2c       	mov	r12, r1
    30ec:	d1 2c       	mov	r13, r1
    30ee:	76 01       	movw	r14, r12
    30f0:	00 e0       	ldi	r16, 0x00	; 0
    30f2:	10 e0       	ldi	r17, 0x00	; 0
    30f4:	a5 01       	movw	r20, r10
    30f6:	94 01       	movw	r18, r8
    30f8:	60 e0       	ldi	r22, 0x00	; 0
    30fa:	ce 01       	movw	r24, r28
    30fc:	ce de       	rcall	.-612    	; 0x2e9a <xTimerGenericCommand>
    30fe:	02 c0       	rjmp	.+4      	; 0x3104 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3100:	8e 7f       	andi	r24, 0xFE	; 254
    3102:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3104:	ec 89       	ldd	r30, Y+20	; 0x14
    3106:	fd 89       	ldd	r31, Y+21	; 0x15
    3108:	ce 01       	movw	r24, r28
    310a:	19 95       	eicall
    }
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	df 90       	pop	r13
    311a:	cf 90       	pop	r12
    311c:	bf 90       	pop	r11
    311e:	af 90       	pop	r10
    3120:	9f 90       	pop	r9
    3122:	8f 90       	pop	r8
    3124:	7f 90       	pop	r7
    3126:	6f 90       	pop	r6
    3128:	5f 90       	pop	r5
    312a:	4f 90       	pop	r4
    312c:	08 95       	ret

0000312e <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    312e:	8f 92       	push	r8
    3130:	9f 92       	push	r9
    3132:	af 92       	push	r10
    3134:	bf 92       	push	r11
    3136:	cf 92       	push	r12
    3138:	df 92       	push	r13
    313a:	ef 92       	push	r14
    313c:	ff 92       	push	r15
    313e:	1f 93       	push	r17
    3140:	cf 93       	push	r28
    3142:	df 93       	push	r29
    3144:	1f 92       	push	r1
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	6b 01       	movw	r12, r22
    314c:	7c 01       	movw	r14, r24
    314e:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3150:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3154:	ce 01       	movw	r24, r28
    3156:	01 96       	adiw	r24, 0x01	; 1
    3158:	66 df       	rcall	.-308    	; 0x3026 <prvSampleTimeNow>
    315a:	4b 01       	movw	r8, r22
    315c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	81 11       	cpse	r24, r1
    3162:	2d c0       	rjmp	.+90     	; 0x31be <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3164:	11 11       	cpse	r17, r1
    3166:	0d c0       	rjmp	.+26     	; 0x3182 <prvProcessTimerOrBlockTask+0x54>
    3168:	8c 14       	cp	r8, r12
    316a:	9d 04       	cpc	r9, r13
    316c:	ae 04       	cpc	r10, r14
    316e:	bf 04       	cpc	r11, r15
    3170:	40 f0       	brcs	.+16     	; 0x3182 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3172:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3176:	a5 01       	movw	r20, r10
    3178:	94 01       	movw	r18, r8
    317a:	c7 01       	movw	r24, r14
    317c:	b6 01       	movw	r22, r12
    317e:	81 df       	rcall	.-254    	; 0x3082 <prvProcessExpiredTimer>
    3180:	20 c0       	rjmp	.+64     	; 0x31c2 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3182:	11 23       	and	r17, r17
    3184:	41 f0       	breq	.+16     	; 0x3196 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3186:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <pxOverflowTimerList>
    318a:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <pxOverflowTimerList+0x1>
    318e:	80 81       	ld	r24, Z
    3190:	11 e0       	ldi	r17, 0x01	; 1
    3192:	81 11       	cpse	r24, r1
    3194:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3196:	b7 01       	movw	r22, r14
    3198:	a6 01       	movw	r20, r12
    319a:	48 19       	sub	r20, r8
    319c:	59 09       	sbc	r21, r9
    319e:	6a 09       	sbc	r22, r10
    31a0:	7b 09       	sbc	r23, r11
    31a2:	21 2f       	mov	r18, r17
    31a4:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <xTimerQueue>
    31a8:	90 91 56 17 	lds	r25, 0x1756	; 0x801756 <xTimerQueue+0x1>
    31ac:	0e 94 da 07 	call	0xfb4	; 0xfb4 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    31b0:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskResumeAll>
    31b4:	81 11       	cpse	r24, r1
    31b6:	05 c0       	rjmp	.+10     	; 0x31c2 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    31b8:	0e 94 b5 03 	call	0x76a	; 0x76a <vPortYield>
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    31be:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskResumeAll>
            }
        }
    }
    31c2:	0f 90       	pop	r0
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	1f 91       	pop	r17
    31ca:	ff 90       	pop	r15
    31cc:	ef 90       	pop	r14
    31ce:	df 90       	pop	r13
    31d0:	cf 90       	pop	r12
    31d2:	bf 90       	pop	r11
    31d4:	af 90       	pop	r10
    31d6:	9f 90       	pop	r9
    31d8:	8f 90       	pop	r8
    31da:	08 95       	ret

000031dc <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    31dc:	af 92       	push	r10
    31de:	bf 92       	push	r11
    31e0:	cf 92       	push	r12
    31e2:	df 92       	push	r13
    31e4:	ef 92       	push	r14
    31e6:	ff 92       	push	r15
    31e8:	0f 93       	push	r16
    31ea:	1f 93       	push	r17
    31ec:	cf 93       	push	r28
    31ee:	df 93       	push	r29
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	28 97       	sbiw	r28, 0x08	; 8
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	f8 94       	cli
    31fa:	de bf       	out	0x3e, r29	; 62
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3200:	82 c0       	rjmp	.+260    	; 0x3306 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	88 23       	and	r24, r24
    3206:	0c f4       	brge	.+2      	; 0x320a <prvProcessReceivedCommands+0x2e>
    3208:	7e c0       	rjmp	.+252    	; 0x3306 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    320a:	ae 80       	ldd	r10, Y+6	; 0x06
    320c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    320e:	d5 01       	movw	r26, r10
    3210:	1c 96       	adiw	r26, 0x0c	; 12
    3212:	8d 91       	ld	r24, X+
    3214:	9c 91       	ld	r25, X
    3216:	1d 97       	sbiw	r26, 0x0d	; 13
    3218:	89 2b       	or	r24, r25
    321a:	21 f0       	breq	.+8      	; 0x3224 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    321c:	c5 01       	movw	r24, r10
    321e:	02 96       	adiw	r24, 0x02	; 2
    3220:	0e 94 39 03 	call	0x672	; 0x672 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3224:	ce 01       	movw	r24, r28
    3226:	08 96       	adiw	r24, 0x08	; 8
    3228:	fe de       	rcall	.-516    	; 0x3026 <prvSampleTimeNow>
    322a:	8b 01       	movw	r16, r22
    322c:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    322e:	e9 81       	ldd	r30, Y+1	; 0x01
    3230:	0e 2e       	mov	r0, r30
    3232:	00 0c       	add	r0, r0
    3234:	ff 0b       	sbc	r31, r31
    3236:	ea 30       	cpi	r30, 0x0A	; 10
    3238:	f1 05       	cpc	r31, r1
    323a:	08 f0       	brcs	.+2      	; 0x323e <prvProcessReceivedCommands+0x62>
    323c:	64 c0       	rjmp	.+200    	; 0x3306 <prvProcessReceivedCommands+0x12a>
    323e:	88 27       	eor	r24, r24
    3240:	ee 58       	subi	r30, 0x8E	; 142
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	8f 4f       	sbci	r24, 0xFF	; 255
    3246:	0c 94 3a 2d 	jmp	0x5a74	; 0x5a74 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    324a:	f5 01       	movw	r30, r10
    324c:	86 89       	ldd	r24, Z+22	; 0x16
    324e:	81 60       	ori	r24, 0x01	; 1
    3250:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3252:	ca 80       	ldd	r12, Y+2	; 0x02
    3254:	db 80       	ldd	r13, Y+3	; 0x03
    3256:	ec 80       	ldd	r14, Y+4	; 0x04
    3258:	fd 80       	ldd	r15, Y+5	; 0x05
    325a:	46 85       	ldd	r20, Z+14	; 0x0e
    325c:	57 85       	ldd	r21, Z+15	; 0x0f
    325e:	60 89       	ldd	r22, Z+16	; 0x10
    3260:	71 89       	ldd	r23, Z+17	; 0x11
    3262:	4c 0d       	add	r20, r12
    3264:	5d 1d       	adc	r21, r13
    3266:	6e 1d       	adc	r22, r14
    3268:	7f 1d       	adc	r23, r15
    326a:	c5 01       	movw	r24, r10
    326c:	83 dd       	rcall	.-1274   	; 0x2d74 <prvInsertTimerInActiveList>
    326e:	88 23       	and	r24, r24
    3270:	09 f4       	brne	.+2      	; 0x3274 <prvProcessReceivedCommands+0x98>
    3272:	49 c0       	rjmp	.+146    	; 0x3306 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3274:	d5 01       	movw	r26, r10
    3276:	54 96       	adiw	r26, 0x14	; 20
    3278:	ed 91       	ld	r30, X+
    327a:	fc 91       	ld	r31, X
    327c:	55 97       	sbiw	r26, 0x15	; 21
    327e:	c5 01       	movw	r24, r10
    3280:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3282:	f5 01       	movw	r30, r10
    3284:	86 89       	ldd	r24, Z+22	; 0x16
    3286:	82 ff       	sbrs	r24, 2
    3288:	3e c0       	rjmp	.+124    	; 0x3306 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    328a:	4a 81       	ldd	r20, Y+2	; 0x02
    328c:	5b 81       	ldd	r21, Y+3	; 0x03
    328e:	6c 81       	ldd	r22, Y+4	; 0x04
    3290:	7d 81       	ldd	r23, Y+5	; 0x05
    3292:	86 85       	ldd	r24, Z+14	; 0x0e
    3294:	97 85       	ldd	r25, Z+15	; 0x0f
    3296:	a0 89       	ldd	r26, Z+16	; 0x10
    3298:	b1 89       	ldd	r27, Z+17	; 0x11
    329a:	9a 01       	movw	r18, r20
    329c:	ab 01       	movw	r20, r22
    329e:	28 0f       	add	r18, r24
    32a0:	39 1f       	adc	r19, r25
    32a2:	4a 1f       	adc	r20, r26
    32a4:	5b 1f       	adc	r21, r27
    32a6:	c1 2c       	mov	r12, r1
    32a8:	d1 2c       	mov	r13, r1
    32aa:	76 01       	movw	r14, r12
    32ac:	00 e0       	ldi	r16, 0x00	; 0
    32ae:	10 e0       	ldi	r17, 0x00	; 0
    32b0:	60 e0       	ldi	r22, 0x00	; 0
    32b2:	c5 01       	movw	r24, r10
    32b4:	f2 dd       	rcall	.-1052   	; 0x2e9a <xTimerGenericCommand>
    32b6:	27 c0       	rjmp	.+78     	; 0x3306 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    32b8:	d5 01       	movw	r26, r10
    32ba:	56 96       	adiw	r26, 0x16	; 22
    32bc:	8c 91       	ld	r24, X
    32be:	56 97       	sbiw	r26, 0x16	; 22
    32c0:	8e 7f       	andi	r24, 0xFE	; 254
    32c2:	56 96       	adiw	r26, 0x16	; 22
    32c4:	8c 93       	st	X, r24
                        break;
    32c6:	1f c0       	rjmp	.+62     	; 0x3306 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    32c8:	f5 01       	movw	r30, r10
    32ca:	86 89       	ldd	r24, Z+22	; 0x16
    32cc:	81 60       	ori	r24, 0x01	; 1
    32ce:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    32d0:	4a 81       	ldd	r20, Y+2	; 0x02
    32d2:	5b 81       	ldd	r21, Y+3	; 0x03
    32d4:	6c 81       	ldd	r22, Y+4	; 0x04
    32d6:	7d 81       	ldd	r23, Y+5	; 0x05
    32d8:	46 87       	std	Z+14, r20	; 0x0e
    32da:	57 87       	std	Z+15, r21	; 0x0f
    32dc:	60 8b       	std	Z+16, r22	; 0x10
    32de:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    32e0:	40 0f       	add	r20, r16
    32e2:	51 1f       	adc	r21, r17
    32e4:	62 1f       	adc	r22, r18
    32e6:	73 1f       	adc	r23, r19
    32e8:	68 01       	movw	r12, r16
    32ea:	79 01       	movw	r14, r18
    32ec:	c5 01       	movw	r24, r10
    32ee:	42 dd       	rcall	.-1404   	; 0x2d74 <prvInsertTimerInActiveList>
                        break;
    32f0:	0a c0       	rjmp	.+20     	; 0x3306 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    32f2:	f5 01       	movw	r30, r10
    32f4:	86 89       	ldd	r24, Z+22	; 0x16
    32f6:	81 fd       	sbrc	r24, 1
    32f8:	04 c0       	rjmp	.+8      	; 0x3302 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    32fa:	c5 01       	movw	r24, r10
    32fc:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortFree>
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3302:	8e 7f       	andi	r24, 0xFE	; 254
    3304:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	a9 01       	movw	r20, r18
    330c:	be 01       	movw	r22, r28
    330e:	6f 5f       	subi	r22, 0xFF	; 255
    3310:	7f 4f       	sbci	r23, 0xFF	; 255
    3312:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <xTimerQueue>
    3316:	90 91 56 17 	lds	r25, 0x1756	; 0x801756 <xTimerQueue+0x1>
    331a:	0e 94 9a 06 	call	0xd34	; 0xd34 <xQueueReceive>
    331e:	81 11       	cpse	r24, r1
    3320:	70 cf       	rjmp	.-288    	; 0x3202 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3322:	28 96       	adiw	r28, 0x08	; 8
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	df 91       	pop	r29
    3330:	cf 91       	pop	r28
    3332:	1f 91       	pop	r17
    3334:	0f 91       	pop	r16
    3336:	ff 90       	pop	r15
    3338:	ef 90       	pop	r14
    333a:	df 90       	pop	r13
    333c:	cf 90       	pop	r12
    333e:	bf 90       	pop	r11
    3340:	af 90       	pop	r10
    3342:	08 95       	ret

00003344 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3344:	08 95       	ret

00003346 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3346:	84 b1       	in	r24, 0x04	; 4
    3348:	80 68       	ori	r24, 0x80	; 128
    334a:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    334c:	85 b1       	in	r24, 0x05	; 5
    334e:	80 68       	ori	r24, 0x80	; 128
    3350:	85 b9       	out	0x05, r24	; 5
    3352:	08 95       	ret

00003354 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3354:	83 b1       	in	r24, 0x03	; 3
    3356:	80 68       	ori	r24, 0x80	; 128
    3358:	83 b9       	out	0x03, r24	; 3
    335a:	08 95       	ret

0000335c <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    335c:	f4 df       	rcall	.-24     	; 0x3346 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    335e:	2f ef       	ldi	r18, 0xFF	; 255
    3360:	80 e7       	ldi	r24, 0x70	; 112
    3362:	92 e0       	ldi	r25, 0x02	; 2
    3364:	21 50       	subi	r18, 0x01	; 1
    3366:	80 40       	sbci	r24, 0x00	; 0
    3368:	90 40       	sbci	r25, 0x00	; 0
    336a:	e1 f7       	brne	.-8      	; 0x3364 <vApplicationMallocFailedHook+0x8>
    336c:	00 c0       	rjmp	.+0      	; 0x336e <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    336e:	00 00       	nop
    3370:	f1 df       	rcall	.-30     	; 0x3354 <prvBlinkMainLed>
    3372:	f5 cf       	rjmp	.-22     	; 0x335e <vApplicationMallocFailedHook+0x2>

00003374 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3374:	e8 df       	rcall	.-48     	; 0x3346 <prvSetMainLedOn>
    3376:	2f ef       	ldi	r18, 0xFF	; 255
    3378:	87 ea       	ldi	r24, 0xA7	; 167
    337a:	91 e6       	ldi	r25, 0x61	; 97
    337c:	21 50       	subi	r18, 0x01	; 1
    337e:	80 40       	sbci	r24, 0x00	; 0
    3380:	90 40       	sbci	r25, 0x00	; 0
    3382:	e1 f7       	brne	.-8      	; 0x337c <vApplicationStackOverflowHook+0x8>
    3384:	00 c0       	rjmp	.+0      	; 0x3386 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3386:	00 00       	nop
    3388:	e5 df       	rcall	.-54     	; 0x3354 <prvBlinkMainLed>
    338a:	f5 cf       	rjmp	.-22     	; 0x3376 <vApplicationStackOverflowHook+0x2>

0000338c <enqueueCO2Measure>:
void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
}


void enqueueCO2Measure(uint16_t ppm){
    338c:	0f 93       	push	r16
    338e:	cf 93       	push	r28
    3390:	df 93       	push	r29
    3392:	1f 92       	push	r1
    3394:	1f 92       	push	r1
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	9a 83       	std	Y+2, r25	; 0x02
    339c:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting CO2: %d in the queue \n", ppm);
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	8f 93       	push	r24
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	8f 93       	push	r24
    33a6:	87 ea       	ldi	r24, 0xA7	; 167
    33a8:	92 e0       	ldi	r25, 0x02	; 2
    33aa:	9f 93       	push	r25
    33ac:	8f 93       	push	r24
    33ae:	85 ee       	ldi	r24, 0xE5	; 229
    33b0:	98 e1       	ldi	r25, 0x18	; 24
    33b2:	9f 93       	push	r25
    33b4:	8f 93       	push	r24
    33b6:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
	test_outprint(printstring);
    33ba:	85 ee       	ldi	r24, 0xE5	; 229
    33bc:	98 e1       	ldi	r25, 0x18	; 24
    33be:	3c d3       	rcall	.+1656   	; 0x3a38 <test_outprint>
	
	xQueueSend(xQueueCO2, (void*)&ppm, portMAX_DELAY);
    33c0:	00 e0       	ldi	r16, 0x00	; 0
    33c2:	2f ef       	ldi	r18, 0xFF	; 255
    33c4:	3f ef       	ldi	r19, 0xFF	; 255
    33c6:	a9 01       	movw	r20, r18
    33c8:	be 01       	movw	r22, r28
    33ca:	6f 5f       	subi	r22, 0xFF	; 255
    33cc:	7f 4f       	sbci	r23, 0xFF	; 255
    33ce:	80 91 57 19 	lds	r24, 0x1957	; 0x801957 <xQueueCO2>
    33d2:	90 91 58 19 	lds	r25, 0x1958	; 0x801958 <xQueueCO2+0x1>
    33d6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
}
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	0f 91       	pop	r16
    33f0:	08 95       	ret

000033f2 <initializeCO2Queue>:
#include "../semaphore/header/testOutprint.h"

QueueHandle_t xQueueCO2;

void initializeCO2Queue() {
	xQueueCO2 = xQueueCreate(10, sizeof(uint16_t));
    33f2:	40 e0       	ldi	r20, 0x00	; 0
    33f4:	62 e0       	ldi	r22, 0x02	; 2
    33f6:	8a e0       	ldi	r24, 0x0A	; 10
    33f8:	0e 94 aa 05 	call	0xb54	; 0xb54 <xQueueGenericCreate>
    33fc:	90 93 58 19 	sts	0x1958, r25	; 0x801958 <xQueueCO2+0x1>
    3400:	80 93 57 19 	sts	0x1957, r24	; 0x801957 <xQueueCO2>
    3404:	08 95       	ret

00003406 <co2Measure>:
}

void co2Measure() {
	mh_z19_returnCode_t rc;
	
	rc = mh_z19_takeMeassuring();
    3406:	0e 94 d6 23 	call	0x47ac	; 0x47ac <mh_z19_takeMeassuring>
	if (rc == MHZ19_OK)
    340a:	81 11       	cpse	r24, r1
    340c:	05 c0       	rjmp	.+10     	; 0x3418 <co2Measure+0x12>
	{
		mh_z19_injectCallBack(enqueueCO2Measure);
    340e:	86 ec       	ldi	r24, 0xC6	; 198
    3410:	99 e1       	ldi	r25, 0x19	; 25
    3412:	0c 94 d1 23 	jmp	0x47a2	; 0x47a2 <mh_z19_injectCallBack>
    3416:	08 95       	ret
	}
	else
	{
		puts("Det gik galt");
    3418:	86 ec       	ldi	r24, 0xC6	; 198
    341a:	92 e0       	ldi	r25, 0x02	; 2
    341c:	0c 94 f3 2e 	jmp	0x5de6	; 0x5de6 <puts>
    3420:	08 95       	ret

00003422 <dequeueCO2Measure>:
	}
}


uint16_t dequeueCO2Measure(){
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	1f 92       	push	r1
    3428:	1f 92       	push	r1
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm;
	
	xQueueReceive(xQueueCO2, &ppm, 1500);
    342e:	2c ed       	ldi	r18, 0xDC	; 220
    3430:	35 e0       	ldi	r19, 0x05	; 5
    3432:	40 e0       	ldi	r20, 0x00	; 0
    3434:	50 e0       	ldi	r21, 0x00	; 0
    3436:	be 01       	movw	r22, r28
    3438:	6f 5f       	subi	r22, 0xFF	; 255
    343a:	7f 4f       	sbci	r23, 0xFF	; 255
    343c:	80 91 57 19 	lds	r24, 0x1957	; 0x801957 <xQueueCO2>
    3440:	90 91 58 19 	lds	r25, 0x1958	; 0x801958 <xQueueCO2+0x1>
    3444:	0e 94 9a 06 	call	0xd34	; 0xd34 <xQueueReceive>
	
	sprintf(printstring, "Removing CO2: %d from the queue \n", ppm);
    3448:	8a 81       	ldd	r24, Y+2	; 0x02
    344a:	8f 93       	push	r24
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	8f 93       	push	r24
    3450:	83 ed       	ldi	r24, 0xD3	; 211
    3452:	92 e0       	ldi	r25, 0x02	; 2
    3454:	9f 93       	push	r25
    3456:	8f 93       	push	r24
    3458:	85 ee       	ldi	r24, 0xE5	; 229
    345a:	98 e1       	ldi	r25, 0x18	; 24
    345c:	9f 93       	push	r25
    345e:	8f 93       	push	r24
    3460:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
	test_outprint(printstring);
    3464:	85 ee       	ldi	r24, 0xE5	; 229
    3466:	98 e1       	ldi	r25, 0x18	; 24
    3468:	e7 d2       	rcall	.+1486   	; 0x3a38 <test_outprint>

	return ppm;
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	9a 81       	ldd	r25, Y+2	; 0x02
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	08 95       	ret

00003484 <initializeTempHumQueues>:
QueueHandle_t xQueueHum;


void initializeTempHumQueues()
{
	xQueueTemp = xQueueCreate(10, sizeof(int16_t));
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	62 e0       	ldi	r22, 0x02	; 2
    3488:	8a e0       	ldi	r24, 0x0A	; 10
    348a:	0e 94 aa 05 	call	0xb54	; 0xb54 <xQueueGenericCreate>
    348e:	90 93 5c 19 	sts	0x195C, r25	; 0x80195c <xQueueTemp+0x1>
    3492:	80 93 5b 19 	sts	0x195B, r24	; 0x80195b <xQueueTemp>
	xQueueHum = xQueueCreate(10, sizeof(uint16_t));
    3496:	40 e0       	ldi	r20, 0x00	; 0
    3498:	62 e0       	ldi	r22, 0x02	; 2
    349a:	8a e0       	ldi	r24, 0x0A	; 10
    349c:	0e 94 aa 05 	call	0xb54	; 0xb54 <xQueueGenericCreate>
    34a0:	90 93 5a 19 	sts	0x195A, r25	; 0x80195a <xQueueHum+0x1>
    34a4:	80 93 59 19 	sts	0x1959, r24	; 0x801959 <xQueueHum>
    34a8:	08 95       	ret

000034aa <enqueueTemperature>:
}

void enqueueTemperature(int16_t temp){
    34aa:	0f 93       	push	r16
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	1f 92       	push	r1
    34b2:	1f 92       	push	r1
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	9a 83       	std	Y+2, r25	; 0x02
    34ba:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting temperature: %d in the queue \n", temp);
    34bc:	8a 81       	ldd	r24, Y+2	; 0x02
    34be:	8f 93       	push	r24
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	8f 93       	push	r24
    34c4:	85 ef       	ldi	r24, 0xF5	; 245
    34c6:	92 e0       	ldi	r25, 0x02	; 2
    34c8:	9f 93       	push	r25
    34ca:	8f 93       	push	r24
    34cc:	85 ee       	ldi	r24, 0xE5	; 229
    34ce:	98 e1       	ldi	r25, 0x18	; 24
    34d0:	9f 93       	push	r25
    34d2:	8f 93       	push	r24
    34d4:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
	test_outprint(printstring);
    34d8:	85 ee       	ldi	r24, 0xE5	; 229
    34da:	98 e1       	ldi	r25, 0x18	; 24
    34dc:	ad d2       	rcall	.+1370   	; 0x3a38 <test_outprint>
	
	xQueueSend(xQueueTemp, (void*)&temp, portMAX_DELAY);
    34de:	00 e0       	ldi	r16, 0x00	; 0
    34e0:	2f ef       	ldi	r18, 0xFF	; 255
    34e2:	3f ef       	ldi	r19, 0xFF	; 255
    34e4:	a9 01       	movw	r20, r18
    34e6:	be 01       	movw	r22, r28
    34e8:	6f 5f       	subi	r22, 0xFF	; 255
    34ea:	7f 4f       	sbci	r23, 0xFF	; 255
    34ec:	80 91 5b 19 	lds	r24, 0x195B	; 0x80195b <xQueueTemp>
    34f0:	90 91 5c 19 	lds	r25, 0x195C	; 0x80195c <xQueueTemp+0x1>
    34f4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
}
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	0f 91       	pop	r16
    350e:	08 95       	ret

00003510 <enqueueHumidity>:

void enqueueHumidity(uint16_t hum){
    3510:	0f 93       	push	r16
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	1f 92       	push	r1
    3518:	1f 92       	push	r1
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	9a 83       	std	Y+2, r25	; 0x02
    3520:	89 83       	std	Y+1, r24	; 0x01
	sprintf(printstring, "Putting humidity: %d in the queue \n", hum);
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	8f 93       	push	r24
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	8f 93       	push	r24
    352a:	8c e1       	ldi	r24, 0x1C	; 28
    352c:	93 e0       	ldi	r25, 0x03	; 3
    352e:	9f 93       	push	r25
    3530:	8f 93       	push	r24
    3532:	85 ee       	ldi	r24, 0xE5	; 229
    3534:	98 e1       	ldi	r25, 0x18	; 24
    3536:	9f 93       	push	r25
    3538:	8f 93       	push	r24
    353a:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
	test_outprint(printstring);
    353e:	85 ee       	ldi	r24, 0xE5	; 229
    3540:	98 e1       	ldi	r25, 0x18	; 24
    3542:	7a d2       	rcall	.+1268   	; 0x3a38 <test_outprint>
	
	xQueueSend(xQueueHum, (void*)&hum, portMAX_DELAY);	
    3544:	00 e0       	ldi	r16, 0x00	; 0
    3546:	2f ef       	ldi	r18, 0xFF	; 255
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	a9 01       	movw	r20, r18
    354c:	be 01       	movw	r22, r28
    354e:	6f 5f       	subi	r22, 0xFF	; 255
    3550:	7f 4f       	sbci	r23, 0xFF	; 255
    3552:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <xQueueHum>
    3556:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <xQueueHum+0x1>
    355a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
}
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	df 91       	pop	r29
    3570:	cf 91       	pop	r28
    3572:	0f 91       	pop	r16
    3574:	08 95       	ret

00003576 <tempHumMeasure>:


void tempHumMeasure()
{
    3576:	ef 92       	push	r14
    3578:	ff 92       	push	r15
    357a:	0f 93       	push	r16
    357c:	1f 93       	push	r17
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	00 d0       	rcall	.+0      	; 0x3584 <tempHumMeasure+0xe>
    3584:	1f 92       	push	r1
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5/portTICK_PERIOD_MS; 
	const TickType_t xFrequency2 = 50/portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    358a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <xTaskGetTickCount>
    358e:	69 83       	std	Y+1, r22	; 0x01
    3590:	7a 83       	std	Y+2, r23	; 0x02
    3592:	8b 83       	std	Y+3, r24	; 0x03
    3594:	9c 83       	std	Y+4, r25	; 0x04

	if(HIH8120_OK != hih8120_wakeup())
    3596:	c4 d3       	rcall	.+1928   	; 0x3d20 <hih8120_wakeup>
    3598:	88 23       	and	r24, r24
    359a:	21 f0       	breq	.+8      	; 0x35a4 <tempHumMeasure+0x2e>
	{
		puts("Wakeup gik galt");
    359c:	80 e4       	ldi	r24, 0x40	; 64
    359e:	93 e0       	ldi	r25, 0x03	; 3
    35a0:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <puts>
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency2 );
    35a4:	43 e0       	ldi	r20, 0x03	; 3
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	ce 01       	movw	r24, r28
    35ae:	01 96       	adiw	r24, 0x01	; 1
    35b0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <xTaskDelayUntil>
	if(HIH8120_OK != hih8120_measure())
    35b4:	ca d3       	rcall	.+1940   	; 0x3d4a <hih8120_measure>
    35b6:	88 23       	and	r24, r24
    35b8:	21 f0       	breq	.+8      	; 0x35c2 <tempHumMeasure+0x4c>
	{
		puts("Measure gik galt");
    35ba:	80 e5       	ldi	r24, 0x50	; 80
    35bc:	93 e0       	ldi	r25, 0x03	; 3
    35be:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <puts>
	}
	xTaskDelayUntil( &xLastWakeTime, xFrequency );
    35c2:	40 e0       	ldi	r20, 0x00	; 0
    35c4:	50 e0       	ldi	r21, 0x00	; 0
    35c6:	ba 01       	movw	r22, r20
    35c8:	ce 01       	movw	r24, r28
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <xTaskDelayUntil>
	
	uint16_t humidity = hih8120_getHumidity();
    35d0:	cd d3       	rcall	.+1946   	; 0x3d6c <hih8120_getHumidity>
    35d2:	0c d3       	rcall	.+1560   	; 0x3bec <__fixunssfsi>
	int16_t temp = hih8120_getTemperature();
    35d4:	8b 01       	movw	r16, r22
    35d6:	df d3       	rcall	.+1982   	; 0x3d96 <hih8120_getTemperature>
    35d8:	04 d3       	rcall	.+1544   	; 0x3be2 <__fixsfsi>
    35da:	7b 01       	movw	r14, r22
    35dc:	00 36       	cpi	r16, 0x60	; 96
	
	if (humidity > 95 && temp > 100) {
    35de:	11 05       	cpc	r17, r1
    35e0:	88 f0       	brcs	.+34     	; 0x3604 <tempHumMeasure+0x8e>
    35e2:	85 e6       	ldi	r24, 0x65	; 101
    35e4:	e8 16       	cp	r14, r24
    35e6:	f1 04       	cpc	r15, r1
    35e8:	6c f0       	brlt	.+26     	; 0x3604 <tempHumMeasure+0x8e>
    35ea:	40 e0       	ldi	r20, 0x00	; 0
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    35ec:	50 e0       	ldi	r21, 0x00	; 0
    35ee:	ba 01       	movw	r22, r20
    35f0:	ce 01       	movw	r24, r28
    35f2:	01 96       	adiw	r24, 0x01	; 1
			
		humidity = hih8120_getHumidity();
    35f4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <xTaskDelayUntil>
    35f8:	b9 d3       	rcall	.+1906   	; 0x3d6c <hih8120_getHumidity>
		temp = hih8120_getTemperature();
    35fa:	f8 d2       	rcall	.+1520   	; 0x3bec <__fixunssfsi>
    35fc:	8b 01       	movw	r16, r22
    35fe:	cb d3       	rcall	.+1942   	; 0x3d96 <hih8120_getTemperature>
    3600:	f0 d2       	rcall	.+1504   	; 0x3be2 <__fixsfsi>
    3602:	7b 01       	movw	r14, r22
	}
	
	enqueueHumidity(humidity);
    3604:	c8 01       	movw	r24, r16
    3606:	84 df       	rcall	.-248    	; 0x3510 <enqueueHumidity>
    3608:	c7 01       	movw	r24, r14
	enqueueTemperature(temp);
    360a:	4f df       	rcall	.-354    	; 0x34aa <enqueueTemperature>
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
}
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	ff 90       	pop	r15
    361e:	ef 90       	pop	r14
    3620:	08 95       	ret

00003622 <dequeueTempMeasure>:
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29


int16_t dequeueTempMeasure(){
    3626:	1f 92       	push	r1
    3628:	1f 92       	push	r1
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
	int16_t temp;
	
	xQueueReceive(xQueueTemp, &temp, 1500);
    362e:	2c ed       	ldi	r18, 0xDC	; 220
    3630:	35 e0       	ldi	r19, 0x05	; 5
    3632:	40 e0       	ldi	r20, 0x00	; 0
    3634:	50 e0       	ldi	r21, 0x00	; 0
    3636:	be 01       	movw	r22, r28
    3638:	6f 5f       	subi	r22, 0xFF	; 255
    363a:	7f 4f       	sbci	r23, 0xFF	; 255
    363c:	80 91 5b 19 	lds	r24, 0x195B	; 0x80195b <xQueueTemp>
    3640:	90 91 5c 19 	lds	r25, 0x195C	; 0x80195c <xQueueTemp+0x1>
    3644:	0e 94 9a 06 	call	0xd34	; 0xd34 <xQueueReceive>
	
	sprintf(printstring, "Removing temperature: %d from the queue \n", temp);
    3648:	8a 81       	ldd	r24, Y+2	; 0x02
    364a:	8f 93       	push	r24
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	8f 93       	push	r24
    3650:	81 e6       	ldi	r24, 0x61	; 97
    3652:	93 e0       	ldi	r25, 0x03	; 3
    3654:	9f 93       	push	r25
    3656:	8f 93       	push	r24
    3658:	85 ee       	ldi	r24, 0xE5	; 229
    365a:	98 e1       	ldi	r25, 0x18	; 24
    365c:	9f 93       	push	r25
    365e:	8f 93       	push	r24
    3660:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
	test_outprint(printstring);
    3664:	85 ee       	ldi	r24, 0xE5	; 229
    3666:	98 e1       	ldi	r25, 0x18	; 24
    3668:	e7 d1       	rcall	.+974    	; 0x3a38 <test_outprint>
	
	return temp;
    366a:	0f 90       	pop	r0
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
}
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	9a 81       	ldd	r25, Y+2	; 0x02
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	df 91       	pop	r29
    3680:	cf 91       	pop	r28
    3682:	08 95       	ret

00003684 <dequeueHumidityMeasure>:

uint16_t dequeueHumidityMeasure(){
    3684:	cf 93       	push	r28
    3686:	df 93       	push	r29
    3688:	1f 92       	push	r1
    368a:	1f 92       	push	r1
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
	uint16_t hum;
	
	xQueueReceive(xQueueHum, &hum, 1500);
    3690:	2c ed       	ldi	r18, 0xDC	; 220
    3692:	35 e0       	ldi	r19, 0x05	; 5
    3694:	40 e0       	ldi	r20, 0x00	; 0
    3696:	50 e0       	ldi	r21, 0x00	; 0
    3698:	be 01       	movw	r22, r28
    369a:	6f 5f       	subi	r22, 0xFF	; 255
    369c:	7f 4f       	sbci	r23, 0xFF	; 255
    369e:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <xQueueHum>
    36a2:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <xQueueHum+0x1>
    36a6:	0e 94 9a 06 	call	0xd34	; 0xd34 <xQueueReceive>
	
	sprintf(printstring, "Removing humidity: %d from the queue \n", hum);
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	8f 93       	push	r24
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	8f 93       	push	r24
    36b2:	8b e8       	ldi	r24, 0x8B	; 139
    36b4:	93 e0       	ldi	r25, 0x03	; 3
    36b6:	9f 93       	push	r25
    36b8:	8f 93       	push	r24
    36ba:	85 ee       	ldi	r24, 0xE5	; 229
    36bc:	98 e1       	ldi	r25, 0x18	; 24
    36be:	9f 93       	push	r25
    36c0:	8f 93       	push	r24
    36c2:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
	test_outprint(printstring);
    36c6:	85 ee       	ldi	r24, 0xE5	; 229
    36c8:	98 e1       	ldi	r25, 0x18	; 24
    36ca:	b6 d1       	rcall	.+876    	; 0x3a38 <test_outprint>
		
	return hum;
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	9a 81       	ldd	r25, Y+2	; 0x02
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	08 95       	ret

000036e6 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    36e6:	0f 93       	push	r16
    36e8:	1f 93       	push	r17
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    36f2:	64 97       	sbiw	r28, 0x14	; 20
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	f8 94       	cli
    36f8:	de bf       	out	0x3e, r29	; 62
    36fa:	0f be       	out	0x3f, r0	; 63
    36fc:	cd bf       	out	0x3d, r28	; 61

	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	0e 94 12 29 	call	0x5224	; 0x5224 <status_leds_slowBlink>

	// Factory reset the transceiver
	//sprintf(printstring, "FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
	//test_outprint(printstring);
	
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3704:	d0 d4       	rcall	.+2464   	; 0x40a6 <lora_driver_rn2483FactoryReset>
    3706:	4c d7       	rcall	.+3736   	; 0x45a0 <lora_driver_mapReturnCodeToText>
    3708:	9f 93       	push	r25
    370a:	8f 93       	push	r24
    370c:	82 eb       	ldi	r24, 0xB2	; 178
    370e:	93 e0       	ldi	r25, 0x03	; 3
    3710:	9f 93       	push	r25
    3712:	8f 93       	push	r24
    3714:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>
	
	// Configure to EU868 LoRaWAN standards
	//sprintf(printstring, "Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
	//test_outprint(printstring);
	
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3718:	44 d6       	rcall	.+3208   	; 0x43a2 <lora_driver_configureToEu868>
    371a:	42 d7       	rcall	.+3716   	; 0x45a0 <lora_driver_mapReturnCodeToText>
    371c:	9f 93       	push	r25
    371e:	8f 93       	push	r24
    3720:	85 ec       	ldi	r24, 0xC5	; 197
    3722:	93 e0       	ldi	r25, 0x03	; 3
    3724:	9f 93       	push	r25
    3726:	8f 93       	push	r24
    3728:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>
    372c:	8e 01       	movw	r16, r28
    372e:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI	
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3730:	1f 4f       	sbci	r17, 0xFF	; 255
    3732:	c8 01       	movw	r24, r16
    3734:	ca d4       	rcall	.+2452   	; 0x40ca <lora_driver_getRn2483Hweui>
    3736:	34 d7       	rcall	.+3688   	; 0x45a0 <lora_driver_mapReturnCodeToText>
	
	//sprintf(printstring, "Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
	//test_outprint(printstring);

	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3738:	1f 93       	push	r17
    373a:	0f 93       	push	r16
    373c:	9f 93       	push	r25
    373e:	8f 93       	push	r24
    3740:	8e ed       	ldi	r24, 0xDE	; 222
    3742:	93 e0       	ldi	r25, 0x03	; 3
    3744:	9f 93       	push	r25
    3746:	8f 93       	push	r24
    3748:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	//sprintf(printstring, "Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
	//test_outprint(printstring);
	
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    374c:	c8 01       	movw	r24, r16
    374e:	d9 d4       	rcall	.+2482   	; 0x4102 <lora_driver_setDeviceIdentifier>
    3750:	27 d7       	rcall	.+3662   	; 0x45a0 <lora_driver_mapReturnCodeToText>
    3752:	9f 93       	push	r25
    3754:	8f 93       	push	r24
    3756:	1f 93       	push	r17
    3758:	0f 93       	push	r16
    375a:	82 ef       	ldi	r24, 0xF2	; 242
    375c:	93 e0       	ldi	r25, 0x03	; 3
    375e:	9f 93       	push	r25
    3760:	8f 93       	push	r24
    3762:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	//sprintf(printstring, "Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
	//test_outprint(printstring);
	
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3766:	a8 01       	movw	r20, r16
    3768:	67 e0       	ldi	r22, 0x07	; 7
    376a:	74 e0       	ldi	r23, 0x04	; 4
    376c:	88 e2       	ldi	r24, 0x28	; 40
    376e:	94 e0       	ldi	r25, 0x04	; 4
    3770:	f6 d6       	rcall	.+3564   	; 0x455e <lora_driver_setOtaaIdentity>
    3772:	16 d7       	rcall	.+3628   	; 0x45a0 <lora_driver_mapReturnCodeToText>
    3774:	9f 93       	push	r25
    3776:	8f 93       	push	r24
    3778:	1f 93       	push	r17
    377a:	0f 93       	push	r16
    377c:	87 e0       	ldi	r24, 0x07	; 7
    377e:	94 e0       	ldi	r25, 0x04	; 4
    3780:	9f 93       	push	r25
    3782:	8f 93       	push	r24
    3784:	88 e2       	ldi	r24, 0x28	; 40
    3786:	94 e0       	ldi	r25, 0x04	; 4
    3788:	9f 93       	push	r25
    378a:	8f 93       	push	r24
    378c:	89 e3       	ldi	r24, 0x39	; 57
    378e:	94 e0       	ldi	r25, 0x04	; 4
    3790:	9f 93       	push	r25
    3792:	8f 93       	push	r24
    3794:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>

	// Save all the MAC settings in the transceiver
	//sprintf(printstring, "Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
	//test_outprint(printstring);
	
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3798:	e7 d4       	rcall	.+2510   	; 0x4168 <lora_driver_saveMac>
    379a:	02 d7       	rcall	.+3588   	; 0x45a0 <lora_driver_mapReturnCodeToText>
    379c:	9f 93       	push	r25
    379e:	8f 93       	push	r24
    37a0:	8f e6       	ldi	r24, 0x6F	; 111
    37a2:	94 e0       	ldi	r25, 0x04	; 4
    37a4:	9f 93       	push	r25
    37a6:	8f 93       	push	r24
    37a8:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>

	// Enable Adaptive Data Rate
	//sprintf(printstring, "Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
	//test_outprint(printstring);
	
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	d1 d5       	rcall	.+2978   	; 0x435c <lora_driver_setAdaptiveDataRate>
    37ba:	f2 d6       	rcall	.+3556   	; 0x45a0 <lora_driver_mapReturnCodeToText>
    37bc:	9f 93       	push	r25
    37be:	8f 93       	push	r24
    37c0:	8e e7       	ldi	r24, 0x7E	; 126
    37c2:	94 e0       	ldi	r25, 0x04	; 4
    37c4:	9f 93       	push	r25
    37c6:	8f 93       	push	r24
    37c8:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	//sprintf(printstring, "Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
	//test_outprint(printstring);
	
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    37cc:	84 ef       	ldi	r24, 0xF4	; 244
    37ce:	91 e0       	ldi	r25, 0x01	; 1
    37d0:	d0 d5       	rcall	.+2976   	; 0x4372 <lora_driver_setReceiveDelay>
    37d2:	e6 d6       	rcall	.+3532   	; 0x45a0 <lora_driver_mapReturnCodeToText>
    37d4:	9f 93       	push	r25
    37d6:	8f 93       	push	r24
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	8f 93       	push	r24
    37dc:	84 ef       	ldi	r24, 0xF4	; 244
    37de:	8f 93       	push	r24
    37e0:	8f e9       	ldi	r24, 0x9F	; 159
    37e2:	94 e0       	ldi	r25, 0x04	; 4
    37e4:	9f 93       	push	r25
    37e6:	8f 93       	push	r24
    37e8:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>
    37ec:	0f b6       	in	r0, 0x3f	; 63
    37ee:	f8 94       	cli
    37f0:	de bf       	out	0x3e, r29	; 62
    37f2:	0f be       	out	0x3f, r0	; 63
    37f4:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    37f6:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	bc d4       	rcall	.+2424   	; 0x4174 <lora_driver_join>
    37fc:	08 2f       	mov	r16, r24
    37fe:	d0 d6       	rcall	.+3488   	; 0x45a0 <lora_driver_mapReturnCodeToText>
		
		sprintf(printstring, "Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3800:	9f 93       	push	r25
    3802:	8f 93       	push	r24
    3804:	1f 92       	push	r1
    3806:	1f 93       	push	r17
    3808:	8f eb       	ldi	r24, 0xBF	; 191
    380a:	94 e0       	ldi	r25, 0x04	; 4
    380c:	9f 93       	push	r25
    380e:	8f 93       	push	r24
    3810:	85 ee       	ldi	r24, 0xE5	; 229
    3812:	98 e1       	ldi	r25, 0x18	; 24
    3814:	9f 93       	push	r25
    3816:	8f 93       	push	r24
    3818:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
    381c:	85 ee       	ldi	r24, 0xE5	; 229
		test_outprint(printstring);
    381e:	98 e1       	ldi	r25, 0x18	; 24
    3820:	0b d1       	rcall	.+534    	; 0x3a38 <test_outprint>
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
		
		//printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));

		if ( rc != LORA_ACCEPTED)
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	08 30       	cpi	r16, 0x08	; 8
    382e:	59 f0       	breq	.+22     	; 0x3846 <_lora_setup+0x160>
    3830:	80 e0       	ldi	r24, 0x00	; 0
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3832:	0e 94 76 29 	call	0x52ec	; 0x52ec <status_leds_longPuls>
    3836:	66 e3       	ldi	r22, 0x36	; 54
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3838:	71 e0       	ldi	r23, 0x01	; 1
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 41 10 	call	0x2082	; 0x2082 <vTaskDelay>
    3842:	11 50       	subi	r17, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3844:	c9 f6       	brne	.-78     	; 0x37f8 <_lora_setup+0x112>
    3846:	08 30       	cpi	r16, 0x08	; 8

	if (rc == LORA_ACCEPTED)
    3848:	39 f4       	brne	.+14     	; 0x3858 <_lora_setup+0x172>
    384a:	8f ed       	ldi	r24, 0xDF	; 223
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		test_outprint("\t We have been accepted \n");
    384c:	94 e0       	ldi	r25, 0x04	; 4
    384e:	f4 d0       	rcall	.+488    	; 0x3a38 <test_outprint>
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	0e 94 58 29 	call	0x52b0	; 0x52b0 <status_leds_ledOn>
		status_leds_ledOn(led_ST2); // OPTIONAL
    3856:	09 c0       	rjmp	.+18     	; 0x386a <_lora_setup+0x184>
    3858:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    385a:	0e 94 67 29 	call	0x52ce	; 0x52ce <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	0e 94 35 29 	call	0x526a	; 0x526a <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3864:	0e 94 b5 03 	call	0x76a	; 0x76a <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3868:	fd cf       	rjmp	.-6      	; 0x3864 <_lora_setup+0x17e>
    386a:	64 96       	adiw	r28, 0x14	; 20
    386c:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	df 91       	pop	r29
    3878:	cf 91       	pop	r28
    387a:	1f 91       	pop	r17
    387c:	0f 91       	pop	r16
    387e:	08 95       	ret

00003880 <lora_handler_task>:
    3880:	cf 93       	push	r28
    3882:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3884:	00 d0       	rcall	.+0      	; 0x3886 <lora_handler_task+0x6>
    3886:	1f 92       	push	r1
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	fd d3       	rcall	.+2042   	; 0x408a <lora_driver_resetRn2483>
	vTaskDelay(2);
    3890:	62 e0       	ldi	r22, 0x02	; 2
    3892:	70 e0       	ldi	r23, 0x00	; 0
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	0e 94 41 10 	call	0x2082	; 0x2082 <vTaskDelay>
	lora_driver_resetRn2483(0);
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	f5 d3       	rcall	.+2026   	; 0x408a <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    38a0:	66 e9       	ldi	r22, 0x96	; 150
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	0e 94 41 10 	call	0x2082	; 0x2082 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    38ac:	a7 d3       	rcall	.+1870   	; 0x3ffc <lora_driver_flushBuffers>

	_lora_setup();
    38ae:	1b df       	rcall	.-458    	; 0x36e6 <_lora_setup>
    38b0:	e1 e7       	ldi	r30, 0x71	; 113

	// DEFINING SIZE OF PAYLOAD
	_uplink_payload.len = 8;
    38b2:	f7 e1       	ldi	r31, 0x17	; 23
    38b4:	88 e0       	ldi	r24, 0x08	; 8
    38b6:	81 83       	std	Z+1, r24	; 0x01
    38b8:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    38ba:	80 83       	st	Z, r24
    38bc:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // UNDER TESTING 30000 (30 sec) Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    38c0:	69 83       	std	Y+1, r22	; 0x01
    38c2:	7a 83       	std	Y+2, r23	; 0x02
    38c4:	8b 83       	std	Y+3, r24	; 0x03
    38c6:	9c 83       	std	Y+4, r25	; 0x04
    38c8:	89 ef       	ldi	r24, 0xF9	; 249
	for(;;)
	{
		uint16_t growbroId = 1;
					
			
		printf("\t going into delay \n");
    38ca:	94 e0       	ldi	r25, 0x04	; 4
    38cc:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <puts>
    38d0:	48 ea       	ldi	r20, 0xA8	; 168
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    38d2:	58 e4       	ldi	r21, 0x48	; 72
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	70 e0       	ldi	r23, 0x00	; 0
    38d8:	ce 01       	movw	r24, r28
    38da:	01 96       	adiw	r24, 0x01	; 1
    38dc:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <xTaskDelayUntil>
    38e0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <dequeueSharedData>
		
		// Creating struct and dequeueing data
		SharedData_t sharedData;
		sharedData = dequeueSharedData();
    38e4:	8c 01       	movw	r16, r24
    38e6:	dc 01       	movw	r26, r24
		
		printf("DEQUEUE: humidity: %d, co2: %d, Temp: %d \n", sharedData->humidity, sharedData->co2, sharedData->temperature);
    38e8:	13 96       	adiw	r26, 0x03	; 3
    38ea:	8c 91       	ld	r24, X
    38ec:	13 97       	sbiw	r26, 0x03	; 3
    38ee:	8f 93       	push	r24
    38f0:	12 96       	adiw	r26, 0x02	; 2
    38f2:	8c 91       	ld	r24, X
    38f4:	12 97       	sbiw	r26, 0x02	; 2
    38f6:	8f 93       	push	r24
    38f8:	11 96       	adiw	r26, 0x01	; 1
    38fa:	8c 91       	ld	r24, X
    38fc:	11 97       	sbiw	r26, 0x01	; 1
    38fe:	8f 93       	push	r24
    3900:	8c 91       	ld	r24, X
    3902:	8f 93       	push	r24
    3904:	15 96       	adiw	r26, 0x05	; 5
    3906:	8c 91       	ld	r24, X
    3908:	15 97       	sbiw	r26, 0x05	; 5
    390a:	8f 93       	push	r24
    390c:	14 96       	adiw	r26, 0x04	; 4
    390e:	8c 91       	ld	r24, X
    3910:	8f 93       	push	r24
    3912:	8d e0       	ldi	r24, 0x0D	; 13
    3914:	95 e0       	ldi	r25, 0x05	; 5
    3916:	9f 93       	push	r25
    3918:	8f 93       	push	r24
    391a:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>
    391e:	e1 e7       	ldi	r30, 0x71	; 113
		
		// CREATING OUR OWN PAYLOAD
		_uplink_payload.bytes[0] = growbroId >> 8;
    3920:	f7 e1       	ldi	r31, 0x17	; 23
    3922:	12 82       	std	Z+2, r1	; 0x02
    3924:	81 e0       	ldi	r24, 0x01	; 1
		_uplink_payload.bytes[1] = growbroId & 0xFF;
    3926:	83 83       	std	Z+3, r24	; 0x03
    3928:	d8 01       	movw	r26, r16
		_uplink_payload.bytes[2] = sharedData->co2 >> 8;
    392a:	11 96       	adiw	r26, 0x01	; 1
    392c:	8c 91       	ld	r24, X
    392e:	11 97       	sbiw	r26, 0x01	; 1
    3930:	84 83       	std	Z+4, r24	; 0x04
    3932:	8c 91       	ld	r24, X
		_uplink_payload.bytes[3] = sharedData->co2 & 0xFF;
    3934:	85 83       	std	Z+5, r24	; 0x05
    3936:	15 96       	adiw	r26, 0x05	; 5
		_uplink_payload.bytes[4] = sharedData->humidity >> 8;
    3938:	8c 91       	ld	r24, X
    393a:	15 97       	sbiw	r26, 0x05	; 5
    393c:	86 83       	std	Z+6, r24	; 0x06
    393e:	14 96       	adiw	r26, 0x04	; 4
		_uplink_payload.bytes[5] = sharedData->humidity & 0xFF;
    3940:	8c 91       	ld	r24, X
    3942:	14 97       	sbiw	r26, 0x04	; 4
    3944:	87 83       	std	Z+7, r24	; 0x07
    3946:	13 96       	adiw	r26, 0x03	; 3
		_uplink_payload.bytes[6] = sharedData->temperature >> 8;
    3948:	8c 91       	ld	r24, X
    394a:	13 97       	sbiw	r26, 0x03	; 3
    394c:	80 87       	std	Z+8, r24	; 0x08
    394e:	12 96       	adiw	r26, 0x02	; 2
		_uplink_payload.bytes[7] = sharedData->temperature & 0xFF;
    3950:	8c 91       	ld	r24, X
    3952:	81 87       	std	Z+9, r24	; 0x09
    3954:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3956:	0e 94 88 29 	call	0x5310	; 0x5310 <status_leds_shortPuls>
		
		// SENDING PAYLOAD
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    395a:	61 e7       	ldi	r22, 0x71	; 113
    395c:	77 e1       	ldi	r23, 0x17	; 23
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	32 d4       	rcall	.+2148   	; 0x41c6 <lora_driver_sendUploadMessage>
    3962:	1e d6       	rcall	.+3132   	; 0x45a0 <lora_driver_mapReturnCodeToText>
    3964:	9f 93       	push	r25
    3966:	8f 93       	push	r24
    3968:	88 e3       	ldi	r24, 0x38	; 56
    396a:	95 e0       	ldi	r25, 0x05	; 5
    396c:	9f 93       	push	r25
    396e:	8f 93       	push	r24
    3970:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	a4 cf       	rjmp	.-184    	; 0x38c8 <lora_handler_task+0x48>

00003980 <task_download>:
    3980:	cf 93       	push	r28
	}

}

void task_download( void *pvParameters )
{
    3982:	df 93       	push	r29
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    3988:	66 97       	sbiw	r28, 0x16	; 22
    398a:	0f b6       	in	r0, 0x3f	; 63
    398c:	f8 94       	cli
    398e:	de bf       	out	0x3e, r29	; 62
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	cd bf       	out	0x3d, r28	; 61

	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	79 d3       	rcall	.+1778   	; 0x408a <lora_driver_resetRn2483>
	vTaskDelay(2);
    3998:	62 e0       	ldi	r22, 0x02	; 2
    399a:	70 e0       	ldi	r23, 0x00	; 0
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	0e 94 41 10 	call	0x2082	; 0x2082 <vTaskDelay>
	lora_driver_resetRn2483(0);
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	71 d3       	rcall	.+1762   	; 0x408a <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    39a8:	66 e9       	ldi	r22, 0x96	; 150
    39aa:	70 e0       	ldi	r23, 0x00	; 0
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	0e 94 41 10 	call	0x2082	; 0x2082 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    39b4:	23 d3       	rcall	.+1606   	; 0x3ffc <lora_driver_flushBuffers>
	uint16_t recieve;
	for(;;)
	{	
		lora_driver_payload_t downlinkPayload;
		
		xMessageBufferReceive(downlinkMessageBufferHandle, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    39b6:	0f ef       	ldi	r16, 0xFF	; 255
    39b8:	1f ef       	ldi	r17, 0xFF	; 255
    39ba:	98 01       	movw	r18, r16
    39bc:	46 e1       	ldi	r20, 0x16	; 22
    39be:	50 e0       	ldi	r21, 0x00	; 0
    39c0:	be 01       	movw	r22, r28
    39c2:	6f 5f       	subi	r22, 0xFF	; 255
    39c4:	7f 4f       	sbci	r23, 0xFF	; 255
    39c6:	80 91 5d 19 	lds	r24, 0x195D	; 0x80195d <downlinkMessageBufferHandle>
    39ca:	90 91 5e 19 	lds	r25, 0x195E	; 0x80195e <downlinkMessageBufferHandle+0x1>
    39ce:	0e 94 a2 0a 	call	0x1544	; 0x1544 <xStreamBufferReceive>
		printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len); // Just for Debug
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	1f 92       	push	r1
    39d8:	9f 93       	push	r25
    39da:	1f 92       	push	r1
    39dc:	8f 93       	push	r24
    39de:	8d e4       	ldi	r24, 0x4D	; 77
    39e0:	95 e0       	ldi	r25, 0x05	; 5
    39e2:	9f 93       	push	r25
    39e4:	8f 93       	push	r24
    39e6:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	df cf       	rjmp	.-66     	; 0x39b6 <task_download+0x36>

000039f8 <lora_handler_initialise>:
void task_download( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    39f8:	ef 92       	push	r14
    39fa:	ff 92       	push	r15
    39fc:	0f 93       	push	r16
    39fe:	cf 93       	push	r28
	xTaskCreate(
    3a00:	e1 2c       	mov	r14, r1
    3a02:	f1 2c       	mov	r15, r1
    3a04:	08 2f       	mov	r16, r24
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	48 e8       	ldi	r20, 0x88	; 136
    3a0c:	51 e0       	ldi	r21, 0x01	; 1
    3a0e:	6e e7       	ldi	r22, 0x7E	; 126
    3a10:	75 e0       	ldi	r23, 0x05	; 5
    3a12:	80 e4       	ldi	r24, 0x40	; 64
    3a14:	9c e1       	ldi	r25, 0x1C	; 28
    3a16:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
		xTaskCreate(
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	48 e8       	ldi	r20, 0x88	; 136
    3a20:	51 e0       	ldi	r21, 0x01	; 1
    3a22:	65 e8       	ldi	r22, 0x85	; 133
    3a24:	75 e0       	ldi	r23, 0x05	; 5
    3a26:	80 ec       	ldi	r24, 0xC0	; 192
    3a28:	9c e1       	ldi	r25, 0x1C	; 28
    3a2a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <xTaskCreate>
	,  "LRHanddown"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3a2e:	cf 91       	pop	r28
    3a30:	0f 91       	pop	r16
    3a32:	ff 90       	pop	r15
    3a34:	ef 90       	pop	r14
    3a36:	08 95       	ret

00003a38 <test_outprint>:
 */ 

#include "../semaphore/header/testOutprint.h"


void test_outprint(char* outprint) {
    3a38:	0f 93       	push	r16
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
    3a3e:	c8 2f       	mov	r28, r24
    3a40:	d9 2f       	mov	r29, r25
	//TickType_t xLastWakeTime;
	//const TickType_t xFrequency = 50/portTICK_PERIOD_MS;
	//xLastWakeTime = xTaskGetTickCount();
	//xTaskDelayUntil( &xLastWakeTime, xFrequency );
	
	if( xSemaphoreTake( xSemaphore, ( TickType_t ) 100 ) == pdTRUE )
    3a42:	44 e6       	ldi	r20, 0x64	; 100
    3a44:	50 e0       	ldi	r21, 0x00	; 0
    3a46:	60 e0       	ldi	r22, 0x00	; 0
    3a48:	70 e0       	ldi	r23, 0x00	; 0
    3a4a:	80 91 e3 18 	lds	r24, 0x18E3	; 0x8018e3 <xSemaphore>
    3a4e:	90 91 e4 18 	lds	r25, 0x18E4	; 0x8018e4 <xSemaphore+0x1>
    3a52:	0e 94 29 07 	call	0xe52	; 0xe52 <xQueueSemaphoreTake>
    3a56:	81 30       	cpi	r24, 0x01	; 1
    3a58:	99 f4       	brne	.+38     	; 0x3a80 <test_outprint+0x48>
	{
		printf(outprint);
    3a5a:	df 93       	push	r29
    3a5c:	cf 93       	push	r28
    3a5e:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <printf>
		fflush(stdout);
		xSemaphoreGive( xSemaphore );
    3a62:	00 e0       	ldi	r16, 0x00	; 0
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	a9 01       	movw	r20, r18
    3a6a:	60 e0       	ldi	r22, 0x00	; 0
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
    3a6e:	80 91 e3 18 	lds	r24, 0x18E3	; 0x8018e3 <xSemaphore>
    3a72:	90 91 e4 18 	lds	r25, 0x18E4	; 0x8018e4 <xSemaphore+0x1>
    3a76:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	04 c0       	rjmp	.+8      	; 0x3a88 <test_outprint+0x50>
	}
	else
	{ 
		puts("The semaphore was already taken");
    3a80:	80 e9       	ldi	r24, 0x90	; 144
    3a82:	95 e0       	ldi	r25, 0x05	; 5
    3a84:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <puts>
	}
	
}
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	0f 91       	pop	r16
    3a8e:	08 95       	ret

00003a90 <initializeSemaphore>:

void initializeSemaphore(){
    3a90:	0f 93       	push	r16
	xSemaphore = xSemaphoreCreateBinary();
    3a92:	43 e0       	ldi	r20, 0x03	; 3
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	0e 94 aa 05 	call	0xb54	; 0xb54 <xQueueGenericCreate>
    3a9c:	90 93 e4 18 	sts	0x18E4, r25	; 0x8018e4 <xSemaphore+0x1>
    3aa0:	80 93 e3 18 	sts	0x18E3, r24	; 0x8018e3 <xSemaphore>
	xSemaphoreGive(xSemaphore);
    3aa4:	00 e0       	ldi	r16, 0x00	; 0
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	a9 01       	movw	r20, r18
    3aac:	60 e0       	ldi	r22, 0x00	; 0
    3aae:	70 e0       	ldi	r23, 0x00	; 0
    3ab0:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
    3ab4:	0f 91       	pop	r16
    3ab6:	08 95       	ret

00003ab8 <takeMeasure>:
	
}


void takeMeasure(void *pvParameters)
{
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <takeMeasure+0x6>
    3abe:	1f 92       	push	r1
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2000/portTICK_PERIOD_MS; // 60 s

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3ac4:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <xTaskGetTickCount>
    3ac8:	69 83       	std	Y+1, r22	; 0x01
    3aca:	7a 83       	std	Y+2, r23	; 0x02
    3acc:	8b 83       	std	Y+3, r24	; 0x03
    3ace:	9c 83       	std	Y+4, r25	; 0x04
		
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3ad0:	4d e7       	ldi	r20, 0x7D	; 125
    3ad2:	50 e0       	ldi	r21, 0x00	; 0
    3ad4:	60 e0       	ldi	r22, 0x00	; 0
    3ad6:	70 e0       	ldi	r23, 0x00	; 0
    3ad8:	ce 01       	movw	r24, r28
    3ada:	01 96       	adiw	r24, 0x01	; 1
    3adc:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <xTaskDelayUntil>
		tempHumMeasure();	
    3ae0:	4a dd       	rcall	.-1388   	; 0x3576 <tempHumMeasure>
		co2Measure(); // Call CO2HandlerImpl to take measure
    3ae2:	91 dc       	rcall	.-1758   	; 0x3406 <co2Measure>
    3ae4:	f5 cf       	rjmp	.-22     	; 0x3ad0 <takeMeasure+0x18>

00003ae6 <enqueueMeasures>:
    3ae6:	cf 93       	push	r28
	}
}

void enqueueMeasures(void *pvParameters)
{
    3ae8:	df 93       	push	r29
    3aea:	00 d0       	rcall	.+0      	; 0x3aec <enqueueMeasures+0x6>
    3aec:	1f 92       	push	r1
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 22000/portTICK_PERIOD_MS; // 65 s

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3af2:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <xTaskGetTickCount>
    3af6:	69 83       	std	Y+1, r22	; 0x01
    3af8:	7a 83       	std	Y+2, r23	; 0x02
    3afa:	8b 83       	std	Y+3, r24	; 0x03
    3afc:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3afe:	4f e5       	ldi	r20, 0x5F	; 95
    3b00:	55 e0       	ldi	r21, 0x05	; 5
    3b02:	60 e0       	ldi	r22, 0x00	; 0
    3b04:	70 e0       	ldi	r23, 0x00	; 0
    3b06:	ce 01       	movw	r24, r28
    3b08:	01 96       	adiw	r24, 0x01	; 1
    3b0a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <xTaskDelayUntil>
		enqueueSharedData(); // Call SharedDataQueueImpl to enqueue the measures
    3b0e:	0e 94 11 01 	call	0x222	; 0x222 <enqueueSharedData>
    3b12:	f5 cf       	rjmp	.-22     	; 0x3afe <enqueueMeasures+0x18>

00003b14 <setupTasks>:
void takeMeasure( void *pvParameters );
void enqueueMeasures( void *pvParameters );


void setupTasks(void) // Can only setup 2 tasks, memory problems?
{
    3b14:	ef 92       	push	r14
    3b16:	ff 92       	push	r15
    3b18:	0f 93       	push	r16
	
	xTaskCreate(
    3b1a:	e1 2c       	mov	r14, r1
    3b1c:	f1 2c       	mov	r15, r1
    3b1e:	00 e0       	ldi	r16, 0x00	; 0
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 ec       	ldi	r20, 0xC0	; 192
    3b26:	50 e0       	ldi	r21, 0x00	; 0
    3b28:	60 eb       	ldi	r22, 0xB0	; 176
    3b2a:	75 e0       	ldi	r23, 0x05	; 5
    3b2c:	8c e5       	ldi	r24, 0x5C	; 92
    3b2e:	9d e1       	ldi	r25, 0x1D	; 29
    3b30:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0 // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 ec       	ldi	r20, 0xC0	; 192
    3b3a:	50 e0       	ldi	r21, 0x00	; 0
    3b3c:	6c eb       	ldi	r22, 0xBC	; 188
    3b3e:	75 e0       	ldi	r23, 0x05	; 5
    3b40:	83 e7       	ldi	r24, 0x73	; 115
    3b42:	9d e1       	ldi	r25, 0x1D	; 29
    3b44:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  0  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );	
	
}
    3b48:	0f 91       	pop	r16
    3b4a:	ff 90       	pop	r15
    3b4c:	ef 90       	pop	r14
    3b4e:	08 95       	ret

00003b50 <startTasks>:
}


void startTasks()
{
	setupTasks();
    3b50:	e1 df       	rcall	.-62     	; 0x3b14 <setupTasks>
	
	sprintf(printstring, "Heapsize: %d \n", xPortGetFreeHeapSize());
    3b52:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <xPortGetFreeHeapSize>
    3b56:	9f 93       	push	r25
    3b58:	8f 93       	push	r24
    3b5a:	8c ec       	ldi	r24, 0xCC	; 204
    3b5c:	95 e0       	ldi	r25, 0x05	; 5
    3b5e:	9f 93       	push	r25
    3b60:	8f 93       	push	r24
    3b62:	85 ee       	ldi	r24, 0xE5	; 229
    3b64:	98 e1       	ldi	r25, 0x18	; 24
    3b66:	9f 93       	push	r25
    3b68:	8f 93       	push	r24
    3b6a:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
	test_outprint(printstring);
    3b6e:	85 ee       	ldi	r24, 0xE5	; 229
    3b70:	98 e1       	ldi	r25, 0x18	; 24
    3b72:	62 df       	rcall	.-316    	; 0x3a38 <test_outprint>
	
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3b74:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <vTaskStartScheduler>
}
    3b78:	0f 90       	pop	r0
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	08 95       	ret

00003b86 <initialiseSystem>:
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void initialiseSystem()
{
printf("Program Started!!\n");
    3b86:	8b ed       	ldi	r24, 0xDB	; 219
    3b88:	95 e0       	ldi	r25, 0x05	; 5
    3b8a:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <puts>
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3b8e:	81 b1       	in	r24, 0x01	; 1
    3b90:	81 68       	ori	r24, 0x81	; 129
    3b92:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <stdio_initialise>
	
	// Initialize queues
	initializeCO2Queue();
    3b9c:	2a dc       	rcall	.-1964   	; 0x33f2 <initializeCO2Queue>
	initializeTempHumQueues();
    3b9e:	72 dc       	rcall	.-1820   	; 0x3484 <initializeTempHumQueues>
    3ba0:	0e 94 08 01 	call	0x210	; 0x210 <initializeSharedDataQueue>
	initializeSharedDataQueue();

	// Initializing co2 sensor
	mh_z19_initialise(ser_USART3);
    3ba4:	83 e0       	ldi	r24, 0x03	; 3
    3ba6:	d8 d5       	rcall	.+2992   	; 0x4758 <mh_z19_initialise>
	hih8120_initialise();
    3ba8:	a3 d0       	rcall	.+326    	; 0x3cf0 <hih8120_initialise>
    3baa:	85 e0       	ldi	r24, 0x05	; 5



	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3bac:	0e 94 c4 28 	call	0x5188	; 0x5188 <status_leds_initialise>
    3bb0:	41 e0       	ldi	r20, 0x01	; 1
	// Initialise the LoRaWAN driver without down-link buffer
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t));
    3bb2:	60 e0       	ldi	r22, 0x00	; 0
    3bb4:	70 e0       	ldi	r23, 0x00	; 0
    3bb6:	86 e1       	ldi	r24, 0x16	; 22
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	0e 94 39 09 	call	0x1272	; 0x1272 <xStreamBufferGenericCreate>
    3bbe:	90 93 5e 19 	sts	0x195E, r25	; 0x80195e <downlinkMessageBufferHandle+0x1>
    3bc2:	80 93 5d 19 	sts	0x195D, r24	; 0x80195d <downlinkMessageBufferHandle>
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    3bc6:	bc 01       	movw	r22, r24
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	1f d2       	rcall	.+1086   	; 0x400a <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3bcc:	83 e0       	ldi	r24, 0x03	; 3
    3bce:	14 cf       	rjmp	.-472    	; 0x39f8 <lora_handler_initialise>
    3bd0:	08 95       	ret

00003bd2 <main>:
    3bd2:	d9 df       	rcall	.-78     	; 0x3b86 <initialiseSystem>
/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	
	initializeSemaphore();
    3bd4:	5d df       	rcall	.-326    	; 0x3a90 <initializeSemaphore>
    3bd6:	8d ee       	ldi	r24, 0xED	; 237
	
	puts("Program started!");
    3bd8:	95 e0       	ldi	r25, 0x05	; 5
    3bda:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <puts>
	
	startTasks();
    3bde:	b8 df       	rcall	.-144    	; 0x3b50 <startTasks>
    3be0:	ff cf       	rjmp	.-2      	; 0x3be0 <main+0xe>

00003be2 <__fixsfsi>:
    3be2:	04 d0       	rcall	.+8      	; 0x3bec <__fixunssfsi>
    3be4:	68 94       	set
    3be6:	b1 11       	cpse	r27, r1
    3be8:	50 c0       	rjmp	.+160    	; 0x3c8a <__fp_szero>
    3bea:	08 95       	ret

00003bec <__fixunssfsi>:
    3bec:	33 d0       	rcall	.+102    	; 0x3c54 <__fp_splitA>
    3bee:	88 f0       	brcs	.+34     	; 0x3c12 <__fixunssfsi+0x26>
    3bf0:	9f 57       	subi	r25, 0x7F	; 127
    3bf2:	90 f0       	brcs	.+36     	; 0x3c18 <__fixunssfsi+0x2c>
    3bf4:	b9 2f       	mov	r27, r25
    3bf6:	99 27       	eor	r25, r25
    3bf8:	b7 51       	subi	r27, 0x17	; 23
    3bfa:	a0 f0       	brcs	.+40     	; 0x3c24 <__fixunssfsi+0x38>
    3bfc:	d1 f0       	breq	.+52     	; 0x3c32 <__fixunssfsi+0x46>
    3bfe:	66 0f       	add	r22, r22
    3c00:	77 1f       	adc	r23, r23
    3c02:	88 1f       	adc	r24, r24
    3c04:	99 1f       	adc	r25, r25
    3c06:	1a f0       	brmi	.+6      	; 0x3c0e <__fixunssfsi+0x22>
    3c08:	ba 95       	dec	r27
    3c0a:	c9 f7       	brne	.-14     	; 0x3bfe <__fixunssfsi+0x12>
    3c0c:	12 c0       	rjmp	.+36     	; 0x3c32 <__fixunssfsi+0x46>
    3c0e:	b1 30       	cpi	r27, 0x01	; 1
    3c10:	81 f0       	breq	.+32     	; 0x3c32 <__fixunssfsi+0x46>
    3c12:	3a d0       	rcall	.+116    	; 0x3c88 <__fp_zero>
    3c14:	b1 e0       	ldi	r27, 0x01	; 1
    3c16:	08 95       	ret
    3c18:	37 c0       	rjmp	.+110    	; 0x3c88 <__fp_zero>
    3c1a:	67 2f       	mov	r22, r23
    3c1c:	78 2f       	mov	r23, r24
    3c1e:	88 27       	eor	r24, r24
    3c20:	b8 5f       	subi	r27, 0xF8	; 248
    3c22:	39 f0       	breq	.+14     	; 0x3c32 <__fixunssfsi+0x46>
    3c24:	b9 3f       	cpi	r27, 0xF9	; 249
    3c26:	cc f3       	brlt	.-14     	; 0x3c1a <__fixunssfsi+0x2e>
    3c28:	86 95       	lsr	r24
    3c2a:	77 95       	ror	r23
    3c2c:	67 95       	ror	r22
    3c2e:	b3 95       	inc	r27
    3c30:	d9 f7       	brne	.-10     	; 0x3c28 <__fixunssfsi+0x3c>
    3c32:	3e f4       	brtc	.+14     	; 0x3c42 <__fixunssfsi+0x56>
    3c34:	90 95       	com	r25
    3c36:	80 95       	com	r24
    3c38:	70 95       	com	r23
    3c3a:	61 95       	neg	r22
    3c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c40:	9f 4f       	sbci	r25, 0xFF	; 255
    3c42:	08 95       	ret

00003c44 <__fp_split3>:
    3c44:	57 fd       	sbrc	r21, 7
    3c46:	90 58       	subi	r25, 0x80	; 128
    3c48:	44 0f       	add	r20, r20
    3c4a:	55 1f       	adc	r21, r21
    3c4c:	59 f0       	breq	.+22     	; 0x3c64 <__fp_splitA+0x10>
    3c4e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c50:	71 f0       	breq	.+28     	; 0x3c6e <__fp_splitA+0x1a>
    3c52:	47 95       	ror	r20

00003c54 <__fp_splitA>:
    3c54:	88 0f       	add	r24, r24
    3c56:	97 fb       	bst	r25, 7
    3c58:	99 1f       	adc	r25, r25
    3c5a:	61 f0       	breq	.+24     	; 0x3c74 <__fp_splitA+0x20>
    3c5c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c5e:	79 f0       	breq	.+30     	; 0x3c7e <__fp_splitA+0x2a>
    3c60:	87 95       	ror	r24
    3c62:	08 95       	ret
    3c64:	12 16       	cp	r1, r18
    3c66:	13 06       	cpc	r1, r19
    3c68:	14 06       	cpc	r1, r20
    3c6a:	55 1f       	adc	r21, r21
    3c6c:	f2 cf       	rjmp	.-28     	; 0x3c52 <__fp_split3+0xe>
    3c6e:	46 95       	lsr	r20
    3c70:	f1 df       	rcall	.-30     	; 0x3c54 <__fp_splitA>
    3c72:	08 c0       	rjmp	.+16     	; 0x3c84 <__fp_splitA+0x30>
    3c74:	16 16       	cp	r1, r22
    3c76:	17 06       	cpc	r1, r23
    3c78:	18 06       	cpc	r1, r24
    3c7a:	99 1f       	adc	r25, r25
    3c7c:	f1 cf       	rjmp	.-30     	; 0x3c60 <__fp_splitA+0xc>
    3c7e:	86 95       	lsr	r24
    3c80:	71 05       	cpc	r23, r1
    3c82:	61 05       	cpc	r22, r1
    3c84:	08 94       	sec
    3c86:	08 95       	ret

00003c88 <__fp_zero>:
    3c88:	e8 94       	clt

00003c8a <__fp_szero>:
    3c8a:	bb 27       	eor	r27, r27
    3c8c:	66 27       	eor	r22, r22
    3c8e:	77 27       	eor	r23, r23
    3c90:	cb 01       	movw	r24, r22
    3c92:	97 f9       	bld	r25, 7
    3c94:	08 95       	ret

00003c96 <_hihTwiCallback>:
    3c96:	65 30       	cpi	r22, 0x05	; 5
    3c98:	f1 f4       	brne	.+60     	; 0x3cd6 <_hihTwiCallback+0x40>
    3c9a:	fa 01       	movw	r30, r20
    3c9c:	80 81       	ld	r24, Z
    3c9e:	8f 73       	andi	r24, 0x3F	; 63
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	98 2f       	mov	r25, r24
    3ca4:	88 27       	eor	r24, r24
    3ca6:	21 81       	ldd	r18, Z+1	; 0x01
    3ca8:	82 2b       	or	r24, r18
    3caa:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3cae:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3cb2:	82 81       	ldd	r24, Z+2	; 0x02
    3cb4:	f0 e4       	ldi	r31, 0x40	; 64
    3cb6:	8f 9f       	mul	r24, r31
    3cb8:	c0 01       	movw	r24, r0
    3cba:	11 24       	eor	r1, r1
    3cbc:	fa 01       	movw	r30, r20
    3cbe:	23 81       	ldd	r18, Z+3	; 0x03
    3cc0:	26 95       	lsr	r18
    3cc2:	26 95       	lsr	r18
    3cc4:	82 2b       	or	r24, r18
    3cc6:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3cca:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	80 93 87 17 	sts	0x1787, r24	; 0x801787 <_measuringIsReady>
    3cd4:	08 95       	ret
    3cd6:	64 30       	cpi	r22, 0x04	; 4
    3cd8:	51 f0       	breq	.+20     	; 0x3cee <_hihTwiCallback+0x58>
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	90 e4       	ldi	r25, 0x40	; 64
    3cde:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3ce2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3ce6:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3cea:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3cee:	08 95       	ret

00003cf0 <hih8120_initialise>:
    3cf0:	0f 93       	push	r16
    3cf2:	1f 93       	push	r17
    3cf4:	0b e4       	ldi	r16, 0x4B	; 75
    3cf6:	1e e1       	ldi	r17, 0x1E	; 30
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	34 e2       	ldi	r19, 0x24	; 36
    3cfc:	44 ef       	ldi	r20, 0xF4	; 244
    3cfe:	50 e0       	ldi	r21, 0x00	; 0
    3d00:	60 e0       	ldi	r22, 0x00	; 0
    3d02:	87 e2       	ldi	r24, 0x27	; 39
    3d04:	0e 94 ab 29 	call	0x5356	; 0x5356 <twiCreate>
    3d08:	90 93 89 17 	sts	0x1789, r25	; 0x801789 <_hih8120Handler+0x1>
    3d0c:	80 93 88 17 	sts	0x1788, r24	; 0x801788 <_hih8120Handler>
    3d10:	21 e0       	ldi	r18, 0x01	; 1
    3d12:	89 2b       	or	r24, r25
    3d14:	09 f0       	breq	.+2      	; 0x3d18 <hih8120_initialise+0x28>
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	82 2f       	mov	r24, r18
    3d1a:	1f 91       	pop	r17
    3d1c:	0f 91       	pop	r16
    3d1e:	08 95       	ret

00003d20 <hih8120_wakeup>:
    3d20:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <_hih8120Handler>
    3d24:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <_hih8120Handler+0x1>
    3d28:	00 97       	sbiw	r24, 0x00	; 0
    3d2a:	59 f0       	breq	.+22     	; 0x3d42 <hih8120_wakeup+0x22>
    3d2c:	40 e0       	ldi	r20, 0x00	; 0
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	70 e0       	ldi	r23, 0x00	; 0
    3d32:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <twiTransmit>
    3d36:	84 30       	cpi	r24, 0x04	; 4
    3d38:	31 f4       	brne	.+12     	; 0x3d46 <hih8120_wakeup+0x26>
    3d3a:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <_measuringIsReady>
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	08 95       	ret
    3d42:	82 e0       	ldi	r24, 0x02	; 2
    3d44:	08 95       	ret
    3d46:	83 e0       	ldi	r24, 0x03	; 3
    3d48:	08 95       	ret

00003d4a <hih8120_measure>:
    3d4a:	80 91 88 17 	lds	r24, 0x1788	; 0x801788 <_hih8120Handler>
    3d4e:	90 91 89 17 	lds	r25, 0x1789	; 0x801789 <_hih8120Handler+0x1>
    3d52:	00 97       	sbiw	r24, 0x00	; 0
    3d54:	39 f0       	breq	.+14     	; 0x3d64 <hih8120_measure+0x1a>
    3d56:	64 e0       	ldi	r22, 0x04	; 4
    3d58:	0e 94 48 2a 	call	0x5490	; 0x5490 <twiReceive>
    3d5c:	85 30       	cpi	r24, 0x05	; 5
    3d5e:	21 f0       	breq	.+8      	; 0x3d68 <hih8120_measure+0x1e>
    3d60:	83 e0       	ldi	r24, 0x03	; 3
    3d62:	08 95       	ret
    3d64:	82 e0       	ldi	r24, 0x02	; 2
    3d66:	08 95       	ret
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	08 95       	ret

00003d6c <hih8120_getHumidity>:
    3d6c:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3d70:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	0e 94 26 2c 	call	0x584c	; 0x584c <__floatunsisf>
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	48 ec       	ldi	r20, 0xC8	; 200
    3d82:	52 e4       	ldi	r21, 0x42	; 66
    3d84:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__mulsf3>
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	38 ef       	ldi	r19, 0xF8	; 248
    3d8c:	4f e7       	ldi	r20, 0x7F	; 127
    3d8e:	56 e4       	ldi	r21, 0x46	; 70
    3d90:	0c 94 bb 2b 	jmp	0x5776	; 0x5776 <__divsf3>
    3d94:	08 95       	ret

00003d96 <hih8120_getTemperature>:
    3d96:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3d9a:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 26 2c 	call	0x584c	; 0x584c <__floatunsisf>
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	45 e2       	ldi	r20, 0x25	; 37
    3dac:	53 e4       	ldi	r21, 0x43	; 67
    3dae:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__mulsf3>
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	38 ef       	ldi	r19, 0xF8	; 248
    3db6:	4f e7       	ldi	r20, 0x7F	; 127
    3db8:	56 e4       	ldi	r21, 0x46	; 70
    3dba:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__divsf3>
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	40 e2       	ldi	r20, 0x20	; 32
    3dc4:	52 e4       	ldi	r21, 0x42	; 66
    3dc6:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__subsf3>
    3dca:	08 95       	ret

00003dcc <_serialCallBack>:
    3dcc:	0f 93       	push	r16
    3dce:	1f 93       	push	r17
    3dd0:	cf 93       	push	r28
    3dd2:	df 93       	push	r29
    3dd4:	1f 92       	push	r1
    3dd6:	1f 92       	push	r1
    3dd8:	cd b7       	in	r28, 0x3d	; 61
    3dda:	de b7       	in	r29, 0x3e	; 62
    3ddc:	8c 01       	movw	r16, r24
    3dde:	19 82       	std	Y+1, r1	; 0x01
    3de0:	2d c0       	rjmp	.+90     	; 0x3e3c <_serialCallBack+0x70>
    3de2:	e0 91 ee 17 	lds	r30, 0x17EE	; 0x8017ee <rec_buf_inp.2878>
    3de6:	ec 32       	cpi	r30, 0x2C	; 44
    3de8:	50 f4       	brcc	.+20     	; 0x3dfe <_serialCallBack+0x32>
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	8e 0f       	add	r24, r30
    3dee:	80 93 ee 17 	sts	0x17EE, r24	; 0x8017ee <rec_buf_inp.2878>
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	e0 5e       	subi	r30, 0xE0	; 224
    3df6:	f7 4e       	sbci	r31, 0xE7	; 231
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	80 83       	st	Z, r24
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <_serialCallBack+0x36>
    3dfe:	10 92 ee 17 	sts	0x17EE, r1	; 0x8017ee <rec_buf_inp.2878>
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
    3e04:	8a 30       	cpi	r24, 0x0A	; 10
    3e06:	d1 f4       	brne	.+52     	; 0x3e3c <_serialCallBack+0x70>
    3e08:	40 91 ee 17 	lds	r20, 0x17EE	; 0x8017ee <rec_buf_inp.2878>
    3e0c:	50 e0       	ldi	r21, 0x00	; 0
    3e0e:	fa 01       	movw	r30, r20
    3e10:	e2 5e       	subi	r30, 0xE2	; 226
    3e12:	f7 4e       	sbci	r31, 0xE7	; 231
    3e14:	10 82       	st	Z, r1
    3e16:	41 50       	subi	r20, 0x01	; 1
    3e18:	51 09       	sbc	r21, r1
    3e1a:	9e 01       	movw	r18, r28
    3e1c:	2f 5f       	subi	r18, 0xFF	; 255
    3e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e20:	60 e2       	ldi	r22, 0x20	; 32
    3e22:	78 e1       	ldi	r23, 0x18	; 24
    3e24:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <_serialReplyBufferHandle>
    3e28:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <_serialReplyBufferHandle+0x1>
    3e2c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <xStreamBufferSendFromISR>
    3e30:	89 81       	ldd	r24, Y+1	; 0x01
    3e32:	81 11       	cpse	r24, r1
    3e34:	0e 94 b5 03 	call	0x76a	; 0x76a <vPortYield>
    3e38:	10 92 ee 17 	sts	0x17EE, r1	; 0x8017ee <rec_buf_inp.2878>
    3e3c:	be 01       	movw	r22, r28
    3e3e:	6e 5f       	subi	r22, 0xFE	; 254
    3e40:	7f 4f       	sbci	r23, 0xFF	; 255
    3e42:	c8 01       	movw	r24, r16
    3e44:	04 d6       	rcall	.+3080   	; 0x4a4e <serial_getByte>
    3e46:	88 23       	and	r24, r24
    3e48:	61 f2       	breq	.-104    	; 0x3de2 <_serialCallBack+0x16>
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	08 95       	ret

00003e58 <_uploadMessage>:
    3e58:	0f 93       	push	r16
    3e5a:	1f 93       	push	r17
    3e5c:	cf 93       	push	r28
    3e5e:	df 93       	push	r29
    3e60:	8c 01       	movw	r16, r24
    3e62:	eb 01       	movw	r28, r22
    3e64:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <_serialReplyBufferHandle>
    3e68:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <_serialReplyBufferHandle+0x1>
    3e6c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <xStreamBufferReset>
    3e70:	b8 01       	movw	r22, r16
    3e72:	8a e8       	ldi	r24, 0x8A	; 138
    3e74:	97 e1       	ldi	r25, 0x17	; 23
    3e76:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <strcpy>
    3e7a:	20 97       	sbiw	r28, 0x00	; 0
    3e7c:	79 f0       	breq	.+30     	; 0x3e9c <_uploadMessage+0x44>
    3e7e:	ea e8       	ldi	r30, 0x8A	; 138
    3e80:	f7 e1       	ldi	r31, 0x17	; 23
    3e82:	01 90       	ld	r0, Z+
    3e84:	00 20       	and	r0, r0
    3e86:	e9 f7       	brne	.-6      	; 0x3e82 <_uploadMessage+0x2a>
    3e88:	31 97       	sbiw	r30, 0x01	; 1
    3e8a:	80 e2       	ldi	r24, 0x20	; 32
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	91 83       	std	Z+1, r25	; 0x01
    3e90:	80 83       	st	Z, r24
    3e92:	be 01       	movw	r22, r28
    3e94:	8a e8       	ldi	r24, 0x8A	; 138
    3e96:	97 e1       	ldi	r25, 0x17	; 23
    3e98:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <strcat>
    3e9c:	ea e8       	ldi	r30, 0x8A	; 138
    3e9e:	f7 e1       	ldi	r31, 0x17	; 23
    3ea0:	df 01       	movw	r26, r30
    3ea2:	0d 90       	ld	r0, X+
    3ea4:	00 20       	and	r0, r0
    3ea6:	e9 f7       	brne	.-6      	; 0x3ea2 <_uploadMessage+0x4a>
    3ea8:	11 97       	sbiw	r26, 0x01	; 1
    3eaa:	8d e0       	ldi	r24, 0x0D	; 13
    3eac:	9a e0       	ldi	r25, 0x0A	; 10
    3eae:	11 96       	adiw	r26, 0x01	; 1
    3eb0:	9c 93       	st	X, r25
    3eb2:	8e 93       	st	-X, r24
    3eb4:	12 96       	adiw	r26, 0x02	; 2
    3eb6:	1c 92       	st	X, r1
    3eb8:	01 90       	ld	r0, Z+
    3eba:	00 20       	and	r0, r0
    3ebc:	e9 f7       	brne	.-6      	; 0x3eb8 <_uploadMessage+0x60>
    3ebe:	31 97       	sbiw	r30, 0x01	; 1
    3ec0:	ea 58       	subi	r30, 0x8A	; 138
    3ec2:	f7 41       	sbci	r31, 0x17	; 23
    3ec4:	ae 2f       	mov	r26, r30
    3ec6:	8a e8       	ldi	r24, 0x8A	; 138
    3ec8:	97 e1       	ldi	r25, 0x17	; 23
    3eca:	ac 01       	movw	r20, r24
    3ecc:	6a 2f       	mov	r22, r26
    3ece:	80 91 f3 17 	lds	r24, 0x17F3	; 0x8017f3 <_rn2483_serial>
    3ed2:	90 91 f4 17 	lds	r25, 0x17F4	; 0x8017f4 <_rn2483_serial+0x1>
    3ed6:	66 d5       	rcall	.+2764   	; 0x49a4 <serial_sendBytes>
    3ed8:	81 11       	cpse	r24, r1
    3eda:	11 c0       	rjmp	.+34     	; 0x3efe <_uploadMessage+0xa6>
    3edc:	08 e2       	ldi	r16, 0x28	; 40
    3ede:	15 e0       	ldi	r17, 0x05	; 5
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	4d e2       	ldi	r20, 0x2D	; 45
    3ee6:	50 e0       	ldi	r21, 0x00	; 0
    3ee8:	6a e7       	ldi	r22, 0x7A	; 122
    3eea:	78 e1       	ldi	r23, 0x18	; 24
    3eec:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <_serialReplyBufferHandle>
    3ef0:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <_serialReplyBufferHandle+0x1>
    3ef4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <xStreamBufferReceive>
    3ef8:	8a e7       	ldi	r24, 0x7A	; 122
    3efa:	98 e1       	ldi	r25, 0x18	; 24
    3efc:	02 c0       	rjmp	.+4      	; 0x3f02 <_uploadMessage+0xaa>
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	df 91       	pop	r29
    3f04:	cf 91       	pop	r28
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	08 95       	ret

00003f0c <_reply2ReturnCode>:
    3f0c:	2f 92       	push	r2
    3f0e:	3f 92       	push	r3
    3f10:	4f 92       	push	r4
    3f12:	5f 92       	push	r5
    3f14:	6f 92       	push	r6
    3f16:	7f 92       	push	r7
    3f18:	8f 92       	push	r8
    3f1a:	9f 92       	push	r9
    3f1c:	af 92       	push	r10
    3f1e:	bf 92       	push	r11
    3f20:	cf 92       	push	r12
    3f22:	df 92       	push	r13
    3f24:	ef 92       	push	r14
    3f26:	ff 92       	push	r15
    3f28:	0f 93       	push	r16
    3f2a:	1f 93       	push	r17
    3f2c:	cf 93       	push	r28
    3f2e:	df 93       	push	r29
    3f30:	5c 01       	movw	r10, r24
    3f32:	fc 01       	movw	r30, r24
    3f34:	01 90       	ld	r0, Z+
    3f36:	00 20       	and	r0, r0
    3f38:	e9 f7       	brne	.-6      	; 0x3f34 <_reply2ReturnCode+0x28>
    3f3a:	31 97       	sbiw	r30, 0x01	; 1
    3f3c:	6f 01       	movw	r12, r30
    3f3e:	c8 1a       	sub	r12, r24
    3f40:	d9 0a       	sbc	r13, r25
    3f42:	5c 2c       	mov	r5, r12
    3f44:	0f 2e       	mov	r0, r31
    3f46:	f7 e9       	ldi	r31, 0x97	; 151
    3f48:	8f 2e       	mov	r8, r31
    3f4a:	f8 e0       	ldi	r31, 0x08	; 8
    3f4c:	9f 2e       	mov	r9, r31
    3f4e:	f0 2d       	mov	r31, r0
    3f50:	e1 2c       	mov	r14, r1
    3f52:	f1 2c       	mov	r15, r1
    3f54:	4c 2c       	mov	r4, r12
    3f56:	37 01       	movw	r6, r14
    3f58:	f4 01       	movw	r30, r8
    3f5a:	01 81       	ldd	r16, Z+1	; 0x01
    3f5c:	12 81       	ldd	r17, Z+2	; 0x02
    3f5e:	e8 01       	movw	r28, r16
    3f60:	09 90       	ld	r0, Y+
    3f62:	00 20       	and	r0, r0
    3f64:	e9 f7       	brne	.-6      	; 0x3f60 <_reply2ReturnCode+0x54>
    3f66:	21 97       	sbiw	r28, 0x01	; 1
    3f68:	c0 1b       	sub	r28, r16
    3f6a:	d1 0b       	sbc	r29, r17
    3f6c:	3c 2e       	mov	r3, r28
    3f6e:	f9 e0       	ldi	r31, 0x09	; 9
    3f70:	cf 16       	cp	r12, r31
    3f72:	d1 04       	cpc	r13, r1
    3f74:	58 f0       	brcs	.+22     	; 0x3f8c <_reply2ReturnCode+0x80>
    3f76:	f4 01       	movw	r30, r8
    3f78:	20 80       	ld	r2, Z
    3f7a:	fe e0       	ldi	r31, 0x0E	; 14
    3f7c:	2f 12       	cpse	r2, r31
    3f7e:	06 c0       	rjmp	.+12     	; 0x3f8c <_reply2ReturnCode+0x80>
    3f80:	b8 01       	movw	r22, r16
    3f82:	c5 01       	movw	r24, r10
    3f84:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <strcasestr>
    3f88:	89 2b       	or	r24, r25
    3f8a:	09 f5       	brne	.+66     	; 0x3fce <_reply2ReturnCode+0xc2>
    3f8c:	44 2d       	mov	r20, r4
    3f8e:	35 14       	cp	r3, r5
    3f90:	08 f4       	brcc	.+2      	; 0x3f94 <_reply2ReturnCode+0x88>
    3f92:	4c 2f       	mov	r20, r28
    3f94:	50 e0       	ldi	r21, 0x00	; 0
    3f96:	b8 01       	movw	r22, r16
    3f98:	c5 01       	movw	r24, r10
    3f9a:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <strncasecmp>
    3f9e:	89 2b       	or	r24, r25
    3fa0:	49 f4       	brne	.+18     	; 0x3fb4 <_reply2ReturnCode+0xa8>
    3fa2:	f3 01       	movw	r30, r6
    3fa4:	ee 0f       	add	r30, r30
    3fa6:	ff 1f       	adc	r31, r31
    3fa8:	e6 0d       	add	r30, r6
    3faa:	f7 1d       	adc	r31, r7
    3fac:	e9 56       	subi	r30, 0x69	; 105
    3fae:	f7 4f       	sbci	r31, 0xF7	; 247
    3fb0:	20 80       	ld	r2, Z
    3fb2:	0d c0       	rjmp	.+26     	; 0x3fce <_reply2ReturnCode+0xc2>
    3fb4:	8f ef       	ldi	r24, 0xFF	; 255
    3fb6:	e8 1a       	sub	r14, r24
    3fb8:	f8 0a       	sbc	r15, r24
    3fba:	e3 e0       	ldi	r30, 0x03	; 3
    3fbc:	8e 0e       	add	r8, r30
    3fbe:	91 1c       	adc	r9, r1
    3fc0:	f1 e1       	ldi	r31, 0x11	; 17
    3fc2:	ef 16       	cp	r14, r31
    3fc4:	f1 04       	cpc	r15, r1
    3fc6:	39 f6       	brne	.-114    	; 0x3f56 <_reply2ReturnCode+0x4a>
    3fc8:	68 94       	set
    3fca:	22 24       	eor	r2, r2
    3fcc:	24 f8       	bld	r2, 4
    3fce:	82 2d       	mov	r24, r2
    3fd0:	df 91       	pop	r29
    3fd2:	cf 91       	pop	r28
    3fd4:	1f 91       	pop	r17
    3fd6:	0f 91       	pop	r16
    3fd8:	ff 90       	pop	r15
    3fda:	ef 90       	pop	r14
    3fdc:	df 90       	pop	r13
    3fde:	cf 90       	pop	r12
    3fe0:	bf 90       	pop	r11
    3fe2:	af 90       	pop	r10
    3fe4:	9f 90       	pop	r9
    3fe6:	8f 90       	pop	r8
    3fe8:	7f 90       	pop	r7
    3fea:	6f 90       	pop	r6
    3fec:	5f 90       	pop	r5
    3fee:	4f 90       	pop	r4
    3ff0:	3f 90       	pop	r3
    3ff2:	2f 90       	pop	r2
    3ff4:	08 95       	ret

00003ff6 <_uploadMessageRc>:
    3ff6:	30 df       	rcall	.-416    	; 0x3e58 <_uploadMessage>
    3ff8:	89 cf       	rjmp	.-238    	; 0x3f0c <_reply2ReturnCode>
    3ffa:	08 95       	ret

00003ffc <lora_driver_flushBuffers>:
    3ffc:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <_serialReplyBufferHandle>
    4000:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <_serialReplyBufferHandle+0x1>
    4004:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <xStreamBufferReset>
    4008:	08 95       	ret

0000400a <lora_driver_initialise>:
    400a:	8f 92       	push	r8
    400c:	9f 92       	push	r9
    400e:	af 92       	push	r10
    4010:	cf 92       	push	r12
    4012:	ef 92       	push	r14
    4014:	0f 93       	push	r16
    4016:	1f 93       	push	r17
    4018:	cf 93       	push	r28
    401a:	c8 2f       	mov	r28, r24
    401c:	8b 01       	movw	r16, r22
    401e:	41 e0       	ldi	r20, 0x01	; 1
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	70 e0       	ldi	r23, 0x00	; 0
    4024:	88 ec       	ldi	r24, 0xC8	; 200
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	0e 94 39 09 	call	0x1272	; 0x1272 <xStreamBufferGenericCreate>
    402c:	90 93 f2 17 	sts	0x17F2, r25	; 0x8017f2 <_serialReplyBufferHandle+0x1>
    4030:	80 93 f1 17 	sts	0x17F1, r24	; 0x8017f1 <_serialReplyBufferHandle>
    4034:	10 93 f0 17 	sts	0x17F0, r17	; 0x8017f0 <_downlinkMessageBuffer+0x1>
    4038:	00 93 ef 17 	sts	0x17EF, r16	; 0x8017ef <_downlinkMessageBuffer>
    403c:	0f 2e       	mov	r0, r31
    403e:	f6 ee       	ldi	r31, 0xE6	; 230
    4040:	8f 2e       	mov	r8, r31
    4042:	fe e1       	ldi	r31, 0x1E	; 30
    4044:	9f 2e       	mov	r9, r31
    4046:	f0 2d       	mov	r31, r0
    4048:	68 94       	set
    404a:	aa 24       	eor	r10, r10
    404c:	a6 f8       	bld	r10, 6
    404e:	68 94       	set
    4050:	cc 24       	eor	r12, r12
    4052:	c6 f8       	bld	r12, 6
    4054:	e1 2c       	mov	r14, r1
    4056:	00 e0       	ldi	r16, 0x00	; 0
    4058:	23 e0       	ldi	r18, 0x03	; 3
    405a:	40 e0       	ldi	r20, 0x00	; 0
    405c:	51 ee       	ldi	r21, 0xE1	; 225
    405e:	60 e0       	ldi	r22, 0x00	; 0
    4060:	70 e0       	ldi	r23, 0x00	; 0
    4062:	8c 2f       	mov	r24, r28
    4064:	d2 d3       	rcall	.+1956   	; 0x480a <serial_create>
    4066:	90 93 f4 17 	sts	0x17F4, r25	; 0x8017f4 <_rn2483_serial+0x1>
    406a:	80 93 f3 17 	sts	0x17F3, r24	; 0x8017f3 <_rn2483_serial>
    406e:	e7 e0       	ldi	r30, 0x07	; 7
    4070:	f1 e0       	ldi	r31, 0x01	; 1
    4072:	80 81       	ld	r24, Z
    4074:	80 61       	ori	r24, 0x10	; 16
    4076:	80 83       	st	Z, r24
    4078:	cf 91       	pop	r28
    407a:	1f 91       	pop	r17
    407c:	0f 91       	pop	r16
    407e:	ef 90       	pop	r14
    4080:	cf 90       	pop	r12
    4082:	af 90       	pop	r10
    4084:	9f 90       	pop	r9
    4086:	8f 90       	pop	r8
    4088:	08 95       	ret

0000408a <lora_driver_resetRn2483>:
    408a:	88 23       	and	r24, r24
    408c:	31 f0       	breq	.+12     	; 0x409a <lora_driver_resetRn2483+0x10>
    408e:	e8 e0       	ldi	r30, 0x08	; 8
    4090:	f1 e0       	ldi	r31, 0x01	; 1
    4092:	80 81       	ld	r24, Z
    4094:	8f 7e       	andi	r24, 0xEF	; 239
    4096:	80 83       	st	Z, r24
    4098:	08 95       	ret
    409a:	e8 e0       	ldi	r30, 0x08	; 8
    409c:	f1 e0       	ldi	r31, 0x01	; 1
    409e:	80 81       	ld	r24, Z
    40a0:	80 61       	ori	r24, 0x10	; 16
    40a2:	80 83       	st	Z, r24
    40a4:	08 95       	ret

000040a6 <lora_driver_rn2483FactoryReset>:
    40a6:	60 e0       	ldi	r22, 0x00	; 0
    40a8:	70 e0       	ldi	r23, 0x00	; 0
    40aa:	8d e1       	ldi	r24, 0x1D	; 29
    40ac:	96 e0       	ldi	r25, 0x06	; 6
    40ae:	d4 de       	rcall	.-600    	; 0x3e58 <_uploadMessage>
    40b0:	ea e7       	ldi	r30, 0x7A	; 122
    40b2:	f8 e1       	ldi	r31, 0x18	; 24
    40b4:	01 90       	ld	r0, Z+
    40b6:	00 20       	and	r0, r0
    40b8:	e9 f7       	brne	.-6      	; 0x40b4 <lora_driver_rn2483FactoryReset+0xe>
    40ba:	31 97       	sbiw	r30, 0x01	; 1
    40bc:	ea 57       	subi	r30, 0x7A	; 122
    40be:	f8 41       	sbci	r31, 0x18	; 24
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	75 97       	sbiw	r30, 0x15	; 21
    40c4:	08 f0       	brcs	.+2      	; 0x40c8 <lora_driver_rn2483FactoryReset+0x22>
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	08 95       	ret

000040ca <lora_driver_getRn2483Hweui>:
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	ec 01       	movw	r28, r24
    40d0:	60 e0       	ldi	r22, 0x00	; 0
    40d2:	70 e0       	ldi	r23, 0x00	; 0
    40d4:	8e e2       	ldi	r24, 0x2E	; 46
    40d6:	96 e0       	ldi	r25, 0x06	; 6
    40d8:	bf de       	rcall	.-642    	; 0x3e58 <_uploadMessage>
    40da:	ea e7       	ldi	r30, 0x7A	; 122
    40dc:	f8 e1       	ldi	r31, 0x18	; 24
    40de:	01 90       	ld	r0, Z+
    40e0:	00 20       	and	r0, r0
    40e2:	e9 f7       	brne	.-6      	; 0x40de <lora_driver_getRn2483Hweui+0x14>
    40e4:	eb 58       	subi	r30, 0x8B	; 139
    40e6:	f8 41       	sbci	r31, 0x18	; 24
    40e8:	39 f4       	brne	.+14     	; 0x40f8 <lora_driver_getRn2483Hweui+0x2e>
    40ea:	6a e7       	ldi	r22, 0x7A	; 122
    40ec:	78 e1       	ldi	r23, 0x18	; 24
    40ee:	ce 01       	movw	r24, r28
    40f0:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <strcpy>
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	02 c0       	rjmp	.+4      	; 0x40fc <lora_driver_getRn2483Hweui+0x32>
    40f8:	18 82       	st	Y, r1
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	df 91       	pop	r29
    40fe:	cf 91       	pop	r28
    4100:	08 95       	ret

00004102 <lora_driver_setDeviceIdentifier>:
    4102:	fc 01       	movw	r30, r24
    4104:	01 90       	ld	r0, Z+
    4106:	00 20       	and	r0, r0
    4108:	e9 f7       	brne	.-6      	; 0x4104 <lora_driver_setDeviceIdentifier+0x2>
    410a:	9f 01       	movw	r18, r30
    410c:	21 51       	subi	r18, 0x11	; 17
    410e:	31 09       	sbc	r19, r1
    4110:	28 17       	cp	r18, r24
    4112:	39 07       	cpc	r19, r25
    4114:	29 f4       	brne	.+10     	; 0x4120 <lora_driver_setDeviceIdentifier+0x1e>
    4116:	bc 01       	movw	r22, r24
    4118:	8c e5       	ldi	r24, 0x5C	; 92
    411a:	96 e0       	ldi	r25, 0x06	; 6
    411c:	6c cf       	rjmp	.-296    	; 0x3ff6 <_uploadMessageRc>
    411e:	08 95       	ret
    4120:	89 e0       	ldi	r24, 0x09	; 9
    4122:	08 95       	ret

00004124 <lora_driver_setApplicationIdentifier>:
    4124:	fc 01       	movw	r30, r24
    4126:	01 90       	ld	r0, Z+
    4128:	00 20       	and	r0, r0
    412a:	e9 f7       	brne	.-6      	; 0x4126 <lora_driver_setApplicationIdentifier+0x2>
    412c:	9f 01       	movw	r18, r30
    412e:	21 51       	subi	r18, 0x11	; 17
    4130:	31 09       	sbc	r19, r1
    4132:	28 17       	cp	r18, r24
    4134:	39 07       	cpc	r19, r25
    4136:	29 f4       	brne	.+10     	; 0x4142 <lora_driver_setApplicationIdentifier+0x1e>
    4138:	bc 01       	movw	r22, r24
    413a:	8b e6       	ldi	r24, 0x6B	; 107
    413c:	96 e0       	ldi	r25, 0x06	; 6
    413e:	5b cf       	rjmp	.-330    	; 0x3ff6 <_uploadMessageRc>
    4140:	08 95       	ret
    4142:	89 e0       	ldi	r24, 0x09	; 9
    4144:	08 95       	ret

00004146 <lora_driver_setApplicationKey>:
    4146:	fc 01       	movw	r30, r24
    4148:	01 90       	ld	r0, Z+
    414a:	00 20       	and	r0, r0
    414c:	e9 f7       	brne	.-6      	; 0x4148 <lora_driver_setApplicationKey+0x2>
    414e:	9f 01       	movw	r18, r30
    4150:	21 52       	subi	r18, 0x21	; 33
    4152:	31 09       	sbc	r19, r1
    4154:	28 17       	cp	r18, r24
    4156:	39 07       	cpc	r19, r25
    4158:	29 f4       	brne	.+10     	; 0x4164 <lora_driver_setApplicationKey+0x1e>
    415a:	bc 01       	movw	r22, r24
    415c:	8a e7       	ldi	r24, 0x7A	; 122
    415e:	96 e0       	ldi	r25, 0x06	; 6
    4160:	4a cf       	rjmp	.-364    	; 0x3ff6 <_uploadMessageRc>
    4162:	08 95       	ret
    4164:	89 e0       	ldi	r24, 0x09	; 9
    4166:	08 95       	ret

00004168 <lora_driver_saveMac>:
    4168:	60 e0       	ldi	r22, 0x00	; 0
    416a:	70 e0       	ldi	r23, 0x00	; 0
    416c:	89 eb       	ldi	r24, 0xB9	; 185
    416e:	96 e0       	ldi	r25, 0x06	; 6
    4170:	42 cf       	rjmp	.-380    	; 0x3ff6 <_uploadMessageRc>
    4172:	08 95       	ret

00004174 <lora_driver_join>:
    4174:	0f 93       	push	r16
    4176:	1f 93       	push	r17
    4178:	e8 2f       	mov	r30, r24
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	ee 0f       	add	r30, r30
    417e:	ff 1f       	adc	r31, r31
    4180:	ed 56       	subi	r30, 0x6D	; 109
    4182:	f7 4f       	sbci	r31, 0xF7	; 247
    4184:	60 81       	ld	r22, Z
    4186:	71 81       	ldd	r23, Z+1	; 0x01
    4188:	82 ec       	ldi	r24, 0xC2	; 194
    418a:	96 e0       	ldi	r25, 0x06	; 6
    418c:	34 df       	rcall	.-408    	; 0x3ff6 <_uploadMessageRc>
    418e:	81 11       	cpse	r24, r1
    4190:	14 c0       	rjmp	.+40     	; 0x41ba <lora_driver_join+0x46>
    4192:	08 e2       	ldi	r16, 0x28	; 40
    4194:	15 e0       	ldi	r17, 0x05	; 5
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	4d e2       	ldi	r20, 0x2D	; 45
    419c:	50 e0       	ldi	r21, 0x00	; 0
    419e:	6a e7       	ldi	r22, 0x7A	; 122
    41a0:	78 e1       	ldi	r23, 0x18	; 24
    41a2:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <_serialReplyBufferHandle>
    41a6:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <_serialReplyBufferHandle+0x1>
    41aa:	0e 94 a2 0a 	call	0x1544	; 0x1544 <xStreamBufferReceive>
    41ae:	88 23       	and	r24, r24
    41b0:	21 f0       	breq	.+8      	; 0x41ba <lora_driver_join+0x46>
    41b2:	8a e7       	ldi	r24, 0x7A	; 122
    41b4:	98 e1       	ldi	r25, 0x18	; 24
    41b6:	aa de       	rcall	.-684    	; 0x3f0c <_reply2ReturnCode>
    41b8:	03 c0       	rjmp	.+6      	; 0x41c0 <lora_driver_join+0x4c>
    41ba:	8a e7       	ldi	r24, 0x7A	; 122
    41bc:	98 e1       	ldi	r25, 0x18	; 24
    41be:	a6 de       	rcall	.-692    	; 0x3f0c <_reply2ReturnCode>
    41c0:	1f 91       	pop	r17
    41c2:	0f 91       	pop	r16
    41c4:	08 95       	ret

000041c6 <lora_driver_sendUploadMessage>:
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	1f 92       	push	r1
    41d0:	cd b7       	in	r28, 0x3d	; 61
    41d2:	de b7       	in	r29, 0x3e	; 62
    41d4:	db 01       	movw	r26, r22
    41d6:	11 96       	adiw	r26, 0x01	; 1
    41d8:	9c 91       	ld	r25, X
    41da:	11 97       	sbiw	r26, 0x01	; 1
    41dc:	95 31       	cpi	r25, 0x15	; 21
    41de:	08 f0       	brcs	.+2      	; 0x41e2 <lora_driver_sendUploadMessage+0x1c>
    41e0:	b4 c0       	rjmp	.+360    	; 0x434a <lora_driver_sendUploadMessage+0x184>
    41e2:	99 23       	and	r25, r25
    41e4:	81 f1       	breq	.+96     	; 0x4246 <lora_driver_sendUploadMessage+0x80>
    41e6:	60 e0       	ldi	r22, 0x00	; 0
    41e8:	70 e0       	ldi	r23, 0x00	; 0
    41ea:	27 2f       	mov	r18, r23
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	46 2f       	mov	r20, r22
    41f0:	50 e0       	ldi	r21, 0x00	; 0
    41f2:	fd 01       	movw	r30, r26
    41f4:	e4 0f       	add	r30, r20
    41f6:	f5 1f       	adc	r31, r21
    41f8:	92 81       	ldd	r25, Z+2	; 0x02
    41fa:	92 95       	swap	r25
    41fc:	9f 70       	andi	r25, 0x0F	; 15
    41fe:	9a 30       	cpi	r25, 0x0A	; 10
    4200:	10 f0       	brcs	.+4      	; 0x4206 <lora_driver_sendUploadMessage+0x40>
    4202:	99 5c       	subi	r25, 0xC9	; 201
    4204:	01 c0       	rjmp	.+2      	; 0x4208 <lora_driver_sendUploadMessage+0x42>
    4206:	90 5d       	subi	r25, 0xD0	; 208
    4208:	f9 01       	movw	r30, r18
    420a:	e5 5f       	subi	r30, 0xF5	; 245
    420c:	f7 4e       	sbci	r31, 0xE7	; 231
    420e:	90 83       	st	Z, r25
    4210:	2f 5f       	subi	r18, 0xFF	; 255
    4212:	3f 4f       	sbci	r19, 0xFF	; 255
    4214:	fd 01       	movw	r30, r26
    4216:	e4 0f       	add	r30, r20
    4218:	f5 1f       	adc	r31, r21
    421a:	92 81       	ldd	r25, Z+2	; 0x02
    421c:	9f 70       	andi	r25, 0x0F	; 15
    421e:	49 2f       	mov	r20, r25
    4220:	50 e0       	ldi	r21, 0x00	; 0
    4222:	4a 30       	cpi	r20, 0x0A	; 10
    4224:	51 05       	cpc	r21, r1
    4226:	14 f0       	brlt	.+4      	; 0x422c <lora_driver_sendUploadMessage+0x66>
    4228:	99 5c       	subi	r25, 0xC9	; 201
    422a:	01 c0       	rjmp	.+2      	; 0x422e <lora_driver_sendUploadMessage+0x68>
    422c:	90 5d       	subi	r25, 0xD0	; 208
    422e:	f9 01       	movw	r30, r18
    4230:	e5 5f       	subi	r30, 0xF5	; 245
    4232:	f7 4e       	sbci	r31, 0xE7	; 231
    4234:	90 83       	st	Z, r25
    4236:	7e 5f       	subi	r23, 0xFE	; 254
    4238:	6f 5f       	subi	r22, 0xFF	; 255
    423a:	11 96       	adiw	r26, 0x01	; 1
    423c:	9c 91       	ld	r25, X
    423e:	11 97       	sbiw	r26, 0x01	; 1
    4240:	69 17       	cp	r22, r25
    4242:	98 f2       	brcs	.-90     	; 0x41ea <lora_driver_sendUploadMessage+0x24>
    4244:	01 c0       	rjmp	.+2      	; 0x4248 <lora_driver_sendUploadMessage+0x82>
    4246:	70 e0       	ldi	r23, 0x00	; 0
    4248:	e7 2f       	mov	r30, r23
    424a:	f0 e0       	ldi	r31, 0x00	; 0
    424c:	e5 5f       	subi	r30, 0xF5	; 245
    424e:	f7 4e       	sbci	r31, 0xE7	; 231
    4250:	10 82       	st	Z, r1
    4252:	4c 91       	ld	r20, X
    4254:	81 11       	cpse	r24, r1
    4256:	03 c0       	rjmp	.+6      	; 0x425e <lora_driver_sendUploadMessage+0x98>
    4258:	8b ec       	ldi	r24, 0xCB	; 203
    425a:	96 e0       	ldi	r25, 0x06	; 6
    425c:	02 c0       	rjmp	.+4      	; 0x4262 <lora_driver_sendUploadMessage+0x9c>
    425e:	8d ec       	ldi	r24, 0xCD	; 205
    4260:	96 e0       	ldi	r25, 0x06	; 6
    4262:	2b e0       	ldi	r18, 0x0B	; 11
    4264:	38 e1       	ldi	r19, 0x18	; 24
    4266:	3f 93       	push	r19
    4268:	2f 93       	push	r18
    426a:	1f 92       	push	r1
    426c:	4f 93       	push	r20
    426e:	9f 93       	push	r25
    4270:	8f 93       	push	r24
    4272:	81 ed       	ldi	r24, 0xD1	; 209
    4274:	96 e0       	ldi	r25, 0x06	; 6
    4276:	9f 93       	push	r25
    4278:	8f 93       	push	r24
    427a:	8d e4       	ldi	r24, 0x4D	; 77
    427c:	98 e1       	ldi	r25, 0x18	; 24
    427e:	9f 93       	push	r25
    4280:	8f 93       	push	r24
    4282:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
    4286:	60 e0       	ldi	r22, 0x00	; 0
    4288:	70 e0       	ldi	r23, 0x00	; 0
    428a:	8d e4       	ldi	r24, 0x4D	; 77
    428c:	98 e1       	ldi	r25, 0x18	; 24
    428e:	b3 de       	rcall	.-666    	; 0x3ff6 <_uploadMessageRc>
    4290:	0f b6       	in	r0, 0x3f	; 63
    4292:	f8 94       	cli
    4294:	de bf       	out	0x3e, r29	; 62
    4296:	0f be       	out	0x3f, r0	; 63
    4298:	cd bf       	out	0x3d, r28	; 61
    429a:	81 11       	cpse	r24, r1
    429c:	59 c0       	rjmp	.+178    	; 0x4350 <lora_driver_sendUploadMessage+0x18a>
    429e:	08 e2       	ldi	r16, 0x28	; 40
    42a0:	15 e0       	ldi	r17, 0x05	; 5
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	4d e2       	ldi	r20, 0x2D	; 45
    42a8:	50 e0       	ldi	r21, 0x00	; 0
    42aa:	6a e7       	ldi	r22, 0x7A	; 122
    42ac:	78 e1       	ldi	r23, 0x18	; 24
    42ae:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <_serialReplyBufferHandle>
    42b2:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <_serialReplyBufferHandle+0x1>
    42b6:	0e 94 a2 0a 	call	0x1544	; 0x1544 <xStreamBufferReceive>
    42ba:	88 23       	and	r24, r24
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <lora_driver_sendUploadMessage+0xfa>
    42be:	47 c0       	rjmp	.+142    	; 0x434e <lora_driver_sendUploadMessage+0x188>
    42c0:	8a e7       	ldi	r24, 0x7A	; 122
    42c2:	98 e1       	ldi	r25, 0x18	; 24
    42c4:	23 de       	rcall	.-954    	; 0x3f0c <_reply2ReturnCode>
    42c6:	8e 30       	cpi	r24, 0x0E	; 14
    42c8:	09 f0       	breq	.+2      	; 0x42cc <lora_driver_sendUploadMessage+0x106>
    42ca:	42 c0       	rjmp	.+132    	; 0x4350 <lora_driver_sendUploadMessage+0x18a>
    42cc:	87 e0       	ldi	r24, 0x07	; 7
    42ce:	89 83       	std	Y+1, r24	; 0x01
    42d0:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <_downlinkMessageBuffer>
    42d4:	90 91 f0 17 	lds	r25, 0x17F0	; 0x8017f0 <_downlinkMessageBuffer+0x1>
    42d8:	89 2b       	or	r24, r25
    42da:	a9 f1       	breq	.+106    	; 0x4346 <lora_driver_sendUploadMessage+0x180>
    42dc:	be 01       	movw	r22, r28
    42de:	6f 5f       	subi	r22, 0xFF	; 255
    42e0:	7f 4f       	sbci	r23, 0xFF	; 255
    42e2:	8a e7       	ldi	r24, 0x7A	; 122
    42e4:	98 e1       	ldi	r25, 0x18	; 24
    42e6:	68 d1       	rcall	.+720    	; 0x45b8 <decode_port_no>
    42e8:	80 93 f5 17 	sts	0x17F5, r24	; 0x8017f5 <_downlinkPayload>
    42ec:	e9 81       	ldd	r30, Y+1	; 0x01
    42ee:	f0 e0       	ldi	r31, 0x00	; 0
    42f0:	e6 58       	subi	r30, 0x86	; 134
    42f2:	f7 4e       	sbci	r31, 0xE7	; 231
    42f4:	df 01       	movw	r26, r30
    42f6:	0d 90       	ld	r0, X+
    42f8:	00 20       	and	r0, r0
    42fa:	e9 f7       	brne	.-6      	; 0x42f6 <lora_driver_sendUploadMessage+0x130>
    42fc:	11 97       	sbiw	r26, 0x01	; 1
    42fe:	ae 1b       	sub	r26, r30
    4300:	bf 0b       	sbc	r27, r31
    4302:	aa 23       	and	r26, r26
    4304:	91 f0       	breq	.+36     	; 0x432a <lora_driver_sendUploadMessage+0x164>
    4306:	bb 27       	eor	r27, r27
    4308:	cd 01       	movw	r24, r26
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	9c 01       	movw	r18, r24
    430e:	12 f4       	brpl	.+4      	; 0x4314 <lora_driver_sendUploadMessage+0x14e>
    4310:	2f 5f       	subi	r18, 0xFF	; 255
    4312:	3f 4f       	sbci	r19, 0xFF	; 255
    4314:	35 95       	asr	r19
    4316:	27 95       	ror	r18
    4318:	20 93 f6 17 	sts	0x17F6, r18	; 0x8017f6 <_downlinkPayload+0x1>
    431c:	af 01       	movw	r20, r30
    431e:	4f 5f       	subi	r20, 0xFF	; 255
    4320:	5f 4f       	sbci	r21, 0xFF	; 255
    4322:	64 e1       	ldi	r22, 0x14	; 20
    4324:	87 ef       	ldi	r24, 0xF7	; 247
    4326:	97 e1       	ldi	r25, 0x17	; 23
    4328:	73 d1       	rcall	.+742    	; 0x4610 <decode_hexadecimal_string_bytes>
    432a:	01 e0       	ldi	r16, 0x01	; 1
    432c:	10 e0       	ldi	r17, 0x00	; 0
    432e:	20 e0       	ldi	r18, 0x00	; 0
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	46 e1       	ldi	r20, 0x16	; 22
    4334:	50 e0       	ldi	r21, 0x00	; 0
    4336:	65 ef       	ldi	r22, 0xF5	; 245
    4338:	77 e1       	ldi	r23, 0x17	; 23
    433a:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <_downlinkMessageBuffer>
    433e:	90 91 f0 17 	lds	r25, 0x17F0	; 0x8017f0 <_downlinkMessageBuffer+0x1>
    4342:	0e 94 9b 09 	call	0x1336	; 0x1336 <xStreamBufferSend>
    4346:	8e e0       	ldi	r24, 0x0E	; 14
    4348:	03 c0       	rjmp	.+6      	; 0x4350 <lora_driver_sendUploadMessage+0x18a>
    434a:	84 e1       	ldi	r24, 0x14	; 20
    434c:	01 c0       	rjmp	.+2      	; 0x4350 <lora_driver_sendUploadMessage+0x18a>
    434e:	80 e0       	ldi	r24, 0x00	; 0
    4350:	0f 90       	pop	r0
    4352:	df 91       	pop	r29
    4354:	cf 91       	pop	r28
    4356:	1f 91       	pop	r17
    4358:	0f 91       	pop	r16
    435a:	08 95       	ret

0000435c <lora_driver_setAdaptiveDataRate>:
    435c:	81 30       	cpi	r24, 0x01	; 1
    435e:	19 f0       	breq	.+6      	; 0x4366 <lora_driver_setAdaptiveDataRate+0xa>
    4360:	61 ee       	ldi	r22, 0xE1	; 225
    4362:	76 e0       	ldi	r23, 0x06	; 6
    4364:	02 c0       	rjmp	.+4      	; 0x436a <lora_driver_setAdaptiveDataRate+0xe>
    4366:	6a eb       	ldi	r22, 0xBA	; 186
    4368:	77 e0       	ldi	r23, 0x07	; 7
    436a:	85 ee       	ldi	r24, 0xE5	; 229
    436c:	96 e0       	ldi	r25, 0x06	; 6
    436e:	43 ce       	rjmp	.-890    	; 0x3ff6 <_uploadMessageRc>
    4370:	08 95       	ret

00004372 <lora_driver_setReceiveDelay>:
    4372:	9f 93       	push	r25
    4374:	8f 93       	push	r24
    4376:	86 e1       	ldi	r24, 0x16	; 22
    4378:	97 e0       	ldi	r25, 0x07	; 7
    437a:	9f 93       	push	r25
    437c:	8f 93       	push	r24
    437e:	8d e4       	ldi	r24, 0x4D	; 77
    4380:	98 e1       	ldi	r25, 0x18	; 24
    4382:	9f 93       	push	r25
    4384:	8f 93       	push	r24
    4386:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
    438a:	60 e0       	ldi	r22, 0x00	; 0
    438c:	70 e0       	ldi	r23, 0x00	; 0
    438e:	8d e4       	ldi	r24, 0x4D	; 77
    4390:	98 e1       	ldi	r25, 0x18	; 24
    4392:	31 de       	rcall	.-926    	; 0x3ff6 <_uploadMessageRc>
    4394:	0f 90       	pop	r0
    4396:	0f 90       	pop	r0
    4398:	0f 90       	pop	r0
    439a:	0f 90       	pop	r0
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	08 95       	ret

000043a2 <lora_driver_configureToEu868>:
    43a2:	2f 92       	push	r2
    43a4:	3f 92       	push	r3
    43a6:	4f 92       	push	r4
    43a8:	5f 92       	push	r5
    43aa:	6f 92       	push	r6
    43ac:	7f 92       	push	r7
    43ae:	8f 92       	push	r8
    43b0:	9f 92       	push	r9
    43b2:	af 92       	push	r10
    43b4:	bf 92       	push	r11
    43b6:	cf 92       	push	r12
    43b8:	df 92       	push	r13
    43ba:	ef 92       	push	r14
    43bc:	ff 92       	push	r15
    43be:	0f 93       	push	r16
    43c0:	1f 93       	push	r17
    43c2:	cf 93       	push	r28
    43c4:	df 93       	push	r29
    43c6:	cd b7       	in	r28, 0x3d	; 61
    43c8:	de b7       	in	r29, 0x3e	; 62
    43ca:	a0 97       	sbiw	r28, 0x20	; 32
    43cc:	0f b6       	in	r0, 0x3f	; 63
    43ce:	f8 94       	cli
    43d0:	de bf       	out	0x3e, r29	; 62
    43d2:	0f be       	out	0x3f, r0	; 63
    43d4:	cd bf       	out	0x3d, r28	; 61
    43d6:	63 e4       	ldi	r22, 0x43	; 67
    43d8:	77 e0       	ldi	r23, 0x07	; 7
    43da:	8f e4       	ldi	r24, 0x4F	; 79
    43dc:	97 e0       	ldi	r25, 0x07	; 7
    43de:	3c dd       	rcall	.-1416   	; 0x3e58 <_uploadMessage>
    43e0:	95 dd       	rcall	.-1238   	; 0x3f0c <_reply2ReturnCode>
    43e2:	81 11       	cpse	r24, r1
    43e4:	a3 c0       	rjmp	.+326    	; 0x452c <lora_driver_configureToEu868+0x18a>
    43e6:	80 e2       	ldi	r24, 0x20	; 32
    43e8:	e2 e2       	ldi	r30, 0x22	; 34
    43ea:	f2 e0       	ldi	r31, 0x02	; 2
    43ec:	de 01       	movw	r26, r28
    43ee:	11 96       	adiw	r26, 0x01	; 1
    43f0:	01 90       	ld	r0, Z+
    43f2:	0d 92       	st	X+, r0
    43f4:	8a 95       	dec	r24
    43f6:	e1 f7       	brne	.-8      	; 0x43f0 <lora_driver_configureToEu868+0x4e>
    43f8:	9e 01       	movw	r18, r28
    43fa:	2f 5f       	subi	r18, 0xFF	; 255
    43fc:	3f 4f       	sbci	r19, 0xFF	; 255
    43fe:	69 01       	movw	r12, r18
    4400:	e1 2c       	mov	r14, r1
    4402:	f1 2c       	mov	r15, r1
    4404:	0f 2e       	mov	r0, r31
    4406:	fb e5       	ldi	r31, 0x5B	; 91
    4408:	af 2e       	mov	r10, r31
    440a:	f7 e0       	ldi	r31, 0x07	; 7
    440c:	bf 2e       	mov	r11, r31
    440e:	f0 2d       	mov	r31, r0
    4410:	0d e4       	ldi	r16, 0x4D	; 77
    4412:	18 e1       	ldi	r17, 0x18	; 24
    4414:	0f 2e       	mov	r0, r31
    4416:	f4 e7       	ldi	r31, 0x74	; 116
    4418:	4f 2e       	mov	r4, r31
    441a:	f7 e0       	ldi	r31, 0x07	; 7
    441c:	5f 2e       	mov	r5, r31
    441e:	f0 2d       	mov	r31, r0
    4420:	0f 2e       	mov	r0, r31
    4422:	fb e8       	ldi	r31, 0x8B	; 139
    4424:	8f 2e       	mov	r8, r31
    4426:	f7 e0       	ldi	r31, 0x07	; 7
    4428:	9f 2e       	mov	r9, r31
    442a:	f0 2d       	mov	r31, r0
    442c:	0f 2e       	mov	r0, r31
    442e:	f5 ea       	ldi	r31, 0xA5	; 165
    4430:	6f 2e       	mov	r6, r31
    4432:	f7 e0       	ldi	r31, 0x07	; 7
    4434:	7f 2e       	mov	r7, r31
    4436:	f0 2d       	mov	r31, r0
    4438:	3e 2c       	mov	r3, r14
    443a:	2f 2c       	mov	r2, r15
    443c:	ff 92       	push	r15
    443e:	ef 92       	push	r14
    4440:	bf 92       	push	r11
    4442:	af 92       	push	r10
    4444:	1f 93       	push	r17
    4446:	0f 93       	push	r16
    4448:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
    444c:	60 e0       	ldi	r22, 0x00	; 0
    444e:	70 e0       	ldi	r23, 0x00	; 0
    4450:	c8 01       	movw	r24, r16
    4452:	02 dd       	rcall	.-1532   	; 0x3e58 <_uploadMessage>
    4454:	5b dd       	rcall	.-1354   	; 0x3f0c <_reply2ReturnCode>
    4456:	0f 90       	pop	r0
    4458:	0f 90       	pop	r0
    445a:	0f 90       	pop	r0
    445c:	0f 90       	pop	r0
    445e:	0f 90       	pop	r0
    4460:	0f 90       	pop	r0
    4462:	81 11       	cpse	r24, r1
    4464:	63 c0       	rjmp	.+198    	; 0x452c <lora_driver_configureToEu868+0x18a>
    4466:	32 e0       	ldi	r19, 0x02	; 2
    4468:	3e 15       	cp	r19, r14
    446a:	e8 f4       	brcc	.+58     	; 0x44a6 <lora_driver_configureToEu868+0x104>
    446c:	f6 01       	movw	r30, r12
    446e:	83 81       	ldd	r24, Z+3	; 0x03
    4470:	8f 93       	push	r24
    4472:	82 81       	ldd	r24, Z+2	; 0x02
    4474:	8f 93       	push	r24
    4476:	81 81       	ldd	r24, Z+1	; 0x01
    4478:	8f 93       	push	r24
    447a:	80 81       	ld	r24, Z
    447c:	8f 93       	push	r24
    447e:	ff 92       	push	r15
    4480:	ef 92       	push	r14
    4482:	5f 92       	push	r5
    4484:	4f 92       	push	r4
    4486:	1f 93       	push	r17
    4488:	0f 93       	push	r16
    448a:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
    448e:	60 e0       	ldi	r22, 0x00	; 0
    4490:	70 e0       	ldi	r23, 0x00	; 0
    4492:	c8 01       	movw	r24, r16
    4494:	e1 dc       	rcall	.-1598   	; 0x3e58 <_uploadMessage>
    4496:	3a dd       	rcall	.-1420   	; 0x3f0c <_reply2ReturnCode>
    4498:	0f b6       	in	r0, 0x3f	; 63
    449a:	f8 94       	cli
    449c:	de bf       	out	0x3e, r29	; 62
    449e:	0f be       	out	0x3f, r0	; 63
    44a0:	cd bf       	out	0x3d, r28	; 61
    44a2:	81 11       	cpse	r24, r1
    44a4:	43 c0       	rjmp	.+134    	; 0x452c <lora_driver_configureToEu868+0x18a>
    44a6:	2f 92       	push	r2
    44a8:	3f 92       	push	r3
    44aa:	9f 92       	push	r9
    44ac:	8f 92       	push	r8
    44ae:	1f 93       	push	r17
    44b0:	0f 93       	push	r16
    44b2:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
    44b6:	60 e0       	ldi	r22, 0x00	; 0
    44b8:	70 e0       	ldi	r23, 0x00	; 0
    44ba:	c8 01       	movw	r24, r16
    44bc:	cd dc       	rcall	.-1638   	; 0x3e58 <_uploadMessage>
    44be:	26 dd       	rcall	.-1460   	; 0x3f0c <_reply2ReturnCode>
    44c0:	0f 90       	pop	r0
    44c2:	0f 90       	pop	r0
    44c4:	0f 90       	pop	r0
    44c6:	0f 90       	pop	r0
    44c8:	0f 90       	pop	r0
    44ca:	0f 90       	pop	r0
    44cc:	81 11       	cpse	r24, r1
    44ce:	2e c0       	rjmp	.+92     	; 0x452c <lora_driver_configureToEu868+0x18a>
    44d0:	2f 92       	push	r2
    44d2:	3f 92       	push	r3
    44d4:	7f 92       	push	r7
    44d6:	6f 92       	push	r6
    44d8:	1f 93       	push	r17
    44da:	0f 93       	push	r16
    44dc:	0e 94 23 2f 	call	0x5e46	; 0x5e46 <sprintf>
    44e0:	60 e0       	ldi	r22, 0x00	; 0
    44e2:	70 e0       	ldi	r23, 0x00	; 0
    44e4:	c8 01       	movw	r24, r16
    44e6:	b8 dc       	rcall	.-1680   	; 0x3e58 <_uploadMessage>
    44e8:	11 dd       	rcall	.-1502   	; 0x3f0c <_reply2ReturnCode>
    44ea:	0f 90       	pop	r0
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	0f 90       	pop	r0
    44f2:	0f 90       	pop	r0
    44f4:	0f 90       	pop	r0
    44f6:	81 11       	cpse	r24, r1
    44f8:	19 c0       	rjmp	.+50     	; 0x452c <lora_driver_configureToEu868+0x18a>
    44fa:	3f ef       	ldi	r19, 0xFF	; 255
    44fc:	e3 1a       	sub	r14, r19
    44fe:	f3 0a       	sbc	r15, r19
    4500:	84 e0       	ldi	r24, 0x04	; 4
    4502:	c8 0e       	add	r12, r24
    4504:	d1 1c       	adc	r13, r1
    4506:	98 e0       	ldi	r25, 0x08	; 8
    4508:	e9 16       	cp	r14, r25
    450a:	f1 04       	cpc	r15, r1
    450c:	09 f0       	breq	.+2      	; 0x4510 <lora_driver_configureToEu868+0x16e>
    450e:	94 cf       	rjmp	.-216    	; 0x4438 <lora_driver_configureToEu868+0x96>
    4510:	60 e0       	ldi	r22, 0x00	; 0
    4512:	70 e0       	ldi	r23, 0x00	; 0
    4514:	8d eb       	ldi	r24, 0xBD	; 189
    4516:	97 e0       	ldi	r25, 0x07	; 7
    4518:	9f dc       	rcall	.-1730   	; 0x3e58 <_uploadMessage>
    451a:	f8 dc       	rcall	.-1552   	; 0x3f0c <_reply2ReturnCode>
    451c:	81 11       	cpse	r24, r1
    451e:	06 c0       	rjmp	.+12     	; 0x452c <lora_driver_configureToEu868+0x18a>
    4520:	60 e0       	ldi	r22, 0x00	; 0
    4522:	70 e0       	ldi	r23, 0x00	; 0
    4524:	8e ec       	ldi	r24, 0xCE	; 206
    4526:	97 e0       	ldi	r25, 0x07	; 7
    4528:	97 dc       	rcall	.-1746   	; 0x3e58 <_uploadMessage>
    452a:	f0 dc       	rcall	.-1568   	; 0x3f0c <_reply2ReturnCode>
    452c:	a0 96       	adiw	r28, 0x20	; 32
    452e:	0f b6       	in	r0, 0x3f	; 63
    4530:	f8 94       	cli
    4532:	de bf       	out	0x3e, r29	; 62
    4534:	0f be       	out	0x3f, r0	; 63
    4536:	cd bf       	out	0x3d, r28	; 61
    4538:	df 91       	pop	r29
    453a:	cf 91       	pop	r28
    453c:	1f 91       	pop	r17
    453e:	0f 91       	pop	r16
    4540:	ff 90       	pop	r15
    4542:	ef 90       	pop	r14
    4544:	df 90       	pop	r13
    4546:	cf 90       	pop	r12
    4548:	bf 90       	pop	r11
    454a:	af 90       	pop	r10
    454c:	9f 90       	pop	r9
    454e:	8f 90       	pop	r8
    4550:	7f 90       	pop	r7
    4552:	6f 90       	pop	r6
    4554:	5f 90       	pop	r5
    4556:	4f 90       	pop	r4
    4558:	3f 90       	pop	r3
    455a:	2f 90       	pop	r2
    455c:	08 95       	ret

0000455e <lora_driver_setOtaaIdentity>:
    455e:	ef 92       	push	r14
    4560:	ff 92       	push	r15
    4562:	0f 93       	push	r16
    4564:	1f 93       	push	r17
    4566:	cf 93       	push	r28
    4568:	df 93       	push	r29
    456a:	ec 01       	movw	r28, r24
    456c:	8b 01       	movw	r16, r22
    456e:	7a 01       	movw	r14, r20
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	f4 de       	rcall	.-536    	; 0x435c <lora_driver_setAdaptiveDataRate>
    4574:	81 11       	cpse	r24, r1
    4576:	0d c0       	rjmp	.+26     	; 0x4592 <lora_driver_setOtaaIdentity+0x34>
    4578:	ce 01       	movw	r24, r28
    457a:	d4 dd       	rcall	.-1112   	; 0x4124 <lora_driver_setApplicationIdentifier>
    457c:	81 11       	cpse	r24, r1
    457e:	09 c0       	rjmp	.+18     	; 0x4592 <lora_driver_setOtaaIdentity+0x34>
    4580:	c8 01       	movw	r24, r16
    4582:	e1 dd       	rcall	.-1086   	; 0x4146 <lora_driver_setApplicationKey>
    4584:	81 11       	cpse	r24, r1
    4586:	05 c0       	rjmp	.+10     	; 0x4592 <lora_driver_setOtaaIdentity+0x34>
    4588:	c7 01       	movw	r24, r14
    458a:	bb dd       	rcall	.-1162   	; 0x4102 <lora_driver_setDeviceIdentifier>
    458c:	81 11       	cpse	r24, r1
    458e:	01 c0       	rjmp	.+2      	; 0x4592 <lora_driver_setOtaaIdentity+0x34>
    4590:	eb dd       	rcall	.-1066   	; 0x4168 <lora_driver_saveMac>
    4592:	df 91       	pop	r29
    4594:	cf 91       	pop	r28
    4596:	1f 91       	pop	r17
    4598:	0f 91       	pop	r16
    459a:	ff 90       	pop	r15
    459c:	ef 90       	pop	r14
    459e:	08 95       	ret

000045a0 <lora_driver_mapReturnCodeToText>:
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	fc 01       	movw	r30, r24
    45a4:	ee 0f       	add	r30, r30
    45a6:	ff 1f       	adc	r31, r31
    45a8:	8e 0f       	add	r24, r30
    45aa:	9f 1f       	adc	r25, r31
    45ac:	fc 01       	movw	r30, r24
    45ae:	e9 56       	subi	r30, 0x69	; 105
    45b0:	f7 4f       	sbci	r31, 0xF7	; 247
    45b2:	81 81       	ldd	r24, Z+1	; 0x01
    45b4:	92 81       	ldd	r25, Z+2	; 0x02
    45b6:	08 95       	ret

000045b8 <decode_port_no>:
    45b8:	dc 01       	movw	r26, r24
    45ba:	00 97       	sbiw	r24, 0x00	; 0
    45bc:	29 f1       	breq	.+74     	; 0x4608 <decode_port_no+0x50>
    45be:	fb 01       	movw	r30, r22
    45c0:	20 81       	ld	r18, Z
    45c2:	fc 01       	movw	r30, r24
    45c4:	01 90       	ld	r0, Z+
    45c6:	00 20       	and	r0, r0
    45c8:	e9 f7       	brne	.-6      	; 0x45c4 <decode_port_no+0xc>
    45ca:	31 97       	sbiw	r30, 0x01	; 1
    45cc:	e8 1b       	sub	r30, r24
    45ce:	f9 0b       	sbc	r31, r25
    45d0:	82 2f       	mov	r24, r18
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	e8 17       	cp	r30, r24
    45d6:	f9 07       	cpc	r31, r25
    45d8:	c8 f0       	brcs	.+50     	; 0x460c <decode_port_no+0x54>
    45da:	80 e0       	ldi	r24, 0x00	; 0
    45dc:	08 c0       	rjmp	.+16     	; 0x45ee <decode_port_no+0x36>
    45de:	88 0f       	add	r24, r24
    45e0:	38 2f       	mov	r19, r24
    45e2:	33 0f       	add	r19, r19
    45e4:	33 0f       	add	r19, r19
    45e6:	83 0f       	add	r24, r19
    45e8:	80 53       	subi	r24, 0x30	; 48
    45ea:	89 0f       	add	r24, r25
    45ec:	2f 5f       	subi	r18, 0xFF	; 255
    45ee:	fd 01       	movw	r30, r26
    45f0:	e2 0f       	add	r30, r18
    45f2:	f1 1d       	adc	r31, r1
    45f4:	90 81       	ld	r25, Z
    45f6:	30 ed       	ldi	r19, 0xD0	; 208
    45f8:	39 0f       	add	r19, r25
    45fa:	3a 30       	cpi	r19, 0x0A	; 10
    45fc:	10 f4       	brcc	.+4      	; 0x4602 <decode_port_no+0x4a>
    45fe:	91 11       	cpse	r25, r1
    4600:	ee cf       	rjmp	.-36     	; 0x45de <decode_port_no+0x26>
    4602:	fb 01       	movw	r30, r22
    4604:	20 83       	st	Z, r18
    4606:	08 95       	ret
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	08 95       	ret
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	08 95       	ret

00004610 <decode_hexadecimal_string_bytes>:
    4610:	0f 93       	push	r16
    4612:	1f 93       	push	r17
    4614:	cf 93       	push	r28
    4616:	df 93       	push	r29
    4618:	dc 01       	movw	r26, r24
    461a:	ea 01       	movw	r28, r20
    461c:	20 97       	sbiw	r28, 0x00	; 0
    461e:	e1 f1       	breq	.+120    	; 0x4698 <decode_hexadecimal_string_bytes+0x88>
    4620:	fa 01       	movw	r30, r20
    4622:	01 90       	ld	r0, Z+
    4624:	00 20       	and	r0, r0
    4626:	e9 f7       	brne	.-6      	; 0x4622 <decode_hexadecimal_string_bytes+0x12>
    4628:	31 97       	sbiw	r30, 0x01	; 1
    462a:	e4 1b       	sub	r30, r20
    462c:	f5 0b       	sbc	r31, r21
    462e:	32 97       	sbiw	r30, 0x02	; 2
    4630:	10 f5       	brcc	.+68     	; 0x4676 <decode_hexadecimal_string_bytes+0x66>
    4632:	32 c0       	rjmp	.+100    	; 0x4698 <decode_hexadecimal_string_bytes+0x88>
    4634:	8d 01       	movw	r16, r26
    4636:	04 0f       	add	r16, r20
    4638:	15 1f       	adc	r17, r21
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	ae 01       	movw	r20, r28
    463e:	42 0f       	add	r20, r18
    4640:	53 1f       	adc	r21, r19
    4642:	fa 01       	movw	r30, r20
    4644:	90 81       	ld	r25, Z
    4646:	91 34       	cpi	r25, 0x41	; 65
    4648:	28 f0       	brcs	.+10     	; 0x4654 <decode_hexadecimal_string_bytes+0x44>
    464a:	97 53       	subi	r25, 0x37	; 55
    464c:	59 2f       	mov	r21, r25
    464e:	52 95       	swap	r21
    4650:	50 7f       	andi	r21, 0xF0	; 240
    4652:	03 c0       	rjmp	.+6      	; 0x465a <decode_hexadecimal_string_bytes+0x4a>
    4654:	59 2f       	mov	r21, r25
    4656:	52 95       	swap	r21
    4658:	50 7f       	andi	r21, 0xF0	; 240
    465a:	2c 0f       	add	r18, r28
    465c:	3d 1f       	adc	r19, r29
    465e:	f9 01       	movw	r30, r18
    4660:	91 81       	ldd	r25, Z+1	; 0x01
    4662:	91 34       	cpi	r25, 0x41	; 65
    4664:	10 f0       	brcs	.+4      	; 0x466a <decode_hexadecimal_string_bytes+0x5a>
    4666:	97 53       	subi	r25, 0x37	; 55
    4668:	01 c0       	rjmp	.+2      	; 0x466c <decode_hexadecimal_string_bytes+0x5c>
    466a:	90 53       	subi	r25, 0x30	; 48
    466c:	95 0f       	add	r25, r21
    466e:	f8 01       	movw	r30, r16
    4670:	90 83       	st	Z, r25
    4672:	8f 5f       	subi	r24, 0xFF	; 255
    4674:	01 c0       	rjmp	.+2      	; 0x4678 <decode_hexadecimal_string_bytes+0x68>
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	28 2f       	mov	r18, r24
    467a:	22 0f       	add	r18, r18
    467c:	48 2f       	mov	r20, r24
    467e:	50 e0       	ldi	r21, 0x00	; 0
    4680:	fe 01       	movw	r30, r28
    4682:	01 90       	ld	r0, Z+
    4684:	00 20       	and	r0, r0
    4686:	e9 f7       	brne	.-6      	; 0x4682 <decode_hexadecimal_string_bytes+0x72>
    4688:	31 97       	sbiw	r30, 0x01	; 1
    468a:	ec 1b       	sub	r30, r28
    468c:	fd 0b       	sbc	r31, r29
    468e:	4e 17       	cp	r20, r30
    4690:	5f 07       	cpc	r21, r31
    4692:	10 f4       	brcc	.+4      	; 0x4698 <decode_hexadecimal_string_bytes+0x88>
    4694:	86 13       	cpse	r24, r22
    4696:	ce cf       	rjmp	.-100    	; 0x4634 <decode_hexadecimal_string_bytes+0x24>
    4698:	df 91       	pop	r29
    469a:	cf 91       	pop	r28
    469c:	1f 91       	pop	r17
    469e:	0f 91       	pop	r16
    46a0:	08 95       	ret

000046a2 <_serialCallBack>:
    46a2:	80 91 aa 18 	lds	r24, 0x18AA	; 0x8018aa <crc_sum.1945>
    46a6:	86 0f       	add	r24, r22
    46a8:	80 93 aa 18 	sts	0x18AA, r24	; 0x8018aa <crc_sum.1945>
    46ac:	90 91 ad 18 	lds	r25, 0x18AD	; 0x8018ad <_mh_state>
    46b0:	91 30       	cpi	r25, 0x01	; 1
    46b2:	79 f0       	breq	.+30     	; 0x46d2 <_serialCallBack+0x30>
    46b4:	28 f0       	brcs	.+10     	; 0x46c0 <_serialCallBack+0x1e>
    46b6:	92 30       	cpi	r25, 0x02	; 2
    46b8:	a9 f0       	breq	.+42     	; 0x46e4 <_serialCallBack+0x42>
    46ba:	93 30       	cpi	r25, 0x03	; 3
    46bc:	19 f1       	breq	.+70     	; 0x4704 <_serialCallBack+0x62>
    46be:	08 95       	ret
    46c0:	6f 3f       	cpi	r22, 0xFF	; 255
    46c2:	09 f0       	breq	.+2      	; 0x46c6 <_serialCallBack+0x24>
    46c4:	48 c0       	rjmp	.+144    	; 0x4756 <_serialCallBack+0xb4>
    46c6:	10 92 aa 18 	sts	0x18AA, r1	; 0x8018aa <crc_sum.1945>
    46ca:	81 e0       	ldi	r24, 0x01	; 1
    46cc:	80 93 ad 18 	sts	0x18AD, r24	; 0x8018ad <_mh_state>
    46d0:	08 95       	ret
    46d2:	66 38       	cpi	r22, 0x86	; 134
    46d4:	09 f0       	breq	.+2      	; 0x46d8 <_serialCallBack+0x36>
    46d6:	3f c0       	rjmp	.+126    	; 0x4756 <_serialCallBack+0xb4>
    46d8:	10 92 a9 18 	sts	0x18A9, r1	; 0x8018a9 <inDex.1943>
    46dc:	82 e0       	ldi	r24, 0x02	; 2
    46de:	80 93 ad 18 	sts	0x18AD, r24	; 0x8018ad <_mh_state>
    46e2:	08 95       	ret
    46e4:	e0 91 a9 18 	lds	r30, 0x18A9	; 0x8018a9 <inDex.1943>
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	8e 0f       	add	r24, r30
    46ec:	80 93 a9 18 	sts	0x18A9, r24	; 0x8018a9 <inDex.1943>
    46f0:	f0 e0       	ldi	r31, 0x00	; 0
    46f2:	e9 55       	subi	r30, 0x59	; 89
    46f4:	f7 4e       	sbci	r31, 0xE7	; 231
    46f6:	60 83       	st	Z, r22
    46f8:	82 30       	cpi	r24, 0x02	; 2
    46fa:	69 f5       	brne	.+90     	; 0x4756 <_serialCallBack+0xb4>
    46fc:	83 e0       	ldi	r24, 0x03	; 3
    46fe:	80 93 ad 18 	sts	0x18AD, r24	; 0x8018ad <_mh_state>
    4702:	08 95       	ret
    4704:	90 91 a9 18 	lds	r25, 0x18A9	; 0x8018a9 <inDex.1943>
    4708:	21 e0       	ldi	r18, 0x01	; 1
    470a:	29 0f       	add	r18, r25
    470c:	20 93 a9 18 	sts	0x18A9, r18	; 0x8018a9 <inDex.1943>
    4710:	96 30       	cpi	r25, 0x06	; 6
    4712:	09 f5       	brne	.+66     	; 0x4756 <_serialCallBack+0xb4>
    4714:	81 11       	cpse	r24, r1
    4716:	0e c0       	rjmp	.+28     	; 0x4734 <_serialCallBack+0x92>
    4718:	e7 ea       	ldi	r30, 0xA7	; 167
    471a:	f8 e1       	ldi	r31, 0x18	; 24
    471c:	80 81       	ld	r24, Z
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	98 2f       	mov	r25, r24
    4722:	88 27       	eor	r24, r24
    4724:	21 81       	ldd	r18, Z+1	; 0x01
    4726:	82 0f       	add	r24, r18
    4728:	91 1d       	adc	r25, r1
    472a:	90 93 af 18 	sts	0x18AF, r25	; 0x8018af <_ppm+0x1>
    472e:	80 93 ae 18 	sts	0x18AE, r24	; 0x8018ae <_ppm>
    4732:	04 c0       	rjmp	.+8      	; 0x473c <_serialCallBack+0x9a>
    4734:	10 92 af 18 	sts	0x18AF, r1	; 0x8018af <_ppm+0x1>
    4738:	10 92 ae 18 	sts	0x18AE, r1	; 0x8018ae <_ppm>
    473c:	10 92 ad 18 	sts	0x18AD, r1	; 0x8018ad <_mh_state>
    4740:	e0 91 ab 18 	lds	r30, 0x18AB	; 0x8018ab <_appCallBack>
    4744:	f0 91 ac 18 	lds	r31, 0x18AC	; 0x8018ac <_appCallBack+0x1>
    4748:	30 97       	sbiw	r30, 0x00	; 0
    474a:	29 f0       	breq	.+10     	; 0x4756 <_serialCallBack+0xb4>
    474c:	80 91 ae 18 	lds	r24, 0x18AE	; 0x8018ae <_ppm>
    4750:	90 91 af 18 	lds	r25, 0x18AF	; 0x8018af <_ppm+0x1>
    4754:	19 95       	eicall
    4756:	08 95       	ret

00004758 <mh_z19_initialise>:
    4758:	8f 92       	push	r8
    475a:	9f 92       	push	r9
    475c:	af 92       	push	r10
    475e:	cf 92       	push	r12
    4760:	ef 92       	push	r14
    4762:	0f 93       	push	r16
    4764:	0f 2e       	mov	r0, r31
    4766:	f1 e5       	ldi	r31, 0x51	; 81
    4768:	8f 2e       	mov	r8, r31
    476a:	f3 e2       	ldi	r31, 0x23	; 35
    476c:	9f 2e       	mov	r9, r31
    476e:	f0 2d       	mov	r31, r0
    4770:	68 94       	set
    4772:	aa 24       	eor	r10, r10
    4774:	a4 f8       	bld	r10, 4
    4776:	68 94       	set
    4778:	cc 24       	eor	r12, r12
    477a:	c4 f8       	bld	r12, 4
    477c:	e1 2c       	mov	r14, r1
    477e:	00 e0       	ldi	r16, 0x00	; 0
    4780:	23 e0       	ldi	r18, 0x03	; 3
    4782:	40 e8       	ldi	r20, 0x80	; 128
    4784:	55 e2       	ldi	r21, 0x25	; 37
    4786:	60 e0       	ldi	r22, 0x00	; 0
    4788:	70 e0       	ldi	r23, 0x00	; 0
    478a:	3f d0       	rcall	.+126    	; 0x480a <serial_create>
    478c:	90 93 b1 18 	sts	0x18B1, r25	; 0x8018b1 <_serial+0x1>
    4790:	80 93 b0 18 	sts	0x18B0, r24	; 0x8018b0 <_serial>
    4794:	0f 91       	pop	r16
    4796:	ef 90       	pop	r14
    4798:	cf 90       	pop	r12
    479a:	af 90       	pop	r10
    479c:	9f 90       	pop	r9
    479e:	8f 90       	pop	r8
    47a0:	08 95       	ret

000047a2 <mh_z19_injectCallBack>:
    47a2:	90 93 ac 18 	sts	0x18AC, r25	; 0x8018ac <_appCallBack+0x1>
    47a6:	80 93 ab 18 	sts	0x18AB, r24	; 0x8018ab <_appCallBack>
    47aa:	08 95       	ret

000047ac <mh_z19_takeMeassuring>:
    47ac:	cf 93       	push	r28
    47ae:	df 93       	push	r29
    47b0:	cd b7       	in	r28, 0x3d	; 61
    47b2:	de b7       	in	r29, 0x3e	; 62
    47b4:	29 97       	sbiw	r28, 0x09	; 9
    47b6:	0f b6       	in	r0, 0x3f	; 63
    47b8:	f8 94       	cli
    47ba:	de bf       	out	0x3e, r29	; 62
    47bc:	0f be       	out	0x3f, r0	; 63
    47be:	cd bf       	out	0x3d, r28	; 61
    47c0:	89 e0       	ldi	r24, 0x09	; 9
    47c2:	e2 e4       	ldi	r30, 0x42	; 66
    47c4:	f2 e0       	ldi	r31, 0x02	; 2
    47c6:	9e 01       	movw	r18, r28
    47c8:	2f 5f       	subi	r18, 0xFF	; 255
    47ca:	3f 4f       	sbci	r19, 0xFF	; 255
    47cc:	d9 01       	movw	r26, r18
    47ce:	01 90       	ld	r0, Z+
    47d0:	0d 92       	st	X+, r0
    47d2:	8a 95       	dec	r24
    47d4:	e1 f7       	brne	.-8      	; 0x47ce <mh_z19_takeMeassuring+0x22>
    47d6:	10 92 af 18 	sts	0x18AF, r1	; 0x8018af <_ppm+0x1>
    47da:	10 92 ae 18 	sts	0x18AE, r1	; 0x8018ae <_ppm>
    47de:	80 91 b0 18 	lds	r24, 0x18B0	; 0x8018b0 <_serial>
    47e2:	90 91 b1 18 	lds	r25, 0x18B1	; 0x8018b1 <_serial+0x1>
    47e6:	00 97       	sbiw	r24, 0x00	; 0
    47e8:	31 f0       	breq	.+12     	; 0x47f6 <mh_z19_takeMeassuring+0x4a>
    47ea:	42 2f       	mov	r20, r18
    47ec:	53 2f       	mov	r21, r19
    47ee:	69 e0       	ldi	r22, 0x09	; 9
    47f0:	d9 d0       	rcall	.+434    	; 0x49a4 <serial_sendBytes>
    47f2:	80 e0       	ldi	r24, 0x00	; 0
    47f4:	01 c0       	rjmp	.+2      	; 0x47f8 <mh_z19_takeMeassuring+0x4c>
    47f6:	82 e0       	ldi	r24, 0x02	; 2
    47f8:	29 96       	adiw	r28, 0x09	; 9
    47fa:	0f b6       	in	r0, 0x3f	; 63
    47fc:	f8 94       	cli
    47fe:	de bf       	out	0x3e, r29	; 62
    4800:	0f be       	out	0x3f, r0	; 63
    4802:	cd bf       	out	0x3d, r28	; 61
    4804:	df 91       	pop	r29
    4806:	cf 91       	pop	r28
    4808:	08 95       	ret

0000480a <serial_create>:
    480a:	2f 92       	push	r2
    480c:	3f 92       	push	r3
    480e:	4f 92       	push	r4
    4810:	5f 92       	push	r5
    4812:	6f 92       	push	r6
    4814:	7f 92       	push	r7
    4816:	8f 92       	push	r8
    4818:	9f 92       	push	r9
    481a:	af 92       	push	r10
    481c:	cf 92       	push	r12
    481e:	ef 92       	push	r14
    4820:	ff 92       	push	r15
    4822:	0f 93       	push	r16
    4824:	1f 93       	push	r17
    4826:	cf 93       	push	r28
    4828:	df 93       	push	r29
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
    482e:	f8 2e       	mov	r15, r24
    4830:	2a 01       	movw	r4, r20
    4832:	3b 01       	movw	r6, r22
    4834:	88 e0       	ldi	r24, 0x08	; 8
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <malloc>
    483c:	8c 01       	movw	r16, r24
    483e:	8f 2d       	mov	r24, r15
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	fc 01       	movw	r30, r24
    4844:	ee 0f       	add	r30, r30
    4846:	ff 1f       	adc	r31, r31
    4848:	ee 54       	subi	r30, 0x4E	; 78
    484a:	f7 4e       	sbci	r31, 0xE7	; 231
    484c:	11 83       	std	Z+1, r17	; 0x01
    484e:	00 83       	st	Z, r16
    4850:	01 15       	cp	r16, r1
    4852:	11 05       	cpc	r17, r1
    4854:	09 f4       	brne	.+2      	; 0x4858 <serial_create+0x4e>
    4856:	69 c0       	rjmp	.+210    	; 0x492a <serial_create+0x120>
    4858:	88 0f       	add	r24, r24
    485a:	99 1f       	adc	r25, r25
    485c:	fc 01       	movw	r30, r24
    485e:	e5 5f       	subi	r30, 0xF5	; 245
    4860:	fd 4f       	sbci	r31, 0xFD	; 253
    4862:	80 81       	ld	r24, Z
    4864:	91 81       	ldd	r25, Z+1	; 0x01
    4866:	d8 01       	movw	r26, r16
    4868:	8d 93       	st	X+, r24
    486a:	9c 93       	st	X, r25
    486c:	6c 2d       	mov	r22, r12
    486e:	70 e0       	ldi	r23, 0x00	; 0
    4870:	84 e0       	ldi	r24, 0x04	; 4
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <calloc>
    4878:	1c 01       	movw	r2, r24
    487a:	61 e0       	ldi	r22, 0x01	; 1
    487c:	70 e0       	ldi	r23, 0x00	; 0
    487e:	86 e0       	ldi	r24, 0x06	; 6
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <calloc>
    4886:	7c 01       	movw	r14, r24
    4888:	4c 2d       	mov	r20, r12
    488a:	b1 01       	movw	r22, r2
    488c:	f1 d6       	rcall	.+3554   	; 0x5670 <fifo_init>
    488e:	f8 01       	movw	r30, r16
    4890:	f5 82       	std	Z+5, r15	; 0x05
    4892:	e4 82       	std	Z+4, r14	; 0x04
    4894:	6a 2d       	mov	r22, r10
    4896:	70 e0       	ldi	r23, 0x00	; 0
    4898:	84 e0       	ldi	r24, 0x04	; 4
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <calloc>
    48a0:	1c 01       	movw	r2, r24
    48a2:	61 e0       	ldi	r22, 0x01	; 1
    48a4:	70 e0       	ldi	r23, 0x00	; 0
    48a6:	86 e0       	ldi	r24, 0x06	; 6
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <calloc>
    48ae:	7c 01       	movw	r14, r24
    48b0:	4a 2d       	mov	r20, r10
    48b2:	b1 01       	movw	r22, r2
    48b4:	dd d6       	rcall	.+3514   	; 0x5670 <fifo_init>
    48b6:	d8 01       	movw	r26, r16
    48b8:	13 96       	adiw	r26, 0x03	; 3
    48ba:	fc 92       	st	X, r15
    48bc:	ee 92       	st	-X, r14
    48be:	12 97       	sbiw	r26, 0x02	; 2
    48c0:	17 96       	adiw	r26, 0x07	; 7
    48c2:	9c 92       	st	X, r9
    48c4:	8e 92       	st	-X, r8
    48c6:	16 97       	sbiw	r26, 0x06	; 6
    48c8:	ff b6       	in	r15, 0x3f	; 63
    48ca:	f8 94       	cli
    48cc:	ed 91       	ld	r30, X+
    48ce:	fc 91       	ld	r31, X
    48d0:	11 97       	sbiw	r26, 0x01	; 1
    48d2:	36 97       	sbiw	r30, 0x06	; 6
    48d4:	80 81       	ld	r24, Z
    48d6:	82 60       	ori	r24, 0x02	; 2
    48d8:	80 83       	st	Z, r24
    48da:	8d 90       	ld	r8, X+
    48dc:	9c 90       	ld	r9, X
    48de:	c3 01       	movw	r24, r6
    48e0:	b2 01       	movw	r22, r4
    48e2:	b4 d7       	rcall	.+3944   	; 0x584c <__floatunsisf>
    48e4:	20 e0       	ldi	r18, 0x00	; 0
    48e6:	30 e0       	ldi	r19, 0x00	; 0
    48e8:	40 e0       	ldi	r20, 0x00	; 0
    48ea:	51 e4       	ldi	r21, 0x41	; 65
    48ec:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__mulsf3>
    48f0:	9b 01       	movw	r18, r22
    48f2:	ac 01       	movw	r20, r24
    48f4:	60 e0       	ldi	r22, 0x00	; 0
    48f6:	74 e2       	ldi	r23, 0x24	; 36
    48f8:	84 e7       	ldi	r24, 0x74	; 116
    48fa:	9b e4       	ldi	r25, 0x4B	; 75
    48fc:	3c d7       	rcall	.+3704   	; 0x5776 <__divsf3>
    48fe:	20 e0       	ldi	r18, 0x00	; 0
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	40 e8       	ldi	r20, 0x80	; 128
    4904:	5f e3       	ldi	r21, 0x3F	; 63
    4906:	d0 d6       	rcall	.+3488   	; 0x56a8 <__subsf3>
    4908:	71 d9       	rcall	.-3358   	; 0x3bec <__fixunssfsi>
    490a:	f4 01       	movw	r30, r8
    490c:	32 97       	sbiw	r30, 0x02	; 2
    490e:	60 83       	st	Z, r22
    4910:	d8 01       	movw	r26, r16
    4912:	ed 91       	ld	r30, X+
    4914:	fc 91       	ld	r31, X
    4916:	11 97       	sbiw	r26, 0x01	; 1
    4918:	35 97       	sbiw	r30, 0x05	; 5
    491a:	88 e9       	ldi	r24, 0x98	; 152
    491c:	80 83       	st	Z, r24
    491e:	ed 91       	ld	r30, X+
    4920:	fc 91       	ld	r31, X
    4922:	34 97       	sbiw	r30, 0x04	; 4
    4924:	86 e0       	ldi	r24, 0x06	; 6
    4926:	80 83       	st	Z, r24
    4928:	ff be       	out	0x3f, r15	; 63
    492a:	c8 01       	movw	r24, r16
    492c:	df 91       	pop	r29
    492e:	cf 91       	pop	r28
    4930:	1f 91       	pop	r17
    4932:	0f 91       	pop	r16
    4934:	ff 90       	pop	r15
    4936:	ef 90       	pop	r14
    4938:	cf 90       	pop	r12
    493a:	af 90       	pop	r10
    493c:	9f 90       	pop	r9
    493e:	8f 90       	pop	r8
    4940:	7f 90       	pop	r7
    4942:	6f 90       	pop	r6
    4944:	5f 90       	pop	r5
    4946:	4f 90       	pop	r4
    4948:	3f 90       	pop	r3
    494a:	2f 90       	pop	r2
    494c:	08 95       	ret

0000494e <serial_sendByte>:
    494e:	cf 93       	push	r28
    4950:	df 93       	push	r29
    4952:	dc 01       	movw	r26, r24
    4954:	89 2b       	or	r24, r25
    4956:	01 f1       	breq	.+64     	; 0x4998 <serial_sendByte+0x4a>
    4958:	12 96       	adiw	r26, 0x02	; 2
    495a:	ed 91       	ld	r30, X+
    495c:	fc 91       	ld	r31, X
    495e:	13 97       	sbiw	r26, 0x03	; 3
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	82 81       	ldd	r24, Z+2	; 0x02
    4964:	25 81       	ldd	r18, Z+5	; 0x05
    4966:	98 1b       	sub	r25, r24
    4968:	92 23       	and	r25, r18
    496a:	84 81       	ldd	r24, Z+4	; 0x04
    496c:	98 17       	cp	r25, r24
    496e:	b1 f0       	breq	.+44     	; 0x499c <serial_sendByte+0x4e>
    4970:	83 81       	ldd	r24, Z+3	; 0x03
    4972:	26 95       	lsr	r18
    4974:	28 23       	and	r18, r24
    4976:	c0 81       	ld	r28, Z
    4978:	d1 81       	ldd	r29, Z+1	; 0x01
    497a:	c2 0f       	add	r28, r18
    497c:	d1 1d       	adc	r29, r1
    497e:	68 83       	st	Y, r22
    4980:	8f 5f       	subi	r24, 0xFF	; 255
    4982:	95 81       	ldd	r25, Z+5	; 0x05
    4984:	89 23       	and	r24, r25
    4986:	83 83       	std	Z+3, r24	; 0x03
    4988:	ed 91       	ld	r30, X+
    498a:	fc 91       	ld	r31, X
    498c:	35 97       	sbiw	r30, 0x05	; 5
    498e:	80 81       	ld	r24, Z
    4990:	80 62       	ori	r24, 0x20	; 32
    4992:	80 83       	st	Z, r24
    4994:	80 e0       	ldi	r24, 0x00	; 0
    4996:	03 c0       	rjmp	.+6      	; 0x499e <serial_sendByte+0x50>
    4998:	81 e0       	ldi	r24, 0x01	; 1
    499a:	01 c0       	rjmp	.+2      	; 0x499e <serial_sendByte+0x50>
    499c:	82 e0       	ldi	r24, 0x02	; 2
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	08 95       	ret

000049a4 <serial_sendBytes>:
    49a4:	ef 92       	push	r14
    49a6:	ff 92       	push	r15
    49a8:	0f 93       	push	r16
    49aa:	1f 93       	push	r17
    49ac:	cf 93       	push	r28
    49ae:	df 93       	push	r29
    49b0:	7c 01       	movw	r14, r24
    49b2:	00 97       	sbiw	r24, 0x00	; 0
    49b4:	09 f4       	brne	.+2      	; 0x49b8 <serial_sendBytes+0x14>
    49b6:	41 c0       	rjmp	.+130    	; 0x4a3a <serial_sendBytes+0x96>
    49b8:	dc 01       	movw	r26, r24
    49ba:	12 96       	adiw	r26, 0x02	; 2
    49bc:	ed 91       	ld	r30, X+
    49be:	fc 91       	ld	r31, X
    49c0:	13 97       	sbiw	r26, 0x03	; 3
    49c2:	93 81       	ldd	r25, Z+3	; 0x03
    49c4:	82 81       	ldd	r24, Z+2	; 0x02
    49c6:	98 1b       	sub	r25, r24
    49c8:	85 81       	ldd	r24, Z+5	; 0x05
    49ca:	98 23       	and	r25, r24
    49cc:	84 81       	ldd	r24, Z+4	; 0x04
    49ce:	89 1b       	sub	r24, r25
    49d0:	86 17       	cp	r24, r22
    49d2:	a8 f1       	brcs	.+106    	; 0x4a3e <serial_sendBytes+0x9a>
    49d4:	66 23       	and	r22, r22
    49d6:	41 f1       	breq	.+80     	; 0x4a28 <serial_sendBytes+0x84>
    49d8:	84 2f       	mov	r24, r20
    49da:	95 2f       	mov	r25, r21
    49dc:	dc 01       	movw	r26, r24
    49de:	61 50       	subi	r22, 0x01	; 1
    49e0:	46 2f       	mov	r20, r22
    49e2:	50 e0       	ldi	r21, 0x00	; 0
    49e4:	4f 5f       	subi	r20, 0xFF	; 255
    49e6:	5f 4f       	sbci	r21, 0xFF	; 255
    49e8:	48 0f       	add	r20, r24
    49ea:	59 1f       	adc	r21, r25
    49ec:	e7 01       	movw	r28, r14
    49ee:	ea 81       	ldd	r30, Y+2	; 0x02
    49f0:	fb 81       	ldd	r31, Y+3	; 0x03
    49f2:	93 81       	ldd	r25, Z+3	; 0x03
    49f4:	82 81       	ldd	r24, Z+2	; 0x02
    49f6:	25 81       	ldd	r18, Z+5	; 0x05
    49f8:	98 1b       	sub	r25, r24
    49fa:	92 23       	and	r25, r18
    49fc:	84 81       	ldd	r24, Z+4	; 0x04
    49fe:	98 17       	cp	r25, r24
    4a00:	79 f0       	breq	.+30     	; 0x4a20 <serial_sendBytes+0x7c>
    4a02:	8c 91       	ld	r24, X
    4a04:	93 81       	ldd	r25, Z+3	; 0x03
    4a06:	26 95       	lsr	r18
    4a08:	29 23       	and	r18, r25
    4a0a:	60 81       	ld	r22, Z
    4a0c:	71 81       	ldd	r23, Z+1	; 0x01
    4a0e:	8b 01       	movw	r16, r22
    4a10:	02 0f       	add	r16, r18
    4a12:	11 1d       	adc	r17, r1
    4a14:	e8 01       	movw	r28, r16
    4a16:	88 83       	st	Y, r24
    4a18:	9f 5f       	subi	r25, 0xFF	; 255
    4a1a:	85 81       	ldd	r24, Z+5	; 0x05
    4a1c:	98 23       	and	r25, r24
    4a1e:	93 83       	std	Z+3, r25	; 0x03
    4a20:	11 96       	adiw	r26, 0x01	; 1
    4a22:	a4 17       	cp	r26, r20
    4a24:	b5 07       	cpc	r27, r21
    4a26:	11 f7       	brne	.-60     	; 0x49ec <serial_sendBytes+0x48>
    4a28:	d7 01       	movw	r26, r14
    4a2a:	ed 91       	ld	r30, X+
    4a2c:	fc 91       	ld	r31, X
    4a2e:	35 97       	sbiw	r30, 0x05	; 5
    4a30:	80 81       	ld	r24, Z
    4a32:	80 62       	ori	r24, 0x20	; 32
    4a34:	80 83       	st	Z, r24
    4a36:	80 e0       	ldi	r24, 0x00	; 0
    4a38:	03 c0       	rjmp	.+6      	; 0x4a40 <serial_sendBytes+0x9c>
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	01 c0       	rjmp	.+2      	; 0x4a40 <serial_sendBytes+0x9c>
    4a3e:	82 e0       	ldi	r24, 0x02	; 2
    4a40:	df 91       	pop	r29
    4a42:	cf 91       	pop	r28
    4a44:	1f 91       	pop	r17
    4a46:	0f 91       	pop	r16
    4a48:	ff 90       	pop	r15
    4a4a:	ef 90       	pop	r14
    4a4c:	08 95       	ret

00004a4e <serial_getByte>:
    4a4e:	00 97       	sbiw	r24, 0x00	; 0
    4a50:	d1 f0       	breq	.+52     	; 0x4a86 <serial_getByte+0x38>
    4a52:	dc 01       	movw	r26, r24
    4a54:	14 96       	adiw	r26, 0x04	; 4
    4a56:	ed 91       	ld	r30, X+
    4a58:	fc 91       	ld	r31, X
    4a5a:	15 97       	sbiw	r26, 0x05	; 5
    4a5c:	93 81       	ldd	r25, Z+3	; 0x03
    4a5e:	82 81       	ldd	r24, Z+2	; 0x02
    4a60:	98 17       	cp	r25, r24
    4a62:	99 f0       	breq	.+38     	; 0x4a8a <serial_getByte+0x3c>
    4a64:	92 81       	ldd	r25, Z+2	; 0x02
    4a66:	85 81       	ldd	r24, Z+5	; 0x05
    4a68:	86 95       	lsr	r24
    4a6a:	89 23       	and	r24, r25
    4a6c:	a0 81       	ld	r26, Z
    4a6e:	b1 81       	ldd	r27, Z+1	; 0x01
    4a70:	a8 0f       	add	r26, r24
    4a72:	b1 1d       	adc	r27, r1
    4a74:	8c 91       	ld	r24, X
    4a76:	db 01       	movw	r26, r22
    4a78:	8c 93       	st	X, r24
    4a7a:	9f 5f       	subi	r25, 0xFF	; 255
    4a7c:	85 81       	ldd	r24, Z+5	; 0x05
    4a7e:	98 23       	and	r25, r24
    4a80:	92 83       	std	Z+2, r25	; 0x02
    4a82:	80 e0       	ldi	r24, 0x00	; 0
    4a84:	08 95       	ret
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	08 95       	ret
    4a8a:	83 e0       	ldi	r24, 0x03	; 3
    4a8c:	08 95       	ret

00004a8e <__vector_25>:
    4a8e:	1f 92       	push	r1
    4a90:	0f 92       	push	r0
    4a92:	0f b6       	in	r0, 0x3f	; 63
    4a94:	0f 92       	push	r0
    4a96:	11 24       	eor	r1, r1
    4a98:	0b b6       	in	r0, 0x3b	; 59
    4a9a:	0f 92       	push	r0
    4a9c:	2f 93       	push	r18
    4a9e:	3f 93       	push	r19
    4aa0:	4f 93       	push	r20
    4aa2:	5f 93       	push	r21
    4aa4:	6f 93       	push	r22
    4aa6:	7f 93       	push	r23
    4aa8:	8f 93       	push	r24
    4aaa:	9f 93       	push	r25
    4aac:	af 93       	push	r26
    4aae:	bf 93       	push	r27
    4ab0:	cf 93       	push	r28
    4ab2:	df 93       	push	r29
    4ab4:	ef 93       	push	r30
    4ab6:	ff 93       	push	r31
    4ab8:	a0 91 b2 18 	lds	r26, 0x18B2	; 0x8018b2 <_ser_handle>
    4abc:	b0 91 b3 18 	lds	r27, 0x18B3	; 0x8018b3 <_ser_handle+0x1>
    4ac0:	10 97       	sbiw	r26, 0x00	; 0
    4ac2:	11 f1       	breq	.+68     	; 0x4b08 <__vector_25+0x7a>
    4ac4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4ac8:	14 96       	adiw	r26, 0x04	; 4
    4aca:	ed 91       	ld	r30, X+
    4acc:	fc 91       	ld	r31, X
    4ace:	15 97       	sbiw	r26, 0x05	; 5
    4ad0:	93 81       	ldd	r25, Z+3	; 0x03
    4ad2:	82 81       	ldd	r24, Z+2	; 0x02
    4ad4:	25 81       	ldd	r18, Z+5	; 0x05
    4ad6:	98 1b       	sub	r25, r24
    4ad8:	92 23       	and	r25, r18
    4ada:	84 81       	ldd	r24, Z+4	; 0x04
    4adc:	98 17       	cp	r25, r24
    4ade:	61 f0       	breq	.+24     	; 0x4af8 <__vector_25+0x6a>
    4ae0:	83 81       	ldd	r24, Z+3	; 0x03
    4ae2:	26 95       	lsr	r18
    4ae4:	28 23       	and	r18, r24
    4ae6:	c0 81       	ld	r28, Z
    4ae8:	d1 81       	ldd	r29, Z+1	; 0x01
    4aea:	c2 0f       	add	r28, r18
    4aec:	d1 1d       	adc	r29, r1
    4aee:	68 83       	st	Y, r22
    4af0:	8f 5f       	subi	r24, 0xFF	; 255
    4af2:	95 81       	ldd	r25, Z+5	; 0x05
    4af4:	89 23       	and	r24, r25
    4af6:	83 83       	std	Z+3, r24	; 0x03
    4af8:	16 96       	adiw	r26, 0x06	; 6
    4afa:	ed 91       	ld	r30, X+
    4afc:	fc 91       	ld	r31, X
    4afe:	17 97       	sbiw	r26, 0x07	; 7
    4b00:	30 97       	sbiw	r30, 0x00	; 0
    4b02:	11 f0       	breq	.+4      	; 0x4b08 <__vector_25+0x7a>
    4b04:	cd 01       	movw	r24, r26
    4b06:	19 95       	eicall
    4b08:	ff 91       	pop	r31
    4b0a:	ef 91       	pop	r30
    4b0c:	df 91       	pop	r29
    4b0e:	cf 91       	pop	r28
    4b10:	bf 91       	pop	r27
    4b12:	af 91       	pop	r26
    4b14:	9f 91       	pop	r25
    4b16:	8f 91       	pop	r24
    4b18:	7f 91       	pop	r23
    4b1a:	6f 91       	pop	r22
    4b1c:	5f 91       	pop	r21
    4b1e:	4f 91       	pop	r20
    4b20:	3f 91       	pop	r19
    4b22:	2f 91       	pop	r18
    4b24:	0f 90       	pop	r0
    4b26:	0b be       	out	0x3b, r0	; 59
    4b28:	0f 90       	pop	r0
    4b2a:	0f be       	out	0x3f, r0	; 63
    4b2c:	0f 90       	pop	r0
    4b2e:	1f 90       	pop	r1
    4b30:	18 95       	reti

00004b32 <__vector_26>:
    4b32:	1f 92       	push	r1
    4b34:	0f 92       	push	r0
    4b36:	0f b6       	in	r0, 0x3f	; 63
    4b38:	0f 92       	push	r0
    4b3a:	11 24       	eor	r1, r1
    4b3c:	0b b6       	in	r0, 0x3b	; 59
    4b3e:	0f 92       	push	r0
    4b40:	2f 93       	push	r18
    4b42:	8f 93       	push	r24
    4b44:	9f 93       	push	r25
    4b46:	af 93       	push	r26
    4b48:	bf 93       	push	r27
    4b4a:	ef 93       	push	r30
    4b4c:	ff 93       	push	r31
    4b4e:	e0 91 b2 18 	lds	r30, 0x18B2	; 0x8018b2 <_ser_handle>
    4b52:	f0 91 b3 18 	lds	r31, 0x18B3	; 0x8018b3 <_ser_handle+0x1>
    4b56:	30 97       	sbiw	r30, 0x00	; 0
    4b58:	b9 f0       	breq	.+46     	; 0x4b88 <__vector_26+0x56>
    4b5a:	02 80       	ldd	r0, Z+2	; 0x02
    4b5c:	f3 81       	ldd	r31, Z+3	; 0x03
    4b5e:	e0 2d       	mov	r30, r0
    4b60:	93 81       	ldd	r25, Z+3	; 0x03
    4b62:	82 81       	ldd	r24, Z+2	; 0x02
    4b64:	98 17       	cp	r25, r24
    4b66:	b1 f0       	breq	.+44     	; 0x4b94 <__vector_26+0x62>
    4b68:	92 81       	ldd	r25, Z+2	; 0x02
    4b6a:	85 81       	ldd	r24, Z+5	; 0x05
    4b6c:	28 2f       	mov	r18, r24
    4b6e:	26 95       	lsr	r18
    4b70:	29 23       	and	r18, r25
    4b72:	a0 81       	ld	r26, Z
    4b74:	b1 81       	ldd	r27, Z+1	; 0x01
    4b76:	a2 0f       	add	r26, r18
    4b78:	b1 1d       	adc	r27, r1
    4b7a:	2c 91       	ld	r18, X
    4b7c:	9f 5f       	subi	r25, 0xFF	; 255
    4b7e:	89 23       	and	r24, r25
    4b80:	82 83       	std	Z+2, r24	; 0x02
    4b82:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4b86:	0b c0       	rjmp	.+22     	; 0x4b9e <__vector_26+0x6c>
    4b88:	e1 ec       	ldi	r30, 0xC1	; 193
    4b8a:	f0 e0       	ldi	r31, 0x00	; 0
    4b8c:	80 81       	ld	r24, Z
    4b8e:	8f 7d       	andi	r24, 0xDF	; 223
    4b90:	80 83       	st	Z, r24
    4b92:	05 c0       	rjmp	.+10     	; 0x4b9e <__vector_26+0x6c>
    4b94:	e1 ec       	ldi	r30, 0xC1	; 193
    4b96:	f0 e0       	ldi	r31, 0x00	; 0
    4b98:	80 81       	ld	r24, Z
    4b9a:	8f 7d       	andi	r24, 0xDF	; 223
    4b9c:	80 83       	st	Z, r24
    4b9e:	ff 91       	pop	r31
    4ba0:	ef 91       	pop	r30
    4ba2:	bf 91       	pop	r27
    4ba4:	af 91       	pop	r26
    4ba6:	9f 91       	pop	r25
    4ba8:	8f 91       	pop	r24
    4baa:	2f 91       	pop	r18
    4bac:	0f 90       	pop	r0
    4bae:	0b be       	out	0x3b, r0	; 59
    4bb0:	0f 90       	pop	r0
    4bb2:	0f be       	out	0x3f, r0	; 63
    4bb4:	0f 90       	pop	r0
    4bb6:	1f 90       	pop	r1
    4bb8:	18 95       	reti

00004bba <__vector_36>:
    4bba:	1f 92       	push	r1
    4bbc:	0f 92       	push	r0
    4bbe:	0f b6       	in	r0, 0x3f	; 63
    4bc0:	0f 92       	push	r0
    4bc2:	11 24       	eor	r1, r1
    4bc4:	0b b6       	in	r0, 0x3b	; 59
    4bc6:	0f 92       	push	r0
    4bc8:	2f 93       	push	r18
    4bca:	3f 93       	push	r19
    4bcc:	4f 93       	push	r20
    4bce:	5f 93       	push	r21
    4bd0:	6f 93       	push	r22
    4bd2:	7f 93       	push	r23
    4bd4:	8f 93       	push	r24
    4bd6:	9f 93       	push	r25
    4bd8:	af 93       	push	r26
    4bda:	bf 93       	push	r27
    4bdc:	cf 93       	push	r28
    4bde:	df 93       	push	r29
    4be0:	ef 93       	push	r30
    4be2:	ff 93       	push	r31
    4be4:	a0 91 b4 18 	lds	r26, 0x18B4	; 0x8018b4 <_ser_handle+0x2>
    4be8:	b0 91 b5 18 	lds	r27, 0x18B5	; 0x8018b5 <_ser_handle+0x3>
    4bec:	10 97       	sbiw	r26, 0x00	; 0
    4bee:	11 f1       	breq	.+68     	; 0x4c34 <__vector_36+0x7a>
    4bf0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4bf4:	14 96       	adiw	r26, 0x04	; 4
    4bf6:	ed 91       	ld	r30, X+
    4bf8:	fc 91       	ld	r31, X
    4bfa:	15 97       	sbiw	r26, 0x05	; 5
    4bfc:	93 81       	ldd	r25, Z+3	; 0x03
    4bfe:	82 81       	ldd	r24, Z+2	; 0x02
    4c00:	25 81       	ldd	r18, Z+5	; 0x05
    4c02:	98 1b       	sub	r25, r24
    4c04:	92 23       	and	r25, r18
    4c06:	84 81       	ldd	r24, Z+4	; 0x04
    4c08:	98 17       	cp	r25, r24
    4c0a:	61 f0       	breq	.+24     	; 0x4c24 <__vector_36+0x6a>
    4c0c:	83 81       	ldd	r24, Z+3	; 0x03
    4c0e:	26 95       	lsr	r18
    4c10:	28 23       	and	r18, r24
    4c12:	c0 81       	ld	r28, Z
    4c14:	d1 81       	ldd	r29, Z+1	; 0x01
    4c16:	c2 0f       	add	r28, r18
    4c18:	d1 1d       	adc	r29, r1
    4c1a:	68 83       	st	Y, r22
    4c1c:	8f 5f       	subi	r24, 0xFF	; 255
    4c1e:	95 81       	ldd	r25, Z+5	; 0x05
    4c20:	89 23       	and	r24, r25
    4c22:	83 83       	std	Z+3, r24	; 0x03
    4c24:	16 96       	adiw	r26, 0x06	; 6
    4c26:	ed 91       	ld	r30, X+
    4c28:	fc 91       	ld	r31, X
    4c2a:	17 97       	sbiw	r26, 0x07	; 7
    4c2c:	30 97       	sbiw	r30, 0x00	; 0
    4c2e:	11 f0       	breq	.+4      	; 0x4c34 <__vector_36+0x7a>
    4c30:	cd 01       	movw	r24, r26
    4c32:	19 95       	eicall
    4c34:	ff 91       	pop	r31
    4c36:	ef 91       	pop	r30
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	bf 91       	pop	r27
    4c3e:	af 91       	pop	r26
    4c40:	9f 91       	pop	r25
    4c42:	8f 91       	pop	r24
    4c44:	7f 91       	pop	r23
    4c46:	6f 91       	pop	r22
    4c48:	5f 91       	pop	r21
    4c4a:	4f 91       	pop	r20
    4c4c:	3f 91       	pop	r19
    4c4e:	2f 91       	pop	r18
    4c50:	0f 90       	pop	r0
    4c52:	0b be       	out	0x3b, r0	; 59
    4c54:	0f 90       	pop	r0
    4c56:	0f be       	out	0x3f, r0	; 63
    4c58:	0f 90       	pop	r0
    4c5a:	1f 90       	pop	r1
    4c5c:	18 95       	reti

00004c5e <__vector_37>:
    4c5e:	1f 92       	push	r1
    4c60:	0f 92       	push	r0
    4c62:	0f b6       	in	r0, 0x3f	; 63
    4c64:	0f 92       	push	r0
    4c66:	11 24       	eor	r1, r1
    4c68:	0b b6       	in	r0, 0x3b	; 59
    4c6a:	0f 92       	push	r0
    4c6c:	2f 93       	push	r18
    4c6e:	8f 93       	push	r24
    4c70:	9f 93       	push	r25
    4c72:	af 93       	push	r26
    4c74:	bf 93       	push	r27
    4c76:	ef 93       	push	r30
    4c78:	ff 93       	push	r31
    4c7a:	e0 91 b4 18 	lds	r30, 0x18B4	; 0x8018b4 <_ser_handle+0x2>
    4c7e:	f0 91 b5 18 	lds	r31, 0x18B5	; 0x8018b5 <_ser_handle+0x3>
    4c82:	30 97       	sbiw	r30, 0x00	; 0
    4c84:	b9 f0       	breq	.+46     	; 0x4cb4 <__vector_37+0x56>
    4c86:	02 80       	ldd	r0, Z+2	; 0x02
    4c88:	f3 81       	ldd	r31, Z+3	; 0x03
    4c8a:	e0 2d       	mov	r30, r0
    4c8c:	93 81       	ldd	r25, Z+3	; 0x03
    4c8e:	82 81       	ldd	r24, Z+2	; 0x02
    4c90:	98 17       	cp	r25, r24
    4c92:	b1 f0       	breq	.+44     	; 0x4cc0 <__vector_37+0x62>
    4c94:	92 81       	ldd	r25, Z+2	; 0x02
    4c96:	85 81       	ldd	r24, Z+5	; 0x05
    4c98:	28 2f       	mov	r18, r24
    4c9a:	26 95       	lsr	r18
    4c9c:	29 23       	and	r18, r25
    4c9e:	a0 81       	ld	r26, Z
    4ca0:	b1 81       	ldd	r27, Z+1	; 0x01
    4ca2:	a2 0f       	add	r26, r18
    4ca4:	b1 1d       	adc	r27, r1
    4ca6:	2c 91       	ld	r18, X
    4ca8:	9f 5f       	subi	r25, 0xFF	; 255
    4caa:	89 23       	and	r24, r25
    4cac:	82 83       	std	Z+2, r24	; 0x02
    4cae:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4cb2:	0b c0       	rjmp	.+22     	; 0x4cca <__vector_37+0x6c>
    4cb4:	e9 ec       	ldi	r30, 0xC9	; 201
    4cb6:	f0 e0       	ldi	r31, 0x00	; 0
    4cb8:	80 81       	ld	r24, Z
    4cba:	8f 7d       	andi	r24, 0xDF	; 223
    4cbc:	80 83       	st	Z, r24
    4cbe:	05 c0       	rjmp	.+10     	; 0x4cca <__vector_37+0x6c>
    4cc0:	e9 ec       	ldi	r30, 0xC9	; 201
    4cc2:	f0 e0       	ldi	r31, 0x00	; 0
    4cc4:	80 81       	ld	r24, Z
    4cc6:	8f 7d       	andi	r24, 0xDF	; 223
    4cc8:	80 83       	st	Z, r24
    4cca:	ff 91       	pop	r31
    4ccc:	ef 91       	pop	r30
    4cce:	bf 91       	pop	r27
    4cd0:	af 91       	pop	r26
    4cd2:	9f 91       	pop	r25
    4cd4:	8f 91       	pop	r24
    4cd6:	2f 91       	pop	r18
    4cd8:	0f 90       	pop	r0
    4cda:	0b be       	out	0x3b, r0	; 59
    4cdc:	0f 90       	pop	r0
    4cde:	0f be       	out	0x3f, r0	; 63
    4ce0:	0f 90       	pop	r0
    4ce2:	1f 90       	pop	r1
    4ce4:	18 95       	reti

00004ce6 <__vector_51>:
    4ce6:	1f 92       	push	r1
    4ce8:	0f 92       	push	r0
    4cea:	0f b6       	in	r0, 0x3f	; 63
    4cec:	0f 92       	push	r0
    4cee:	11 24       	eor	r1, r1
    4cf0:	0b b6       	in	r0, 0x3b	; 59
    4cf2:	0f 92       	push	r0
    4cf4:	2f 93       	push	r18
    4cf6:	3f 93       	push	r19
    4cf8:	4f 93       	push	r20
    4cfa:	5f 93       	push	r21
    4cfc:	6f 93       	push	r22
    4cfe:	7f 93       	push	r23
    4d00:	8f 93       	push	r24
    4d02:	9f 93       	push	r25
    4d04:	af 93       	push	r26
    4d06:	bf 93       	push	r27
    4d08:	cf 93       	push	r28
    4d0a:	df 93       	push	r29
    4d0c:	ef 93       	push	r30
    4d0e:	ff 93       	push	r31
    4d10:	a0 91 b6 18 	lds	r26, 0x18B6	; 0x8018b6 <_ser_handle+0x4>
    4d14:	b0 91 b7 18 	lds	r27, 0x18B7	; 0x8018b7 <_ser_handle+0x5>
    4d18:	10 97       	sbiw	r26, 0x00	; 0
    4d1a:	11 f1       	breq	.+68     	; 0x4d60 <__vector_51+0x7a>
    4d1c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4d20:	14 96       	adiw	r26, 0x04	; 4
    4d22:	ed 91       	ld	r30, X+
    4d24:	fc 91       	ld	r31, X
    4d26:	15 97       	sbiw	r26, 0x05	; 5
    4d28:	93 81       	ldd	r25, Z+3	; 0x03
    4d2a:	82 81       	ldd	r24, Z+2	; 0x02
    4d2c:	25 81       	ldd	r18, Z+5	; 0x05
    4d2e:	98 1b       	sub	r25, r24
    4d30:	92 23       	and	r25, r18
    4d32:	84 81       	ldd	r24, Z+4	; 0x04
    4d34:	98 17       	cp	r25, r24
    4d36:	61 f0       	breq	.+24     	; 0x4d50 <__vector_51+0x6a>
    4d38:	83 81       	ldd	r24, Z+3	; 0x03
    4d3a:	26 95       	lsr	r18
    4d3c:	28 23       	and	r18, r24
    4d3e:	c0 81       	ld	r28, Z
    4d40:	d1 81       	ldd	r29, Z+1	; 0x01
    4d42:	c2 0f       	add	r28, r18
    4d44:	d1 1d       	adc	r29, r1
    4d46:	68 83       	st	Y, r22
    4d48:	8f 5f       	subi	r24, 0xFF	; 255
    4d4a:	95 81       	ldd	r25, Z+5	; 0x05
    4d4c:	89 23       	and	r24, r25
    4d4e:	83 83       	std	Z+3, r24	; 0x03
    4d50:	16 96       	adiw	r26, 0x06	; 6
    4d52:	ed 91       	ld	r30, X+
    4d54:	fc 91       	ld	r31, X
    4d56:	17 97       	sbiw	r26, 0x07	; 7
    4d58:	30 97       	sbiw	r30, 0x00	; 0
    4d5a:	11 f0       	breq	.+4      	; 0x4d60 <__vector_51+0x7a>
    4d5c:	cd 01       	movw	r24, r26
    4d5e:	19 95       	eicall
    4d60:	ff 91       	pop	r31
    4d62:	ef 91       	pop	r30
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	bf 91       	pop	r27
    4d6a:	af 91       	pop	r26
    4d6c:	9f 91       	pop	r25
    4d6e:	8f 91       	pop	r24
    4d70:	7f 91       	pop	r23
    4d72:	6f 91       	pop	r22
    4d74:	5f 91       	pop	r21
    4d76:	4f 91       	pop	r20
    4d78:	3f 91       	pop	r19
    4d7a:	2f 91       	pop	r18
    4d7c:	0f 90       	pop	r0
    4d7e:	0b be       	out	0x3b, r0	; 59
    4d80:	0f 90       	pop	r0
    4d82:	0f be       	out	0x3f, r0	; 63
    4d84:	0f 90       	pop	r0
    4d86:	1f 90       	pop	r1
    4d88:	18 95       	reti

00004d8a <__vector_52>:
    4d8a:	1f 92       	push	r1
    4d8c:	0f 92       	push	r0
    4d8e:	0f b6       	in	r0, 0x3f	; 63
    4d90:	0f 92       	push	r0
    4d92:	11 24       	eor	r1, r1
    4d94:	0b b6       	in	r0, 0x3b	; 59
    4d96:	0f 92       	push	r0
    4d98:	2f 93       	push	r18
    4d9a:	8f 93       	push	r24
    4d9c:	9f 93       	push	r25
    4d9e:	af 93       	push	r26
    4da0:	bf 93       	push	r27
    4da2:	ef 93       	push	r30
    4da4:	ff 93       	push	r31
    4da6:	e0 91 b6 18 	lds	r30, 0x18B6	; 0x8018b6 <_ser_handle+0x4>
    4daa:	f0 91 b7 18 	lds	r31, 0x18B7	; 0x8018b7 <_ser_handle+0x5>
    4dae:	30 97       	sbiw	r30, 0x00	; 0
    4db0:	b9 f0       	breq	.+46     	; 0x4de0 <__vector_52+0x56>
    4db2:	02 80       	ldd	r0, Z+2	; 0x02
    4db4:	f3 81       	ldd	r31, Z+3	; 0x03
    4db6:	e0 2d       	mov	r30, r0
    4db8:	93 81       	ldd	r25, Z+3	; 0x03
    4dba:	82 81       	ldd	r24, Z+2	; 0x02
    4dbc:	98 17       	cp	r25, r24
    4dbe:	b1 f0       	breq	.+44     	; 0x4dec <__vector_52+0x62>
    4dc0:	92 81       	ldd	r25, Z+2	; 0x02
    4dc2:	85 81       	ldd	r24, Z+5	; 0x05
    4dc4:	28 2f       	mov	r18, r24
    4dc6:	26 95       	lsr	r18
    4dc8:	29 23       	and	r18, r25
    4dca:	a0 81       	ld	r26, Z
    4dcc:	b1 81       	ldd	r27, Z+1	; 0x01
    4dce:	a2 0f       	add	r26, r18
    4dd0:	b1 1d       	adc	r27, r1
    4dd2:	2c 91       	ld	r18, X
    4dd4:	9f 5f       	subi	r25, 0xFF	; 255
    4dd6:	89 23       	and	r24, r25
    4dd8:	82 83       	std	Z+2, r24	; 0x02
    4dda:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4dde:	0b c0       	rjmp	.+22     	; 0x4df6 <__vector_52+0x6c>
    4de0:	e1 ed       	ldi	r30, 0xD1	; 209
    4de2:	f0 e0       	ldi	r31, 0x00	; 0
    4de4:	80 81       	ld	r24, Z
    4de6:	8f 7d       	andi	r24, 0xDF	; 223
    4de8:	80 83       	st	Z, r24
    4dea:	05 c0       	rjmp	.+10     	; 0x4df6 <__vector_52+0x6c>
    4dec:	e1 ed       	ldi	r30, 0xD1	; 209
    4dee:	f0 e0       	ldi	r31, 0x00	; 0
    4df0:	80 81       	ld	r24, Z
    4df2:	8f 7d       	andi	r24, 0xDF	; 223
    4df4:	80 83       	st	Z, r24
    4df6:	ff 91       	pop	r31
    4df8:	ef 91       	pop	r30
    4dfa:	bf 91       	pop	r27
    4dfc:	af 91       	pop	r26
    4dfe:	9f 91       	pop	r25
    4e00:	8f 91       	pop	r24
    4e02:	2f 91       	pop	r18
    4e04:	0f 90       	pop	r0
    4e06:	0b be       	out	0x3b, r0	; 59
    4e08:	0f 90       	pop	r0
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	0f 90       	pop	r0
    4e0e:	1f 90       	pop	r1
    4e10:	18 95       	reti

00004e12 <__vector_54>:
    4e12:	1f 92       	push	r1
    4e14:	0f 92       	push	r0
    4e16:	0f b6       	in	r0, 0x3f	; 63
    4e18:	0f 92       	push	r0
    4e1a:	11 24       	eor	r1, r1
    4e1c:	0b b6       	in	r0, 0x3b	; 59
    4e1e:	0f 92       	push	r0
    4e20:	2f 93       	push	r18
    4e22:	3f 93       	push	r19
    4e24:	4f 93       	push	r20
    4e26:	5f 93       	push	r21
    4e28:	6f 93       	push	r22
    4e2a:	7f 93       	push	r23
    4e2c:	8f 93       	push	r24
    4e2e:	9f 93       	push	r25
    4e30:	af 93       	push	r26
    4e32:	bf 93       	push	r27
    4e34:	cf 93       	push	r28
    4e36:	df 93       	push	r29
    4e38:	ef 93       	push	r30
    4e3a:	ff 93       	push	r31
    4e3c:	a0 91 b8 18 	lds	r26, 0x18B8	; 0x8018b8 <_ser_handle+0x6>
    4e40:	b0 91 b9 18 	lds	r27, 0x18B9	; 0x8018b9 <_ser_handle+0x7>
    4e44:	10 97       	sbiw	r26, 0x00	; 0
    4e46:	11 f1       	breq	.+68     	; 0x4e8c <__vector_54+0x7a>
    4e48:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4e4c:	14 96       	adiw	r26, 0x04	; 4
    4e4e:	ed 91       	ld	r30, X+
    4e50:	fc 91       	ld	r31, X
    4e52:	15 97       	sbiw	r26, 0x05	; 5
    4e54:	93 81       	ldd	r25, Z+3	; 0x03
    4e56:	82 81       	ldd	r24, Z+2	; 0x02
    4e58:	25 81       	ldd	r18, Z+5	; 0x05
    4e5a:	98 1b       	sub	r25, r24
    4e5c:	92 23       	and	r25, r18
    4e5e:	84 81       	ldd	r24, Z+4	; 0x04
    4e60:	98 17       	cp	r25, r24
    4e62:	61 f0       	breq	.+24     	; 0x4e7c <__vector_54+0x6a>
    4e64:	83 81       	ldd	r24, Z+3	; 0x03
    4e66:	26 95       	lsr	r18
    4e68:	28 23       	and	r18, r24
    4e6a:	c0 81       	ld	r28, Z
    4e6c:	d1 81       	ldd	r29, Z+1	; 0x01
    4e6e:	c2 0f       	add	r28, r18
    4e70:	d1 1d       	adc	r29, r1
    4e72:	68 83       	st	Y, r22
    4e74:	8f 5f       	subi	r24, 0xFF	; 255
    4e76:	95 81       	ldd	r25, Z+5	; 0x05
    4e78:	89 23       	and	r24, r25
    4e7a:	83 83       	std	Z+3, r24	; 0x03
    4e7c:	16 96       	adiw	r26, 0x06	; 6
    4e7e:	ed 91       	ld	r30, X+
    4e80:	fc 91       	ld	r31, X
    4e82:	17 97       	sbiw	r26, 0x07	; 7
    4e84:	30 97       	sbiw	r30, 0x00	; 0
    4e86:	11 f0       	breq	.+4      	; 0x4e8c <__vector_54+0x7a>
    4e88:	cd 01       	movw	r24, r26
    4e8a:	19 95       	eicall
    4e8c:	ff 91       	pop	r31
    4e8e:	ef 91       	pop	r30
    4e90:	df 91       	pop	r29
    4e92:	cf 91       	pop	r28
    4e94:	bf 91       	pop	r27
    4e96:	af 91       	pop	r26
    4e98:	9f 91       	pop	r25
    4e9a:	8f 91       	pop	r24
    4e9c:	7f 91       	pop	r23
    4e9e:	6f 91       	pop	r22
    4ea0:	5f 91       	pop	r21
    4ea2:	4f 91       	pop	r20
    4ea4:	3f 91       	pop	r19
    4ea6:	2f 91       	pop	r18
    4ea8:	0f 90       	pop	r0
    4eaa:	0b be       	out	0x3b, r0	; 59
    4eac:	0f 90       	pop	r0
    4eae:	0f be       	out	0x3f, r0	; 63
    4eb0:	0f 90       	pop	r0
    4eb2:	1f 90       	pop	r1
    4eb4:	18 95       	reti

00004eb6 <__vector_55>:
    4eb6:	1f 92       	push	r1
    4eb8:	0f 92       	push	r0
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	0f 92       	push	r0
    4ebe:	11 24       	eor	r1, r1
    4ec0:	0b b6       	in	r0, 0x3b	; 59
    4ec2:	0f 92       	push	r0
    4ec4:	2f 93       	push	r18
    4ec6:	8f 93       	push	r24
    4ec8:	9f 93       	push	r25
    4eca:	af 93       	push	r26
    4ecc:	bf 93       	push	r27
    4ece:	ef 93       	push	r30
    4ed0:	ff 93       	push	r31
    4ed2:	e0 91 b8 18 	lds	r30, 0x18B8	; 0x8018b8 <_ser_handle+0x6>
    4ed6:	f0 91 b9 18 	lds	r31, 0x18B9	; 0x8018b9 <_ser_handle+0x7>
    4eda:	30 97       	sbiw	r30, 0x00	; 0
    4edc:	b9 f0       	breq	.+46     	; 0x4f0c <__vector_55+0x56>
    4ede:	02 80       	ldd	r0, Z+2	; 0x02
    4ee0:	f3 81       	ldd	r31, Z+3	; 0x03
    4ee2:	e0 2d       	mov	r30, r0
    4ee4:	93 81       	ldd	r25, Z+3	; 0x03
    4ee6:	82 81       	ldd	r24, Z+2	; 0x02
    4ee8:	98 17       	cp	r25, r24
    4eea:	b1 f0       	breq	.+44     	; 0x4f18 <__vector_55+0x62>
    4eec:	92 81       	ldd	r25, Z+2	; 0x02
    4eee:	85 81       	ldd	r24, Z+5	; 0x05
    4ef0:	28 2f       	mov	r18, r24
    4ef2:	26 95       	lsr	r18
    4ef4:	29 23       	and	r18, r25
    4ef6:	a0 81       	ld	r26, Z
    4ef8:	b1 81       	ldd	r27, Z+1	; 0x01
    4efa:	a2 0f       	add	r26, r18
    4efc:	b1 1d       	adc	r27, r1
    4efe:	2c 91       	ld	r18, X
    4f00:	9f 5f       	subi	r25, 0xFF	; 255
    4f02:	89 23       	and	r24, r25
    4f04:	82 83       	std	Z+2, r24	; 0x02
    4f06:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4f0a:	0b c0       	rjmp	.+22     	; 0x4f22 <__vector_55+0x6c>
    4f0c:	e1 e3       	ldi	r30, 0x31	; 49
    4f0e:	f1 e0       	ldi	r31, 0x01	; 1
    4f10:	80 81       	ld	r24, Z
    4f12:	8f 7d       	andi	r24, 0xDF	; 223
    4f14:	80 83       	st	Z, r24
    4f16:	05 c0       	rjmp	.+10     	; 0x4f22 <__vector_55+0x6c>
    4f18:	e1 e3       	ldi	r30, 0x31	; 49
    4f1a:	f1 e0       	ldi	r31, 0x01	; 1
    4f1c:	80 81       	ld	r24, Z
    4f1e:	8f 7d       	andi	r24, 0xDF	; 223
    4f20:	80 83       	st	Z, r24
    4f22:	ff 91       	pop	r31
    4f24:	ef 91       	pop	r30
    4f26:	bf 91       	pop	r27
    4f28:	af 91       	pop	r26
    4f2a:	9f 91       	pop	r25
    4f2c:	8f 91       	pop	r24
    4f2e:	2f 91       	pop	r18
    4f30:	0f 90       	pop	r0
    4f32:	0b be       	out	0x3b, r0	; 59
    4f34:	0f 90       	pop	r0
    4f36:	0f be       	out	0x3f, r0	; 63
    4f38:	0f 90       	pop	r0
    4f3a:	1f 90       	pop	r1
    4f3c:	18 95       	reti

00004f3e <usart_getchar>:
    4f3e:	cf 93       	push	r28
    4f40:	df 93       	push	r29
    4f42:	1f 92       	push	r1
    4f44:	cd b7       	in	r28, 0x3d	; 61
    4f46:	de b7       	in	r29, 0x3e	; 62
    4f48:	be 01       	movw	r22, r28
    4f4a:	6f 5f       	subi	r22, 0xFF	; 255
    4f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f4e:	80 91 ba 18 	lds	r24, 0x18BA	; 0x8018ba <_com_serial_instance>
    4f52:	90 91 bb 18 	lds	r25, 0x18BB	; 0x8018bb <_com_serial_instance+0x1>
    4f56:	7b dd       	rcall	.-1290   	; 0x4a4e <serial_getByte>
    4f58:	81 11       	cpse	r24, r1
    4f5a:	f6 cf       	rjmp	.-20     	; 0x4f48 <usart_getchar+0xa>
    4f5c:	89 81       	ldd	r24, Y+1	; 0x01
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	0f 90       	pop	r0
    4f62:	df 91       	pop	r29
    4f64:	cf 91       	pop	r28
    4f66:	08 95       	ret

00004f68 <usart_putchar>:
    4f68:	68 2f       	mov	r22, r24
    4f6a:	80 91 ba 18 	lds	r24, 0x18BA	; 0x8018ba <_com_serial_instance>
    4f6e:	90 91 bb 18 	lds	r25, 0x18BB	; 0x8018bb <_com_serial_instance+0x1>
    4f72:	ed dc       	rcall	.-1574   	; 0x494e <serial_sendByte>
    4f74:	80 e0       	ldi	r24, 0x00	; 0
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	08 95       	ret

00004f7a <stdio_initialise>:
    4f7a:	8f 92       	push	r8
    4f7c:	9f 92       	push	r9
    4f7e:	af 92       	push	r10
    4f80:	cf 92       	push	r12
    4f82:	ef 92       	push	r14
    4f84:	0f 93       	push	r16
    4f86:	81 2c       	mov	r8, r1
    4f88:	91 2c       	mov	r9, r1
    4f8a:	68 94       	set
    4f8c:	aa 24       	eor	r10, r10
    4f8e:	a7 f8       	bld	r10, 7
    4f90:	68 94       	set
    4f92:	cc 24       	eor	r12, r12
    4f94:	c7 f8       	bld	r12, 7
    4f96:	e1 2c       	mov	r14, r1
    4f98:	00 e0       	ldi	r16, 0x00	; 0
    4f9a:	23 e0       	ldi	r18, 0x03	; 3
    4f9c:	40 e0       	ldi	r20, 0x00	; 0
    4f9e:	51 ee       	ldi	r21, 0xE1	; 225
    4fa0:	60 e0       	ldi	r22, 0x00	; 0
    4fa2:	70 e0       	ldi	r23, 0x00	; 0
    4fa4:	32 dc       	rcall	.-1948   	; 0x480a <serial_create>
    4fa6:	90 93 bb 18 	sts	0x18BB, r25	; 0x8018bb <_com_serial_instance+0x1>
    4faa:	80 93 ba 18 	sts	0x18BA, r24	; 0x8018ba <_com_serial_instance>
    4fae:	e3 e6       	ldi	r30, 0x63	; 99
    4fb0:	f9 e1       	ldi	r31, 0x19	; 25
    4fb2:	83 e1       	ldi	r24, 0x13	; 19
    4fb4:	92 e0       	ldi	r25, 0x02	; 2
    4fb6:	91 83       	std	Z+1, r25	; 0x01
    4fb8:	80 83       	st	Z, r24
    4fba:	93 83       	std	Z+3, r25	; 0x03
    4fbc:	82 83       	std	Z+2, r24	; 0x02
    4fbe:	0f 91       	pop	r16
    4fc0:	ef 90       	pop	r14
    4fc2:	cf 90       	pop	r12
    4fc4:	af 90       	pop	r10
    4fc6:	9f 90       	pop	r9
    4fc8:	8f 90       	pop	r8
    4fca:	08 95       	ret

00004fcc <_turn_off>:
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	fc 01       	movw	r30, r24
    4fd0:	ee 0f       	add	r30, r30
    4fd2:	ff 1f       	adc	r31, r31
    4fd4:	e8 0f       	add	r30, r24
    4fd6:	f9 1f       	adc	r31, r25
    4fd8:	ee 0f       	add	r30, r30
    4fda:	ff 1f       	adc	r31, r31
    4fdc:	e4 54       	subi	r30, 0x44	; 68
    4fde:	f7 4e       	sbci	r31, 0xE7	; 231
    4fe0:	23 81       	ldd	r18, Z+3	; 0x03
    4fe2:	21 11       	cpse	r18, r1
    4fe4:	1f c0       	rjmp	.+62     	; 0x5024 <_turn_off+0x58>
    4fe6:	9c 01       	movw	r18, r24
    4fe8:	22 0f       	add	r18, r18
    4fea:	33 1f       	adc	r19, r19
    4fec:	f9 01       	movw	r30, r18
    4fee:	e8 0f       	add	r30, r24
    4ff0:	f9 1f       	adc	r31, r25
    4ff2:	ee 0f       	add	r30, r30
    4ff4:	ff 1f       	adc	r31, r31
    4ff6:	e4 54       	subi	r30, 0x44	; 68
    4ff8:	f7 4e       	sbci	r31, 0xE7	; 231
    4ffa:	a0 81       	ld	r26, Z
    4ffc:	b1 81       	ldd	r27, Z+1	; 0x01
    4ffe:	4c 91       	ld	r20, X
    5000:	f9 01       	movw	r30, r18
    5002:	e8 0f       	add	r30, r24
    5004:	f9 1f       	adc	r31, r25
    5006:	ee 0f       	add	r30, r30
    5008:	ff 1f       	adc	r31, r31
    500a:	e4 54       	subi	r30, 0x44	; 68
    500c:	f7 4e       	sbci	r31, 0xE7	; 231
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	02 80       	ldd	r0, Z+2	; 0x02
    5014:	02 c0       	rjmp	.+4      	; 0x501a <_turn_off+0x4e>
    5016:	88 0f       	add	r24, r24
    5018:	99 1f       	adc	r25, r25
    501a:	0a 94       	dec	r0
    501c:	e2 f7       	brpl	.-8      	; 0x5016 <_turn_off+0x4a>
    501e:	84 2b       	or	r24, r20
    5020:	8c 93       	st	X, r24
    5022:	08 95       	ret
    5024:	fc 01       	movw	r30, r24
    5026:	ee 0f       	add	r30, r30
    5028:	ff 1f       	adc	r31, r31
    502a:	df 01       	movw	r26, r30
    502c:	a8 0f       	add	r26, r24
    502e:	b9 1f       	adc	r27, r25
    5030:	aa 0f       	add	r26, r26
    5032:	bb 1f       	adc	r27, r27
    5034:	a4 54       	subi	r26, 0x44	; 68
    5036:	b7 4e       	sbci	r27, 0xE7	; 231
    5038:	0d 90       	ld	r0, X+
    503a:	bc 91       	ld	r27, X
    503c:	a0 2d       	mov	r26, r0
    503e:	2c 91       	ld	r18, X
    5040:	e8 0f       	add	r30, r24
    5042:	f9 1f       	adc	r31, r25
    5044:	ee 0f       	add	r30, r30
    5046:	ff 1f       	adc	r31, r31
    5048:	e4 54       	subi	r30, 0x44	; 68
    504a:	f7 4e       	sbci	r31, 0xE7	; 231
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	02 80       	ldd	r0, Z+2	; 0x02
    5052:	02 c0       	rjmp	.+4      	; 0x5058 <_turn_off+0x8c>
    5054:	88 0f       	add	r24, r24
    5056:	99 1f       	adc	r25, r25
    5058:	0a 94       	dec	r0
    505a:	e2 f7       	brpl	.-8      	; 0x5054 <_turn_off+0x88>
    505c:	80 95       	com	r24
    505e:	82 23       	and	r24, r18
    5060:	8c 93       	st	X, r24
    5062:	08 95       	ret

00005064 <_turn_on>:
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	fc 01       	movw	r30, r24
    5068:	ee 0f       	add	r30, r30
    506a:	ff 1f       	adc	r31, r31
    506c:	e8 0f       	add	r30, r24
    506e:	f9 1f       	adc	r31, r25
    5070:	ee 0f       	add	r30, r30
    5072:	ff 1f       	adc	r31, r31
    5074:	e4 54       	subi	r30, 0x44	; 68
    5076:	f7 4e       	sbci	r31, 0xE7	; 231
    5078:	23 81       	ldd	r18, Z+3	; 0x03
    507a:	21 11       	cpse	r18, r1
    507c:	20 c0       	rjmp	.+64     	; 0x50be <_turn_on+0x5a>
    507e:	9c 01       	movw	r18, r24
    5080:	22 0f       	add	r18, r18
    5082:	33 1f       	adc	r19, r19
    5084:	f9 01       	movw	r30, r18
    5086:	e8 0f       	add	r30, r24
    5088:	f9 1f       	adc	r31, r25
    508a:	ee 0f       	add	r30, r30
    508c:	ff 1f       	adc	r31, r31
    508e:	e4 54       	subi	r30, 0x44	; 68
    5090:	f7 4e       	sbci	r31, 0xE7	; 231
    5092:	a0 81       	ld	r26, Z
    5094:	b1 81       	ldd	r27, Z+1	; 0x01
    5096:	4c 91       	ld	r20, X
    5098:	f9 01       	movw	r30, r18
    509a:	e8 0f       	add	r30, r24
    509c:	f9 1f       	adc	r31, r25
    509e:	ee 0f       	add	r30, r30
    50a0:	ff 1f       	adc	r31, r31
    50a2:	e4 54       	subi	r30, 0x44	; 68
    50a4:	f7 4e       	sbci	r31, 0xE7	; 231
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	02 80       	ldd	r0, Z+2	; 0x02
    50ac:	02 c0       	rjmp	.+4      	; 0x50b2 <_turn_on+0x4e>
    50ae:	88 0f       	add	r24, r24
    50b0:	99 1f       	adc	r25, r25
    50b2:	0a 94       	dec	r0
    50b4:	e2 f7       	brpl	.-8      	; 0x50ae <_turn_on+0x4a>
    50b6:	80 95       	com	r24
    50b8:	84 23       	and	r24, r20
    50ba:	8c 93       	st	X, r24
    50bc:	08 95       	ret
    50be:	fc 01       	movw	r30, r24
    50c0:	ee 0f       	add	r30, r30
    50c2:	ff 1f       	adc	r31, r31
    50c4:	df 01       	movw	r26, r30
    50c6:	a8 0f       	add	r26, r24
    50c8:	b9 1f       	adc	r27, r25
    50ca:	aa 0f       	add	r26, r26
    50cc:	bb 1f       	adc	r27, r27
    50ce:	a4 54       	subi	r26, 0x44	; 68
    50d0:	b7 4e       	sbci	r27, 0xE7	; 231
    50d2:	0d 90       	ld	r0, X+
    50d4:	bc 91       	ld	r27, X
    50d6:	a0 2d       	mov	r26, r0
    50d8:	2c 91       	ld	r18, X
    50da:	e8 0f       	add	r30, r24
    50dc:	f9 1f       	adc	r31, r25
    50de:	ee 0f       	add	r30, r30
    50e0:	ff 1f       	adc	r31, r31
    50e2:	e4 54       	subi	r30, 0x44	; 68
    50e4:	f7 4e       	sbci	r31, 0xE7	; 231
    50e6:	81 e0       	ldi	r24, 0x01	; 1
    50e8:	90 e0       	ldi	r25, 0x00	; 0
    50ea:	02 80       	ldd	r0, Z+2	; 0x02
    50ec:	02 c0       	rjmp	.+4      	; 0x50f2 <_turn_on+0x8e>
    50ee:	88 0f       	add	r24, r24
    50f0:	99 1f       	adc	r25, r25
    50f2:	0a 94       	dec	r0
    50f4:	e2 f7       	brpl	.-8      	; 0x50ee <_turn_on+0x8a>
    50f6:	82 2b       	or	r24, r18
    50f8:	8c 93       	st	X, r24
    50fa:	08 95       	ret

000050fc <_hal_led_task>:
    50fc:	cc 24       	eor	r12, r12
    50fe:	c3 94       	inc	r12
    5100:	d1 2c       	mov	r13, r1
    5102:	68 94       	set
    5104:	bb 24       	eor	r11, r11
    5106:	b2 f8       	bld	r11, 2
    5108:	cc eb       	ldi	r28, 0xBC	; 188
    510a:	d8 e1       	ldi	r29, 0x18	; 24
    510c:	10 e0       	ldi	r17, 0x00	; 0
    510e:	8c 81       	ldd	r24, Y+4	; 0x04
    5110:	81 30       	cpi	r24, 0x01	; 1
    5112:	81 f0       	breq	.+32     	; 0x5134 <_hal_led_task+0x38>
    5114:	18 f1       	brcs	.+70     	; 0x515c <_hal_led_task+0x60>
    5116:	82 30       	cpi	r24, 0x02	; 2
    5118:	61 f5       	brne	.+88     	; 0x5172 <_hal_led_task+0x76>
    511a:	e8 81       	ld	r30, Y
    511c:	f9 81       	ldd	r31, Y+1	; 0x01
    511e:	20 81       	ld	r18, Z
    5120:	c6 01       	movw	r24, r12
    5122:	0a 80       	ldd	r0, Y+2	; 0x02
    5124:	02 c0       	rjmp	.+4      	; 0x512a <_hal_led_task+0x2e>
    5126:	88 0f       	add	r24, r24
    5128:	99 1f       	adc	r25, r25
    512a:	0a 94       	dec	r0
    512c:	e2 f7       	brpl	.-8      	; 0x5126 <_hal_led_task+0x2a>
    512e:	82 27       	eor	r24, r18
    5130:	80 83       	st	Z, r24
    5132:	1f c0       	rjmp	.+62     	; 0x5172 <_hal_led_task+0x76>
    5134:	8d 81       	ldd	r24, Y+5	; 0x05
    5136:	8f 5f       	subi	r24, 0xFF	; 255
    5138:	8a 30       	cpi	r24, 0x0A	; 10
    513a:	10 f4       	brcc	.+4      	; 0x5140 <_hal_led_task+0x44>
    513c:	8d 83       	std	Y+5, r24	; 0x05
    513e:	19 c0       	rjmp	.+50     	; 0x5172 <_hal_led_task+0x76>
    5140:	1d 82       	std	Y+5, r1	; 0x05
    5142:	e8 81       	ld	r30, Y
    5144:	f9 81       	ldd	r31, Y+1	; 0x01
    5146:	20 81       	ld	r18, Z
    5148:	c6 01       	movw	r24, r12
    514a:	0a 80       	ldd	r0, Y+2	; 0x02
    514c:	02 c0       	rjmp	.+4      	; 0x5152 <_hal_led_task+0x56>
    514e:	88 0f       	add	r24, r24
    5150:	99 1f       	adc	r25, r25
    5152:	0a 94       	dec	r0
    5154:	e2 f7       	brpl	.-8      	; 0x514e <_hal_led_task+0x52>
    5156:	82 27       	eor	r24, r18
    5158:	80 83       	st	Z, r24
    515a:	0b c0       	rjmp	.+22     	; 0x5172 <_hal_led_task+0x76>
    515c:	0d 81       	ldd	r16, Y+5	; 0x05
    515e:	00 23       	and	r16, r16
    5160:	29 f0       	breq	.+10     	; 0x516c <_hal_led_task+0x70>
    5162:	81 2f       	mov	r24, r17
    5164:	7f df       	rcall	.-258    	; 0x5064 <_turn_on>
    5166:	01 50       	subi	r16, 0x01	; 1
    5168:	0d 83       	std	Y+5, r16	; 0x05
    516a:	03 c0       	rjmp	.+6      	; 0x5172 <_hal_led_task+0x76>
    516c:	bc 82       	std	Y+4, r11	; 0x04
    516e:	81 2f       	mov	r24, r17
    5170:	2d df       	rcall	.-422    	; 0x4fcc <_turn_off>
    5172:	1f 5f       	subi	r17, 0xFF	; 255
    5174:	26 96       	adiw	r28, 0x06	; 6
    5176:	14 30       	cpi	r17, 0x04	; 4
    5178:	51 f6       	brne	.-108    	; 0x510e <_hal_led_task+0x12>
    517a:	65 e0       	ldi	r22, 0x05	; 5
    517c:	70 e0       	ldi	r23, 0x00	; 0
    517e:	80 e0       	ldi	r24, 0x00	; 0
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	0e 94 41 10 	call	0x2082	; 0x2082 <vTaskDelay>
    5186:	c0 cf       	rjmp	.-128    	; 0x5108 <_hal_led_task+0xc>

00005188 <status_leds_initialise>:
    5188:	ef 92       	push	r14
    518a:	ff 92       	push	r15
    518c:	0f 93       	push	r16
    518e:	1f 93       	push	r17
    5190:	cf 93       	push	r28
    5192:	df 93       	push	r29
    5194:	08 2f       	mov	r16, r24
    5196:	80 e4       	ldi	r24, 0x40	; 64
    5198:	87 b9       	out	0x07, r24	; 7
    519a:	cc eb       	ldi	r28, 0xBC	; 188
    519c:	d8 e1       	ldi	r29, 0x18	; 24
    519e:	0f 2e       	mov	r0, r31
    51a0:	f8 e2       	ldi	r31, 0x28	; 40
    51a2:	ef 2e       	mov	r14, r31
    51a4:	f1 2c       	mov	r15, r1
    51a6:	f0 2d       	mov	r31, r0
    51a8:	f9 82       	std	Y+1, r15	; 0x01
    51aa:	e8 82       	st	Y, r14
    51ac:	86 e0       	ldi	r24, 0x06	; 6
    51ae:	8a 83       	std	Y+2, r24	; 0x02
    51b0:	1b 82       	std	Y+3, r1	; 0x03
    51b2:	14 e0       	ldi	r17, 0x04	; 4
    51b4:	1c 83       	std	Y+4, r17	; 0x04
    51b6:	80 e0       	ldi	r24, 0x00	; 0
    51b8:	09 df       	rcall	.-494    	; 0x4fcc <_turn_off>
    51ba:	80 e8       	ldi	r24, 0x80	; 128
    51bc:	87 b9       	out	0x07, r24	; 7
    51be:	ff 82       	std	Y+7, r15	; 0x07
    51c0:	ee 82       	std	Y+6, r14	; 0x06
    51c2:	87 e0       	ldi	r24, 0x07	; 7
    51c4:	88 87       	std	Y+8, r24	; 0x08
    51c6:	19 86       	std	Y+9, r1	; 0x09
    51c8:	1a 87       	std	Y+10, r17	; 0x0a
    51ca:	81 e0       	ldi	r24, 0x01	; 1
    51cc:	ff de       	rcall	.-514    	; 0x4fcc <_turn_off>
    51ce:	80 e2       	ldi	r24, 0x20	; 32
    51d0:	83 bb       	out	0x13, r24	; 19
    51d2:	84 e3       	ldi	r24, 0x34	; 52
    51d4:	90 e0       	ldi	r25, 0x00	; 0
    51d6:	9d 87       	std	Y+13, r25	; 0x0d
    51d8:	8c 87       	std	Y+12, r24	; 0x0c
    51da:	85 e0       	ldi	r24, 0x05	; 5
    51dc:	8e 87       	std	Y+14, r24	; 0x0e
    51de:	1f 86       	std	Y+15, r1	; 0x0f
    51e0:	18 8b       	std	Y+16, r17	; 0x10
    51e2:	82 e0       	ldi	r24, 0x02	; 2
    51e4:	f3 de       	rcall	.-538    	; 0x4fcc <_turn_off>
    51e6:	80 e1       	ldi	r24, 0x10	; 16
    51e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    51ec:	82 e0       	ldi	r24, 0x02	; 2
    51ee:	91 e0       	ldi	r25, 0x01	; 1
    51f0:	9b 8b       	std	Y+19, r25	; 0x13
    51f2:	8a 8b       	std	Y+18, r24	; 0x12
    51f4:	1c 8b       	std	Y+20, r17	; 0x14
    51f6:	1d 8a       	std	Y+21, r1	; 0x15
    51f8:	1e 8b       	std	Y+22, r17	; 0x16
    51fa:	83 e0       	ldi	r24, 0x03	; 3
    51fc:	e7 de       	rcall	.-562    	; 0x4fcc <_turn_off>
    51fe:	e1 2c       	mov	r14, r1
    5200:	f1 2c       	mov	r15, r1
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	40 ec       	ldi	r20, 0xC0	; 192
    5208:	50 e0       	ldi	r21, 0x00	; 0
    520a:	6a ec       	ldi	r22, 0xCA	; 202
    520c:	78 e0       	ldi	r23, 0x08	; 8
    520e:	8e e7       	ldi	r24, 0x7E	; 126
    5210:	98 e2       	ldi	r25, 0x28	; 40
    5212:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <xTaskCreate>
    5216:	df 91       	pop	r29
    5218:	cf 91       	pop	r28
    521a:	1f 91       	pop	r17
    521c:	0f 91       	pop	r16
    521e:	ff 90       	pop	r15
    5220:	ef 90       	pop	r14
    5222:	08 95       	ret

00005224 <status_leds_slowBlink>:
    5224:	cf 93       	push	r28
    5226:	df 93       	push	r29
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	fc 01       	movw	r30, r24
    522c:	ee 0f       	add	r30, r30
    522e:	ff 1f       	adc	r31, r31
    5230:	df 01       	movw	r26, r30
    5232:	a8 0f       	add	r26, r24
    5234:	b9 1f       	adc	r27, r25
    5236:	aa 0f       	add	r26, r26
    5238:	bb 1f       	adc	r27, r27
    523a:	a4 54       	subi	r26, 0x44	; 68
    523c:	b7 4e       	sbci	r27, 0xE7	; 231
    523e:	cd 91       	ld	r28, X+
    5240:	dc 91       	ld	r29, X
    5242:	11 97       	sbiw	r26, 0x01	; 1
    5244:	48 81       	ld	r20, Y
    5246:	21 e0       	ldi	r18, 0x01	; 1
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	12 96       	adiw	r26, 0x02	; 2
    524c:	0c 90       	ld	r0, X
    524e:	12 97       	sbiw	r26, 0x02	; 2
    5250:	02 c0       	rjmp	.+4      	; 0x5256 <status_leds_slowBlink+0x32>
    5252:	22 0f       	add	r18, r18
    5254:	33 1f       	adc	r19, r19
    5256:	0a 94       	dec	r0
    5258:	e2 f7       	brpl	.-8      	; 0x5252 <status_leds_slowBlink+0x2e>
    525a:	24 27       	eor	r18, r20
    525c:	28 83       	st	Y, r18
    525e:	fd 01       	movw	r30, r26
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	84 83       	std	Z+4, r24	; 0x04
    5264:	df 91       	pop	r29
    5266:	cf 91       	pop	r28
    5268:	08 95       	ret

0000526a <status_leds_fastBlink>:
    526a:	cf 93       	push	r28
    526c:	df 93       	push	r29
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	fc 01       	movw	r30, r24
    5272:	ee 0f       	add	r30, r30
    5274:	ff 1f       	adc	r31, r31
    5276:	df 01       	movw	r26, r30
    5278:	a8 0f       	add	r26, r24
    527a:	b9 1f       	adc	r27, r25
    527c:	aa 0f       	add	r26, r26
    527e:	bb 1f       	adc	r27, r27
    5280:	a4 54       	subi	r26, 0x44	; 68
    5282:	b7 4e       	sbci	r27, 0xE7	; 231
    5284:	cd 91       	ld	r28, X+
    5286:	dc 91       	ld	r29, X
    5288:	11 97       	sbiw	r26, 0x01	; 1
    528a:	48 81       	ld	r20, Y
    528c:	21 e0       	ldi	r18, 0x01	; 1
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	12 96       	adiw	r26, 0x02	; 2
    5292:	0c 90       	ld	r0, X
    5294:	12 97       	sbiw	r26, 0x02	; 2
    5296:	02 c0       	rjmp	.+4      	; 0x529c <status_leds_fastBlink+0x32>
    5298:	22 0f       	add	r18, r18
    529a:	33 1f       	adc	r19, r19
    529c:	0a 94       	dec	r0
    529e:	e2 f7       	brpl	.-8      	; 0x5298 <status_leds_fastBlink+0x2e>
    52a0:	24 27       	eor	r18, r20
    52a2:	28 83       	st	Y, r18
    52a4:	fd 01       	movw	r30, r26
    52a6:	82 e0       	ldi	r24, 0x02	; 2
    52a8:	84 83       	std	Z+4, r24	; 0x04
    52aa:	df 91       	pop	r29
    52ac:	cf 91       	pop	r28
    52ae:	08 95       	ret

000052b0 <status_leds_ledOn>:
    52b0:	28 2f       	mov	r18, r24
    52b2:	30 e0       	ldi	r19, 0x00	; 0
    52b4:	f9 01       	movw	r30, r18
    52b6:	ee 0f       	add	r30, r30
    52b8:	ff 1f       	adc	r31, r31
    52ba:	e2 0f       	add	r30, r18
    52bc:	f3 1f       	adc	r31, r19
    52be:	ee 0f       	add	r30, r30
    52c0:	ff 1f       	adc	r31, r31
    52c2:	e4 54       	subi	r30, 0x44	; 68
    52c4:	f7 4e       	sbci	r31, 0xE7	; 231
    52c6:	93 e0       	ldi	r25, 0x03	; 3
    52c8:	94 83       	std	Z+4, r25	; 0x04
    52ca:	cc ce       	rjmp	.-616    	; 0x5064 <_turn_on>
    52cc:	08 95       	ret

000052ce <status_leds_ledOff>:
    52ce:	28 2f       	mov	r18, r24
    52d0:	30 e0       	ldi	r19, 0x00	; 0
    52d2:	f9 01       	movw	r30, r18
    52d4:	ee 0f       	add	r30, r30
    52d6:	ff 1f       	adc	r31, r31
    52d8:	e2 0f       	add	r30, r18
    52da:	f3 1f       	adc	r31, r19
    52dc:	ee 0f       	add	r30, r30
    52de:	ff 1f       	adc	r31, r31
    52e0:	e4 54       	subi	r30, 0x44	; 68
    52e2:	f7 4e       	sbci	r31, 0xE7	; 231
    52e4:	94 e0       	ldi	r25, 0x04	; 4
    52e6:	94 83       	std	Z+4, r25	; 0x04
    52e8:	71 ce       	rjmp	.-798    	; 0x4fcc <_turn_off>
    52ea:	08 95       	ret

000052ec <status_leds_longPuls>:
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	fc 01       	movw	r30, r24
    52f0:	ee 0f       	add	r30, r30
    52f2:	ff 1f       	adc	r31, r31
    52f4:	df 01       	movw	r26, r30
    52f6:	a8 0f       	add	r26, r24
    52f8:	b9 1f       	adc	r27, r25
    52fa:	aa 0f       	add	r26, r26
    52fc:	bb 1f       	adc	r27, r27
    52fe:	a4 54       	subi	r26, 0x44	; 68
    5300:	b7 4e       	sbci	r27, 0xE7	; 231
    5302:	24 e0       	ldi	r18, 0x04	; 4
    5304:	15 96       	adiw	r26, 0x05	; 5
    5306:	2c 93       	st	X, r18
    5308:	15 97       	sbiw	r26, 0x05	; 5
    530a:	fd 01       	movw	r30, r26
    530c:	14 82       	std	Z+4, r1	; 0x04
    530e:	08 95       	ret

00005310 <status_leds_shortPuls>:
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	fc 01       	movw	r30, r24
    5314:	ee 0f       	add	r30, r30
    5316:	ff 1f       	adc	r31, r31
    5318:	df 01       	movw	r26, r30
    531a:	a8 0f       	add	r26, r24
    531c:	b9 1f       	adc	r27, r25
    531e:	aa 0f       	add	r26, r26
    5320:	bb 1f       	adc	r27, r27
    5322:	a4 54       	subi	r26, 0x44	; 68
    5324:	b7 4e       	sbci	r27, 0xE7	; 231
    5326:	21 e0       	ldi	r18, 0x01	; 1
    5328:	15 96       	adiw	r26, 0x05	; 5
    532a:	2c 93       	st	X, r18
    532c:	15 97       	sbiw	r26, 0x05	; 5
    532e:	fd 01       	movw	r30, r26
    5330:	14 82       	std	Z+4, r1	; 0x04
    5332:	08 95       	ret

00005334 <_initTwiInterface>:
    5334:	80 91 e2 18 	lds	r24, 0x18E2	; 0x8018e2 <_twiIsInitiated>
    5338:	81 11       	cpse	r24, r1
    533a:	0c c0       	rjmp	.+24     	; 0x5354 <_initTwiInterface+0x20>
    533c:	8c e0       	ldi	r24, 0x0C	; 12
    533e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5342:	8f ef       	ldi	r24, 0xFF	; 255
    5344:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5348:	84 e0       	ldi	r24, 0x04	; 4
    534a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    534e:	81 e0       	ldi	r24, 0x01	; 1
    5350:	80 93 e2 18 	sts	0x18E2, r24	; 0x8018e2 <_twiIsInitiated>
    5354:	08 95       	ret

00005356 <twiCreate>:
    5356:	af 92       	push	r10
    5358:	bf 92       	push	r11
    535a:	cf 92       	push	r12
    535c:	df 92       	push	r13
    535e:	ef 92       	push	r14
    5360:	ff 92       	push	r15
    5362:	0f 93       	push	r16
    5364:	1f 93       	push	r17
    5366:	cf 93       	push	r28
    5368:	df 93       	push	r29
    536a:	a8 2e       	mov	r10, r24
    536c:	b6 2e       	mov	r11, r22
    536e:	69 01       	movw	r12, r18
    5370:	7a 01       	movw	r14, r20
    5372:	84 e0       	ldi	r24, 0x04	; 4
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	a0 d3       	rcall	.+1856   	; 0x5ab8 <malloc>
    5378:	ec 01       	movw	r28, r24
    537a:	89 2b       	or	r24, r25
    537c:	61 f1       	breq	.+88     	; 0x53d6 <twiCreate+0x80>
    537e:	a8 82       	st	Y, r10
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	b8 12       	cpse	r11, r24
    5384:	12 c0       	rjmp	.+36     	; 0x53aa <twiCreate+0x54>
    5386:	c7 01       	movw	r24, r14
    5388:	b6 01       	movw	r22, r12
    538a:	20 ea       	ldi	r18, 0xA0	; 160
    538c:	36 e8       	ldi	r19, 0x86	; 134
    538e:	41 e0       	ldi	r20, 0x01	; 1
    5390:	50 e0       	ldi	r21, 0x00	; 0
    5392:	4e d3       	rcall	.+1692   	; 0x5a30 <__udivmodsi4>
    5394:	da 01       	movw	r26, r20
    5396:	c9 01       	movw	r24, r18
    5398:	40 97       	sbiw	r24, 0x10	; 16
    539a:	a1 09       	sbc	r26, r1
    539c:	b1 09       	sbc	r27, r1
    539e:	b6 95       	lsr	r27
    53a0:	a7 95       	ror	r26
    53a2:	97 95       	ror	r25
    53a4:	87 95       	ror	r24
    53a6:	89 83       	std	Y+1, r24	; 0x01
    53a8:	11 c0       	rjmp	.+34     	; 0x53cc <twiCreate+0x76>
    53aa:	c7 01       	movw	r24, r14
    53ac:	b6 01       	movw	r22, r12
    53ae:	20 e8       	ldi	r18, 0x80	; 128
    53b0:	3a e1       	ldi	r19, 0x1A	; 26
    53b2:	46 e0       	ldi	r20, 0x06	; 6
    53b4:	50 e0       	ldi	r21, 0x00	; 0
    53b6:	3c d3       	rcall	.+1656   	; 0x5a30 <__udivmodsi4>
    53b8:	da 01       	movw	r26, r20
    53ba:	c9 01       	movw	r24, r18
    53bc:	40 97       	sbiw	r24, 0x10	; 16
    53be:	a1 09       	sbc	r26, r1
    53c0:	b1 09       	sbc	r27, r1
    53c2:	b6 95       	lsr	r27
    53c4:	a7 95       	ror	r26
    53c6:	97 95       	ror	r25
    53c8:	87 95       	ror	r24
    53ca:	89 83       	std	Y+1, r24	; 0x01
    53cc:	1b 83       	std	Y+3, r17	; 0x03
    53ce:	0a 83       	std	Y+2, r16	; 0x02
    53d0:	8c 2f       	mov	r24, r28
    53d2:	9d 2f       	mov	r25, r29
    53d4:	02 c0       	rjmp	.+4      	; 0x53da <twiCreate+0x84>
    53d6:	80 e0       	ldi	r24, 0x00	; 0
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	df 91       	pop	r29
    53dc:	cf 91       	pop	r28
    53de:	1f 91       	pop	r17
    53e0:	0f 91       	pop	r16
    53e2:	ff 90       	pop	r15
    53e4:	ef 90       	pop	r14
    53e6:	df 90       	pop	r13
    53e8:	cf 90       	pop	r12
    53ea:	bf 90       	pop	r11
    53ec:	af 90       	pop	r10
    53ee:	08 95       	ret

000053f0 <twiIsBusy>:
    53f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53f4:	81 70       	andi	r24, 0x01	; 1
    53f6:	08 95       	ret

000053f8 <twiTransmit>:
    53f8:	ff 92       	push	r15
    53fa:	0f 93       	push	r16
    53fc:	1f 93       	push	r17
    53fe:	cf 93       	push	r28
    5400:	df 93       	push	r29
    5402:	00 97       	sbiw	r24, 0x00	; 0
    5404:	d1 f1       	breq	.+116    	; 0x547a <twiTransmit+0x82>
    5406:	4a 30       	cpi	r20, 0x0A	; 10
    5408:	d0 f5       	brcc	.+116    	; 0x547e <twiTransmit+0x86>
    540a:	f4 2e       	mov	r15, r20
    540c:	8b 01       	movw	r16, r22
    540e:	ec 01       	movw	r28, r24
    5410:	ef df       	rcall	.-34     	; 0x53f0 <twiIsBusy>
    5412:	81 11       	cpse	r24, r1
    5414:	36 c0       	rjmp	.+108    	; 0x5482 <twiTransmit+0x8a>
    5416:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <_twiCurrentHandler>
    541a:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <_twiCurrentHandler+0x1>
    541e:	c8 17       	cp	r28, r24
    5420:	d9 07       	cpc	r29, r25
    5422:	41 f0       	breq	.+16     	; 0x5434 <twiTransmit+0x3c>
    5424:	87 df       	rcall	.-242    	; 0x5334 <_initTwiInterface>
    5426:	89 81       	ldd	r24, Y+1	; 0x01
    5428:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    542c:	d0 93 d6 18 	sts	0x18D6, r29	; 0x8018d6 <_twiCurrentHandler+0x1>
    5430:	c0 93 d5 18 	sts	0x18D5, r28	; 0x8018d5 <_twiCurrentHandler>
    5434:	81 e0       	ldi	r24, 0x01	; 1
    5436:	8f 0d       	add	r24, r15
    5438:	80 93 d7 18 	sts	0x18D7, r24	; 0x8018d7 <_twiMessageLen>
    543c:	88 81       	ld	r24, Y
    543e:	88 0f       	add	r24, r24
    5440:	80 93 d8 18 	sts	0x18D8, r24	; 0x8018d8 <_twiMessageBuffer>
    5444:	ff 20       	and	r15, r15
    5446:	89 f0       	breq	.+34     	; 0x546a <twiTransmit+0x72>
    5448:	f8 01       	movw	r30, r16
    544a:	a9 ed       	ldi	r26, 0xD9	; 217
    544c:	b8 e1       	ldi	r27, 0x18	; 24
    544e:	4f ef       	ldi	r20, 0xFF	; 255
    5450:	4f 0d       	add	r20, r15
    5452:	64 2f       	mov	r22, r20
    5454:	70 e0       	ldi	r23, 0x00	; 0
    5456:	cb 01       	movw	r24, r22
    5458:	01 96       	adiw	r24, 0x01	; 1
    545a:	b8 01       	movw	r22, r16
    545c:	68 0f       	add	r22, r24
    545e:	79 1f       	adc	r23, r25
    5460:	81 91       	ld	r24, Z+
    5462:	8d 93       	st	X+, r24
    5464:	e6 17       	cp	r30, r22
    5466:	f7 07       	cpc	r31, r23
    5468:	d9 f7       	brne	.-10     	; 0x5460 <twiTransmit+0x68>
    546a:	88 ef       	ldi	r24, 0xF8	; 248
    546c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5470:	85 ea       	ldi	r24, 0xA5	; 165
    5472:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5476:	84 e0       	ldi	r24, 0x04	; 4
    5478:	05 c0       	rjmp	.+10     	; 0x5484 <twiTransmit+0x8c>
    547a:	86 e0       	ldi	r24, 0x06	; 6
    547c:	03 c0       	rjmp	.+6      	; 0x5484 <twiTransmit+0x8c>
    547e:	87 e0       	ldi	r24, 0x07	; 7
    5480:	01 c0       	rjmp	.+2      	; 0x5484 <twiTransmit+0x8c>
    5482:	82 e0       	ldi	r24, 0x02	; 2
    5484:	df 91       	pop	r29
    5486:	cf 91       	pop	r28
    5488:	1f 91       	pop	r17
    548a:	0f 91       	pop	r16
    548c:	ff 90       	pop	r15
    548e:	08 95       	ret

00005490 <twiReceive>:
    5490:	1f 93       	push	r17
    5492:	cf 93       	push	r28
    5494:	df 93       	push	r29
    5496:	00 97       	sbiw	r24, 0x00	; 0
    5498:	29 f1       	breq	.+74     	; 0x54e4 <twiReceive+0x54>
    549a:	6b 30       	cpi	r22, 0x0B	; 11
    549c:	28 f5       	brcc	.+74     	; 0x54e8 <twiReceive+0x58>
    549e:	16 2f       	mov	r17, r22
    54a0:	ec 01       	movw	r28, r24
    54a2:	a6 df       	rcall	.-180    	; 0x53f0 <twiIsBusy>
    54a4:	81 11       	cpse	r24, r1
    54a6:	22 c0       	rjmp	.+68     	; 0x54ec <twiReceive+0x5c>
    54a8:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <_twiCurrentHandler>
    54ac:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <_twiCurrentHandler+0x1>
    54b0:	c8 17       	cp	r28, r24
    54b2:	d9 07       	cpc	r29, r25
    54b4:	41 f0       	breq	.+16     	; 0x54c6 <twiReceive+0x36>
    54b6:	3e df       	rcall	.-388    	; 0x5334 <_initTwiInterface>
    54b8:	89 81       	ldd	r24, Y+1	; 0x01
    54ba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    54be:	d0 93 d6 18 	sts	0x18D6, r29	; 0x8018d6 <_twiCurrentHandler+0x1>
    54c2:	c0 93 d5 18 	sts	0x18D5, r28	; 0x8018d5 <_twiCurrentHandler>
    54c6:	10 93 d7 18 	sts	0x18D7, r17	; 0x8018d7 <_twiMessageLen>
    54ca:	88 81       	ld	r24, Y
    54cc:	88 0f       	add	r24, r24
    54ce:	81 60       	ori	r24, 0x01	; 1
    54d0:	80 93 d8 18 	sts	0x18D8, r24	; 0x8018d8 <_twiMessageBuffer>
    54d4:	88 ef       	ldi	r24, 0xF8	; 248
    54d6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    54da:	85 ea       	ldi	r24, 0xA5	; 165
    54dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54e0:	85 e0       	ldi	r24, 0x05	; 5
    54e2:	05 c0       	rjmp	.+10     	; 0x54ee <twiReceive+0x5e>
    54e4:	86 e0       	ldi	r24, 0x06	; 6
    54e6:	03 c0       	rjmp	.+6      	; 0x54ee <twiReceive+0x5e>
    54e8:	87 e0       	ldi	r24, 0x07	; 7
    54ea:	01 c0       	rjmp	.+2      	; 0x54ee <twiReceive+0x5e>
    54ec:	82 e0       	ldi	r24, 0x02	; 2
    54ee:	df 91       	pop	r29
    54f0:	cf 91       	pop	r28
    54f2:	1f 91       	pop	r17
    54f4:	08 95       	ret

000054f6 <__vector_39>:
    54f6:	1f 92       	push	r1
    54f8:	0f 92       	push	r0
    54fa:	0f b6       	in	r0, 0x3f	; 63
    54fc:	0f 92       	push	r0
    54fe:	11 24       	eor	r1, r1
    5500:	0b b6       	in	r0, 0x3b	; 59
    5502:	0f 92       	push	r0
    5504:	2f 93       	push	r18
    5506:	3f 93       	push	r19
    5508:	4f 93       	push	r20
    550a:	5f 93       	push	r21
    550c:	6f 93       	push	r22
    550e:	7f 93       	push	r23
    5510:	8f 93       	push	r24
    5512:	9f 93       	push	r25
    5514:	af 93       	push	r26
    5516:	bf 93       	push	r27
    5518:	ef 93       	push	r30
    551a:	ff 93       	push	r31
    551c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5520:	8e 2f       	mov	r24, r30
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	fc 01       	movw	r30, r24
    5526:	38 97       	sbiw	r30, 0x08	; 8
    5528:	e1 35       	cpi	r30, 0x51	; 81
    552a:	f1 05       	cpc	r31, r1
    552c:	08 f0       	brcs	.+2      	; 0x5530 <__vector_39+0x3a>
    552e:	75 c0       	rjmp	.+234    	; 0x561a <__vector_39+0x124>
    5530:	88 27       	eor	r24, r24
    5532:	e4 58       	subi	r30, 0x84	; 132
    5534:	ff 4f       	sbci	r31, 0xFF	; 255
    5536:	8f 4f       	sbci	r24, 0xFF	; 255
    5538:	9d c2       	rjmp	.+1338   	; 0x5a74 <__tablejump2__>
    553a:	10 92 d4 18 	sts	0x18D4, r1	; 0x8018d4 <_index.1885>
    553e:	e0 91 d4 18 	lds	r30, 0x18D4	; 0x8018d4 <_index.1885>
    5542:	80 91 d7 18 	lds	r24, 0x18D7	; 0x8018d7 <_twiMessageLen>
    5546:	e8 17       	cp	r30, r24
    5548:	70 f4       	brcc	.+28     	; 0x5566 <__vector_39+0x70>
    554a:	81 e0       	ldi	r24, 0x01	; 1
    554c:	8e 0f       	add	r24, r30
    554e:	80 93 d4 18 	sts	0x18D4, r24	; 0x8018d4 <_index.1885>
    5552:	f0 e0       	ldi	r31, 0x00	; 0
    5554:	e8 52       	subi	r30, 0x28	; 40
    5556:	f7 4e       	sbci	r31, 0xE7	; 231
    5558:	80 81       	ld	r24, Z
    555a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    555e:	85 e8       	ldi	r24, 0x85	; 133
    5560:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5564:	72 c0       	rjmp	.+228    	; 0x564a <__vector_39+0x154>
    5566:	84 e9       	ldi	r24, 0x94	; 148
    5568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    556c:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <_twiCurrentHandler>
    5570:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <_twiCurrentHandler+0x1>
    5574:	dc 01       	movw	r26, r24
    5576:	12 96       	adiw	r26, 0x02	; 2
    5578:	ed 91       	ld	r30, X+
    557a:	fc 91       	ld	r31, X
    557c:	13 97       	sbiw	r26, 0x03	; 3
    557e:	30 97       	sbiw	r30, 0x00	; 0
    5580:	09 f4       	brne	.+2      	; 0x5584 <__vector_39+0x8e>
    5582:	63 c0       	rjmp	.+198    	; 0x564a <__vector_39+0x154>
    5584:	20 e0       	ldi	r18, 0x00	; 0
    5586:	40 e0       	ldi	r20, 0x00	; 0
    5588:	50 e0       	ldi	r21, 0x00	; 0
    558a:	64 e0       	ldi	r22, 0x04	; 4
    558c:	19 95       	eicall
    558e:	5d c0       	rjmp	.+186    	; 0x564a <__vector_39+0x154>
    5590:	e0 91 d4 18 	lds	r30, 0x18D4	; 0x8018d4 <_index.1885>
    5594:	81 e0       	ldi	r24, 0x01	; 1
    5596:	8e 0f       	add	r24, r30
    5598:	80 93 d4 18 	sts	0x18D4, r24	; 0x8018d4 <_index.1885>
    559c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55a0:	f0 e0       	ldi	r31, 0x00	; 0
    55a2:	e8 52       	subi	r30, 0x28	; 40
    55a4:	f7 4e       	sbci	r31, 0xE7	; 231
    55a6:	80 83       	st	Z, r24
    55a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    55ac:	80 34       	cpi	r24, 0x40	; 64
    55ae:	11 f4       	brne	.+4      	; 0x55b4 <__vector_39+0xbe>
    55b0:	10 92 d4 18 	sts	0x18D4, r1	; 0x8018d4 <_index.1885>
    55b4:	20 91 d4 18 	lds	r18, 0x18D4	; 0x8018d4 <_index.1885>
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    55ba:	80 91 d7 18 	lds	r24, 0x18D7	; 0x8018d7 <_twiMessageLen>
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	01 97       	sbiw	r24, 0x01	; 1
    55c2:	28 17       	cp	r18, r24
    55c4:	39 07       	cpc	r19, r25
    55c6:	24 f4       	brge	.+8      	; 0x55d0 <__vector_39+0xda>
    55c8:	85 ec       	ldi	r24, 0xC5	; 197
    55ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55ce:	3d c0       	rjmp	.+122    	; 0x564a <__vector_39+0x154>
    55d0:	85 e8       	ldi	r24, 0x85	; 133
    55d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55d6:	39 c0       	rjmp	.+114    	; 0x564a <__vector_39+0x154>
    55d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55dc:	e0 91 d4 18 	lds	r30, 0x18D4	; 0x8018d4 <_index.1885>
    55e0:	f0 e0       	ldi	r31, 0x00	; 0
    55e2:	e8 52       	subi	r30, 0x28	; 40
    55e4:	f7 4e       	sbci	r31, 0xE7	; 231
    55e6:	80 83       	st	Z, r24
    55e8:	84 e9       	ldi	r24, 0x94	; 148
    55ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55ee:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <_twiCurrentHandler>
    55f2:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <_twiCurrentHandler+0x1>
    55f6:	dc 01       	movw	r26, r24
    55f8:	12 96       	adiw	r26, 0x02	; 2
    55fa:	ed 91       	ld	r30, X+
    55fc:	fc 91       	ld	r31, X
    55fe:	13 97       	sbiw	r26, 0x03	; 3
    5600:	30 97       	sbiw	r30, 0x00	; 0
    5602:	19 f1       	breq	.+70     	; 0x564a <__vector_39+0x154>
    5604:	20 91 d7 18 	lds	r18, 0x18D7	; 0x8018d7 <_twiMessageLen>
    5608:	48 ed       	ldi	r20, 0xD8	; 216
    560a:	58 e1       	ldi	r21, 0x18	; 24
    560c:	65 e0       	ldi	r22, 0x05	; 5
    560e:	19 95       	eicall
    5610:	1c c0       	rjmp	.+56     	; 0x564a <__vector_39+0x154>
    5612:	85 ea       	ldi	r24, 0xA5	; 165
    5614:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5618:	18 c0       	rjmp	.+48     	; 0x564a <__vector_39+0x154>
    561a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    561e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5622:	84 e0       	ldi	r24, 0x04	; 4
    5624:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5628:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <_twiCurrentHandler>
    562c:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <_twiCurrentHandler+0x1>
    5630:	dc 01       	movw	r26, r24
    5632:	12 96       	adiw	r26, 0x02	; 2
    5634:	ed 91       	ld	r30, X+
    5636:	fc 91       	ld	r31, X
    5638:	13 97       	sbiw	r26, 0x03	; 3
    563a:	30 97       	sbiw	r30, 0x00	; 0
    563c:	31 f0       	breq	.+12     	; 0x564a <__vector_39+0x154>
    563e:	20 e0       	ldi	r18, 0x00	; 0
    5640:	40 e0       	ldi	r20, 0x00	; 0
    5642:	50 e0       	ldi	r21, 0x00	; 0
    5644:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5648:	19 95       	eicall
    564a:	ff 91       	pop	r31
    564c:	ef 91       	pop	r30
    564e:	bf 91       	pop	r27
    5650:	af 91       	pop	r26
    5652:	9f 91       	pop	r25
    5654:	8f 91       	pop	r24
    5656:	7f 91       	pop	r23
    5658:	6f 91       	pop	r22
    565a:	5f 91       	pop	r21
    565c:	4f 91       	pop	r20
    565e:	3f 91       	pop	r19
    5660:	2f 91       	pop	r18
    5662:	0f 90       	pop	r0
    5664:	0b be       	out	0x3b, r0	; 59
    5666:	0f 90       	pop	r0
    5668:	0f be       	out	0x3f, r0	; 63
    566a:	0f 90       	pop	r0
    566c:	1f 90       	pop	r1
    566e:	18 95       	reti

00005670 <fifo_init>:
    5670:	fc 01       	movw	r30, r24
    5672:	41 11       	cpse	r20, r1
    5674:	01 c0       	rjmp	.+2      	; 0x5678 <fifo_init+0x8>
    5676:	41 d3       	rcall	.+1666   	; 0x5cfa <abort>
    5678:	84 2f       	mov	r24, r20
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	9c 01       	movw	r18, r24
    567e:	21 50       	subi	r18, 0x01	; 1
    5680:	31 09       	sbc	r19, r1
    5682:	82 23       	and	r24, r18
    5684:	93 23       	and	r25, r19
    5686:	89 2b       	or	r24, r25
    5688:	09 f0       	breq	.+2      	; 0x568c <fifo_init+0x1c>
    568a:	37 d3       	rcall	.+1646   	; 0x5cfa <abort>
    568c:	41 38       	cpi	r20, 0x81	; 129
    568e:	08 f0       	brcs	.+2      	; 0x5692 <fifo_init+0x22>
    5690:	34 d3       	rcall	.+1640   	; 0x5cfa <abort>
    5692:	12 82       	std	Z+2, r1	; 0x02
    5694:	13 82       	std	Z+3, r1	; 0x03
    5696:	44 83       	std	Z+4, r20	; 0x04
    5698:	44 0f       	add	r20, r20
    569a:	41 50       	subi	r20, 0x01	; 1
    569c:	45 83       	std	Z+5, r20	; 0x05
    569e:	71 83       	std	Z+1, r23	; 0x01
    56a0:	60 83       	st	Z, r22
    56a2:	80 e0       	ldi	r24, 0x00	; 0
    56a4:	90 e0       	ldi	r25, 0x00	; 0
    56a6:	08 95       	ret

000056a8 <__subsf3>:
    56a8:	50 58       	subi	r21, 0x80	; 128

000056aa <__addsf3>:
    56aa:	bb 27       	eor	r27, r27
    56ac:	aa 27       	eor	r26, r26
    56ae:	0e d0       	rcall	.+28     	; 0x56cc <__addsf3x>
    56b0:	21 c1       	rjmp	.+578    	; 0x58f4 <__fp_round>
    56b2:	12 d1       	rcall	.+548    	; 0x58d8 <__fp_pscA>
    56b4:	30 f0       	brcs	.+12     	; 0x56c2 <__addsf3+0x18>
    56b6:	17 d1       	rcall	.+558    	; 0x58e6 <__fp_pscB>
    56b8:	20 f0       	brcs	.+8      	; 0x56c2 <__addsf3+0x18>
    56ba:	31 f4       	brne	.+12     	; 0x56c8 <__addsf3+0x1e>
    56bc:	9f 3f       	cpi	r25, 0xFF	; 255
    56be:	11 f4       	brne	.+4      	; 0x56c4 <__addsf3+0x1a>
    56c0:	1e f4       	brtc	.+6      	; 0x56c8 <__addsf3+0x1e>
    56c2:	07 c1       	rjmp	.+526    	; 0x58d2 <__fp_nan>
    56c4:	0e f4       	brtc	.+2      	; 0x56c8 <__addsf3+0x1e>
    56c6:	e0 95       	com	r30
    56c8:	e7 fb       	bst	r30, 7
    56ca:	fd c0       	rjmp	.+506    	; 0x58c6 <__fp_inf>

000056cc <__addsf3x>:
    56cc:	e9 2f       	mov	r30, r25
    56ce:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_split3>
    56d2:	78 f3       	brcs	.-34     	; 0x56b2 <__addsf3+0x8>
    56d4:	ba 17       	cp	r27, r26
    56d6:	62 07       	cpc	r22, r18
    56d8:	73 07       	cpc	r23, r19
    56da:	84 07       	cpc	r24, r20
    56dc:	95 07       	cpc	r25, r21
    56de:	20 f0       	brcs	.+8      	; 0x56e8 <__addsf3x+0x1c>
    56e0:	79 f4       	brne	.+30     	; 0x5700 <__addsf3x+0x34>
    56e2:	a6 f5       	brtc	.+104    	; 0x574c <__addsf3x+0x80>
    56e4:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__fp_zero>
    56e8:	0e f4       	brtc	.+2      	; 0x56ec <__addsf3x+0x20>
    56ea:	e0 95       	com	r30
    56ec:	0b 2e       	mov	r0, r27
    56ee:	ba 2f       	mov	r27, r26
    56f0:	a0 2d       	mov	r26, r0
    56f2:	0b 01       	movw	r0, r22
    56f4:	b9 01       	movw	r22, r18
    56f6:	90 01       	movw	r18, r0
    56f8:	0c 01       	movw	r0, r24
    56fa:	ca 01       	movw	r24, r20
    56fc:	a0 01       	movw	r20, r0
    56fe:	11 24       	eor	r1, r1
    5700:	ff 27       	eor	r31, r31
    5702:	59 1b       	sub	r21, r25
    5704:	99 f0       	breq	.+38     	; 0x572c <__addsf3x+0x60>
    5706:	59 3f       	cpi	r21, 0xF9	; 249
    5708:	50 f4       	brcc	.+20     	; 0x571e <__addsf3x+0x52>
    570a:	50 3e       	cpi	r21, 0xE0	; 224
    570c:	68 f1       	brcs	.+90     	; 0x5768 <__addsf3x+0x9c>
    570e:	1a 16       	cp	r1, r26
    5710:	f0 40       	sbci	r31, 0x00	; 0
    5712:	a2 2f       	mov	r26, r18
    5714:	23 2f       	mov	r18, r19
    5716:	34 2f       	mov	r19, r20
    5718:	44 27       	eor	r20, r20
    571a:	58 5f       	subi	r21, 0xF8	; 248
    571c:	f3 cf       	rjmp	.-26     	; 0x5704 <__addsf3x+0x38>
    571e:	46 95       	lsr	r20
    5720:	37 95       	ror	r19
    5722:	27 95       	ror	r18
    5724:	a7 95       	ror	r26
    5726:	f0 40       	sbci	r31, 0x00	; 0
    5728:	53 95       	inc	r21
    572a:	c9 f7       	brne	.-14     	; 0x571e <__addsf3x+0x52>
    572c:	7e f4       	brtc	.+30     	; 0x574c <__addsf3x+0x80>
    572e:	1f 16       	cp	r1, r31
    5730:	ba 0b       	sbc	r27, r26
    5732:	62 0b       	sbc	r22, r18
    5734:	73 0b       	sbc	r23, r19
    5736:	84 0b       	sbc	r24, r20
    5738:	ba f0       	brmi	.+46     	; 0x5768 <__addsf3x+0x9c>
    573a:	91 50       	subi	r25, 0x01	; 1
    573c:	a1 f0       	breq	.+40     	; 0x5766 <__addsf3x+0x9a>
    573e:	ff 0f       	add	r31, r31
    5740:	bb 1f       	adc	r27, r27
    5742:	66 1f       	adc	r22, r22
    5744:	77 1f       	adc	r23, r23
    5746:	88 1f       	adc	r24, r24
    5748:	c2 f7       	brpl	.-16     	; 0x573a <__addsf3x+0x6e>
    574a:	0e c0       	rjmp	.+28     	; 0x5768 <__addsf3x+0x9c>
    574c:	ba 0f       	add	r27, r26
    574e:	62 1f       	adc	r22, r18
    5750:	73 1f       	adc	r23, r19
    5752:	84 1f       	adc	r24, r20
    5754:	48 f4       	brcc	.+18     	; 0x5768 <__addsf3x+0x9c>
    5756:	87 95       	ror	r24
    5758:	77 95       	ror	r23
    575a:	67 95       	ror	r22
    575c:	b7 95       	ror	r27
    575e:	f7 95       	ror	r31
    5760:	9e 3f       	cpi	r25, 0xFE	; 254
    5762:	08 f0       	brcs	.+2      	; 0x5766 <__addsf3x+0x9a>
    5764:	b1 cf       	rjmp	.-158    	; 0x56c8 <__addsf3+0x1e>
    5766:	93 95       	inc	r25
    5768:	88 0f       	add	r24, r24
    576a:	08 f0       	brcs	.+2      	; 0x576e <__addsf3x+0xa2>
    576c:	99 27       	eor	r25, r25
    576e:	ee 0f       	add	r30, r30
    5770:	97 95       	ror	r25
    5772:	87 95       	ror	r24
    5774:	08 95       	ret

00005776 <__divsf3>:
    5776:	0d d0       	rcall	.+26     	; 0x5792 <__divsf3x>
    5778:	bd c0       	rjmp	.+378    	; 0x58f4 <__fp_round>
    577a:	b5 d0       	rcall	.+362    	; 0x58e6 <__fp_pscB>
    577c:	48 f0       	brcs	.+18     	; 0x5790 <__divsf3+0x1a>
    577e:	ac d0       	rcall	.+344    	; 0x58d8 <__fp_pscA>
    5780:	38 f0       	brcs	.+14     	; 0x5790 <__divsf3+0x1a>
    5782:	21 f4       	brne	.+8      	; 0x578c <__divsf3+0x16>
    5784:	5f 3f       	cpi	r21, 0xFF	; 255
    5786:	21 f0       	breq	.+8      	; 0x5790 <__divsf3+0x1a>
    5788:	9e c0       	rjmp	.+316    	; 0x58c6 <__fp_inf>
    578a:	51 11       	cpse	r21, r1
    578c:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__fp_szero>
    5790:	a0 c0       	rjmp	.+320    	; 0x58d2 <__fp_nan>

00005792 <__divsf3x>:
    5792:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_split3>
    5796:	88 f3       	brcs	.-30     	; 0x577a <__divsf3+0x4>

00005798 <__divsf3_pse>:
    5798:	99 23       	and	r25, r25
    579a:	b9 f3       	breq	.-18     	; 0x578a <__divsf3+0x14>
    579c:	55 23       	and	r21, r21
    579e:	a1 f3       	breq	.-24     	; 0x5788 <__divsf3+0x12>
    57a0:	95 1b       	sub	r25, r21
    57a2:	55 0b       	sbc	r21, r21
    57a4:	bb 27       	eor	r27, r27
    57a6:	aa 27       	eor	r26, r26
    57a8:	62 17       	cp	r22, r18
    57aa:	73 07       	cpc	r23, r19
    57ac:	84 07       	cpc	r24, r20
    57ae:	38 f0       	brcs	.+14     	; 0x57be <__divsf3_pse+0x26>
    57b0:	9f 5f       	subi	r25, 0xFF	; 255
    57b2:	5f 4f       	sbci	r21, 0xFF	; 255
    57b4:	22 0f       	add	r18, r18
    57b6:	33 1f       	adc	r19, r19
    57b8:	44 1f       	adc	r20, r20
    57ba:	aa 1f       	adc	r26, r26
    57bc:	a9 f3       	breq	.-22     	; 0x57a8 <__divsf3_pse+0x10>
    57be:	34 d0       	rcall	.+104    	; 0x5828 <__divsf3_pse+0x90>
    57c0:	0e 2e       	mov	r0, r30
    57c2:	3a f0       	brmi	.+14     	; 0x57d2 <__divsf3_pse+0x3a>
    57c4:	e0 e8       	ldi	r30, 0x80	; 128
    57c6:	31 d0       	rcall	.+98     	; 0x582a <__divsf3_pse+0x92>
    57c8:	91 50       	subi	r25, 0x01	; 1
    57ca:	50 40       	sbci	r21, 0x00	; 0
    57cc:	e6 95       	lsr	r30
    57ce:	00 1c       	adc	r0, r0
    57d0:	ca f7       	brpl	.-14     	; 0x57c4 <__divsf3_pse+0x2c>
    57d2:	2a d0       	rcall	.+84     	; 0x5828 <__divsf3_pse+0x90>
    57d4:	fe 2f       	mov	r31, r30
    57d6:	28 d0       	rcall	.+80     	; 0x5828 <__divsf3_pse+0x90>
    57d8:	66 0f       	add	r22, r22
    57da:	77 1f       	adc	r23, r23
    57dc:	88 1f       	adc	r24, r24
    57de:	bb 1f       	adc	r27, r27
    57e0:	26 17       	cp	r18, r22
    57e2:	37 07       	cpc	r19, r23
    57e4:	48 07       	cpc	r20, r24
    57e6:	ab 07       	cpc	r26, r27
    57e8:	b0 e8       	ldi	r27, 0x80	; 128
    57ea:	09 f0       	breq	.+2      	; 0x57ee <__divsf3_pse+0x56>
    57ec:	bb 0b       	sbc	r27, r27
    57ee:	80 2d       	mov	r24, r0
    57f0:	bf 01       	movw	r22, r30
    57f2:	ff 27       	eor	r31, r31
    57f4:	93 58       	subi	r25, 0x83	; 131
    57f6:	5f 4f       	sbci	r21, 0xFF	; 255
    57f8:	32 f0       	brmi	.+12     	; 0x5806 <__divsf3_pse+0x6e>
    57fa:	9e 3f       	cpi	r25, 0xFE	; 254
    57fc:	51 05       	cpc	r21, r1
    57fe:	70 f0       	brcs	.+28     	; 0x581c <__divsf3_pse+0x84>
    5800:	62 c0       	rjmp	.+196    	; 0x58c6 <__fp_inf>
    5802:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__fp_szero>
    5806:	5f 3f       	cpi	r21, 0xFF	; 255
    5808:	e4 f3       	brlt	.-8      	; 0x5802 <__divsf3_pse+0x6a>
    580a:	98 3e       	cpi	r25, 0xE8	; 232
    580c:	d4 f3       	brlt	.-12     	; 0x5802 <__divsf3_pse+0x6a>
    580e:	86 95       	lsr	r24
    5810:	77 95       	ror	r23
    5812:	67 95       	ror	r22
    5814:	b7 95       	ror	r27
    5816:	f7 95       	ror	r31
    5818:	9f 5f       	subi	r25, 0xFF	; 255
    581a:	c9 f7       	brne	.-14     	; 0x580e <__divsf3_pse+0x76>
    581c:	88 0f       	add	r24, r24
    581e:	91 1d       	adc	r25, r1
    5820:	96 95       	lsr	r25
    5822:	87 95       	ror	r24
    5824:	97 f9       	bld	r25, 7
    5826:	08 95       	ret
    5828:	e1 e0       	ldi	r30, 0x01	; 1
    582a:	66 0f       	add	r22, r22
    582c:	77 1f       	adc	r23, r23
    582e:	88 1f       	adc	r24, r24
    5830:	bb 1f       	adc	r27, r27
    5832:	62 17       	cp	r22, r18
    5834:	73 07       	cpc	r23, r19
    5836:	84 07       	cpc	r24, r20
    5838:	ba 07       	cpc	r27, r26
    583a:	20 f0       	brcs	.+8      	; 0x5844 <__divsf3_pse+0xac>
    583c:	62 1b       	sub	r22, r18
    583e:	73 0b       	sbc	r23, r19
    5840:	84 0b       	sbc	r24, r20
    5842:	ba 0b       	sbc	r27, r26
    5844:	ee 1f       	adc	r30, r30
    5846:	88 f7       	brcc	.-30     	; 0x582a <__divsf3_pse+0x92>
    5848:	e0 95       	com	r30
    584a:	08 95       	ret

0000584c <__floatunsisf>:
    584c:	e8 94       	clt
    584e:	09 c0       	rjmp	.+18     	; 0x5862 <__floatsisf+0x12>

00005850 <__floatsisf>:
    5850:	97 fb       	bst	r25, 7
    5852:	3e f4       	brtc	.+14     	; 0x5862 <__floatsisf+0x12>
    5854:	90 95       	com	r25
    5856:	80 95       	com	r24
    5858:	70 95       	com	r23
    585a:	61 95       	neg	r22
    585c:	7f 4f       	sbci	r23, 0xFF	; 255
    585e:	8f 4f       	sbci	r24, 0xFF	; 255
    5860:	9f 4f       	sbci	r25, 0xFF	; 255
    5862:	99 23       	and	r25, r25
    5864:	a9 f0       	breq	.+42     	; 0x5890 <__floatsisf+0x40>
    5866:	f9 2f       	mov	r31, r25
    5868:	96 e9       	ldi	r25, 0x96	; 150
    586a:	bb 27       	eor	r27, r27
    586c:	93 95       	inc	r25
    586e:	f6 95       	lsr	r31
    5870:	87 95       	ror	r24
    5872:	77 95       	ror	r23
    5874:	67 95       	ror	r22
    5876:	b7 95       	ror	r27
    5878:	f1 11       	cpse	r31, r1
    587a:	f8 cf       	rjmp	.-16     	; 0x586c <__floatsisf+0x1c>
    587c:	fa f4       	brpl	.+62     	; 0x58bc <__floatsisf+0x6c>
    587e:	bb 0f       	add	r27, r27
    5880:	11 f4       	brne	.+4      	; 0x5886 <__floatsisf+0x36>
    5882:	60 ff       	sbrs	r22, 0
    5884:	1b c0       	rjmp	.+54     	; 0x58bc <__floatsisf+0x6c>
    5886:	6f 5f       	subi	r22, 0xFF	; 255
    5888:	7f 4f       	sbci	r23, 0xFF	; 255
    588a:	8f 4f       	sbci	r24, 0xFF	; 255
    588c:	9f 4f       	sbci	r25, 0xFF	; 255
    588e:	16 c0       	rjmp	.+44     	; 0x58bc <__floatsisf+0x6c>
    5890:	88 23       	and	r24, r24
    5892:	11 f0       	breq	.+4      	; 0x5898 <__floatsisf+0x48>
    5894:	96 e9       	ldi	r25, 0x96	; 150
    5896:	11 c0       	rjmp	.+34     	; 0x58ba <__floatsisf+0x6a>
    5898:	77 23       	and	r23, r23
    589a:	21 f0       	breq	.+8      	; 0x58a4 <__floatsisf+0x54>
    589c:	9e e8       	ldi	r25, 0x8E	; 142
    589e:	87 2f       	mov	r24, r23
    58a0:	76 2f       	mov	r23, r22
    58a2:	05 c0       	rjmp	.+10     	; 0x58ae <__floatsisf+0x5e>
    58a4:	66 23       	and	r22, r22
    58a6:	71 f0       	breq	.+28     	; 0x58c4 <__floatsisf+0x74>
    58a8:	96 e8       	ldi	r25, 0x86	; 134
    58aa:	86 2f       	mov	r24, r22
    58ac:	70 e0       	ldi	r23, 0x00	; 0
    58ae:	60 e0       	ldi	r22, 0x00	; 0
    58b0:	2a f0       	brmi	.+10     	; 0x58bc <__floatsisf+0x6c>
    58b2:	9a 95       	dec	r25
    58b4:	66 0f       	add	r22, r22
    58b6:	77 1f       	adc	r23, r23
    58b8:	88 1f       	adc	r24, r24
    58ba:	da f7       	brpl	.-10     	; 0x58b2 <__floatsisf+0x62>
    58bc:	88 0f       	add	r24, r24
    58be:	96 95       	lsr	r25
    58c0:	87 95       	ror	r24
    58c2:	97 f9       	bld	r25, 7
    58c4:	08 95       	ret

000058c6 <__fp_inf>:
    58c6:	97 f9       	bld	r25, 7
    58c8:	9f 67       	ori	r25, 0x7F	; 127
    58ca:	80 e8       	ldi	r24, 0x80	; 128
    58cc:	70 e0       	ldi	r23, 0x00	; 0
    58ce:	60 e0       	ldi	r22, 0x00	; 0
    58d0:	08 95       	ret

000058d2 <__fp_nan>:
    58d2:	9f ef       	ldi	r25, 0xFF	; 255
    58d4:	80 ec       	ldi	r24, 0xC0	; 192
    58d6:	08 95       	ret

000058d8 <__fp_pscA>:
    58d8:	00 24       	eor	r0, r0
    58da:	0a 94       	dec	r0
    58dc:	16 16       	cp	r1, r22
    58de:	17 06       	cpc	r1, r23
    58e0:	18 06       	cpc	r1, r24
    58e2:	09 06       	cpc	r0, r25
    58e4:	08 95       	ret

000058e6 <__fp_pscB>:
    58e6:	00 24       	eor	r0, r0
    58e8:	0a 94       	dec	r0
    58ea:	12 16       	cp	r1, r18
    58ec:	13 06       	cpc	r1, r19
    58ee:	14 06       	cpc	r1, r20
    58f0:	05 06       	cpc	r0, r21
    58f2:	08 95       	ret

000058f4 <__fp_round>:
    58f4:	09 2e       	mov	r0, r25
    58f6:	03 94       	inc	r0
    58f8:	00 0c       	add	r0, r0
    58fa:	11 f4       	brne	.+4      	; 0x5900 <__fp_round+0xc>
    58fc:	88 23       	and	r24, r24
    58fe:	52 f0       	brmi	.+20     	; 0x5914 <__fp_round+0x20>
    5900:	bb 0f       	add	r27, r27
    5902:	40 f4       	brcc	.+16     	; 0x5914 <__fp_round+0x20>
    5904:	bf 2b       	or	r27, r31
    5906:	11 f4       	brne	.+4      	; 0x590c <__fp_round+0x18>
    5908:	60 ff       	sbrs	r22, 0
    590a:	04 c0       	rjmp	.+8      	; 0x5914 <__fp_round+0x20>
    590c:	6f 5f       	subi	r22, 0xFF	; 255
    590e:	7f 4f       	sbci	r23, 0xFF	; 255
    5910:	8f 4f       	sbci	r24, 0xFF	; 255
    5912:	9f 4f       	sbci	r25, 0xFF	; 255
    5914:	08 95       	ret

00005916 <__mulsf3>:
    5916:	0c d0       	rcall	.+24     	; 0x5930 <__mulsf3x>
    5918:	ed cf       	rjmp	.-38     	; 0x58f4 <__fp_round>
    591a:	de df       	rcall	.-68     	; 0x58d8 <__fp_pscA>
    591c:	28 f0       	brcs	.+10     	; 0x5928 <__mulsf3+0x12>
    591e:	e3 df       	rcall	.-58     	; 0x58e6 <__fp_pscB>
    5920:	18 f0       	brcs	.+6      	; 0x5928 <__mulsf3+0x12>
    5922:	95 23       	and	r25, r21
    5924:	09 f0       	breq	.+2      	; 0x5928 <__mulsf3+0x12>
    5926:	cf cf       	rjmp	.-98     	; 0x58c6 <__fp_inf>
    5928:	d4 cf       	rjmp	.-88     	; 0x58d2 <__fp_nan>
    592a:	11 24       	eor	r1, r1
    592c:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__fp_szero>

00005930 <__mulsf3x>:
    5930:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__fp_split3>
    5934:	90 f3       	brcs	.-28     	; 0x591a <__mulsf3+0x4>

00005936 <__mulsf3_pse>:
    5936:	95 9f       	mul	r25, r21
    5938:	c1 f3       	breq	.-16     	; 0x592a <__mulsf3+0x14>
    593a:	95 0f       	add	r25, r21
    593c:	50 e0       	ldi	r21, 0x00	; 0
    593e:	55 1f       	adc	r21, r21
    5940:	62 9f       	mul	r22, r18
    5942:	f0 01       	movw	r30, r0
    5944:	72 9f       	mul	r23, r18
    5946:	bb 27       	eor	r27, r27
    5948:	f0 0d       	add	r31, r0
    594a:	b1 1d       	adc	r27, r1
    594c:	63 9f       	mul	r22, r19
    594e:	aa 27       	eor	r26, r26
    5950:	f0 0d       	add	r31, r0
    5952:	b1 1d       	adc	r27, r1
    5954:	aa 1f       	adc	r26, r26
    5956:	64 9f       	mul	r22, r20
    5958:	66 27       	eor	r22, r22
    595a:	b0 0d       	add	r27, r0
    595c:	a1 1d       	adc	r26, r1
    595e:	66 1f       	adc	r22, r22
    5960:	82 9f       	mul	r24, r18
    5962:	22 27       	eor	r18, r18
    5964:	b0 0d       	add	r27, r0
    5966:	a1 1d       	adc	r26, r1
    5968:	62 1f       	adc	r22, r18
    596a:	73 9f       	mul	r23, r19
    596c:	b0 0d       	add	r27, r0
    596e:	a1 1d       	adc	r26, r1
    5970:	62 1f       	adc	r22, r18
    5972:	83 9f       	mul	r24, r19
    5974:	a0 0d       	add	r26, r0
    5976:	61 1d       	adc	r22, r1
    5978:	22 1f       	adc	r18, r18
    597a:	74 9f       	mul	r23, r20
    597c:	33 27       	eor	r19, r19
    597e:	a0 0d       	add	r26, r0
    5980:	61 1d       	adc	r22, r1
    5982:	23 1f       	adc	r18, r19
    5984:	84 9f       	mul	r24, r20
    5986:	60 0d       	add	r22, r0
    5988:	21 1d       	adc	r18, r1
    598a:	82 2f       	mov	r24, r18
    598c:	76 2f       	mov	r23, r22
    598e:	6a 2f       	mov	r22, r26
    5990:	11 24       	eor	r1, r1
    5992:	9f 57       	subi	r25, 0x7F	; 127
    5994:	50 40       	sbci	r21, 0x00	; 0
    5996:	92 f0       	brmi	.+36     	; 0x59bc <__mulsf3_pse+0x86>
    5998:	e9 f0       	breq	.+58     	; 0x59d4 <__mulsf3_pse+0x9e>
    599a:	88 23       	and	r24, r24
    599c:	4a f0       	brmi	.+18     	; 0x59b0 <__mulsf3_pse+0x7a>
    599e:	ee 0f       	add	r30, r30
    59a0:	ff 1f       	adc	r31, r31
    59a2:	bb 1f       	adc	r27, r27
    59a4:	66 1f       	adc	r22, r22
    59a6:	77 1f       	adc	r23, r23
    59a8:	88 1f       	adc	r24, r24
    59aa:	91 50       	subi	r25, 0x01	; 1
    59ac:	50 40       	sbci	r21, 0x00	; 0
    59ae:	a9 f7       	brne	.-22     	; 0x599a <__mulsf3_pse+0x64>
    59b0:	9e 3f       	cpi	r25, 0xFE	; 254
    59b2:	51 05       	cpc	r21, r1
    59b4:	78 f0       	brcs	.+30     	; 0x59d4 <__mulsf3_pse+0x9e>
    59b6:	87 cf       	rjmp	.-242    	; 0x58c6 <__fp_inf>
    59b8:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__fp_szero>
    59bc:	5f 3f       	cpi	r21, 0xFF	; 255
    59be:	e4 f3       	brlt	.-8      	; 0x59b8 <__mulsf3_pse+0x82>
    59c0:	98 3e       	cpi	r25, 0xE8	; 232
    59c2:	d4 f3       	brlt	.-12     	; 0x59b8 <__mulsf3_pse+0x82>
    59c4:	86 95       	lsr	r24
    59c6:	77 95       	ror	r23
    59c8:	67 95       	ror	r22
    59ca:	b7 95       	ror	r27
    59cc:	f7 95       	ror	r31
    59ce:	e7 95       	ror	r30
    59d0:	9f 5f       	subi	r25, 0xFF	; 255
    59d2:	c1 f7       	brne	.-16     	; 0x59c4 <__mulsf3_pse+0x8e>
    59d4:	fe 2b       	or	r31, r30
    59d6:	88 0f       	add	r24, r24
    59d8:	91 1d       	adc	r25, r1
    59da:	96 95       	lsr	r25
    59dc:	87 95       	ror	r24
    59de:	97 f9       	bld	r25, 7
    59e0:	08 95       	ret

000059e2 <__udivmodhi4>:
    59e2:	aa 1b       	sub	r26, r26
    59e4:	bb 1b       	sub	r27, r27
    59e6:	51 e1       	ldi	r21, 0x11	; 17
    59e8:	07 c0       	rjmp	.+14     	; 0x59f8 <__udivmodhi4_ep>

000059ea <__udivmodhi4_loop>:
    59ea:	aa 1f       	adc	r26, r26
    59ec:	bb 1f       	adc	r27, r27
    59ee:	a6 17       	cp	r26, r22
    59f0:	b7 07       	cpc	r27, r23
    59f2:	10 f0       	brcs	.+4      	; 0x59f8 <__udivmodhi4_ep>
    59f4:	a6 1b       	sub	r26, r22
    59f6:	b7 0b       	sbc	r27, r23

000059f8 <__udivmodhi4_ep>:
    59f8:	88 1f       	adc	r24, r24
    59fa:	99 1f       	adc	r25, r25
    59fc:	5a 95       	dec	r21
    59fe:	a9 f7       	brne	.-22     	; 0x59ea <__udivmodhi4_loop>
    5a00:	80 95       	com	r24
    5a02:	90 95       	com	r25
    5a04:	bc 01       	movw	r22, r24
    5a06:	cd 01       	movw	r24, r26
    5a08:	08 95       	ret

00005a0a <__divmodhi4>:
    5a0a:	97 fb       	bst	r25, 7
    5a0c:	07 2e       	mov	r0, r23
    5a0e:	16 f4       	brtc	.+4      	; 0x5a14 <__divmodhi4+0xa>
    5a10:	00 94       	com	r0
    5a12:	06 d0       	rcall	.+12     	; 0x5a20 <__divmodhi4_neg1>
    5a14:	77 fd       	sbrc	r23, 7
    5a16:	08 d0       	rcall	.+16     	; 0x5a28 <__divmodhi4_neg2>
    5a18:	e4 df       	rcall	.-56     	; 0x59e2 <__udivmodhi4>
    5a1a:	07 fc       	sbrc	r0, 7
    5a1c:	05 d0       	rcall	.+10     	; 0x5a28 <__divmodhi4_neg2>
    5a1e:	3e f4       	brtc	.+14     	; 0x5a2e <__divmodhi4_exit>

00005a20 <__divmodhi4_neg1>:
    5a20:	90 95       	com	r25
    5a22:	81 95       	neg	r24
    5a24:	9f 4f       	sbci	r25, 0xFF	; 255
    5a26:	08 95       	ret

00005a28 <__divmodhi4_neg2>:
    5a28:	70 95       	com	r23
    5a2a:	61 95       	neg	r22
    5a2c:	7f 4f       	sbci	r23, 0xFF	; 255

00005a2e <__divmodhi4_exit>:
    5a2e:	08 95       	ret

00005a30 <__udivmodsi4>:
    5a30:	a1 e2       	ldi	r26, 0x21	; 33
    5a32:	1a 2e       	mov	r1, r26
    5a34:	aa 1b       	sub	r26, r26
    5a36:	bb 1b       	sub	r27, r27
    5a38:	fd 01       	movw	r30, r26
    5a3a:	0d c0       	rjmp	.+26     	; 0x5a56 <__udivmodsi4_ep>

00005a3c <__udivmodsi4_loop>:
    5a3c:	aa 1f       	adc	r26, r26
    5a3e:	bb 1f       	adc	r27, r27
    5a40:	ee 1f       	adc	r30, r30
    5a42:	ff 1f       	adc	r31, r31
    5a44:	a2 17       	cp	r26, r18
    5a46:	b3 07       	cpc	r27, r19
    5a48:	e4 07       	cpc	r30, r20
    5a4a:	f5 07       	cpc	r31, r21
    5a4c:	20 f0       	brcs	.+8      	; 0x5a56 <__udivmodsi4_ep>
    5a4e:	a2 1b       	sub	r26, r18
    5a50:	b3 0b       	sbc	r27, r19
    5a52:	e4 0b       	sbc	r30, r20
    5a54:	f5 0b       	sbc	r31, r21

00005a56 <__udivmodsi4_ep>:
    5a56:	66 1f       	adc	r22, r22
    5a58:	77 1f       	adc	r23, r23
    5a5a:	88 1f       	adc	r24, r24
    5a5c:	99 1f       	adc	r25, r25
    5a5e:	1a 94       	dec	r1
    5a60:	69 f7       	brne	.-38     	; 0x5a3c <__udivmodsi4_loop>
    5a62:	60 95       	com	r22
    5a64:	70 95       	com	r23
    5a66:	80 95       	com	r24
    5a68:	90 95       	com	r25
    5a6a:	9b 01       	movw	r18, r22
    5a6c:	ac 01       	movw	r20, r24
    5a6e:	bd 01       	movw	r22, r26
    5a70:	cf 01       	movw	r24, r30
    5a72:	08 95       	ret

00005a74 <__tablejump2__>:
    5a74:	ee 0f       	add	r30, r30
    5a76:	ff 1f       	adc	r31, r31
    5a78:	88 1f       	adc	r24, r24
    5a7a:	8b bf       	out	0x3b, r24	; 59
    5a7c:	07 90       	elpm	r0, Z+
    5a7e:	f6 91       	elpm	r31, Z
    5a80:	e0 2d       	mov	r30, r0
    5a82:	19 94       	eijmp

00005a84 <calloc>:
    5a84:	0f 93       	push	r16
    5a86:	1f 93       	push	r17
    5a88:	cf 93       	push	r28
    5a8a:	df 93       	push	r29
    5a8c:	86 9f       	mul	r24, r22
    5a8e:	80 01       	movw	r16, r0
    5a90:	87 9f       	mul	r24, r23
    5a92:	10 0d       	add	r17, r0
    5a94:	96 9f       	mul	r25, r22
    5a96:	10 0d       	add	r17, r0
    5a98:	11 24       	eor	r1, r1
    5a9a:	c8 01       	movw	r24, r16
    5a9c:	0d d0       	rcall	.+26     	; 0x5ab8 <malloc>
    5a9e:	ec 01       	movw	r28, r24
    5aa0:	00 97       	sbiw	r24, 0x00	; 0
    5aa2:	21 f0       	breq	.+8      	; 0x5aac <calloc+0x28>
    5aa4:	a8 01       	movw	r20, r16
    5aa6:	60 e0       	ldi	r22, 0x00	; 0
    5aa8:	70 e0       	ldi	r23, 0x00	; 0
    5aaa:	34 d1       	rcall	.+616    	; 0x5d14 <memset>
    5aac:	ce 01       	movw	r24, r28
    5aae:	df 91       	pop	r29
    5ab0:	cf 91       	pop	r28
    5ab2:	1f 91       	pop	r17
    5ab4:	0f 91       	pop	r16
    5ab6:	08 95       	ret

00005ab8 <malloc>:
    5ab8:	0f 93       	push	r16
    5aba:	1f 93       	push	r17
    5abc:	cf 93       	push	r28
    5abe:	df 93       	push	r29
    5ac0:	82 30       	cpi	r24, 0x02	; 2
    5ac2:	91 05       	cpc	r25, r1
    5ac4:	10 f4       	brcc	.+4      	; 0x5aca <malloc+0x12>
    5ac6:	82 e0       	ldi	r24, 0x02	; 2
    5ac8:	90 e0       	ldi	r25, 0x00	; 0
    5aca:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <__flp>
    5ace:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <__flp+0x1>
    5ad2:	20 e0       	ldi	r18, 0x00	; 0
    5ad4:	30 e0       	ldi	r19, 0x00	; 0
    5ad6:	a0 e0       	ldi	r26, 0x00	; 0
    5ad8:	b0 e0       	ldi	r27, 0x00	; 0
    5ada:	30 97       	sbiw	r30, 0x00	; 0
    5adc:	19 f1       	breq	.+70     	; 0x5b24 <malloc+0x6c>
    5ade:	40 81       	ld	r20, Z
    5ae0:	51 81       	ldd	r21, Z+1	; 0x01
    5ae2:	02 81       	ldd	r16, Z+2	; 0x02
    5ae4:	13 81       	ldd	r17, Z+3	; 0x03
    5ae6:	48 17       	cp	r20, r24
    5ae8:	59 07       	cpc	r21, r25
    5aea:	c8 f0       	brcs	.+50     	; 0x5b1e <malloc+0x66>
    5aec:	84 17       	cp	r24, r20
    5aee:	95 07       	cpc	r25, r21
    5af0:	69 f4       	brne	.+26     	; 0x5b0c <malloc+0x54>
    5af2:	10 97       	sbiw	r26, 0x00	; 0
    5af4:	31 f0       	breq	.+12     	; 0x5b02 <malloc+0x4a>
    5af6:	12 96       	adiw	r26, 0x02	; 2
    5af8:	0c 93       	st	X, r16
    5afa:	12 97       	sbiw	r26, 0x02	; 2
    5afc:	13 96       	adiw	r26, 0x03	; 3
    5afe:	1c 93       	st	X, r17
    5b00:	27 c0       	rjmp	.+78     	; 0x5b50 <malloc+0x98>
    5b02:	00 93 61 19 	sts	0x1961, r16	; 0x801961 <__flp>
    5b06:	10 93 62 19 	sts	0x1962, r17	; 0x801962 <__flp+0x1>
    5b0a:	22 c0       	rjmp	.+68     	; 0x5b50 <malloc+0x98>
    5b0c:	21 15       	cp	r18, r1
    5b0e:	31 05       	cpc	r19, r1
    5b10:	19 f0       	breq	.+6      	; 0x5b18 <malloc+0x60>
    5b12:	42 17       	cp	r20, r18
    5b14:	53 07       	cpc	r21, r19
    5b16:	18 f4       	brcc	.+6      	; 0x5b1e <malloc+0x66>
    5b18:	9a 01       	movw	r18, r20
    5b1a:	bd 01       	movw	r22, r26
    5b1c:	ef 01       	movw	r28, r30
    5b1e:	df 01       	movw	r26, r30
    5b20:	f8 01       	movw	r30, r16
    5b22:	db cf       	rjmp	.-74     	; 0x5ada <malloc+0x22>
    5b24:	21 15       	cp	r18, r1
    5b26:	31 05       	cpc	r19, r1
    5b28:	f9 f0       	breq	.+62     	; 0x5b68 <malloc+0xb0>
    5b2a:	28 1b       	sub	r18, r24
    5b2c:	39 0b       	sbc	r19, r25
    5b2e:	24 30       	cpi	r18, 0x04	; 4
    5b30:	31 05       	cpc	r19, r1
    5b32:	80 f4       	brcc	.+32     	; 0x5b54 <malloc+0x9c>
    5b34:	8a 81       	ldd	r24, Y+2	; 0x02
    5b36:	9b 81       	ldd	r25, Y+3	; 0x03
    5b38:	61 15       	cp	r22, r1
    5b3a:	71 05       	cpc	r23, r1
    5b3c:	21 f0       	breq	.+8      	; 0x5b46 <malloc+0x8e>
    5b3e:	fb 01       	movw	r30, r22
    5b40:	93 83       	std	Z+3, r25	; 0x03
    5b42:	82 83       	std	Z+2, r24	; 0x02
    5b44:	04 c0       	rjmp	.+8      	; 0x5b4e <malloc+0x96>
    5b46:	90 93 62 19 	sts	0x1962, r25	; 0x801962 <__flp+0x1>
    5b4a:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <__flp>
    5b4e:	fe 01       	movw	r30, r28
    5b50:	32 96       	adiw	r30, 0x02	; 2
    5b52:	44 c0       	rjmp	.+136    	; 0x5bdc <malloc+0x124>
    5b54:	fe 01       	movw	r30, r28
    5b56:	e2 0f       	add	r30, r18
    5b58:	f3 1f       	adc	r31, r19
    5b5a:	81 93       	st	Z+, r24
    5b5c:	91 93       	st	Z+, r25
    5b5e:	22 50       	subi	r18, 0x02	; 2
    5b60:	31 09       	sbc	r19, r1
    5b62:	39 83       	std	Y+1, r19	; 0x01
    5b64:	28 83       	st	Y, r18
    5b66:	3a c0       	rjmp	.+116    	; 0x5bdc <malloc+0x124>
    5b68:	20 91 5f 19 	lds	r18, 0x195F	; 0x80195f <__brkval>
    5b6c:	30 91 60 19 	lds	r19, 0x1960	; 0x801960 <__brkval+0x1>
    5b70:	23 2b       	or	r18, r19
    5b72:	41 f4       	brne	.+16     	; 0x5b84 <malloc+0xcc>
    5b74:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5b78:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5b7c:	30 93 60 19 	sts	0x1960, r19	; 0x801960 <__brkval+0x1>
    5b80:	20 93 5f 19 	sts	0x195F, r18	; 0x80195f <__brkval>
    5b84:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5b88:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5b8c:	21 15       	cp	r18, r1
    5b8e:	31 05       	cpc	r19, r1
    5b90:	41 f4       	brne	.+16     	; 0x5ba2 <malloc+0xea>
    5b92:	2d b7       	in	r18, 0x3d	; 61
    5b94:	3e b7       	in	r19, 0x3e	; 62
    5b96:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5b9a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5b9e:	24 1b       	sub	r18, r20
    5ba0:	35 0b       	sbc	r19, r21
    5ba2:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <__brkval>
    5ba6:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <__brkval+0x1>
    5baa:	e2 17       	cp	r30, r18
    5bac:	f3 07       	cpc	r31, r19
    5bae:	a0 f4       	brcc	.+40     	; 0x5bd8 <malloc+0x120>
    5bb0:	2e 1b       	sub	r18, r30
    5bb2:	3f 0b       	sbc	r19, r31
    5bb4:	28 17       	cp	r18, r24
    5bb6:	39 07       	cpc	r19, r25
    5bb8:	78 f0       	brcs	.+30     	; 0x5bd8 <malloc+0x120>
    5bba:	ac 01       	movw	r20, r24
    5bbc:	4e 5f       	subi	r20, 0xFE	; 254
    5bbe:	5f 4f       	sbci	r21, 0xFF	; 255
    5bc0:	24 17       	cp	r18, r20
    5bc2:	35 07       	cpc	r19, r21
    5bc4:	48 f0       	brcs	.+18     	; 0x5bd8 <malloc+0x120>
    5bc6:	4e 0f       	add	r20, r30
    5bc8:	5f 1f       	adc	r21, r31
    5bca:	50 93 60 19 	sts	0x1960, r21	; 0x801960 <__brkval+0x1>
    5bce:	40 93 5f 19 	sts	0x195F, r20	; 0x80195f <__brkval>
    5bd2:	81 93       	st	Z+, r24
    5bd4:	91 93       	st	Z+, r25
    5bd6:	02 c0       	rjmp	.+4      	; 0x5bdc <malloc+0x124>
    5bd8:	e0 e0       	ldi	r30, 0x00	; 0
    5bda:	f0 e0       	ldi	r31, 0x00	; 0
    5bdc:	cf 01       	movw	r24, r30
    5bde:	df 91       	pop	r29
    5be0:	cf 91       	pop	r28
    5be2:	1f 91       	pop	r17
    5be4:	0f 91       	pop	r16
    5be6:	08 95       	ret

00005be8 <free>:
    5be8:	cf 93       	push	r28
    5bea:	df 93       	push	r29
    5bec:	00 97       	sbiw	r24, 0x00	; 0
    5bee:	09 f4       	brne	.+2      	; 0x5bf2 <free+0xa>
    5bf0:	81 c0       	rjmp	.+258    	; 0x5cf4 <free+0x10c>
    5bf2:	fc 01       	movw	r30, r24
    5bf4:	32 97       	sbiw	r30, 0x02	; 2
    5bf6:	13 82       	std	Z+3, r1	; 0x03
    5bf8:	12 82       	std	Z+2, r1	; 0x02
    5bfa:	a0 91 61 19 	lds	r26, 0x1961	; 0x801961 <__flp>
    5bfe:	b0 91 62 19 	lds	r27, 0x1962	; 0x801962 <__flp+0x1>
    5c02:	10 97       	sbiw	r26, 0x00	; 0
    5c04:	81 f4       	brne	.+32     	; 0x5c26 <free+0x3e>
    5c06:	20 81       	ld	r18, Z
    5c08:	31 81       	ldd	r19, Z+1	; 0x01
    5c0a:	82 0f       	add	r24, r18
    5c0c:	93 1f       	adc	r25, r19
    5c0e:	20 91 5f 19 	lds	r18, 0x195F	; 0x80195f <__brkval>
    5c12:	30 91 60 19 	lds	r19, 0x1960	; 0x801960 <__brkval+0x1>
    5c16:	28 17       	cp	r18, r24
    5c18:	39 07       	cpc	r19, r25
    5c1a:	51 f5       	brne	.+84     	; 0x5c70 <free+0x88>
    5c1c:	f0 93 60 19 	sts	0x1960, r31	; 0x801960 <__brkval+0x1>
    5c20:	e0 93 5f 19 	sts	0x195F, r30	; 0x80195f <__brkval>
    5c24:	67 c0       	rjmp	.+206    	; 0x5cf4 <free+0x10c>
    5c26:	ed 01       	movw	r28, r26
    5c28:	20 e0       	ldi	r18, 0x00	; 0
    5c2a:	30 e0       	ldi	r19, 0x00	; 0
    5c2c:	ce 17       	cp	r28, r30
    5c2e:	df 07       	cpc	r29, r31
    5c30:	40 f4       	brcc	.+16     	; 0x5c42 <free+0x5a>
    5c32:	4a 81       	ldd	r20, Y+2	; 0x02
    5c34:	5b 81       	ldd	r21, Y+3	; 0x03
    5c36:	9e 01       	movw	r18, r28
    5c38:	41 15       	cp	r20, r1
    5c3a:	51 05       	cpc	r21, r1
    5c3c:	f1 f0       	breq	.+60     	; 0x5c7a <free+0x92>
    5c3e:	ea 01       	movw	r28, r20
    5c40:	f5 cf       	rjmp	.-22     	; 0x5c2c <free+0x44>
    5c42:	d3 83       	std	Z+3, r29	; 0x03
    5c44:	c2 83       	std	Z+2, r28	; 0x02
    5c46:	40 81       	ld	r20, Z
    5c48:	51 81       	ldd	r21, Z+1	; 0x01
    5c4a:	84 0f       	add	r24, r20
    5c4c:	95 1f       	adc	r25, r21
    5c4e:	c8 17       	cp	r28, r24
    5c50:	d9 07       	cpc	r29, r25
    5c52:	59 f4       	brne	.+22     	; 0x5c6a <free+0x82>
    5c54:	88 81       	ld	r24, Y
    5c56:	99 81       	ldd	r25, Y+1	; 0x01
    5c58:	84 0f       	add	r24, r20
    5c5a:	95 1f       	adc	r25, r21
    5c5c:	02 96       	adiw	r24, 0x02	; 2
    5c5e:	91 83       	std	Z+1, r25	; 0x01
    5c60:	80 83       	st	Z, r24
    5c62:	8a 81       	ldd	r24, Y+2	; 0x02
    5c64:	9b 81       	ldd	r25, Y+3	; 0x03
    5c66:	93 83       	std	Z+3, r25	; 0x03
    5c68:	82 83       	std	Z+2, r24	; 0x02
    5c6a:	21 15       	cp	r18, r1
    5c6c:	31 05       	cpc	r19, r1
    5c6e:	29 f4       	brne	.+10     	; 0x5c7a <free+0x92>
    5c70:	f0 93 62 19 	sts	0x1962, r31	; 0x801962 <__flp+0x1>
    5c74:	e0 93 61 19 	sts	0x1961, r30	; 0x801961 <__flp>
    5c78:	3d c0       	rjmp	.+122    	; 0x5cf4 <free+0x10c>
    5c7a:	e9 01       	movw	r28, r18
    5c7c:	fb 83       	std	Y+3, r31	; 0x03
    5c7e:	ea 83       	std	Y+2, r30	; 0x02
    5c80:	49 91       	ld	r20, Y+
    5c82:	59 91       	ld	r21, Y+
    5c84:	c4 0f       	add	r28, r20
    5c86:	d5 1f       	adc	r29, r21
    5c88:	ec 17       	cp	r30, r28
    5c8a:	fd 07       	cpc	r31, r29
    5c8c:	61 f4       	brne	.+24     	; 0x5ca6 <free+0xbe>
    5c8e:	80 81       	ld	r24, Z
    5c90:	91 81       	ldd	r25, Z+1	; 0x01
    5c92:	84 0f       	add	r24, r20
    5c94:	95 1f       	adc	r25, r21
    5c96:	02 96       	adiw	r24, 0x02	; 2
    5c98:	e9 01       	movw	r28, r18
    5c9a:	99 83       	std	Y+1, r25	; 0x01
    5c9c:	88 83       	st	Y, r24
    5c9e:	82 81       	ldd	r24, Z+2	; 0x02
    5ca0:	93 81       	ldd	r25, Z+3	; 0x03
    5ca2:	9b 83       	std	Y+3, r25	; 0x03
    5ca4:	8a 83       	std	Y+2, r24	; 0x02
    5ca6:	e0 e0       	ldi	r30, 0x00	; 0
    5ca8:	f0 e0       	ldi	r31, 0x00	; 0
    5caa:	12 96       	adiw	r26, 0x02	; 2
    5cac:	8d 91       	ld	r24, X+
    5cae:	9c 91       	ld	r25, X
    5cb0:	13 97       	sbiw	r26, 0x03	; 3
    5cb2:	00 97       	sbiw	r24, 0x00	; 0
    5cb4:	19 f0       	breq	.+6      	; 0x5cbc <free+0xd4>
    5cb6:	fd 01       	movw	r30, r26
    5cb8:	dc 01       	movw	r26, r24
    5cba:	f7 cf       	rjmp	.-18     	; 0x5caa <free+0xc2>
    5cbc:	8d 91       	ld	r24, X+
    5cbe:	9c 91       	ld	r25, X
    5cc0:	11 97       	sbiw	r26, 0x01	; 1
    5cc2:	9d 01       	movw	r18, r26
    5cc4:	2e 5f       	subi	r18, 0xFE	; 254
    5cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    5cc8:	82 0f       	add	r24, r18
    5cca:	93 1f       	adc	r25, r19
    5ccc:	20 91 5f 19 	lds	r18, 0x195F	; 0x80195f <__brkval>
    5cd0:	30 91 60 19 	lds	r19, 0x1960	; 0x801960 <__brkval+0x1>
    5cd4:	28 17       	cp	r18, r24
    5cd6:	39 07       	cpc	r19, r25
    5cd8:	69 f4       	brne	.+26     	; 0x5cf4 <free+0x10c>
    5cda:	30 97       	sbiw	r30, 0x00	; 0
    5cdc:	29 f4       	brne	.+10     	; 0x5ce8 <free+0x100>
    5cde:	10 92 62 19 	sts	0x1962, r1	; 0x801962 <__flp+0x1>
    5ce2:	10 92 61 19 	sts	0x1961, r1	; 0x801961 <__flp>
    5ce6:	02 c0       	rjmp	.+4      	; 0x5cec <free+0x104>
    5ce8:	13 82       	std	Z+3, r1	; 0x03
    5cea:	12 82       	std	Z+2, r1	; 0x02
    5cec:	b0 93 60 19 	sts	0x1960, r27	; 0x801960 <__brkval+0x1>
    5cf0:	a0 93 5f 19 	sts	0x195F, r26	; 0x80195f <__brkval>
    5cf4:	df 91       	pop	r29
    5cf6:	cf 91       	pop	r28
    5cf8:	08 95       	ret

00005cfa <abort>:
    5cfa:	81 e0       	ldi	r24, 0x01	; 1
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	f8 94       	cli
    5d00:	7d c3       	rjmp	.+1786   	; 0x63fc <_exit>

00005d02 <memcpy>:
    5d02:	fb 01       	movw	r30, r22
    5d04:	dc 01       	movw	r26, r24
    5d06:	02 c0       	rjmp	.+4      	; 0x5d0c <memcpy+0xa>
    5d08:	01 90       	ld	r0, Z+
    5d0a:	0d 92       	st	X+, r0
    5d0c:	41 50       	subi	r20, 0x01	; 1
    5d0e:	50 40       	sbci	r21, 0x00	; 0
    5d10:	d8 f7       	brcc	.-10     	; 0x5d08 <memcpy+0x6>
    5d12:	08 95       	ret

00005d14 <memset>:
    5d14:	dc 01       	movw	r26, r24
    5d16:	01 c0       	rjmp	.+2      	; 0x5d1a <memset+0x6>
    5d18:	6d 93       	st	X+, r22
    5d1a:	41 50       	subi	r20, 0x01	; 1
    5d1c:	50 40       	sbci	r21, 0x00	; 0
    5d1e:	e0 f7       	brcc	.-8      	; 0x5d18 <memset+0x4>
    5d20:	08 95       	ret

00005d22 <strcasestr>:
    5d22:	fb 01       	movw	r30, r22
    5d24:	51 91       	ld	r21, Z+
    5d26:	55 23       	and	r21, r21
    5d28:	b1 f0       	breq	.+44     	; 0x5d56 <strcasestr+0x34>
    5d2a:	bf 01       	movw	r22, r30
    5d2c:	dc 01       	movw	r26, r24
    5d2e:	05 2e       	mov	r0, r21
    5d30:	4d 91       	ld	r20, X+
    5d32:	44 23       	and	r20, r20
    5d34:	69 f0       	breq	.+26     	; 0x5d50 <strcasestr+0x2e>
    5d36:	10 d0       	rcall	.+32     	; 0x5d58 <strcasestr+0x36>
    5d38:	d9 f7       	brne	.-10     	; 0x5d30 <strcasestr+0xe>
    5d3a:	cd 01       	movw	r24, r26
    5d3c:	01 90       	ld	r0, Z+
    5d3e:	00 20       	and	r0, r0
    5d40:	49 f0       	breq	.+18     	; 0x5d54 <strcasestr+0x32>
    5d42:	4d 91       	ld	r20, X+
    5d44:	41 11       	cpse	r20, r1
    5d46:	08 d0       	rcall	.+16     	; 0x5d58 <strcasestr+0x36>
    5d48:	c9 f3       	breq	.-14     	; 0x5d3c <strcasestr+0x1a>
    5d4a:	fb 01       	movw	r30, r22
    5d4c:	41 11       	cpse	r20, r1
    5d4e:	ee cf       	rjmp	.-36     	; 0x5d2c <strcasestr+0xa>
    5d50:	81 e0       	ldi	r24, 0x01	; 1
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	01 97       	sbiw	r24, 0x01	; 1
    5d56:	08 95       	ret
    5d58:	40 25       	eor	r20, r0
    5d5a:	39 f0       	breq	.+14     	; 0x5d6a <strcasestr+0x48>
    5d5c:	40 32       	cpi	r20, 0x20	; 32
    5d5e:	29 f4       	brne	.+10     	; 0x5d6a <strcasestr+0x48>
    5d60:	40 29       	or	r20, r0
    5d62:	4b 57       	subi	r20, 0x7B	; 123
    5d64:	46 5e       	subi	r20, 0xE6	; 230
    5d66:	08 f0       	brcs	.+2      	; 0x5d6a <strcasestr+0x48>
    5d68:	18 94       	sez
    5d6a:	08 95       	ret

00005d6c <strcat>:
    5d6c:	fb 01       	movw	r30, r22
    5d6e:	dc 01       	movw	r26, r24
    5d70:	0d 90       	ld	r0, X+
    5d72:	00 20       	and	r0, r0
    5d74:	e9 f7       	brne	.-6      	; 0x5d70 <strcat+0x4>
    5d76:	11 97       	sbiw	r26, 0x01	; 1
    5d78:	01 90       	ld	r0, Z+
    5d7a:	0d 92       	st	X+, r0
    5d7c:	00 20       	and	r0, r0
    5d7e:	e1 f7       	brne	.-8      	; 0x5d78 <strcat+0xc>
    5d80:	08 95       	ret

00005d82 <strcpy>:
    5d82:	fb 01       	movw	r30, r22
    5d84:	dc 01       	movw	r26, r24
    5d86:	01 90       	ld	r0, Z+
    5d88:	0d 92       	st	X+, r0
    5d8a:	00 20       	and	r0, r0
    5d8c:	e1 f7       	brne	.-8      	; 0x5d86 <strcpy+0x4>
    5d8e:	08 95       	ret

00005d90 <strncasecmp>:
    5d90:	fb 01       	movw	r30, r22
    5d92:	dc 01       	movw	r26, r24
    5d94:	41 50       	subi	r20, 0x01	; 1
    5d96:	50 40       	sbci	r21, 0x00	; 0
    5d98:	88 f0       	brcs	.+34     	; 0x5dbc <strncasecmp+0x2c>
    5d9a:	8d 91       	ld	r24, X+
    5d9c:	81 34       	cpi	r24, 0x41	; 65
    5d9e:	1c f0       	brlt	.+6      	; 0x5da6 <strncasecmp+0x16>
    5da0:	8b 35       	cpi	r24, 0x5B	; 91
    5da2:	0c f4       	brge	.+2      	; 0x5da6 <strncasecmp+0x16>
    5da4:	80 5e       	subi	r24, 0xE0	; 224
    5da6:	61 91       	ld	r22, Z+
    5da8:	61 34       	cpi	r22, 0x41	; 65
    5daa:	1c f0       	brlt	.+6      	; 0x5db2 <strncasecmp+0x22>
    5dac:	6b 35       	cpi	r22, 0x5B	; 91
    5dae:	0c f4       	brge	.+2      	; 0x5db2 <strncasecmp+0x22>
    5db0:	60 5e       	subi	r22, 0xE0	; 224
    5db2:	86 1b       	sub	r24, r22
    5db4:	61 11       	cpse	r22, r1
    5db6:	71 f3       	breq	.-36     	; 0x5d94 <strncasecmp+0x4>
    5db8:	99 0b       	sbc	r25, r25
    5dba:	08 95       	ret
    5dbc:	88 1b       	sub	r24, r24
    5dbe:	fc cf       	rjmp	.-8      	; 0x5db8 <strncasecmp+0x28>

00005dc0 <printf>:
    5dc0:	cf 93       	push	r28
    5dc2:	df 93       	push	r29
    5dc4:	cd b7       	in	r28, 0x3d	; 61
    5dc6:	de b7       	in	r29, 0x3e	; 62
    5dc8:	ae 01       	movw	r20, r28
    5dca:	4a 5f       	subi	r20, 0xFA	; 250
    5dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    5dce:	fa 01       	movw	r30, r20
    5dd0:	61 91       	ld	r22, Z+
    5dd2:	71 91       	ld	r23, Z+
    5dd4:	af 01       	movw	r20, r30
    5dd6:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <__iob+0x2>
    5dda:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <__iob+0x3>
    5dde:	61 d0       	rcall	.+194    	; 0x5ea2 <vfprintf>
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	08 95       	ret

00005de6 <puts>:
    5de6:	0f 93       	push	r16
    5de8:	1f 93       	push	r17
    5dea:	cf 93       	push	r28
    5dec:	df 93       	push	r29
    5dee:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <__iob+0x2>
    5df2:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <__iob+0x3>
    5df6:	23 81       	ldd	r18, Z+3	; 0x03
    5df8:	21 ff       	sbrs	r18, 1
    5dfa:	1b c0       	rjmp	.+54     	; 0x5e32 <puts+0x4c>
    5dfc:	8c 01       	movw	r16, r24
    5dfe:	d0 e0       	ldi	r29, 0x00	; 0
    5e00:	c0 e0       	ldi	r28, 0x00	; 0
    5e02:	f8 01       	movw	r30, r16
    5e04:	81 91       	ld	r24, Z+
    5e06:	8f 01       	movw	r16, r30
    5e08:	60 91 65 19 	lds	r22, 0x1965	; 0x801965 <__iob+0x2>
    5e0c:	70 91 66 19 	lds	r23, 0x1966	; 0x801966 <__iob+0x3>
    5e10:	db 01       	movw	r26, r22
    5e12:	18 96       	adiw	r26, 0x08	; 8
    5e14:	ed 91       	ld	r30, X+
    5e16:	fc 91       	ld	r31, X
    5e18:	19 97       	sbiw	r26, 0x09	; 9
    5e1a:	88 23       	and	r24, r24
    5e1c:	31 f0       	breq	.+12     	; 0x5e2a <puts+0x44>
    5e1e:	19 95       	eicall
    5e20:	89 2b       	or	r24, r25
    5e22:	79 f3       	breq	.-34     	; 0x5e02 <puts+0x1c>
    5e24:	df ef       	ldi	r29, 0xFF	; 255
    5e26:	cf ef       	ldi	r28, 0xFF	; 255
    5e28:	ec cf       	rjmp	.-40     	; 0x5e02 <puts+0x1c>
    5e2a:	8a e0       	ldi	r24, 0x0A	; 10
    5e2c:	19 95       	eicall
    5e2e:	89 2b       	or	r24, r25
    5e30:	19 f0       	breq	.+6      	; 0x5e38 <puts+0x52>
    5e32:	8f ef       	ldi	r24, 0xFF	; 255
    5e34:	9f ef       	ldi	r25, 0xFF	; 255
    5e36:	02 c0       	rjmp	.+4      	; 0x5e3c <puts+0x56>
    5e38:	8d 2f       	mov	r24, r29
    5e3a:	9c 2f       	mov	r25, r28
    5e3c:	df 91       	pop	r29
    5e3e:	cf 91       	pop	r28
    5e40:	1f 91       	pop	r17
    5e42:	0f 91       	pop	r16
    5e44:	08 95       	ret

00005e46 <sprintf>:
    5e46:	0f 93       	push	r16
    5e48:	1f 93       	push	r17
    5e4a:	cf 93       	push	r28
    5e4c:	df 93       	push	r29
    5e4e:	cd b7       	in	r28, 0x3d	; 61
    5e50:	de b7       	in	r29, 0x3e	; 62
    5e52:	2e 97       	sbiw	r28, 0x0e	; 14
    5e54:	0f b6       	in	r0, 0x3f	; 63
    5e56:	f8 94       	cli
    5e58:	de bf       	out	0x3e, r29	; 62
    5e5a:	0f be       	out	0x3f, r0	; 63
    5e5c:	cd bf       	out	0x3d, r28	; 61
    5e5e:	0e 89       	ldd	r16, Y+22	; 0x16
    5e60:	1f 89       	ldd	r17, Y+23	; 0x17
    5e62:	86 e0       	ldi	r24, 0x06	; 6
    5e64:	8c 83       	std	Y+4, r24	; 0x04
    5e66:	1a 83       	std	Y+2, r17	; 0x02
    5e68:	09 83       	std	Y+1, r16	; 0x01
    5e6a:	8f ef       	ldi	r24, 0xFF	; 255
    5e6c:	9f e7       	ldi	r25, 0x7F	; 127
    5e6e:	9e 83       	std	Y+6, r25	; 0x06
    5e70:	8d 83       	std	Y+5, r24	; 0x05
    5e72:	ae 01       	movw	r20, r28
    5e74:	46 5e       	subi	r20, 0xE6	; 230
    5e76:	5f 4f       	sbci	r21, 0xFF	; 255
    5e78:	68 8d       	ldd	r22, Y+24	; 0x18
    5e7a:	79 8d       	ldd	r23, Y+25	; 0x19
    5e7c:	ce 01       	movw	r24, r28
    5e7e:	01 96       	adiw	r24, 0x01	; 1
    5e80:	10 d0       	rcall	.+32     	; 0x5ea2 <vfprintf>
    5e82:	ef 81       	ldd	r30, Y+7	; 0x07
    5e84:	f8 85       	ldd	r31, Y+8	; 0x08
    5e86:	e0 0f       	add	r30, r16
    5e88:	f1 1f       	adc	r31, r17
    5e8a:	10 82       	st	Z, r1
    5e8c:	2e 96       	adiw	r28, 0x0e	; 14
    5e8e:	0f b6       	in	r0, 0x3f	; 63
    5e90:	f8 94       	cli
    5e92:	de bf       	out	0x3e, r29	; 62
    5e94:	0f be       	out	0x3f, r0	; 63
    5e96:	cd bf       	out	0x3d, r28	; 61
    5e98:	df 91       	pop	r29
    5e9a:	cf 91       	pop	r28
    5e9c:	1f 91       	pop	r17
    5e9e:	0f 91       	pop	r16
    5ea0:	08 95       	ret

00005ea2 <vfprintf>:
    5ea2:	2f 92       	push	r2
    5ea4:	3f 92       	push	r3
    5ea6:	4f 92       	push	r4
    5ea8:	5f 92       	push	r5
    5eaa:	6f 92       	push	r6
    5eac:	7f 92       	push	r7
    5eae:	8f 92       	push	r8
    5eb0:	9f 92       	push	r9
    5eb2:	af 92       	push	r10
    5eb4:	bf 92       	push	r11
    5eb6:	cf 92       	push	r12
    5eb8:	df 92       	push	r13
    5eba:	ef 92       	push	r14
    5ebc:	ff 92       	push	r15
    5ebe:	0f 93       	push	r16
    5ec0:	1f 93       	push	r17
    5ec2:	cf 93       	push	r28
    5ec4:	df 93       	push	r29
    5ec6:	cd b7       	in	r28, 0x3d	; 61
    5ec8:	de b7       	in	r29, 0x3e	; 62
    5eca:	2b 97       	sbiw	r28, 0x0b	; 11
    5ecc:	0f b6       	in	r0, 0x3f	; 63
    5ece:	f8 94       	cli
    5ed0:	de bf       	out	0x3e, r29	; 62
    5ed2:	0f be       	out	0x3f, r0	; 63
    5ed4:	cd bf       	out	0x3d, r28	; 61
    5ed6:	6c 01       	movw	r12, r24
    5ed8:	7b 01       	movw	r14, r22
    5eda:	8a 01       	movw	r16, r20
    5edc:	fc 01       	movw	r30, r24
    5ede:	17 82       	std	Z+7, r1	; 0x07
    5ee0:	16 82       	std	Z+6, r1	; 0x06
    5ee2:	83 81       	ldd	r24, Z+3	; 0x03
    5ee4:	81 ff       	sbrs	r24, 1
    5ee6:	bf c1       	rjmp	.+894    	; 0x6266 <vfprintf+0x3c4>
    5ee8:	ce 01       	movw	r24, r28
    5eea:	01 96       	adiw	r24, 0x01	; 1
    5eec:	3c 01       	movw	r6, r24
    5eee:	f6 01       	movw	r30, r12
    5ef0:	93 81       	ldd	r25, Z+3	; 0x03
    5ef2:	f7 01       	movw	r30, r14
    5ef4:	93 fd       	sbrc	r25, 3
    5ef6:	85 91       	lpm	r24, Z+
    5ef8:	93 ff       	sbrs	r25, 3
    5efa:	81 91       	ld	r24, Z+
    5efc:	7f 01       	movw	r14, r30
    5efe:	88 23       	and	r24, r24
    5f00:	09 f4       	brne	.+2      	; 0x5f04 <vfprintf+0x62>
    5f02:	ad c1       	rjmp	.+858    	; 0x625e <vfprintf+0x3bc>
    5f04:	85 32       	cpi	r24, 0x25	; 37
    5f06:	39 f4       	brne	.+14     	; 0x5f16 <vfprintf+0x74>
    5f08:	93 fd       	sbrc	r25, 3
    5f0a:	85 91       	lpm	r24, Z+
    5f0c:	93 ff       	sbrs	r25, 3
    5f0e:	81 91       	ld	r24, Z+
    5f10:	7f 01       	movw	r14, r30
    5f12:	85 32       	cpi	r24, 0x25	; 37
    5f14:	21 f4       	brne	.+8      	; 0x5f1e <vfprintf+0x7c>
    5f16:	b6 01       	movw	r22, r12
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	d6 d1       	rcall	.+940    	; 0x62c8 <fputc>
    5f1c:	e8 cf       	rjmp	.-48     	; 0x5eee <vfprintf+0x4c>
    5f1e:	91 2c       	mov	r9, r1
    5f20:	21 2c       	mov	r2, r1
    5f22:	31 2c       	mov	r3, r1
    5f24:	ff e1       	ldi	r31, 0x1F	; 31
    5f26:	f3 15       	cp	r31, r3
    5f28:	d8 f0       	brcs	.+54     	; 0x5f60 <vfprintf+0xbe>
    5f2a:	8b 32       	cpi	r24, 0x2B	; 43
    5f2c:	79 f0       	breq	.+30     	; 0x5f4c <vfprintf+0xaa>
    5f2e:	38 f4       	brcc	.+14     	; 0x5f3e <vfprintf+0x9c>
    5f30:	80 32       	cpi	r24, 0x20	; 32
    5f32:	79 f0       	breq	.+30     	; 0x5f52 <vfprintf+0xb0>
    5f34:	83 32       	cpi	r24, 0x23	; 35
    5f36:	a1 f4       	brne	.+40     	; 0x5f60 <vfprintf+0xbe>
    5f38:	23 2d       	mov	r18, r3
    5f3a:	20 61       	ori	r18, 0x10	; 16
    5f3c:	1d c0       	rjmp	.+58     	; 0x5f78 <vfprintf+0xd6>
    5f3e:	8d 32       	cpi	r24, 0x2D	; 45
    5f40:	61 f0       	breq	.+24     	; 0x5f5a <vfprintf+0xb8>
    5f42:	80 33       	cpi	r24, 0x30	; 48
    5f44:	69 f4       	brne	.+26     	; 0x5f60 <vfprintf+0xbe>
    5f46:	23 2d       	mov	r18, r3
    5f48:	21 60       	ori	r18, 0x01	; 1
    5f4a:	16 c0       	rjmp	.+44     	; 0x5f78 <vfprintf+0xd6>
    5f4c:	83 2d       	mov	r24, r3
    5f4e:	82 60       	ori	r24, 0x02	; 2
    5f50:	38 2e       	mov	r3, r24
    5f52:	e3 2d       	mov	r30, r3
    5f54:	e4 60       	ori	r30, 0x04	; 4
    5f56:	3e 2e       	mov	r3, r30
    5f58:	2a c0       	rjmp	.+84     	; 0x5fae <vfprintf+0x10c>
    5f5a:	f3 2d       	mov	r31, r3
    5f5c:	f8 60       	ori	r31, 0x08	; 8
    5f5e:	1d c0       	rjmp	.+58     	; 0x5f9a <vfprintf+0xf8>
    5f60:	37 fc       	sbrc	r3, 7
    5f62:	2d c0       	rjmp	.+90     	; 0x5fbe <vfprintf+0x11c>
    5f64:	20 ed       	ldi	r18, 0xD0	; 208
    5f66:	28 0f       	add	r18, r24
    5f68:	2a 30       	cpi	r18, 0x0A	; 10
    5f6a:	40 f0       	brcs	.+16     	; 0x5f7c <vfprintf+0xda>
    5f6c:	8e 32       	cpi	r24, 0x2E	; 46
    5f6e:	b9 f4       	brne	.+46     	; 0x5f9e <vfprintf+0xfc>
    5f70:	36 fc       	sbrc	r3, 6
    5f72:	75 c1       	rjmp	.+746    	; 0x625e <vfprintf+0x3bc>
    5f74:	23 2d       	mov	r18, r3
    5f76:	20 64       	ori	r18, 0x40	; 64
    5f78:	32 2e       	mov	r3, r18
    5f7a:	19 c0       	rjmp	.+50     	; 0x5fae <vfprintf+0x10c>
    5f7c:	36 fe       	sbrs	r3, 6
    5f7e:	06 c0       	rjmp	.+12     	; 0x5f8c <vfprintf+0xea>
    5f80:	8a e0       	ldi	r24, 0x0A	; 10
    5f82:	98 9e       	mul	r9, r24
    5f84:	20 0d       	add	r18, r0
    5f86:	11 24       	eor	r1, r1
    5f88:	92 2e       	mov	r9, r18
    5f8a:	11 c0       	rjmp	.+34     	; 0x5fae <vfprintf+0x10c>
    5f8c:	ea e0       	ldi	r30, 0x0A	; 10
    5f8e:	2e 9e       	mul	r2, r30
    5f90:	20 0d       	add	r18, r0
    5f92:	11 24       	eor	r1, r1
    5f94:	22 2e       	mov	r2, r18
    5f96:	f3 2d       	mov	r31, r3
    5f98:	f0 62       	ori	r31, 0x20	; 32
    5f9a:	3f 2e       	mov	r3, r31
    5f9c:	08 c0       	rjmp	.+16     	; 0x5fae <vfprintf+0x10c>
    5f9e:	8c 36       	cpi	r24, 0x6C	; 108
    5fa0:	21 f4       	brne	.+8      	; 0x5faa <vfprintf+0x108>
    5fa2:	83 2d       	mov	r24, r3
    5fa4:	80 68       	ori	r24, 0x80	; 128
    5fa6:	38 2e       	mov	r3, r24
    5fa8:	02 c0       	rjmp	.+4      	; 0x5fae <vfprintf+0x10c>
    5faa:	88 36       	cpi	r24, 0x68	; 104
    5fac:	41 f4       	brne	.+16     	; 0x5fbe <vfprintf+0x11c>
    5fae:	f7 01       	movw	r30, r14
    5fb0:	93 fd       	sbrc	r25, 3
    5fb2:	85 91       	lpm	r24, Z+
    5fb4:	93 ff       	sbrs	r25, 3
    5fb6:	81 91       	ld	r24, Z+
    5fb8:	7f 01       	movw	r14, r30
    5fba:	81 11       	cpse	r24, r1
    5fbc:	b3 cf       	rjmp	.-154    	; 0x5f24 <vfprintf+0x82>
    5fbe:	98 2f       	mov	r25, r24
    5fc0:	9f 7d       	andi	r25, 0xDF	; 223
    5fc2:	95 54       	subi	r25, 0x45	; 69
    5fc4:	93 30       	cpi	r25, 0x03	; 3
    5fc6:	28 f4       	brcc	.+10     	; 0x5fd2 <vfprintf+0x130>
    5fc8:	0c 5f       	subi	r16, 0xFC	; 252
    5fca:	1f 4f       	sbci	r17, 0xFF	; 255
    5fcc:	9f e3       	ldi	r25, 0x3F	; 63
    5fce:	99 83       	std	Y+1, r25	; 0x01
    5fd0:	0d c0       	rjmp	.+26     	; 0x5fec <vfprintf+0x14a>
    5fd2:	83 36       	cpi	r24, 0x63	; 99
    5fd4:	31 f0       	breq	.+12     	; 0x5fe2 <vfprintf+0x140>
    5fd6:	83 37       	cpi	r24, 0x73	; 115
    5fd8:	71 f0       	breq	.+28     	; 0x5ff6 <vfprintf+0x154>
    5fda:	83 35       	cpi	r24, 0x53	; 83
    5fdc:	09 f0       	breq	.+2      	; 0x5fe0 <vfprintf+0x13e>
    5fde:	55 c0       	rjmp	.+170    	; 0x608a <vfprintf+0x1e8>
    5fe0:	20 c0       	rjmp	.+64     	; 0x6022 <vfprintf+0x180>
    5fe2:	f8 01       	movw	r30, r16
    5fe4:	80 81       	ld	r24, Z
    5fe6:	89 83       	std	Y+1, r24	; 0x01
    5fe8:	0e 5f       	subi	r16, 0xFE	; 254
    5fea:	1f 4f       	sbci	r17, 0xFF	; 255
    5fec:	88 24       	eor	r8, r8
    5fee:	83 94       	inc	r8
    5ff0:	91 2c       	mov	r9, r1
    5ff2:	53 01       	movw	r10, r6
    5ff4:	12 c0       	rjmp	.+36     	; 0x601a <vfprintf+0x178>
    5ff6:	28 01       	movw	r4, r16
    5ff8:	f2 e0       	ldi	r31, 0x02	; 2
    5ffa:	4f 0e       	add	r4, r31
    5ffc:	51 1c       	adc	r5, r1
    5ffe:	f8 01       	movw	r30, r16
    6000:	a0 80       	ld	r10, Z
    6002:	b1 80       	ldd	r11, Z+1	; 0x01
    6004:	36 fe       	sbrs	r3, 6
    6006:	03 c0       	rjmp	.+6      	; 0x600e <vfprintf+0x16c>
    6008:	69 2d       	mov	r22, r9
    600a:	70 e0       	ldi	r23, 0x00	; 0
    600c:	02 c0       	rjmp	.+4      	; 0x6012 <vfprintf+0x170>
    600e:	6f ef       	ldi	r22, 0xFF	; 255
    6010:	7f ef       	ldi	r23, 0xFF	; 255
    6012:	c5 01       	movw	r24, r10
    6014:	4e d1       	rcall	.+668    	; 0x62b2 <strnlen>
    6016:	4c 01       	movw	r8, r24
    6018:	82 01       	movw	r16, r4
    601a:	f3 2d       	mov	r31, r3
    601c:	ff 77       	andi	r31, 0x7F	; 127
    601e:	3f 2e       	mov	r3, r31
    6020:	15 c0       	rjmp	.+42     	; 0x604c <vfprintf+0x1aa>
    6022:	28 01       	movw	r4, r16
    6024:	22 e0       	ldi	r18, 0x02	; 2
    6026:	42 0e       	add	r4, r18
    6028:	51 1c       	adc	r5, r1
    602a:	f8 01       	movw	r30, r16
    602c:	a0 80       	ld	r10, Z
    602e:	b1 80       	ldd	r11, Z+1	; 0x01
    6030:	36 fe       	sbrs	r3, 6
    6032:	03 c0       	rjmp	.+6      	; 0x603a <vfprintf+0x198>
    6034:	69 2d       	mov	r22, r9
    6036:	70 e0       	ldi	r23, 0x00	; 0
    6038:	02 c0       	rjmp	.+4      	; 0x603e <vfprintf+0x19c>
    603a:	6f ef       	ldi	r22, 0xFF	; 255
    603c:	7f ef       	ldi	r23, 0xFF	; 255
    603e:	c5 01       	movw	r24, r10
    6040:	2d d1       	rcall	.+602    	; 0x629c <strnlen_P>
    6042:	4c 01       	movw	r8, r24
    6044:	f3 2d       	mov	r31, r3
    6046:	f0 68       	ori	r31, 0x80	; 128
    6048:	3f 2e       	mov	r3, r31
    604a:	82 01       	movw	r16, r4
    604c:	33 fc       	sbrc	r3, 3
    604e:	19 c0       	rjmp	.+50     	; 0x6082 <vfprintf+0x1e0>
    6050:	82 2d       	mov	r24, r2
    6052:	90 e0       	ldi	r25, 0x00	; 0
    6054:	88 16       	cp	r8, r24
    6056:	99 06       	cpc	r9, r25
    6058:	a0 f4       	brcc	.+40     	; 0x6082 <vfprintf+0x1e0>
    605a:	b6 01       	movw	r22, r12
    605c:	80 e2       	ldi	r24, 0x20	; 32
    605e:	90 e0       	ldi	r25, 0x00	; 0
    6060:	33 d1       	rcall	.+614    	; 0x62c8 <fputc>
    6062:	2a 94       	dec	r2
    6064:	f5 cf       	rjmp	.-22     	; 0x6050 <vfprintf+0x1ae>
    6066:	f5 01       	movw	r30, r10
    6068:	37 fc       	sbrc	r3, 7
    606a:	85 91       	lpm	r24, Z+
    606c:	37 fe       	sbrs	r3, 7
    606e:	81 91       	ld	r24, Z+
    6070:	5f 01       	movw	r10, r30
    6072:	b6 01       	movw	r22, r12
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	28 d1       	rcall	.+592    	; 0x62c8 <fputc>
    6078:	21 10       	cpse	r2, r1
    607a:	2a 94       	dec	r2
    607c:	21 e0       	ldi	r18, 0x01	; 1
    607e:	82 1a       	sub	r8, r18
    6080:	91 08       	sbc	r9, r1
    6082:	81 14       	cp	r8, r1
    6084:	91 04       	cpc	r9, r1
    6086:	79 f7       	brne	.-34     	; 0x6066 <vfprintf+0x1c4>
    6088:	e1 c0       	rjmp	.+450    	; 0x624c <vfprintf+0x3aa>
    608a:	84 36       	cpi	r24, 0x64	; 100
    608c:	11 f0       	breq	.+4      	; 0x6092 <vfprintf+0x1f0>
    608e:	89 36       	cpi	r24, 0x69	; 105
    6090:	39 f5       	brne	.+78     	; 0x60e0 <vfprintf+0x23e>
    6092:	f8 01       	movw	r30, r16
    6094:	37 fe       	sbrs	r3, 7
    6096:	07 c0       	rjmp	.+14     	; 0x60a6 <vfprintf+0x204>
    6098:	60 81       	ld	r22, Z
    609a:	71 81       	ldd	r23, Z+1	; 0x01
    609c:	82 81       	ldd	r24, Z+2	; 0x02
    609e:	93 81       	ldd	r25, Z+3	; 0x03
    60a0:	0c 5f       	subi	r16, 0xFC	; 252
    60a2:	1f 4f       	sbci	r17, 0xFF	; 255
    60a4:	08 c0       	rjmp	.+16     	; 0x60b6 <vfprintf+0x214>
    60a6:	60 81       	ld	r22, Z
    60a8:	71 81       	ldd	r23, Z+1	; 0x01
    60aa:	07 2e       	mov	r0, r23
    60ac:	00 0c       	add	r0, r0
    60ae:	88 0b       	sbc	r24, r24
    60b0:	99 0b       	sbc	r25, r25
    60b2:	0e 5f       	subi	r16, 0xFE	; 254
    60b4:	1f 4f       	sbci	r17, 0xFF	; 255
    60b6:	f3 2d       	mov	r31, r3
    60b8:	ff 76       	andi	r31, 0x6F	; 111
    60ba:	3f 2e       	mov	r3, r31
    60bc:	97 ff       	sbrs	r25, 7
    60be:	09 c0       	rjmp	.+18     	; 0x60d2 <vfprintf+0x230>
    60c0:	90 95       	com	r25
    60c2:	80 95       	com	r24
    60c4:	70 95       	com	r23
    60c6:	61 95       	neg	r22
    60c8:	7f 4f       	sbci	r23, 0xFF	; 255
    60ca:	8f 4f       	sbci	r24, 0xFF	; 255
    60cc:	9f 4f       	sbci	r25, 0xFF	; 255
    60ce:	f0 68       	ori	r31, 0x80	; 128
    60d0:	3f 2e       	mov	r3, r31
    60d2:	2a e0       	ldi	r18, 0x0A	; 10
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	a3 01       	movw	r20, r6
    60d8:	33 d1       	rcall	.+614    	; 0x6340 <__ultoa_invert>
    60da:	88 2e       	mov	r8, r24
    60dc:	86 18       	sub	r8, r6
    60de:	44 c0       	rjmp	.+136    	; 0x6168 <vfprintf+0x2c6>
    60e0:	85 37       	cpi	r24, 0x75	; 117
    60e2:	31 f4       	brne	.+12     	; 0x60f0 <vfprintf+0x24e>
    60e4:	23 2d       	mov	r18, r3
    60e6:	2f 7e       	andi	r18, 0xEF	; 239
    60e8:	b2 2e       	mov	r11, r18
    60ea:	2a e0       	ldi	r18, 0x0A	; 10
    60ec:	30 e0       	ldi	r19, 0x00	; 0
    60ee:	25 c0       	rjmp	.+74     	; 0x613a <vfprintf+0x298>
    60f0:	93 2d       	mov	r25, r3
    60f2:	99 7f       	andi	r25, 0xF9	; 249
    60f4:	b9 2e       	mov	r11, r25
    60f6:	8f 36       	cpi	r24, 0x6F	; 111
    60f8:	c1 f0       	breq	.+48     	; 0x612a <vfprintf+0x288>
    60fa:	18 f4       	brcc	.+6      	; 0x6102 <vfprintf+0x260>
    60fc:	88 35       	cpi	r24, 0x58	; 88
    60fe:	79 f0       	breq	.+30     	; 0x611e <vfprintf+0x27c>
    6100:	ae c0       	rjmp	.+348    	; 0x625e <vfprintf+0x3bc>
    6102:	80 37       	cpi	r24, 0x70	; 112
    6104:	19 f0       	breq	.+6      	; 0x610c <vfprintf+0x26a>
    6106:	88 37       	cpi	r24, 0x78	; 120
    6108:	21 f0       	breq	.+8      	; 0x6112 <vfprintf+0x270>
    610a:	a9 c0       	rjmp	.+338    	; 0x625e <vfprintf+0x3bc>
    610c:	e9 2f       	mov	r30, r25
    610e:	e0 61       	ori	r30, 0x10	; 16
    6110:	be 2e       	mov	r11, r30
    6112:	b4 fe       	sbrs	r11, 4
    6114:	0d c0       	rjmp	.+26     	; 0x6130 <vfprintf+0x28e>
    6116:	fb 2d       	mov	r31, r11
    6118:	f4 60       	ori	r31, 0x04	; 4
    611a:	bf 2e       	mov	r11, r31
    611c:	09 c0       	rjmp	.+18     	; 0x6130 <vfprintf+0x28e>
    611e:	34 fe       	sbrs	r3, 4
    6120:	0a c0       	rjmp	.+20     	; 0x6136 <vfprintf+0x294>
    6122:	29 2f       	mov	r18, r25
    6124:	26 60       	ori	r18, 0x06	; 6
    6126:	b2 2e       	mov	r11, r18
    6128:	06 c0       	rjmp	.+12     	; 0x6136 <vfprintf+0x294>
    612a:	28 e0       	ldi	r18, 0x08	; 8
    612c:	30 e0       	ldi	r19, 0x00	; 0
    612e:	05 c0       	rjmp	.+10     	; 0x613a <vfprintf+0x298>
    6130:	20 e1       	ldi	r18, 0x10	; 16
    6132:	30 e0       	ldi	r19, 0x00	; 0
    6134:	02 c0       	rjmp	.+4      	; 0x613a <vfprintf+0x298>
    6136:	20 e1       	ldi	r18, 0x10	; 16
    6138:	32 e0       	ldi	r19, 0x02	; 2
    613a:	f8 01       	movw	r30, r16
    613c:	b7 fe       	sbrs	r11, 7
    613e:	07 c0       	rjmp	.+14     	; 0x614e <vfprintf+0x2ac>
    6140:	60 81       	ld	r22, Z
    6142:	71 81       	ldd	r23, Z+1	; 0x01
    6144:	82 81       	ldd	r24, Z+2	; 0x02
    6146:	93 81       	ldd	r25, Z+3	; 0x03
    6148:	0c 5f       	subi	r16, 0xFC	; 252
    614a:	1f 4f       	sbci	r17, 0xFF	; 255
    614c:	06 c0       	rjmp	.+12     	; 0x615a <vfprintf+0x2b8>
    614e:	60 81       	ld	r22, Z
    6150:	71 81       	ldd	r23, Z+1	; 0x01
    6152:	80 e0       	ldi	r24, 0x00	; 0
    6154:	90 e0       	ldi	r25, 0x00	; 0
    6156:	0e 5f       	subi	r16, 0xFE	; 254
    6158:	1f 4f       	sbci	r17, 0xFF	; 255
    615a:	a3 01       	movw	r20, r6
    615c:	f1 d0       	rcall	.+482    	; 0x6340 <__ultoa_invert>
    615e:	88 2e       	mov	r8, r24
    6160:	86 18       	sub	r8, r6
    6162:	fb 2d       	mov	r31, r11
    6164:	ff 77       	andi	r31, 0x7F	; 127
    6166:	3f 2e       	mov	r3, r31
    6168:	36 fe       	sbrs	r3, 6
    616a:	0d c0       	rjmp	.+26     	; 0x6186 <vfprintf+0x2e4>
    616c:	23 2d       	mov	r18, r3
    616e:	2e 7f       	andi	r18, 0xFE	; 254
    6170:	a2 2e       	mov	r10, r18
    6172:	89 14       	cp	r8, r9
    6174:	58 f4       	brcc	.+22     	; 0x618c <vfprintf+0x2ea>
    6176:	34 fe       	sbrs	r3, 4
    6178:	0b c0       	rjmp	.+22     	; 0x6190 <vfprintf+0x2ee>
    617a:	32 fc       	sbrc	r3, 2
    617c:	09 c0       	rjmp	.+18     	; 0x6190 <vfprintf+0x2ee>
    617e:	83 2d       	mov	r24, r3
    6180:	8e 7e       	andi	r24, 0xEE	; 238
    6182:	a8 2e       	mov	r10, r24
    6184:	05 c0       	rjmp	.+10     	; 0x6190 <vfprintf+0x2ee>
    6186:	b8 2c       	mov	r11, r8
    6188:	a3 2c       	mov	r10, r3
    618a:	03 c0       	rjmp	.+6      	; 0x6192 <vfprintf+0x2f0>
    618c:	b8 2c       	mov	r11, r8
    618e:	01 c0       	rjmp	.+2      	; 0x6192 <vfprintf+0x2f0>
    6190:	b9 2c       	mov	r11, r9
    6192:	a4 fe       	sbrs	r10, 4
    6194:	0f c0       	rjmp	.+30     	; 0x61b4 <vfprintf+0x312>
    6196:	fe 01       	movw	r30, r28
    6198:	e8 0d       	add	r30, r8
    619a:	f1 1d       	adc	r31, r1
    619c:	80 81       	ld	r24, Z
    619e:	80 33       	cpi	r24, 0x30	; 48
    61a0:	21 f4       	brne	.+8      	; 0x61aa <vfprintf+0x308>
    61a2:	9a 2d       	mov	r25, r10
    61a4:	99 7e       	andi	r25, 0xE9	; 233
    61a6:	a9 2e       	mov	r10, r25
    61a8:	09 c0       	rjmp	.+18     	; 0x61bc <vfprintf+0x31a>
    61aa:	a2 fe       	sbrs	r10, 2
    61ac:	06 c0       	rjmp	.+12     	; 0x61ba <vfprintf+0x318>
    61ae:	b3 94       	inc	r11
    61b0:	b3 94       	inc	r11
    61b2:	04 c0       	rjmp	.+8      	; 0x61bc <vfprintf+0x31a>
    61b4:	8a 2d       	mov	r24, r10
    61b6:	86 78       	andi	r24, 0x86	; 134
    61b8:	09 f0       	breq	.+2      	; 0x61bc <vfprintf+0x31a>
    61ba:	b3 94       	inc	r11
    61bc:	a3 fc       	sbrc	r10, 3
    61be:	10 c0       	rjmp	.+32     	; 0x61e0 <vfprintf+0x33e>
    61c0:	a0 fe       	sbrs	r10, 0
    61c2:	06 c0       	rjmp	.+12     	; 0x61d0 <vfprintf+0x32e>
    61c4:	b2 14       	cp	r11, r2
    61c6:	80 f4       	brcc	.+32     	; 0x61e8 <vfprintf+0x346>
    61c8:	28 0c       	add	r2, r8
    61ca:	92 2c       	mov	r9, r2
    61cc:	9b 18       	sub	r9, r11
    61ce:	0d c0       	rjmp	.+26     	; 0x61ea <vfprintf+0x348>
    61d0:	b2 14       	cp	r11, r2
    61d2:	58 f4       	brcc	.+22     	; 0x61ea <vfprintf+0x348>
    61d4:	b6 01       	movw	r22, r12
    61d6:	80 e2       	ldi	r24, 0x20	; 32
    61d8:	90 e0       	ldi	r25, 0x00	; 0
    61da:	76 d0       	rcall	.+236    	; 0x62c8 <fputc>
    61dc:	b3 94       	inc	r11
    61de:	f8 cf       	rjmp	.-16     	; 0x61d0 <vfprintf+0x32e>
    61e0:	b2 14       	cp	r11, r2
    61e2:	18 f4       	brcc	.+6      	; 0x61ea <vfprintf+0x348>
    61e4:	2b 18       	sub	r2, r11
    61e6:	02 c0       	rjmp	.+4      	; 0x61ec <vfprintf+0x34a>
    61e8:	98 2c       	mov	r9, r8
    61ea:	21 2c       	mov	r2, r1
    61ec:	a4 fe       	sbrs	r10, 4
    61ee:	0f c0       	rjmp	.+30     	; 0x620e <vfprintf+0x36c>
    61f0:	b6 01       	movw	r22, r12
    61f2:	80 e3       	ldi	r24, 0x30	; 48
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	68 d0       	rcall	.+208    	; 0x62c8 <fputc>
    61f8:	a2 fe       	sbrs	r10, 2
    61fa:	16 c0       	rjmp	.+44     	; 0x6228 <vfprintf+0x386>
    61fc:	a1 fc       	sbrc	r10, 1
    61fe:	03 c0       	rjmp	.+6      	; 0x6206 <vfprintf+0x364>
    6200:	88 e7       	ldi	r24, 0x78	; 120
    6202:	90 e0       	ldi	r25, 0x00	; 0
    6204:	02 c0       	rjmp	.+4      	; 0x620a <vfprintf+0x368>
    6206:	88 e5       	ldi	r24, 0x58	; 88
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	b6 01       	movw	r22, r12
    620c:	0c c0       	rjmp	.+24     	; 0x6226 <vfprintf+0x384>
    620e:	8a 2d       	mov	r24, r10
    6210:	86 78       	andi	r24, 0x86	; 134
    6212:	51 f0       	breq	.+20     	; 0x6228 <vfprintf+0x386>
    6214:	a1 fe       	sbrs	r10, 1
    6216:	02 c0       	rjmp	.+4      	; 0x621c <vfprintf+0x37a>
    6218:	8b e2       	ldi	r24, 0x2B	; 43
    621a:	01 c0       	rjmp	.+2      	; 0x621e <vfprintf+0x37c>
    621c:	80 e2       	ldi	r24, 0x20	; 32
    621e:	a7 fc       	sbrc	r10, 7
    6220:	8d e2       	ldi	r24, 0x2D	; 45
    6222:	b6 01       	movw	r22, r12
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	50 d0       	rcall	.+160    	; 0x62c8 <fputc>
    6228:	89 14       	cp	r8, r9
    622a:	30 f4       	brcc	.+12     	; 0x6238 <vfprintf+0x396>
    622c:	b6 01       	movw	r22, r12
    622e:	80 e3       	ldi	r24, 0x30	; 48
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	4a d0       	rcall	.+148    	; 0x62c8 <fputc>
    6234:	9a 94       	dec	r9
    6236:	f8 cf       	rjmp	.-16     	; 0x6228 <vfprintf+0x386>
    6238:	8a 94       	dec	r8
    623a:	f3 01       	movw	r30, r6
    623c:	e8 0d       	add	r30, r8
    623e:	f1 1d       	adc	r31, r1
    6240:	80 81       	ld	r24, Z
    6242:	b6 01       	movw	r22, r12
    6244:	90 e0       	ldi	r25, 0x00	; 0
    6246:	40 d0       	rcall	.+128    	; 0x62c8 <fputc>
    6248:	81 10       	cpse	r8, r1
    624a:	f6 cf       	rjmp	.-20     	; 0x6238 <vfprintf+0x396>
    624c:	22 20       	and	r2, r2
    624e:	09 f4       	brne	.+2      	; 0x6252 <vfprintf+0x3b0>
    6250:	4e ce       	rjmp	.-868    	; 0x5eee <vfprintf+0x4c>
    6252:	b6 01       	movw	r22, r12
    6254:	80 e2       	ldi	r24, 0x20	; 32
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	37 d0       	rcall	.+110    	; 0x62c8 <fputc>
    625a:	2a 94       	dec	r2
    625c:	f7 cf       	rjmp	.-18     	; 0x624c <vfprintf+0x3aa>
    625e:	f6 01       	movw	r30, r12
    6260:	86 81       	ldd	r24, Z+6	; 0x06
    6262:	97 81       	ldd	r25, Z+7	; 0x07
    6264:	02 c0       	rjmp	.+4      	; 0x626a <vfprintf+0x3c8>
    6266:	8f ef       	ldi	r24, 0xFF	; 255
    6268:	9f ef       	ldi	r25, 0xFF	; 255
    626a:	2b 96       	adiw	r28, 0x0b	; 11
    626c:	0f b6       	in	r0, 0x3f	; 63
    626e:	f8 94       	cli
    6270:	de bf       	out	0x3e, r29	; 62
    6272:	0f be       	out	0x3f, r0	; 63
    6274:	cd bf       	out	0x3d, r28	; 61
    6276:	df 91       	pop	r29
    6278:	cf 91       	pop	r28
    627a:	1f 91       	pop	r17
    627c:	0f 91       	pop	r16
    627e:	ff 90       	pop	r15
    6280:	ef 90       	pop	r14
    6282:	df 90       	pop	r13
    6284:	cf 90       	pop	r12
    6286:	bf 90       	pop	r11
    6288:	af 90       	pop	r10
    628a:	9f 90       	pop	r9
    628c:	8f 90       	pop	r8
    628e:	7f 90       	pop	r7
    6290:	6f 90       	pop	r6
    6292:	5f 90       	pop	r5
    6294:	4f 90       	pop	r4
    6296:	3f 90       	pop	r3
    6298:	2f 90       	pop	r2
    629a:	08 95       	ret

0000629c <strnlen_P>:
    629c:	fc 01       	movw	r30, r24
    629e:	05 90       	lpm	r0, Z+
    62a0:	61 50       	subi	r22, 0x01	; 1
    62a2:	70 40       	sbci	r23, 0x00	; 0
    62a4:	01 10       	cpse	r0, r1
    62a6:	d8 f7       	brcc	.-10     	; 0x629e <strnlen_P+0x2>
    62a8:	80 95       	com	r24
    62aa:	90 95       	com	r25
    62ac:	8e 0f       	add	r24, r30
    62ae:	9f 1f       	adc	r25, r31
    62b0:	08 95       	ret

000062b2 <strnlen>:
    62b2:	fc 01       	movw	r30, r24
    62b4:	61 50       	subi	r22, 0x01	; 1
    62b6:	70 40       	sbci	r23, 0x00	; 0
    62b8:	01 90       	ld	r0, Z+
    62ba:	01 10       	cpse	r0, r1
    62bc:	d8 f7       	brcc	.-10     	; 0x62b4 <strnlen+0x2>
    62be:	80 95       	com	r24
    62c0:	90 95       	com	r25
    62c2:	8e 0f       	add	r24, r30
    62c4:	9f 1f       	adc	r25, r31
    62c6:	08 95       	ret

000062c8 <fputc>:
    62c8:	0f 93       	push	r16
    62ca:	1f 93       	push	r17
    62cc:	cf 93       	push	r28
    62ce:	df 93       	push	r29
    62d0:	fb 01       	movw	r30, r22
    62d2:	23 81       	ldd	r18, Z+3	; 0x03
    62d4:	21 fd       	sbrc	r18, 1
    62d6:	03 c0       	rjmp	.+6      	; 0x62de <fputc+0x16>
    62d8:	8f ef       	ldi	r24, 0xFF	; 255
    62da:	9f ef       	ldi	r25, 0xFF	; 255
    62dc:	2c c0       	rjmp	.+88     	; 0x6336 <fputc+0x6e>
    62de:	22 ff       	sbrs	r18, 2
    62e0:	16 c0       	rjmp	.+44     	; 0x630e <fputc+0x46>
    62e2:	46 81       	ldd	r20, Z+6	; 0x06
    62e4:	57 81       	ldd	r21, Z+7	; 0x07
    62e6:	24 81       	ldd	r18, Z+4	; 0x04
    62e8:	35 81       	ldd	r19, Z+5	; 0x05
    62ea:	42 17       	cp	r20, r18
    62ec:	53 07       	cpc	r21, r19
    62ee:	44 f4       	brge	.+16     	; 0x6300 <fputc+0x38>
    62f0:	a0 81       	ld	r26, Z
    62f2:	b1 81       	ldd	r27, Z+1	; 0x01
    62f4:	9d 01       	movw	r18, r26
    62f6:	2f 5f       	subi	r18, 0xFF	; 255
    62f8:	3f 4f       	sbci	r19, 0xFF	; 255
    62fa:	31 83       	std	Z+1, r19	; 0x01
    62fc:	20 83       	st	Z, r18
    62fe:	8c 93       	st	X, r24
    6300:	26 81       	ldd	r18, Z+6	; 0x06
    6302:	37 81       	ldd	r19, Z+7	; 0x07
    6304:	2f 5f       	subi	r18, 0xFF	; 255
    6306:	3f 4f       	sbci	r19, 0xFF	; 255
    6308:	37 83       	std	Z+7, r19	; 0x07
    630a:	26 83       	std	Z+6, r18	; 0x06
    630c:	14 c0       	rjmp	.+40     	; 0x6336 <fputc+0x6e>
    630e:	8b 01       	movw	r16, r22
    6310:	ec 01       	movw	r28, r24
    6312:	fb 01       	movw	r30, r22
    6314:	00 84       	ldd	r0, Z+8	; 0x08
    6316:	f1 85       	ldd	r31, Z+9	; 0x09
    6318:	e0 2d       	mov	r30, r0
    631a:	19 95       	eicall
    631c:	89 2b       	or	r24, r25
    631e:	e1 f6       	brne	.-72     	; 0x62d8 <fputc+0x10>
    6320:	d8 01       	movw	r26, r16
    6322:	16 96       	adiw	r26, 0x06	; 6
    6324:	8d 91       	ld	r24, X+
    6326:	9c 91       	ld	r25, X
    6328:	17 97       	sbiw	r26, 0x07	; 7
    632a:	01 96       	adiw	r24, 0x01	; 1
    632c:	17 96       	adiw	r26, 0x07	; 7
    632e:	9c 93       	st	X, r25
    6330:	8e 93       	st	-X, r24
    6332:	16 97       	sbiw	r26, 0x06	; 6
    6334:	ce 01       	movw	r24, r28
    6336:	df 91       	pop	r29
    6338:	cf 91       	pop	r28
    633a:	1f 91       	pop	r17
    633c:	0f 91       	pop	r16
    633e:	08 95       	ret

00006340 <__ultoa_invert>:
    6340:	fa 01       	movw	r30, r20
    6342:	aa 27       	eor	r26, r26
    6344:	28 30       	cpi	r18, 0x08	; 8
    6346:	51 f1       	breq	.+84     	; 0x639c <__ultoa_invert+0x5c>
    6348:	20 31       	cpi	r18, 0x10	; 16
    634a:	81 f1       	breq	.+96     	; 0x63ac <__ultoa_invert+0x6c>
    634c:	e8 94       	clt
    634e:	6f 93       	push	r22
    6350:	6e 7f       	andi	r22, 0xFE	; 254
    6352:	6e 5f       	subi	r22, 0xFE	; 254
    6354:	7f 4f       	sbci	r23, 0xFF	; 255
    6356:	8f 4f       	sbci	r24, 0xFF	; 255
    6358:	9f 4f       	sbci	r25, 0xFF	; 255
    635a:	af 4f       	sbci	r26, 0xFF	; 255
    635c:	b1 e0       	ldi	r27, 0x01	; 1
    635e:	3e d0       	rcall	.+124    	; 0x63dc <__ultoa_invert+0x9c>
    6360:	b4 e0       	ldi	r27, 0x04	; 4
    6362:	3c d0       	rcall	.+120    	; 0x63dc <__ultoa_invert+0x9c>
    6364:	67 0f       	add	r22, r23
    6366:	78 1f       	adc	r23, r24
    6368:	89 1f       	adc	r24, r25
    636a:	9a 1f       	adc	r25, r26
    636c:	a1 1d       	adc	r26, r1
    636e:	68 0f       	add	r22, r24
    6370:	79 1f       	adc	r23, r25
    6372:	8a 1f       	adc	r24, r26
    6374:	91 1d       	adc	r25, r1
    6376:	a1 1d       	adc	r26, r1
    6378:	6a 0f       	add	r22, r26
    637a:	71 1d       	adc	r23, r1
    637c:	81 1d       	adc	r24, r1
    637e:	91 1d       	adc	r25, r1
    6380:	a1 1d       	adc	r26, r1
    6382:	20 d0       	rcall	.+64     	; 0x63c4 <__ultoa_invert+0x84>
    6384:	09 f4       	brne	.+2      	; 0x6388 <__ultoa_invert+0x48>
    6386:	68 94       	set
    6388:	3f 91       	pop	r19
    638a:	2a e0       	ldi	r18, 0x0A	; 10
    638c:	26 9f       	mul	r18, r22
    638e:	11 24       	eor	r1, r1
    6390:	30 19       	sub	r19, r0
    6392:	30 5d       	subi	r19, 0xD0	; 208
    6394:	31 93       	st	Z+, r19
    6396:	de f6       	brtc	.-74     	; 0x634e <__ultoa_invert+0xe>
    6398:	cf 01       	movw	r24, r30
    639a:	08 95       	ret
    639c:	46 2f       	mov	r20, r22
    639e:	47 70       	andi	r20, 0x07	; 7
    63a0:	40 5d       	subi	r20, 0xD0	; 208
    63a2:	41 93       	st	Z+, r20
    63a4:	b3 e0       	ldi	r27, 0x03	; 3
    63a6:	0f d0       	rcall	.+30     	; 0x63c6 <__ultoa_invert+0x86>
    63a8:	c9 f7       	brne	.-14     	; 0x639c <__ultoa_invert+0x5c>
    63aa:	f6 cf       	rjmp	.-20     	; 0x6398 <__ultoa_invert+0x58>
    63ac:	46 2f       	mov	r20, r22
    63ae:	4f 70       	andi	r20, 0x0F	; 15
    63b0:	40 5d       	subi	r20, 0xD0	; 208
    63b2:	4a 33       	cpi	r20, 0x3A	; 58
    63b4:	18 f0       	brcs	.+6      	; 0x63bc <__ultoa_invert+0x7c>
    63b6:	49 5d       	subi	r20, 0xD9	; 217
    63b8:	31 fd       	sbrc	r19, 1
    63ba:	40 52       	subi	r20, 0x20	; 32
    63bc:	41 93       	st	Z+, r20
    63be:	02 d0       	rcall	.+4      	; 0x63c4 <__ultoa_invert+0x84>
    63c0:	a9 f7       	brne	.-22     	; 0x63ac <__ultoa_invert+0x6c>
    63c2:	ea cf       	rjmp	.-44     	; 0x6398 <__ultoa_invert+0x58>
    63c4:	b4 e0       	ldi	r27, 0x04	; 4
    63c6:	a6 95       	lsr	r26
    63c8:	97 95       	ror	r25
    63ca:	87 95       	ror	r24
    63cc:	77 95       	ror	r23
    63ce:	67 95       	ror	r22
    63d0:	ba 95       	dec	r27
    63d2:	c9 f7       	brne	.-14     	; 0x63c6 <__ultoa_invert+0x86>
    63d4:	00 97       	sbiw	r24, 0x00	; 0
    63d6:	61 05       	cpc	r22, r1
    63d8:	71 05       	cpc	r23, r1
    63da:	08 95       	ret
    63dc:	9b 01       	movw	r18, r22
    63de:	ac 01       	movw	r20, r24
    63e0:	0a 2e       	mov	r0, r26
    63e2:	06 94       	lsr	r0
    63e4:	57 95       	ror	r21
    63e6:	47 95       	ror	r20
    63e8:	37 95       	ror	r19
    63ea:	27 95       	ror	r18
    63ec:	ba 95       	dec	r27
    63ee:	c9 f7       	brne	.-14     	; 0x63e2 <__ultoa_invert+0xa2>
    63f0:	62 0f       	add	r22, r18
    63f2:	73 1f       	adc	r23, r19
    63f4:	84 1f       	adc	r24, r20
    63f6:	95 1f       	adc	r25, r21
    63f8:	a0 1d       	adc	r26, r0
    63fa:	08 95       	ret

000063fc <_exit>:
    63fc:	f8 94       	cli

000063fe <__stop_program>:
    63fe:	ff cf       	rjmp	.-2      	; 0x63fe <__stop_program>
